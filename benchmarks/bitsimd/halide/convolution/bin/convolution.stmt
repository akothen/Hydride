module name=convolution, target=x86-64-linux-avx-avx2-avx512-avx512_skylake-f16c-fma-sse41
external_plus_metadata func convolution (IMG, Filter, Output) {
assert((uint64)reinterpret((halide_buffer_t *)Output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("Output"))
assert((uint64)reinterpret((halide_buffer_t *)IMG.buffer) != (uint64)0, halide_error_buffer_argument_is_null("IMG"))
assert((uint64)reinterpret((halide_buffer_t *)Filter.buffer) != (uint64)0, halide_error_buffer_argument_is_null("Filter"))
let Filter = (void *)_halide_buffer_get_host((halide_buffer_t *)Filter.buffer)
let Filter.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)Filter.buffer)
let Filter.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)Filter.buffer)
let Filter.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)Filter.buffer)
let Filter.min.0 = _halide_buffer_get_min((halide_buffer_t *)Filter.buffer, 0)
let Filter.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)Filter.buffer, 0)
let Filter.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)Filter.buffer, 0)
let Filter.min.1 = _halide_buffer_get_min((halide_buffer_t *)Filter.buffer, 1)
let Filter.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)Filter.buffer, 1)
let Filter.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)Filter.buffer, 1)
let Filter.min.2 = _halide_buffer_get_min((halide_buffer_t *)Filter.buffer, 2)
let Filter.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)Filter.buffer, 2)
let Filter.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)Filter.buffer, 2)
let IMG = (void *)_halide_buffer_get_host((halide_buffer_t *)IMG.buffer)
let IMG.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)IMG.buffer)
let IMG.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)IMG.buffer)
let IMG.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)IMG.buffer)
let IMG.min.0 = _halide_buffer_get_min((halide_buffer_t *)IMG.buffer, 0)
let IMG.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)IMG.buffer, 0)
let IMG.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)IMG.buffer, 0)
let IMG.min.1 = _halide_buffer_get_min((halide_buffer_t *)IMG.buffer, 1)
let IMG.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)IMG.buffer, 1)
let IMG.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)IMG.buffer, 1)
let IMG.min.2 = _halide_buffer_get_min((halide_buffer_t *)IMG.buffer, 2)
let IMG.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)IMG.buffer, 2)
let IMG.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)IMG.buffer, 2)
let Output = (void *)_halide_buffer_get_host((halide_buffer_t *)Output.buffer)
let Output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)Output.buffer)
let Output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)Output.buffer)
let Output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)Output.buffer)
let Output.min.0 = _halide_buffer_get_min((halide_buffer_t *)Output.buffer, 0)
let Output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)Output.buffer, 0)
let Output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)Output.buffer, 0)
let Output.min.1 = _halide_buffer_get_min((halide_buffer_t *)Output.buffer, 1)
let Output.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)Output.buffer, 1)
let Output.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)Output.buffer, 1)
let Output.min.2 = _halide_buffer_get_min((halide_buffer_t *)Output.buffer, 2)
let Output.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)Output.buffer, 2)
let Output.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)Output.buffer, 2)
let IMG.extent.0.required.s = let t179 = (IMG.extent.0 + IMG.min.0) in (max(min((max(-1 - Output.extent.0, max(Output.extent.0, 1) + -1) + (Filter.extent.0/2)) + Output.min.0, t179 + -1), IMG.min.0) - max(min((((Filter.extent.0/2) + Output.min.0) - Filter.extent.0) + 2, t179) + -1, IMG.min.0))
let IMG.min.0.required = max(min((((Filter.extent.0/2) + Output.min.0) - Filter.extent.0) + 2, IMG.extent.0 + IMG.min.0) + -1, IMG.min.0)
let IMG.extent.1.required.s = let t180 = (0 < Output.extent.0) in (let t181 = ((((((Output.extent.0*Output.extent.1) + -1)/32)*32) + 31)/Output.extent.0) in (let t182 = (IMG.extent.1 + IMG.min.1) in (max(min((select(t180, t181, 0) + (Filter.extent.1/2)) + Output.min.1, t182 + -1), IMG.min.1) - max(min((((select(t180, 0, t181) + (Filter.extent.1/2)) + Output.min.1) - Filter.extent.1) + 2, t182) + -1, IMG.min.1))))
let IMG.min.1.required = max(min((((select(0 < Output.extent.0, 0, (((((Output.extent.0*Output.extent.1) + -1)/32)*32) + 31)/Output.extent.0) + (Filter.extent.1/2)) + Output.min.1) - Filter.extent.1) + 2, IMG.extent.1 + IMG.min.1) + -1, IMG.min.1)
let IMG.extent.2.required = max(min(IMG.min.2, 0) + IMG.extent.2, IMG.min.2 + 1) - max(min(IMG.extent.2 + IMG.min.2, 1) + -1, IMG.min.2)
let IMG.min.2.required = max(min(IMG.extent.2 + IMG.min.2, 1) + -1, IMG.min.2)
let IMG.stride.2.required = (IMG.extent.0.required.s + 1)*(IMG.extent.1.required.s + 1)
let Output.extent.0.required.s = max(0 - Output.extent.0, Output.extent.0)
let Output.extent.1.required.s = let t183 = (0 < Output.extent.0) in (let t184 = ((((((Output.extent.0*Output.extent.1) + -1)/32)*32) + 31)/Output.extent.0) in (max(select(t183, t184, 0), Output.extent.1 + -1) - min(select(t183, 0, t184), 0)))
let Output.min.1.required.s = select(0 < Output.extent.0, 0, (((((Output.extent.0*Output.extent.1) + -1)/32)*32) + 31)/Output.extent.0)
let Output.stride.2.required = max(Output.extent.0.required.s, 1)*(Output.extent.1.required.s + 1)
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)Filter.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)Filter.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)Filter.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 3, (halide_dimension_t *)make_struct(0, Filter.extent.0, 1, 0, 0, Filter.extent.1, Filter.extent.0, 0, Output.min.2, Output.extent.2, Filter.extent.0*Filter.extent.1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)IMG.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)IMG.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)IMG.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 3, (halide_dimension_t *)make_struct(IMG.min.0.required, IMG.extent.0.required.s + 1, 1, 0, IMG.min.1.required, IMG.extent.1.required.s + 1, IMG.extent.0.required.s + 1, 0, IMG.min.2.required, IMG.extent.2.required, IMG.stride.2.required, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)Output.buffer)) {
 let t185 = max(Output.extent.0.required.s, 1) in (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)Output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)Output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 3, (halide_dimension_t *)make_struct(Output.min.0, t185, 1, 0, min(Output.min.1.required.s, 0) + Output.min.1, Output.extent.1.required.s + 1, t185, 0, Output.min.2, Output.extent.2, Output.stride.2.required, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)Output.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)Filter.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)IMG.buffer)))) {
 assert(Filter.type == (uint32)73728, halide_error_bad_type("Input buffer Filter", Filter.type, (uint32)73728))
 assert(Filter.dimensions == 3, halide_error_bad_dimensions("Input buffer Filter", Filter.dimensions, 3))
 assert(IMG.type == (uint32)73728, halide_error_bad_type("Input buffer IMG", IMG.type, (uint32)73728))
 assert(IMG.dimensions == 3, halide_error_bad_dimensions("Input buffer IMG", IMG.dimensions, 3))
 assert(Output.type == (uint32)73728, halide_error_bad_type("Output buffer Output", Output.type, (uint32)73728))
 assert(Output.dimensions == 3, halide_error_bad_dimensions("Output buffer Output", Output.dimensions, 3))
 assert((Filter.min.0 <= 0) && (0 <= Filter.min.0), halide_error_access_out_of_bounds("Input buffer Filter", 0, 0, Filter.extent.0 + -1, Filter.min.0, (Filter.extent.0 + Filter.min.0) + -1))
 assert(0 <= Filter.extent.0, halide_error_buffer_extents_negative("Input buffer Filter", 0, Filter.extent.0))
 assert((Filter.min.1 <= 0) && (0 <= Filter.min.1), halide_error_access_out_of_bounds("Input buffer Filter", 1, 0, Filter.extent.1 + -1, Filter.min.1, (Filter.extent.1 + Filter.min.1) + -1))
 assert(0 <= Filter.extent.1, halide_error_buffer_extents_negative("Input buffer Filter", 1, Filter.extent.1))
 assert((Filter.min.2 <= Output.min.2) && ((Output.extent.2 + Output.min.2) <= (Filter.extent.2 + Filter.min.2)), halide_error_access_out_of_bounds("Input buffer Filter", 2, Output.min.2, (Output.extent.2 + Output.min.2) + -1, Filter.min.2, (Filter.extent.2 + Filter.min.2) + -1))
 assert(0 <= Filter.extent.2, halide_error_buffer_extents_negative("Input buffer Filter", 2, Filter.extent.2))
 assert((IMG.min.0 <= IMG.min.0.required) && (((IMG.extent.0.required.s + IMG.min.0.required) + 1) <= (IMG.extent.0 + IMG.min.0)), halide_error_access_out_of_bounds("Input buffer IMG", 0, IMG.min.0.required, IMG.extent.0.required.s + IMG.min.0.required, IMG.min.0, (IMG.extent.0 + IMG.min.0) + -1))
 assert(0 <= IMG.extent.0, halide_error_buffer_extents_negative("Input buffer IMG", 0, IMG.extent.0))
 assert((IMG.min.1 <= IMG.min.1.required) && (((IMG.extent.1.required.s + IMG.min.1.required) + 1) <= (IMG.extent.1 + IMG.min.1)), halide_error_access_out_of_bounds("Input buffer IMG", 1, IMG.min.1.required, IMG.extent.1.required.s + IMG.min.1.required, IMG.min.1, (IMG.extent.1 + IMG.min.1) + -1))
 assert(0 <= IMG.extent.1, halide_error_buffer_extents_negative("Input buffer IMG", 1, IMG.extent.1))
 assert((IMG.min.2 <= IMG.min.2.required) && ((IMG.extent.2.required + IMG.min.2.required) <= (IMG.extent.2 + IMG.min.2)), halide_error_access_out_of_bounds("Input buffer IMG", 2, IMG.min.2.required, (IMG.extent.2.required + IMG.min.2.required) + -1, IMG.min.2, (IMG.extent.2 + IMG.min.2) + -1))
 assert(0 <= IMG.extent.2, halide_error_buffer_extents_negative("Input buffer IMG", 2, IMG.extent.2))
 assert(max(Output.extent.0.required.s, 1) <= Output.extent.0, halide_error_access_out_of_bounds("Output buffer Output", 0, Output.min.0, (max(Output.extent.0.required.s, 1) + Output.min.0) + -1, Output.min.0, (Output.extent.0 + Output.min.0) + -1))
 assert((0 <= Output.min.1.required.s) && ((((min(Output.min.1.required.s, 0) + Output.min.1) + Output.extent.1.required.s) + 1) <= (Output.extent.1 + Output.min.1)), let t186 = (min(Output.min.1.required.s, 0) + Output.min.1) in halide_error_access_out_of_bounds("Output buffer Output", 1, t186, t186 + Output.extent.1.required.s, Output.min.1, (Output.extent.1 + Output.min.1) + -1))
 assert(0 <= Output.extent.1, halide_error_buffer_extents_negative("Output buffer Output", 1, Output.extent.1))
 assert(0 <= Output.extent.2, halide_error_buffer_extents_negative("Output buffer Output", 2, Output.extent.2))
 assert(Filter.stride.0 == 1, halide_error_constraint_violated("Filter.stride.0", Filter.stride.0, "1", 1))
 assert(IMG.stride.0 == 1, halide_error_constraint_violated("IMG.stride.0", IMG.stride.0, "1", 1))
 assert(Output.stride.0 == 1, halide_error_constraint_violated("Output.stride.0", Output.stride.0, "1", 1))
 let Filter.total_extent.1 = int64(Filter.extent.1)*int64(Filter.extent.0)
 let Filter.total_extent.2 = Filter.total_extent.1*int64(Filter.extent.2)
 let IMG.total_extent.1 = int64(IMG.extent.1)*int64(IMG.extent.0)
 let IMG.total_extent.2 = IMG.total_extent.1*int64(IMG.extent.2)
 let Output.total_extent.1 = int64(Output.extent.1)*int64(Output.extent.0)
 let Output.total_extent.2 = Output.total_extent.1*int64(Output.extent.2)
 assert(uint64(Filter.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("Filter", uint64(Filter.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(Filter.extent.1)*int64(Filter.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("Filter", (uint64)abs(int64(Filter.extent.1)*int64(Filter.stride.1)), (uint64)2147483647))
 assert(Filter.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("Filter", Filter.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(Filter.extent.2)*int64(Filter.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("Filter", (uint64)abs(int64(Filter.extent.2)*int64(Filter.stride.2)), (uint64)2147483647))
 assert(Filter.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("Filter", Filter.total_extent.2, (int64)2147483647))
 assert(uint64(IMG.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("IMG", uint64(IMG.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(IMG.extent.1)*int64(IMG.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("IMG", (uint64)abs(int64(IMG.extent.1)*int64(IMG.stride.1)), (uint64)2147483647))
 assert(IMG.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("IMG", IMG.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(IMG.extent.2)*int64(IMG.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("IMG", (uint64)abs(int64(IMG.extent.2)*int64(IMG.stride.2)), (uint64)2147483647))
 assert(IMG.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("IMG", IMG.total_extent.2, (int64)2147483647))
 assert(uint64(Output.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("Output", uint64(Output.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(Output.extent.1)*int64(Output.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("Output", (uint64)abs(int64(Output.extent.1)*int64(Output.stride.1)), (uint64)2147483647))
 assert(Output.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("Output", Output.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(Output.extent.2)*int64(Output.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("Output", (uint64)abs(int64(Output.extent.2)*int64(Output.stride.2)), (uint64)2147483647))
 assert(Output.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("Output", Output.total_extent.2, (int64)2147483647))
 assert(!Filter.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer Filter"))
 assert(!IMG.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer IMG"))
 assert(!Output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer Output"))
 assert(Filter != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer Filter"))
 assert(IMG != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer IMG"))
 assert(Output != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer Output"))
 produce Output {
  let t146 = 0 - ((Output.min.2*Output.stride.2) + (Output.min.1*Output.stride.1))
  for (Output.s0.c_out.rebased, 0, Output.extent.2) {
   let t147 = ((Output.min.2 + Output.s0.c_out.rebased)*Output.stride.2) + t146
   for (Output.s0.y.rebased, 0, Output.extent.1) {
    let t148 = ((Output.min.1 + Output.s0.y.rebased)*Output.stride.1) + t147
    for (Output.s0.x.rebased, 0, Output.extent.0) {
     Output[Output.s0.x.rebased + t148] = 0
    }
   }
  }
  let t159 = min(max(IMG.min.2, 0), IMG.extent.2)
  let t151 = max(min(IMG.min.2, 0) + IMG.extent.2, t159)
  let t149 = ((Output.extent.0*Output.extent.1) + 31)/32
  let t158 = Output.min.2 - Filter.min.2
  let t154 = (Filter.extent.1/2) + Output.min.1
  let t156 = (Filter.extent.0/2) + Output.min.0
  let t152 = (Output.min.1*Output.stride.1) + Output.min.0
  let t153 = (IMG.min.1*IMG.stride.1) + IMG.min.0
  let t155 = IMG.extent.1 + IMG.min.1
  let t157 = IMG.extent.0 + IMG.min.0
  for (Output.s1.c_out.rebased, 0, Output.extent.2) {
   let t161 = (Output.s1.c_out.rebased + t158)*Filter.stride.2
   let t160 = (Output.s1.c_out.rebased*Output.stride.2) - t152
   let t162 = t151 - t159
   let t165 = t151 - IMG.min.2
   let t164 = IMG.extent.2 - t151
   for (Output.s1.x.x.x, 0, t149) {
    let t166 = Output.s1.x.x.x*32
    for (Output.s1.r10$z, 0, t159) {
     let t167 = (max(min(Output.s1.r10$z - IMG.min.2, IMG.extent.2 + -1), 0)*IMG.stride.2) - t153
     for (Output.s1.r10$y, 0, Filter.extent.1) {
      let t168 = t154 - Output.s1.r10$y
      let t169 = (Filter.stride.1*Output.s1.r10$y) + t161
      for (Output.s1.r10$x, 0, Filter.extent.0) {
       let t120 = ramp(t166, 1, 32)/x32(Output.extent.0)
       let t121 = ramp(t166, 1, 32) % x32(Output.extent.0)
       let t122 = (((t120 + x32(Output.min.1))*x32(Output.stride.1)) + x32(Output.min.0 + t160)) + t121
       Output[t122] = Output[t122] + (IMG[max(min(t121 + x32(t156 - Output.s1.r10$x), x32(t157 + -1)), x32(IMG.min.0)) + ((max(min(t120 + x32(t168), x32(t155 + -1)), x32(IMG.min.1))*x32(IMG.stride.1)) + x32(t167))]*x32(Filter[Output.s1.r10$x + t169]))
      }
     }
    }
    let t170 = Output.s1.x.x.x*32
    let t171 = t159 - IMG.min.2
    for (Output.s1.r10$z.rebased, 0, t162) {
     let t172 = ((Output.s1.r10$z.rebased + t171)*IMG.stride.2) - t153
     for (Output.s1.r10$y, 0, Filter.extent.1) {
      let t173 = t154 - Output.s1.r10$y
      let t174 = (Filter.stride.1*Output.s1.r10$y) + t161
      for (Output.s1.r10$x, 0, Filter.extent.0) {
       let t123 = ramp(t170, 1, 32)/x32(Output.extent.0)
       let t124 = ramp(t170, 1, 32) % x32(Output.extent.0)
       let t125 = (((t123 + x32(Output.min.1))*x32(Output.stride.1)) + x32(Output.min.0 + t160)) + t124
       Output[t125] = Output[t125] + (IMG[max(min(t124 + x32(t156 - Output.s1.r10$x), x32(t157 + -1)), x32(IMG.min.0)) + ((max(min(t123 + x32(t173), x32(t155 + -1)), x32(IMG.min.1))*x32(IMG.stride.1)) + x32(t172))]*x32(Filter[Output.s1.r10$x + t174]))
      }
     }
    }
    let t175 = Output.s1.x.x.x*32
    for (Output.s1.r10$z.rebased, 0, t164) {
     let t176 = (max(min(Output.s1.r10$z.rebased + t165, IMG.extent.2 + -1), 0)*IMG.stride.2) - t153
     for (Output.s1.r10$y, 0, Filter.extent.1) {
      let t177 = t154 - Output.s1.r10$y
      let t178 = (Filter.stride.1*Output.s1.r10$y) + t161
      for (Output.s1.r10$x, 0, Filter.extent.0) {
       let t126 = ramp(t175, 1, 32)/x32(Output.extent.0)
       let t127 = ramp(t175, 1, 32) % x32(Output.extent.0)
       let t128 = (((t126 + x32(Output.min.1))*x32(Output.stride.1)) + x32(Output.min.0 + t160)) + t127
       Output[t128] = Output[t128] + (IMG[max(min(t127 + x32(t156 - Output.s1.r10$x), x32(t157 + -1)), x32(IMG.min.0)) + ((max(min(t126 + x32(t177), x32(t155 + -1)), x32(IMG.min.1))*x32(IMG.stride.1)) + x32(t176))]*x32(Filter[Output.s1.r10$x + t178]))
      }
     }
    }
   }
  }
 }
}
}


