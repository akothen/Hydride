; ModuleID = 'histogram'
source_filename = "/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/posix_allocator.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64--linux-gnu"

%struct.timespec = type { i64, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::hash_table" = type { [1024 x %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"] }
%"struct.Halide::Runtime::Internal::Synchronization::hash_bucket" = type { %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* }
%"class.Halide::Runtime::Internal::Synchronization::word_lock" = type { i64 }
%"struct.Halide::Runtime::Internal::Synchronization::queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", i64, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::thread_parker" = type <{ %struct.pthread_mutex_t, %struct.pthread_mutex_t, i8, [7 x i8] }>
%struct.pthread_mutex_t = type { [8 x i64] }
%"struct.Halide::Runtime::Internal::work_queue_t" = type { %struct.halide_mutex, i32, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i32, i32, [4 x i8], %struct.halide_mutex, %struct.halide_mutex, %struct.halide_mutex, i32, i32, [256 x %struct.halide_thread*], i8, i8, i32 }
%"struct.Halide::Runtime::Internal::work" = type { %struct.halide_parallel_task_t, i32 (i8*, i32, i8*)*, %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"*, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i8*, i32, i32, i32, i8 }
%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8, [7 x i8] }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32, [4 x i8] }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex = type { [1 x i64] }
%struct.halide_thread = type opaque
%"class.Halide::Runtime::Internal::TraceBuffer" = type { %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock", i32, i32, [1048576 x i8] }
%"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" = type { i32 }
%struct.halide_trace_event_t = type <{ i8*, i8*, i32*, i8*, %struct.halide_type_t, i32, i32, i32, i32, [4 x i8] }>
%struct.halide_type_t = type { i8, i8, i16 }
%"struct.Halide::Runtime::Internal::CacheEntry" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, i8*, i64, i8*, i32, i32, i32, i32, %struct.halide_dimension_t*, %struct.halide_buffer_t*, i64, i8, [7 x i8] }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_profiler_state = type { %struct.halide_mutex, i32, i32, i32, i32, %struct.halide_profiler_pipeline_stats*, void (i32*, i32*)*, %struct.halide_thread* }
%struct.halide_profiler_pipeline_stats = type { i64, i64, i64, i64, i64, i64, i8*, %struct.halide_profiler_func_stats*, i8*, i32, i32, i32, i32, i32, [4 x i8] }
%struct.halide_profiler_func_stats = type { i64, i64, i64, i64, i64, i64, i64, i8*, i32, [4 x i8] }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_scalar_value_t = type { %union.anon.28 }
%union.anon.28 = type { double }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64* }
%"struct.Halide::Runtime::Internal::Synchronization::parking_control" = type { i32 (...)** }
%"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* }
%"struct.Halide::Runtime::Internal::Synchronization::validate_action" = type { i8, [7 x i8], i64 }
%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"* }
%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair" = type { %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* }
%"struct.Halide::Runtime::Internal::spawned_thread" = type { void (i8*)*, i8*, i64 }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%"struct.Halide::Runtime::Internal::halide_tiff_header" = type <{ i16, i16, i32, i16, [15 x %"struct.Halide::Runtime::Internal::tiff_tag"], i32, [2 x i32], [2 x i32] }>
%"struct.Halide::Runtime::Internal::tiff_tag" = type { i16, i16, i32, %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" }
%"struct.Halide::Runtime::Internal::CacheBlockHeader" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, i32, [4 x i8] }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = comdat any

@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i64)* @halide_default_malloc, align 8
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 8
@_ZN6Halide7Runtime8Internal13error_handlerE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_error, align 8
@.str = private unnamed_addr constant [8 x i8] c"Error: \00", align 1
@_ZN6Halide7Runtime8Internal12custom_printE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_print, align 8
@halide_reference_clock_inited = linkonce local_unnamed_addr global i8 0, align 1
@halide_reference_clock = linkonce global %struct.timespec zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal15Synchronization5tableE = linkonce global %"struct.Halide::Runtime::Internal::Synchronization::hash_table" zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal10work_queueE = linkonce global %"struct.Halide::Runtime::Internal::work_queue_t" { %struct.halide_mutex zeroinitializer, i32 0, i32 0, %"struct.Halide::Runtime::Internal::work"* null, i32 0, i32 0, i32 0, [4 x i8] undef, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, i32 0, i32 0, [256 x %struct.halide_thread*] zeroinitializer, i8 0, i8 0, i32 0 }, align 8
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 8
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 8
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 8
@_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5 = private unnamed_addr constant [137 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/synchronization_common.h:386 halide_abort_if_false() failed: next != nullptr\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5.6 = private unnamed_addr constant [131 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/synchronization_common.h:994 halide_abort_if_false() failed: val & 0x1\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.6 = private unnamed_addr constant [193 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/thread_pool_common.h:155 halide_abort_if_false() failed: bytes == limit && \22Logic error in thread pool work queue initialization.\\n\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [270 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/thread_pool_common.h:527 halide_abort_if_false() failed: (min_threads <= ((task_parent->task.min_threads * task_parent->active_workers) - task_parent->threads_reserved)) && \22Logic error: thread over commit.\\n\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"HL_NUM_THREADS\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"HL_NUMTHREADS\00", align 1
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 8
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 8
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 8
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 8
@llvm.global_dtors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @halide_thread_pool_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_trace_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_cache_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_profiler_shutdown, i8* null }]
@_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.4 = private unnamed_addr constant [38 x i8] c"halide_set_num_threads: must be >= 0.\00", align 1
@_ZN6Halide7Runtime8Internal17custom_get_symbolE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_get_symbol, align 8
@_ZN6Halide7Runtime8Internal19custom_load_libraryE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_load_library, align 8
@_ZN6Halide7Runtime8Internal25custom_get_library_symbolE = linkonce local_unnamed_addr global i8* (i8*, i8*)* @halide_default_get_library_symbol, align 8
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@_ZN6Halide7Runtime8Internal19halide_trace_bufferE = linkonce local_unnamed_addr global %"class.Halide::Runtime::Internal::TraceBuffer"* null, align 8
@_ZN6Halide7Runtime8Internal17halide_trace_fileE = linkonce local_unnamed_addr global i32 -1, align 4
@_ZN6Halide7Runtime8Internal22halide_trace_file_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE = linkonce local_unnamed_addr global i8* null, align 8
@_ZN6Halide7Runtime8Internal19halide_custom_traceE = linkonce local_unnamed_addr global i32 (i8*, %struct.halide_trace_event_t*)* @halide_default_trace, align 8
@_ZZ20halide_default_traceE3ids = internal global i32 1, align 4
@.str.32 = private unnamed_addr constant [151 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/tracing.cpp:115 halide_abort_if_false() failed: success && \22Could not write to trace file\22\0A\00", align 1
@.str.31 = private unnamed_addr constant [127 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/tracing.cpp:87 halide_abort_if_false() failed: size <= buffer_size\0A\00", align 1
@.str.1.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.11 = private unnamed_addr constant [147 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/tracing.cpp:218 halide_abort_if_false() failed: print_bits <= 64 && \22Tracing bad type\22\0A\00", align 1
@__const.halide_default_trace.event_types = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.17, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0)], align 8
@.str.17 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c">)\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c">, <\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c" = <\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.24 = private unnamed_addr constant [149 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/tracing.cpp:287 halide_abort_if_false() failed: print_bits >= 16 && \22Tracing a bad type\22\0A\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c" tag = \22\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.3.12 = private unnamed_addr constant [5 x i8] c"Load\00", align 1
@.str.4.13 = private unnamed_addr constant [6 x i8] c"Store\00", align 1
@.str.5.14 = private unnamed_addr constant [18 x i8] c"Begin realization\00", align 1
@.str.6.15 = private unnamed_addr constant [16 x i8] c"End realization\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"Produce\00", align 1
@.str.8.16 = private unnamed_addr constant [12 x i8] c"End produce\00", align 1
@.str.9.17 = private unnamed_addr constant [8 x i8] c"Consume\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"End consume\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Begin pipeline\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"End pipeline\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Tag\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"HL_TRACE_FILE\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.30 = private unnamed_addr constant [146 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/tracing.cpp:351 halide_abort_if_false() failed: file && \22Failed to open trace file\\n\22\0A\00", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE = linkonce local_unnamed_addr global [10 x i16] [i16 3, i16 3, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2], align 2
@_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\06\09\08\0B\0A\0D\0C\0F\0E", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\09\02\01\04\03\06\05\0D\0C", align 1
@.str.34 = private unnamed_addr constant [51 x i8] c"Bounds query buffer passed to halide_debug_to_file\00", align 1
@.str.1.35 = private unnamed_addr constant [59 x i8] c"Can't debug_to_file a Func with more than four dimensions\0A\00", align 1
@.str.2.36 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.3.37 = private unnamed_addr constant [6 x i8] c".tiff\00", align 1
@.str.4.38 = private unnamed_addr constant [5 x i8] c".tif\00", align 1
@.str.5.39 = private unnamed_addr constant [5 x i8] c".mat\00", align 1
@__const.halide_debug_to_file.header = private unnamed_addr constant [129 x i8] c"MATLAB 5.0 MAT-file, produced by Halide                                                                                     \00\01IM\00", align 1
@.str.6.40 = private unnamed_addr constant [53 x i8] c"Can't debug_to_file to a .mat file greater than 4GB\0A\00", align 1
@_ZN6Halide7Runtime8Internal16memoization_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal13cache_entriesE = linkonce global [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*] zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal18most_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal19least_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal14max_cache_sizeE = linkonce local_unnamed_addr global i64 1048576, align 8
@_ZN6Halide7Runtime8Internal18current_cache_sizeE = linkonce local_unnamed_addr global i64 0, align 8
@.str.2.42 = private unnamed_addr constant [133 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/cache.cpp:284 halide_abort_if_false() failed: prev_hash_entry != nullptr\0A\00", align 1
@.str.3.43 = private unnamed_addr constant [136 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/cache.cpp:373 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.4.44 = private unnamed_addr constant [135 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/cache.cpp:377 halide_abort_if_false() failed: least_recently_used == entry\0A\00", align 1
@.str.5.45 = private unnamed_addr constant [136 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/cache.cpp:380 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.9.46 = private unnamed_addr constant [129 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/cache.cpp:472 halide_abort_if_false() failed: no_host_pointers_equal\0A\00", align 1
@.str.12.47 = private unnamed_addr constant [130 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/cache.cpp:550 halide_abort_if_false() failed: entry->in_use_count > 0\0A\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.57 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.58 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.59 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.60 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.61 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.62 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.63 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.64 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9.65 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11.67 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12.68 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13.71 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18.72 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17.73 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16.74 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15.75 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14.76 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19.77 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20.78 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21.79 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23.82 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24.83 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 8
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@.str.6.88 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.89 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.90 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.91 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.92 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.93 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.96 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.97 = private unnamed_addr constant [134 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.98 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.99 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26.100 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27.101 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28.102 = private unnamed_addr constant [134 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29.103 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30.104 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31.105 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32.106 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33.107 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34.108 = private unnamed_addr constant [134 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.111 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.112 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.113 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.114 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.115 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.116 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.117 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.118 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.119 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.120 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.121 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.122 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.123 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.124 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.125 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.126 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.127 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.128 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.129 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.130 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.131 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.132 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.133 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.134 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.135 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.136 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.137 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.138 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.139 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.140 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.141 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.142 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.143 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.144 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.145 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.146 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.147 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50.148 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.149 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.150 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.151 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.152 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.153 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.29.163 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.7.164 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8.165 = private unnamed_addr constant [14 x i8] c" total time: \00", align 1
@.str.9.166 = private unnamed_addr constant [4 x i8] c" ms\00", align 1
@.str.10.167 = private unnamed_addr constant [12 x i8] c"  samples: \00", align 1
@.str.11.168 = private unnamed_addr constant [9 x i8] c"  runs: \00", align 1
@.str.12.169 = private unnamed_addr constant [13 x i8] c"  time/run: \00", align 1
@.str.13.170 = private unnamed_addr constant [5 x i8] c" ms\0A\00", align 1
@.str.14.171 = private unnamed_addr constant [24 x i8] c" average threads used: \00", align 1
@.str.15.172 = private unnamed_addr constant [20 x i8] c" heap allocations: \00", align 1
@.str.16.173 = private unnamed_addr constant [20 x i8] c"  peak heap usage: \00", align 1
@.str.17.174 = private unnamed_addr constant [8 x i8] c" bytes\0A\00", align 1
@.str.18.175 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.19.176 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.20.177 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.21.178 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.22.179 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.23.180 = private unnamed_addr constant [3 x i8] c"%)\00", align 1
@.str.24.181 = private unnamed_addr constant [10 x i8] c"threads: \00", align 1
@.str.25.182 = private unnamed_addr constant [8 x i8] c" peak: \00", align 1
@.str.26.183 = private unnamed_addr constant [7 x i8] c" num: \00", align 1
@.str.27.184 = private unnamed_addr constant [7 x i8] c" avg: \00", align 1
@.str.28.185 = private unnamed_addr constant [9 x i8] c" stack: \00", align 1
@_ZZ25halide_profiler_get_stateE1s = internal global %struct.halide_profiler_state { %struct.halide_mutex zeroinitializer, i32 1, i32 0, i32 0, i32 0, %struct.halide_profiler_pipeline_stats* null, void (i32*, i32*)* null, %struct.halide_thread* null }, align 8
@.str.186 = private unnamed_addr constant [135 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/profiler_common.cpp:246 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.1.187 = private unnamed_addr constant [135 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/profiler_common.cpp:273 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.2.188 = private unnamed_addr constant [129 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/profiler_common.cpp:274 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.3.189 = private unnamed_addr constant [145 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/profiler_common.cpp:275 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@.str.4.190 = private unnamed_addr constant [135 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/profiler_common.cpp:309 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.5.191 = private unnamed_addr constant [129 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/profiler_common.cpp:310 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.6.192 = private unnamed_addr constant [145 x i8] c"/home/arnoor2/Hydride/Hydride/frontends/halide/src/runtime/profiler_common.cpp:311 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 8
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.197 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant [6 x i64*] zeroinitializer
@str = private constant [4 x i8] c"IMG\00", align 32
@1 = private constant [4 x i64*] zeroinitializer
@str.200 = private constant [5 x i8] c"BINS\00", align 32
@2 = private constant [2 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i32 0, i32 0), i32 1, i32 3, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([6 x i64*], [6 x i64*]* @0, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.200, i32 0, i32 0), i32 2, i32 2, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @1, i32 0, i32 0) }]
@str.201 = private constant [59 x i8] c"x86-64-linux-avx-avx2-avx512-avx512_skylake-f16c-fma-sse41\00", align 64
@str.202 = private constant [10 x i8] c"histogram\00", align 32
@histogram_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 2, %struct.halide_filter_argument_t* getelementptr inbounds ([2 x %struct.halide_filter_argument_t], [2 x %struct.halide_filter_argument_t]* @2, i32 0, i32 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @str.201, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str.202, i32 0, i32 0) }
@str.203 = private constant [19 x i8] c"Output buffer BINS\00", align 32
@str.204 = private constant [17 x i8] c"Input buffer IMG\00", align 32
@str.205 = private constant [14 x i8] c"BINS.stride.0\00", align 32
@str.206 = private constant [2 x i8] c"1\00", align 32
@str.207 = private constant [13 x i8] c"IMG.stride.0\00", align 32
@str.208 = private constant [16 x i8] c"color_hist_intm\00", align 32
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.76, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15.75, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16.74, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.73, i64 0, i64 0)], align 8

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i64 %x) #0 {
entry:
  %add = add i64 %x, 64
  %call1 = tail call i8* @malloc(i64 %add) #14
  %cmp = icmp eq i8* %call1, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call1 to i64
  %sub = add i64 %0, 71
  %and = and i64 %sub, -64
  %1 = inttoptr i64 %and to i8*
  %2 = inttoptr i64 %and to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 -1
  store i8* %call1, i8** %arrayidx, align 8, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i64 -8
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !10
  tail call void @free(i8* %1) #14
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i64)* @halide_set_custom_malloc(i8* (i8*, i64)* %user_malloc) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  store i8* (i8*, i64)* %user_malloc, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  ret i8* (i8*, i64)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak noalias i8* @halide_malloc(i8* %user_context, i64 %x) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %user_context, i64 %x) #14
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %ptr) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_error(i8* %user_context, i8* %msg) #0 {
entry:
  %buf = alloca [4096 x i8], align 1
  %0 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %0) #15
  %add.ptr = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 4094
  %call = call i8* @halide_string_to_string(i8* nonnull %0, i8* nonnull %add.ptr, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)) #14
  %add.ptr2 = getelementptr inbounds i8, i8* %call, i64 4094
  %call3 = call i8* @halide_string_to_string(i8* %call, i8* nonnull %add.ptr2, i8* %msg) #14
  %arrayidx = getelementptr inbounds i8, i8* %call3, i64 -1
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %cmp.not = icmp eq i8 %1, 10
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8 10, i8* %call3, align 1, !tbaa !14
  %arrayidx5 = getelementptr inbounds i8, i8* %call3, i64 1
  store i8 0, i8* %arrayidx5, align 1, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %dst.0 = phi i8* [ %arrayidx5, %if.then ], [ %call3, %entry ]
  %sub.ptr.lhs.cast = ptrtoint i8* %dst.0 to i64
  %sub.ptr.rhs.cast = ptrtoint [4096 x i8]* %buf to i64
  %sub.ptr.sub = sub i64 1, %sub.ptr.rhs.cast
  %add = add i64 %sub.ptr.sub, %sub.ptr.lhs.cast
  %call9 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 %add) #14
  call void @halide_print(i8* %user_context, i8* nonnull %0) #14
  call void @abort() #14
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %0) #15
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @abort() local_unnamed_addr #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak void @halide_error(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #14
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_error_handler(void (i8*, i8*)* %handler) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  store void (i8*, i8*)* %handler, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_print(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #14
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_print(void (i8*, i8*)* %print) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  store void (i8*, i8*)* %print, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_start_clock(i8* %user_context) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* @halide_reference_clock_inited, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i32 (i32, ...) @syscall(i32 228, i32 0, %struct.timespec* nonnull @halide_reference_clock) #14
  store i8 1, i8* @halide_reference_clock_inited, align 1, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

declare i32 @syscall(i32, ...) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i64 @halide_current_time_ns(i8* %user_context) local_unnamed_addr #0 {
entry:
  %now = alloca <2 x i64>, align 16
  %0 = bitcast <2 x i64>* %now to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #15
  %call = call i32 (i32, ...) @syscall(i32 228, i32 0, <2 x i64>* nonnull %now) #14
  %1 = load <2 x i64>, <2 x i64>* %now, align 16, !tbaa !18
  %2 = load <2 x i64>, <2 x i64>* bitcast (%struct.timespec* @halide_reference_clock to <2 x i64>*), align 8, !tbaa !18
  %3 = sub <2 x i64> %1, %2
  %4 = extractelement <2 x i64> %3, i32 0
  %mul = mul nsw i64 %4, 1000000000
  %5 = extractelement <2 x i64> %3, i32 1
  %add = add nsw i64 %mul, %5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #15
  ret i64 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_sleep_ms(i8* %user_context, i32 %ms) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %ms, 1000
  %call = tail call i32 @usleep(i32 %mul) #14
  ret void
}

declare i32 @usleep(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_print(i8* %user_context, i8* %str) #0 {
entry:
  %call = tail call i64 @strlen(i8* %str) #14
  %call1 = tail call i64 @write(i32 1, i8* %str, i64 %call) #14
  ret void
}

declare i64 @strlen(i8*) local_unnamed_addr #1

declare i64 @write(i32, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_host_cpu_count() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @sysconf(i32 84) #14
  %conv = trunc i64 %call to i32
  ret i32 %conv
}

declare i64 @sysconf(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_yield() local_unnamed_addr #0 {
entry:
  %call = tail call i32 @sched_yield() #14
  ret void
}

declare i32 @sched_yield() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %job = alloca %"struct.Halide::Runtime::Internal::work", align 8
  %cmp = icmp slt i32 %size, 1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %"struct.Halide::Runtime::Internal::work"* %job to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %0) #15
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 0
  store i32 (i8*, i32, i32, i8*, i8*)* null, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %min2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 5
  store i32 %min, i32* %min2, align 4, !tbaa !24
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 6
  store i32 %size, i32* %extent, align 8, !tbaa !25
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 8
  store i8 0, i8* %serial, align 8, !tbaa !26
  %semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 3
  store %struct.halide_semaphore_acquire_t* null, %struct.halide_semaphore_acquire_t** %semaphores, align 8, !tbaa !27
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 4
  store i32 0, i32* %num_semaphores, align 8, !tbaa !28
  %closure8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 1
  store i8* %closure, i8** %closure8, align 8, !tbaa !29
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 7
  store i32 0, i32* %min_threads, align 4, !tbaa !30
  %name = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 2
  store i8* null, i8** %name, align 8, !tbaa !31
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 1
  store i32 (i8*, i32, i8*)* %f, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 7
  store i8* %user_context, i8** %user_context11, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %job, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 4
  store i32 0, i32* %sibling_count, align 8, !tbaa !39
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 5
  store %"struct.Halide::Runtime::Internal::work"* null, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 1, %"struct.Halide::Runtime::Internal::work"* nonnull %job, %"struct.Halide::Runtime::Internal::work"* null) #16
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %job) #16
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %1 = load i32, i32* %exit_status, align 4, !tbaa !34
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %0) #15
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %1, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = load atomic i64, i64* %state.i monotonic, align 8
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %6 = ptrtoint %struct.halide_mutex* %mutex to i64
  br label %while.cond.outer.i.i

while.cond.outer.i.i:                             ; preds = %while.cond.outer.i.i.backedge, %if.then.i
  %expected.0.ph.i.i = phi i64 [ %2, %if.then.i ], [ %expected.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i = phi i32 [ 40, %if.then.i ], [ %spinner.sroa.0.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %and55.i.i = and i64 %expected.0.ph.i.i, 1
  %tobool.not56.i.i = icmp eq i64 %and55.i.i, 0
  br i1 %tobool.not56.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %while.cond.outer.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %expected.057.i.i = phi i64 [ %9, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i ], [ %expected.0.ph.i.i, %while.cond.outer.i.i ]
  %or.i.i = or i64 %expected.057.i.i, 1
  %7 = cmpxchg weak i64* %state.i, i64 %expected.057.i.i, i64 %or.i.i acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then.i.i
  %9 = extractvalue { i64, i1 } %7, 0
  %and.i.i = and i64 %9, 1
  %tobool.not.i.i = icmp eq i64 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.end4.i.i.loopexit

if.end4.i.i.loopexit:                             ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %10 = extractvalue { i64, i1 } %7, 0
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end4.i.i.loopexit, %while.cond.outer.i.i
  %expected.0.lcssa.i.i = phi i64 [ %expected.0.ph.i.i, %while.cond.outer.i.i ], [ %10, %if.end4.i.i.loopexit ]
  %cmp.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i, 0
  br i1 %cmp.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, label %if.end8.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i: ; preds = %if.end4.i.i
  %cmp4.i.not.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i, 1
  br i1 %cmp4.i.not.i.i, label %if.end8.i.i, label %if.then6.i.i

if.then6.i.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i
  %dec.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i, -1
  call void @halide_thread_yield() #14
  %11 = load atomic i64, i64* %state.i monotonic, align 8
  br label %while.cond.outer.i.i.backedge

if.end8.i.i:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, %if.end4.i.i
  %spinner.sroa.0.152.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i ], [ %spinner.sroa.0.0.ph.i.i, %if.end4.i.i ]
  %and9.i.i = and i64 %expected.0.lcssa.i.i, 2
  %cmp.i.i = icmp eq i64 %and9.i.i, 0
  br i1 %cmp.i.i, label %if.then10.i.i, label %if.end19.i.i

if.then10.i.i:                                    ; preds = %if.end8.i.i
  %or12.i.i = or i64 %expected.0.lcssa.i.i, 2
  %12 = cmpxchg weak i64* %state.i, i64 %expected.0.lcssa.i.i, i64 %or12.i.i monotonic monotonic
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %if.end19.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then10.i.i
  %14 = extractvalue { i64, i1 } %12, 0
  br label %while.cond.outer.i.i.backedge

if.end19.i.i:                                     ; preds = %if.then10.i.i, %if.end8.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #15
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !41
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %call21.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %5, i64 %6) #14
  %cmp22.i.i = icmp eq i64 %call21.i.i, %6
  br i1 %cmp22.i.i, label %cleanup30.critedge.i.i, label %if.end24.i.i

if.end24.i.i:                                     ; preds = %if.end19.i.i
  %15 = load atomic i64, i64* %state.i monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #15
  br label %while.cond.outer.i.i.backedge

while.cond.outer.i.i.backedge:                    ; preds = %if.end24.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i, %if.then6.i.i
  %expected.0.ph.i.i.be = phi i64 [ %14, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ %15, %if.end24.i.i ], [ %11, %if.then6.i.i ]
  %spinner.sroa.0.0.ph.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ 40, %if.end24.i.i ], [ %dec.i.i.i, %if.then6.i.i ]
  br label %while.cond.outer.i.i

cleanup30.critedge.i.i:                           ; preds = %if.end19.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #15
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit: ; preds = %if.then.i.i, %cleanup30.critedge.i.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_jobs, %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %land.rhs.i, label %if.end4

land.rhs.i:                                       ; preds = %entry, %while.body.i
  %bytes.011.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), %entry ]
  %1 = load i8, i8* %bytes.011.i, align 1, !tbaa !14
  %cmp2.i = icmp eq i8 %1, 0
  br i1 %cmp2.i, label %while.body.i, label %do.body.i

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %bytes.011.i, i64 1
  %exitcond.not.i = icmp eq i8* %incdec.ptr.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*)
  br i1 %exitcond.not.i, label %do.body.i, label %land.rhs.i, !llvm.loop !49

do.body.i:                                        ; preds = %while.body.i, %land.rhs.i
  %bytes.0.lcssa.i = phi i8* [ %bytes.011.i, %land.rhs.i ], [ bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*), %while.body.i ]
  %cmp3.i = icmp eq i8* %bytes.0.lcssa.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*)
  br i1 %cmp3.i, label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit, label %if.then.i

if.then.i:                                        ; preds = %do.body.i
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.6, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit

_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit: ; preds = %if.then.i, %do.body.i
  %2 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %tobool1.not = icmp eq i32 %2, 0
  br i1 %tobool1.not, label %if.then2, label %if.end

if.then2:                                         ; preds = %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #16
  br label %if.end

if.end:                                           ; preds = %if.then2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %3 = phi i32 [ %call, %if.then2 ], [ %2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit ]
  %4 = icmp sgt i32 %3, 1
  %spec.select.i = select i1 %4, i32 %3, i32 1
  %5 = icmp slt i32 %spec.select.i, 256
  %call3176 = select i1 %5, i32 %spec.select.i, i32 256
  store i32 %call3176, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %cmp181 = icmp sgt i32 %num_jobs, 0
  br i1 %cmp181, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end4
  %wide.trip.count = zext i32 %num_jobs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %6 = icmp eq i32 %num_jobs, 1
  br i1 %6, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.inc.1, %for.body.preheader
  %workers_to_wake.1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %add.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %stealable_jobs.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %job_may_block.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %spec.select.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %indvars.iv193.unr = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187.unr = phi i32 [ 0, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185.unr = phi i8 [ 0, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184.unr = phi i8 [ 0, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183.unr = phi i8 [ 0, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182.unr = phi i32 [ -1, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup.loopexit, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %min_threads5.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 7
  %7 = load i32, i32* %min_threads5.epil, align 4, !tbaa !30
  %cmp6.epil = icmp eq i32 %7, 0
  %add.epil = add i32 %7, %min_threads.0187.unr
  %stealable_jobs.1.epil = select i1 %cmp6.epil, i8 1, i8 %stealable_jobs.0183.unr
  %job_may_block.1.epil = select i1 %cmp6.epil, i8 %job_may_block.0185.unr, i8 1
  %num_semaphores.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 4
  %8 = load i32, i32* %num_semaphores.epil, align 8, !tbaa !28
  %cmp16.not.epil = icmp eq i32 %8, 0
  %spec.select.epil = select i1 %cmp16.not.epil, i8 %job_has_acquires.0184.unr, i8 1
  %serial.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 8
  %9 = load i8, i8* %serial.epil, align 8, !tbaa !26, !range !17
  %tobool22.not.epil = icmp eq i8 %9, 0
  br i1 %tobool22.not.epil, label %if.else24.epil, label %if.then23.epil

if.then23.epil:                                   ; preds = %for.body.epil
  %inc.epil = add nsw i32 %workers_to_wake.0182.unr, 1
  br label %for.cond.cleanup.loopexit

if.else24.epil:                                   ; preds = %for.body.epil
  %extent.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 6
  %10 = load i32, i32* %extent.epil, align 8, !tbaa !25
  %add28.epil = add nsw i32 %10, %workers_to_wake.0182.unr
  br label %for.cond.cleanup.loopexit

for.cond.cleanup.loopexit:                        ; preds = %if.else24.epil, %if.then23.epil, %for.cond.cleanup.loopexit.unr-lcssa
  %workers_to_wake.1.lcssa = phi i32 [ %workers_to_wake.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %inc.epil, %if.then23.epil ], [ %add28.epil, %if.else24.epil ]
  %add.lcssa = phi i32 [ %add.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add.epil, %if.then23.epil ], [ %add.epil, %if.else24.epil ]
  %stealable_jobs.1.lcssa = phi i8 [ %stealable_jobs.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %stealable_jobs.1.epil, %if.then23.epil ], [ %stealable_jobs.1.epil, %if.else24.epil ]
  %job_may_block.1.lcssa = phi i8 [ %job_may_block.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %job_may_block.1.epil, %if.then23.epil ], [ %job_may_block.1.epil, %if.else24.epil ]
  %spec.select.lcssa = phi i8 [ %spec.select.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %spec.select.epil, %if.then23.epil ], [ %spec.select.epil, %if.else24.epil ]
  %phi.bo = and i8 %stealable_jobs.1.lcssa, 1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end4
  %workers_to_wake.0.lcssa = phi i32 [ -1, %if.end4 ], [ %workers_to_wake.1.lcssa, %for.cond.cleanup.loopexit ]
  %stealable_jobs.0.lcssa = phi i8 [ 0, %if.end4 ], [ %phi.bo, %for.cond.cleanup.loopexit ]
  %job_has_acquires.0.lcssa = phi i8 [ 0, %if.end4 ], [ %spec.select.lcssa, %for.cond.cleanup.loopexit ]
  %job_may_block.0.lcssa = phi i8 [ 0, %if.end4 ], [ %job_may_block.1.lcssa, %for.cond.cleanup.loopexit ]
  %min_threads.0.lcssa = phi i32 [ 0, %if.end4 ], [ %add.lcssa, %for.cond.cleanup.loopexit ]
  %cmp31 = icmp eq %"struct.Halide::Runtime::Internal::work"* %task_parent, null
  br i1 %cmp31, label %if.then32, label %do.body61

for.body:                                         ; preds = %for.inc.1, %for.body.preheader.new
  %indvars.iv193 = phi i64 [ 0, %for.body.preheader.new ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187 = phi i32 [ 0, %for.body.preheader.new ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185 = phi i8 [ 0, %for.body.preheader.new ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184 = phi i8 [ 0, %for.body.preheader.new ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183 = phi i8 [ 0, %for.body.preheader.new ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182 = phi i32 [ -1, %for.body.preheader.new ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.1, %for.inc.1 ]
  %min_threads5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 7
  %11 = load i32, i32* %min_threads5, align 4, !tbaa !30
  %cmp6 = icmp eq i32 %11, 0
  %add = add i32 %11, %min_threads.0187
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 4
  %12 = load i32, i32* %num_semaphores, align 8, !tbaa !28
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 8
  %13 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool22.not = icmp eq i8 %13, 0
  br i1 %tobool22.not, label %if.else24, label %if.then23

if.then23:                                        ; preds = %for.body
  %inc = add nsw i32 %workers_to_wake.0182, 1
  br label %for.inc

if.else24:                                        ; preds = %for.body
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 6
  %14 = load i32, i32* %extent, align 8, !tbaa !25
  %add28 = add nsw i32 %14, %workers_to_wake.0182
  br label %for.inc

for.inc:                                          ; preds = %if.else24, %if.then23
  %workers_to_wake.1 = phi i32 [ %inc, %if.then23 ], [ %add28, %if.else24 ]
  %indvars.iv.next194 = or i64 %indvars.iv193, 1
  %min_threads5.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 7
  %15 = load i32, i32* %min_threads5.1, align 4, !tbaa !30
  %cmp6.1 = icmp eq i32 %15, 0
  %add.1 = add i32 %15, %add
  %16 = or i1 %cmp6.1, %cmp6
  %stealable_jobs.1.1 = select i1 %16, i8 1, i8 %stealable_jobs.0183
  %17 = or i32 %15, %11
  %18 = icmp eq i32 %17, 0
  %job_may_block.1.1 = select i1 %18, i8 %job_may_block.0185, i8 1
  %num_semaphores.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 4
  %19 = load i32, i32* %num_semaphores.1, align 8, !tbaa !28
  %20 = or i32 %19, %12
  %21 = icmp eq i32 %20, 0
  %spec.select.1 = select i1 %21, i8 %job_has_acquires.0184, i8 1
  %serial.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 8
  %22 = load i8, i8* %serial.1, align 8, !tbaa !26, !range !17
  %tobool22.not.1 = icmp eq i8 %22, 0
  br i1 %tobool22.not.1, label %if.else24.1, label %if.then23.1

if.then32:                                        ; preds = %for.cond.cleanup
  %23 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  %not. = xor i1 %25, true
  %add36 = zext i1 %not. to i32
  %min_threads.2 = add nsw i32 %min_threads.0.lcssa, %add36
  %26 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp38180 = icmp slt i32 %26, 256
  br i1 %cmp38180, label %land.rhs, label %do.end50

land.rhs:                                         ; preds = %if.then32, %while.body
  %27 = phi i32 [ %inc45, %while.body ], [ %26, %if.then32 ]
  %28 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %sub = add nsw i32 %28, -1
  %cmp39 = icmp slt i32 %27, %sub
  br i1 %cmp39, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %add40 = add nsw i32 %27, 1
  %29 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub41 = sub i32 %add40, %29
  %cmp42 = icmp slt i32 %sub41, %min_threads.2
  br i1 %cmp42, label %while.body, label %do.end50

while.body:                                       ; preds = %lor.rhs, %land.rhs
  %30 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc43 = add nsw i32 %30, 1
  store i32 %inc43, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %call44 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal13worker_threadEPv, i8* null) #16
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %inc45 = add nsw i32 %31, 1
  store i32 %inc45, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %idxprom46 = sext i32 %31 to i64
  %arrayidx47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %idxprom46
  store %struct.halide_thread* %call44, %struct.halide_thread** %arrayidx47, align 8, !tbaa !10
  %cmp38 = icmp slt i32 %31, 255
  br i1 %cmp38, label %land.rhs, label %do.end50, !llvm.loop !55

do.end50:                                         ; preds = %while.body, %lor.rhs, %if.then32
  br i1 %25, label %if.end77, label %if.then54

if.then54:                                        ; preds = %do.end50
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %inc55 = add nsw i32 %32, 1
  store i32 %inc55, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end77

do.body61:                                        ; preds = %for.cond.cleanup
  %min_threads63 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 0, i32 7
  %33 = load i32, i32* %min_threads63, align 4, !tbaa !30
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 8
  %34 = load i32, i32* %active_workers, align 8, !tbaa !35
  %mul = mul nsw i32 %34, %33
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub64 = sub nsw i32 %mul, %35
  %cmp65.not = icmp sgt i32 %min_threads.0.lcssa, %sub64
  br i1 %cmp65.not, label %if.then66, label %do.end69

if.then66:                                        ; preds = %do.body61
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([270 x i8], [270 x i8]* @.str.3, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end69

do.end69:                                         ; preds = %if.then66, %do.body61
  %36 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %37 = and i8 %36, 1
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %if.end77, label %if.then73

if.then73:                                        ; preds = %do.end69
  %39 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %inc75 = add nsw i32 %39, 1
  store i32 %inc75, i32* %threads_reserved, align 8, !tbaa !56
  br label %if.end77

if.end77:                                         ; preds = %if.then73, %do.end69, %if.then54, %do.end50
  br i1 %cmp181, label %for.body83.lr.ph, label %for.cond.cleanup82

for.body83.lr.ph:                                 ; preds = %if.end77
  %.promoted = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %40 = zext i32 %num_jobs to i64
  %xtraiter3 = and i64 %40, 1
  %lcmp.mod4.not = icmp eq i64 %xtraiter3, 0
  br i1 %lcmp.mod4.not, label %for.body83.prol.loopexit, label %for.body83.prol

for.body83.prol:                                  ; preds = %for.body83.lr.ph
  %indvars.iv.next.prol = add nsw i64 %40, -1
  %arrayidx85.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol
  %next_job.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %.promoted, %"struct.Halide::Runtime::Internal::work"** %next_job.prol, align 8, !tbaa !58
  %siblings.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.prol, align 8, !tbaa !38
  %sibling_count.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 4
  store i32 %num_jobs, i32* %sibling_count.prol, align 8, !tbaa !39
  %threads_reserved93.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 6
  store i32 0, i32* %threads_reserved93.prol, align 8, !tbaa !56
  br label %for.body83.prol.loopexit

for.body83.prol.loopexit:                         ; preds = %for.body83.prol, %for.body83.lr.ph
  %indvars.iv.unr = phi i64 [ %40, %for.body83.lr.ph ], [ %indvars.iv.next.prol, %for.body83.prol ]
  %arrayidx85192.unr = phi %"struct.Halide::Runtime::Internal::work"* [ %.promoted, %for.body83.lr.ph ], [ %arrayidx85.prol, %for.body83.prol ]
  %41 = icmp eq i32 %num_jobs, 1
  br i1 %41, label %for.cond80.for.cond.cleanup82_crit_edge, label %for.body83

for.cond80.for.cond.cleanup82_crit_edge:          ; preds = %for.body83, %for.body83.prol.loopexit
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %for.cond.cleanup82

for.cond.cleanup82:                               ; preds = %for.cond80.for.cond.cleanup82_crit_edge, %if.end77
  %42 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %tobool96 = icmp ne i32 %42, 0
  %43 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8
  %44 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8
  %cmp98 = icmp slt i32 %43, %44
  %45 = or i1 %tobool96, %cmp98
  %cmp102 = icmp sgt i32 %workers_to_wake.0.lcssa, %43
  %or.cond174 = or i1 %cmp102, %45
  %storemerge = select i1 %or.cond174, i32 %44, i32 %workers_to_wake.0.lcssa
  store i32 %storemerge, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #16
  %46 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %47 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %cmp106 = icmp sgt i32 %46, %47
  br i1 %cmp106, label %if.then107, label %if.end111

for.body83:                                       ; preds = %for.body83.prol.loopexit, %for.body83
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body83 ], [ %indvars.iv.unr, %for.body83.prol.loopexit ]
  %arrayidx85192 = phi %"struct.Halide::Runtime::Internal::work"* [ %arrayidx85.1, %for.body83 ], [ %arrayidx85192.unr, %for.body83.prol.loopexit ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx85 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85192, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 4
  store i32 %num_jobs, i32* %sibling_count, align 8, !tbaa !39
  %threads_reserved93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 6
  store i32 0, i32* %threads_reserved93, align 8, !tbaa !56
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, -2
  %arrayidx85.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1
  %next_job.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85, %"struct.Halide::Runtime::Internal::work"** %next_job.1, align 8, !tbaa !58
  %siblings.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.1, align 8, !tbaa !38
  %sibling_count.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 4
  store i32 %num_jobs, i32* %sibling_count.1, align 8, !tbaa !39
  %threads_reserved93.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 6
  store i32 0, i32* %threads_reserved93.1, align 8, !tbaa !56
  %cmp81.1 = icmp sgt i64 %indvars.iv, 2
  br i1 %cmp81.1, label %for.body83, label %for.cond80.for.cond.cleanup82_crit_edge, !llvm.loop !61

if.then107:                                       ; preds = %for.cond.cleanup82
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #16
  %tobool108.not = icmp eq i8 %stealable_jobs.0.lcssa, 0
  br i1 %tobool108.not, label %if.end111, label %if.then109

if.then109:                                       ; preds = %if.then107
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #16
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.then107, %for.cond.cleanup82
  %48 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %49 = and i8 %48, 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %if.end123, label %if.then115

if.then115:                                       ; preds = %if.end111
  br i1 %cmp31, label %if.else120, label %if.then117

if.then117:                                       ; preds = %if.then115
  %threads_reserved118 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %51 = load i32, i32* %threads_reserved118, align 8, !tbaa !56
  %dec119 = add nsw i32 %51, -1
  store i32 %dec119, i32* %threads_reserved118, align 8, !tbaa !56
  br label %if.end123

if.else120:                                       ; preds = %if.then115
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %dec121 = add nsw i32 %52, -1
  store i32 %dec121, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end123

if.end123:                                        ; preds = %if.else120, %if.then117, %if.end111
  ret void

if.then23.1:                                      ; preds = %for.inc
  %inc.1 = add nsw i32 %workers_to_wake.1, 1
  br label %for.inc.1

if.else24.1:                                      ; preds = %for.inc
  %extent.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 6
  %53 = load i32, i32* %extent.1, align 8, !tbaa !25
  %add28.1 = add nsw i32 %53, %workers_to_wake.1
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.else24.1, %if.then23.1
  %workers_to_wake.1.1 = phi i32 [ %inc.1, %if.then23.1 ], [ %add28.1, %if.else24.1 ]
  %indvars.iv.next194.1 = add nuw nsw i64 %indvars.iv193, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body, !llvm.loop !62
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %owned_job) local_unnamed_addr #0 {
entry:
  %active_workers.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 8
  %tobool.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %owned_job, null
  %extent.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 0, i32 6
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 9
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 5
  %siblings56 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 3
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 11
  %next_job10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 2
  br label %while.cond

while.cond:                                       ; preds = %while.cond.backedge, %entry
  %spin_count.0 = phi i32 [ 0, %entry ], [ %spin_count.0.be, %while.cond.backedge ]
  br i1 %tobool.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.cond
  %0 = load i32, i32* %extent.i, align 8, !tbaa !25
  %tobool.not.i = icmp eq i32 %0, 0
  br i1 %tobool.not.i, label %cond.end, label %if.then

cond.false:                                       ; preds = %while.cond
  %1 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63, !range !17
  %tobool1.not = icmp eq i8 %1, 0
  br i1 %tobool1.not, label %do.end.thread, label %while.end316

cond.end:                                         ; preds = %cond.true
  %2 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %tobool2.i.not = icmp eq i32 %2, 0
  br i1 %tobool2.i.not, label %while.end316, label %if.then

if.then:                                          ; preds = %cond.end, %cond.true
  %3 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %4 = load i32, i32* %exit_status, align 4, !tbaa !34
  %cmp.not = icmp eq i32 %4, 0
  br i1 %cmp.not, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %cmp4 = icmp eq i32 %5, 0
  br i1 %cmp4, label %while.cond6.preheader, label %do.end

while.cond6.preheader:                            ; preds = %if.then3
  %cmp7.not524 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, %owned_job
  br i1 %cmp7.not524, label %while.end, label %while.body8

while.body8:                                      ; preds = %while.cond6.preheader, %while.body8
  %job.0525 = phi %"struct.Halide::Runtime::Internal::work"* [ %6, %while.body8 ], [ %3, %while.cond6.preheader ]
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %cmp7.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %6, %owned_job
  br i1 %cmp7.not, label %while.end.loopexit, label %while.body8, !llvm.loop !64

while.end.loopexit:                               ; preds = %while.body8
  %next_job.le = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond6.preheader
  %prev_ptr.0.lcssa = phi %"struct.Halide::Runtime::Internal::work"** [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %while.cond6.preheader ], [ %next_job.le, %while.end.loopexit ]
  %7 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job10, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %7, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.0.lcssa, align 8, !tbaa !10
  store i32 0, i32* %extent.i, align 8, !tbaa !25
  br label %while.cond.backedge

if.else:                                          ; preds = %if.then
  %8 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  %tobool11.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %8, null
  br i1 %tobool11.not, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %exit_status13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %8, i64 0, i32 9
  %9 = load i32, i32* %exit_status13, align 4, !tbaa !34
  %cmp14.not = icmp eq i32 %9, 0
  br i1 %cmp14.not, label %do.end, label %if.then15

if.then15:                                        ; preds = %land.lhs.true
  store i32 %9, i32* %exit_status, align 4, !tbaa !34
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #16
  br label %while.cond.backedge

do.end:                                           ; preds = %land.lhs.true, %if.else, %if.then3
  %tobool23.not527 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, null
  br i1 %tobool23.not527, label %if.then105, label %do.end27

do.end.thread:                                    ; preds = %cond.false
  %10 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %tobool23.not527563 = icmp eq %"struct.Halide::Runtime::Internal::work"* %10, null
  br i1 %tobool23.not527563, label %if.else112, label %do.end27.us

do.end27.us:                                      ; preds = %do.end.thread, %cleanup.us
  %job.1529.us = phi %"struct.Halide::Runtime::Internal::work"* [ %29, %cleanup.us ], [ %10, %do.end.thread ]
  %prev_ptr.1528.us = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95.us, %cleanup.us ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end.thread ]
  %parent_job29.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 5
  %11 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29.us, align 8, !tbaa !40
  %cmp30.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %11, null
  br i1 %cmp30.us, label %if.then31.us, label %if.else32.us

if.else32.us:                                     ; preds = %do.end27.us
  %active_workers33.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 8
  %12 = load i32, i32* %active_workers33.us, align 8, !tbaa !35
  %cmp34.us = icmp eq i32 %12, 0
  %min_threads.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 0, i32 7
  %13 = load i32, i32* %min_threads.us, align 4, !tbaa !30
  br i1 %cmp34.us, label %if.then35.us, label %if.else38.us

if.else38.us:                                     ; preds = %if.else32.us
  %mul.us = mul nsw i32 %13, %12
  %threads_reserved42.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %14 = load i32, i32* %threads_reserved42.us, align 8, !tbaa !56
  %sub43.us = sub nsw i32 %mul.us, %14
  br label %if.end45.us

if.then35.us:                                     ; preds = %if.else32.us
  %threads_reserved.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %15 = load i32, i32* %threads_reserved.us, align 8, !tbaa !56
  %sub37.us = sub nsw i32 %13, %15
  br label %if.end45.us

if.then31.us:                                     ; preds = %do.end27.us
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add.us = add nsw i32 %16, 1
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub.us = sub i32 %add.us, %17
  br label %if.end45.us

if.end45.us:                                      ; preds = %if.then31.us, %if.then35.us, %if.else38.us
  %threads_available.0.us = phi i32 [ %sub.us, %if.then31.us ], [ %sub37.us, %if.then35.us ], [ %sub43.us, %if.else38.us ]
  %min_threads47.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 7
  %18 = load i32, i32* %min_threads47.us, align 4, !tbaa !30
  %cmp48.not.us = icmp sge i32 %threads_available.0.us, %18
  %serial.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 8
  %19 = load i8, i8* %serial.us, align 8, !tbaa !26, !range !17
  %tobool69.not.us = icmp eq i8 %19, 0
  br i1 %tobool69.not.us, label %if.end45.us.lor.end73.us_crit_edge, label %lor.rhs70.us

if.end45.us.lor.end73.us_crit_edge:               ; preds = %if.end45.us
  %.0 = and i1 %cmp48.not.us, true
  br label %lor.end73.us

lor.rhs70.us:                                     ; preds = %if.end45.us
  %active_workers71.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 8
  %20 = load i32, i32* %active_workers71.us, align 8, !tbaa !35
  %cmp72.us = icmp eq i32 %20, 0
  %.1 = and i1 %cmp48.not.us, %cmp72.us
  br label %lor.end73.us

lor.end73.us:                                     ; preds = %if.end45.us.lor.end73.us_crit_edge, %lor.rhs70.us
  %.phi = phi i1 [ %.0, %if.end45.us.lor.end73.us_crit_edge ], [ %.1, %lor.rhs70.us ]
  br i1 %.phi, label %if.then86.us, label %cleanup.us

if.then86.us:                                     ; preds = %lor.end73.us
  %next_semaphore.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 10
  %21 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %num_semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 4
  %22 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp14.i.us = icmp slt i32 %21, %22
  br i1 %cmp14.i.us, label %for.body.lr.ph.i.us, label %if.else127

for.body.lr.ph.i.us:                              ; preds = %if.then86.us
  %semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 3
  br label %for.body.i.us

for.body.i.us:                                    ; preds = %for.inc.i.us, %for.body.lr.ph.i.us
  %23 = phi i32 [ %21, %for.body.lr.ph.i.us ], [ %inc.i.us, %for.inc.i.us ]
  %24 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i.us, align 8, !tbaa !27
  %idxprom.i.us = sext i32 %23 to i64
  %semaphore.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 0
  %25 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i.us, align 8, !tbaa !65
  %count.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 1
  %26 = load i32, i32* %count.i.us, align 8, !tbaa !67
  %call.i.us = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %25, i32 %26) #14
  br i1 %call.i.us, label %for.inc.i.us, label %cleanup.us

for.inc.i.us:                                     ; preds = %for.body.i.us
  %27 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %inc.i.us = add nsw i32 %27, 1
  store i32 %inc.i.us, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %28 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp.i.us = icmp slt i32 %inc.i.us, %28
  br i1 %cmp.i.us, label %for.body.i.us, label %if.else127, !llvm.loop !68

cleanup.us:                                       ; preds = %for.body.i.us, %lor.end73.us
  %next_job95.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 2
  %29 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95.us, align 8, !tbaa !58
  %tobool23.not.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %29, null
  br i1 %tobool23.not.us, label %if.then103, label %do.end27.us

do.end27:                                         ; preds = %do.end, %cleanup
  %job.1529 = phi %"struct.Halide::Runtime::Internal::work"* [ %50, %cleanup ], [ %3, %do.end ]
  %prev_ptr.1528 = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95, %cleanup ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end ]
  %parent_job29 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 5
  %30 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29, align 8, !tbaa !40
  %cmp30 = icmp eq %"struct.Halide::Runtime::Internal::work"* %30, null
  br i1 %cmp30, label %if.then31, label %if.else32

if.then31:                                        ; preds = %do.end27
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add = add nsw i32 %31, 1
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub = sub i32 %add, %32
  br label %if.end45

if.else32:                                        ; preds = %do.end27
  %active_workers33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 8
  %33 = load i32, i32* %active_workers33, align 8, !tbaa !35
  %cmp34 = icmp eq i32 %33, 0
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 0, i32 7
  %34 = load i32, i32* %min_threads, align 4, !tbaa !30
  br i1 %cmp34, label %if.then35, label %if.else38

if.then35:                                        ; preds = %if.else32
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub37 = sub nsw i32 %34, %35
  br label %if.end45

if.else38:                                        ; preds = %if.else32
  %mul = mul nsw i32 %34, %33
  %threads_reserved42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %36 = load i32, i32* %threads_reserved42, align 8, !tbaa !56
  %sub43 = sub nsw i32 %mul, %36
  br label %if.end45

if.end45:                                         ; preds = %if.else38, %if.then35, %if.then31
  %threads_available.0 = phi i32 [ %sub, %if.then31 ], [ %sub37, %if.then35 ], [ %sub43, %if.else38 ]
  %min_threads47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 7
  %37 = load i32, i32* %min_threads47, align 4, !tbaa !30
  %cmp48.not = icmp slt i32 %threads_available.0, %37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 3
  %38 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %39 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings56, align 8, !tbaa !38
  %cmp57 = icmp ne %"struct.Halide::Runtime::Internal::work"* %38, %39
  %cmp60 = icmp ne i32 %37, 0
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 8
  %40 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool69.not = icmp eq i8 %40, 0
  br i1 %tobool69.not, label %if.end45.lor.end73_crit_edge, label %lor.rhs70

if.end45.lor.end73_crit_edge:                     ; preds = %if.end45
  %.not472.0 = xor i1 true, true
  br label %lor.end73

lor.rhs70:                                        ; preds = %if.end45
  %active_workers71 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 8
  %41 = load i32, i32* %active_workers71, align 8, !tbaa !35
  %cmp72 = icmp eq i32 %41, 0
  %.not472.1 = xor i1 %cmp72, true
  br label %lor.end73

lor.end73:                                        ; preds = %if.end45.lor.end73_crit_edge, %lor.rhs70
  %.not472.phi = phi i1 [ %.not472.0, %if.end45.lor.end73_crit_edge ], [ %.not472.1, %lor.rhs70 ]
  %.not = and i1 %cmp60, %cmp57
  %brmerge = or i1 %cmp48.not, %.not
  %brmerge473 = or i1 %brmerge, %.not472.phi
  br i1 %brmerge473, label %cleanup, label %if.then86

if.then86:                                        ; preds = %lor.end73
  %next_semaphore.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 10
  %42 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %num_semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 4
  %43 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp14.i = icmp slt i32 %42, %43
  br i1 %cmp14.i, label %for.body.lr.ph.i, label %if.else127

for.body.lr.ph.i:                                 ; preds = %if.then86
  %semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 3
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %44 = phi i32 [ %42, %for.body.lr.ph.i ], [ %inc.i, %for.inc.i ]
  %45 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i, align 8, !tbaa !27
  %idxprom.i = sext i32 %44 to i64
  %semaphore.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 0
  %46 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i, align 8, !tbaa !65
  %count.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 1
  %47 = load i32, i32* %count.i, align 8, !tbaa !67
  %call.i = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %46, i32 %47) #14
  br i1 %call.i, label %for.inc.i, label %cleanup

for.inc.i:                                        ; preds = %for.body.i
  %48 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %inc.i = add nsw i32 %48, 1
  store i32 %inc.i, i32* %next_semaphore.i, align 8, !tbaa !36
  %49 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp.i = icmp slt i32 %inc.i, %49
  br i1 %cmp.i, label %for.body.i, label %if.else127, !llvm.loop !68

cleanup:                                          ; preds = %for.body.i, %lor.end73
  %next_job95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 2
  %50 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95, align 8, !tbaa !58
  %tobool23.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %50, null
  br i1 %tobool23.not, label %if.then103, label %do.end27

if.then103:                                       ; preds = %cleanup, %cleanup.us
  br i1 %tobool.not, label %if.else112, label %if.then105

if.then105:                                       ; preds = %do.end, %if.then103
  %inc = add nsw i32 %spin_count.0, 1
  %cmp106 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp106, label %if.then107, label %if.else108

if.then107:                                       ; preds = %if.then105
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  tail call void @halide_thread_yield() #14
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  br label %while.cond.backedge

if.else108:                                       ; preds = %if.then105
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %inc109 = add nsw i32 %51, 1
  store i32 %inc109, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  store i8 1, i8* %owner_is_sleeping, align 4, !tbaa !37
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %dec = add nsw i32 %52, -1
  store i32 %dec, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  br label %while.cond.backedge

if.else112:                                       ; preds = %if.then103, %do.end.thread
  %53 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %inc113 = add nsw i32 %53, 1
  store i32 %inc113, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %54 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %55 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %cmp114 = icmp sgt i32 %54, %55
  br i1 %cmp114, label %if.then115, label %if.else118

if.then115:                                       ; preds = %if.else112
  %dec116 = add nsw i32 %54, -1
  store i32 %dec116, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %56 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc117 = add nsw i32 %56, 1
  store i32 %inc117, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  br label %if.end124

if.else118:                                       ; preds = %if.else112
  %inc119 = add nsw i32 %spin_count.0, 1
  %cmp120 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp120, label %if.then121, label %if.else122

if.then121:                                       ; preds = %if.else118
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  tail call void @halide_thread_yield() #14
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  br label %if.end124

if.else122:                                       ; preds = %if.else118
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  br label %if.end124

if.end124:                                        ; preds = %if.else122, %if.then121, %if.then115
  %spin_count.1 = phi i32 [ %spin_count.0, %if.then115 ], [ %inc119, %if.then121 ], [ %inc119, %if.else122 ]
  %57 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %dec125 = add nsw i32 %57, -1
  store i32 %dec125, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  br label %while.cond.backedge

if.else127:                                       ; preds = %if.then86, %if.then86.us, %for.inc.i, %for.inc.i.us
  %next_semaphore.i521 = phi i32* [ %next_semaphore.i.us, %for.inc.i.us ], [ %next_semaphore.i, %for.inc.i ], [ %next_semaphore.i.us, %if.then86.us ], [ %next_semaphore.i, %if.then86 ]
  %prev_ptr.1519 = phi %"struct.Halide::Runtime::Internal::work"** [ %prev_ptr.1528.us, %for.inc.i.us ], [ %prev_ptr.1528, %for.inc.i ], [ %prev_ptr.1528.us, %if.then86.us ], [ %prev_ptr.1528, %if.then86 ]
  %job.1515 = phi %"struct.Halide::Runtime::Internal::work"* [ %job.1529.us, %for.inc.i.us ], [ %job.1529, %for.inc.i ], [ %job.1529.us, %if.then86.us ], [ %job.1529, %if.then86 ]
  store i32 0, i32* %next_semaphore.i521, align 8, !tbaa !36
  %active_workers132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 8
  %58 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %inc133 = add nsw i32 %58, 1
  store i32 %inc133, i32* %active_workers132, align 8, !tbaa !35
  %parent_job134 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 5
  %59 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp135 = icmp eq %"struct.Halide::Runtime::Internal::work"* %59, null
  %min_threads138 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 7
  %60 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp135, label %if.then136, label %if.else143

if.then136:                                       ; preds = %if.else127
  %61 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %add139 = add nsw i32 %61, %60
  store i32 %add139, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end152

if.else143:                                       ; preds = %if.else127
  %threads_reserved147 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %59, i64 0, i32 6
  %62 = load i32, i32* %threads_reserved147, align 8, !tbaa !56
  %add148 = add nsw i32 %62, %60
  store i32 %add148, i32* %threads_reserved147, align 8, !tbaa !56
  br label %if.end152

if.end152:                                        ; preds = %if.else143, %if.then136
  %serial154 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 8
  %63 = load i8, i8* %serial154, align 8, !tbaa !26, !range !17
  %tobool155.not = icmp eq i8 %63, 0
  br i1 %tobool155.not, label %if.else198, label %if.then156

if.then156:                                       ; preds = %if.end152
  %next_job157 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %64 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %64, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %extent163 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %next_semaphore.i474 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 10
  %num_semaphores.i475 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 4
  %semaphores.i477 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 3
  %user_context = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %min = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %closure = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %65 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  br label %while.cond161.preheader

while.cond161.preheader:                          ; preds = %if.end172, %if.then156
  %iters.0538 = phi i32 [ 1, %if.then156 ], [ 0, %if.end172 ]
  %total_iters.0537 = phi i32 [ 0, %if.then156 ], [ %add178, %if.end172 ]
  %66 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub164531 = sub nsw i32 %66, %total_iters.0537
  %cmp165532 = icmp sgt i32 %sub164531, %iters.0538
  br i1 %cmp165532, label %land.rhs.preheader, label %while.end169

land.rhs.preheader:                               ; preds = %while.cond161.preheader
  %.pre = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %.pre560 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  br label %land.rhs

land.rhs:                                         ; preds = %while.body167, %land.rhs.preheader
  %67 = phi i32 [ %76, %while.body167 ], [ %66, %land.rhs.preheader ]
  %68 = phi i32 [ %77, %while.body167 ], [ %.pre560, %land.rhs.preheader ]
  %69 = phi i32 [ 0, %while.body167 ], [ %.pre, %land.rhs.preheader ]
  %iters.1533 = phi i32 [ %inc168, %while.body167 ], [ %iters.0538, %land.rhs.preheader ]
  %cmp14.i476 = icmp slt i32 %69, %68
  br i1 %cmp14.i476, label %for.body.i483, label %while.body167

for.body.i483:                                    ; preds = %land.rhs, %for.inc.i486
  %70 = phi i32 [ %inc.i484, %for.inc.i486 ], [ %69, %land.rhs ]
  %71 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i477, align 8, !tbaa !27
  %idxprom.i479 = sext i32 %70 to i64
  %semaphore.i480 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 0
  %72 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i480, align 8, !tbaa !65
  %count.i481 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 1
  %73 = load i32, i32* %count.i481, align 8, !tbaa !67
  %call.i482 = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %72, i32 %73) #14
  br i1 %call.i482, label %for.inc.i486, label %while.end169

for.inc.i486:                                     ; preds = %for.body.i483
  %74 = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc.i484 = add nsw i32 %74, 1
  store i32 %inc.i484, i32* %next_semaphore.i474, align 8, !tbaa !36
  %75 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  %cmp.i485 = icmp slt i32 %inc.i484, %75
  br i1 %cmp.i485, label %for.body.i483, label %while.body167.loopexit, !llvm.loop !68

while.body167.loopexit:                           ; preds = %for.inc.i486
  %.pre561 = load i32, i32* %extent163, align 8, !tbaa !25
  br label %while.body167

while.body167:                                    ; preds = %while.body167.loopexit, %land.rhs
  %76 = phi i32 [ %.pre561, %while.body167.loopexit ], [ %67, %land.rhs ]
  %77 = phi i32 [ %75, %while.body167.loopexit ], [ %68, %land.rhs ]
  store i32 0, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc168 = add nuw nsw i32 %iters.1533, 1
  %sub164 = sub nsw i32 %76, %total_iters.0537
  %cmp165 = icmp sgt i32 %sub164, %inc168
  br i1 %cmp165, label %land.rhs, label %if.end172, !llvm.loop !70

while.end169:                                     ; preds = %for.body.i483, %while.cond161.preheader
  %iters.1523 = phi i32 [ %iters.0538, %while.cond161.preheader ], [ %iters.1533, %for.body.i483 ]
  %cmp170 = icmp eq i32 %iters.1523, 0
  br i1 %cmp170, label %while.end179, label %if.end172

if.end172:                                        ; preds = %while.body167, %while.end169
  %iters.1523566 = phi i32 [ %iters.1523, %while.end169 ], [ %inc168, %while.body167 ]
  %78 = load i8*, i8** %user_context, align 8, !tbaa !33
  %79 = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %80 = load i32, i32* %min, align 4, !tbaa !24
  %add175 = add nsw i32 %80, %total_iters.0537
  %81 = load i8*, i8** %closure, align 8, !tbaa !29
  %call177 = tail call i32 @halide_do_loop_task(i8* %78, i32 (i8*, i32, i32, i8*, i8*)* %79, i32 %add175, i32 %iters.1523566, i8* %81, i8* nonnull %65) #16
  %add178 = add nuw nsw i32 %iters.1523566, %total_iters.0537
  %cmp159 = icmp eq i32 %call177, 0
  br i1 %cmp159, label %while.cond161.preheader, label %while.end179, !llvm.loop !71

while.end179:                                     ; preds = %if.end172, %while.end169
  %cmp170568 = phi i1 [ true, %while.end169 ], [ false, %if.end172 ]
  %result.0.lcssa = phi i32 [ 0, %while.end169 ], [ %call177, %if.end172 ]
  %total_iters.0.lcssa = phi i32 [ %total_iters.0537, %while.end169 ], [ %add178, %if.end172 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %82 = load i32, i32* %min, align 4, !tbaa !24
  %add182 = add nsw i32 %82, %total_iters.0.lcssa
  store i32 %add182, i32* %min, align 4, !tbaa !24
  %83 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub185 = sub nsw i32 %83, %total_iters.0.lcssa
  store i32 %sub185, i32* %extent163, align 8, !tbaa !25
  br i1 %cmp170568, label %if.else190, label %if.end230.thread505

if.end230.thread505:                              ; preds = %while.end179
  store i32 0, i32* %extent163, align 8, !tbaa !25
  br label %if.then238

if.else190:                                       ; preds = %while.end179
  %cmp193 = icmp sgt i32 %sub185, 0
  br i1 %cmp193, label %if.then194, label %if.end271

if.then194:                                       ; preds = %if.else190
  %84 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  store %"struct.Halide::Runtime::Internal::work"* %84, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %job.1515, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %if.end271

if.else198:                                       ; preds = %if.end152
  %myjob.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %myjob.sroa.0.0.copyload = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %myjob.sroa.0.0..sroa_idx, align 8, !tbaa.struct !72
  %myjob.sroa.4.0..sroa_idx327 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %myjob.sroa.4.0.copyload = load i8*, i8** %myjob.sroa.4.0..sroa_idx327, align 8, !tbaa.struct !74
  %myjob.sroa.6333.0..sroa_idx334 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %myjob.sroa.6333.0.copyload = load i32, i32* %myjob.sroa.6333.0..sroa_idx334, align 4
  %myjob.sroa.8340.0..sroa_idx341 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 1
  %myjob.sroa.8340.0.copyload = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %myjob.sroa.8340.0..sroa_idx341, align 8, !tbaa.struct !75
  %myjob.sroa.10347.0..sroa_idx348 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %myjob.sroa.10347.0.copyload = load i8*, i8** %myjob.sroa.10347.0..sroa_idx348, align 8, !tbaa.struct !76
  %inc201 = add nsw i32 %myjob.sroa.6333.0.copyload, 1
  store i32 %inc201, i32* %myjob.sroa.6333.0..sroa_idx334, align 4, !tbaa !24
  %extent203 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %85 = load i32, i32* %extent203, align 8, !tbaa !25
  %dec204 = add nsw i32 %85, -1
  store i32 %dec204, i32* %extent203, align 8, !tbaa !25
  %cmp207 = icmp eq i32 %dec204, 0
  br i1 %cmp207, label %if.then208, label %if.end210

if.then208:                                       ; preds = %if.else198
  %next_job209 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %86 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job209, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %86, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %if.else198
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %tobool211.not = icmp eq i32 (i8*, i32, i8*)* %myjob.sroa.8340.0.copyload, null
  br i1 %tobool211.not, label %if.else220, label %if.then212

if.then212:                                       ; preds = %if.end210
  %call219 = tail call i32 @halide_do_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i8*)* nonnull %myjob.sroa.8340.0.copyload, i32 %myjob.sroa.6333.0.copyload, i8* %myjob.sroa.4.0.copyload) #16
  br label %if.end230

if.else220:                                       ; preds = %if.end210
  %87 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  %call228 = tail call i32 @halide_do_loop_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i32, i8*, i8*)* %myjob.sroa.0.0.copyload, i32 %myjob.sroa.6333.0.copyload, i32 1, i8* %myjob.sroa.4.0.copyload, i8* %87) #16
  br label %if.end230

if.end230:                                        ; preds = %if.else220, %if.then212
  %result.1 = phi i32 [ %call219, %if.then212 ], [ %call228, %if.else220 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %cmp237.not = icmp eq i32 %result.1, 0
  br i1 %cmp237.not, label %if.end271, label %if.then238

if.then238:                                       ; preds = %if.end230, %if.end230.thread505
  %result.2510 = phi i32 [ %result.0.lcssa, %if.end230.thread505 ], [ %result.1, %if.end230 ]
  %exit_status239 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  store i32 %result.2510, i32* %exit_status239, align 4, !tbaa !34
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 4
  %88 = load i32, i32* %sibling_count, align 8, !tbaa !39
  %cmp240540 = icmp sgt i32 %88, 0
  br i1 %cmp240540, label %do.end243.lr.ph, label %if.end271

do.end243.lr.ph:                                  ; preds = %if.then238
  %siblings244 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 3
  %89 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings244, align 8, !tbaa !38
  %wide.trip.count = zext i32 %88 to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %90 = icmp eq i32 %88, 1
  br i1 %90, label %if.end271.loopexit.unr-lcssa, label %do.end243.lr.ph.new

do.end243.lr.ph.new:                              ; preds = %do.end243.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %do.end243

do.end243:                                        ; preds = %for.inc.1, %do.end243.lr.ph.new
  %indvars.iv = phi i64 [ 0, %do.end243.lr.ph.new ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541 = phi i8 [ 0, %do.end243.lr.ph.new ], [ %wake_owners.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %do.end243.lr.ph.new ], [ %niter.nsub.1, %for.inc.1 ]
  %exit_status245 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 9
  %91 = load i32, i32* %exit_status245, align 4, !tbaa !34
  %cmp246 = icmp eq i32 %91, 0
  br i1 %cmp246, label %if.then247, label %for.inc

if.then247:                                       ; preds = %do.end243
  store i32 %result.2510, i32* %exit_status245, align 4, !tbaa !34
  %92 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253 = icmp eq i32 %92, 0
  br i1 %cmp253, label %land.rhs254, label %land.end260

land.rhs254:                                      ; preds = %if.then247
  %owner_is_sleeping258 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 11
  %93 = load i8, i8* %owner_is_sleeping258, align 4, !tbaa !37, !range !17
  br label %land.end260

land.end260:                                      ; preds = %land.rhs254, %if.then247
  %94 = phi i8 [ 0, %if.then247 ], [ %93, %land.rhs254 ]
  %95 = and i8 %wake_owners.0541, 1
  %or = or i8 %94, %95
  br label %for.inc

for.inc:                                          ; preds = %land.end260, %do.end243
  %wake_owners.1 = phi i8 [ %or, %land.end260 ], [ %wake_owners.0541, %do.end243 ]
  %indvars.iv.next = or i64 %indvars.iv, 1
  %exit_status245.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 9
  %96 = load i32, i32* %exit_status245.1, align 4, !tbaa !34
  %cmp246.1 = icmp eq i32 %96, 0
  br i1 %cmp246.1, label %if.then247.1, label %for.inc.1

if.end271.loopexit.unr-lcssa:                     ; preds = %for.inc.1, %do.end243.lr.ph
  %wake_owners.1.lcssa.ph = phi i8 [ undef, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %indvars.iv.unr = phi i64 [ 0, %do.end243.lr.ph ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541.unr = phi i8 [ 0, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %if.end271, label %do.end243.epil

do.end243.epil:                                   ; preds = %if.end271.loopexit.unr-lcssa
  %exit_status245.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 9
  %97 = load i32, i32* %exit_status245.epil, align 4, !tbaa !34
  %cmp246.epil = icmp eq i32 %97, 0
  br i1 %cmp246.epil, label %if.then247.epil, label %if.end271

if.then247.epil:                                  ; preds = %do.end243.epil
  store i32 %result.2510, i32* %exit_status245.epil, align 4, !tbaa !34
  %98 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.epil = icmp eq i32 %98, 0
  br i1 %cmp253.epil, label %land.rhs254.epil, label %land.end260.epil

land.rhs254.epil:                                 ; preds = %if.then247.epil
  %owner_is_sleeping258.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 11
  %99 = load i8, i8* %owner_is_sleeping258.epil, align 4, !tbaa !37, !range !17
  br label %land.end260.epil

land.end260.epil:                                 ; preds = %land.rhs254.epil, %if.then247.epil
  %100 = phi i8 [ 0, %if.then247.epil ], [ %99, %land.rhs254.epil ]
  %101 = and i8 %wake_owners.0541.unr, 1
  %or.epil = or i8 %100, %101
  br label %if.end271

if.end271:                                        ; preds = %if.end271.loopexit.unr-lcssa, %do.end243.epil, %land.end260.epil, %if.then238, %if.end230, %if.then194, %if.else190
  %wake_owners.2 = phi i8 [ 0, %if.end230 ], [ 0, %if.else190 ], [ 0, %if.then194 ], [ 0, %if.then238 ], [ %wake_owners.1.lcssa.ph, %if.end271.loopexit.unr-lcssa ], [ %or.epil, %land.end260.epil ], [ %wake_owners.0541.unr, %do.end243.epil ]
  %102 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp273 = icmp eq %"struct.Halide::Runtime::Internal::work"* %102, null
  %103 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp273, label %if.then274, label %if.else281

if.then274:                                       ; preds = %if.end271
  %104 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub277 = sub nsw i32 %104, %103
  store i32 %sub277, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end290

if.else281:                                       ; preds = %if.end271
  %threads_reserved285 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %102, i64 0, i32 6
  %105 = load i32, i32* %threads_reserved285, align 8, !tbaa !56
  %sub286 = sub nsw i32 %105, %103
  store i32 %sub286, i32* %threads_reserved285, align 8, !tbaa !56
  br label %if.end290

if.end290:                                        ; preds = %if.else281, %if.then274
  %106 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %dec292 = add nsw i32 %106, -1
  store i32 %dec292, i32* %active_workers132, align 8, !tbaa !35
  %107 = and i8 %wake_owners.2, 1
  %tobool296.not = icmp eq i8 %107, 0
  br i1 %tobool296.not, label %lor.lhs.false297, label %if.then310

lor.lhs.false297:                                 ; preds = %if.end290
  %cmp299 = icmp eq i32 %dec292, 0
  br i1 %cmp299, label %land.lhs.true300, label %while.cond.backedge

land.lhs.true300:                                 ; preds = %lor.lhs.false297
  %extent302 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %108 = load i32, i32* %extent302, align 8, !tbaa !25
  %cmp303 = icmp eq i32 %108, 0
  br i1 %cmp303, label %land.lhs.true307, label %lor.lhs.false304

lor.lhs.false304:                                 ; preds = %land.lhs.true300
  %exit_status305 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  %109 = load i32, i32* %exit_status305, align 4, !tbaa !34
  %cmp306.not = icmp eq i32 %109, 0
  br i1 %cmp306.not, label %while.cond.backedge, label %land.lhs.true307

land.lhs.true307:                                 ; preds = %lor.lhs.false304, %land.lhs.true300
  %owner_is_sleeping308 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 11
  %110 = load i8, i8* %owner_is_sleeping308, align 4, !tbaa !37, !range !17
  %tobool309.not = icmp eq i8 %110, 0
  br i1 %tobool309.not, label %while.cond.backedge, label %if.then310

if.then310:                                       ; preds = %land.lhs.true307, %if.end290
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #16
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then310, %land.lhs.true307, %lor.lhs.false304, %lor.lhs.false297, %if.end124, %if.else108, %if.then107, %if.then15, %while.end
  %spin_count.0.be = phi i32 [ %spin_count.0, %while.end ], [ %spin_count.0, %if.then15 ], [ %inc, %if.then107 ], [ %inc, %if.else108 ], [ %spin_count.1, %if.end124 ], [ 0, %if.then310 ], [ 0, %land.lhs.true307 ], [ 0, %lor.lhs.false304 ], [ 0, %lor.lhs.false297 ]
  br label %while.cond, !llvm.loop !77

while.end316:                                     ; preds = %cond.end, %cond.false
  ret void

if.then247.1:                                     ; preds = %for.inc
  store i32 %result.2510, i32* %exit_status245.1, align 4, !tbaa !34
  %111 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.1 = icmp eq i32 %111, 0
  br i1 %cmp253.1, label %land.rhs254.1, label %land.end260.1

land.rhs254.1:                                    ; preds = %if.then247.1
  %owner_is_sleeping258.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 11
  %112 = load i8, i8* %owner_is_sleeping258.1, align 4, !tbaa !37, !range !17
  br label %land.end260.1

land.end260.1:                                    ; preds = %land.rhs254.1, %if.then247.1
  %113 = phi i8 [ 0, %if.then247.1 ], [ %112, %land.rhs254.1 ]
  %114 = and i8 %wake_owners.1, 1
  %or.1 = or i8 %113, %114
  br label %for.inc.1

for.inc.1:                                        ; preds = %land.end260.1, %for.inc
  %wake_owners.1.1 = phi i8 [ %or.1, %land.end260.1 ], [ %wake_owners.1, %for.inc ]
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %if.end271.loopexit.unr-lcssa, label %do.end243, !llvm.loop !78
}

; Function Attrs: nounwind
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %4 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #15
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %7 = ptrtoint %struct.halide_mutex* %mutex to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %6, i64 %7) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #15
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #0 align 2 {
entry:
  %call = tail call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #16
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)***
  %state.i60 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  br label %while.cond

while.cond:                                       ; preds = %cleanup, %entry
  %data_location.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %head, %entry ], [ %data_location.1, %cleanup ]
  %prev.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ null, %entry ], [ %prev.1, %cleanup ]
  %data.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %0, %entry ], [ %data.1, %cleanup ]
  %retval.0 = phi i64 [ undef, %entry ], [ %retval.1, %cleanup ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, null
  br i1 %cmp.not, label %while.end22, label %while.body

while.body:                                       ; preds = %while.cond
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 1
  %2 = load atomic i64, i64* %sleep_address monotonic, align 8
  %cmp2 = icmp eq i64 %2, %addr
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 2
  %3 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next3, align 8, !tbaa !79
  br i1 %cmp2, label %if.then, label %cleanup

if.then:                                          ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.0, align 8, !tbaa !10
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp4 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %4, %data.0
  br i1 %cmp4, label %if.then5, label %while.cond7.preheader

while.cond7.preheader:                            ; preds = %if.then
  %cmp872.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, null
  br i1 %cmp872.not, label %if.end, label %while.body9

if.then5:                                         ; preds = %if.then
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.0, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end

while.body9:                                      ; preds = %while.cond7.preheader, %while.body9
  %data2.073 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %6, %while.body9 ], [ %3, %while.cond7.preheader ]
  %sleep_address10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 1
  %5 = load atomic i64, i64* %sleep_address10 monotonic, align 8
  %cmp11 = icmp eq i64 %5, %addr
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next12, align 8, !tbaa !79
  %cmp8 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, null
  %7 = or i1 %cmp11, %cmp8
  br i1 %7, label %if.end.loopexit, label %while.body9, !llvm.loop !88

if.end.loopexit:                                  ; preds = %while.body9
  %frombool = zext i1 %cmp11 to i8
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit, %if.then5, %while.cond7.preheader
  %more_waiters.1 = phi i8 [ 0, %if.then5 ], [ 0, %while.cond7.preheader ], [ %frombool, %if.end.loopexit ]
  %tobool13 = icmp ne i8 %more_waiters.1, 0
  %vtable = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable, i64 2
  %8 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn, align 8
  %call14 = tail call i64 %8(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 1, i1 zeroext %tobool13) #14
  %unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 3
  store i64 %call14, i64* %unpark_info, align 8, !tbaa !89
  %mutex.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 0
  %call.i = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i) #14
  %9 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i61 = and i64 %9, 2
  %cmp.i62 = icmp ne i64 %and.i61, 0
  %cmp3.not.i63 = icmp ult i64 %9, 4
  %or.cond.i64 = or i1 %cmp3.not.i63, %cmp.i62
  br i1 %or.cond.i64, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, label %if.then.i65

if.then.i65:                                      ; preds = %if.end
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66: ; preds = %if.then.i65, %if.end
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 1
  %call.i67 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #14
  %call.i69 = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i) #14
  %10 = zext i8 %more_waiters.1 to i64
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %next3, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %data.0, %while.body ]
  %data.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %3, %while.body ]
  %retval.1 = phi i64 [ %10, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %retval.0, %while.body ]
  br i1 %cmp2, label %cleanup27, label %while.cond, !llvm.loop !91

while.end22:                                      ; preds = %while.cond
  %vtable23 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn24 = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable23, i64 2
  %11 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn24, align 8
  %call25 = tail call i64 %11(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 0, i1 zeroext false) #14
  %12 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i = and i64 %12, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %12, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup27, label %if.then.i

if.then.i:                                        ; preds = %while.end22
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %cleanup27

cleanup27:                                        ; preds = %cleanup, %if.then.i, %while.end22
  %retval.2 = phi i64 [ 0, %while.end22 ], [ 0, %if.then.i ], [ %retval.1, %cleanup ]
  ret i64 %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) local_unnamed_addr #0 {
entry:
  %mul.i = mul i64 %addr, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit: ; preds = %if.then.i, %entry
  ret %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx
}

declare i32 @pthread_mutex_lock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %expected.0 = phi i64 [ %0, %entry ], [ %3, %if.end ]
  %and = and i64 %expected.0, 2
  %tobool.not = icmp ne i64 %and, 0
  %cmp = icmp ult i64 %expected.0, 4
  %or.cond = or i1 %cmp, %tobool.not
  br i1 %or.cond, label %cleanup75, label %if.end

if.end:                                           ; preds = %while.cond
  %or = or i64 %expected.0, 2
  %1 = cmpxchg weak i64* %state, i64 %expected.0, i64 %or acquire monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  br i1 %2, label %while.cond11, label %while.cond

while.cond11:                                     ; preds = %if.end, %cleanup70
  %.pn.pn = phi { i64, i1 } [ %.pn, %cleanup70 ], [ %1, %if.end ]
  %expected.3 = extractvalue { i64, i1 } %.pn.pn, 0
  %and13 = and i64 %expected.3, -4
  %4 = inttoptr i64 %and13 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  %tail14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %4, i64 0, i32 3
  %tail.0143 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %cmp16144 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0143, null
  br i1 %cmp16144, label %while.body17, label %while.end23

while.body17:                                     ; preds = %while.cond11, %do.end
  %current.0145 = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %5, %do.end ], [ %4, %while.cond11 ]
  %next18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next18, align 8, !tbaa !94
  %cmp19.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, null
  br i1 %cmp19.not, label %if.then20, label %do.end

if.then20:                                        ; preds = %while.body17
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([137 x i8], [137 x i8]* @.str.5, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then20, %while.body17
  %prev = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev, align 8, !tbaa !95
  %tail22 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 3
  %tail.0 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail22, align 8, !tbaa !92
  %cmp16 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0, null
  br i1 %cmp16, label %while.body17, label %while.end23, !llvm.loop !96

while.end23:                                      ; preds = %do.end, %while.cond11
  %tail.0.lcssa = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %tail.0143, %while.cond11 ], [ %tail.0, %do.end ]
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %and25 = and i64 %expected.3, 1
  %tobool26.not = icmp eq i64 %and25, 0
  br i1 %tobool26.not, label %if.end35, label %if.then27

if.then27:                                        ; preds = %while.end23
  %and29 = and i64 %expected.3, -3
  %6 = cmpxchg weak i64* %state, i64 %expected.3, i64 %and29 acq_rel monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %cleanup75, label %cleanup70

if.end35:                                         ; preds = %while.end23
  %prev36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 2
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev36, align 8, !tbaa !95
  %cmp37 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, null
  br i1 %cmp37, label %while.body41, label %if.else62

while.body41:                                     ; preds = %if.end35, %if.end47
  %expected.5146 = phi i64 [ %11, %if.end47 ], [ %expected.3, %if.end35 ]
  %and43 = and i64 %expected.5146, 1
  %9 = cmpxchg weak i64* %state, i64 %expected.5146, i64 %and43 acq_rel monotonic
  %10 = extractvalue { i64, i1 } %9, 1
  br i1 %10, label %if.end66, label %if.end47

if.end47:                                         ; preds = %while.body41
  %11 = extractvalue { i64, i1 } %9, 0
  %cmp49 = icmp ult i64 %11, 4
  br i1 %cmp49, label %while.body41, label %cleanup70, !llvm.loop !97

if.else62:                                        ; preds = %if.end35
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %12 = atomicrmw and i64* %state, i64 -3 release
  br label %if.end66

if.end66:                                         ; preds = %while.body41, %if.else62
  %mutex.i103 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 0
  %call.i104 = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i103) #14
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 1
  %call.i101 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #14
  %call.i = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i103) #14
  br label %cleanup75

cleanup70:                                        ; preds = %if.end47, %if.then27
  %.pn = phi { i64, i1 } [ %6, %if.then27 ], [ %9, %if.end47 ]
  fence acquire
  br label %while.cond11

cleanup75:                                        ; preds = %while.cond, %if.then27, %if.end66
  ret void
}

declare i32 @pthread_cond_signal(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_unlock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %node = alloca %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", align 8
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i8*
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 2
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 0
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 1
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 1
  %tail.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 3
  %2 = ptrtoint %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i64
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i to <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>*
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %while.cond.outer.backedge, %entry
  %expected.0.ph = phi i64 [ %0, %entry ], [ %expected.0.ph.be, %while.cond.outer.backedge ]
  %spinner.sroa.0.0.ph = phi i32 [ 40, %entry ], [ %spinner.sroa.0.0.ph.be, %while.cond.outer.backedge ]
  %and46 = and i64 %expected.0.ph, 1
  %tobool.not47 = icmp eq i64 %and46, 0
  br i1 %tobool.not47, label %if.then, label %if.end4

if.then:                                          ; preds = %while.cond.outer, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %expected.048 = phi i64 [ %6, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit ], [ %expected.0.ph, %while.cond.outer ]
  %or = or i64 %expected.048, 1
  %4 = cmpxchg weak i64* %state, i64 %expected.048, i64 %or acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup23, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit: ; preds = %if.then
  %6 = extractvalue { i64, i1 } %4, 0
  %and = and i64 %6, 1
  %tobool.not = icmp eq i64 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end4.loopexit

if.end4.loopexit:                                 ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %7 = extractvalue { i64, i1 } %4, 0
  br label %if.end4

if.end4:                                          ; preds = %if.end4.loopexit, %while.cond.outer
  %expected.0.lcssa = phi i64 [ %expected.0.ph, %while.cond.outer ], [ %7, %if.end4.loopexit ]
  %cmp.not = icmp ugt i64 %expected.0.lcssa, 3
  %cmp.i = icmp sgt i32 %spinner.sroa.0.0.ph, 0
  %or.cond = and i1 %cmp.i, %cmp.not
  br i1 %or.cond, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, label %if.end9

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit: ; preds = %if.end4
  %cmp4.i = icmp sgt i32 %spinner.sroa.0.0.ph, 1
  br i1 %cmp4.i, label %if.then7, label %if.end9

if.then7:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit
  %dec.i = add nsw i32 %spinner.sroa.0.0.ph, -1
  call void @halide_thread_yield() #14
  %8 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond.outer.backedge

if.end9:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, %if.end4
  %spinner.sroa.0.2 = phi i32 [ %spinner.sroa.0.0.ph, %if.end4 ], [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit ]
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1) #15
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %call.i.i29 = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #14
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #14
  store <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>* %3, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %and10 = and i64 %expected.0.lcssa, -4
  %cmp11 = icmp eq i64 %and10, 0
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  br label %if.end13

if.else:                                          ; preds = %if.end9
  %9 = inttoptr i64 %and10 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %9, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i, align 8, !tbaa !94
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  %and15 = and i64 %expected.0.lcssa, 3
  %or16 = or i64 %and15, %2
  %10 = cmpxchg weak i64* %state, i64 %expected.0.lcssa, i64 %or16 release monotonic
  %11 = extractvalue { i64, i1 } %10, 1
  br i1 %11, label %if.then19, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit: ; preds = %if.end13
  %12 = extractvalue { i64, i1 } %10, 0
  br label %if.end22

if.then19:                                        ; preds = %if.end13
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %13 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %13, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %if.then19, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %14 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %14, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %if.then19
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %15 = load atomic i64, i64* %state monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit
  %expected.3 = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %12, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %spinner.sroa.0.3 = phi i32 [ 40, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %spinner.sroa.0.2, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %call.i.i = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #14
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1) #15
  br label %while.cond.outer.backedge

while.cond.outer.backedge:                        ; preds = %if.end22, %if.then7
  %expected.0.ph.be = phi i64 [ %8, %if.then7 ], [ %expected.3, %if.end22 ]
  %spinner.sroa.0.0.ph.be = phi i32 [ %dec.i, %if.then7 ], [ %spinner.sroa.0.3, %if.end22 ]
  br label %while.cond.outer

cleanup23:                                        ; preds = %if.then
  ret void
}

declare i32 @pthread_mutex_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_wait(%struct.pthread_mutex_t*, %struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_cond_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %lock_state, align 8, !tbaa !43
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 3
  ret i1 %cmp
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  %0 = select i1 %more_waiters, i64 2, i64 0
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %1 = load i64*, i64** %lock_state, align 8, !tbaa !43
  store atomic i64 %0, i64* %1 release, align 8
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak void @halide_cond_broadcast(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #15
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !99
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !101
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5, i64 %0, i64 0) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #15
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = load atomic i32, i32* %value acquire, align 4
  %sub12 = sub nsw i32 %0, %n
  %cmp113 = icmp sgt i32 %sub12, -1
  br i1 %cmp113, label %land.rhs, label %return

land.rhs:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit
  %sub15 = phi i32 [ %sub, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %sub12, %if.end ]
  %expected.014 = phi i32 [ %3, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %0, %if.end ]
  %1 = cmpxchg weak i32* %value, i32 %expected.014, i32 %sub15 acq_rel monotonic
  %2 = extractvalue { i32, i1 } %1, 1
  br i1 %2, label %return.loopexit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit: ; preds = %land.rhs
  %3 = extractvalue { i32, i1 } %1, 0
  %sub = sub nsw i32 %3, %n
  %cmp1 = icmp sgt i32 %sub, -1
  br i1 %cmp1, label %land.rhs, label %return.loopexit

return.loopexit:                                  ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit, %land.rhs
  %4 = extractvalue { i32, i1 } %1, 1
  br label %return

return:                                           ; preds = %return.loopexit, %if.end, %entry
  %retval.0 = phi i1 [ true, %entry ], [ false, %if.end ], [ %4, %return.loopexit ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_cond_wait(%struct.halide_mutex* %cond, %struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #15
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !102
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  %2 = bitcast %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i to %struct.halide_mutex**
  store %struct.halide_mutex* %mutex, %struct.halide_mutex** %2, align 8, !tbaa !104
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %4 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %3, i64 %4) #14
  %5 = ptrtoint %struct.halide_mutex* %mutex to i64
  %cmp.not.i = icmp eq i64 %call.i, %5
  %6 = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %7 = cmpxchg weak i64* %6, i64 0, i64 1 acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  %9 = load atomic i64, i64* %6 monotonic, align 8
  %10 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i to i8*
  %11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0
  br label %while.cond.outer.i.i.i

while.cond.outer.i.i.i:                           ; preds = %while.cond.outer.i.i.i.backedge, %if.then.i.i
  %expected.0.ph.i.i.i = phi i64 [ %9, %if.then.i.i ], [ %expected.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i.i = phi i32 [ 40, %if.then.i.i ], [ %spinner.sroa.0.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %and55.i.i.i = and i64 %expected.0.ph.i.i.i, 1
  %tobool.not56.i.i.i = icmp eq i64 %and55.i.i.i, 0
  br i1 %tobool.not56.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i

if.then.i.i.i:                                    ; preds = %while.cond.outer.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %expected.057.i.i.i = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i ], [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ]
  %or.i.i.i = or i64 %expected.057.i.i.i, 1
  %13 = cmpxchg weak i64* %6, i64 %expected.057.i.i.i, i64 %or.i.i.i acquire monotonic
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then.i.i.i
  %15 = extractvalue { i64, i1 } %13, 0
  %and.i.i.i = and i64 %15, 1
  %tobool.not.i.i.i = icmp eq i64 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i.loopexit

if.end4.i.i.i.loopexit:                           ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %16 = extractvalue { i64, i1 } %13, 0
  br label %if.end4.i.i.i

if.end4.i.i.i:                                    ; preds = %if.end4.i.i.i.loopexit, %while.cond.outer.i.i.i
  %expected.0.lcssa.i.i.i = phi i64 [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ], [ %16, %if.end4.i.i.i.loopexit ]
  %cmp.i.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, label %if.end8.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i: ; preds = %if.end4.i.i.i
  %cmp4.i.not.i.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i.i, 1
  br i1 %cmp4.i.not.i.i.i, label %if.end8.i.i.i, label %if.then6.i.i.i

if.then6.i.i.i:                                   ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i
  %dec.i.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i.i, -1
  call void @halide_thread_yield() #14
  %17 = load atomic i64, i64* %6 monotonic, align 8
  br label %while.cond.outer.i.i.i.backedge

if.end8.i.i.i:                                    ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, %if.end4.i.i.i
  %spinner.sroa.0.152.i.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i ], [ %spinner.sroa.0.0.ph.i.i.i, %if.end4.i.i.i ]
  %and9.i.i.i = and i64 %expected.0.lcssa.i.i.i, 2
  %cmp.i.i.i = icmp eq i64 %and9.i.i.i, 0
  br i1 %cmp.i.i.i, label %if.then10.i.i.i, label %if.end19.i.i.i

if.then10.i.i.i:                                  ; preds = %if.end8.i.i.i
  %or12.i.i.i = or i64 %expected.0.lcssa.i.i.i, 2
  %18 = cmpxchg weak i64* %6, i64 %expected.0.lcssa.i.i.i, i64 %or12.i.i.i monotonic monotonic
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %if.end19.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then10.i.i.i
  %20 = extractvalue { i64, i1 } %18, 0
  br label %while.cond.outer.i.i.i.backedge

if.end19.i.i.i:                                   ; preds = %if.then10.i.i.i, %if.end8.i.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #15
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !41
  store i64* %6, i64** %lock_state2.i.i.i.i, align 8, !tbaa !43
  %call21.i.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %12, i64 %5) #14
  %cmp22.i.i.i = icmp eq i64 %call21.i.i.i, %5
  br i1 %cmp22.i.i.i, label %cleanup30.critedge.i.i.i, label %if.end24.i.i.i

if.end24.i.i.i:                                   ; preds = %if.end19.i.i.i
  %21 = load atomic i64, i64* %6 monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #15
  br label %while.cond.outer.i.i.i.backedge

while.cond.outer.i.i.i.backedge:                  ; preds = %if.end24.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i, %if.then6.i.i.i
  %expected.0.ph.i.i.i.be = phi i64 [ %20, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ %21, %if.end24.i.i.i ], [ %17, %if.then6.i.i.i ]
  %spinner.sroa.0.0.ph.i.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ 40, %if.end24.i.i.i ], [ %dec.i.i.i.i, %if.then6.i.i.i ]
  br label %while.cond.outer.i.i.i

cleanup30.critedge.i.i.i:                         ; preds = %if.end19.i.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #15
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.else.i:                                        ; preds = %entry
  %22 = load atomic i64, i64* %6 monotonic, align 8
  %and.i = and i64 %22, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %if.then2.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.then2.i:                                       ; preds = %if.else.i
  call void @halide_print(i8* null, i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.5.6, i64 0, i64 0)) #14
  call void @abort() #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit: ; preds = %if.then.i.i.i, %if.then2.i, %if.else.i, %cleanup30.critedge.i.i.i, %if.then.i
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #4 align 2 {
entry:
  %queue_data = alloca %"struct.Halide::Runtime::Internal::Synchronization::queue_data", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %0) #15
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 0
  %call.i.i = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #14
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 1
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #14
  %sleep_address.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 1
  store i64 0, i64* %sleep_address.i, align 8, !tbaa !105
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  %unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 3
  store i64 0, i64* %unpark_info.i, align 8, !tbaa !89
  %call = call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #16
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #15
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call2 = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #14
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %4 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %4, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %4, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %cleanup

if.end:                                           ; preds = %entry
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  store i64 %addr, i64* %sleep_address.i, align 8, !tbaa !105
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !109
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, i64 0, i32 2
  %head.sink = select i1 %cmp.not, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head.sink, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %state.i23 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %7 = atomicrmw and i64* %state.i23, i64 -2 release
  %and.i24 = and i64 %7, 2
  %cmp.i25 = icmp ne i64 %and.i24, 0
  %cmp3.not.i26 = icmp ult i64 %7, 4
  %or.cond.i27 = or i1 %cmp3.not.i26, %cmp.i25
  br i1 %or.cond.i27, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, label %if.then.i28

if.then.i28:                                      ; preds = %if.end
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29: ; preds = %if.then.i28, %if.end
  %8 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)***
  %vtable9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*** %8, align 8, !tbaa !41
  %vfn10 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vtable9, i64 1
  %9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vfn10, align 8
  call void %9(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) #14
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %10 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %10, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %11 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %11, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %if.then.i, %if.then
  %unpark_info.i.sink = phi i64* [ %unpark_info.i, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %invalid_unpark_info.i, %if.then ], [ %invalid_unpark_info.i, %if.then.i ]
  %12 = load i64, i64* %unpark_info.i.sink, align 8, !tbaa !110
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #15
  %call.i.i22 = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #14
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %0) #15
  ret i64 %12
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store atomic i64 %3, i64* %0 monotonic, align 8
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp4.not = icmp eq i64 %1, %3
  br i1 %cmp4.not, label %cleanup, label %if.then5

if.then5:                                         ; preds = %if.else
  %invalid_unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 %3, i64* %invalid_unpark_info, align 8, !tbaa !108
  br label %cleanup

cleanup:                                          ; preds = %if.then5, %if.else, %if.then
  %retval.0 = phi i1 [ false, %if.then5 ], [ true, %if.else ], [ true, %if.then ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this) unnamed_addr #4 comdat align 2 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %0 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0, i64 0, i32 0
  %1 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  br i1 %2, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %3 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %5 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #15
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %8 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0 to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %7, i64 %8) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #15
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr_from, i64 %addr_to, i64 %unpark_info) local_unnamed_addr #4 align 2 {
entry:
  %buckets = alloca %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #15
  call void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %buckets, i64 %addr_from, i64 %addr_to) #16
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #15
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #14
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #16
  br label %cleanup

if.end:                                           ; preds = %entry
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %cmp.not92 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  br i1 %cmp.not92, label %if.end38, label %while.body

while.body:                                       ; preds = %if.end, %if.end22
  %wakeup.098 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end22 ], [ null, %if.end ]
  %requeue_tail.097 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.2, %if.end22 ], [ null, %if.end ]
  %requeue.096 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.3, %if.end22 ], [ null, %if.end ]
  %data.095 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %7, %if.end22 ], [ %5, %if.end ]
  %prev.094 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.1, %if.end22 ], [ null, %if.end ]
  %data_location.093 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.1, %if.end22 ], [ %head, %if.end ]
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 1
  %6 = load atomic i64, i64* %sleep_address monotonic, align 8
  %next2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 2
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next2, align 8, !tbaa !79
  %cmp3 = icmp eq i64 %6, %addr_from
  br i1 %cmp3, label %if.then4, label %if.end22

if.then4:                                         ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.093, align 8, !tbaa !10
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %8, i64 0, i32 2
  %9 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp6 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %9, %data.095
  br i1 %cmp6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.then4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.094, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.then4
  %10 = load i8, i8* %1, align 8, !tbaa !106, !range !17
  %tobool = icmp ne i8 %10, 0
  %cmp11 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.098, null
  %or.cond = and i1 %cmp11, %tobool
  br i1 %or.cond, label %if.end22, label %if.else

if.else:                                          ; preds = %if.end10
  %cmp13 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.096, null
  br i1 %cmp13, label %if.end17, label %if.else15

if.else15:                                        ; preds = %if.else
  %next16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.097, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next16, align 8, !tbaa !79
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.else
  %requeue.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.else15 ], [ %data.095, %if.else ]
  store atomic i64 %addr_to, i64* %sleep_address monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.end17, %if.end10, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.093, %if.end10 ], [ %data_location.093, %if.end17 ], [ %next2, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.094, %if.end10 ], [ %prev.094, %if.end17 ], [ %data.095, %while.body ]
  %requeue.3 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.end10 ], [ %requeue.1, %if.end17 ], [ %requeue.096, %while.body ]
  %requeue_tail.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.097, %if.end10 ], [ %data.095, %if.end17 ], [ %requeue_tail.097, %while.body ]
  %wakeup.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.095, %if.end10 ], [ %wakeup.098, %if.end17 ], [ %wakeup.098, %while.body ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !113

while.end:                                        ; preds = %if.end22
  %cmp23.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, null
  br i1 %cmp23.not, label %if.end38, label %if.then24

if.then24:                                        ; preds = %while.end
  %next25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next25, align 8, !tbaa !79
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %11 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %head26 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 1
  %12 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head26, align 8, !tbaa !109
  %cmp27 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %12, null
  br i1 %cmp27, label %if.end35, label %if.else31

if.else31:                                        ; preds = %if.then24
  %tail33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  %13 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail33, align 8, !tbaa !85
  %next34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %13, i64 0, i32 2
  br label %if.end35

if.end35:                                         ; preds = %if.else31, %if.then24
  %next34.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %next34, %if.else31 ], [ %head26, %if.then24 ]
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next34.sink, align 8, !tbaa !10
  %tail37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail37, align 8, !tbaa !85
  br label %if.end38

if.end38:                                         ; preds = %if.end35, %while.end, %if.end
  %cmp23106 = phi i1 [ true, %if.end35 ], [ false, %while.end ], [ false, %if.end ]
  %wakeup.0.lcssa105 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end35 ], [ %wakeup.2, %while.end ], [ null, %if.end ]
  %cmp39 = icmp ne %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, null
  %14 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)***
  %vtable41 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*** %14, align 8, !tbaa !41
  %vfn42 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vtable41, i64 3
  %15 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vfn42, align 8
  call void %15(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %cmp39, i1 zeroext %cmp23106) #14
  br i1 %cmp39, label %if.then44, label %if.else48

if.then44:                                        ; preds = %if.end38
  %unpark_info45 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 3
  store i64 %unpark_info, i64* %unpark_info45, align 8, !tbaa !89
  %mutex.i89 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 0
  %call.i90 = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i89) #14
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #16
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 1
  %call.i88 = call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #14
  %call.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i89) #14
  br label %if.end49

if.else48:                                        ; preds = %if.end38
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #16
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.then44
  %16 = load i8, i8* %1, align 8
  %17 = and i8 %16, 1
  %tobool52 = icmp ne i8 %17, 0
  %18 = and i1 %cmp39, %tobool52
  %conv = zext i1 %18 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then
  %retval.0 = phi i32 [ %conv, %if.end49 ], [ 0, %if.then ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #15
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* noalias sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %agg.result, i64 %addr_from, i64 %addr_to) local_unnamed_addr #4 {
entry:
  %mul.i = mul i64 %addr_from, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %mul.i37 = mul i64 %addr_to, -7046029254386353131
  %shr.i38 = lshr i64 %mul.i37, 54
  %cmp = icmp eq i64 %shr.i, %shr.i38
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i42, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %cleanup, label %if.then.i43

if.then.i43:                                      ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp2 = icmp ult i64 %shr.i, %shr.i38
  br i1 %cmp2, label %if.then3, label %if.else9

if.then3:                                         ; preds = %if.else
  %arrayidx5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %state.i52 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0, i32 0
  %2 = cmpxchg weak i64* %state.i52, i64 0, i64 1 acquire monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, label %if.then.i53

if.then.i53:                                      ; preds = %if.then3
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54: ; preds = %if.then.i53, %if.then3
  %state.i49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0, i32 0
  %4 = cmpxchg weak i64* %state.i49, i64 0, i64 1 acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup, label %if.then.i50

if.then.i50:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #14
  br label %cleanup

if.else9:                                         ; preds = %if.else
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %arrayidx13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0, i32 0
  %6 = cmpxchg weak i64* %state.i39, i64 0, i64 1 acquire monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, label %if.then.i40

if.then.i40:                                      ; preds = %if.else9
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41: ; preds = %if.then.i40, %if.else9
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0, i32 0
  %8 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41
  %mutex15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex15) #14
  br label %cleanup

cleanup:                                          ; preds = %if.then.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, %if.then.i50, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, %if.then.i43, %if.then
  %arrayidx13.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx5, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx5, %if.then.i50 ], [ %arrayidx13, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx13, %if.then.i ]
  %arrayidx11.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx6, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx6, %if.then.i50 ], [ %arrayidx11, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx11, %if.then.i ]
  %from2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from2.i, align 8, !tbaa !10
  %to3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to3.i, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) local_unnamed_addr #0 {
entry:
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %1 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %2 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %2, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %2, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end15, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %if.end15

if.else:                                          ; preds = %entry
  %cmp4 = icmp ugt %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %state.i25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %3 = atomicrmw and i64* %state.i25, i64 -2 release
  %and.i26 = and i64 %3, 2
  %cmp.i27 = icmp ne i64 %and.i26, 0
  %cmp3.not.i28 = icmp ult i64 %3, 4
  %or.cond.i29 = or i1 %cmp3.not.i28, %cmp.i27
  br i1 %or.cond.i29, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, label %if.then.i30

if.then.i30:                                      ; preds = %if.then5
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31: ; preds = %if.then.i30, %if.then5
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %state.i32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0, i32 0
  %5 = atomicrmw and i64* %state.i32, i64 -2 release
  %and.i33 = and i64 %5, 2
  %cmp.i34 = icmp ne i64 %and.i33, 0
  %cmp3.not.i35 = icmp ult i64 %5, 4
  %or.cond.i36 = or i1 %cmp3.not.i35, %cmp.i34
  br i1 %or.cond.i36, label %if.end15, label %if.then.i37

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31
  %mutex9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex9) #14
  br label %if.end15

if.else10:                                        ; preds = %if.else
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0, i32 0
  %6 = atomicrmw and i64* %state.i39, i64 -2 release
  %and.i40 = and i64 %6, 2
  %cmp.i41 = icmp ne i64 %and.i40, 0
  %cmp3.not.i42 = icmp ult i64 %6, 4
  %or.cond.i43 = or i1 %cmp3.not.i42, %cmp.i41
  br i1 %or.cond.i43, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, label %if.then.i44

if.then.i44:                                      ; preds = %if.else10
  %mutex12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex12) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45: ; preds = %if.then.i44, %if.else10
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %state.i46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0, i32 0
  %8 = atomicrmw and i64* %state.i46, i64 -2 release
  %and.i47 = and i64 %8, 2
  %cmp.i48 = icmp ne i64 %and.i47, 0
  %cmp3.not.i49 = icmp ult i64 %8, 4
  %or.cond.i50 = or i1 %cmp3.not.i49, %cmp.i48
  br i1 %or.cond.i50, label %if.end15, label %if.then.i51

if.then.i51:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #14
  br label %if.end15

if.end15:                                         ; preds = %if.then.i51, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, %if.then.i37, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, %if.then.i, %if.then
  ret void
}

; Function Attrs: nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #4 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !99
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  %cmp.not = icmp eq i64 %1, %3
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  store atomic i64 0, i64* %0 monotonic, align 8
  %4 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %4, i64 0, i32 0
  %5 = load atomic i64, i64* %state.i monotonic, align 8
  %and11.i = and i64 %5, 1
  %tobool.not12.i = icmp eq i64 %and11.i, 0
  br i1 %tobool.not12.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i
  %val.013.i = phi i64 [ %8, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ %5, %if.end ]
  %or.i = or i64 %val.013.i, 2
  %6 = cmpxchg weak i64* %state.i, i64 %val.013.i, i64 %or.i monotonic monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i: ; preds = %if.end.i
  %8 = extractvalue { i64, i1 } %6, 0
  %and.i = and i64 %8, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit: ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i, %if.end.i, %if.end
  %tobool.not.lcssa.i = phi i8 [ 1, %if.end ], [ 1, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ 0, %if.end.i ]
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  store i8 %tobool.not.lcssa.i, i8* %unpark_one, align 8, !tbaa !106
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, %entry
  ret i1 %cmp.not
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  %0 = load i8, i8* %unpark_one, align 8, !tbaa !106, !range !17
  %tobool.not = icmp ne i8 %0, 0
  %1 = and i1 %tobool.not, %some_requeued
  br i1 %1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, i64 0, i32 0
  %3 = atomicrmw or i64* %state.i, i64 2 monotonic
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() local_unnamed_addr #0 {
entry:
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #14
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.end, label %cond.true

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #14
  %tobool2.not = icmp eq i8* %call1, null
  br i1 %tobool2.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end, %entry
  %threads_str.010 = phi i8* [ %call1, %if.end ], [ %call, %entry ]
  %call3 = tail call i32 @atoi(i8* nonnull %threads_str.010) #14
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = tail call i32 @halide_host_cpu_count() #14
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal13worker_threadEPv(i8* %arg) #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %0 = bitcast i8* %arg to %"struct.Halide::Runtime::Internal::work"*
  tail call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %0) #16
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @malloc(i64 24) #14
  %f1 = bitcast i8* %call to void (i8*)**
  store void (i8*)* %f, void (i8*)** %f1, align 8, !tbaa !115
  %closure2 = getelementptr inbounds i8, i8* %call, i64 8
  %0 = bitcast i8* %closure2 to i8**
  store i8* %closure, i8** %0, align 8, !tbaa !117
  %handle = getelementptr inbounds i8, i8* %call, i64 16
  %1 = bitcast i8* %handle to i64*
  store i64 0, i64* %1, align 8, !tbaa !118
  %call4 = tail call i32 @pthread_create(i64* nonnull %1, i8* null, i8* (i8*)* nonnull @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv, i8* %call) #14
  %2 = bitcast i8* %call to %struct.halide_thread*
  ret %struct.halide_thread* %2
}

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv(i8* %arg) #0 {
entry:
  %f = bitcast i8* %arg to void (i8*)**
  %0 = load void (i8*)*, void (i8*)** %f, align 8, !tbaa !115
  %closure = getelementptr inbounds i8, i8* %arg, i64 8
  %1 = bitcast i8* %closure to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !117
  tail call void %0(i8* %2) #14
  ret i8* null
}

declare i32 @pthread_create(i64*, i8*, i8* (i8*)*, i8*) local_unnamed_addr #1

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  %conv = sext i32 %num_tasks to i64
  %0 = alloca %"struct.Halide::Runtime::Internal::work", i64 %conv, align 8
  %cmp76 = icmp sgt i32 %num_tasks, 0
  br i1 %cmp76, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %num_tasks.addr.0.lcssa = phi i32 [ %num_tasks, %entry ], [ %num_tasks.addr.1, %for.inc ]
  %cmp17 = icmp eq i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp17, label %cleanup, label %if.end19

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv82 = phi i64 [ %indvars.iv.next83, %for.inc ], [ 0, %entry ]
  %num_tasks.addr.078 = phi i32 [ %num_tasks.addr.1, %for.inc ], [ %num_tasks, %entry ]
  %tasks.addr.077 = phi %struct.halide_parallel_task_t* [ %tasks.addr.1, %for.inc ], [ %tasks, %entry ]
  %extent = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 0, i32 6
  %1 = load i32, i32* %extent, align 8, !tbaa !119
  %cmp1 = icmp slt i32 %1, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %dec = add nsw i32 %num_tasks.addr.078, -1
  br label %for.inc

if.end:                                           ; preds = %for.body
  %incdec.ptr = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 1
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82
  %2 = bitcast %"struct.Halide::Runtime::Internal::work"* %arrayidx to i8*
  %3 = bitcast %struct.halide_parallel_task_t* %tasks.addr.077 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %2, i8* nonnull align 8 dereferenceable(56) %3, i64 56, i1 false), !tbaa.struct !120
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 1
  store i32 (i8*, i32, i8*)* null, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 7
  store i8* %user_context, i8** %user_context6, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 5
  %4 = bitcast %"struct.Halide::Runtime::Internal::work"** %parent_job to i8**
  store i8* %task_parent, i8** %4, align 8, !tbaa !40
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %tasks.addr.1 = phi %struct.halide_parallel_task_t* [ %tasks.addr.077, %if.then ], [ %incdec.ptr, %if.end ]
  %num_tasks.addr.1 = phi i32 [ %dec, %if.then ], [ %num_tasks.addr.078, %if.end ]
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %5 = sext i32 %num_tasks.addr.1 to i64
  %cmp = icmp slt i64 %indvars.iv.next83, %5
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !121

if.end19:                                         ; preds = %for.cond.cleanup
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %6 = bitcast i8* %task_parent to %"struct.Halide::Runtime::Internal::work"*
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_tasks.addr.0.lcssa, %"struct.Halide::Runtime::Internal::work"* nonnull %0, %"struct.Halide::Runtime::Internal::work"* %6) #16
  %cmp2373 = icmp sgt i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp2373, label %for.body25.preheader, label %for.cond.cleanup24

for.body25.preheader:                             ; preds = %if.end19
  %wide.trip.count = zext i32 %num_tasks.addr.0.lcssa to i64
  br label %for.body25

for.cond.cleanup24:                               ; preds = %for.body25, %if.end19
  %exit_status20.0.lcssa = phi i32 [ 0, %if.end19 ], [ %spec.select, %for.body25 ]
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  br label %cleanup

for.body25:                                       ; preds = %for.body25, %for.body25.preheader
  %indvars.iv = phi i64 [ 0, %for.body25.preheader ], [ %indvars.iv.next, %for.body25 ]
  %exit_status20.074 = phi i32 [ 0, %for.body25.preheader ], [ %spec.select, %for.body25 ]
  %add.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %add.ptr) #16
  %exit_status28 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 9
  %7 = load i32, i32* %exit_status28, align 4, !tbaa !34
  %cmp29.not = icmp eq i32 %7, 0
  %spec.select = select i1 %cmp29.not, i32 %exit_status20.074, i32 %7
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup24, label %for.body25, !llvm.loop !122

cleanup:                                          ; preds = %for.cond.cleanup24, %for.cond.cleanup
  %retval.0 = phi i32 [ %exit_status20.0.lcssa, %for.cond.cleanup24 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #2 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  store atomic i32 %n, i32* %value release, align 4
  ret i32 %n
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = atomicrmw add i32* %value, i32 %n acq_rel
  %cmp = icmp eq i32 %0, 0
  %cmp1 = icmp ne i32 %n, 0
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #16
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #16
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %add = add nsw i32 %0, %n
  ret i32 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_pool_cleanup() #0 {
entry:
  tail call void @halide_shutdown_thread_pool() #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #16
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #16
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #16
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp4 = icmp sgt i32 %1, 0
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %call.i = tail call i8* @memset(i8* nonnull bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i32 0, i64 2116) #14
  br label %if.end

for.body:                                         ; preds = %if.then, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %indvars.iv
  %2 = load %struct.halide_thread*, %struct.halide_thread** %arrayidx, align 8, !tbaa !10
  tail call void @halide_join_thread(%struct.halide_thread* %2) #16
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %3 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %4 = sext i32 %3 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %4
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !123

if.end:                                           ; preds = %for.cond.cleanup, %entry
  ret void
}

declare i8* @memset(i8*, i32, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  %ret = alloca i8*, align 8
  %0 = bitcast %struct.halide_thread* %thread_arg to %"struct.Halide::Runtime::Internal::spawned_thread"*
  %1 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #15
  store i8* null, i8** %ret, align 8, !tbaa !10
  %handle = getelementptr inbounds %"struct.Halide::Runtime::Internal::spawned_thread", %"struct.Halide::Runtime::Internal::spawned_thread"* %0, i64 0, i32 2
  %2 = load i64, i64* %handle, align 8, !tbaa !118
  %call = call i32 @pthread_join(i64 %2, i8** nonnull %ret) #14
  %3 = bitcast %struct.halide_thread* %thread_arg to i8*
  call void @free(i8* %3) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #15
  ret void
}

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #1

; Function Attrs: nounwind
define weak void @halide_cond_signal(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #15
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !124
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !126
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #15
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  ret i1 true
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !124
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_malloc(i8* null, i64 8) #14
  %0 = bitcast i8* %call to %struct.halide_mutex_array*
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %conv = sext i32 %sz to i64
  %mul = shl nsw i64 %conv, 3
  %call1 = tail call i8* @halide_malloc(i8* null, i64 %mul) #14
  %1 = bitcast i8* %call to i8**
  store i8* %call1, i8** %1, align 8, !tbaa !127
  %cmp4 = icmp eq i8* %call1, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  tail call void @halide_free(i8* null, i8* nonnull %call) #14
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %call10 = tail call i8* @memset(i8* nonnull %call1, i32 0, i64 %mul) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then5, %entry
  %retval.0 = phi %struct.halide_mutex_array* [ null, %if.then5 ], [ %0, %if.end6 ], [ null, %entry ]
  ret %struct.halide_mutex_array* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %array to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !127
  tail call void @halide_free(i8* %user_context, i8* %1) #14
  tail call void @halide_free(i8* %user_context, i8* %array) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_lock(%struct.halide_mutex* %arrayidx) #16
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %arrayidx) #16
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  br i1 %cmp, label %if.end3.thread, label %if.end

if.end3.thread:                                   ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #14
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %0 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  br label %if.else.i

if.end:                                           ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %cmp1 = icmp eq i32 %n, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #16
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %n.addr.0 = phi i32 [ %call, %if.then2 ], [ %n, %if.end ]
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %cmp.i = icmp sgt i32 %n.addr.0, 256
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit, label %if.else.i

if.else.i:                                        ; preds = %if.end3, %if.end3.thread
  %2 = phi i32 [ %0, %if.end3.thread ], [ %1, %if.end3 ]
  %n.addr.012 = phi i32 [ %n, %if.end3.thread ], [ %n.addr.0, %if.end3 ]
  %3 = icmp sgt i32 %n.addr.012, 1
  %spec.select.i = select i1 %3, i32 %n.addr.012, i32 1
  br label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit

_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit: ; preds = %if.else.i, %if.end3
  %4 = phi i32 [ %2, %if.else.i ], [ %1, %if.end3 ]
  %call48 = phi i32 [ %spec.select.i, %if.else.i ], [ 256, %if.end3 ]
  store i32 %call48, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  ret i32 %4
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_set_custom_do_loop_task(i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_custom_parallel_runtime(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release) local_unnamed_addr #2 {
entry:
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  store i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i1 %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_symbol(i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* null, i8* %name) #14
  ret i8* %call
}

declare i8* @dlsym(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_load_library(i8* %name) #0 {
entry:
  %call = tail call i8* @dlopen(i8* %name, i32 1) #14
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call3 = tail call i8* @dlerror() #14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i8* %call
}

declare i8* @dlopen(i8*, i32) local_unnamed_addr #1

declare i8* @dlerror() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_library_symbol(i8* %lib, i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* %lib, i8* %name) #14
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_get_symbol(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_load_library(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i8*)* @halide_set_custom_get_library_symbol(i8* (i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  store i8* (i8*, i8*)* %f, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  ret i8* (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_symbol(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #14
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_load_library(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #14
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_library_symbol(i8* %lib, i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %lib, i8* %name) #14
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !129

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0)) #14
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #14
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

; Function Attrs: nounwind
define weak i32 @halide_default_trace(i8* %user_context, %struct.halide_trace_event_t* %e) #4 {
entry:
  %0 = atomicrmw add i32* @_ZZ20halide_default_traceE3ids, i32 1 seq_cst
  %call = tail call i32 @halide_get_trace_file(i8* %user_context) #16
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4
  %lanes = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %1 = load i16, i16* %lanes, align 2, !tbaa !130
  %conv = zext i16 %1 to i32
  %bits.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %2 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %2 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %mul = mul nuw nsw i32 %div.i, %conv
  %dimensions = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %3 = load i32, i32* %dimensions, align 8, !tbaa !137
  %mul3 = shl i32 %3, 2
  %func = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !138
  %call4 = tail call i64 @strlen(i8* %4) #14
  %5 = trunc i64 %call4 to i32
  %conv5 = add i32 %5, 1
  %trace_tag = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %6 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool.not = icmp eq i8* %6, null
  br i1 %tobool.not, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.then
  %call7 = tail call i64 @strlen(i8* nonnull %6) #14
  %7 = trunc i64 %call7 to i32
  %phi.cast = add i32 %7, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.then
  %cond = phi i32 [ %phi.cast, %cond.true ], [ 1, %if.then ]
  %add11 = add i32 %mul3, 31
  %add12 = add i32 %add11, %mul
  %add13 = add i32 %add12, %conv5
  %add14 = add i32 %add13, %cond
  %and = and i32 %add14, -4
  %8 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 0, i32 0
  %cmp.i.i = icmp ult i32 %and, 1048577
  %cursor.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 1
  %overage.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 2
  %arraydecay.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 0
  br i1 %cmp.i.i, label %while.body.i.i.us.i, label %while.body.i.i.i

while.body.i.i.us.i:                              ; preds = %cond.end, %while.body.i.i.us.i.backedge
  %9 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.us.i = and i32 %9, 1073741823
  %add.i.i.us.i = add nuw nsw i32 %and.i.i.us.i, 1
  %10 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.us.i, i32 %add.i.i.us.i seq_cst seq_cst
  %11 = extractvalue { i32, i1 } %10, 1
  br i1 %11, label %do.end.i.us.i, label %while.body.i.i.us.i.backedge

do.end.i.us.i:                                    ; preds = %while.body.i.i.us.i
  %12 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.us.i = add i32 %12, %and
  %cmp2.i.us.i = icmp ugt i32 %add.i.us.i, 1048576
  br i1 %cmp2.i.us.i, label %while.body.us.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.us.i:                                  ; preds = %do.end.i.us.i
  %13 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %14 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.us.i

while.body.i.i5.us.i:                             ; preds = %while.body.i.i5.us.i, %while.body.us.i
  %15 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %16 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i, label %while.body.i.i5.us.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i: ; preds = %while.body.i.i5.us.i
  %18 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.us.i = icmp eq i32 %18, 0
  br i1 %tobool.not.i.us.i, label %do.end.critedge.i.us.i, label %if.then.i9.us.i

if.then.i9.us.i:                                  ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %19 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.us.i = sub i32 %18, %19
  store i32 %sub.i.us.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.us.i = zext i32 %sub.i.us.i to i64
  %call.i.us.i = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.us.i) #14
  %conv5.i.us.i = trunc i64 %call.i.us.i to i32
  %cmp.i8.us.i = icmp eq i32 %sub.i.us.i, %conv5.i.us.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %20 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.us.i, label %while.body.i.i.us.i.backedge, label %if.then10.i.us.i

if.then10.i.us.i:                                 ; preds = %if.then.i9.us.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([151 x i8], [151 x i8]* @.str.32, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %while.body.i.i.us.i.backedge

do.end.critedge.i.us.i:                           ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %21 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.us.i.backedge

while.body.i.i.us.i.backedge:                     ; preds = %do.end.critedge.i.us.i, %if.then10.i.us.i, %if.then.i9.us.i, %while.body.i.i.us.i
  br label %while.body.i.i.us.i, !llvm.loop !145

while.body.i.i.i:                                 ; preds = %cond.end, %while.body.i.i.i.backedge
  %22 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.i = and i32 %22, 1073741823
  %add.i.i.i = add nuw nsw i32 %and.i.i.i, 1
  %23 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.i, i32 %add.i.i.i seq_cst seq_cst
  %24 = extractvalue { i32, i1 } %23, 1
  br i1 %24, label %if.then.i.i, label %while.body.i.i.i.backedge

if.then.i.i:                                      ; preds = %while.body.i.i.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.31, i64 0, i64 0)) #14
  tail call void @abort() #14
  %25 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.i400 = add i32 %25, %and
  %cmp2.i.i = icmp ugt i32 %add.i.i400, 1048576
  br i1 %cmp2.i.i, label %while.body.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.i:                                     ; preds = %if.then.i.i
  %26 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %27 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.i

while.body.i.i5.i:                                ; preds = %while.body.i.i5.i, %while.body.i
  %28 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %29 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %30 = extractvalue { i32, i1 } %29, 1
  br i1 %30, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i, label %while.body.i.i5.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i: ; preds = %while.body.i.i5.i
  %31 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.i = icmp eq i32 %31, 0
  br i1 %tobool.not.i.i, label %do.end.critedge.i.i, label %if.then.i9.i

if.then.i9.i:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %32 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.i = sub i32 %31, %32
  store i32 %sub.i.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.i = zext i32 %sub.i.i to i64
  %call.i.i401 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.i) #14
  %conv5.i.i = trunc i64 %call.i.i401 to i32
  %cmp.i8.i = icmp eq i32 %sub.i.i, %conv5.i.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %33 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.i, label %while.body.i.i.i.backedge, label %if.then10.i.i

if.then10.i.i:                                    ; preds = %if.then.i9.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([151 x i8], [151 x i8]* @.str.32, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %while.body.i.i.i.backedge

do.end.critedge.i.i:                              ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %34 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.i.backedge

while.body.i.i.i.backedge:                        ; preds = %do.end.critedge.i.i, %if.then10.i.i, %if.then.i9.i, %while.body.i.i.i
  br label %while.body.i.i.i, !llvm.loop !145

_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit: ; preds = %if.then.i.i, %do.end.i.us.i
  %.lcssa.i = phi i32 [ %12, %do.end.i.us.i ], [ %25, %if.then.i.i ]
  %idx.ext.i.i = zext i32 %.lcssa.i to i64
  %add.ptr.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 %idx.ext.i.i
  %cmp16 = icmp ugt i32 %and, 4096
  br i1 %cmp16, label %if.then17, label %if.end

if.then17:                                        ; preds = %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i404 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i404, label %if.then.i415, label %if.else.i421

if.then.i415:                                     ; preds = %if.then17
  %conv.i4071 = zext i32 %and to i64
  %call.i4082 = tail call i8* @halide_uint64_to_string(i8* null, i8* null, i64 %conv.i4071, i32 1) #14
  %call.i41117 = tail call i8* @halide_string_to_string(i8* %call.i4082, i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

if.else.i421:                                     ; preds = %if.then17
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %conv.i4073 = zext i32 %and to i64
  %call.i4084 = tail call i8* @halide_uint64_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i64 %conv.i4073, i32 1) #14
  %call.i411 = tail call i8* @halide_string_to_string(i8* %call.i4084, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i416 = ptrtoint i8* %call.i411 to i64
  %sub.ptr.rhs.cast.i.i417 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i418 = sub i64 1, %sub.ptr.rhs.cast.i.i417
  %add.i.i419 = add i64 %sub.ptr.sub.i.i418, %sub.ptr.lhs.cast.i.i416
  %call.i.i420 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* null, i8* nonnull %call.i, i64 %add.i.i419) #14
  tail call void @halide_print(i8* null, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit: ; preds = %if.else.i421, %if.then.i415
  tail call void @free(i8* %call.i) #14
  br label %if.end

if.end:                                           ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit, %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %size = bitcast i8* %add.ptr.i.i to i32*
  store i32 %and, i32* %size, align 4, !tbaa !146
  %id = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 4
  %35 = bitcast i8* %id to i32*
  store i32 %0, i32* %35, align 4, !tbaa !148
  %36 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 8
  %37 = bitcast %struct.halide_type_t* %type to i32*
  %38 = bitcast i8* %36 to i32*
  %39 = load i32, i32* %37, align 8
  store i32 %39, i32* %38, align 4
  %event = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %event22 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 12
  %40 = bitcast i32* %event to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4, !tbaa !14
  %dimensions26 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 24
  %42 = bitcast i8* %dimensions26 to i32*
  %43 = bitcast i8* %event22 to <4 x i32>*
  store <4 x i32> %41, <4 x i32>* %43, align 4, !tbaa !14
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %44 = load i32*, i32** %coordinates, align 8, !tbaa !149
  %tobool27.not = icmp eq i32* %44, null
  br i1 %tobool27.not, label %if.end33, label %if.then28

if.then28:                                        ; preds = %if.end
  %45 = bitcast i32* %44 to i8*
  %46 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %conv31 = zext i32 %mul3 to i64
  %call32 = tail call i8* @memcpy(i8* nonnull %46, i8* nonnull %45, i64 %conv31) #14
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.end
  %value = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %47 = load i8*, i8** %value, align 8, !tbaa !150
  %tobool34.not = icmp eq i8* %47, null
  br i1 %tobool34.not, label %if.end40, label %if.then35

if.then35:                                        ; preds = %if.end33
  %48 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i = sext i32 %50 to i64
  %add.ptr.i424 = getelementptr inbounds i32, i32* %49, i64 %idx.ext.i
  %51 = bitcast i32* %add.ptr.i424 to i8*
  %conv38 = zext i32 %mul to i64
  %call39 = tail call i8* @memcpy(i8* nonnull %51, i8* nonnull %47, i64 %conv38) #14
  br label %if.end40

if.end40:                                         ; preds = %if.end33, %if.then35
  %52 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i425 = sext i32 %54 to i64
  %add.ptr.i.i426 = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i425
  %55 = bitcast i32* %add.ptr.i.i426 to i8*
  %lanes.i = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 10
  %56 = bitcast i8* %lanes.i to i16*
  %57 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i427 = zext i16 %57 to i32
  %58 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 9
  %59 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i428 = zext i8 %59 to i32
  %add.i.i429 = add nuw nsw i32 %conv.i.i428, 7
  %div.i.i = lshr i32 %add.i.i429, 3
  %mul.i = mul nuw nsw i32 %div.i.i, %conv.i427
  %idx.ext.i430 = zext i32 %mul.i to i64
  %add.ptr.i431 = getelementptr inbounds i8, i8* %55, i64 %idx.ext.i430
  %60 = load i8*, i8** %func, align 8, !tbaa !138
  %conv43 = zext i32 %conv5 to i64
  %call44 = tail call i8* @memcpy(i8* nonnull %add.ptr.i431, i8* %60, i64 %conv43) #14
  %61 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i.i = sext i32 %61 to i64
  %add.ptr.i.i.i = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i.i
  %62 = bitcast i32* %add.ptr.i.i.i to i8*
  %63 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i.i432 = zext i16 %63 to i32
  %64 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i.i = zext i8 %64 to i32
  %add.i.i.i433 = add nuw nsw i32 %conv.i.i.i, 7
  %div.i.i.i = lshr i32 %add.i.i.i433, 3
  %mul.i.i = mul nuw nsw i32 %div.i.i.i, %conv.i.i432
  %idx.ext.i.i434 = zext i32 %mul.i.i to i64
  %add.ptr.i.i435 = getelementptr inbounds i8, i8* %62, i64 %idx.ext.i.i434
  br label %while.cond.i437

while.cond.i437:                                  ; preds = %while.cond.i437, %if.end40
  %f.0.i = phi i8* [ %add.ptr.i.i435, %if.end40 ], [ %incdec.ptr.i, %while.cond.i437 ]
  %incdec.ptr.i = getelementptr inbounds i8, i8* %f.0.i, i64 1
  %65 = load i8, i8* %f.0.i, align 1, !tbaa !14
  %tobool.not.i436 = icmp eq i8 %65, 0
  br i1 %tobool.not.i436, label %_ZN21halide_trace_packet_t9trace_tagEv.exit, label %while.cond.i437, !llvm.loop !153

_ZN21halide_trace_packet_t9trace_tagEv.exit:      ; preds = %while.cond.i437
  %66 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool47.not = icmp eq i8* %66, null
  %spec.select = select i1 %tobool47.not, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.10, i64 0, i64 0), i8* %66
  %conv53 = zext i32 %cond to i64
  %call54 = tail call i8* @memcpy(i8* nonnull %incdec.ptr.i, i8* %spec.select, i64 %conv53) #14
  %67 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  fence seq_cst
  %lock.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %67, i64 0, i32 0, i32 0
  %68 = atomicrmw sub i32* %lock.i.i, i32 1 seq_cst
  %69 = load i32, i32* %event, align 4, !tbaa !154
  %cmp56 = icmp eq i32 %69, 9
  br i1 %cmp56, label %if.then57, label %if.end277

if.then57:                                        ; preds = %_ZN21halide_trace_packet_t9trace_tagEv.exit
  %70 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i438 = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 0, i32 0
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %if.then57
  %71 = atomicrmw or i32* %lock.i.i438, i32 1073741824 seq_cst
  %72 = cmpxchg i32* %lock.i.i438, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %73 = extractvalue { i32, i1 } %72, 1
  br i1 %73, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i, label %while.body.i.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i: ; preds = %while.body.i.i
  %cursor.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 1
  %74 = load i32, i32* %cursor.i, align 4, !tbaa !142
  %tobool.not.i439 = icmp eq i32 %74, 0
  br i1 %tobool.not.i439, label %do.end.critedge.i, label %if.then.i442

if.then.i442:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %overage.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 2
  %75 = load i32, i32* %overage.i, align 4, !tbaa !144
  %sub.i = sub i32 %74, %75
  store i32 %sub.i, i32* %cursor.i, align 4, !tbaa !142
  %arraydecay.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 3, i64 0
  %conv.i440 = zext i32 %sub.i to i64
  %call.i441 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i, i64 %conv.i440) #14
  %conv5.i = trunc i64 %call.i441 to i32
  %cmp.i = icmp eq i32 %sub.i, %conv5.i
  store i32 0, i32* %cursor.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i, align 4, !tbaa !144
  %76 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br i1 %cmp.i, label %if.end277, label %if.then10.i

if.then10.i:                                      ; preds = %if.then.i442
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([151 x i8], [151 x i8]* @.str.32, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %if.end277

do.end.critedge.i:                                ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %77 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br label %if.end277

if.else:                                          ; preds = %entry
  %call.i445 = tail call i8* @malloc(i64 4096) #14
  %tobool.not.i448 = icmp eq i8* %call.i445, null
  br i1 %tobool.not.i448, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit, label %if.then6.i451

if.then6.i451:                                    ; preds = %if.else
  %add.ptr.i449 = getelementptr inbounds i8, i8* %call.i445, i64 4095
  store i8 0, i8* %add.ptr.i449, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit: ; preds = %if.then6.i451, %if.else
  %ss.sroa.74.0 = phi i8* [ %add.ptr.i449, %if.then6.i451 ], [ null, %if.else ]
  %bits = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %78 = load i8, i8* %bits, align 1, !tbaa !155
  %conv60 = zext i8 %78 to i32
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit
  %print_bits.0 = phi i32 [ 8, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit ], [ %shl, %while.cond ]
  %cmp61 = icmp slt i32 %print_bits.0, %conv60
  %shl = shl i32 %print_bits.0, 1
  br i1 %cmp61, label %while.cond, label %do.body, !llvm.loop !156

do.body:                                          ; preds = %while.cond
  %cmp62 = icmp slt i32 %print_bits.0, 65
  br i1 %cmp62, label %do.end, label %if.then63

if.then63:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.2.11, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then63, %do.body
  %event65 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %79 = load i32, i32* %event65, align 4, !tbaa !154
  %cmp66 = icmp slt i32 %79, 2
  %idxprom = zext i32 %79 to i64
  %arrayidx = getelementptr inbounds [11 x i8*], [11 x i8*]* @__const.halide_default_trace.event_types, i64 0, i64 %idxprom
  %80 = load i8*, i8** %arrayidx, align 8, !tbaa !10
  %call.i456 = tail call i8* @halide_string_to_string(i8* %call.i445, i8* %ss.sroa.74.0, i8* %80) #14
  %call.i459 = tail call i8* @halide_string_to_string(i8* %call.i456, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %func70 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %81 = load i8*, i8** %func70, align 8, !tbaa !138
  %call.i462 = tail call i8* @halide_string_to_string(i8* %call.i459, i8* %ss.sroa.74.0, i8* %81) #14
  %call.i465 = tail call i8* @halide_string_to_string(i8* %call.i462, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  %value_index73 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 7
  %82 = load i32, i32* %value_index73, align 4, !tbaa !157
  %conv.i468 = sext i32 %82 to i64
  %call.i469 = tail call i8* @halide_int64_to_string(i8* %call.i465, i8* %ss.sroa.74.0, i64 %conv.i468, i32 1) #14
  %call.i472 = tail call i8* @halide_string_to_string(i8* %call.i469, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #14
  %lanes77 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %83 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp79 = icmp ugt i16 %83, 1
  br i1 %cmp79, label %if.then80, label %if.end82

if.then80:                                        ; preds = %do.end
  %call.i475 = tail call i8* @halide_string_to_string(i8* %call.i472, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)) #14
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %do.end
  %ss.sroa.7.0 = phi i8* [ %call.i475, %if.then80 ], [ %call.i472, %do.end ]
  %dimensions83 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %84 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84660 = icmp sgt i32 %84, 0
  br i1 %cmp84660, label %if.end100.peel, label %for.cond.cleanup

if.end100.peel:                                   ; preds = %if.end82
  %coordinates101 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %.pre = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %.pre673 = load i32, i32* %.pre, align 4, !tbaa !73
  %conv.i484.peel = sext i32 %.pre673 to i64
  %call.i485.peel = tail call i8* @halide_int64_to_string(i8* %ss.sroa.7.0, i8* %ss.sroa.74.0, i64 %conv.i484.peel, i32 1) #14
  %85 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84.peel = icmp sgt i32 %85, 1
  br i1 %cmp84.peel, label %if.then86, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %if.end100, %if.end100.peel, %if.end82
  %ss.sroa.7.1.lcssa = phi i8* [ %ss.sroa.7.0, %if.end82 ], [ %call.i485.peel, %if.end100.peel ], [ %call.i485, %if.end100 ]
  %86 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp108 = icmp ugt i16 %86, 1
  %.sink684 = select i1 %cmp108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)
  %call.i491 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1.lcssa, i8* %ss.sroa.74.0, i8* %.sink684) #14
  br i1 %cmp66, label %if.then115, label %if.end263

if.then86:                                        ; preds = %if.end100.peel, %if.end100
  %indvars.iv670 = phi i64 [ %indvars.iv.next671, %if.end100 ], [ 1, %if.end100.peel ]
  %ss.sroa.7.1661 = phi i8* [ %call.i485, %if.end100 ], [ %call.i485.peel, %if.end100.peel ]
  %87 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp90 = icmp ugt i16 %87, 1
  br i1 %cmp90, label %land.lhs.true, label %if.else97.split

land.lhs.true:                                    ; preds = %if.then86
  %conv89 = zext i16 %87 to i32
  %88 = trunc i64 %indvars.iv670 to i32
  %rem = urem i32 %88, %conv89
  %cmp94 = icmp eq i32 %rem, 0
  br i1 %cmp94, label %if.end100, label %if.else97.split

if.else97.split:                                  ; preds = %if.then86, %land.lhs.true
  br label %if.end100

if.end100:                                        ; preds = %land.lhs.true, %if.else97.split
  %.sink = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0), %if.else97.split ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), %land.lhs.true ]
  %call.i4786 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1661, i8* %ss.sroa.74.0, i8* %.sink) #14
  %89 = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %arrayidx103 = getelementptr inbounds i32, i32* %89, i64 %indvars.iv670
  %90 = load i32, i32* %arrayidx103, align 4, !tbaa !73
  %conv.i484 = sext i32 %90 to i64
  %call.i485 = tail call i8* @halide_int64_to_string(i8* %call.i4786, i8* %ss.sroa.74.0, i64 %conv.i484, i32 1) #14
  %indvars.iv.next671 = add nuw nsw i64 %indvars.iv670, 1
  %91 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %92 = sext i32 %91 to i64
  %cmp84 = icmp slt i64 %indvars.iv.next671, %92
  br i1 %cmp84, label %if.then86, label %for.cond.cleanup, !llvm.loop !158

if.then115:                                       ; preds = %for.cond.cleanup
  %93 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp119 = icmp ugt i16 %93, 1
  %.sink685 = select i1 %cmp119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0)
  %call.i497 = tail call i8* @halide_string_to_string(i8* %call.i491, i8* %ss.sroa.74.0, i8* %.sink685) #14
  %94 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130655.not = icmp eq i16 %94, 0
  br i1 %cmp130655.not, label %if.end263, label %if.end136.peel

if.end136.peel:                                   ; preds = %if.then115
  %code = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 0
  %value245 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %95 = bitcast i8** %value245 to i8***
  %cmp214 = icmp sgt i32 %print_bits.0, 15
  %96 = bitcast i8** %value245 to i16**
  %97 = bitcast i8** %value245 to float**
  %98 = bitcast i8** %value245 to double**
  %99 = bitcast i8** %value245 to i32**
  %100 = bitcast i8** %value245 to i64**
  %.pre674 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %.pre674, label %for.inc253.peel [
    i8 0, label %if.then140.peel
    i8 1, label %if.then176.peel
    i8 2, label %do.body213.peel
    i8 3, label %if.then244.peel
  ]

if.then244.peel:                                  ; preds = %if.end136.peel
  %101 = load i8**, i8*** %95, align 8, !tbaa !150
  %102 = load i8*, i8** %101, align 8, !tbaa !10
  %call.i543.peel = tail call i8* @halide_pointer_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i8* %102) #14
  br label %for.inc253.peel

do.body213.peel:                                  ; preds = %if.end136.peel
  br i1 %cmp214, label %do.end218.peel, label %if.then215.peel

if.then215.peel:                                  ; preds = %do.body213.peel
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.24, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end218.peel

do.end218.peel:                                   ; preds = %if.then215.peel, %do.body213.peel
  switch i32 %print_bits.0, label %if.else232.peel [
    i32 32, label %if.then220.peel
    i32 16, label %if.then227.peel
  ]

if.then227.peel:                                  ; preds = %do.end218.peel
  %103 = load i16*, i16** %96, align 8, !tbaa !150
  %104 = load i16, i16* %103, align 2, !tbaa !161
  %call.i535.peel = tail call double @halide_float16_bits_to_double(i16 zeroext %104) #14
  %call2.i.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %call.i535.peel, i32 1) #14
  br label %for.inc253.peel

if.then220.peel:                                  ; preds = %do.end218.peel
  %105 = load float*, float** %97, align 8, !tbaa !150
  %106 = load float, float* %105, align 4, !tbaa !162
  %conv.i533.peel = fpext float %106 to double
  %call.i534.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %conv.i533.peel, i32 0) #14
  br label %for.inc253.peel

if.else232.peel:                                  ; preds = %do.end218.peel
  %107 = load double*, double** %98, align 8, !tbaa !150
  %108 = load double, double* %107, align 8, !tbaa !164
  %call.i540.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %108, i32 1) #14
  br label %for.inc253.peel

if.then176.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else199.peel [
    i32 8, label %if.then178.peel
    i32 16, label %if.then186.peel
    i32 32, label %if.then194.peel
  ]

if.then194.peel:                                  ; preds = %if.then176.peel
  %109 = load i32*, i32** %99, align 8, !tbaa !150
  %110 = load i32, i32* %109, align 4, !tbaa !73
  %conv.i526.peel = zext i32 %110 to i64
  %call.i527.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i526.peel, i32 1) #14
  br label %for.inc253.peel

if.then186.peel:                                  ; preds = %if.then176.peel
  %111 = load i16*, i16** %96, align 8, !tbaa !150
  %112 = load i16, i16* %111, align 2, !tbaa !161
  %conv.i522.peel = zext i16 %112 to i64
  %call.i523.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i522.peel, i32 1) #14
  br label %for.inc253.peel

if.then178.peel:                                  ; preds = %if.then176.peel
  %113 = load i8*, i8** %value245, align 8, !tbaa !150
  %114 = load i8, i8* %113, align 1, !tbaa !14
  %conv.i518.peel = zext i8 %114 to i64
  %call.i519.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i518.peel, i32 1) #14
  br label %for.inc253.peel

if.else199.peel:                                  ; preds = %if.then176.peel
  %115 = load i64*, i64** %100, align 8, !tbaa !150
  %116 = load i64, i64* %115, align 8, !tbaa !110
  %call.i530.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %116, i32 1) #14
  br label %for.inc253.peel

if.then140.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else163.peel [
    i32 8, label %if.then142.peel
    i32 16, label %if.then150.peel
    i32 32, label %if.then158.peel
  ]

if.then158.peel:                                  ; preds = %if.then140.peel
  %117 = load i32*, i32** %99, align 8, !tbaa !150
  %118 = load i32, i32* %117, align 4, !tbaa !73
  %conv.i511.peel = sext i32 %118 to i64
  %call.i512.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i511.peel, i32 1) #14
  br label %for.inc253.peel

if.then150.peel:                                  ; preds = %if.then140.peel
  %119 = load i16*, i16** %96, align 8, !tbaa !150
  %120 = load i16, i16* %119, align 2, !tbaa !161
  %conv.i507.peel = sext i16 %120 to i64
  %call.i508.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i507.peel, i32 1) #14
  br label %for.inc253.peel

if.then142.peel:                                  ; preds = %if.then140.peel
  %121 = load i8*, i8** %value245, align 8, !tbaa !150
  %122 = load i8, i8* %121, align 1, !tbaa !14
  %conv.i503.peel = sext i8 %122 to i64
  %call.i504.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i503.peel, i32 1) #14
  br label %for.inc253.peel

if.else163.peel:                                  ; preds = %if.then140.peel
  %123 = load i64*, i64** %100, align 8, !tbaa !150
  %124 = load i64, i64* %123, align 8, !tbaa !110
  %call.i515.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %124, i32 1) #14
  br label %for.inc253.peel

for.inc253.peel:                                  ; preds = %if.else163.peel, %if.then142.peel, %if.then150.peel, %if.then158.peel, %if.else199.peel, %if.then178.peel, %if.then186.peel, %if.then194.peel, %if.else232.peel, %if.then220.peel, %if.then227.peel, %if.then244.peel, %if.end136.peel
  %ss.sroa.7.7.peel = phi i8* [ %call.i497, %if.end136.peel ], [ %call.i543.peel, %if.then244.peel ], [ %call.i540.peel, %if.else232.peel ], [ %call2.i.peel, %if.then227.peel ], [ %call.i534.peel, %if.then220.peel ], [ %call.i530.peel, %if.else199.peel ], [ %call.i527.peel, %if.then194.peel ], [ %call.i523.peel, %if.then186.peel ], [ %call.i519.peel, %if.then178.peel ], [ %call.i515.peel, %if.else163.peel ], [ %call.i512.peel, %if.then158.peel ], [ %call.i508.peel, %if.then150.peel ], [ %call.i504.peel, %if.then142.peel ]
  %125 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130.peel = icmp ugt i16 %125, 1
  br i1 %cmp130.peel, label %if.end136, label %if.end263

for.cond.cleanup131:                              ; preds = %for.inc253
  %cmp259 = icmp ugt i16 %151, 1
  br i1 %cmp259, label %if.then260, label %if.end263

if.end136:                                        ; preds = %for.inc253.peel, %for.inc253
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc253 ], [ 1, %for.inc253.peel ]
  %ss.sroa.7.5656 = phi i8* [ %ss.sroa.7.7, %for.inc253 ], [ %ss.sroa.7.7.peel, %for.inc253.peel ]
  %call.i500 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.5656, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %126 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %126, label %for.inc253 [
    i8 0, label %if.then140
    i8 1, label %if.then176
    i8 2, label %do.body213
    i8 3, label %if.then244
  ]

if.then140:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else163 [
    i32 8, label %if.then142
    i32 16, label %if.then150
    i32 32, label %if.then158
  ]

if.then142:                                       ; preds = %if.then140
  %127 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx145 = getelementptr inbounds i8, i8* %127, i64 %indvars.iv
  %128 = load i8, i8* %arrayidx145, align 1, !tbaa !14
  %conv.i503 = sext i8 %128 to i64
  %call.i504 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i503, i32 1) #14
  br label %for.inc253

if.then150:                                       ; preds = %if.then140
  %129 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx153 = getelementptr inbounds i16, i16* %129, i64 %indvars.iv
  %130 = load i16, i16* %arrayidx153, align 2, !tbaa !161
  %conv.i507 = sext i16 %130 to i64
  %call.i508 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i507, i32 1) #14
  br label %for.inc253

if.then158:                                       ; preds = %if.then140
  %131 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx161 = getelementptr inbounds i32, i32* %131, i64 %indvars.iv
  %132 = load i32, i32* %arrayidx161, align 4, !tbaa !73
  %conv.i511 = sext i32 %132 to i64
  %call.i512 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i511, i32 1) #14
  br label %for.inc253

if.else163:                                       ; preds = %if.then140
  %133 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx166 = getelementptr inbounds i64, i64* %133, i64 %indvars.iv
  %134 = load i64, i64* %arrayidx166, align 8, !tbaa !110
  %call.i515 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %134, i32 1) #14
  br label %for.inc253

if.then176:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else199 [
    i32 8, label %if.then178
    i32 16, label %if.then186
    i32 32, label %if.then194
  ]

if.then178:                                       ; preds = %if.then176
  %135 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx181 = getelementptr inbounds i8, i8* %135, i64 %indvars.iv
  %136 = load i8, i8* %arrayidx181, align 1, !tbaa !14
  %conv.i518 = zext i8 %136 to i64
  %call.i519 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i518, i32 1) #14
  br label %for.inc253

if.then186:                                       ; preds = %if.then176
  %137 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx189 = getelementptr inbounds i16, i16* %137, i64 %indvars.iv
  %138 = load i16, i16* %arrayidx189, align 2, !tbaa !161
  %conv.i522 = zext i16 %138 to i64
  %call.i523 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i522, i32 1) #14
  br label %for.inc253

if.then194:                                       ; preds = %if.then176
  %139 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx197 = getelementptr inbounds i32, i32* %139, i64 %indvars.iv
  %140 = load i32, i32* %arrayidx197, align 4, !tbaa !73
  %conv.i526 = zext i32 %140 to i64
  %call.i527 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i526, i32 1) #14
  br label %for.inc253

if.else199:                                       ; preds = %if.then176
  %141 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx202 = getelementptr inbounds i64, i64* %141, i64 %indvars.iv
  %142 = load i64, i64* %arrayidx202, align 8, !tbaa !110
  %call.i530 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %142, i32 1) #14
  br label %for.inc253

do.body213:                                       ; preds = %if.end136
  br i1 %cmp214, label %do.end218, label %if.then215

if.then215:                                       ; preds = %do.body213
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.24, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end218

do.end218:                                        ; preds = %if.then215, %do.body213
  switch i32 %print_bits.0, label %if.else232 [
    i32 32, label %if.then220
    i32 16, label %if.then227
  ]

if.then220:                                       ; preds = %do.end218
  %143 = load float*, float** %97, align 8, !tbaa !150
  %arrayidx223 = getelementptr inbounds float, float* %143, i64 %indvars.iv
  %144 = load float, float* %arrayidx223, align 4, !tbaa !162
  %conv.i533 = fpext float %144 to double
  %call.i534 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %conv.i533, i32 0) #14
  br label %for.inc253

if.then227:                                       ; preds = %do.end218
  %145 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx230 = getelementptr inbounds i16, i16* %145, i64 %indvars.iv
  %146 = load i16, i16* %arrayidx230, align 2, !tbaa !161
  %call.i535 = tail call double @halide_float16_bits_to_double(i16 zeroext %146) #14
  %call2.i = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %call.i535, i32 1) #14
  br label %for.inc253

if.else232:                                       ; preds = %do.end218
  %147 = load double*, double** %98, align 8, !tbaa !150
  %arrayidx235 = getelementptr inbounds double, double* %147, i64 %indvars.iv
  %148 = load double, double* %arrayidx235, align 8, !tbaa !164
  %call.i540 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %148, i32 1) #14
  br label %for.inc253

if.then244:                                       ; preds = %if.end136
  %149 = load i8**, i8*** %95, align 8, !tbaa !150
  %arrayidx247 = getelementptr inbounds i8*, i8** %149, i64 %indvars.iv
  %150 = load i8*, i8** %arrayidx247, align 8, !tbaa !10
  %call.i543 = tail call i8* @halide_pointer_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i8* %150) #14
  br label %for.inc253

for.inc253:                                       ; preds = %if.then244, %if.else232, %if.then227, %if.then220, %if.else199, %if.then194, %if.then186, %if.then178, %if.else163, %if.then158, %if.then150, %if.then142, %if.end136
  %ss.sroa.7.7 = phi i8* [ %call.i500, %if.end136 ], [ %call.i543, %if.then244 ], [ %call.i540, %if.else232 ], [ %call2.i, %if.then227 ], [ %call.i534, %if.then220 ], [ %call.i530, %if.else199 ], [ %call.i527, %if.then194 ], [ %call.i523, %if.then186 ], [ %call.i519, %if.then178 ], [ %call.i515, %if.else163 ], [ %call.i512, %if.then158 ], [ %call.i508, %if.then150 ], [ %call.i504, %if.then142 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %151 = load i16, i16* %lanes77, align 2, !tbaa !130
  %152 = zext i16 %151 to i64
  %cmp130 = icmp ult i64 %indvars.iv.next, %152
  br i1 %cmp130, label %if.end136, label %for.cond.cleanup131, !llvm.loop !166

if.then260:                                       ; preds = %for.cond.cleanup131
  %call.i546 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.7, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0)) #14
  br label %if.end263

if.end263:                                        ; preds = %if.then260, %for.cond.cleanup131, %for.inc253.peel, %if.then115, %for.cond.cleanup
  %ss.sroa.7.8 = phi i8* [ %call.i546, %if.then260 ], [ %ss.sroa.7.7, %for.cond.cleanup131 ], [ %call.i491, %for.cond.cleanup ], [ %ss.sroa.7.7.peel, %for.inc253.peel ], [ %call.i497, %if.then115 ]
  %trace_tag264 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %153 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %tobool265.not = icmp eq i8* %153, null
  br i1 %tobool265.not, label %if.end274, label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end263
  %154 = load i8, i8* %153, align 1, !tbaa !14
  %tobool268.not = icmp eq i8 %154, 0
  br i1 %tobool268.not, label %if.end274, label %if.then269

if.then269:                                       ; preds = %land.lhs.true266
  %call.i549 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.8, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0)) #14
  %155 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %call.i552 = tail call i8* @halide_string_to_string(i8* %call.i549, i8* %ss.sroa.74.0, i8* %155) #14
  %call.i555 = tail call i8* @halide_string_to_string(i8* %call.i552, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0)) #14
  br label %if.end274

if.end274:                                        ; preds = %if.then269, %land.lhs.true266, %if.end263
  %ss.sroa.7.9 = phi i8* [ %ss.sroa.7.8, %if.end263 ], [ %ss.sroa.7.8, %land.lhs.true266 ], [ %call.i555, %if.then269 ]
  %call.i558 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.9, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  br label %while.cond.i560

while.cond.i560:                                  ; preds = %while.cond.i560, %if.end274
  %156 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i559 = icmp eq i8 %156, 0
  br i1 %tobool.not.i559, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i560, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i560
  br i1 %tobool.not.i448, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %sub.ptr.lhs.cast.i.i563 = ptrtoint i8* %call.i558 to i64
  %sub.ptr.rhs.cast.i.i564 = ptrtoint i8* %call.i445 to i64
  %sub.ptr.sub.i.i565 = sub i64 1, %sub.ptr.rhs.cast.i.i564
  %add.i.i566 = add i64 %sub.ptr.sub.i.i565, %sub.ptr.lhs.cast.i.i563
  %call.i.i567 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #14
  tail call void @halide_print(i8* %user_context, i8* nonnull %call.i445) #14
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i445) #14
  br label %if.end277

if.end277:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit, %do.end.critedge.i, %if.then10.i, %if.then.i442, %_ZN21halide_trace_packet_t9trace_tagEv.exit
  ret i32 %0
}

; Function Attrs: nounwind
define weak i32 @halide_get_trace_file(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i64 0, i64 0)) #14
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.then
  %call2 = tail call i8* @fopen(i8* nonnull %call, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i64 0, i64 0)) #14
  %tobool3.not = icmp eq i8* %call2, null
  br i1 %tobool3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.then1
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.30, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.then1
  %call5 = tail call i32 @fileno(i8* %call2) #14
  tail call void @halide_set_trace_file(i32 %call5) #16
  store i8* %call2, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %2 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool6.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %2, null
  br i1 %tobool6.not, label %if.then7, label %if.end11

if.then7:                                         ; preds = %do.end
  %call8 = tail call i8* @malloc(i64 1048588) #14
  store i8* %call8, i8** bitcast (%"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE to i8**), align 8, !tbaa !10
  %cursor.i = getelementptr inbounds i8, i8* %call8, i64 4
  %3 = bitcast i8* %cursor.i to i32*
  store i32 0, i32* %3, align 4, !tbaa !142
  %overage.i = getelementptr inbounds i8, i8* %call8, i64 8
  %4 = bitcast i8* %overage.i to i32*
  store i32 0, i32* %4, align 4, !tbaa !144
  %lock.i.i = bitcast i8* %call8 to i32*
  store volatile i32 0, i32* %lock.i.i, align 4, !tbaa !140
  br label %if.end11

if.else:                                          ; preds = %if.then
  tail call void @halide_set_trace_file(i32 0) #16
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then7, %do.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %5 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  ret i32 %5
}

declare i8* @memcpy(i8*, i8*, i64) local_unnamed_addr #1

declare i8* @fopen(i8*, i8*) local_unnamed_addr #1

declare i32 @fileno(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_trace_file(i32 %fd) local_unnamed_addr #2 {
entry:
  store i32 %fd, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_trace_cleanup() #0 {
entry:
  %call = tail call i32 @halide_shutdown_trace() #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_shutdown_trace() local_unnamed_addr #0 {
entry:
  %0 = load i8*, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %tobool.not = icmp eq i8* %0, null
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @fclose(i8* nonnull %0) #14
  store i32 0, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store i8 0, i8* @_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE, align 1, !tbaa !15
  store i8* null, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %1 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool1.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %1, null
  br i1 %tobool1.not, label %return, label %if.then2

if.then2:                                         ; preds = %if.then
  %2 = bitcast %"class.Halide::Runtime::Internal::TraceBuffer"* %1 to i8*
  tail call void @free(i8* nonnull %2) #14
  br label %return

return:                                           ; preds = %if.then2, %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then2 ], [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @fclose(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, %struct.halide_trace_event_t*)* @halide_set_custom_trace(i32 (i8*, %struct.halide_trace_event_t*)* %t) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  store i32 (i8*, %struct.halide_trace_event_t*)* %t, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  ret i32 (i8*, %struct.halide_trace_event_t*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* %e) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, %struct.halide_trace_event_t* %e) #14
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_trace_helper(i8* %user_context, i8* %func, i8* %value, i32* %coords, i32 %type_code, i32 %type_bits, i32 %type_lanes, i32 %code, i32 %parent_id, i32 %value_index, i32 %dimensions, i8* %trace_tag) local_unnamed_addr #4 {
entry:
  %event = alloca %struct.halide_trace_event_t, align 8
  %0 = bitcast %struct.halide_trace_event_t* %event to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %0) #15
  %code.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 0
  %bits.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 1
  %lanes.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 2
  %func1 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 0
  store i8* %func, i8** %func1, align 8, !tbaa !138
  %value2 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 1
  store i8* %value, i8** %value2, align 8, !tbaa !150
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 2
  store i32* %coords, i32** %coordinates, align 8, !tbaa !149
  %trace_tag3 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 3
  store i8* %trace_tag, i8** %trace_tag3, align 8, !tbaa !139
  %conv = trunc i32 %type_code to i8
  store i8 %conv, i8* %code.i.i, align 8, !tbaa !160
  %conv5 = trunc i32 %type_bits to i8
  store i8 %conv5, i8* %bits.i.i, align 1, !tbaa !155
  %conv7 = trunc i32 %type_lanes to i16
  store i16 %conv7, i16* %lanes.i.i, align 2, !tbaa !130
  %event9 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 5
  store i32 %code, i32* %event9, align 4, !tbaa !154
  %parent_id10 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 6
  store i32 %parent_id, i32* %parent_id10, align 8, !tbaa !168
  %value_index11 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 7
  store i32 %value_index, i32* %value_index11, align 4, !tbaa !157
  %dimensions12 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 8
  store i32 %dimensions, i32* %dimensions12, align 8, !tbaa !137
  %call = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 56) #14
  %add = add nsw i32 %type_bits, 7
  %div = sdiv i32 %add, 8
  %mul = mul nsw i32 %div, %type_lanes
  %conv13 = sext i32 %mul to i64
  %call14 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %value, i64 %conv13) #14
  %1 = bitcast i32* %coords to i8*
  %conv15 = sext i32 %dimensions to i64
  %mul16 = shl nsw i64 %conv15, 2
  %call17 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %1, i64 %mul16) #14
  %call18 = call i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* nonnull %event) #14
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %0) #15
  ret i32 %call18
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* %suffix) local_unnamed_addr #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %f.0 = phi i8* [ %filename, %entry ], [ %incdec.ptr, %while.cond ]
  %0 = load i8, i8* %f.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %0, 0
  %incdec.ptr = getelementptr inbounds i8, i8* %f.0, i64 1
  br i1 %tobool.not, label %while.cond1, label %while.cond, !llvm.loop !169

while.cond1:                                      ; preds = %while.cond, %while.cond1
  %s.0 = phi i8* [ %incdec.ptr4, %while.cond1 ], [ %suffix, %while.cond ]
  %1 = load i8, i8* %s.0, align 1, !tbaa !14
  %tobool2.not = icmp eq i8 %1, 0
  %incdec.ptr4 = getelementptr inbounds i8, i8* %s.0, i64 1
  br i1 %tobool2.not, label %while.cond6.preheader, label %while.cond1, !llvm.loop !170

while.cond6.preheader:                            ; preds = %while.cond1
  %cmp34 = icmp ne i8* %s.0, %suffix
  %cmp735 = icmp ne i8* %f.0, %filename
  %2 = and i1 %cmp735, %cmp34
  br i1 %2, label %if.end, label %while.end13

if.end:                                           ; preds = %while.cond6.preheader, %if.end.while.body8_crit_edge
  %f.13649 = phi i8* [ %incdec.ptr11, %if.end.while.body8_crit_edge ], [ %f.0, %while.cond6.preheader ]
  %s.13748 = phi i8* [ %incdec.ptr12, %if.end.while.body8_crit_edge ], [ %s.0, %while.cond6.preheader ]
  %incdec.ptr11 = getelementptr inbounds i8, i8* %f.13649, i64 -1
  %incdec.ptr12 = getelementptr inbounds i8, i8* %s.13748, i64 -1
  %cmp = icmp ne i8* %incdec.ptr12, %suffix
  %cmp7 = icmp ne i8* %incdec.ptr11, %filename
  %3 = and i1 %cmp7, %cmp
  %.pre = load i8, i8* %incdec.ptr11, align 1, !tbaa !14
  %.pre45 = load i8, i8* %incdec.ptr12, align 1, !tbaa !14
  br i1 %3, label %if.end.while.body8_crit_edge, label %while.end13, !llvm.loop !171

if.end.while.body8_crit_edge:                     ; preds = %if.end
  %cmp10.not = icmp eq i8 %.pre, %.pre45
  br i1 %cmp10.not, label %if.end, label %cleanup

while.end13:                                      ; preds = %if.end, %while.cond6.preheader
  %4 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre45, %if.end ]
  %5 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre, %if.end ]
  %cmp16 = icmp eq i8 %5, %4
  br label %cleanup

cleanup:                                          ; preds = %if.end.while.body8_crit_edge, %while.end13
  %retval.0 = phi i1 [ %cmp16, %while.end13 ], [ false, %if.end.while.body8_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_debug_to_file(i8* %user_context, i8* %filename, i32 %type_code, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %header = alloca %"struct.Halide::Runtime::Internal::halide_tiff_header", align 2
  %offset = alloca i32, align 4
  %count = alloca i32, align 4
  %array_name = alloca [256 x i8], align 1
  %array_name42 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  %header198 = alloca [129 x i8], align 1
  %tags = alloca [8 x i32], align 4
  %extents = alloca [4 x i32], align 4
  %name_header = alloca [2 x i32], align 4
  %payload_header = alloca [2 x i32], align 4
  %header289 = alloca [5 x i32], align 4
  %temp = alloca [4096 x i8], align 1
  %idx = alloca [4 x i32], align 4
  %zero = alloca i64, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !172
  %cmp.i = icmp eq i8* %0, null
  br i1 %cmp.i, label %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, label %if.end

_ZNK15halide_buffer_t15is_bounds_queryEv.exit:    ; preds = %entry
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp2.i = icmp eq i64 %1, 0
  br i1 %cmp2.i, label %if.then, label %if.end

if.then:                                          ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.34, i64 0, i64 0)) #14
  br label %return

if.end:                                           ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, %entry
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp = icmp sgt i32 %2, 4
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1.35, i64 0, i64 0)) #14
  br label %return

if.end2:                                          ; preds = %if.end
  %call3 = tail call i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %cmp4.not = icmp eq i32 %call3, 0
  br i1 %cmp4.not, label %if.end6, label %return

if.end6:                                          ; preds = %if.end2
  %call.i598 = tail call i8* @fopen(i8* %filename, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.36, i64 0, i64 0)) #14
  %cmp.i601.not = icmp eq i8* %call.i598, null
  br i1 %cmp.i601.not, label %return, label %if.end9

if.end9:                                          ; preds = %if.end6
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #15
  %min.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 0
  %extent.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %min.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 0
  %extent.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %4 = bitcast [4 x %struct.halide_dimension_t]* %shape to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %4, align 4, !tbaa !73
  %min.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 0
  %extent.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %min.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 0
  %extent.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %5 = bitcast i32* %min.i.2 to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %5, align 4, !tbaa !73
  %6 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp11875 = icmp sgt i32 %6, 0
  br i1 %cmp11875, label %for.body.lr.ph, label %for.body22.preheader

for.body.lr.ph:                                   ; preds = %if.end9
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %7 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %8 = zext i32 %6 to i64
  %9 = add nsw i64 %8, -1
  %10 = icmp ult i64 %9, 3
  %11 = select i1 %10, i64 %8, i64 4
  %12 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %13 = bitcast %struct.halide_dimension_t* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %12, i8* nonnull align 4 dereferenceable(16) %13, i64 16, i1 false), !tbaa.struct !177
  %extent = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %14 = load i32, i32* %extent, align 4, !tbaa !178
  %conv903 = zext i32 %14 to i64
  %exitcond.not17 = icmp eq i64 %11, 1
  br i1 %exitcond.not17, label %for.cond19.preheader, label %for.body.1, !llvm.loop !180

for.cond19.preheader:                             ; preds = %for.body.3, %for.body.2, %for.body.1, %for.body.lr.ph
  %mul.lcssa = phi i64 [ %conv903, %for.body.lr.ph ], [ %mul.1, %for.body.1 ], [ %mul.2, %for.body.2 ], [ %mul.3, %for.body.3 ]
  %cmp20873 = icmp slt i32 %6, 4
  br i1 %cmp20873, label %for.body22.preheader, label %for.cond.cleanup21

for.body22.preheader:                             ; preds = %for.cond19.preheader, %if.end9
  %elts.0.lcssa907 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ 1, %if.end9 ]
  %15 = sext i32 %6 to i64
  %16 = sub i32 3, %6
  %17 = zext i32 %16 to i64
  %18 = add nuw nsw i64 %17, 1
  %min.iters.check = icmp ult i32 %16, 7
  br i1 %min.iters.check, label %for.body22.preheader214, label %vector.ph

vector.ph:                                        ; preds = %for.body22.preheader
  %n.vec = and i64 %18, 8589934584
  %ind.end = add nsw i64 %n.vec, %15
  %.splatinsert = insertelement <8 x i64> poison, i64 %15, i32 0
  %.splat = shufflevector <8 x i64> %.splatinsert, <8 x i64> poison, <8 x i32> zeroinitializer
  %induction = add <8 x i64> %.splat, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
  %19 = add nsw i64 %n.vec, -8
  %20 = lshr exact i64 %19, 3
  %21 = add nuw nsw i64 %20, 1
  %xtraiter = and i64 %21, 3
  %22 = icmp ult i64 %19, 24
  br i1 %22, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = and i64 %21, 4611686018427387900
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %vec.ind = phi <8 x i64> [ %induction, %vector.ph.new ], [ %vec.ind.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %23 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %23, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %24 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %24, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %25 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %25, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next = add <8 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %26 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %26, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %27, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %28 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %28, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.1 = add <8 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %29 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %29, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %30 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %30, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %31 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %31, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.2 = add <8 x i64> %vec.ind, <i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24>
  %32 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %32, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %33 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %33, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %34 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %34, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.3 = add <8 x i64> %vec.ind, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !183

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %vec.ind.unr = phi <8 x i64> [ %induction, %vector.ph ], [ %vec.ind.next.3, %vector.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %middle.block, label %vector.body.epil

vector.body.epil:                                 ; preds = %middle.block.unr-lcssa, %vector.body.epil
  %vec.ind.epil = phi <8 x i64> [ %vec.ind.next.epil, %vector.body.epil ], [ %vec.ind.unr, %middle.block.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %vector.body.epil ], [ %xtraiter, %middle.block.unr-lcssa ]
  %35 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %35, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %36 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %36, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %37 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %37, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.epil = add <8 x i64> %vec.ind.epil, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %middle.block, label %vector.body.epil, !llvm.loop !185

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %18, %n.vec
  br i1 %cmp.n, label %for.cond.cleanup21, label %for.body22.preheader214

for.body22.preheader214:                          ; preds = %for.body22.preheader, %middle.block
  %indvars.iv.ph = phi i64 [ %15, %for.body22.preheader ], [ %ind.end, %middle.block ]
  br label %for.body22

for.cond.cleanup21:                               ; preds = %for.body22, %middle.block, %for.cond19.preheader
  %elts.0.lcssa906 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ %elts.0.lcssa907, %middle.block ], [ %elts.0.lcssa907, %for.body22 ]
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %38 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %38 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %call34 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.37, i64 0, i64 0)) #16
  br i1 %call34, label %if.then36, label %lor.lhs.false

for.body22:                                       ; preds = %for.body22.preheader214, %for.body22
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body22 ], [ %indvars.iv.ph, %for.body22.preheader214 ]
  %min = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 0
  store i32 0, i32* %min, align 4, !tbaa !181
  %extent27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 1
  store i32 1, i32* %extent27, align 4, !tbaa !178
  %stride = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 2
  store i32 0, i32* %stride, align 4, !tbaa !182
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond886.not = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond886.not, label %for.cond.cleanup21, label %for.body22, !llvm.loop !187

lor.lhs.false:                                    ; preds = %for.cond.cleanup21
  %call35 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.38, i64 0, i64 0)) #16
  br i1 %call35, label %if.then36, label %if.else164

if.then36:                                        ; preds = %lor.lhs.false, %for.cond.cleanup21
  %39 = load i32, i32* %extent.i, align 4, !tbaa !178
  %40 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %41 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %switch = icmp ult i32 %41, 2
  %42 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %cmp50 = icmp slt i32 %42, 5
  %or.cond = and i1 %switch, %cmp50
  %depth.0 = select i1 %or.cond, i32 1, i32 %42
  %channels.0 = select i1 %or.cond, i32 %42, i32 %41
  %43 = bitcast %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 210, i8* nonnull %43) #15
  %byte_order_marker = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 0
  store i16 18761, i16* %byte_order_marker, align 2, !tbaa !189
  %version = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 1
  store i16 42, i16* %version, align 2, !tbaa !191
  %ifd0_offset = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 2
  store i32 8, i32* %ifd0_offset, align 2, !tbaa !192
  %entry_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 3
  store i16 15, i16* %entry_count, align 2, !tbaa !193
  %tag_code2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 0
  store i16 256, i16* %tag_code2.i, align 2, !tbaa !194
  %type_code.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 1
  store i16 4, i16* %type_code.i, align 2, !tbaa !196
  %count3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 2
  store i32 1, i32* %count3.i, align 2, !tbaa !197
  %i32.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 3, i32 0
  store i32 %39, i32* %i32.i, align 2, !tbaa !14
  %tag_code2.i632 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 0
  store i16 257, i16* %tag_code2.i632, align 2, !tbaa !194
  %type_code.i633 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 1
  store i16 4, i16* %type_code.i633, align 2, !tbaa !196
  %count3.i634 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 2
  store i32 1, i32* %count3.i634, align 2, !tbaa !197
  %i32.i635 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 3, i32 0
  store i32 %40, i32* %i32.i635, align 2, !tbaa !14
  %44 = trunc i32 %add.i to i16
  %conv68 = and i16 %44, 504
  %tag_code2.i643 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 0
  store i16 258, i16* %tag_code2.i643, align 2, !tbaa !194
  %type_code.i644 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 1
  store i16 3, i16* %type_code.i644, align 2, !tbaa !196
  %count3.i645 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 2
  store i32 1, i32* %count3.i645, align 2, !tbaa !197
  %value4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 3
  %i16.i = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i to i16*
  store i16 %conv68, i16* %i16.i, align 2, !tbaa !14
  %tag_code2.i653 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 0
  store i16 259, i16* %tag_code2.i653, align 2, !tbaa !194
  %type_code.i654 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 1
  store i16 3, i16* %type_code.i654, align 2, !tbaa !196
  %count3.i655 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 2
  store i32 1, i32* %count3.i655, align 2, !tbaa !197
  %value4.i656 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 3
  %i16.i657 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i656 to i16*
  store i16 1, i16* %i16.i657, align 2, !tbaa !14
  %cmp71 = icmp sgt i32 %channels.0, 2
  %conv72 = select i1 %cmp71, i16 2, i16 1
  %tag_code2.i665 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 0
  store i16 262, i16* %tag_code2.i665, align 2, !tbaa !194
  %type_code.i666 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 1
  store i16 3, i16* %type_code.i666, align 2, !tbaa !196
  %count3.i667 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 2
  store i32 1, i32* %count3.i667, align 2, !tbaa !197
  %value4.i668 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 3
  %i16.i669 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i668 to i16*
  store i16 %conv72, i16* %i16.i669, align 2, !tbaa !14
  %tag_code2.i677 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 0
  store i16 273, i16* %tag_code2.i677, align 2, !tbaa !194
  %type_code.i678 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 1
  store i16 4, i16* %type_code.i678, align 2, !tbaa !196
  %count3.i679 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 2
  store i32 %channels.0, i32* %count3.i679, align 2, !tbaa !197
  %i32.i680 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 3, i32 0
  store i32 210, i32* %i32.i680, align 2, !tbaa !14
  %conv75 = trunc i32 %channels.0 to i16
  %tag_code2.i688 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 0
  store i16 277, i16* %tag_code2.i688, align 2, !tbaa !194
  %type_code.i689 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 1
  store i16 3, i16* %type_code.i689, align 2, !tbaa !196
  %count3.i690 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 2
  store i32 1, i32* %count3.i690, align 2, !tbaa !197
  %value4.i691 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 3
  %i16.i692 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i691 to i16*
  store i16 %conv75, i16* %i16.i692, align 2, !tbaa !14
  %tag_code2.i706 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 0
  store i16 278, i16* %tag_code2.i706, align 2, !tbaa !194
  %type_code.i707 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 1
  store i16 4, i16* %type_code.i707, align 2, !tbaa !196
  %count3.i708 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 2
  store i32 1, i32* %count3.i708, align 2, !tbaa !197
  %i32.i709 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 3, i32 0
  store i32 %40, i32* %i32.i709, align 2, !tbaa !14
  %cmp80 = icmp eq i32 %channels.0, 1
  %45 = trunc i64 %elts.0.lcssa906 to i32
  %conv86595 = mul i32 %div.i, %45
  %mul84 = shl i32 %channels.0, 2
  %add = add i32 %mul84, 210
  %add.sink = select i1 %cmp80, i32 %conv86595, i32 %add
  %46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 0
  store i16 279, i16* %46, align 2
  %47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 1
  store i16 4, i16* %47, align 2
  %48 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 2
  store i32 %channels.0, i32* %48, align 2
  %49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 3, i32 0
  store i32 %add.sink, i32* %49, align 2
  %tag_code2.i732 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 0
  store i16 282, i16* %tag_code2.i732, align 2, !tbaa !194
  %type_code3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 1
  store i16 5, i16* %type_code3.i, align 2, !tbaa !196
  %count4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 2
  store i32 1, i32* %count4.i, align 2, !tbaa !197
  %i32.i733 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 3, i32 0
  store i32 194, i32* %i32.i733, align 2, !tbaa !14
  %tag_code2.i741 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 0
  store i16 283, i16* %tag_code2.i741, align 2, !tbaa !194
  %type_code3.i742 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 1
  store i16 5, i16* %type_code3.i742, align 2, !tbaa !196
  %count4.i743 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 2
  store i32 1, i32* %count4.i743, align 2, !tbaa !197
  %i32.i744 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 3, i32 0
  store i32 202, i32* %i32.i744, align 2, !tbaa !14
  %tag_code2.i759 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 0
  store i16 284, i16* %tag_code2.i759, align 2, !tbaa !194
  %type_code.i760 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 1
  store i16 3, i16* %type_code.i760, align 2, !tbaa !196
  %count3.i761 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 2
  store i32 1, i32* %count3.i761, align 2, !tbaa !197
  %value4.i762 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 3
  %i16.i763 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i762 to i16*
  store i16 2, i16* %i16.i763, align 2, !tbaa !14
  %tag_code2.i754 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 0
  store i16 296, i16* %tag_code2.i754, align 2, !tbaa !194
  %type_code.i755 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 1
  store i16 3, i16* %type_code.i755, align 2, !tbaa !196
  %count3.i756 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 2
  store i32 1, i32* %count3.i756, align 2, !tbaa !197
  %value4.i757 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 3
  %i16.i758 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i757 to i16*
  store i16 1, i16* %i16.i758, align 2, !tbaa !14
  %idxprom92 = sext i32 %type_code to i64
  %arrayidx93 = getelementptr inbounds [10 x i16], [10 x i16]* @_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE, i64 0, i64 %idxprom92
  %50 = load i16, i16* %arrayidx93, align 2, !tbaa !161
  %tag_code2.i749 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 0
  store i16 339, i16* %tag_code2.i749, align 2, !tbaa !194
  %type_code.i750 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 1
  store i16 3, i16* %type_code.i750, align 2, !tbaa !196
  %count3.i751 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 2
  store i32 1, i32* %count3.i751, align 2, !tbaa !197
  %value4.i752 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 3
  %i16.i753 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i752 to i16*
  store i16 %50, i16* %i16.i753, align 2, !tbaa !14
  %tag_code2.i745 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 0
  store i16 -32539, i16* %tag_code2.i745, align 2, !tbaa !194
  %type_code.i746 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 1
  store i16 4, i16* %type_code.i746, align 2, !tbaa !196
  %count3.i747 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 2
  store i32 1, i32* %count3.i747, align 2, !tbaa !197
  %i32.i748 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 3, i32 0
  store i32 %depth.0, i32* %i32.i748, align 2, !tbaa !14
  %ifd0_end = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 5
  %51 = bitcast i32* %ifd0_end to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 1, i32 1>, <4 x i32>* %51, align 2, !tbaa !73
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 7, i64 1
  store i32 1, i32* %arrayidx100, align 2, !tbaa !73
  %call.i736 = call i64 @fwrite(i8* nonnull %43, i64 210, i64 1, i8* nonnull %call.i598) #14
  %cmp.i737.not = icmp eq i64 %call.i736, 0
  br i1 %cmp.i737.not, label %cleanup154, label %if.end103

if.end103:                                        ; preds = %if.then36
  %cmp104 = icmp sgt i32 %channels.0, 1
  br i1 %cmp104, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph, label %cleanup154.thread

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph: ; preds = %if.end103
  %52 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %52) #15
  %mul108 = shl i32 %channels.0, 3
  %add109 = add i32 %mul108, 210
  store i32 %add109, i32* %offset, align 4, !tbaa !73
  %mul123 = mul i32 %depth.0, %div.i
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731: ; preds = %if.end118, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph
  %i111.0865 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph ], [ %inc128, %if.end118 ]
  %call.i727 = call i64 @fwrite(i8* nonnull %52, i64 4, i64 1, i8* nonnull %call.i598) #14
  %cmp.i728.not = icmp eq i64 %call.i727, 0
  br i1 %cmp.i728.not, label %cleanup151.thread, label %if.end118

if.end118:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731
  %53 = load i32, i32* %extent.i, align 4, !tbaa !178
  %54 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %mul124 = mul i32 %mul123, %53
  %mul125 = mul i32 %mul124, %54
  %55 = load i32, i32* %offset, align 4, !tbaa !73
  %add126 = add nsw i32 %mul125, %55
  store i32 %add126, i32* %offset, align 4, !tbaa !73
  %inc128 = add nuw nsw i32 %i111.0865, 1
  %exitcond881.not = icmp eq i32 %inc128, %channels.0
  br i1 %exitcond881.not, label %for.end129, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, !llvm.loop !198

for.end129:                                       ; preds = %if.end118
  %56 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %56) #15
  store i32 %mul125, i32* %count, align 4, !tbaa !73
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

for.cond138:                                      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  %exitcond.not = icmp eq i32 %inc146, %channels.0
  br i1 %exitcond.not, label %cleanup151, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720, !llvm.loop !199

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720: ; preds = %for.end129, %for.cond138
  %i137.0863 = phi i32 [ %inc146, %for.cond138 ], [ 0, %for.end129 ]
  %call.i716 = call i64 @fwrite(i8* nonnull %56, i64 4, i64 1, i8* nonnull %call.i598) #14
  %cmp.i717.not = icmp eq i64 %call.i716, 0
  %inc146 = add nuw nsw i32 %i137.0863, 1
  br i1 %cmp.i717.not, label %select.unfold, label %for.cond138

select.unfold:                                    ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #15
  br label %cleanup151.thread

cleanup151.thread:                                ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, %select.unfold
  %retval.2.ph = phi i32 [ -5, %select.unfold ], [ -4, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #15
  br label %cleanup154

cleanup151:                                       ; preds = %for.cond138
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #15
  br label %cleanup154.thread

cleanup154.thread:                                ; preds = %cleanup151, %if.end103
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #15
  br label %if.end311

cleanup154:                                       ; preds = %cleanup151.thread, %if.then36
  %retval.4 = phi i32 [ -3, %if.then36 ], [ %retval.2.ph, %cleanup151.thread ]
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #15
  br label %cleanup433

if.else164:                                       ; preds = %lor.lhs.false
  %call165 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.39, i64 0, i64 0)) #16
  br i1 %call165, label %while.cond, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631

while.cond:                                       ; preds = %if.else164, %while.cond
  %end.0 = phi i8* [ %incdec.ptr167, %while.cond ], [ %filename, %if.else164 ]
  %57 = load i8, i8* %end.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %57, 0
  %incdec.ptr167 = getelementptr inbounds i8, i8* %end.0, i64 1
  br i1 %tobool.not, label %while.body171, label %while.cond, !llvm.loop !200

while.cond174.preheader:                          ; preds = %while.body171
  %end.1872.lcssa883 = ptrtoint i8* %end.1872 to i64
  %58 = ptrtoint i8* %filename to i64
  %59 = sub i64 %58, %end.1872.lcssa883
  br label %while.cond174

while.body171:                                    ; preds = %while.cond, %while.body171
  %end.1872 = phi i8* [ %incdec.ptr172.ptr, %while.body171 ], [ %end.0, %while.cond ]
  %incdec.ptr172.ptr = getelementptr inbounds i8, i8* %end.1872, i64 -1
  %.pr = load i8, i8* %incdec.ptr172.ptr, align 1, !tbaa !14
  %cmp170.not = icmp eq i8 %.pr, 46
  br i1 %cmp170.not, label %while.cond174.preheader, label %while.body171, !llvm.loop !201

while.cond174:                                    ; preds = %land.rhs176, %while.cond174.preheader
  %start.0.idx = phi i64 [ %start.0.add, %land.rhs176 ], [ -1, %while.cond174.preheader ]
  %start.0.ptr.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.idx
  %cmp175.not = icmp eq i8* %start.0.ptr.ptr, %filename
  br i1 %cmp175.not, label %while.end183, label %land.rhs176

land.rhs176:                                      ; preds = %while.cond174
  %start.0.add = add nsw i64 %start.0.idx, -1
  %arrayidx177.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.add
  %60 = load i8, i8* %arrayidx177.ptr, align 1, !tbaa !14
  %cmp179.not = icmp eq i8 %60, 47
  br i1 %cmp179.not, label %while.end183, label %while.cond174, !llvm.loop !202

while.end183:                                     ; preds = %land.rhs176, %while.cond174
  %start.0.idx.lcssa = phi i64 [ %59, %while.cond174 ], [ %start.0.idx, %land.rhs176 ]
  %61 = trunc i64 %start.0.idx.lcssa to i32
  %conv184 = xor i32 %61, -1
  %62 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %62) #15
  %cmp186.not868 = icmp eq i64 %start.0.idx.lcssa, -1
  br i1 %cmp186.not868, label %iter.check, label %while.body187.preheader

while.body187.preheader:                          ; preds = %while.end183
  %63 = xor i64 %start.0.idx.lcssa, -1
  %min.iters.check39 = icmp ugt i64 %start.0.idx.lcssa, -129
  br i1 %min.iters.check39, label %while.body187.preheader212, label %vector.memcheck

vector.memcheck:                                  ; preds = %while.body187.preheader
  %64 = xor i64 %start.0.idx.lcssa, -1
  %scevgep43 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %64
  %scevgep44 = getelementptr i8, i8* %end.1872, i64 %start.0.idx.lcssa
  %scevgep45 = getelementptr i8, i8* %end.1872, i64 -1
  %bound0 = icmp ult i8* %array_name42, %scevgep45
  %bound1 = icmp ult i8* %scevgep44, %scevgep43
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %while.body187.preheader212, label %vector.ph41

vector.ph41:                                      ; preds = %vector.memcheck
  %n.vec47 = and i64 %63, -128
  %ind.end51 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %n.vec47
  %ind.end53 = add i64 %start.0.idx.lcssa, %n.vec47
  %65 = add i64 %n.vec47, -128
  %66 = lshr exact i64 %65, 7
  %67 = add nuw nsw i64 %66, 1
  %xtraiter215 = and i64 %67, 3
  %68 = icmp ult i64 %65, 384
  br i1 %68, label %middle.block36.unr-lcssa, label %vector.ph41.new

vector.ph41.new:                                  ; preds = %vector.ph41
  %unroll_iter218 = and i64 %67, 288230376151711740
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph41.new
  %index48 = phi i64 [ 0, %vector.ph41.new ], [ %index.next49.3, %vector.body38 ]
  %niter219 = phi i64 [ %unroll_iter218, %vector.ph41.new ], [ %niter219.nsub.3, %vector.body38 ]
  %next.gep = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48
  %offset.idx = add i64 %start.0.idx.lcssa, %index48
  %69 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx
  %70 = bitcast i8* %69 to <32 x i8>*
  %wide.load = load <32 x i8>, <32 x i8>* %70, align 1, !tbaa !14, !alias.scope !203
  %71 = getelementptr inbounds i8, i8* %69, i64 32
  %72 = bitcast i8* %71 to <32 x i8>*
  %wide.load58 = load <32 x i8>, <32 x i8>* %72, align 1, !tbaa !14, !alias.scope !203
  %73 = getelementptr inbounds i8, i8* %69, i64 64
  %74 = bitcast i8* %73 to <32 x i8>*
  %wide.load59 = load <32 x i8>, <32 x i8>* %74, align 1, !tbaa !14, !alias.scope !203
  %75 = getelementptr inbounds i8, i8* %69, i64 96
  %76 = bitcast i8* %75 to <32 x i8>*
  %wide.load60 = load <32 x i8>, <32 x i8>* %76, align 1, !tbaa !14, !alias.scope !203
  %77 = bitcast i8* %next.gep to <32 x i8>*
  store <32 x i8> %wide.load, <32 x i8>* %77, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %78 = getelementptr i8, i8* %next.gep, i64 32
  %79 = bitcast i8* %78 to <32 x i8>*
  store <32 x i8> %wide.load58, <32 x i8>* %79, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %80 = getelementptr i8, i8* %next.gep, i64 64
  %81 = bitcast i8* %80 to <32 x i8>*
  store <32 x i8> %wide.load59, <32 x i8>* %81, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %82 = getelementptr i8, i8* %next.gep, i64 96
  %83 = bitcast i8* %82 to <32 x i8>*
  store <32 x i8> %wide.load60, <32 x i8>* %83, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49 = or i64 %index48, 128
  %next.gep.1 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49
  %offset.idx.1 = add i64 %start.0.idx.lcssa, %index.next49
  %84 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.1
  %85 = bitcast i8* %84 to <32 x i8>*
  %wide.load.1 = load <32 x i8>, <32 x i8>* %85, align 1, !tbaa !14, !alias.scope !203
  %86 = getelementptr inbounds i8, i8* %84, i64 32
  %87 = bitcast i8* %86 to <32 x i8>*
  %wide.load58.1 = load <32 x i8>, <32 x i8>* %87, align 1, !tbaa !14, !alias.scope !203
  %88 = getelementptr inbounds i8, i8* %84, i64 64
  %89 = bitcast i8* %88 to <32 x i8>*
  %wide.load59.1 = load <32 x i8>, <32 x i8>* %89, align 1, !tbaa !14, !alias.scope !203
  %90 = getelementptr inbounds i8, i8* %84, i64 96
  %91 = bitcast i8* %90 to <32 x i8>*
  %wide.load60.1 = load <32 x i8>, <32 x i8>* %91, align 1, !tbaa !14, !alias.scope !203
  %92 = bitcast i8* %next.gep.1 to <32 x i8>*
  store <32 x i8> %wide.load.1, <32 x i8>* %92, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %93 = getelementptr i8, i8* %next.gep.1, i64 32
  %94 = bitcast i8* %93 to <32 x i8>*
  store <32 x i8> %wide.load58.1, <32 x i8>* %94, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %95 = getelementptr i8, i8* %next.gep.1, i64 64
  %96 = bitcast i8* %95 to <32 x i8>*
  store <32 x i8> %wide.load59.1, <32 x i8>* %96, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %97 = getelementptr i8, i8* %next.gep.1, i64 96
  %98 = bitcast i8* %97 to <32 x i8>*
  store <32 x i8> %wide.load60.1, <32 x i8>* %98, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.1 = or i64 %index48, 256
  %next.gep.2 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.1
  %offset.idx.2 = add i64 %start.0.idx.lcssa, %index.next49.1
  %99 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.2
  %100 = bitcast i8* %99 to <32 x i8>*
  %wide.load.2 = load <32 x i8>, <32 x i8>* %100, align 1, !tbaa !14, !alias.scope !203
  %101 = getelementptr inbounds i8, i8* %99, i64 32
  %102 = bitcast i8* %101 to <32 x i8>*
  %wide.load58.2 = load <32 x i8>, <32 x i8>* %102, align 1, !tbaa !14, !alias.scope !203
  %103 = getelementptr inbounds i8, i8* %99, i64 64
  %104 = bitcast i8* %103 to <32 x i8>*
  %wide.load59.2 = load <32 x i8>, <32 x i8>* %104, align 1, !tbaa !14, !alias.scope !203
  %105 = getelementptr inbounds i8, i8* %99, i64 96
  %106 = bitcast i8* %105 to <32 x i8>*
  %wide.load60.2 = load <32 x i8>, <32 x i8>* %106, align 1, !tbaa !14, !alias.scope !203
  %107 = bitcast i8* %next.gep.2 to <32 x i8>*
  store <32 x i8> %wide.load.2, <32 x i8>* %107, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %108 = getelementptr i8, i8* %next.gep.2, i64 32
  %109 = bitcast i8* %108 to <32 x i8>*
  store <32 x i8> %wide.load58.2, <32 x i8>* %109, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %110 = getelementptr i8, i8* %next.gep.2, i64 64
  %111 = bitcast i8* %110 to <32 x i8>*
  store <32 x i8> %wide.load59.2, <32 x i8>* %111, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %112 = getelementptr i8, i8* %next.gep.2, i64 96
  %113 = bitcast i8* %112 to <32 x i8>*
  store <32 x i8> %wide.load60.2, <32 x i8>* %113, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.2 = or i64 %index48, 384
  %next.gep.3 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.2
  %offset.idx.3 = add i64 %start.0.idx.lcssa, %index.next49.2
  %114 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.3
  %115 = bitcast i8* %114 to <32 x i8>*
  %wide.load.3 = load <32 x i8>, <32 x i8>* %115, align 1, !tbaa !14, !alias.scope !203
  %116 = getelementptr inbounds i8, i8* %114, i64 32
  %117 = bitcast i8* %116 to <32 x i8>*
  %wide.load58.3 = load <32 x i8>, <32 x i8>* %117, align 1, !tbaa !14, !alias.scope !203
  %118 = getelementptr inbounds i8, i8* %114, i64 64
  %119 = bitcast i8* %118 to <32 x i8>*
  %wide.load59.3 = load <32 x i8>, <32 x i8>* %119, align 1, !tbaa !14, !alias.scope !203
  %120 = getelementptr inbounds i8, i8* %114, i64 96
  %121 = bitcast i8* %120 to <32 x i8>*
  %wide.load60.3 = load <32 x i8>, <32 x i8>* %121, align 1, !tbaa !14, !alias.scope !203
  %122 = bitcast i8* %next.gep.3 to <32 x i8>*
  store <32 x i8> %wide.load.3, <32 x i8>* %122, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %123 = getelementptr i8, i8* %next.gep.3, i64 32
  %124 = bitcast i8* %123 to <32 x i8>*
  store <32 x i8> %wide.load58.3, <32 x i8>* %124, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %125 = getelementptr i8, i8* %next.gep.3, i64 64
  %126 = bitcast i8* %125 to <32 x i8>*
  store <32 x i8> %wide.load59.3, <32 x i8>* %126, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %127 = getelementptr i8, i8* %next.gep.3, i64 96
  %128 = bitcast i8* %127 to <32 x i8>*
  store <32 x i8> %wide.load60.3, <32 x i8>* %128, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.3 = add i64 %index48, 512
  %niter219.nsub.3 = add i64 %niter219, -4
  %niter219.ncmp.3 = icmp eq i64 %niter219.nsub.3, 0
  br i1 %niter219.ncmp.3, label %middle.block36.unr-lcssa, label %vector.body38, !llvm.loop !208

middle.block36.unr-lcssa:                         ; preds = %vector.body38, %vector.ph41
  %index48.unr = phi i64 [ 0, %vector.ph41 ], [ %index.next49.3, %vector.body38 ]
  %lcmp.mod217.not = icmp eq i64 %xtraiter215, 0
  br i1 %lcmp.mod217.not, label %middle.block36, label %vector.body38.epil

vector.body38.epil:                               ; preds = %middle.block36.unr-lcssa, %vector.body38.epil
  %index48.epil = phi i64 [ %index.next49.epil, %vector.body38.epil ], [ %index48.unr, %middle.block36.unr-lcssa ]
  %epil.iter216 = phi i64 [ %epil.iter216.sub, %vector.body38.epil ], [ %xtraiter215, %middle.block36.unr-lcssa ]
  %next.gep.epil = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48.epil
  %offset.idx.epil = add i64 %start.0.idx.lcssa, %index48.epil
  %129 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.epil
  %130 = bitcast i8* %129 to <32 x i8>*
  %wide.load.epil = load <32 x i8>, <32 x i8>* %130, align 1, !tbaa !14, !alias.scope !203
  %131 = getelementptr inbounds i8, i8* %129, i64 32
  %132 = bitcast i8* %131 to <32 x i8>*
  %wide.load58.epil = load <32 x i8>, <32 x i8>* %132, align 1, !tbaa !14, !alias.scope !203
  %133 = getelementptr inbounds i8, i8* %129, i64 64
  %134 = bitcast i8* %133 to <32 x i8>*
  %wide.load59.epil = load <32 x i8>, <32 x i8>* %134, align 1, !tbaa !14, !alias.scope !203
  %135 = getelementptr inbounds i8, i8* %129, i64 96
  %136 = bitcast i8* %135 to <32 x i8>*
  %wide.load60.epil = load <32 x i8>, <32 x i8>* %136, align 1, !tbaa !14, !alias.scope !203
  %137 = bitcast i8* %next.gep.epil to <32 x i8>*
  store <32 x i8> %wide.load.epil, <32 x i8>* %137, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %138 = getelementptr i8, i8* %next.gep.epil, i64 32
  %139 = bitcast i8* %138 to <32 x i8>*
  store <32 x i8> %wide.load58.epil, <32 x i8>* %139, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %140 = getelementptr i8, i8* %next.gep.epil, i64 64
  %141 = bitcast i8* %140 to <32 x i8>*
  store <32 x i8> %wide.load59.epil, <32 x i8>* %141, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %142 = getelementptr i8, i8* %next.gep.epil, i64 96
  %143 = bitcast i8* %142 to <32 x i8>*
  store <32 x i8> %wide.load60.epil, <32 x i8>* %143, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.epil = add i64 %index48.epil, 128
  %epil.iter216.sub = add i64 %epil.iter216, -1
  %epil.iter216.cmp.not = icmp eq i64 %epil.iter216.sub, 0
  br i1 %epil.iter216.cmp.not, label %middle.block36, label %vector.body38.epil, !llvm.loop !209

middle.block36:                                   ; preds = %vector.body38.epil, %middle.block36.unr-lcssa
  %cmp.n54 = icmp eq i64 %n.vec47, %63
  br i1 %cmp.n54, label %while.cond191.preheader, label %while.body187.preheader212

while.body187.preheader212:                       ; preds = %vector.memcheck, %while.body187.preheader, %middle.block36
  %dst.0870.ph = phi i8* [ %62, %vector.memcheck ], [ %62, %while.body187.preheader ], [ %ind.end51, %middle.block36 ]
  %start.1869.idx.ph = phi i64 [ %start.0.idx.lcssa, %vector.memcheck ], [ %start.0.idx.lcssa, %while.body187.preheader ], [ %ind.end53, %middle.block36 ]
  %144 = sub i64 -2, %start.1869.idx.ph
  %145 = and i64 %start.1869.idx.ph, 7
  %xtraiter220 = xor i64 %145, 7
  %lcmp.mod221.not = icmp eq i64 %xtraiter220, 0
  br i1 %lcmp.mod221.not, label %while.body187.prol.loopexit, label %while.body187.prol

while.body187.prol:                               ; preds = %while.body187.preheader212, %while.body187.prol
  %dst.0870.prol = phi i8* [ %incdec.ptr189.prol, %while.body187.prol ], [ %dst.0870.ph, %while.body187.preheader212 ]
  %start.1869.idx.prol = phi i64 [ %start.1869.add.prol, %while.body187.prol ], [ %start.1869.idx.ph, %while.body187.preheader212 ]
  %prol.iter = phi i64 [ %prol.iter.sub, %while.body187.prol ], [ %xtraiter220, %while.body187.preheader212 ]
  %start.1869.ptr.prol = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx.prol
  %start.1869.add.prol = add nuw nsw i64 %start.1869.idx.prol, 1
  %146 = load i8, i8* %start.1869.ptr.prol, align 1, !tbaa !14
  %incdec.ptr189.prol = getelementptr inbounds i8, i8* %dst.0870.prol, i64 1
  store i8 %146, i8* %dst.0870.prol, align 1, !tbaa !14
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %while.body187.prol.loopexit, label %while.body187.prol, !llvm.loop !210

while.body187.prol.loopexit:                      ; preds = %while.body187.prol, %while.body187.preheader212
  %incdec.ptr189.lcssa213.unr = phi i8* [ undef, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %dst.0870.unr = phi i8* [ %dst.0870.ph, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %start.1869.idx.unr = phi i64 [ %start.1869.idx.ph, %while.body187.preheader212 ], [ %start.1869.add.prol, %while.body187.prol ]
  %147 = icmp ult i64 %144, 7
  br i1 %147, label %while.cond191.preheader, label %while.body187

while.cond191.preheader:                          ; preds = %while.body187.prol.loopexit, %while.body187, %middle.block36
  %incdec.ptr189.lcssa = phi i8* [ %ind.end51, %middle.block36 ], [ %incdec.ptr189.lcssa213.unr, %while.body187.prol.loopexit ], [ %incdec.ptr189.7, %while.body187 ]
  %add.ptr = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 256
  %cmp193866 = icmp ult i8* %incdec.ptr189.lcssa, %add.ptr
  br i1 %cmp193866, label %iter.check, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705

iter.check:                                       ; preds = %while.cond191.preheader, %while.end183
  %dst.0.lcssa911 = phi i8* [ %incdec.ptr189.lcssa, %while.cond191.preheader ], [ %62, %while.end183 ]
  %dst.0.lcssa91164 = ptrtoint i8* %dst.0.lcssa911 to i64
  %scevgep = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 1, i64 0
  %148 = sub i64 0, %dst.0.lcssa91164
  %scevgep65 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %148
  %exitcount.ptrcnt.to.int = ptrtoint i8* %scevgep65 to i64
  %min.iters.check67 = icmp ult i8* %scevgep65, inttoptr (i64 4 to i8*)
  br i1 %min.iters.check67, label %while.body194.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  %min.iters.check69 = icmp ult i8* %scevgep65, inttoptr (i64 128 to i8*)
  br i1 %min.iters.check69, label %vec.epilog.ph, label %vector.ph70

vector.ph70:                                      ; preds = %vector.main.loop.iter.check
  %n.vec72 = and i64 %exitcount.ptrcnt.to.int, -128
  %149 = add i64 %n.vec72, -128
  %150 = lshr exact i64 %149, 7
  %151 = add nuw nsw i64 %150, 1
  %xtraiter222 = and i64 %151, 7
  %152 = icmp ult i64 %149, 896
  br i1 %152, label %middle.block61.unr-lcssa, label %vector.ph70.new

vector.ph70.new:                                  ; preds = %vector.ph70
  %unroll_iter225 = and i64 %151, 288230376151711736
  br label %vector.body63

vector.body63:                                    ; preds = %vector.body63, %vector.ph70.new
  %index73 = phi i64 [ 0, %vector.ph70.new ], [ %index.next74.7, %vector.body63 ]
  %niter226 = phi i64 [ %unroll_iter225, %vector.ph70.new ], [ %niter226.nsub.7, %vector.body63 ]
  %next.gep76 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73
  %153 = bitcast i8* %next.gep76 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %153, align 1, !tbaa !14
  %154 = getelementptr i8, i8* %next.gep76, i64 32
  %155 = bitcast i8* %154 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %155, align 1, !tbaa !14
  %156 = getelementptr i8, i8* %next.gep76, i64 64
  %157 = bitcast i8* %156 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %157, align 1, !tbaa !14
  %158 = getelementptr i8, i8* %next.gep76, i64 96
  %159 = bitcast i8* %158 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %159, align 1, !tbaa !14
  %index.next74 = or i64 %index73, 128
  %next.gep76.1 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74
  %160 = bitcast i8* %next.gep76.1 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %160, align 1, !tbaa !14
  %161 = getelementptr i8, i8* %next.gep76.1, i64 32
  %162 = bitcast i8* %161 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %162, align 1, !tbaa !14
  %163 = getelementptr i8, i8* %next.gep76.1, i64 64
  %164 = bitcast i8* %163 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %164, align 1, !tbaa !14
  %165 = getelementptr i8, i8* %next.gep76.1, i64 96
  %166 = bitcast i8* %165 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %166, align 1, !tbaa !14
  %index.next74.1 = or i64 %index73, 256
  %next.gep76.2 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.1
  %167 = bitcast i8* %next.gep76.2 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %167, align 1, !tbaa !14
  %168 = getelementptr i8, i8* %next.gep76.2, i64 32
  %169 = bitcast i8* %168 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %169, align 1, !tbaa !14
  %170 = getelementptr i8, i8* %next.gep76.2, i64 64
  %171 = bitcast i8* %170 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %171, align 1, !tbaa !14
  %172 = getelementptr i8, i8* %next.gep76.2, i64 96
  %173 = bitcast i8* %172 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %173, align 1, !tbaa !14
  %index.next74.2 = or i64 %index73, 384
  %next.gep76.3 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.2
  %174 = bitcast i8* %next.gep76.3 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %174, align 1, !tbaa !14
  %175 = getelementptr i8, i8* %next.gep76.3, i64 32
  %176 = bitcast i8* %175 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %176, align 1, !tbaa !14
  %177 = getelementptr i8, i8* %next.gep76.3, i64 64
  %178 = bitcast i8* %177 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %178, align 1, !tbaa !14
  %179 = getelementptr i8, i8* %next.gep76.3, i64 96
  %180 = bitcast i8* %179 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %180, align 1, !tbaa !14
  %index.next74.3 = or i64 %index73, 512
  %next.gep76.4 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.3
  %181 = bitcast i8* %next.gep76.4 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %181, align 1, !tbaa !14
  %182 = getelementptr i8, i8* %next.gep76.4, i64 32
  %183 = bitcast i8* %182 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %183, align 1, !tbaa !14
  %184 = getelementptr i8, i8* %next.gep76.4, i64 64
  %185 = bitcast i8* %184 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %185, align 1, !tbaa !14
  %186 = getelementptr i8, i8* %next.gep76.4, i64 96
  %187 = bitcast i8* %186 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %187, align 1, !tbaa !14
  %index.next74.4 = or i64 %index73, 640
  %next.gep76.5 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.4
  %188 = bitcast i8* %next.gep76.5 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %188, align 1, !tbaa !14
  %189 = getelementptr i8, i8* %next.gep76.5, i64 32
  %190 = bitcast i8* %189 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %190, align 1, !tbaa !14
  %191 = getelementptr i8, i8* %next.gep76.5, i64 64
  %192 = bitcast i8* %191 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %192, align 1, !tbaa !14
  %193 = getelementptr i8, i8* %next.gep76.5, i64 96
  %194 = bitcast i8* %193 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %194, align 1, !tbaa !14
  %index.next74.5 = or i64 %index73, 768
  %next.gep76.6 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.5
  %195 = bitcast i8* %next.gep76.6 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %195, align 1, !tbaa !14
  %196 = getelementptr i8, i8* %next.gep76.6, i64 32
  %197 = bitcast i8* %196 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %197, align 1, !tbaa !14
  %198 = getelementptr i8, i8* %next.gep76.6, i64 64
  %199 = bitcast i8* %198 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %199, align 1, !tbaa !14
  %200 = getelementptr i8, i8* %next.gep76.6, i64 96
  %201 = bitcast i8* %200 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %201, align 1, !tbaa !14
  %index.next74.6 = or i64 %index73, 896
  %next.gep76.7 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.6
  %202 = bitcast i8* %next.gep76.7 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %202, align 1, !tbaa !14
  %203 = getelementptr i8, i8* %next.gep76.7, i64 32
  %204 = bitcast i8* %203 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %204, align 1, !tbaa !14
  %205 = getelementptr i8, i8* %next.gep76.7, i64 64
  %206 = bitcast i8* %205 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %206, align 1, !tbaa !14
  %207 = getelementptr i8, i8* %next.gep76.7, i64 96
  %208 = bitcast i8* %207 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %208, align 1, !tbaa !14
  %index.next74.7 = add i64 %index73, 1024
  %niter226.nsub.7 = add i64 %niter226, -8
  %niter226.ncmp.7 = icmp eq i64 %niter226.nsub.7, 0
  br i1 %niter226.ncmp.7, label %middle.block61.unr-lcssa, label %vector.body63, !llvm.loop !211

middle.block61.unr-lcssa:                         ; preds = %vector.body63, %vector.ph70
  %index73.unr = phi i64 [ 0, %vector.ph70 ], [ %index.next74.7, %vector.body63 ]
  %lcmp.mod224.not = icmp eq i64 %xtraiter222, 0
  br i1 %lcmp.mod224.not, label %middle.block61, label %vector.body63.epil

vector.body63.epil:                               ; preds = %middle.block61.unr-lcssa, %vector.body63.epil
  %index73.epil = phi i64 [ %index.next74.epil, %vector.body63.epil ], [ %index73.unr, %middle.block61.unr-lcssa ]
  %epil.iter223 = phi i64 [ %epil.iter223.sub, %vector.body63.epil ], [ %xtraiter222, %middle.block61.unr-lcssa ]
  %next.gep76.epil = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73.epil
  %209 = bitcast i8* %next.gep76.epil to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %209, align 1, !tbaa !14
  %210 = getelementptr i8, i8* %next.gep76.epil, i64 32
  %211 = bitcast i8* %210 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %211, align 1, !tbaa !14
  %212 = getelementptr i8, i8* %next.gep76.epil, i64 64
  %213 = bitcast i8* %212 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %213, align 1, !tbaa !14
  %214 = getelementptr i8, i8* %next.gep76.epil, i64 96
  %215 = bitcast i8* %214 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %215, align 1, !tbaa !14
  %index.next74.epil = add i64 %index73.epil, 128
  %epil.iter223.sub = add i64 %epil.iter223, -1
  %epil.iter223.cmp.not = icmp eq i64 %epil.iter223.sub, 0
  br i1 %epil.iter223.cmp.not, label %middle.block61, label %vector.body63.epil, !llvm.loop !212

middle.block61:                                   ; preds = %vector.body63.epil, %middle.block61.unr-lcssa
  %cmp.n75 = icmp eq i64 %n.vec72, %exitcount.ptrcnt.to.int
  br i1 %cmp.n75, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block61
  %ind.end89 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec72
  %n.vec.remaining = and i64 %exitcount.ptrcnt.to.int, 124
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  br i1 %min.epilog.iters.check, label %while.body194.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %vec.epilog.resume.val = phi i64 [ %n.vec72, %vec.epilog.iter.check ], [ 0, %vector.main.loop.iter.check ]
  %216 = sub i64 0, %dst.0.lcssa91164
  %scevgep80 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %216
  %exitcount.ptrcnt.to.int82 = ptrtoint i8* %scevgep80 to i64
  %n.vec84 = and i64 %exitcount.ptrcnt.to.int82, -4
  %ind.end88 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec84
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index85 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next86, %vec.epilog.vector.body ]
  %next.gep91 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index85
  %217 = bitcast i8* %next.gep91 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %217, align 1, !tbaa !14
  %index.next86 = add i64 %index85, 4
  %218 = icmp eq i64 %index.next86, %n.vec84
  br i1 %218, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !213

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %cmp.n90 = icmp eq i64 %n.vec84, %exitcount.ptrcnt.to.int82
  br i1 %cmp.n90, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194.preheader

while.body194.preheader:                          ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %dst.1867.ph = phi i8* [ %dst.0.lcssa911, %iter.check ], [ %ind.end89, %vec.epilog.iter.check ], [ %ind.end88, %vec.epilog.middle.block ]
  br label %while.body194

while.body187:                                    ; preds = %while.body187.prol.loopexit, %while.body187
  %dst.0870 = phi i8* [ %incdec.ptr189.7, %while.body187 ], [ %dst.0870.unr, %while.body187.prol.loopexit ]
  %start.1869.idx = phi i64 [ %start.1869.add.7, %while.body187 ], [ %start.1869.idx.unr, %while.body187.prol.loopexit ]
  %start.1869.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx
  %start.1869.add = add nuw nsw i64 %start.1869.idx, 1
  %219 = load i8, i8* %start.1869.ptr, align 1, !tbaa !14
  %incdec.ptr189 = getelementptr inbounds i8, i8* %dst.0870, i64 1
  store i8 %219, i8* %dst.0870, align 1, !tbaa !14
  %start.1869.ptr.1 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add
  %start.1869.add.1 = add nuw nsw i64 %start.1869.idx, 2
  %220 = load i8, i8* %start.1869.ptr.1, align 1, !tbaa !14
  %incdec.ptr189.1 = getelementptr inbounds i8, i8* %dst.0870, i64 2
  store i8 %220, i8* %incdec.ptr189, align 1, !tbaa !14
  %start.1869.ptr.2 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.1
  %start.1869.add.2 = add nuw nsw i64 %start.1869.idx, 3
  %221 = load i8, i8* %start.1869.ptr.2, align 1, !tbaa !14
  %incdec.ptr189.2 = getelementptr inbounds i8, i8* %dst.0870, i64 3
  store i8 %221, i8* %incdec.ptr189.1, align 1, !tbaa !14
  %start.1869.ptr.3 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.2
  %start.1869.add.3 = add nuw nsw i64 %start.1869.idx, 4
  %222 = load i8, i8* %start.1869.ptr.3, align 1, !tbaa !14
  %incdec.ptr189.3 = getelementptr inbounds i8, i8* %dst.0870, i64 4
  store i8 %222, i8* %incdec.ptr189.2, align 1, !tbaa !14
  %start.1869.ptr.4 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.3
  %start.1869.add.4 = add nuw nsw i64 %start.1869.idx, 5
  %223 = load i8, i8* %start.1869.ptr.4, align 1, !tbaa !14
  %incdec.ptr189.4 = getelementptr inbounds i8, i8* %dst.0870, i64 5
  store i8 %223, i8* %incdec.ptr189.3, align 1, !tbaa !14
  %start.1869.ptr.5 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.4
  %start.1869.add.5 = add nuw nsw i64 %start.1869.idx, 6
  %224 = load i8, i8* %start.1869.ptr.5, align 1, !tbaa !14
  %incdec.ptr189.5 = getelementptr inbounds i8, i8* %dst.0870, i64 6
  store i8 %224, i8* %incdec.ptr189.4, align 1, !tbaa !14
  %start.1869.ptr.6 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.5
  %start.1869.add.6 = add nuw nsw i64 %start.1869.idx, 7
  %225 = load i8, i8* %start.1869.ptr.6, align 1, !tbaa !14
  %incdec.ptr189.6 = getelementptr inbounds i8, i8* %dst.0870, i64 7
  store i8 %225, i8* %incdec.ptr189.5, align 1, !tbaa !14
  %start.1869.ptr.7 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.6
  %start.1869.add.7 = add nuw nsw i64 %start.1869.idx, 8
  %226 = load i8, i8* %start.1869.ptr.7, align 1, !tbaa !14
  %incdec.ptr189.7 = getelementptr inbounds i8, i8* %dst.0870, i64 8
  store i8 %226, i8* %incdec.ptr189.6, align 1, !tbaa !14
  %cmp186.not.7 = icmp eq i64 %start.1869.add.7, -1
  br i1 %cmp186.not.7, label %while.cond191.preheader, label %while.body187, !llvm.loop !214

while.body194:                                    ; preds = %while.body194.preheader, %while.body194
  %dst.1867 = phi i8* [ %incdec.ptr195, %while.body194 ], [ %dst.1867.ph, %while.body194.preheader ]
  %incdec.ptr195 = getelementptr inbounds i8, i8* %dst.1867, i64 1
  store i8 0, i8* %dst.1867, align 1, !tbaa !14
  %exitcond882.not = icmp eq i8* %incdec.ptr195, %scevgep
  br i1 %exitcond882.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194, !llvm.loop !215

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705: ; preds = %while.body194, %middle.block61, %vec.epilog.middle.block, %while.cond191.preheader
  %add197 = sub i32 6, %61
  %and = and i32 %add197, -8
  %227 = getelementptr inbounds [129 x i8], [129 x i8]* %header198, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %227) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(129) %227, i8* nonnull align 1 dereferenceable(129) getelementptr inbounds ([129 x i8], [129 x i8]* @__const.halide_debug_to_file.header, i64 0, i64 0), i64 129, i1 false)
  %call.i701 = call i64 @fwrite(i8* nonnull %227, i64 128, i64 1, i8* nonnull %call.i598) #14
  %228 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %228, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %229 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %228 to i64
  %min.iters.check95 = icmp ult i32 %228, 17
  br i1 %min.iters.check95, label %for.body.i.i.preheader, label %vector.ph96

vector.ph96:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf97 = and i64 %wide.trip.count.i.i, 15
  %230 = icmp eq i64 %n.mod.vf97, 0
  %231 = select i1 %230, i64 16, i64 %n.mod.vf97
  %n.vec98 = sub nsw i64 %wide.trip.count.i.i, %231
  br label %vector.body94

vector.body94:                                    ; preds = %vector.body94, %vector.ph96
  %index99 = phi i64 [ 0, %vector.ph96 ], [ %index.next100, %vector.body94 ]
  %vec.ind103 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph96 ], [ %vec.ind.next107, %vector.body94 ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi, %vector.body94 ]
  %vec.phi108 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi120, %vector.body94 ]
  %vec.phi109 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi121, %vector.body94 ]
  %vec.phi110 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi122, %vector.body94 ]
  %step.add = add <4 x i64> %vec.ind103, <i64 4, i64 4, i64 4, i64 4>
  %step.add104 = add <4 x i64> %vec.ind103, <i64 8, i64 8, i64 8, i64 8>
  %step.add105 = add <4 x i64> %vec.ind103, <i64 12, i64 12, i64 12, i64 12>
  %232 = or i64 %index99, 4
  %233 = or i64 %index99, 8
  %234 = or i64 %index99, 12
  %235 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index99, i32 2
  %236 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %232, i32 2
  %237 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %233, i32 2
  %238 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %234, i32 2
  %239 = bitcast i32* %235 to <16 x i32>*
  %240 = bitcast i32* %236 to <16 x i32>*
  %241 = bitcast i32* %237 to <16 x i32>*
  %242 = bitcast i32* %238 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %239, align 4, !tbaa !182
  %wide.vec111 = load <16 x i32>, <16 x i32>* %240, align 4, !tbaa !182
  %wide.vec112 = load <16 x i32>, <16 x i32>* %241, align 4, !tbaa !182
  %wide.vec113 = load <16 x i32>, <16 x i32>* %242, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec114 = shufflevector <16 x i32> %wide.vec111, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec115 = shufflevector <16 x i32> %wide.vec112, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec116 = shufflevector <16 x i32> %wide.vec113, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %243 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %244 = icmp sgt <4 x i32> %strided.vec114, zeroinitializer
  %245 = icmp sgt <4 x i32> %strided.vec115, zeroinitializer
  %246 = icmp sgt <4 x i32> %strided.vec116, zeroinitializer
  %247 = zext <4 x i32> %strided.vec to <4 x i64>
  %248 = zext <4 x i32> %strided.vec114 to <4 x i64>
  %249 = zext <4 x i32> %strided.vec115 to <4 x i64>
  %250 = zext <4 x i32> %strided.vec116 to <4 x i64>
  %251 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind103, i32 1
  %252 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add, i32 1
  %253 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add104, i32 1
  %254 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add105, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %251, i32 4, <4 x i1> %243, <4 x i32> undef), !tbaa !178
  %wide.masked.gather117 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %252, i32 4, <4 x i1> %244, <4 x i32> undef), !tbaa !178
  %wide.masked.gather118 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %253, i32 4, <4 x i1> %245, <4 x i32> undef), !tbaa !178
  %wide.masked.gather119 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %254, i32 4, <4 x i1> %246, <4 x i32> undef), !tbaa !178
  %255 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %256 = add nsw <4 x i32> %wide.masked.gather117, <i32 -1, i32 -1, i32 -1, i32 -1>
  %257 = add nsw <4 x i32> %wide.masked.gather118, <i32 -1, i32 -1, i32 -1, i32 -1>
  %258 = add nsw <4 x i32> %wide.masked.gather119, <i32 -1, i32 -1, i32 -1, i32 -1>
  %259 = sext <4 x i32> %255 to <4 x i64>
  %260 = sext <4 x i32> %256 to <4 x i64>
  %261 = sext <4 x i32> %257 to <4 x i64>
  %262 = sext <4 x i32> %258 to <4 x i64>
  %263 = mul nsw <4 x i64> %259, %247
  %264 = mul nsw <4 x i64> %260, %248
  %265 = mul nsw <4 x i64> %261, %249
  %266 = mul nsw <4 x i64> %262, %250
  %267 = select <4 x i1> %243, <4 x i64> %263, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %267
  %268 = select <4 x i1> %244, <4 x i64> %264, <4 x i64> zeroinitializer
  %predphi120 = add <4 x i64> %vec.phi108, %268
  %269 = select <4 x i1> %245, <4 x i64> %265, <4 x i64> zeroinitializer
  %predphi121 = add <4 x i64> %vec.phi109, %269
  %270 = select <4 x i1> %246, <4 x i64> %266, <4 x i64> zeroinitializer
  %predphi122 = add <4 x i64> %vec.phi110, %270
  %index.next100 = add i64 %index99, 16
  %vec.ind.next107 = add <4 x i64> %vec.ind103, <i64 16, i64 16, i64 16, i64 16>
  %271 = icmp eq i64 %index.next100, %n.vec98
  br i1 %271, label %middle.block92, label %vector.body94, !llvm.loop !216

middle.block92:                                   ; preds = %vector.body94
  %bin.rdx = add <4 x i64> %predphi120, %predphi
  %bin.rdx123 = add <4 x i64> %predphi121, %bin.rdx
  %bin.rdx124 = add <4 x i64> %predphi122, %bin.rdx123
  %272 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx124)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block92, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec98, %middle.block92 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %272, %middle.block92 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 2
  %273 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %273, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %273 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 1
  %274 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %274, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i693 = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i693, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !217

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check128 = icmp ult i32 %228, 17
  br i1 %min.iters.check128, label %for.body.i13.i.preheader211, label %vector.ph129

vector.ph129:                                     ; preds = %for.body.i13.i.preheader
  %n.mod.vf130 = and i64 %wide.trip.count.i.i, 15
  %275 = icmp eq i64 %n.mod.vf130, 0
  %276 = select i1 %275, i64 16, i64 %n.mod.vf130
  %n.vec131 = sub nsw i64 %wide.trip.count.i.i, %276
  br label %vector.body127

vector.body127:                                   ; preds = %vector.body127, %vector.ph129
  %index132 = phi i64 [ 0, %vector.ph129 ], [ %index.next133, %vector.body127 ]
  %vec.ind136 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph129 ], [ %vec.ind.next141, %vector.body127 ]
  %vec.phi142 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi158, %vector.body127 ]
  %vec.phi143 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi159, %vector.body127 ]
  %vec.phi144 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi160, %vector.body127 ]
  %vec.phi145 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi161, %vector.body127 ]
  %step.add137 = add <4 x i64> %vec.ind136, <i64 4, i64 4, i64 4, i64 4>
  %step.add138 = add <4 x i64> %vec.ind136, <i64 8, i64 8, i64 8, i64 8>
  %step.add139 = add <4 x i64> %vec.ind136, <i64 12, i64 12, i64 12, i64 12>
  %277 = or i64 %index132, 4
  %278 = or i64 %index132, 8
  %279 = or i64 %index132, 12
  %280 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index132, i32 2
  %281 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %277, i32 2
  %282 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %278, i32 2
  %283 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %279, i32 2
  %284 = bitcast i32* %280 to <16 x i32>*
  %285 = bitcast i32* %281 to <16 x i32>*
  %286 = bitcast i32* %282 to <16 x i32>*
  %287 = bitcast i32* %283 to <16 x i32>*
  %wide.vec146 = load <16 x i32>, <16 x i32>* %284, align 4, !tbaa !182
  %wide.vec147 = load <16 x i32>, <16 x i32>* %285, align 4, !tbaa !182
  %wide.vec148 = load <16 x i32>, <16 x i32>* %286, align 4, !tbaa !182
  %wide.vec149 = load <16 x i32>, <16 x i32>* %287, align 4, !tbaa !182
  %strided.vec150 = shufflevector <16 x i32> %wide.vec146, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec151 = shufflevector <16 x i32> %wide.vec147, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec152 = shufflevector <16 x i32> %wide.vec148, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec153 = shufflevector <16 x i32> %wide.vec149, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %288 = icmp slt <4 x i32> %strided.vec150, zeroinitializer
  %289 = icmp slt <4 x i32> %strided.vec151, zeroinitializer
  %290 = icmp slt <4 x i32> %strided.vec152, zeroinitializer
  %291 = icmp slt <4 x i32> %strided.vec153, zeroinitializer
  %292 = sext <4 x i32> %strided.vec150 to <4 x i64>
  %293 = sext <4 x i32> %strided.vec151 to <4 x i64>
  %294 = sext <4 x i32> %strided.vec152 to <4 x i64>
  %295 = sext <4 x i32> %strided.vec153 to <4 x i64>
  %296 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind136, i32 1
  %297 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add137, i32 1
  %298 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add138, i32 1
  %299 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add139, i32 1
  %wide.masked.gather154 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %296, i32 4, <4 x i1> %288, <4 x i32> undef), !tbaa !178
  %wide.masked.gather155 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %297, i32 4, <4 x i1> %289, <4 x i32> undef), !tbaa !178
  %wide.masked.gather156 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %298, i32 4, <4 x i1> %290, <4 x i32> undef), !tbaa !178
  %wide.masked.gather157 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %299, i32 4, <4 x i1> %291, <4 x i32> undef), !tbaa !178
  %300 = add nsw <4 x i32> %wide.masked.gather154, <i32 -1, i32 -1, i32 -1, i32 -1>
  %301 = add nsw <4 x i32> %wide.masked.gather155, <i32 -1, i32 -1, i32 -1, i32 -1>
  %302 = add nsw <4 x i32> %wide.masked.gather156, <i32 -1, i32 -1, i32 -1, i32 -1>
  %303 = add nsw <4 x i32> %wide.masked.gather157, <i32 -1, i32 -1, i32 -1, i32 -1>
  %304 = sext <4 x i32> %300 to <4 x i64>
  %305 = sext <4 x i32> %301 to <4 x i64>
  %306 = sext <4 x i32> %302 to <4 x i64>
  %307 = sext <4 x i32> %303 to <4 x i64>
  %308 = mul nsw <4 x i64> %304, %292
  %309 = mul nsw <4 x i64> %305, %293
  %310 = mul nsw <4 x i64> %306, %294
  %311 = mul nsw <4 x i64> %307, %295
  %312 = select <4 x i1> %288, <4 x i64> %308, <4 x i64> zeroinitializer
  %predphi158 = add <4 x i64> %vec.phi142, %312
  %313 = select <4 x i1> %289, <4 x i64> %309, <4 x i64> zeroinitializer
  %predphi159 = add <4 x i64> %vec.phi143, %313
  %314 = select <4 x i1> %290, <4 x i64> %310, <4 x i64> zeroinitializer
  %predphi160 = add <4 x i64> %vec.phi144, %314
  %315 = select <4 x i1> %291, <4 x i64> %311, <4 x i64> zeroinitializer
  %predphi161 = add <4 x i64> %vec.phi145, %315
  %index.next133 = add i64 %index132, 16
  %vec.ind.next141 = add <4 x i64> %vec.ind136, <i64 16, i64 16, i64 16, i64 16>
  %316 = icmp eq i64 %index.next133, %n.vec131
  br i1 %316, label %middle.block125, label %vector.body127, !llvm.loop !218

middle.block125:                                  ; preds = %vector.body127
  %bin.rdx162 = add <4 x i64> %predphi159, %predphi158
  %bin.rdx163 = add <4 x i64> %predphi160, %bin.rdx162
  %bin.rdx164 = add <4 x i64> %predphi161, %bin.rdx163
  %317 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx164)
  br label %for.body.i13.i.preheader211

for.body.i13.i.preheader211:                      ; preds = %middle.block125, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec131, %middle.block125 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %317, %middle.block125 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader211, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader211 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader211 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 2
  %318 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %318, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %318 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 1
  %319 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %319, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !219

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %add8.i27.i = phi i64 [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i694 = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %320 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i696 = zext i8 %320 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i696, 7
  %div.i.i697 = lshr i64 %add.i4.i, 3
  %mul.i698 = mul i64 %div.i.i697, %sub.i694
  %321 = trunc i64 %mul.i698 to i32
  %322 = add i32 %321, 7
  %323 = and i32 %322, 7
  %conv204 = xor i32 %323, 7
  %conv205 = zext i32 %conv204 to i64
  %add206 = add i64 %mul.i698, %conv205
  %tobool207.not = icmp ult i64 %add206, 4294967296
  br i1 %tobool207.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687, label %cleanup278.thread

cleanup278.thread:                                ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6.40, i64 0, i64 0)) #14
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #15
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #15
  br label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687: ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %324 = icmp sgt i32 %228, 2
  %spec.store.select = select i1 %324, i32 %228, i32 2
  %325 = bitcast [8 x i32]* %tags to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %325) #15
  %arrayinit.begin = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 0
  store i32 14, i32* %arrayinit.begin, align 4, !tbaa !73
  %arrayinit.element = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 1
  %add214 = shl i32 %spec.store.select, 2
  %and215 = add i32 %add214, 4
  %mul216 = and i32 %and215, -8
  %add217 = add i32 %and, 40
  %add218 = add i32 %add217, %mul216
  %add220 = add i32 %add218, %321
  %add221 = add i32 %add220, %conv204
  store i32 %add221, i32* %arrayinit.element, align 4, !tbaa !73
  %arrayinit.element222 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 2
  store i32 6, i32* %arrayinit.element222, align 4, !tbaa !73
  %arrayinit.element223 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 3
  store i32 8, i32* %arrayinit.element223, align 4, !tbaa !73
  %arrayinit.element224 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 4
  %idxprom225 = sext i32 %type_code to i64
  %arrayidx226 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE, i64 0, i64 %idxprom225
  %326 = load i8, i8* %arrayidx226, align 1, !tbaa !14
  %conv227 = zext i8 %326 to i32
  store i32 %conv227, i32* %arrayinit.element224, align 4, !tbaa !73
  %arrayinit.element228 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 5
  store i32 1, i32* %arrayinit.element228, align 4, !tbaa !73
  %arrayinit.element229 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 6
  store i32 5, i32* %arrayinit.element229, align 4, !tbaa !73
  %arrayinit.element230 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 7
  store i32 %add214, i32* %arrayinit.element230, align 4, !tbaa !73
  %call.i683 = call i64 @fwrite(i8* nonnull %325, i64 32, i64 1, i8* nonnull %call.i598) #14
  %cmp.i684.not = icmp eq i64 %call.i683, 0
  br i1 %cmp.i684.not, label %cleanup278, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %327 = bitcast [4 x i32]* %extents to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %327) #15
  %arrayinit.begin235 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 0
  %328 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %328, i32* %arrayinit.begin235, align 4, !tbaa !73
  %arrayinit.element238 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 1
  %329 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %329, i32* %arrayinit.element238, align 4, !tbaa !73
  %arrayinit.element241 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 2
  %330 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %330, i32* %arrayinit.element241, align 4, !tbaa !73
  %arrayinit.element244 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 3
  %331 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %331, i32* %arrayinit.element244, align 4, !tbaa !73
  %conv248 = sext i32 %mul216 to i64
  %call.i672 = call i64 @fwrite(i8* nonnull %327, i64 %conv248, i64 1, i8* nonnull %call.i598) #14
  %cmp.i673.not = icmp eq i64 %call.i672, 0
  br i1 %cmp.i673.not, label %cleanup274, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %332 = bitcast [2 x i32]* %name_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %332) #15
  %arrayinit.begin252 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 0
  store i32 1, i32* %arrayinit.begin252, align 4, !tbaa !73
  %arrayinit.element253 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 1
  store i32 %conv184, i32* %arrayinit.element253, align 4, !tbaa !73
  %call.i660 = call i64 @fwrite(i8* nonnull %332, i64 8, i64 1, i8* nonnull %call.i598) #14
  %cmp.i661.not = icmp eq i64 %call.i660, 0
  br i1 %cmp.i661.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %conv258 = zext i32 %and to i64
  %call.i648 = call i64 @fwrite(i8* nonnull %62, i64 %conv258, i64 1, i8* nonnull %call.i598) #14
  %cmp.i649.not = icmp eq i64 %call.i648, 0
  br i1 %cmp.i649.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652
  %333 = bitcast [2 x i32]* %payload_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %333) #15
  %arrayinit.begin262 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 0
  %arrayidx264 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE, i64 0, i64 %idxprom225
  %334 = load i8, i8* %arrayidx264, align 1, !tbaa !14
  %conv265 = zext i8 %334 to i32
  store i32 %conv265, i32* %arrayinit.begin262, align 4, !tbaa !73
  %arrayinit.element266 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 1
  store i32 %321, i32* %arrayinit.element266, align 4, !tbaa !73
  %call.i638 = call i64 @fwrite(i8* nonnull %333, i64 8, i64 1, i8* nonnull %call.i598) #14
  %cmp.i639.not = icmp eq i64 %call.i638, 0
  %cleanup.dest.slot.5 = zext i1 %cmp.i639.not to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %333) #15
  br label %cleanup273

cleanup273:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %cleanup.dest.slot.6 = phi i32 [ %cleanup.dest.slot.5, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  %retval.6 = phi i32 [ -11, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ -9, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ -10, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %332) #15
  br label %cleanup274

cleanup274:                                       ; preds = %cleanup273, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %cleanup.dest.slot.7 = phi i32 [ %cleanup.dest.slot.6, %cleanup273 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  %retval.7 = phi i32 [ %retval.6, %cleanup273 ], [ -8, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %327) #15
  br label %cleanup278

cleanup278:                                       ; preds = %cleanup274, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %cleanup.dest.slot.8 = phi i32 [ %cleanup.dest.slot.7, %cleanup274 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  %retval.8 = phi i32 [ %retval.7, %cleanup274 ], [ -7, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %325) #15
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #15
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #15
  %cond442 = icmp eq i32 %cleanup.dest.slot.8, 0
  br i1 %cond442, label %if.end311, label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631: ; preds = %if.else164
  %335 = bitcast [5 x i32]* %header289 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %335) #15
  %arrayinit.begin290 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 0
  %336 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %336, i32* %arrayinit.begin290, align 4, !tbaa !73
  %arrayinit.element293 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 1
  %337 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %337, i32* %arrayinit.element293, align 4, !tbaa !73
  %arrayinit.element296 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 2
  %338 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %338, i32* %arrayinit.element296, align 4, !tbaa !73
  %arrayinit.element299 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 3
  %339 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %339, i32* %arrayinit.element299, align 4, !tbaa !73
  %arrayinit.element302 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 4
  store i32 %type_code, i32* %arrayinit.element302, align 4, !tbaa !73
  %call.i627 = call i64 @fwrite(i8* nonnull %335, i64 20, i64 1, i8* nonnull %call.i598) #14
  %cmp.i628.not = icmp eq i64 %call.i627, 0
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %335) #15
  br i1 %cmp.i628.not, label %cleanup433, label %if.end311

if.end311:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup154.thread
  %final_padding_bytes.0 = phi i32 [ %conv204, %cleanup278 ], [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ 0, %cleanup154.thread ]
  %340 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %340) #15
  %div = udiv i32 4096, %div.i
  %341 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %cmp320856 = icmp sgt i32 %341, 0
  br i1 %cmp320856, label %for.body322.lr.ph, label %if.end412

for.body322.lr.ph:                                ; preds = %if.end311
  %342 = load i32, i32* %min.i.3, align 4, !tbaa !181
  %343 = bitcast [4 x i32]* %idx to i8*
  %arrayinit.begin357 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 0
  %arrayinit.element358 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 1
  %arrayinit.element359 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 2
  %arrayinit.element360 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 3
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %conv368 = zext i32 %div.i to i64
  %mul373 = mul nuw nsw i32 %div, %div.i
  %conv374 = zext i32 %mul373 to i64
  %.pre891 = load i32, i32* %min.i.2, align 4, !tbaa !181
  %.pre892 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  br label %for.body322

for.body322:                                      ; preds = %for.inc399, %for.body322.lr.ph
  %344 = phi i32 [ %342, %for.body322.lr.ph ], [ %430, %for.inc399 ]
  %345 = phi i32 [ %341, %for.body322.lr.ph ], [ %431, %for.inc399 ]
  %346 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %432, %for.inc399 ]
  %347 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %433, %for.inc399 ]
  %348 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %434, %for.inc399 ]
  %349 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %435, %for.inc399 ]
  %dim3.0858 = phi i32 [ %342, %for.body322.lr.ph ], [ %inc400, %for.inc399 ]
  %counter.0857 = phi i32 [ 0, %for.body322.lr.ph ], [ %counter.1.lcssa, %for.inc399 ]
  %cmp331848 = icmp sgt i32 %348, 0
  br i1 %cmp331848, label %for.body333.preheader, label %for.inc399

for.body333.preheader:                            ; preds = %for.body322
  %.pre893 = load i32, i32* %min.i.1, align 4, !tbaa !181
  %.pre894 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  br label %for.body333

for.body333:                                      ; preds = %for.inc394, %for.body333.preheader
  %350 = phi i32 [ %424, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %351 = phi i32 [ %425, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %352 = phi i32 [ %426, %for.inc394 ], [ %346, %for.body333.preheader ]
  %353 = phi i32 [ %427, %for.inc394 ], [ %347, %for.body333.preheader ]
  %354 = phi i32 [ %428, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %355 = phi i32 [ %429, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %dim2.0850 = phi i32 [ %inc395, %for.inc394 ], [ %349, %for.body333.preheader ]
  %counter.1849 = phi i32 [ %counter.2.lcssa, %for.inc394 ], [ %counter.0857, %for.body333.preheader ]
  %cmp342839 = icmp sgt i32 %354, 0
  br i1 %cmp342839, label %for.body344.preheader, label %for.inc394

for.body344.preheader:                            ; preds = %for.body333
  %.pre = load i32, i32* %extent.i, align 4, !tbaa !178
  br label %for.body344

for.body344:                                      ; preds = %for.body344.preheader, %for.inc389
  %356 = phi i32 [ %421, %for.inc389 ], [ %350, %for.body344.preheader ]
  %357 = phi i32 [ %422, %for.inc389 ], [ %351, %for.body344.preheader ]
  %358 = phi i32 [ %423, %for.inc389 ], [ %.pre, %for.body344.preheader ]
  %dim1.0841 = phi i32 [ %inc390, %for.inc389 ], [ %355, %for.body344.preheader ]
  %counter.2840 = phi i32 [ %counter.6797, %for.inc389 ], [ %counter.1849, %for.body344.preheader ]
  %cmp353834 = icmp sgt i32 %358, 0
  br i1 %cmp353834, label %for.body355.preheader, label %for.inc389

for.body355.preheader:                            ; preds = %for.body344
  %359 = load i32, i32* %min.i, align 4, !tbaa !181
  br label %for.body355

for.body355:                                      ; preds = %for.inc384, %for.body355.preheader
  %dim0.0836 = phi i32 [ %inc385, %for.inc384 ], [ %359, %for.body355.preheader ]
  %counter.3835 = phi i32 [ %counter.4, %for.inc384 ], [ %counter.2840, %for.body355.preheader ]
  %inc356 = add nsw i32 %counter.3835, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %343) #15
  store i32 %dim0.0836, i32* %arrayinit.begin357, align 4, !tbaa !73
  store i32 %dim1.0841, i32* %arrayinit.element358, align 4, !tbaa !73
  store i32 %dim2.0850, i32* %arrayinit.element359, align 4, !tbaa !73
  store i32 %dim3.0858, i32* %arrayinit.element360, align 4, !tbaa !73
  %360 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17.i = icmp sgt i32 %360, 0
  br i1 %cmp17.i, label %for.body.lr.ph.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit

for.body.lr.ph.i:                                 ; preds = %for.body355
  %361 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %wide.trip.count.i = zext i32 %360 to i64
  %stride.i621920 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 2
  %362 = load i32, i32* %stride.i621920, align 4, !tbaa !182
  %conv.i622921 = sext i32 %362 to i64
  %min.i623922 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 0
  %363 = load i32, i32* %min.i623922, align 4, !tbaa !181
  %sub.i923 = sub nsw i32 %dim0.0836, %363
  %conv7.i924 = sext i32 %sub.i923 to i64
  %mul.i925 = mul nsw i64 %conv7.i924, %conv.i622921
  %exitcond.not.i927 = icmp eq i32 %360, 1
  br i1 %exitcond.not.i927, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.preheader, !llvm.loop !220

for.body.i.for.body.i_crit_edge.preheader:        ; preds = %for.body.lr.ph.i
  %stride.i62126 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 2
  %364 = load i32, i32* %stride.i62126, align 4, !tbaa !182
  %conv.i62227 = sext i32 %364 to i64
  %min.i62328 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 0
  %365 = load i32, i32* %min.i62328, align 4, !tbaa !181
  %sub.i29 = sub nsw i32 %dim1.0841, %365
  %conv7.i30 = sext i32 %sub.i29 to i64
  %mul.i31 = mul nsw i64 %conv7.i30, %conv.i62227
  %add.i62432 = add nsw i64 %mul.i31, %mul.i925
  %exitcond.not.i33 = icmp eq i32 %360, 2
  br i1 %exitcond.not.i33, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph, !llvm.loop !220

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph: ; preds = %for.body.i.for.body.i_crit_edge.preheader
  %366 = add nsw i64 %wide.trip.count.i, -2
  %min.iters.check169 = icmp ult i64 %366, 17
  br i1 %min.iters.check169, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, label %vector.ph170

vector.ph170:                                     ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %n.mod.vf171 = and i64 %366, 15
  %367 = icmp eq i64 %n.mod.vf171, 0
  %368 = select i1 %367, i64 16, i64 %n.mod.vf171
  %n.vec172 = sub nsw i64 %366, %368
  %ind.end176 = add nsw i64 %n.vec172, 2
  %369 = insertelement <4 x i64> <i64 poison, i64 0, i64 0, i64 0>, i64 %add.i62432, i32 0
  br label %vector.body168

vector.body168:                                   ; preds = %vector.body168, %vector.ph170
  %index173 = phi i64 [ 0, %vector.ph170 ], [ %index.next174, %vector.body168 ]
  %vec.phi179 = phi <4 x i64> [ %369, %vector.ph170 ], [ %409, %vector.body168 ]
  %vec.phi180 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %410, %vector.body168 ]
  %vec.phi181 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %411, %vector.body168 ]
  %vec.phi182 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %412, %vector.body168 ]
  %offset.idx178 = or i64 %index173, 2
  %370 = or i64 %index173, 6
  %371 = or i64 %index173, 10
  %372 = or i64 %index173, 14
  %373 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %offset.idx178
  %374 = bitcast i32* %373 to <4 x i32>*
  %wide.load183 = load <4 x i32>, <4 x i32>* %374, align 4, !tbaa !73
  %375 = getelementptr inbounds i32, i32* %373, i64 4
  %376 = bitcast i32* %375 to <4 x i32>*
  %wide.load184 = load <4 x i32>, <4 x i32>* %376, align 4, !tbaa !73
  %377 = getelementptr inbounds i32, i32* %373, i64 8
  %378 = bitcast i32* %377 to <4 x i32>*
  %wide.load185 = load <4 x i32>, <4 x i32>* %378, align 4, !tbaa !73
  %379 = getelementptr inbounds i32, i32* %373, i64 12
  %380 = bitcast i32* %379 to <4 x i32>*
  %wide.load186 = load <4 x i32>, <4 x i32>* %380, align 4, !tbaa !73
  %381 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %offset.idx178, i32 2
  %382 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %370, i32 2
  %383 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %371, i32 2
  %384 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %372, i32 2
  %385 = getelementptr inbounds i32, i32* %381, i64 -2
  %386 = bitcast i32* %385 to <16 x i32>*
  %387 = getelementptr inbounds i32, i32* %382, i64 -2
  %388 = bitcast i32* %387 to <16 x i32>*
  %389 = getelementptr inbounds i32, i32* %383, i64 -2
  %390 = bitcast i32* %389 to <16 x i32>*
  %391 = getelementptr inbounds i32, i32* %384, i64 -2
  %392 = bitcast i32* %391 to <16 x i32>*
  %wide.vec187 = load <16 x i32>, <16 x i32>* %386, align 4, !tbaa !73
  %wide.vec188 = load <16 x i32>, <16 x i32>* %388, align 4, !tbaa !73
  %wide.vec189 = load <16 x i32>, <16 x i32>* %390, align 4, !tbaa !73
  %wide.vec190 = load <16 x i32>, <16 x i32>* %392, align 4, !tbaa !73
  %strided.vec191 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec192 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec193 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec194 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec195 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec196 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec197 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec198 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %393 = sext <4 x i32> %strided.vec195 to <4 x i64>
  %394 = sext <4 x i32> %strided.vec196 to <4 x i64>
  %395 = sext <4 x i32> %strided.vec197 to <4 x i64>
  %396 = sext <4 x i32> %strided.vec198 to <4 x i64>
  %397 = sub nsw <4 x i32> %wide.load183, %strided.vec191
  %398 = sub nsw <4 x i32> %wide.load184, %strided.vec192
  %399 = sub nsw <4 x i32> %wide.load185, %strided.vec193
  %400 = sub nsw <4 x i32> %wide.load186, %strided.vec194
  %401 = sext <4 x i32> %397 to <4 x i64>
  %402 = sext <4 x i32> %398 to <4 x i64>
  %403 = sext <4 x i32> %399 to <4 x i64>
  %404 = sext <4 x i32> %400 to <4 x i64>
  %405 = mul nsw <4 x i64> %401, %393
  %406 = mul nsw <4 x i64> %402, %394
  %407 = mul nsw <4 x i64> %403, %395
  %408 = mul nsw <4 x i64> %404, %396
  %409 = add <4 x i64> %405, %vec.phi179
  %410 = add <4 x i64> %406, %vec.phi180
  %411 = add <4 x i64> %407, %vec.phi181
  %412 = add <4 x i64> %408, %vec.phi182
  %index.next174 = add i64 %index173, 16
  %413 = icmp eq i64 %index.next174, %n.vec172
  br i1 %413, label %middle.block166, label %vector.body168, !llvm.loop !221

middle.block166:                                  ; preds = %vector.body168
  %bin.rdx199 = add <4 x i64> %410, %409
  %bin.rdx200 = add <4 x i64> %411, %bin.rdx199
  %bin.rdx201 = add <4 x i64> %412, %bin.rdx200
  %414 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx201)
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader: ; preds = %middle.block166, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %indvars.iv.next.i35.ph = phi i64 [ 2, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %ind.end176, %middle.block166 ]
  %add.i62434.ph = phi i64 [ %add.i62432, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %414, %middle.block166 ]
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge: ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge
  %indvars.iv.next.i35 = phi i64 [ %indvars.iv.next.i, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %indvars.iv.next.i35.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %add.i62434 = phi i64 [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %add.i62434.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %arrayidx3.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %indvars.iv.next.i35
  %.pre895.pre = load i32, i32* %arrayidx3.i.phi.trans.insert.phi.trans.insert, align 4, !tbaa !73
  %stride.i621 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 2
  %415 = load i32, i32* %stride.i621, align 4, !tbaa !182
  %conv.i622 = sext i32 %415 to i64
  %min.i623 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 0
  %416 = load i32, i32* %min.i623, align 4, !tbaa !181
  %sub.i = sub nsw i32 %.pre895.pre, %416
  %conv7.i = sext i32 %sub.i to i64
  %mul.i = mul nsw i64 %conv7.i, %conv.i622
  %add.i624 = add nsw i64 %mul.i, %add.i62434
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i35, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, !llvm.loop !222

_ZNK15halide_buffer_t10address_ofEPKi.exit:       ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, %for.body.i.for.body.i_crit_edge.preheader, %for.body.lr.ph.i, %for.body355
  %index.0.lcssa.i = phi i64 [ 0, %for.body355 ], [ %mul.i925, %for.body.lr.ph.i ], [ %add.i62432, %for.body.i.for.body.i_crit_edge.preheader ], [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ]
  %417 = load i8*, i8** %host.i, align 8, !tbaa !172
  %418 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %418 to i64
  %add.i.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i.i, 3
  %mul9.i = mul nsw i64 %div.i.i, %index.0.lcssa.i
  %add.ptr.i = getelementptr inbounds i8, i8* %417, i64 %mul9.i
  %mul366 = mul nsw i32 %counter.3835, %div.i
  %idx.ext = sext i32 %mul366 to i64
  %add.ptr367 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 %idx.ext
  %call369 = call i8* @memcpy(i8* nonnull %add.ptr367, i8* %add.ptr.i, i64 %conv368) #14
  %cmp370 = icmp eq i32 %inc356, %div
  br i1 %cmp370, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, label %for.inc384

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619: ; preds = %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %call.i615 = call i64 @fwrite(i8* nonnull %340, i64 %conv374, i64 1, i8* nonnull %call.i598) #14
  %cmp.i616.not = icmp eq i64 %call.i615, 0
  br i1 %cmp.i616.not, label %cleanup425.loopexit, label %for.inc384

for.inc384:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %counter.4 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619 ], [ %inc356, %_ZNK15halide_buffer_t10address_ofEPKi.exit ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #15
  %inc385 = add nsw i32 %dim0.0836, 1
  %419 = load i32, i32* %extent.i, align 4, !tbaa !178
  %420 = load i32, i32* %min.i, align 4, !tbaa !181
  %add352 = add nsw i32 %420, %419
  %cmp353 = icmp slt i32 %inc385, %add352
  br i1 %cmp353, label %for.body355, label %for.inc389.loopexit, !llvm.loop !223

for.inc389.loopexit:                              ; preds = %for.inc384
  %.pre15 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %.pre16 = load i32, i32* %min.i.1, align 4, !tbaa !181
  br label %for.inc389

for.inc389:                                       ; preds = %for.inc389.loopexit, %for.body344
  %421 = phi i32 [ %356, %for.body344 ], [ %.pre16, %for.inc389.loopexit ]
  %422 = phi i32 [ %357, %for.body344 ], [ %.pre15, %for.inc389.loopexit ]
  %423 = phi i32 [ %358, %for.body344 ], [ %419, %for.inc389.loopexit ]
  %counter.6797 = phi i32 [ %counter.2840, %for.body344 ], [ %counter.4, %for.inc389.loopexit ]
  %inc390 = add nsw i32 %dim1.0841, 1
  %add341 = add nsw i32 %421, %422
  %cmp342 = icmp slt i32 %inc390, %add341
  br i1 %cmp342, label %for.body344, label %for.inc394.loopexit, !llvm.loop !224

for.inc394.loopexit:                              ; preds = %for.inc389
  %.pre896 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %.pre897 = load i32, i32* %min.i.2, align 4, !tbaa !181
  br label %for.inc394

for.inc394:                                       ; preds = %for.inc394.loopexit, %for.body333
  %424 = phi i32 [ %350, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %425 = phi i32 [ %351, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %426 = phi i32 [ %352, %for.body333 ], [ %.pre897, %for.inc394.loopexit ]
  %427 = phi i32 [ %353, %for.body333 ], [ %.pre896, %for.inc394.loopexit ]
  %428 = phi i32 [ %354, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %429 = phi i32 [ %355, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %counter.2.lcssa = phi i32 [ %counter.1849, %for.body333 ], [ %counter.6797, %for.inc394.loopexit ]
  %inc395 = add nsw i32 %dim2.0850, 1
  %add330 = add nsw i32 %427, %426
  %cmp331 = icmp slt i32 %inc395, %add330
  br i1 %cmp331, label %for.body333, label %for.inc399.loopexit, !llvm.loop !225

for.inc399.loopexit:                              ; preds = %for.inc394
  %.pre898 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %.pre899 = load i32, i32* %min.i.3, align 4, !tbaa !181
  br label %for.inc399

for.inc399:                                       ; preds = %for.inc399.loopexit, %for.body322
  %430 = phi i32 [ %344, %for.body322 ], [ %.pre899, %for.inc399.loopexit ]
  %431 = phi i32 [ %345, %for.body322 ], [ %.pre898, %for.inc399.loopexit ]
  %432 = phi i32 [ %346, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %433 = phi i32 [ %347, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %434 = phi i32 [ %348, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %435 = phi i32 [ %349, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %counter.1.lcssa = phi i32 [ %counter.0857, %for.body322 ], [ %counter.2.lcssa, %for.inc399.loopexit ]
  %inc400 = add nsw i32 %dim3.0858, 1
  %add319 = add nsw i32 %431, %430
  %cmp320 = icmp slt i32 %inc400, %add319
  br i1 %cmp320, label %for.body322, label %for.end403, !llvm.loop !226

for.end403:                                       ; preds = %for.inc399
  %cmp404 = icmp sgt i32 %counter.1.lcssa, 0
  br i1 %cmp404, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, label %if.end412

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612: ; preds = %for.end403
  %mul407 = mul nsw i32 %counter.1.lcssa, %div.i
  %conv408 = sext i32 %mul407 to i64
  %call.i608 = call i64 @fwrite(i8* nonnull %340, i64 %conv408, i64 1, i8* nonnull %call.i598) #14
  %cmp.i609.not = icmp eq i64 %call.i608, 0
  br i1 %cmp.i609.not, label %cleanup425, label %if.end412

if.end412:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, %for.end403, %if.end311
  %436 = bitcast i64* %zero to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %436) #15
  store i64 0, i64* %zero, align 8, !tbaa !110
  %tobool413.not = icmp eq i32 %final_padding_bytes.0, 0
  br i1 %tobool413.not, label %if.end423, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit: ; preds = %if.end412
  %conv415 = zext i32 %final_padding_bytes.0 to i64
  %call.i604 = call i64 @fwrite(i8* nonnull %436, i64 %conv415, i64 1, i8* nonnull %call.i598) #14
  %cmp.i605.not = icmp eq i64 %call.i604, 0
  br i1 %cmp.i605.not, label %cleanup424, label %if.end423

if.end423:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit, %if.end412
  br label %cleanup424

cleanup424:                                       ; preds = %if.end423, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit
  %retval.21 = phi i32 [ 0, %if.end423 ], [ -16, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %436) #15
  br label %cleanup425

cleanup425.loopexit:                              ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #15
  br label %cleanup425

cleanup425:                                       ; preds = %cleanup425.loopexit, %cleanup424, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612
  %retval.22 = phi i32 [ %retval.21, %cleanup424 ], [ -14, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612 ], [ -13, %cleanup425.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %340) #15
  br label %cleanup433

cleanup433:                                       ; preds = %cleanup425, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup278.thread, %cleanup154
  %retval.23 = phi i32 [ %retval.22, %cleanup425 ], [ %retval.4, %cleanup154 ], [ %retval.8, %cleanup278 ], [ -12, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ -6, %cleanup278.thread ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #15
  %call.i = call i32 @fclose(i8* nonnull %call.i598) #14
  br label %return

return:                                           ; preds = %cleanup433, %if.end6, %if.end2, %if.then1, %if.then
  %retval.26 = phi i32 [ -1, %if.then ], [ -1, %if.then1 ], [ %call3, %if.end2 ], [ %retval.23, %cleanup433 ], [ -2, %if.end6 ]
  ret i32 %retval.26

for.body.1:                                       ; preds = %for.body.lr.ph
  %arrayidx.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 1
  %arrayidx14.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1
  %437 = bitcast %struct.halide_dimension_t* %arrayidx14.1 to i8*
  %438 = bitcast %struct.halide_dimension_t* %arrayidx.1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %437, i8* nonnull align 4 dereferenceable(16) %438, i64 16, i1 false), !tbaa.struct !177
  %extent.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %439 = load i32, i32* %extent.1, align 4, !tbaa !178
  %conv903.1 = zext i32 %439 to i64
  %mul.1 = mul nuw i64 %conv903, %conv903.1
  %exitcond.not17.1 = icmp eq i64 %11, 2
  br i1 %exitcond.not17.1, label %for.cond19.preheader, label %for.body.2, !llvm.loop !180

for.body.2:                                       ; preds = %for.body.1
  %arrayidx.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 2
  %arrayidx14.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2
  %440 = bitcast %struct.halide_dimension_t* %arrayidx14.2 to i8*
  %441 = bitcast %struct.halide_dimension_t* %arrayidx.2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %440, i8* nonnull align 4 dereferenceable(16) %441, i64 16, i1 false), !tbaa.struct !177
  %extent.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %442 = load i32, i32* %extent.2, align 4, !tbaa !178
  %conv903.2 = zext i32 %442 to i64
  %mul.2 = mul i64 %mul.1, %conv903.2
  %exitcond.not17.2 = icmp eq i64 %11, 3
  br i1 %exitcond.not17.2, label %for.cond19.preheader, label %for.body.3, !llvm.loop !180

for.body.3:                                       ; preds = %for.body.2
  %arrayidx.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 3
  %arrayidx14.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3
  %443 = bitcast %struct.halide_dimension_t* %arrayidx14.3 to i8*
  %444 = bitcast %struct.halide_dimension_t* %arrayidx.3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %443, i8* nonnull align 4 dereferenceable(16) %444, i64 16, i1 false), !tbaa.struct !177
  %extent.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %445 = load i32, i32* %extent.3, align 4, !tbaa !178
  %conv903.3 = zext i32 %445 to i64
  %mul.3 = mul i64 %mul.2, %conv903.3
  br label %for.cond19.preheader
}

declare i64 @fwrite(i8*, i64, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_cache_cleanup() #0 {
entry:
  tail call void @halide_memoization_cache_cleanup() #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_memoization_cache_cleanup() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %while.end
  store i64 0, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  ret void

for.body:                                         ; preds = %while.end, %entry
  %__begin1.018 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %while.end ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  %cmp2.not16 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not16, label %while.end, label %while.body

while.body:                                       ; preds = %for.body, %while.body
  %entry1.017 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %while.body ], [ %0, %for.body ]
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next3, align 8, !tbaa !227
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.017) #16
  %2 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %2) #14
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp2.not, label %while.end, label %while.body, !llvm.loop !229

while.end:                                        ; preds = %while.body, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this) local_unnamed_addr #0 align 2 {
entry:
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  %0 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp11.not = icmp eq i32 %0, 0
  br i1 %cmp11.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  %1 = load i8*, i8** %metadata_storage, align 8, !tbaa !231
  tail call void @halide_free(i8* null, i8* %1) #14
  ret void

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %2, i64 %indvars.iv
  %call = tail call i32 @halide_device_free(i8* null, %struct.halide_buffer_t* %arrayidx) #14
  %3 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %3, i64 %indvars.iv, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %4) #16
  %5 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call6 to i8*
  tail call void @halide_free(i8* null, i8* %5) #14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %6 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %7 = zext i32 %6 to i64
  %cmp = icmp ult i64 %indvars.iv.next, %7
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !233
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) local_unnamed_addr #2 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %host, i64 -64
  %0 = bitcast i8* %add.ptr to %"struct.Halide::Runtime::Internal::CacheBlockHeader"*
  ret %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %0
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp41 = icmp sgt i32 %d, -1
  br i1 %cmp41, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.042 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %idxprom36 = zext i32 %d.addr.042 to i64
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom36
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.042, -1
  %cmp = icmp sgt i32 %d.addr.042, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !234

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.042, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %idxprom5 = sext i32 %d.addr.0.lcssa to i64
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom5
  %1 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp737.not = icmp eq i64 %1, 0
  br i1 %cmp737.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 4, i64 %idxprom5
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 5, i64 %idxprom5
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !235
  %add = add i64 %2, %src_off
  %3 = inttoptr i64 %add to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !237
  %add3 = add i64 %4, %dst_off
  %5 = inttoptr i64 %add3 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !238
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i64 %6) #14
  br label %if.end

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.040 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %src_off.addr.039 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body ]
  %dst_off.addr.038 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add13, %for.body ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.039, i64 %dst_off.addr.038) #16
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !110
  %add10 = add i64 %7, %src_off.addr.039
  %8 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %add13 = add i64 %8, %dst_off.addr.038
  %inc = add nuw i64 %i.040, 1
  %9 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp7 = icmp ult i64 %inc, %9
  br i1 %cmp7, label %for.body, label %if.end, !llvm.loop !239

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !235
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !237
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !240
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #15
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %2 = ptrtoint i8* %1 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %3 = load i64, i64* %device, align 8, !tbaa !174
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !235
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %4 = load i8*, i8** %host5, align 8, !tbaa !172
  %5 = ptrtoint i8* %4 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %6 = load i64, i64* %device7, align 8, !tbaa !174
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %5, %cond.true4 ], [ %6, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !237
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 4, i32 1
  %7 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %7 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !238
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 0
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 0
  %arrayidx14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 0
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 1
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 1
  %arrayidx14.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 1
  %8 = bitcast i64* %arrayidx to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %8, align 8, !tbaa !110
  %9 = bitcast i64* %arrayidx12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %9, align 8, !tbaa !110
  %10 = bitcast i64* %arrayidx14 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %10, align 8, !tbaa !110
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 4
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 4
  %arrayidx14.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 4
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 5
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 5
  %arrayidx14.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 5
  %11 = bitcast i64* %arrayidx.4 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %11, align 8, !tbaa !110
  %12 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %12, align 8, !tbaa !110
  %13 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 8
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 8
  %arrayidx14.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 8
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 9
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 9
  %arrayidx14.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 9
  %14 = bitcast i64* %arrayidx.8 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %14, align 8, !tbaa !110
  %15 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %15, align 8, !tbaa !110
  %16 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %16, align 8, !tbaa !110
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 12
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 12
  %arrayidx14.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 12
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 13
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 13
  %arrayidx14.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 13
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 14
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 14
  %arrayidx14.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 14
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 15
  %17 = bitcast i64* %arrayidx.12 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %17, align 8, !tbaa !110
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 15
  %18 = bitcast i64* %arrayidx12.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %18, align 8, !tbaa !110
  %arrayidx14.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 15
  %19 = bitcast i64* %arrayidx14.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %19, align 8, !tbaa !110
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %20 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17272 = icmp sgt i32 %20, 0
  br i1 %cmp17272, label %for.body19.lr.ph, label %for.cond.cleanup18

for.body19.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %21 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %dim23 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim23, align 8, !tbaa !176
  %wide.trip.count = zext i32 %20 to i64
  %min.iters.check = icmp ult i32 %20, 17
  br i1 %min.iters.check, label %for.body19.preheader, label %vector.ph

for.body19.preheader:                             ; preds = %middle.block, %for.body19.lr.ph
  %indvars.iv284.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %n.vec, %middle.block ]
  %.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %73, %middle.block ]
  br label %for.body19

vector.ph:                                        ; preds = %for.body19.lr.ph
  %n.mod.vf = and i64 %wide.trip.count, 15
  %23 = icmp eq i64 %n.mod.vf, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count, %24
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %68, %vector.body ]
  %vec.phi2 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %69, %vector.body ]
  %vec.phi3 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %70, %vector.body ]
  %vec.phi4 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %71, %vector.body ]
  %25 = or i64 %index, 4
  %26 = or i64 %index, 8
  %27 = or i64 %index, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %index, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %27, i32 2
  %32 = getelementptr inbounds i32, i32* %28, i64 -2
  %33 = bitcast i32* %32 to <16 x i32>*
  %34 = getelementptr inbounds i32, i32* %29, i64 -2
  %35 = bitcast i32* %34 to <16 x i32>*
  %36 = getelementptr inbounds i32, i32* %30, i64 -2
  %37 = bitcast i32* %36 to <16 x i32>*
  %38 = getelementptr inbounds i32, i32* %31, i64 -2
  %39 = bitcast i32* %38 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !73
  %wide.vec5 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !73
  %wide.vec6 = load <16 x i32>, <16 x i32>* %37, align 4, !tbaa !73
  %wide.vec7 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !73
  %strided.vec11 = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec5, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec6, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec7, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %40 = sext <4 x i32> %strided.vec11 to <4 x i64>
  %41 = sext <4 x i32> %strided.vec12 to <4 x i64>
  %42 = sext <4 x i32> %strided.vec13 to <4 x i64>
  %43 = sext <4 x i32> %strided.vec14 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 0
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 0
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 0
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 0
  %48 = bitcast i32* %44 to <16 x i32>*
  %49 = bitcast i32* %45 to <16 x i32>*
  %50 = bitcast i32* %46 to <16 x i32>*
  %51 = bitcast i32* %47 to <16 x i32>*
  %wide.vec15 = load <16 x i32>, <16 x i32>* %48, align 4, !tbaa !181
  %wide.vec16 = load <16 x i32>, <16 x i32>* %49, align 4, !tbaa !181
  %wide.vec17 = load <16 x i32>, <16 x i32>* %50, align 4, !tbaa !181
  %wide.vec18 = load <16 x i32>, <16 x i32>* %51, align 4, !tbaa !181
  %52 = sub nsw <16 x i32> %wide.vec15, %wide.vec
  %53 = shufflevector <16 x i32> %52, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %54 = sub nsw <16 x i32> %wide.vec16, %wide.vec5
  %55 = shufflevector <16 x i32> %54, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %56 = sub nsw <16 x i32> %wide.vec17, %wide.vec6
  %57 = shufflevector <16 x i32> %56, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %58 = sub nsw <16 x i32> %wide.vec18, %wide.vec7
  %59 = shufflevector <16 x i32> %58, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = sext <4 x i32> %53 to <4 x i64>
  %61 = sext <4 x i32> %55 to <4 x i64>
  %62 = sext <4 x i32> %57 to <4 x i64>
  %63 = sext <4 x i32> %59 to <4 x i64>
  %64 = mul nsw <4 x i64> %60, %40
  %65 = mul nsw <4 x i64> %61, %41
  %66 = mul nsw <4 x i64> %62, %42
  %67 = mul nsw <4 x i64> %63, %43
  %68 = add <4 x i64> %64, %vec.phi
  %69 = add <4 x i64> %65, %vec.phi2
  %70 = add <4 x i64> %66, %vec.phi3
  %71 = add <4 x i64> %67, %vec.phi4
  %index.next = add i64 %index, 16
  %72 = icmp eq i64 %index.next, %n.vec
  br i1 %72, label %middle.block, label %vector.body, !llvm.loop !241

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %69, %68
  %bin.rdx23 = add <4 x i64> %70, %bin.rdx
  %bin.rdx24 = add <4 x i64> %71, %bin.rdx23
  %73 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx24)
  br label %for.body19.preheader

for.cond.cleanup18:                               ; preds = %for.body19, %cond.end8
  %74 = phi i64 [ 0, %cond.end8 ], [ %add, %for.body19 ]
  %mul37 = mul i64 %74, %conv
  store i64 %mul37, i64* %src_begin, align 8, !tbaa !240
  %dimensions39 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %75 = load i32, i32* %dimensions39, align 4, !tbaa !175
  %cmp40.not = icmp eq i32 %20, %75
  br i1 %cmp40.not, label %lor.lhs.false, label %if.then

for.body19:                                       ; preds = %for.body19.preheader, %for.body19
  %indvars.iv284 = phi i64 [ %indvars.iv.next285, %for.body19 ], [ %indvars.iv284.ph, %for.body19.preheader ]
  %76 = phi i64 [ %add, %for.body19 ], [ %.ph, %for.body19.preheader ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 2
  %77 = load i32, i32* %stride, align 4, !tbaa !182
  %conv22 = sext i32 %77 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv284, i32 0
  %78 = load i32, i32* %min, align 4, !tbaa !181
  %min29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 0
  %79 = load i32, i32* %min29, align 4, !tbaa !181
  %sub = sub nsw i32 %78, %79
  %conv30 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv30, %conv22
  %add = add i64 %mul, %76
  %indvars.iv.next285 = add nuw nsw i64 %indvars.iv284, 1
  %exitcond286.not = icmp eq i64 %indvars.iv.next285, %wide.trip.count
  br i1 %exitcond286.not, label %for.cond.cleanup18, label %for.body19, !llvm.loop !242

lor.lhs.false:                                    ; preds = %for.cond.cleanup18
  %bits.i253 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 4, i32 1
  %80 = load i8, i8* %bits.i253, align 1, !tbaa !136
  %conv.i254 = zext i8 %80 to i32
  %add.i255 = add nuw nsw i32 %conv.i254, 7
  %div.i256 = lshr i32 %add.i255, 3
  %cmp45.not = icmp ne i32 %div.i, %div.i256
  %cmp48 = icmp sgt i32 %20, 16
  %or.cond261 = or i1 %cmp48, %cmp45.not
  br i1 %or.cond261, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup18
  %81 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %81, i8 0, i64 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp50 = icmp eq i32 %div.i, 0
  br i1 %cmp50, label %if.then51, label %for.cond54.preheader

for.cond54.preheader:                             ; preds = %if.end
  br i1 %cmp17272, label %for.body58.lr.ph, label %while.end

for.body58.lr.ph:                                 ; preds = %for.cond54.preheader
  %dim60 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %82 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim60, align 8, !tbaa !176
  %dim70 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %83 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim70, align 8, !tbaa !176
  %wide.trip.count282 = zext i32 %20 to i64
  br label %for.body58

if.then51:                                        ; preds = %if.end
  %84 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %84, i8 0, i64 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup94
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !238
  %.pre290 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %cmp139263 = icmp eq i64 %.pre, %.pre290
  br i1 %cmp139263, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre291 = load i64, i64* %arrayidx14, align 8, !tbaa !110
  %85 = bitcast i64* %arrayidx.1 to <4 x i64>*
  %86 = bitcast i64* %arrayidx to <4 x i64>*
  %87 = bitcast i64* %arrayidx12.1 to <4 x i64>*
  %88 = bitcast i64* %arrayidx12 to <4 x i64>*
  %89 = bitcast i64* %arrayidx14.1 to <4 x i64>*
  %90 = bitcast i64* %arrayidx14 to <4 x i64>*
  %91 = bitcast i64* %arrayidx.5 to <4 x i64>*
  %92 = bitcast i64* %arrayidx.4 to <4 x i64>*
  %93 = bitcast i64* %arrayidx12.5 to <4 x i64>*
  %94 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  %95 = bitcast i64* %arrayidx14.5 to <4 x i64>*
  %96 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  %97 = bitcast i64* %arrayidx.9 to <4 x i64>*
  %98 = bitcast i64* %arrayidx.8 to <4 x i64>*
  %99 = bitcast i64* %arrayidx12.9 to <4 x i64>*
  %100 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  %101 = bitcast i64* %arrayidx14.9 to <4 x i64>*
  %102 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  %103 = bitcast i64* %arrayidx.13 to <2 x i64>*
  %104 = bitcast i64* %arrayidx.12 to <2 x i64>*
  %105 = bitcast i64* %arrayidx12.13 to <2 x i64>*
  %106 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  %107 = bitcast i64* %arrayidx14.13 to <2 x i64>*
  %108 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  br label %land.rhs

for.body58:                                       ; preds = %for.cond.cleanup94, %for.body58.lr.ph
  %indvars.iv278 = phi i64 [ 0, %for.body58.lr.ph ], [ %indvars.iv.next279, %for.cond.cleanup94 ]
  %stride63 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 2
  %109 = load i32, i32* %stride63, align 4, !tbaa !182
  %conv64 = sext i32 %109 to i64
  %mul68 = mul nsw i64 %conv64, %conv
  %stride73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %83, i64 %indvars.iv278, i32 2
  %110 = load i32, i32* %stride73, align 4, !tbaa !182
  %conv74 = sext i32 %110 to i64
  %mul78 = mul nsw i64 %conv74, %conv
  %cmp80264.not = icmp eq i64 %indvars.iv278, 0
  br i1 %cmp80264.not, label %for.end91, label %for.body81.lr.ph

for.body81.lr.ph:                                 ; preds = %for.body58
  %cmp86.not = icmp eq i64 %mul68, 0
  br i1 %cmp86.not, label %for.body81.preheader, label %for.body81.us

for.body81.preheader:                             ; preds = %for.body81.lr.ph
  %111 = trunc i64 %indvars.iv278 to i32
  br label %for.end91

for.body81.us:                                    ; preds = %for.body81.lr.ph, %for.inc89.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc89.us ], [ 0, %for.body81.lr.ph ]
  %arrayidx84.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv
  %112 = load i64, i64* %arrayidx84.us, align 8, !tbaa !110
  %cmp85.us = icmp ult i64 %mul68, %112
  br i1 %cmp85.us, label %for.end91.loopexit, label %for.inc89.us

for.inc89.us:                                     ; preds = %for.body81.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %indvars.iv278
  br i1 %exitcond.not, label %for.end91.loopexit, label %for.body81.us, !llvm.loop !243

for.end91.loopexit:                               ; preds = %for.inc89.us, %for.body81.us
  %insert.0.lcssa.ph.in = phi i64 [ %indvars.iv278, %for.inc89.us ], [ %indvars.iv, %for.body81.us ]
  %insert.0.lcssa.ph = trunc i64 %insert.0.lcssa.ph.in to i32
  br label %for.end91

for.end91:                                        ; preds = %for.end91.loopexit, %for.body81.preheader, %for.body58
  %insert.0.lcssa = phi i32 [ 0, %for.body58 ], [ %insert.0.lcssa.ph, %for.end91.loopexit ], [ %111, %for.body81.preheader ]
  %113 = zext i32 %insert.0.lcssa to i64
  %cmp93267 = icmp ugt i64 %indvars.iv278, %113
  br i1 %cmp93267, label %for.body95.preheader, label %for.cond.cleanup94

for.body95.preheader:                             ; preds = %for.end91
  %114 = sext i32 %insert.0.lcssa to i64
  %115 = sub i64 %indvars.iv278, %114
  %116 = xor i64 %114, -1
  %117 = add i64 %indvars.iv278, %116
  %xtraiter = and i64 %115, 3
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body95.prol.loopexit, label %for.body95.prol

for.body95.prol:                                  ; preds = %for.body95.preheader, %for.body95.prol
  %indvars.iv280.prol = phi i64 [ %indvars.iv.next281.prol, %for.body95.prol ], [ %indvars.iv278, %for.body95.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %for.body95.prol ], [ %xtraiter, %for.body95.preheader ]
  %indvars.iv.next281.prol = add nsw i64 %indvars.iv280.prol, -1
  %arrayidx99.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.prol
  %118 = load i64, i64* %arrayidx99.prol, align 8, !tbaa !110
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280.prol
  store i64 %118, i64* %arrayidx102.prol, align 8, !tbaa !110
  %arrayidx106.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.prol
  %119 = load i64, i64* %arrayidx106.prol, align 8, !tbaa !110
  %arrayidx109.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280.prol
  store i64 %119, i64* %arrayidx109.prol, align 8, !tbaa !110
  %arrayidx113.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.prol
  %120 = load i64, i64* %arrayidx113.prol, align 8, !tbaa !110
  %arrayidx116.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280.prol
  store i64 %120, i64* %arrayidx116.prol, align 8, !tbaa !110
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body95.prol.loopexit, label %for.body95.prol, !llvm.loop !244

for.body95.prol.loopexit:                         ; preds = %for.body95.prol, %for.body95.preheader
  %indvars.iv280.unr = phi i64 [ %indvars.iv278, %for.body95.preheader ], [ %indvars.iv.next281.prol, %for.body95.prol ]
  %121 = icmp ult i64 %117, 3
  br i1 %121, label %for.cond.cleanup94, label %for.body95

for.cond.cleanup94:                               ; preds = %for.body95.prol.loopexit, %for.body95, %for.end91
  %extent122 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 1
  %122 = load i32, i32* %extent122, align 4, !tbaa !178
  %conv123 = sext i32 %122 to i64
  %arrayidx126 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %113
  store i64 %conv123, i64* %arrayidx126, align 8, !tbaa !110
  %arrayidx129 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %113
  store i64 %mul68, i64* %arrayidx129, align 8, !tbaa !110
  %arrayidx132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %113
  store i64 %mul78, i64* %arrayidx132, align 8, !tbaa !110
  %indvars.iv.next279 = add nuw nsw i64 %indvars.iv278, 1
  %exitcond283.not = icmp eq i64 %indvars.iv.next279, %wide.trip.count282
  br i1 %exitcond283.not, label %while.cond.preheader, label %for.body58, !llvm.loop !245

for.body95:                                       ; preds = %for.body95.prol.loopexit, %for.body95
  %indvars.iv280 = phi i64 [ %indvars.iv.next281.3, %for.body95 ], [ %indvars.iv280.unr, %for.body95.prol.loopexit ]
  %indvars.iv.next281 = add nsw i64 %indvars.iv280, -1
  %arrayidx99 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  %123 = load i64, i64* %arrayidx99, align 8, !tbaa !110
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280
  store i64 %123, i64* %arrayidx102, align 8, !tbaa !110
  %arrayidx106 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  %124 = load i64, i64* %arrayidx106, align 8, !tbaa !110
  %arrayidx109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280
  store i64 %124, i64* %arrayidx109, align 8, !tbaa !110
  %arrayidx113 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  %125 = load i64, i64* %arrayidx113, align 8, !tbaa !110
  %arrayidx116 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280
  store i64 %125, i64* %arrayidx116, align 8, !tbaa !110
  %indvars.iv.next281.1 = add nsw i64 %indvars.iv280, -2
  %arrayidx99.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  %126 = load i64, i64* %arrayidx99.1, align 8, !tbaa !110
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  store i64 %126, i64* %arrayidx102.1, align 8, !tbaa !110
  %arrayidx106.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  %127 = load i64, i64* %arrayidx106.1, align 8, !tbaa !110
  %arrayidx109.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  store i64 %127, i64* %arrayidx109.1, align 8, !tbaa !110
  %arrayidx113.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  %128 = load i64, i64* %arrayidx113.1, align 8, !tbaa !110
  %arrayidx116.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  store i64 %128, i64* %arrayidx116.1, align 8, !tbaa !110
  %indvars.iv.next281.2 = add nsw i64 %indvars.iv280, -3
  %arrayidx99.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  %129 = load i64, i64* %arrayidx99.2, align 8, !tbaa !110
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  store i64 %129, i64* %arrayidx102.2, align 8, !tbaa !110
  %arrayidx106.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  %130 = load i64, i64* %arrayidx106.2, align 8, !tbaa !110
  %arrayidx109.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  store i64 %130, i64* %arrayidx109.2, align 8, !tbaa !110
  %arrayidx113.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  %131 = load i64, i64* %arrayidx113.2, align 8, !tbaa !110
  %arrayidx116.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  store i64 %131, i64* %arrayidx116.2, align 8, !tbaa !110
  %indvars.iv.next281.3 = add nsw i64 %indvars.iv280, -4
  %arrayidx99.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.3
  %132 = load i64, i64* %arrayidx99.3, align 8, !tbaa !110
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  store i64 %132, i64* %arrayidx102.3, align 8, !tbaa !110
  %arrayidx106.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.3
  %133 = load i64, i64* %arrayidx106.3, align 8, !tbaa !110
  %arrayidx109.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  store i64 %133, i64* %arrayidx109.3, align 8, !tbaa !110
  %arrayidx113.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.3
  %134 = load i64, i64* %arrayidx113.3, align 8, !tbaa !110
  %arrayidx116.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  store i64 %134, i64* %arrayidx116.3, align 8, !tbaa !110
  %cmp93.3 = icmp sgt i64 %indvars.iv.next281.3, %114
  br i1 %cmp93.3, label %for.body95, label %for.cond.cleanup94, !llvm.loop !246

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %135 = phi i64 [ %.pre291, %land.rhs.lr.ph ], [ %154, %while.body ]
  %136 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul147, %while.body ]
  %cmp143 = icmp eq i64 %136, %135
  br i1 %cmp143, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %137 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %mul147 = mul i64 %137, %135
  store i64 %mul147, i64* %chunk_size, align 8, !tbaa !238
  %138 = load <4 x i64>, <4 x i64>* %85, align 8, !tbaa !110
  store <4 x i64> %138, <4 x i64>* %86, align 8, !tbaa !110
  %139 = load <4 x i64>, <4 x i64>* %87, align 8, !tbaa !110
  store <4 x i64> %139, <4 x i64>* %88, align 8, !tbaa !110
  %140 = load <4 x i64>, <4 x i64>* %89, align 8, !tbaa !110
  store <4 x i64> %140, <4 x i64>* %90, align 8, !tbaa !110
  %141 = load <4 x i64>, <4 x i64>* %91, align 8, !tbaa !110
  store <4 x i64> %141, <4 x i64>* %92, align 8, !tbaa !110
  %142 = load <4 x i64>, <4 x i64>* %93, align 8, !tbaa !110
  store <4 x i64> %142, <4 x i64>* %94, align 8, !tbaa !110
  %143 = load <4 x i64>, <4 x i64>* %95, align 8, !tbaa !110
  store <4 x i64> %143, <4 x i64>* %96, align 8, !tbaa !110
  %144 = load <4 x i64>, <4 x i64>* %97, align 8, !tbaa !110
  store <4 x i64> %144, <4 x i64>* %98, align 8, !tbaa !110
  %145 = load <4 x i64>, <4 x i64>* %99, align 8, !tbaa !110
  store <4 x i64> %145, <4 x i64>* %100, align 8, !tbaa !110
  %146 = load <4 x i64>, <4 x i64>* %101, align 8, !tbaa !110
  store <4 x i64> %146, <4 x i64>* %102, align 8, !tbaa !110
  %147 = load <2 x i64>, <2 x i64>* %103, align 8, !tbaa !110
  store <2 x i64> %147, <2 x i64>* %104, align 8, !tbaa !110
  %148 = load <2 x i64>, <2 x i64>* %105, align 8, !tbaa !110
  store <2 x i64> %148, <2 x i64>* %106, align 8, !tbaa !110
  %149 = load <2 x i64>, <2 x i64>* %107, align 8, !tbaa !110
  store <2 x i64> %149, <2 x i64>* %108, align 8, !tbaa !110
  %150 = load i64, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 %150, i64* %arrayidx.14, align 8, !tbaa !110
  %151 = load i64, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 %151, i64* %arrayidx12.14, align 8, !tbaa !110
  %152 = load i64, i64* %arrayidx14.15, align 8, !tbaa !110
  store i64 %152, i64* %arrayidx14.14, align 8, !tbaa !110
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx14.15, align 8, !tbaa !110
  %153 = extractelement <4 x i64> %139, i32 0
  %cmp139 = icmp eq i64 %mul147, %153
  %154 = extractelement <4 x i64> %140, i32 0
  br i1 %cmp139, label %land.rhs, label %while.end, !llvm.loop !247

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond54.preheader
  %155 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %155, i8* nonnull align 8 dereferenceable(416) %0, i64 416, i1 false), !tbaa.struct !248
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then51, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #15
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %key1, i8* %key2, i64 %key_size) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @memcmp(i8* %key1, i8* %key2, i64 %key_size) #14
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

declare i32 @memcmp(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %buf, %struct.halide_dimension_t* %shape) local_unnamed_addr #0 {
entry:
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %0 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp9 = icmp sgt i32 %0, 0
  br i1 %cmp9, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %2 = zext i32 %0 to i64
  br label %for.body

for.cond:                                         ; preds = %_ZNK18halide_dimension_tneERKS_.exit
  %exitcond.not = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond.not, label %return, label %for.body, !llvm.loop !249

for.body:                                         ; preds = %for.cond, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %min.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 0
  %3 = load i32, i32* %min.i.i, align 4, !tbaa !181
  %min2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %min2.i.i, align 4, !tbaa !181
  %cmp.i.i = icmp eq i32 %3, %4
  br i1 %cmp.i.i, label %land.lhs.true.i.i, label %return

land.lhs.true.i.i:                                ; preds = %for.body
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 1
  %5 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %extent3.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 1
  %6 = load i32, i32* %extent3.i.i, align 4, !tbaa !178
  %cmp4.i.i = icmp eq i32 %5, %6
  br i1 %cmp4.i.i, label %land.lhs.true5.i.i, label %return

land.lhs.true5.i.i:                               ; preds = %land.lhs.true.i.i
  %stride.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 2
  %7 = load i32, i32* %stride.i.i, align 4, !tbaa !182
  %stride6.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 2
  %8 = load i32, i32* %stride6.i.i, align 4, !tbaa !182
  %cmp7.i.i = icmp eq i32 %7, %8
  br i1 %cmp7.i.i, label %_ZNK18halide_dimension_tneERKS_.exit, label %return

_ZNK18halide_dimension_tneERKS_.exit:             ; preds = %land.lhs.true5.i.i
  %flags.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 3
  %9 = load i32, i32* %flags.i.i, align 4, !tbaa !250
  %flags8.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 3
  %10 = load i32, i32* %flags8.i.i, align 4, !tbaa !250
  %cmp9.i.i.not = icmp eq i32 %9, %10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp9.i.i.not, label %for.cond, label %return

return:                                           ; preds = %_ZNK18halide_dimension_tneERKS_.exit, %land.lhs.true5.i.i, %land.lhs.true.i.i, %for.body, %for.cond, %entry
  %cmp.lcssa = phi i1 [ true, %entry ], [ false, %_ZNK18halide_dimension_tneERKS_.exit ], [ true, %for.cond ], [ false, %land.lhs.true5.i.i ], [ false, %land.lhs.true.i.i ], [ false, %for.body ]
  ret i1 %cmp.lcssa
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this, i8* %cache_key, i64 %cache_key_size, i32 %key_hash, %struct.halide_buffer_t* %computed_bounds_buf, i32 %tuples, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key_arg, i64 %eviction_key_arg) local_unnamed_addr #0 align 2 {
entry:
  %frombool = zext i1 %has_eviction_key_arg to i8
  %0 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %this to <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>*
  store <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>* %0, align 8, !tbaa !10
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 4
  store i64 %cache_key_size, i64* %key_size, align 8, !tbaa !252
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 6
  store i32 %key_hash, i32* %hash, align 8, !tbaa !253
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 7
  store i32 0, i32* %in_use_count, align 4, !tbaa !254
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  store i32 %tuples, i32* %tuple_count, align 8, !tbaa !230
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 5
  %1 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 9
  store i32 %1, i32* %dimensions2, align 4, !tbaa !255
  %conv = zext i32 %tuples to i64
  %mul = mul nuw nsw i64 %conv, 56
  %conv5 = sext i32 %1 to i64
  %add8 = add i32 %tuples, 1
  %conv9 = zext i32 %add8 to i64
  %mul6 = shl nuw nsw i64 %conv9, 4
  %mul10 = mul i64 %mul6, %conv5
  %add11 = add i64 %mul10, %mul
  %add13 = add i64 %add11, %cache_key_size
  %call = tail call i8* @halide_malloc(i8* null, i64 %add13) #14
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  store i8* %call, i8** %metadata_storage, align 8, !tbaa !231
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  %2 = bitcast %struct.halide_buffer_t** %buf to i8**
  store i8* %call, i8** %2, align 8, !tbaa !232
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 %mul
  %computed_bounds = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 10
  %3 = bitcast %struct.halide_dimension_t** %computed_bounds to i8**
  store i8* %add.ptr, i8** %3, align 8, !tbaa !256
  %add.ptr18 = getelementptr inbounds i8, i8* %call, i64 %add11
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 5
  store i8* %add.ptr18, i8** %key, align 8, !tbaa !257
  %4 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp117.not = icmp eq i64 %4, 0
  br i1 %cmp117.not, label %for.cond23.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %if.end
  %5 = load i8, i8* %cache_key, align 1, !tbaa !14
  store i8 %5, i8* %add.ptr18, align 1, !tbaa !14
  %cmp130.not = icmp eq i64 %4, 1
  br i1 %cmp130.not, label %for.cond23.preheader, label %for.body.for.body_crit_edge.preheader, !llvm.loop !258

for.body.for.body_crit_edge.preheader:            ; preds = %for.body.preheader
  %arrayidx2 = getelementptr inbounds i8, i8* %cache_key, i64 1
  %6 = load i8, i8* %arrayidx2, align 1, !tbaa !14
  %arrayidx213 = getelementptr inbounds i8, i8* %add.ptr18, i64 1
  store i8 %6, i8* %arrayidx213, align 1, !tbaa !14
  %7 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp4 = icmp ugt i64 %7, 2
  br i1 %cmp4, label %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond23.preheader:                             ; preds = %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, %for.body.for.body_crit_edge.preheader, %for.body.preheader, %if.end
  %8 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp25115 = icmp sgt i32 %8, 0
  br i1 %cmp25115, label %for.body27.lr.ph, label %for.cond36.preheader

for.body27.lr.ph:                                 ; preds = %for.cond23.preheader
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 6
  br label %for.body27

for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge: ; preds = %for.body.for.body_crit_edge.preheader, %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge
  %inc5 = phi i64 [ %inc, %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge ], [ 2, %for.body.for.body_crit_edge.preheader ]
  %.pre.pre = load i8*, i8** %key, align 8, !tbaa !257
  %arrayidx = getelementptr inbounds i8, i8* %cache_key, i64 %inc5
  %9 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %arrayidx21 = getelementptr inbounds i8, i8* %.pre.pre, i64 %inc5
  store i8 %9, i8* %arrayidx21, align 1, !tbaa !14
  %inc = add nuw i64 %inc5, 1
  %10 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp = icmp ult i64 %inc, %10
  br i1 %cmp, label %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond36.preheader:                             ; preds = %for.body27, %for.cond23.preheader
  %11 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp38113.not = icmp eq i32 %11, 0
  br i1 %cmp38113.not, label %for.cond.cleanup39, label %for.body40

for.body27:                                       ; preds = %for.body27, %for.body27.lr.ph
  %indvars.iv121 = phi i64 [ 0, %for.body27.lr.ph ], [ %indvars.iv.next122, %for.body27 ]
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %arrayidx28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 %indvars.iv121
  %13 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %arrayidx31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i64 %indvars.iv121
  %14 = bitcast %struct.halide_dimension_t* %arrayidx31 to i8*
  %15 = bitcast %struct.halide_dimension_t* %arrayidx28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %14, i8* nonnull align 4 dereferenceable(16) %15, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  %16 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %17 = sext i32 %16 to i64
  %cmp25 = icmp slt i64 %indvars.iv.next122, %17
  br i1 %cmp25, label %for.body27, label %for.cond36.preheader, !llvm.loop !259

for.cond36.loopexit:                              ; preds = %for.body59.for.body59_crit_edge, %for.body59.preheader, %for.body40
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %19 = zext i32 %18 to i64
  %cmp38 = icmp ult i64 %indvars.iv.next120, %19
  br i1 %cmp38, label %for.body40, label %for.cond.cleanup39, !llvm.loop !260

for.cond.cleanup39:                               ; preds = %for.cond36.loopexit, %for.cond36.preheader
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 13
  store i8 %frombool, i8* %has_eviction_key, align 8, !tbaa !261
  %eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 12
  store i64 %eviction_key_arg, i64* %eviction_key, align 8, !tbaa !262
  br label %cleanup

for.body40:                                       ; preds = %for.cond36.preheader, %for.cond36.loopexit
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %for.cond36.loopexit ], [ 0, %for.cond36.preheader ]
  %arrayidx42 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv119
  %20 = bitcast %struct.halide_buffer_t** %arrayidx42 to i8**
  %21 = load i8*, i8** %20, align 8, !tbaa !10
  %22 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx45 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %22, i64 %indvars.iv119
  %23 = bitcast %struct.halide_buffer_t* %arrayidx45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %23, i8* nonnull align 8 dereferenceable(56) %21, i64 56, i1 false), !tbaa.struct !263
  %24 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv119, 1
  %25 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %26 = trunc i64 %indvars.iv.next120 to i32
  %mul49 = mul i32 %25, %26
  %idx.ext = zext i32 %mul49 to i64
  %add.ptr50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i64 %idx.ext
  %27 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim54 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %27, i64 %indvars.iv119, i32 6
  store %struct.halide_dimension_t* %add.ptr50, %struct.halide_dimension_t** %dim54, align 8, !tbaa !176
  %cmp57111 = icmp sgt i32 %25, 0
  br i1 %cmp57111, label %for.body59.preheader, label %for.cond36.loopexit

for.body59.preheader:                             ; preds = %for.body40
  %28 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62125 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %28, i64 0, i32 6
  %29 = bitcast %struct.halide_dimension_t** %dim62125 to i8**
  %30 = load i8*, i8** %29, align 8, !tbaa !176
  %31 = bitcast %struct.halide_dimension_t* %add.ptr50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %31, i8* nonnull align 4 dereferenceable(16) %30, i64 16, i1 false), !tbaa.struct !177
  %32 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp57128 = icmp sgt i32 %32, 1
  br i1 %cmp57128, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

for.body59.for.body59_crit_edge:                  ; preds = %for.body59.preheader, %for.body59.for.body59_crit_edge
  %indvars.iv.next129 = phi i64 [ %indvars.iv.next, %for.body59.for.body59_crit_edge ], [ 1, %for.body59.preheader ]
  %.pre123 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim68.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %.pre123, i64 %indvars.iv119, i32 6
  %.pre124 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim68.phi.trans.insert, align 8, !tbaa !176
  %33 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %33, i64 0, i32 6
  %34 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim62, align 8, !tbaa !176
  %arrayidx64 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %indvars.iv.next129
  %arrayidx70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre124, i64 %indvars.iv.next129
  %35 = bitcast %struct.halide_dimension_t* %arrayidx70 to i8*
  %36 = bitcast %struct.halide_dimension_t* %arrayidx64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %35, i8* nonnull align 4 dereferenceable(16) %36, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next129, 1
  %37 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %38 = sext i32 %37 to i64
  %cmp57 = icmp slt i64 %indvars.iv.next, %38
  br i1 %cmp57, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

cleanup:                                          ; preds = %for.cond.cleanup39, %entry
  %39 = xor i1 %tobool.not, true
  ret i1 %39
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %key, i64 %key_size) local_unnamed_addr #0 {
entry:
  %cmp8.not = icmp eq i64 %key_size, 0
  br i1 %cmp8.not, label %for.cond.cleanup, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  %0 = add i64 %key_size, -1
  %xtraiter = and i64 %key_size, 7
  %1 = icmp ult i64 %0, 7
  br i1 %1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %key_size, -8
  %add.0 = mul i32 5381, 33
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.body, %for.body.preheader
  %add1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add1.7, %for.body ]
  %i.010.unr = phi i64 [ 0, %for.body.preheader ], [ %inc.7, %for.body ]
  %h.09.unr = phi i32 [ 5381, %for.body.preheader ], [ %add1.7, %for.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil
  %i.010.epil = phi i64 [ %inc.epil, %for.body.epil ], [ %i.010.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %h.09.epil = phi i32 [ %add1.epil, %for.body.epil ], [ %h.09.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.epil = mul i32 %h.09.epil, 33
  %arrayidx.epil = getelementptr inbounds i8, i8* %key, i64 %i.010.epil
  %2 = load i8, i8* %arrayidx.epil, align 1, !tbaa !14
  %conv.epil = zext i8 %2 to i32
  %add1.epil = add i32 %add.epil, %conv.epil
  %inc.epil = add nuw i64 %i.010.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.body.epil, !llvm.loop !266

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil, %entry
  %h.0.lcssa = phi i32 [ 5381, %entry ], [ %add1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add1.epil, %for.body.epil ]
  ret i32 %h.0.lcssa

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.preheader.new
  %i.010 = phi i64 [ 0, %for.body.preheader.new ], [ %inc.7, %for.body.for.body_crit_edge ]
  %add.phi = phi i32 [ %add.0, %for.body.preheader.new ], [ %add.12, %for.body.for.body_crit_edge ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.7, %for.body.for.body_crit_edge ]
  %arrayidx = getelementptr inbounds i8, i8* %key, i64 %i.010
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = zext i8 %3 to i32
  %add1 = add i32 %add.phi, %conv
  %inc = or i64 %i.010, 1
  %add.1 = mul i32 %add1, 33
  %arrayidx.1 = getelementptr inbounds i8, i8* %key, i64 %inc
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %conv.1 = zext i8 %4 to i32
  %add1.1 = add i32 %add.1, %conv.1
  %inc.1 = or i64 %i.010, 2
  %add.2 = mul i32 %add1.1, 33
  %arrayidx.2 = getelementptr inbounds i8, i8* %key, i64 %inc.1
  %5 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %conv.2 = zext i8 %5 to i32
  %add1.2 = add i32 %add.2, %conv.2
  %inc.2 = or i64 %i.010, 3
  %add.3 = mul i32 %add1.2, 33
  %arrayidx.3 = getelementptr inbounds i8, i8* %key, i64 %inc.2
  %6 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %conv.3 = zext i8 %6 to i32
  %add1.3 = add i32 %add.3, %conv.3
  %inc.3 = or i64 %i.010, 4
  %add.4 = mul i32 %add1.3, 33
  %arrayidx.4 = getelementptr inbounds i8, i8* %key, i64 %inc.3
  %7 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %conv.4 = zext i8 %7 to i32
  %add1.4 = add i32 %add.4, %conv.4
  %inc.4 = or i64 %i.010, 5
  %add.5 = mul i32 %add1.4, 33
  %arrayidx.5 = getelementptr inbounds i8, i8* %key, i64 %inc.4
  %8 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %conv.5 = zext i8 %8 to i32
  %add1.5 = add i32 %add.5, %conv.5
  %inc.5 = or i64 %i.010, 6
  %add.6 = mul i32 %add1.5, 33
  %arrayidx.6 = getelementptr inbounds i8, i8* %key, i64 %inc.5
  %9 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %conv.6 = zext i8 %9 to i32
  %add1.6 = add i32 %add.6, %conv.6
  %inc.6 = or i64 %i.010, 7
  %add.7 = mul i32 %add1.6, 33
  %arrayidx.7 = getelementptr inbounds i8, i8* %key, i64 %inc.6
  %10 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %conv.7 = zext i8 %10 to i32
  %add1.7 = add i32 %add.7, %conv.7
  %inc.7 = add nuw i64 %i.010, 8
  %niter.nsub.7 = add i64 %niter, -8
  %niter.ncmp.7 = icmp eq i64 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.for.body_crit_edge, !llvm.loop !267

for.body.for.body_crit_edge:                      ; preds = %for.body
  %add.12 = mul i32 %add1.7, 33
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11prune_cacheEv() local_unnamed_addr #0 {
entry:
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %1 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %2 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  %cmp84 = icmp sgt i64 %1, %2
  %cmp185 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  %3 = and i1 %cmp185, %cmp84
  br i1 %3, label %while.body, label %while.end42

while.body:                                       ; preds = %entry, %if.end41
  %4 = phi i64 [ %114, %if.end41 ], [ %2, %entry ]
  %5 = phi i64 [ %115, %if.end41 ], [ %1, %entry ]
  %prune_candidate.086 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %6, %if.end41 ], [ %0, %entry ]
  %more_recent2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 1
  %6 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent2, align 8, !tbaa !268
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 7
  %7 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3 = icmp eq i32 %7, 0
  br i1 %cmp3, label %if.then, label %if.end41

if.then:                                          ; preds = %while.body
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 6
  %8 = load i32, i32* %hash, align 8, !tbaa !253
  %9 = and i32 %8, 255
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %10 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp5 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %10, %prune_candidate.086
  br i1 %cmp5, label %if.then6, label %while.cond9

if.then6:                                         ; preds = %if.then
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %11 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !227
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %11, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  br label %if.end21

while.cond9:                                      ; preds = %if.then, %land.rhs11
  %prev_hash_entry.0 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %12, %land.rhs11 ], [ %10, %if.then ]
  %cmp10.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, null
  br i1 %cmp10.not, label %if.then18, label %land.rhs11

land.rhs11:                                       ; preds = %while.cond9
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  %12 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next12, align 8, !tbaa !227
  %cmp13.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %12, %prune_candidate.086
  br i1 %cmp13.not, label %do.end, label %while.cond9, !llvm.loop !269

if.then18:                                        ; preds = %while.cond9
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([133 x i8], [133 x i8]* @.str.2.42, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %land.rhs11, %if.then18
  %next19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %13 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next19, align 8, !tbaa !227
  %next20 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %13, %"struct.Halide::Runtime::Internal::CacheEntry"** %next20, align 8, !tbaa !227
  br label %if.end21

if.end21:                                         ; preds = %do.end, %if.then6
  %14 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp22 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %14, %prune_candidate.086
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %cmp25.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  br i1 %cmp25.not, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end24
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %15 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent27 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %15, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent27, align 8, !tbaa !251
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp29 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %16, %prune_candidate.086
  %less_recent31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end28
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %17, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %cmp34.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp34.not, label %if.end37, label %if.then35

if.then35:                                        ; preds = %if.end32
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end32
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 8
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp3882.not = icmp eq i32 %18, 0
  br i1 %cmp3882.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end37
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 11
  %19 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %wide.trip.count = zext i32 %18 to i64
  br label %for.body

for.cond.for.cond.cleanup_crit_edge:              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %if.end37
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %prune_candidate.086) #16
  %20 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %20) #14
  %.pre92 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %.pre93 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  br label %if.end41

for.body:                                         ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %sub89 = phi i64 [ %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted, %for.body.lr.ph ], [ %sub, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 5
  %21 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %21, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body
  %sub.i.neg.0 = add i64 0, -1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %21 to i64
  %min.iters.check43 = icmp ult i32 %21, 17
  br i1 %min.iters.check43, label %for.body.i.i.preheader, label %vector.ph44

vector.ph44:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf45 = and i64 %wide.trip.count.i.i, 15
  %23 = icmp eq i64 %n.mod.vf45, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf45
  %n.vec46 = sub nsw i64 %wide.trip.count.i.i, %24
  br label %vector.body42

vector.body42:                                    ; preds = %vector.body42, %vector.ph44
  %index47 = phi i64 [ 0, %vector.ph44 ], [ %index.next48, %vector.body42 ]
  %vec.ind51 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph44 ], [ %vec.ind.next56, %vector.body42 ]
  %vec.phi57 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi73, %vector.body42 ]
  %vec.phi58 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi74, %vector.body42 ]
  %vec.phi59 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi75, %vector.body42 ]
  %vec.phi60 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi76, %vector.body42 ]
  %step.add52 = add <4 x i64> %vec.ind51, <i64 4, i64 4, i64 4, i64 4>
  %step.add53 = add <4 x i64> %vec.ind51, <i64 8, i64 8, i64 8, i64 8>
  %step.add54 = add <4 x i64> %vec.ind51, <i64 12, i64 12, i64 12, i64 12>
  %25 = or i64 %index47, 4
  %26 = or i64 %index47, 8
  %27 = or i64 %index47, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index47, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 2
  %32 = bitcast i32* %28 to <16 x i32>*
  %33 = bitcast i32* %29 to <16 x i32>*
  %34 = bitcast i32* %30 to <16 x i32>*
  %35 = bitcast i32* %31 to <16 x i32>*
  %wide.vec61 = load <16 x i32>, <16 x i32>* %32, align 4, !tbaa !182
  %wide.vec62 = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !182
  %wide.vec63 = load <16 x i32>, <16 x i32>* %34, align 4, !tbaa !182
  %wide.vec64 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !182
  %strided.vec65 = shufflevector <16 x i32> %wide.vec61, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec66 = shufflevector <16 x i32> %wide.vec62, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec67 = shufflevector <16 x i32> %wide.vec63, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec68 = shufflevector <16 x i32> %wide.vec64, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %36 = icmp sgt <4 x i32> %strided.vec65, zeroinitializer
  %37 = icmp sgt <4 x i32> %strided.vec66, zeroinitializer
  %38 = icmp sgt <4 x i32> %strided.vec67, zeroinitializer
  %39 = icmp sgt <4 x i32> %strided.vec68, zeroinitializer
  %40 = zext <4 x i32> %strided.vec65 to <4 x i64>
  %41 = zext <4 x i32> %strided.vec66 to <4 x i64>
  %42 = zext <4 x i32> %strided.vec67 to <4 x i64>
  %43 = zext <4 x i32> %strided.vec68 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind51, i32 1
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add52, i32 1
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add53, i32 1
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add54, i32 1
  %wide.masked.gather69 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %44, i32 4, <4 x i1> %36, <4 x i32> undef), !tbaa !178
  %wide.masked.gather70 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %45, i32 4, <4 x i1> %37, <4 x i32> undef), !tbaa !178
  %wide.masked.gather71 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %46, i32 4, <4 x i1> %38, <4 x i32> undef), !tbaa !178
  %wide.masked.gather72 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %47, i32 4, <4 x i1> %39, <4 x i32> undef), !tbaa !178
  %48 = add nsw <4 x i32> %wide.masked.gather69, <i32 -1, i32 -1, i32 -1, i32 -1>
  %49 = add nsw <4 x i32> %wide.masked.gather70, <i32 -1, i32 -1, i32 -1, i32 -1>
  %50 = add nsw <4 x i32> %wide.masked.gather71, <i32 -1, i32 -1, i32 -1, i32 -1>
  %51 = add nsw <4 x i32> %wide.masked.gather72, <i32 -1, i32 -1, i32 -1, i32 -1>
  %52 = sext <4 x i32> %48 to <4 x i64>
  %53 = sext <4 x i32> %49 to <4 x i64>
  %54 = sext <4 x i32> %50 to <4 x i64>
  %55 = sext <4 x i32> %51 to <4 x i64>
  %56 = mul nsw <4 x i64> %52, %40
  %57 = mul nsw <4 x i64> %53, %41
  %58 = mul nsw <4 x i64> %54, %42
  %59 = mul nsw <4 x i64> %55, %43
  %60 = select <4 x i1> %36, <4 x i64> %56, <4 x i64> zeroinitializer
  %predphi73 = add <4 x i64> %vec.phi57, %60
  %61 = select <4 x i1> %37, <4 x i64> %57, <4 x i64> zeroinitializer
  %predphi74 = add <4 x i64> %vec.phi58, %61
  %62 = select <4 x i1> %38, <4 x i64> %58, <4 x i64> zeroinitializer
  %predphi75 = add <4 x i64> %vec.phi59, %62
  %63 = select <4 x i1> %39, <4 x i64> %59, <4 x i64> zeroinitializer
  %predphi76 = add <4 x i64> %vec.phi60, %63
  %index.next48 = add i64 %index47, 16
  %vec.ind.next56 = add <4 x i64> %vec.ind51, <i64 16, i64 16, i64 16, i64 16>
  %64 = icmp eq i64 %index.next48, %n.vec46
  br i1 %64, label %middle.block40, label %vector.body42, !llvm.loop !270

middle.block40:                                   ; preds = %vector.body42
  %bin.rdx77 = add <4 x i64> %predphi74, %predphi73
  %bin.rdx78 = add <4 x i64> %predphi75, %bin.rdx77
  %bin.rdx79 = add <4 x i64> %predphi76, %bin.rdx78
  %65 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx79)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block40, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec46, %middle.block40 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %65, %middle.block40 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 2
  %66 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %66, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %66 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 1
  %67 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %67, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !271

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %21, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader81, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %68 = icmp eq i64 %n.mod.vf, 0
  %69 = select i1 %68, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %69
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi23 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi35, %vector.body ]
  %vec.phi24 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi36, %vector.body ]
  %vec.phi25 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi37, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add20 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add21 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %70 = or i64 %index, 4
  %71 = or i64 %index, 8
  %72 = or i64 %index, 12
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 2
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %70, i32 2
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %71, i32 2
  %76 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %72, i32 2
  %77 = bitcast i32* %73 to <16 x i32>*
  %78 = bitcast i32* %74 to <16 x i32>*
  %79 = bitcast i32* %75 to <16 x i32>*
  %80 = bitcast i32* %76 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %77, align 4, !tbaa !182
  %wide.vec26 = load <16 x i32>, <16 x i32>* %78, align 4, !tbaa !182
  %wide.vec27 = load <16 x i32>, <16 x i32>* %79, align 4, !tbaa !182
  %wide.vec28 = load <16 x i32>, <16 x i32>* %80, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec29 = shufflevector <16 x i32> %wide.vec26, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec30 = shufflevector <16 x i32> %wide.vec27, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec31 = shufflevector <16 x i32> %wide.vec28, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %81 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %82 = icmp slt <4 x i32> %strided.vec29, zeroinitializer
  %83 = icmp slt <4 x i32> %strided.vec30, zeroinitializer
  %84 = icmp slt <4 x i32> %strided.vec31, zeroinitializer
  %85 = sext <4 x i32> %strided.vec to <4 x i64>
  %86 = sext <4 x i32> %strided.vec29 to <4 x i64>
  %87 = sext <4 x i32> %strided.vec30 to <4 x i64>
  %88 = sext <4 x i32> %strided.vec31 to <4 x i64>
  %89 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind, i32 1
  %90 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add, i32 1
  %91 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add20, i32 1
  %92 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add21, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %89, i32 4, <4 x i1> %81, <4 x i32> undef), !tbaa !178
  %wide.masked.gather32 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %90, i32 4, <4 x i1> %82, <4 x i32> undef), !tbaa !178
  %wide.masked.gather33 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %91, i32 4, <4 x i1> %83, <4 x i32> undef), !tbaa !178
  %wide.masked.gather34 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %92, i32 4, <4 x i1> %84, <4 x i32> undef), !tbaa !178
  %93 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %94 = add nsw <4 x i32> %wide.masked.gather32, <i32 -1, i32 -1, i32 -1, i32 -1>
  %95 = add nsw <4 x i32> %wide.masked.gather33, <i32 -1, i32 -1, i32 -1, i32 -1>
  %96 = add nsw <4 x i32> %wide.masked.gather34, <i32 -1, i32 -1, i32 -1, i32 -1>
  %97 = sext <4 x i32> %93 to <4 x i64>
  %98 = sext <4 x i32> %94 to <4 x i64>
  %99 = sext <4 x i32> %95 to <4 x i64>
  %100 = sext <4 x i32> %96 to <4 x i64>
  %101 = mul nsw <4 x i64> %97, %85
  %102 = mul nsw <4 x i64> %98, %86
  %103 = mul nsw <4 x i64> %99, %87
  %104 = mul nsw <4 x i64> %100, %88
  %105 = select <4 x i1> %81, <4 x i64> %101, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %105
  %106 = select <4 x i1> %82, <4 x i64> %102, <4 x i64> zeroinitializer
  %predphi35 = add <4 x i64> %vec.phi23, %106
  %107 = select <4 x i1> %83, <4 x i64> %103, <4 x i64> zeroinitializer
  %predphi36 = add <4 x i64> %vec.phi24, %107
  %108 = select <4 x i1> %84, <4 x i64> %104, <4 x i64> zeroinitializer
  %predphi37 = add <4 x i64> %vec.phi25, %108
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %109 = icmp eq i64 %index.next, %n.vec
  br i1 %109, label %middle.block, label %vector.body, !llvm.loop !272

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi35, %predphi
  %bin.rdx38 = add <4 x i64> %predphi36, %bin.rdx
  %bin.rdx39 = add <4 x i64> %predphi37, %bin.rdx38
  %110 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx39)
  br label %for.body.i13.i.preheader81

for.body.i13.i.preheader81:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %110, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader81, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader81 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader81 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 2
  %111 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %111, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %111 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 1
  %112 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %112, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !273

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i.neg = xor i64 %index.1.i.i, -1
  %sub.i.neg.1 = add i64 %index.1.i21.i, %add8.i.i.neg
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.neg.phi = phi i64 [ %sub.i.neg.0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.neg.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 4, i32 1
  %113 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %113 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i.neg = mul i64 %div.i.i, %sub.i.neg.phi
  %sub = add i64 %mul.i.neg, %sub89
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.for.cond.cleanup_crit_edge, label %for.body, !llvm.loop !274

if.end41:                                         ; preds = %for.cond.cleanup, %while.body
  %114 = phi i64 [ %.pre93, %for.cond.cleanup ], [ %4, %while.body ]
  %115 = phi i64 [ %.pre92, %for.cond.cleanup ], [ %5, %while.body ]
  %cmp = icmp sgt i64 %115, %114
  %cmp1 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %116 = and i1 %cmp1, %cmp
  br i1 %116, label %while.body, label %while.end42, !llvm.loop !275

while.end42:                                      ; preds = %if.end41, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_set_size(i64 %size) local_unnamed_addr #4 {
entry:
  %cmp = icmp eq i64 %size, 0
  %spec.store.select = select i1 %cmp, i64 1048576, i64 %size
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  store i64 %spec.store.select, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #16
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_lookup(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers) local_unnamed_addr #4 {
entry:
  %conv = sext i32 %size to i64
  %call = tail call i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %cache_key, i64 %conv) #16
  %0 = and i32 %call, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry3.0220 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp.not221 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0220, null
  br i1 %cmp.not221, label %for.cond75.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %cmp16215 = icmp sgt i32 %tuple_count, 0
  %1 = sext i32 %tuple_count to i64
  br i1 %cmp16215, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.lr.ph, %if.end73.us
  %entry3.0222.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0.us, %if.end73.us ], [ %entry3.0220, %while.body.lr.ph ]
  %hash.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 6
  %2 = load i32, i32* %hash.us, align 8, !tbaa !253
  %cmp4.us = icmp eq i32 %2, %call
  br i1 %cmp4.us, label %land.lhs.true.us, label %if.end73.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 4
  %3 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp6.us = icmp eq i64 %3, %conv
  br i1 %cmp6.us, label %land.lhs.true7.us, label %if.end73.us

land.lhs.true7.us:                                ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 5
  %4 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call9.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %4, i8* %cache_key, i64 %conv) #16
  br i1 %call9.us, label %land.lhs.true10.us, label %if.end73.us

land.lhs.true10.us:                               ; preds = %land.lhs.true7.us
  %computed_bounds11.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 10
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11.us, align 8, !tbaa !256
  %call12.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %5) #16
  br i1 %call12.us, label %land.lhs.true13.us, label %if.end73.us

land.lhs.true13.us:                               ; preds = %land.lhs.true10.us
  %tuple_count14.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 8
  %6 = load i32, i32* %tuple_count14.us, align 8, !tbaa !230
  %cmp15.us = icmp eq i32 %6, %tuple_count
  br i1 %cmp15.us, label %for.cond.preheader.us, label %if.end73.us

for.cond.preheader.us:                            ; preds = %land.lhs.true13.us
  %buf.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 11
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %for.cond.preheader.us
  %indvars.iv226.us = phi i64 [ 0, %for.cond.preheader.us ], [ %indvars.iv.next227.us, %for.body.us ]
  %arrayidx18.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv226.us
  %7 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx18.us, align 8, !tbaa !10
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf.us, align 8, !tbaa !232
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %8, i64 %indvars.iv226.us, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call21.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %7, %struct.halide_dimension_t* %9) #16
  %indvars.iv.next227.us = add nuw nsw i64 %indvars.iv226.us, 1
  %cmp16.us = icmp slt i64 %indvars.iv.next227.us, %1
  %10 = and i1 %cmp16.us, %call21.us
  br i1 %10, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !276

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call21.us, label %if.then23, label %if.end73.us

if.end73.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true13.us, %land.lhs.true10.us, %land.lhs.true7.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 0
  %entry3.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0.us, null
  br i1 %cmp.not.us, label %for.cond75.preheader, label %while.body.us, !llvm.loop !277

for.cond75.preheader:                             ; preds = %if.end73, %if.end73.us, %entry
  %cmp76210 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp76210, label %for.body78.preheader, label %cleanup119

for.body78.preheader:                             ; preds = %for.cond75.preheader
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body78

while.body:                                       ; preds = %while.body.lr.ph, %if.end73
  %entry3.0222 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0, %if.end73 ], [ %entry3.0220, %while.body.lr.ph ]
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 6
  %11 = load i32, i32* %hash, align 8, !tbaa !253
  %cmp4 = icmp eq i32 %11, %call
  br i1 %cmp4, label %land.lhs.true, label %if.end73

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 4
  %12 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp6 = icmp eq i64 %12, %conv
  br i1 %cmp6, label %land.lhs.true7, label %if.end73

land.lhs.true7:                                   ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 5
  %13 = load i8*, i8** %key, align 8, !tbaa !257
  %call9 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %13, i8* %cache_key, i64 %conv) #16
  br i1 %call9, label %land.lhs.true10, label %if.end73

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %computed_bounds11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 10
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11, align 8, !tbaa !256
  %call12 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %14) #16
  br i1 %call12, label %land.lhs.true13, label %if.end73

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %tuple_count14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 8
  %15 = load i32, i32* %tuple_count14, align 8, !tbaa !230
  %cmp15 = icmp eq i32 %15, %tuple_count
  br i1 %cmp15, label %if.then23, label %if.end73

if.then23:                                        ; preds = %land.lhs.true13, %for.cond.cleanup.us
  %.us-phi = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0222.us, %for.cond.cleanup.us ], [ %entry3.0222, %land.lhs.true13 ]
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp24.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %16
  br i1 %cmp24.not, label %if.end57, label %do.body

do.body:                                          ; preds = %if.then23
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 1
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp26.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp26.not, label %if.then27, label %do.end

if.then27:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([136 x i8], [136 x i8]* @.str.3.43, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then27, %do.body
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 2
  %18 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp28.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %18, null
  br i1 %cmp28.not, label %do.body33, label %if.then29

if.then29:                                        ; preds = %do.end
  %19 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %more_recent32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %18, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %19, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent32, align 8, !tbaa !268
  %.pr = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.body41

do.body33:                                        ; preds = %do.end
  %20 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp34 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %20, %.us-phi
  br i1 %cmp34, label %do.end38, label %if.then35

if.then35:                                        ; preds = %do.body33
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([135 x i8], [135 x i8]* @.str.4.44, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end38

do.end38:                                         ; preds = %if.then35, %do.body33
  %21 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %21, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %do.body41

do.body41:                                        ; preds = %do.end38, %if.then29
  %22 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pr, %if.then29 ], [ %21, %do.end38 ]
  %cmp43.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %22, null
  br i1 %cmp43.not, label %if.then44, label %do.end47

if.then44:                                        ; preds = %do.body41
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([136 x i8], [136 x i8]* @.str.5.45, i64 0, i64 0)) #14
  tail call void @abort() #14
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.end47

do.end47:                                         ; preds = %if.then44, %do.body41
  %23 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pre, %if.then44 ], [ %22, %do.body41 ]
  %24 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent50 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %23, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %24, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent50, align 8, !tbaa !251
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %25 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %25, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp53.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %25, null
  br i1 %cmp53.not, label %if.end56, label %if.then54

if.then54:                                        ; preds = %do.end47
  %more_recent55 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %25, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent55, align 8, !tbaa !268
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %do.end47
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then23
  br i1 %cmp16215, label %for.body62.lr.ph, label %cleanup119.loopexit223

for.body62.lr.ph:                                 ; preds = %if.end57
  %buf66 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 11
  %wide.trip.count230 = zext i32 %tuple_count to i64
  %26 = add nsw i64 %wide.trip.count230, -1
  %xtraiter = and i64 %wide.trip.count230, 3
  %27 = icmp ult i64 %26, 3
  br i1 %27, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62.lr.ph.new

for.body62.lr.ph.new:                             ; preds = %for.body62.lr.ph
  %unroll_iter = and i64 %wide.trip.count230, 4294967292
  br label %for.body62

for.body62:                                       ; preds = %for.body62, %for.body62.lr.ph.new
  %indvars.iv228 = phi i64 [ 0, %for.body62.lr.ph.new ], [ %indvars.iv.next229.3, %for.body62 ]
  %niter = phi i64 [ %unroll_iter, %for.body62.lr.ph.new ], [ %niter.nsub.3, %for.body62 ]
  %arrayidx65 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228
  %28 = bitcast %struct.halide_buffer_t** %arrayidx65 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !10
  %30 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 %indvars.iv228
  %31 = bitcast %struct.halide_buffer_t* %arrayidx68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %29, i8* nonnull align 8 dereferenceable(56) %31, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229 = or i64 %indvars.iv228, 1
  %arrayidx65.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229
  %32 = bitcast %struct.halide_buffer_t** %arrayidx65.1 to i8**
  %33 = load i8*, i8** %32, align 8, !tbaa !10
  %34 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %34, i64 %indvars.iv.next229
  %35 = bitcast %struct.halide_buffer_t* %arrayidx68.1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %33, i8* nonnull align 8 dereferenceable(56) %35, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.1 = or i64 %indvars.iv228, 2
  %arrayidx65.2 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.1
  %36 = bitcast %struct.halide_buffer_t** %arrayidx65.2 to i8**
  %37 = load i8*, i8** %36, align 8, !tbaa !10
  %38 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.2 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %38, i64 %indvars.iv.next229.1
  %39 = bitcast %struct.halide_buffer_t* %arrayidx68.2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %37, i8* nonnull align 8 dereferenceable(56) %39, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.2 = or i64 %indvars.iv228, 3
  %arrayidx65.3 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.2
  %40 = bitcast %struct.halide_buffer_t** %arrayidx65.3 to i8**
  %41 = load i8*, i8** %40, align 8, !tbaa !10
  %42 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.3 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %42, i64 %indvars.iv.next229.2
  %43 = bitcast %struct.halide_buffer_t* %arrayidx68.3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %41, i8* nonnull align 8 dereferenceable(56) %43, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.3 = add nuw nsw i64 %indvars.iv228, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62, !llvm.loop !278

if.end73:                                         ; preds = %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 0
  %entry3.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0, null
  br i1 %cmp.not, label %for.cond75.preheader, label %while.body, !llvm.loop !277

for.body78:                                       ; preds = %for.inc114, %for.body78.preheader
  %indvars.iv = phi i64 [ 0, %for.body78.preheader ], [ %indvars.iv.next, %for.inc114 ]
  %arrayidx81 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %44 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx81, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 5
  %45 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %45, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body78
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 6
  %46 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %45 to i64
  %min.iters.check53 = icmp ult i32 %45, 17
  br i1 %min.iters.check53, label %for.body.i.i.preheader, label %vector.ph54

vector.ph54:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf55 = and i64 %wide.trip.count.i.i, 15
  %47 = icmp eq i64 %n.mod.vf55, 0
  %48 = select i1 %47, i64 16, i64 %n.mod.vf55
  %n.vec56 = sub nsw i64 %wide.trip.count.i.i, %48
  br label %vector.body52

vector.body52:                                    ; preds = %vector.body52, %vector.ph54
  %index57 = phi i64 [ 0, %vector.ph54 ], [ %index.next58, %vector.body52 ]
  %vec.ind61 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph54 ], [ %vec.ind.next66, %vector.body52 ]
  %vec.phi67 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi83, %vector.body52 ]
  %vec.phi68 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi84, %vector.body52 ]
  %vec.phi69 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi85, %vector.body52 ]
  %vec.phi70 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi86, %vector.body52 ]
  %step.add62 = add <4 x i64> %vec.ind61, <i64 4, i64 4, i64 4, i64 4>
  %step.add63 = add <4 x i64> %vec.ind61, <i64 8, i64 8, i64 8, i64 8>
  %step.add64 = add <4 x i64> %vec.ind61, <i64 12, i64 12, i64 12, i64 12>
  %49 = or i64 %index57, 4
  %50 = or i64 %index57, 8
  %51 = or i64 %index57, 12
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index57, i32 2
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %49, i32 2
  %54 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %50, i32 2
  %55 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %51, i32 2
  %56 = bitcast i32* %52 to <16 x i32>*
  %57 = bitcast i32* %53 to <16 x i32>*
  %58 = bitcast i32* %54 to <16 x i32>*
  %59 = bitcast i32* %55 to <16 x i32>*
  %wide.vec71 = load <16 x i32>, <16 x i32>* %56, align 4, !tbaa !182
  %wide.vec72 = load <16 x i32>, <16 x i32>* %57, align 4, !tbaa !182
  %wide.vec73 = load <16 x i32>, <16 x i32>* %58, align 4, !tbaa !182
  %wide.vec74 = load <16 x i32>, <16 x i32>* %59, align 4, !tbaa !182
  %strided.vec75 = shufflevector <16 x i32> %wide.vec71, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec76 = shufflevector <16 x i32> %wide.vec72, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec77 = shufflevector <16 x i32> %wide.vec73, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec78 = shufflevector <16 x i32> %wide.vec74, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = icmp sgt <4 x i32> %strided.vec75, zeroinitializer
  %61 = icmp sgt <4 x i32> %strided.vec76, zeroinitializer
  %62 = icmp sgt <4 x i32> %strided.vec77, zeroinitializer
  %63 = icmp sgt <4 x i32> %strided.vec78, zeroinitializer
  %64 = zext <4 x i32> %strided.vec75 to <4 x i64>
  %65 = zext <4 x i32> %strided.vec76 to <4 x i64>
  %66 = zext <4 x i32> %strided.vec77 to <4 x i64>
  %67 = zext <4 x i32> %strided.vec78 to <4 x i64>
  %68 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind61, i32 1
  %69 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add62, i32 1
  %70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add63, i32 1
  %71 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add64, i32 1
  %wide.masked.gather79 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %68, i32 4, <4 x i1> %60, <4 x i32> undef), !tbaa !178
  %wide.masked.gather80 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %69, i32 4, <4 x i1> %61, <4 x i32> undef), !tbaa !178
  %wide.masked.gather81 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %70, i32 4, <4 x i1> %62, <4 x i32> undef), !tbaa !178
  %wide.masked.gather82 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %71, i32 4, <4 x i1> %63, <4 x i32> undef), !tbaa !178
  %72 = add nsw <4 x i32> %wide.masked.gather79, <i32 -1, i32 -1, i32 -1, i32 -1>
  %73 = add nsw <4 x i32> %wide.masked.gather80, <i32 -1, i32 -1, i32 -1, i32 -1>
  %74 = add nsw <4 x i32> %wide.masked.gather81, <i32 -1, i32 -1, i32 -1, i32 -1>
  %75 = add nsw <4 x i32> %wide.masked.gather82, <i32 -1, i32 -1, i32 -1, i32 -1>
  %76 = sext <4 x i32> %72 to <4 x i64>
  %77 = sext <4 x i32> %73 to <4 x i64>
  %78 = sext <4 x i32> %74 to <4 x i64>
  %79 = sext <4 x i32> %75 to <4 x i64>
  %80 = mul nsw <4 x i64> %76, %64
  %81 = mul nsw <4 x i64> %77, %65
  %82 = mul nsw <4 x i64> %78, %66
  %83 = mul nsw <4 x i64> %79, %67
  %84 = select <4 x i1> %60, <4 x i64> %80, <4 x i64> zeroinitializer
  %predphi83 = add <4 x i64> %vec.phi67, %84
  %85 = select <4 x i1> %61, <4 x i64> %81, <4 x i64> zeroinitializer
  %predphi84 = add <4 x i64> %vec.phi68, %85
  %86 = select <4 x i1> %62, <4 x i64> %82, <4 x i64> zeroinitializer
  %predphi85 = add <4 x i64> %vec.phi69, %86
  %87 = select <4 x i1> %63, <4 x i64> %83, <4 x i64> zeroinitializer
  %predphi86 = add <4 x i64> %vec.phi70, %87
  %index.next58 = add i64 %index57, 16
  %vec.ind.next66 = add <4 x i64> %vec.ind61, <i64 16, i64 16, i64 16, i64 16>
  %88 = icmp eq i64 %index.next58, %n.vec56
  br i1 %88, label %middle.block50, label %vector.body52, !llvm.loop !279

middle.block50:                                   ; preds = %vector.body52
  %bin.rdx87 = add <4 x i64> %predphi84, %predphi83
  %bin.rdx88 = add <4 x i64> %predphi85, %bin.rdx87
  %bin.rdx89 = add <4 x i64> %predphi86, %bin.rdx88
  %89 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx89)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block50, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec56, %middle.block50 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %89, %middle.block50 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 2
  %90 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %90, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %90 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 1
  %91 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %91, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !280

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %45, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader91, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %92 = icmp eq i64 %n.mod.vf, 0
  %93 = select i1 %92, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %93
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi33 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi45, %vector.body ]
  %vec.phi34 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi46, %vector.body ]
  %vec.phi35 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi47, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add30 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add31 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %94 = or i64 %index, 4
  %95 = or i64 %index, 8
  %96 = or i64 %index, 12
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index, i32 2
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %94, i32 2
  %99 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %95, i32 2
  %100 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %96, i32 2
  %101 = bitcast i32* %97 to <16 x i32>*
  %102 = bitcast i32* %98 to <16 x i32>*
  %103 = bitcast i32* %99 to <16 x i32>*
  %104 = bitcast i32* %100 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %101, align 4, !tbaa !182
  %wide.vec36 = load <16 x i32>, <16 x i32>* %102, align 4, !tbaa !182
  %wide.vec37 = load <16 x i32>, <16 x i32>* %103, align 4, !tbaa !182
  %wide.vec38 = load <16 x i32>, <16 x i32>* %104, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec39 = shufflevector <16 x i32> %wide.vec36, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec40 = shufflevector <16 x i32> %wide.vec37, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec41 = shufflevector <16 x i32> %wide.vec38, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %105 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %106 = icmp slt <4 x i32> %strided.vec39, zeroinitializer
  %107 = icmp slt <4 x i32> %strided.vec40, zeroinitializer
  %108 = icmp slt <4 x i32> %strided.vec41, zeroinitializer
  %109 = sext <4 x i32> %strided.vec to <4 x i64>
  %110 = sext <4 x i32> %strided.vec39 to <4 x i64>
  %111 = sext <4 x i32> %strided.vec40 to <4 x i64>
  %112 = sext <4 x i32> %strided.vec41 to <4 x i64>
  %113 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind, i32 1
  %114 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add, i32 1
  %115 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add30, i32 1
  %116 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add31, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %113, i32 4, <4 x i1> %105, <4 x i32> undef), !tbaa !178
  %wide.masked.gather42 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %114, i32 4, <4 x i1> %106, <4 x i32> undef), !tbaa !178
  %wide.masked.gather43 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %115, i32 4, <4 x i1> %107, <4 x i32> undef), !tbaa !178
  %wide.masked.gather44 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %116, i32 4, <4 x i1> %108, <4 x i32> undef), !tbaa !178
  %117 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %118 = add nsw <4 x i32> %wide.masked.gather42, <i32 -1, i32 -1, i32 -1, i32 -1>
  %119 = add nsw <4 x i32> %wide.masked.gather43, <i32 -1, i32 -1, i32 -1, i32 -1>
  %120 = add nsw <4 x i32> %wide.masked.gather44, <i32 -1, i32 -1, i32 -1, i32 -1>
  %121 = sext <4 x i32> %117 to <4 x i64>
  %122 = sext <4 x i32> %118 to <4 x i64>
  %123 = sext <4 x i32> %119 to <4 x i64>
  %124 = sext <4 x i32> %120 to <4 x i64>
  %125 = mul nsw <4 x i64> %121, %109
  %126 = mul nsw <4 x i64> %122, %110
  %127 = mul nsw <4 x i64> %123, %111
  %128 = mul nsw <4 x i64> %124, %112
  %129 = select <4 x i1> %105, <4 x i64> %125, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %129
  %130 = select <4 x i1> %106, <4 x i64> %126, <4 x i64> zeroinitializer
  %predphi45 = add <4 x i64> %vec.phi33, %130
  %131 = select <4 x i1> %107, <4 x i64> %127, <4 x i64> zeroinitializer
  %predphi46 = add <4 x i64> %vec.phi34, %131
  %132 = select <4 x i1> %108, <4 x i64> %128, <4 x i64> zeroinitializer
  %predphi47 = add <4 x i64> %vec.phi35, %132
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %133 = icmp eq i64 %index.next, %n.vec
  br i1 %133, label %middle.block, label %vector.body, !llvm.loop !281

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi45, %predphi
  %bin.rdx48 = add <4 x i64> %predphi46, %bin.rdx
  %bin.rdx49 = add <4 x i64> %predphi47, %bin.rdx48
  %134 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx49)
  br label %for.body.i13.i.preheader91

for.body.i13.i.preheader91:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %134, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader91, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader91 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader91 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 2
  %135 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %135, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %135 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 1
  %136 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %136, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !282

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body78
  %add8.i27.i = phi i64 [ 1, %for.body78 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body78 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 4, i32 1
  %137 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %137 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add84 = add i64 %mul.i, 64
  %call85 = tail call i8* @halide_malloc(i8* %user_context, i64 %add84) #14
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 2
  store i8* %call85, i8** %host, align 8, !tbaa !172
  %cmp87 = icmp eq i8* %call85, null
  br i1 %cmp87, label %for.cond89.preheader, label %for.inc114

for.cond89.preheader:                             ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %cmp90208.not = icmp eq i64 %indvars.iv, 0
  br i1 %cmp90208.not, label %cleanup119, label %for.body92

for.body92:                                       ; preds = %for.cond89.preheader, %for.body92
  %indvars.iv224 = phi i64 [ %indvars.iv.next225, %for.body92 ], [ %indvars.iv, %for.cond89.preheader ]
  %sub = add nuw nsw i64 %indvars.iv224, 4294967295
  %138 = and i64 %sub, 4294967295
  %arrayidx94 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %138
  %139 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host95 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %139, i64 0, i32 2
  %140 = load i8*, i8** %host95, align 8, !tbaa !172
  %call96 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %140) #16
  %141 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call96 to i8*
  tail call void @halide_free(i8* %user_context, i8* %141) #14
  %142 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host100 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %142, i64 0, i32 2
  store i8* null, i8** %host100, align 8, !tbaa !172
  %143 = icmp sgt i64 %indvars.iv224, 1
  %indvars.iv.next225 = add nsw i64 %indvars.iv224, -1
  br i1 %143, label %for.body92, label %cleanup119, !llvm.loop !283

for.inc114:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %add.ptr = getelementptr inbounds i8, i8* %call85, i64 64
  store i8* %add.ptr, i8** %host, align 8, !tbaa !172
  %call108 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* nonnull %add.ptr) #16
  %hash109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 1
  store i32 %call, i32* %hash109, align 8, !tbaa !284
  %entry110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry110, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %cleanup119, label %for.body78, !llvm.loop !287

cleanup119.loopexit223.loopexit.unr-lcssa:        ; preds = %for.body62, %for.body62.lr.ph
  %indvars.iv228.unr = phi i64 [ 0, %for.body62.lr.ph ], [ %indvars.iv.next229.3, %for.body62 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %cleanup119.loopexit223, label %for.body62.epil

for.body62.epil:                                  ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil
  %indvars.iv228.epil = phi i64 [ %indvars.iv.next229.epil, %for.body62.epil ], [ %indvars.iv228.unr, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body62.epil ], [ %xtraiter, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %arrayidx65.epil = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228.epil
  %144 = bitcast %struct.halide_buffer_t** %arrayidx65.epil to i8**
  %145 = load i8*, i8** %144, align 8, !tbaa !10
  %146 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.epil = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %146, i64 %indvars.iv228.epil
  %147 = bitcast %struct.halide_buffer_t* %arrayidx68.epil to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %145, i8* nonnull align 8 dereferenceable(56) %147, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.epil = add nuw nsw i64 %indvars.iv228.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %cleanup119.loopexit223, label %for.body62.epil, !llvm.loop !288

cleanup119.loopexit223:                           ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil, %if.end57
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 7
  %148 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %add = add i32 %148, %tuple_count
  store i32 %add, i32* %in_use_count, align 4, !tbaa !254
  br label %cleanup119

cleanup119:                                       ; preds = %for.inc114, %for.body92, %cleanup119.loopexit223, %for.cond89.preheader, %for.cond75.preheader
  %retval.6 = phi i32 [ 1, %for.cond75.preheader ], [ 0, %cleanup119.loopexit223 ], [ -1, %for.cond89.preheader ], [ -1, %for.body92 ], [ 1, %for.inc114 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  ret i32 %retval.6
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_store(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  %0 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, align 8, !tbaa !10
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %0, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %1) #16
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 1
  %2 = load i32, i32* %hash, align 8, !tbaa !284
  %3 = and i32 %2, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  %idxprom = zext i32 %3 to i64
  %arrayidx7 = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry6.0228 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %cmp.not229 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0228, null
  br i1 %cmp.not229, label %for.cond61.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %conv10 = sext i32 %size to i64
  %cmp22221 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp22221, label %while.body.us.preheader, label %while.body

while.body.us.preheader:                          ; preds = %while.body.lr.ph
  %4 = zext i32 %tuple_count to i64
  br label %while.body.us

while.body.us:                                    ; preds = %if.end59.us, %while.body.us.preheader
  %entry6.0230.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0.us, %if.end59.us ], [ %entry6.0228, %while.body.us.preheader ]
  %hash8.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 6
  %5 = load i32, i32* %hash8.us, align 8, !tbaa !253
  %cmp9.us = icmp eq i32 %5, %2
  br i1 %cmp9.us, label %land.lhs.true.us, label %if.end59.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 4
  %6 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp11.us = icmp eq i64 %6, %conv10
  br i1 %cmp11.us, label %land.lhs.true12.us, label %if.end59.us

land.lhs.true12.us:                               ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 5
  %7 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call14.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %7, i8* %cache_key, i64 %conv10) #16
  br i1 %call14.us, label %land.lhs.true15.us, label %if.end59.us

land.lhs.true15.us:                               ; preds = %land.lhs.true12.us
  %computed_bounds16.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 10
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16.us, align 8, !tbaa !256
  %call17.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %8) #16
  br i1 %call17.us, label %land.lhs.true18.us, label %if.end59.us

land.lhs.true18.us:                               ; preds = %land.lhs.true15.us
  %tuple_count19.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 8
  %9 = load i32, i32* %tuple_count19.us, align 8, !tbaa !230
  %cmp20.us = icmp eq i32 %9, %tuple_count
  br i1 %cmp20.us, label %for.body.lr.ph.us, label %if.end59.us

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call30.us, label %do.body.us, label %if.end59.us

do.body.us:                                       ; preds = %for.cond.cleanup.us
  %10 = and i8 %spec.select.us, 1
  %tobool41.not.us = icmp eq i8 %10, 0
  br i1 %tobool41.not.us, label %if.then42.us, label %for.body48.us.preheader

for.body48.us.preheader:                          ; preds = %if.then42.us, %do.body.us
  br label %for.body48.us

if.then42.us:                                     ; preds = %do.body.us
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.9.46, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %for.body48.us.preheader

if.end59.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true18.us, %land.lhs.true15.us, %land.lhs.true12.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 0
  %entry6.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0.us, null
  br i1 %cmp.not.us, label %for.cond61.preheader, label %while.body.us, !llvm.loop !289

for.body48.us:                                    ; preds = %for.body48.us.preheader, %for.body48.us
  %indvars.iv244 = phi i64 [ %indvars.iv.next245, %for.body48.us ], [ 0, %for.body48.us.preheader ]
  %arrayidx50.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv244
  %11 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx50.us, align 8, !tbaa !10
  %host51.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %11, i64 0, i32 2
  %12 = load i8*, i8** %host51.us, align 8, !tbaa !172
  %call52.us = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %12) #16
  %entry53.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call52.us, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry53.us, align 8, !tbaa !286
  %indvars.iv.next245 = add nuw nsw i64 %indvars.iv244, 1
  %exitcond247.not = icmp eq i64 %indvars.iv.next245, %4
  br i1 %exitcond247.not, label %cleanup132, label %for.body48.us, !llvm.loop !290

for.body.us:                                      ; preds = %for.body.lr.ph.us, %for.body.us
  %13 = phi %struct.halide_buffer_t* [ %.pre, %for.body.lr.ph.us ], [ %16, %for.body.us ]
  %indvars.iv242 = phi i64 [ 0, %for.body.lr.ph.us ], [ %indvars.iv.next243, %for.body.us ]
  %no_host_pointers_equal.0222.us = phi i8 [ 1, %for.body.lr.ph.us ], [ %spec.select.us, %for.body.us ]
  %arrayidx24.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv242
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx24.us, align 8, !tbaa !10
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %13, i64 %indvars.iv242, i32 6
  %15 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call30.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %14, %struct.halide_dimension_t* %15) #16
  %16 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  %host35.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %16, i64 %indvars.iv242, i32 2
  %17 = load i8*, i8** %host35.us, align 8, !tbaa !172
  %host36.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %14, i64 0, i32 2
  %18 = load i8*, i8** %host36.us, align 8, !tbaa !172
  %cmp37.us = icmp eq i8* %17, %18
  %spec.select.us = select i1 %cmp37.us, i8 0, i8 %no_host_pointers_equal.0222.us
  %indvars.iv.next243 = add nuw nsw i64 %indvars.iv242, 1
  %cmp22.us = icmp ult i64 %indvars.iv.next243, %4
  %19 = and i1 %cmp22.us, %call30.us
  br i1 %19, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !291

for.body.lr.ph.us:                                ; preds = %land.lhs.true18.us
  %buf27.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 11
  %.pre = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  br label %for.body.us

for.cond61.preheader:                             ; preds = %if.end59, %if.end59.us, %entry
  %cmp62218 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp62218, label %for.body64.preheader, label %for.cond.cleanup63

for.body64.preheader:                             ; preds = %for.cond61.preheader
  %wide.trip.count240 = zext i32 %tuple_count to i64
  br label %for.body64

while.body:                                       ; preds = %while.body.lr.ph, %if.end59
  %entry6.0230 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0, %if.end59 ], [ %entry6.0228, %while.body.lr.ph ]
  %hash8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 6
  %20 = load i32, i32* %hash8, align 8, !tbaa !253
  %cmp9 = icmp eq i32 %20, %2
  br i1 %cmp9, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 4
  %21 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp11 = icmp eq i64 %21, %conv10
  br i1 %cmp11, label %land.lhs.true12, label %if.end59

land.lhs.true12:                                  ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 5
  %22 = load i8*, i8** %key, align 8, !tbaa !257
  %call14 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %22, i8* %cache_key, i64 %conv10) #16
  br i1 %call14, label %land.lhs.true15, label %if.end59

land.lhs.true15:                                  ; preds = %land.lhs.true12
  %computed_bounds16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 10
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16, align 8, !tbaa !256
  %call17 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %23) #16
  br i1 %call17, label %land.lhs.true18, label %if.end59

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %tuple_count19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 8
  %24 = load i32, i32* %tuple_count19, align 8, !tbaa !230
  %cmp20 = icmp eq i32 %24, %tuple_count
  br i1 %cmp20, label %cleanup132, label %if.end59

if.end59:                                         ; preds = %land.lhs.true18, %land.lhs.true15, %land.lhs.true12, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 0
  %entry6.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0, null
  br i1 %cmp.not, label %for.cond61.preheader, label %while.body, !llvm.loop !289

for.cond.cleanup63:                               ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.cond61.preheader
  %added_size.0.lcssa = phi i64 [ 0, %for.cond61.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %25 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %add73 = add i64 %25, %added_size.0.lcssa
  store i64 %add73, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #16
  %call74 = tail call i8* @halide_malloc(i8* null, i64 96) #14
  %tobool75.not = icmp eq i8* %call74, null
  br i1 %tobool75.not, label %if.then83, label %if.then76

for.body64:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body64.preheader
  %indvars.iv238 = phi i64 [ 0, %for.body64.preheader ], [ %indvars.iv.next239, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %added_size.0219 = phi i64 [ 0, %for.body64.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %arrayidx67 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv238
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx67, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 5
  %27 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %27, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body64
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 6
  %28 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %27 to i64
  %min.iters.check39 = icmp ult i32 %27, 17
  br i1 %min.iters.check39, label %for.body.i.i.preheader, label %vector.ph40

vector.ph40:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf41 = and i64 %wide.trip.count.i.i, 15
  %29 = icmp eq i64 %n.mod.vf41, 0
  %30 = select i1 %29, i64 16, i64 %n.mod.vf41
  %n.vec42 = sub nsw i64 %wide.trip.count.i.i, %30
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph40
  %index43 = phi i64 [ 0, %vector.ph40 ], [ %index.next44, %vector.body38 ]
  %vec.ind47 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph40 ], [ %vec.ind.next52, %vector.body38 ]
  %vec.phi53 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi69, %vector.body38 ]
  %vec.phi54 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi70, %vector.body38 ]
  %vec.phi55 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi71, %vector.body38 ]
  %vec.phi56 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi72, %vector.body38 ]
  %step.add48 = add <4 x i64> %vec.ind47, <i64 4, i64 4, i64 4, i64 4>
  %step.add49 = add <4 x i64> %vec.ind47, <i64 8, i64 8, i64 8, i64 8>
  %step.add50 = add <4 x i64> %vec.ind47, <i64 12, i64 12, i64 12, i64 12>
  %31 = or i64 %index43, 4
  %32 = or i64 %index43, 8
  %33 = or i64 %index43, 12
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index43, i32 2
  %35 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %31, i32 2
  %36 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %32, i32 2
  %37 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %33, i32 2
  %38 = bitcast i32* %34 to <16 x i32>*
  %39 = bitcast i32* %35 to <16 x i32>*
  %40 = bitcast i32* %36 to <16 x i32>*
  %41 = bitcast i32* %37 to <16 x i32>*
  %wide.vec57 = load <16 x i32>, <16 x i32>* %38, align 4, !tbaa !182
  %wide.vec58 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !182
  %wide.vec59 = load <16 x i32>, <16 x i32>* %40, align 4, !tbaa !182
  %wide.vec60 = load <16 x i32>, <16 x i32>* %41, align 4, !tbaa !182
  %strided.vec61 = shufflevector <16 x i32> %wide.vec57, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec62 = shufflevector <16 x i32> %wide.vec58, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec63 = shufflevector <16 x i32> %wide.vec59, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec64 = shufflevector <16 x i32> %wide.vec60, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %42 = icmp sgt <4 x i32> %strided.vec61, zeroinitializer
  %43 = icmp sgt <4 x i32> %strided.vec62, zeroinitializer
  %44 = icmp sgt <4 x i32> %strided.vec63, zeroinitializer
  %45 = icmp sgt <4 x i32> %strided.vec64, zeroinitializer
  %46 = zext <4 x i32> %strided.vec61 to <4 x i64>
  %47 = zext <4 x i32> %strided.vec62 to <4 x i64>
  %48 = zext <4 x i32> %strided.vec63 to <4 x i64>
  %49 = zext <4 x i32> %strided.vec64 to <4 x i64>
  %50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind47, i32 1
  %51 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add48, i32 1
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add49, i32 1
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add50, i32 1
  %wide.masked.gather65 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %50, i32 4, <4 x i1> %42, <4 x i32> undef), !tbaa !178
  %wide.masked.gather66 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %51, i32 4, <4 x i1> %43, <4 x i32> undef), !tbaa !178
  %wide.masked.gather67 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %52, i32 4, <4 x i1> %44, <4 x i32> undef), !tbaa !178
  %wide.masked.gather68 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %53, i32 4, <4 x i1> %45, <4 x i32> undef), !tbaa !178
  %54 = add nsw <4 x i32> %wide.masked.gather65, <i32 -1, i32 -1, i32 -1, i32 -1>
  %55 = add nsw <4 x i32> %wide.masked.gather66, <i32 -1, i32 -1, i32 -1, i32 -1>
  %56 = add nsw <4 x i32> %wide.masked.gather67, <i32 -1, i32 -1, i32 -1, i32 -1>
  %57 = add nsw <4 x i32> %wide.masked.gather68, <i32 -1, i32 -1, i32 -1, i32 -1>
  %58 = sext <4 x i32> %54 to <4 x i64>
  %59 = sext <4 x i32> %55 to <4 x i64>
  %60 = sext <4 x i32> %56 to <4 x i64>
  %61 = sext <4 x i32> %57 to <4 x i64>
  %62 = mul nsw <4 x i64> %58, %46
  %63 = mul nsw <4 x i64> %59, %47
  %64 = mul nsw <4 x i64> %60, %48
  %65 = mul nsw <4 x i64> %61, %49
  %66 = select <4 x i1> %42, <4 x i64> %62, <4 x i64> zeroinitializer
  %predphi69 = add <4 x i64> %vec.phi53, %66
  %67 = select <4 x i1> %43, <4 x i64> %63, <4 x i64> zeroinitializer
  %predphi70 = add <4 x i64> %vec.phi54, %67
  %68 = select <4 x i1> %44, <4 x i64> %64, <4 x i64> zeroinitializer
  %predphi71 = add <4 x i64> %vec.phi55, %68
  %69 = select <4 x i1> %45, <4 x i64> %65, <4 x i64> zeroinitializer
  %predphi72 = add <4 x i64> %vec.phi56, %69
  %index.next44 = add i64 %index43, 16
  %vec.ind.next52 = add <4 x i64> %vec.ind47, <i64 16, i64 16, i64 16, i64 16>
  %70 = icmp eq i64 %index.next44, %n.vec42
  br i1 %70, label %middle.block36, label %vector.body38, !llvm.loop !292

middle.block36:                                   ; preds = %vector.body38
  %bin.rdx73 = add <4 x i64> %predphi70, %predphi69
  %bin.rdx74 = add <4 x i64> %predphi71, %bin.rdx73
  %bin.rdx75 = add <4 x i64> %predphi72, %bin.rdx74
  %71 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx75)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block36, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec42, %middle.block36 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %71, %middle.block36 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 2
  %72 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %72, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %72 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 1
  %73 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %73, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !293

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %27, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader77, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %74 = icmp eq i64 %n.mod.vf, 0
  %75 = select i1 %74, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %75
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi19 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi31, %vector.body ]
  %vec.phi20 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi32, %vector.body ]
  %vec.phi21 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi33, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add16 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add17 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %76 = or i64 %index, 4
  %77 = or i64 %index, 8
  %78 = or i64 %index, 12
  %79 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 2
  %80 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %76, i32 2
  %81 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %77, i32 2
  %82 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %78, i32 2
  %83 = bitcast i32* %79 to <16 x i32>*
  %84 = bitcast i32* %80 to <16 x i32>*
  %85 = bitcast i32* %81 to <16 x i32>*
  %86 = bitcast i32* %82 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %83, align 4, !tbaa !182
  %wide.vec22 = load <16 x i32>, <16 x i32>* %84, align 4, !tbaa !182
  %wide.vec23 = load <16 x i32>, <16 x i32>* %85, align 4, !tbaa !182
  %wide.vec24 = load <16 x i32>, <16 x i32>* %86, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec25 = shufflevector <16 x i32> %wide.vec22, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec26 = shufflevector <16 x i32> %wide.vec23, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec27 = shufflevector <16 x i32> %wide.vec24, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %87 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %88 = icmp slt <4 x i32> %strided.vec25, zeroinitializer
  %89 = icmp slt <4 x i32> %strided.vec26, zeroinitializer
  %90 = icmp slt <4 x i32> %strided.vec27, zeroinitializer
  %91 = sext <4 x i32> %strided.vec to <4 x i64>
  %92 = sext <4 x i32> %strided.vec25 to <4 x i64>
  %93 = sext <4 x i32> %strided.vec26 to <4 x i64>
  %94 = sext <4 x i32> %strided.vec27 to <4 x i64>
  %95 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind, i32 1
  %96 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add, i32 1
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add16, i32 1
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add17, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %95, i32 4, <4 x i1> %87, <4 x i32> undef), !tbaa !178
  %wide.masked.gather28 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %96, i32 4, <4 x i1> %88, <4 x i32> undef), !tbaa !178
  %wide.masked.gather29 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %97, i32 4, <4 x i1> %89, <4 x i32> undef), !tbaa !178
  %wide.masked.gather30 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %98, i32 4, <4 x i1> %90, <4 x i32> undef), !tbaa !178
  %99 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %100 = add nsw <4 x i32> %wide.masked.gather28, <i32 -1, i32 -1, i32 -1, i32 -1>
  %101 = add nsw <4 x i32> %wide.masked.gather29, <i32 -1, i32 -1, i32 -1, i32 -1>
  %102 = add nsw <4 x i32> %wide.masked.gather30, <i32 -1, i32 -1, i32 -1, i32 -1>
  %103 = sext <4 x i32> %99 to <4 x i64>
  %104 = sext <4 x i32> %100 to <4 x i64>
  %105 = sext <4 x i32> %101 to <4 x i64>
  %106 = sext <4 x i32> %102 to <4 x i64>
  %107 = mul nsw <4 x i64> %103, %91
  %108 = mul nsw <4 x i64> %104, %92
  %109 = mul nsw <4 x i64> %105, %93
  %110 = mul nsw <4 x i64> %106, %94
  %111 = select <4 x i1> %87, <4 x i64> %107, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %111
  %112 = select <4 x i1> %88, <4 x i64> %108, <4 x i64> zeroinitializer
  %predphi31 = add <4 x i64> %vec.phi19, %112
  %113 = select <4 x i1> %89, <4 x i64> %109, <4 x i64> zeroinitializer
  %predphi32 = add <4 x i64> %vec.phi20, %113
  %114 = select <4 x i1> %90, <4 x i64> %110, <4 x i64> zeroinitializer
  %predphi33 = add <4 x i64> %vec.phi21, %114
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %115 = icmp eq i64 %index.next, %n.vec
  br i1 %115, label %middle.block, label %vector.body, !llvm.loop !294

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi31, %predphi
  %bin.rdx34 = add <4 x i64> %predphi32, %bin.rdx
  %bin.rdx35 = add <4 x i64> %predphi33, %bin.rdx34
  %116 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx35)
  br label %for.body.i13.i.preheader77

for.body.i13.i.preheader77:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %116, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader77, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader77 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader77 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 2
  %117 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %117, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %117 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 1
  %118 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %118, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !295

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body64
  %add8.i27.i = phi i64 [ 1, %for.body64 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body64 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 4, i32 1
  %119 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %119 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add = add i64 %mul.i, %added_size.0219
  %indvars.iv.next239 = add nuw nsw i64 %indvars.iv238, 1
  %exitcond241.not = icmp eq i64 %indvars.iv.next239, %wide.trip.count240
  br i1 %exitcond241.not, label %for.cond.cleanup63, label %for.body64, !llvm.loop !296

if.then76:                                        ; preds = %for.cond.cleanup63
  %120 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"*
  %conv77 = sext i32 %size to i64
  %call79 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %120, i8* %cache_key, i64 %conv77, i32 %2, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** nonnull %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) #16
  br i1 %call79, label %if.end101, label %if.then83

if.then83:                                        ; preds = %if.then76, %for.cond.cleanup63
  %121 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %sub = sub i64 %121, %added_size.0.lcssa
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br i1 %cmp62218, label %for.body88.preheader, label %for.cond.cleanup87

for.body88.preheader:                             ; preds = %if.then83
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body88

for.cond.cleanup87:                               ; preds = %for.body88, %if.then83
  br i1 %tobool75.not, label %cleanup132, label %if.then99

for.body88:                                       ; preds = %for.body88, %for.body88.preheader
  %indvars.iv = phi i64 [ 0, %for.body88.preheader ], [ %indvars.iv.next, %for.body88 ]
  %arrayidx90 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %122 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx90, align 8, !tbaa !10
  %host91 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %122, i64 0, i32 2
  %123 = load i8*, i8** %host91, align 8, !tbaa !172
  %call92 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %123) #16
  %entry93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call92, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry93, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup87, label %for.body88, !llvm.loop !297

if.then99:                                        ; preds = %for.cond.cleanup87
  tail call void @halide_free(i8* %user_context, i8* nonnull %call74) #14
  br label %cleanup132

if.end101:                                        ; preds = %if.then76
  %124 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %next104 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %124, %"struct.Halide::Runtime::Internal::CacheEntry"** %next104, align 8, !tbaa !227
  %125 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %less_recent = getelementptr inbounds i8, i8* %call74, i64 16
  %126 = bitcast i8* %less_recent to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %125, %"struct.Halide::Runtime::Internal::CacheEntry"** %126, align 8, !tbaa !251
  %cmp105.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %125, null
  br i1 %cmp105.not, label %if.end107, label %if.then106

if.then106:                                       ; preds = %if.end101
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %125, i64 0, i32 1
  %127 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent to i8**
  store i8* %call74, i8** %127, align 8, !tbaa !268
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.end101
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE to i8**), align 8, !tbaa !10
  %128 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp108 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %128, null
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.end107
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE to i8**), align 8, !tbaa !10
  br label %if.end110

if.end110:                                        ; preds = %if.then109, %if.end107
  %129 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7 to i8**
  store i8* %call74, i8** %129, align 8, !tbaa !10
  %in_use_count = getelementptr inbounds i8, i8* %call74, i64 52
  %130 = bitcast i8* %in_use_count to i32*
  store i32 %tuple_count, i32* %130, align 4, !tbaa !254
  br i1 %cmp62218, label %for.body117.preheader, label %cleanup132

for.body117.preheader:                            ; preds = %if.end110
  %wide.trip.count236 = zext i32 %tuple_count to i64
  br label %for.body117

for.body117:                                      ; preds = %for.body117, %for.body117.preheader
  %indvars.iv234 = phi i64 [ 0, %for.body117.preheader ], [ %indvars.iv.next235, %for.body117 ]
  %arrayidx119 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv234
  %131 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx119, align 8, !tbaa !10
  %host120 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %131, i64 0, i32 2
  %132 = load i8*, i8** %host120, align 8, !tbaa !172
  %call121 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %132) #16
  %133 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call121 to i8**
  store i8* %call74, i8** %133, align 8, !tbaa !286
  %indvars.iv.next235 = add nuw nsw i64 %indvars.iv234, 1
  %exitcond237.not = icmp eq i64 %indvars.iv.next235, %wide.trip.count236
  br i1 %exitcond237.not, label %cleanup132, label %for.body117, !llvm.loop !298

cleanup132:                                       ; preds = %land.lhs.true18, %for.body48.us, %for.body117, %if.end110, %if.then99, %for.cond.cleanup87
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  ret i32 0
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_release(i8* %user_context, i8* %host) local_unnamed_addr #4 {
entry:
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) #16
  %entry2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry2, align 8, !tbaa !286
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call to i8*
  tail call void @halide_free(i8* %user_context, i8* %1) #14
  br label %if.end6

if.else:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %0, i64 0, i32 7
  %2 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3.not = icmp eq i32 %2, 0
  br i1 %cmp3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.else
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.12.47, i64 0, i64 0)) #14
  tail call void @abort() #14
  %.pre = load i32, i32* %in_use_count, align 4, !tbaa !254
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.else
  %3 = phi i32 [ %.pre, %if.then4 ], [ %2, %if.else ]
  %dec = add i32 %3, -1
  store i32 %dec, i32* %in_use_count, align 4, !tbaa !254
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  br label %if.end6

if.end6:                                          ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_evict(i8* %user_context, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  br label %for.body

for.cond.cleanup:                                 ; preds = %if.end25
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  ret void

for.body:                                         ; preds = %if.end25, %entry
  %__begin1.059 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %if.end25 ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, align 8, !tbaa !10
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not, label %if.end25, label %while.body

while.body:                                       ; preds = %for.body, %if.end24
  %prev.058 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.1, %if.end24 ], [ %__begin1.059, %for.body ]
  %entry1.056 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %if.end24 ], [ %0, %for.body ]
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next4, align 8, !tbaa !227
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 13
  %2 = load i8, i8* %has_eviction_key, align 8, !tbaa !261, !range !17
  %tobool.not = icmp eq i8 %2, 0
  br i1 %tobool.not, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %eviction_key5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 12
  %3 = load i64, i64* %eviction_key5, align 8, !tbaa !262
  %cmp6 = icmp eq i64 %3, %eviction_key
  br i1 %cmp6, label %if.then7, label %if.end24

if.then7:                                         ; preds = %land.lhs.true
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %1, %"struct.Halide::Runtime::Internal::CacheEntry"** %prev.058, align 8, !tbaa !10
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 1
  %4 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp8.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %4, null
  %less_recent12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 2
  %5 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br i1 %cmp8.not, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.then7
  %less_recent11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %4, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent11, align 8, !tbaa !251
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br label %if.end

if.else:                                          ; preds = %if.then7
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then9
  %6 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %5, %if.else ], [ %.pre, %if.then9 ]
  %cmp14.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %more_recent18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 1
  %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink = select i1 %cmp14.not, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %4, %"struct.Halide::Runtime::Internal::CacheEntry"** %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink, align 8, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.056) #16
  %7 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056 to i8*
  tail call void @halide_free(i8* %user_context, i8* nonnull %7) #14
  br label %if.end24

if.end24:                                         ; preds = %if.end, %land.lhs.true, %while.body
  %prev.1 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.058, %if.end ], [ %next4, %land.lhs.true ], [ %next4, %while.body ]
  %cmp3.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp3.not, label %if.end25, label %while.body, !llvm.loop !299

if.end25:                                         ; preds = %if.end24, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i64 0, i64 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !14
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !14
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !14
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i64 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i64 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #15
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !14
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i64 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #16
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #15
  ret i8* %call

for.body:                                         ; preds = %entry, %for.body
  %arg.addr.017 = phi i64 [ %div, %for.body ], [ %arg, %entry ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body ], [ %add.ptr, %entry ]
  %i.015 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i64 -1
  %inc = add nuw nsw i32 %i.015, 1
  %cmp = icmp slt i32 %inc, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body, label %for.cond.cleanup, !llvm.loop !300
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i64 1
  store i8 45, i8* %dst, align 1, !tbaa !14
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !164
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #15
  store i64 0, i64* %bits, align 8, !tbaa !110
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i64 8) #14
  %2 = load i64, i64* %bits, align 8, !tbaa !110
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.57, i64 0, i64 0)) #16
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.58, i64 0, i64 0)) #16
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.59, i64 0, i64 0)) #16
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.60, i64 0, i64 0)) #16
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.61, i64 0, i64 0)) #16
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.62, i64 0, i64 0)) #16
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.63, i64 0, i64 0)) #16
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.64, i64 0, i64 0)) #16
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9.65, i64 0, i64 0)) #16
  %4 = load double, double* %arg.addr, align 8, !tbaa !164
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !164
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !164
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.body, label %while.cond40thread-pre-split

while.body:                                       ; preds = %while.condthread-pre-split, %while.body
  %exponent_base_10.0277 = phi i32 [ %dec, %while.body ], [ 0, %while.condthread-pre-split ]
  %5 = phi double [ %mul, %while.body ], [ %.pr, %while.condthread-pre-split ]
  %mul = fmul double %5, 1.000000e+01
  %dec = add nsw i32 %exponent_base_10.0277, -1
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !301

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !164
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr261 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr261, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr261, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !302

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !164
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr261, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #16
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #16
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11.67, i64 0, i64 0)) #16
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.68, i64 0, i64 0)) #16
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59262 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59262, i32 2) #16
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #16
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %integer_part.0 = select i1 %cmp72, i64 0, i64 %shr77
  %sub81 = select i1 %cmp72, i64 0, i64 %shl80
  %f.0.in = sub i64 %add67, %sub81
  %f.0 = uitofp i64 %f.0.in to double
  %conv84258 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84258, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond259 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond259 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select260 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.then71, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.then71 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.then71 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select260, %if.then71 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #15
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #16
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader.preheader, label %for.cond.cleanup

for.cond111.preheader.preheader:                  ; preds = %if.end104
  %xtraiter = and i32 %integer_exponent.0, 1
  %9 = icmp eq i32 %integer_exponent.0, 1
  br i1 %9, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader.preheader.new

for.cond111.preheader.preheader.new:              ; preds = %for.cond111.preheader.preheader
  %unroll_iter = and i32 %integer_exponent.0, -2
  br label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %if.end137.1, %for.cond111.preheader.preheader.new
  %int_part_ptr.0268 = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader.new ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %niter = phi i32 [ %unroll_iter, %for.cond111.preheader.preheader.new ], [ %niter.nsub.1, %if.end137.1 ]
  %cmp113.not264 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not264, label %if.end137, label %for.body115

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %if.end137.1, %for.cond111.preheader.preheader
  %int_part_ptr.1.lcssa.ph = phi i8* [ undef, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %int_part_ptr.0268.unr = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.cond111.preheader.epil

for.cond111.preheader.epil:                       ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %cmp113.not264.epil = icmp eq i8* %call108, %int_part_ptr.0268.unr
  br i1 %cmp113.not264.epil, label %for.cond.cleanup, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.cond111.preheader.epil, %for.body115.epil
  %p.0266.pn.epil = phi i8* [ %p.0266.epil, %for.body115.epil ], [ %call108, %for.cond111.preheader.epil ]
  %carry.0265.epil = phi i32 [ %carry.1.epil, %for.body115.epil ], [ 0, %for.cond111.preheader.epil ]
  %p.0266.epil = getelementptr inbounds i8, i8* %p.0266.pn.epil, i64 -1
  %10 = load i8, i8* %p.0266.epil, align 1, !tbaa !14
  %sub117.epil = add i8 %10, -48
  %conv119.epil = sext i8 %sub117.epil to i32
  %mul120.epil = shl nsw i32 %conv119.epil, 1
  %add121.epil = or i32 %mul120.epil, %carry.0265.epil
  %11 = trunc i32 %add121.epil to i8
  %cmp124.epil = icmp sgt i8 %11, 9
  %sub127.epil = add nsw i32 %add121.epil, 246
  %carry.1.epil = zext i1 %cmp124.epil to i32
  %new_digit.0.in.epil = select i1 %cmp124.epil, i32 %sub127.epil, i32 %add121.epil
  %12 = trunc i32 %new_digit.0.in.epil to i8
  %conv133.epil = add i8 %12, 48
  store i8 %conv133.epil, i8* %p.0266.epil, align 1, !tbaa !14
  %cmp113.not.epil = icmp eq i8* %p.0266.epil, %int_part_ptr.0268.unr
  br i1 %cmp113.not.epil, label %for.cond.cleanup114.epil, label %for.body115.epil, !llvm.loop !303

for.cond.cleanup114.epil:                         ; preds = %for.body115.epil
  br i1 %cmp124.epil, label %if.then135.epil, label %for.cond.cleanup

if.then135.epil:                                  ; preds = %for.cond.cleanup114.epil
  %incdec.ptr136.epil = getelementptr inbounds i8, i8* %int_part_ptr.0268.unr, i64 -1
  store i8 49, i8* %incdec.ptr136.epil, align 1, !tbaa !14
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.cond111.preheader.epil, %for.cond.cleanup114.epil, %if.then135.epil, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %incdec.ptr136.epil, %if.then135.epil ], [ %int_part_ptr.0268.unr, %for.cond.cleanup114.epil ], [ %call108, %for.cond111.preheader.epil ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #16
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #16
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #15
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0266.pn = phi i8* [ %p.0266, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0265 = phi i32 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0266 = getelementptr inbounds i8, i8* %p.0266.pn, i64 -1
  %13 = load i8, i8* %p.0266, align 1, !tbaa !14
  %sub117 = add i8 %13, -48
  %conv119 = sext i8 %sub117 to i32
  %mul120 = shl nsw i32 %conv119, 1
  %add121 = or i32 %mul120, %carry.0265
  %14 = trunc i32 %add121 to i8
  %cmp124 = icmp sgt i8 %14, 9
  %sub127 = add nsw i32 %add121, 246
  %carry.1 = zext i1 %cmp124 to i32
  %new_digit.0.in = select i1 %cmp124, i32 %sub127, i32 %add121
  %15 = trunc i32 %new_digit.0.in to i8
  %conv133 = add i8 %15, 48
  store i8 %conv133, i8* %p.0266, align 1, !tbaa !14
  %cmp113.not = icmp eq i8* %p.0266, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !303

if.then135:                                       ; preds = %for.cond.cleanup114
  %incdec.ptr136 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i64 -1
  store i8 49, i8* %incdec.ptr136, align 1, !tbaa !14
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %incdec.ptr136, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %cmp113.not264.1 = icmp eq i8* %call108, %int_part_ptr.1
  br i1 %cmp113.not264.1, label %if.end137.1, label %for.body115.1

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #15
  ret i8* %retval.1

for.body115.1:                                    ; preds = %if.end137, %for.body115.1
  %p.0266.pn.1 = phi i8* [ %p.0266.1, %for.body115.1 ], [ %call108, %if.end137 ]
  %carry.0265.1 = phi i32 [ %carry.1.1, %for.body115.1 ], [ 0, %if.end137 ]
  %p.0266.1 = getelementptr inbounds i8, i8* %p.0266.pn.1, i64 -1
  %16 = load i8, i8* %p.0266.1, align 1, !tbaa !14
  %sub117.1 = add i8 %16, -48
  %conv119.1 = sext i8 %sub117.1 to i32
  %mul120.1 = shl nsw i32 %conv119.1, 1
  %add121.1 = or i32 %mul120.1, %carry.0265.1
  %17 = trunc i32 %add121.1 to i8
  %cmp124.1 = icmp sgt i8 %17, 9
  %sub127.1 = add nsw i32 %add121.1, 246
  %carry.1.1 = zext i1 %cmp124.1 to i32
  %new_digit.0.in.1 = select i1 %cmp124.1, i32 %sub127.1, i32 %add121.1
  %18 = trunc i32 %new_digit.0.in.1 to i8
  %conv133.1 = add i8 %18, 48
  store i8 %conv133.1, i8* %p.0266.1, align 1, !tbaa !14
  %cmp113.not.1 = icmp eq i8* %p.0266.1, %int_part_ptr.1
  br i1 %cmp113.not.1, label %for.cond.cleanup114.1, label %for.body115.1, !llvm.loop !303

for.cond.cleanup114.1:                            ; preds = %for.body115.1
  br i1 %cmp124.1, label %if.then135.1, label %if.end137.1

if.then135.1:                                     ; preds = %for.cond.cleanup114.1
  %incdec.ptr136.1 = getelementptr inbounds i8, i8* %int_part_ptr.1, i64 -1
  store i8 49, i8* %incdec.ptr136.1, align 1, !tbaa !14
  br label %if.end137.1

if.end137.1:                                      ; preds = %if.then135.1, %for.cond.cleanup114.1, %if.end137
  %int_part_ptr.1.1 = phi i8* [ %incdec.ptr136.1, %if.then135.1 ], [ %int_part_ptr.1, %for.cond.cleanup114.1 ], [ %call108, %if.end137 ]
  %niter.nsub.1 = add i32 %niter, -2
  %niter.ncmp.1 = icmp eq i32 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader, !llvm.loop !304
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i64 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 18
  %1 = ptrtoint i8* %arg to i64
  %and = and i64 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !14
  %shr = lshr i64 %1, 4
  %tobool.not = icmp eq i64 %shr, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %and.1 = and i64 %shr, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.1
  %3 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 16
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !14
  %shr.1 = lshr i64 %1, 8
  %tobool.not.1 = icmp eq i64 %shr.1, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.14, %for.cond.13, %for.cond.12, %for.cond.11, %for.cond.10, %for.cond.9, %for.cond.8, %for.cond.7, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ], [ %incdec.ptr.7, %for.cond.7 ], [ %incdec.ptr.8, %for.cond.8 ], [ %incdec.ptr.9, %for.cond.9 ], [ %incdec.ptr.10, %for.cond.10 ], [ %incdec.ptr.11, %for.cond.11 ], [ %incdec.ptr.12, %for.cond.12 ], [ %incdec.ptr.13, %for.cond.13 ], [ %incdec.ptr.14, %for.cond.14 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ], [ %incdec.ptr.8, %for.cond.7 ], [ %incdec.ptr.9, %for.cond.8 ], [ %incdec.ptr.10, %for.cond.9 ], [ %incdec.ptr.11, %for.cond.10 ], [ %incdec.ptr.12, %for.cond.11 ], [ %incdec.ptr.13, %for.cond.12 ], [ %incdec.ptr.14, %for.cond.13 ], [ %incdec.ptr.15, %for.cond.14 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i64 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !14
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !14
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #16
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #15
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %and.2 = and i64 %shr.1, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.2
  %4 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 15
  store i8 %4, i8* %incdec.ptr.1, align 1, !tbaa !14
  %shr.2 = lshr i64 %1, 12
  %tobool.not.2 = icmp eq i64 %shr.2, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %and.3 = and i64 %shr.2, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.3
  %5 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 14
  store i8 %5, i8* %incdec.ptr.2, align 1, !tbaa !14
  %shr.3 = lshr i64 %1, 16
  %tobool.not.3 = icmp eq i64 %shr.3, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %and.4 = and i64 %shr.3, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.4
  %6 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 13
  store i8 %6, i8* %incdec.ptr.3, align 1, !tbaa !14
  %shr.4 = lshr i64 %1, 20
  %tobool.not.4 = icmp eq i64 %shr.4, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %and.5 = and i64 %shr.4, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.5
  %7 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 12
  store i8 %7, i8* %incdec.ptr.4, align 1, !tbaa !14
  %shr.5 = lshr i64 %1, 24
  %tobool.not.5 = icmp eq i64 %shr.5, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %and.6 = and i64 %shr.5, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.6
  %8 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 11
  store i8 %8, i8* %incdec.ptr.5, align 1, !tbaa !14
  %shr.6 = lshr i64 %1, 28
  %tobool.not.6 = icmp eq i64 %shr.6, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %and.7 = and i64 %shr.6, 15
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.7
  %9 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 10
  store i8 %9, i8* %incdec.ptr.6, align 1, !tbaa !14
  %shr.7 = lshr i64 %1, 32
  %tobool.not.7 = icmp eq i64 %shr.7, 0
  br i1 %tobool.not.7, label %cleanup, label %for.cond.7

for.cond.7:                                       ; preds = %for.cond.6
  %and.8 = and i64 %shr.7, 15
  %arrayidx.8 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.8
  %10 = load i8, i8* %arrayidx.8, align 1, !tbaa !14
  %incdec.ptr.8 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 9
  store i8 %10, i8* %incdec.ptr.7, align 1, !tbaa !14
  %shr.8 = lshr i64 %1, 36
  %tobool.not.8 = icmp eq i64 %shr.8, 0
  br i1 %tobool.not.8, label %cleanup, label %for.cond.8

for.cond.8:                                       ; preds = %for.cond.7
  %and.9 = and i64 %shr.8, 15
  %arrayidx.9 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.9
  %11 = load i8, i8* %arrayidx.9, align 1, !tbaa !14
  %incdec.ptr.9 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 8
  store i8 %11, i8* %incdec.ptr.8, align 1, !tbaa !14
  %shr.9 = lshr i64 %1, 40
  %tobool.not.9 = icmp eq i64 %shr.9, 0
  br i1 %tobool.not.9, label %cleanup, label %for.cond.9

for.cond.9:                                       ; preds = %for.cond.8
  %and.10 = and i64 %shr.9, 15
  %arrayidx.10 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.10
  %12 = load i8, i8* %arrayidx.10, align 1, !tbaa !14
  %incdec.ptr.10 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 7
  store i8 %12, i8* %incdec.ptr.9, align 1, !tbaa !14
  %shr.10 = lshr i64 %1, 44
  %tobool.not.10 = icmp eq i64 %shr.10, 0
  br i1 %tobool.not.10, label %cleanup, label %for.cond.10

for.cond.10:                                      ; preds = %for.cond.9
  %and.11 = and i64 %shr.10, 15
  %arrayidx.11 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.11
  %13 = load i8, i8* %arrayidx.11, align 1, !tbaa !14
  %incdec.ptr.11 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 6
  store i8 %13, i8* %incdec.ptr.10, align 1, !tbaa !14
  %shr.11 = lshr i64 %1, 48
  %tobool.not.11 = icmp eq i64 %shr.11, 0
  br i1 %tobool.not.11, label %cleanup, label %for.cond.11

for.cond.11:                                      ; preds = %for.cond.10
  %and.12 = and i64 %shr.11, 15
  %arrayidx.12 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.12
  %14 = load i8, i8* %arrayidx.12, align 1, !tbaa !14
  %incdec.ptr.12 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 5
  store i8 %14, i8* %incdec.ptr.11, align 1, !tbaa !14
  %shr.12 = lshr i64 %1, 52
  %tobool.not.12 = icmp eq i64 %shr.12, 0
  br i1 %tobool.not.12, label %cleanup, label %for.cond.12

for.cond.12:                                      ; preds = %for.cond.11
  %and.13 = and i64 %shr.12, 15
  %arrayidx.13 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.13
  %15 = load i8, i8* %arrayidx.13, align 1, !tbaa !14
  %incdec.ptr.13 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 4
  store i8 %15, i8* %incdec.ptr.12, align 1, !tbaa !14
  %shr.13 = lshr i64 %1, 56
  %tobool.not.13 = icmp eq i64 %shr.13, 0
  br i1 %tobool.not.13, label %cleanup, label %for.cond.13

for.cond.13:                                      ; preds = %for.cond.12
  %and.14 = and i64 %shr.13, 15
  %arrayidx.14 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.14
  %16 = load i8, i8* %arrayidx.14, align 1, !tbaa !14
  %incdec.ptr.14 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 3
  store i8 %16, i8* %incdec.ptr.13, align 1, !tbaa !14
  %shr.14 = lshr i64 %1, 60
  %tobool.not.14 = icmp eq i64 %shr.14, 0
  br i1 %tobool.not.14, label %cleanup, label %for.cond.14

for.cond.14:                                      ; preds = %for.cond.13
  %arrayidx.15 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %shr.14
  %17 = load i8, i8* %arrayidx.15, align 1, !tbaa !14
  %incdec.ptr.15 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 2
  store i8 %17, i8* %incdec.ptr.14, align 1, !tbaa !14
  br label %cleanup
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !305
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i64
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i64 0, i64 %2
  %switch.load = load i8*, i8** %switch.gep, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18.72, i64 0, i64 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #16
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !136
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #16
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !306
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19.77, i64 0, i64 0)) #16
  %5 = load i16, i16* %lanes, align 2, !tbaa !306
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20.78, i64 0, i64 0)) #16
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21.79, i64 0, i64 0)) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #16
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !307
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #16
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %3 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #16
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !308
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #16
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #16
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp1179 = icmp sgt i32 %5, 0
  br i1 %cmp1179, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call26, %for.body ]
  %call27 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %dst.addr.080 = phi i8* [ %call10, %for.body.lr.ph ], [ %call26, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.080, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.82, i64 0, i64 0)) #16
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 %indvars.iv, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !181
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #16
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 %indvars.iv, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !178
  %conv18 = sext i32 %9 to i64
  %call19 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv18, i32 1) #16
  %call20 = tail call i8* @halide_string_to_string(i8* %call19, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i64 %indvars.iv, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !182
  %conv24 = sext i32 %11 to i64
  %call25 = tail call i8* @halide_int64_to_string(i8* %call20, i8* %end, i64 %conv24, i32 1) #16
  %call26 = tail call i8* @halide_string_to_string(i8* %call25, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24.83, i64 0, i64 0)) #16
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !175
  %13 = sext i32 %12 to i64
  %cmp11 = icmp slt i64 %indvars.iv.next, %13
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !309

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call27, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 64
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 8, !tbaa !310
  %call = tail call i32 %0(i8* %user_context) #14
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !312

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15, !range !17
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i64 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !313
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 8, !tbaa !316
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !308
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 8, !tbaa !318
  %call = tail call i32 %1(i8* %user_context) #14
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.88, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.89, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !307
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !307
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.90, i64 0, i64 0)) #14
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #16
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 8, !tbaa !319
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.91, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.92, i64 0, i64 0)) #14
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 8, !tbaa !321
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #14
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #16
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.93, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 8, !tbaa !323
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.96, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 8, !tbaa !324
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([134 x i8], [134 x i8]* @.str.22.97, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.98, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.99, i64 0, i64 0)) #14
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 8, !tbaa !325
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #14
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26.100, i64 0, i64 0)) #14
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27.101, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 8, !tbaa !326
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([134 x i8], [134 x i8]* @.str.28.102, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %12 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #14
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29.103, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %4, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %4 to i64
  %min.iters.check = icmp ult i32 %4, 17
  br i1 %min.iters.check, label %for.body.i.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body.lr.ph.i.i
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %6 = icmp eq i64 %n.mod.vf, 0
  %7 = select i1 %6, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %7
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi6 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi18, %vector.body ]
  %vec.phi7 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi19, %vector.body ]
  %vec.phi8 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi20, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add3 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add4 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %8 = or i64 %index, 4
  %9 = or i64 %index, 8
  %10 = or i64 %index, 12
  %11 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 2
  %12 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %8, i32 2
  %13 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %9, i32 2
  %14 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %10, i32 2
  %15 = bitcast i32* %11 to <16 x i32>*
  %16 = bitcast i32* %12 to <16 x i32>*
  %17 = bitcast i32* %13 to <16 x i32>*
  %18 = bitcast i32* %14 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %15, align 4, !tbaa !182
  %wide.vec9 = load <16 x i32>, <16 x i32>* %16, align 4, !tbaa !182
  %wide.vec10 = load <16 x i32>, <16 x i32>* %17, align 4, !tbaa !182
  %wide.vec11 = load <16 x i32>, <16 x i32>* %18, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec9, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec10, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec11, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %19 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %20 = icmp sgt <4 x i32> %strided.vec12, zeroinitializer
  %21 = icmp sgt <4 x i32> %strided.vec13, zeroinitializer
  %22 = icmp sgt <4 x i32> %strided.vec14, zeroinitializer
  %23 = zext <4 x i32> %strided.vec to <4 x i64>
  %24 = zext <4 x i32> %strided.vec12 to <4 x i64>
  %25 = zext <4 x i32> %strided.vec13 to <4 x i64>
  %26 = zext <4 x i32> %strided.vec14 to <4 x i64>
  %27 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind, i32 1
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add, i32 1
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add3, i32 1
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add4, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %27, i32 4, <4 x i1> %19, <4 x i32> undef), !tbaa !178
  %wide.masked.gather15 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %28, i32 4, <4 x i1> %20, <4 x i32> undef), !tbaa !178
  %wide.masked.gather16 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %29, i32 4, <4 x i1> %21, <4 x i32> undef), !tbaa !178
  %wide.masked.gather17 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %30, i32 4, <4 x i1> %22, <4 x i32> undef), !tbaa !178
  %31 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %32 = add nsw <4 x i32> %wide.masked.gather15, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = add nsw <4 x i32> %wide.masked.gather16, <i32 -1, i32 -1, i32 -1, i32 -1>
  %34 = add nsw <4 x i32> %wide.masked.gather17, <i32 -1, i32 -1, i32 -1, i32 -1>
  %35 = sext <4 x i32> %31 to <4 x i64>
  %36 = sext <4 x i32> %32 to <4 x i64>
  %37 = sext <4 x i32> %33 to <4 x i64>
  %38 = sext <4 x i32> %34 to <4 x i64>
  %39 = mul nsw <4 x i64> %35, %23
  %40 = mul nsw <4 x i64> %36, %24
  %41 = mul nsw <4 x i64> %37, %25
  %42 = mul nsw <4 x i64> %38, %26
  %43 = select <4 x i1> %19, <4 x i64> %39, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %43
  %44 = select <4 x i1> %20, <4 x i64> %40, <4 x i64> zeroinitializer
  %predphi18 = add <4 x i64> %vec.phi6, %44
  %45 = select <4 x i1> %21, <4 x i64> %41, <4 x i64> zeroinitializer
  %predphi19 = add <4 x i64> %vec.phi7, %45
  %46 = select <4 x i1> %22, <4 x i64> %42, <4 x i64> zeroinitializer
  %predphi20 = add <4 x i64> %vec.phi8, %46
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %47 = icmp eq i64 %index.next, %n.vec
  br i1 %47, label %middle.block, label %vector.body, !llvm.loop !327

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi18, %predphi
  %bin.rdx21 = add <4 x i64> %predphi19, %bin.rdx
  %bin.rdx22 = add <4 x i64> %predphi20, %bin.rdx21
  %48 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx22)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec, %middle.block ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %48, %middle.block ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 2
  %49 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %49, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %49 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 1
  %50 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %50, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !328

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check26 = icmp ult i32 %4, 17
  br i1 %min.iters.check26, label %for.body.i13.i.preheader64, label %vector.ph27

vector.ph27:                                      ; preds = %for.body.i13.i.preheader
  %n.mod.vf28 = and i64 %wide.trip.count.i.i, 15
  %51 = icmp eq i64 %n.mod.vf28, 0
  %52 = select i1 %51, i64 16, i64 %n.mod.vf28
  %n.vec29 = sub nsw i64 %wide.trip.count.i.i, %52
  br label %vector.body25

vector.body25:                                    ; preds = %vector.body25, %vector.ph27
  %index30 = phi i64 [ 0, %vector.ph27 ], [ %index.next31, %vector.body25 ]
  %vec.ind34 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph27 ], [ %vec.ind.next39, %vector.body25 ]
  %vec.phi40 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi56, %vector.body25 ]
  %vec.phi41 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi57, %vector.body25 ]
  %vec.phi42 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi58, %vector.body25 ]
  %vec.phi43 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi59, %vector.body25 ]
  %step.add35 = add <4 x i64> %vec.ind34, <i64 4, i64 4, i64 4, i64 4>
  %step.add36 = add <4 x i64> %vec.ind34, <i64 8, i64 8, i64 8, i64 8>
  %step.add37 = add <4 x i64> %vec.ind34, <i64 12, i64 12, i64 12, i64 12>
  %53 = or i64 %index30, 4
  %54 = or i64 %index30, 8
  %55 = or i64 %index30, 12
  %56 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index30, i32 2
  %57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %53, i32 2
  %58 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %54, i32 2
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %55, i32 2
  %60 = bitcast i32* %56 to <16 x i32>*
  %61 = bitcast i32* %57 to <16 x i32>*
  %62 = bitcast i32* %58 to <16 x i32>*
  %63 = bitcast i32* %59 to <16 x i32>*
  %wide.vec44 = load <16 x i32>, <16 x i32>* %60, align 4, !tbaa !182
  %wide.vec45 = load <16 x i32>, <16 x i32>* %61, align 4, !tbaa !182
  %wide.vec46 = load <16 x i32>, <16 x i32>* %62, align 4, !tbaa !182
  %wide.vec47 = load <16 x i32>, <16 x i32>* %63, align 4, !tbaa !182
  %strided.vec48 = shufflevector <16 x i32> %wide.vec44, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec49 = shufflevector <16 x i32> %wide.vec45, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec50 = shufflevector <16 x i32> %wide.vec46, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec51 = shufflevector <16 x i32> %wide.vec47, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %64 = icmp slt <4 x i32> %strided.vec48, zeroinitializer
  %65 = icmp slt <4 x i32> %strided.vec49, zeroinitializer
  %66 = icmp slt <4 x i32> %strided.vec50, zeroinitializer
  %67 = icmp slt <4 x i32> %strided.vec51, zeroinitializer
  %68 = sext <4 x i32> %strided.vec48 to <4 x i64>
  %69 = sext <4 x i32> %strided.vec49 to <4 x i64>
  %70 = sext <4 x i32> %strided.vec50 to <4 x i64>
  %71 = sext <4 x i32> %strided.vec51 to <4 x i64>
  %72 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind34, i32 1
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add35, i32 1
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add36, i32 1
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add37, i32 1
  %wide.masked.gather52 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %72, i32 4, <4 x i1> %64, <4 x i32> undef), !tbaa !178
  %wide.masked.gather53 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %73, i32 4, <4 x i1> %65, <4 x i32> undef), !tbaa !178
  %wide.masked.gather54 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %74, i32 4, <4 x i1> %66, <4 x i32> undef), !tbaa !178
  %wide.masked.gather55 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %75, i32 4, <4 x i1> %67, <4 x i32> undef), !tbaa !178
  %76 = add nsw <4 x i32> %wide.masked.gather52, <i32 -1, i32 -1, i32 -1, i32 -1>
  %77 = add nsw <4 x i32> %wide.masked.gather53, <i32 -1, i32 -1, i32 -1, i32 -1>
  %78 = add nsw <4 x i32> %wide.masked.gather54, <i32 -1, i32 -1, i32 -1, i32 -1>
  %79 = add nsw <4 x i32> %wide.masked.gather55, <i32 -1, i32 -1, i32 -1, i32 -1>
  %80 = sext <4 x i32> %76 to <4 x i64>
  %81 = sext <4 x i32> %77 to <4 x i64>
  %82 = sext <4 x i32> %78 to <4 x i64>
  %83 = sext <4 x i32> %79 to <4 x i64>
  %84 = mul nsw <4 x i64> %80, %68
  %85 = mul nsw <4 x i64> %81, %69
  %86 = mul nsw <4 x i64> %82, %70
  %87 = mul nsw <4 x i64> %83, %71
  %88 = select <4 x i1> %64, <4 x i64> %84, <4 x i64> zeroinitializer
  %predphi56 = add <4 x i64> %vec.phi40, %88
  %89 = select <4 x i1> %65, <4 x i64> %85, <4 x i64> zeroinitializer
  %predphi57 = add <4 x i64> %vec.phi41, %89
  %90 = select <4 x i1> %66, <4 x i64> %86, <4 x i64> zeroinitializer
  %predphi58 = add <4 x i64> %vec.phi42, %90
  %91 = select <4 x i1> %67, <4 x i64> %87, <4 x i64> zeroinitializer
  %predphi59 = add <4 x i64> %vec.phi43, %91
  %index.next31 = add i64 %index30, 16
  %vec.ind.next39 = add <4 x i64> %vec.ind34, <i64 16, i64 16, i64 16, i64 16>
  %92 = icmp eq i64 %index.next31, %n.vec29
  br i1 %92, label %middle.block23, label %vector.body25, !llvm.loop !329

middle.block23:                                   ; preds = %vector.body25
  %bin.rdx60 = add <4 x i64> %predphi57, %predphi56
  %bin.rdx61 = add <4 x i64> %predphi58, %bin.rdx60
  %bin.rdx62 = add <4 x i64> %predphi59, %bin.rdx61
  %93 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx62)
  br label %for.body.i13.i.preheader64

for.body.i13.i.preheader64:                       ; preds = %middle.block23, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec29, %middle.block23 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %93, %middle.block23 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader64, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader64 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader64 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 2
  %94 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %94, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %94 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 1
  %95 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %95, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !330

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %if.end
  %add8.i27.i = phi i64 [ 1, %if.end ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %if.end ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %96 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %96 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i64 %mul.i) #14
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  store i8* %call2, i8** %host, align 8, !tbaa !172
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #16
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %97 = load i8*, i8** %host, align 8, !tbaa !172
  tail call void @halide_free(i8* %user_context, i8* %97) #14
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30.104, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #16
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #14
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31.105, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32.106, i64 0, i64 0)) #14
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #14
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !307
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 8, !tbaa !331
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #14
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33.107, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 8, !tbaa !332
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([134 x i8], [134 x i8]* @.str.34.108, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %3() #14
  store i64 %handle, i64* %device, align 8, !tbaa !174
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !174
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i64 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i64 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %7() #14
  store i64 0, i64* %device, align 8, !tbaa !174
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i64 0, i64 0)) #14
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !174
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #16
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !174
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 8, !tbaa !172
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !308
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !308
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !307
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %9 = load i8*, i8** %host34, align 8, !tbaa !172
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i64 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 8, !tbaa !333
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #15
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #16
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #16
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #15
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !307
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i64 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 8, !tbaa !314
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i64 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 8, !tbaa !333
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #16
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !307
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i64 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 8, !tbaa !314
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i64 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 8, !tbaa !333
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !308
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !308
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #16
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #16
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 8, !tbaa !314
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i64 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 8, !tbaa !333
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #14
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %1() #14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i64 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 8, !tbaa !314
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i64 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 8, !tbaa !320
  tail call void %4() #14
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #16
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %6() #14
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 8, !tbaa !314
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 8, !tbaa !322
  tail call void %9() #14
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #14
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i64 0, i64 0)) #14
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #14
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i64 0, i64 0)) #14
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 8, !tbaa !334
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #14
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i64 0, i64 0)) #14
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 8, !tbaa !335
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #14
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 8, !tbaa !336
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  store i64 0, i64* %device, align 8, !tbaa !174
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i64 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %5() #14
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !337
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #16
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #14
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #14
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.115, i64 0, i64 0)) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #14
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.116, i64 0, i64 0)) #14
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #14
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #14
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #14
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.118, i64 0, i64 0)) #14
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #14
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #14
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #14
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !73
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !73
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #15
  store i8 0, i8* %0, align 2, !tbaa !305
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !136
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !306
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #15
  store i8 0, i8* %1, align 2, !tbaa !305
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !136
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !306
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i64 4) #14
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i64 4) #14
  %call.i = call i8* @malloc(i64 1024) #14
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.120, i64 0, i64 0)) #14
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #14
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.121, i64 0, i64 0)) #14
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #14
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #15
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.122, i64 0, i64 0)) #14
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.123, i64 0, i64 0)) #14
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.124, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #14
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.126, i64 0, i64 0)) #14
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #14
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #14
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i64 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !14
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #14
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #14
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.128, i64 0, i64 0)) #14
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #14
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #14
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #14
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i100

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %if.end17.sink.split

if.else.i100:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i64
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i64
  %sub.ptr.sub.i.i97 = sub i64 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i64 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %call.i.i99 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %add.i.i98) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #14
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i100, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i100 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #14
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.133, i64 0, i64 0)) #14
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.134, i64 0, i64 0)) #14
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #14
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.137, i64 0, i64 0)) #14
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #14
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #14
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.139, i64 0, i64 0)) #14
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #14
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #14
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #14
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #14
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.140, i64 0, i64 0)) #14
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #14
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #14
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #14
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #14
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #14
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.144, i64 0, i64 0)) #14
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #14
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i64 0, i64 0)) #14
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.147, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0)) #14
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #14
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #14
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #14
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i64 0, i64 0)) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i64 0, i64 0)) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #14
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #14
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #14
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #14
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #14
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #14
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #14
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i64 0, i64 0)) #14
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #14
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #14
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.149, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i64 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !14
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #14
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #14
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #14
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #14
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #14
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #14
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.150, i64 0, i64 0)) #14
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.151, i64 0, i64 0)) #14
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #14
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i167

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %if.end

if.else.i167:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i64
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i64
  %sub.ptr.sub.i.i164 = sub i64 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i64 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %call.i.i166 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %add.i.i165) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #14
  br label %if.end

if.end:                                           ; preds = %if.else.i167, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i167 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #14
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #14
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #14
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #14
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #14
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i64 0, i64 0)) #14
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #14
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #14
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #14
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #14
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i64 0, i64 0)) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #14
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #14
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #14
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i64 0, i64 0)) #14
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -41
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_shutdown() #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #16
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  store i32 -2, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_join_thread(%struct.halide_thread* nonnull %0) #14
  store %struct.halide_thread* null, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  store i32 -1, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_profiler_report_unlocked(i8* null, %struct.halide_profiler_state* nonnull %call) #16
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* nonnull %call) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_profiler_state* @halide_profiler_get_state() local_unnamed_addr #2 {
entry:
  ret %struct.halide_profiler_state* @_ZZ25halide_profiler_get_stateE1s
}

; Function Attrs: nounwind
define weak void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %s) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit, label %if.then6.i

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry
  %sstr.sroa.125.0 = phi i8* [ %add.ptr.i, %if.then6.i ], [ null, %entry ]
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.0624 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not625 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0624, null
  br i1 %tobool.not625, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sub.ptr.rhs.cast.i.i348 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i349 = sub i64 1, %sub.ptr.rhs.cast.i.i348
  br label %for.body

for.cond.cleanup:                                 ; preds = %cleanup181, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sstr.sroa.19.0.lcssa = phi i8* [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit ], [ %sstr.sroa.19.15, %cleanup181 ]
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.cond.cleanup
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %for.cond.cleanup
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %sstr.sroa.19.0.lcssa to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret void

for.body:                                         ; preds = %cleanup181, %for.body.lr.ph
  %p.0627 = phi %struct.halide_profiler_pipeline_stats* [ %p.0624, %for.body.lr.ph ], [ %p.0, %cleanup181 ]
  %sstr.sroa.19.0626 = phi i8* [ %call.i, %for.body.lr.ph ], [ %sstr.sroa.19.15, %cleanup181 ]
  %time = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 0
  %0 = load i64, i64* %time, align 8, !tbaa !341
  %conv = uitofp i64 %0 to float
  %div = fdiv float %conv, 1.000000e+06
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %tobool1.not = icmp eq i32 %1, 0
  br i1 %tobool1.not, label %cleanup181, label %if.end

if.end:                                           ; preds = %for.body
  br i1 %tobool.not.i, label %if.end.split, label %if.then.i278

if.end.split:                                     ; preds = %if.end
  %active_threads_numerator1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %2 = load i64, i64* %active_threads_numerator1, align 8, !tbaa !344
  %active_threads_denominator2 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %3 = load i64, i64* %active_threads_denominator2, align 8, !tbaa !345
  %cmp3 = icmp eq i64 %2, %3
  %name4 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %4 = load i8*, i8** %name4, align 8, !tbaa !346
  %call.i2825 = tail call i8* @halide_string_to_string(i8* null, i8* %sstr.sroa.125.0, i8* %4) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

if.then.i278:                                     ; preds = %if.end
  store i8 0, i8* %call.i, align 1, !tbaa !14
  %active_threads_numerator6 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %5 = load i64, i64* %active_threads_numerator6, align 8, !tbaa !344
  %active_threads_denominator7 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %6 = load i64, i64* %active_threads_denominator7, align 8, !tbaa !345
  %cmp8 = icmp eq i64 %5, %6
  %name9 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %7 = load i8*, i8** %name9, align 8, !tbaa !346
  %call.i28210 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* %sstr.sroa.125.0, i8* %7) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit: ; preds = %if.end.split, %if.then.i278
  %8 = phi i64 [ %2, %if.end.split ], [ %5, %if.then.i278 ]
  %9 = phi i64 [ %3, %if.end.split ], [ %6, %if.then.i278 ]
  %10 = phi i1 [ %cmp3, %if.end.split ], [ %cmp8, %if.then.i278 ]
  %phi.call = phi i8* [ %call.i2825, %if.end.split ], [ %call.i28210, %if.then.i278 ]
  %call.i285 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  %call.i288 = tail call i8* @halide_string_to_string(i8* %call.i285, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8.165, i64 0, i64 0)) #14
  %conv.i = fpext float %div to double
  %call.i291 = tail call i8* @halide_double_to_string(i8* %call.i288, i8* %sstr.sroa.125.0, double %conv.i, i32 0) #14
  %call.i294 = tail call i8* @halide_string_to_string(i8* %call.i291, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.166, i64 0, i64 0)) #14
  %call.i297 = tail call i8* @halide_string_to_string(i8* %call.i294, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.167, i64 0, i64 0)) #14
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 12
  %11 = load i32, i32* %samples, align 4, !tbaa !347
  %conv.i300 = sext i32 %11 to i64
  %call.i301 = tail call i8* @halide_int64_to_string(i8* %call.i297, i8* %sstr.sroa.125.0, i64 %conv.i300, i32 1) #14
  %call.i304 = tail call i8* @halide_string_to_string(i8* %call.i301, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.168, i64 0, i64 0)) #14
  %12 = load i32, i32* %runs, align 8, !tbaa !343
  %conv.i307 = sext i32 %12 to i64
  %call.i308 = tail call i8* @halide_int64_to_string(i8* %call.i304, i8* %sstr.sroa.125.0, i64 %conv.i307, i32 1) #14
  %call.i311 = tail call i8* @halide_string_to_string(i8* %call.i308, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12.169, i64 0, i64 0)) #14
  %13 = load i32, i32* %runs, align 8, !tbaa !343
  %conv19 = sitofp i32 %13 to float
  %div20 = fdiv float %div, %conv19
  %conv.i314 = fpext float %div20 to double
  %call.i315 = tail call i8* @halide_double_to_string(i8* %call.i311, i8* %sstr.sroa.125.0, double %conv.i314, i32 0) #14
  %call.i318 = tail call i8* @halide_string_to_string(i8* %call.i315, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13.170, i64 0, i64 0)) #14
  br i1 %10, label %if.end28, label %if.then24

if.then24:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %conv3 = uitofp i64 %8 to double
  %conv5 = uitofp i64 %9 to double
  %add = fadd double %conv5, 1.000000e-10
  %div6 = fdiv double %conv3, %add
  %conv7 = fptrunc double %div6 to float
  %call.i321 = tail call i8* @halide_string_to_string(i8* %call.i318, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14.171, i64 0, i64 0)) #14
  %conv.i324 = fpext float %conv7 to double
  %call.i325 = tail call i8* @halide_double_to_string(i8* %call.i321, i8* %sstr.sroa.125.0, double %conv.i324, i32 0) #14
  %call.i328 = tail call i8* @halide_string_to_string(i8* %call.i325, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %sstr.sroa.19.1 = phi i8* [ %call.i318, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit ], [ %call.i328, %if.then24 ]
  %call.i331 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.1, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15.172, i64 0, i64 0)) #14
  %num_allocs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 13
  %14 = load i32, i32* %num_allocs, align 8, !tbaa !348
  %conv.i334 = sext i32 %14 to i64
  %call.i335 = tail call i8* @halide_int64_to_string(i8* %call.i331, i8* %sstr.sroa.125.0, i64 %conv.i334, i32 1) #14
  %call.i338 = tail call i8* @halide_string_to_string(i8* %call.i335, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.173, i64 0, i64 0)) #14
  %memory_peak = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 2
  %15 = load i64, i64* %memory_peak, align 8, !tbaa !349
  %call.i341 = tail call i8* @halide_uint64_to_string(i8* %call.i338, i8* %sstr.sroa.125.0, i64 %15, i32 1) #14
  %call.i344 = tail call i8* @halide_string_to_string(i8* %call.i341, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.174, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit, label %if.then.i352

if.then.i352:                                     ; preds = %if.end28
  %sub.ptr.lhs.cast.i.i347 = ptrtoint i8* %call.i344 to i64
  %add.i.i350 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i347
  %call.i.i351 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i350) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit: ; preds = %if.then.i352, %if.end28
  %retval.0.i = phi i8* [ %call.i, %if.then.i352 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end28 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i) #14
  %16 = load i64, i64* %time, align 8, !tbaa !341
  %tobool36.not = icmp eq i64 %16, 0
  br i1 %tobool36.not, label %lor.end, label %for.cond53.preheader

lor.end:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %memory_total = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 3
  %17 = load i64, i64* %memory_total, align 8, !tbaa !350
  %tobool37.not = icmp eq i64 %17, 0
  br i1 %tobool37.not, label %for.cond41.preheader, label %for.cond53.preheader

for.cond41.preheader:                             ; preds = %lor.end
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %18 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %cmp42589 = icmp sgt i32 %18, 0
  br i1 %cmp42589, label %for.body44.lr.ph, label %cleanup181

for.body44.lr.ph:                                 ; preds = %for.cond41.preheader
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  %19 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %20 = zext i32 %18 to i64
  br label %for.body44

for.cond41:                                       ; preds = %for.body44
  %exitcond.not = icmp eq i64 %indvars.iv.next, %20
  br i1 %exitcond.not, label %cleanup181, label %for.body44, !llvm.loop !353

for.body44:                                       ; preds = %for.cond41, %for.body44.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body44.lr.ph ], [ %indvars.iv.next, %for.cond41 ]
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %19, i64 %indvars.iv, i32 4
  %21 = load i64, i64* %stack_peak, align 8, !tbaa !354
  %tobool45.not = icmp eq i64 %21, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool45.not, label %for.cond41, label %for.cond53.preheader

for.cond53.preheader:                             ; preds = %for.body44, %lor.end, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %num_funcs54 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %22 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %cmp55621 = icmp sgt i32 %22, 0
  br i1 %cmp55621, label %for.body57.lr.ph, label %cleanup181

for.body57.lr.ph:                                 ; preds = %for.cond53.preheader
  %funcs59 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  br label %for.body57

for.body57:                                       ; preds = %cleanup172, %for.body57.lr.ph
  %indvars.iv630 = phi i64 [ 0, %for.body57.lr.ph ], [ %indvars.iv.next631, %cleanup172 ]
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358, label %if.then.i356

if.then.i356:                                     ; preds = %for.body57
  store i8 0, i8* %call.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358: ; preds = %if.then.i356, %for.body57
  %23 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs59, align 8, !tbaa !352
  %add.ptr61 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630
  %cmp62 = icmp eq i64 %indvars.iv630, 0
  br i1 %cmp62, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %time63 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %24 = load i64, i64* %time63, align 8, !tbaa !356
  %cmp64 = icmp eq i64 %24, 0
  br i1 %cmp64, label %cleanup172, label %if.end66

if.end66:                                         ; preds = %land.lhs.true, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %call.i361 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.175, i64 0, i64 0)) #14
  %name68 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 7
  %25 = load i8*, i8** %name68, align 8, !tbaa !357
  %call.i364 = tail call i8* @halide_string_to_string(i8* %call.i361, i8* %sstr.sroa.125.0, i8* %25) #14
  %call.i367 = tail call i8* @halide_string_to_string(i8* %call.i364, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19.176, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i591 = ptrtoint i8* %call.i367 to i64
  %sub.ptr.sub.i592 = sub i64 %sub.ptr.lhs.cast.i591, %sub.ptr.rhs.cast.i.i348
  %cmp73593 = icmp ult i64 %sub.ptr.sub.i592, 25
  br i1 %cmp73593, label %while.body, label %while.end

while.body:                                       ; preds = %if.end66, %while.body
  %sstr.sroa.19.3594 = phi i8* [ %call.i384, %while.body ], [ %call.i367, %if.end66 ]
  %call.i384 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.3594, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i = ptrtoint i8* %call.i384 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i.i348
  %cmp73 = icmp ult i64 %sub.ptr.sub.i, 25
  br i1 %cmp73, label %while.body, label %while.end, !llvm.loop !358

while.end:                                        ; preds = %while.body, %if.end66
  %sstr.sroa.19.3.lcssa = phi i8* [ %call.i367, %if.end66 ], [ %call.i384, %while.body ]
  %time75 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %26 = load i64, i64* %time75, align 8, !tbaa !356
  %conv76 = uitofp i64 %26 to float
  %27 = load i32, i32* %runs, align 8, !tbaa !343
  %conv78 = sitofp i32 %27 to float
  %mul = fmul float %conv78, 1.000000e+06
  %div79 = fdiv float %conv76, %mul
  %conv.i387 = fpext float %div79 to double
  %call.i388 = tail call i8* @halide_double_to_string(i8* %sstr.sroa.19.3.lcssa, i8* %sstr.sroa.125.0, double %conv.i387, i32 0) #14
  %tobool.not.i390 = icmp eq i8* %call.i388, null
  br i1 %tobool.not.i390, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, label %if.then.i393

if.then.i393:                                     ; preds = %while.end
  %add.ptr.i391 = getelementptr inbounds i8, i8* %call.i388, i64 -3
  %cmp.i = icmp ult i8* %add.ptr.i391, %call.i
  %spec.store.select.i = select i1 %cmp.i, i8* %call.i, i8* %add.ptr.i391
  store i8 0, i8* %spec.store.select.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit: ; preds = %if.then.i393, %while.end
  %sstr.sroa.19.4 = phi i8* [ null, %while.end ], [ %spec.store.select.i, %if.then.i393 ]
  %call.i399 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.4, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.178, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i400596 = ptrtoint i8* %call.i399 to i64
  %sub.ptr.sub.i402597 = sub i64 %sub.ptr.lhs.cast.i400596, %sub.ptr.rhs.cast.i.i348
  %cmp85598 = icmp ult i64 %sub.ptr.sub.i402597, 35
  br i1 %cmp85598, label %while.body86, label %while.end88

while.body86:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, %while.body86
  %sstr.sroa.19.5599 = phi i8* [ %call.i408, %while.body86 ], [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ]
  %call.i408 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5599, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i400 = ptrtoint i8* %call.i408 to i64
  %sub.ptr.sub.i402 = sub i64 %sub.ptr.lhs.cast.i400, %sub.ptr.rhs.cast.i.i348
  %cmp85 = icmp ult i64 %sub.ptr.sub.i402, 35
  br i1 %cmp85, label %while.body86, label %while.end88, !llvm.loop !359

while.end88:                                      ; preds = %while.body86, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit
  %sstr.sroa.19.5.lcssa = phi i8* [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ], [ %call.i408, %while.body86 ]
  %28 = load i64, i64* %time, align 8, !tbaa !341
  %cmp90.not = icmp eq i64 %28, 0
  br i1 %cmp90.not, label %if.end97, label %if.then91

if.then91:                                        ; preds = %while.end88
  %29 = load i64, i64* %time75, align 8, !tbaa !356
  %mul93 = mul i64 %29, 100
  %div95 = udiv i64 %mul93, %28
  br label %if.end97

if.end97:                                         ; preds = %if.then91, %while.end88
  %percent.0 = phi i64 [ %div95, %if.then91 ], [ 0, %while.end88 ]
  %call.i411 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #14
  %sext = shl i64 %percent.0, 32
  %conv.i414 = ashr exact i64 %sext, 32
  %call.i415 = tail call i8* @halide_int64_to_string(i8* %call.i411, i8* %sstr.sroa.125.0, i64 %conv.i414, i32 1) #14
  %call.i418 = tail call i8* @halide_string_to_string(i8* %call.i415, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23.180, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i419601 = ptrtoint i8* %call.i418 to i64
  %sub.ptr.sub.i421602 = sub i64 %sub.ptr.lhs.cast.i419601, %sub.ptr.rhs.cast.i.i348
  %cmp104603 = icmp ult i64 %sub.ptr.sub.i421602, 43
  br i1 %cmp104603, label %while.body105, label %while.end107

while.body105:                                    ; preds = %if.end97, %while.body105
  %sstr.sroa.19.6604 = phi i8* [ %call.i427, %while.body105 ], [ %call.i418, %if.end97 ]
  %call.i427 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6604, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i419 = ptrtoint i8* %call.i427 to i64
  %sub.ptr.sub.i421 = sub i64 %sub.ptr.lhs.cast.i419, %sub.ptr.rhs.cast.i.i348
  %cmp104 = icmp ult i64 %sub.ptr.sub.i421, 43
  br i1 %cmp104, label %while.body105, label %while.end107, !llvm.loop !360

while.end107:                                     ; preds = %while.body105, %if.end97
  %sstr.sroa.19.6.lcssa = phi i8* [ %call.i418, %if.end97 ], [ %call.i427, %while.body105 ]
  br i1 %10, label %if.end127, label %if.then109

if.then109:                                       ; preds = %while.end107
  %active_threads_numerator111 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 5
  %30 = load i64, i64* %active_threads_numerator111, align 8, !tbaa !361
  %conv112 = uitofp i64 %30 to double
  %active_threads_denominator113 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 6
  %31 = load i64, i64* %active_threads_denominator113, align 8, !tbaa !362
  %conv114 = uitofp i64 %31 to double
  %add115 = fadd double %conv114, 1.000000e-10
  %div116 = fdiv double %conv112, %add115
  %conv117 = fptrunc double %div116 to float
  %call.i430 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.181, i64 0, i64 0)) #14
  %conv.i433 = fpext float %conv117 to double
  %call.i434 = tail call i8* @halide_double_to_string(i8* %call.i430, i8* %sstr.sroa.125.0, double %conv.i433, i32 0) #14
  %tobool.not.i436 = icmp eq i8* %call.i434, null
  br i1 %tobool.not.i436, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, label %if.then.i441

if.then.i441:                                     ; preds = %if.then109
  %add.ptr.i437 = getelementptr inbounds i8, i8* %call.i434, i64 -3
  %cmp.i439 = icmp ult i8* %add.ptr.i437, %call.i
  %spec.store.select.i440 = select i1 %cmp.i439, i8* %call.i, i8* %add.ptr.i437
  store i8 0, i8* %spec.store.select.i440, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442: ; preds = %if.then.i441, %if.then109
  %sstr.sroa.19.7 = phi i8* [ null, %if.then109 ], [ %spec.store.select.i440, %if.then.i441 ]
  %sub.ptr.lhs.cast.i447606 = ptrtoint i8* %sstr.sroa.19.7 to i64
  %sub.ptr.sub.i449607 = sub i64 %sub.ptr.lhs.cast.i447606, %sub.ptr.rhs.cast.i.i348
  %cmp123608 = icmp ult i64 %sub.ptr.sub.i449607, 58
  br i1 %cmp123608, label %while.body124, label %if.end127

while.body124:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.body124
  %sstr.sroa.19.8609 = phi i8* [ %call.i455, %while.body124 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ]
  %call.i455 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.8609, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i447 = ptrtoint i8* %call.i455 to i64
  %sub.ptr.sub.i449 = sub i64 %sub.ptr.lhs.cast.i447, %sub.ptr.rhs.cast.i.i348
  %cmp123 = icmp ult i64 %sub.ptr.sub.i449, 58
  br i1 %cmp123, label %while.body124, label %if.end127, !llvm.loop !363

if.end127:                                        ; preds = %while.body124, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.end107
  %sstr.sroa.19.9 = phi i8* [ %sstr.sroa.19.6.lcssa, %while.end107 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ %call.i455, %while.body124 ]
  %cursor.0 = phi i64 [ 58, %while.end107 ], [ 73, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ 73, %while.body124 ]
  %memory_peak128 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 2
  %32 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %tobool129.not = icmp eq i64 %32, 0
  br i1 %tobool129.not, label %if.end162, label %if.then130

if.then130:                                       ; preds = %if.end127
  %call.i458 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.9, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25.182, i64 0, i64 0)) #14
  %33 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %call.i461 = tail call i8* @halide_uint64_to_string(i8* %call.i458, i8* %sstr.sroa.125.0, i64 %33, i32 1) #14
  %sub.ptr.lhs.cast.i462611 = ptrtoint i8* %call.i461 to i64
  %sub.ptr.sub.i464612 = sub i64 %sub.ptr.lhs.cast.i462611, %sub.ptr.rhs.cast.i.i348
  %cmp137613 = icmp ult i64 %sub.ptr.sub.i464612, %cursor.0
  br i1 %cmp137613, label %while.body138, label %while.end140

while.body138:                                    ; preds = %if.then130, %while.body138
  %sstr.sroa.19.10614 = phi i8* [ %call.i470, %while.body138 ], [ %call.i461, %if.then130 ]
  %call.i470 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10614, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i462 = ptrtoint i8* %call.i470 to i64
  %sub.ptr.sub.i464 = sub i64 %sub.ptr.lhs.cast.i462, %sub.ptr.rhs.cast.i.i348
  %cmp137 = icmp ult i64 %sub.ptr.sub.i464, %cursor.0
  br i1 %cmp137, label %while.body138, label %while.end140, !llvm.loop !365

while.end140:                                     ; preds = %while.body138, %if.then130
  %sstr.sroa.19.10.lcssa = phi i8* [ %call.i461, %if.then130 ], [ %call.i470, %while.body138 ]
  %call.i473 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26.183, i64 0, i64 0)) #14
  %num_allocs142 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 8
  %34 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %conv.i476 = sext i32 %34 to i64
  %call.i477 = tail call i8* @halide_int64_to_string(i8* %call.i473, i8* %sstr.sroa.125.0, i64 %conv.i476, i32 1) #14
  %add144 = add nuw nsw i64 %cursor.0, 15
  %sub.ptr.lhs.cast.i478616 = ptrtoint i8* %call.i477 to i64
  %sub.ptr.sub.i480617 = sub i64 %sub.ptr.lhs.cast.i478616, %sub.ptr.rhs.cast.i.i348
  %cmp147618 = icmp ult i64 %sub.ptr.sub.i480617, %add144
  br i1 %cmp147618, label %while.body148, label %while.end150

while.body148:                                    ; preds = %while.end140, %while.body148
  %sstr.sroa.19.11619 = phi i8* [ %call.i467, %while.body148 ], [ %call.i477, %while.end140 ]
  %call.i467 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11619, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i478 = ptrtoint i8* %call.i467 to i64
  %sub.ptr.sub.i480 = sub i64 %sub.ptr.lhs.cast.i478, %sub.ptr.rhs.cast.i.i348
  %cmp147 = icmp ult i64 %sub.ptr.sub.i480, %add144
  br i1 %cmp147, label %while.body148, label %while.end150, !llvm.loop !367

while.end150:                                     ; preds = %while.body148, %while.end140
  %sstr.sroa.19.11.lcssa = phi i8* [ %call.i477, %while.end140 ], [ %call.i467, %while.body148 ]
  %35 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %cmp152.not = icmp eq i32 %35, 0
  br i1 %cmp152.not, label %if.end159, label %if.then153

if.then153:                                       ; preds = %while.end150
  %memory_total154 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 3
  %36 = load i64, i64* %memory_total154, align 8, !tbaa !368
  %conv156 = sext i32 %35 to i64
  %div157 = udiv i64 %36, %conv156
  br label %if.end159

if.end159:                                        ; preds = %if.then153, %while.end150
  %alloc_avg.0 = phi i64 [ %div157, %if.then153 ], [ 0, %while.end150 ]
  %call.i452 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27.184, i64 0, i64 0)) #14
  %sext586 = shl i64 %alloc_avg.0, 32
  %conv.i445 = ashr exact i64 %sext586, 32
  %call.i446 = tail call i8* @halide_int64_to_string(i8* %call.i452, i8* %sstr.sroa.125.0, i64 %conv.i445, i32 1) #14
  br label %if.end162

if.end162:                                        ; preds = %if.end159, %if.end127
  %sstr.sroa.19.12 = phi i8* [ %sstr.sroa.19.9, %if.end127 ], [ %call.i446, %if.end159 ]
  %stack_peak163 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 4
  %37 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %cmp164.not = icmp eq i64 %37, 0
  br i1 %cmp164.not, label %if.end169, label %if.then165

if.then165:                                       ; preds = %if.end162
  %call.i424 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.12, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28.185, i64 0, i64 0)) #14
  %38 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %call.i405 = tail call i8* @halide_uint64_to_string(i8* %call.i424, i8* %sstr.sroa.125.0, i64 %38, i32 1) #14
  br label %if.end169

if.end169:                                        ; preds = %if.then165, %if.end162
  %sstr.sroa.19.13 = phi i8* [ %sstr.sroa.19.12, %if.end162 ], [ %call.i405, %if.then165 ]
  %call.i396 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.13, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, label %if.then.i379

if.then.i379:                                     ; preds = %if.end169
  %sub.ptr.lhs.cast.i.i374 = ptrtoint i8* %call.i396 to i64
  %add.i.i377 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i374
  %call.i.i378 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i377) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381: ; preds = %if.then.i379, %if.end169
  %retval.0.i380 = phi i8* [ %call.i, %if.then.i379 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end169 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i380) #14
  br label %cleanup172

cleanup172:                                       ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, %land.lhs.true
  %sstr.sroa.19.14 = phi i8* [ %call.i, %land.lhs.true ], [ %call.i396, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381 ]
  %indvars.iv.next631 = add nuw nsw i64 %indvars.iv630, 1
  %39 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %40 = sext i32 %39 to i64
  %cmp55 = icmp slt i64 %indvars.iv.next631, %40
  br i1 %cmp55, label %for.body57, label %cleanup181, !llvm.loop !369

cleanup181:                                       ; preds = %for.cond41, %cleanup172, %for.cond53.preheader, %for.cond41.preheader, %for.body
  %sstr.sroa.19.15 = phi i8* [ %sstr.sroa.19.0626, %for.body ], [ %call.i344, %for.cond53.preheader ], [ %call.i344, %for.cond41.preheader ], [ %sstr.sroa.19.14, %cleanup172 ], [ %call.i344, %for.cond41 ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 8
  %41 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %41, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.cond.cleanup, label %for.body, !llvm.loop !370
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %s) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not9 = icmp eq %struct.halide_profiler_pipeline_stats* %0, null
  br i1 %tobool.not9, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %1 = phi %struct.halide_profiler_pipeline_stats* [ %7, %while.body ], [ %0, %entry ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %3 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %3, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 7
  %4 = bitcast %struct.halide_profiler_func_stats** %funcs to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !352
  tail call void @free(i8* %5) #14
  %6 = bitcast %struct.halide_profiler_pipeline_stats* %1 to i8*
  tail call void @free(i8* nonnull %6) #14
  %7 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %7, null
  br i1 %tobool.not, label %while.end, label %while.body, !llvm.loop !373

while.end:                                        ; preds = %while.body, %entry
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 2
  store i32 0, i32* %first_free_id, align 4, !tbaa !374
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #16
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.0121 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not122 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0121, null
  br i1 %tobool.not122, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.0123 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.0121, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %num_funcs1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 9
  %1 = load i32, i32* %num_funcs1, align 8, !tbaa !351
  %cmp2 = icmp eq i32 %1, %num_funcs
  br i1 %cmp2, label %cleanup62, label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.end, label %for.body, !llvm.loop !375

for.end:                                          ; preds = %for.inc, %entry
  %call4 = tail call i8* @malloc(i64 96) #14
  %3 = bitcast i8* %call4 to %struct.halide_profiler_pipeline_stats*
  %tobool5.not = icmp eq i8* %call4, null
  br i1 %tobool5.not, label %cleanup62, label %if.end7

if.end7:                                          ; preds = %for.end
  %4 = bitcast %struct.halide_profiler_pipeline_stats** %pipelines to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !371
  %next9 = getelementptr inbounds i8, i8* %call4, i64 64
  %6 = bitcast i8* %next9 to i8**
  store i8* %5, i8** %6, align 8, !tbaa !372
  %name10 = getelementptr inbounds i8, i8* %call4, i64 48
  %7 = bitcast i8* %name10 to i8**
  store i8* %pipeline_name, i8** %7, align 8, !tbaa !346
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 2
  %8 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %first_func_id = getelementptr inbounds i8, i8* %call4, i64 76
  %9 = bitcast i8* %first_func_id to i32*
  store i32 %8, i32* %9, align 4, !tbaa !376
  %num_funcs11 = getelementptr inbounds i8, i8* %call4, i64 72
  %10 = bitcast i8* %num_funcs11 to i32*
  store i32 %num_funcs, i32* %10, align 8, !tbaa !351
  %runs = getelementptr inbounds i8, i8* %call4, i64 80
  %11 = bitcast i8* %runs to i32*
  store i32 0, i32* %11, align 8, !tbaa !343
  %samples = getelementptr inbounds i8, i8* %call4, i64 84
  %12 = bitcast i8* %samples to i32*
  store i32 0, i32* %12, align 4, !tbaa !347
  %13 = bitcast i8* %call4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %num_allocs = getelementptr inbounds i8, i8* %call4, i64 88
  %14 = bitcast i8* %num_allocs to i32*
  store i32 0, i32* %14, align 8, !tbaa !348
  %active_threads_numerator = getelementptr inbounds i8, i8* %call4, i64 32
  %15 = bitcast i8* %active_threads_numerator to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !110
  %conv = sext i32 %num_funcs to i64
  %mul = mul nsw i64 %conv, 72
  %call12 = tail call i8* @malloc(i64 %mul) #14
  %funcs = getelementptr inbounds i8, i8* %call4, i64 56
  %16 = bitcast i8* %funcs to i8**
  store i8* %call12, i8** %16, align 8, !tbaa !352
  %tobool14.not = icmp eq i8* %call12, null
  %17 = bitcast i8* %call12 to %struct.halide_profiler_func_stats*
  br i1 %tobool14.not, label %if.then15, label %for.cond17.preheader

for.cond17.preheader:                             ; preds = %if.end7
  %cmp18119 = icmp sgt i32 %num_funcs, 0
  br i1 %cmp18119, label %for.body20.lr.ph, label %for.cond.cleanup19

for.body20.lr.ph:                                 ; preds = %for.cond17.preheader
  %wide.trip.count = zext i32 %num_funcs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %18 = icmp eq i32 %num_funcs, 1
  br i1 %18, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20.lr.ph.new

for.body20.lr.ph.new:                             ; preds = %for.body20.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body20

if.then15:                                        ; preds = %if.end7
  tail call void @free(i8* nonnull %call4) #14
  br label %cleanup62

for.cond.cleanup19.loopexit.unr-lcssa:            ; preds = %for.body20, %for.body20.lr.ph
  %indvars.iv.unr = phi i64 [ 0, %for.body20.lr.ph ], [ %indvars.iv.next.1, %for.body20 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup19, label %for.body20.epil

for.body20.epil:                                  ; preds = %for.cond.cleanup19.loopexit.unr-lcssa
  %time22.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 0
  store i64 0, i64* %time22.epil, align 8, !tbaa !356
  %arrayidx24.epil = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.unr
  %19 = load i64, i64* %arrayidx24.epil, align 8, !tbaa !110
  %20 = inttoptr i64 %19 to i8*
  %name28.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 7
  store i8* %20, i8** %name28.epil, align 8, !tbaa !357
  %memory_current32.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 1
  %num_allocs44.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 8
  store i32 0, i32* %num_allocs44.epil, align 8, !tbaa !366
  %21 = bitcast i64* %memory_current32.epil to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %21, align 8, !tbaa !110
  %active_threads_numerator51.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 5
  %22 = bitcast i64* %active_threads_numerator51.epil to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !110
  br label %for.cond.cleanup19

for.cond.cleanup19:                               ; preds = %for.body20.epil, %for.cond.cleanup19.loopexit.unr-lcssa, %for.cond17.preheader
  %23 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %add = add nsw i32 %23, %num_funcs
  store i32 %add, i32* %first_free_id, align 4, !tbaa !374
  store i8* %call4, i8** %4, align 8, !tbaa !371
  br label %cleanup62

for.body20:                                       ; preds = %for.body20, %for.body20.lr.ph.new
  %indvars.iv = phi i64 [ 0, %for.body20.lr.ph.new ], [ %indvars.iv.next.1, %for.body20 ]
  %niter = phi i64 [ %unroll_iter, %for.body20.lr.ph.new ], [ %niter.nsub.1, %for.body20 ]
  %time22 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 0
  store i64 0, i64* %time22, align 8, !tbaa !356
  %arrayidx24 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv
  %24 = load i64, i64* %arrayidx24, align 8, !tbaa !110
  %25 = inttoptr i64 %24 to i8*
  %name28 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 7
  store i8* %25, i8** %name28, align 8, !tbaa !357
  %memory_current32 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 1
  %num_allocs44 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 8
  store i32 0, i32* %num_allocs44, align 8, !tbaa !366
  %26 = bitcast i64* %memory_current32 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %26, align 8, !tbaa !110
  %active_threads_numerator51 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 5
  %27 = bitcast i64* %active_threads_numerator51 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %27, align 8, !tbaa !110
  %indvars.iv.next = or i64 %indvars.iv, 1
  %time22.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 0
  store i64 0, i64* %time22.1, align 8, !tbaa !356
  %arrayidx24.1 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.next
  %28 = load i64, i64* %arrayidx24.1, align 8, !tbaa !110
  %29 = inttoptr i64 %28 to i8*
  %name28.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 7
  store i8* %29, i8** %name28.1, align 8, !tbaa !357
  %memory_current32.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 1
  %num_allocs44.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 8
  store i32 0, i32* %num_allocs44.1, align 8, !tbaa !366
  %30 = bitcast i64* %memory_current32.1 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %30, align 8, !tbaa !110
  %active_threads_numerator51.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 5
  %31 = bitcast i64* %active_threads_numerator51.1 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %31, align 8, !tbaa !110
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20, !llvm.loop !377

cleanup62:                                        ; preds = %land.lhs.true, %for.cond.cleanup19, %if.then15, %for.end
  %retval.2 = phi %struct.halide_profiler_pipeline_stats* [ %3, %for.cond.cleanup19 ], [ null, %if.then15 ], [ null, %for.end ], [ %p.0123, %land.lhs.true ]
  ret %struct.halide_profiler_pipeline_stats* %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* %s, i32 %func_id, i64 %time, i32 %active_threads) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.055 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not56 = icmp eq %struct.halide_profiler_pipeline_stats* %p.055, null
  br i1 %tobool.not56, label %cleanup25, label %for.body

for.body:                                         ; preds = %entry, %if.end23
  %p.058 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %if.end23 ], [ %p.055, %entry ]
  %p_prev.057 = phi %struct.halide_profiler_pipeline_stats* [ %p.058, %if.end23 ], [ null, %entry ]
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 10
  %0 = load i32, i32* %first_func_id, align 4, !tbaa !376
  %cmp.not = icmp sgt i32 %0, %func_id
  br i1 %cmp.not, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 9
  %1 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %add = add nsw i32 %1, %0
  %cmp2 = icmp sgt i32 %add, %func_id
  br i1 %cmp2, label %if.then, label %if.end23

if.then:                                          ; preds = %land.lhs.true
  %tobool3.not = icmp eq %struct.halide_profiler_pipeline_stats* %p_prev.057, null
  br i1 %tobool3.not, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %2 = load i8*, i8** %next, align 8, !tbaa !372
  %next5 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p_prev.057, i64 0, i32 8
  store i8* %2, i8** %next5, align 8, !tbaa !372
  %3 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  store %struct.halide_profiler_pipeline_stats* %p.055, %struct.halide_profiler_pipeline_stats** %3, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %p.058, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 7
  %4 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %idx.ext = sext i32 %func_id to i64
  %add.ptr = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %4, i64 %idx.ext
  %idx.ext10 = sext i32 %0 to i64
  %idx.neg = sub nsw i64 0, %idx.ext10
  %add.ptr11 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr, i64 %idx.neg
  %time12 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 0
  %5 = load i64, i64* %time12, align 8, !tbaa !356
  %add13 = add i64 %5, %time
  store i64 %add13, i64* %time12, align 8, !tbaa !356
  %conv = sext i32 %active_threads to i64
  %active_threads_numerator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 5
  %6 = bitcast i64* %active_threads_numerator to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8, !tbaa !110
  %8 = insertelement <2 x i64> <i64 poison, i64 1>, i64 %conv, i32 0
  %9 = add <2 x i64> %7, %8
  %10 = bitcast i64* %active_threads_numerator to <2 x i64>*
  store <2 x i64> %9, <2 x i64>* %10, align 8, !tbaa !110
  %time16 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 0
  %11 = load i64, i64* %time16, align 8, !tbaa !341
  %add17 = add i64 %11, %time
  store i64 %add17, i64* %time16, align 8, !tbaa !341
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 12
  %12 = load i32, i32* %samples, align 4, !tbaa !347
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %samples, align 4, !tbaa !347
  %active_threads_numerator19 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 4
  %13 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8, !tbaa !110
  %15 = add <2 x i64> %14, %8
  %16 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 8, !tbaa !110
  ret void

if.end23:                                         ; preds = %land.lhs.true, %for.body
  %next24 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %17 = bitcast i8** %next24 to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %17, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup25, label %for.body, !llvm.loop !378

cleanup25:                                        ; preds = %if.end23, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_profiler_sample(%struct.halide_profiler_state* %s, i64* %prev_t) local_unnamed_addr #0 {
entry:
  %func = alloca i32, align 4
  %active_threads = alloca i32, align 4
  %0 = bitcast i32* %func to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #15
  %1 = bitcast i32* %active_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #15
  %get_remote_profiler_state = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 6
  %2 = load void (i32*, i32*)*, void (i32*, i32*)** %get_remote_profiler_state, align 8, !tbaa !379
  %tobool.not = icmp eq void (i32*, i32*)* %2, null
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void %2(i32* nonnull %func, i32* nonnull %active_threads) #14
  br label %if.end

if.else:                                          ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 3
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  store i32 %3, i32* %func, align 4, !tbaa !73
  %active_threads2 = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 4
  %4 = load i32, i32* %active_threads2, align 4, !tbaa !380
  store i32 %4, i32* %active_threads, align 4, !tbaa !73
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call = call i64 @halide_current_time_ns(i8* null) #14
  %5 = load i32, i32* %func, align 4, !tbaa !73
  %cmp = icmp eq i32 %5, -2
  br i1 %cmp, label %cleanup, label %if.else4

if.else4:                                         ; preds = %if.end
  %cmp5 = icmp sgt i32 %5, -1
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.else4
  %6 = load i64, i64* %prev_t, align 8, !tbaa !110
  %sub = sub i64 %call, %6
  %7 = load i32, i32* %active_threads, align 4, !tbaa !73
  call void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* nonnull %s, i32 %5, i64 %sub, i32 %7) #16
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.else4
  store i64 %call, i64* %prev_t, align 8, !tbaa !110
  %sleep_time = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 1
  %8 = load i32, i32* %sleep_time, align 8, !tbaa !381
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.end
  %retval.0 = phi i32 [ %8, %if.end8 ], [ -1, %if.end ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv(i8* %0) #4 {
entry:
  %t = alloca i64, align 8
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #16
  %lock = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock) #14
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  %1 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not23 = icmp eq i32 %1, -2
  br i1 %cmp.not23, label %while.end8, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %2 = bitcast i64* %t to i8*
  br label %while.body

while.body:                                       ; preds = %while.end, %while.body.lr.ph
  %call1 = call i64 @halide_current_time_ns(i8* null) #14
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #15
  store i64 %call1, i64* %t, align 8, !tbaa !110
  %call420 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* nonnull %call, i64* nonnull %t) #16
  %cmp521 = icmp slt i32 %call420, 0
  br i1 %cmp521, label %while.end, label %if.end

if.end:                                           ; preds = %while.body, %if.end
  %call422 = phi i32 [ %call4, %if.end ], [ %call420, %while.body ]
  call void @halide_mutex_unlock(%struct.halide_mutex* %lock) #14
  call void @halide_sleep_ms(i8* null, i32 %call422) #14
  call void @halide_mutex_lock(%struct.halide_mutex* %lock) #14
  %call4 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* %call, i64* nonnull %t) #16
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %while.end, label %if.end

while.end:                                        ; preds = %if.end, %while.body
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #15
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not = icmp eq i32 %3, -2
  br i1 %cmp.not, label %while.end8, label %while.body, !llvm.loop !382

while.end8:                                       ; preds = %while.end, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock) #14
  ret void
}

; Function Attrs: nounwind
define weak %struct.halide_profiler_pipeline_stats* @halide_profiler_get_pipeline_state(i8* %pipeline_name) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #16
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #14
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.013 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not14 = icmp eq %struct.halide_profiler_pipeline_stats* %p.013, null
  br i1 %tobool.not14, label %cleanup, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.015 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.013, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 8
  %1 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %1, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup, label %for.body, !llvm.loop !383

cleanup:                                          ; preds = %for.inc, %for.body, %entry
  %p.0.lcssa = phi %struct.halide_profiler_pipeline_stats* [ null, %entry ], [ null, %for.inc ], [ %p.015, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #14
  ret %struct.halide_profiler_pipeline_stats* %p.0.lcssa
}

; Function Attrs: nounwind
define weak i32 @halide_profiler_pipeline_start(i8* %user_context, i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #16
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #14
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @halide_start_clock(i8* %user_context) #14
  %call2 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv, i8* null) #14
  store %struct.halide_thread* %call2, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call4 = tail call %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) #16
  %tobool5.not = icmp eq %struct.halide_profiler_pipeline_stats* %call4, null
  br i1 %tobool5.not, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32 @halide_error_out_of_memory(i8* %user_context) #14
  br label %cleanup

if.end8:                                          ; preds = %if.end
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %runs, align 8, !tbaa !343
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 10
  %2 = load i32, i32* %first_func_id, align 4, !tbaa !376
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then6
  %retval.0 = phi i32 [ %2, %if.end8 ], [ %call7, %if.then6 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock.i) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_stack_peak_update(i8* %user_context, i8* %pipeline_state, i64* %f_values) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp.not, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([135 x i8], [135 x i8]* @.str.186, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp118 = icmp sgt i32 %1, 0
  br i1 %cmp118, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %do.end
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %do.end
  ret void

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %3 = phi i32 [ %1, %for.body.lr.ph ], [ %9, %for.inc ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i64, i64* %f_values, i64 %indvars.iv
  %4 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp2.not = icmp eq i64 %4, 0
  br i1 %cmp2.not, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %5 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %5, i64 %indvars.iv, i32 4
  %6 = load i64, i64* %stack_peak, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then3
  %old_val.0.i = phi i64 [ %6, %if.then3 ], [ %8, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %4
  br i1 %cmp.i, label %while.body.i, label %for.inc.loopexit

while.body.i:                                     ; preds = %while.cond.i
  %7 = cmpxchg i64* %stack_peak, i64 %old_val.0.i, i64 %4 seq_cst seq_cst
  %8 = extractvalue { i64, i1 } %7, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %8
  br i1 %cmp1.i, label %for.inc.loopexit, label %while.cond.i, !llvm.loop !384

for.inc.loopexit:                                 ; preds = %while.body.i, %while.cond.i
  %.pre = load i32, i32* %0, align 8, !tbaa !351
  br label %for.inc

for.inc:                                          ; preds = %for.inc.loopexit, %for.body
  %9 = phi i32 [ %.pre, %for.inc.loopexit ], [ %3, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = sext i32 %9 to i64
  %cmp1 = icmp slt i64 %indvars.iv.next, %10
  br i1 %cmp1, label %for.body, label %for.cond.cleanup, !llvm.loop !385
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_allocate(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %incr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %incr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([135 x i8], [135 x i8]* @.str.1.187, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.2.188, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([145 x i8], [145 x i8]* @.str.3.189, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %num_allocs = getelementptr inbounds i8, i8* %pipeline_state, i64 88
  %4 = bitcast i8* %num_allocs to i32*
  %5 = atomicrmw add i32* %4, i32 1 seq_cst
  %memory_total = getelementptr inbounds i8, i8* %pipeline_state, i64 24
  %6 = bitcast i8* %memory_total to i64*
  %7 = atomicrmw add i64* %6, i64 %incr seq_cst
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %8 = bitcast i8* %memory_current to i64*
  %9 = atomicrmw add i64* %8, i64 %incr seq_cst
  %10 = add i64 %9, %incr
  %memory_peak = getelementptr inbounds i8, i8* %pipeline_state, i64 16
  %11 = bitcast i8* %memory_peak to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %do.end15
  %old_val.0.i = phi i64 [ %12, %do.end15 ], [ %14, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %10
  br i1 %cmp.i, label %while.body.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit

while.body.i:                                     ; preds = %while.cond.i
  %13 = cmpxchg i64* %11, i64 %old_val.0.i, i64 %10 seq_cst seq_cst
  %14 = extractvalue { i64, i1 } %13, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %14
  br i1 %cmp1.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit, label %while.cond.i, !llvm.loop !384

_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit: ; preds = %while.body.i, %while.cond.i
  %num_allocs16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 8
  %15 = atomicrmw add i32* %num_allocs16, i32 1 seq_cst
  %memory_total17 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 3
  %16 = atomicrmw add i64* %memory_total17, i64 %incr seq_cst
  %memory_current18 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %17 = atomicrmw add i64* %memory_current18, i64 %incr seq_cst
  %18 = add i64 %17, %incr
  %memory_peak19 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 2
  %19 = load i64, i64* %memory_peak19, align 8, !tbaa !110
  br label %while.cond.i43

while.cond.i43:                                   ; preds = %while.body.i45, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit
  %old_val.0.i41 = phi i64 [ %19, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit ], [ %21, %while.body.i45 ]
  %cmp.i42 = icmp ult i64 %old_val.0.i41, %18
  br i1 %cmp.i42, label %while.body.i45, label %return

while.body.i45:                                   ; preds = %while.cond.i43
  %20 = cmpxchg i64* %memory_peak19, i64 %old_val.0.i41, i64 %18 seq_cst seq_cst
  %21 = extractvalue { i64, i1 } %20, 0
  %cmp1.i44 = icmp eq i64 %old_val.0.i41, %21
  br i1 %cmp1.i44, label %return, label %while.cond.i43, !llvm.loop !384

return:                                           ; preds = %while.body.i45, %while.cond.i43, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_free(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %decr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %decr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([135 x i8], [135 x i8]* @.str.4.190, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.5.191, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([145 x i8], [145 x i8]* @.str.6.192, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %4 = bitcast i8* %memory_current to i64*
  %5 = atomicrmw sub i64* %4, i64 %decr seq_cst
  %memory_current16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %6 = atomicrmw sub i64* %memory_current16, i64 %decr seq_cst
  br label %return

return:                                           ; preds = %do.end15, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_report(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #16
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #14
  tail call void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %call) #16
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #14
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_reset() local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #16
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #14
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %call) #16
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #14
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_profiler_pipeline_end(i8* %user_context, i8* %state) local_unnamed_addr #2 {
entry:
  %current_func = getelementptr inbounds i8, i8* %state, i64 16
  %0 = bitcast i8* %current_func to i32*
  store i32 -1, i32* %0, align 8, !tbaa !340
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #14
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #15
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #14
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i64 32) #14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #14
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.197, i64 0, i64 0)) #14
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !110
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 0), align 8, !tbaa !110
  %and = and i64 %3, %2
  %cmp6.not = icmp eq i64 %and, 0
  br i1 %cmp6.not, label %for.inc.critedge, label %if.then7

if.then7:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 2), align 8, !tbaa !110
  %and10 = and i64 %4, %and
  %cmp11.not = icmp eq i64 %and10, %and
  br i1 %cmp11.not, label %for.inc.critedge, label %cleanup15

for.inc.critedge:                                 ; preds = %if.then7, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i64 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !110
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 1), align 8, !tbaa !110
  %and.1 = and i64 %6, %5
  %cmp6.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp6.not.1, label %for.inc.critedge.1, label %if.then7.1

cleanup15:                                        ; preds = %for.inc.critedge.1, %if.then7.1, %if.then7
  %cmp3.lcssa = phi i32 [ 0, %if.then7 ], [ 0, %if.then7.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then7.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 3), align 8, !tbaa !110
  %and10.1 = and i64 %7, %and.1
  %cmp11.not.1 = icmp eq i64 %and10.1, %and.1
  br i1 %cmp11.not.1, label %for.inc.critedge.1, label %cleanup15

for.inc.critedge.1:                               ; preds = %if.then7.1, %for.inc.critedge
  br label %cleanup15
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #14
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #8 {
entry:
  %info = alloca [4 x i32], align 4
  %info2 = alloca [4 x i32], align 4
  %info3 = alloca [4 x i32], align 4
  %arrayidx3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i64 0, i32 1, i64 0
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result to <4 x i64>*
  store <4 x i64> <i64 34084860461808, i64 0, i64 0, i64 0>, <4 x i64>* %0, align 8, !tbaa !110
  %1 = bitcast [4 x i32]* %info to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #15
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 0
  store i32 1, i32* %arraydecay, align 4, !tbaa !73
  %arrayidx1.i110 = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i110, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay) #15
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 2
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !73
  %and = lshr i32 %2, 15
  %3 = and i32 %and, 16
  %and2 = lshr i32 %2, 23
  %4 = and i32 %and2, 32
  %5 = or i32 %4, %3
  %and6 = lshr i32 %2, 20
  %6 = and i32 %and6, 512
  %7 = or i32 %5, %6
  %and14 = lshr i32 %2, 5
  %8 = and i32 %and14, 128
  %9 = or i32 %7, %8
  %10 = zext i32 %9 to i64
  %11 = and i32 %2, 805834752
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %entry
  store i64 %10, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %14

14:                                               ; preds = %13, %entry
  %15 = and i32 %2, 1879048192
  %.not = icmp eq i32 %15, 1879048192
  br i1 %.not, label %if.then30, label %if.end67

if.then30:                                        ; preds = %14
  %16 = bitcast [4 x i32]* %info2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #15
  %arraydecay31 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 0
  store i32 7, i32* %arraydecay31, align 4, !tbaa !73
  %arrayidx1.i99 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i99, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay31) #15
  %17 = load i32, i32* %arrayidx1.i99, align 4, !tbaa !73
  %and33 = and i32 %17, 32
  %cmp34.not = icmp eq i32 %and33, 0
  br i1 %cmp34.not, label %if.end36, label %if.then35

if.then35:                                        ; preds = %if.then30
  %or.i98 = or i64 %10, 64
  store i64 %or.i98, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %if.then30
  %18 = phi i64 [ %or.i98, %if.then35 ], [ %10, %if.then30 ]
  %and38 = and i32 %17, 268500992
  %cmp39 = icmp eq i32 %and38, 268500992
  br i1 %cmp39, label %if.then40, label %if.end66

if.then40:                                        ; preds = %if.end36
  %and42 = and i32 %17, 469827584
  %cmp43 = icmp eq i32 %and42, 469827584
  %spec.select.v = select i1 %cmp43, i64 3298534883328, i64 1099511627776
  %spec.select = or i64 %18, %spec.select.v
  %and47 = and i32 %17, -805109760
  %cmp48 = icmp eq i32 %and47, -805109760
  %or.i92 = or i64 %spec.select, 4398046511104
  %spec.select130 = select i1 %cmp48, i64 %or.i92, i64 %spec.select
  store i64 %spec.select130, i64* %arrayidx3.i, align 8, !tbaa !110
  %and52 = and i32 %17, -803012608
  %cmp53 = icmp eq i32 %and52, -803012608
  br i1 %cmp53, label %if.then54, label %if.end66

if.then54:                                        ; preds = %if.then40
  %or.i90 = or i64 %spec.select130, 8796093022208
  store i64 %or.i90, i64* %arrayidx3.i, align 8, !tbaa !110
  %19 = bitcast [4 x i32]* %info3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #15
  %arraydecay55 = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 0
  store i32 7, i32* %arraydecay55, align 4, !tbaa !73
  %arrayidx1.i = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 1
  store i32 1, i32* %arrayidx1.i, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay55) #15
  %arrayidx56 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 2
  %20 = load i32, i32* %arrayidx56, align 4, !tbaa !73
  %and57 = and i32 %20, 2048
  %cmp58.not = icmp eq i32 %and57, 0
  br i1 %cmp58.not, label %if.end64, label %land.lhs.true59

land.lhs.true59:                                  ; preds = %if.then54
  %21 = load i32, i32* %arraydecay55, align 4, !tbaa !73
  %and61 = and i32 %21, 32
  %cmp62.not = icmp eq i32 %and61, 0
  br i1 %cmp62.not, label %if.end64, label %if.then63

if.then63:                                        ; preds = %land.lhs.true59
  %or.i = or i64 %spec.select130, 26388279066624
  store i64 %or.i, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %land.lhs.true59, %if.then54
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #15
  br label %if.end66

if.end66:                                         ; preds = %if.end64, %if.then40, %if.end36
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #15
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #15
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

define i32 @histogram(%struct.halide_buffer_t* noalias %IMG.buffer, %struct.halide_buffer_t* noalias %BINS.buffer) local_unnamed_addr #9 {
entry:
  %pimInit.i = tail call i32 @pimCreateDevice(i32 1, i32 4, i32 128, i32 32, i32 1024, i32 8192)
  %0 = alloca <1024 x i32>, align 4096
  %1 = alloca <1024 x i32>, align 4096
  %2 = alloca <1024 x i32>, align 4096
  %3 = alloca <1024 x i32>, align 4096
  %4 = alloca <1024 x i32>, align 4096
  %5 = alloca [8 x i32], align 4
  %6 = alloca [8 x i32], align 4
  %.not = icmp eq %struct.halide_buffer_t* %IMG.buffer, null
  br i1 %.not, label %"assert failed", label %"assert succeeded", !prof !386

"assert failed":                                  ; preds = %entry
  %7 = tail call i32 @halide_error_buffer_argument_is_null(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)) #15
  br label %call_destructor.exit221

"assert succeeded":                               ; preds = %entry
  %.not188 = icmp eq %struct.halide_buffer_t* %BINS.buffer, null
  br i1 %.not188, label %"assert failed1", label %"assert succeeded2", !prof !386

call_destructor.exit221:                          ; preds = %_halide_buffer_is_bounds_query.exit410, %call_destructor.exit433, %"assert failed109", %"assert failed107", %"assert failed37", %"assert failed35", %"assert failed1", %"assert failed"
  %8 = phi i32 [ %7, %"assert failed" ], [ %9, %"assert failed1" ], [ %227, %"assert failed35" ], [ %230, %"assert failed37" ], [ %7215, %"assert failed107" ], [ %7218, %"assert failed109" ], [ 0, %call_destructor.exit433 ], [ 0, %_halide_buffer_is_bounds_query.exit410 ]
  call void @pimShowStats()
  ret i32 %8

"assert failed1":                                 ; preds = %"assert succeeded"
  %9 = tail call i32 @halide_error_buffer_argument_is_null(i8* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.200, i64 0, i64 0)) #15
  br label %call_destructor.exit221

"assert succeeded2":                              ; preds = %"assert succeeded"
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %BINS.buffer, i64 0, i32 2
  %10 = load i8*, i8** %host.i, align 8, !tbaa !172
  %code.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %BINS.buffer, i64 0, i32 4, i32 0
  %11 = load i8, i8* %code.i.i, align 2, !tbaa !305
  %conv.i.i = zext i8 %11 to i32
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %BINS.buffer, i64 0, i32 4, i32 1
  %12 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv3.i.i = zext i8 %12 to i32
  %shl.i.i = shl nuw nsw i32 %conv3.i.i, 8
  %or.i.i = or i32 %shl.i.i, %conv.i.i
  %lanes.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %BINS.buffer, i64 0, i32 4, i32 2
  %13 = load i16, i16* %lanes.i.i, align 2, !tbaa !306
  %conv4.i.i = zext i16 %13 to i32
  %shl5.i.i = shl nuw i32 %conv4.i.i, 16
  %or6.i.i = or i32 %or.i.i, %shl5.i.i
  %flags.i.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %BINS.buffer, i64 0, i32 3
  %14 = load i64, i64* %flags.i.i.i, align 8, !tbaa !308
  %dimensions.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %BINS.buffer, i64 0, i32 5
  %15 = load i32, i32* %dimensions.i, align 4, !tbaa !175
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %BINS.buffer, i64 0, i32 6
  %16 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %min.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %16, i64 0, i32 0
  %17 = load i32, i32* %min.i, align 4, !tbaa !181
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %16, i64 0, i32 1
  %18 = load i32, i32* %extent.i, align 4, !tbaa !178
  %stride.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %16, i64 0, i32 2
  %19 = load i32, i32* %stride.i, align 4, !tbaa !182
  %min.i225 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %16, i64 1, i32 0
  %20 = load i32, i32* %min.i225, align 4, !tbaa !181
  %extent.i227 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %16, i64 1, i32 1
  %21 = load i32, i32* %extent.i227, align 4, !tbaa !178
  %stride.i229 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %16, i64 1, i32 2
  %22 = load i32, i32* %stride.i229, align 4, !tbaa !182
  %host.i230 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %IMG.buffer, i64 0, i32 2
  %23 = load i8*, i8** %host.i230, align 8, !tbaa !172
  %code.i.i231 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %IMG.buffer, i64 0, i32 4, i32 0
  %24 = load i8, i8* %code.i.i231, align 2, !tbaa !305
  %conv.i.i232 = zext i8 %24 to i32
  %bits.i.i233 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %IMG.buffer, i64 0, i32 4, i32 1
  %25 = load i8, i8* %bits.i.i233, align 1, !tbaa !136
  %conv3.i.i234 = zext i8 %25 to i32
  %shl.i.i235 = shl nuw nsw i32 %conv3.i.i234, 8
  %or.i.i236 = or i32 %shl.i.i235, %conv.i.i232
  %lanes.i.i237 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %IMG.buffer, i64 0, i32 4, i32 2
  %26 = load i16, i16* %lanes.i.i237, align 2, !tbaa !306
  %conv4.i.i238 = zext i16 %26 to i32
  %shl5.i.i239 = shl nuw i32 %conv4.i.i238, 16
  %or6.i.i240 = or i32 %or.i.i236, %shl5.i.i239
  %flags.i.i.i241 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %IMG.buffer, i64 0, i32 3
  %27 = load i64, i64* %flags.i.i.i241, align 8, !tbaa !308
  %dimensions.i244 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %IMG.buffer, i64 0, i32 5
  %28 = load i32, i32* %dimensions.i244, align 4, !tbaa !175
  %dim.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %IMG.buffer, i64 0, i32 6
  %29 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i245, align 8, !tbaa !176
  %min.i246 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %29, i64 0, i32 0
  %30 = load i32, i32* %min.i246, align 4, !tbaa !181
  %extent.i248 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %29, i64 0, i32 1
  %31 = load i32, i32* %extent.i248, align 4, !tbaa !178
  %stride.i250 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %29, i64 0, i32 2
  %32 = load i32, i32* %stride.i250, align 4, !tbaa !182
  %min.i252 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %29, i64 1, i32 0
  %33 = load i32, i32* %min.i252, align 4, !tbaa !181
  %extent.i254 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %29, i64 1, i32 1
  %34 = load i32, i32* %extent.i254, align 4, !tbaa !178
  %stride.i256 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %29, i64 1, i32 2
  %35 = load i32, i32* %stride.i256, align 4, !tbaa !182
  %min.i258 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %29, i64 2, i32 0
  %36 = load i32, i32* %min.i258, align 4, !tbaa !181
  %extent.i260 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %29, i64 2, i32 1
  %37 = load i32, i32* %extent.i260, align 4, !tbaa !178
  %stride.i262 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %29, i64 2, i32 2
  %38 = load i32, i32* %stride.i262, align 4, !tbaa !182
  %cmp.i = icmp eq i8* %10, null
  br i1 %cmp.i, label %_halide_buffer_is_bounds_query.exit, label %after_bb

_halide_buffer_is_bounds_query.exit:              ; preds = %"assert succeeded2"
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %BINS.buffer, i64 0, i32 0
  %39 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp1.i = icmp eq i64 %39, 0
  br i1 %cmp1.i, label %_halide_buffer_init.exit, label %after_bb

after_bb:                                         ; preds = %"assert succeeded2", %_halide_buffer_is_bounds_query.exit, %_halide_buffer_init.exit
  %40 = phi i8* [ %23, %"assert succeeded2" ], [ %23, %_halide_buffer_is_bounds_query.exit ], [ %.pre, %_halide_buffer_init.exit ]
  %cmp.i265 = icmp eq i8* %40, null
  br i1 %cmp.i265, label %_halide_buffer_is_bounds_query.exit269, label %after_bb3

_halide_buffer_is_bounds_query.exit269:           ; preds = %after_bb
  %device.i266 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %IMG.buffer, i64 0, i32 0
  %41 = load i64, i64* %device.i266, align 8, !tbaa !174
  %cmp1.i267 = icmp eq i64 %41, 0
  br i1 %cmp1.i267, label %then_bb4, label %after_bb3

_halide_buffer_init.exit:                         ; preds = %_halide_buffer_is_bounds_query.exit
  %42 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 0
  store i32 %17, i32* %42, align 4
  %43 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 1
  store i32 %18, i32* %43, align 4
  %44 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 2
  store i32 1, i32* %44, align 4
  %45 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 3
  store i32 0, i32* %45, align 4
  %46 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 4
  store i32 %20, i32* %46, align 4
  %47 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 5
  store i32 %21, i32* %47, align 4
  %48 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 6
  store i32 %18, i32* %48, align 4
  %49 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 7
  store i32 0, i32* %49, align 4
  store i8 0, i8* %code.i.i, align 8, !tbaa !387
  %50 = bitcast %struct.halide_buffer_t* %BINS.buffer to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %50, i8 0, i64 24, i1 false)
  store i8 32, i8* %bits.i.i, align 1, !tbaa !388
  store i16 1, i16* %lanes.i.i, align 2, !tbaa !389
  store i32 2, i32* %dimensions.i, align 4, !tbaa !175
  %51 = bitcast %struct.halide_dimension_t* %16 to i8*
  %52 = bitcast [8 x i32]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %51, i8* nonnull align 4 dereferenceable(16) %52, i64 16, i1 false) #15, !tbaa.struct !177
  %.pre.i = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %arrayidx.i = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 4
  %arrayidx12.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre.i, i64 1
  %53 = bitcast %struct.halide_dimension_t* %arrayidx12.i to i8*
  %54 = bitcast i32* %arrayidx.i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %53, i8* nonnull align 4 dereferenceable(16) %54, i64 16, i1 false) #15, !tbaa.struct !177
  store i64 0, i64* %flags.i.i.i, align 8, !tbaa !308
  %.pre = load i8*, i8** %host.i230, align 8, !tbaa !172
  br label %after_bb

after_bb3:                                        ; preds = %after_bb, %_halide_buffer_is_bounds_query.exit269, %then_bb4
  %55 = load i8*, i8** %host.i, align 8, !tbaa !172
  %cmp.i273 = icmp eq i8* %55, null
  br i1 %cmp.i273, label %land.rhs.i276, label %_halide_buffer_is_bounds_query.exit277

land.rhs.i276:                                    ; preds = %after_bb3
  %device.i274 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %BINS.buffer, i64 0, i32 0
  %56 = load i64, i64* %device.i274, align 8, !tbaa !174
  %cmp1.i275 = icmp eq i64 %56, 0
  br label %_halide_buffer_is_bounds_query.exit277

_halide_buffer_is_bounds_query.exit277:           ; preds = %after_bb3, %land.rhs.i276
  %57 = phi i1 [ false, %after_bb3 ], [ %cmp1.i275, %land.rhs.i276 ]
  %58 = load i8*, i8** %host.i230, align 8, !tbaa !172
  %cmp.i279 = icmp eq i8* %58, null
  br i1 %cmp.i279, label %land.rhs.i282, label %_halide_buffer_is_bounds_query.exit283

land.rhs.i282:                                    ; preds = %_halide_buffer_is_bounds_query.exit277
  %device.i280 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %IMG.buffer, i64 0, i32 0
  %59 = load i64, i64* %device.i280, align 8, !tbaa !174
  %cmp1.i281 = icmp eq i64 %59, 0
  br label %_halide_buffer_is_bounds_query.exit283

_halide_buffer_is_bounds_query.exit283:           ; preds = %_halide_buffer_is_bounds_query.exit277, %land.rhs.i282
  %60 = phi i1 [ false, %_halide_buffer_is_bounds_query.exit277 ], [ %cmp1.i281, %land.rhs.i282 ]
  %61 = or i1 %57, %60
  br i1 %61, label %"assert succeeded45", label %then_bb7

then_bb4:                                         ; preds = %_halide_buffer_is_bounds_query.exit269
  %62 = bitcast %struct.halide_dimension_t** %dim.i245 to <4 x i32>**
  %63 = load <4 x i32>*, <4 x i32>** %62, align 8, !tbaa !176
  store i8 0, i8* %code.i.i231, align 8, !tbaa !387
  %64 = bitcast %struct.halide_buffer_t* %IMG.buffer to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %64, i8 0, i64 24, i1 false)
  store i8 32, i8* %bits.i.i233, align 1, !tbaa !388
  store i16 1, i16* %lanes.i.i237, align 2, !tbaa !389
  store i32 3, i32* %dimensions.i244, align 4, !tbaa !175
  store <4 x i32> <i32 0, i32 1024, i32 1, i32 0>, <4 x i32>* %63, align 4
  %.pre.i296 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i245, align 8, !tbaa !176
  %.sroa.5.16..sroa_idx = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre.i296, i64 1, i32 0
  %65 = bitcast i32* %.sroa.5.16..sroa_idx to <4 x i32>*
  store <4 x i32> <i32 0, i32 256, i32 1024, i32 0>, <4 x i32>* %65, align 4
  %.pre.i296.1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i245, align 8, !tbaa !176
  %.sroa.10.32..sroa_idx = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre.i296.1, i64 2, i32 0
  store i32 %20, i32* %.sroa.10.32..sroa_idx, align 4, !tbaa.struct !177
  %.sroa.12.32..sroa_idx504 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre.i296.1, i64 2, i32 1
  store i32 %21, i32* %.sroa.12.32..sroa_idx504, align 4, !tbaa.struct !390
  %.sroa.13.32..sroa_idx505 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre.i296.1, i64 2, i32 2
  store i32 262144, i32* %.sroa.13.32..sroa_idx505, align 4, !tbaa.struct !391
  %.sroa.14.32..sroa_idx506 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre.i296.1, i64 2, i32 3
  store i32 0, i32* %.sroa.14.32..sroa_idx506, align 4, !tbaa.struct !392
  store i64 0, i64* %flags.i.i.i241, align 8, !tbaa !308
  br label %after_bb3

then_bb7:                                         ; preds = %_halide_buffer_is_bounds_query.exit283
  %66 = icmp ne i32 %or6.i.i, 73728
  %67 = zext i1 %66 to i64
  %.not204 = icmp eq i32 %15, 2
  %.not205 = icmp eq i32 %or6.i.i240, 73728
  %68 = select i1 %.not205, i64 0, i64 4
  %.not206 = icmp eq i32 %28, 3
  %69 = select i1 %.not206, i64 0, i64 8
  %70 = lshr i32 %18, 27
  %71 = and i32 %70, 16
  %72 = zext i32 %71 to i64
  %73 = lshr i32 %21, 26
  %74 = and i32 %73, 32
  %75 = zext i32 %74 to i64
  %76 = icmp sgt i32 %30, 0
  %77 = add nsw i32 %31, %30
  %78 = icmp slt i32 %77, 1024
  %79 = or i1 %76, %78
  %80 = select i1 %79, i64 64, i64 0
  %81 = lshr i32 %31, 24
  %82 = and i32 %81, 128
  %83 = zext i32 %82 to i64
  %84 = icmp sgt i32 %33, 0
  %85 = add nsw i32 %34, %33
  %86 = icmp slt i32 %85, 256
  %87 = or i1 %84, %86
  %88 = select i1 %87, i64 256, i64 0
  %89 = lshr i32 %34, 22
  %90 = and i32 %89, 512
  %91 = zext i32 %90 to i64
  %92 = icmp slt i32 %20, %36
  %93 = add nsw i32 %21, %20
  %94 = add nsw i32 %37, %36
  %95 = icmp sgt i32 %93, %94
  %96 = or i1 %92, %95
  %97 = select i1 %96, i64 1024, i64 0
  %98 = lshr i32 %37, 20
  %99 = and i32 %98, 2048
  %100 = zext i32 %99 to i64
  %.not207 = icmp eq i32 %19, 1
  %101 = select i1 %.not207, i64 0, i64 4096
  %.not208 = icmp eq i32 %32, 1
  %102 = select i1 %.not208, i64 0, i64 8192
  %103 = select i1 %.not204, i64 -9223372036854775808, i64 -9223372036854775806
  %104 = or i64 %103, %67
  %105 = or i64 %104, %72
  %106 = or i64 %105, %101
  %107 = or i64 %106, %75
  %108 = or i64 %107, %69
  %109 = or i64 %108, %68
  %110 = or i64 %109, %83
  %111 = or i64 %110, %102
  %112 = or i64 %111, %80
  %113 = or i64 %112, %91
  %114 = or i64 %113, %88
  %115 = or i64 %114, %100
  %116 = or i64 %115, %97
  %117 = tail call i64 @llvm.cttz.i64(i64 %116, i1 true), !range !393
  %118 = trunc i64 %117 to i32
  switch i32 %118, label %no_errors_bb [
    i32 0, label %assert_failed
    i32 1, label %assert_failed9
    i32 2, label %assert_failed10
    i32 3, label %assert_failed11
    i32 4, label %assert_failed12
    i32 5, label %assert_failed13
    i32 6, label %assert_failed14
    i32 7, label %assert_failed15
    i32 8, label %assert_failed16
    i32 9, label %assert_failed17
    i32 10, label %assert_failed18
    i32 11, label %assert_failed19
    i32 12, label %assert_failed20
    i32 13, label %assert_failed21
  ], !prof !394

no_errors_bb:                                     ; preds = %then_bb7
  %119 = sext i32 %21 to i64
  %120 = sext i32 %18 to i64
  %BINS.total_extent.1 = mul nsw i64 %119, %120
  %121 = sext i32 %34 to i64
  %122 = sext i32 %31 to i64
  %IMG.total_extent.1 = mul nsw i64 %121, %122
  %123 = sext i32 %37 to i64
  %IMG.total_extent.2 = mul nsw i64 %IMG.total_extent.1, %123
  %BINS.extent.0.lobit = lshr i32 %18, 31
  %124 = zext i32 %BINS.extent.0.lobit to i64
  %125 = sext i32 %22 to i64
  %x0 = mul nsw i64 %125, %119
  %126 = tail call i64 @llvm.abs.i64(i64 %x0, i1 true)
  %127 = icmp ugt i64 %126, 2147483647
  %128 = select i1 %127, i64 2, i64 0
  %129 = icmp sgt i64 %BINS.total_extent.1, 2147483647
  %130 = select i1 %129, i64 4, i64 0
  %131 = lshr i32 %31, 28
  %132 = and i32 %131, 8
  %133 = zext i32 %132 to i64
  %134 = sext i32 %35 to i64
  %x1 = mul nsw i64 %134, %121
  %135 = tail call i64 @llvm.abs.i64(i64 %x1, i1 true)
  %136 = icmp ugt i64 %135, 2147483647
  %137 = select i1 %136, i64 16, i64 0
  %138 = icmp sgt i64 %IMG.total_extent.1, 2147483647
  %139 = select i1 %138, i64 32, i64 0
  %140 = sext i32 %38 to i64
  %x2 = mul nsw i64 %140, %123
  %141 = tail call i64 @llvm.abs.i64(i64 %x2, i1 true)
  %142 = icmp ugt i64 %141, 2147483647
  %143 = select i1 %142, i64 64, i64 0
  %144 = icmp sgt i64 %IMG.total_extent.2, 2147483647
  %145 = select i1 %144, i64 128, i64 0
  %and.i.i.i = shl i64 %14, 7
  %146 = and i64 %and.i.i.i, 256
  %and.i.i.i242 = shl i64 %27, 8
  %147 = and i64 %and.i.i.i242, 512
  %148 = icmp eq i8* %23, null
  %149 = select i1 %148, i64 2048, i64 0
  %150 = select i1 %cmp.i, i64 -9223372036854774784, i64 -9223372036854775808
  %151 = or i64 %150, %146
  %152 = or i64 %151, %124
  %153 = or i64 %152, %130
  %154 = or i64 %153, %149
  %155 = or i64 %154, %128
  %156 = or i64 %155, %147
  %157 = or i64 %156, %133
  %158 = or i64 %157, %139
  %159 = or i64 %158, %137
  %160 = or i64 %159, %145
  %161 = or i64 %160, %143
  %162 = tail call i64 @llvm.cttz.i64(i64 %161, i1 true), !range !393
  %163 = trunc i64 %162 to i32
  switch i32 %163, label %no_errors_bb22 [
    i32 0, label %assert_failed23
    i32 1, label %assert_failed24
    i32 2, label %assert_failed25
    i32 3, label %assert_failed26
    i32 4, label %assert_failed27
    i32 5, label %assert_failed28
    i32 6, label %assert_failed29
    i32 7, label %assert_failed30
    i32 8, label %assert_failed31
    i32 9, label %assert_failed32
    i32 10, label %assert_failed33
    i32 11, label %assert_failed34
  ], !prof !395

assert_failed:                                    ; preds = %then_bb7
  %164 = tail call i32 @halide_error_bad_type(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.203, i64 0, i64 0), i32 %or6.i.i, i32 73728) #15
  tail call void @pimShowStats()
  ret i32 %164

assert_failed9:                                   ; preds = %then_bb7
  %165 = tail call i32 @halide_error_bad_dimensions(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.203, i64 0, i64 0), i32 %15, i32 2) #15
  tail call void @pimShowStats()
  ret i32 %165

assert_failed10:                                  ; preds = %then_bb7
  %166 = tail call i32 @halide_error_bad_type(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i64 0, i64 0), i32 %or6.i.i240, i32 73728) #15
  tail call void @pimShowStats()
  ret i32 %166

assert_failed11:                                  ; preds = %then_bb7
  %167 = tail call i32 @halide_error_bad_dimensions(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i64 0, i64 0), i32 %28, i32 3) #15
  tail call void @pimShowStats()
  ret i32 %167

assert_failed12:                                  ; preds = %then_bb7
  %168 = tail call i32 @halide_error_buffer_extents_negative(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.203, i64 0, i64 0), i32 0, i32 %18) #15
  tail call void @pimShowStats()
  ret i32 %168

assert_failed13:                                  ; preds = %then_bb7
  %169 = tail call i32 @halide_error_buffer_extents_negative(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.203, i64 0, i64 0), i32 1, i32 %21) #15
  tail call void @pimShowStats()
  ret i32 %169

assert_failed14:                                  ; preds = %then_bb7
  %170 = add nsw i32 %77, -1
  %171 = tail call i32 @halide_error_access_out_of_bounds(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i64 0, i64 0), i32 0, i32 0, i32 1023, i32 %30, i32 %170) #15
  tail call void @pimShowStats()
  ret i32 %171

assert_failed15:                                  ; preds = %then_bb7
  %172 = tail call i32 @halide_error_buffer_extents_negative(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i64 0, i64 0), i32 0, i32 %31) #15
  tail call void @pimShowStats()
  ret i32 %172

assert_failed16:                                  ; preds = %then_bb7
  %173 = add nsw i32 %85, -1
  %174 = tail call i32 @halide_error_access_out_of_bounds(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i64 0, i64 0), i32 1, i32 0, i32 255, i32 %33, i32 %173) #15
  tail call void @pimShowStats()
  ret i32 %174

assert_failed17:                                  ; preds = %then_bb7
  %175 = tail call i32 @halide_error_buffer_extents_negative(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i64 0, i64 0), i32 1, i32 %34) #15
  tail call void @pimShowStats()
  ret i32 %175

assert_failed18:                                  ; preds = %then_bb7
  %176 = add nsw i32 %93, -1
  %177 = add nsw i32 %94, -1
  %178 = tail call i32 @halide_error_access_out_of_bounds(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i64 0, i64 0), i32 2, i32 %20, i32 %176, i32 %36, i32 %177) #15
  tail call void @pimShowStats()
  ret i32 %178

assert_failed19:                                  ; preds = %then_bb7
  %179 = tail call i32 @halide_error_buffer_extents_negative(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i64 0, i64 0), i32 2, i32 %37) #15
  tail call void @pimShowStats()
  ret i32 %179

assert_failed20:                                  ; preds = %then_bb7
  %180 = tail call i32 @halide_error_constraint_violated(i8* null, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str.205, i64 0, i64 0), i32 %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.206, i64 0, i64 0), i32 1) #15
  tail call void @pimShowStats()
  ret i32 %180

assert_failed21:                                  ; preds = %then_bb7
  %181 = tail call i32 @halide_error_constraint_violated(i8* null, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.207, i64 0, i64 0), i32 %32, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.206, i64 0, i64 0), i32 1) #15
  tail call void @pimShowStats()
  ret i32 %181

no_errors_bb22:                                   ; preds = %no_errors_bb
  %a1 = add nsw i32 %18, %17
  %182 = icmp sgt i32 %a1, 256
  %183 = select i1 %182, i32 %a1, i32 256
  %a0 = add nsw i32 %183, -1024
  %184 = icmp sgt i32 %17, %a0
  %a24 = select i1 %184, i32 %a0, i32 %17
  %185 = icmp slt i32 %17, 0
  %t65 = select i1 %185, i32 %17, i32 0
  %186 = sub nsw i32 %183, %t65
  %187 = add nsw i32 %186, -1
  %188 = and i32 %187, -1024
  %a6 = add nsw i32 %188, %t65
  %189 = icmp sgt i32 %a0, %a6
  %a5 = select i1 %189, i32 %a6, i32 %a0
  %190 = icmp sgt i32 %a5, -768
  %191 = select i1 %190, i32 %a5, i32 -768
  %b6 = add nsw i32 %191, 1024
  %192 = icmp sgt i32 %a1, %b6
  %193 = select i1 %192, i32 %a1, i32 %b6
  %194 = icmp slt i32 %a24, 0
  %195 = select i1 %194, i32 %a24, i32 0
  %a13 = sub i32 %193, %195
  %196 = icmp sgt i32 %a13, 0
  %197 = select i1 %196, i32 %a13, i32 0
  %t67 = zext i32 %197 to i64
  %198 = icmp sgt i32 %21, 0
  %199 = select i1 %198, i32 %21, i32 0
  %t68 = zext i32 %199 to i64
  %200 = shl nuw nsw i64 %t67, 2
  %201 = and i64 %200, 4294967292
  %202 = mul nuw nsw i64 %201, %t68
  %203 = lshr i64 %202, 32
  %204 = lshr i64 %t67, 30
  %205 = mul nuw nsw i64 %204, %t68
  %t70 = add nuw nsw i64 %203, %205
  %t69 = shl nuw nsw i64 %t68, 12
  %206 = mul i64 %t69, %t67
  %207 = icmp ult i64 %206, 2147483648
  %208 = lshr i64 %t70, 32
  %209 = lshr i64 %t70, 22
  %210 = or i64 %208, %209
  %211 = icmp eq i64 %210, 0
  %212 = and i1 %207, %211
  br i1 %212, label %"assert succeeded36", label %"assert failed35", !prof !396

assert_failed23:                                  ; preds = %no_errors_bb
  %213 = tail call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.200, i64 0, i64 0), i64 %120, i64 2147483647) #15
  tail call void @pimShowStats()
  ret i32 %213

assert_failed24:                                  ; preds = %no_errors_bb
  %214 = tail call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.200, i64 0, i64 0), i64 %126, i64 2147483647) #15
  tail call void @pimShowStats()
  ret i32 %214

assert_failed25:                                  ; preds = %no_errors_bb
  %215 = tail call i32 @halide_error_buffer_extents_too_large(i8* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.200, i64 0, i64 0), i64 %BINS.total_extent.1, i64 2147483647) #15
  tail call void @pimShowStats()
  ret i32 %215

assert_failed26:                                  ; preds = %no_errors_bb
  %216 = tail call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0), i64 %122, i64 2147483647) #15
  tail call void @pimShowStats()
  ret i32 %216

assert_failed27:                                  ; preds = %no_errors_bb
  %217 = tail call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0), i64 %135, i64 2147483647) #15
  tail call void @pimShowStats()
  ret i32 %217

assert_failed28:                                  ; preds = %no_errors_bb
  %218 = tail call i32 @halide_error_buffer_extents_too_large(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0), i64 %IMG.total_extent.1, i64 2147483647) #15
  tail call void @pimShowStats()
  ret i32 %218

assert_failed29:                                  ; preds = %no_errors_bb
  %219 = tail call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0), i64 %141, i64 2147483647) #15
  tail call void @pimShowStats()
  ret i32 %219

assert_failed30:                                  ; preds = %no_errors_bb
  %220 = tail call i32 @halide_error_buffer_extents_too_large(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0), i64 %IMG.total_extent.2, i64 2147483647) #15
  tail call void @pimShowStats()
  ret i32 %220

assert_failed31:                                  ; preds = %no_errors_bb
  %221 = tail call i32 @halide_error_device_dirty_with_no_device_support(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.203, i64 0, i64 0)) #15
  tail call void @pimShowStats()
  ret i32 %221

assert_failed32:                                  ; preds = %no_errors_bb
  %222 = tail call i32 @halide_error_device_dirty_with_no_device_support(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i64 0, i64 0)) #15
  tail call void @pimShowStats()
  ret i32 %222

assert_failed33:                                  ; preds = %no_errors_bb
  %223 = tail call i32 @halide_error_host_is_null(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.203, i64 0, i64 0)) #15
  tail call void @pimShowStats()
  ret i32 %223

assert_failed34:                                  ; preds = %no_errors_bb
  %224 = tail call i32 @halide_error_host_is_null(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i64 0, i64 0)) #15
  tail call void @pimShowStats()
  ret i32 %224

"assert failed35":                                ; preds = %no_errors_bb22
  %225 = shl nuw nsw i64 %t68, 10
  %226 = mul i64 %225, %200
  %227 = tail call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str.208, i64 0, i64 0), i64 %226, i64 2147483647) #15
  br label %call_destructor.exit221

"assert succeeded36":                             ; preds = %no_errors_bb22
  %228 = or i64 %206, 12
  %229 = tail call i8* @halide_malloc(i8* null, i64 %228)
  %color_hist_intm = bitcast i8* %229 to i32*
  %.not209 = icmp eq i8* %229, null
  br i1 %.not209, label %"assert failed37", label %"assert succeeded38", !prof !386

"assert failed37":                                ; preds = %"assert succeeded36"
  %230 = tail call i32 @halide_error_out_of_memory(i8* null) #15
  br label %call_destructor.exit221

"assert succeeded38":                             ; preds = %"assert succeeded36"
  %b22 = add nsw i32 %186, 1023
  %t37 = ashr i32 %b22, 10
  %t38 = sub i32 %183, %195
  %231 = mul i32 %a13, %21
  %t48 = ashr i32 %186, 10
  %232 = icmp sgt i32 %186, 1023
  %233 = icmp sgt i32 %t37, %t48
  br i1 %198, label %"for color_hist_intm.s0.u.us.preheader", label %call_destructor.exit306, !prof !396

"for color_hist_intm.s0.u.us.preheader":          ; preds = %"assert succeeded38"
  %234 = sext i32 %t65 to i64
  %235 = add nsw i32 %t48, -1
  %236 = zext i32 %235 to i64
  %237 = shl nuw nsw i64 %236, 12
  %238 = add nuw nsw i64 %237, 4096
  %239 = zext i32 %21 to i64
  %240 = getelementptr inbounds i8, i8* %229, i64 -4096
  %241 = bitcast i8* %240 to i32*
  %xtraiter = and i64 %239, 1
  %242 = icmp eq i32 %21, 1
  %unroll_iter = and i64 %239, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %"for color_hist_intm.s0.u.us"

"for color_hist_intm.s0.u.us":                    ; preds = %"for color_hist_intm.s0.u.us.preheader", %"end for color_hist_intm.s0.c.rebased.us"
  %color_hist_intm.s0.u.us = phi i32 [ %258, %"end for color_hist_intm.s0.c.rebased.us" ], [ 0, %"for color_hist_intm.s0.u.us.preheader" ]
  %243 = mul i32 %231, %color_hist_intm.s0.u.us
  %244 = sub i32 %243, %195
  %t46.us = add nsw i32 %t38, %243
  br i1 %242, label %"end for color_hist_intm.s0.c.rebased.us.unr-lcssa", label %"for color_hist_intm.s0.c.rebased.us"

"for color_hist_intm.s0.c.rebased.us":            ; preds = %"for color_hist_intm.s0.u.us", %"end for color_hist_intm.s0.i.i40.us.1"
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %"end for color_hist_intm.s0.i.i40.us.1" ], [ 0, %"for color_hist_intm.s0.u.us" ]
  %color_hist_intm.s0.c.rebased.us = phi i32 [ %13719, %"end for color_hist_intm.s0.i.i40.us.1" ], [ 0, %"for color_hist_intm.s0.u.us" ]
  %niter = phi i64 [ %niter.nsub.1, %"end for color_hist_intm.s0.i.i40.us.1" ], [ %unroll_iter, %"for color_hist_intm.s0.u.us" ]
  %245 = mul nsw i32 %color_hist_intm.s0.c.rebased.us, %a13
  br i1 %232, label %"for color_hist_intm.s0.i.i.preheader.us", label %"end for color_hist_intm.s0.i.i.us", !prof !396

"end for color_hist_intm.s0.i.i.us":              ; preds = %"for color_hist_intm.s0.i.i.preheader.us", %"for color_hist_intm.s0.c.rebased.us"
  br i1 %233, label %"for color_hist_intm.s0.i.i39.preheader.us", label %"end for color_hist_intm.s0.i.i40.us", !prof !396

"end for color_hist_intm.s0.i.i40.us":            ; preds = %"for color_hist_intm.s0.i.i39.preheader.us", %"end for color_hist_intm.s0.i.i.us"
  %246 = or i32 %color_hist_intm.s0.c.rebased.us, 1
  %247 = mul nsw i32 %246, %a13
  br i1 %232, label %"for color_hist_intm.s0.i.i.preheader.us.1", label %"end for color_hist_intm.s0.i.i.us.1", !prof !396

"end for color_hist_intm.s0.c.rebased.us.unr-lcssa": ; preds = %"end for color_hist_intm.s0.i.i40.us.1", %"for color_hist_intm.s0.u.us"
  %indvars.iv.unr = phi i64 [ 0, %"for color_hist_intm.s0.u.us" ], [ %indvars.iv.next.1, %"end for color_hist_intm.s0.i.i40.us.1" ]
  %color_hist_intm.s0.c.rebased.us.unr = phi i32 [ 0, %"for color_hist_intm.s0.u.us" ], [ %13719, %"end for color_hist_intm.s0.i.i40.us.1" ]
  br i1 %lcmp.mod.not, label %"end for color_hist_intm.s0.c.rebased.us", label %"for color_hist_intm.s0.c.rebased.us.epil"

"for color_hist_intm.s0.c.rebased.us.epil":       ; preds = %"end for color_hist_intm.s0.c.rebased.us.unr-lcssa"
  %248 = mul nsw i32 %color_hist_intm.s0.c.rebased.us.unr, %a13
  br i1 %232, label %"for color_hist_intm.s0.i.i.preheader.us.epil", label %"end for color_hist_intm.s0.i.i.us.epil", !prof !396

"for color_hist_intm.s0.i.i.preheader.us.epil":   ; preds = %"for color_hist_intm.s0.c.rebased.us.epil"
  %249 = trunc i64 %indvars.iv.unr to i32
  %250 = mul i32 %a13, %249
  %251 = add i32 %244, %250
  %252 = sext i32 %251 to i64
  %253 = add nsw i64 %234, %252
  %254 = shl nsw i64 %253, 2
  %scevgep.epil = getelementptr i8, i8* %229, i64 %254
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(1) %scevgep.epil, i8 0, i64 %238, i1 false)
  br label %"end for color_hist_intm.s0.i.i.us.epil"

"end for color_hist_intm.s0.i.i.us.epil":         ; preds = %"for color_hist_intm.s0.i.i.preheader.us.epil", %"for color_hist_intm.s0.c.rebased.us.epil"
  br i1 %233, label %"for color_hist_intm.s0.i.i39.preheader.us.epil", label %"end for color_hist_intm.s0.c.rebased.us", !prof !396

"for color_hist_intm.s0.i.i39.preheader.us.epil": ; preds = %"end for color_hist_intm.s0.i.i.us.epil"
  %t50.us.epil = add nsw i32 %t46.us, %248
  %255 = sext i32 %t50.us.epil to i64
  %256 = getelementptr inbounds i32, i32* %241, i64 %255
  %257 = bitcast i32* %256 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(4096) %257, i8 0, i64 4096, i1 false)
  br label %"end for color_hist_intm.s0.c.rebased.us"

"end for color_hist_intm.s0.c.rebased.us":        ; preds = %"for color_hist_intm.s0.i.i39.preheader.us.epil", %"end for color_hist_intm.s0.i.i.us.epil", %"end for color_hist_intm.s0.c.rebased.us.unr-lcssa"
  %258 = add nuw nsw i32 %color_hist_intm.s0.u.us, 1
  %.not210.us = icmp eq i32 %258, 1024
  br i1 %.not210.us, label %"end for color_hist_intm.s0.u", label %"for color_hist_intm.s0.u.us"

"for color_hist_intm.s0.i.i39.preheader.us":      ; preds = %"end for color_hist_intm.s0.i.i.us"
  %t50.us = add nsw i32 %t46.us, %245
  %259 = sext i32 %t50.us to i64
  %260 = getelementptr inbounds i32, i32* %241, i64 %259
  %261 = bitcast i32* %260 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(4096) %261, i8 0, i64 4096, i1 false)
  br label %"end for color_hist_intm.s0.i.i40.us"

"for color_hist_intm.s0.i.i.preheader.us":        ; preds = %"for color_hist_intm.s0.c.rebased.us"
  %262 = trunc i64 %indvars.iv to i32
  %263 = mul i32 %a13, %262
  %264 = add i32 %244, %263
  %265 = sext i32 %264 to i64
  %266 = add nsw i64 %234, %265
  %267 = shl nsw i64 %266, 2
  %scevgep = getelementptr i8, i8* %229, i64 %267
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(1) %scevgep, i8 0, i64 %238, i1 false)
  br label %"end for color_hist_intm.s0.i.i.us"

"end for color_hist_intm.s0.u":                   ; preds = %"end for color_hist_intm.s0.c.rebased.us"
  %268 = mul nsw i32 %35, %33
  %269 = sub i32 %20, %36
  %270 = add i32 %268, %30
  %271 = insertelement <1024 x i32> undef, i32 %231, i32 0
  %272 = shufflevector <1024 x i32> %271, <1024 x i32> undef, <1024 x i32> zeroinitializer
  %273 = mul nsw <1024 x i32> %272, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255, i32 256, i32 257, i32 258, i32 259, i32 260, i32 261, i32 262, i32 263, i32 264, i32 265, i32 266, i32 267, i32 268, i32 269, i32 270, i32 271, i32 272, i32 273, i32 274, i32 275, i32 276, i32 277, i32 278, i32 279, i32 280, i32 281, i32 282, i32 283, i32 284, i32 285, i32 286, i32 287, i32 288, i32 289, i32 290, i32 291, i32 292, i32 293, i32 294, i32 295, i32 296, i32 297, i32 298, i32 299, i32 300, i32 301, i32 302, i32 303, i32 304, i32 305, i32 306, i32 307, i32 308, i32 309, i32 310, i32 311, i32 312, i32 313, i32 314, i32 315, i32 316, i32 317, i32 318, i32 319, i32 320, i32 321, i32 322, i32 323, i32 324, i32 325, i32 326, i32 327, i32 328, i32 329, i32 330, i32 331, i32 332, i32 333, i32 334, i32 335, i32 336, i32 337, i32 338, i32 339, i32 340, i32 341, i32 342, i32 343, i32 344, i32 345, i32 346, i32 347, i32 348, i32 349, i32 350, i32 351, i32 352, i32 353, i32 354, i32 355, i32 356, i32 357, i32 358, i32 359, i32 360, i32 361, i32 362, i32 363, i32 364, i32 365, i32 366, i32 367, i32 368, i32 369, i32 370, i32 371, i32 372, i32 373, i32 374, i32 375, i32 376, i32 377, i32 378, i32 379, i32 380, i32 381, i32 382, i32 383, i32 384, i32 385, i32 386, i32 387, i32 388, i32 389, i32 390, i32 391, i32 392, i32 393, i32 394, i32 395, i32 396, i32 397, i32 398, i32 399, i32 400, i32 401, i32 402, i32 403, i32 404, i32 405, i32 406, i32 407, i32 408, i32 409, i32 410, i32 411, i32 412, i32 413, i32 414, i32 415, i32 416, i32 417, i32 418, i32 419, i32 420, i32 421, i32 422, i32 423, i32 424, i32 425, i32 426, i32 427, i32 428, i32 429, i32 430, i32 431, i32 432, i32 433, i32 434, i32 435, i32 436, i32 437, i32 438, i32 439, i32 440, i32 441, i32 442, i32 443, i32 444, i32 445, i32 446, i32 447, i32 448, i32 449, i32 450, i32 451, i32 452, i32 453, i32 454, i32 455, i32 456, i32 457, i32 458, i32 459, i32 460, i32 461, i32 462, i32 463, i32 464, i32 465, i32 466, i32 467, i32 468, i32 469, i32 470, i32 471, i32 472, i32 473, i32 474, i32 475, i32 476, i32 477, i32 478, i32 479, i32 480, i32 481, i32 482, i32 483, i32 484, i32 485, i32 486, i32 487, i32 488, i32 489, i32 490, i32 491, i32 492, i32 493, i32 494, i32 495, i32 496, i32 497, i32 498, i32 499, i32 500, i32 501, i32 502, i32 503, i32 504, i32 505, i32 506, i32 507, i32 508, i32 509, i32 510, i32 511, i32 512, i32 513, i32 514, i32 515, i32 516, i32 517, i32 518, i32 519, i32 520, i32 521, i32 522, i32 523, i32 524, i32 525, i32 526, i32 527, i32 528, i32 529, i32 530, i32 531, i32 532, i32 533, i32 534, i32 535, i32 536, i32 537, i32 538, i32 539, i32 540, i32 541, i32 542, i32 543, i32 544, i32 545, i32 546, i32 547, i32 548, i32 549, i32 550, i32 551, i32 552, i32 553, i32 554, i32 555, i32 556, i32 557, i32 558, i32 559, i32 560, i32 561, i32 562, i32 563, i32 564, i32 565, i32 566, i32 567, i32 568, i32 569, i32 570, i32 571, i32 572, i32 573, i32 574, i32 575, i32 576, i32 577, i32 578, i32 579, i32 580, i32 581, i32 582, i32 583, i32 584, i32 585, i32 586, i32 587, i32 588, i32 589, i32 590, i32 591, i32 592, i32 593, i32 594, i32 595, i32 596, i32 597, i32 598, i32 599, i32 600, i32 601, i32 602, i32 603, i32 604, i32 605, i32 606, i32 607, i32 608, i32 609, i32 610, i32 611, i32 612, i32 613, i32 614, i32 615, i32 616, i32 617, i32 618, i32 619, i32 620, i32 621, i32 622, i32 623, i32 624, i32 625, i32 626, i32 627, i32 628, i32 629, i32 630, i32 631, i32 632, i32 633, i32 634, i32 635, i32 636, i32 637, i32 638, i32 639, i32 640, i32 641, i32 642, i32 643, i32 644, i32 645, i32 646, i32 647, i32 648, i32 649, i32 650, i32 651, i32 652, i32 653, i32 654, i32 655, i32 656, i32 657, i32 658, i32 659, i32 660, i32 661, i32 662, i32 663, i32 664, i32 665, i32 666, i32 667, i32 668, i32 669, i32 670, i32 671, i32 672, i32 673, i32 674, i32 675, i32 676, i32 677, i32 678, i32 679, i32 680, i32 681, i32 682, i32 683, i32 684, i32 685, i32 686, i32 687, i32 688, i32 689, i32 690, i32 691, i32 692, i32 693, i32 694, i32 695, i32 696, i32 697, i32 698, i32 699, i32 700, i32 701, i32 702, i32 703, i32 704, i32 705, i32 706, i32 707, i32 708, i32 709, i32 710, i32 711, i32 712, i32 713, i32 714, i32 715, i32 716, i32 717, i32 718, i32 719, i32 720, i32 721, i32 722, i32 723, i32 724, i32 725, i32 726, i32 727, i32 728, i32 729, i32 730, i32 731, i32 732, i32 733, i32 734, i32 735, i32 736, i32 737, i32 738, i32 739, i32 740, i32 741, i32 742, i32 743, i32 744, i32 745, i32 746, i32 747, i32 748, i32 749, i32 750, i32 751, i32 752, i32 753, i32 754, i32 755, i32 756, i32 757, i32 758, i32 759, i32 760, i32 761, i32 762, i32 763, i32 764, i32 765, i32 766, i32 767, i32 768, i32 769, i32 770, i32 771, i32 772, i32 773, i32 774, i32 775, i32 776, i32 777, i32 778, i32 779, i32 780, i32 781, i32 782, i32 783, i32 784, i32 785, i32 786, i32 787, i32 788, i32 789, i32 790, i32 791, i32 792, i32 793, i32 794, i32 795, i32 796, i32 797, i32 798, i32 799, i32 800, i32 801, i32 802, i32 803, i32 804, i32 805, i32 806, i32 807, i32 808, i32 809, i32 810, i32 811, i32 812, i32 813, i32 814, i32 815, i32 816, i32 817, i32 818, i32 819, i32 820, i32 821, i32 822, i32 823, i32 824, i32 825, i32 826, i32 827, i32 828, i32 829, i32 830, i32 831, i32 832, i32 833, i32 834, i32 835, i32 836, i32 837, i32 838, i32 839, i32 840, i32 841, i32 842, i32 843, i32 844, i32 845, i32 846, i32 847, i32 848, i32 849, i32 850, i32 851, i32 852, i32 853, i32 854, i32 855, i32 856, i32 857, i32 858, i32 859, i32 860, i32 861, i32 862, i32 863, i32 864, i32 865, i32 866, i32 867, i32 868, i32 869, i32 870, i32 871, i32 872, i32 873, i32 874, i32 875, i32 876, i32 877, i32 878, i32 879, i32 880, i32 881, i32 882, i32 883, i32 884, i32 885, i32 886, i32 887, i32 888, i32 889, i32 890, i32 891, i32 892, i32 893, i32 894, i32 895, i32 896, i32 897, i32 898, i32 899, i32 900, i32 901, i32 902, i32 903, i32 904, i32 905, i32 906, i32 907, i32 908, i32 909, i32 910, i32 911, i32 912, i32 913, i32 914, i32 915, i32 916, i32 917, i32 918, i32 919, i32 920, i32 921, i32 922, i32 923, i32 924, i32 925, i32 926, i32 927, i32 928, i32 929, i32 930, i32 931, i32 932, i32 933, i32 934, i32 935, i32 936, i32 937, i32 938, i32 939, i32 940, i32 941, i32 942, i32 943, i32 944, i32 945, i32 946, i32 947, i32 948, i32 949, i32 950, i32 951, i32 952, i32 953, i32 954, i32 955, i32 956, i32 957, i32 958, i32 959, i32 960, i32 961, i32 962, i32 963, i32 964, i32 965, i32 966, i32 967, i32 968, i32 969, i32 970, i32 971, i32 972, i32 973, i32 974, i32 975, i32 976, i32 977, i32 978, i32 979, i32 980, i32 981, i32 982, i32 983, i32 984, i32 985, i32 986, i32 987, i32 988, i32 989, i32 990, i32 991, i32 992, i32 993, i32 994, i32 995, i32 996, i32 997, i32 998, i32 999, i32 1000, i32 1001, i32 1002, i32 1003, i32 1004, i32 1005, i32 1006, i32 1007, i32 1008, i32 1009, i32 1010, i32 1011, i32 1012, i32 1013, i32 1014, i32 1015, i32 1016, i32 1017, i32 1018, i32 1019, i32 1020, i32 1021, i32 1022, i32 1023>
  %274 = bitcast i8* %23 to i32*
  br label %"for color_hist_intm.s1.c.rebased"

"for color_hist_intm.s1.c.rebased":               ; preds = %"end for color_hist_intm.s0.u", %"end for color_hist_intm.s1.r7$y"
  %indvars.iv475 = phi i64 [ 0, %"end for color_hist_intm.s0.u" ], [ %indvars.iv.next476, %"end for color_hist_intm.s1.r7$y" ]
  %color_hist_intm.s1.c.rebased = phi i32 [ 0, %"end for color_hist_intm.s0.u" ], [ %6965, %"end for color_hist_intm.s1.r7$y" ]
  %275 = trunc i64 %indvars.iv475 to i32
  %reass.add = add i32 %269, %275
  %reass.mul = mul i32 %reass.add, %38
  %t56 = sub i32 %reass.mul, %270
  %276 = mul nsw i32 %color_hist_intm.s1.c.rebased, %a13
  %t55 = sub nsw i32 %276, %195
  %277 = insertelement <1024 x i32> undef, i32 %t55, i32 0
  %278 = shufflevector <1024 x i32> %277, <1024 x i32> undef, <1024 x i32> zeroinitializer
  %279 = add nsw <1024 x i32> %278, %273
  %280 = sext i32 %t56 to i64
  br label %"for color_hist_intm.s1.r7$y"

"for color_hist_intm.s1.r7$y":                    ; preds = %"for color_hist_intm.s1.c.rebased", %"for color_hist_intm.s1.r7$y"
  %indvars.iv473 = phi i64 [ 0, %"for color_hist_intm.s1.c.rebased" ], [ %indvars.iv.next474, %"for color_hist_intm.s1.r7$y" ]
  %281 = mul nsw i64 %indvars.iv473, %134
  %282 = add nsw i64 %281, %280
  %283 = getelementptr inbounds i32, i32* %274, i64 %282
  %284 = bitcast i32* %283 to <16 x i32>*
  %285 = load <16 x i32>, <16 x i32>* %284, align 4, !tbaa !397
  %286 = getelementptr inbounds i32, i32* %283, i64 16
  %287 = bitcast i32* %286 to <16 x i32>*
  %288 = load <16 x i32>, <16 x i32>* %287, align 4, !tbaa !397
  %289 = getelementptr inbounds i32, i32* %283, i64 32
  %290 = bitcast i32* %289 to <16 x i32>*
  %291 = load <16 x i32>, <16 x i32>* %290, align 4, !tbaa !397
  %292 = getelementptr inbounds i32, i32* %283, i64 48
  %293 = bitcast i32* %292 to <16 x i32>*
  %294 = load <16 x i32>, <16 x i32>* %293, align 4, !tbaa !397
  %295 = getelementptr inbounds i32, i32* %283, i64 64
  %296 = bitcast i32* %295 to <16 x i32>*
  %297 = load <16 x i32>, <16 x i32>* %296, align 4, !tbaa !397
  %298 = getelementptr inbounds i32, i32* %283, i64 80
  %299 = bitcast i32* %298 to <16 x i32>*
  %300 = load <16 x i32>, <16 x i32>* %299, align 4, !tbaa !397
  %301 = getelementptr inbounds i32, i32* %283, i64 96
  %302 = bitcast i32* %301 to <16 x i32>*
  %303 = load <16 x i32>, <16 x i32>* %302, align 4, !tbaa !397
  %304 = getelementptr inbounds i32, i32* %283, i64 112
  %305 = bitcast i32* %304 to <16 x i32>*
  %306 = load <16 x i32>, <16 x i32>* %305, align 4, !tbaa !397
  %307 = getelementptr inbounds i32, i32* %283, i64 128
  %308 = bitcast i32* %307 to <16 x i32>*
  %309 = load <16 x i32>, <16 x i32>* %308, align 4, !tbaa !397
  %310 = getelementptr inbounds i32, i32* %283, i64 144
  %311 = bitcast i32* %310 to <16 x i32>*
  %312 = load <16 x i32>, <16 x i32>* %311, align 4, !tbaa !397
  %313 = getelementptr inbounds i32, i32* %283, i64 160
  %314 = bitcast i32* %313 to <16 x i32>*
  %315 = load <16 x i32>, <16 x i32>* %314, align 4, !tbaa !397
  %316 = getelementptr inbounds i32, i32* %283, i64 176
  %317 = bitcast i32* %316 to <16 x i32>*
  %318 = load <16 x i32>, <16 x i32>* %317, align 4, !tbaa !397
  %319 = getelementptr inbounds i32, i32* %283, i64 192
  %320 = bitcast i32* %319 to <16 x i32>*
  %321 = load <16 x i32>, <16 x i32>* %320, align 4, !tbaa !397
  %322 = getelementptr inbounds i32, i32* %283, i64 208
  %323 = bitcast i32* %322 to <16 x i32>*
  %324 = load <16 x i32>, <16 x i32>* %323, align 4, !tbaa !397
  %325 = getelementptr inbounds i32, i32* %283, i64 224
  %326 = bitcast i32* %325 to <16 x i32>*
  %327 = load <16 x i32>, <16 x i32>* %326, align 4, !tbaa !397
  %328 = getelementptr inbounds i32, i32* %283, i64 240
  %329 = bitcast i32* %328 to <16 x i32>*
  %330 = load <16 x i32>, <16 x i32>* %329, align 4, !tbaa !397
  %331 = getelementptr inbounds i32, i32* %283, i64 256
  %332 = bitcast i32* %331 to <16 x i32>*
  %333 = load <16 x i32>, <16 x i32>* %332, align 4, !tbaa !397
  %334 = getelementptr inbounds i32, i32* %283, i64 272
  %335 = bitcast i32* %334 to <16 x i32>*
  %336 = load <16 x i32>, <16 x i32>* %335, align 4, !tbaa !397
  %337 = getelementptr inbounds i32, i32* %283, i64 288
  %338 = bitcast i32* %337 to <16 x i32>*
  %339 = load <16 x i32>, <16 x i32>* %338, align 4, !tbaa !397
  %340 = getelementptr inbounds i32, i32* %283, i64 304
  %341 = bitcast i32* %340 to <16 x i32>*
  %342 = load <16 x i32>, <16 x i32>* %341, align 4, !tbaa !397
  %343 = getelementptr inbounds i32, i32* %283, i64 320
  %344 = bitcast i32* %343 to <16 x i32>*
  %345 = load <16 x i32>, <16 x i32>* %344, align 4, !tbaa !397
  %346 = getelementptr inbounds i32, i32* %283, i64 336
  %347 = bitcast i32* %346 to <16 x i32>*
  %348 = load <16 x i32>, <16 x i32>* %347, align 4, !tbaa !397
  %349 = getelementptr inbounds i32, i32* %283, i64 352
  %350 = bitcast i32* %349 to <16 x i32>*
  %351 = load <16 x i32>, <16 x i32>* %350, align 4, !tbaa !397
  %352 = getelementptr inbounds i32, i32* %283, i64 368
  %353 = bitcast i32* %352 to <16 x i32>*
  %354 = load <16 x i32>, <16 x i32>* %353, align 4, !tbaa !397
  %355 = getelementptr inbounds i32, i32* %283, i64 384
  %356 = bitcast i32* %355 to <16 x i32>*
  %357 = load <16 x i32>, <16 x i32>* %356, align 4, !tbaa !397
  %358 = getelementptr inbounds i32, i32* %283, i64 400
  %359 = bitcast i32* %358 to <16 x i32>*
  %360 = load <16 x i32>, <16 x i32>* %359, align 4, !tbaa !397
  %361 = getelementptr inbounds i32, i32* %283, i64 416
  %362 = bitcast i32* %361 to <16 x i32>*
  %363 = load <16 x i32>, <16 x i32>* %362, align 4, !tbaa !397
  %364 = getelementptr inbounds i32, i32* %283, i64 432
  %365 = bitcast i32* %364 to <16 x i32>*
  %366 = load <16 x i32>, <16 x i32>* %365, align 4, !tbaa !397
  %367 = getelementptr inbounds i32, i32* %283, i64 448
  %368 = bitcast i32* %367 to <16 x i32>*
  %369 = load <16 x i32>, <16 x i32>* %368, align 4, !tbaa !397
  %370 = getelementptr inbounds i32, i32* %283, i64 464
  %371 = bitcast i32* %370 to <16 x i32>*
  %372 = load <16 x i32>, <16 x i32>* %371, align 4, !tbaa !397
  %373 = getelementptr inbounds i32, i32* %283, i64 480
  %374 = bitcast i32* %373 to <16 x i32>*
  %375 = load <16 x i32>, <16 x i32>* %374, align 4, !tbaa !397
  %376 = getelementptr inbounds i32, i32* %283, i64 496
  %377 = bitcast i32* %376 to <16 x i32>*
  %378 = load <16 x i32>, <16 x i32>* %377, align 4, !tbaa !397
  %379 = getelementptr inbounds i32, i32* %283, i64 512
  %380 = bitcast i32* %379 to <16 x i32>*
  %381 = load <16 x i32>, <16 x i32>* %380, align 4, !tbaa !397
  %382 = getelementptr inbounds i32, i32* %283, i64 528
  %383 = bitcast i32* %382 to <16 x i32>*
  %384 = load <16 x i32>, <16 x i32>* %383, align 4, !tbaa !397
  %385 = getelementptr inbounds i32, i32* %283, i64 544
  %386 = bitcast i32* %385 to <16 x i32>*
  %387 = load <16 x i32>, <16 x i32>* %386, align 4, !tbaa !397
  %388 = getelementptr inbounds i32, i32* %283, i64 560
  %389 = bitcast i32* %388 to <16 x i32>*
  %390 = load <16 x i32>, <16 x i32>* %389, align 4, !tbaa !397
  %391 = getelementptr inbounds i32, i32* %283, i64 576
  %392 = bitcast i32* %391 to <16 x i32>*
  %393 = load <16 x i32>, <16 x i32>* %392, align 4, !tbaa !397
  %394 = getelementptr inbounds i32, i32* %283, i64 592
  %395 = bitcast i32* %394 to <16 x i32>*
  %396 = load <16 x i32>, <16 x i32>* %395, align 4, !tbaa !397
  %397 = getelementptr inbounds i32, i32* %283, i64 608
  %398 = bitcast i32* %397 to <16 x i32>*
  %399 = load <16 x i32>, <16 x i32>* %398, align 4, !tbaa !397
  %400 = getelementptr inbounds i32, i32* %283, i64 624
  %401 = bitcast i32* %400 to <16 x i32>*
  %402 = load <16 x i32>, <16 x i32>* %401, align 4, !tbaa !397
  %403 = getelementptr inbounds i32, i32* %283, i64 640
  %404 = bitcast i32* %403 to <16 x i32>*
  %405 = load <16 x i32>, <16 x i32>* %404, align 4, !tbaa !397
  %406 = getelementptr inbounds i32, i32* %283, i64 656
  %407 = bitcast i32* %406 to <16 x i32>*
  %408 = load <16 x i32>, <16 x i32>* %407, align 4, !tbaa !397
  %409 = getelementptr inbounds i32, i32* %283, i64 672
  %410 = bitcast i32* %409 to <16 x i32>*
  %411 = load <16 x i32>, <16 x i32>* %410, align 4, !tbaa !397
  %412 = getelementptr inbounds i32, i32* %283, i64 688
  %413 = bitcast i32* %412 to <16 x i32>*
  %414 = load <16 x i32>, <16 x i32>* %413, align 4, !tbaa !397
  %415 = getelementptr inbounds i32, i32* %283, i64 704
  %416 = bitcast i32* %415 to <16 x i32>*
  %417 = load <16 x i32>, <16 x i32>* %416, align 4, !tbaa !397
  %418 = getelementptr inbounds i32, i32* %283, i64 720
  %419 = bitcast i32* %418 to <16 x i32>*
  %420 = load <16 x i32>, <16 x i32>* %419, align 4, !tbaa !397
  %421 = getelementptr inbounds i32, i32* %283, i64 736
  %422 = bitcast i32* %421 to <16 x i32>*
  %423 = load <16 x i32>, <16 x i32>* %422, align 4, !tbaa !397
  %424 = getelementptr inbounds i32, i32* %283, i64 752
  %425 = bitcast i32* %424 to <16 x i32>*
  %426 = load <16 x i32>, <16 x i32>* %425, align 4, !tbaa !397
  %427 = getelementptr inbounds i32, i32* %283, i64 768
  %428 = bitcast i32* %427 to <16 x i32>*
  %429 = load <16 x i32>, <16 x i32>* %428, align 4, !tbaa !397
  %430 = getelementptr inbounds i32, i32* %283, i64 784
  %431 = bitcast i32* %430 to <16 x i32>*
  %432 = load <16 x i32>, <16 x i32>* %431, align 4, !tbaa !397
  %433 = getelementptr inbounds i32, i32* %283, i64 800
  %434 = bitcast i32* %433 to <16 x i32>*
  %435 = load <16 x i32>, <16 x i32>* %434, align 4, !tbaa !397
  %436 = getelementptr inbounds i32, i32* %283, i64 816
  %437 = bitcast i32* %436 to <16 x i32>*
  %438 = load <16 x i32>, <16 x i32>* %437, align 4, !tbaa !397
  %439 = getelementptr inbounds i32, i32* %283, i64 832
  %440 = bitcast i32* %439 to <16 x i32>*
  %441 = load <16 x i32>, <16 x i32>* %440, align 4, !tbaa !397
  %442 = getelementptr inbounds i32, i32* %283, i64 848
  %443 = bitcast i32* %442 to <16 x i32>*
  %444 = load <16 x i32>, <16 x i32>* %443, align 4, !tbaa !397
  %445 = getelementptr inbounds i32, i32* %283, i64 864
  %446 = bitcast i32* %445 to <16 x i32>*
  %447 = load <16 x i32>, <16 x i32>* %446, align 4, !tbaa !397
  %448 = getelementptr inbounds i32, i32* %283, i64 880
  %449 = bitcast i32* %448 to <16 x i32>*
  %450 = load <16 x i32>, <16 x i32>* %449, align 4, !tbaa !397
  %451 = getelementptr inbounds i32, i32* %283, i64 896
  %452 = bitcast i32* %451 to <16 x i32>*
  %453 = load <16 x i32>, <16 x i32>* %452, align 4, !tbaa !397
  %454 = getelementptr inbounds i32, i32* %283, i64 912
  %455 = bitcast i32* %454 to <16 x i32>*
  %456 = load <16 x i32>, <16 x i32>* %455, align 4, !tbaa !397
  %457 = getelementptr inbounds i32, i32* %283, i64 928
  %458 = bitcast i32* %457 to <16 x i32>*
  %459 = load <16 x i32>, <16 x i32>* %458, align 4, !tbaa !397
  %460 = getelementptr inbounds i32, i32* %283, i64 944
  %461 = bitcast i32* %460 to <16 x i32>*
  %462 = load <16 x i32>, <16 x i32>* %461, align 4, !tbaa !397
  %463 = getelementptr inbounds i32, i32* %283, i64 960
  %464 = bitcast i32* %463 to <16 x i32>*
  %465 = load <16 x i32>, <16 x i32>* %464, align 4, !tbaa !397
  %466 = getelementptr inbounds i32, i32* %283, i64 976
  %467 = bitcast i32* %466 to <16 x i32>*
  %468 = load <16 x i32>, <16 x i32>* %467, align 4, !tbaa !397
  %469 = getelementptr inbounds i32, i32* %283, i64 992
  %470 = bitcast i32* %469 to <16 x i32>*
  %471 = load <16 x i32>, <16 x i32>* %470, align 4, !tbaa !397
  %472 = getelementptr inbounds i32, i32* %283, i64 1008
  %473 = bitcast i32* %472 to <16 x i32>*
  %474 = load <16 x i32>, <16 x i32>* %473, align 4, !tbaa !397
  %475 = shufflevector <16 x i32> %474, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %476 = shufflevector <32 x i32> %475, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %477 = shufflevector <64 x i32> %476, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %478 = shufflevector <128 x i32> %477, <128 x i32> poison, <256 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %479 = shufflevector <256 x i32> %478, <256 x i32> poison, <512 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255>
  %a23 = shufflevector <512 x i32> %479, <512 x i32> poison, <1024 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 496, i32 497, i32 498, i32 499, i32 500, i32 501, i32 502, i32 503, i32 504, i32 505, i32 506, i32 507, i32 508, i32 509, i32 510, i32 511>
  %480 = icmp slt <16 x i32> %285, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %481 = icmp slt <16 x i32> %288, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %482 = icmp slt <16 x i32> %291, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %483 = icmp slt <16 x i32> %294, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %484 = icmp slt <16 x i32> %297, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %485 = icmp slt <16 x i32> %300, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %486 = icmp slt <16 x i32> %303, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %487 = icmp slt <16 x i32> %306, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %488 = icmp slt <16 x i32> %309, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %489 = icmp slt <16 x i32> %312, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %490 = icmp slt <16 x i32> %315, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %491 = icmp slt <16 x i32> %318, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %492 = icmp slt <16 x i32> %321, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %493 = icmp slt <16 x i32> %324, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %494 = icmp slt <16 x i32> %327, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %495 = icmp slt <16 x i32> %330, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %496 = icmp slt <16 x i32> %333, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %497 = icmp slt <16 x i32> %336, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %498 = icmp slt <16 x i32> %339, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %499 = icmp slt <16 x i32> %342, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %500 = icmp slt <16 x i32> %345, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %501 = icmp slt <16 x i32> %348, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %502 = icmp slt <16 x i32> %351, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %503 = icmp slt <16 x i32> %354, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %504 = icmp slt <16 x i32> %357, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %505 = icmp slt <16 x i32> %360, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %506 = icmp slt <16 x i32> %363, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %507 = icmp slt <16 x i32> %366, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %508 = icmp slt <16 x i32> %369, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %509 = icmp slt <16 x i32> %372, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %510 = icmp slt <16 x i32> %375, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %511 = icmp slt <16 x i32> %378, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %512 = icmp slt <16 x i32> %381, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %513 = icmp slt <16 x i32> %384, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %514 = icmp slt <16 x i32> %387, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %515 = icmp slt <16 x i32> %390, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %516 = icmp slt <16 x i32> %393, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %517 = icmp slt <16 x i32> %396, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %518 = icmp slt <16 x i32> %399, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %519 = icmp slt <16 x i32> %402, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %520 = icmp slt <16 x i32> %405, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %521 = icmp slt <16 x i32> %408, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %522 = icmp slt <16 x i32> %411, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %523 = icmp slt <16 x i32> %414, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %524 = icmp slt <16 x i32> %417, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %525 = icmp slt <16 x i32> %420, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %526 = icmp slt <16 x i32> %423, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %527 = icmp slt <16 x i32> %426, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %528 = icmp slt <16 x i32> %429, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %529 = icmp slt <16 x i32> %432, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %530 = icmp slt <16 x i32> %435, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %531 = icmp slt <16 x i32> %438, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %532 = icmp slt <16 x i32> %441, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %533 = icmp slt <16 x i32> %444, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %534 = icmp slt <16 x i32> %447, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %535 = icmp slt <16 x i32> %450, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %536 = icmp slt <16 x i32> %453, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %537 = icmp slt <16 x i32> %456, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %538 = icmp slt <16 x i32> %459, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %539 = icmp slt <16 x i32> %462, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %540 = icmp slt <16 x i32> %465, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %541 = icmp slt <16 x i32> %468, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %542 = icmp slt <16 x i32> %471, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %543 = shufflevector <1024 x i32> %a23, <1024 x i32> undef, <16 x i32> <i32 1008, i32 1009, i32 1010, i32 1011, i32 1012, i32 1013, i32 1014, i32 1015, i32 1016, i32 1017, i32 1018, i32 1019, i32 1020, i32 1021, i32 1022, i32 1023>
  %544 = icmp slt <16 x i32> %543, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %545 = shufflevector <16 x i1> %544, <16 x i1> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %546 = shufflevector <32 x i1> %545, <32 x i1> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %547 = shufflevector <64 x i1> %546, <64 x i1> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %548 = shufflevector <128 x i1> %547, <128 x i1> poison, <256 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %549 = shufflevector <256 x i1> %548, <256 x i1> poison, <512 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255>
  %550 = shufflevector <512 x i1> %549, <512 x i1> poison, <1024 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 496, i32 497, i32 498, i32 499, i32 500, i32 501, i32 502, i32 503, i32 504, i32 505, i32 506, i32 507, i32 508, i32 509, i32 510, i32 511>
  %551 = select <16 x i1> %480, <16 x i32> %285, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %552 = select <16 x i1> %481, <16 x i32> %288, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %553 = select <16 x i1> %482, <16 x i32> %291, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %554 = select <16 x i1> %483, <16 x i32> %294, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %555 = select <16 x i1> %484, <16 x i32> %297, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %556 = select <16 x i1> %485, <16 x i32> %300, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %557 = select <16 x i1> %486, <16 x i32> %303, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %558 = select <16 x i1> %487, <16 x i32> %306, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %559 = select <16 x i1> %488, <16 x i32> %309, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %560 = select <16 x i1> %489, <16 x i32> %312, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %561 = select <16 x i1> %490, <16 x i32> %315, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %562 = select <16 x i1> %491, <16 x i32> %318, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %563 = select <16 x i1> %492, <16 x i32> %321, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %564 = select <16 x i1> %493, <16 x i32> %324, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %565 = select <16 x i1> %494, <16 x i32> %327, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %566 = select <16 x i1> %495, <16 x i32> %330, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %567 = select <16 x i1> %496, <16 x i32> %333, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %568 = select <16 x i1> %497, <16 x i32> %336, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %569 = select <16 x i1> %498, <16 x i32> %339, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %570 = select <16 x i1> %499, <16 x i32> %342, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %571 = select <16 x i1> %500, <16 x i32> %345, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %572 = select <16 x i1> %501, <16 x i32> %348, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %573 = select <16 x i1> %502, <16 x i32> %351, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %574 = select <16 x i1> %503, <16 x i32> %354, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %575 = select <16 x i1> %504, <16 x i32> %357, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %576 = select <16 x i1> %505, <16 x i32> %360, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %577 = select <16 x i1> %506, <16 x i32> %363, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %578 = select <16 x i1> %507, <16 x i32> %366, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %579 = select <16 x i1> %508, <16 x i32> %369, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %580 = select <16 x i1> %509, <16 x i32> %372, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %581 = select <16 x i1> %510, <16 x i32> %375, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %582 = select <16 x i1> %511, <16 x i32> %378, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %583 = select <16 x i1> %512, <16 x i32> %381, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %584 = select <16 x i1> %513, <16 x i32> %384, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %585 = select <16 x i1> %514, <16 x i32> %387, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %586 = select <16 x i1> %515, <16 x i32> %390, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %587 = select <16 x i1> %516, <16 x i32> %393, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %588 = select <16 x i1> %517, <16 x i32> %396, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %589 = select <16 x i1> %518, <16 x i32> %399, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %590 = select <16 x i1> %519, <16 x i32> %402, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %591 = select <16 x i1> %520, <16 x i32> %405, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %592 = select <16 x i1> %521, <16 x i32> %408, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %593 = select <16 x i1> %522, <16 x i32> %411, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %594 = select <16 x i1> %523, <16 x i32> %414, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %595 = select <16 x i1> %524, <16 x i32> %417, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %596 = select <16 x i1> %525, <16 x i32> %420, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %597 = select <16 x i1> %526, <16 x i32> %423, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %598 = select <16 x i1> %527, <16 x i32> %426, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %599 = select <16 x i1> %528, <16 x i32> %429, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %600 = select <16 x i1> %529, <16 x i32> %432, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %601 = select <16 x i1> %530, <16 x i32> %435, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %602 = select <16 x i1> %531, <16 x i32> %438, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %603 = select <16 x i1> %532, <16 x i32> %441, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %604 = select <16 x i1> %533, <16 x i32> %444, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %605 = select <16 x i1> %534, <16 x i32> %447, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %606 = select <16 x i1> %535, <16 x i32> %450, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %607 = select <16 x i1> %536, <16 x i32> %453, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %608 = select <16 x i1> %537, <16 x i32> %456, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %609 = select <16 x i1> %538, <16 x i32> %459, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %610 = select <16 x i1> %539, <16 x i32> %462, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %611 = select <16 x i1> %540, <16 x i32> %465, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %612 = select <16 x i1> %541, <16 x i32> %468, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %613 = select <16 x i1> %542, <16 x i32> %471, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %614 = shufflevector <1024 x i1> %550, <1024 x i1> undef, <16 x i32> <i32 1008, i32 1009, i32 1010, i32 1011, i32 1012, i32 1013, i32 1014, i32 1015, i32 1016, i32 1017, i32 1018, i32 1019, i32 1020, i32 1021, i32 1022, i32 1023>
  %615 = select <16 x i1> %614, <16 x i32> %543, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %616 = shufflevector <16 x i32> %615, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %617 = shufflevector <32 x i32> %616, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %618 = shufflevector <64 x i32> %617, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %619 = shufflevector <128 x i32> %618, <128 x i32> poison, <256 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %620 = shufflevector <256 x i32> %619, <256 x i32> poison, <512 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255>
  %a22 = shufflevector <512 x i32> %620, <512 x i32> poison, <1024 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 496, i32 497, i32 498, i32 499, i32 500, i32 501, i32 502, i32 503, i32 504, i32 505, i32 506, i32 507, i32 508, i32 509, i32 510, i32 511>
  %621 = shufflevector <1024 x i32> %a22, <1024 x i32> undef, <16 x i32> <i32 1008, i32 1009, i32 1010, i32 1011, i32 1012, i32 1013, i32 1014, i32 1015, i32 1016, i32 1017, i32 1018, i32 1019, i32 1020, i32 1021, i32 1022, i32 1023>
  %622 = icmp sgt <16 x i32> %621, zeroinitializer
  %623 = shufflevector <16 x i1> %622, <16 x i1> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %624 = shufflevector <32 x i1> %623, <32 x i1> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %625 = shufflevector <64 x i1> %624, <64 x i1> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %626 = shufflevector <128 x i1> %625, <128 x i1> poison, <256 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %627 = shufflevector <256 x i1> %626, <256 x i1> poison, <512 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255>
  %628 = shufflevector <512 x i1> %627, <512 x i1> poison, <1024 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 496, i32 497, i32 498, i32 499, i32 500, i32 501, i32 502, i32 503, i32 504, i32 505, i32 506, i32 507, i32 508, i32 509, i32 510, i32 511>
  %629 = icmp sgt <16 x i32> %551, zeroinitializer
  %630 = select <16 x i1> %629, <16 x i32> %551, <16 x i32> zeroinitializer
  %631 = icmp sgt <16 x i32> %552, zeroinitializer
  %632 = select <16 x i1> %631, <16 x i32> %552, <16 x i32> zeroinitializer
  %633 = icmp sgt <16 x i32> %553, zeroinitializer
  %634 = select <16 x i1> %633, <16 x i32> %553, <16 x i32> zeroinitializer
  %635 = icmp sgt <16 x i32> %554, zeroinitializer
  %636 = select <16 x i1> %635, <16 x i32> %554, <16 x i32> zeroinitializer
  %637 = icmp sgt <16 x i32> %555, zeroinitializer
  %638 = select <16 x i1> %637, <16 x i32> %555, <16 x i32> zeroinitializer
  %639 = icmp sgt <16 x i32> %556, zeroinitializer
  %640 = select <16 x i1> %639, <16 x i32> %556, <16 x i32> zeroinitializer
  %641 = icmp sgt <16 x i32> %557, zeroinitializer
  %642 = select <16 x i1> %641, <16 x i32> %557, <16 x i32> zeroinitializer
  %643 = icmp sgt <16 x i32> %558, zeroinitializer
  %644 = select <16 x i1> %643, <16 x i32> %558, <16 x i32> zeroinitializer
  %645 = icmp sgt <16 x i32> %559, zeroinitializer
  %646 = select <16 x i1> %645, <16 x i32> %559, <16 x i32> zeroinitializer
  %647 = icmp sgt <16 x i32> %560, zeroinitializer
  %648 = select <16 x i1> %647, <16 x i32> %560, <16 x i32> zeroinitializer
  %649 = icmp sgt <16 x i32> %561, zeroinitializer
  %650 = select <16 x i1> %649, <16 x i32> %561, <16 x i32> zeroinitializer
  %651 = icmp sgt <16 x i32> %562, zeroinitializer
  %652 = select <16 x i1> %651, <16 x i32> %562, <16 x i32> zeroinitializer
  %653 = icmp sgt <16 x i32> %563, zeroinitializer
  %654 = select <16 x i1> %653, <16 x i32> %563, <16 x i32> zeroinitializer
  %655 = icmp sgt <16 x i32> %564, zeroinitializer
  %656 = select <16 x i1> %655, <16 x i32> %564, <16 x i32> zeroinitializer
  %657 = icmp sgt <16 x i32> %565, zeroinitializer
  %658 = select <16 x i1> %657, <16 x i32> %565, <16 x i32> zeroinitializer
  %659 = icmp sgt <16 x i32> %566, zeroinitializer
  %660 = select <16 x i1> %659, <16 x i32> %566, <16 x i32> zeroinitializer
  %661 = icmp sgt <16 x i32> %567, zeroinitializer
  %662 = select <16 x i1> %661, <16 x i32> %567, <16 x i32> zeroinitializer
  %663 = icmp sgt <16 x i32> %568, zeroinitializer
  %664 = select <16 x i1> %663, <16 x i32> %568, <16 x i32> zeroinitializer
  %665 = icmp sgt <16 x i32> %569, zeroinitializer
  %666 = select <16 x i1> %665, <16 x i32> %569, <16 x i32> zeroinitializer
  %667 = icmp sgt <16 x i32> %570, zeroinitializer
  %668 = select <16 x i1> %667, <16 x i32> %570, <16 x i32> zeroinitializer
  %669 = icmp sgt <16 x i32> %571, zeroinitializer
  %670 = select <16 x i1> %669, <16 x i32> %571, <16 x i32> zeroinitializer
  %671 = icmp sgt <16 x i32> %572, zeroinitializer
  %672 = select <16 x i1> %671, <16 x i32> %572, <16 x i32> zeroinitializer
  %673 = icmp sgt <16 x i32> %573, zeroinitializer
  %674 = select <16 x i1> %673, <16 x i32> %573, <16 x i32> zeroinitializer
  %675 = icmp sgt <16 x i32> %574, zeroinitializer
  %676 = select <16 x i1> %675, <16 x i32> %574, <16 x i32> zeroinitializer
  %677 = icmp sgt <16 x i32> %575, zeroinitializer
  %678 = select <16 x i1> %677, <16 x i32> %575, <16 x i32> zeroinitializer
  %679 = icmp sgt <16 x i32> %576, zeroinitializer
  %680 = select <16 x i1> %679, <16 x i32> %576, <16 x i32> zeroinitializer
  %681 = icmp sgt <16 x i32> %577, zeroinitializer
  %682 = select <16 x i1> %681, <16 x i32> %577, <16 x i32> zeroinitializer
  %683 = icmp sgt <16 x i32> %578, zeroinitializer
  %684 = select <16 x i1> %683, <16 x i32> %578, <16 x i32> zeroinitializer
  %685 = icmp sgt <16 x i32> %579, zeroinitializer
  %686 = select <16 x i1> %685, <16 x i32> %579, <16 x i32> zeroinitializer
  %687 = icmp sgt <16 x i32> %580, zeroinitializer
  %688 = select <16 x i1> %687, <16 x i32> %580, <16 x i32> zeroinitializer
  %689 = icmp sgt <16 x i32> %581, zeroinitializer
  %690 = select <16 x i1> %689, <16 x i32> %581, <16 x i32> zeroinitializer
  %691 = icmp sgt <16 x i32> %582, zeroinitializer
  %692 = select <16 x i1> %691, <16 x i32> %582, <16 x i32> zeroinitializer
  %693 = icmp sgt <16 x i32> %583, zeroinitializer
  %694 = select <16 x i1> %693, <16 x i32> %583, <16 x i32> zeroinitializer
  %695 = icmp sgt <16 x i32> %584, zeroinitializer
  %696 = select <16 x i1> %695, <16 x i32> %584, <16 x i32> zeroinitializer
  %697 = icmp sgt <16 x i32> %585, zeroinitializer
  %698 = select <16 x i1> %697, <16 x i32> %585, <16 x i32> zeroinitializer
  %699 = icmp sgt <16 x i32> %586, zeroinitializer
  %700 = select <16 x i1> %699, <16 x i32> %586, <16 x i32> zeroinitializer
  %701 = icmp sgt <16 x i32> %587, zeroinitializer
  %702 = select <16 x i1> %701, <16 x i32> %587, <16 x i32> zeroinitializer
  %703 = icmp sgt <16 x i32> %588, zeroinitializer
  %704 = select <16 x i1> %703, <16 x i32> %588, <16 x i32> zeroinitializer
  %705 = icmp sgt <16 x i32> %589, zeroinitializer
  %706 = select <16 x i1> %705, <16 x i32> %589, <16 x i32> zeroinitializer
  %707 = icmp sgt <16 x i32> %590, zeroinitializer
  %708 = select <16 x i1> %707, <16 x i32> %590, <16 x i32> zeroinitializer
  %709 = icmp sgt <16 x i32> %591, zeroinitializer
  %710 = select <16 x i1> %709, <16 x i32> %591, <16 x i32> zeroinitializer
  %711 = icmp sgt <16 x i32> %592, zeroinitializer
  %712 = select <16 x i1> %711, <16 x i32> %592, <16 x i32> zeroinitializer
  %713 = icmp sgt <16 x i32> %593, zeroinitializer
  %714 = select <16 x i1> %713, <16 x i32> %593, <16 x i32> zeroinitializer
  %715 = icmp sgt <16 x i32> %594, zeroinitializer
  %716 = select <16 x i1> %715, <16 x i32> %594, <16 x i32> zeroinitializer
  %717 = icmp sgt <16 x i32> %595, zeroinitializer
  %718 = select <16 x i1> %717, <16 x i32> %595, <16 x i32> zeroinitializer
  %719 = icmp sgt <16 x i32> %596, zeroinitializer
  %720 = select <16 x i1> %719, <16 x i32> %596, <16 x i32> zeroinitializer
  %721 = icmp sgt <16 x i32> %597, zeroinitializer
  %722 = select <16 x i1> %721, <16 x i32> %597, <16 x i32> zeroinitializer
  %723 = icmp sgt <16 x i32> %598, zeroinitializer
  %724 = select <16 x i1> %723, <16 x i32> %598, <16 x i32> zeroinitializer
  %725 = icmp sgt <16 x i32> %599, zeroinitializer
  %726 = select <16 x i1> %725, <16 x i32> %599, <16 x i32> zeroinitializer
  %727 = icmp sgt <16 x i32> %600, zeroinitializer
  %728 = select <16 x i1> %727, <16 x i32> %600, <16 x i32> zeroinitializer
  %729 = icmp sgt <16 x i32> %601, zeroinitializer
  %730 = select <16 x i1> %729, <16 x i32> %601, <16 x i32> zeroinitializer
  %731 = icmp sgt <16 x i32> %602, zeroinitializer
  %732 = select <16 x i1> %731, <16 x i32> %602, <16 x i32> zeroinitializer
  %733 = icmp sgt <16 x i32> %603, zeroinitializer
  %734 = select <16 x i1> %733, <16 x i32> %603, <16 x i32> zeroinitializer
  %735 = icmp sgt <16 x i32> %604, zeroinitializer
  %736 = select <16 x i1> %735, <16 x i32> %604, <16 x i32> zeroinitializer
  %737 = icmp sgt <16 x i32> %605, zeroinitializer
  %738 = select <16 x i1> %737, <16 x i32> %605, <16 x i32> zeroinitializer
  %739 = icmp sgt <16 x i32> %606, zeroinitializer
  %740 = select <16 x i1> %739, <16 x i32> %606, <16 x i32> zeroinitializer
  %741 = icmp sgt <16 x i32> %607, zeroinitializer
  %742 = select <16 x i1> %741, <16 x i32> %607, <16 x i32> zeroinitializer
  %743 = icmp sgt <16 x i32> %608, zeroinitializer
  %744 = select <16 x i1> %743, <16 x i32> %608, <16 x i32> zeroinitializer
  %745 = icmp sgt <16 x i32> %609, zeroinitializer
  %746 = select <16 x i1> %745, <16 x i32> %609, <16 x i32> zeroinitializer
  %747 = icmp sgt <16 x i32> %610, zeroinitializer
  %748 = select <16 x i1> %747, <16 x i32> %610, <16 x i32> zeroinitializer
  %749 = icmp sgt <16 x i32> %611, zeroinitializer
  %750 = select <16 x i1> %749, <16 x i32> %611, <16 x i32> zeroinitializer
  %751 = icmp sgt <16 x i32> %612, zeroinitializer
  %752 = select <16 x i1> %751, <16 x i32> %612, <16 x i32> zeroinitializer
  %753 = icmp sgt <16 x i32> %613, zeroinitializer
  %754 = select <16 x i1> %753, <16 x i32> %613, <16 x i32> zeroinitializer
  %755 = shufflevector <1024 x i1> %628, <1024 x i1> undef, <16 x i32> <i32 1008, i32 1009, i32 1010, i32 1011, i32 1012, i32 1013, i32 1014, i32 1015, i32 1016, i32 1017, i32 1018, i32 1019, i32 1020, i32 1021, i32 1022, i32 1023>
  %756 = select <16 x i1> %755, <16 x i32> %621, <16 x i32> zeroinitializer
  %757 = shufflevector <16 x i32> %630, <16 x i32> %632, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %758 = shufflevector <16 x i32> %634, <16 x i32> %636, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %759 = shufflevector <16 x i32> %638, <16 x i32> %640, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %760 = shufflevector <16 x i32> %642, <16 x i32> %644, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %761 = shufflevector <16 x i32> %646, <16 x i32> %648, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %762 = shufflevector <16 x i32> %650, <16 x i32> %652, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %763 = shufflevector <16 x i32> %654, <16 x i32> %656, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %764 = shufflevector <16 x i32> %658, <16 x i32> %660, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %765 = shufflevector <16 x i32> %662, <16 x i32> %664, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %766 = shufflevector <16 x i32> %666, <16 x i32> %668, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %767 = shufflevector <16 x i32> %670, <16 x i32> %672, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %768 = shufflevector <16 x i32> %674, <16 x i32> %676, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %769 = shufflevector <16 x i32> %678, <16 x i32> %680, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %770 = shufflevector <16 x i32> %682, <16 x i32> %684, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %771 = shufflevector <16 x i32> %686, <16 x i32> %688, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %772 = shufflevector <16 x i32> %690, <16 x i32> %692, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %773 = shufflevector <16 x i32> %694, <16 x i32> %696, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %774 = shufflevector <16 x i32> %698, <16 x i32> %700, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %775 = shufflevector <16 x i32> %702, <16 x i32> %704, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %776 = shufflevector <16 x i32> %706, <16 x i32> %708, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %777 = shufflevector <16 x i32> %710, <16 x i32> %712, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %778 = shufflevector <16 x i32> %714, <16 x i32> %716, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %779 = shufflevector <16 x i32> %718, <16 x i32> %720, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %780 = shufflevector <16 x i32> %722, <16 x i32> %724, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %781 = shufflevector <16 x i32> %726, <16 x i32> %728, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %782 = shufflevector <16 x i32> %730, <16 x i32> %732, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %783 = shufflevector <16 x i32> %734, <16 x i32> %736, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %784 = shufflevector <16 x i32> %738, <16 x i32> %740, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %785 = shufflevector <16 x i32> %742, <16 x i32> %744, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %786 = shufflevector <16 x i32> %746, <16 x i32> %748, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %787 = shufflevector <16 x i32> %750, <16 x i32> %752, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %788 = shufflevector <16 x i32> %754, <16 x i32> %756, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %789 = shufflevector <32 x i32> %757, <32 x i32> %758, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %790 = shufflevector <32 x i32> %759, <32 x i32> %760, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %791 = shufflevector <32 x i32> %761, <32 x i32> %762, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %792 = shufflevector <32 x i32> %763, <32 x i32> %764, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %793 = shufflevector <32 x i32> %765, <32 x i32> %766, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %794 = shufflevector <32 x i32> %767, <32 x i32> %768, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %795 = shufflevector <32 x i32> %769, <32 x i32> %770, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %796 = shufflevector <32 x i32> %771, <32 x i32> %772, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %797 = shufflevector <32 x i32> %773, <32 x i32> %774, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %798 = shufflevector <32 x i32> %775, <32 x i32> %776, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %799 = shufflevector <32 x i32> %777, <32 x i32> %778, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %800 = shufflevector <32 x i32> %779, <32 x i32> %780, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %801 = shufflevector <32 x i32> %781, <32 x i32> %782, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %802 = shufflevector <32 x i32> %783, <32 x i32> %784, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %803 = shufflevector <32 x i32> %785, <32 x i32> %786, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %804 = shufflevector <32 x i32> %787, <32 x i32> %788, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %805 = shufflevector <64 x i32> %789, <64 x i32> %790, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %806 = shufflevector <64 x i32> %791, <64 x i32> %792, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %807 = shufflevector <64 x i32> %793, <64 x i32> %794, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %808 = shufflevector <64 x i32> %795, <64 x i32> %796, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %809 = shufflevector <64 x i32> %797, <64 x i32> %798, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %810 = shufflevector <64 x i32> %799, <64 x i32> %800, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %811 = shufflevector <64 x i32> %801, <64 x i32> %802, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %812 = shufflevector <64 x i32> %803, <64 x i32> %804, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %813 = shufflevector <128 x i32> %805, <128 x i32> %806, <256 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255>
  %814 = shufflevector <128 x i32> %807, <128 x i32> %808, <256 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255>
  %815 = shufflevector <128 x i32> %809, <128 x i32> %810, <256 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255>
  %816 = shufflevector <128 x i32> %811, <128 x i32> %812, <256 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255>
  %817 = shufflevector <256 x i32> %813, <256 x i32> %814, <512 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255, i32 256, i32 257, i32 258, i32 259, i32 260, i32 261, i32 262, i32 263, i32 264, i32 265, i32 266, i32 267, i32 268, i32 269, i32 270, i32 271, i32 272, i32 273, i32 274, i32 275, i32 276, i32 277, i32 278, i32 279, i32 280, i32 281, i32 282, i32 283, i32 284, i32 285, i32 286, i32 287, i32 288, i32 289, i32 290, i32 291, i32 292, i32 293, i32 294, i32 295, i32 296, i32 297, i32 298, i32 299, i32 300, i32 301, i32 302, i32 303, i32 304, i32 305, i32 306, i32 307, i32 308, i32 309, i32 310, i32 311, i32 312, i32 313, i32 314, i32 315, i32 316, i32 317, i32 318, i32 319, i32 320, i32 321, i32 322, i32 323, i32 324, i32 325, i32 326, i32 327, i32 328, i32 329, i32 330, i32 331, i32 332, i32 333, i32 334, i32 335, i32 336, i32 337, i32 338, i32 339, i32 340, i32 341, i32 342, i32 343, i32 344, i32 345, i32 346, i32 347, i32 348, i32 349, i32 350, i32 351, i32 352, i32 353, i32 354, i32 355, i32 356, i32 357, i32 358, i32 359, i32 360, i32 361, i32 362, i32 363, i32 364, i32 365, i32 366, i32 367, i32 368, i32 369, i32 370, i32 371, i32 372, i32 373, i32 374, i32 375, i32 376, i32 377, i32 378, i32 379, i32 380, i32 381, i32 382, i32 383, i32 384, i32 385, i32 386, i32 387, i32 388, i32 389, i32 390, i32 391, i32 392, i32 393, i32 394, i32 395, i32 396, i32 397, i32 398, i32 399, i32 400, i32 401, i32 402, i32 403, i32 404, i32 405, i32 406, i32 407, i32 408, i32 409, i32 410, i32 411, i32 412, i32 413, i32 414, i32 415, i32 416, i32 417, i32 418, i32 419, i32 420, i32 421, i32 422, i32 423, i32 424, i32 425, i32 426, i32 427, i32 428, i32 429, i32 430, i32 431, i32 432, i32 433, i32 434, i32 435, i32 436, i32 437, i32 438, i32 439, i32 440, i32 441, i32 442, i32 443, i32 444, i32 445, i32 446, i32 447, i32 448, i32 449, i32 450, i32 451, i32 452, i32 453, i32 454, i32 455, i32 456, i32 457, i32 458, i32 459, i32 460, i32 461, i32 462, i32 463, i32 464, i32 465, i32 466, i32 467, i32 468, i32 469, i32 470, i32 471, i32 472, i32 473, i32 474, i32 475, i32 476, i32 477, i32 478, i32 479, i32 480, i32 481, i32 482, i32 483, i32 484, i32 485, i32 486, i32 487, i32 488, i32 489, i32 490, i32 491, i32 492, i32 493, i32 494, i32 495, i32 496, i32 497, i32 498, i32 499, i32 500, i32 501, i32 502, i32 503, i32 504, i32 505, i32 506, i32 507, i32 508, i32 509, i32 510, i32 511>
  %818 = shufflevector <256 x i32> %815, <256 x i32> %816, <512 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255, i32 256, i32 257, i32 258, i32 259, i32 260, i32 261, i32 262, i32 263, i32 264, i32 265, i32 266, i32 267, i32 268, i32 269, i32 270, i32 271, i32 272, i32 273, i32 274, i32 275, i32 276, i32 277, i32 278, i32 279, i32 280, i32 281, i32 282, i32 283, i32 284, i32 285, i32 286, i32 287, i32 288, i32 289, i32 290, i32 291, i32 292, i32 293, i32 294, i32 295, i32 296, i32 297, i32 298, i32 299, i32 300, i32 301, i32 302, i32 303, i32 304, i32 305, i32 306, i32 307, i32 308, i32 309, i32 310, i32 311, i32 312, i32 313, i32 314, i32 315, i32 316, i32 317, i32 318, i32 319, i32 320, i32 321, i32 322, i32 323, i32 324, i32 325, i32 326, i32 327, i32 328, i32 329, i32 330, i32 331, i32 332, i32 333, i32 334, i32 335, i32 336, i32 337, i32 338, i32 339, i32 340, i32 341, i32 342, i32 343, i32 344, i32 345, i32 346, i32 347, i32 348, i32 349, i32 350, i32 351, i32 352, i32 353, i32 354, i32 355, i32 356, i32 357, i32 358, i32 359, i32 360, i32 361, i32 362, i32 363, i32 364, i32 365, i32 366, i32 367, i32 368, i32 369, i32 370, i32 371, i32 372, i32 373, i32 374, i32 375, i32 376, i32 377, i32 378, i32 379, i32 380, i32 381, i32 382, i32 383, i32 384, i32 385, i32 386, i32 387, i32 388, i32 389, i32 390, i32 391, i32 392, i32 393, i32 394, i32 395, i32 396, i32 397, i32 398, i32 399, i32 400, i32 401, i32 402, i32 403, i32 404, i32 405, i32 406, i32 407, i32 408, i32 409, i32 410, i32 411, i32 412, i32 413, i32 414, i32 415, i32 416, i32 417, i32 418, i32 419, i32 420, i32 421, i32 422, i32 423, i32 424, i32 425, i32 426, i32 427, i32 428, i32 429, i32 430, i32 431, i32 432, i32 433, i32 434, i32 435, i32 436, i32 437, i32 438, i32 439, i32 440, i32 441, i32 442, i32 443, i32 444, i32 445, i32 446, i32 447, i32 448, i32 449, i32 450, i32 451, i32 452, i32 453, i32 454, i32 455, i32 456, i32 457, i32 458, i32 459, i32 460, i32 461, i32 462, i32 463, i32 464, i32 465, i32 466, i32 467, i32 468, i32 469, i32 470, i32 471, i32 472, i32 473, i32 474, i32 475, i32 476, i32 477, i32 478, i32 479, i32 480, i32 481, i32 482, i32 483, i32 484, i32 485, i32 486, i32 487, i32 488, i32 489, i32 490, i32 491, i32 492, i32 493, i32 494, i32 495, i32 496, i32 497, i32 498, i32 499, i32 500, i32 501, i32 502, i32 503, i32 504, i32 505, i32 506, i32 507, i32 508, i32 509, i32 510, i32 511>
  %819 = shufflevector <512 x i32> %817, <512 x i32> %818, <1024 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255, i32 256, i32 257, i32 258, i32 259, i32 260, i32 261, i32 262, i32 263, i32 264, i32 265, i32 266, i32 267, i32 268, i32 269, i32 270, i32 271, i32 272, i32 273, i32 274, i32 275, i32 276, i32 277, i32 278, i32 279, i32 280, i32 281, i32 282, i32 283, i32 284, i32 285, i32 286, i32 287, i32 288, i32 289, i32 290, i32 291, i32 292, i32 293, i32 294, i32 295, i32 296, i32 297, i32 298, i32 299, i32 300, i32 301, i32 302, i32 303, i32 304, i32 305, i32 306, i32 307, i32 308, i32 309, i32 310, i32 311, i32 312, i32 313, i32 314, i32 315, i32 316, i32 317, i32 318, i32 319, i32 320, i32 321, i32 322, i32 323, i32 324, i32 325, i32 326, i32 327, i32 328, i32 329, i32 330, i32 331, i32 332, i32 333, i32 334, i32 335, i32 336, i32 337, i32 338, i32 339, i32 340, i32 341, i32 342, i32 343, i32 344, i32 345, i32 346, i32 347, i32 348, i32 349, i32 350, i32 351, i32 352, i32 353, i32 354, i32 355, i32 356, i32 357, i32 358, i32 359, i32 360, i32 361, i32 362, i32 363, i32 364, i32 365, i32 366, i32 367, i32 368, i32 369, i32 370, i32 371, i32 372, i32 373, i32 374, i32 375, i32 376, i32 377, i32 378, i32 379, i32 380, i32 381, i32 382, i32 383, i32 384, i32 385, i32 386, i32 387, i32 388, i32 389, i32 390, i32 391, i32 392, i32 393, i32 394, i32 395, i32 396, i32 397, i32 398, i32 399, i32 400, i32 401, i32 402, i32 403, i32 404, i32 405, i32 406, i32 407, i32 408, i32 409, i32 410, i32 411, i32 412, i32 413, i32 414, i32 415, i32 416, i32 417, i32 418, i32 419, i32 420, i32 421, i32 422, i32 423, i32 424, i32 425, i32 426, i32 427, i32 428, i32 429, i32 430, i32 431, i32 432, i32 433, i32 434, i32 435, i32 436, i32 437, i32 438, i32 439, i32 440, i32 441, i32 442, i32 443, i32 444, i32 445, i32 446, i32 447, i32 448, i32 449, i32 450, i32 451, i32 452, i32 453, i32 454, i32 455, i32 456, i32 457, i32 458, i32 459, i32 460, i32 461, i32 462, i32 463, i32 464, i32 465, i32 466, i32 467, i32 468, i32 469, i32 470, i32 471, i32 472, i32 473, i32 474, i32 475, i32 476, i32 477, i32 478, i32 479, i32 480, i32 481, i32 482, i32 483, i32 484, i32 485, i32 486, i32 487, i32 488, i32 489, i32 490, i32 491, i32 492, i32 493, i32 494, i32 495, i32 496, i32 497, i32 498, i32 499, i32 500, i32 501, i32 502, i32 503, i32 504, i32 505, i32 506, i32 507, i32 508, i32 509, i32 510, i32 511, i32 512, i32 513, i32 514, i32 515, i32 516, i32 517, i32 518, i32 519, i32 520, i32 521, i32 522, i32 523, i32 524, i32 525, i32 526, i32 527, i32 528, i32 529, i32 530, i32 531, i32 532, i32 533, i32 534, i32 535, i32 536, i32 537, i32 538, i32 539, i32 540, i32 541, i32 542, i32 543, i32 544, i32 545, i32 546, i32 547, i32 548, i32 549, i32 550, i32 551, i32 552, i32 553, i32 554, i32 555, i32 556, i32 557, i32 558, i32 559, i32 560, i32 561, i32 562, i32 563, i32 564, i32 565, i32 566, i32 567, i32 568, i32 569, i32 570, i32 571, i32 572, i32 573, i32 574, i32 575, i32 576, i32 577, i32 578, i32 579, i32 580, i32 581, i32 582, i32 583, i32 584, i32 585, i32 586, i32 587, i32 588, i32 589, i32 590, i32 591, i32 592, i32 593, i32 594, i32 595, i32 596, i32 597, i32 598, i32 599, i32 600, i32 601, i32 602, i32 603, i32 604, i32 605, i32 606, i32 607, i32 608, i32 609, i32 610, i32 611, i32 612, i32 613, i32 614, i32 615, i32 616, i32 617, i32 618, i32 619, i32 620, i32 621, i32 622, i32 623, i32 624, i32 625, i32 626, i32 627, i32 628, i32 629, i32 630, i32 631, i32 632, i32 633, i32 634, i32 635, i32 636, i32 637, i32 638, i32 639, i32 640, i32 641, i32 642, i32 643, i32 644, i32 645, i32 646, i32 647, i32 648, i32 649, i32 650, i32 651, i32 652, i32 653, i32 654, i32 655, i32 656, i32 657, i32 658, i32 659, i32 660, i32 661, i32 662, i32 663, i32 664, i32 665, i32 666, i32 667, i32 668, i32 669, i32 670, i32 671, i32 672, i32 673, i32 674, i32 675, i32 676, i32 677, i32 678, i32 679, i32 680, i32 681, i32 682, i32 683, i32 684, i32 685, i32 686, i32 687, i32 688, i32 689, i32 690, i32 691, i32 692, i32 693, i32 694, i32 695, i32 696, i32 697, i32 698, i32 699, i32 700, i32 701, i32 702, i32 703, i32 704, i32 705, i32 706, i32 707, i32 708, i32 709, i32 710, i32 711, i32 712, i32 713, i32 714, i32 715, i32 716, i32 717, i32 718, i32 719, i32 720, i32 721, i32 722, i32 723, i32 724, i32 725, i32 726, i32 727, i32 728, i32 729, i32 730, i32 731, i32 732, i32 733, i32 734, i32 735, i32 736, i32 737, i32 738, i32 739, i32 740, i32 741, i32 742, i32 743, i32 744, i32 745, i32 746, i32 747, i32 748, i32 749, i32 750, i32 751, i32 752, i32 753, i32 754, i32 755, i32 756, i32 757, i32 758, i32 759, i32 760, i32 761, i32 762, i32 763, i32 764, i32 765, i32 766, i32 767, i32 768, i32 769, i32 770, i32 771, i32 772, i32 773, i32 774, i32 775, i32 776, i32 777, i32 778, i32 779, i32 780, i32 781, i32 782, i32 783, i32 784, i32 785, i32 786, i32 787, i32 788, i32 789, i32 790, i32 791, i32 792, i32 793, i32 794, i32 795, i32 796, i32 797, i32 798, i32 799, i32 800, i32 801, i32 802, i32 803, i32 804, i32 805, i32 806, i32 807, i32 808, i32 809, i32 810, i32 811, i32 812, i32 813, i32 814, i32 815, i32 816, i32 817, i32 818, i32 819, i32 820, i32 821, i32 822, i32 823, i32 824, i32 825, i32 826, i32 827, i32 828, i32 829, i32 830, i32 831, i32 832, i32 833, i32 834, i32 835, i32 836, i32 837, i32 838, i32 839, i32 840, i32 841, i32 842, i32 843, i32 844, i32 845, i32 846, i32 847, i32 848, i32 849, i32 850, i32 851, i32 852, i32 853, i32 854, i32 855, i32 856, i32 857, i32 858, i32 859, i32 860, i32 861, i32 862, i32 863, i32 864, i32 865, i32 866, i32 867, i32 868, i32 869, i32 870, i32 871, i32 872, i32 873, i32 874, i32 875, i32 876, i32 877, i32 878, i32 879, i32 880, i32 881, i32 882, i32 883, i32 884, i32 885, i32 886, i32 887, i32 888, i32 889, i32 890, i32 891, i32 892, i32 893, i32 894, i32 895, i32 896, i32 897, i32 898, i32 899, i32 900, i32 901, i32 902, i32 903, i32 904, i32 905, i32 906, i32 907, i32 908, i32 909, i32 910, i32 911, i32 912, i32 913, i32 914, i32 915, i32 916, i32 917, i32 918, i32 919, i32 920, i32 921, i32 922, i32 923, i32 924, i32 925, i32 926, i32 927, i32 928, i32 929, i32 930, i32 931, i32 932, i32 933, i32 934, i32 935, i32 936, i32 937, i32 938, i32 939, i32 940, i32 941, i32 942, i32 943, i32 944, i32 945, i32 946, i32 947, i32 948, i32 949, i32 950, i32 951, i32 952, i32 953, i32 954, i32 955, i32 956, i32 957, i32 958, i32 959, i32 960, i32 961, i32 962, i32 963, i32 964, i32 965, i32 966, i32 967, i32 968, i32 969, i32 970, i32 971, i32 972, i32 973, i32 974, i32 975, i32 976, i32 977, i32 978, i32 979, i32 980, i32 981, i32 982, i32 983, i32 984, i32 985, i32 986, i32 987, i32 988, i32 989, i32 990, i32 991, i32 992, i32 993, i32 994, i32 995, i32 996, i32 997, i32 998, i32 999, i32 1000, i32 1001, i32 1002, i32 1003, i32 1004, i32 1005, i32 1006, i32 1007, i32 1008, i32 1009, i32 1010, i32 1011, i32 1012, i32 1013, i32 1014, i32 1015, i32 1016, i32 1017, i32 1018, i32 1019, i32 1020, i32 1021, i32 1022, i32 1023>
  %t29 = add nsw <1024 x i32> %279, %819
  %820 = extractelement <1024 x i32> %t29, i32 0
  %821 = sext i32 %820 to i64
  %822 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %821
  %823 = load i32, i32* %822, align 4, !tbaa !400
  %824 = insertelement <1024 x i32> undef, i32 %823, i32 0
  %825 = extractelement <1024 x i32> %t29, i32 1
  %826 = sext i32 %825 to i64
  %827 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %826
  %828 = load i32, i32* %827, align 4, !tbaa !400
  %829 = insertelement <1024 x i32> %824, i32 %828, i32 1
  %830 = extractelement <1024 x i32> %t29, i32 2
  %831 = sext i32 %830 to i64
  %832 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %831
  %833 = load i32, i32* %832, align 4, !tbaa !400
  %834 = insertelement <1024 x i32> %829, i32 %833, i32 2
  %835 = extractelement <1024 x i32> %t29, i32 3
  %836 = sext i32 %835 to i64
  %837 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %836
  %838 = load i32, i32* %837, align 4, !tbaa !400
  %839 = insertelement <1024 x i32> %834, i32 %838, i32 3
  %840 = extractelement <1024 x i32> %t29, i32 4
  %841 = sext i32 %840 to i64
  %842 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %841
  %843 = load i32, i32* %842, align 4, !tbaa !400
  %844 = insertelement <1024 x i32> %839, i32 %843, i32 4
  %845 = extractelement <1024 x i32> %t29, i32 5
  %846 = sext i32 %845 to i64
  %847 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %846
  %848 = load i32, i32* %847, align 4, !tbaa !400
  %849 = insertelement <1024 x i32> %844, i32 %848, i32 5
  %850 = extractelement <1024 x i32> %t29, i32 6
  %851 = sext i32 %850 to i64
  %852 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %851
  %853 = load i32, i32* %852, align 4, !tbaa !400
  %854 = insertelement <1024 x i32> %849, i32 %853, i32 6
  %855 = extractelement <1024 x i32> %t29, i32 7
  %856 = sext i32 %855 to i64
  %857 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %856
  %858 = load i32, i32* %857, align 4, !tbaa !400
  %859 = insertelement <1024 x i32> %854, i32 %858, i32 7
  %860 = extractelement <1024 x i32> %t29, i32 8
  %861 = sext i32 %860 to i64
  %862 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %861
  %863 = load i32, i32* %862, align 4, !tbaa !400
  %864 = insertelement <1024 x i32> %859, i32 %863, i32 8
  %865 = extractelement <1024 x i32> %t29, i32 9
  %866 = sext i32 %865 to i64
  %867 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %866
  %868 = load i32, i32* %867, align 4, !tbaa !400
  %869 = insertelement <1024 x i32> %864, i32 %868, i32 9
  %870 = extractelement <1024 x i32> %t29, i32 10
  %871 = sext i32 %870 to i64
  %872 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %871
  %873 = load i32, i32* %872, align 4, !tbaa !400
  %874 = insertelement <1024 x i32> %869, i32 %873, i32 10
  %875 = extractelement <1024 x i32> %t29, i32 11
  %876 = sext i32 %875 to i64
  %877 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %876
  %878 = load i32, i32* %877, align 4, !tbaa !400
  %879 = insertelement <1024 x i32> %874, i32 %878, i32 11
  %880 = extractelement <1024 x i32> %t29, i32 12
  %881 = sext i32 %880 to i64
  %882 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %881
  %883 = load i32, i32* %882, align 4, !tbaa !400
  %884 = insertelement <1024 x i32> %879, i32 %883, i32 12
  %885 = extractelement <1024 x i32> %t29, i32 13
  %886 = sext i32 %885 to i64
  %887 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %886
  %888 = load i32, i32* %887, align 4, !tbaa !400
  %889 = insertelement <1024 x i32> %884, i32 %888, i32 13
  %890 = extractelement <1024 x i32> %t29, i32 14
  %891 = sext i32 %890 to i64
  %892 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %891
  %893 = load i32, i32* %892, align 4, !tbaa !400
  %894 = insertelement <1024 x i32> %889, i32 %893, i32 14
  %895 = extractelement <1024 x i32> %t29, i32 15
  %896 = sext i32 %895 to i64
  %897 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %896
  %898 = load i32, i32* %897, align 4, !tbaa !400
  %899 = insertelement <1024 x i32> %894, i32 %898, i32 15
  %900 = extractelement <1024 x i32> %t29, i32 16
  %901 = sext i32 %900 to i64
  %902 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %901
  %903 = load i32, i32* %902, align 4, !tbaa !400
  %904 = insertelement <1024 x i32> %899, i32 %903, i32 16
  %905 = extractelement <1024 x i32> %t29, i32 17
  %906 = sext i32 %905 to i64
  %907 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %906
  %908 = load i32, i32* %907, align 4, !tbaa !400
  %909 = insertelement <1024 x i32> %904, i32 %908, i32 17
  %910 = extractelement <1024 x i32> %t29, i32 18
  %911 = sext i32 %910 to i64
  %912 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %911
  %913 = load i32, i32* %912, align 4, !tbaa !400
  %914 = insertelement <1024 x i32> %909, i32 %913, i32 18
  %915 = extractelement <1024 x i32> %t29, i32 19
  %916 = sext i32 %915 to i64
  %917 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %916
  %918 = load i32, i32* %917, align 4, !tbaa !400
  %919 = insertelement <1024 x i32> %914, i32 %918, i32 19
  %920 = extractelement <1024 x i32> %t29, i32 20
  %921 = sext i32 %920 to i64
  %922 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %921
  %923 = load i32, i32* %922, align 4, !tbaa !400
  %924 = insertelement <1024 x i32> %919, i32 %923, i32 20
  %925 = extractelement <1024 x i32> %t29, i32 21
  %926 = sext i32 %925 to i64
  %927 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %926
  %928 = load i32, i32* %927, align 4, !tbaa !400
  %929 = insertelement <1024 x i32> %924, i32 %928, i32 21
  %930 = extractelement <1024 x i32> %t29, i32 22
  %931 = sext i32 %930 to i64
  %932 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %931
  %933 = load i32, i32* %932, align 4, !tbaa !400
  %934 = insertelement <1024 x i32> %929, i32 %933, i32 22
  %935 = extractelement <1024 x i32> %t29, i32 23
  %936 = sext i32 %935 to i64
  %937 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %936
  %938 = load i32, i32* %937, align 4, !tbaa !400
  %939 = insertelement <1024 x i32> %934, i32 %938, i32 23
  %940 = extractelement <1024 x i32> %t29, i32 24
  %941 = sext i32 %940 to i64
  %942 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %941
  %943 = load i32, i32* %942, align 4, !tbaa !400
  %944 = insertelement <1024 x i32> %939, i32 %943, i32 24
  %945 = extractelement <1024 x i32> %t29, i32 25
  %946 = sext i32 %945 to i64
  %947 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %946
  %948 = load i32, i32* %947, align 4, !tbaa !400
  %949 = insertelement <1024 x i32> %944, i32 %948, i32 25
  %950 = extractelement <1024 x i32> %t29, i32 26
  %951 = sext i32 %950 to i64
  %952 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %951
  %953 = load i32, i32* %952, align 4, !tbaa !400
  %954 = insertelement <1024 x i32> %949, i32 %953, i32 26
  %955 = extractelement <1024 x i32> %t29, i32 27
  %956 = sext i32 %955 to i64
  %957 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %956
  %958 = load i32, i32* %957, align 4, !tbaa !400
  %959 = insertelement <1024 x i32> %954, i32 %958, i32 27
  %960 = extractelement <1024 x i32> %t29, i32 28
  %961 = sext i32 %960 to i64
  %962 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %961
  %963 = load i32, i32* %962, align 4, !tbaa !400
  %964 = insertelement <1024 x i32> %959, i32 %963, i32 28
  %965 = extractelement <1024 x i32> %t29, i32 29
  %966 = sext i32 %965 to i64
  %967 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %966
  %968 = load i32, i32* %967, align 4, !tbaa !400
  %969 = insertelement <1024 x i32> %964, i32 %968, i32 29
  %970 = extractelement <1024 x i32> %t29, i32 30
  %971 = sext i32 %970 to i64
  %972 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %971
  %973 = load i32, i32* %972, align 4, !tbaa !400
  %974 = insertelement <1024 x i32> %969, i32 %973, i32 30
  %975 = extractelement <1024 x i32> %t29, i32 31
  %976 = sext i32 %975 to i64
  %977 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %976
  %978 = load i32, i32* %977, align 4, !tbaa !400
  %979 = insertelement <1024 x i32> %974, i32 %978, i32 31
  %980 = extractelement <1024 x i32> %t29, i32 32
  %981 = sext i32 %980 to i64
  %982 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %981
  %983 = load i32, i32* %982, align 4, !tbaa !400
  %984 = insertelement <1024 x i32> %979, i32 %983, i32 32
  %985 = extractelement <1024 x i32> %t29, i32 33
  %986 = sext i32 %985 to i64
  %987 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %986
  %988 = load i32, i32* %987, align 4, !tbaa !400
  %989 = insertelement <1024 x i32> %984, i32 %988, i32 33
  %990 = extractelement <1024 x i32> %t29, i32 34
  %991 = sext i32 %990 to i64
  %992 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %991
  %993 = load i32, i32* %992, align 4, !tbaa !400
  %994 = insertelement <1024 x i32> %989, i32 %993, i32 34
  %995 = extractelement <1024 x i32> %t29, i32 35
  %996 = sext i32 %995 to i64
  %997 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %996
  %998 = load i32, i32* %997, align 4, !tbaa !400
  %999 = insertelement <1024 x i32> %994, i32 %998, i32 35
  %1000 = extractelement <1024 x i32> %t29, i32 36
  %1001 = sext i32 %1000 to i64
  %1002 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1001
  %1003 = load i32, i32* %1002, align 4, !tbaa !400
  %1004 = insertelement <1024 x i32> %999, i32 %1003, i32 36
  %1005 = extractelement <1024 x i32> %t29, i32 37
  %1006 = sext i32 %1005 to i64
  %1007 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1006
  %1008 = load i32, i32* %1007, align 4, !tbaa !400
  %1009 = insertelement <1024 x i32> %1004, i32 %1008, i32 37
  %1010 = extractelement <1024 x i32> %t29, i32 38
  %1011 = sext i32 %1010 to i64
  %1012 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1011
  %1013 = load i32, i32* %1012, align 4, !tbaa !400
  %1014 = insertelement <1024 x i32> %1009, i32 %1013, i32 38
  %1015 = extractelement <1024 x i32> %t29, i32 39
  %1016 = sext i32 %1015 to i64
  %1017 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1016
  %1018 = load i32, i32* %1017, align 4, !tbaa !400
  %1019 = insertelement <1024 x i32> %1014, i32 %1018, i32 39
  %1020 = extractelement <1024 x i32> %t29, i32 40
  %1021 = sext i32 %1020 to i64
  %1022 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1021
  %1023 = load i32, i32* %1022, align 4, !tbaa !400
  %1024 = insertelement <1024 x i32> %1019, i32 %1023, i32 40
  %1025 = extractelement <1024 x i32> %t29, i32 41
  %1026 = sext i32 %1025 to i64
  %1027 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1026
  %1028 = load i32, i32* %1027, align 4, !tbaa !400
  %1029 = insertelement <1024 x i32> %1024, i32 %1028, i32 41
  %1030 = extractelement <1024 x i32> %t29, i32 42
  %1031 = sext i32 %1030 to i64
  %1032 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1031
  %1033 = load i32, i32* %1032, align 4, !tbaa !400
  %1034 = insertelement <1024 x i32> %1029, i32 %1033, i32 42
  %1035 = extractelement <1024 x i32> %t29, i32 43
  %1036 = sext i32 %1035 to i64
  %1037 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1036
  %1038 = load i32, i32* %1037, align 4, !tbaa !400
  %1039 = insertelement <1024 x i32> %1034, i32 %1038, i32 43
  %1040 = extractelement <1024 x i32> %t29, i32 44
  %1041 = sext i32 %1040 to i64
  %1042 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1041
  %1043 = load i32, i32* %1042, align 4, !tbaa !400
  %1044 = insertelement <1024 x i32> %1039, i32 %1043, i32 44
  %1045 = extractelement <1024 x i32> %t29, i32 45
  %1046 = sext i32 %1045 to i64
  %1047 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1046
  %1048 = load i32, i32* %1047, align 4, !tbaa !400
  %1049 = insertelement <1024 x i32> %1044, i32 %1048, i32 45
  %1050 = extractelement <1024 x i32> %t29, i32 46
  %1051 = sext i32 %1050 to i64
  %1052 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1051
  %1053 = load i32, i32* %1052, align 4, !tbaa !400
  %1054 = insertelement <1024 x i32> %1049, i32 %1053, i32 46
  %1055 = extractelement <1024 x i32> %t29, i32 47
  %1056 = sext i32 %1055 to i64
  %1057 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1056
  %1058 = load i32, i32* %1057, align 4, !tbaa !400
  %1059 = insertelement <1024 x i32> %1054, i32 %1058, i32 47
  %1060 = extractelement <1024 x i32> %t29, i32 48
  %1061 = sext i32 %1060 to i64
  %1062 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1061
  %1063 = load i32, i32* %1062, align 4, !tbaa !400
  %1064 = insertelement <1024 x i32> %1059, i32 %1063, i32 48
  %1065 = extractelement <1024 x i32> %t29, i32 49
  %1066 = sext i32 %1065 to i64
  %1067 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1066
  %1068 = load i32, i32* %1067, align 4, !tbaa !400
  %1069 = insertelement <1024 x i32> %1064, i32 %1068, i32 49
  %1070 = extractelement <1024 x i32> %t29, i32 50
  %1071 = sext i32 %1070 to i64
  %1072 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1071
  %1073 = load i32, i32* %1072, align 4, !tbaa !400
  %1074 = insertelement <1024 x i32> %1069, i32 %1073, i32 50
  %1075 = extractelement <1024 x i32> %t29, i32 51
  %1076 = sext i32 %1075 to i64
  %1077 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1076
  %1078 = load i32, i32* %1077, align 4, !tbaa !400
  %1079 = insertelement <1024 x i32> %1074, i32 %1078, i32 51
  %1080 = extractelement <1024 x i32> %t29, i32 52
  %1081 = sext i32 %1080 to i64
  %1082 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1081
  %1083 = load i32, i32* %1082, align 4, !tbaa !400
  %1084 = insertelement <1024 x i32> %1079, i32 %1083, i32 52
  %1085 = extractelement <1024 x i32> %t29, i32 53
  %1086 = sext i32 %1085 to i64
  %1087 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1086
  %1088 = load i32, i32* %1087, align 4, !tbaa !400
  %1089 = insertelement <1024 x i32> %1084, i32 %1088, i32 53
  %1090 = extractelement <1024 x i32> %t29, i32 54
  %1091 = sext i32 %1090 to i64
  %1092 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1091
  %1093 = load i32, i32* %1092, align 4, !tbaa !400
  %1094 = insertelement <1024 x i32> %1089, i32 %1093, i32 54
  %1095 = extractelement <1024 x i32> %t29, i32 55
  %1096 = sext i32 %1095 to i64
  %1097 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1096
  %1098 = load i32, i32* %1097, align 4, !tbaa !400
  %1099 = insertelement <1024 x i32> %1094, i32 %1098, i32 55
  %1100 = extractelement <1024 x i32> %t29, i32 56
  %1101 = sext i32 %1100 to i64
  %1102 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1101
  %1103 = load i32, i32* %1102, align 4, !tbaa !400
  %1104 = insertelement <1024 x i32> %1099, i32 %1103, i32 56
  %1105 = extractelement <1024 x i32> %t29, i32 57
  %1106 = sext i32 %1105 to i64
  %1107 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1106
  %1108 = load i32, i32* %1107, align 4, !tbaa !400
  %1109 = insertelement <1024 x i32> %1104, i32 %1108, i32 57
  %1110 = extractelement <1024 x i32> %t29, i32 58
  %1111 = sext i32 %1110 to i64
  %1112 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1111
  %1113 = load i32, i32* %1112, align 4, !tbaa !400
  %1114 = insertelement <1024 x i32> %1109, i32 %1113, i32 58
  %1115 = extractelement <1024 x i32> %t29, i32 59
  %1116 = sext i32 %1115 to i64
  %1117 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1116
  %1118 = load i32, i32* %1117, align 4, !tbaa !400
  %1119 = insertelement <1024 x i32> %1114, i32 %1118, i32 59
  %1120 = extractelement <1024 x i32> %t29, i32 60
  %1121 = sext i32 %1120 to i64
  %1122 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1121
  %1123 = load i32, i32* %1122, align 4, !tbaa !400
  %1124 = insertelement <1024 x i32> %1119, i32 %1123, i32 60
  %1125 = extractelement <1024 x i32> %t29, i32 61
  %1126 = sext i32 %1125 to i64
  %1127 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1126
  %1128 = load i32, i32* %1127, align 4, !tbaa !400
  %1129 = insertelement <1024 x i32> %1124, i32 %1128, i32 61
  %1130 = extractelement <1024 x i32> %t29, i32 62
  %1131 = sext i32 %1130 to i64
  %1132 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1131
  %1133 = load i32, i32* %1132, align 4, !tbaa !400
  %1134 = insertelement <1024 x i32> %1129, i32 %1133, i32 62
  %1135 = extractelement <1024 x i32> %t29, i32 63
  %1136 = sext i32 %1135 to i64
  %1137 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1136
  %1138 = load i32, i32* %1137, align 4, !tbaa !400
  %1139 = insertelement <1024 x i32> %1134, i32 %1138, i32 63
  %1140 = extractelement <1024 x i32> %t29, i32 64
  %1141 = sext i32 %1140 to i64
  %1142 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1141
  %1143 = load i32, i32* %1142, align 4, !tbaa !400
  %1144 = insertelement <1024 x i32> %1139, i32 %1143, i32 64
  %1145 = extractelement <1024 x i32> %t29, i32 65
  %1146 = sext i32 %1145 to i64
  %1147 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1146
  %1148 = load i32, i32* %1147, align 4, !tbaa !400
  %1149 = insertelement <1024 x i32> %1144, i32 %1148, i32 65
  %1150 = extractelement <1024 x i32> %t29, i32 66
  %1151 = sext i32 %1150 to i64
  %1152 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1151
  %1153 = load i32, i32* %1152, align 4, !tbaa !400
  %1154 = insertelement <1024 x i32> %1149, i32 %1153, i32 66
  %1155 = extractelement <1024 x i32> %t29, i32 67
  %1156 = sext i32 %1155 to i64
  %1157 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1156
  %1158 = load i32, i32* %1157, align 4, !tbaa !400
  %1159 = insertelement <1024 x i32> %1154, i32 %1158, i32 67
  %1160 = extractelement <1024 x i32> %t29, i32 68
  %1161 = sext i32 %1160 to i64
  %1162 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1161
  %1163 = load i32, i32* %1162, align 4, !tbaa !400
  %1164 = insertelement <1024 x i32> %1159, i32 %1163, i32 68
  %1165 = extractelement <1024 x i32> %t29, i32 69
  %1166 = sext i32 %1165 to i64
  %1167 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1166
  %1168 = load i32, i32* %1167, align 4, !tbaa !400
  %1169 = insertelement <1024 x i32> %1164, i32 %1168, i32 69
  %1170 = extractelement <1024 x i32> %t29, i32 70
  %1171 = sext i32 %1170 to i64
  %1172 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1171
  %1173 = load i32, i32* %1172, align 4, !tbaa !400
  %1174 = insertelement <1024 x i32> %1169, i32 %1173, i32 70
  %1175 = extractelement <1024 x i32> %t29, i32 71
  %1176 = sext i32 %1175 to i64
  %1177 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1176
  %1178 = load i32, i32* %1177, align 4, !tbaa !400
  %1179 = insertelement <1024 x i32> %1174, i32 %1178, i32 71
  %1180 = extractelement <1024 x i32> %t29, i32 72
  %1181 = sext i32 %1180 to i64
  %1182 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1181
  %1183 = load i32, i32* %1182, align 4, !tbaa !400
  %1184 = insertelement <1024 x i32> %1179, i32 %1183, i32 72
  %1185 = extractelement <1024 x i32> %t29, i32 73
  %1186 = sext i32 %1185 to i64
  %1187 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1186
  %1188 = load i32, i32* %1187, align 4, !tbaa !400
  %1189 = insertelement <1024 x i32> %1184, i32 %1188, i32 73
  %1190 = extractelement <1024 x i32> %t29, i32 74
  %1191 = sext i32 %1190 to i64
  %1192 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1191
  %1193 = load i32, i32* %1192, align 4, !tbaa !400
  %1194 = insertelement <1024 x i32> %1189, i32 %1193, i32 74
  %1195 = extractelement <1024 x i32> %t29, i32 75
  %1196 = sext i32 %1195 to i64
  %1197 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1196
  %1198 = load i32, i32* %1197, align 4, !tbaa !400
  %1199 = insertelement <1024 x i32> %1194, i32 %1198, i32 75
  %1200 = extractelement <1024 x i32> %t29, i32 76
  %1201 = sext i32 %1200 to i64
  %1202 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1201
  %1203 = load i32, i32* %1202, align 4, !tbaa !400
  %1204 = insertelement <1024 x i32> %1199, i32 %1203, i32 76
  %1205 = extractelement <1024 x i32> %t29, i32 77
  %1206 = sext i32 %1205 to i64
  %1207 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1206
  %1208 = load i32, i32* %1207, align 4, !tbaa !400
  %1209 = insertelement <1024 x i32> %1204, i32 %1208, i32 77
  %1210 = extractelement <1024 x i32> %t29, i32 78
  %1211 = sext i32 %1210 to i64
  %1212 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1211
  %1213 = load i32, i32* %1212, align 4, !tbaa !400
  %1214 = insertelement <1024 x i32> %1209, i32 %1213, i32 78
  %1215 = extractelement <1024 x i32> %t29, i32 79
  %1216 = sext i32 %1215 to i64
  %1217 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1216
  %1218 = load i32, i32* %1217, align 4, !tbaa !400
  %1219 = insertelement <1024 x i32> %1214, i32 %1218, i32 79
  %1220 = extractelement <1024 x i32> %t29, i32 80
  %1221 = sext i32 %1220 to i64
  %1222 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1221
  %1223 = load i32, i32* %1222, align 4, !tbaa !400
  %1224 = insertelement <1024 x i32> %1219, i32 %1223, i32 80
  %1225 = extractelement <1024 x i32> %t29, i32 81
  %1226 = sext i32 %1225 to i64
  %1227 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1226
  %1228 = load i32, i32* %1227, align 4, !tbaa !400
  %1229 = insertelement <1024 x i32> %1224, i32 %1228, i32 81
  %1230 = extractelement <1024 x i32> %t29, i32 82
  %1231 = sext i32 %1230 to i64
  %1232 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1231
  %1233 = load i32, i32* %1232, align 4, !tbaa !400
  %1234 = insertelement <1024 x i32> %1229, i32 %1233, i32 82
  %1235 = extractelement <1024 x i32> %t29, i32 83
  %1236 = sext i32 %1235 to i64
  %1237 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1236
  %1238 = load i32, i32* %1237, align 4, !tbaa !400
  %1239 = insertelement <1024 x i32> %1234, i32 %1238, i32 83
  %1240 = extractelement <1024 x i32> %t29, i32 84
  %1241 = sext i32 %1240 to i64
  %1242 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1241
  %1243 = load i32, i32* %1242, align 4, !tbaa !400
  %1244 = insertelement <1024 x i32> %1239, i32 %1243, i32 84
  %1245 = extractelement <1024 x i32> %t29, i32 85
  %1246 = sext i32 %1245 to i64
  %1247 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1246
  %1248 = load i32, i32* %1247, align 4, !tbaa !400
  %1249 = insertelement <1024 x i32> %1244, i32 %1248, i32 85
  %1250 = extractelement <1024 x i32> %t29, i32 86
  %1251 = sext i32 %1250 to i64
  %1252 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1251
  %1253 = load i32, i32* %1252, align 4, !tbaa !400
  %1254 = insertelement <1024 x i32> %1249, i32 %1253, i32 86
  %1255 = extractelement <1024 x i32> %t29, i32 87
  %1256 = sext i32 %1255 to i64
  %1257 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1256
  %1258 = load i32, i32* %1257, align 4, !tbaa !400
  %1259 = insertelement <1024 x i32> %1254, i32 %1258, i32 87
  %1260 = extractelement <1024 x i32> %t29, i32 88
  %1261 = sext i32 %1260 to i64
  %1262 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1261
  %1263 = load i32, i32* %1262, align 4, !tbaa !400
  %1264 = insertelement <1024 x i32> %1259, i32 %1263, i32 88
  %1265 = extractelement <1024 x i32> %t29, i32 89
  %1266 = sext i32 %1265 to i64
  %1267 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1266
  %1268 = load i32, i32* %1267, align 4, !tbaa !400
  %1269 = insertelement <1024 x i32> %1264, i32 %1268, i32 89
  %1270 = extractelement <1024 x i32> %t29, i32 90
  %1271 = sext i32 %1270 to i64
  %1272 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1271
  %1273 = load i32, i32* %1272, align 4, !tbaa !400
  %1274 = insertelement <1024 x i32> %1269, i32 %1273, i32 90
  %1275 = extractelement <1024 x i32> %t29, i32 91
  %1276 = sext i32 %1275 to i64
  %1277 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1276
  %1278 = load i32, i32* %1277, align 4, !tbaa !400
  %1279 = insertelement <1024 x i32> %1274, i32 %1278, i32 91
  %1280 = extractelement <1024 x i32> %t29, i32 92
  %1281 = sext i32 %1280 to i64
  %1282 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1281
  %1283 = load i32, i32* %1282, align 4, !tbaa !400
  %1284 = insertelement <1024 x i32> %1279, i32 %1283, i32 92
  %1285 = extractelement <1024 x i32> %t29, i32 93
  %1286 = sext i32 %1285 to i64
  %1287 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1286
  %1288 = load i32, i32* %1287, align 4, !tbaa !400
  %1289 = insertelement <1024 x i32> %1284, i32 %1288, i32 93
  %1290 = extractelement <1024 x i32> %t29, i32 94
  %1291 = sext i32 %1290 to i64
  %1292 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1291
  %1293 = load i32, i32* %1292, align 4, !tbaa !400
  %1294 = insertelement <1024 x i32> %1289, i32 %1293, i32 94
  %1295 = extractelement <1024 x i32> %t29, i32 95
  %1296 = sext i32 %1295 to i64
  %1297 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1296
  %1298 = load i32, i32* %1297, align 4, !tbaa !400
  %1299 = insertelement <1024 x i32> %1294, i32 %1298, i32 95
  %1300 = extractelement <1024 x i32> %t29, i32 96
  %1301 = sext i32 %1300 to i64
  %1302 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1301
  %1303 = load i32, i32* %1302, align 4, !tbaa !400
  %1304 = insertelement <1024 x i32> %1299, i32 %1303, i32 96
  %1305 = extractelement <1024 x i32> %t29, i32 97
  %1306 = sext i32 %1305 to i64
  %1307 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1306
  %1308 = load i32, i32* %1307, align 4, !tbaa !400
  %1309 = insertelement <1024 x i32> %1304, i32 %1308, i32 97
  %1310 = extractelement <1024 x i32> %t29, i32 98
  %1311 = sext i32 %1310 to i64
  %1312 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1311
  %1313 = load i32, i32* %1312, align 4, !tbaa !400
  %1314 = insertelement <1024 x i32> %1309, i32 %1313, i32 98
  %1315 = extractelement <1024 x i32> %t29, i32 99
  %1316 = sext i32 %1315 to i64
  %1317 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1316
  %1318 = load i32, i32* %1317, align 4, !tbaa !400
  %1319 = insertelement <1024 x i32> %1314, i32 %1318, i32 99
  %1320 = extractelement <1024 x i32> %t29, i32 100
  %1321 = sext i32 %1320 to i64
  %1322 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1321
  %1323 = load i32, i32* %1322, align 4, !tbaa !400
  %1324 = insertelement <1024 x i32> %1319, i32 %1323, i32 100
  %1325 = extractelement <1024 x i32> %t29, i32 101
  %1326 = sext i32 %1325 to i64
  %1327 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1326
  %1328 = load i32, i32* %1327, align 4, !tbaa !400
  %1329 = insertelement <1024 x i32> %1324, i32 %1328, i32 101
  %1330 = extractelement <1024 x i32> %t29, i32 102
  %1331 = sext i32 %1330 to i64
  %1332 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1331
  %1333 = load i32, i32* %1332, align 4, !tbaa !400
  %1334 = insertelement <1024 x i32> %1329, i32 %1333, i32 102
  %1335 = extractelement <1024 x i32> %t29, i32 103
  %1336 = sext i32 %1335 to i64
  %1337 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1336
  %1338 = load i32, i32* %1337, align 4, !tbaa !400
  %1339 = insertelement <1024 x i32> %1334, i32 %1338, i32 103
  %1340 = extractelement <1024 x i32> %t29, i32 104
  %1341 = sext i32 %1340 to i64
  %1342 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1341
  %1343 = load i32, i32* %1342, align 4, !tbaa !400
  %1344 = insertelement <1024 x i32> %1339, i32 %1343, i32 104
  %1345 = extractelement <1024 x i32> %t29, i32 105
  %1346 = sext i32 %1345 to i64
  %1347 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1346
  %1348 = load i32, i32* %1347, align 4, !tbaa !400
  %1349 = insertelement <1024 x i32> %1344, i32 %1348, i32 105
  %1350 = extractelement <1024 x i32> %t29, i32 106
  %1351 = sext i32 %1350 to i64
  %1352 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1351
  %1353 = load i32, i32* %1352, align 4, !tbaa !400
  %1354 = insertelement <1024 x i32> %1349, i32 %1353, i32 106
  %1355 = extractelement <1024 x i32> %t29, i32 107
  %1356 = sext i32 %1355 to i64
  %1357 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1356
  %1358 = load i32, i32* %1357, align 4, !tbaa !400
  %1359 = insertelement <1024 x i32> %1354, i32 %1358, i32 107
  %1360 = extractelement <1024 x i32> %t29, i32 108
  %1361 = sext i32 %1360 to i64
  %1362 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1361
  %1363 = load i32, i32* %1362, align 4, !tbaa !400
  %1364 = insertelement <1024 x i32> %1359, i32 %1363, i32 108
  %1365 = extractelement <1024 x i32> %t29, i32 109
  %1366 = sext i32 %1365 to i64
  %1367 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1366
  %1368 = load i32, i32* %1367, align 4, !tbaa !400
  %1369 = insertelement <1024 x i32> %1364, i32 %1368, i32 109
  %1370 = extractelement <1024 x i32> %t29, i32 110
  %1371 = sext i32 %1370 to i64
  %1372 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1371
  %1373 = load i32, i32* %1372, align 4, !tbaa !400
  %1374 = insertelement <1024 x i32> %1369, i32 %1373, i32 110
  %1375 = extractelement <1024 x i32> %t29, i32 111
  %1376 = sext i32 %1375 to i64
  %1377 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1376
  %1378 = load i32, i32* %1377, align 4, !tbaa !400
  %1379 = insertelement <1024 x i32> %1374, i32 %1378, i32 111
  %1380 = extractelement <1024 x i32> %t29, i32 112
  %1381 = sext i32 %1380 to i64
  %1382 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1381
  %1383 = load i32, i32* %1382, align 4, !tbaa !400
  %1384 = insertelement <1024 x i32> %1379, i32 %1383, i32 112
  %1385 = extractelement <1024 x i32> %t29, i32 113
  %1386 = sext i32 %1385 to i64
  %1387 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1386
  %1388 = load i32, i32* %1387, align 4, !tbaa !400
  %1389 = insertelement <1024 x i32> %1384, i32 %1388, i32 113
  %1390 = extractelement <1024 x i32> %t29, i32 114
  %1391 = sext i32 %1390 to i64
  %1392 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1391
  %1393 = load i32, i32* %1392, align 4, !tbaa !400
  %1394 = insertelement <1024 x i32> %1389, i32 %1393, i32 114
  %1395 = extractelement <1024 x i32> %t29, i32 115
  %1396 = sext i32 %1395 to i64
  %1397 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1396
  %1398 = load i32, i32* %1397, align 4, !tbaa !400
  %1399 = insertelement <1024 x i32> %1394, i32 %1398, i32 115
  %1400 = extractelement <1024 x i32> %t29, i32 116
  %1401 = sext i32 %1400 to i64
  %1402 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1401
  %1403 = load i32, i32* %1402, align 4, !tbaa !400
  %1404 = insertelement <1024 x i32> %1399, i32 %1403, i32 116
  %1405 = extractelement <1024 x i32> %t29, i32 117
  %1406 = sext i32 %1405 to i64
  %1407 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1406
  %1408 = load i32, i32* %1407, align 4, !tbaa !400
  %1409 = insertelement <1024 x i32> %1404, i32 %1408, i32 117
  %1410 = extractelement <1024 x i32> %t29, i32 118
  %1411 = sext i32 %1410 to i64
  %1412 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1411
  %1413 = load i32, i32* %1412, align 4, !tbaa !400
  %1414 = insertelement <1024 x i32> %1409, i32 %1413, i32 118
  %1415 = extractelement <1024 x i32> %t29, i32 119
  %1416 = sext i32 %1415 to i64
  %1417 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1416
  %1418 = load i32, i32* %1417, align 4, !tbaa !400
  %1419 = insertelement <1024 x i32> %1414, i32 %1418, i32 119
  %1420 = extractelement <1024 x i32> %t29, i32 120
  %1421 = sext i32 %1420 to i64
  %1422 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1421
  %1423 = load i32, i32* %1422, align 4, !tbaa !400
  %1424 = insertelement <1024 x i32> %1419, i32 %1423, i32 120
  %1425 = extractelement <1024 x i32> %t29, i32 121
  %1426 = sext i32 %1425 to i64
  %1427 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1426
  %1428 = load i32, i32* %1427, align 4, !tbaa !400
  %1429 = insertelement <1024 x i32> %1424, i32 %1428, i32 121
  %1430 = extractelement <1024 x i32> %t29, i32 122
  %1431 = sext i32 %1430 to i64
  %1432 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1431
  %1433 = load i32, i32* %1432, align 4, !tbaa !400
  %1434 = insertelement <1024 x i32> %1429, i32 %1433, i32 122
  %1435 = extractelement <1024 x i32> %t29, i32 123
  %1436 = sext i32 %1435 to i64
  %1437 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1436
  %1438 = load i32, i32* %1437, align 4, !tbaa !400
  %1439 = insertelement <1024 x i32> %1434, i32 %1438, i32 123
  %1440 = extractelement <1024 x i32> %t29, i32 124
  %1441 = sext i32 %1440 to i64
  %1442 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1441
  %1443 = load i32, i32* %1442, align 4, !tbaa !400
  %1444 = insertelement <1024 x i32> %1439, i32 %1443, i32 124
  %1445 = extractelement <1024 x i32> %t29, i32 125
  %1446 = sext i32 %1445 to i64
  %1447 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1446
  %1448 = load i32, i32* %1447, align 4, !tbaa !400
  %1449 = insertelement <1024 x i32> %1444, i32 %1448, i32 125
  %1450 = extractelement <1024 x i32> %t29, i32 126
  %1451 = sext i32 %1450 to i64
  %1452 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1451
  %1453 = load i32, i32* %1452, align 4, !tbaa !400
  %1454 = insertelement <1024 x i32> %1449, i32 %1453, i32 126
  %1455 = extractelement <1024 x i32> %t29, i32 127
  %1456 = sext i32 %1455 to i64
  %1457 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1456
  %1458 = load i32, i32* %1457, align 4, !tbaa !400
  %1459 = insertelement <1024 x i32> %1454, i32 %1458, i32 127
  %1460 = extractelement <1024 x i32> %t29, i32 128
  %1461 = sext i32 %1460 to i64
  %1462 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1461
  %1463 = load i32, i32* %1462, align 4, !tbaa !400
  %1464 = insertelement <1024 x i32> %1459, i32 %1463, i32 128
  %1465 = extractelement <1024 x i32> %t29, i32 129
  %1466 = sext i32 %1465 to i64
  %1467 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1466
  %1468 = load i32, i32* %1467, align 4, !tbaa !400
  %1469 = insertelement <1024 x i32> %1464, i32 %1468, i32 129
  %1470 = extractelement <1024 x i32> %t29, i32 130
  %1471 = sext i32 %1470 to i64
  %1472 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1471
  %1473 = load i32, i32* %1472, align 4, !tbaa !400
  %1474 = insertelement <1024 x i32> %1469, i32 %1473, i32 130
  %1475 = extractelement <1024 x i32> %t29, i32 131
  %1476 = sext i32 %1475 to i64
  %1477 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1476
  %1478 = load i32, i32* %1477, align 4, !tbaa !400
  %1479 = insertelement <1024 x i32> %1474, i32 %1478, i32 131
  %1480 = extractelement <1024 x i32> %t29, i32 132
  %1481 = sext i32 %1480 to i64
  %1482 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1481
  %1483 = load i32, i32* %1482, align 4, !tbaa !400
  %1484 = insertelement <1024 x i32> %1479, i32 %1483, i32 132
  %1485 = extractelement <1024 x i32> %t29, i32 133
  %1486 = sext i32 %1485 to i64
  %1487 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1486
  %1488 = load i32, i32* %1487, align 4, !tbaa !400
  %1489 = insertelement <1024 x i32> %1484, i32 %1488, i32 133
  %1490 = extractelement <1024 x i32> %t29, i32 134
  %1491 = sext i32 %1490 to i64
  %1492 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1491
  %1493 = load i32, i32* %1492, align 4, !tbaa !400
  %1494 = insertelement <1024 x i32> %1489, i32 %1493, i32 134
  %1495 = extractelement <1024 x i32> %t29, i32 135
  %1496 = sext i32 %1495 to i64
  %1497 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1496
  %1498 = load i32, i32* %1497, align 4, !tbaa !400
  %1499 = insertelement <1024 x i32> %1494, i32 %1498, i32 135
  %1500 = extractelement <1024 x i32> %t29, i32 136
  %1501 = sext i32 %1500 to i64
  %1502 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1501
  %1503 = load i32, i32* %1502, align 4, !tbaa !400
  %1504 = insertelement <1024 x i32> %1499, i32 %1503, i32 136
  %1505 = extractelement <1024 x i32> %t29, i32 137
  %1506 = sext i32 %1505 to i64
  %1507 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1506
  %1508 = load i32, i32* %1507, align 4, !tbaa !400
  %1509 = insertelement <1024 x i32> %1504, i32 %1508, i32 137
  %1510 = extractelement <1024 x i32> %t29, i32 138
  %1511 = sext i32 %1510 to i64
  %1512 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1511
  %1513 = load i32, i32* %1512, align 4, !tbaa !400
  %1514 = insertelement <1024 x i32> %1509, i32 %1513, i32 138
  %1515 = extractelement <1024 x i32> %t29, i32 139
  %1516 = sext i32 %1515 to i64
  %1517 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1516
  %1518 = load i32, i32* %1517, align 4, !tbaa !400
  %1519 = insertelement <1024 x i32> %1514, i32 %1518, i32 139
  %1520 = extractelement <1024 x i32> %t29, i32 140
  %1521 = sext i32 %1520 to i64
  %1522 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1521
  %1523 = load i32, i32* %1522, align 4, !tbaa !400
  %1524 = insertelement <1024 x i32> %1519, i32 %1523, i32 140
  %1525 = extractelement <1024 x i32> %t29, i32 141
  %1526 = sext i32 %1525 to i64
  %1527 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1526
  %1528 = load i32, i32* %1527, align 4, !tbaa !400
  %1529 = insertelement <1024 x i32> %1524, i32 %1528, i32 141
  %1530 = extractelement <1024 x i32> %t29, i32 142
  %1531 = sext i32 %1530 to i64
  %1532 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1531
  %1533 = load i32, i32* %1532, align 4, !tbaa !400
  %1534 = insertelement <1024 x i32> %1529, i32 %1533, i32 142
  %1535 = extractelement <1024 x i32> %t29, i32 143
  %1536 = sext i32 %1535 to i64
  %1537 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1536
  %1538 = load i32, i32* %1537, align 4, !tbaa !400
  %1539 = insertelement <1024 x i32> %1534, i32 %1538, i32 143
  %1540 = extractelement <1024 x i32> %t29, i32 144
  %1541 = sext i32 %1540 to i64
  %1542 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1541
  %1543 = load i32, i32* %1542, align 4, !tbaa !400
  %1544 = insertelement <1024 x i32> %1539, i32 %1543, i32 144
  %1545 = extractelement <1024 x i32> %t29, i32 145
  %1546 = sext i32 %1545 to i64
  %1547 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1546
  %1548 = load i32, i32* %1547, align 4, !tbaa !400
  %1549 = insertelement <1024 x i32> %1544, i32 %1548, i32 145
  %1550 = extractelement <1024 x i32> %t29, i32 146
  %1551 = sext i32 %1550 to i64
  %1552 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1551
  %1553 = load i32, i32* %1552, align 4, !tbaa !400
  %1554 = insertelement <1024 x i32> %1549, i32 %1553, i32 146
  %1555 = extractelement <1024 x i32> %t29, i32 147
  %1556 = sext i32 %1555 to i64
  %1557 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1556
  %1558 = load i32, i32* %1557, align 4, !tbaa !400
  %1559 = insertelement <1024 x i32> %1554, i32 %1558, i32 147
  %1560 = extractelement <1024 x i32> %t29, i32 148
  %1561 = sext i32 %1560 to i64
  %1562 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1561
  %1563 = load i32, i32* %1562, align 4, !tbaa !400
  %1564 = insertelement <1024 x i32> %1559, i32 %1563, i32 148
  %1565 = extractelement <1024 x i32> %t29, i32 149
  %1566 = sext i32 %1565 to i64
  %1567 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1566
  %1568 = load i32, i32* %1567, align 4, !tbaa !400
  %1569 = insertelement <1024 x i32> %1564, i32 %1568, i32 149
  %1570 = extractelement <1024 x i32> %t29, i32 150
  %1571 = sext i32 %1570 to i64
  %1572 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1571
  %1573 = load i32, i32* %1572, align 4, !tbaa !400
  %1574 = insertelement <1024 x i32> %1569, i32 %1573, i32 150
  %1575 = extractelement <1024 x i32> %t29, i32 151
  %1576 = sext i32 %1575 to i64
  %1577 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1576
  %1578 = load i32, i32* %1577, align 4, !tbaa !400
  %1579 = insertelement <1024 x i32> %1574, i32 %1578, i32 151
  %1580 = extractelement <1024 x i32> %t29, i32 152
  %1581 = sext i32 %1580 to i64
  %1582 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1581
  %1583 = load i32, i32* %1582, align 4, !tbaa !400
  %1584 = insertelement <1024 x i32> %1579, i32 %1583, i32 152
  %1585 = extractelement <1024 x i32> %t29, i32 153
  %1586 = sext i32 %1585 to i64
  %1587 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1586
  %1588 = load i32, i32* %1587, align 4, !tbaa !400
  %1589 = insertelement <1024 x i32> %1584, i32 %1588, i32 153
  %1590 = extractelement <1024 x i32> %t29, i32 154
  %1591 = sext i32 %1590 to i64
  %1592 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1591
  %1593 = load i32, i32* %1592, align 4, !tbaa !400
  %1594 = insertelement <1024 x i32> %1589, i32 %1593, i32 154
  %1595 = extractelement <1024 x i32> %t29, i32 155
  %1596 = sext i32 %1595 to i64
  %1597 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1596
  %1598 = load i32, i32* %1597, align 4, !tbaa !400
  %1599 = insertelement <1024 x i32> %1594, i32 %1598, i32 155
  %1600 = extractelement <1024 x i32> %t29, i32 156
  %1601 = sext i32 %1600 to i64
  %1602 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1601
  %1603 = load i32, i32* %1602, align 4, !tbaa !400
  %1604 = insertelement <1024 x i32> %1599, i32 %1603, i32 156
  %1605 = extractelement <1024 x i32> %t29, i32 157
  %1606 = sext i32 %1605 to i64
  %1607 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1606
  %1608 = load i32, i32* %1607, align 4, !tbaa !400
  %1609 = insertelement <1024 x i32> %1604, i32 %1608, i32 157
  %1610 = extractelement <1024 x i32> %t29, i32 158
  %1611 = sext i32 %1610 to i64
  %1612 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1611
  %1613 = load i32, i32* %1612, align 4, !tbaa !400
  %1614 = insertelement <1024 x i32> %1609, i32 %1613, i32 158
  %1615 = extractelement <1024 x i32> %t29, i32 159
  %1616 = sext i32 %1615 to i64
  %1617 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1616
  %1618 = load i32, i32* %1617, align 4, !tbaa !400
  %1619 = insertelement <1024 x i32> %1614, i32 %1618, i32 159
  %1620 = extractelement <1024 x i32> %t29, i32 160
  %1621 = sext i32 %1620 to i64
  %1622 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1621
  %1623 = load i32, i32* %1622, align 4, !tbaa !400
  %1624 = insertelement <1024 x i32> %1619, i32 %1623, i32 160
  %1625 = extractelement <1024 x i32> %t29, i32 161
  %1626 = sext i32 %1625 to i64
  %1627 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1626
  %1628 = load i32, i32* %1627, align 4, !tbaa !400
  %1629 = insertelement <1024 x i32> %1624, i32 %1628, i32 161
  %1630 = extractelement <1024 x i32> %t29, i32 162
  %1631 = sext i32 %1630 to i64
  %1632 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1631
  %1633 = load i32, i32* %1632, align 4, !tbaa !400
  %1634 = insertelement <1024 x i32> %1629, i32 %1633, i32 162
  %1635 = extractelement <1024 x i32> %t29, i32 163
  %1636 = sext i32 %1635 to i64
  %1637 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1636
  %1638 = load i32, i32* %1637, align 4, !tbaa !400
  %1639 = insertelement <1024 x i32> %1634, i32 %1638, i32 163
  %1640 = extractelement <1024 x i32> %t29, i32 164
  %1641 = sext i32 %1640 to i64
  %1642 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1641
  %1643 = load i32, i32* %1642, align 4, !tbaa !400
  %1644 = insertelement <1024 x i32> %1639, i32 %1643, i32 164
  %1645 = extractelement <1024 x i32> %t29, i32 165
  %1646 = sext i32 %1645 to i64
  %1647 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1646
  %1648 = load i32, i32* %1647, align 4, !tbaa !400
  %1649 = insertelement <1024 x i32> %1644, i32 %1648, i32 165
  %1650 = extractelement <1024 x i32> %t29, i32 166
  %1651 = sext i32 %1650 to i64
  %1652 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1651
  %1653 = load i32, i32* %1652, align 4, !tbaa !400
  %1654 = insertelement <1024 x i32> %1649, i32 %1653, i32 166
  %1655 = extractelement <1024 x i32> %t29, i32 167
  %1656 = sext i32 %1655 to i64
  %1657 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1656
  %1658 = load i32, i32* %1657, align 4, !tbaa !400
  %1659 = insertelement <1024 x i32> %1654, i32 %1658, i32 167
  %1660 = extractelement <1024 x i32> %t29, i32 168
  %1661 = sext i32 %1660 to i64
  %1662 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1661
  %1663 = load i32, i32* %1662, align 4, !tbaa !400
  %1664 = insertelement <1024 x i32> %1659, i32 %1663, i32 168
  %1665 = extractelement <1024 x i32> %t29, i32 169
  %1666 = sext i32 %1665 to i64
  %1667 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1666
  %1668 = load i32, i32* %1667, align 4, !tbaa !400
  %1669 = insertelement <1024 x i32> %1664, i32 %1668, i32 169
  %1670 = extractelement <1024 x i32> %t29, i32 170
  %1671 = sext i32 %1670 to i64
  %1672 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1671
  %1673 = load i32, i32* %1672, align 4, !tbaa !400
  %1674 = insertelement <1024 x i32> %1669, i32 %1673, i32 170
  %1675 = extractelement <1024 x i32> %t29, i32 171
  %1676 = sext i32 %1675 to i64
  %1677 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1676
  %1678 = load i32, i32* %1677, align 4, !tbaa !400
  %1679 = insertelement <1024 x i32> %1674, i32 %1678, i32 171
  %1680 = extractelement <1024 x i32> %t29, i32 172
  %1681 = sext i32 %1680 to i64
  %1682 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1681
  %1683 = load i32, i32* %1682, align 4, !tbaa !400
  %1684 = insertelement <1024 x i32> %1679, i32 %1683, i32 172
  %1685 = extractelement <1024 x i32> %t29, i32 173
  %1686 = sext i32 %1685 to i64
  %1687 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1686
  %1688 = load i32, i32* %1687, align 4, !tbaa !400
  %1689 = insertelement <1024 x i32> %1684, i32 %1688, i32 173
  %1690 = extractelement <1024 x i32> %t29, i32 174
  %1691 = sext i32 %1690 to i64
  %1692 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1691
  %1693 = load i32, i32* %1692, align 4, !tbaa !400
  %1694 = insertelement <1024 x i32> %1689, i32 %1693, i32 174
  %1695 = extractelement <1024 x i32> %t29, i32 175
  %1696 = sext i32 %1695 to i64
  %1697 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1696
  %1698 = load i32, i32* %1697, align 4, !tbaa !400
  %1699 = insertelement <1024 x i32> %1694, i32 %1698, i32 175
  %1700 = extractelement <1024 x i32> %t29, i32 176
  %1701 = sext i32 %1700 to i64
  %1702 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1701
  %1703 = load i32, i32* %1702, align 4, !tbaa !400
  %1704 = insertelement <1024 x i32> %1699, i32 %1703, i32 176
  %1705 = extractelement <1024 x i32> %t29, i32 177
  %1706 = sext i32 %1705 to i64
  %1707 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1706
  %1708 = load i32, i32* %1707, align 4, !tbaa !400
  %1709 = insertelement <1024 x i32> %1704, i32 %1708, i32 177
  %1710 = extractelement <1024 x i32> %t29, i32 178
  %1711 = sext i32 %1710 to i64
  %1712 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1711
  %1713 = load i32, i32* %1712, align 4, !tbaa !400
  %1714 = insertelement <1024 x i32> %1709, i32 %1713, i32 178
  %1715 = extractelement <1024 x i32> %t29, i32 179
  %1716 = sext i32 %1715 to i64
  %1717 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1716
  %1718 = load i32, i32* %1717, align 4, !tbaa !400
  %1719 = insertelement <1024 x i32> %1714, i32 %1718, i32 179
  %1720 = extractelement <1024 x i32> %t29, i32 180
  %1721 = sext i32 %1720 to i64
  %1722 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1721
  %1723 = load i32, i32* %1722, align 4, !tbaa !400
  %1724 = insertelement <1024 x i32> %1719, i32 %1723, i32 180
  %1725 = extractelement <1024 x i32> %t29, i32 181
  %1726 = sext i32 %1725 to i64
  %1727 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1726
  %1728 = load i32, i32* %1727, align 4, !tbaa !400
  %1729 = insertelement <1024 x i32> %1724, i32 %1728, i32 181
  %1730 = extractelement <1024 x i32> %t29, i32 182
  %1731 = sext i32 %1730 to i64
  %1732 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1731
  %1733 = load i32, i32* %1732, align 4, !tbaa !400
  %1734 = insertelement <1024 x i32> %1729, i32 %1733, i32 182
  %1735 = extractelement <1024 x i32> %t29, i32 183
  %1736 = sext i32 %1735 to i64
  %1737 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1736
  %1738 = load i32, i32* %1737, align 4, !tbaa !400
  %1739 = insertelement <1024 x i32> %1734, i32 %1738, i32 183
  %1740 = extractelement <1024 x i32> %t29, i32 184
  %1741 = sext i32 %1740 to i64
  %1742 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1741
  %1743 = load i32, i32* %1742, align 4, !tbaa !400
  %1744 = insertelement <1024 x i32> %1739, i32 %1743, i32 184
  %1745 = extractelement <1024 x i32> %t29, i32 185
  %1746 = sext i32 %1745 to i64
  %1747 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1746
  %1748 = load i32, i32* %1747, align 4, !tbaa !400
  %1749 = insertelement <1024 x i32> %1744, i32 %1748, i32 185
  %1750 = extractelement <1024 x i32> %t29, i32 186
  %1751 = sext i32 %1750 to i64
  %1752 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1751
  %1753 = load i32, i32* %1752, align 4, !tbaa !400
  %1754 = insertelement <1024 x i32> %1749, i32 %1753, i32 186
  %1755 = extractelement <1024 x i32> %t29, i32 187
  %1756 = sext i32 %1755 to i64
  %1757 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1756
  %1758 = load i32, i32* %1757, align 4, !tbaa !400
  %1759 = insertelement <1024 x i32> %1754, i32 %1758, i32 187
  %1760 = extractelement <1024 x i32> %t29, i32 188
  %1761 = sext i32 %1760 to i64
  %1762 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1761
  %1763 = load i32, i32* %1762, align 4, !tbaa !400
  %1764 = insertelement <1024 x i32> %1759, i32 %1763, i32 188
  %1765 = extractelement <1024 x i32> %t29, i32 189
  %1766 = sext i32 %1765 to i64
  %1767 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1766
  %1768 = load i32, i32* %1767, align 4, !tbaa !400
  %1769 = insertelement <1024 x i32> %1764, i32 %1768, i32 189
  %1770 = extractelement <1024 x i32> %t29, i32 190
  %1771 = sext i32 %1770 to i64
  %1772 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1771
  %1773 = load i32, i32* %1772, align 4, !tbaa !400
  %1774 = insertelement <1024 x i32> %1769, i32 %1773, i32 190
  %1775 = extractelement <1024 x i32> %t29, i32 191
  %1776 = sext i32 %1775 to i64
  %1777 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1776
  %1778 = load i32, i32* %1777, align 4, !tbaa !400
  %1779 = insertelement <1024 x i32> %1774, i32 %1778, i32 191
  %1780 = extractelement <1024 x i32> %t29, i32 192
  %1781 = sext i32 %1780 to i64
  %1782 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1781
  %1783 = load i32, i32* %1782, align 4, !tbaa !400
  %1784 = insertelement <1024 x i32> %1779, i32 %1783, i32 192
  %1785 = extractelement <1024 x i32> %t29, i32 193
  %1786 = sext i32 %1785 to i64
  %1787 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1786
  %1788 = load i32, i32* %1787, align 4, !tbaa !400
  %1789 = insertelement <1024 x i32> %1784, i32 %1788, i32 193
  %1790 = extractelement <1024 x i32> %t29, i32 194
  %1791 = sext i32 %1790 to i64
  %1792 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1791
  %1793 = load i32, i32* %1792, align 4, !tbaa !400
  %1794 = insertelement <1024 x i32> %1789, i32 %1793, i32 194
  %1795 = extractelement <1024 x i32> %t29, i32 195
  %1796 = sext i32 %1795 to i64
  %1797 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1796
  %1798 = load i32, i32* %1797, align 4, !tbaa !400
  %1799 = insertelement <1024 x i32> %1794, i32 %1798, i32 195
  %1800 = extractelement <1024 x i32> %t29, i32 196
  %1801 = sext i32 %1800 to i64
  %1802 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1801
  %1803 = load i32, i32* %1802, align 4, !tbaa !400
  %1804 = insertelement <1024 x i32> %1799, i32 %1803, i32 196
  %1805 = extractelement <1024 x i32> %t29, i32 197
  %1806 = sext i32 %1805 to i64
  %1807 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1806
  %1808 = load i32, i32* %1807, align 4, !tbaa !400
  %1809 = insertelement <1024 x i32> %1804, i32 %1808, i32 197
  %1810 = extractelement <1024 x i32> %t29, i32 198
  %1811 = sext i32 %1810 to i64
  %1812 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1811
  %1813 = load i32, i32* %1812, align 4, !tbaa !400
  %1814 = insertelement <1024 x i32> %1809, i32 %1813, i32 198
  %1815 = extractelement <1024 x i32> %t29, i32 199
  %1816 = sext i32 %1815 to i64
  %1817 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1816
  %1818 = load i32, i32* %1817, align 4, !tbaa !400
  %1819 = insertelement <1024 x i32> %1814, i32 %1818, i32 199
  %1820 = extractelement <1024 x i32> %t29, i32 200
  %1821 = sext i32 %1820 to i64
  %1822 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1821
  %1823 = load i32, i32* %1822, align 4, !tbaa !400
  %1824 = insertelement <1024 x i32> %1819, i32 %1823, i32 200
  %1825 = extractelement <1024 x i32> %t29, i32 201
  %1826 = sext i32 %1825 to i64
  %1827 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1826
  %1828 = load i32, i32* %1827, align 4, !tbaa !400
  %1829 = insertelement <1024 x i32> %1824, i32 %1828, i32 201
  %1830 = extractelement <1024 x i32> %t29, i32 202
  %1831 = sext i32 %1830 to i64
  %1832 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1831
  %1833 = load i32, i32* %1832, align 4, !tbaa !400
  %1834 = insertelement <1024 x i32> %1829, i32 %1833, i32 202
  %1835 = extractelement <1024 x i32> %t29, i32 203
  %1836 = sext i32 %1835 to i64
  %1837 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1836
  %1838 = load i32, i32* %1837, align 4, !tbaa !400
  %1839 = insertelement <1024 x i32> %1834, i32 %1838, i32 203
  %1840 = extractelement <1024 x i32> %t29, i32 204
  %1841 = sext i32 %1840 to i64
  %1842 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1841
  %1843 = load i32, i32* %1842, align 4, !tbaa !400
  %1844 = insertelement <1024 x i32> %1839, i32 %1843, i32 204
  %1845 = extractelement <1024 x i32> %t29, i32 205
  %1846 = sext i32 %1845 to i64
  %1847 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1846
  %1848 = load i32, i32* %1847, align 4, !tbaa !400
  %1849 = insertelement <1024 x i32> %1844, i32 %1848, i32 205
  %1850 = extractelement <1024 x i32> %t29, i32 206
  %1851 = sext i32 %1850 to i64
  %1852 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1851
  %1853 = load i32, i32* %1852, align 4, !tbaa !400
  %1854 = insertelement <1024 x i32> %1849, i32 %1853, i32 206
  %1855 = extractelement <1024 x i32> %t29, i32 207
  %1856 = sext i32 %1855 to i64
  %1857 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1856
  %1858 = load i32, i32* %1857, align 4, !tbaa !400
  %1859 = insertelement <1024 x i32> %1854, i32 %1858, i32 207
  %1860 = extractelement <1024 x i32> %t29, i32 208
  %1861 = sext i32 %1860 to i64
  %1862 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1861
  %1863 = load i32, i32* %1862, align 4, !tbaa !400
  %1864 = insertelement <1024 x i32> %1859, i32 %1863, i32 208
  %1865 = extractelement <1024 x i32> %t29, i32 209
  %1866 = sext i32 %1865 to i64
  %1867 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1866
  %1868 = load i32, i32* %1867, align 4, !tbaa !400
  %1869 = insertelement <1024 x i32> %1864, i32 %1868, i32 209
  %1870 = extractelement <1024 x i32> %t29, i32 210
  %1871 = sext i32 %1870 to i64
  %1872 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1871
  %1873 = load i32, i32* %1872, align 4, !tbaa !400
  %1874 = insertelement <1024 x i32> %1869, i32 %1873, i32 210
  %1875 = extractelement <1024 x i32> %t29, i32 211
  %1876 = sext i32 %1875 to i64
  %1877 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1876
  %1878 = load i32, i32* %1877, align 4, !tbaa !400
  %1879 = insertelement <1024 x i32> %1874, i32 %1878, i32 211
  %1880 = extractelement <1024 x i32> %t29, i32 212
  %1881 = sext i32 %1880 to i64
  %1882 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1881
  %1883 = load i32, i32* %1882, align 4, !tbaa !400
  %1884 = insertelement <1024 x i32> %1879, i32 %1883, i32 212
  %1885 = extractelement <1024 x i32> %t29, i32 213
  %1886 = sext i32 %1885 to i64
  %1887 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1886
  %1888 = load i32, i32* %1887, align 4, !tbaa !400
  %1889 = insertelement <1024 x i32> %1884, i32 %1888, i32 213
  %1890 = extractelement <1024 x i32> %t29, i32 214
  %1891 = sext i32 %1890 to i64
  %1892 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1891
  %1893 = load i32, i32* %1892, align 4, !tbaa !400
  %1894 = insertelement <1024 x i32> %1889, i32 %1893, i32 214
  %1895 = extractelement <1024 x i32> %t29, i32 215
  %1896 = sext i32 %1895 to i64
  %1897 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1896
  %1898 = load i32, i32* %1897, align 4, !tbaa !400
  %1899 = insertelement <1024 x i32> %1894, i32 %1898, i32 215
  %1900 = extractelement <1024 x i32> %t29, i32 216
  %1901 = sext i32 %1900 to i64
  %1902 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1901
  %1903 = load i32, i32* %1902, align 4, !tbaa !400
  %1904 = insertelement <1024 x i32> %1899, i32 %1903, i32 216
  %1905 = extractelement <1024 x i32> %t29, i32 217
  %1906 = sext i32 %1905 to i64
  %1907 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1906
  %1908 = load i32, i32* %1907, align 4, !tbaa !400
  %1909 = insertelement <1024 x i32> %1904, i32 %1908, i32 217
  %1910 = extractelement <1024 x i32> %t29, i32 218
  %1911 = sext i32 %1910 to i64
  %1912 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1911
  %1913 = load i32, i32* %1912, align 4, !tbaa !400
  %1914 = insertelement <1024 x i32> %1909, i32 %1913, i32 218
  %1915 = extractelement <1024 x i32> %t29, i32 219
  %1916 = sext i32 %1915 to i64
  %1917 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1916
  %1918 = load i32, i32* %1917, align 4, !tbaa !400
  %1919 = insertelement <1024 x i32> %1914, i32 %1918, i32 219
  %1920 = extractelement <1024 x i32> %t29, i32 220
  %1921 = sext i32 %1920 to i64
  %1922 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1921
  %1923 = load i32, i32* %1922, align 4, !tbaa !400
  %1924 = insertelement <1024 x i32> %1919, i32 %1923, i32 220
  %1925 = extractelement <1024 x i32> %t29, i32 221
  %1926 = sext i32 %1925 to i64
  %1927 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1926
  %1928 = load i32, i32* %1927, align 4, !tbaa !400
  %1929 = insertelement <1024 x i32> %1924, i32 %1928, i32 221
  %1930 = extractelement <1024 x i32> %t29, i32 222
  %1931 = sext i32 %1930 to i64
  %1932 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1931
  %1933 = load i32, i32* %1932, align 4, !tbaa !400
  %1934 = insertelement <1024 x i32> %1929, i32 %1933, i32 222
  %1935 = extractelement <1024 x i32> %t29, i32 223
  %1936 = sext i32 %1935 to i64
  %1937 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1936
  %1938 = load i32, i32* %1937, align 4, !tbaa !400
  %1939 = insertelement <1024 x i32> %1934, i32 %1938, i32 223
  %1940 = extractelement <1024 x i32> %t29, i32 224
  %1941 = sext i32 %1940 to i64
  %1942 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1941
  %1943 = load i32, i32* %1942, align 4, !tbaa !400
  %1944 = insertelement <1024 x i32> %1939, i32 %1943, i32 224
  %1945 = extractelement <1024 x i32> %t29, i32 225
  %1946 = sext i32 %1945 to i64
  %1947 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1946
  %1948 = load i32, i32* %1947, align 4, !tbaa !400
  %1949 = insertelement <1024 x i32> %1944, i32 %1948, i32 225
  %1950 = extractelement <1024 x i32> %t29, i32 226
  %1951 = sext i32 %1950 to i64
  %1952 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1951
  %1953 = load i32, i32* %1952, align 4, !tbaa !400
  %1954 = insertelement <1024 x i32> %1949, i32 %1953, i32 226
  %1955 = extractelement <1024 x i32> %t29, i32 227
  %1956 = sext i32 %1955 to i64
  %1957 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1956
  %1958 = load i32, i32* %1957, align 4, !tbaa !400
  %1959 = insertelement <1024 x i32> %1954, i32 %1958, i32 227
  %1960 = extractelement <1024 x i32> %t29, i32 228
  %1961 = sext i32 %1960 to i64
  %1962 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1961
  %1963 = load i32, i32* %1962, align 4, !tbaa !400
  %1964 = insertelement <1024 x i32> %1959, i32 %1963, i32 228
  %1965 = extractelement <1024 x i32> %t29, i32 229
  %1966 = sext i32 %1965 to i64
  %1967 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1966
  %1968 = load i32, i32* %1967, align 4, !tbaa !400
  %1969 = insertelement <1024 x i32> %1964, i32 %1968, i32 229
  %1970 = extractelement <1024 x i32> %t29, i32 230
  %1971 = sext i32 %1970 to i64
  %1972 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1971
  %1973 = load i32, i32* %1972, align 4, !tbaa !400
  %1974 = insertelement <1024 x i32> %1969, i32 %1973, i32 230
  %1975 = extractelement <1024 x i32> %t29, i32 231
  %1976 = sext i32 %1975 to i64
  %1977 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1976
  %1978 = load i32, i32* %1977, align 4, !tbaa !400
  %1979 = insertelement <1024 x i32> %1974, i32 %1978, i32 231
  %1980 = extractelement <1024 x i32> %t29, i32 232
  %1981 = sext i32 %1980 to i64
  %1982 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1981
  %1983 = load i32, i32* %1982, align 4, !tbaa !400
  %1984 = insertelement <1024 x i32> %1979, i32 %1983, i32 232
  %1985 = extractelement <1024 x i32> %t29, i32 233
  %1986 = sext i32 %1985 to i64
  %1987 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1986
  %1988 = load i32, i32* %1987, align 4, !tbaa !400
  %1989 = insertelement <1024 x i32> %1984, i32 %1988, i32 233
  %1990 = extractelement <1024 x i32> %t29, i32 234
  %1991 = sext i32 %1990 to i64
  %1992 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1991
  %1993 = load i32, i32* %1992, align 4, !tbaa !400
  %1994 = insertelement <1024 x i32> %1989, i32 %1993, i32 234
  %1995 = extractelement <1024 x i32> %t29, i32 235
  %1996 = sext i32 %1995 to i64
  %1997 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %1996
  %1998 = load i32, i32* %1997, align 4, !tbaa !400
  %1999 = insertelement <1024 x i32> %1994, i32 %1998, i32 235
  %2000 = extractelement <1024 x i32> %t29, i32 236
  %2001 = sext i32 %2000 to i64
  %2002 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2001
  %2003 = load i32, i32* %2002, align 4, !tbaa !400
  %2004 = insertelement <1024 x i32> %1999, i32 %2003, i32 236
  %2005 = extractelement <1024 x i32> %t29, i32 237
  %2006 = sext i32 %2005 to i64
  %2007 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2006
  %2008 = load i32, i32* %2007, align 4, !tbaa !400
  %2009 = insertelement <1024 x i32> %2004, i32 %2008, i32 237
  %2010 = extractelement <1024 x i32> %t29, i32 238
  %2011 = sext i32 %2010 to i64
  %2012 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2011
  %2013 = load i32, i32* %2012, align 4, !tbaa !400
  %2014 = insertelement <1024 x i32> %2009, i32 %2013, i32 238
  %2015 = extractelement <1024 x i32> %t29, i32 239
  %2016 = sext i32 %2015 to i64
  %2017 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2016
  %2018 = load i32, i32* %2017, align 4, !tbaa !400
  %2019 = insertelement <1024 x i32> %2014, i32 %2018, i32 239
  %2020 = extractelement <1024 x i32> %t29, i32 240
  %2021 = sext i32 %2020 to i64
  %2022 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2021
  %2023 = load i32, i32* %2022, align 4, !tbaa !400
  %2024 = insertelement <1024 x i32> %2019, i32 %2023, i32 240
  %2025 = extractelement <1024 x i32> %t29, i32 241
  %2026 = sext i32 %2025 to i64
  %2027 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2026
  %2028 = load i32, i32* %2027, align 4, !tbaa !400
  %2029 = insertelement <1024 x i32> %2024, i32 %2028, i32 241
  %2030 = extractelement <1024 x i32> %t29, i32 242
  %2031 = sext i32 %2030 to i64
  %2032 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2031
  %2033 = load i32, i32* %2032, align 4, !tbaa !400
  %2034 = insertelement <1024 x i32> %2029, i32 %2033, i32 242
  %2035 = extractelement <1024 x i32> %t29, i32 243
  %2036 = sext i32 %2035 to i64
  %2037 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2036
  %2038 = load i32, i32* %2037, align 4, !tbaa !400
  %2039 = insertelement <1024 x i32> %2034, i32 %2038, i32 243
  %2040 = extractelement <1024 x i32> %t29, i32 244
  %2041 = sext i32 %2040 to i64
  %2042 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2041
  %2043 = load i32, i32* %2042, align 4, !tbaa !400
  %2044 = insertelement <1024 x i32> %2039, i32 %2043, i32 244
  %2045 = extractelement <1024 x i32> %t29, i32 245
  %2046 = sext i32 %2045 to i64
  %2047 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2046
  %2048 = load i32, i32* %2047, align 4, !tbaa !400
  %2049 = insertelement <1024 x i32> %2044, i32 %2048, i32 245
  %2050 = extractelement <1024 x i32> %t29, i32 246
  %2051 = sext i32 %2050 to i64
  %2052 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2051
  %2053 = load i32, i32* %2052, align 4, !tbaa !400
  %2054 = insertelement <1024 x i32> %2049, i32 %2053, i32 246
  %2055 = extractelement <1024 x i32> %t29, i32 247
  %2056 = sext i32 %2055 to i64
  %2057 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2056
  %2058 = load i32, i32* %2057, align 4, !tbaa !400
  %2059 = insertelement <1024 x i32> %2054, i32 %2058, i32 247
  %2060 = extractelement <1024 x i32> %t29, i32 248
  %2061 = sext i32 %2060 to i64
  %2062 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2061
  %2063 = load i32, i32* %2062, align 4, !tbaa !400
  %2064 = insertelement <1024 x i32> %2059, i32 %2063, i32 248
  %2065 = extractelement <1024 x i32> %t29, i32 249
  %2066 = sext i32 %2065 to i64
  %2067 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2066
  %2068 = load i32, i32* %2067, align 4, !tbaa !400
  %2069 = insertelement <1024 x i32> %2064, i32 %2068, i32 249
  %2070 = extractelement <1024 x i32> %t29, i32 250
  %2071 = sext i32 %2070 to i64
  %2072 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2071
  %2073 = load i32, i32* %2072, align 4, !tbaa !400
  %2074 = insertelement <1024 x i32> %2069, i32 %2073, i32 250
  %2075 = extractelement <1024 x i32> %t29, i32 251
  %2076 = sext i32 %2075 to i64
  %2077 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2076
  %2078 = load i32, i32* %2077, align 4, !tbaa !400
  %2079 = insertelement <1024 x i32> %2074, i32 %2078, i32 251
  %2080 = extractelement <1024 x i32> %t29, i32 252
  %2081 = sext i32 %2080 to i64
  %2082 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2081
  %2083 = load i32, i32* %2082, align 4, !tbaa !400
  %2084 = insertelement <1024 x i32> %2079, i32 %2083, i32 252
  %2085 = extractelement <1024 x i32> %t29, i32 253
  %2086 = sext i32 %2085 to i64
  %2087 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2086
  %2088 = load i32, i32* %2087, align 4, !tbaa !400
  %2089 = insertelement <1024 x i32> %2084, i32 %2088, i32 253
  %2090 = extractelement <1024 x i32> %t29, i32 254
  %2091 = sext i32 %2090 to i64
  %2092 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2091
  %2093 = load i32, i32* %2092, align 4, !tbaa !400
  %2094 = insertelement <1024 x i32> %2089, i32 %2093, i32 254
  %2095 = extractelement <1024 x i32> %t29, i32 255
  %2096 = sext i32 %2095 to i64
  %2097 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2096
  %2098 = load i32, i32* %2097, align 4, !tbaa !400
  %2099 = insertelement <1024 x i32> %2094, i32 %2098, i32 255
  %2100 = extractelement <1024 x i32> %t29, i32 256
  %2101 = sext i32 %2100 to i64
  %2102 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2101
  %2103 = load i32, i32* %2102, align 4, !tbaa !400
  %2104 = insertelement <1024 x i32> %2099, i32 %2103, i32 256
  %2105 = extractelement <1024 x i32> %t29, i32 257
  %2106 = sext i32 %2105 to i64
  %2107 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2106
  %2108 = load i32, i32* %2107, align 4, !tbaa !400
  %2109 = insertelement <1024 x i32> %2104, i32 %2108, i32 257
  %2110 = extractelement <1024 x i32> %t29, i32 258
  %2111 = sext i32 %2110 to i64
  %2112 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2111
  %2113 = load i32, i32* %2112, align 4, !tbaa !400
  %2114 = insertelement <1024 x i32> %2109, i32 %2113, i32 258
  %2115 = extractelement <1024 x i32> %t29, i32 259
  %2116 = sext i32 %2115 to i64
  %2117 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2116
  %2118 = load i32, i32* %2117, align 4, !tbaa !400
  %2119 = insertelement <1024 x i32> %2114, i32 %2118, i32 259
  %2120 = extractelement <1024 x i32> %t29, i32 260
  %2121 = sext i32 %2120 to i64
  %2122 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2121
  %2123 = load i32, i32* %2122, align 4, !tbaa !400
  %2124 = insertelement <1024 x i32> %2119, i32 %2123, i32 260
  %2125 = extractelement <1024 x i32> %t29, i32 261
  %2126 = sext i32 %2125 to i64
  %2127 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2126
  %2128 = load i32, i32* %2127, align 4, !tbaa !400
  %2129 = insertelement <1024 x i32> %2124, i32 %2128, i32 261
  %2130 = extractelement <1024 x i32> %t29, i32 262
  %2131 = sext i32 %2130 to i64
  %2132 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2131
  %2133 = load i32, i32* %2132, align 4, !tbaa !400
  %2134 = insertelement <1024 x i32> %2129, i32 %2133, i32 262
  %2135 = extractelement <1024 x i32> %t29, i32 263
  %2136 = sext i32 %2135 to i64
  %2137 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2136
  %2138 = load i32, i32* %2137, align 4, !tbaa !400
  %2139 = insertelement <1024 x i32> %2134, i32 %2138, i32 263
  %2140 = extractelement <1024 x i32> %t29, i32 264
  %2141 = sext i32 %2140 to i64
  %2142 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2141
  %2143 = load i32, i32* %2142, align 4, !tbaa !400
  %2144 = insertelement <1024 x i32> %2139, i32 %2143, i32 264
  %2145 = extractelement <1024 x i32> %t29, i32 265
  %2146 = sext i32 %2145 to i64
  %2147 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2146
  %2148 = load i32, i32* %2147, align 4, !tbaa !400
  %2149 = insertelement <1024 x i32> %2144, i32 %2148, i32 265
  %2150 = extractelement <1024 x i32> %t29, i32 266
  %2151 = sext i32 %2150 to i64
  %2152 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2151
  %2153 = load i32, i32* %2152, align 4, !tbaa !400
  %2154 = insertelement <1024 x i32> %2149, i32 %2153, i32 266
  %2155 = extractelement <1024 x i32> %t29, i32 267
  %2156 = sext i32 %2155 to i64
  %2157 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2156
  %2158 = load i32, i32* %2157, align 4, !tbaa !400
  %2159 = insertelement <1024 x i32> %2154, i32 %2158, i32 267
  %2160 = extractelement <1024 x i32> %t29, i32 268
  %2161 = sext i32 %2160 to i64
  %2162 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2161
  %2163 = load i32, i32* %2162, align 4, !tbaa !400
  %2164 = insertelement <1024 x i32> %2159, i32 %2163, i32 268
  %2165 = extractelement <1024 x i32> %t29, i32 269
  %2166 = sext i32 %2165 to i64
  %2167 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2166
  %2168 = load i32, i32* %2167, align 4, !tbaa !400
  %2169 = insertelement <1024 x i32> %2164, i32 %2168, i32 269
  %2170 = extractelement <1024 x i32> %t29, i32 270
  %2171 = sext i32 %2170 to i64
  %2172 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2171
  %2173 = load i32, i32* %2172, align 4, !tbaa !400
  %2174 = insertelement <1024 x i32> %2169, i32 %2173, i32 270
  %2175 = extractelement <1024 x i32> %t29, i32 271
  %2176 = sext i32 %2175 to i64
  %2177 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2176
  %2178 = load i32, i32* %2177, align 4, !tbaa !400
  %2179 = insertelement <1024 x i32> %2174, i32 %2178, i32 271
  %2180 = extractelement <1024 x i32> %t29, i32 272
  %2181 = sext i32 %2180 to i64
  %2182 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2181
  %2183 = load i32, i32* %2182, align 4, !tbaa !400
  %2184 = insertelement <1024 x i32> %2179, i32 %2183, i32 272
  %2185 = extractelement <1024 x i32> %t29, i32 273
  %2186 = sext i32 %2185 to i64
  %2187 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2186
  %2188 = load i32, i32* %2187, align 4, !tbaa !400
  %2189 = insertelement <1024 x i32> %2184, i32 %2188, i32 273
  %2190 = extractelement <1024 x i32> %t29, i32 274
  %2191 = sext i32 %2190 to i64
  %2192 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2191
  %2193 = load i32, i32* %2192, align 4, !tbaa !400
  %2194 = insertelement <1024 x i32> %2189, i32 %2193, i32 274
  %2195 = extractelement <1024 x i32> %t29, i32 275
  %2196 = sext i32 %2195 to i64
  %2197 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2196
  %2198 = load i32, i32* %2197, align 4, !tbaa !400
  %2199 = insertelement <1024 x i32> %2194, i32 %2198, i32 275
  %2200 = extractelement <1024 x i32> %t29, i32 276
  %2201 = sext i32 %2200 to i64
  %2202 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2201
  %2203 = load i32, i32* %2202, align 4, !tbaa !400
  %2204 = insertelement <1024 x i32> %2199, i32 %2203, i32 276
  %2205 = extractelement <1024 x i32> %t29, i32 277
  %2206 = sext i32 %2205 to i64
  %2207 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2206
  %2208 = load i32, i32* %2207, align 4, !tbaa !400
  %2209 = insertelement <1024 x i32> %2204, i32 %2208, i32 277
  %2210 = extractelement <1024 x i32> %t29, i32 278
  %2211 = sext i32 %2210 to i64
  %2212 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2211
  %2213 = load i32, i32* %2212, align 4, !tbaa !400
  %2214 = insertelement <1024 x i32> %2209, i32 %2213, i32 278
  %2215 = extractelement <1024 x i32> %t29, i32 279
  %2216 = sext i32 %2215 to i64
  %2217 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2216
  %2218 = load i32, i32* %2217, align 4, !tbaa !400
  %2219 = insertelement <1024 x i32> %2214, i32 %2218, i32 279
  %2220 = extractelement <1024 x i32> %t29, i32 280
  %2221 = sext i32 %2220 to i64
  %2222 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2221
  %2223 = load i32, i32* %2222, align 4, !tbaa !400
  %2224 = insertelement <1024 x i32> %2219, i32 %2223, i32 280
  %2225 = extractelement <1024 x i32> %t29, i32 281
  %2226 = sext i32 %2225 to i64
  %2227 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2226
  %2228 = load i32, i32* %2227, align 4, !tbaa !400
  %2229 = insertelement <1024 x i32> %2224, i32 %2228, i32 281
  %2230 = extractelement <1024 x i32> %t29, i32 282
  %2231 = sext i32 %2230 to i64
  %2232 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2231
  %2233 = load i32, i32* %2232, align 4, !tbaa !400
  %2234 = insertelement <1024 x i32> %2229, i32 %2233, i32 282
  %2235 = extractelement <1024 x i32> %t29, i32 283
  %2236 = sext i32 %2235 to i64
  %2237 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2236
  %2238 = load i32, i32* %2237, align 4, !tbaa !400
  %2239 = insertelement <1024 x i32> %2234, i32 %2238, i32 283
  %2240 = extractelement <1024 x i32> %t29, i32 284
  %2241 = sext i32 %2240 to i64
  %2242 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2241
  %2243 = load i32, i32* %2242, align 4, !tbaa !400
  %2244 = insertelement <1024 x i32> %2239, i32 %2243, i32 284
  %2245 = extractelement <1024 x i32> %t29, i32 285
  %2246 = sext i32 %2245 to i64
  %2247 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2246
  %2248 = load i32, i32* %2247, align 4, !tbaa !400
  %2249 = insertelement <1024 x i32> %2244, i32 %2248, i32 285
  %2250 = extractelement <1024 x i32> %t29, i32 286
  %2251 = sext i32 %2250 to i64
  %2252 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2251
  %2253 = load i32, i32* %2252, align 4, !tbaa !400
  %2254 = insertelement <1024 x i32> %2249, i32 %2253, i32 286
  %2255 = extractelement <1024 x i32> %t29, i32 287
  %2256 = sext i32 %2255 to i64
  %2257 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2256
  %2258 = load i32, i32* %2257, align 4, !tbaa !400
  %2259 = insertelement <1024 x i32> %2254, i32 %2258, i32 287
  %2260 = extractelement <1024 x i32> %t29, i32 288
  %2261 = sext i32 %2260 to i64
  %2262 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2261
  %2263 = load i32, i32* %2262, align 4, !tbaa !400
  %2264 = insertelement <1024 x i32> %2259, i32 %2263, i32 288
  %2265 = extractelement <1024 x i32> %t29, i32 289
  %2266 = sext i32 %2265 to i64
  %2267 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2266
  %2268 = load i32, i32* %2267, align 4, !tbaa !400
  %2269 = insertelement <1024 x i32> %2264, i32 %2268, i32 289
  %2270 = extractelement <1024 x i32> %t29, i32 290
  %2271 = sext i32 %2270 to i64
  %2272 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2271
  %2273 = load i32, i32* %2272, align 4, !tbaa !400
  %2274 = insertelement <1024 x i32> %2269, i32 %2273, i32 290
  %2275 = extractelement <1024 x i32> %t29, i32 291
  %2276 = sext i32 %2275 to i64
  %2277 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2276
  %2278 = load i32, i32* %2277, align 4, !tbaa !400
  %2279 = insertelement <1024 x i32> %2274, i32 %2278, i32 291
  %2280 = extractelement <1024 x i32> %t29, i32 292
  %2281 = sext i32 %2280 to i64
  %2282 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2281
  %2283 = load i32, i32* %2282, align 4, !tbaa !400
  %2284 = insertelement <1024 x i32> %2279, i32 %2283, i32 292
  %2285 = extractelement <1024 x i32> %t29, i32 293
  %2286 = sext i32 %2285 to i64
  %2287 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2286
  %2288 = load i32, i32* %2287, align 4, !tbaa !400
  %2289 = insertelement <1024 x i32> %2284, i32 %2288, i32 293
  %2290 = extractelement <1024 x i32> %t29, i32 294
  %2291 = sext i32 %2290 to i64
  %2292 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2291
  %2293 = load i32, i32* %2292, align 4, !tbaa !400
  %2294 = insertelement <1024 x i32> %2289, i32 %2293, i32 294
  %2295 = extractelement <1024 x i32> %t29, i32 295
  %2296 = sext i32 %2295 to i64
  %2297 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2296
  %2298 = load i32, i32* %2297, align 4, !tbaa !400
  %2299 = insertelement <1024 x i32> %2294, i32 %2298, i32 295
  %2300 = extractelement <1024 x i32> %t29, i32 296
  %2301 = sext i32 %2300 to i64
  %2302 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2301
  %2303 = load i32, i32* %2302, align 4, !tbaa !400
  %2304 = insertelement <1024 x i32> %2299, i32 %2303, i32 296
  %2305 = extractelement <1024 x i32> %t29, i32 297
  %2306 = sext i32 %2305 to i64
  %2307 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2306
  %2308 = load i32, i32* %2307, align 4, !tbaa !400
  %2309 = insertelement <1024 x i32> %2304, i32 %2308, i32 297
  %2310 = extractelement <1024 x i32> %t29, i32 298
  %2311 = sext i32 %2310 to i64
  %2312 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2311
  %2313 = load i32, i32* %2312, align 4, !tbaa !400
  %2314 = insertelement <1024 x i32> %2309, i32 %2313, i32 298
  %2315 = extractelement <1024 x i32> %t29, i32 299
  %2316 = sext i32 %2315 to i64
  %2317 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2316
  %2318 = load i32, i32* %2317, align 4, !tbaa !400
  %2319 = insertelement <1024 x i32> %2314, i32 %2318, i32 299
  %2320 = extractelement <1024 x i32> %t29, i32 300
  %2321 = sext i32 %2320 to i64
  %2322 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2321
  %2323 = load i32, i32* %2322, align 4, !tbaa !400
  %2324 = insertelement <1024 x i32> %2319, i32 %2323, i32 300
  %2325 = extractelement <1024 x i32> %t29, i32 301
  %2326 = sext i32 %2325 to i64
  %2327 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2326
  %2328 = load i32, i32* %2327, align 4, !tbaa !400
  %2329 = insertelement <1024 x i32> %2324, i32 %2328, i32 301
  %2330 = extractelement <1024 x i32> %t29, i32 302
  %2331 = sext i32 %2330 to i64
  %2332 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2331
  %2333 = load i32, i32* %2332, align 4, !tbaa !400
  %2334 = insertelement <1024 x i32> %2329, i32 %2333, i32 302
  %2335 = extractelement <1024 x i32> %t29, i32 303
  %2336 = sext i32 %2335 to i64
  %2337 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2336
  %2338 = load i32, i32* %2337, align 4, !tbaa !400
  %2339 = insertelement <1024 x i32> %2334, i32 %2338, i32 303
  %2340 = extractelement <1024 x i32> %t29, i32 304
  %2341 = sext i32 %2340 to i64
  %2342 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2341
  %2343 = load i32, i32* %2342, align 4, !tbaa !400
  %2344 = insertelement <1024 x i32> %2339, i32 %2343, i32 304
  %2345 = extractelement <1024 x i32> %t29, i32 305
  %2346 = sext i32 %2345 to i64
  %2347 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2346
  %2348 = load i32, i32* %2347, align 4, !tbaa !400
  %2349 = insertelement <1024 x i32> %2344, i32 %2348, i32 305
  %2350 = extractelement <1024 x i32> %t29, i32 306
  %2351 = sext i32 %2350 to i64
  %2352 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2351
  %2353 = load i32, i32* %2352, align 4, !tbaa !400
  %2354 = insertelement <1024 x i32> %2349, i32 %2353, i32 306
  %2355 = extractelement <1024 x i32> %t29, i32 307
  %2356 = sext i32 %2355 to i64
  %2357 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2356
  %2358 = load i32, i32* %2357, align 4, !tbaa !400
  %2359 = insertelement <1024 x i32> %2354, i32 %2358, i32 307
  %2360 = extractelement <1024 x i32> %t29, i32 308
  %2361 = sext i32 %2360 to i64
  %2362 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2361
  %2363 = load i32, i32* %2362, align 4, !tbaa !400
  %2364 = insertelement <1024 x i32> %2359, i32 %2363, i32 308
  %2365 = extractelement <1024 x i32> %t29, i32 309
  %2366 = sext i32 %2365 to i64
  %2367 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2366
  %2368 = load i32, i32* %2367, align 4, !tbaa !400
  %2369 = insertelement <1024 x i32> %2364, i32 %2368, i32 309
  %2370 = extractelement <1024 x i32> %t29, i32 310
  %2371 = sext i32 %2370 to i64
  %2372 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2371
  %2373 = load i32, i32* %2372, align 4, !tbaa !400
  %2374 = insertelement <1024 x i32> %2369, i32 %2373, i32 310
  %2375 = extractelement <1024 x i32> %t29, i32 311
  %2376 = sext i32 %2375 to i64
  %2377 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2376
  %2378 = load i32, i32* %2377, align 4, !tbaa !400
  %2379 = insertelement <1024 x i32> %2374, i32 %2378, i32 311
  %2380 = extractelement <1024 x i32> %t29, i32 312
  %2381 = sext i32 %2380 to i64
  %2382 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2381
  %2383 = load i32, i32* %2382, align 4, !tbaa !400
  %2384 = insertelement <1024 x i32> %2379, i32 %2383, i32 312
  %2385 = extractelement <1024 x i32> %t29, i32 313
  %2386 = sext i32 %2385 to i64
  %2387 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2386
  %2388 = load i32, i32* %2387, align 4, !tbaa !400
  %2389 = insertelement <1024 x i32> %2384, i32 %2388, i32 313
  %2390 = extractelement <1024 x i32> %t29, i32 314
  %2391 = sext i32 %2390 to i64
  %2392 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2391
  %2393 = load i32, i32* %2392, align 4, !tbaa !400
  %2394 = insertelement <1024 x i32> %2389, i32 %2393, i32 314
  %2395 = extractelement <1024 x i32> %t29, i32 315
  %2396 = sext i32 %2395 to i64
  %2397 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2396
  %2398 = load i32, i32* %2397, align 4, !tbaa !400
  %2399 = insertelement <1024 x i32> %2394, i32 %2398, i32 315
  %2400 = extractelement <1024 x i32> %t29, i32 316
  %2401 = sext i32 %2400 to i64
  %2402 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2401
  %2403 = load i32, i32* %2402, align 4, !tbaa !400
  %2404 = insertelement <1024 x i32> %2399, i32 %2403, i32 316
  %2405 = extractelement <1024 x i32> %t29, i32 317
  %2406 = sext i32 %2405 to i64
  %2407 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2406
  %2408 = load i32, i32* %2407, align 4, !tbaa !400
  %2409 = insertelement <1024 x i32> %2404, i32 %2408, i32 317
  %2410 = extractelement <1024 x i32> %t29, i32 318
  %2411 = sext i32 %2410 to i64
  %2412 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2411
  %2413 = load i32, i32* %2412, align 4, !tbaa !400
  %2414 = insertelement <1024 x i32> %2409, i32 %2413, i32 318
  %2415 = extractelement <1024 x i32> %t29, i32 319
  %2416 = sext i32 %2415 to i64
  %2417 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2416
  %2418 = load i32, i32* %2417, align 4, !tbaa !400
  %2419 = insertelement <1024 x i32> %2414, i32 %2418, i32 319
  %2420 = extractelement <1024 x i32> %t29, i32 320
  %2421 = sext i32 %2420 to i64
  %2422 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2421
  %2423 = load i32, i32* %2422, align 4, !tbaa !400
  %2424 = insertelement <1024 x i32> %2419, i32 %2423, i32 320
  %2425 = extractelement <1024 x i32> %t29, i32 321
  %2426 = sext i32 %2425 to i64
  %2427 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2426
  %2428 = load i32, i32* %2427, align 4, !tbaa !400
  %2429 = insertelement <1024 x i32> %2424, i32 %2428, i32 321
  %2430 = extractelement <1024 x i32> %t29, i32 322
  %2431 = sext i32 %2430 to i64
  %2432 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2431
  %2433 = load i32, i32* %2432, align 4, !tbaa !400
  %2434 = insertelement <1024 x i32> %2429, i32 %2433, i32 322
  %2435 = extractelement <1024 x i32> %t29, i32 323
  %2436 = sext i32 %2435 to i64
  %2437 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2436
  %2438 = load i32, i32* %2437, align 4, !tbaa !400
  %2439 = insertelement <1024 x i32> %2434, i32 %2438, i32 323
  %2440 = extractelement <1024 x i32> %t29, i32 324
  %2441 = sext i32 %2440 to i64
  %2442 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2441
  %2443 = load i32, i32* %2442, align 4, !tbaa !400
  %2444 = insertelement <1024 x i32> %2439, i32 %2443, i32 324
  %2445 = extractelement <1024 x i32> %t29, i32 325
  %2446 = sext i32 %2445 to i64
  %2447 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2446
  %2448 = load i32, i32* %2447, align 4, !tbaa !400
  %2449 = insertelement <1024 x i32> %2444, i32 %2448, i32 325
  %2450 = extractelement <1024 x i32> %t29, i32 326
  %2451 = sext i32 %2450 to i64
  %2452 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2451
  %2453 = load i32, i32* %2452, align 4, !tbaa !400
  %2454 = insertelement <1024 x i32> %2449, i32 %2453, i32 326
  %2455 = extractelement <1024 x i32> %t29, i32 327
  %2456 = sext i32 %2455 to i64
  %2457 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2456
  %2458 = load i32, i32* %2457, align 4, !tbaa !400
  %2459 = insertelement <1024 x i32> %2454, i32 %2458, i32 327
  %2460 = extractelement <1024 x i32> %t29, i32 328
  %2461 = sext i32 %2460 to i64
  %2462 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2461
  %2463 = load i32, i32* %2462, align 4, !tbaa !400
  %2464 = insertelement <1024 x i32> %2459, i32 %2463, i32 328
  %2465 = extractelement <1024 x i32> %t29, i32 329
  %2466 = sext i32 %2465 to i64
  %2467 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2466
  %2468 = load i32, i32* %2467, align 4, !tbaa !400
  %2469 = insertelement <1024 x i32> %2464, i32 %2468, i32 329
  %2470 = extractelement <1024 x i32> %t29, i32 330
  %2471 = sext i32 %2470 to i64
  %2472 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2471
  %2473 = load i32, i32* %2472, align 4, !tbaa !400
  %2474 = insertelement <1024 x i32> %2469, i32 %2473, i32 330
  %2475 = extractelement <1024 x i32> %t29, i32 331
  %2476 = sext i32 %2475 to i64
  %2477 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2476
  %2478 = load i32, i32* %2477, align 4, !tbaa !400
  %2479 = insertelement <1024 x i32> %2474, i32 %2478, i32 331
  %2480 = extractelement <1024 x i32> %t29, i32 332
  %2481 = sext i32 %2480 to i64
  %2482 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2481
  %2483 = load i32, i32* %2482, align 4, !tbaa !400
  %2484 = insertelement <1024 x i32> %2479, i32 %2483, i32 332
  %2485 = extractelement <1024 x i32> %t29, i32 333
  %2486 = sext i32 %2485 to i64
  %2487 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2486
  %2488 = load i32, i32* %2487, align 4, !tbaa !400
  %2489 = insertelement <1024 x i32> %2484, i32 %2488, i32 333
  %2490 = extractelement <1024 x i32> %t29, i32 334
  %2491 = sext i32 %2490 to i64
  %2492 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2491
  %2493 = load i32, i32* %2492, align 4, !tbaa !400
  %2494 = insertelement <1024 x i32> %2489, i32 %2493, i32 334
  %2495 = extractelement <1024 x i32> %t29, i32 335
  %2496 = sext i32 %2495 to i64
  %2497 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2496
  %2498 = load i32, i32* %2497, align 4, !tbaa !400
  %2499 = insertelement <1024 x i32> %2494, i32 %2498, i32 335
  %2500 = extractelement <1024 x i32> %t29, i32 336
  %2501 = sext i32 %2500 to i64
  %2502 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2501
  %2503 = load i32, i32* %2502, align 4, !tbaa !400
  %2504 = insertelement <1024 x i32> %2499, i32 %2503, i32 336
  %2505 = extractelement <1024 x i32> %t29, i32 337
  %2506 = sext i32 %2505 to i64
  %2507 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2506
  %2508 = load i32, i32* %2507, align 4, !tbaa !400
  %2509 = insertelement <1024 x i32> %2504, i32 %2508, i32 337
  %2510 = extractelement <1024 x i32> %t29, i32 338
  %2511 = sext i32 %2510 to i64
  %2512 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2511
  %2513 = load i32, i32* %2512, align 4, !tbaa !400
  %2514 = insertelement <1024 x i32> %2509, i32 %2513, i32 338
  %2515 = extractelement <1024 x i32> %t29, i32 339
  %2516 = sext i32 %2515 to i64
  %2517 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2516
  %2518 = load i32, i32* %2517, align 4, !tbaa !400
  %2519 = insertelement <1024 x i32> %2514, i32 %2518, i32 339
  %2520 = extractelement <1024 x i32> %t29, i32 340
  %2521 = sext i32 %2520 to i64
  %2522 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2521
  %2523 = load i32, i32* %2522, align 4, !tbaa !400
  %2524 = insertelement <1024 x i32> %2519, i32 %2523, i32 340
  %2525 = extractelement <1024 x i32> %t29, i32 341
  %2526 = sext i32 %2525 to i64
  %2527 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2526
  %2528 = load i32, i32* %2527, align 4, !tbaa !400
  %2529 = insertelement <1024 x i32> %2524, i32 %2528, i32 341
  %2530 = extractelement <1024 x i32> %t29, i32 342
  %2531 = sext i32 %2530 to i64
  %2532 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2531
  %2533 = load i32, i32* %2532, align 4, !tbaa !400
  %2534 = insertelement <1024 x i32> %2529, i32 %2533, i32 342
  %2535 = extractelement <1024 x i32> %t29, i32 343
  %2536 = sext i32 %2535 to i64
  %2537 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2536
  %2538 = load i32, i32* %2537, align 4, !tbaa !400
  %2539 = insertelement <1024 x i32> %2534, i32 %2538, i32 343
  %2540 = extractelement <1024 x i32> %t29, i32 344
  %2541 = sext i32 %2540 to i64
  %2542 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2541
  %2543 = load i32, i32* %2542, align 4, !tbaa !400
  %2544 = insertelement <1024 x i32> %2539, i32 %2543, i32 344
  %2545 = extractelement <1024 x i32> %t29, i32 345
  %2546 = sext i32 %2545 to i64
  %2547 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2546
  %2548 = load i32, i32* %2547, align 4, !tbaa !400
  %2549 = insertelement <1024 x i32> %2544, i32 %2548, i32 345
  %2550 = extractelement <1024 x i32> %t29, i32 346
  %2551 = sext i32 %2550 to i64
  %2552 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2551
  %2553 = load i32, i32* %2552, align 4, !tbaa !400
  %2554 = insertelement <1024 x i32> %2549, i32 %2553, i32 346
  %2555 = extractelement <1024 x i32> %t29, i32 347
  %2556 = sext i32 %2555 to i64
  %2557 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2556
  %2558 = load i32, i32* %2557, align 4, !tbaa !400
  %2559 = insertelement <1024 x i32> %2554, i32 %2558, i32 347
  %2560 = extractelement <1024 x i32> %t29, i32 348
  %2561 = sext i32 %2560 to i64
  %2562 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2561
  %2563 = load i32, i32* %2562, align 4, !tbaa !400
  %2564 = insertelement <1024 x i32> %2559, i32 %2563, i32 348
  %2565 = extractelement <1024 x i32> %t29, i32 349
  %2566 = sext i32 %2565 to i64
  %2567 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2566
  %2568 = load i32, i32* %2567, align 4, !tbaa !400
  %2569 = insertelement <1024 x i32> %2564, i32 %2568, i32 349
  %2570 = extractelement <1024 x i32> %t29, i32 350
  %2571 = sext i32 %2570 to i64
  %2572 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2571
  %2573 = load i32, i32* %2572, align 4, !tbaa !400
  %2574 = insertelement <1024 x i32> %2569, i32 %2573, i32 350
  %2575 = extractelement <1024 x i32> %t29, i32 351
  %2576 = sext i32 %2575 to i64
  %2577 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2576
  %2578 = load i32, i32* %2577, align 4, !tbaa !400
  %2579 = insertelement <1024 x i32> %2574, i32 %2578, i32 351
  %2580 = extractelement <1024 x i32> %t29, i32 352
  %2581 = sext i32 %2580 to i64
  %2582 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2581
  %2583 = load i32, i32* %2582, align 4, !tbaa !400
  %2584 = insertelement <1024 x i32> %2579, i32 %2583, i32 352
  %2585 = extractelement <1024 x i32> %t29, i32 353
  %2586 = sext i32 %2585 to i64
  %2587 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2586
  %2588 = load i32, i32* %2587, align 4, !tbaa !400
  %2589 = insertelement <1024 x i32> %2584, i32 %2588, i32 353
  %2590 = extractelement <1024 x i32> %t29, i32 354
  %2591 = sext i32 %2590 to i64
  %2592 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2591
  %2593 = load i32, i32* %2592, align 4, !tbaa !400
  %2594 = insertelement <1024 x i32> %2589, i32 %2593, i32 354
  %2595 = extractelement <1024 x i32> %t29, i32 355
  %2596 = sext i32 %2595 to i64
  %2597 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2596
  %2598 = load i32, i32* %2597, align 4, !tbaa !400
  %2599 = insertelement <1024 x i32> %2594, i32 %2598, i32 355
  %2600 = extractelement <1024 x i32> %t29, i32 356
  %2601 = sext i32 %2600 to i64
  %2602 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2601
  %2603 = load i32, i32* %2602, align 4, !tbaa !400
  %2604 = insertelement <1024 x i32> %2599, i32 %2603, i32 356
  %2605 = extractelement <1024 x i32> %t29, i32 357
  %2606 = sext i32 %2605 to i64
  %2607 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2606
  %2608 = load i32, i32* %2607, align 4, !tbaa !400
  %2609 = insertelement <1024 x i32> %2604, i32 %2608, i32 357
  %2610 = extractelement <1024 x i32> %t29, i32 358
  %2611 = sext i32 %2610 to i64
  %2612 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2611
  %2613 = load i32, i32* %2612, align 4, !tbaa !400
  %2614 = insertelement <1024 x i32> %2609, i32 %2613, i32 358
  %2615 = extractelement <1024 x i32> %t29, i32 359
  %2616 = sext i32 %2615 to i64
  %2617 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2616
  %2618 = load i32, i32* %2617, align 4, !tbaa !400
  %2619 = insertelement <1024 x i32> %2614, i32 %2618, i32 359
  %2620 = extractelement <1024 x i32> %t29, i32 360
  %2621 = sext i32 %2620 to i64
  %2622 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2621
  %2623 = load i32, i32* %2622, align 4, !tbaa !400
  %2624 = insertelement <1024 x i32> %2619, i32 %2623, i32 360
  %2625 = extractelement <1024 x i32> %t29, i32 361
  %2626 = sext i32 %2625 to i64
  %2627 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2626
  %2628 = load i32, i32* %2627, align 4, !tbaa !400
  %2629 = insertelement <1024 x i32> %2624, i32 %2628, i32 361
  %2630 = extractelement <1024 x i32> %t29, i32 362
  %2631 = sext i32 %2630 to i64
  %2632 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2631
  %2633 = load i32, i32* %2632, align 4, !tbaa !400
  %2634 = insertelement <1024 x i32> %2629, i32 %2633, i32 362
  %2635 = extractelement <1024 x i32> %t29, i32 363
  %2636 = sext i32 %2635 to i64
  %2637 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2636
  %2638 = load i32, i32* %2637, align 4, !tbaa !400
  %2639 = insertelement <1024 x i32> %2634, i32 %2638, i32 363
  %2640 = extractelement <1024 x i32> %t29, i32 364
  %2641 = sext i32 %2640 to i64
  %2642 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2641
  %2643 = load i32, i32* %2642, align 4, !tbaa !400
  %2644 = insertelement <1024 x i32> %2639, i32 %2643, i32 364
  %2645 = extractelement <1024 x i32> %t29, i32 365
  %2646 = sext i32 %2645 to i64
  %2647 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2646
  %2648 = load i32, i32* %2647, align 4, !tbaa !400
  %2649 = insertelement <1024 x i32> %2644, i32 %2648, i32 365
  %2650 = extractelement <1024 x i32> %t29, i32 366
  %2651 = sext i32 %2650 to i64
  %2652 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2651
  %2653 = load i32, i32* %2652, align 4, !tbaa !400
  %2654 = insertelement <1024 x i32> %2649, i32 %2653, i32 366
  %2655 = extractelement <1024 x i32> %t29, i32 367
  %2656 = sext i32 %2655 to i64
  %2657 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2656
  %2658 = load i32, i32* %2657, align 4, !tbaa !400
  %2659 = insertelement <1024 x i32> %2654, i32 %2658, i32 367
  %2660 = extractelement <1024 x i32> %t29, i32 368
  %2661 = sext i32 %2660 to i64
  %2662 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2661
  %2663 = load i32, i32* %2662, align 4, !tbaa !400
  %2664 = insertelement <1024 x i32> %2659, i32 %2663, i32 368
  %2665 = extractelement <1024 x i32> %t29, i32 369
  %2666 = sext i32 %2665 to i64
  %2667 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2666
  %2668 = load i32, i32* %2667, align 4, !tbaa !400
  %2669 = insertelement <1024 x i32> %2664, i32 %2668, i32 369
  %2670 = extractelement <1024 x i32> %t29, i32 370
  %2671 = sext i32 %2670 to i64
  %2672 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2671
  %2673 = load i32, i32* %2672, align 4, !tbaa !400
  %2674 = insertelement <1024 x i32> %2669, i32 %2673, i32 370
  %2675 = extractelement <1024 x i32> %t29, i32 371
  %2676 = sext i32 %2675 to i64
  %2677 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2676
  %2678 = load i32, i32* %2677, align 4, !tbaa !400
  %2679 = insertelement <1024 x i32> %2674, i32 %2678, i32 371
  %2680 = extractelement <1024 x i32> %t29, i32 372
  %2681 = sext i32 %2680 to i64
  %2682 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2681
  %2683 = load i32, i32* %2682, align 4, !tbaa !400
  %2684 = insertelement <1024 x i32> %2679, i32 %2683, i32 372
  %2685 = extractelement <1024 x i32> %t29, i32 373
  %2686 = sext i32 %2685 to i64
  %2687 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2686
  %2688 = load i32, i32* %2687, align 4, !tbaa !400
  %2689 = insertelement <1024 x i32> %2684, i32 %2688, i32 373
  %2690 = extractelement <1024 x i32> %t29, i32 374
  %2691 = sext i32 %2690 to i64
  %2692 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2691
  %2693 = load i32, i32* %2692, align 4, !tbaa !400
  %2694 = insertelement <1024 x i32> %2689, i32 %2693, i32 374
  %2695 = extractelement <1024 x i32> %t29, i32 375
  %2696 = sext i32 %2695 to i64
  %2697 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2696
  %2698 = load i32, i32* %2697, align 4, !tbaa !400
  %2699 = insertelement <1024 x i32> %2694, i32 %2698, i32 375
  %2700 = extractelement <1024 x i32> %t29, i32 376
  %2701 = sext i32 %2700 to i64
  %2702 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2701
  %2703 = load i32, i32* %2702, align 4, !tbaa !400
  %2704 = insertelement <1024 x i32> %2699, i32 %2703, i32 376
  %2705 = extractelement <1024 x i32> %t29, i32 377
  %2706 = sext i32 %2705 to i64
  %2707 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2706
  %2708 = load i32, i32* %2707, align 4, !tbaa !400
  %2709 = insertelement <1024 x i32> %2704, i32 %2708, i32 377
  %2710 = extractelement <1024 x i32> %t29, i32 378
  %2711 = sext i32 %2710 to i64
  %2712 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2711
  %2713 = load i32, i32* %2712, align 4, !tbaa !400
  %2714 = insertelement <1024 x i32> %2709, i32 %2713, i32 378
  %2715 = extractelement <1024 x i32> %t29, i32 379
  %2716 = sext i32 %2715 to i64
  %2717 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2716
  %2718 = load i32, i32* %2717, align 4, !tbaa !400
  %2719 = insertelement <1024 x i32> %2714, i32 %2718, i32 379
  %2720 = extractelement <1024 x i32> %t29, i32 380
  %2721 = sext i32 %2720 to i64
  %2722 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2721
  %2723 = load i32, i32* %2722, align 4, !tbaa !400
  %2724 = insertelement <1024 x i32> %2719, i32 %2723, i32 380
  %2725 = extractelement <1024 x i32> %t29, i32 381
  %2726 = sext i32 %2725 to i64
  %2727 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2726
  %2728 = load i32, i32* %2727, align 4, !tbaa !400
  %2729 = insertelement <1024 x i32> %2724, i32 %2728, i32 381
  %2730 = extractelement <1024 x i32> %t29, i32 382
  %2731 = sext i32 %2730 to i64
  %2732 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2731
  %2733 = load i32, i32* %2732, align 4, !tbaa !400
  %2734 = insertelement <1024 x i32> %2729, i32 %2733, i32 382
  %2735 = extractelement <1024 x i32> %t29, i32 383
  %2736 = sext i32 %2735 to i64
  %2737 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2736
  %2738 = load i32, i32* %2737, align 4, !tbaa !400
  %2739 = insertelement <1024 x i32> %2734, i32 %2738, i32 383
  %2740 = extractelement <1024 x i32> %t29, i32 384
  %2741 = sext i32 %2740 to i64
  %2742 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2741
  %2743 = load i32, i32* %2742, align 4, !tbaa !400
  %2744 = insertelement <1024 x i32> %2739, i32 %2743, i32 384
  %2745 = extractelement <1024 x i32> %t29, i32 385
  %2746 = sext i32 %2745 to i64
  %2747 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2746
  %2748 = load i32, i32* %2747, align 4, !tbaa !400
  %2749 = insertelement <1024 x i32> %2744, i32 %2748, i32 385
  %2750 = extractelement <1024 x i32> %t29, i32 386
  %2751 = sext i32 %2750 to i64
  %2752 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2751
  %2753 = load i32, i32* %2752, align 4, !tbaa !400
  %2754 = insertelement <1024 x i32> %2749, i32 %2753, i32 386
  %2755 = extractelement <1024 x i32> %t29, i32 387
  %2756 = sext i32 %2755 to i64
  %2757 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2756
  %2758 = load i32, i32* %2757, align 4, !tbaa !400
  %2759 = insertelement <1024 x i32> %2754, i32 %2758, i32 387
  %2760 = extractelement <1024 x i32> %t29, i32 388
  %2761 = sext i32 %2760 to i64
  %2762 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2761
  %2763 = load i32, i32* %2762, align 4, !tbaa !400
  %2764 = insertelement <1024 x i32> %2759, i32 %2763, i32 388
  %2765 = extractelement <1024 x i32> %t29, i32 389
  %2766 = sext i32 %2765 to i64
  %2767 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2766
  %2768 = load i32, i32* %2767, align 4, !tbaa !400
  %2769 = insertelement <1024 x i32> %2764, i32 %2768, i32 389
  %2770 = extractelement <1024 x i32> %t29, i32 390
  %2771 = sext i32 %2770 to i64
  %2772 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2771
  %2773 = load i32, i32* %2772, align 4, !tbaa !400
  %2774 = insertelement <1024 x i32> %2769, i32 %2773, i32 390
  %2775 = extractelement <1024 x i32> %t29, i32 391
  %2776 = sext i32 %2775 to i64
  %2777 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2776
  %2778 = load i32, i32* %2777, align 4, !tbaa !400
  %2779 = insertelement <1024 x i32> %2774, i32 %2778, i32 391
  %2780 = extractelement <1024 x i32> %t29, i32 392
  %2781 = sext i32 %2780 to i64
  %2782 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2781
  %2783 = load i32, i32* %2782, align 4, !tbaa !400
  %2784 = insertelement <1024 x i32> %2779, i32 %2783, i32 392
  %2785 = extractelement <1024 x i32> %t29, i32 393
  %2786 = sext i32 %2785 to i64
  %2787 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2786
  %2788 = load i32, i32* %2787, align 4, !tbaa !400
  %2789 = insertelement <1024 x i32> %2784, i32 %2788, i32 393
  %2790 = extractelement <1024 x i32> %t29, i32 394
  %2791 = sext i32 %2790 to i64
  %2792 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2791
  %2793 = load i32, i32* %2792, align 4, !tbaa !400
  %2794 = insertelement <1024 x i32> %2789, i32 %2793, i32 394
  %2795 = extractelement <1024 x i32> %t29, i32 395
  %2796 = sext i32 %2795 to i64
  %2797 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2796
  %2798 = load i32, i32* %2797, align 4, !tbaa !400
  %2799 = insertelement <1024 x i32> %2794, i32 %2798, i32 395
  %2800 = extractelement <1024 x i32> %t29, i32 396
  %2801 = sext i32 %2800 to i64
  %2802 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2801
  %2803 = load i32, i32* %2802, align 4, !tbaa !400
  %2804 = insertelement <1024 x i32> %2799, i32 %2803, i32 396
  %2805 = extractelement <1024 x i32> %t29, i32 397
  %2806 = sext i32 %2805 to i64
  %2807 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2806
  %2808 = load i32, i32* %2807, align 4, !tbaa !400
  %2809 = insertelement <1024 x i32> %2804, i32 %2808, i32 397
  %2810 = extractelement <1024 x i32> %t29, i32 398
  %2811 = sext i32 %2810 to i64
  %2812 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2811
  %2813 = load i32, i32* %2812, align 4, !tbaa !400
  %2814 = insertelement <1024 x i32> %2809, i32 %2813, i32 398
  %2815 = extractelement <1024 x i32> %t29, i32 399
  %2816 = sext i32 %2815 to i64
  %2817 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2816
  %2818 = load i32, i32* %2817, align 4, !tbaa !400
  %2819 = insertelement <1024 x i32> %2814, i32 %2818, i32 399
  %2820 = extractelement <1024 x i32> %t29, i32 400
  %2821 = sext i32 %2820 to i64
  %2822 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2821
  %2823 = load i32, i32* %2822, align 4, !tbaa !400
  %2824 = insertelement <1024 x i32> %2819, i32 %2823, i32 400
  %2825 = extractelement <1024 x i32> %t29, i32 401
  %2826 = sext i32 %2825 to i64
  %2827 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2826
  %2828 = load i32, i32* %2827, align 4, !tbaa !400
  %2829 = insertelement <1024 x i32> %2824, i32 %2828, i32 401
  %2830 = extractelement <1024 x i32> %t29, i32 402
  %2831 = sext i32 %2830 to i64
  %2832 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2831
  %2833 = load i32, i32* %2832, align 4, !tbaa !400
  %2834 = insertelement <1024 x i32> %2829, i32 %2833, i32 402
  %2835 = extractelement <1024 x i32> %t29, i32 403
  %2836 = sext i32 %2835 to i64
  %2837 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2836
  %2838 = load i32, i32* %2837, align 4, !tbaa !400
  %2839 = insertelement <1024 x i32> %2834, i32 %2838, i32 403
  %2840 = extractelement <1024 x i32> %t29, i32 404
  %2841 = sext i32 %2840 to i64
  %2842 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2841
  %2843 = load i32, i32* %2842, align 4, !tbaa !400
  %2844 = insertelement <1024 x i32> %2839, i32 %2843, i32 404
  %2845 = extractelement <1024 x i32> %t29, i32 405
  %2846 = sext i32 %2845 to i64
  %2847 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2846
  %2848 = load i32, i32* %2847, align 4, !tbaa !400
  %2849 = insertelement <1024 x i32> %2844, i32 %2848, i32 405
  %2850 = extractelement <1024 x i32> %t29, i32 406
  %2851 = sext i32 %2850 to i64
  %2852 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2851
  %2853 = load i32, i32* %2852, align 4, !tbaa !400
  %2854 = insertelement <1024 x i32> %2849, i32 %2853, i32 406
  %2855 = extractelement <1024 x i32> %t29, i32 407
  %2856 = sext i32 %2855 to i64
  %2857 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2856
  %2858 = load i32, i32* %2857, align 4, !tbaa !400
  %2859 = insertelement <1024 x i32> %2854, i32 %2858, i32 407
  %2860 = extractelement <1024 x i32> %t29, i32 408
  %2861 = sext i32 %2860 to i64
  %2862 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2861
  %2863 = load i32, i32* %2862, align 4, !tbaa !400
  %2864 = insertelement <1024 x i32> %2859, i32 %2863, i32 408
  %2865 = extractelement <1024 x i32> %t29, i32 409
  %2866 = sext i32 %2865 to i64
  %2867 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2866
  %2868 = load i32, i32* %2867, align 4, !tbaa !400
  %2869 = insertelement <1024 x i32> %2864, i32 %2868, i32 409
  %2870 = extractelement <1024 x i32> %t29, i32 410
  %2871 = sext i32 %2870 to i64
  %2872 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2871
  %2873 = load i32, i32* %2872, align 4, !tbaa !400
  %2874 = insertelement <1024 x i32> %2869, i32 %2873, i32 410
  %2875 = extractelement <1024 x i32> %t29, i32 411
  %2876 = sext i32 %2875 to i64
  %2877 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2876
  %2878 = load i32, i32* %2877, align 4, !tbaa !400
  %2879 = insertelement <1024 x i32> %2874, i32 %2878, i32 411
  %2880 = extractelement <1024 x i32> %t29, i32 412
  %2881 = sext i32 %2880 to i64
  %2882 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2881
  %2883 = load i32, i32* %2882, align 4, !tbaa !400
  %2884 = insertelement <1024 x i32> %2879, i32 %2883, i32 412
  %2885 = extractelement <1024 x i32> %t29, i32 413
  %2886 = sext i32 %2885 to i64
  %2887 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2886
  %2888 = load i32, i32* %2887, align 4, !tbaa !400
  %2889 = insertelement <1024 x i32> %2884, i32 %2888, i32 413
  %2890 = extractelement <1024 x i32> %t29, i32 414
  %2891 = sext i32 %2890 to i64
  %2892 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2891
  %2893 = load i32, i32* %2892, align 4, !tbaa !400
  %2894 = insertelement <1024 x i32> %2889, i32 %2893, i32 414
  %2895 = extractelement <1024 x i32> %t29, i32 415
  %2896 = sext i32 %2895 to i64
  %2897 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2896
  %2898 = load i32, i32* %2897, align 4, !tbaa !400
  %2899 = insertelement <1024 x i32> %2894, i32 %2898, i32 415
  %2900 = extractelement <1024 x i32> %t29, i32 416
  %2901 = sext i32 %2900 to i64
  %2902 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2901
  %2903 = load i32, i32* %2902, align 4, !tbaa !400
  %2904 = insertelement <1024 x i32> %2899, i32 %2903, i32 416
  %2905 = extractelement <1024 x i32> %t29, i32 417
  %2906 = sext i32 %2905 to i64
  %2907 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2906
  %2908 = load i32, i32* %2907, align 4, !tbaa !400
  %2909 = insertelement <1024 x i32> %2904, i32 %2908, i32 417
  %2910 = extractelement <1024 x i32> %t29, i32 418
  %2911 = sext i32 %2910 to i64
  %2912 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2911
  %2913 = load i32, i32* %2912, align 4, !tbaa !400
  %2914 = insertelement <1024 x i32> %2909, i32 %2913, i32 418
  %2915 = extractelement <1024 x i32> %t29, i32 419
  %2916 = sext i32 %2915 to i64
  %2917 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2916
  %2918 = load i32, i32* %2917, align 4, !tbaa !400
  %2919 = insertelement <1024 x i32> %2914, i32 %2918, i32 419
  %2920 = extractelement <1024 x i32> %t29, i32 420
  %2921 = sext i32 %2920 to i64
  %2922 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2921
  %2923 = load i32, i32* %2922, align 4, !tbaa !400
  %2924 = insertelement <1024 x i32> %2919, i32 %2923, i32 420
  %2925 = extractelement <1024 x i32> %t29, i32 421
  %2926 = sext i32 %2925 to i64
  %2927 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2926
  %2928 = load i32, i32* %2927, align 4, !tbaa !400
  %2929 = insertelement <1024 x i32> %2924, i32 %2928, i32 421
  %2930 = extractelement <1024 x i32> %t29, i32 422
  %2931 = sext i32 %2930 to i64
  %2932 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2931
  %2933 = load i32, i32* %2932, align 4, !tbaa !400
  %2934 = insertelement <1024 x i32> %2929, i32 %2933, i32 422
  %2935 = extractelement <1024 x i32> %t29, i32 423
  %2936 = sext i32 %2935 to i64
  %2937 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2936
  %2938 = load i32, i32* %2937, align 4, !tbaa !400
  %2939 = insertelement <1024 x i32> %2934, i32 %2938, i32 423
  %2940 = extractelement <1024 x i32> %t29, i32 424
  %2941 = sext i32 %2940 to i64
  %2942 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2941
  %2943 = load i32, i32* %2942, align 4, !tbaa !400
  %2944 = insertelement <1024 x i32> %2939, i32 %2943, i32 424
  %2945 = extractelement <1024 x i32> %t29, i32 425
  %2946 = sext i32 %2945 to i64
  %2947 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2946
  %2948 = load i32, i32* %2947, align 4, !tbaa !400
  %2949 = insertelement <1024 x i32> %2944, i32 %2948, i32 425
  %2950 = extractelement <1024 x i32> %t29, i32 426
  %2951 = sext i32 %2950 to i64
  %2952 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2951
  %2953 = load i32, i32* %2952, align 4, !tbaa !400
  %2954 = insertelement <1024 x i32> %2949, i32 %2953, i32 426
  %2955 = extractelement <1024 x i32> %t29, i32 427
  %2956 = sext i32 %2955 to i64
  %2957 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2956
  %2958 = load i32, i32* %2957, align 4, !tbaa !400
  %2959 = insertelement <1024 x i32> %2954, i32 %2958, i32 427
  %2960 = extractelement <1024 x i32> %t29, i32 428
  %2961 = sext i32 %2960 to i64
  %2962 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2961
  %2963 = load i32, i32* %2962, align 4, !tbaa !400
  %2964 = insertelement <1024 x i32> %2959, i32 %2963, i32 428
  %2965 = extractelement <1024 x i32> %t29, i32 429
  %2966 = sext i32 %2965 to i64
  %2967 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2966
  %2968 = load i32, i32* %2967, align 4, !tbaa !400
  %2969 = insertelement <1024 x i32> %2964, i32 %2968, i32 429
  %2970 = extractelement <1024 x i32> %t29, i32 430
  %2971 = sext i32 %2970 to i64
  %2972 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2971
  %2973 = load i32, i32* %2972, align 4, !tbaa !400
  %2974 = insertelement <1024 x i32> %2969, i32 %2973, i32 430
  %2975 = extractelement <1024 x i32> %t29, i32 431
  %2976 = sext i32 %2975 to i64
  %2977 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2976
  %2978 = load i32, i32* %2977, align 4, !tbaa !400
  %2979 = insertelement <1024 x i32> %2974, i32 %2978, i32 431
  %2980 = extractelement <1024 x i32> %t29, i32 432
  %2981 = sext i32 %2980 to i64
  %2982 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2981
  %2983 = load i32, i32* %2982, align 4, !tbaa !400
  %2984 = insertelement <1024 x i32> %2979, i32 %2983, i32 432
  %2985 = extractelement <1024 x i32> %t29, i32 433
  %2986 = sext i32 %2985 to i64
  %2987 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2986
  %2988 = load i32, i32* %2987, align 4, !tbaa !400
  %2989 = insertelement <1024 x i32> %2984, i32 %2988, i32 433
  %2990 = extractelement <1024 x i32> %t29, i32 434
  %2991 = sext i32 %2990 to i64
  %2992 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2991
  %2993 = load i32, i32* %2992, align 4, !tbaa !400
  %2994 = insertelement <1024 x i32> %2989, i32 %2993, i32 434
  %2995 = extractelement <1024 x i32> %t29, i32 435
  %2996 = sext i32 %2995 to i64
  %2997 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %2996
  %2998 = load i32, i32* %2997, align 4, !tbaa !400
  %2999 = insertelement <1024 x i32> %2994, i32 %2998, i32 435
  %3000 = extractelement <1024 x i32> %t29, i32 436
  %3001 = sext i32 %3000 to i64
  %3002 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3001
  %3003 = load i32, i32* %3002, align 4, !tbaa !400
  %3004 = insertelement <1024 x i32> %2999, i32 %3003, i32 436
  %3005 = extractelement <1024 x i32> %t29, i32 437
  %3006 = sext i32 %3005 to i64
  %3007 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3006
  %3008 = load i32, i32* %3007, align 4, !tbaa !400
  %3009 = insertelement <1024 x i32> %3004, i32 %3008, i32 437
  %3010 = extractelement <1024 x i32> %t29, i32 438
  %3011 = sext i32 %3010 to i64
  %3012 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3011
  %3013 = load i32, i32* %3012, align 4, !tbaa !400
  %3014 = insertelement <1024 x i32> %3009, i32 %3013, i32 438
  %3015 = extractelement <1024 x i32> %t29, i32 439
  %3016 = sext i32 %3015 to i64
  %3017 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3016
  %3018 = load i32, i32* %3017, align 4, !tbaa !400
  %3019 = insertelement <1024 x i32> %3014, i32 %3018, i32 439
  %3020 = extractelement <1024 x i32> %t29, i32 440
  %3021 = sext i32 %3020 to i64
  %3022 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3021
  %3023 = load i32, i32* %3022, align 4, !tbaa !400
  %3024 = insertelement <1024 x i32> %3019, i32 %3023, i32 440
  %3025 = extractelement <1024 x i32> %t29, i32 441
  %3026 = sext i32 %3025 to i64
  %3027 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3026
  %3028 = load i32, i32* %3027, align 4, !tbaa !400
  %3029 = insertelement <1024 x i32> %3024, i32 %3028, i32 441
  %3030 = extractelement <1024 x i32> %t29, i32 442
  %3031 = sext i32 %3030 to i64
  %3032 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3031
  %3033 = load i32, i32* %3032, align 4, !tbaa !400
  %3034 = insertelement <1024 x i32> %3029, i32 %3033, i32 442
  %3035 = extractelement <1024 x i32> %t29, i32 443
  %3036 = sext i32 %3035 to i64
  %3037 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3036
  %3038 = load i32, i32* %3037, align 4, !tbaa !400
  %3039 = insertelement <1024 x i32> %3034, i32 %3038, i32 443
  %3040 = extractelement <1024 x i32> %t29, i32 444
  %3041 = sext i32 %3040 to i64
  %3042 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3041
  %3043 = load i32, i32* %3042, align 4, !tbaa !400
  %3044 = insertelement <1024 x i32> %3039, i32 %3043, i32 444
  %3045 = extractelement <1024 x i32> %t29, i32 445
  %3046 = sext i32 %3045 to i64
  %3047 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3046
  %3048 = load i32, i32* %3047, align 4, !tbaa !400
  %3049 = insertelement <1024 x i32> %3044, i32 %3048, i32 445
  %3050 = extractelement <1024 x i32> %t29, i32 446
  %3051 = sext i32 %3050 to i64
  %3052 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3051
  %3053 = load i32, i32* %3052, align 4, !tbaa !400
  %3054 = insertelement <1024 x i32> %3049, i32 %3053, i32 446
  %3055 = extractelement <1024 x i32> %t29, i32 447
  %3056 = sext i32 %3055 to i64
  %3057 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3056
  %3058 = load i32, i32* %3057, align 4, !tbaa !400
  %3059 = insertelement <1024 x i32> %3054, i32 %3058, i32 447
  %3060 = extractelement <1024 x i32> %t29, i32 448
  %3061 = sext i32 %3060 to i64
  %3062 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3061
  %3063 = load i32, i32* %3062, align 4, !tbaa !400
  %3064 = insertelement <1024 x i32> %3059, i32 %3063, i32 448
  %3065 = extractelement <1024 x i32> %t29, i32 449
  %3066 = sext i32 %3065 to i64
  %3067 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3066
  %3068 = load i32, i32* %3067, align 4, !tbaa !400
  %3069 = insertelement <1024 x i32> %3064, i32 %3068, i32 449
  %3070 = extractelement <1024 x i32> %t29, i32 450
  %3071 = sext i32 %3070 to i64
  %3072 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3071
  %3073 = load i32, i32* %3072, align 4, !tbaa !400
  %3074 = insertelement <1024 x i32> %3069, i32 %3073, i32 450
  %3075 = extractelement <1024 x i32> %t29, i32 451
  %3076 = sext i32 %3075 to i64
  %3077 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3076
  %3078 = load i32, i32* %3077, align 4, !tbaa !400
  %3079 = insertelement <1024 x i32> %3074, i32 %3078, i32 451
  %3080 = extractelement <1024 x i32> %t29, i32 452
  %3081 = sext i32 %3080 to i64
  %3082 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3081
  %3083 = load i32, i32* %3082, align 4, !tbaa !400
  %3084 = insertelement <1024 x i32> %3079, i32 %3083, i32 452
  %3085 = extractelement <1024 x i32> %t29, i32 453
  %3086 = sext i32 %3085 to i64
  %3087 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3086
  %3088 = load i32, i32* %3087, align 4, !tbaa !400
  %3089 = insertelement <1024 x i32> %3084, i32 %3088, i32 453
  %3090 = extractelement <1024 x i32> %t29, i32 454
  %3091 = sext i32 %3090 to i64
  %3092 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3091
  %3093 = load i32, i32* %3092, align 4, !tbaa !400
  %3094 = insertelement <1024 x i32> %3089, i32 %3093, i32 454
  %3095 = extractelement <1024 x i32> %t29, i32 455
  %3096 = sext i32 %3095 to i64
  %3097 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3096
  %3098 = load i32, i32* %3097, align 4, !tbaa !400
  %3099 = insertelement <1024 x i32> %3094, i32 %3098, i32 455
  %3100 = extractelement <1024 x i32> %t29, i32 456
  %3101 = sext i32 %3100 to i64
  %3102 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3101
  %3103 = load i32, i32* %3102, align 4, !tbaa !400
  %3104 = insertelement <1024 x i32> %3099, i32 %3103, i32 456
  %3105 = extractelement <1024 x i32> %t29, i32 457
  %3106 = sext i32 %3105 to i64
  %3107 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3106
  %3108 = load i32, i32* %3107, align 4, !tbaa !400
  %3109 = insertelement <1024 x i32> %3104, i32 %3108, i32 457
  %3110 = extractelement <1024 x i32> %t29, i32 458
  %3111 = sext i32 %3110 to i64
  %3112 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3111
  %3113 = load i32, i32* %3112, align 4, !tbaa !400
  %3114 = insertelement <1024 x i32> %3109, i32 %3113, i32 458
  %3115 = extractelement <1024 x i32> %t29, i32 459
  %3116 = sext i32 %3115 to i64
  %3117 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3116
  %3118 = load i32, i32* %3117, align 4, !tbaa !400
  %3119 = insertelement <1024 x i32> %3114, i32 %3118, i32 459
  %3120 = extractelement <1024 x i32> %t29, i32 460
  %3121 = sext i32 %3120 to i64
  %3122 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3121
  %3123 = load i32, i32* %3122, align 4, !tbaa !400
  %3124 = insertelement <1024 x i32> %3119, i32 %3123, i32 460
  %3125 = extractelement <1024 x i32> %t29, i32 461
  %3126 = sext i32 %3125 to i64
  %3127 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3126
  %3128 = load i32, i32* %3127, align 4, !tbaa !400
  %3129 = insertelement <1024 x i32> %3124, i32 %3128, i32 461
  %3130 = extractelement <1024 x i32> %t29, i32 462
  %3131 = sext i32 %3130 to i64
  %3132 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3131
  %3133 = load i32, i32* %3132, align 4, !tbaa !400
  %3134 = insertelement <1024 x i32> %3129, i32 %3133, i32 462
  %3135 = extractelement <1024 x i32> %t29, i32 463
  %3136 = sext i32 %3135 to i64
  %3137 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3136
  %3138 = load i32, i32* %3137, align 4, !tbaa !400
  %3139 = insertelement <1024 x i32> %3134, i32 %3138, i32 463
  %3140 = extractelement <1024 x i32> %t29, i32 464
  %3141 = sext i32 %3140 to i64
  %3142 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3141
  %3143 = load i32, i32* %3142, align 4, !tbaa !400
  %3144 = insertelement <1024 x i32> %3139, i32 %3143, i32 464
  %3145 = extractelement <1024 x i32> %t29, i32 465
  %3146 = sext i32 %3145 to i64
  %3147 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3146
  %3148 = load i32, i32* %3147, align 4, !tbaa !400
  %3149 = insertelement <1024 x i32> %3144, i32 %3148, i32 465
  %3150 = extractelement <1024 x i32> %t29, i32 466
  %3151 = sext i32 %3150 to i64
  %3152 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3151
  %3153 = load i32, i32* %3152, align 4, !tbaa !400
  %3154 = insertelement <1024 x i32> %3149, i32 %3153, i32 466
  %3155 = extractelement <1024 x i32> %t29, i32 467
  %3156 = sext i32 %3155 to i64
  %3157 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3156
  %3158 = load i32, i32* %3157, align 4, !tbaa !400
  %3159 = insertelement <1024 x i32> %3154, i32 %3158, i32 467
  %3160 = extractelement <1024 x i32> %t29, i32 468
  %3161 = sext i32 %3160 to i64
  %3162 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3161
  %3163 = load i32, i32* %3162, align 4, !tbaa !400
  %3164 = insertelement <1024 x i32> %3159, i32 %3163, i32 468
  %3165 = extractelement <1024 x i32> %t29, i32 469
  %3166 = sext i32 %3165 to i64
  %3167 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3166
  %3168 = load i32, i32* %3167, align 4, !tbaa !400
  %3169 = insertelement <1024 x i32> %3164, i32 %3168, i32 469
  %3170 = extractelement <1024 x i32> %t29, i32 470
  %3171 = sext i32 %3170 to i64
  %3172 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3171
  %3173 = load i32, i32* %3172, align 4, !tbaa !400
  %3174 = insertelement <1024 x i32> %3169, i32 %3173, i32 470
  %3175 = extractelement <1024 x i32> %t29, i32 471
  %3176 = sext i32 %3175 to i64
  %3177 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3176
  %3178 = load i32, i32* %3177, align 4, !tbaa !400
  %3179 = insertelement <1024 x i32> %3174, i32 %3178, i32 471
  %3180 = extractelement <1024 x i32> %t29, i32 472
  %3181 = sext i32 %3180 to i64
  %3182 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3181
  %3183 = load i32, i32* %3182, align 4, !tbaa !400
  %3184 = insertelement <1024 x i32> %3179, i32 %3183, i32 472
  %3185 = extractelement <1024 x i32> %t29, i32 473
  %3186 = sext i32 %3185 to i64
  %3187 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3186
  %3188 = load i32, i32* %3187, align 4, !tbaa !400
  %3189 = insertelement <1024 x i32> %3184, i32 %3188, i32 473
  %3190 = extractelement <1024 x i32> %t29, i32 474
  %3191 = sext i32 %3190 to i64
  %3192 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3191
  %3193 = load i32, i32* %3192, align 4, !tbaa !400
  %3194 = insertelement <1024 x i32> %3189, i32 %3193, i32 474
  %3195 = extractelement <1024 x i32> %t29, i32 475
  %3196 = sext i32 %3195 to i64
  %3197 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3196
  %3198 = load i32, i32* %3197, align 4, !tbaa !400
  %3199 = insertelement <1024 x i32> %3194, i32 %3198, i32 475
  %3200 = extractelement <1024 x i32> %t29, i32 476
  %3201 = sext i32 %3200 to i64
  %3202 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3201
  %3203 = load i32, i32* %3202, align 4, !tbaa !400
  %3204 = insertelement <1024 x i32> %3199, i32 %3203, i32 476
  %3205 = extractelement <1024 x i32> %t29, i32 477
  %3206 = sext i32 %3205 to i64
  %3207 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3206
  %3208 = load i32, i32* %3207, align 4, !tbaa !400
  %3209 = insertelement <1024 x i32> %3204, i32 %3208, i32 477
  %3210 = extractelement <1024 x i32> %t29, i32 478
  %3211 = sext i32 %3210 to i64
  %3212 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3211
  %3213 = load i32, i32* %3212, align 4, !tbaa !400
  %3214 = insertelement <1024 x i32> %3209, i32 %3213, i32 478
  %3215 = extractelement <1024 x i32> %t29, i32 479
  %3216 = sext i32 %3215 to i64
  %3217 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3216
  %3218 = load i32, i32* %3217, align 4, !tbaa !400
  %3219 = insertelement <1024 x i32> %3214, i32 %3218, i32 479
  %3220 = extractelement <1024 x i32> %t29, i32 480
  %3221 = sext i32 %3220 to i64
  %3222 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3221
  %3223 = load i32, i32* %3222, align 4, !tbaa !400
  %3224 = insertelement <1024 x i32> %3219, i32 %3223, i32 480
  %3225 = extractelement <1024 x i32> %t29, i32 481
  %3226 = sext i32 %3225 to i64
  %3227 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3226
  %3228 = load i32, i32* %3227, align 4, !tbaa !400
  %3229 = insertelement <1024 x i32> %3224, i32 %3228, i32 481
  %3230 = extractelement <1024 x i32> %t29, i32 482
  %3231 = sext i32 %3230 to i64
  %3232 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3231
  %3233 = load i32, i32* %3232, align 4, !tbaa !400
  %3234 = insertelement <1024 x i32> %3229, i32 %3233, i32 482
  %3235 = extractelement <1024 x i32> %t29, i32 483
  %3236 = sext i32 %3235 to i64
  %3237 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3236
  %3238 = load i32, i32* %3237, align 4, !tbaa !400
  %3239 = insertelement <1024 x i32> %3234, i32 %3238, i32 483
  %3240 = extractelement <1024 x i32> %t29, i32 484
  %3241 = sext i32 %3240 to i64
  %3242 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3241
  %3243 = load i32, i32* %3242, align 4, !tbaa !400
  %3244 = insertelement <1024 x i32> %3239, i32 %3243, i32 484
  %3245 = extractelement <1024 x i32> %t29, i32 485
  %3246 = sext i32 %3245 to i64
  %3247 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3246
  %3248 = load i32, i32* %3247, align 4, !tbaa !400
  %3249 = insertelement <1024 x i32> %3244, i32 %3248, i32 485
  %3250 = extractelement <1024 x i32> %t29, i32 486
  %3251 = sext i32 %3250 to i64
  %3252 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3251
  %3253 = load i32, i32* %3252, align 4, !tbaa !400
  %3254 = insertelement <1024 x i32> %3249, i32 %3253, i32 486
  %3255 = extractelement <1024 x i32> %t29, i32 487
  %3256 = sext i32 %3255 to i64
  %3257 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3256
  %3258 = load i32, i32* %3257, align 4, !tbaa !400
  %3259 = insertelement <1024 x i32> %3254, i32 %3258, i32 487
  %3260 = extractelement <1024 x i32> %t29, i32 488
  %3261 = sext i32 %3260 to i64
  %3262 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3261
  %3263 = load i32, i32* %3262, align 4, !tbaa !400
  %3264 = insertelement <1024 x i32> %3259, i32 %3263, i32 488
  %3265 = extractelement <1024 x i32> %t29, i32 489
  %3266 = sext i32 %3265 to i64
  %3267 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3266
  %3268 = load i32, i32* %3267, align 4, !tbaa !400
  %3269 = insertelement <1024 x i32> %3264, i32 %3268, i32 489
  %3270 = extractelement <1024 x i32> %t29, i32 490
  %3271 = sext i32 %3270 to i64
  %3272 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3271
  %3273 = load i32, i32* %3272, align 4, !tbaa !400
  %3274 = insertelement <1024 x i32> %3269, i32 %3273, i32 490
  %3275 = extractelement <1024 x i32> %t29, i32 491
  %3276 = sext i32 %3275 to i64
  %3277 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3276
  %3278 = load i32, i32* %3277, align 4, !tbaa !400
  %3279 = insertelement <1024 x i32> %3274, i32 %3278, i32 491
  %3280 = extractelement <1024 x i32> %t29, i32 492
  %3281 = sext i32 %3280 to i64
  %3282 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3281
  %3283 = load i32, i32* %3282, align 4, !tbaa !400
  %3284 = insertelement <1024 x i32> %3279, i32 %3283, i32 492
  %3285 = extractelement <1024 x i32> %t29, i32 493
  %3286 = sext i32 %3285 to i64
  %3287 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3286
  %3288 = load i32, i32* %3287, align 4, !tbaa !400
  %3289 = insertelement <1024 x i32> %3284, i32 %3288, i32 493
  %3290 = extractelement <1024 x i32> %t29, i32 494
  %3291 = sext i32 %3290 to i64
  %3292 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3291
  %3293 = load i32, i32* %3292, align 4, !tbaa !400
  %3294 = insertelement <1024 x i32> %3289, i32 %3293, i32 494
  %3295 = extractelement <1024 x i32> %t29, i32 495
  %3296 = sext i32 %3295 to i64
  %3297 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3296
  %3298 = load i32, i32* %3297, align 4, !tbaa !400
  %3299 = insertelement <1024 x i32> %3294, i32 %3298, i32 495
  %3300 = extractelement <1024 x i32> %t29, i32 496
  %3301 = sext i32 %3300 to i64
  %3302 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3301
  %3303 = load i32, i32* %3302, align 4, !tbaa !400
  %3304 = insertelement <1024 x i32> %3299, i32 %3303, i32 496
  %3305 = extractelement <1024 x i32> %t29, i32 497
  %3306 = sext i32 %3305 to i64
  %3307 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3306
  %3308 = load i32, i32* %3307, align 4, !tbaa !400
  %3309 = insertelement <1024 x i32> %3304, i32 %3308, i32 497
  %3310 = extractelement <1024 x i32> %t29, i32 498
  %3311 = sext i32 %3310 to i64
  %3312 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3311
  %3313 = load i32, i32* %3312, align 4, !tbaa !400
  %3314 = insertelement <1024 x i32> %3309, i32 %3313, i32 498
  %3315 = extractelement <1024 x i32> %t29, i32 499
  %3316 = sext i32 %3315 to i64
  %3317 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3316
  %3318 = load i32, i32* %3317, align 4, !tbaa !400
  %3319 = insertelement <1024 x i32> %3314, i32 %3318, i32 499
  %3320 = extractelement <1024 x i32> %t29, i32 500
  %3321 = sext i32 %3320 to i64
  %3322 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3321
  %3323 = load i32, i32* %3322, align 4, !tbaa !400
  %3324 = insertelement <1024 x i32> %3319, i32 %3323, i32 500
  %3325 = extractelement <1024 x i32> %t29, i32 501
  %3326 = sext i32 %3325 to i64
  %3327 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3326
  %3328 = load i32, i32* %3327, align 4, !tbaa !400
  %3329 = insertelement <1024 x i32> %3324, i32 %3328, i32 501
  %3330 = extractelement <1024 x i32> %t29, i32 502
  %3331 = sext i32 %3330 to i64
  %3332 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3331
  %3333 = load i32, i32* %3332, align 4, !tbaa !400
  %3334 = insertelement <1024 x i32> %3329, i32 %3333, i32 502
  %3335 = extractelement <1024 x i32> %t29, i32 503
  %3336 = sext i32 %3335 to i64
  %3337 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3336
  %3338 = load i32, i32* %3337, align 4, !tbaa !400
  %3339 = insertelement <1024 x i32> %3334, i32 %3338, i32 503
  %3340 = extractelement <1024 x i32> %t29, i32 504
  %3341 = sext i32 %3340 to i64
  %3342 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3341
  %3343 = load i32, i32* %3342, align 4, !tbaa !400
  %3344 = insertelement <1024 x i32> %3339, i32 %3343, i32 504
  %3345 = extractelement <1024 x i32> %t29, i32 505
  %3346 = sext i32 %3345 to i64
  %3347 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3346
  %3348 = load i32, i32* %3347, align 4, !tbaa !400
  %3349 = insertelement <1024 x i32> %3344, i32 %3348, i32 505
  %3350 = extractelement <1024 x i32> %t29, i32 506
  %3351 = sext i32 %3350 to i64
  %3352 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3351
  %3353 = load i32, i32* %3352, align 4, !tbaa !400
  %3354 = insertelement <1024 x i32> %3349, i32 %3353, i32 506
  %3355 = extractelement <1024 x i32> %t29, i32 507
  %3356 = sext i32 %3355 to i64
  %3357 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3356
  %3358 = load i32, i32* %3357, align 4, !tbaa !400
  %3359 = insertelement <1024 x i32> %3354, i32 %3358, i32 507
  %3360 = extractelement <1024 x i32> %t29, i32 508
  %3361 = sext i32 %3360 to i64
  %3362 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3361
  %3363 = load i32, i32* %3362, align 4, !tbaa !400
  %3364 = insertelement <1024 x i32> %3359, i32 %3363, i32 508
  %3365 = extractelement <1024 x i32> %t29, i32 509
  %3366 = sext i32 %3365 to i64
  %3367 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3366
  %3368 = load i32, i32* %3367, align 4, !tbaa !400
  %3369 = insertelement <1024 x i32> %3364, i32 %3368, i32 509
  %3370 = extractelement <1024 x i32> %t29, i32 510
  %3371 = sext i32 %3370 to i64
  %3372 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3371
  %3373 = load i32, i32* %3372, align 4, !tbaa !400
  %3374 = insertelement <1024 x i32> %3369, i32 %3373, i32 510
  %3375 = extractelement <1024 x i32> %t29, i32 511
  %3376 = sext i32 %3375 to i64
  %3377 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3376
  %3378 = load i32, i32* %3377, align 4, !tbaa !400
  %3379 = insertelement <1024 x i32> %3374, i32 %3378, i32 511
  %3380 = extractelement <1024 x i32> %t29, i32 512
  %3381 = sext i32 %3380 to i64
  %3382 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3381
  %3383 = load i32, i32* %3382, align 4, !tbaa !400
  %3384 = insertelement <1024 x i32> %3379, i32 %3383, i32 512
  %3385 = extractelement <1024 x i32> %t29, i32 513
  %3386 = sext i32 %3385 to i64
  %3387 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3386
  %3388 = load i32, i32* %3387, align 4, !tbaa !400
  %3389 = insertelement <1024 x i32> %3384, i32 %3388, i32 513
  %3390 = extractelement <1024 x i32> %t29, i32 514
  %3391 = sext i32 %3390 to i64
  %3392 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3391
  %3393 = load i32, i32* %3392, align 4, !tbaa !400
  %3394 = insertelement <1024 x i32> %3389, i32 %3393, i32 514
  %3395 = extractelement <1024 x i32> %t29, i32 515
  %3396 = sext i32 %3395 to i64
  %3397 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3396
  %3398 = load i32, i32* %3397, align 4, !tbaa !400
  %3399 = insertelement <1024 x i32> %3394, i32 %3398, i32 515
  %3400 = extractelement <1024 x i32> %t29, i32 516
  %3401 = sext i32 %3400 to i64
  %3402 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3401
  %3403 = load i32, i32* %3402, align 4, !tbaa !400
  %3404 = insertelement <1024 x i32> %3399, i32 %3403, i32 516
  %3405 = extractelement <1024 x i32> %t29, i32 517
  %3406 = sext i32 %3405 to i64
  %3407 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3406
  %3408 = load i32, i32* %3407, align 4, !tbaa !400
  %3409 = insertelement <1024 x i32> %3404, i32 %3408, i32 517
  %3410 = extractelement <1024 x i32> %t29, i32 518
  %3411 = sext i32 %3410 to i64
  %3412 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3411
  %3413 = load i32, i32* %3412, align 4, !tbaa !400
  %3414 = insertelement <1024 x i32> %3409, i32 %3413, i32 518
  %3415 = extractelement <1024 x i32> %t29, i32 519
  %3416 = sext i32 %3415 to i64
  %3417 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3416
  %3418 = load i32, i32* %3417, align 4, !tbaa !400
  %3419 = insertelement <1024 x i32> %3414, i32 %3418, i32 519
  %3420 = extractelement <1024 x i32> %t29, i32 520
  %3421 = sext i32 %3420 to i64
  %3422 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3421
  %3423 = load i32, i32* %3422, align 4, !tbaa !400
  %3424 = insertelement <1024 x i32> %3419, i32 %3423, i32 520
  %3425 = extractelement <1024 x i32> %t29, i32 521
  %3426 = sext i32 %3425 to i64
  %3427 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3426
  %3428 = load i32, i32* %3427, align 4, !tbaa !400
  %3429 = insertelement <1024 x i32> %3424, i32 %3428, i32 521
  %3430 = extractelement <1024 x i32> %t29, i32 522
  %3431 = sext i32 %3430 to i64
  %3432 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3431
  %3433 = load i32, i32* %3432, align 4, !tbaa !400
  %3434 = insertelement <1024 x i32> %3429, i32 %3433, i32 522
  %3435 = extractelement <1024 x i32> %t29, i32 523
  %3436 = sext i32 %3435 to i64
  %3437 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3436
  %3438 = load i32, i32* %3437, align 4, !tbaa !400
  %3439 = insertelement <1024 x i32> %3434, i32 %3438, i32 523
  %3440 = extractelement <1024 x i32> %t29, i32 524
  %3441 = sext i32 %3440 to i64
  %3442 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3441
  %3443 = load i32, i32* %3442, align 4, !tbaa !400
  %3444 = insertelement <1024 x i32> %3439, i32 %3443, i32 524
  %3445 = extractelement <1024 x i32> %t29, i32 525
  %3446 = sext i32 %3445 to i64
  %3447 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3446
  %3448 = load i32, i32* %3447, align 4, !tbaa !400
  %3449 = insertelement <1024 x i32> %3444, i32 %3448, i32 525
  %3450 = extractelement <1024 x i32> %t29, i32 526
  %3451 = sext i32 %3450 to i64
  %3452 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3451
  %3453 = load i32, i32* %3452, align 4, !tbaa !400
  %3454 = insertelement <1024 x i32> %3449, i32 %3453, i32 526
  %3455 = extractelement <1024 x i32> %t29, i32 527
  %3456 = sext i32 %3455 to i64
  %3457 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3456
  %3458 = load i32, i32* %3457, align 4, !tbaa !400
  %3459 = insertelement <1024 x i32> %3454, i32 %3458, i32 527
  %3460 = extractelement <1024 x i32> %t29, i32 528
  %3461 = sext i32 %3460 to i64
  %3462 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3461
  %3463 = load i32, i32* %3462, align 4, !tbaa !400
  %3464 = insertelement <1024 x i32> %3459, i32 %3463, i32 528
  %3465 = extractelement <1024 x i32> %t29, i32 529
  %3466 = sext i32 %3465 to i64
  %3467 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3466
  %3468 = load i32, i32* %3467, align 4, !tbaa !400
  %3469 = insertelement <1024 x i32> %3464, i32 %3468, i32 529
  %3470 = extractelement <1024 x i32> %t29, i32 530
  %3471 = sext i32 %3470 to i64
  %3472 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3471
  %3473 = load i32, i32* %3472, align 4, !tbaa !400
  %3474 = insertelement <1024 x i32> %3469, i32 %3473, i32 530
  %3475 = extractelement <1024 x i32> %t29, i32 531
  %3476 = sext i32 %3475 to i64
  %3477 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3476
  %3478 = load i32, i32* %3477, align 4, !tbaa !400
  %3479 = insertelement <1024 x i32> %3474, i32 %3478, i32 531
  %3480 = extractelement <1024 x i32> %t29, i32 532
  %3481 = sext i32 %3480 to i64
  %3482 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3481
  %3483 = load i32, i32* %3482, align 4, !tbaa !400
  %3484 = insertelement <1024 x i32> %3479, i32 %3483, i32 532
  %3485 = extractelement <1024 x i32> %t29, i32 533
  %3486 = sext i32 %3485 to i64
  %3487 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3486
  %3488 = load i32, i32* %3487, align 4, !tbaa !400
  %3489 = insertelement <1024 x i32> %3484, i32 %3488, i32 533
  %3490 = extractelement <1024 x i32> %t29, i32 534
  %3491 = sext i32 %3490 to i64
  %3492 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3491
  %3493 = load i32, i32* %3492, align 4, !tbaa !400
  %3494 = insertelement <1024 x i32> %3489, i32 %3493, i32 534
  %3495 = extractelement <1024 x i32> %t29, i32 535
  %3496 = sext i32 %3495 to i64
  %3497 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3496
  %3498 = load i32, i32* %3497, align 4, !tbaa !400
  %3499 = insertelement <1024 x i32> %3494, i32 %3498, i32 535
  %3500 = extractelement <1024 x i32> %t29, i32 536
  %3501 = sext i32 %3500 to i64
  %3502 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3501
  %3503 = load i32, i32* %3502, align 4, !tbaa !400
  %3504 = insertelement <1024 x i32> %3499, i32 %3503, i32 536
  %3505 = extractelement <1024 x i32> %t29, i32 537
  %3506 = sext i32 %3505 to i64
  %3507 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3506
  %3508 = load i32, i32* %3507, align 4, !tbaa !400
  %3509 = insertelement <1024 x i32> %3504, i32 %3508, i32 537
  %3510 = extractelement <1024 x i32> %t29, i32 538
  %3511 = sext i32 %3510 to i64
  %3512 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3511
  %3513 = load i32, i32* %3512, align 4, !tbaa !400
  %3514 = insertelement <1024 x i32> %3509, i32 %3513, i32 538
  %3515 = extractelement <1024 x i32> %t29, i32 539
  %3516 = sext i32 %3515 to i64
  %3517 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3516
  %3518 = load i32, i32* %3517, align 4, !tbaa !400
  %3519 = insertelement <1024 x i32> %3514, i32 %3518, i32 539
  %3520 = extractelement <1024 x i32> %t29, i32 540
  %3521 = sext i32 %3520 to i64
  %3522 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3521
  %3523 = load i32, i32* %3522, align 4, !tbaa !400
  %3524 = insertelement <1024 x i32> %3519, i32 %3523, i32 540
  %3525 = extractelement <1024 x i32> %t29, i32 541
  %3526 = sext i32 %3525 to i64
  %3527 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3526
  %3528 = load i32, i32* %3527, align 4, !tbaa !400
  %3529 = insertelement <1024 x i32> %3524, i32 %3528, i32 541
  %3530 = extractelement <1024 x i32> %t29, i32 542
  %3531 = sext i32 %3530 to i64
  %3532 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3531
  %3533 = load i32, i32* %3532, align 4, !tbaa !400
  %3534 = insertelement <1024 x i32> %3529, i32 %3533, i32 542
  %3535 = extractelement <1024 x i32> %t29, i32 543
  %3536 = sext i32 %3535 to i64
  %3537 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3536
  %3538 = load i32, i32* %3537, align 4, !tbaa !400
  %3539 = insertelement <1024 x i32> %3534, i32 %3538, i32 543
  %3540 = extractelement <1024 x i32> %t29, i32 544
  %3541 = sext i32 %3540 to i64
  %3542 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3541
  %3543 = load i32, i32* %3542, align 4, !tbaa !400
  %3544 = insertelement <1024 x i32> %3539, i32 %3543, i32 544
  %3545 = extractelement <1024 x i32> %t29, i32 545
  %3546 = sext i32 %3545 to i64
  %3547 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3546
  %3548 = load i32, i32* %3547, align 4, !tbaa !400
  %3549 = insertelement <1024 x i32> %3544, i32 %3548, i32 545
  %3550 = extractelement <1024 x i32> %t29, i32 546
  %3551 = sext i32 %3550 to i64
  %3552 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3551
  %3553 = load i32, i32* %3552, align 4, !tbaa !400
  %3554 = insertelement <1024 x i32> %3549, i32 %3553, i32 546
  %3555 = extractelement <1024 x i32> %t29, i32 547
  %3556 = sext i32 %3555 to i64
  %3557 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3556
  %3558 = load i32, i32* %3557, align 4, !tbaa !400
  %3559 = insertelement <1024 x i32> %3554, i32 %3558, i32 547
  %3560 = extractelement <1024 x i32> %t29, i32 548
  %3561 = sext i32 %3560 to i64
  %3562 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3561
  %3563 = load i32, i32* %3562, align 4, !tbaa !400
  %3564 = insertelement <1024 x i32> %3559, i32 %3563, i32 548
  %3565 = extractelement <1024 x i32> %t29, i32 549
  %3566 = sext i32 %3565 to i64
  %3567 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3566
  %3568 = load i32, i32* %3567, align 4, !tbaa !400
  %3569 = insertelement <1024 x i32> %3564, i32 %3568, i32 549
  %3570 = extractelement <1024 x i32> %t29, i32 550
  %3571 = sext i32 %3570 to i64
  %3572 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3571
  %3573 = load i32, i32* %3572, align 4, !tbaa !400
  %3574 = insertelement <1024 x i32> %3569, i32 %3573, i32 550
  %3575 = extractelement <1024 x i32> %t29, i32 551
  %3576 = sext i32 %3575 to i64
  %3577 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3576
  %3578 = load i32, i32* %3577, align 4, !tbaa !400
  %3579 = insertelement <1024 x i32> %3574, i32 %3578, i32 551
  %3580 = extractelement <1024 x i32> %t29, i32 552
  %3581 = sext i32 %3580 to i64
  %3582 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3581
  %3583 = load i32, i32* %3582, align 4, !tbaa !400
  %3584 = insertelement <1024 x i32> %3579, i32 %3583, i32 552
  %3585 = extractelement <1024 x i32> %t29, i32 553
  %3586 = sext i32 %3585 to i64
  %3587 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3586
  %3588 = load i32, i32* %3587, align 4, !tbaa !400
  %3589 = insertelement <1024 x i32> %3584, i32 %3588, i32 553
  %3590 = extractelement <1024 x i32> %t29, i32 554
  %3591 = sext i32 %3590 to i64
  %3592 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3591
  %3593 = load i32, i32* %3592, align 4, !tbaa !400
  %3594 = insertelement <1024 x i32> %3589, i32 %3593, i32 554
  %3595 = extractelement <1024 x i32> %t29, i32 555
  %3596 = sext i32 %3595 to i64
  %3597 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3596
  %3598 = load i32, i32* %3597, align 4, !tbaa !400
  %3599 = insertelement <1024 x i32> %3594, i32 %3598, i32 555
  %3600 = extractelement <1024 x i32> %t29, i32 556
  %3601 = sext i32 %3600 to i64
  %3602 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3601
  %3603 = load i32, i32* %3602, align 4, !tbaa !400
  %3604 = insertelement <1024 x i32> %3599, i32 %3603, i32 556
  %3605 = extractelement <1024 x i32> %t29, i32 557
  %3606 = sext i32 %3605 to i64
  %3607 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3606
  %3608 = load i32, i32* %3607, align 4, !tbaa !400
  %3609 = insertelement <1024 x i32> %3604, i32 %3608, i32 557
  %3610 = extractelement <1024 x i32> %t29, i32 558
  %3611 = sext i32 %3610 to i64
  %3612 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3611
  %3613 = load i32, i32* %3612, align 4, !tbaa !400
  %3614 = insertelement <1024 x i32> %3609, i32 %3613, i32 558
  %3615 = extractelement <1024 x i32> %t29, i32 559
  %3616 = sext i32 %3615 to i64
  %3617 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3616
  %3618 = load i32, i32* %3617, align 4, !tbaa !400
  %3619 = insertelement <1024 x i32> %3614, i32 %3618, i32 559
  %3620 = extractelement <1024 x i32> %t29, i32 560
  %3621 = sext i32 %3620 to i64
  %3622 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3621
  %3623 = load i32, i32* %3622, align 4, !tbaa !400
  %3624 = insertelement <1024 x i32> %3619, i32 %3623, i32 560
  %3625 = extractelement <1024 x i32> %t29, i32 561
  %3626 = sext i32 %3625 to i64
  %3627 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3626
  %3628 = load i32, i32* %3627, align 4, !tbaa !400
  %3629 = insertelement <1024 x i32> %3624, i32 %3628, i32 561
  %3630 = extractelement <1024 x i32> %t29, i32 562
  %3631 = sext i32 %3630 to i64
  %3632 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3631
  %3633 = load i32, i32* %3632, align 4, !tbaa !400
  %3634 = insertelement <1024 x i32> %3629, i32 %3633, i32 562
  %3635 = extractelement <1024 x i32> %t29, i32 563
  %3636 = sext i32 %3635 to i64
  %3637 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3636
  %3638 = load i32, i32* %3637, align 4, !tbaa !400
  %3639 = insertelement <1024 x i32> %3634, i32 %3638, i32 563
  %3640 = extractelement <1024 x i32> %t29, i32 564
  %3641 = sext i32 %3640 to i64
  %3642 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3641
  %3643 = load i32, i32* %3642, align 4, !tbaa !400
  %3644 = insertelement <1024 x i32> %3639, i32 %3643, i32 564
  %3645 = extractelement <1024 x i32> %t29, i32 565
  %3646 = sext i32 %3645 to i64
  %3647 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3646
  %3648 = load i32, i32* %3647, align 4, !tbaa !400
  %3649 = insertelement <1024 x i32> %3644, i32 %3648, i32 565
  %3650 = extractelement <1024 x i32> %t29, i32 566
  %3651 = sext i32 %3650 to i64
  %3652 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3651
  %3653 = load i32, i32* %3652, align 4, !tbaa !400
  %3654 = insertelement <1024 x i32> %3649, i32 %3653, i32 566
  %3655 = extractelement <1024 x i32> %t29, i32 567
  %3656 = sext i32 %3655 to i64
  %3657 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3656
  %3658 = load i32, i32* %3657, align 4, !tbaa !400
  %3659 = insertelement <1024 x i32> %3654, i32 %3658, i32 567
  %3660 = extractelement <1024 x i32> %t29, i32 568
  %3661 = sext i32 %3660 to i64
  %3662 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3661
  %3663 = load i32, i32* %3662, align 4, !tbaa !400
  %3664 = insertelement <1024 x i32> %3659, i32 %3663, i32 568
  %3665 = extractelement <1024 x i32> %t29, i32 569
  %3666 = sext i32 %3665 to i64
  %3667 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3666
  %3668 = load i32, i32* %3667, align 4, !tbaa !400
  %3669 = insertelement <1024 x i32> %3664, i32 %3668, i32 569
  %3670 = extractelement <1024 x i32> %t29, i32 570
  %3671 = sext i32 %3670 to i64
  %3672 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3671
  %3673 = load i32, i32* %3672, align 4, !tbaa !400
  %3674 = insertelement <1024 x i32> %3669, i32 %3673, i32 570
  %3675 = extractelement <1024 x i32> %t29, i32 571
  %3676 = sext i32 %3675 to i64
  %3677 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3676
  %3678 = load i32, i32* %3677, align 4, !tbaa !400
  %3679 = insertelement <1024 x i32> %3674, i32 %3678, i32 571
  %3680 = extractelement <1024 x i32> %t29, i32 572
  %3681 = sext i32 %3680 to i64
  %3682 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3681
  %3683 = load i32, i32* %3682, align 4, !tbaa !400
  %3684 = insertelement <1024 x i32> %3679, i32 %3683, i32 572
  %3685 = extractelement <1024 x i32> %t29, i32 573
  %3686 = sext i32 %3685 to i64
  %3687 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3686
  %3688 = load i32, i32* %3687, align 4, !tbaa !400
  %3689 = insertelement <1024 x i32> %3684, i32 %3688, i32 573
  %3690 = extractelement <1024 x i32> %t29, i32 574
  %3691 = sext i32 %3690 to i64
  %3692 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3691
  %3693 = load i32, i32* %3692, align 4, !tbaa !400
  %3694 = insertelement <1024 x i32> %3689, i32 %3693, i32 574
  %3695 = extractelement <1024 x i32> %t29, i32 575
  %3696 = sext i32 %3695 to i64
  %3697 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3696
  %3698 = load i32, i32* %3697, align 4, !tbaa !400
  %3699 = insertelement <1024 x i32> %3694, i32 %3698, i32 575
  %3700 = extractelement <1024 x i32> %t29, i32 576
  %3701 = sext i32 %3700 to i64
  %3702 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3701
  %3703 = load i32, i32* %3702, align 4, !tbaa !400
  %3704 = insertelement <1024 x i32> %3699, i32 %3703, i32 576
  %3705 = extractelement <1024 x i32> %t29, i32 577
  %3706 = sext i32 %3705 to i64
  %3707 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3706
  %3708 = load i32, i32* %3707, align 4, !tbaa !400
  %3709 = insertelement <1024 x i32> %3704, i32 %3708, i32 577
  %3710 = extractelement <1024 x i32> %t29, i32 578
  %3711 = sext i32 %3710 to i64
  %3712 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3711
  %3713 = load i32, i32* %3712, align 4, !tbaa !400
  %3714 = insertelement <1024 x i32> %3709, i32 %3713, i32 578
  %3715 = extractelement <1024 x i32> %t29, i32 579
  %3716 = sext i32 %3715 to i64
  %3717 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3716
  %3718 = load i32, i32* %3717, align 4, !tbaa !400
  %3719 = insertelement <1024 x i32> %3714, i32 %3718, i32 579
  %3720 = extractelement <1024 x i32> %t29, i32 580
  %3721 = sext i32 %3720 to i64
  %3722 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3721
  %3723 = load i32, i32* %3722, align 4, !tbaa !400
  %3724 = insertelement <1024 x i32> %3719, i32 %3723, i32 580
  %3725 = extractelement <1024 x i32> %t29, i32 581
  %3726 = sext i32 %3725 to i64
  %3727 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3726
  %3728 = load i32, i32* %3727, align 4, !tbaa !400
  %3729 = insertelement <1024 x i32> %3724, i32 %3728, i32 581
  %3730 = extractelement <1024 x i32> %t29, i32 582
  %3731 = sext i32 %3730 to i64
  %3732 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3731
  %3733 = load i32, i32* %3732, align 4, !tbaa !400
  %3734 = insertelement <1024 x i32> %3729, i32 %3733, i32 582
  %3735 = extractelement <1024 x i32> %t29, i32 583
  %3736 = sext i32 %3735 to i64
  %3737 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3736
  %3738 = load i32, i32* %3737, align 4, !tbaa !400
  %3739 = insertelement <1024 x i32> %3734, i32 %3738, i32 583
  %3740 = extractelement <1024 x i32> %t29, i32 584
  %3741 = sext i32 %3740 to i64
  %3742 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3741
  %3743 = load i32, i32* %3742, align 4, !tbaa !400
  %3744 = insertelement <1024 x i32> %3739, i32 %3743, i32 584
  %3745 = extractelement <1024 x i32> %t29, i32 585
  %3746 = sext i32 %3745 to i64
  %3747 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3746
  %3748 = load i32, i32* %3747, align 4, !tbaa !400
  %3749 = insertelement <1024 x i32> %3744, i32 %3748, i32 585
  %3750 = extractelement <1024 x i32> %t29, i32 586
  %3751 = sext i32 %3750 to i64
  %3752 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3751
  %3753 = load i32, i32* %3752, align 4, !tbaa !400
  %3754 = insertelement <1024 x i32> %3749, i32 %3753, i32 586
  %3755 = extractelement <1024 x i32> %t29, i32 587
  %3756 = sext i32 %3755 to i64
  %3757 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3756
  %3758 = load i32, i32* %3757, align 4, !tbaa !400
  %3759 = insertelement <1024 x i32> %3754, i32 %3758, i32 587
  %3760 = extractelement <1024 x i32> %t29, i32 588
  %3761 = sext i32 %3760 to i64
  %3762 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3761
  %3763 = load i32, i32* %3762, align 4, !tbaa !400
  %3764 = insertelement <1024 x i32> %3759, i32 %3763, i32 588
  %3765 = extractelement <1024 x i32> %t29, i32 589
  %3766 = sext i32 %3765 to i64
  %3767 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3766
  %3768 = load i32, i32* %3767, align 4, !tbaa !400
  %3769 = insertelement <1024 x i32> %3764, i32 %3768, i32 589
  %3770 = extractelement <1024 x i32> %t29, i32 590
  %3771 = sext i32 %3770 to i64
  %3772 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3771
  %3773 = load i32, i32* %3772, align 4, !tbaa !400
  %3774 = insertelement <1024 x i32> %3769, i32 %3773, i32 590
  %3775 = extractelement <1024 x i32> %t29, i32 591
  %3776 = sext i32 %3775 to i64
  %3777 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3776
  %3778 = load i32, i32* %3777, align 4, !tbaa !400
  %3779 = insertelement <1024 x i32> %3774, i32 %3778, i32 591
  %3780 = extractelement <1024 x i32> %t29, i32 592
  %3781 = sext i32 %3780 to i64
  %3782 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3781
  %3783 = load i32, i32* %3782, align 4, !tbaa !400
  %3784 = insertelement <1024 x i32> %3779, i32 %3783, i32 592
  %3785 = extractelement <1024 x i32> %t29, i32 593
  %3786 = sext i32 %3785 to i64
  %3787 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3786
  %3788 = load i32, i32* %3787, align 4, !tbaa !400
  %3789 = insertelement <1024 x i32> %3784, i32 %3788, i32 593
  %3790 = extractelement <1024 x i32> %t29, i32 594
  %3791 = sext i32 %3790 to i64
  %3792 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3791
  %3793 = load i32, i32* %3792, align 4, !tbaa !400
  %3794 = insertelement <1024 x i32> %3789, i32 %3793, i32 594
  %3795 = extractelement <1024 x i32> %t29, i32 595
  %3796 = sext i32 %3795 to i64
  %3797 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3796
  %3798 = load i32, i32* %3797, align 4, !tbaa !400
  %3799 = insertelement <1024 x i32> %3794, i32 %3798, i32 595
  %3800 = extractelement <1024 x i32> %t29, i32 596
  %3801 = sext i32 %3800 to i64
  %3802 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3801
  %3803 = load i32, i32* %3802, align 4, !tbaa !400
  %3804 = insertelement <1024 x i32> %3799, i32 %3803, i32 596
  %3805 = extractelement <1024 x i32> %t29, i32 597
  %3806 = sext i32 %3805 to i64
  %3807 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3806
  %3808 = load i32, i32* %3807, align 4, !tbaa !400
  %3809 = insertelement <1024 x i32> %3804, i32 %3808, i32 597
  %3810 = extractelement <1024 x i32> %t29, i32 598
  %3811 = sext i32 %3810 to i64
  %3812 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3811
  %3813 = load i32, i32* %3812, align 4, !tbaa !400
  %3814 = insertelement <1024 x i32> %3809, i32 %3813, i32 598
  %3815 = extractelement <1024 x i32> %t29, i32 599
  %3816 = sext i32 %3815 to i64
  %3817 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3816
  %3818 = load i32, i32* %3817, align 4, !tbaa !400
  %3819 = insertelement <1024 x i32> %3814, i32 %3818, i32 599
  %3820 = extractelement <1024 x i32> %t29, i32 600
  %3821 = sext i32 %3820 to i64
  %3822 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3821
  %3823 = load i32, i32* %3822, align 4, !tbaa !400
  %3824 = insertelement <1024 x i32> %3819, i32 %3823, i32 600
  %3825 = extractelement <1024 x i32> %t29, i32 601
  %3826 = sext i32 %3825 to i64
  %3827 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3826
  %3828 = load i32, i32* %3827, align 4, !tbaa !400
  %3829 = insertelement <1024 x i32> %3824, i32 %3828, i32 601
  %3830 = extractelement <1024 x i32> %t29, i32 602
  %3831 = sext i32 %3830 to i64
  %3832 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3831
  %3833 = load i32, i32* %3832, align 4, !tbaa !400
  %3834 = insertelement <1024 x i32> %3829, i32 %3833, i32 602
  %3835 = extractelement <1024 x i32> %t29, i32 603
  %3836 = sext i32 %3835 to i64
  %3837 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3836
  %3838 = load i32, i32* %3837, align 4, !tbaa !400
  %3839 = insertelement <1024 x i32> %3834, i32 %3838, i32 603
  %3840 = extractelement <1024 x i32> %t29, i32 604
  %3841 = sext i32 %3840 to i64
  %3842 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3841
  %3843 = load i32, i32* %3842, align 4, !tbaa !400
  %3844 = insertelement <1024 x i32> %3839, i32 %3843, i32 604
  %3845 = extractelement <1024 x i32> %t29, i32 605
  %3846 = sext i32 %3845 to i64
  %3847 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3846
  %3848 = load i32, i32* %3847, align 4, !tbaa !400
  %3849 = insertelement <1024 x i32> %3844, i32 %3848, i32 605
  %3850 = extractelement <1024 x i32> %t29, i32 606
  %3851 = sext i32 %3850 to i64
  %3852 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3851
  %3853 = load i32, i32* %3852, align 4, !tbaa !400
  %3854 = insertelement <1024 x i32> %3849, i32 %3853, i32 606
  %3855 = extractelement <1024 x i32> %t29, i32 607
  %3856 = sext i32 %3855 to i64
  %3857 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3856
  %3858 = load i32, i32* %3857, align 4, !tbaa !400
  %3859 = insertelement <1024 x i32> %3854, i32 %3858, i32 607
  %3860 = extractelement <1024 x i32> %t29, i32 608
  %3861 = sext i32 %3860 to i64
  %3862 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3861
  %3863 = load i32, i32* %3862, align 4, !tbaa !400
  %3864 = insertelement <1024 x i32> %3859, i32 %3863, i32 608
  %3865 = extractelement <1024 x i32> %t29, i32 609
  %3866 = sext i32 %3865 to i64
  %3867 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3866
  %3868 = load i32, i32* %3867, align 4, !tbaa !400
  %3869 = insertelement <1024 x i32> %3864, i32 %3868, i32 609
  %3870 = extractelement <1024 x i32> %t29, i32 610
  %3871 = sext i32 %3870 to i64
  %3872 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3871
  %3873 = load i32, i32* %3872, align 4, !tbaa !400
  %3874 = insertelement <1024 x i32> %3869, i32 %3873, i32 610
  %3875 = extractelement <1024 x i32> %t29, i32 611
  %3876 = sext i32 %3875 to i64
  %3877 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3876
  %3878 = load i32, i32* %3877, align 4, !tbaa !400
  %3879 = insertelement <1024 x i32> %3874, i32 %3878, i32 611
  %3880 = extractelement <1024 x i32> %t29, i32 612
  %3881 = sext i32 %3880 to i64
  %3882 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3881
  %3883 = load i32, i32* %3882, align 4, !tbaa !400
  %3884 = insertelement <1024 x i32> %3879, i32 %3883, i32 612
  %3885 = extractelement <1024 x i32> %t29, i32 613
  %3886 = sext i32 %3885 to i64
  %3887 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3886
  %3888 = load i32, i32* %3887, align 4, !tbaa !400
  %3889 = insertelement <1024 x i32> %3884, i32 %3888, i32 613
  %3890 = extractelement <1024 x i32> %t29, i32 614
  %3891 = sext i32 %3890 to i64
  %3892 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3891
  %3893 = load i32, i32* %3892, align 4, !tbaa !400
  %3894 = insertelement <1024 x i32> %3889, i32 %3893, i32 614
  %3895 = extractelement <1024 x i32> %t29, i32 615
  %3896 = sext i32 %3895 to i64
  %3897 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3896
  %3898 = load i32, i32* %3897, align 4, !tbaa !400
  %3899 = insertelement <1024 x i32> %3894, i32 %3898, i32 615
  %3900 = extractelement <1024 x i32> %t29, i32 616
  %3901 = sext i32 %3900 to i64
  %3902 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3901
  %3903 = load i32, i32* %3902, align 4, !tbaa !400
  %3904 = insertelement <1024 x i32> %3899, i32 %3903, i32 616
  %3905 = extractelement <1024 x i32> %t29, i32 617
  %3906 = sext i32 %3905 to i64
  %3907 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3906
  %3908 = load i32, i32* %3907, align 4, !tbaa !400
  %3909 = insertelement <1024 x i32> %3904, i32 %3908, i32 617
  %3910 = extractelement <1024 x i32> %t29, i32 618
  %3911 = sext i32 %3910 to i64
  %3912 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3911
  %3913 = load i32, i32* %3912, align 4, !tbaa !400
  %3914 = insertelement <1024 x i32> %3909, i32 %3913, i32 618
  %3915 = extractelement <1024 x i32> %t29, i32 619
  %3916 = sext i32 %3915 to i64
  %3917 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3916
  %3918 = load i32, i32* %3917, align 4, !tbaa !400
  %3919 = insertelement <1024 x i32> %3914, i32 %3918, i32 619
  %3920 = extractelement <1024 x i32> %t29, i32 620
  %3921 = sext i32 %3920 to i64
  %3922 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3921
  %3923 = load i32, i32* %3922, align 4, !tbaa !400
  %3924 = insertelement <1024 x i32> %3919, i32 %3923, i32 620
  %3925 = extractelement <1024 x i32> %t29, i32 621
  %3926 = sext i32 %3925 to i64
  %3927 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3926
  %3928 = load i32, i32* %3927, align 4, !tbaa !400
  %3929 = insertelement <1024 x i32> %3924, i32 %3928, i32 621
  %3930 = extractelement <1024 x i32> %t29, i32 622
  %3931 = sext i32 %3930 to i64
  %3932 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3931
  %3933 = load i32, i32* %3932, align 4, !tbaa !400
  %3934 = insertelement <1024 x i32> %3929, i32 %3933, i32 622
  %3935 = extractelement <1024 x i32> %t29, i32 623
  %3936 = sext i32 %3935 to i64
  %3937 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3936
  %3938 = load i32, i32* %3937, align 4, !tbaa !400
  %3939 = insertelement <1024 x i32> %3934, i32 %3938, i32 623
  %3940 = extractelement <1024 x i32> %t29, i32 624
  %3941 = sext i32 %3940 to i64
  %3942 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3941
  %3943 = load i32, i32* %3942, align 4, !tbaa !400
  %3944 = insertelement <1024 x i32> %3939, i32 %3943, i32 624
  %3945 = extractelement <1024 x i32> %t29, i32 625
  %3946 = sext i32 %3945 to i64
  %3947 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3946
  %3948 = load i32, i32* %3947, align 4, !tbaa !400
  %3949 = insertelement <1024 x i32> %3944, i32 %3948, i32 625
  %3950 = extractelement <1024 x i32> %t29, i32 626
  %3951 = sext i32 %3950 to i64
  %3952 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3951
  %3953 = load i32, i32* %3952, align 4, !tbaa !400
  %3954 = insertelement <1024 x i32> %3949, i32 %3953, i32 626
  %3955 = extractelement <1024 x i32> %t29, i32 627
  %3956 = sext i32 %3955 to i64
  %3957 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3956
  %3958 = load i32, i32* %3957, align 4, !tbaa !400
  %3959 = insertelement <1024 x i32> %3954, i32 %3958, i32 627
  %3960 = extractelement <1024 x i32> %t29, i32 628
  %3961 = sext i32 %3960 to i64
  %3962 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3961
  %3963 = load i32, i32* %3962, align 4, !tbaa !400
  %3964 = insertelement <1024 x i32> %3959, i32 %3963, i32 628
  %3965 = extractelement <1024 x i32> %t29, i32 629
  %3966 = sext i32 %3965 to i64
  %3967 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3966
  %3968 = load i32, i32* %3967, align 4, !tbaa !400
  %3969 = insertelement <1024 x i32> %3964, i32 %3968, i32 629
  %3970 = extractelement <1024 x i32> %t29, i32 630
  %3971 = sext i32 %3970 to i64
  %3972 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3971
  %3973 = load i32, i32* %3972, align 4, !tbaa !400
  %3974 = insertelement <1024 x i32> %3969, i32 %3973, i32 630
  %3975 = extractelement <1024 x i32> %t29, i32 631
  %3976 = sext i32 %3975 to i64
  %3977 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3976
  %3978 = load i32, i32* %3977, align 4, !tbaa !400
  %3979 = insertelement <1024 x i32> %3974, i32 %3978, i32 631
  %3980 = extractelement <1024 x i32> %t29, i32 632
  %3981 = sext i32 %3980 to i64
  %3982 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3981
  %3983 = load i32, i32* %3982, align 4, !tbaa !400
  %3984 = insertelement <1024 x i32> %3979, i32 %3983, i32 632
  %3985 = extractelement <1024 x i32> %t29, i32 633
  %3986 = sext i32 %3985 to i64
  %3987 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3986
  %3988 = load i32, i32* %3987, align 4, !tbaa !400
  %3989 = insertelement <1024 x i32> %3984, i32 %3988, i32 633
  %3990 = extractelement <1024 x i32> %t29, i32 634
  %3991 = sext i32 %3990 to i64
  %3992 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3991
  %3993 = load i32, i32* %3992, align 4, !tbaa !400
  %3994 = insertelement <1024 x i32> %3989, i32 %3993, i32 634
  %3995 = extractelement <1024 x i32> %t29, i32 635
  %3996 = sext i32 %3995 to i64
  %3997 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %3996
  %3998 = load i32, i32* %3997, align 4, !tbaa !400
  %3999 = insertelement <1024 x i32> %3994, i32 %3998, i32 635
  %4000 = extractelement <1024 x i32> %t29, i32 636
  %4001 = sext i32 %4000 to i64
  %4002 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4001
  %4003 = load i32, i32* %4002, align 4, !tbaa !400
  %4004 = insertelement <1024 x i32> %3999, i32 %4003, i32 636
  %4005 = extractelement <1024 x i32> %t29, i32 637
  %4006 = sext i32 %4005 to i64
  %4007 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4006
  %4008 = load i32, i32* %4007, align 4, !tbaa !400
  %4009 = insertelement <1024 x i32> %4004, i32 %4008, i32 637
  %4010 = extractelement <1024 x i32> %t29, i32 638
  %4011 = sext i32 %4010 to i64
  %4012 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4011
  %4013 = load i32, i32* %4012, align 4, !tbaa !400
  %4014 = insertelement <1024 x i32> %4009, i32 %4013, i32 638
  %4015 = extractelement <1024 x i32> %t29, i32 639
  %4016 = sext i32 %4015 to i64
  %4017 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4016
  %4018 = load i32, i32* %4017, align 4, !tbaa !400
  %4019 = insertelement <1024 x i32> %4014, i32 %4018, i32 639
  %4020 = extractelement <1024 x i32> %t29, i32 640
  %4021 = sext i32 %4020 to i64
  %4022 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4021
  %4023 = load i32, i32* %4022, align 4, !tbaa !400
  %4024 = insertelement <1024 x i32> %4019, i32 %4023, i32 640
  %4025 = extractelement <1024 x i32> %t29, i32 641
  %4026 = sext i32 %4025 to i64
  %4027 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4026
  %4028 = load i32, i32* %4027, align 4, !tbaa !400
  %4029 = insertelement <1024 x i32> %4024, i32 %4028, i32 641
  %4030 = extractelement <1024 x i32> %t29, i32 642
  %4031 = sext i32 %4030 to i64
  %4032 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4031
  %4033 = load i32, i32* %4032, align 4, !tbaa !400
  %4034 = insertelement <1024 x i32> %4029, i32 %4033, i32 642
  %4035 = extractelement <1024 x i32> %t29, i32 643
  %4036 = sext i32 %4035 to i64
  %4037 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4036
  %4038 = load i32, i32* %4037, align 4, !tbaa !400
  %4039 = insertelement <1024 x i32> %4034, i32 %4038, i32 643
  %4040 = extractelement <1024 x i32> %t29, i32 644
  %4041 = sext i32 %4040 to i64
  %4042 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4041
  %4043 = load i32, i32* %4042, align 4, !tbaa !400
  %4044 = insertelement <1024 x i32> %4039, i32 %4043, i32 644
  %4045 = extractelement <1024 x i32> %t29, i32 645
  %4046 = sext i32 %4045 to i64
  %4047 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4046
  %4048 = load i32, i32* %4047, align 4, !tbaa !400
  %4049 = insertelement <1024 x i32> %4044, i32 %4048, i32 645
  %4050 = extractelement <1024 x i32> %t29, i32 646
  %4051 = sext i32 %4050 to i64
  %4052 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4051
  %4053 = load i32, i32* %4052, align 4, !tbaa !400
  %4054 = insertelement <1024 x i32> %4049, i32 %4053, i32 646
  %4055 = extractelement <1024 x i32> %t29, i32 647
  %4056 = sext i32 %4055 to i64
  %4057 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4056
  %4058 = load i32, i32* %4057, align 4, !tbaa !400
  %4059 = insertelement <1024 x i32> %4054, i32 %4058, i32 647
  %4060 = extractelement <1024 x i32> %t29, i32 648
  %4061 = sext i32 %4060 to i64
  %4062 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4061
  %4063 = load i32, i32* %4062, align 4, !tbaa !400
  %4064 = insertelement <1024 x i32> %4059, i32 %4063, i32 648
  %4065 = extractelement <1024 x i32> %t29, i32 649
  %4066 = sext i32 %4065 to i64
  %4067 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4066
  %4068 = load i32, i32* %4067, align 4, !tbaa !400
  %4069 = insertelement <1024 x i32> %4064, i32 %4068, i32 649
  %4070 = extractelement <1024 x i32> %t29, i32 650
  %4071 = sext i32 %4070 to i64
  %4072 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4071
  %4073 = load i32, i32* %4072, align 4, !tbaa !400
  %4074 = insertelement <1024 x i32> %4069, i32 %4073, i32 650
  %4075 = extractelement <1024 x i32> %t29, i32 651
  %4076 = sext i32 %4075 to i64
  %4077 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4076
  %4078 = load i32, i32* %4077, align 4, !tbaa !400
  %4079 = insertelement <1024 x i32> %4074, i32 %4078, i32 651
  %4080 = extractelement <1024 x i32> %t29, i32 652
  %4081 = sext i32 %4080 to i64
  %4082 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4081
  %4083 = load i32, i32* %4082, align 4, !tbaa !400
  %4084 = insertelement <1024 x i32> %4079, i32 %4083, i32 652
  %4085 = extractelement <1024 x i32> %t29, i32 653
  %4086 = sext i32 %4085 to i64
  %4087 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4086
  %4088 = load i32, i32* %4087, align 4, !tbaa !400
  %4089 = insertelement <1024 x i32> %4084, i32 %4088, i32 653
  %4090 = extractelement <1024 x i32> %t29, i32 654
  %4091 = sext i32 %4090 to i64
  %4092 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4091
  %4093 = load i32, i32* %4092, align 4, !tbaa !400
  %4094 = insertelement <1024 x i32> %4089, i32 %4093, i32 654
  %4095 = extractelement <1024 x i32> %t29, i32 655
  %4096 = sext i32 %4095 to i64
  %4097 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4096
  %4098 = load i32, i32* %4097, align 4, !tbaa !400
  %4099 = insertelement <1024 x i32> %4094, i32 %4098, i32 655
  %4100 = extractelement <1024 x i32> %t29, i32 656
  %4101 = sext i32 %4100 to i64
  %4102 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4101
  %4103 = load i32, i32* %4102, align 4, !tbaa !400
  %4104 = insertelement <1024 x i32> %4099, i32 %4103, i32 656
  %4105 = extractelement <1024 x i32> %t29, i32 657
  %4106 = sext i32 %4105 to i64
  %4107 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4106
  %4108 = load i32, i32* %4107, align 4, !tbaa !400
  %4109 = insertelement <1024 x i32> %4104, i32 %4108, i32 657
  %4110 = extractelement <1024 x i32> %t29, i32 658
  %4111 = sext i32 %4110 to i64
  %4112 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4111
  %4113 = load i32, i32* %4112, align 4, !tbaa !400
  %4114 = insertelement <1024 x i32> %4109, i32 %4113, i32 658
  %4115 = extractelement <1024 x i32> %t29, i32 659
  %4116 = sext i32 %4115 to i64
  %4117 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4116
  %4118 = load i32, i32* %4117, align 4, !tbaa !400
  %4119 = insertelement <1024 x i32> %4114, i32 %4118, i32 659
  %4120 = extractelement <1024 x i32> %t29, i32 660
  %4121 = sext i32 %4120 to i64
  %4122 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4121
  %4123 = load i32, i32* %4122, align 4, !tbaa !400
  %4124 = insertelement <1024 x i32> %4119, i32 %4123, i32 660
  %4125 = extractelement <1024 x i32> %t29, i32 661
  %4126 = sext i32 %4125 to i64
  %4127 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4126
  %4128 = load i32, i32* %4127, align 4, !tbaa !400
  %4129 = insertelement <1024 x i32> %4124, i32 %4128, i32 661
  %4130 = extractelement <1024 x i32> %t29, i32 662
  %4131 = sext i32 %4130 to i64
  %4132 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4131
  %4133 = load i32, i32* %4132, align 4, !tbaa !400
  %4134 = insertelement <1024 x i32> %4129, i32 %4133, i32 662
  %4135 = extractelement <1024 x i32> %t29, i32 663
  %4136 = sext i32 %4135 to i64
  %4137 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4136
  %4138 = load i32, i32* %4137, align 4, !tbaa !400
  %4139 = insertelement <1024 x i32> %4134, i32 %4138, i32 663
  %4140 = extractelement <1024 x i32> %t29, i32 664
  %4141 = sext i32 %4140 to i64
  %4142 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4141
  %4143 = load i32, i32* %4142, align 4, !tbaa !400
  %4144 = insertelement <1024 x i32> %4139, i32 %4143, i32 664
  %4145 = extractelement <1024 x i32> %t29, i32 665
  %4146 = sext i32 %4145 to i64
  %4147 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4146
  %4148 = load i32, i32* %4147, align 4, !tbaa !400
  %4149 = insertelement <1024 x i32> %4144, i32 %4148, i32 665
  %4150 = extractelement <1024 x i32> %t29, i32 666
  %4151 = sext i32 %4150 to i64
  %4152 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4151
  %4153 = load i32, i32* %4152, align 4, !tbaa !400
  %4154 = insertelement <1024 x i32> %4149, i32 %4153, i32 666
  %4155 = extractelement <1024 x i32> %t29, i32 667
  %4156 = sext i32 %4155 to i64
  %4157 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4156
  %4158 = load i32, i32* %4157, align 4, !tbaa !400
  %4159 = insertelement <1024 x i32> %4154, i32 %4158, i32 667
  %4160 = extractelement <1024 x i32> %t29, i32 668
  %4161 = sext i32 %4160 to i64
  %4162 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4161
  %4163 = load i32, i32* %4162, align 4, !tbaa !400
  %4164 = insertelement <1024 x i32> %4159, i32 %4163, i32 668
  %4165 = extractelement <1024 x i32> %t29, i32 669
  %4166 = sext i32 %4165 to i64
  %4167 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4166
  %4168 = load i32, i32* %4167, align 4, !tbaa !400
  %4169 = insertelement <1024 x i32> %4164, i32 %4168, i32 669
  %4170 = extractelement <1024 x i32> %t29, i32 670
  %4171 = sext i32 %4170 to i64
  %4172 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4171
  %4173 = load i32, i32* %4172, align 4, !tbaa !400
  %4174 = insertelement <1024 x i32> %4169, i32 %4173, i32 670
  %4175 = extractelement <1024 x i32> %t29, i32 671
  %4176 = sext i32 %4175 to i64
  %4177 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4176
  %4178 = load i32, i32* %4177, align 4, !tbaa !400
  %4179 = insertelement <1024 x i32> %4174, i32 %4178, i32 671
  %4180 = extractelement <1024 x i32> %t29, i32 672
  %4181 = sext i32 %4180 to i64
  %4182 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4181
  %4183 = load i32, i32* %4182, align 4, !tbaa !400
  %4184 = insertelement <1024 x i32> %4179, i32 %4183, i32 672
  %4185 = extractelement <1024 x i32> %t29, i32 673
  %4186 = sext i32 %4185 to i64
  %4187 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4186
  %4188 = load i32, i32* %4187, align 4, !tbaa !400
  %4189 = insertelement <1024 x i32> %4184, i32 %4188, i32 673
  %4190 = extractelement <1024 x i32> %t29, i32 674
  %4191 = sext i32 %4190 to i64
  %4192 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4191
  %4193 = load i32, i32* %4192, align 4, !tbaa !400
  %4194 = insertelement <1024 x i32> %4189, i32 %4193, i32 674
  %4195 = extractelement <1024 x i32> %t29, i32 675
  %4196 = sext i32 %4195 to i64
  %4197 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4196
  %4198 = load i32, i32* %4197, align 4, !tbaa !400
  %4199 = insertelement <1024 x i32> %4194, i32 %4198, i32 675
  %4200 = extractelement <1024 x i32> %t29, i32 676
  %4201 = sext i32 %4200 to i64
  %4202 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4201
  %4203 = load i32, i32* %4202, align 4, !tbaa !400
  %4204 = insertelement <1024 x i32> %4199, i32 %4203, i32 676
  %4205 = extractelement <1024 x i32> %t29, i32 677
  %4206 = sext i32 %4205 to i64
  %4207 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4206
  %4208 = load i32, i32* %4207, align 4, !tbaa !400
  %4209 = insertelement <1024 x i32> %4204, i32 %4208, i32 677
  %4210 = extractelement <1024 x i32> %t29, i32 678
  %4211 = sext i32 %4210 to i64
  %4212 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4211
  %4213 = load i32, i32* %4212, align 4, !tbaa !400
  %4214 = insertelement <1024 x i32> %4209, i32 %4213, i32 678
  %4215 = extractelement <1024 x i32> %t29, i32 679
  %4216 = sext i32 %4215 to i64
  %4217 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4216
  %4218 = load i32, i32* %4217, align 4, !tbaa !400
  %4219 = insertelement <1024 x i32> %4214, i32 %4218, i32 679
  %4220 = extractelement <1024 x i32> %t29, i32 680
  %4221 = sext i32 %4220 to i64
  %4222 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4221
  %4223 = load i32, i32* %4222, align 4, !tbaa !400
  %4224 = insertelement <1024 x i32> %4219, i32 %4223, i32 680
  %4225 = extractelement <1024 x i32> %t29, i32 681
  %4226 = sext i32 %4225 to i64
  %4227 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4226
  %4228 = load i32, i32* %4227, align 4, !tbaa !400
  %4229 = insertelement <1024 x i32> %4224, i32 %4228, i32 681
  %4230 = extractelement <1024 x i32> %t29, i32 682
  %4231 = sext i32 %4230 to i64
  %4232 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4231
  %4233 = load i32, i32* %4232, align 4, !tbaa !400
  %4234 = insertelement <1024 x i32> %4229, i32 %4233, i32 682
  %4235 = extractelement <1024 x i32> %t29, i32 683
  %4236 = sext i32 %4235 to i64
  %4237 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4236
  %4238 = load i32, i32* %4237, align 4, !tbaa !400
  %4239 = insertelement <1024 x i32> %4234, i32 %4238, i32 683
  %4240 = extractelement <1024 x i32> %t29, i32 684
  %4241 = sext i32 %4240 to i64
  %4242 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4241
  %4243 = load i32, i32* %4242, align 4, !tbaa !400
  %4244 = insertelement <1024 x i32> %4239, i32 %4243, i32 684
  %4245 = extractelement <1024 x i32> %t29, i32 685
  %4246 = sext i32 %4245 to i64
  %4247 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4246
  %4248 = load i32, i32* %4247, align 4, !tbaa !400
  %4249 = insertelement <1024 x i32> %4244, i32 %4248, i32 685
  %4250 = extractelement <1024 x i32> %t29, i32 686
  %4251 = sext i32 %4250 to i64
  %4252 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4251
  %4253 = load i32, i32* %4252, align 4, !tbaa !400
  %4254 = insertelement <1024 x i32> %4249, i32 %4253, i32 686
  %4255 = extractelement <1024 x i32> %t29, i32 687
  %4256 = sext i32 %4255 to i64
  %4257 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4256
  %4258 = load i32, i32* %4257, align 4, !tbaa !400
  %4259 = insertelement <1024 x i32> %4254, i32 %4258, i32 687
  %4260 = extractelement <1024 x i32> %t29, i32 688
  %4261 = sext i32 %4260 to i64
  %4262 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4261
  %4263 = load i32, i32* %4262, align 4, !tbaa !400
  %4264 = insertelement <1024 x i32> %4259, i32 %4263, i32 688
  %4265 = extractelement <1024 x i32> %t29, i32 689
  %4266 = sext i32 %4265 to i64
  %4267 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4266
  %4268 = load i32, i32* %4267, align 4, !tbaa !400
  %4269 = insertelement <1024 x i32> %4264, i32 %4268, i32 689
  %4270 = extractelement <1024 x i32> %t29, i32 690
  %4271 = sext i32 %4270 to i64
  %4272 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4271
  %4273 = load i32, i32* %4272, align 4, !tbaa !400
  %4274 = insertelement <1024 x i32> %4269, i32 %4273, i32 690
  %4275 = extractelement <1024 x i32> %t29, i32 691
  %4276 = sext i32 %4275 to i64
  %4277 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4276
  %4278 = load i32, i32* %4277, align 4, !tbaa !400
  %4279 = insertelement <1024 x i32> %4274, i32 %4278, i32 691
  %4280 = extractelement <1024 x i32> %t29, i32 692
  %4281 = sext i32 %4280 to i64
  %4282 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4281
  %4283 = load i32, i32* %4282, align 4, !tbaa !400
  %4284 = insertelement <1024 x i32> %4279, i32 %4283, i32 692
  %4285 = extractelement <1024 x i32> %t29, i32 693
  %4286 = sext i32 %4285 to i64
  %4287 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4286
  %4288 = load i32, i32* %4287, align 4, !tbaa !400
  %4289 = insertelement <1024 x i32> %4284, i32 %4288, i32 693
  %4290 = extractelement <1024 x i32> %t29, i32 694
  %4291 = sext i32 %4290 to i64
  %4292 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4291
  %4293 = load i32, i32* %4292, align 4, !tbaa !400
  %4294 = insertelement <1024 x i32> %4289, i32 %4293, i32 694
  %4295 = extractelement <1024 x i32> %t29, i32 695
  %4296 = sext i32 %4295 to i64
  %4297 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4296
  %4298 = load i32, i32* %4297, align 4, !tbaa !400
  %4299 = insertelement <1024 x i32> %4294, i32 %4298, i32 695
  %4300 = extractelement <1024 x i32> %t29, i32 696
  %4301 = sext i32 %4300 to i64
  %4302 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4301
  %4303 = load i32, i32* %4302, align 4, !tbaa !400
  %4304 = insertelement <1024 x i32> %4299, i32 %4303, i32 696
  %4305 = extractelement <1024 x i32> %t29, i32 697
  %4306 = sext i32 %4305 to i64
  %4307 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4306
  %4308 = load i32, i32* %4307, align 4, !tbaa !400
  %4309 = insertelement <1024 x i32> %4304, i32 %4308, i32 697
  %4310 = extractelement <1024 x i32> %t29, i32 698
  %4311 = sext i32 %4310 to i64
  %4312 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4311
  %4313 = load i32, i32* %4312, align 4, !tbaa !400
  %4314 = insertelement <1024 x i32> %4309, i32 %4313, i32 698
  %4315 = extractelement <1024 x i32> %t29, i32 699
  %4316 = sext i32 %4315 to i64
  %4317 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4316
  %4318 = load i32, i32* %4317, align 4, !tbaa !400
  %4319 = insertelement <1024 x i32> %4314, i32 %4318, i32 699
  %4320 = extractelement <1024 x i32> %t29, i32 700
  %4321 = sext i32 %4320 to i64
  %4322 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4321
  %4323 = load i32, i32* %4322, align 4, !tbaa !400
  %4324 = insertelement <1024 x i32> %4319, i32 %4323, i32 700
  %4325 = extractelement <1024 x i32> %t29, i32 701
  %4326 = sext i32 %4325 to i64
  %4327 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4326
  %4328 = load i32, i32* %4327, align 4, !tbaa !400
  %4329 = insertelement <1024 x i32> %4324, i32 %4328, i32 701
  %4330 = extractelement <1024 x i32> %t29, i32 702
  %4331 = sext i32 %4330 to i64
  %4332 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4331
  %4333 = load i32, i32* %4332, align 4, !tbaa !400
  %4334 = insertelement <1024 x i32> %4329, i32 %4333, i32 702
  %4335 = extractelement <1024 x i32> %t29, i32 703
  %4336 = sext i32 %4335 to i64
  %4337 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4336
  %4338 = load i32, i32* %4337, align 4, !tbaa !400
  %4339 = insertelement <1024 x i32> %4334, i32 %4338, i32 703
  %4340 = extractelement <1024 x i32> %t29, i32 704
  %4341 = sext i32 %4340 to i64
  %4342 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4341
  %4343 = load i32, i32* %4342, align 4, !tbaa !400
  %4344 = insertelement <1024 x i32> %4339, i32 %4343, i32 704
  %4345 = extractelement <1024 x i32> %t29, i32 705
  %4346 = sext i32 %4345 to i64
  %4347 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4346
  %4348 = load i32, i32* %4347, align 4, !tbaa !400
  %4349 = insertelement <1024 x i32> %4344, i32 %4348, i32 705
  %4350 = extractelement <1024 x i32> %t29, i32 706
  %4351 = sext i32 %4350 to i64
  %4352 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4351
  %4353 = load i32, i32* %4352, align 4, !tbaa !400
  %4354 = insertelement <1024 x i32> %4349, i32 %4353, i32 706
  %4355 = extractelement <1024 x i32> %t29, i32 707
  %4356 = sext i32 %4355 to i64
  %4357 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4356
  %4358 = load i32, i32* %4357, align 4, !tbaa !400
  %4359 = insertelement <1024 x i32> %4354, i32 %4358, i32 707
  %4360 = extractelement <1024 x i32> %t29, i32 708
  %4361 = sext i32 %4360 to i64
  %4362 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4361
  %4363 = load i32, i32* %4362, align 4, !tbaa !400
  %4364 = insertelement <1024 x i32> %4359, i32 %4363, i32 708
  %4365 = extractelement <1024 x i32> %t29, i32 709
  %4366 = sext i32 %4365 to i64
  %4367 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4366
  %4368 = load i32, i32* %4367, align 4, !tbaa !400
  %4369 = insertelement <1024 x i32> %4364, i32 %4368, i32 709
  %4370 = extractelement <1024 x i32> %t29, i32 710
  %4371 = sext i32 %4370 to i64
  %4372 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4371
  %4373 = load i32, i32* %4372, align 4, !tbaa !400
  %4374 = insertelement <1024 x i32> %4369, i32 %4373, i32 710
  %4375 = extractelement <1024 x i32> %t29, i32 711
  %4376 = sext i32 %4375 to i64
  %4377 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4376
  %4378 = load i32, i32* %4377, align 4, !tbaa !400
  %4379 = insertelement <1024 x i32> %4374, i32 %4378, i32 711
  %4380 = extractelement <1024 x i32> %t29, i32 712
  %4381 = sext i32 %4380 to i64
  %4382 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4381
  %4383 = load i32, i32* %4382, align 4, !tbaa !400
  %4384 = insertelement <1024 x i32> %4379, i32 %4383, i32 712
  %4385 = extractelement <1024 x i32> %t29, i32 713
  %4386 = sext i32 %4385 to i64
  %4387 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4386
  %4388 = load i32, i32* %4387, align 4, !tbaa !400
  %4389 = insertelement <1024 x i32> %4384, i32 %4388, i32 713
  %4390 = extractelement <1024 x i32> %t29, i32 714
  %4391 = sext i32 %4390 to i64
  %4392 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4391
  %4393 = load i32, i32* %4392, align 4, !tbaa !400
  %4394 = insertelement <1024 x i32> %4389, i32 %4393, i32 714
  %4395 = extractelement <1024 x i32> %t29, i32 715
  %4396 = sext i32 %4395 to i64
  %4397 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4396
  %4398 = load i32, i32* %4397, align 4, !tbaa !400
  %4399 = insertelement <1024 x i32> %4394, i32 %4398, i32 715
  %4400 = extractelement <1024 x i32> %t29, i32 716
  %4401 = sext i32 %4400 to i64
  %4402 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4401
  %4403 = load i32, i32* %4402, align 4, !tbaa !400
  %4404 = insertelement <1024 x i32> %4399, i32 %4403, i32 716
  %4405 = extractelement <1024 x i32> %t29, i32 717
  %4406 = sext i32 %4405 to i64
  %4407 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4406
  %4408 = load i32, i32* %4407, align 4, !tbaa !400
  %4409 = insertelement <1024 x i32> %4404, i32 %4408, i32 717
  %4410 = extractelement <1024 x i32> %t29, i32 718
  %4411 = sext i32 %4410 to i64
  %4412 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4411
  %4413 = load i32, i32* %4412, align 4, !tbaa !400
  %4414 = insertelement <1024 x i32> %4409, i32 %4413, i32 718
  %4415 = extractelement <1024 x i32> %t29, i32 719
  %4416 = sext i32 %4415 to i64
  %4417 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4416
  %4418 = load i32, i32* %4417, align 4, !tbaa !400
  %4419 = insertelement <1024 x i32> %4414, i32 %4418, i32 719
  %4420 = extractelement <1024 x i32> %t29, i32 720
  %4421 = sext i32 %4420 to i64
  %4422 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4421
  %4423 = load i32, i32* %4422, align 4, !tbaa !400
  %4424 = insertelement <1024 x i32> %4419, i32 %4423, i32 720
  %4425 = extractelement <1024 x i32> %t29, i32 721
  %4426 = sext i32 %4425 to i64
  %4427 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4426
  %4428 = load i32, i32* %4427, align 4, !tbaa !400
  %4429 = insertelement <1024 x i32> %4424, i32 %4428, i32 721
  %4430 = extractelement <1024 x i32> %t29, i32 722
  %4431 = sext i32 %4430 to i64
  %4432 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4431
  %4433 = load i32, i32* %4432, align 4, !tbaa !400
  %4434 = insertelement <1024 x i32> %4429, i32 %4433, i32 722
  %4435 = extractelement <1024 x i32> %t29, i32 723
  %4436 = sext i32 %4435 to i64
  %4437 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4436
  %4438 = load i32, i32* %4437, align 4, !tbaa !400
  %4439 = insertelement <1024 x i32> %4434, i32 %4438, i32 723
  %4440 = extractelement <1024 x i32> %t29, i32 724
  %4441 = sext i32 %4440 to i64
  %4442 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4441
  %4443 = load i32, i32* %4442, align 4, !tbaa !400
  %4444 = insertelement <1024 x i32> %4439, i32 %4443, i32 724
  %4445 = extractelement <1024 x i32> %t29, i32 725
  %4446 = sext i32 %4445 to i64
  %4447 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4446
  %4448 = load i32, i32* %4447, align 4, !tbaa !400
  %4449 = insertelement <1024 x i32> %4444, i32 %4448, i32 725
  %4450 = extractelement <1024 x i32> %t29, i32 726
  %4451 = sext i32 %4450 to i64
  %4452 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4451
  %4453 = load i32, i32* %4452, align 4, !tbaa !400
  %4454 = insertelement <1024 x i32> %4449, i32 %4453, i32 726
  %4455 = extractelement <1024 x i32> %t29, i32 727
  %4456 = sext i32 %4455 to i64
  %4457 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4456
  %4458 = load i32, i32* %4457, align 4, !tbaa !400
  %4459 = insertelement <1024 x i32> %4454, i32 %4458, i32 727
  %4460 = extractelement <1024 x i32> %t29, i32 728
  %4461 = sext i32 %4460 to i64
  %4462 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4461
  %4463 = load i32, i32* %4462, align 4, !tbaa !400
  %4464 = insertelement <1024 x i32> %4459, i32 %4463, i32 728
  %4465 = extractelement <1024 x i32> %t29, i32 729
  %4466 = sext i32 %4465 to i64
  %4467 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4466
  %4468 = load i32, i32* %4467, align 4, !tbaa !400
  %4469 = insertelement <1024 x i32> %4464, i32 %4468, i32 729
  %4470 = extractelement <1024 x i32> %t29, i32 730
  %4471 = sext i32 %4470 to i64
  %4472 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4471
  %4473 = load i32, i32* %4472, align 4, !tbaa !400
  %4474 = insertelement <1024 x i32> %4469, i32 %4473, i32 730
  %4475 = extractelement <1024 x i32> %t29, i32 731
  %4476 = sext i32 %4475 to i64
  %4477 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4476
  %4478 = load i32, i32* %4477, align 4, !tbaa !400
  %4479 = insertelement <1024 x i32> %4474, i32 %4478, i32 731
  %4480 = extractelement <1024 x i32> %t29, i32 732
  %4481 = sext i32 %4480 to i64
  %4482 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4481
  %4483 = load i32, i32* %4482, align 4, !tbaa !400
  %4484 = insertelement <1024 x i32> %4479, i32 %4483, i32 732
  %4485 = extractelement <1024 x i32> %t29, i32 733
  %4486 = sext i32 %4485 to i64
  %4487 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4486
  %4488 = load i32, i32* %4487, align 4, !tbaa !400
  %4489 = insertelement <1024 x i32> %4484, i32 %4488, i32 733
  %4490 = extractelement <1024 x i32> %t29, i32 734
  %4491 = sext i32 %4490 to i64
  %4492 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4491
  %4493 = load i32, i32* %4492, align 4, !tbaa !400
  %4494 = insertelement <1024 x i32> %4489, i32 %4493, i32 734
  %4495 = extractelement <1024 x i32> %t29, i32 735
  %4496 = sext i32 %4495 to i64
  %4497 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4496
  %4498 = load i32, i32* %4497, align 4, !tbaa !400
  %4499 = insertelement <1024 x i32> %4494, i32 %4498, i32 735
  %4500 = extractelement <1024 x i32> %t29, i32 736
  %4501 = sext i32 %4500 to i64
  %4502 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4501
  %4503 = load i32, i32* %4502, align 4, !tbaa !400
  %4504 = insertelement <1024 x i32> %4499, i32 %4503, i32 736
  %4505 = extractelement <1024 x i32> %t29, i32 737
  %4506 = sext i32 %4505 to i64
  %4507 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4506
  %4508 = load i32, i32* %4507, align 4, !tbaa !400
  %4509 = insertelement <1024 x i32> %4504, i32 %4508, i32 737
  %4510 = extractelement <1024 x i32> %t29, i32 738
  %4511 = sext i32 %4510 to i64
  %4512 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4511
  %4513 = load i32, i32* %4512, align 4, !tbaa !400
  %4514 = insertelement <1024 x i32> %4509, i32 %4513, i32 738
  %4515 = extractelement <1024 x i32> %t29, i32 739
  %4516 = sext i32 %4515 to i64
  %4517 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4516
  %4518 = load i32, i32* %4517, align 4, !tbaa !400
  %4519 = insertelement <1024 x i32> %4514, i32 %4518, i32 739
  %4520 = extractelement <1024 x i32> %t29, i32 740
  %4521 = sext i32 %4520 to i64
  %4522 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4521
  %4523 = load i32, i32* %4522, align 4, !tbaa !400
  %4524 = insertelement <1024 x i32> %4519, i32 %4523, i32 740
  %4525 = extractelement <1024 x i32> %t29, i32 741
  %4526 = sext i32 %4525 to i64
  %4527 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4526
  %4528 = load i32, i32* %4527, align 4, !tbaa !400
  %4529 = insertelement <1024 x i32> %4524, i32 %4528, i32 741
  %4530 = extractelement <1024 x i32> %t29, i32 742
  %4531 = sext i32 %4530 to i64
  %4532 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4531
  %4533 = load i32, i32* %4532, align 4, !tbaa !400
  %4534 = insertelement <1024 x i32> %4529, i32 %4533, i32 742
  %4535 = extractelement <1024 x i32> %t29, i32 743
  %4536 = sext i32 %4535 to i64
  %4537 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4536
  %4538 = load i32, i32* %4537, align 4, !tbaa !400
  %4539 = insertelement <1024 x i32> %4534, i32 %4538, i32 743
  %4540 = extractelement <1024 x i32> %t29, i32 744
  %4541 = sext i32 %4540 to i64
  %4542 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4541
  %4543 = load i32, i32* %4542, align 4, !tbaa !400
  %4544 = insertelement <1024 x i32> %4539, i32 %4543, i32 744
  %4545 = extractelement <1024 x i32> %t29, i32 745
  %4546 = sext i32 %4545 to i64
  %4547 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4546
  %4548 = load i32, i32* %4547, align 4, !tbaa !400
  %4549 = insertelement <1024 x i32> %4544, i32 %4548, i32 745
  %4550 = extractelement <1024 x i32> %t29, i32 746
  %4551 = sext i32 %4550 to i64
  %4552 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4551
  %4553 = load i32, i32* %4552, align 4, !tbaa !400
  %4554 = insertelement <1024 x i32> %4549, i32 %4553, i32 746
  %4555 = extractelement <1024 x i32> %t29, i32 747
  %4556 = sext i32 %4555 to i64
  %4557 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4556
  %4558 = load i32, i32* %4557, align 4, !tbaa !400
  %4559 = insertelement <1024 x i32> %4554, i32 %4558, i32 747
  %4560 = extractelement <1024 x i32> %t29, i32 748
  %4561 = sext i32 %4560 to i64
  %4562 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4561
  %4563 = load i32, i32* %4562, align 4, !tbaa !400
  %4564 = insertelement <1024 x i32> %4559, i32 %4563, i32 748
  %4565 = extractelement <1024 x i32> %t29, i32 749
  %4566 = sext i32 %4565 to i64
  %4567 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4566
  %4568 = load i32, i32* %4567, align 4, !tbaa !400
  %4569 = insertelement <1024 x i32> %4564, i32 %4568, i32 749
  %4570 = extractelement <1024 x i32> %t29, i32 750
  %4571 = sext i32 %4570 to i64
  %4572 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4571
  %4573 = load i32, i32* %4572, align 4, !tbaa !400
  %4574 = insertelement <1024 x i32> %4569, i32 %4573, i32 750
  %4575 = extractelement <1024 x i32> %t29, i32 751
  %4576 = sext i32 %4575 to i64
  %4577 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4576
  %4578 = load i32, i32* %4577, align 4, !tbaa !400
  %4579 = insertelement <1024 x i32> %4574, i32 %4578, i32 751
  %4580 = extractelement <1024 x i32> %t29, i32 752
  %4581 = sext i32 %4580 to i64
  %4582 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4581
  %4583 = load i32, i32* %4582, align 4, !tbaa !400
  %4584 = insertelement <1024 x i32> %4579, i32 %4583, i32 752
  %4585 = extractelement <1024 x i32> %t29, i32 753
  %4586 = sext i32 %4585 to i64
  %4587 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4586
  %4588 = load i32, i32* %4587, align 4, !tbaa !400
  %4589 = insertelement <1024 x i32> %4584, i32 %4588, i32 753
  %4590 = extractelement <1024 x i32> %t29, i32 754
  %4591 = sext i32 %4590 to i64
  %4592 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4591
  %4593 = load i32, i32* %4592, align 4, !tbaa !400
  %4594 = insertelement <1024 x i32> %4589, i32 %4593, i32 754
  %4595 = extractelement <1024 x i32> %t29, i32 755
  %4596 = sext i32 %4595 to i64
  %4597 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4596
  %4598 = load i32, i32* %4597, align 4, !tbaa !400
  %4599 = insertelement <1024 x i32> %4594, i32 %4598, i32 755
  %4600 = extractelement <1024 x i32> %t29, i32 756
  %4601 = sext i32 %4600 to i64
  %4602 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4601
  %4603 = load i32, i32* %4602, align 4, !tbaa !400
  %4604 = insertelement <1024 x i32> %4599, i32 %4603, i32 756
  %4605 = extractelement <1024 x i32> %t29, i32 757
  %4606 = sext i32 %4605 to i64
  %4607 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4606
  %4608 = load i32, i32* %4607, align 4, !tbaa !400
  %4609 = insertelement <1024 x i32> %4604, i32 %4608, i32 757
  %4610 = extractelement <1024 x i32> %t29, i32 758
  %4611 = sext i32 %4610 to i64
  %4612 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4611
  %4613 = load i32, i32* %4612, align 4, !tbaa !400
  %4614 = insertelement <1024 x i32> %4609, i32 %4613, i32 758
  %4615 = extractelement <1024 x i32> %t29, i32 759
  %4616 = sext i32 %4615 to i64
  %4617 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4616
  %4618 = load i32, i32* %4617, align 4, !tbaa !400
  %4619 = insertelement <1024 x i32> %4614, i32 %4618, i32 759
  %4620 = extractelement <1024 x i32> %t29, i32 760
  %4621 = sext i32 %4620 to i64
  %4622 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4621
  %4623 = load i32, i32* %4622, align 4, !tbaa !400
  %4624 = insertelement <1024 x i32> %4619, i32 %4623, i32 760
  %4625 = extractelement <1024 x i32> %t29, i32 761
  %4626 = sext i32 %4625 to i64
  %4627 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4626
  %4628 = load i32, i32* %4627, align 4, !tbaa !400
  %4629 = insertelement <1024 x i32> %4624, i32 %4628, i32 761
  %4630 = extractelement <1024 x i32> %t29, i32 762
  %4631 = sext i32 %4630 to i64
  %4632 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4631
  %4633 = load i32, i32* %4632, align 4, !tbaa !400
  %4634 = insertelement <1024 x i32> %4629, i32 %4633, i32 762
  %4635 = extractelement <1024 x i32> %t29, i32 763
  %4636 = sext i32 %4635 to i64
  %4637 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4636
  %4638 = load i32, i32* %4637, align 4, !tbaa !400
  %4639 = insertelement <1024 x i32> %4634, i32 %4638, i32 763
  %4640 = extractelement <1024 x i32> %t29, i32 764
  %4641 = sext i32 %4640 to i64
  %4642 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4641
  %4643 = load i32, i32* %4642, align 4, !tbaa !400
  %4644 = insertelement <1024 x i32> %4639, i32 %4643, i32 764
  %4645 = extractelement <1024 x i32> %t29, i32 765
  %4646 = sext i32 %4645 to i64
  %4647 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4646
  %4648 = load i32, i32* %4647, align 4, !tbaa !400
  %4649 = insertelement <1024 x i32> %4644, i32 %4648, i32 765
  %4650 = extractelement <1024 x i32> %t29, i32 766
  %4651 = sext i32 %4650 to i64
  %4652 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4651
  %4653 = load i32, i32* %4652, align 4, !tbaa !400
  %4654 = insertelement <1024 x i32> %4649, i32 %4653, i32 766
  %4655 = extractelement <1024 x i32> %t29, i32 767
  %4656 = sext i32 %4655 to i64
  %4657 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4656
  %4658 = load i32, i32* %4657, align 4, !tbaa !400
  %4659 = insertelement <1024 x i32> %4654, i32 %4658, i32 767
  %4660 = extractelement <1024 x i32> %t29, i32 768
  %4661 = sext i32 %4660 to i64
  %4662 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4661
  %4663 = load i32, i32* %4662, align 4, !tbaa !400
  %4664 = insertelement <1024 x i32> %4659, i32 %4663, i32 768
  %4665 = extractelement <1024 x i32> %t29, i32 769
  %4666 = sext i32 %4665 to i64
  %4667 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4666
  %4668 = load i32, i32* %4667, align 4, !tbaa !400
  %4669 = insertelement <1024 x i32> %4664, i32 %4668, i32 769
  %4670 = extractelement <1024 x i32> %t29, i32 770
  %4671 = sext i32 %4670 to i64
  %4672 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4671
  %4673 = load i32, i32* %4672, align 4, !tbaa !400
  %4674 = insertelement <1024 x i32> %4669, i32 %4673, i32 770
  %4675 = extractelement <1024 x i32> %t29, i32 771
  %4676 = sext i32 %4675 to i64
  %4677 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4676
  %4678 = load i32, i32* %4677, align 4, !tbaa !400
  %4679 = insertelement <1024 x i32> %4674, i32 %4678, i32 771
  %4680 = extractelement <1024 x i32> %t29, i32 772
  %4681 = sext i32 %4680 to i64
  %4682 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4681
  %4683 = load i32, i32* %4682, align 4, !tbaa !400
  %4684 = insertelement <1024 x i32> %4679, i32 %4683, i32 772
  %4685 = extractelement <1024 x i32> %t29, i32 773
  %4686 = sext i32 %4685 to i64
  %4687 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4686
  %4688 = load i32, i32* %4687, align 4, !tbaa !400
  %4689 = insertelement <1024 x i32> %4684, i32 %4688, i32 773
  %4690 = extractelement <1024 x i32> %t29, i32 774
  %4691 = sext i32 %4690 to i64
  %4692 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4691
  %4693 = load i32, i32* %4692, align 4, !tbaa !400
  %4694 = insertelement <1024 x i32> %4689, i32 %4693, i32 774
  %4695 = extractelement <1024 x i32> %t29, i32 775
  %4696 = sext i32 %4695 to i64
  %4697 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4696
  %4698 = load i32, i32* %4697, align 4, !tbaa !400
  %4699 = insertelement <1024 x i32> %4694, i32 %4698, i32 775
  %4700 = extractelement <1024 x i32> %t29, i32 776
  %4701 = sext i32 %4700 to i64
  %4702 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4701
  %4703 = load i32, i32* %4702, align 4, !tbaa !400
  %4704 = insertelement <1024 x i32> %4699, i32 %4703, i32 776
  %4705 = extractelement <1024 x i32> %t29, i32 777
  %4706 = sext i32 %4705 to i64
  %4707 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4706
  %4708 = load i32, i32* %4707, align 4, !tbaa !400
  %4709 = insertelement <1024 x i32> %4704, i32 %4708, i32 777
  %4710 = extractelement <1024 x i32> %t29, i32 778
  %4711 = sext i32 %4710 to i64
  %4712 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4711
  %4713 = load i32, i32* %4712, align 4, !tbaa !400
  %4714 = insertelement <1024 x i32> %4709, i32 %4713, i32 778
  %4715 = extractelement <1024 x i32> %t29, i32 779
  %4716 = sext i32 %4715 to i64
  %4717 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4716
  %4718 = load i32, i32* %4717, align 4, !tbaa !400
  %4719 = insertelement <1024 x i32> %4714, i32 %4718, i32 779
  %4720 = extractelement <1024 x i32> %t29, i32 780
  %4721 = sext i32 %4720 to i64
  %4722 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4721
  %4723 = load i32, i32* %4722, align 4, !tbaa !400
  %4724 = insertelement <1024 x i32> %4719, i32 %4723, i32 780
  %4725 = extractelement <1024 x i32> %t29, i32 781
  %4726 = sext i32 %4725 to i64
  %4727 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4726
  %4728 = load i32, i32* %4727, align 4, !tbaa !400
  %4729 = insertelement <1024 x i32> %4724, i32 %4728, i32 781
  %4730 = extractelement <1024 x i32> %t29, i32 782
  %4731 = sext i32 %4730 to i64
  %4732 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4731
  %4733 = load i32, i32* %4732, align 4, !tbaa !400
  %4734 = insertelement <1024 x i32> %4729, i32 %4733, i32 782
  %4735 = extractelement <1024 x i32> %t29, i32 783
  %4736 = sext i32 %4735 to i64
  %4737 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4736
  %4738 = load i32, i32* %4737, align 4, !tbaa !400
  %4739 = insertelement <1024 x i32> %4734, i32 %4738, i32 783
  %4740 = extractelement <1024 x i32> %t29, i32 784
  %4741 = sext i32 %4740 to i64
  %4742 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4741
  %4743 = load i32, i32* %4742, align 4, !tbaa !400
  %4744 = insertelement <1024 x i32> %4739, i32 %4743, i32 784
  %4745 = extractelement <1024 x i32> %t29, i32 785
  %4746 = sext i32 %4745 to i64
  %4747 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4746
  %4748 = load i32, i32* %4747, align 4, !tbaa !400
  %4749 = insertelement <1024 x i32> %4744, i32 %4748, i32 785
  %4750 = extractelement <1024 x i32> %t29, i32 786
  %4751 = sext i32 %4750 to i64
  %4752 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4751
  %4753 = load i32, i32* %4752, align 4, !tbaa !400
  %4754 = insertelement <1024 x i32> %4749, i32 %4753, i32 786
  %4755 = extractelement <1024 x i32> %t29, i32 787
  %4756 = sext i32 %4755 to i64
  %4757 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4756
  %4758 = load i32, i32* %4757, align 4, !tbaa !400
  %4759 = insertelement <1024 x i32> %4754, i32 %4758, i32 787
  %4760 = extractelement <1024 x i32> %t29, i32 788
  %4761 = sext i32 %4760 to i64
  %4762 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4761
  %4763 = load i32, i32* %4762, align 4, !tbaa !400
  %4764 = insertelement <1024 x i32> %4759, i32 %4763, i32 788
  %4765 = extractelement <1024 x i32> %t29, i32 789
  %4766 = sext i32 %4765 to i64
  %4767 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4766
  %4768 = load i32, i32* %4767, align 4, !tbaa !400
  %4769 = insertelement <1024 x i32> %4764, i32 %4768, i32 789
  %4770 = extractelement <1024 x i32> %t29, i32 790
  %4771 = sext i32 %4770 to i64
  %4772 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4771
  %4773 = load i32, i32* %4772, align 4, !tbaa !400
  %4774 = insertelement <1024 x i32> %4769, i32 %4773, i32 790
  %4775 = extractelement <1024 x i32> %t29, i32 791
  %4776 = sext i32 %4775 to i64
  %4777 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4776
  %4778 = load i32, i32* %4777, align 4, !tbaa !400
  %4779 = insertelement <1024 x i32> %4774, i32 %4778, i32 791
  %4780 = extractelement <1024 x i32> %t29, i32 792
  %4781 = sext i32 %4780 to i64
  %4782 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4781
  %4783 = load i32, i32* %4782, align 4, !tbaa !400
  %4784 = insertelement <1024 x i32> %4779, i32 %4783, i32 792
  %4785 = extractelement <1024 x i32> %t29, i32 793
  %4786 = sext i32 %4785 to i64
  %4787 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4786
  %4788 = load i32, i32* %4787, align 4, !tbaa !400
  %4789 = insertelement <1024 x i32> %4784, i32 %4788, i32 793
  %4790 = extractelement <1024 x i32> %t29, i32 794
  %4791 = sext i32 %4790 to i64
  %4792 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4791
  %4793 = load i32, i32* %4792, align 4, !tbaa !400
  %4794 = insertelement <1024 x i32> %4789, i32 %4793, i32 794
  %4795 = extractelement <1024 x i32> %t29, i32 795
  %4796 = sext i32 %4795 to i64
  %4797 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4796
  %4798 = load i32, i32* %4797, align 4, !tbaa !400
  %4799 = insertelement <1024 x i32> %4794, i32 %4798, i32 795
  %4800 = extractelement <1024 x i32> %t29, i32 796
  %4801 = sext i32 %4800 to i64
  %4802 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4801
  %4803 = load i32, i32* %4802, align 4, !tbaa !400
  %4804 = insertelement <1024 x i32> %4799, i32 %4803, i32 796
  %4805 = extractelement <1024 x i32> %t29, i32 797
  %4806 = sext i32 %4805 to i64
  %4807 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4806
  %4808 = load i32, i32* %4807, align 4, !tbaa !400
  %4809 = insertelement <1024 x i32> %4804, i32 %4808, i32 797
  %4810 = extractelement <1024 x i32> %t29, i32 798
  %4811 = sext i32 %4810 to i64
  %4812 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4811
  %4813 = load i32, i32* %4812, align 4, !tbaa !400
  %4814 = insertelement <1024 x i32> %4809, i32 %4813, i32 798
  %4815 = extractelement <1024 x i32> %t29, i32 799
  %4816 = sext i32 %4815 to i64
  %4817 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4816
  %4818 = load i32, i32* %4817, align 4, !tbaa !400
  %4819 = insertelement <1024 x i32> %4814, i32 %4818, i32 799
  %4820 = extractelement <1024 x i32> %t29, i32 800
  %4821 = sext i32 %4820 to i64
  %4822 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4821
  %4823 = load i32, i32* %4822, align 4, !tbaa !400
  %4824 = insertelement <1024 x i32> %4819, i32 %4823, i32 800
  %4825 = extractelement <1024 x i32> %t29, i32 801
  %4826 = sext i32 %4825 to i64
  %4827 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4826
  %4828 = load i32, i32* %4827, align 4, !tbaa !400
  %4829 = insertelement <1024 x i32> %4824, i32 %4828, i32 801
  %4830 = extractelement <1024 x i32> %t29, i32 802
  %4831 = sext i32 %4830 to i64
  %4832 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4831
  %4833 = load i32, i32* %4832, align 4, !tbaa !400
  %4834 = insertelement <1024 x i32> %4829, i32 %4833, i32 802
  %4835 = extractelement <1024 x i32> %t29, i32 803
  %4836 = sext i32 %4835 to i64
  %4837 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4836
  %4838 = load i32, i32* %4837, align 4, !tbaa !400
  %4839 = insertelement <1024 x i32> %4834, i32 %4838, i32 803
  %4840 = extractelement <1024 x i32> %t29, i32 804
  %4841 = sext i32 %4840 to i64
  %4842 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4841
  %4843 = load i32, i32* %4842, align 4, !tbaa !400
  %4844 = insertelement <1024 x i32> %4839, i32 %4843, i32 804
  %4845 = extractelement <1024 x i32> %t29, i32 805
  %4846 = sext i32 %4845 to i64
  %4847 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4846
  %4848 = load i32, i32* %4847, align 4, !tbaa !400
  %4849 = insertelement <1024 x i32> %4844, i32 %4848, i32 805
  %4850 = extractelement <1024 x i32> %t29, i32 806
  %4851 = sext i32 %4850 to i64
  %4852 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4851
  %4853 = load i32, i32* %4852, align 4, !tbaa !400
  %4854 = insertelement <1024 x i32> %4849, i32 %4853, i32 806
  %4855 = extractelement <1024 x i32> %t29, i32 807
  %4856 = sext i32 %4855 to i64
  %4857 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4856
  %4858 = load i32, i32* %4857, align 4, !tbaa !400
  %4859 = insertelement <1024 x i32> %4854, i32 %4858, i32 807
  %4860 = extractelement <1024 x i32> %t29, i32 808
  %4861 = sext i32 %4860 to i64
  %4862 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4861
  %4863 = load i32, i32* %4862, align 4, !tbaa !400
  %4864 = insertelement <1024 x i32> %4859, i32 %4863, i32 808
  %4865 = extractelement <1024 x i32> %t29, i32 809
  %4866 = sext i32 %4865 to i64
  %4867 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4866
  %4868 = load i32, i32* %4867, align 4, !tbaa !400
  %4869 = insertelement <1024 x i32> %4864, i32 %4868, i32 809
  %4870 = extractelement <1024 x i32> %t29, i32 810
  %4871 = sext i32 %4870 to i64
  %4872 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4871
  %4873 = load i32, i32* %4872, align 4, !tbaa !400
  %4874 = insertelement <1024 x i32> %4869, i32 %4873, i32 810
  %4875 = extractelement <1024 x i32> %t29, i32 811
  %4876 = sext i32 %4875 to i64
  %4877 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4876
  %4878 = load i32, i32* %4877, align 4, !tbaa !400
  %4879 = insertelement <1024 x i32> %4874, i32 %4878, i32 811
  %4880 = extractelement <1024 x i32> %t29, i32 812
  %4881 = sext i32 %4880 to i64
  %4882 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4881
  %4883 = load i32, i32* %4882, align 4, !tbaa !400
  %4884 = insertelement <1024 x i32> %4879, i32 %4883, i32 812
  %4885 = extractelement <1024 x i32> %t29, i32 813
  %4886 = sext i32 %4885 to i64
  %4887 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4886
  %4888 = load i32, i32* %4887, align 4, !tbaa !400
  %4889 = insertelement <1024 x i32> %4884, i32 %4888, i32 813
  %4890 = extractelement <1024 x i32> %t29, i32 814
  %4891 = sext i32 %4890 to i64
  %4892 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4891
  %4893 = load i32, i32* %4892, align 4, !tbaa !400
  %4894 = insertelement <1024 x i32> %4889, i32 %4893, i32 814
  %4895 = extractelement <1024 x i32> %t29, i32 815
  %4896 = sext i32 %4895 to i64
  %4897 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4896
  %4898 = load i32, i32* %4897, align 4, !tbaa !400
  %4899 = insertelement <1024 x i32> %4894, i32 %4898, i32 815
  %4900 = extractelement <1024 x i32> %t29, i32 816
  %4901 = sext i32 %4900 to i64
  %4902 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4901
  %4903 = load i32, i32* %4902, align 4, !tbaa !400
  %4904 = insertelement <1024 x i32> %4899, i32 %4903, i32 816
  %4905 = extractelement <1024 x i32> %t29, i32 817
  %4906 = sext i32 %4905 to i64
  %4907 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4906
  %4908 = load i32, i32* %4907, align 4, !tbaa !400
  %4909 = insertelement <1024 x i32> %4904, i32 %4908, i32 817
  %4910 = extractelement <1024 x i32> %t29, i32 818
  %4911 = sext i32 %4910 to i64
  %4912 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4911
  %4913 = load i32, i32* %4912, align 4, !tbaa !400
  %4914 = insertelement <1024 x i32> %4909, i32 %4913, i32 818
  %4915 = extractelement <1024 x i32> %t29, i32 819
  %4916 = sext i32 %4915 to i64
  %4917 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4916
  %4918 = load i32, i32* %4917, align 4, !tbaa !400
  %4919 = insertelement <1024 x i32> %4914, i32 %4918, i32 819
  %4920 = extractelement <1024 x i32> %t29, i32 820
  %4921 = sext i32 %4920 to i64
  %4922 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4921
  %4923 = load i32, i32* %4922, align 4, !tbaa !400
  %4924 = insertelement <1024 x i32> %4919, i32 %4923, i32 820
  %4925 = extractelement <1024 x i32> %t29, i32 821
  %4926 = sext i32 %4925 to i64
  %4927 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4926
  %4928 = load i32, i32* %4927, align 4, !tbaa !400
  %4929 = insertelement <1024 x i32> %4924, i32 %4928, i32 821
  %4930 = extractelement <1024 x i32> %t29, i32 822
  %4931 = sext i32 %4930 to i64
  %4932 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4931
  %4933 = load i32, i32* %4932, align 4, !tbaa !400
  %4934 = insertelement <1024 x i32> %4929, i32 %4933, i32 822
  %4935 = extractelement <1024 x i32> %t29, i32 823
  %4936 = sext i32 %4935 to i64
  %4937 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4936
  %4938 = load i32, i32* %4937, align 4, !tbaa !400
  %4939 = insertelement <1024 x i32> %4934, i32 %4938, i32 823
  %4940 = extractelement <1024 x i32> %t29, i32 824
  %4941 = sext i32 %4940 to i64
  %4942 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4941
  %4943 = load i32, i32* %4942, align 4, !tbaa !400
  %4944 = insertelement <1024 x i32> %4939, i32 %4943, i32 824
  %4945 = extractelement <1024 x i32> %t29, i32 825
  %4946 = sext i32 %4945 to i64
  %4947 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4946
  %4948 = load i32, i32* %4947, align 4, !tbaa !400
  %4949 = insertelement <1024 x i32> %4944, i32 %4948, i32 825
  %4950 = extractelement <1024 x i32> %t29, i32 826
  %4951 = sext i32 %4950 to i64
  %4952 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4951
  %4953 = load i32, i32* %4952, align 4, !tbaa !400
  %4954 = insertelement <1024 x i32> %4949, i32 %4953, i32 826
  %4955 = extractelement <1024 x i32> %t29, i32 827
  %4956 = sext i32 %4955 to i64
  %4957 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4956
  %4958 = load i32, i32* %4957, align 4, !tbaa !400
  %4959 = insertelement <1024 x i32> %4954, i32 %4958, i32 827
  %4960 = extractelement <1024 x i32> %t29, i32 828
  %4961 = sext i32 %4960 to i64
  %4962 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4961
  %4963 = load i32, i32* %4962, align 4, !tbaa !400
  %4964 = insertelement <1024 x i32> %4959, i32 %4963, i32 828
  %4965 = extractelement <1024 x i32> %t29, i32 829
  %4966 = sext i32 %4965 to i64
  %4967 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4966
  %4968 = load i32, i32* %4967, align 4, !tbaa !400
  %4969 = insertelement <1024 x i32> %4964, i32 %4968, i32 829
  %4970 = extractelement <1024 x i32> %t29, i32 830
  %4971 = sext i32 %4970 to i64
  %4972 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4971
  %4973 = load i32, i32* %4972, align 4, !tbaa !400
  %4974 = insertelement <1024 x i32> %4969, i32 %4973, i32 830
  %4975 = extractelement <1024 x i32> %t29, i32 831
  %4976 = sext i32 %4975 to i64
  %4977 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4976
  %4978 = load i32, i32* %4977, align 4, !tbaa !400
  %4979 = insertelement <1024 x i32> %4974, i32 %4978, i32 831
  %4980 = extractelement <1024 x i32> %t29, i32 832
  %4981 = sext i32 %4980 to i64
  %4982 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4981
  %4983 = load i32, i32* %4982, align 4, !tbaa !400
  %4984 = insertelement <1024 x i32> %4979, i32 %4983, i32 832
  %4985 = extractelement <1024 x i32> %t29, i32 833
  %4986 = sext i32 %4985 to i64
  %4987 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4986
  %4988 = load i32, i32* %4987, align 4, !tbaa !400
  %4989 = insertelement <1024 x i32> %4984, i32 %4988, i32 833
  %4990 = extractelement <1024 x i32> %t29, i32 834
  %4991 = sext i32 %4990 to i64
  %4992 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4991
  %4993 = load i32, i32* %4992, align 4, !tbaa !400
  %4994 = insertelement <1024 x i32> %4989, i32 %4993, i32 834
  %4995 = extractelement <1024 x i32> %t29, i32 835
  %4996 = sext i32 %4995 to i64
  %4997 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %4996
  %4998 = load i32, i32* %4997, align 4, !tbaa !400
  %4999 = insertelement <1024 x i32> %4994, i32 %4998, i32 835
  %5000 = extractelement <1024 x i32> %t29, i32 836
  %5001 = sext i32 %5000 to i64
  %5002 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5001
  %5003 = load i32, i32* %5002, align 4, !tbaa !400
  %5004 = insertelement <1024 x i32> %4999, i32 %5003, i32 836
  %5005 = extractelement <1024 x i32> %t29, i32 837
  %5006 = sext i32 %5005 to i64
  %5007 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5006
  %5008 = load i32, i32* %5007, align 4, !tbaa !400
  %5009 = insertelement <1024 x i32> %5004, i32 %5008, i32 837
  %5010 = extractelement <1024 x i32> %t29, i32 838
  %5011 = sext i32 %5010 to i64
  %5012 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5011
  %5013 = load i32, i32* %5012, align 4, !tbaa !400
  %5014 = insertelement <1024 x i32> %5009, i32 %5013, i32 838
  %5015 = extractelement <1024 x i32> %t29, i32 839
  %5016 = sext i32 %5015 to i64
  %5017 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5016
  %5018 = load i32, i32* %5017, align 4, !tbaa !400
  %5019 = insertelement <1024 x i32> %5014, i32 %5018, i32 839
  %5020 = extractelement <1024 x i32> %t29, i32 840
  %5021 = sext i32 %5020 to i64
  %5022 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5021
  %5023 = load i32, i32* %5022, align 4, !tbaa !400
  %5024 = insertelement <1024 x i32> %5019, i32 %5023, i32 840
  %5025 = extractelement <1024 x i32> %t29, i32 841
  %5026 = sext i32 %5025 to i64
  %5027 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5026
  %5028 = load i32, i32* %5027, align 4, !tbaa !400
  %5029 = insertelement <1024 x i32> %5024, i32 %5028, i32 841
  %5030 = extractelement <1024 x i32> %t29, i32 842
  %5031 = sext i32 %5030 to i64
  %5032 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5031
  %5033 = load i32, i32* %5032, align 4, !tbaa !400
  %5034 = insertelement <1024 x i32> %5029, i32 %5033, i32 842
  %5035 = extractelement <1024 x i32> %t29, i32 843
  %5036 = sext i32 %5035 to i64
  %5037 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5036
  %5038 = load i32, i32* %5037, align 4, !tbaa !400
  %5039 = insertelement <1024 x i32> %5034, i32 %5038, i32 843
  %5040 = extractelement <1024 x i32> %t29, i32 844
  %5041 = sext i32 %5040 to i64
  %5042 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5041
  %5043 = load i32, i32* %5042, align 4, !tbaa !400
  %5044 = insertelement <1024 x i32> %5039, i32 %5043, i32 844
  %5045 = extractelement <1024 x i32> %t29, i32 845
  %5046 = sext i32 %5045 to i64
  %5047 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5046
  %5048 = load i32, i32* %5047, align 4, !tbaa !400
  %5049 = insertelement <1024 x i32> %5044, i32 %5048, i32 845
  %5050 = extractelement <1024 x i32> %t29, i32 846
  %5051 = sext i32 %5050 to i64
  %5052 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5051
  %5053 = load i32, i32* %5052, align 4, !tbaa !400
  %5054 = insertelement <1024 x i32> %5049, i32 %5053, i32 846
  %5055 = extractelement <1024 x i32> %t29, i32 847
  %5056 = sext i32 %5055 to i64
  %5057 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5056
  %5058 = load i32, i32* %5057, align 4, !tbaa !400
  %5059 = insertelement <1024 x i32> %5054, i32 %5058, i32 847
  %5060 = extractelement <1024 x i32> %t29, i32 848
  %5061 = sext i32 %5060 to i64
  %5062 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5061
  %5063 = load i32, i32* %5062, align 4, !tbaa !400
  %5064 = insertelement <1024 x i32> %5059, i32 %5063, i32 848
  %5065 = extractelement <1024 x i32> %t29, i32 849
  %5066 = sext i32 %5065 to i64
  %5067 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5066
  %5068 = load i32, i32* %5067, align 4, !tbaa !400
  %5069 = insertelement <1024 x i32> %5064, i32 %5068, i32 849
  %5070 = extractelement <1024 x i32> %t29, i32 850
  %5071 = sext i32 %5070 to i64
  %5072 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5071
  %5073 = load i32, i32* %5072, align 4, !tbaa !400
  %5074 = insertelement <1024 x i32> %5069, i32 %5073, i32 850
  %5075 = extractelement <1024 x i32> %t29, i32 851
  %5076 = sext i32 %5075 to i64
  %5077 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5076
  %5078 = load i32, i32* %5077, align 4, !tbaa !400
  %5079 = insertelement <1024 x i32> %5074, i32 %5078, i32 851
  %5080 = extractelement <1024 x i32> %t29, i32 852
  %5081 = sext i32 %5080 to i64
  %5082 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5081
  %5083 = load i32, i32* %5082, align 4, !tbaa !400
  %5084 = insertelement <1024 x i32> %5079, i32 %5083, i32 852
  %5085 = extractelement <1024 x i32> %t29, i32 853
  %5086 = sext i32 %5085 to i64
  %5087 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5086
  %5088 = load i32, i32* %5087, align 4, !tbaa !400
  %5089 = insertelement <1024 x i32> %5084, i32 %5088, i32 853
  %5090 = extractelement <1024 x i32> %t29, i32 854
  %5091 = sext i32 %5090 to i64
  %5092 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5091
  %5093 = load i32, i32* %5092, align 4, !tbaa !400
  %5094 = insertelement <1024 x i32> %5089, i32 %5093, i32 854
  %5095 = extractelement <1024 x i32> %t29, i32 855
  %5096 = sext i32 %5095 to i64
  %5097 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5096
  %5098 = load i32, i32* %5097, align 4, !tbaa !400
  %5099 = insertelement <1024 x i32> %5094, i32 %5098, i32 855
  %5100 = extractelement <1024 x i32> %t29, i32 856
  %5101 = sext i32 %5100 to i64
  %5102 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5101
  %5103 = load i32, i32* %5102, align 4, !tbaa !400
  %5104 = insertelement <1024 x i32> %5099, i32 %5103, i32 856
  %5105 = extractelement <1024 x i32> %t29, i32 857
  %5106 = sext i32 %5105 to i64
  %5107 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5106
  %5108 = load i32, i32* %5107, align 4, !tbaa !400
  %5109 = insertelement <1024 x i32> %5104, i32 %5108, i32 857
  %5110 = extractelement <1024 x i32> %t29, i32 858
  %5111 = sext i32 %5110 to i64
  %5112 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5111
  %5113 = load i32, i32* %5112, align 4, !tbaa !400
  %5114 = insertelement <1024 x i32> %5109, i32 %5113, i32 858
  %5115 = extractelement <1024 x i32> %t29, i32 859
  %5116 = sext i32 %5115 to i64
  %5117 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5116
  %5118 = load i32, i32* %5117, align 4, !tbaa !400
  %5119 = insertelement <1024 x i32> %5114, i32 %5118, i32 859
  %5120 = extractelement <1024 x i32> %t29, i32 860
  %5121 = sext i32 %5120 to i64
  %5122 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5121
  %5123 = load i32, i32* %5122, align 4, !tbaa !400
  %5124 = insertelement <1024 x i32> %5119, i32 %5123, i32 860
  %5125 = extractelement <1024 x i32> %t29, i32 861
  %5126 = sext i32 %5125 to i64
  %5127 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5126
  %5128 = load i32, i32* %5127, align 4, !tbaa !400
  %5129 = insertelement <1024 x i32> %5124, i32 %5128, i32 861
  %5130 = extractelement <1024 x i32> %t29, i32 862
  %5131 = sext i32 %5130 to i64
  %5132 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5131
  %5133 = load i32, i32* %5132, align 4, !tbaa !400
  %5134 = insertelement <1024 x i32> %5129, i32 %5133, i32 862
  %5135 = extractelement <1024 x i32> %t29, i32 863
  %5136 = sext i32 %5135 to i64
  %5137 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5136
  %5138 = load i32, i32* %5137, align 4, !tbaa !400
  %5139 = insertelement <1024 x i32> %5134, i32 %5138, i32 863
  %5140 = extractelement <1024 x i32> %t29, i32 864
  %5141 = sext i32 %5140 to i64
  %5142 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5141
  %5143 = load i32, i32* %5142, align 4, !tbaa !400
  %5144 = insertelement <1024 x i32> %5139, i32 %5143, i32 864
  %5145 = extractelement <1024 x i32> %t29, i32 865
  %5146 = sext i32 %5145 to i64
  %5147 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5146
  %5148 = load i32, i32* %5147, align 4, !tbaa !400
  %5149 = insertelement <1024 x i32> %5144, i32 %5148, i32 865
  %5150 = extractelement <1024 x i32> %t29, i32 866
  %5151 = sext i32 %5150 to i64
  %5152 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5151
  %5153 = load i32, i32* %5152, align 4, !tbaa !400
  %5154 = insertelement <1024 x i32> %5149, i32 %5153, i32 866
  %5155 = extractelement <1024 x i32> %t29, i32 867
  %5156 = sext i32 %5155 to i64
  %5157 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5156
  %5158 = load i32, i32* %5157, align 4, !tbaa !400
  %5159 = insertelement <1024 x i32> %5154, i32 %5158, i32 867
  %5160 = extractelement <1024 x i32> %t29, i32 868
  %5161 = sext i32 %5160 to i64
  %5162 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5161
  %5163 = load i32, i32* %5162, align 4, !tbaa !400
  %5164 = insertelement <1024 x i32> %5159, i32 %5163, i32 868
  %5165 = extractelement <1024 x i32> %t29, i32 869
  %5166 = sext i32 %5165 to i64
  %5167 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5166
  %5168 = load i32, i32* %5167, align 4, !tbaa !400
  %5169 = insertelement <1024 x i32> %5164, i32 %5168, i32 869
  %5170 = extractelement <1024 x i32> %t29, i32 870
  %5171 = sext i32 %5170 to i64
  %5172 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5171
  %5173 = load i32, i32* %5172, align 4, !tbaa !400
  %5174 = insertelement <1024 x i32> %5169, i32 %5173, i32 870
  %5175 = extractelement <1024 x i32> %t29, i32 871
  %5176 = sext i32 %5175 to i64
  %5177 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5176
  %5178 = load i32, i32* %5177, align 4, !tbaa !400
  %5179 = insertelement <1024 x i32> %5174, i32 %5178, i32 871
  %5180 = extractelement <1024 x i32> %t29, i32 872
  %5181 = sext i32 %5180 to i64
  %5182 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5181
  %5183 = load i32, i32* %5182, align 4, !tbaa !400
  %5184 = insertelement <1024 x i32> %5179, i32 %5183, i32 872
  %5185 = extractelement <1024 x i32> %t29, i32 873
  %5186 = sext i32 %5185 to i64
  %5187 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5186
  %5188 = load i32, i32* %5187, align 4, !tbaa !400
  %5189 = insertelement <1024 x i32> %5184, i32 %5188, i32 873
  %5190 = extractelement <1024 x i32> %t29, i32 874
  %5191 = sext i32 %5190 to i64
  %5192 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5191
  %5193 = load i32, i32* %5192, align 4, !tbaa !400
  %5194 = insertelement <1024 x i32> %5189, i32 %5193, i32 874
  %5195 = extractelement <1024 x i32> %t29, i32 875
  %5196 = sext i32 %5195 to i64
  %5197 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5196
  %5198 = load i32, i32* %5197, align 4, !tbaa !400
  %5199 = insertelement <1024 x i32> %5194, i32 %5198, i32 875
  %5200 = extractelement <1024 x i32> %t29, i32 876
  %5201 = sext i32 %5200 to i64
  %5202 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5201
  %5203 = load i32, i32* %5202, align 4, !tbaa !400
  %5204 = insertelement <1024 x i32> %5199, i32 %5203, i32 876
  %5205 = extractelement <1024 x i32> %t29, i32 877
  %5206 = sext i32 %5205 to i64
  %5207 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5206
  %5208 = load i32, i32* %5207, align 4, !tbaa !400
  %5209 = insertelement <1024 x i32> %5204, i32 %5208, i32 877
  %5210 = extractelement <1024 x i32> %t29, i32 878
  %5211 = sext i32 %5210 to i64
  %5212 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5211
  %5213 = load i32, i32* %5212, align 4, !tbaa !400
  %5214 = insertelement <1024 x i32> %5209, i32 %5213, i32 878
  %5215 = extractelement <1024 x i32> %t29, i32 879
  %5216 = sext i32 %5215 to i64
  %5217 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5216
  %5218 = load i32, i32* %5217, align 4, !tbaa !400
  %5219 = insertelement <1024 x i32> %5214, i32 %5218, i32 879
  %5220 = extractelement <1024 x i32> %t29, i32 880
  %5221 = sext i32 %5220 to i64
  %5222 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5221
  %5223 = load i32, i32* %5222, align 4, !tbaa !400
  %5224 = insertelement <1024 x i32> %5219, i32 %5223, i32 880
  %5225 = extractelement <1024 x i32> %t29, i32 881
  %5226 = sext i32 %5225 to i64
  %5227 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5226
  %5228 = load i32, i32* %5227, align 4, !tbaa !400
  %5229 = insertelement <1024 x i32> %5224, i32 %5228, i32 881
  %5230 = extractelement <1024 x i32> %t29, i32 882
  %5231 = sext i32 %5230 to i64
  %5232 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5231
  %5233 = load i32, i32* %5232, align 4, !tbaa !400
  %5234 = insertelement <1024 x i32> %5229, i32 %5233, i32 882
  %5235 = extractelement <1024 x i32> %t29, i32 883
  %5236 = sext i32 %5235 to i64
  %5237 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5236
  %5238 = load i32, i32* %5237, align 4, !tbaa !400
  %5239 = insertelement <1024 x i32> %5234, i32 %5238, i32 883
  %5240 = extractelement <1024 x i32> %t29, i32 884
  %5241 = sext i32 %5240 to i64
  %5242 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5241
  %5243 = load i32, i32* %5242, align 4, !tbaa !400
  %5244 = insertelement <1024 x i32> %5239, i32 %5243, i32 884
  %5245 = extractelement <1024 x i32> %t29, i32 885
  %5246 = sext i32 %5245 to i64
  %5247 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5246
  %5248 = load i32, i32* %5247, align 4, !tbaa !400
  %5249 = insertelement <1024 x i32> %5244, i32 %5248, i32 885
  %5250 = extractelement <1024 x i32> %t29, i32 886
  %5251 = sext i32 %5250 to i64
  %5252 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5251
  %5253 = load i32, i32* %5252, align 4, !tbaa !400
  %5254 = insertelement <1024 x i32> %5249, i32 %5253, i32 886
  %5255 = extractelement <1024 x i32> %t29, i32 887
  %5256 = sext i32 %5255 to i64
  %5257 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5256
  %5258 = load i32, i32* %5257, align 4, !tbaa !400
  %5259 = insertelement <1024 x i32> %5254, i32 %5258, i32 887
  %5260 = extractelement <1024 x i32> %t29, i32 888
  %5261 = sext i32 %5260 to i64
  %5262 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5261
  %5263 = load i32, i32* %5262, align 4, !tbaa !400
  %5264 = insertelement <1024 x i32> %5259, i32 %5263, i32 888
  %5265 = extractelement <1024 x i32> %t29, i32 889
  %5266 = sext i32 %5265 to i64
  %5267 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5266
  %5268 = load i32, i32* %5267, align 4, !tbaa !400
  %5269 = insertelement <1024 x i32> %5264, i32 %5268, i32 889
  %5270 = extractelement <1024 x i32> %t29, i32 890
  %5271 = sext i32 %5270 to i64
  %5272 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5271
  %5273 = load i32, i32* %5272, align 4, !tbaa !400
  %5274 = insertelement <1024 x i32> %5269, i32 %5273, i32 890
  %5275 = extractelement <1024 x i32> %t29, i32 891
  %5276 = sext i32 %5275 to i64
  %5277 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5276
  %5278 = load i32, i32* %5277, align 4, !tbaa !400
  %5279 = insertelement <1024 x i32> %5274, i32 %5278, i32 891
  %5280 = extractelement <1024 x i32> %t29, i32 892
  %5281 = sext i32 %5280 to i64
  %5282 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5281
  %5283 = load i32, i32* %5282, align 4, !tbaa !400
  %5284 = insertelement <1024 x i32> %5279, i32 %5283, i32 892
  %5285 = extractelement <1024 x i32> %t29, i32 893
  %5286 = sext i32 %5285 to i64
  %5287 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5286
  %5288 = load i32, i32* %5287, align 4, !tbaa !400
  %5289 = insertelement <1024 x i32> %5284, i32 %5288, i32 893
  %5290 = extractelement <1024 x i32> %t29, i32 894
  %5291 = sext i32 %5290 to i64
  %5292 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5291
  %5293 = load i32, i32* %5292, align 4, !tbaa !400
  %5294 = insertelement <1024 x i32> %5289, i32 %5293, i32 894
  %5295 = extractelement <1024 x i32> %t29, i32 895
  %5296 = sext i32 %5295 to i64
  %5297 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5296
  %5298 = load i32, i32* %5297, align 4, !tbaa !400
  %5299 = insertelement <1024 x i32> %5294, i32 %5298, i32 895
  %5300 = extractelement <1024 x i32> %t29, i32 896
  %5301 = sext i32 %5300 to i64
  %5302 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5301
  %5303 = load i32, i32* %5302, align 4, !tbaa !400
  %5304 = insertelement <1024 x i32> %5299, i32 %5303, i32 896
  %5305 = extractelement <1024 x i32> %t29, i32 897
  %5306 = sext i32 %5305 to i64
  %5307 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5306
  %5308 = load i32, i32* %5307, align 4, !tbaa !400
  %5309 = insertelement <1024 x i32> %5304, i32 %5308, i32 897
  %5310 = extractelement <1024 x i32> %t29, i32 898
  %5311 = sext i32 %5310 to i64
  %5312 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5311
  %5313 = load i32, i32* %5312, align 4, !tbaa !400
  %5314 = insertelement <1024 x i32> %5309, i32 %5313, i32 898
  %5315 = extractelement <1024 x i32> %t29, i32 899
  %5316 = sext i32 %5315 to i64
  %5317 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5316
  %5318 = load i32, i32* %5317, align 4, !tbaa !400
  %5319 = insertelement <1024 x i32> %5314, i32 %5318, i32 899
  %5320 = extractelement <1024 x i32> %t29, i32 900
  %5321 = sext i32 %5320 to i64
  %5322 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5321
  %5323 = load i32, i32* %5322, align 4, !tbaa !400
  %5324 = insertelement <1024 x i32> %5319, i32 %5323, i32 900
  %5325 = extractelement <1024 x i32> %t29, i32 901
  %5326 = sext i32 %5325 to i64
  %5327 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5326
  %5328 = load i32, i32* %5327, align 4, !tbaa !400
  %5329 = insertelement <1024 x i32> %5324, i32 %5328, i32 901
  %5330 = extractelement <1024 x i32> %t29, i32 902
  %5331 = sext i32 %5330 to i64
  %5332 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5331
  %5333 = load i32, i32* %5332, align 4, !tbaa !400
  %5334 = insertelement <1024 x i32> %5329, i32 %5333, i32 902
  %5335 = extractelement <1024 x i32> %t29, i32 903
  %5336 = sext i32 %5335 to i64
  %5337 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5336
  %5338 = load i32, i32* %5337, align 4, !tbaa !400
  %5339 = insertelement <1024 x i32> %5334, i32 %5338, i32 903
  %5340 = extractelement <1024 x i32> %t29, i32 904
  %5341 = sext i32 %5340 to i64
  %5342 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5341
  %5343 = load i32, i32* %5342, align 4, !tbaa !400
  %5344 = insertelement <1024 x i32> %5339, i32 %5343, i32 904
  %5345 = extractelement <1024 x i32> %t29, i32 905
  %5346 = sext i32 %5345 to i64
  %5347 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5346
  %5348 = load i32, i32* %5347, align 4, !tbaa !400
  %5349 = insertelement <1024 x i32> %5344, i32 %5348, i32 905
  %5350 = extractelement <1024 x i32> %t29, i32 906
  %5351 = sext i32 %5350 to i64
  %5352 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5351
  %5353 = load i32, i32* %5352, align 4, !tbaa !400
  %5354 = insertelement <1024 x i32> %5349, i32 %5353, i32 906
  %5355 = extractelement <1024 x i32> %t29, i32 907
  %5356 = sext i32 %5355 to i64
  %5357 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5356
  %5358 = load i32, i32* %5357, align 4, !tbaa !400
  %5359 = insertelement <1024 x i32> %5354, i32 %5358, i32 907
  %5360 = extractelement <1024 x i32> %t29, i32 908
  %5361 = sext i32 %5360 to i64
  %5362 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5361
  %5363 = load i32, i32* %5362, align 4, !tbaa !400
  %5364 = insertelement <1024 x i32> %5359, i32 %5363, i32 908
  %5365 = extractelement <1024 x i32> %t29, i32 909
  %5366 = sext i32 %5365 to i64
  %5367 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5366
  %5368 = load i32, i32* %5367, align 4, !tbaa !400
  %5369 = insertelement <1024 x i32> %5364, i32 %5368, i32 909
  %5370 = extractelement <1024 x i32> %t29, i32 910
  %5371 = sext i32 %5370 to i64
  %5372 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5371
  %5373 = load i32, i32* %5372, align 4, !tbaa !400
  %5374 = insertelement <1024 x i32> %5369, i32 %5373, i32 910
  %5375 = extractelement <1024 x i32> %t29, i32 911
  %5376 = sext i32 %5375 to i64
  %5377 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5376
  %5378 = load i32, i32* %5377, align 4, !tbaa !400
  %5379 = insertelement <1024 x i32> %5374, i32 %5378, i32 911
  %5380 = extractelement <1024 x i32> %t29, i32 912
  %5381 = sext i32 %5380 to i64
  %5382 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5381
  %5383 = load i32, i32* %5382, align 4, !tbaa !400
  %5384 = insertelement <1024 x i32> %5379, i32 %5383, i32 912
  %5385 = extractelement <1024 x i32> %t29, i32 913
  %5386 = sext i32 %5385 to i64
  %5387 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5386
  %5388 = load i32, i32* %5387, align 4, !tbaa !400
  %5389 = insertelement <1024 x i32> %5384, i32 %5388, i32 913
  %5390 = extractelement <1024 x i32> %t29, i32 914
  %5391 = sext i32 %5390 to i64
  %5392 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5391
  %5393 = load i32, i32* %5392, align 4, !tbaa !400
  %5394 = insertelement <1024 x i32> %5389, i32 %5393, i32 914
  %5395 = extractelement <1024 x i32> %t29, i32 915
  %5396 = sext i32 %5395 to i64
  %5397 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5396
  %5398 = load i32, i32* %5397, align 4, !tbaa !400
  %5399 = insertelement <1024 x i32> %5394, i32 %5398, i32 915
  %5400 = extractelement <1024 x i32> %t29, i32 916
  %5401 = sext i32 %5400 to i64
  %5402 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5401
  %5403 = load i32, i32* %5402, align 4, !tbaa !400
  %5404 = insertelement <1024 x i32> %5399, i32 %5403, i32 916
  %5405 = extractelement <1024 x i32> %t29, i32 917
  %5406 = sext i32 %5405 to i64
  %5407 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5406
  %5408 = load i32, i32* %5407, align 4, !tbaa !400
  %5409 = insertelement <1024 x i32> %5404, i32 %5408, i32 917
  %5410 = extractelement <1024 x i32> %t29, i32 918
  %5411 = sext i32 %5410 to i64
  %5412 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5411
  %5413 = load i32, i32* %5412, align 4, !tbaa !400
  %5414 = insertelement <1024 x i32> %5409, i32 %5413, i32 918
  %5415 = extractelement <1024 x i32> %t29, i32 919
  %5416 = sext i32 %5415 to i64
  %5417 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5416
  %5418 = load i32, i32* %5417, align 4, !tbaa !400
  %5419 = insertelement <1024 x i32> %5414, i32 %5418, i32 919
  %5420 = extractelement <1024 x i32> %t29, i32 920
  %5421 = sext i32 %5420 to i64
  %5422 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5421
  %5423 = load i32, i32* %5422, align 4, !tbaa !400
  %5424 = insertelement <1024 x i32> %5419, i32 %5423, i32 920
  %5425 = extractelement <1024 x i32> %t29, i32 921
  %5426 = sext i32 %5425 to i64
  %5427 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5426
  %5428 = load i32, i32* %5427, align 4, !tbaa !400
  %5429 = insertelement <1024 x i32> %5424, i32 %5428, i32 921
  %5430 = extractelement <1024 x i32> %t29, i32 922
  %5431 = sext i32 %5430 to i64
  %5432 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5431
  %5433 = load i32, i32* %5432, align 4, !tbaa !400
  %5434 = insertelement <1024 x i32> %5429, i32 %5433, i32 922
  %5435 = extractelement <1024 x i32> %t29, i32 923
  %5436 = sext i32 %5435 to i64
  %5437 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5436
  %5438 = load i32, i32* %5437, align 4, !tbaa !400
  %5439 = insertelement <1024 x i32> %5434, i32 %5438, i32 923
  %5440 = extractelement <1024 x i32> %t29, i32 924
  %5441 = sext i32 %5440 to i64
  %5442 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5441
  %5443 = load i32, i32* %5442, align 4, !tbaa !400
  %5444 = insertelement <1024 x i32> %5439, i32 %5443, i32 924
  %5445 = extractelement <1024 x i32> %t29, i32 925
  %5446 = sext i32 %5445 to i64
  %5447 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5446
  %5448 = load i32, i32* %5447, align 4, !tbaa !400
  %5449 = insertelement <1024 x i32> %5444, i32 %5448, i32 925
  %5450 = extractelement <1024 x i32> %t29, i32 926
  %5451 = sext i32 %5450 to i64
  %5452 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5451
  %5453 = load i32, i32* %5452, align 4, !tbaa !400
  %5454 = insertelement <1024 x i32> %5449, i32 %5453, i32 926
  %5455 = extractelement <1024 x i32> %t29, i32 927
  %5456 = sext i32 %5455 to i64
  %5457 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5456
  %5458 = load i32, i32* %5457, align 4, !tbaa !400
  %5459 = insertelement <1024 x i32> %5454, i32 %5458, i32 927
  %5460 = extractelement <1024 x i32> %t29, i32 928
  %5461 = sext i32 %5460 to i64
  %5462 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5461
  %5463 = load i32, i32* %5462, align 4, !tbaa !400
  %5464 = insertelement <1024 x i32> %5459, i32 %5463, i32 928
  %5465 = extractelement <1024 x i32> %t29, i32 929
  %5466 = sext i32 %5465 to i64
  %5467 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5466
  %5468 = load i32, i32* %5467, align 4, !tbaa !400
  %5469 = insertelement <1024 x i32> %5464, i32 %5468, i32 929
  %5470 = extractelement <1024 x i32> %t29, i32 930
  %5471 = sext i32 %5470 to i64
  %5472 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5471
  %5473 = load i32, i32* %5472, align 4, !tbaa !400
  %5474 = insertelement <1024 x i32> %5469, i32 %5473, i32 930
  %5475 = extractelement <1024 x i32> %t29, i32 931
  %5476 = sext i32 %5475 to i64
  %5477 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5476
  %5478 = load i32, i32* %5477, align 4, !tbaa !400
  %5479 = insertelement <1024 x i32> %5474, i32 %5478, i32 931
  %5480 = extractelement <1024 x i32> %t29, i32 932
  %5481 = sext i32 %5480 to i64
  %5482 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5481
  %5483 = load i32, i32* %5482, align 4, !tbaa !400
  %5484 = insertelement <1024 x i32> %5479, i32 %5483, i32 932
  %5485 = extractelement <1024 x i32> %t29, i32 933
  %5486 = sext i32 %5485 to i64
  %5487 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5486
  %5488 = load i32, i32* %5487, align 4, !tbaa !400
  %5489 = insertelement <1024 x i32> %5484, i32 %5488, i32 933
  %5490 = extractelement <1024 x i32> %t29, i32 934
  %5491 = sext i32 %5490 to i64
  %5492 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5491
  %5493 = load i32, i32* %5492, align 4, !tbaa !400
  %5494 = insertelement <1024 x i32> %5489, i32 %5493, i32 934
  %5495 = extractelement <1024 x i32> %t29, i32 935
  %5496 = sext i32 %5495 to i64
  %5497 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5496
  %5498 = load i32, i32* %5497, align 4, !tbaa !400
  %5499 = insertelement <1024 x i32> %5494, i32 %5498, i32 935
  %5500 = extractelement <1024 x i32> %t29, i32 936
  %5501 = sext i32 %5500 to i64
  %5502 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5501
  %5503 = load i32, i32* %5502, align 4, !tbaa !400
  %5504 = insertelement <1024 x i32> %5499, i32 %5503, i32 936
  %5505 = extractelement <1024 x i32> %t29, i32 937
  %5506 = sext i32 %5505 to i64
  %5507 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5506
  %5508 = load i32, i32* %5507, align 4, !tbaa !400
  %5509 = insertelement <1024 x i32> %5504, i32 %5508, i32 937
  %5510 = extractelement <1024 x i32> %t29, i32 938
  %5511 = sext i32 %5510 to i64
  %5512 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5511
  %5513 = load i32, i32* %5512, align 4, !tbaa !400
  %5514 = insertelement <1024 x i32> %5509, i32 %5513, i32 938
  %5515 = extractelement <1024 x i32> %t29, i32 939
  %5516 = sext i32 %5515 to i64
  %5517 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5516
  %5518 = load i32, i32* %5517, align 4, !tbaa !400
  %5519 = insertelement <1024 x i32> %5514, i32 %5518, i32 939
  %5520 = extractelement <1024 x i32> %t29, i32 940
  %5521 = sext i32 %5520 to i64
  %5522 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5521
  %5523 = load i32, i32* %5522, align 4, !tbaa !400
  %5524 = insertelement <1024 x i32> %5519, i32 %5523, i32 940
  %5525 = extractelement <1024 x i32> %t29, i32 941
  %5526 = sext i32 %5525 to i64
  %5527 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5526
  %5528 = load i32, i32* %5527, align 4, !tbaa !400
  %5529 = insertelement <1024 x i32> %5524, i32 %5528, i32 941
  %5530 = extractelement <1024 x i32> %t29, i32 942
  %5531 = sext i32 %5530 to i64
  %5532 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5531
  %5533 = load i32, i32* %5532, align 4, !tbaa !400
  %5534 = insertelement <1024 x i32> %5529, i32 %5533, i32 942
  %5535 = extractelement <1024 x i32> %t29, i32 943
  %5536 = sext i32 %5535 to i64
  %5537 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5536
  %5538 = load i32, i32* %5537, align 4, !tbaa !400
  %5539 = insertelement <1024 x i32> %5534, i32 %5538, i32 943
  %5540 = extractelement <1024 x i32> %t29, i32 944
  %5541 = sext i32 %5540 to i64
  %5542 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5541
  %5543 = load i32, i32* %5542, align 4, !tbaa !400
  %5544 = insertelement <1024 x i32> %5539, i32 %5543, i32 944
  %5545 = extractelement <1024 x i32> %t29, i32 945
  %5546 = sext i32 %5545 to i64
  %5547 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5546
  %5548 = load i32, i32* %5547, align 4, !tbaa !400
  %5549 = insertelement <1024 x i32> %5544, i32 %5548, i32 945
  %5550 = extractelement <1024 x i32> %t29, i32 946
  %5551 = sext i32 %5550 to i64
  %5552 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5551
  %5553 = load i32, i32* %5552, align 4, !tbaa !400
  %5554 = insertelement <1024 x i32> %5549, i32 %5553, i32 946
  %5555 = extractelement <1024 x i32> %t29, i32 947
  %5556 = sext i32 %5555 to i64
  %5557 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5556
  %5558 = load i32, i32* %5557, align 4, !tbaa !400
  %5559 = insertelement <1024 x i32> %5554, i32 %5558, i32 947
  %5560 = extractelement <1024 x i32> %t29, i32 948
  %5561 = sext i32 %5560 to i64
  %5562 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5561
  %5563 = load i32, i32* %5562, align 4, !tbaa !400
  %5564 = insertelement <1024 x i32> %5559, i32 %5563, i32 948
  %5565 = extractelement <1024 x i32> %t29, i32 949
  %5566 = sext i32 %5565 to i64
  %5567 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5566
  %5568 = load i32, i32* %5567, align 4, !tbaa !400
  %5569 = insertelement <1024 x i32> %5564, i32 %5568, i32 949
  %5570 = extractelement <1024 x i32> %t29, i32 950
  %5571 = sext i32 %5570 to i64
  %5572 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5571
  %5573 = load i32, i32* %5572, align 4, !tbaa !400
  %5574 = insertelement <1024 x i32> %5569, i32 %5573, i32 950
  %5575 = extractelement <1024 x i32> %t29, i32 951
  %5576 = sext i32 %5575 to i64
  %5577 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5576
  %5578 = load i32, i32* %5577, align 4, !tbaa !400
  %5579 = insertelement <1024 x i32> %5574, i32 %5578, i32 951
  %5580 = extractelement <1024 x i32> %t29, i32 952
  %5581 = sext i32 %5580 to i64
  %5582 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5581
  %5583 = load i32, i32* %5582, align 4, !tbaa !400
  %5584 = insertelement <1024 x i32> %5579, i32 %5583, i32 952
  %5585 = extractelement <1024 x i32> %t29, i32 953
  %5586 = sext i32 %5585 to i64
  %5587 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5586
  %5588 = load i32, i32* %5587, align 4, !tbaa !400
  %5589 = insertelement <1024 x i32> %5584, i32 %5588, i32 953
  %5590 = extractelement <1024 x i32> %t29, i32 954
  %5591 = sext i32 %5590 to i64
  %5592 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5591
  %5593 = load i32, i32* %5592, align 4, !tbaa !400
  %5594 = insertelement <1024 x i32> %5589, i32 %5593, i32 954
  %5595 = extractelement <1024 x i32> %t29, i32 955
  %5596 = sext i32 %5595 to i64
  %5597 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5596
  %5598 = load i32, i32* %5597, align 4, !tbaa !400
  %5599 = insertelement <1024 x i32> %5594, i32 %5598, i32 955
  %5600 = extractelement <1024 x i32> %t29, i32 956
  %5601 = sext i32 %5600 to i64
  %5602 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5601
  %5603 = load i32, i32* %5602, align 4, !tbaa !400
  %5604 = insertelement <1024 x i32> %5599, i32 %5603, i32 956
  %5605 = extractelement <1024 x i32> %t29, i32 957
  %5606 = sext i32 %5605 to i64
  %5607 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5606
  %5608 = load i32, i32* %5607, align 4, !tbaa !400
  %5609 = insertelement <1024 x i32> %5604, i32 %5608, i32 957
  %5610 = extractelement <1024 x i32> %t29, i32 958
  %5611 = sext i32 %5610 to i64
  %5612 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5611
  %5613 = load i32, i32* %5612, align 4, !tbaa !400
  %5614 = insertelement <1024 x i32> %5609, i32 %5613, i32 958
  %5615 = extractelement <1024 x i32> %t29, i32 959
  %5616 = sext i32 %5615 to i64
  %5617 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5616
  %5618 = load i32, i32* %5617, align 4, !tbaa !400
  %5619 = insertelement <1024 x i32> %5614, i32 %5618, i32 959
  %5620 = extractelement <1024 x i32> %t29, i32 960
  %5621 = sext i32 %5620 to i64
  %5622 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5621
  %5623 = load i32, i32* %5622, align 4, !tbaa !400
  %5624 = insertelement <1024 x i32> %5619, i32 %5623, i32 960
  %5625 = extractelement <1024 x i32> %t29, i32 961
  %5626 = sext i32 %5625 to i64
  %5627 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5626
  %5628 = load i32, i32* %5627, align 4, !tbaa !400
  %5629 = insertelement <1024 x i32> %5624, i32 %5628, i32 961
  %5630 = extractelement <1024 x i32> %t29, i32 962
  %5631 = sext i32 %5630 to i64
  %5632 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5631
  %5633 = load i32, i32* %5632, align 4, !tbaa !400
  %5634 = insertelement <1024 x i32> %5629, i32 %5633, i32 962
  %5635 = extractelement <1024 x i32> %t29, i32 963
  %5636 = sext i32 %5635 to i64
  %5637 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5636
  %5638 = load i32, i32* %5637, align 4, !tbaa !400
  %5639 = insertelement <1024 x i32> %5634, i32 %5638, i32 963
  %5640 = extractelement <1024 x i32> %t29, i32 964
  %5641 = sext i32 %5640 to i64
  %5642 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5641
  %5643 = load i32, i32* %5642, align 4, !tbaa !400
  %5644 = insertelement <1024 x i32> %5639, i32 %5643, i32 964
  %5645 = extractelement <1024 x i32> %t29, i32 965
  %5646 = sext i32 %5645 to i64
  %5647 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5646
  %5648 = load i32, i32* %5647, align 4, !tbaa !400
  %5649 = insertelement <1024 x i32> %5644, i32 %5648, i32 965
  %5650 = extractelement <1024 x i32> %t29, i32 966
  %5651 = sext i32 %5650 to i64
  %5652 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5651
  %5653 = load i32, i32* %5652, align 4, !tbaa !400
  %5654 = insertelement <1024 x i32> %5649, i32 %5653, i32 966
  %5655 = extractelement <1024 x i32> %t29, i32 967
  %5656 = sext i32 %5655 to i64
  %5657 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5656
  %5658 = load i32, i32* %5657, align 4, !tbaa !400
  %5659 = insertelement <1024 x i32> %5654, i32 %5658, i32 967
  %5660 = extractelement <1024 x i32> %t29, i32 968
  %5661 = sext i32 %5660 to i64
  %5662 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5661
  %5663 = load i32, i32* %5662, align 4, !tbaa !400
  %5664 = insertelement <1024 x i32> %5659, i32 %5663, i32 968
  %5665 = extractelement <1024 x i32> %t29, i32 969
  %5666 = sext i32 %5665 to i64
  %5667 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5666
  %5668 = load i32, i32* %5667, align 4, !tbaa !400
  %5669 = insertelement <1024 x i32> %5664, i32 %5668, i32 969
  %5670 = extractelement <1024 x i32> %t29, i32 970
  %5671 = sext i32 %5670 to i64
  %5672 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5671
  %5673 = load i32, i32* %5672, align 4, !tbaa !400
  %5674 = insertelement <1024 x i32> %5669, i32 %5673, i32 970
  %5675 = extractelement <1024 x i32> %t29, i32 971
  %5676 = sext i32 %5675 to i64
  %5677 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5676
  %5678 = load i32, i32* %5677, align 4, !tbaa !400
  %5679 = insertelement <1024 x i32> %5674, i32 %5678, i32 971
  %5680 = extractelement <1024 x i32> %t29, i32 972
  %5681 = sext i32 %5680 to i64
  %5682 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5681
  %5683 = load i32, i32* %5682, align 4, !tbaa !400
  %5684 = insertelement <1024 x i32> %5679, i32 %5683, i32 972
  %5685 = extractelement <1024 x i32> %t29, i32 973
  %5686 = sext i32 %5685 to i64
  %5687 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5686
  %5688 = load i32, i32* %5687, align 4, !tbaa !400
  %5689 = insertelement <1024 x i32> %5684, i32 %5688, i32 973
  %5690 = extractelement <1024 x i32> %t29, i32 974
  %5691 = sext i32 %5690 to i64
  %5692 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5691
  %5693 = load i32, i32* %5692, align 4, !tbaa !400
  %5694 = insertelement <1024 x i32> %5689, i32 %5693, i32 974
  %5695 = extractelement <1024 x i32> %t29, i32 975
  %5696 = sext i32 %5695 to i64
  %5697 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5696
  %5698 = load i32, i32* %5697, align 4, !tbaa !400
  %5699 = insertelement <1024 x i32> %5694, i32 %5698, i32 975
  %5700 = extractelement <1024 x i32> %t29, i32 976
  %5701 = sext i32 %5700 to i64
  %5702 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5701
  %5703 = load i32, i32* %5702, align 4, !tbaa !400
  %5704 = insertelement <1024 x i32> %5699, i32 %5703, i32 976
  %5705 = extractelement <1024 x i32> %t29, i32 977
  %5706 = sext i32 %5705 to i64
  %5707 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5706
  %5708 = load i32, i32* %5707, align 4, !tbaa !400
  %5709 = insertelement <1024 x i32> %5704, i32 %5708, i32 977
  %5710 = extractelement <1024 x i32> %t29, i32 978
  %5711 = sext i32 %5710 to i64
  %5712 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5711
  %5713 = load i32, i32* %5712, align 4, !tbaa !400
  %5714 = insertelement <1024 x i32> %5709, i32 %5713, i32 978
  %5715 = extractelement <1024 x i32> %t29, i32 979
  %5716 = sext i32 %5715 to i64
  %5717 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5716
  %5718 = load i32, i32* %5717, align 4, !tbaa !400
  %5719 = insertelement <1024 x i32> %5714, i32 %5718, i32 979
  %5720 = extractelement <1024 x i32> %t29, i32 980
  %5721 = sext i32 %5720 to i64
  %5722 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5721
  %5723 = load i32, i32* %5722, align 4, !tbaa !400
  %5724 = insertelement <1024 x i32> %5719, i32 %5723, i32 980
  %5725 = extractelement <1024 x i32> %t29, i32 981
  %5726 = sext i32 %5725 to i64
  %5727 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5726
  %5728 = load i32, i32* %5727, align 4, !tbaa !400
  %5729 = insertelement <1024 x i32> %5724, i32 %5728, i32 981
  %5730 = extractelement <1024 x i32> %t29, i32 982
  %5731 = sext i32 %5730 to i64
  %5732 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5731
  %5733 = load i32, i32* %5732, align 4, !tbaa !400
  %5734 = insertelement <1024 x i32> %5729, i32 %5733, i32 982
  %5735 = extractelement <1024 x i32> %t29, i32 983
  %5736 = sext i32 %5735 to i64
  %5737 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5736
  %5738 = load i32, i32* %5737, align 4, !tbaa !400
  %5739 = insertelement <1024 x i32> %5734, i32 %5738, i32 983
  %5740 = extractelement <1024 x i32> %t29, i32 984
  %5741 = sext i32 %5740 to i64
  %5742 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5741
  %5743 = load i32, i32* %5742, align 4, !tbaa !400
  %5744 = insertelement <1024 x i32> %5739, i32 %5743, i32 984
  %5745 = extractelement <1024 x i32> %t29, i32 985
  %5746 = sext i32 %5745 to i64
  %5747 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5746
  %5748 = load i32, i32* %5747, align 4, !tbaa !400
  %5749 = insertelement <1024 x i32> %5744, i32 %5748, i32 985
  %5750 = extractelement <1024 x i32> %t29, i32 986
  %5751 = sext i32 %5750 to i64
  %5752 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5751
  %5753 = load i32, i32* %5752, align 4, !tbaa !400
  %5754 = insertelement <1024 x i32> %5749, i32 %5753, i32 986
  %5755 = extractelement <1024 x i32> %t29, i32 987
  %5756 = sext i32 %5755 to i64
  %5757 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5756
  %5758 = load i32, i32* %5757, align 4, !tbaa !400
  %5759 = insertelement <1024 x i32> %5754, i32 %5758, i32 987
  %5760 = extractelement <1024 x i32> %t29, i32 988
  %5761 = sext i32 %5760 to i64
  %5762 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5761
  %5763 = load i32, i32* %5762, align 4, !tbaa !400
  %5764 = insertelement <1024 x i32> %5759, i32 %5763, i32 988
  %5765 = extractelement <1024 x i32> %t29, i32 989
  %5766 = sext i32 %5765 to i64
  %5767 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5766
  %5768 = load i32, i32* %5767, align 4, !tbaa !400
  %5769 = insertelement <1024 x i32> %5764, i32 %5768, i32 989
  %5770 = extractelement <1024 x i32> %t29, i32 990
  %5771 = sext i32 %5770 to i64
  %5772 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5771
  %5773 = load i32, i32* %5772, align 4, !tbaa !400
  %5774 = insertelement <1024 x i32> %5769, i32 %5773, i32 990
  %5775 = extractelement <1024 x i32> %t29, i32 991
  %5776 = sext i32 %5775 to i64
  %5777 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5776
  %5778 = load i32, i32* %5777, align 4, !tbaa !400
  %5779 = insertelement <1024 x i32> %5774, i32 %5778, i32 991
  %5780 = extractelement <1024 x i32> %t29, i32 992
  %5781 = sext i32 %5780 to i64
  %5782 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5781
  %5783 = load i32, i32* %5782, align 4, !tbaa !400
  %5784 = insertelement <1024 x i32> %5779, i32 %5783, i32 992
  %5785 = extractelement <1024 x i32> %t29, i32 993
  %5786 = sext i32 %5785 to i64
  %5787 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5786
  %5788 = load i32, i32* %5787, align 4, !tbaa !400
  %5789 = insertelement <1024 x i32> %5784, i32 %5788, i32 993
  %5790 = extractelement <1024 x i32> %t29, i32 994
  %5791 = sext i32 %5790 to i64
  %5792 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5791
  %5793 = load i32, i32* %5792, align 4, !tbaa !400
  %5794 = insertelement <1024 x i32> %5789, i32 %5793, i32 994
  %5795 = extractelement <1024 x i32> %t29, i32 995
  %5796 = sext i32 %5795 to i64
  %5797 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5796
  %5798 = load i32, i32* %5797, align 4, !tbaa !400
  %5799 = insertelement <1024 x i32> %5794, i32 %5798, i32 995
  %5800 = extractelement <1024 x i32> %t29, i32 996
  %5801 = sext i32 %5800 to i64
  %5802 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5801
  %5803 = load i32, i32* %5802, align 4, !tbaa !400
  %5804 = insertelement <1024 x i32> %5799, i32 %5803, i32 996
  %5805 = extractelement <1024 x i32> %t29, i32 997
  %5806 = sext i32 %5805 to i64
  %5807 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5806
  %5808 = load i32, i32* %5807, align 4, !tbaa !400
  %5809 = insertelement <1024 x i32> %5804, i32 %5808, i32 997
  %5810 = extractelement <1024 x i32> %t29, i32 998
  %5811 = sext i32 %5810 to i64
  %5812 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5811
  %5813 = load i32, i32* %5812, align 4, !tbaa !400
  %5814 = insertelement <1024 x i32> %5809, i32 %5813, i32 998
  %5815 = extractelement <1024 x i32> %t29, i32 999
  %5816 = sext i32 %5815 to i64
  %5817 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5816
  %5818 = load i32, i32* %5817, align 4, !tbaa !400
  %5819 = insertelement <1024 x i32> %5814, i32 %5818, i32 999
  %5820 = extractelement <1024 x i32> %t29, i32 1000
  %5821 = sext i32 %5820 to i64
  %5822 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5821
  %5823 = load i32, i32* %5822, align 4, !tbaa !400
  %5824 = insertelement <1024 x i32> %5819, i32 %5823, i32 1000
  %5825 = extractelement <1024 x i32> %t29, i32 1001
  %5826 = sext i32 %5825 to i64
  %5827 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5826
  %5828 = load i32, i32* %5827, align 4, !tbaa !400
  %5829 = insertelement <1024 x i32> %5824, i32 %5828, i32 1001
  %5830 = extractelement <1024 x i32> %t29, i32 1002
  %5831 = sext i32 %5830 to i64
  %5832 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5831
  %5833 = load i32, i32* %5832, align 4, !tbaa !400
  %5834 = insertelement <1024 x i32> %5829, i32 %5833, i32 1002
  %5835 = extractelement <1024 x i32> %t29, i32 1003
  %5836 = sext i32 %5835 to i64
  %5837 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5836
  %5838 = load i32, i32* %5837, align 4, !tbaa !400
  %5839 = insertelement <1024 x i32> %5834, i32 %5838, i32 1003
  %5840 = extractelement <1024 x i32> %t29, i32 1004
  %5841 = sext i32 %5840 to i64
  %5842 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5841
  %5843 = load i32, i32* %5842, align 4, !tbaa !400
  %5844 = insertelement <1024 x i32> %5839, i32 %5843, i32 1004
  %5845 = extractelement <1024 x i32> %t29, i32 1005
  %5846 = sext i32 %5845 to i64
  %5847 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5846
  %5848 = load i32, i32* %5847, align 4, !tbaa !400
  %5849 = insertelement <1024 x i32> %5844, i32 %5848, i32 1005
  %5850 = extractelement <1024 x i32> %t29, i32 1006
  %5851 = sext i32 %5850 to i64
  %5852 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5851
  %5853 = load i32, i32* %5852, align 4, !tbaa !400
  %5854 = insertelement <1024 x i32> %5849, i32 %5853, i32 1006
  %5855 = extractelement <1024 x i32> %t29, i32 1007
  %5856 = sext i32 %5855 to i64
  %5857 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5856
  %5858 = load i32, i32* %5857, align 4, !tbaa !400
  %5859 = insertelement <1024 x i32> %5854, i32 %5858, i32 1007
  %5860 = extractelement <1024 x i32> %t29, i32 1008
  %5861 = sext i32 %5860 to i64
  %5862 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5861
  %5863 = load i32, i32* %5862, align 4, !tbaa !400
  %5864 = insertelement <1024 x i32> %5859, i32 %5863, i32 1008
  %5865 = extractelement <1024 x i32> %t29, i32 1009
  %5866 = sext i32 %5865 to i64
  %5867 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5866
  %5868 = load i32, i32* %5867, align 4, !tbaa !400
  %5869 = insertelement <1024 x i32> %5864, i32 %5868, i32 1009
  %5870 = extractelement <1024 x i32> %t29, i32 1010
  %5871 = sext i32 %5870 to i64
  %5872 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5871
  %5873 = load i32, i32* %5872, align 4, !tbaa !400
  %5874 = insertelement <1024 x i32> %5869, i32 %5873, i32 1010
  %5875 = extractelement <1024 x i32> %t29, i32 1011
  %5876 = sext i32 %5875 to i64
  %5877 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5876
  %5878 = load i32, i32* %5877, align 4, !tbaa !400
  %5879 = insertelement <1024 x i32> %5874, i32 %5878, i32 1011
  %5880 = extractelement <1024 x i32> %t29, i32 1012
  %5881 = sext i32 %5880 to i64
  %5882 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5881
  %5883 = load i32, i32* %5882, align 4, !tbaa !400
  %5884 = insertelement <1024 x i32> %5879, i32 %5883, i32 1012
  %5885 = extractelement <1024 x i32> %t29, i32 1013
  %5886 = sext i32 %5885 to i64
  %5887 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5886
  %5888 = load i32, i32* %5887, align 4, !tbaa !400
  %5889 = insertelement <1024 x i32> %5884, i32 %5888, i32 1013
  %5890 = extractelement <1024 x i32> %t29, i32 1014
  %5891 = sext i32 %5890 to i64
  %5892 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5891
  %5893 = load i32, i32* %5892, align 4, !tbaa !400
  %5894 = insertelement <1024 x i32> %5889, i32 %5893, i32 1014
  %5895 = extractelement <1024 x i32> %t29, i32 1015
  %5896 = sext i32 %5895 to i64
  %5897 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5896
  %5898 = load i32, i32* %5897, align 4, !tbaa !400
  %5899 = insertelement <1024 x i32> %5894, i32 %5898, i32 1015
  %5900 = extractelement <1024 x i32> %t29, i32 1016
  %5901 = sext i32 %5900 to i64
  %5902 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5901
  %5903 = load i32, i32* %5902, align 4, !tbaa !400
  %5904 = insertelement <1024 x i32> %5899, i32 %5903, i32 1016
  %5905 = extractelement <1024 x i32> %t29, i32 1017
  %5906 = sext i32 %5905 to i64
  %5907 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5906
  %5908 = load i32, i32* %5907, align 4, !tbaa !400
  %5909 = insertelement <1024 x i32> %5904, i32 %5908, i32 1017
  %5910 = extractelement <1024 x i32> %t29, i32 1018
  %5911 = sext i32 %5910 to i64
  %5912 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5911
  %5913 = load i32, i32* %5912, align 4, !tbaa !400
  %5914 = insertelement <1024 x i32> %5909, i32 %5913, i32 1018
  %5915 = extractelement <1024 x i32> %t29, i32 1019
  %5916 = sext i32 %5915 to i64
  %5917 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5916
  %5918 = load i32, i32* %5917, align 4, !tbaa !400
  %5919 = insertelement <1024 x i32> %5914, i32 %5918, i32 1019
  %5920 = extractelement <1024 x i32> %t29, i32 1020
  %5921 = sext i32 %5920 to i64
  %5922 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5921
  %5923 = load i32, i32* %5922, align 4, !tbaa !400
  %5924 = insertelement <1024 x i32> %5919, i32 %5923, i32 1020
  %5925 = extractelement <1024 x i32> %t29, i32 1021
  %5926 = sext i32 %5925 to i64
  %5927 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5926
  %5928 = load i32, i32* %5927, align 4, !tbaa !400
  %5929 = insertelement <1024 x i32> %5924, i32 %5928, i32 1021
  %5930 = extractelement <1024 x i32> %t29, i32 1022
  %5931 = sext i32 %5930 to i64
  %5932 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5931
  %5933 = load i32, i32* %5932, align 4, !tbaa !400
  %5934 = insertelement <1024 x i32> %5929, i32 %5933, i32 1022
  %5935 = extractelement <1024 x i32> %t29, i32 1023
  %5936 = sext i32 %5935 to i64
  %5937 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %5936
  %5938 = load i32, i32* %5937, align 4, !tbaa !400
  %5939 = insertelement <1024 x i32> %5934, i32 %5938, i32 1023
  %5940 = add nsw <1024 x i32> %5939, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %5941 = extractelement <1024 x i32> %5940, i32 0
  store i32 %5941, i32* %822, align 4, !tbaa !400
  %5942 = extractelement <1024 x i32> %5940, i32 1
  store i32 %5942, i32* %827, align 4, !tbaa !400
  %5943 = extractelement <1024 x i32> %5940, i32 2
  store i32 %5943, i32* %832, align 4, !tbaa !400
  %5944 = extractelement <1024 x i32> %5940, i32 3
  store i32 %5944, i32* %837, align 4, !tbaa !400
  %5945 = extractelement <1024 x i32> %5940, i32 4
  store i32 %5945, i32* %842, align 4, !tbaa !400
  %5946 = extractelement <1024 x i32> %5940, i32 5
  store i32 %5946, i32* %847, align 4, !tbaa !400
  %5947 = extractelement <1024 x i32> %5940, i32 6
  store i32 %5947, i32* %852, align 4, !tbaa !400
  %5948 = extractelement <1024 x i32> %5940, i32 7
  store i32 %5948, i32* %857, align 4, !tbaa !400
  %5949 = extractelement <1024 x i32> %5940, i32 8
  store i32 %5949, i32* %862, align 4, !tbaa !400
  %5950 = extractelement <1024 x i32> %5940, i32 9
  store i32 %5950, i32* %867, align 4, !tbaa !400
  %5951 = extractelement <1024 x i32> %5940, i32 10
  store i32 %5951, i32* %872, align 4, !tbaa !400
  %5952 = extractelement <1024 x i32> %5940, i32 11
  store i32 %5952, i32* %877, align 4, !tbaa !400
  %5953 = extractelement <1024 x i32> %5940, i32 12
  store i32 %5953, i32* %882, align 4, !tbaa !400
  %5954 = extractelement <1024 x i32> %5940, i32 13
  store i32 %5954, i32* %887, align 4, !tbaa !400
  %5955 = extractelement <1024 x i32> %5940, i32 14
  store i32 %5955, i32* %892, align 4, !tbaa !400
  %5956 = extractelement <1024 x i32> %5940, i32 15
  store i32 %5956, i32* %897, align 4, !tbaa !400
  %5957 = extractelement <1024 x i32> %5940, i32 16
  store i32 %5957, i32* %902, align 4, !tbaa !400
  %5958 = extractelement <1024 x i32> %5940, i32 17
  store i32 %5958, i32* %907, align 4, !tbaa !400
  %5959 = extractelement <1024 x i32> %5940, i32 18
  store i32 %5959, i32* %912, align 4, !tbaa !400
  %5960 = extractelement <1024 x i32> %5940, i32 19
  store i32 %5960, i32* %917, align 4, !tbaa !400
  %5961 = extractelement <1024 x i32> %5940, i32 20
  store i32 %5961, i32* %922, align 4, !tbaa !400
  %5962 = extractelement <1024 x i32> %5940, i32 21
  store i32 %5962, i32* %927, align 4, !tbaa !400
  %5963 = extractelement <1024 x i32> %5940, i32 22
  store i32 %5963, i32* %932, align 4, !tbaa !400
  %5964 = extractelement <1024 x i32> %5940, i32 23
  store i32 %5964, i32* %937, align 4, !tbaa !400
  %5965 = extractelement <1024 x i32> %5940, i32 24
  store i32 %5965, i32* %942, align 4, !tbaa !400
  %5966 = extractelement <1024 x i32> %5940, i32 25
  store i32 %5966, i32* %947, align 4, !tbaa !400
  %5967 = extractelement <1024 x i32> %5940, i32 26
  store i32 %5967, i32* %952, align 4, !tbaa !400
  %5968 = extractelement <1024 x i32> %5940, i32 27
  store i32 %5968, i32* %957, align 4, !tbaa !400
  %5969 = extractelement <1024 x i32> %5940, i32 28
  store i32 %5969, i32* %962, align 4, !tbaa !400
  %5970 = extractelement <1024 x i32> %5940, i32 29
  store i32 %5970, i32* %967, align 4, !tbaa !400
  %5971 = extractelement <1024 x i32> %5940, i32 30
  store i32 %5971, i32* %972, align 4, !tbaa !400
  %5972 = extractelement <1024 x i32> %5940, i32 31
  store i32 %5972, i32* %977, align 4, !tbaa !400
  %5973 = extractelement <1024 x i32> %5940, i32 32
  store i32 %5973, i32* %982, align 4, !tbaa !400
  %5974 = extractelement <1024 x i32> %5940, i32 33
  store i32 %5974, i32* %987, align 4, !tbaa !400
  %5975 = extractelement <1024 x i32> %5940, i32 34
  store i32 %5975, i32* %992, align 4, !tbaa !400
  %5976 = extractelement <1024 x i32> %5940, i32 35
  store i32 %5976, i32* %997, align 4, !tbaa !400
  %5977 = extractelement <1024 x i32> %5940, i32 36
  store i32 %5977, i32* %1002, align 4, !tbaa !400
  %5978 = extractelement <1024 x i32> %5940, i32 37
  store i32 %5978, i32* %1007, align 4, !tbaa !400
  %5979 = extractelement <1024 x i32> %5940, i32 38
  store i32 %5979, i32* %1012, align 4, !tbaa !400
  %5980 = extractelement <1024 x i32> %5940, i32 39
  store i32 %5980, i32* %1017, align 4, !tbaa !400
  %5981 = extractelement <1024 x i32> %5940, i32 40
  store i32 %5981, i32* %1022, align 4, !tbaa !400
  %5982 = extractelement <1024 x i32> %5940, i32 41
  store i32 %5982, i32* %1027, align 4, !tbaa !400
  %5983 = extractelement <1024 x i32> %5940, i32 42
  store i32 %5983, i32* %1032, align 4, !tbaa !400
  %5984 = extractelement <1024 x i32> %5940, i32 43
  store i32 %5984, i32* %1037, align 4, !tbaa !400
  %5985 = extractelement <1024 x i32> %5940, i32 44
  store i32 %5985, i32* %1042, align 4, !tbaa !400
  %5986 = extractelement <1024 x i32> %5940, i32 45
  store i32 %5986, i32* %1047, align 4, !tbaa !400
  %5987 = extractelement <1024 x i32> %5940, i32 46
  store i32 %5987, i32* %1052, align 4, !tbaa !400
  %5988 = extractelement <1024 x i32> %5940, i32 47
  store i32 %5988, i32* %1057, align 4, !tbaa !400
  %5989 = extractelement <1024 x i32> %5940, i32 48
  store i32 %5989, i32* %1062, align 4, !tbaa !400
  %5990 = extractelement <1024 x i32> %5940, i32 49
  store i32 %5990, i32* %1067, align 4, !tbaa !400
  %5991 = extractelement <1024 x i32> %5940, i32 50
  store i32 %5991, i32* %1072, align 4, !tbaa !400
  %5992 = extractelement <1024 x i32> %5940, i32 51
  store i32 %5992, i32* %1077, align 4, !tbaa !400
  %5993 = extractelement <1024 x i32> %5940, i32 52
  store i32 %5993, i32* %1082, align 4, !tbaa !400
  %5994 = extractelement <1024 x i32> %5940, i32 53
  store i32 %5994, i32* %1087, align 4, !tbaa !400
  %5995 = extractelement <1024 x i32> %5940, i32 54
  store i32 %5995, i32* %1092, align 4, !tbaa !400
  %5996 = extractelement <1024 x i32> %5940, i32 55
  store i32 %5996, i32* %1097, align 4, !tbaa !400
  %5997 = extractelement <1024 x i32> %5940, i32 56
  store i32 %5997, i32* %1102, align 4, !tbaa !400
  %5998 = extractelement <1024 x i32> %5940, i32 57
  store i32 %5998, i32* %1107, align 4, !tbaa !400
  %5999 = extractelement <1024 x i32> %5940, i32 58
  store i32 %5999, i32* %1112, align 4, !tbaa !400
  %6000 = extractelement <1024 x i32> %5940, i32 59
  store i32 %6000, i32* %1117, align 4, !tbaa !400
  %6001 = extractelement <1024 x i32> %5940, i32 60
  store i32 %6001, i32* %1122, align 4, !tbaa !400
  %6002 = extractelement <1024 x i32> %5940, i32 61
  store i32 %6002, i32* %1127, align 4, !tbaa !400
  %6003 = extractelement <1024 x i32> %5940, i32 62
  store i32 %6003, i32* %1132, align 4, !tbaa !400
  %6004 = extractelement <1024 x i32> %5940, i32 63
  store i32 %6004, i32* %1137, align 4, !tbaa !400
  %6005 = extractelement <1024 x i32> %5940, i32 64
  store i32 %6005, i32* %1142, align 4, !tbaa !400
  %6006 = extractelement <1024 x i32> %5940, i32 65
  store i32 %6006, i32* %1147, align 4, !tbaa !400
  %6007 = extractelement <1024 x i32> %5940, i32 66
  store i32 %6007, i32* %1152, align 4, !tbaa !400
  %6008 = extractelement <1024 x i32> %5940, i32 67
  store i32 %6008, i32* %1157, align 4, !tbaa !400
  %6009 = extractelement <1024 x i32> %5940, i32 68
  store i32 %6009, i32* %1162, align 4, !tbaa !400
  %6010 = extractelement <1024 x i32> %5940, i32 69
  store i32 %6010, i32* %1167, align 4, !tbaa !400
  %6011 = extractelement <1024 x i32> %5940, i32 70
  store i32 %6011, i32* %1172, align 4, !tbaa !400
  %6012 = extractelement <1024 x i32> %5940, i32 71
  store i32 %6012, i32* %1177, align 4, !tbaa !400
  %6013 = extractelement <1024 x i32> %5940, i32 72
  store i32 %6013, i32* %1182, align 4, !tbaa !400
  %6014 = extractelement <1024 x i32> %5940, i32 73
  store i32 %6014, i32* %1187, align 4, !tbaa !400
  %6015 = extractelement <1024 x i32> %5940, i32 74
  store i32 %6015, i32* %1192, align 4, !tbaa !400
  %6016 = extractelement <1024 x i32> %5940, i32 75
  store i32 %6016, i32* %1197, align 4, !tbaa !400
  %6017 = extractelement <1024 x i32> %5940, i32 76
  store i32 %6017, i32* %1202, align 4, !tbaa !400
  %6018 = extractelement <1024 x i32> %5940, i32 77
  store i32 %6018, i32* %1207, align 4, !tbaa !400
  %6019 = extractelement <1024 x i32> %5940, i32 78
  store i32 %6019, i32* %1212, align 4, !tbaa !400
  %6020 = extractelement <1024 x i32> %5940, i32 79
  store i32 %6020, i32* %1217, align 4, !tbaa !400
  %6021 = extractelement <1024 x i32> %5940, i32 80
  store i32 %6021, i32* %1222, align 4, !tbaa !400
  %6022 = extractelement <1024 x i32> %5940, i32 81
  store i32 %6022, i32* %1227, align 4, !tbaa !400
  %6023 = extractelement <1024 x i32> %5940, i32 82
  store i32 %6023, i32* %1232, align 4, !tbaa !400
  %6024 = extractelement <1024 x i32> %5940, i32 83
  store i32 %6024, i32* %1237, align 4, !tbaa !400
  %6025 = extractelement <1024 x i32> %5940, i32 84
  store i32 %6025, i32* %1242, align 4, !tbaa !400
  %6026 = extractelement <1024 x i32> %5940, i32 85
  store i32 %6026, i32* %1247, align 4, !tbaa !400
  %6027 = extractelement <1024 x i32> %5940, i32 86
  store i32 %6027, i32* %1252, align 4, !tbaa !400
  %6028 = extractelement <1024 x i32> %5940, i32 87
  store i32 %6028, i32* %1257, align 4, !tbaa !400
  %6029 = extractelement <1024 x i32> %5940, i32 88
  store i32 %6029, i32* %1262, align 4, !tbaa !400
  %6030 = extractelement <1024 x i32> %5940, i32 89
  store i32 %6030, i32* %1267, align 4, !tbaa !400
  %6031 = extractelement <1024 x i32> %5940, i32 90
  store i32 %6031, i32* %1272, align 4, !tbaa !400
  %6032 = extractelement <1024 x i32> %5940, i32 91
  store i32 %6032, i32* %1277, align 4, !tbaa !400
  %6033 = extractelement <1024 x i32> %5940, i32 92
  store i32 %6033, i32* %1282, align 4, !tbaa !400
  %6034 = extractelement <1024 x i32> %5940, i32 93
  store i32 %6034, i32* %1287, align 4, !tbaa !400
  %6035 = extractelement <1024 x i32> %5940, i32 94
  store i32 %6035, i32* %1292, align 4, !tbaa !400
  %6036 = extractelement <1024 x i32> %5940, i32 95
  store i32 %6036, i32* %1297, align 4, !tbaa !400
  %6037 = extractelement <1024 x i32> %5940, i32 96
  store i32 %6037, i32* %1302, align 4, !tbaa !400
  %6038 = extractelement <1024 x i32> %5940, i32 97
  store i32 %6038, i32* %1307, align 4, !tbaa !400
  %6039 = extractelement <1024 x i32> %5940, i32 98
  store i32 %6039, i32* %1312, align 4, !tbaa !400
  %6040 = extractelement <1024 x i32> %5940, i32 99
  store i32 %6040, i32* %1317, align 4, !tbaa !400
  %6041 = extractelement <1024 x i32> %5940, i32 100
  store i32 %6041, i32* %1322, align 4, !tbaa !400
  %6042 = extractelement <1024 x i32> %5940, i32 101
  store i32 %6042, i32* %1327, align 4, !tbaa !400
  %6043 = extractelement <1024 x i32> %5940, i32 102
  store i32 %6043, i32* %1332, align 4, !tbaa !400
  %6044 = extractelement <1024 x i32> %5940, i32 103
  store i32 %6044, i32* %1337, align 4, !tbaa !400
  %6045 = extractelement <1024 x i32> %5940, i32 104
  store i32 %6045, i32* %1342, align 4, !tbaa !400
  %6046 = extractelement <1024 x i32> %5940, i32 105
  store i32 %6046, i32* %1347, align 4, !tbaa !400
  %6047 = extractelement <1024 x i32> %5940, i32 106
  store i32 %6047, i32* %1352, align 4, !tbaa !400
  %6048 = extractelement <1024 x i32> %5940, i32 107
  store i32 %6048, i32* %1357, align 4, !tbaa !400
  %6049 = extractelement <1024 x i32> %5940, i32 108
  store i32 %6049, i32* %1362, align 4, !tbaa !400
  %6050 = extractelement <1024 x i32> %5940, i32 109
  store i32 %6050, i32* %1367, align 4, !tbaa !400
  %6051 = extractelement <1024 x i32> %5940, i32 110
  store i32 %6051, i32* %1372, align 4, !tbaa !400
  %6052 = extractelement <1024 x i32> %5940, i32 111
  store i32 %6052, i32* %1377, align 4, !tbaa !400
  %6053 = extractelement <1024 x i32> %5940, i32 112
  store i32 %6053, i32* %1382, align 4, !tbaa !400
  %6054 = extractelement <1024 x i32> %5940, i32 113
  store i32 %6054, i32* %1387, align 4, !tbaa !400
  %6055 = extractelement <1024 x i32> %5940, i32 114
  store i32 %6055, i32* %1392, align 4, !tbaa !400
  %6056 = extractelement <1024 x i32> %5940, i32 115
  store i32 %6056, i32* %1397, align 4, !tbaa !400
  %6057 = extractelement <1024 x i32> %5940, i32 116
  store i32 %6057, i32* %1402, align 4, !tbaa !400
  %6058 = extractelement <1024 x i32> %5940, i32 117
  store i32 %6058, i32* %1407, align 4, !tbaa !400
  %6059 = extractelement <1024 x i32> %5940, i32 118
  store i32 %6059, i32* %1412, align 4, !tbaa !400
  %6060 = extractelement <1024 x i32> %5940, i32 119
  store i32 %6060, i32* %1417, align 4, !tbaa !400
  %6061 = extractelement <1024 x i32> %5940, i32 120
  store i32 %6061, i32* %1422, align 4, !tbaa !400
  %6062 = extractelement <1024 x i32> %5940, i32 121
  store i32 %6062, i32* %1427, align 4, !tbaa !400
  %6063 = extractelement <1024 x i32> %5940, i32 122
  store i32 %6063, i32* %1432, align 4, !tbaa !400
  %6064 = extractelement <1024 x i32> %5940, i32 123
  store i32 %6064, i32* %1437, align 4, !tbaa !400
  %6065 = extractelement <1024 x i32> %5940, i32 124
  store i32 %6065, i32* %1442, align 4, !tbaa !400
  %6066 = extractelement <1024 x i32> %5940, i32 125
  store i32 %6066, i32* %1447, align 4, !tbaa !400
  %6067 = extractelement <1024 x i32> %5940, i32 126
  store i32 %6067, i32* %1452, align 4, !tbaa !400
  %6068 = extractelement <1024 x i32> %5940, i32 127
  store i32 %6068, i32* %1457, align 4, !tbaa !400
  %6069 = extractelement <1024 x i32> %5940, i32 128
  store i32 %6069, i32* %1462, align 4, !tbaa !400
  %6070 = extractelement <1024 x i32> %5940, i32 129
  store i32 %6070, i32* %1467, align 4, !tbaa !400
  %6071 = extractelement <1024 x i32> %5940, i32 130
  store i32 %6071, i32* %1472, align 4, !tbaa !400
  %6072 = extractelement <1024 x i32> %5940, i32 131
  store i32 %6072, i32* %1477, align 4, !tbaa !400
  %6073 = extractelement <1024 x i32> %5940, i32 132
  store i32 %6073, i32* %1482, align 4, !tbaa !400
  %6074 = extractelement <1024 x i32> %5940, i32 133
  store i32 %6074, i32* %1487, align 4, !tbaa !400
  %6075 = extractelement <1024 x i32> %5940, i32 134
  store i32 %6075, i32* %1492, align 4, !tbaa !400
  %6076 = extractelement <1024 x i32> %5940, i32 135
  store i32 %6076, i32* %1497, align 4, !tbaa !400
  %6077 = extractelement <1024 x i32> %5940, i32 136
  store i32 %6077, i32* %1502, align 4, !tbaa !400
  %6078 = extractelement <1024 x i32> %5940, i32 137
  store i32 %6078, i32* %1507, align 4, !tbaa !400
  %6079 = extractelement <1024 x i32> %5940, i32 138
  store i32 %6079, i32* %1512, align 4, !tbaa !400
  %6080 = extractelement <1024 x i32> %5940, i32 139
  store i32 %6080, i32* %1517, align 4, !tbaa !400
  %6081 = extractelement <1024 x i32> %5940, i32 140
  store i32 %6081, i32* %1522, align 4, !tbaa !400
  %6082 = extractelement <1024 x i32> %5940, i32 141
  store i32 %6082, i32* %1527, align 4, !tbaa !400
  %6083 = extractelement <1024 x i32> %5940, i32 142
  store i32 %6083, i32* %1532, align 4, !tbaa !400
  %6084 = extractelement <1024 x i32> %5940, i32 143
  store i32 %6084, i32* %1537, align 4, !tbaa !400
  %6085 = extractelement <1024 x i32> %5940, i32 144
  store i32 %6085, i32* %1542, align 4, !tbaa !400
  %6086 = extractelement <1024 x i32> %5940, i32 145
  store i32 %6086, i32* %1547, align 4, !tbaa !400
  %6087 = extractelement <1024 x i32> %5940, i32 146
  store i32 %6087, i32* %1552, align 4, !tbaa !400
  %6088 = extractelement <1024 x i32> %5940, i32 147
  store i32 %6088, i32* %1557, align 4, !tbaa !400
  %6089 = extractelement <1024 x i32> %5940, i32 148
  store i32 %6089, i32* %1562, align 4, !tbaa !400
  %6090 = extractelement <1024 x i32> %5940, i32 149
  store i32 %6090, i32* %1567, align 4, !tbaa !400
  %6091 = extractelement <1024 x i32> %5940, i32 150
  store i32 %6091, i32* %1572, align 4, !tbaa !400
  %6092 = extractelement <1024 x i32> %5940, i32 151
  store i32 %6092, i32* %1577, align 4, !tbaa !400
  %6093 = extractelement <1024 x i32> %5940, i32 152
  store i32 %6093, i32* %1582, align 4, !tbaa !400
  %6094 = extractelement <1024 x i32> %5940, i32 153
  store i32 %6094, i32* %1587, align 4, !tbaa !400
  %6095 = extractelement <1024 x i32> %5940, i32 154
  store i32 %6095, i32* %1592, align 4, !tbaa !400
  %6096 = extractelement <1024 x i32> %5940, i32 155
  store i32 %6096, i32* %1597, align 4, !tbaa !400
  %6097 = extractelement <1024 x i32> %5940, i32 156
  store i32 %6097, i32* %1602, align 4, !tbaa !400
  %6098 = extractelement <1024 x i32> %5940, i32 157
  store i32 %6098, i32* %1607, align 4, !tbaa !400
  %6099 = extractelement <1024 x i32> %5940, i32 158
  store i32 %6099, i32* %1612, align 4, !tbaa !400
  %6100 = extractelement <1024 x i32> %5940, i32 159
  store i32 %6100, i32* %1617, align 4, !tbaa !400
  %6101 = extractelement <1024 x i32> %5940, i32 160
  store i32 %6101, i32* %1622, align 4, !tbaa !400
  %6102 = extractelement <1024 x i32> %5940, i32 161
  store i32 %6102, i32* %1627, align 4, !tbaa !400
  %6103 = extractelement <1024 x i32> %5940, i32 162
  store i32 %6103, i32* %1632, align 4, !tbaa !400
  %6104 = extractelement <1024 x i32> %5940, i32 163
  store i32 %6104, i32* %1637, align 4, !tbaa !400
  %6105 = extractelement <1024 x i32> %5940, i32 164
  store i32 %6105, i32* %1642, align 4, !tbaa !400
  %6106 = extractelement <1024 x i32> %5940, i32 165
  store i32 %6106, i32* %1647, align 4, !tbaa !400
  %6107 = extractelement <1024 x i32> %5940, i32 166
  store i32 %6107, i32* %1652, align 4, !tbaa !400
  %6108 = extractelement <1024 x i32> %5940, i32 167
  store i32 %6108, i32* %1657, align 4, !tbaa !400
  %6109 = extractelement <1024 x i32> %5940, i32 168
  store i32 %6109, i32* %1662, align 4, !tbaa !400
  %6110 = extractelement <1024 x i32> %5940, i32 169
  store i32 %6110, i32* %1667, align 4, !tbaa !400
  %6111 = extractelement <1024 x i32> %5940, i32 170
  store i32 %6111, i32* %1672, align 4, !tbaa !400
  %6112 = extractelement <1024 x i32> %5940, i32 171
  store i32 %6112, i32* %1677, align 4, !tbaa !400
  %6113 = extractelement <1024 x i32> %5940, i32 172
  store i32 %6113, i32* %1682, align 4, !tbaa !400
  %6114 = extractelement <1024 x i32> %5940, i32 173
  store i32 %6114, i32* %1687, align 4, !tbaa !400
  %6115 = extractelement <1024 x i32> %5940, i32 174
  store i32 %6115, i32* %1692, align 4, !tbaa !400
  %6116 = extractelement <1024 x i32> %5940, i32 175
  store i32 %6116, i32* %1697, align 4, !tbaa !400
  %6117 = extractelement <1024 x i32> %5940, i32 176
  store i32 %6117, i32* %1702, align 4, !tbaa !400
  %6118 = extractelement <1024 x i32> %5940, i32 177
  store i32 %6118, i32* %1707, align 4, !tbaa !400
  %6119 = extractelement <1024 x i32> %5940, i32 178
  store i32 %6119, i32* %1712, align 4, !tbaa !400
  %6120 = extractelement <1024 x i32> %5940, i32 179
  store i32 %6120, i32* %1717, align 4, !tbaa !400
  %6121 = extractelement <1024 x i32> %5940, i32 180
  store i32 %6121, i32* %1722, align 4, !tbaa !400
  %6122 = extractelement <1024 x i32> %5940, i32 181
  store i32 %6122, i32* %1727, align 4, !tbaa !400
  %6123 = extractelement <1024 x i32> %5940, i32 182
  store i32 %6123, i32* %1732, align 4, !tbaa !400
  %6124 = extractelement <1024 x i32> %5940, i32 183
  store i32 %6124, i32* %1737, align 4, !tbaa !400
  %6125 = extractelement <1024 x i32> %5940, i32 184
  store i32 %6125, i32* %1742, align 4, !tbaa !400
  %6126 = extractelement <1024 x i32> %5940, i32 185
  store i32 %6126, i32* %1747, align 4, !tbaa !400
  %6127 = extractelement <1024 x i32> %5940, i32 186
  store i32 %6127, i32* %1752, align 4, !tbaa !400
  %6128 = extractelement <1024 x i32> %5940, i32 187
  store i32 %6128, i32* %1757, align 4, !tbaa !400
  %6129 = extractelement <1024 x i32> %5940, i32 188
  store i32 %6129, i32* %1762, align 4, !tbaa !400
  %6130 = extractelement <1024 x i32> %5940, i32 189
  store i32 %6130, i32* %1767, align 4, !tbaa !400
  %6131 = extractelement <1024 x i32> %5940, i32 190
  store i32 %6131, i32* %1772, align 4, !tbaa !400
  %6132 = extractelement <1024 x i32> %5940, i32 191
  store i32 %6132, i32* %1777, align 4, !tbaa !400
  %6133 = extractelement <1024 x i32> %5940, i32 192
  store i32 %6133, i32* %1782, align 4, !tbaa !400
  %6134 = extractelement <1024 x i32> %5940, i32 193
  store i32 %6134, i32* %1787, align 4, !tbaa !400
  %6135 = extractelement <1024 x i32> %5940, i32 194
  store i32 %6135, i32* %1792, align 4, !tbaa !400
  %6136 = extractelement <1024 x i32> %5940, i32 195
  store i32 %6136, i32* %1797, align 4, !tbaa !400
  %6137 = extractelement <1024 x i32> %5940, i32 196
  store i32 %6137, i32* %1802, align 4, !tbaa !400
  %6138 = extractelement <1024 x i32> %5940, i32 197
  store i32 %6138, i32* %1807, align 4, !tbaa !400
  %6139 = extractelement <1024 x i32> %5940, i32 198
  store i32 %6139, i32* %1812, align 4, !tbaa !400
  %6140 = extractelement <1024 x i32> %5940, i32 199
  store i32 %6140, i32* %1817, align 4, !tbaa !400
  %6141 = extractelement <1024 x i32> %5940, i32 200
  store i32 %6141, i32* %1822, align 4, !tbaa !400
  %6142 = extractelement <1024 x i32> %5940, i32 201
  store i32 %6142, i32* %1827, align 4, !tbaa !400
  %6143 = extractelement <1024 x i32> %5940, i32 202
  store i32 %6143, i32* %1832, align 4, !tbaa !400
  %6144 = extractelement <1024 x i32> %5940, i32 203
  store i32 %6144, i32* %1837, align 4, !tbaa !400
  %6145 = extractelement <1024 x i32> %5940, i32 204
  store i32 %6145, i32* %1842, align 4, !tbaa !400
  %6146 = extractelement <1024 x i32> %5940, i32 205
  store i32 %6146, i32* %1847, align 4, !tbaa !400
  %6147 = extractelement <1024 x i32> %5940, i32 206
  store i32 %6147, i32* %1852, align 4, !tbaa !400
  %6148 = extractelement <1024 x i32> %5940, i32 207
  store i32 %6148, i32* %1857, align 4, !tbaa !400
  %6149 = extractelement <1024 x i32> %5940, i32 208
  store i32 %6149, i32* %1862, align 4, !tbaa !400
  %6150 = extractelement <1024 x i32> %5940, i32 209
  store i32 %6150, i32* %1867, align 4, !tbaa !400
  %6151 = extractelement <1024 x i32> %5940, i32 210
  store i32 %6151, i32* %1872, align 4, !tbaa !400
  %6152 = extractelement <1024 x i32> %5940, i32 211
  store i32 %6152, i32* %1877, align 4, !tbaa !400
  %6153 = extractelement <1024 x i32> %5940, i32 212
  store i32 %6153, i32* %1882, align 4, !tbaa !400
  %6154 = extractelement <1024 x i32> %5940, i32 213
  store i32 %6154, i32* %1887, align 4, !tbaa !400
  %6155 = extractelement <1024 x i32> %5940, i32 214
  store i32 %6155, i32* %1892, align 4, !tbaa !400
  %6156 = extractelement <1024 x i32> %5940, i32 215
  store i32 %6156, i32* %1897, align 4, !tbaa !400
  %6157 = extractelement <1024 x i32> %5940, i32 216
  store i32 %6157, i32* %1902, align 4, !tbaa !400
  %6158 = extractelement <1024 x i32> %5940, i32 217
  store i32 %6158, i32* %1907, align 4, !tbaa !400
  %6159 = extractelement <1024 x i32> %5940, i32 218
  store i32 %6159, i32* %1912, align 4, !tbaa !400
  %6160 = extractelement <1024 x i32> %5940, i32 219
  store i32 %6160, i32* %1917, align 4, !tbaa !400
  %6161 = extractelement <1024 x i32> %5940, i32 220
  store i32 %6161, i32* %1922, align 4, !tbaa !400
  %6162 = extractelement <1024 x i32> %5940, i32 221
  store i32 %6162, i32* %1927, align 4, !tbaa !400
  %6163 = extractelement <1024 x i32> %5940, i32 222
  store i32 %6163, i32* %1932, align 4, !tbaa !400
  %6164 = extractelement <1024 x i32> %5940, i32 223
  store i32 %6164, i32* %1937, align 4, !tbaa !400
  %6165 = extractelement <1024 x i32> %5940, i32 224
  store i32 %6165, i32* %1942, align 4, !tbaa !400
  %6166 = extractelement <1024 x i32> %5940, i32 225
  store i32 %6166, i32* %1947, align 4, !tbaa !400
  %6167 = extractelement <1024 x i32> %5940, i32 226
  store i32 %6167, i32* %1952, align 4, !tbaa !400
  %6168 = extractelement <1024 x i32> %5940, i32 227
  store i32 %6168, i32* %1957, align 4, !tbaa !400
  %6169 = extractelement <1024 x i32> %5940, i32 228
  store i32 %6169, i32* %1962, align 4, !tbaa !400
  %6170 = extractelement <1024 x i32> %5940, i32 229
  store i32 %6170, i32* %1967, align 4, !tbaa !400
  %6171 = extractelement <1024 x i32> %5940, i32 230
  store i32 %6171, i32* %1972, align 4, !tbaa !400
  %6172 = extractelement <1024 x i32> %5940, i32 231
  store i32 %6172, i32* %1977, align 4, !tbaa !400
  %6173 = extractelement <1024 x i32> %5940, i32 232
  store i32 %6173, i32* %1982, align 4, !tbaa !400
  %6174 = extractelement <1024 x i32> %5940, i32 233
  store i32 %6174, i32* %1987, align 4, !tbaa !400
  %6175 = extractelement <1024 x i32> %5940, i32 234
  store i32 %6175, i32* %1992, align 4, !tbaa !400
  %6176 = extractelement <1024 x i32> %5940, i32 235
  store i32 %6176, i32* %1997, align 4, !tbaa !400
  %6177 = extractelement <1024 x i32> %5940, i32 236
  store i32 %6177, i32* %2002, align 4, !tbaa !400
  %6178 = extractelement <1024 x i32> %5940, i32 237
  store i32 %6178, i32* %2007, align 4, !tbaa !400
  %6179 = extractelement <1024 x i32> %5940, i32 238
  store i32 %6179, i32* %2012, align 4, !tbaa !400
  %6180 = extractelement <1024 x i32> %5940, i32 239
  store i32 %6180, i32* %2017, align 4, !tbaa !400
  %6181 = extractelement <1024 x i32> %5940, i32 240
  store i32 %6181, i32* %2022, align 4, !tbaa !400
  %6182 = extractelement <1024 x i32> %5940, i32 241
  store i32 %6182, i32* %2027, align 4, !tbaa !400
  %6183 = extractelement <1024 x i32> %5940, i32 242
  store i32 %6183, i32* %2032, align 4, !tbaa !400
  %6184 = extractelement <1024 x i32> %5940, i32 243
  store i32 %6184, i32* %2037, align 4, !tbaa !400
  %6185 = extractelement <1024 x i32> %5940, i32 244
  store i32 %6185, i32* %2042, align 4, !tbaa !400
  %6186 = extractelement <1024 x i32> %5940, i32 245
  store i32 %6186, i32* %2047, align 4, !tbaa !400
  %6187 = extractelement <1024 x i32> %5940, i32 246
  store i32 %6187, i32* %2052, align 4, !tbaa !400
  %6188 = extractelement <1024 x i32> %5940, i32 247
  store i32 %6188, i32* %2057, align 4, !tbaa !400
  %6189 = extractelement <1024 x i32> %5940, i32 248
  store i32 %6189, i32* %2062, align 4, !tbaa !400
  %6190 = extractelement <1024 x i32> %5940, i32 249
  store i32 %6190, i32* %2067, align 4, !tbaa !400
  %6191 = extractelement <1024 x i32> %5940, i32 250
  store i32 %6191, i32* %2072, align 4, !tbaa !400
  %6192 = extractelement <1024 x i32> %5940, i32 251
  store i32 %6192, i32* %2077, align 4, !tbaa !400
  %6193 = extractelement <1024 x i32> %5940, i32 252
  store i32 %6193, i32* %2082, align 4, !tbaa !400
  %6194 = extractelement <1024 x i32> %5940, i32 253
  store i32 %6194, i32* %2087, align 4, !tbaa !400
  %6195 = extractelement <1024 x i32> %5940, i32 254
  store i32 %6195, i32* %2092, align 4, !tbaa !400
  %6196 = extractelement <1024 x i32> %5940, i32 255
  store i32 %6196, i32* %2097, align 4, !tbaa !400
  %6197 = extractelement <1024 x i32> %5940, i32 256
  store i32 %6197, i32* %2102, align 4, !tbaa !400
  %6198 = extractelement <1024 x i32> %5940, i32 257
  store i32 %6198, i32* %2107, align 4, !tbaa !400
  %6199 = extractelement <1024 x i32> %5940, i32 258
  store i32 %6199, i32* %2112, align 4, !tbaa !400
  %6200 = extractelement <1024 x i32> %5940, i32 259
  store i32 %6200, i32* %2117, align 4, !tbaa !400
  %6201 = extractelement <1024 x i32> %5940, i32 260
  store i32 %6201, i32* %2122, align 4, !tbaa !400
  %6202 = extractelement <1024 x i32> %5940, i32 261
  store i32 %6202, i32* %2127, align 4, !tbaa !400
  %6203 = extractelement <1024 x i32> %5940, i32 262
  store i32 %6203, i32* %2132, align 4, !tbaa !400
  %6204 = extractelement <1024 x i32> %5940, i32 263
  store i32 %6204, i32* %2137, align 4, !tbaa !400
  %6205 = extractelement <1024 x i32> %5940, i32 264
  store i32 %6205, i32* %2142, align 4, !tbaa !400
  %6206 = extractelement <1024 x i32> %5940, i32 265
  store i32 %6206, i32* %2147, align 4, !tbaa !400
  %6207 = extractelement <1024 x i32> %5940, i32 266
  store i32 %6207, i32* %2152, align 4, !tbaa !400
  %6208 = extractelement <1024 x i32> %5940, i32 267
  store i32 %6208, i32* %2157, align 4, !tbaa !400
  %6209 = extractelement <1024 x i32> %5940, i32 268
  store i32 %6209, i32* %2162, align 4, !tbaa !400
  %6210 = extractelement <1024 x i32> %5940, i32 269
  store i32 %6210, i32* %2167, align 4, !tbaa !400
  %6211 = extractelement <1024 x i32> %5940, i32 270
  store i32 %6211, i32* %2172, align 4, !tbaa !400
  %6212 = extractelement <1024 x i32> %5940, i32 271
  store i32 %6212, i32* %2177, align 4, !tbaa !400
  %6213 = extractelement <1024 x i32> %5940, i32 272
  store i32 %6213, i32* %2182, align 4, !tbaa !400
  %6214 = extractelement <1024 x i32> %5940, i32 273
  store i32 %6214, i32* %2187, align 4, !tbaa !400
  %6215 = extractelement <1024 x i32> %5940, i32 274
  store i32 %6215, i32* %2192, align 4, !tbaa !400
  %6216 = extractelement <1024 x i32> %5940, i32 275
  store i32 %6216, i32* %2197, align 4, !tbaa !400
  %6217 = extractelement <1024 x i32> %5940, i32 276
  store i32 %6217, i32* %2202, align 4, !tbaa !400
  %6218 = extractelement <1024 x i32> %5940, i32 277
  store i32 %6218, i32* %2207, align 4, !tbaa !400
  %6219 = extractelement <1024 x i32> %5940, i32 278
  store i32 %6219, i32* %2212, align 4, !tbaa !400
  %6220 = extractelement <1024 x i32> %5940, i32 279
  store i32 %6220, i32* %2217, align 4, !tbaa !400
  %6221 = extractelement <1024 x i32> %5940, i32 280
  store i32 %6221, i32* %2222, align 4, !tbaa !400
  %6222 = extractelement <1024 x i32> %5940, i32 281
  store i32 %6222, i32* %2227, align 4, !tbaa !400
  %6223 = extractelement <1024 x i32> %5940, i32 282
  store i32 %6223, i32* %2232, align 4, !tbaa !400
  %6224 = extractelement <1024 x i32> %5940, i32 283
  store i32 %6224, i32* %2237, align 4, !tbaa !400
  %6225 = extractelement <1024 x i32> %5940, i32 284
  store i32 %6225, i32* %2242, align 4, !tbaa !400
  %6226 = extractelement <1024 x i32> %5940, i32 285
  store i32 %6226, i32* %2247, align 4, !tbaa !400
  %6227 = extractelement <1024 x i32> %5940, i32 286
  store i32 %6227, i32* %2252, align 4, !tbaa !400
  %6228 = extractelement <1024 x i32> %5940, i32 287
  store i32 %6228, i32* %2257, align 4, !tbaa !400
  %6229 = extractelement <1024 x i32> %5940, i32 288
  store i32 %6229, i32* %2262, align 4, !tbaa !400
  %6230 = extractelement <1024 x i32> %5940, i32 289
  store i32 %6230, i32* %2267, align 4, !tbaa !400
  %6231 = extractelement <1024 x i32> %5940, i32 290
  store i32 %6231, i32* %2272, align 4, !tbaa !400
  %6232 = extractelement <1024 x i32> %5940, i32 291
  store i32 %6232, i32* %2277, align 4, !tbaa !400
  %6233 = extractelement <1024 x i32> %5940, i32 292
  store i32 %6233, i32* %2282, align 4, !tbaa !400
  %6234 = extractelement <1024 x i32> %5940, i32 293
  store i32 %6234, i32* %2287, align 4, !tbaa !400
  %6235 = extractelement <1024 x i32> %5940, i32 294
  store i32 %6235, i32* %2292, align 4, !tbaa !400
  %6236 = extractelement <1024 x i32> %5940, i32 295
  store i32 %6236, i32* %2297, align 4, !tbaa !400
  %6237 = extractelement <1024 x i32> %5940, i32 296
  store i32 %6237, i32* %2302, align 4, !tbaa !400
  %6238 = extractelement <1024 x i32> %5940, i32 297
  store i32 %6238, i32* %2307, align 4, !tbaa !400
  %6239 = extractelement <1024 x i32> %5940, i32 298
  store i32 %6239, i32* %2312, align 4, !tbaa !400
  %6240 = extractelement <1024 x i32> %5940, i32 299
  store i32 %6240, i32* %2317, align 4, !tbaa !400
  %6241 = extractelement <1024 x i32> %5940, i32 300
  store i32 %6241, i32* %2322, align 4, !tbaa !400
  %6242 = extractelement <1024 x i32> %5940, i32 301
  store i32 %6242, i32* %2327, align 4, !tbaa !400
  %6243 = extractelement <1024 x i32> %5940, i32 302
  store i32 %6243, i32* %2332, align 4, !tbaa !400
  %6244 = extractelement <1024 x i32> %5940, i32 303
  store i32 %6244, i32* %2337, align 4, !tbaa !400
  %6245 = extractelement <1024 x i32> %5940, i32 304
  store i32 %6245, i32* %2342, align 4, !tbaa !400
  %6246 = extractelement <1024 x i32> %5940, i32 305
  store i32 %6246, i32* %2347, align 4, !tbaa !400
  %6247 = extractelement <1024 x i32> %5940, i32 306
  store i32 %6247, i32* %2352, align 4, !tbaa !400
  %6248 = extractelement <1024 x i32> %5940, i32 307
  store i32 %6248, i32* %2357, align 4, !tbaa !400
  %6249 = extractelement <1024 x i32> %5940, i32 308
  store i32 %6249, i32* %2362, align 4, !tbaa !400
  %6250 = extractelement <1024 x i32> %5940, i32 309
  store i32 %6250, i32* %2367, align 4, !tbaa !400
  %6251 = extractelement <1024 x i32> %5940, i32 310
  store i32 %6251, i32* %2372, align 4, !tbaa !400
  %6252 = extractelement <1024 x i32> %5940, i32 311
  store i32 %6252, i32* %2377, align 4, !tbaa !400
  %6253 = extractelement <1024 x i32> %5940, i32 312
  store i32 %6253, i32* %2382, align 4, !tbaa !400
  %6254 = extractelement <1024 x i32> %5940, i32 313
  store i32 %6254, i32* %2387, align 4, !tbaa !400
  %6255 = extractelement <1024 x i32> %5940, i32 314
  store i32 %6255, i32* %2392, align 4, !tbaa !400
  %6256 = extractelement <1024 x i32> %5940, i32 315
  store i32 %6256, i32* %2397, align 4, !tbaa !400
  %6257 = extractelement <1024 x i32> %5940, i32 316
  store i32 %6257, i32* %2402, align 4, !tbaa !400
  %6258 = extractelement <1024 x i32> %5940, i32 317
  store i32 %6258, i32* %2407, align 4, !tbaa !400
  %6259 = extractelement <1024 x i32> %5940, i32 318
  store i32 %6259, i32* %2412, align 4, !tbaa !400
  %6260 = extractelement <1024 x i32> %5940, i32 319
  store i32 %6260, i32* %2417, align 4, !tbaa !400
  %6261 = extractelement <1024 x i32> %5940, i32 320
  store i32 %6261, i32* %2422, align 4, !tbaa !400
  %6262 = extractelement <1024 x i32> %5940, i32 321
  store i32 %6262, i32* %2427, align 4, !tbaa !400
  %6263 = extractelement <1024 x i32> %5940, i32 322
  store i32 %6263, i32* %2432, align 4, !tbaa !400
  %6264 = extractelement <1024 x i32> %5940, i32 323
  store i32 %6264, i32* %2437, align 4, !tbaa !400
  %6265 = extractelement <1024 x i32> %5940, i32 324
  store i32 %6265, i32* %2442, align 4, !tbaa !400
  %6266 = extractelement <1024 x i32> %5940, i32 325
  store i32 %6266, i32* %2447, align 4, !tbaa !400
  %6267 = extractelement <1024 x i32> %5940, i32 326
  store i32 %6267, i32* %2452, align 4, !tbaa !400
  %6268 = extractelement <1024 x i32> %5940, i32 327
  store i32 %6268, i32* %2457, align 4, !tbaa !400
  %6269 = extractelement <1024 x i32> %5940, i32 328
  store i32 %6269, i32* %2462, align 4, !tbaa !400
  %6270 = extractelement <1024 x i32> %5940, i32 329
  store i32 %6270, i32* %2467, align 4, !tbaa !400
  %6271 = extractelement <1024 x i32> %5940, i32 330
  store i32 %6271, i32* %2472, align 4, !tbaa !400
  %6272 = extractelement <1024 x i32> %5940, i32 331
  store i32 %6272, i32* %2477, align 4, !tbaa !400
  %6273 = extractelement <1024 x i32> %5940, i32 332
  store i32 %6273, i32* %2482, align 4, !tbaa !400
  %6274 = extractelement <1024 x i32> %5940, i32 333
  store i32 %6274, i32* %2487, align 4, !tbaa !400
  %6275 = extractelement <1024 x i32> %5940, i32 334
  store i32 %6275, i32* %2492, align 4, !tbaa !400
  %6276 = extractelement <1024 x i32> %5940, i32 335
  store i32 %6276, i32* %2497, align 4, !tbaa !400
  %6277 = extractelement <1024 x i32> %5940, i32 336
  store i32 %6277, i32* %2502, align 4, !tbaa !400
  %6278 = extractelement <1024 x i32> %5940, i32 337
  store i32 %6278, i32* %2507, align 4, !tbaa !400
  %6279 = extractelement <1024 x i32> %5940, i32 338
  store i32 %6279, i32* %2512, align 4, !tbaa !400
  %6280 = extractelement <1024 x i32> %5940, i32 339
  store i32 %6280, i32* %2517, align 4, !tbaa !400
  %6281 = extractelement <1024 x i32> %5940, i32 340
  store i32 %6281, i32* %2522, align 4, !tbaa !400
  %6282 = extractelement <1024 x i32> %5940, i32 341
  store i32 %6282, i32* %2527, align 4, !tbaa !400
  %6283 = extractelement <1024 x i32> %5940, i32 342
  store i32 %6283, i32* %2532, align 4, !tbaa !400
  %6284 = extractelement <1024 x i32> %5940, i32 343
  store i32 %6284, i32* %2537, align 4, !tbaa !400
  %6285 = extractelement <1024 x i32> %5940, i32 344
  store i32 %6285, i32* %2542, align 4, !tbaa !400
  %6286 = extractelement <1024 x i32> %5940, i32 345
  store i32 %6286, i32* %2547, align 4, !tbaa !400
  %6287 = extractelement <1024 x i32> %5940, i32 346
  store i32 %6287, i32* %2552, align 4, !tbaa !400
  %6288 = extractelement <1024 x i32> %5940, i32 347
  store i32 %6288, i32* %2557, align 4, !tbaa !400
  %6289 = extractelement <1024 x i32> %5940, i32 348
  store i32 %6289, i32* %2562, align 4, !tbaa !400
  %6290 = extractelement <1024 x i32> %5940, i32 349
  store i32 %6290, i32* %2567, align 4, !tbaa !400
  %6291 = extractelement <1024 x i32> %5940, i32 350
  store i32 %6291, i32* %2572, align 4, !tbaa !400
  %6292 = extractelement <1024 x i32> %5940, i32 351
  store i32 %6292, i32* %2577, align 4, !tbaa !400
  %6293 = extractelement <1024 x i32> %5940, i32 352
  store i32 %6293, i32* %2582, align 4, !tbaa !400
  %6294 = extractelement <1024 x i32> %5940, i32 353
  store i32 %6294, i32* %2587, align 4, !tbaa !400
  %6295 = extractelement <1024 x i32> %5940, i32 354
  store i32 %6295, i32* %2592, align 4, !tbaa !400
  %6296 = extractelement <1024 x i32> %5940, i32 355
  store i32 %6296, i32* %2597, align 4, !tbaa !400
  %6297 = extractelement <1024 x i32> %5940, i32 356
  store i32 %6297, i32* %2602, align 4, !tbaa !400
  %6298 = extractelement <1024 x i32> %5940, i32 357
  store i32 %6298, i32* %2607, align 4, !tbaa !400
  %6299 = extractelement <1024 x i32> %5940, i32 358
  store i32 %6299, i32* %2612, align 4, !tbaa !400
  %6300 = extractelement <1024 x i32> %5940, i32 359
  store i32 %6300, i32* %2617, align 4, !tbaa !400
  %6301 = extractelement <1024 x i32> %5940, i32 360
  store i32 %6301, i32* %2622, align 4, !tbaa !400
  %6302 = extractelement <1024 x i32> %5940, i32 361
  store i32 %6302, i32* %2627, align 4, !tbaa !400
  %6303 = extractelement <1024 x i32> %5940, i32 362
  store i32 %6303, i32* %2632, align 4, !tbaa !400
  %6304 = extractelement <1024 x i32> %5940, i32 363
  store i32 %6304, i32* %2637, align 4, !tbaa !400
  %6305 = extractelement <1024 x i32> %5940, i32 364
  store i32 %6305, i32* %2642, align 4, !tbaa !400
  %6306 = extractelement <1024 x i32> %5940, i32 365
  store i32 %6306, i32* %2647, align 4, !tbaa !400
  %6307 = extractelement <1024 x i32> %5940, i32 366
  store i32 %6307, i32* %2652, align 4, !tbaa !400
  %6308 = extractelement <1024 x i32> %5940, i32 367
  store i32 %6308, i32* %2657, align 4, !tbaa !400
  %6309 = extractelement <1024 x i32> %5940, i32 368
  store i32 %6309, i32* %2662, align 4, !tbaa !400
  %6310 = extractelement <1024 x i32> %5940, i32 369
  store i32 %6310, i32* %2667, align 4, !tbaa !400
  %6311 = extractelement <1024 x i32> %5940, i32 370
  store i32 %6311, i32* %2672, align 4, !tbaa !400
  %6312 = extractelement <1024 x i32> %5940, i32 371
  store i32 %6312, i32* %2677, align 4, !tbaa !400
  %6313 = extractelement <1024 x i32> %5940, i32 372
  store i32 %6313, i32* %2682, align 4, !tbaa !400
  %6314 = extractelement <1024 x i32> %5940, i32 373
  store i32 %6314, i32* %2687, align 4, !tbaa !400
  %6315 = extractelement <1024 x i32> %5940, i32 374
  store i32 %6315, i32* %2692, align 4, !tbaa !400
  %6316 = extractelement <1024 x i32> %5940, i32 375
  store i32 %6316, i32* %2697, align 4, !tbaa !400
  %6317 = extractelement <1024 x i32> %5940, i32 376
  store i32 %6317, i32* %2702, align 4, !tbaa !400
  %6318 = extractelement <1024 x i32> %5940, i32 377
  store i32 %6318, i32* %2707, align 4, !tbaa !400
  %6319 = extractelement <1024 x i32> %5940, i32 378
  store i32 %6319, i32* %2712, align 4, !tbaa !400
  %6320 = extractelement <1024 x i32> %5940, i32 379
  store i32 %6320, i32* %2717, align 4, !tbaa !400
  %6321 = extractelement <1024 x i32> %5940, i32 380
  store i32 %6321, i32* %2722, align 4, !tbaa !400
  %6322 = extractelement <1024 x i32> %5940, i32 381
  store i32 %6322, i32* %2727, align 4, !tbaa !400
  %6323 = extractelement <1024 x i32> %5940, i32 382
  store i32 %6323, i32* %2732, align 4, !tbaa !400
  %6324 = extractelement <1024 x i32> %5940, i32 383
  store i32 %6324, i32* %2737, align 4, !tbaa !400
  %6325 = extractelement <1024 x i32> %5940, i32 384
  store i32 %6325, i32* %2742, align 4, !tbaa !400
  %6326 = extractelement <1024 x i32> %5940, i32 385
  store i32 %6326, i32* %2747, align 4, !tbaa !400
  %6327 = extractelement <1024 x i32> %5940, i32 386
  store i32 %6327, i32* %2752, align 4, !tbaa !400
  %6328 = extractelement <1024 x i32> %5940, i32 387
  store i32 %6328, i32* %2757, align 4, !tbaa !400
  %6329 = extractelement <1024 x i32> %5940, i32 388
  store i32 %6329, i32* %2762, align 4, !tbaa !400
  %6330 = extractelement <1024 x i32> %5940, i32 389
  store i32 %6330, i32* %2767, align 4, !tbaa !400
  %6331 = extractelement <1024 x i32> %5940, i32 390
  store i32 %6331, i32* %2772, align 4, !tbaa !400
  %6332 = extractelement <1024 x i32> %5940, i32 391
  store i32 %6332, i32* %2777, align 4, !tbaa !400
  %6333 = extractelement <1024 x i32> %5940, i32 392
  store i32 %6333, i32* %2782, align 4, !tbaa !400
  %6334 = extractelement <1024 x i32> %5940, i32 393
  store i32 %6334, i32* %2787, align 4, !tbaa !400
  %6335 = extractelement <1024 x i32> %5940, i32 394
  store i32 %6335, i32* %2792, align 4, !tbaa !400
  %6336 = extractelement <1024 x i32> %5940, i32 395
  store i32 %6336, i32* %2797, align 4, !tbaa !400
  %6337 = extractelement <1024 x i32> %5940, i32 396
  store i32 %6337, i32* %2802, align 4, !tbaa !400
  %6338 = extractelement <1024 x i32> %5940, i32 397
  store i32 %6338, i32* %2807, align 4, !tbaa !400
  %6339 = extractelement <1024 x i32> %5940, i32 398
  store i32 %6339, i32* %2812, align 4, !tbaa !400
  %6340 = extractelement <1024 x i32> %5940, i32 399
  store i32 %6340, i32* %2817, align 4, !tbaa !400
  %6341 = extractelement <1024 x i32> %5940, i32 400
  store i32 %6341, i32* %2822, align 4, !tbaa !400
  %6342 = extractelement <1024 x i32> %5940, i32 401
  store i32 %6342, i32* %2827, align 4, !tbaa !400
  %6343 = extractelement <1024 x i32> %5940, i32 402
  store i32 %6343, i32* %2832, align 4, !tbaa !400
  %6344 = extractelement <1024 x i32> %5940, i32 403
  store i32 %6344, i32* %2837, align 4, !tbaa !400
  %6345 = extractelement <1024 x i32> %5940, i32 404
  store i32 %6345, i32* %2842, align 4, !tbaa !400
  %6346 = extractelement <1024 x i32> %5940, i32 405
  store i32 %6346, i32* %2847, align 4, !tbaa !400
  %6347 = extractelement <1024 x i32> %5940, i32 406
  store i32 %6347, i32* %2852, align 4, !tbaa !400
  %6348 = extractelement <1024 x i32> %5940, i32 407
  store i32 %6348, i32* %2857, align 4, !tbaa !400
  %6349 = extractelement <1024 x i32> %5940, i32 408
  store i32 %6349, i32* %2862, align 4, !tbaa !400
  %6350 = extractelement <1024 x i32> %5940, i32 409
  store i32 %6350, i32* %2867, align 4, !tbaa !400
  %6351 = extractelement <1024 x i32> %5940, i32 410
  store i32 %6351, i32* %2872, align 4, !tbaa !400
  %6352 = extractelement <1024 x i32> %5940, i32 411
  store i32 %6352, i32* %2877, align 4, !tbaa !400
  %6353 = extractelement <1024 x i32> %5940, i32 412
  store i32 %6353, i32* %2882, align 4, !tbaa !400
  %6354 = extractelement <1024 x i32> %5940, i32 413
  store i32 %6354, i32* %2887, align 4, !tbaa !400
  %6355 = extractelement <1024 x i32> %5940, i32 414
  store i32 %6355, i32* %2892, align 4, !tbaa !400
  %6356 = extractelement <1024 x i32> %5940, i32 415
  store i32 %6356, i32* %2897, align 4, !tbaa !400
  %6357 = extractelement <1024 x i32> %5940, i32 416
  store i32 %6357, i32* %2902, align 4, !tbaa !400
  %6358 = extractelement <1024 x i32> %5940, i32 417
  store i32 %6358, i32* %2907, align 4, !tbaa !400
  %6359 = extractelement <1024 x i32> %5940, i32 418
  store i32 %6359, i32* %2912, align 4, !tbaa !400
  %6360 = extractelement <1024 x i32> %5940, i32 419
  store i32 %6360, i32* %2917, align 4, !tbaa !400
  %6361 = extractelement <1024 x i32> %5940, i32 420
  store i32 %6361, i32* %2922, align 4, !tbaa !400
  %6362 = extractelement <1024 x i32> %5940, i32 421
  store i32 %6362, i32* %2927, align 4, !tbaa !400
  %6363 = extractelement <1024 x i32> %5940, i32 422
  store i32 %6363, i32* %2932, align 4, !tbaa !400
  %6364 = extractelement <1024 x i32> %5940, i32 423
  store i32 %6364, i32* %2937, align 4, !tbaa !400
  %6365 = extractelement <1024 x i32> %5940, i32 424
  store i32 %6365, i32* %2942, align 4, !tbaa !400
  %6366 = extractelement <1024 x i32> %5940, i32 425
  store i32 %6366, i32* %2947, align 4, !tbaa !400
  %6367 = extractelement <1024 x i32> %5940, i32 426
  store i32 %6367, i32* %2952, align 4, !tbaa !400
  %6368 = extractelement <1024 x i32> %5940, i32 427
  store i32 %6368, i32* %2957, align 4, !tbaa !400
  %6369 = extractelement <1024 x i32> %5940, i32 428
  store i32 %6369, i32* %2962, align 4, !tbaa !400
  %6370 = extractelement <1024 x i32> %5940, i32 429
  store i32 %6370, i32* %2967, align 4, !tbaa !400
  %6371 = extractelement <1024 x i32> %5940, i32 430
  store i32 %6371, i32* %2972, align 4, !tbaa !400
  %6372 = extractelement <1024 x i32> %5940, i32 431
  store i32 %6372, i32* %2977, align 4, !tbaa !400
  %6373 = extractelement <1024 x i32> %5940, i32 432
  store i32 %6373, i32* %2982, align 4, !tbaa !400
  %6374 = extractelement <1024 x i32> %5940, i32 433
  store i32 %6374, i32* %2987, align 4, !tbaa !400
  %6375 = extractelement <1024 x i32> %5940, i32 434
  store i32 %6375, i32* %2992, align 4, !tbaa !400
  %6376 = extractelement <1024 x i32> %5940, i32 435
  store i32 %6376, i32* %2997, align 4, !tbaa !400
  %6377 = extractelement <1024 x i32> %5940, i32 436
  store i32 %6377, i32* %3002, align 4, !tbaa !400
  %6378 = extractelement <1024 x i32> %5940, i32 437
  store i32 %6378, i32* %3007, align 4, !tbaa !400
  %6379 = extractelement <1024 x i32> %5940, i32 438
  store i32 %6379, i32* %3012, align 4, !tbaa !400
  %6380 = extractelement <1024 x i32> %5940, i32 439
  store i32 %6380, i32* %3017, align 4, !tbaa !400
  %6381 = extractelement <1024 x i32> %5940, i32 440
  store i32 %6381, i32* %3022, align 4, !tbaa !400
  %6382 = extractelement <1024 x i32> %5940, i32 441
  store i32 %6382, i32* %3027, align 4, !tbaa !400
  %6383 = extractelement <1024 x i32> %5940, i32 442
  store i32 %6383, i32* %3032, align 4, !tbaa !400
  %6384 = extractelement <1024 x i32> %5940, i32 443
  store i32 %6384, i32* %3037, align 4, !tbaa !400
  %6385 = extractelement <1024 x i32> %5940, i32 444
  store i32 %6385, i32* %3042, align 4, !tbaa !400
  %6386 = extractelement <1024 x i32> %5940, i32 445
  store i32 %6386, i32* %3047, align 4, !tbaa !400
  %6387 = extractelement <1024 x i32> %5940, i32 446
  store i32 %6387, i32* %3052, align 4, !tbaa !400
  %6388 = extractelement <1024 x i32> %5940, i32 447
  store i32 %6388, i32* %3057, align 4, !tbaa !400
  %6389 = extractelement <1024 x i32> %5940, i32 448
  store i32 %6389, i32* %3062, align 4, !tbaa !400
  %6390 = extractelement <1024 x i32> %5940, i32 449
  store i32 %6390, i32* %3067, align 4, !tbaa !400
  %6391 = extractelement <1024 x i32> %5940, i32 450
  store i32 %6391, i32* %3072, align 4, !tbaa !400
  %6392 = extractelement <1024 x i32> %5940, i32 451
  store i32 %6392, i32* %3077, align 4, !tbaa !400
  %6393 = extractelement <1024 x i32> %5940, i32 452
  store i32 %6393, i32* %3082, align 4, !tbaa !400
  %6394 = extractelement <1024 x i32> %5940, i32 453
  store i32 %6394, i32* %3087, align 4, !tbaa !400
  %6395 = extractelement <1024 x i32> %5940, i32 454
  store i32 %6395, i32* %3092, align 4, !tbaa !400
  %6396 = extractelement <1024 x i32> %5940, i32 455
  store i32 %6396, i32* %3097, align 4, !tbaa !400
  %6397 = extractelement <1024 x i32> %5940, i32 456
  store i32 %6397, i32* %3102, align 4, !tbaa !400
  %6398 = extractelement <1024 x i32> %5940, i32 457
  store i32 %6398, i32* %3107, align 4, !tbaa !400
  %6399 = extractelement <1024 x i32> %5940, i32 458
  store i32 %6399, i32* %3112, align 4, !tbaa !400
  %6400 = extractelement <1024 x i32> %5940, i32 459
  store i32 %6400, i32* %3117, align 4, !tbaa !400
  %6401 = extractelement <1024 x i32> %5940, i32 460
  store i32 %6401, i32* %3122, align 4, !tbaa !400
  %6402 = extractelement <1024 x i32> %5940, i32 461
  store i32 %6402, i32* %3127, align 4, !tbaa !400
  %6403 = extractelement <1024 x i32> %5940, i32 462
  store i32 %6403, i32* %3132, align 4, !tbaa !400
  %6404 = extractelement <1024 x i32> %5940, i32 463
  store i32 %6404, i32* %3137, align 4, !tbaa !400
  %6405 = extractelement <1024 x i32> %5940, i32 464
  store i32 %6405, i32* %3142, align 4, !tbaa !400
  %6406 = extractelement <1024 x i32> %5940, i32 465
  store i32 %6406, i32* %3147, align 4, !tbaa !400
  %6407 = extractelement <1024 x i32> %5940, i32 466
  store i32 %6407, i32* %3152, align 4, !tbaa !400
  %6408 = extractelement <1024 x i32> %5940, i32 467
  store i32 %6408, i32* %3157, align 4, !tbaa !400
  %6409 = extractelement <1024 x i32> %5940, i32 468
  store i32 %6409, i32* %3162, align 4, !tbaa !400
  %6410 = extractelement <1024 x i32> %5940, i32 469
  store i32 %6410, i32* %3167, align 4, !tbaa !400
  %6411 = extractelement <1024 x i32> %5940, i32 470
  store i32 %6411, i32* %3172, align 4, !tbaa !400
  %6412 = extractelement <1024 x i32> %5940, i32 471
  store i32 %6412, i32* %3177, align 4, !tbaa !400
  %6413 = extractelement <1024 x i32> %5940, i32 472
  store i32 %6413, i32* %3182, align 4, !tbaa !400
  %6414 = extractelement <1024 x i32> %5940, i32 473
  store i32 %6414, i32* %3187, align 4, !tbaa !400
  %6415 = extractelement <1024 x i32> %5940, i32 474
  store i32 %6415, i32* %3192, align 4, !tbaa !400
  %6416 = extractelement <1024 x i32> %5940, i32 475
  store i32 %6416, i32* %3197, align 4, !tbaa !400
  %6417 = extractelement <1024 x i32> %5940, i32 476
  store i32 %6417, i32* %3202, align 4, !tbaa !400
  %6418 = extractelement <1024 x i32> %5940, i32 477
  store i32 %6418, i32* %3207, align 4, !tbaa !400
  %6419 = extractelement <1024 x i32> %5940, i32 478
  store i32 %6419, i32* %3212, align 4, !tbaa !400
  %6420 = extractelement <1024 x i32> %5940, i32 479
  store i32 %6420, i32* %3217, align 4, !tbaa !400
  %6421 = extractelement <1024 x i32> %5940, i32 480
  store i32 %6421, i32* %3222, align 4, !tbaa !400
  %6422 = extractelement <1024 x i32> %5940, i32 481
  store i32 %6422, i32* %3227, align 4, !tbaa !400
  %6423 = extractelement <1024 x i32> %5940, i32 482
  store i32 %6423, i32* %3232, align 4, !tbaa !400
  %6424 = extractelement <1024 x i32> %5940, i32 483
  store i32 %6424, i32* %3237, align 4, !tbaa !400
  %6425 = extractelement <1024 x i32> %5940, i32 484
  store i32 %6425, i32* %3242, align 4, !tbaa !400
  %6426 = extractelement <1024 x i32> %5940, i32 485
  store i32 %6426, i32* %3247, align 4, !tbaa !400
  %6427 = extractelement <1024 x i32> %5940, i32 486
  store i32 %6427, i32* %3252, align 4, !tbaa !400
  %6428 = extractelement <1024 x i32> %5940, i32 487
  store i32 %6428, i32* %3257, align 4, !tbaa !400
  %6429 = extractelement <1024 x i32> %5940, i32 488
  store i32 %6429, i32* %3262, align 4, !tbaa !400
  %6430 = extractelement <1024 x i32> %5940, i32 489
  store i32 %6430, i32* %3267, align 4, !tbaa !400
  %6431 = extractelement <1024 x i32> %5940, i32 490
  store i32 %6431, i32* %3272, align 4, !tbaa !400
  %6432 = extractelement <1024 x i32> %5940, i32 491
  store i32 %6432, i32* %3277, align 4, !tbaa !400
  %6433 = extractelement <1024 x i32> %5940, i32 492
  store i32 %6433, i32* %3282, align 4, !tbaa !400
  %6434 = extractelement <1024 x i32> %5940, i32 493
  store i32 %6434, i32* %3287, align 4, !tbaa !400
  %6435 = extractelement <1024 x i32> %5940, i32 494
  store i32 %6435, i32* %3292, align 4, !tbaa !400
  %6436 = extractelement <1024 x i32> %5940, i32 495
  store i32 %6436, i32* %3297, align 4, !tbaa !400
  %6437 = extractelement <1024 x i32> %5940, i32 496
  store i32 %6437, i32* %3302, align 4, !tbaa !400
  %6438 = extractelement <1024 x i32> %5940, i32 497
  store i32 %6438, i32* %3307, align 4, !tbaa !400
  %6439 = extractelement <1024 x i32> %5940, i32 498
  store i32 %6439, i32* %3312, align 4, !tbaa !400
  %6440 = extractelement <1024 x i32> %5940, i32 499
  store i32 %6440, i32* %3317, align 4, !tbaa !400
  %6441 = extractelement <1024 x i32> %5940, i32 500
  store i32 %6441, i32* %3322, align 4, !tbaa !400
  %6442 = extractelement <1024 x i32> %5940, i32 501
  store i32 %6442, i32* %3327, align 4, !tbaa !400
  %6443 = extractelement <1024 x i32> %5940, i32 502
  store i32 %6443, i32* %3332, align 4, !tbaa !400
  %6444 = extractelement <1024 x i32> %5940, i32 503
  store i32 %6444, i32* %3337, align 4, !tbaa !400
  %6445 = extractelement <1024 x i32> %5940, i32 504
  store i32 %6445, i32* %3342, align 4, !tbaa !400
  %6446 = extractelement <1024 x i32> %5940, i32 505
  store i32 %6446, i32* %3347, align 4, !tbaa !400
  %6447 = extractelement <1024 x i32> %5940, i32 506
  store i32 %6447, i32* %3352, align 4, !tbaa !400
  %6448 = extractelement <1024 x i32> %5940, i32 507
  store i32 %6448, i32* %3357, align 4, !tbaa !400
  %6449 = extractelement <1024 x i32> %5940, i32 508
  store i32 %6449, i32* %3362, align 4, !tbaa !400
  %6450 = extractelement <1024 x i32> %5940, i32 509
  store i32 %6450, i32* %3367, align 4, !tbaa !400
  %6451 = extractelement <1024 x i32> %5940, i32 510
  store i32 %6451, i32* %3372, align 4, !tbaa !400
  %6452 = extractelement <1024 x i32> %5940, i32 511
  store i32 %6452, i32* %3377, align 4, !tbaa !400
  %6453 = extractelement <1024 x i32> %5940, i32 512
  store i32 %6453, i32* %3382, align 4, !tbaa !400
  %6454 = extractelement <1024 x i32> %5940, i32 513
  store i32 %6454, i32* %3387, align 4, !tbaa !400
  %6455 = extractelement <1024 x i32> %5940, i32 514
  store i32 %6455, i32* %3392, align 4, !tbaa !400
  %6456 = extractelement <1024 x i32> %5940, i32 515
  store i32 %6456, i32* %3397, align 4, !tbaa !400
  %6457 = extractelement <1024 x i32> %5940, i32 516
  store i32 %6457, i32* %3402, align 4, !tbaa !400
  %6458 = extractelement <1024 x i32> %5940, i32 517
  store i32 %6458, i32* %3407, align 4, !tbaa !400
  %6459 = extractelement <1024 x i32> %5940, i32 518
  store i32 %6459, i32* %3412, align 4, !tbaa !400
  %6460 = extractelement <1024 x i32> %5940, i32 519
  store i32 %6460, i32* %3417, align 4, !tbaa !400
  %6461 = extractelement <1024 x i32> %5940, i32 520
  store i32 %6461, i32* %3422, align 4, !tbaa !400
  %6462 = extractelement <1024 x i32> %5940, i32 521
  store i32 %6462, i32* %3427, align 4, !tbaa !400
  %6463 = extractelement <1024 x i32> %5940, i32 522
  store i32 %6463, i32* %3432, align 4, !tbaa !400
  %6464 = extractelement <1024 x i32> %5940, i32 523
  store i32 %6464, i32* %3437, align 4, !tbaa !400
  %6465 = extractelement <1024 x i32> %5940, i32 524
  store i32 %6465, i32* %3442, align 4, !tbaa !400
  %6466 = extractelement <1024 x i32> %5940, i32 525
  store i32 %6466, i32* %3447, align 4, !tbaa !400
  %6467 = extractelement <1024 x i32> %5940, i32 526
  store i32 %6467, i32* %3452, align 4, !tbaa !400
  %6468 = extractelement <1024 x i32> %5940, i32 527
  store i32 %6468, i32* %3457, align 4, !tbaa !400
  %6469 = extractelement <1024 x i32> %5940, i32 528
  store i32 %6469, i32* %3462, align 4, !tbaa !400
  %6470 = extractelement <1024 x i32> %5940, i32 529
  store i32 %6470, i32* %3467, align 4, !tbaa !400
  %6471 = extractelement <1024 x i32> %5940, i32 530
  store i32 %6471, i32* %3472, align 4, !tbaa !400
  %6472 = extractelement <1024 x i32> %5940, i32 531
  store i32 %6472, i32* %3477, align 4, !tbaa !400
  %6473 = extractelement <1024 x i32> %5940, i32 532
  store i32 %6473, i32* %3482, align 4, !tbaa !400
  %6474 = extractelement <1024 x i32> %5940, i32 533
  store i32 %6474, i32* %3487, align 4, !tbaa !400
  %6475 = extractelement <1024 x i32> %5940, i32 534
  store i32 %6475, i32* %3492, align 4, !tbaa !400
  %6476 = extractelement <1024 x i32> %5940, i32 535
  store i32 %6476, i32* %3497, align 4, !tbaa !400
  %6477 = extractelement <1024 x i32> %5940, i32 536
  store i32 %6477, i32* %3502, align 4, !tbaa !400
  %6478 = extractelement <1024 x i32> %5940, i32 537
  store i32 %6478, i32* %3507, align 4, !tbaa !400
  %6479 = extractelement <1024 x i32> %5940, i32 538
  store i32 %6479, i32* %3512, align 4, !tbaa !400
  %6480 = extractelement <1024 x i32> %5940, i32 539
  store i32 %6480, i32* %3517, align 4, !tbaa !400
  %6481 = extractelement <1024 x i32> %5940, i32 540
  store i32 %6481, i32* %3522, align 4, !tbaa !400
  %6482 = extractelement <1024 x i32> %5940, i32 541
  store i32 %6482, i32* %3527, align 4, !tbaa !400
  %6483 = extractelement <1024 x i32> %5940, i32 542
  store i32 %6483, i32* %3532, align 4, !tbaa !400
  %6484 = extractelement <1024 x i32> %5940, i32 543
  store i32 %6484, i32* %3537, align 4, !tbaa !400
  %6485 = extractelement <1024 x i32> %5940, i32 544
  store i32 %6485, i32* %3542, align 4, !tbaa !400
  %6486 = extractelement <1024 x i32> %5940, i32 545
  store i32 %6486, i32* %3547, align 4, !tbaa !400
  %6487 = extractelement <1024 x i32> %5940, i32 546
  store i32 %6487, i32* %3552, align 4, !tbaa !400
  %6488 = extractelement <1024 x i32> %5940, i32 547
  store i32 %6488, i32* %3557, align 4, !tbaa !400
  %6489 = extractelement <1024 x i32> %5940, i32 548
  store i32 %6489, i32* %3562, align 4, !tbaa !400
  %6490 = extractelement <1024 x i32> %5940, i32 549
  store i32 %6490, i32* %3567, align 4, !tbaa !400
  %6491 = extractelement <1024 x i32> %5940, i32 550
  store i32 %6491, i32* %3572, align 4, !tbaa !400
  %6492 = extractelement <1024 x i32> %5940, i32 551
  store i32 %6492, i32* %3577, align 4, !tbaa !400
  %6493 = extractelement <1024 x i32> %5940, i32 552
  store i32 %6493, i32* %3582, align 4, !tbaa !400
  %6494 = extractelement <1024 x i32> %5940, i32 553
  store i32 %6494, i32* %3587, align 4, !tbaa !400
  %6495 = extractelement <1024 x i32> %5940, i32 554
  store i32 %6495, i32* %3592, align 4, !tbaa !400
  %6496 = extractelement <1024 x i32> %5940, i32 555
  store i32 %6496, i32* %3597, align 4, !tbaa !400
  %6497 = extractelement <1024 x i32> %5940, i32 556
  store i32 %6497, i32* %3602, align 4, !tbaa !400
  %6498 = extractelement <1024 x i32> %5940, i32 557
  store i32 %6498, i32* %3607, align 4, !tbaa !400
  %6499 = extractelement <1024 x i32> %5940, i32 558
  store i32 %6499, i32* %3612, align 4, !tbaa !400
  %6500 = extractelement <1024 x i32> %5940, i32 559
  store i32 %6500, i32* %3617, align 4, !tbaa !400
  %6501 = extractelement <1024 x i32> %5940, i32 560
  store i32 %6501, i32* %3622, align 4, !tbaa !400
  %6502 = extractelement <1024 x i32> %5940, i32 561
  store i32 %6502, i32* %3627, align 4, !tbaa !400
  %6503 = extractelement <1024 x i32> %5940, i32 562
  store i32 %6503, i32* %3632, align 4, !tbaa !400
  %6504 = extractelement <1024 x i32> %5940, i32 563
  store i32 %6504, i32* %3637, align 4, !tbaa !400
  %6505 = extractelement <1024 x i32> %5940, i32 564
  store i32 %6505, i32* %3642, align 4, !tbaa !400
  %6506 = extractelement <1024 x i32> %5940, i32 565
  store i32 %6506, i32* %3647, align 4, !tbaa !400
  %6507 = extractelement <1024 x i32> %5940, i32 566
  store i32 %6507, i32* %3652, align 4, !tbaa !400
  %6508 = extractelement <1024 x i32> %5940, i32 567
  store i32 %6508, i32* %3657, align 4, !tbaa !400
  %6509 = extractelement <1024 x i32> %5940, i32 568
  store i32 %6509, i32* %3662, align 4, !tbaa !400
  %6510 = extractelement <1024 x i32> %5940, i32 569
  store i32 %6510, i32* %3667, align 4, !tbaa !400
  %6511 = extractelement <1024 x i32> %5940, i32 570
  store i32 %6511, i32* %3672, align 4, !tbaa !400
  %6512 = extractelement <1024 x i32> %5940, i32 571
  store i32 %6512, i32* %3677, align 4, !tbaa !400
  %6513 = extractelement <1024 x i32> %5940, i32 572
  store i32 %6513, i32* %3682, align 4, !tbaa !400
  %6514 = extractelement <1024 x i32> %5940, i32 573
  store i32 %6514, i32* %3687, align 4, !tbaa !400
  %6515 = extractelement <1024 x i32> %5940, i32 574
  store i32 %6515, i32* %3692, align 4, !tbaa !400
  %6516 = extractelement <1024 x i32> %5940, i32 575
  store i32 %6516, i32* %3697, align 4, !tbaa !400
  %6517 = extractelement <1024 x i32> %5940, i32 576
  store i32 %6517, i32* %3702, align 4, !tbaa !400
  %6518 = extractelement <1024 x i32> %5940, i32 577
  store i32 %6518, i32* %3707, align 4, !tbaa !400
  %6519 = extractelement <1024 x i32> %5940, i32 578
  store i32 %6519, i32* %3712, align 4, !tbaa !400
  %6520 = extractelement <1024 x i32> %5940, i32 579
  store i32 %6520, i32* %3717, align 4, !tbaa !400
  %6521 = extractelement <1024 x i32> %5940, i32 580
  store i32 %6521, i32* %3722, align 4, !tbaa !400
  %6522 = extractelement <1024 x i32> %5940, i32 581
  store i32 %6522, i32* %3727, align 4, !tbaa !400
  %6523 = extractelement <1024 x i32> %5940, i32 582
  store i32 %6523, i32* %3732, align 4, !tbaa !400
  %6524 = extractelement <1024 x i32> %5940, i32 583
  store i32 %6524, i32* %3737, align 4, !tbaa !400
  %6525 = extractelement <1024 x i32> %5940, i32 584
  store i32 %6525, i32* %3742, align 4, !tbaa !400
  %6526 = extractelement <1024 x i32> %5940, i32 585
  store i32 %6526, i32* %3747, align 4, !tbaa !400
  %6527 = extractelement <1024 x i32> %5940, i32 586
  store i32 %6527, i32* %3752, align 4, !tbaa !400
  %6528 = extractelement <1024 x i32> %5940, i32 587
  store i32 %6528, i32* %3757, align 4, !tbaa !400
  %6529 = extractelement <1024 x i32> %5940, i32 588
  store i32 %6529, i32* %3762, align 4, !tbaa !400
  %6530 = extractelement <1024 x i32> %5940, i32 589
  store i32 %6530, i32* %3767, align 4, !tbaa !400
  %6531 = extractelement <1024 x i32> %5940, i32 590
  store i32 %6531, i32* %3772, align 4, !tbaa !400
  %6532 = extractelement <1024 x i32> %5940, i32 591
  store i32 %6532, i32* %3777, align 4, !tbaa !400
  %6533 = extractelement <1024 x i32> %5940, i32 592
  store i32 %6533, i32* %3782, align 4, !tbaa !400
  %6534 = extractelement <1024 x i32> %5940, i32 593
  store i32 %6534, i32* %3787, align 4, !tbaa !400
  %6535 = extractelement <1024 x i32> %5940, i32 594
  store i32 %6535, i32* %3792, align 4, !tbaa !400
  %6536 = extractelement <1024 x i32> %5940, i32 595
  store i32 %6536, i32* %3797, align 4, !tbaa !400
  %6537 = extractelement <1024 x i32> %5940, i32 596
  store i32 %6537, i32* %3802, align 4, !tbaa !400
  %6538 = extractelement <1024 x i32> %5940, i32 597
  store i32 %6538, i32* %3807, align 4, !tbaa !400
  %6539 = extractelement <1024 x i32> %5940, i32 598
  store i32 %6539, i32* %3812, align 4, !tbaa !400
  %6540 = extractelement <1024 x i32> %5940, i32 599
  store i32 %6540, i32* %3817, align 4, !tbaa !400
  %6541 = extractelement <1024 x i32> %5940, i32 600
  store i32 %6541, i32* %3822, align 4, !tbaa !400
  %6542 = extractelement <1024 x i32> %5940, i32 601
  store i32 %6542, i32* %3827, align 4, !tbaa !400
  %6543 = extractelement <1024 x i32> %5940, i32 602
  store i32 %6543, i32* %3832, align 4, !tbaa !400
  %6544 = extractelement <1024 x i32> %5940, i32 603
  store i32 %6544, i32* %3837, align 4, !tbaa !400
  %6545 = extractelement <1024 x i32> %5940, i32 604
  store i32 %6545, i32* %3842, align 4, !tbaa !400
  %6546 = extractelement <1024 x i32> %5940, i32 605
  store i32 %6546, i32* %3847, align 4, !tbaa !400
  %6547 = extractelement <1024 x i32> %5940, i32 606
  store i32 %6547, i32* %3852, align 4, !tbaa !400
  %6548 = extractelement <1024 x i32> %5940, i32 607
  store i32 %6548, i32* %3857, align 4, !tbaa !400
  %6549 = extractelement <1024 x i32> %5940, i32 608
  store i32 %6549, i32* %3862, align 4, !tbaa !400
  %6550 = extractelement <1024 x i32> %5940, i32 609
  store i32 %6550, i32* %3867, align 4, !tbaa !400
  %6551 = extractelement <1024 x i32> %5940, i32 610
  store i32 %6551, i32* %3872, align 4, !tbaa !400
  %6552 = extractelement <1024 x i32> %5940, i32 611
  store i32 %6552, i32* %3877, align 4, !tbaa !400
  %6553 = extractelement <1024 x i32> %5940, i32 612
  store i32 %6553, i32* %3882, align 4, !tbaa !400
  %6554 = extractelement <1024 x i32> %5940, i32 613
  store i32 %6554, i32* %3887, align 4, !tbaa !400
  %6555 = extractelement <1024 x i32> %5940, i32 614
  store i32 %6555, i32* %3892, align 4, !tbaa !400
  %6556 = extractelement <1024 x i32> %5940, i32 615
  store i32 %6556, i32* %3897, align 4, !tbaa !400
  %6557 = extractelement <1024 x i32> %5940, i32 616
  store i32 %6557, i32* %3902, align 4, !tbaa !400
  %6558 = extractelement <1024 x i32> %5940, i32 617
  store i32 %6558, i32* %3907, align 4, !tbaa !400
  %6559 = extractelement <1024 x i32> %5940, i32 618
  store i32 %6559, i32* %3912, align 4, !tbaa !400
  %6560 = extractelement <1024 x i32> %5940, i32 619
  store i32 %6560, i32* %3917, align 4, !tbaa !400
  %6561 = extractelement <1024 x i32> %5940, i32 620
  store i32 %6561, i32* %3922, align 4, !tbaa !400
  %6562 = extractelement <1024 x i32> %5940, i32 621
  store i32 %6562, i32* %3927, align 4, !tbaa !400
  %6563 = extractelement <1024 x i32> %5940, i32 622
  store i32 %6563, i32* %3932, align 4, !tbaa !400
  %6564 = extractelement <1024 x i32> %5940, i32 623
  store i32 %6564, i32* %3937, align 4, !tbaa !400
  %6565 = extractelement <1024 x i32> %5940, i32 624
  store i32 %6565, i32* %3942, align 4, !tbaa !400
  %6566 = extractelement <1024 x i32> %5940, i32 625
  store i32 %6566, i32* %3947, align 4, !tbaa !400
  %6567 = extractelement <1024 x i32> %5940, i32 626
  store i32 %6567, i32* %3952, align 4, !tbaa !400
  %6568 = extractelement <1024 x i32> %5940, i32 627
  store i32 %6568, i32* %3957, align 4, !tbaa !400
  %6569 = extractelement <1024 x i32> %5940, i32 628
  store i32 %6569, i32* %3962, align 4, !tbaa !400
  %6570 = extractelement <1024 x i32> %5940, i32 629
  store i32 %6570, i32* %3967, align 4, !tbaa !400
  %6571 = extractelement <1024 x i32> %5940, i32 630
  store i32 %6571, i32* %3972, align 4, !tbaa !400
  %6572 = extractelement <1024 x i32> %5940, i32 631
  store i32 %6572, i32* %3977, align 4, !tbaa !400
  %6573 = extractelement <1024 x i32> %5940, i32 632
  store i32 %6573, i32* %3982, align 4, !tbaa !400
  %6574 = extractelement <1024 x i32> %5940, i32 633
  store i32 %6574, i32* %3987, align 4, !tbaa !400
  %6575 = extractelement <1024 x i32> %5940, i32 634
  store i32 %6575, i32* %3992, align 4, !tbaa !400
  %6576 = extractelement <1024 x i32> %5940, i32 635
  store i32 %6576, i32* %3997, align 4, !tbaa !400
  %6577 = extractelement <1024 x i32> %5940, i32 636
  store i32 %6577, i32* %4002, align 4, !tbaa !400
  %6578 = extractelement <1024 x i32> %5940, i32 637
  store i32 %6578, i32* %4007, align 4, !tbaa !400
  %6579 = extractelement <1024 x i32> %5940, i32 638
  store i32 %6579, i32* %4012, align 4, !tbaa !400
  %6580 = extractelement <1024 x i32> %5940, i32 639
  store i32 %6580, i32* %4017, align 4, !tbaa !400
  %6581 = extractelement <1024 x i32> %5940, i32 640
  store i32 %6581, i32* %4022, align 4, !tbaa !400
  %6582 = extractelement <1024 x i32> %5940, i32 641
  store i32 %6582, i32* %4027, align 4, !tbaa !400
  %6583 = extractelement <1024 x i32> %5940, i32 642
  store i32 %6583, i32* %4032, align 4, !tbaa !400
  %6584 = extractelement <1024 x i32> %5940, i32 643
  store i32 %6584, i32* %4037, align 4, !tbaa !400
  %6585 = extractelement <1024 x i32> %5940, i32 644
  store i32 %6585, i32* %4042, align 4, !tbaa !400
  %6586 = extractelement <1024 x i32> %5940, i32 645
  store i32 %6586, i32* %4047, align 4, !tbaa !400
  %6587 = extractelement <1024 x i32> %5940, i32 646
  store i32 %6587, i32* %4052, align 4, !tbaa !400
  %6588 = extractelement <1024 x i32> %5940, i32 647
  store i32 %6588, i32* %4057, align 4, !tbaa !400
  %6589 = extractelement <1024 x i32> %5940, i32 648
  store i32 %6589, i32* %4062, align 4, !tbaa !400
  %6590 = extractelement <1024 x i32> %5940, i32 649
  store i32 %6590, i32* %4067, align 4, !tbaa !400
  %6591 = extractelement <1024 x i32> %5940, i32 650
  store i32 %6591, i32* %4072, align 4, !tbaa !400
  %6592 = extractelement <1024 x i32> %5940, i32 651
  store i32 %6592, i32* %4077, align 4, !tbaa !400
  %6593 = extractelement <1024 x i32> %5940, i32 652
  store i32 %6593, i32* %4082, align 4, !tbaa !400
  %6594 = extractelement <1024 x i32> %5940, i32 653
  store i32 %6594, i32* %4087, align 4, !tbaa !400
  %6595 = extractelement <1024 x i32> %5940, i32 654
  store i32 %6595, i32* %4092, align 4, !tbaa !400
  %6596 = extractelement <1024 x i32> %5940, i32 655
  store i32 %6596, i32* %4097, align 4, !tbaa !400
  %6597 = extractelement <1024 x i32> %5940, i32 656
  store i32 %6597, i32* %4102, align 4, !tbaa !400
  %6598 = extractelement <1024 x i32> %5940, i32 657
  store i32 %6598, i32* %4107, align 4, !tbaa !400
  %6599 = extractelement <1024 x i32> %5940, i32 658
  store i32 %6599, i32* %4112, align 4, !tbaa !400
  %6600 = extractelement <1024 x i32> %5940, i32 659
  store i32 %6600, i32* %4117, align 4, !tbaa !400
  %6601 = extractelement <1024 x i32> %5940, i32 660
  store i32 %6601, i32* %4122, align 4, !tbaa !400
  %6602 = extractelement <1024 x i32> %5940, i32 661
  store i32 %6602, i32* %4127, align 4, !tbaa !400
  %6603 = extractelement <1024 x i32> %5940, i32 662
  store i32 %6603, i32* %4132, align 4, !tbaa !400
  %6604 = extractelement <1024 x i32> %5940, i32 663
  store i32 %6604, i32* %4137, align 4, !tbaa !400
  %6605 = extractelement <1024 x i32> %5940, i32 664
  store i32 %6605, i32* %4142, align 4, !tbaa !400
  %6606 = extractelement <1024 x i32> %5940, i32 665
  store i32 %6606, i32* %4147, align 4, !tbaa !400
  %6607 = extractelement <1024 x i32> %5940, i32 666
  store i32 %6607, i32* %4152, align 4, !tbaa !400
  %6608 = extractelement <1024 x i32> %5940, i32 667
  store i32 %6608, i32* %4157, align 4, !tbaa !400
  %6609 = extractelement <1024 x i32> %5940, i32 668
  store i32 %6609, i32* %4162, align 4, !tbaa !400
  %6610 = extractelement <1024 x i32> %5940, i32 669
  store i32 %6610, i32* %4167, align 4, !tbaa !400
  %6611 = extractelement <1024 x i32> %5940, i32 670
  store i32 %6611, i32* %4172, align 4, !tbaa !400
  %6612 = extractelement <1024 x i32> %5940, i32 671
  store i32 %6612, i32* %4177, align 4, !tbaa !400
  %6613 = extractelement <1024 x i32> %5940, i32 672
  store i32 %6613, i32* %4182, align 4, !tbaa !400
  %6614 = extractelement <1024 x i32> %5940, i32 673
  store i32 %6614, i32* %4187, align 4, !tbaa !400
  %6615 = extractelement <1024 x i32> %5940, i32 674
  store i32 %6615, i32* %4192, align 4, !tbaa !400
  %6616 = extractelement <1024 x i32> %5940, i32 675
  store i32 %6616, i32* %4197, align 4, !tbaa !400
  %6617 = extractelement <1024 x i32> %5940, i32 676
  store i32 %6617, i32* %4202, align 4, !tbaa !400
  %6618 = extractelement <1024 x i32> %5940, i32 677
  store i32 %6618, i32* %4207, align 4, !tbaa !400
  %6619 = extractelement <1024 x i32> %5940, i32 678
  store i32 %6619, i32* %4212, align 4, !tbaa !400
  %6620 = extractelement <1024 x i32> %5940, i32 679
  store i32 %6620, i32* %4217, align 4, !tbaa !400
  %6621 = extractelement <1024 x i32> %5940, i32 680
  store i32 %6621, i32* %4222, align 4, !tbaa !400
  %6622 = extractelement <1024 x i32> %5940, i32 681
  store i32 %6622, i32* %4227, align 4, !tbaa !400
  %6623 = extractelement <1024 x i32> %5940, i32 682
  store i32 %6623, i32* %4232, align 4, !tbaa !400
  %6624 = extractelement <1024 x i32> %5940, i32 683
  store i32 %6624, i32* %4237, align 4, !tbaa !400
  %6625 = extractelement <1024 x i32> %5940, i32 684
  store i32 %6625, i32* %4242, align 4, !tbaa !400
  %6626 = extractelement <1024 x i32> %5940, i32 685
  store i32 %6626, i32* %4247, align 4, !tbaa !400
  %6627 = extractelement <1024 x i32> %5940, i32 686
  store i32 %6627, i32* %4252, align 4, !tbaa !400
  %6628 = extractelement <1024 x i32> %5940, i32 687
  store i32 %6628, i32* %4257, align 4, !tbaa !400
  %6629 = extractelement <1024 x i32> %5940, i32 688
  store i32 %6629, i32* %4262, align 4, !tbaa !400
  %6630 = extractelement <1024 x i32> %5940, i32 689
  store i32 %6630, i32* %4267, align 4, !tbaa !400
  %6631 = extractelement <1024 x i32> %5940, i32 690
  store i32 %6631, i32* %4272, align 4, !tbaa !400
  %6632 = extractelement <1024 x i32> %5940, i32 691
  store i32 %6632, i32* %4277, align 4, !tbaa !400
  %6633 = extractelement <1024 x i32> %5940, i32 692
  store i32 %6633, i32* %4282, align 4, !tbaa !400
  %6634 = extractelement <1024 x i32> %5940, i32 693
  store i32 %6634, i32* %4287, align 4, !tbaa !400
  %6635 = extractelement <1024 x i32> %5940, i32 694
  store i32 %6635, i32* %4292, align 4, !tbaa !400
  %6636 = extractelement <1024 x i32> %5940, i32 695
  store i32 %6636, i32* %4297, align 4, !tbaa !400
  %6637 = extractelement <1024 x i32> %5940, i32 696
  store i32 %6637, i32* %4302, align 4, !tbaa !400
  %6638 = extractelement <1024 x i32> %5940, i32 697
  store i32 %6638, i32* %4307, align 4, !tbaa !400
  %6639 = extractelement <1024 x i32> %5940, i32 698
  store i32 %6639, i32* %4312, align 4, !tbaa !400
  %6640 = extractelement <1024 x i32> %5940, i32 699
  store i32 %6640, i32* %4317, align 4, !tbaa !400
  %6641 = extractelement <1024 x i32> %5940, i32 700
  store i32 %6641, i32* %4322, align 4, !tbaa !400
  %6642 = extractelement <1024 x i32> %5940, i32 701
  store i32 %6642, i32* %4327, align 4, !tbaa !400
  %6643 = extractelement <1024 x i32> %5940, i32 702
  store i32 %6643, i32* %4332, align 4, !tbaa !400
  %6644 = extractelement <1024 x i32> %5940, i32 703
  store i32 %6644, i32* %4337, align 4, !tbaa !400
  %6645 = extractelement <1024 x i32> %5940, i32 704
  store i32 %6645, i32* %4342, align 4, !tbaa !400
  %6646 = extractelement <1024 x i32> %5940, i32 705
  store i32 %6646, i32* %4347, align 4, !tbaa !400
  %6647 = extractelement <1024 x i32> %5940, i32 706
  store i32 %6647, i32* %4352, align 4, !tbaa !400
  %6648 = extractelement <1024 x i32> %5940, i32 707
  store i32 %6648, i32* %4357, align 4, !tbaa !400
  %6649 = extractelement <1024 x i32> %5940, i32 708
  store i32 %6649, i32* %4362, align 4, !tbaa !400
  %6650 = extractelement <1024 x i32> %5940, i32 709
  store i32 %6650, i32* %4367, align 4, !tbaa !400
  %6651 = extractelement <1024 x i32> %5940, i32 710
  store i32 %6651, i32* %4372, align 4, !tbaa !400
  %6652 = extractelement <1024 x i32> %5940, i32 711
  store i32 %6652, i32* %4377, align 4, !tbaa !400
  %6653 = extractelement <1024 x i32> %5940, i32 712
  store i32 %6653, i32* %4382, align 4, !tbaa !400
  %6654 = extractelement <1024 x i32> %5940, i32 713
  store i32 %6654, i32* %4387, align 4, !tbaa !400
  %6655 = extractelement <1024 x i32> %5940, i32 714
  store i32 %6655, i32* %4392, align 4, !tbaa !400
  %6656 = extractelement <1024 x i32> %5940, i32 715
  store i32 %6656, i32* %4397, align 4, !tbaa !400
  %6657 = extractelement <1024 x i32> %5940, i32 716
  store i32 %6657, i32* %4402, align 4, !tbaa !400
  %6658 = extractelement <1024 x i32> %5940, i32 717
  store i32 %6658, i32* %4407, align 4, !tbaa !400
  %6659 = extractelement <1024 x i32> %5940, i32 718
  store i32 %6659, i32* %4412, align 4, !tbaa !400
  %6660 = extractelement <1024 x i32> %5940, i32 719
  store i32 %6660, i32* %4417, align 4, !tbaa !400
  %6661 = extractelement <1024 x i32> %5940, i32 720
  store i32 %6661, i32* %4422, align 4, !tbaa !400
  %6662 = extractelement <1024 x i32> %5940, i32 721
  store i32 %6662, i32* %4427, align 4, !tbaa !400
  %6663 = extractelement <1024 x i32> %5940, i32 722
  store i32 %6663, i32* %4432, align 4, !tbaa !400
  %6664 = extractelement <1024 x i32> %5940, i32 723
  store i32 %6664, i32* %4437, align 4, !tbaa !400
  %6665 = extractelement <1024 x i32> %5940, i32 724
  store i32 %6665, i32* %4442, align 4, !tbaa !400
  %6666 = extractelement <1024 x i32> %5940, i32 725
  store i32 %6666, i32* %4447, align 4, !tbaa !400
  %6667 = extractelement <1024 x i32> %5940, i32 726
  store i32 %6667, i32* %4452, align 4, !tbaa !400
  %6668 = extractelement <1024 x i32> %5940, i32 727
  store i32 %6668, i32* %4457, align 4, !tbaa !400
  %6669 = extractelement <1024 x i32> %5940, i32 728
  store i32 %6669, i32* %4462, align 4, !tbaa !400
  %6670 = extractelement <1024 x i32> %5940, i32 729
  store i32 %6670, i32* %4467, align 4, !tbaa !400
  %6671 = extractelement <1024 x i32> %5940, i32 730
  store i32 %6671, i32* %4472, align 4, !tbaa !400
  %6672 = extractelement <1024 x i32> %5940, i32 731
  store i32 %6672, i32* %4477, align 4, !tbaa !400
  %6673 = extractelement <1024 x i32> %5940, i32 732
  store i32 %6673, i32* %4482, align 4, !tbaa !400
  %6674 = extractelement <1024 x i32> %5940, i32 733
  store i32 %6674, i32* %4487, align 4, !tbaa !400
  %6675 = extractelement <1024 x i32> %5940, i32 734
  store i32 %6675, i32* %4492, align 4, !tbaa !400
  %6676 = extractelement <1024 x i32> %5940, i32 735
  store i32 %6676, i32* %4497, align 4, !tbaa !400
  %6677 = extractelement <1024 x i32> %5940, i32 736
  store i32 %6677, i32* %4502, align 4, !tbaa !400
  %6678 = extractelement <1024 x i32> %5940, i32 737
  store i32 %6678, i32* %4507, align 4, !tbaa !400
  %6679 = extractelement <1024 x i32> %5940, i32 738
  store i32 %6679, i32* %4512, align 4, !tbaa !400
  %6680 = extractelement <1024 x i32> %5940, i32 739
  store i32 %6680, i32* %4517, align 4, !tbaa !400
  %6681 = extractelement <1024 x i32> %5940, i32 740
  store i32 %6681, i32* %4522, align 4, !tbaa !400
  %6682 = extractelement <1024 x i32> %5940, i32 741
  store i32 %6682, i32* %4527, align 4, !tbaa !400
  %6683 = extractelement <1024 x i32> %5940, i32 742
  store i32 %6683, i32* %4532, align 4, !tbaa !400
  %6684 = extractelement <1024 x i32> %5940, i32 743
  store i32 %6684, i32* %4537, align 4, !tbaa !400
  %6685 = extractelement <1024 x i32> %5940, i32 744
  store i32 %6685, i32* %4542, align 4, !tbaa !400
  %6686 = extractelement <1024 x i32> %5940, i32 745
  store i32 %6686, i32* %4547, align 4, !tbaa !400
  %6687 = extractelement <1024 x i32> %5940, i32 746
  store i32 %6687, i32* %4552, align 4, !tbaa !400
  %6688 = extractelement <1024 x i32> %5940, i32 747
  store i32 %6688, i32* %4557, align 4, !tbaa !400
  %6689 = extractelement <1024 x i32> %5940, i32 748
  store i32 %6689, i32* %4562, align 4, !tbaa !400
  %6690 = extractelement <1024 x i32> %5940, i32 749
  store i32 %6690, i32* %4567, align 4, !tbaa !400
  %6691 = extractelement <1024 x i32> %5940, i32 750
  store i32 %6691, i32* %4572, align 4, !tbaa !400
  %6692 = extractelement <1024 x i32> %5940, i32 751
  store i32 %6692, i32* %4577, align 4, !tbaa !400
  %6693 = extractelement <1024 x i32> %5940, i32 752
  store i32 %6693, i32* %4582, align 4, !tbaa !400
  %6694 = extractelement <1024 x i32> %5940, i32 753
  store i32 %6694, i32* %4587, align 4, !tbaa !400
  %6695 = extractelement <1024 x i32> %5940, i32 754
  store i32 %6695, i32* %4592, align 4, !tbaa !400
  %6696 = extractelement <1024 x i32> %5940, i32 755
  store i32 %6696, i32* %4597, align 4, !tbaa !400
  %6697 = extractelement <1024 x i32> %5940, i32 756
  store i32 %6697, i32* %4602, align 4, !tbaa !400
  %6698 = extractelement <1024 x i32> %5940, i32 757
  store i32 %6698, i32* %4607, align 4, !tbaa !400
  %6699 = extractelement <1024 x i32> %5940, i32 758
  store i32 %6699, i32* %4612, align 4, !tbaa !400
  %6700 = extractelement <1024 x i32> %5940, i32 759
  store i32 %6700, i32* %4617, align 4, !tbaa !400
  %6701 = extractelement <1024 x i32> %5940, i32 760
  store i32 %6701, i32* %4622, align 4, !tbaa !400
  %6702 = extractelement <1024 x i32> %5940, i32 761
  store i32 %6702, i32* %4627, align 4, !tbaa !400
  %6703 = extractelement <1024 x i32> %5940, i32 762
  store i32 %6703, i32* %4632, align 4, !tbaa !400
  %6704 = extractelement <1024 x i32> %5940, i32 763
  store i32 %6704, i32* %4637, align 4, !tbaa !400
  %6705 = extractelement <1024 x i32> %5940, i32 764
  store i32 %6705, i32* %4642, align 4, !tbaa !400
  %6706 = extractelement <1024 x i32> %5940, i32 765
  store i32 %6706, i32* %4647, align 4, !tbaa !400
  %6707 = extractelement <1024 x i32> %5940, i32 766
  store i32 %6707, i32* %4652, align 4, !tbaa !400
  %6708 = extractelement <1024 x i32> %5940, i32 767
  store i32 %6708, i32* %4657, align 4, !tbaa !400
  %6709 = extractelement <1024 x i32> %5940, i32 768
  store i32 %6709, i32* %4662, align 4, !tbaa !400
  %6710 = extractelement <1024 x i32> %5940, i32 769
  store i32 %6710, i32* %4667, align 4, !tbaa !400
  %6711 = extractelement <1024 x i32> %5940, i32 770
  store i32 %6711, i32* %4672, align 4, !tbaa !400
  %6712 = extractelement <1024 x i32> %5940, i32 771
  store i32 %6712, i32* %4677, align 4, !tbaa !400
  %6713 = extractelement <1024 x i32> %5940, i32 772
  store i32 %6713, i32* %4682, align 4, !tbaa !400
  %6714 = extractelement <1024 x i32> %5940, i32 773
  store i32 %6714, i32* %4687, align 4, !tbaa !400
  %6715 = extractelement <1024 x i32> %5940, i32 774
  store i32 %6715, i32* %4692, align 4, !tbaa !400
  %6716 = extractelement <1024 x i32> %5940, i32 775
  store i32 %6716, i32* %4697, align 4, !tbaa !400
  %6717 = extractelement <1024 x i32> %5940, i32 776
  store i32 %6717, i32* %4702, align 4, !tbaa !400
  %6718 = extractelement <1024 x i32> %5940, i32 777
  store i32 %6718, i32* %4707, align 4, !tbaa !400
  %6719 = extractelement <1024 x i32> %5940, i32 778
  store i32 %6719, i32* %4712, align 4, !tbaa !400
  %6720 = extractelement <1024 x i32> %5940, i32 779
  store i32 %6720, i32* %4717, align 4, !tbaa !400
  %6721 = extractelement <1024 x i32> %5940, i32 780
  store i32 %6721, i32* %4722, align 4, !tbaa !400
  %6722 = extractelement <1024 x i32> %5940, i32 781
  store i32 %6722, i32* %4727, align 4, !tbaa !400
  %6723 = extractelement <1024 x i32> %5940, i32 782
  store i32 %6723, i32* %4732, align 4, !tbaa !400
  %6724 = extractelement <1024 x i32> %5940, i32 783
  store i32 %6724, i32* %4737, align 4, !tbaa !400
  %6725 = extractelement <1024 x i32> %5940, i32 784
  store i32 %6725, i32* %4742, align 4, !tbaa !400
  %6726 = extractelement <1024 x i32> %5940, i32 785
  store i32 %6726, i32* %4747, align 4, !tbaa !400
  %6727 = extractelement <1024 x i32> %5940, i32 786
  store i32 %6727, i32* %4752, align 4, !tbaa !400
  %6728 = extractelement <1024 x i32> %5940, i32 787
  store i32 %6728, i32* %4757, align 4, !tbaa !400
  %6729 = extractelement <1024 x i32> %5940, i32 788
  store i32 %6729, i32* %4762, align 4, !tbaa !400
  %6730 = extractelement <1024 x i32> %5940, i32 789
  store i32 %6730, i32* %4767, align 4, !tbaa !400
  %6731 = extractelement <1024 x i32> %5940, i32 790
  store i32 %6731, i32* %4772, align 4, !tbaa !400
  %6732 = extractelement <1024 x i32> %5940, i32 791
  store i32 %6732, i32* %4777, align 4, !tbaa !400
  %6733 = extractelement <1024 x i32> %5940, i32 792
  store i32 %6733, i32* %4782, align 4, !tbaa !400
  %6734 = extractelement <1024 x i32> %5940, i32 793
  store i32 %6734, i32* %4787, align 4, !tbaa !400
  %6735 = extractelement <1024 x i32> %5940, i32 794
  store i32 %6735, i32* %4792, align 4, !tbaa !400
  %6736 = extractelement <1024 x i32> %5940, i32 795
  store i32 %6736, i32* %4797, align 4, !tbaa !400
  %6737 = extractelement <1024 x i32> %5940, i32 796
  store i32 %6737, i32* %4802, align 4, !tbaa !400
  %6738 = extractelement <1024 x i32> %5940, i32 797
  store i32 %6738, i32* %4807, align 4, !tbaa !400
  %6739 = extractelement <1024 x i32> %5940, i32 798
  store i32 %6739, i32* %4812, align 4, !tbaa !400
  %6740 = extractelement <1024 x i32> %5940, i32 799
  store i32 %6740, i32* %4817, align 4, !tbaa !400
  %6741 = extractelement <1024 x i32> %5940, i32 800
  store i32 %6741, i32* %4822, align 4, !tbaa !400
  %6742 = extractelement <1024 x i32> %5940, i32 801
  store i32 %6742, i32* %4827, align 4, !tbaa !400
  %6743 = extractelement <1024 x i32> %5940, i32 802
  store i32 %6743, i32* %4832, align 4, !tbaa !400
  %6744 = extractelement <1024 x i32> %5940, i32 803
  store i32 %6744, i32* %4837, align 4, !tbaa !400
  %6745 = extractelement <1024 x i32> %5940, i32 804
  store i32 %6745, i32* %4842, align 4, !tbaa !400
  %6746 = extractelement <1024 x i32> %5940, i32 805
  store i32 %6746, i32* %4847, align 4, !tbaa !400
  %6747 = extractelement <1024 x i32> %5940, i32 806
  store i32 %6747, i32* %4852, align 4, !tbaa !400
  %6748 = extractelement <1024 x i32> %5940, i32 807
  store i32 %6748, i32* %4857, align 4, !tbaa !400
  %6749 = extractelement <1024 x i32> %5940, i32 808
  store i32 %6749, i32* %4862, align 4, !tbaa !400
  %6750 = extractelement <1024 x i32> %5940, i32 809
  store i32 %6750, i32* %4867, align 4, !tbaa !400
  %6751 = extractelement <1024 x i32> %5940, i32 810
  store i32 %6751, i32* %4872, align 4, !tbaa !400
  %6752 = extractelement <1024 x i32> %5940, i32 811
  store i32 %6752, i32* %4877, align 4, !tbaa !400
  %6753 = extractelement <1024 x i32> %5940, i32 812
  store i32 %6753, i32* %4882, align 4, !tbaa !400
  %6754 = extractelement <1024 x i32> %5940, i32 813
  store i32 %6754, i32* %4887, align 4, !tbaa !400
  %6755 = extractelement <1024 x i32> %5940, i32 814
  store i32 %6755, i32* %4892, align 4, !tbaa !400
  %6756 = extractelement <1024 x i32> %5940, i32 815
  store i32 %6756, i32* %4897, align 4, !tbaa !400
  %6757 = extractelement <1024 x i32> %5940, i32 816
  store i32 %6757, i32* %4902, align 4, !tbaa !400
  %6758 = extractelement <1024 x i32> %5940, i32 817
  store i32 %6758, i32* %4907, align 4, !tbaa !400
  %6759 = extractelement <1024 x i32> %5940, i32 818
  store i32 %6759, i32* %4912, align 4, !tbaa !400
  %6760 = extractelement <1024 x i32> %5940, i32 819
  store i32 %6760, i32* %4917, align 4, !tbaa !400
  %6761 = extractelement <1024 x i32> %5940, i32 820
  store i32 %6761, i32* %4922, align 4, !tbaa !400
  %6762 = extractelement <1024 x i32> %5940, i32 821
  store i32 %6762, i32* %4927, align 4, !tbaa !400
  %6763 = extractelement <1024 x i32> %5940, i32 822
  store i32 %6763, i32* %4932, align 4, !tbaa !400
  %6764 = extractelement <1024 x i32> %5940, i32 823
  store i32 %6764, i32* %4937, align 4, !tbaa !400
  %6765 = extractelement <1024 x i32> %5940, i32 824
  store i32 %6765, i32* %4942, align 4, !tbaa !400
  %6766 = extractelement <1024 x i32> %5940, i32 825
  store i32 %6766, i32* %4947, align 4, !tbaa !400
  %6767 = extractelement <1024 x i32> %5940, i32 826
  store i32 %6767, i32* %4952, align 4, !tbaa !400
  %6768 = extractelement <1024 x i32> %5940, i32 827
  store i32 %6768, i32* %4957, align 4, !tbaa !400
  %6769 = extractelement <1024 x i32> %5940, i32 828
  store i32 %6769, i32* %4962, align 4, !tbaa !400
  %6770 = extractelement <1024 x i32> %5940, i32 829
  store i32 %6770, i32* %4967, align 4, !tbaa !400
  %6771 = extractelement <1024 x i32> %5940, i32 830
  store i32 %6771, i32* %4972, align 4, !tbaa !400
  %6772 = extractelement <1024 x i32> %5940, i32 831
  store i32 %6772, i32* %4977, align 4, !tbaa !400
  %6773 = extractelement <1024 x i32> %5940, i32 832
  store i32 %6773, i32* %4982, align 4, !tbaa !400
  %6774 = extractelement <1024 x i32> %5940, i32 833
  store i32 %6774, i32* %4987, align 4, !tbaa !400
  %6775 = extractelement <1024 x i32> %5940, i32 834
  store i32 %6775, i32* %4992, align 4, !tbaa !400
  %6776 = extractelement <1024 x i32> %5940, i32 835
  store i32 %6776, i32* %4997, align 4, !tbaa !400
  %6777 = extractelement <1024 x i32> %5940, i32 836
  store i32 %6777, i32* %5002, align 4, !tbaa !400
  %6778 = extractelement <1024 x i32> %5940, i32 837
  store i32 %6778, i32* %5007, align 4, !tbaa !400
  %6779 = extractelement <1024 x i32> %5940, i32 838
  store i32 %6779, i32* %5012, align 4, !tbaa !400
  %6780 = extractelement <1024 x i32> %5940, i32 839
  store i32 %6780, i32* %5017, align 4, !tbaa !400
  %6781 = extractelement <1024 x i32> %5940, i32 840
  store i32 %6781, i32* %5022, align 4, !tbaa !400
  %6782 = extractelement <1024 x i32> %5940, i32 841
  store i32 %6782, i32* %5027, align 4, !tbaa !400
  %6783 = extractelement <1024 x i32> %5940, i32 842
  store i32 %6783, i32* %5032, align 4, !tbaa !400
  %6784 = extractelement <1024 x i32> %5940, i32 843
  store i32 %6784, i32* %5037, align 4, !tbaa !400
  %6785 = extractelement <1024 x i32> %5940, i32 844
  store i32 %6785, i32* %5042, align 4, !tbaa !400
  %6786 = extractelement <1024 x i32> %5940, i32 845
  store i32 %6786, i32* %5047, align 4, !tbaa !400
  %6787 = extractelement <1024 x i32> %5940, i32 846
  store i32 %6787, i32* %5052, align 4, !tbaa !400
  %6788 = extractelement <1024 x i32> %5940, i32 847
  store i32 %6788, i32* %5057, align 4, !tbaa !400
  %6789 = extractelement <1024 x i32> %5940, i32 848
  store i32 %6789, i32* %5062, align 4, !tbaa !400
  %6790 = extractelement <1024 x i32> %5940, i32 849
  store i32 %6790, i32* %5067, align 4, !tbaa !400
  %6791 = extractelement <1024 x i32> %5940, i32 850
  store i32 %6791, i32* %5072, align 4, !tbaa !400
  %6792 = extractelement <1024 x i32> %5940, i32 851
  store i32 %6792, i32* %5077, align 4, !tbaa !400
  %6793 = extractelement <1024 x i32> %5940, i32 852
  store i32 %6793, i32* %5082, align 4, !tbaa !400
  %6794 = extractelement <1024 x i32> %5940, i32 853
  store i32 %6794, i32* %5087, align 4, !tbaa !400
  %6795 = extractelement <1024 x i32> %5940, i32 854
  store i32 %6795, i32* %5092, align 4, !tbaa !400
  %6796 = extractelement <1024 x i32> %5940, i32 855
  store i32 %6796, i32* %5097, align 4, !tbaa !400
  %6797 = extractelement <1024 x i32> %5940, i32 856
  store i32 %6797, i32* %5102, align 4, !tbaa !400
  %6798 = extractelement <1024 x i32> %5940, i32 857
  store i32 %6798, i32* %5107, align 4, !tbaa !400
  %6799 = extractelement <1024 x i32> %5940, i32 858
  store i32 %6799, i32* %5112, align 4, !tbaa !400
  %6800 = extractelement <1024 x i32> %5940, i32 859
  store i32 %6800, i32* %5117, align 4, !tbaa !400
  %6801 = extractelement <1024 x i32> %5940, i32 860
  store i32 %6801, i32* %5122, align 4, !tbaa !400
  %6802 = extractelement <1024 x i32> %5940, i32 861
  store i32 %6802, i32* %5127, align 4, !tbaa !400
  %6803 = extractelement <1024 x i32> %5940, i32 862
  store i32 %6803, i32* %5132, align 4, !tbaa !400
  %6804 = extractelement <1024 x i32> %5940, i32 863
  store i32 %6804, i32* %5137, align 4, !tbaa !400
  %6805 = extractelement <1024 x i32> %5940, i32 864
  store i32 %6805, i32* %5142, align 4, !tbaa !400
  %6806 = extractelement <1024 x i32> %5940, i32 865
  store i32 %6806, i32* %5147, align 4, !tbaa !400
  %6807 = extractelement <1024 x i32> %5940, i32 866
  store i32 %6807, i32* %5152, align 4, !tbaa !400
  %6808 = extractelement <1024 x i32> %5940, i32 867
  store i32 %6808, i32* %5157, align 4, !tbaa !400
  %6809 = extractelement <1024 x i32> %5940, i32 868
  store i32 %6809, i32* %5162, align 4, !tbaa !400
  %6810 = extractelement <1024 x i32> %5940, i32 869
  store i32 %6810, i32* %5167, align 4, !tbaa !400
  %6811 = extractelement <1024 x i32> %5940, i32 870
  store i32 %6811, i32* %5172, align 4, !tbaa !400
  %6812 = extractelement <1024 x i32> %5940, i32 871
  store i32 %6812, i32* %5177, align 4, !tbaa !400
  %6813 = extractelement <1024 x i32> %5940, i32 872
  store i32 %6813, i32* %5182, align 4, !tbaa !400
  %6814 = extractelement <1024 x i32> %5940, i32 873
  store i32 %6814, i32* %5187, align 4, !tbaa !400
  %6815 = extractelement <1024 x i32> %5940, i32 874
  store i32 %6815, i32* %5192, align 4, !tbaa !400
  %6816 = extractelement <1024 x i32> %5940, i32 875
  store i32 %6816, i32* %5197, align 4, !tbaa !400
  %6817 = extractelement <1024 x i32> %5940, i32 876
  store i32 %6817, i32* %5202, align 4, !tbaa !400
  %6818 = extractelement <1024 x i32> %5940, i32 877
  store i32 %6818, i32* %5207, align 4, !tbaa !400
  %6819 = extractelement <1024 x i32> %5940, i32 878
  store i32 %6819, i32* %5212, align 4, !tbaa !400
  %6820 = extractelement <1024 x i32> %5940, i32 879
  store i32 %6820, i32* %5217, align 4, !tbaa !400
  %6821 = extractelement <1024 x i32> %5940, i32 880
  store i32 %6821, i32* %5222, align 4, !tbaa !400
  %6822 = extractelement <1024 x i32> %5940, i32 881
  store i32 %6822, i32* %5227, align 4, !tbaa !400
  %6823 = extractelement <1024 x i32> %5940, i32 882
  store i32 %6823, i32* %5232, align 4, !tbaa !400
  %6824 = extractelement <1024 x i32> %5940, i32 883
  store i32 %6824, i32* %5237, align 4, !tbaa !400
  %6825 = extractelement <1024 x i32> %5940, i32 884
  store i32 %6825, i32* %5242, align 4, !tbaa !400
  %6826 = extractelement <1024 x i32> %5940, i32 885
  store i32 %6826, i32* %5247, align 4, !tbaa !400
  %6827 = extractelement <1024 x i32> %5940, i32 886
  store i32 %6827, i32* %5252, align 4, !tbaa !400
  %6828 = extractelement <1024 x i32> %5940, i32 887
  store i32 %6828, i32* %5257, align 4, !tbaa !400
  %6829 = extractelement <1024 x i32> %5940, i32 888
  store i32 %6829, i32* %5262, align 4, !tbaa !400
  %6830 = extractelement <1024 x i32> %5940, i32 889
  store i32 %6830, i32* %5267, align 4, !tbaa !400
  %6831 = extractelement <1024 x i32> %5940, i32 890
  store i32 %6831, i32* %5272, align 4, !tbaa !400
  %6832 = extractelement <1024 x i32> %5940, i32 891
  store i32 %6832, i32* %5277, align 4, !tbaa !400
  %6833 = extractelement <1024 x i32> %5940, i32 892
  store i32 %6833, i32* %5282, align 4, !tbaa !400
  %6834 = extractelement <1024 x i32> %5940, i32 893
  store i32 %6834, i32* %5287, align 4, !tbaa !400
  %6835 = extractelement <1024 x i32> %5940, i32 894
  store i32 %6835, i32* %5292, align 4, !tbaa !400
  %6836 = extractelement <1024 x i32> %5940, i32 895
  store i32 %6836, i32* %5297, align 4, !tbaa !400
  %6837 = extractelement <1024 x i32> %5940, i32 896
  store i32 %6837, i32* %5302, align 4, !tbaa !400
  %6838 = extractelement <1024 x i32> %5940, i32 897
  store i32 %6838, i32* %5307, align 4, !tbaa !400
  %6839 = extractelement <1024 x i32> %5940, i32 898
  store i32 %6839, i32* %5312, align 4, !tbaa !400
  %6840 = extractelement <1024 x i32> %5940, i32 899
  store i32 %6840, i32* %5317, align 4, !tbaa !400
  %6841 = extractelement <1024 x i32> %5940, i32 900
  store i32 %6841, i32* %5322, align 4, !tbaa !400
  %6842 = extractelement <1024 x i32> %5940, i32 901
  store i32 %6842, i32* %5327, align 4, !tbaa !400
  %6843 = extractelement <1024 x i32> %5940, i32 902
  store i32 %6843, i32* %5332, align 4, !tbaa !400
  %6844 = extractelement <1024 x i32> %5940, i32 903
  store i32 %6844, i32* %5337, align 4, !tbaa !400
  %6845 = extractelement <1024 x i32> %5940, i32 904
  store i32 %6845, i32* %5342, align 4, !tbaa !400
  %6846 = extractelement <1024 x i32> %5940, i32 905
  store i32 %6846, i32* %5347, align 4, !tbaa !400
  %6847 = extractelement <1024 x i32> %5940, i32 906
  store i32 %6847, i32* %5352, align 4, !tbaa !400
  %6848 = extractelement <1024 x i32> %5940, i32 907
  store i32 %6848, i32* %5357, align 4, !tbaa !400
  %6849 = extractelement <1024 x i32> %5940, i32 908
  store i32 %6849, i32* %5362, align 4, !tbaa !400
  %6850 = extractelement <1024 x i32> %5940, i32 909
  store i32 %6850, i32* %5367, align 4, !tbaa !400
  %6851 = extractelement <1024 x i32> %5940, i32 910
  store i32 %6851, i32* %5372, align 4, !tbaa !400
  %6852 = extractelement <1024 x i32> %5940, i32 911
  store i32 %6852, i32* %5377, align 4, !tbaa !400
  %6853 = extractelement <1024 x i32> %5940, i32 912
  store i32 %6853, i32* %5382, align 4, !tbaa !400
  %6854 = extractelement <1024 x i32> %5940, i32 913
  store i32 %6854, i32* %5387, align 4, !tbaa !400
  %6855 = extractelement <1024 x i32> %5940, i32 914
  store i32 %6855, i32* %5392, align 4, !tbaa !400
  %6856 = extractelement <1024 x i32> %5940, i32 915
  store i32 %6856, i32* %5397, align 4, !tbaa !400
  %6857 = extractelement <1024 x i32> %5940, i32 916
  store i32 %6857, i32* %5402, align 4, !tbaa !400
  %6858 = extractelement <1024 x i32> %5940, i32 917
  store i32 %6858, i32* %5407, align 4, !tbaa !400
  %6859 = extractelement <1024 x i32> %5940, i32 918
  store i32 %6859, i32* %5412, align 4, !tbaa !400
  %6860 = extractelement <1024 x i32> %5940, i32 919
  store i32 %6860, i32* %5417, align 4, !tbaa !400
  %6861 = extractelement <1024 x i32> %5940, i32 920
  store i32 %6861, i32* %5422, align 4, !tbaa !400
  %6862 = extractelement <1024 x i32> %5940, i32 921
  store i32 %6862, i32* %5427, align 4, !tbaa !400
  %6863 = extractelement <1024 x i32> %5940, i32 922
  store i32 %6863, i32* %5432, align 4, !tbaa !400
  %6864 = extractelement <1024 x i32> %5940, i32 923
  store i32 %6864, i32* %5437, align 4, !tbaa !400
  %6865 = extractelement <1024 x i32> %5940, i32 924
  store i32 %6865, i32* %5442, align 4, !tbaa !400
  %6866 = extractelement <1024 x i32> %5940, i32 925
  store i32 %6866, i32* %5447, align 4, !tbaa !400
  %6867 = extractelement <1024 x i32> %5940, i32 926
  store i32 %6867, i32* %5452, align 4, !tbaa !400
  %6868 = extractelement <1024 x i32> %5940, i32 927
  store i32 %6868, i32* %5457, align 4, !tbaa !400
  %6869 = extractelement <1024 x i32> %5940, i32 928
  store i32 %6869, i32* %5462, align 4, !tbaa !400
  %6870 = extractelement <1024 x i32> %5940, i32 929
  store i32 %6870, i32* %5467, align 4, !tbaa !400
  %6871 = extractelement <1024 x i32> %5940, i32 930
  store i32 %6871, i32* %5472, align 4, !tbaa !400
  %6872 = extractelement <1024 x i32> %5940, i32 931
  store i32 %6872, i32* %5477, align 4, !tbaa !400
  %6873 = extractelement <1024 x i32> %5940, i32 932
  store i32 %6873, i32* %5482, align 4, !tbaa !400
  %6874 = extractelement <1024 x i32> %5940, i32 933
  store i32 %6874, i32* %5487, align 4, !tbaa !400
  %6875 = extractelement <1024 x i32> %5940, i32 934
  store i32 %6875, i32* %5492, align 4, !tbaa !400
  %6876 = extractelement <1024 x i32> %5940, i32 935
  store i32 %6876, i32* %5497, align 4, !tbaa !400
  %6877 = extractelement <1024 x i32> %5940, i32 936
  store i32 %6877, i32* %5502, align 4, !tbaa !400
  %6878 = extractelement <1024 x i32> %5940, i32 937
  store i32 %6878, i32* %5507, align 4, !tbaa !400
  %6879 = extractelement <1024 x i32> %5940, i32 938
  store i32 %6879, i32* %5512, align 4, !tbaa !400
  %6880 = extractelement <1024 x i32> %5940, i32 939
  store i32 %6880, i32* %5517, align 4, !tbaa !400
  %6881 = extractelement <1024 x i32> %5940, i32 940
  store i32 %6881, i32* %5522, align 4, !tbaa !400
  %6882 = extractelement <1024 x i32> %5940, i32 941
  store i32 %6882, i32* %5527, align 4, !tbaa !400
  %6883 = extractelement <1024 x i32> %5940, i32 942
  store i32 %6883, i32* %5532, align 4, !tbaa !400
  %6884 = extractelement <1024 x i32> %5940, i32 943
  store i32 %6884, i32* %5537, align 4, !tbaa !400
  %6885 = extractelement <1024 x i32> %5940, i32 944
  store i32 %6885, i32* %5542, align 4, !tbaa !400
  %6886 = extractelement <1024 x i32> %5940, i32 945
  store i32 %6886, i32* %5547, align 4, !tbaa !400
  %6887 = extractelement <1024 x i32> %5940, i32 946
  store i32 %6887, i32* %5552, align 4, !tbaa !400
  %6888 = extractelement <1024 x i32> %5940, i32 947
  store i32 %6888, i32* %5557, align 4, !tbaa !400
  %6889 = extractelement <1024 x i32> %5940, i32 948
  store i32 %6889, i32* %5562, align 4, !tbaa !400
  %6890 = extractelement <1024 x i32> %5940, i32 949
  store i32 %6890, i32* %5567, align 4, !tbaa !400
  %6891 = extractelement <1024 x i32> %5940, i32 950
  store i32 %6891, i32* %5572, align 4, !tbaa !400
  %6892 = extractelement <1024 x i32> %5940, i32 951
  store i32 %6892, i32* %5577, align 4, !tbaa !400
  %6893 = extractelement <1024 x i32> %5940, i32 952
  store i32 %6893, i32* %5582, align 4, !tbaa !400
  %6894 = extractelement <1024 x i32> %5940, i32 953
  store i32 %6894, i32* %5587, align 4, !tbaa !400
  %6895 = extractelement <1024 x i32> %5940, i32 954
  store i32 %6895, i32* %5592, align 4, !tbaa !400
  %6896 = extractelement <1024 x i32> %5940, i32 955
  store i32 %6896, i32* %5597, align 4, !tbaa !400
  %6897 = extractelement <1024 x i32> %5940, i32 956
  store i32 %6897, i32* %5602, align 4, !tbaa !400
  %6898 = extractelement <1024 x i32> %5940, i32 957
  store i32 %6898, i32* %5607, align 4, !tbaa !400
  %6899 = extractelement <1024 x i32> %5940, i32 958
  store i32 %6899, i32* %5612, align 4, !tbaa !400
  %6900 = extractelement <1024 x i32> %5940, i32 959
  store i32 %6900, i32* %5617, align 4, !tbaa !400
  %6901 = extractelement <1024 x i32> %5940, i32 960
  store i32 %6901, i32* %5622, align 4, !tbaa !400
  %6902 = extractelement <1024 x i32> %5940, i32 961
  store i32 %6902, i32* %5627, align 4, !tbaa !400
  %6903 = extractelement <1024 x i32> %5940, i32 962
  store i32 %6903, i32* %5632, align 4, !tbaa !400
  %6904 = extractelement <1024 x i32> %5940, i32 963
  store i32 %6904, i32* %5637, align 4, !tbaa !400
  %6905 = extractelement <1024 x i32> %5940, i32 964
  store i32 %6905, i32* %5642, align 4, !tbaa !400
  %6906 = extractelement <1024 x i32> %5940, i32 965
  store i32 %6906, i32* %5647, align 4, !tbaa !400
  %6907 = extractelement <1024 x i32> %5940, i32 966
  store i32 %6907, i32* %5652, align 4, !tbaa !400
  %6908 = extractelement <1024 x i32> %5940, i32 967
  store i32 %6908, i32* %5657, align 4, !tbaa !400
  %6909 = extractelement <1024 x i32> %5940, i32 968
  store i32 %6909, i32* %5662, align 4, !tbaa !400
  %6910 = extractelement <1024 x i32> %5940, i32 969
  store i32 %6910, i32* %5667, align 4, !tbaa !400
  %6911 = extractelement <1024 x i32> %5940, i32 970
  store i32 %6911, i32* %5672, align 4, !tbaa !400
  %6912 = extractelement <1024 x i32> %5940, i32 971
  store i32 %6912, i32* %5677, align 4, !tbaa !400
  %6913 = extractelement <1024 x i32> %5940, i32 972
  store i32 %6913, i32* %5682, align 4, !tbaa !400
  %6914 = extractelement <1024 x i32> %5940, i32 973
  store i32 %6914, i32* %5687, align 4, !tbaa !400
  %6915 = extractelement <1024 x i32> %5940, i32 974
  store i32 %6915, i32* %5692, align 4, !tbaa !400
  %6916 = extractelement <1024 x i32> %5940, i32 975
  store i32 %6916, i32* %5697, align 4, !tbaa !400
  %6917 = extractelement <1024 x i32> %5940, i32 976
  store i32 %6917, i32* %5702, align 4, !tbaa !400
  %6918 = extractelement <1024 x i32> %5940, i32 977
  store i32 %6918, i32* %5707, align 4, !tbaa !400
  %6919 = extractelement <1024 x i32> %5940, i32 978
  store i32 %6919, i32* %5712, align 4, !tbaa !400
  %6920 = extractelement <1024 x i32> %5940, i32 979
  store i32 %6920, i32* %5717, align 4, !tbaa !400
  %6921 = extractelement <1024 x i32> %5940, i32 980
  store i32 %6921, i32* %5722, align 4, !tbaa !400
  %6922 = extractelement <1024 x i32> %5940, i32 981
  store i32 %6922, i32* %5727, align 4, !tbaa !400
  %6923 = extractelement <1024 x i32> %5940, i32 982
  store i32 %6923, i32* %5732, align 4, !tbaa !400
  %6924 = extractelement <1024 x i32> %5940, i32 983
  store i32 %6924, i32* %5737, align 4, !tbaa !400
  %6925 = extractelement <1024 x i32> %5940, i32 984
  store i32 %6925, i32* %5742, align 4, !tbaa !400
  %6926 = extractelement <1024 x i32> %5940, i32 985
  store i32 %6926, i32* %5747, align 4, !tbaa !400
  %6927 = extractelement <1024 x i32> %5940, i32 986
  store i32 %6927, i32* %5752, align 4, !tbaa !400
  %6928 = extractelement <1024 x i32> %5940, i32 987
  store i32 %6928, i32* %5757, align 4, !tbaa !400
  %6929 = extractelement <1024 x i32> %5940, i32 988
  store i32 %6929, i32* %5762, align 4, !tbaa !400
  %6930 = extractelement <1024 x i32> %5940, i32 989
  store i32 %6930, i32* %5767, align 4, !tbaa !400
  %6931 = extractelement <1024 x i32> %5940, i32 990
  store i32 %6931, i32* %5772, align 4, !tbaa !400
  %6932 = extractelement <1024 x i32> %5940, i32 991
  store i32 %6932, i32* %5777, align 4, !tbaa !400
  %6933 = extractelement <1024 x i32> %5940, i32 992
  store i32 %6933, i32* %5782, align 4, !tbaa !400
  %6934 = extractelement <1024 x i32> %5940, i32 993
  store i32 %6934, i32* %5787, align 4, !tbaa !400
  %6935 = extractelement <1024 x i32> %5940, i32 994
  store i32 %6935, i32* %5792, align 4, !tbaa !400
  %6936 = extractelement <1024 x i32> %5940, i32 995
  store i32 %6936, i32* %5797, align 4, !tbaa !400
  %6937 = extractelement <1024 x i32> %5940, i32 996
  store i32 %6937, i32* %5802, align 4, !tbaa !400
  %6938 = extractelement <1024 x i32> %5940, i32 997
  store i32 %6938, i32* %5807, align 4, !tbaa !400
  %6939 = extractelement <1024 x i32> %5940, i32 998
  store i32 %6939, i32* %5812, align 4, !tbaa !400
  %6940 = extractelement <1024 x i32> %5940, i32 999
  store i32 %6940, i32* %5817, align 4, !tbaa !400
  %6941 = extractelement <1024 x i32> %5940, i32 1000
  store i32 %6941, i32* %5822, align 4, !tbaa !400
  %6942 = extractelement <1024 x i32> %5940, i32 1001
  store i32 %6942, i32* %5827, align 4, !tbaa !400
  %6943 = extractelement <1024 x i32> %5940, i32 1002
  store i32 %6943, i32* %5832, align 4, !tbaa !400
  %6944 = extractelement <1024 x i32> %5940, i32 1003
  store i32 %6944, i32* %5837, align 4, !tbaa !400
  %6945 = extractelement <1024 x i32> %5940, i32 1004
  store i32 %6945, i32* %5842, align 4, !tbaa !400
  %6946 = extractelement <1024 x i32> %5940, i32 1005
  store i32 %6946, i32* %5847, align 4, !tbaa !400
  %6947 = extractelement <1024 x i32> %5940, i32 1006
  store i32 %6947, i32* %5852, align 4, !tbaa !400
  %6948 = extractelement <1024 x i32> %5940, i32 1007
  store i32 %6948, i32* %5857, align 4, !tbaa !400
  %6949 = extractelement <1024 x i32> %5940, i32 1008
  store i32 %6949, i32* %5862, align 4, !tbaa !400
  %6950 = extractelement <1024 x i32> %5940, i32 1009
  store i32 %6950, i32* %5867, align 4, !tbaa !400
  %6951 = extractelement <1024 x i32> %5940, i32 1010
  store i32 %6951, i32* %5872, align 4, !tbaa !400
  %6952 = extractelement <1024 x i32> %5940, i32 1011
  store i32 %6952, i32* %5877, align 4, !tbaa !400
  %6953 = extractelement <1024 x i32> %5940, i32 1012
  store i32 %6953, i32* %5882, align 4, !tbaa !400
  %6954 = extractelement <1024 x i32> %5940, i32 1013
  store i32 %6954, i32* %5887, align 4, !tbaa !400
  %6955 = extractelement <1024 x i32> %5940, i32 1014
  store i32 %6955, i32* %5892, align 4, !tbaa !400
  %6956 = extractelement <1024 x i32> %5940, i32 1015
  store i32 %6956, i32* %5897, align 4, !tbaa !400
  %6957 = extractelement <1024 x i32> %5940, i32 1016
  store i32 %6957, i32* %5902, align 4, !tbaa !400
  %6958 = extractelement <1024 x i32> %5940, i32 1017
  store i32 %6958, i32* %5907, align 4, !tbaa !400
  %6959 = extractelement <1024 x i32> %5940, i32 1018
  store i32 %6959, i32* %5912, align 4, !tbaa !400
  %6960 = extractelement <1024 x i32> %5940, i32 1019
  store i32 %6960, i32* %5917, align 4, !tbaa !400
  %6961 = extractelement <1024 x i32> %5940, i32 1020
  store i32 %6961, i32* %5922, align 4, !tbaa !400
  %6962 = extractelement <1024 x i32> %5940, i32 1021
  store i32 %6962, i32* %5927, align 4, !tbaa !400
  %6963 = extractelement <1024 x i32> %5940, i32 1022
  store i32 %6963, i32* %5932, align 4, !tbaa !400
  %6964 = extractelement <1024 x i32> %5940, i32 1023
  store i32 %6964, i32* %5937, align 4, !tbaa !400
  %indvars.iv.next474 = add nuw nsw i64 %indvars.iv473, 1
  %.not214 = icmp eq i64 %indvars.iv.next474, 256
  br i1 %.not214, label %"end for color_hist_intm.s1.r7$y", label %"for color_hist_intm.s1.r7$y"

"end for color_hist_intm.s1.r7$y":                ; preds = %"for color_hist_intm.s1.r7$y"
  %indvars.iv.next476 = add nuw nsw i64 %indvars.iv475, 1
  %6965 = add nuw nsw i32 %color_hist_intm.s1.c.rebased, 1
  %.not215 = icmp eq i64 %indvars.iv.next476, %239
  br i1 %.not215, label %"consume color_hist_intm", label %"for color_hist_intm.s1.c.rebased"

"consume color_hist_intm":                        ; preds = %"end for color_hist_intm.s1.r7$y"
  %t57 = sub i32 %17, %195
  %6966 = icmp sgt i32 %18, 0
  %6967 = sext i32 %231 to i64
  %6968 = bitcast i8* %10 to i32*
  br i1 %6966, label %"for BINS.s0.c.rebased.us.preheader", label %call_destructor.exit306, !prof !396

"for BINS.s0.c.rebased.us.preheader":             ; preds = %"consume color_hist_intm"
  %6969 = zext i32 %18 to i64
  br label %"for BINS.s0.c.rebased.us"

"for BINS.s0.c.rebased.us":                       ; preds = %"for BINS.s0.c.rebased.us.preheader", %"end for BINS.s0.x.rebased.loopexit.us"
  %indvars.iv482 = phi i64 [ 0, %"for BINS.s0.c.rebased.us.preheader" ], [ %indvars.iv.next483, %"end for BINS.s0.x.rebased.loopexit.us" ]
  %BINS.s0.c.rebased.us = phi i32 [ 0, %"for BINS.s0.c.rebased.us.preheader" ], [ %6997, %"end for BINS.s0.x.rebased.loopexit.us" ]
  %6970 = trunc i64 %indvars.iv482 to i32
  %t62.us = mul i32 %22, %6970
  %6971 = mul nsw i32 %BINS.s0.c.rebased.us, %a13
  %t60.us = add nsw i32 %t57, %6971
  %6972 = sext i32 %t62.us to i64
  %6973 = sext i32 %t60.us to i64
  br label %"for BINS.s0.x.rebased.us"

"for BINS.s0.x.rebased.us":                       ; preds = %"for BINS.s0.c.rebased.us", %"consume color_hist.us"
  %indvars.iv479 = phi i64 [ 0, %"for BINS.s0.c.rebased.us" ], [ %indvars.iv.next480, %"consume color_hist.us" ]
  %6974 = add nsw i64 %indvars.iv479, %6973
  br label %"for color_hist.s1.r7$x.us"

"for color_hist.s1.r7$x.us":                      ; preds = %"for color_hist.s1.r7$x.us", %"for BINS.s0.x.rebased.us"
  %indvars.iv477 = phi i64 [ 0, %"for BINS.s0.x.rebased.us" ], [ %indvars.iv.next478.3, %"for color_hist.s1.r7$x.us" ]
  %color_hist187.sroa.126.0.us = phi <16 x i32> [ zeroinitializer, %"for BINS.s0.x.rebased.us" ], [ %color_hist187.sroa.126.4092.vec.insert437.us.3, %"for color_hist.s1.r7$x.us" ]
  %color_hist187.sroa.126.4092.vec.extract439.us = extractelement <16 x i32> %color_hist187.sroa.126.0.us, i32 15
  %6975 = mul nsw i64 %indvars.iv477, %6967
  %6976 = add nsw i64 %6975, %6974
  %6977 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %6976
  %6978 = load i32, i32* %6977, align 4, !tbaa !400
  %6979 = add nsw i32 %6978, %color_hist187.sroa.126.4092.vec.extract439.us
  %indvars.iv.next478 = or i64 %indvars.iv477, 1
  %6980 = mul nsw i64 %indvars.iv.next478, %6967
  %6981 = add nsw i64 %6980, %6974
  %6982 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %6981
  %6983 = load i32, i32* %6982, align 4, !tbaa !400
  %6984 = add nsw i32 %6983, %6979
  %indvars.iv.next478.1 = or i64 %indvars.iv477, 2
  %6985 = mul nsw i64 %indvars.iv.next478.1, %6967
  %6986 = add nsw i64 %6985, %6974
  %6987 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %6986
  %6988 = load i32, i32* %6987, align 4, !tbaa !400
  %6989 = add nsw i32 %6988, %6984
  %indvars.iv.next478.2 = or i64 %indvars.iv477, 3
  %6990 = mul nsw i64 %indvars.iv.next478.2, %6967
  %6991 = add nsw i64 %6990, %6974
  %6992 = getelementptr inbounds i32, i32* %color_hist_intm, i64 %6991
  %6993 = load i32, i32* %6992, align 4, !tbaa !400
  %6994 = add nsw i32 %6993, %6989
  %color_hist187.sroa.126.4092.vec.insert437.us.3 = insertelement <16 x i32> %color_hist187.sroa.126.0.us, i32 %6994, i32 15
  %indvars.iv.next478.3 = add nuw nsw i64 %indvars.iv477, 4
  %.not212.us.3 = icmp eq i64 %indvars.iv.next478.3, 1024
  br i1 %.not212.us.3, label %"consume color_hist.us", label %"for color_hist.s1.r7$x.us"

"consume color_hist.us":                          ; preds = %"for color_hist.s1.r7$x.us"
  %6995 = add nsw i64 %indvars.iv479, %6972
  %6996 = getelementptr inbounds i32, i32* %6968, i64 %6995
  store i32 %6994, i32* %6996, align 4, !tbaa !402
  %indvars.iv.next480 = add nuw nsw i64 %indvars.iv479, 1
  %.not213.us = icmp eq i64 %indvars.iv.next480, %6969
  br i1 %.not213.us, label %"end for BINS.s0.x.rebased.loopexit.us", label %"for BINS.s0.x.rebased.us"

"end for BINS.s0.x.rebased.loopexit.us":          ; preds = %"consume color_hist.us"
  %indvars.iv.next483 = add nuw nsw i64 %indvars.iv482, 1
  %6997 = add nuw nsw i32 %BINS.s0.c.rebased.us, 1
  %.not211.us = icmp eq i64 %indvars.iv.next483, %239
  br i1 %.not211.us, label %call_destructor.exit306, label %"for BINS.s0.c.rebased.us"

call_destructor.exit306:                          ; preds = %"end for BINS.s0.x.rebased.loopexit.us", %"consume color_hist_intm", %"assert succeeded38"
  tail call void @halide_free(i8* null, i8* nonnull %229) #14
  %.pre525 = load i8*, i8** %host.i, align 8, !tbaa !172
  %.pre526 = load i8*, i8** %host.i230, align 8, !tbaa !172
  br label %"assert succeeded45"

"assert succeeded45":                             ; preds = %_halide_buffer_is_bounds_query.exit283, %call_destructor.exit306
  %6998 = phi i8* [ %58, %_halide_buffer_is_bounds_query.exit283 ], [ %.pre526, %call_destructor.exit306 ]
  %6999 = phi i8* [ %55, %_halide_buffer_is_bounds_query.exit283 ], [ %.pre525, %call_destructor.exit306 ]
  %7000 = load i8, i8* %code.i.i, align 2, !tbaa !305
  %conv.i.i309 = zext i8 %7000 to i32
  %7001 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv3.i.i311 = zext i8 %7001 to i32
  %shl.i.i312 = shl nuw nsw i32 %conv3.i.i311, 8
  %or.i.i313 = or i32 %shl.i.i312, %conv.i.i309
  %7002 = load i16, i16* %lanes.i.i, align 2, !tbaa !306
  %conv4.i.i315 = zext i16 %7002 to i32
  %shl5.i.i316 = shl nuw i32 %conv4.i.i315, 16
  %or6.i.i317 = or i32 %or.i.i313, %shl5.i.i316
  %7003 = load i64, i64* %flags.i.i.i, align 8, !tbaa !308
  %7004 = load i32, i32* %dimensions.i, align 4, !tbaa !175
  %7005 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %min.i323 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7005, i64 0, i32 0
  %7006 = load i32, i32* %min.i323, align 4, !tbaa !181
  %extent.i325 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7005, i64 0, i32 1
  %7007 = load i32, i32* %extent.i325, align 4, !tbaa !178
  %stride.i327 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7005, i64 0, i32 2
  %7008 = load i32, i32* %stride.i327, align 4, !tbaa !182
  %min.i329 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7005, i64 1, i32 0
  %7009 = load i32, i32* %min.i329, align 4, !tbaa !181
  %extent.i331 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7005, i64 1, i32 1
  %7010 = load i32, i32* %extent.i331, align 4, !tbaa !178
  %stride.i333 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7005, i64 1, i32 2
  %7011 = load i32, i32* %stride.i333, align 4, !tbaa !182
  %7012 = load i8, i8* %code.i.i231, align 2, !tbaa !305
  %conv.i.i336 = zext i8 %7012 to i32
  %7013 = load i8, i8* %bits.i.i233, align 1, !tbaa !136
  %conv3.i.i338 = zext i8 %7013 to i32
  %shl.i.i339 = shl nuw nsw i32 %conv3.i.i338, 8
  %or.i.i340 = or i32 %shl.i.i339, %conv.i.i336
  %7014 = load i16, i16* %lanes.i.i237, align 2, !tbaa !306
  %conv4.i.i342 = zext i16 %7014 to i32
  %shl5.i.i343 = shl nuw i32 %conv4.i.i342, 16
  %or6.i.i344 = or i32 %or.i.i340, %shl5.i.i343
  %7015 = load i64, i64* %flags.i.i.i241, align 8, !tbaa !308
  %7016 = load i32, i32* %dimensions.i244, align 4, !tbaa !175
  %7017 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i245, align 8, !tbaa !176
  %min.i350 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7017, i64 0, i32 0
  %7018 = load i32, i32* %min.i350, align 4, !tbaa !181
  %extent.i352 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7017, i64 0, i32 1
  %7019 = load i32, i32* %extent.i352, align 4, !tbaa !178
  %stride.i354 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7017, i64 0, i32 2
  %7020 = load i32, i32* %stride.i354, align 4, !tbaa !182
  %min.i356 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7017, i64 1, i32 0
  %7021 = load i32, i32* %min.i356, align 4, !tbaa !181
  %extent.i358 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7017, i64 1, i32 1
  %7022 = load i32, i32* %extent.i358, align 4, !tbaa !178
  %stride.i360 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7017, i64 1, i32 2
  %7023 = load i32, i32* %stride.i360, align 4, !tbaa !182
  %min.i362 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7017, i64 2, i32 0
  %7024 = load i32, i32* %min.i362, align 4, !tbaa !181
  %extent.i364 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7017, i64 2, i32 1
  %7025 = load i32, i32* %extent.i364, align 4, !tbaa !178
  %stride.i366 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7017, i64 2, i32 2
  %7026 = load i32, i32* %stride.i366, align 4, !tbaa !182
  %cmp.i368 = icmp eq i8* %6999, null
  br i1 %cmp.i368, label %_halide_buffer_is_bounds_query.exit372, label %after_bb67

_halide_buffer_is_bounds_query.exit372:           ; preds = %"assert succeeded45"
  %device.i369 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %BINS.buffer, i64 0, i32 0
  %7027 = load i64, i64* %device.i369, align 8, !tbaa !174
  %cmp1.i370 = icmp eq i64 %7027, 0
  br i1 %cmp1.i370, label %_halide_buffer_init.exit398, label %after_bb67

after_bb67:                                       ; preds = %"assert succeeded45", %_halide_buffer_is_bounds_query.exit372, %_halide_buffer_init.exit398
  %7028 = phi i8* [ %6998, %"assert succeeded45" ], [ %6998, %_halide_buffer_is_bounds_query.exit372 ], [ %.pre527, %_halide_buffer_init.exit398 ]
  %cmp.i374 = icmp eq i8* %7028, null
  br i1 %cmp.i374, label %_halide_buffer_is_bounds_query.exit378, label %after_bb70

_halide_buffer_is_bounds_query.exit378:           ; preds = %after_bb67
  %device.i375 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %IMG.buffer, i64 0, i32 0
  %7029 = load i64, i64* %device.i375, align 8, !tbaa !174
  %cmp1.i376 = icmp eq i64 %7029, 0
  br i1 %cmp1.i376, label %then_bb71, label %after_bb70

_halide_buffer_init.exit398:                      ; preds = %_halide_buffer_is_bounds_query.exit372
  %7030 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 0
  store i32 %7006, i32* %7030, align 4
  %7031 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 1
  store i32 %7007, i32* %7031, align 4
  %7032 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 2
  store i32 1, i32* %7032, align 4
  %7033 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 3
  store i32 0, i32* %7033, align 4
  %7034 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 4
  store i32 %7009, i32* %7034, align 4
  %7035 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 5
  store i32 %7010, i32* %7035, align 4
  %7036 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 6
  store i32 %7007, i32* %7036, align 4
  %7037 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 7
  store i32 0, i32* %7037, align 4
  store i8 0, i8* %code.i.i, align 8, !tbaa !387
  %7038 = bitcast %struct.halide_buffer_t* %BINS.buffer to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %7038, i8 0, i64 24, i1 false)
  store i8 32, i8* %bits.i.i, align 1, !tbaa !388
  store i16 1, i16* %lanes.i.i, align 2, !tbaa !389
  store i32 2, i32* %dimensions.i, align 4, !tbaa !175
  %7039 = bitcast %struct.halide_dimension_t* %7005 to i8*
  %7040 = bitcast [8 x i32]* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %7039, i8* nonnull align 4 dereferenceable(16) %7040, i64 16, i1 false) #15, !tbaa.struct !177
  %.pre.i391 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %arrayidx.i392 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 4
  %arrayidx12.i393 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre.i391, i64 1
  %7041 = bitcast %struct.halide_dimension_t* %arrayidx12.i393 to i8*
  %7042 = bitcast i32* %arrayidx.i392 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %7041, i8* nonnull align 4 dereferenceable(16) %7042, i64 16, i1 false) #15, !tbaa.struct !177
  store i64 0, i64* %flags.i.i.i, align 8, !tbaa !308
  %.pre527 = load i8*, i8** %host.i230, align 8, !tbaa !172
  br label %after_bb67

after_bb70:                                       ; preds = %after_bb67, %_halide_buffer_is_bounds_query.exit378, %then_bb71
  %7043 = load i8*, i8** %host.i, align 8, !tbaa !172
  %cmp.i400 = icmp eq i8* %7043, null
  br i1 %cmp.i400, label %land.rhs.i403, label %_halide_buffer_is_bounds_query.exit404

land.rhs.i403:                                    ; preds = %after_bb70
  %device.i401 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %BINS.buffer, i64 0, i32 0
  %7044 = load i64, i64* %device.i401, align 8, !tbaa !174
  %cmp1.i402 = icmp eq i64 %7044, 0
  br label %_halide_buffer_is_bounds_query.exit404

_halide_buffer_is_bounds_query.exit404:           ; preds = %after_bb70, %land.rhs.i403
  %7045 = phi i1 [ false, %after_bb70 ], [ %cmp1.i402, %land.rhs.i403 ]
  %7046 = load i8*, i8** %host.i230, align 8, !tbaa !172
  %cmp.i406 = icmp eq i8* %7046, null
  br i1 %cmp.i406, label %land.rhs.i409, label %_halide_buffer_is_bounds_query.exit410

land.rhs.i409:                                    ; preds = %_halide_buffer_is_bounds_query.exit404
  %device.i407 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %IMG.buffer, i64 0, i32 0
  %7047 = load i64, i64* %device.i407, align 8, !tbaa !174
  %cmp1.i408 = icmp eq i64 %7047, 0
  br label %_halide_buffer_is_bounds_query.exit410

_halide_buffer_is_bounds_query.exit410:           ; preds = %_halide_buffer_is_bounds_query.exit404, %land.rhs.i409
  %7048 = phi i1 [ false, %_halide_buffer_is_bounds_query.exit404 ], [ %cmp1.i408, %land.rhs.i409 ]
  %7049 = or i1 %7045, %7048
  br i1 %7049, label %call_destructor.exit221, label %then_bb74

then_bb71:                                        ; preds = %_halide_buffer_is_bounds_query.exit378
  %7050 = bitcast %struct.halide_dimension_t** %dim.i245 to <4 x i32>**
  %7051 = load <4 x i32>*, <4 x i32>** %7050, align 8, !tbaa !176
  store i8 0, i8* %code.i.i231, align 8, !tbaa !387
  %7052 = bitcast %struct.halide_buffer_t* %IMG.buffer to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %7052, i8 0, i64 24, i1 false)
  store i8 32, i8* %bits.i.i233, align 1, !tbaa !388
  store i16 1, i16* %lanes.i.i237, align 2, !tbaa !389
  store i32 3, i32* %dimensions.i244, align 4, !tbaa !175
  store <4 x i32> <i32 0, i32 1024, i32 1, i32 0>, <4 x i32>* %7051, align 4
  %.pre.i423 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i245, align 8, !tbaa !176
  %.sroa.5511.16..sroa_idx = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre.i423, i64 1, i32 0
  %7053 = bitcast i32* %.sroa.5511.16..sroa_idx to <4 x i32>*
  store <4 x i32> <i32 0, i32 256, i32 1024, i32 0>, <4 x i32>* %7053, align 4
  %.pre.i423.1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i245, align 8, !tbaa !176
  %.sroa.10518.32..sroa_idx = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre.i423.1, i64 2, i32 0
  store i32 %7009, i32* %.sroa.10518.32..sroa_idx, align 4, !tbaa.struct !177
  %.sroa.12519.32..sroa_idx520 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre.i423.1, i64 2, i32 1
  store i32 %7010, i32* %.sroa.12519.32..sroa_idx520, align 4, !tbaa.struct !390
  %.sroa.13521.32..sroa_idx522 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre.i423.1, i64 2, i32 2
  store i32 262144, i32* %.sroa.13521.32..sroa_idx522, align 4, !tbaa.struct !391
  %.sroa.14523.32..sroa_idx524 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre.i423.1, i64 2, i32 3
  store i32 0, i32* %.sroa.14523.32..sroa_idx524, align 4, !tbaa.struct !392
  store i64 0, i64* %flags.i.i.i241, align 8, !tbaa !308
  br label %after_bb70

then_bb74:                                        ; preds = %_halide_buffer_is_bounds_query.exit410
  %7054 = icmp ne i32 %or6.i.i317, 73728
  %7055 = zext i1 %7054 to i64
  %.not189 = icmp eq i32 %7004, 2
  %.not190 = icmp eq i32 %or6.i.i344, 73728
  %7056 = select i1 %.not190, i64 0, i64 4
  %.not191 = icmp eq i32 %7016, 3
  %7057 = select i1 %.not191, i64 0, i64 8
  %7058 = lshr i32 %7007, 27
  %7059 = and i32 %7058, 16
  %7060 = zext i32 %7059 to i64
  %7061 = lshr i32 %7010, 26
  %7062 = and i32 %7061, 32
  %7063 = zext i32 %7062 to i64
  %7064 = icmp sgt i32 %7018, 0
  %7065 = add nsw i32 %7019, %7018
  %7066 = icmp slt i32 %7065, 1024
  %7067 = or i1 %7064, %7066
  %7068 = select i1 %7067, i64 64, i64 0
  %7069 = lshr i32 %7019, 24
  %7070 = and i32 %7069, 128
  %7071 = zext i32 %7070 to i64
  %7072 = icmp sgt i32 %7021, 0
  %7073 = add nsw i32 %7022, %7021
  %7074 = icmp slt i32 %7073, 256
  %7075 = or i1 %7072, %7074
  %7076 = select i1 %7075, i64 256, i64 0
  %7077 = lshr i32 %7022, 22
  %7078 = and i32 %7077, 512
  %7079 = zext i32 %7078 to i64
  %7080 = icmp slt i32 %7009, %7024
  %7081 = add nsw i32 %7010, %7009
  %7082 = add nsw i32 %7025, %7024
  %7083 = icmp sgt i32 %7081, %7082
  %7084 = or i1 %7080, %7083
  %7085 = select i1 %7084, i64 1024, i64 0
  %7086 = lshr i32 %7025, 20
  %7087 = and i32 %7086, 2048
  %7088 = zext i32 %7087 to i64
  %.not192 = icmp eq i32 %7008, 1
  %7089 = select i1 %.not192, i64 0, i64 4096
  %.not193 = icmp eq i32 %7020, 1
  %7090 = select i1 %.not193, i64 0, i64 8192
  %7091 = select i1 %.not189, i64 -9223372036854775808, i64 -9223372036854775806
  %7092 = or i64 %7091, %7055
  %7093 = or i64 %7092, %7060
  %7094 = or i64 %7093, %7089
  %7095 = or i64 %7094, %7063
  %7096 = or i64 %7095, %7057
  %7097 = or i64 %7096, %7056
  %7098 = or i64 %7097, %7071
  %7099 = or i64 %7098, %7090
  %7100 = or i64 %7099, %7068
  %7101 = or i64 %7100, %7079
  %7102 = or i64 %7101, %7076
  %7103 = or i64 %7102, %7088
  %7104 = or i64 %7103, %7085
  %7105 = tail call i64 @llvm.cttz.i64(i64 %7104, i1 true), !range !393
  %7106 = trunc i64 %7105 to i32
  switch i32 %7106, label %no_errors_bb76 [
    i32 0, label %assert_failed77
    i32 1, label %assert_failed78
    i32 2, label %assert_failed79
    i32 3, label %assert_failed80
    i32 4, label %assert_failed81
    i32 5, label %assert_failed82
    i32 6, label %assert_failed83
    i32 7, label %assert_failed84
    i32 8, label %assert_failed85
    i32 9, label %assert_failed86
    i32 10, label %assert_failed87
    i32 11, label %assert_failed88
    i32 12, label %assert_failed89
    i32 13, label %assert_failed90
  ], !prof !394

no_errors_bb76:                                   ; preds = %then_bb74
  %7107 = sext i32 %7010 to i64
  %7108 = sext i32 %7007 to i64
  %BINS.total_extent.191 = mul nsw i64 %7107, %7108
  %7109 = sext i32 %7022 to i64
  %7110 = sext i32 %7019 to i64
  %IMG.total_extent.192 = mul nsw i64 %7109, %7110
  %7111 = sext i32 %7025 to i64
  %IMG.total_extent.293 = mul nsw i64 %IMG.total_extent.192, %7111
  %BINS.extent.050.lobit = lshr i32 %7007, 31
  %7112 = zext i32 %BINS.extent.050.lobit to i64
  %7113 = sext i32 %7011 to i64
  %x6 = mul nsw i64 %7113, %7107
  %7114 = tail call i64 @llvm.abs.i64(i64 %x6, i1 true)
  %7115 = icmp ugt i64 %7114, 2147483647
  %7116 = select i1 %7115, i64 2, i64 0
  %7117 = icmp sgt i64 %BINS.total_extent.191, 2147483647
  %7118 = select i1 %7117, i64 4, i64 0
  %7119 = lshr i32 %7019, 28
  %7120 = and i32 %7119, 8
  %7121 = zext i32 %7120 to i64
  %7122 = sext i32 %7023 to i64
  %x7 = mul nsw i64 %7122, %7109
  %7123 = tail call i64 @llvm.abs.i64(i64 %x7, i1 true)
  %7124 = icmp ugt i64 %7123, 2147483647
  %7125 = select i1 %7124, i64 16, i64 0
  %7126 = icmp sgt i64 %IMG.total_extent.192, 2147483647
  %7127 = select i1 %7126, i64 32, i64 0
  %7128 = sext i32 %7026 to i64
  %x8 = mul nsw i64 %7128, %7111
  %7129 = tail call i64 @llvm.abs.i64(i64 %x8, i1 true)
  %7130 = icmp ugt i64 %7129, 2147483647
  %7131 = select i1 %7130, i64 64, i64 0
  %7132 = icmp sgt i64 %IMG.total_extent.293, 2147483647
  %7133 = select i1 %7132, i64 128, i64 0
  %and.i.i.i319 = shl i64 %7003, 7
  %7134 = and i64 %and.i.i.i319, 256
  %and.i.i.i346 = shl i64 %7015, 8
  %7135 = and i64 %and.i.i.i346, 512
  %7136 = icmp eq i8* %6998, null
  %7137 = select i1 %7136, i64 2048, i64 0
  %7138 = select i1 %cmp.i368, i64 -9223372036854774784, i64 -9223372036854775808
  %7139 = or i64 %7138, %7134
  %7140 = or i64 %7139, %7112
  %7141 = or i64 %7140, %7118
  %7142 = or i64 %7141, %7137
  %7143 = or i64 %7142, %7116
  %7144 = or i64 %7143, %7135
  %7145 = or i64 %7144, %7121
  %7146 = or i64 %7145, %7127
  %7147 = or i64 %7146, %7125
  %7148 = or i64 %7147, %7133
  %7149 = or i64 %7148, %7131
  %7150 = tail call i64 @llvm.cttz.i64(i64 %7149, i1 true), !range !393
  %7151 = trunc i64 %7150 to i32
  switch i32 %7151, label %no_errors_bb94 [
    i32 0, label %assert_failed95
    i32 1, label %assert_failed96
    i32 2, label %assert_failed97
    i32 3, label %assert_failed98
    i32 4, label %assert_failed99
    i32 5, label %assert_failed100
    i32 6, label %assert_failed101
    i32 7, label %assert_failed102
    i32 8, label %assert_failed103
    i32 9, label %assert_failed104
    i32 10, label %assert_failed105
    i32 11, label %assert_failed106
  ], !prof !395

assert_failed77:                                  ; preds = %then_bb74
  %7152 = tail call i32 @halide_error_bad_type(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.203, i64 0, i64 0), i32 %or6.i.i317, i32 73728) #15
  tail call void @pimShowStats()
  ret i32 %7152

assert_failed78:                                  ; preds = %then_bb74
  %7153 = tail call i32 @halide_error_bad_dimensions(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.203, i64 0, i64 0), i32 %7004, i32 2) #15
  tail call void @pimShowStats()
  ret i32 %7153

assert_failed79:                                  ; preds = %then_bb74
  %7154 = tail call i32 @halide_error_bad_type(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i64 0, i64 0), i32 %or6.i.i344, i32 73728) #15
  tail call void @pimShowStats()
  ret i32 %7154

assert_failed80:                                  ; preds = %then_bb74
  %7155 = tail call i32 @halide_error_bad_dimensions(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i64 0, i64 0), i32 %7016, i32 3) #15
  tail call void @pimShowStats()
  ret i32 %7155

assert_failed81:                                  ; preds = %then_bb74
  %7156 = tail call i32 @halide_error_buffer_extents_negative(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.203, i64 0, i64 0), i32 0, i32 %7007) #15
  tail call void @pimShowStats()
  ret i32 %7156

assert_failed82:                                  ; preds = %then_bb74
  %7157 = tail call i32 @halide_error_buffer_extents_negative(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.203, i64 0, i64 0), i32 1, i32 %7010) #15
  tail call void @pimShowStats()
  ret i32 %7157

assert_failed83:                                  ; preds = %then_bb74
  %7158 = add nsw i32 %7065, -1
  %7159 = tail call i32 @halide_error_access_out_of_bounds(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i64 0, i64 0), i32 0, i32 0, i32 1023, i32 %7018, i32 %7158) #15
  tail call void @pimShowStats()
  ret i32 %7159

assert_failed84:                                  ; preds = %then_bb74
  %7160 = tail call i32 @halide_error_buffer_extents_negative(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i64 0, i64 0), i32 0, i32 %7019) #15
  tail call void @pimShowStats()
  ret i32 %7160

assert_failed85:                                  ; preds = %then_bb74
  %7161 = add nsw i32 %7073, -1
  %7162 = tail call i32 @halide_error_access_out_of_bounds(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i64 0, i64 0), i32 1, i32 0, i32 255, i32 %7021, i32 %7161) #15
  tail call void @pimShowStats()
  ret i32 %7162

assert_failed86:                                  ; preds = %then_bb74
  %7163 = tail call i32 @halide_error_buffer_extents_negative(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i64 0, i64 0), i32 1, i32 %7022) #15
  tail call void @pimShowStats()
  ret i32 %7163

assert_failed87:                                  ; preds = %then_bb74
  %7164 = add nsw i32 %7081, -1
  %7165 = add nsw i32 %7082, -1
  %7166 = tail call i32 @halide_error_access_out_of_bounds(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i64 0, i64 0), i32 2, i32 %7009, i32 %7164, i32 %7024, i32 %7165) #15
  tail call void @pimShowStats()
  ret i32 %7166

assert_failed88:                                  ; preds = %then_bb74
  %7167 = tail call i32 @halide_error_buffer_extents_negative(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i64 0, i64 0), i32 2, i32 %7025) #15
  tail call void @pimShowStats()
  ret i32 %7167

assert_failed89:                                  ; preds = %then_bb74
  %7168 = tail call i32 @halide_error_constraint_violated(i8* null, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str.205, i64 0, i64 0), i32 %7008, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.206, i64 0, i64 0), i32 1) #15
  tail call void @pimShowStats()
  ret i32 %7168

assert_failed90:                                  ; preds = %then_bb74
  %7169 = tail call i32 @halide_error_constraint_violated(i8* null, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.207, i64 0, i64 0), i32 %7020, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.206, i64 0, i64 0), i32 1) #15
  tail call void @pimShowStats()
  ret i32 %7169

no_errors_bb94:                                   ; preds = %no_errors_bb76
  %a26 = add nsw i32 %7007, %7006
  %7170 = icmp sgt i32 %a26, 256
  %7171 = select i1 %7170, i32 %a26, i32 256
  %a25 = add nsw i32 %7171, -1024
  %7172 = icmp sgt i32 %7006, %a25
  %a47 = select i1 %7172, i32 %a25, i32 %7006
  %7173 = icmp slt i32 %7006, 0
  %t73 = select i1 %7173, i32 %7006, i32 0
  %7174 = sub nsw i32 %7171, %t73
  %7175 = add nsw i32 %7174, -1
  %7176 = and i32 %7175, -1024
  %a31 = add nsw i32 %7176, %t73
  %7177 = icmp sgt i32 %a25, %a31
  %a30 = select i1 %7177, i32 %a31, i32 %a25
  %7178 = icmp sgt i32 %a30, -768
  %7179 = select i1 %7178, i32 %a30, i32 -768
  %b31 = add nsw i32 %7179, 1024
  %7180 = icmp sgt i32 %a26, %b31
  %7181 = select i1 %7180, i32 %a26, i32 %b31
  %7182 = icmp slt i32 %a47, 0
  %7183 = select i1 %7182, i32 %a47, i32 0
  %a38 = sub i32 %7181, %7183
  %7184 = icmp sgt i32 %a38, 0
  %7185 = select i1 %7184, i32 %a38, i32 0
  %t75 = zext i32 %7185 to i64
  %7186 = icmp sgt i32 %7010, 0
  %7187 = select i1 %7186, i32 %7010, i32 0
  %t76 = zext i32 %7187 to i64
  %7188 = shl nuw nsw i64 %t75, 2
  %7189 = and i64 %7188, 4294967292
  %7190 = mul nuw nsw i64 %7189, %t76
  %7191 = lshr i64 %7190, 32
  %7192 = lshr i64 %t75, 30
  %7193 = mul nuw nsw i64 %7192, %t76
  %t78 = add nuw nsw i64 %7191, %7193
  %t77 = shl nuw nsw i64 %t76, 12
  %7194 = mul i64 %t77, %t75
  %7195 = icmp ult i64 %7194, 2147483648
  %7196 = lshr i64 %t78, 32
  %7197 = lshr i64 %t78, 22
  %7198 = or i64 %7196, %7197
  %7199 = icmp eq i64 %7198, 0
  %7200 = and i1 %7195, %7199
  br i1 %7200, label %"assert succeeded108", label %"assert failed107", !prof !396

assert_failed95:                                  ; preds = %no_errors_bb76
  %7201 = tail call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.200, i64 0, i64 0), i64 %7108, i64 2147483647) #15
  tail call void @pimShowStats()
  ret i32 %7201

assert_failed96:                                  ; preds = %no_errors_bb76
  %7202 = tail call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.200, i64 0, i64 0), i64 %7114, i64 2147483647) #15
  tail call void @pimShowStats()
  ret i32 %7202

assert_failed97:                                  ; preds = %no_errors_bb76
  %7203 = tail call i32 @halide_error_buffer_extents_too_large(i8* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.200, i64 0, i64 0), i64 %BINS.total_extent.191, i64 2147483647) #15
  tail call void @pimShowStats()
  ret i32 %7203

assert_failed98:                                  ; preds = %no_errors_bb76
  %7204 = tail call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0), i64 %7110, i64 2147483647) #15
  tail call void @pimShowStats()
  ret i32 %7204

assert_failed99:                                  ; preds = %no_errors_bb76
  %7205 = tail call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0), i64 %7123, i64 2147483647) #15
  tail call void @pimShowStats()
  ret i32 %7205

assert_failed100:                                 ; preds = %no_errors_bb76
  %7206 = tail call i32 @halide_error_buffer_extents_too_large(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0), i64 %IMG.total_extent.192, i64 2147483647) #15
  tail call void @pimShowStats()
  ret i32 %7206

assert_failed101:                                 ; preds = %no_errors_bb76
  %7207 = tail call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0), i64 %7129, i64 2147483647) #15
  tail call void @pimShowStats()
  ret i32 %7207

assert_failed102:                                 ; preds = %no_errors_bb76
  %7208 = tail call i32 @halide_error_buffer_extents_too_large(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0), i64 %IMG.total_extent.293, i64 2147483647) #15
  tail call void @pimShowStats()
  ret i32 %7208

assert_failed103:                                 ; preds = %no_errors_bb76
  %7209 = tail call i32 @halide_error_device_dirty_with_no_device_support(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.203, i64 0, i64 0)) #15
  tail call void @pimShowStats()
  ret i32 %7209

assert_failed104:                                 ; preds = %no_errors_bb76
  %7210 = tail call i32 @halide_error_device_dirty_with_no_device_support(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i64 0, i64 0)) #15
  tail call void @pimShowStats()
  ret i32 %7210

assert_failed105:                                 ; preds = %no_errors_bb76
  %7211 = tail call i32 @halide_error_host_is_null(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.203, i64 0, i64 0)) #15
  tail call void @pimShowStats()
  ret i32 %7211

assert_failed106:                                 ; preds = %no_errors_bb76
  %7212 = tail call i32 @halide_error_host_is_null(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i64 0, i64 0)) #15
  tail call void @pimShowStats()
  ret i32 %7212

"assert failed107":                               ; preds = %no_errors_bb94
  %7213 = shl nuw nsw i64 %t76, 10
  %7214 = mul i64 %7213, %7188
  %7215 = tail call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str.208, i64 0, i64 0), i64 %7214, i64 2147483647) #15
  br label %call_destructor.exit221

"assert succeeded108":                            ; preds = %no_errors_bb94
  %7216 = or i64 %7194, 12
  %7217 = tail call i8* @halide_malloc(i8* null, i64 %7216)
  %color_hist_intm111 = bitcast i8* %7217 to i32*
  %.not194 = icmp eq i8* %7217, null
  br i1 %.not194, label %"assert failed109", label %"assert succeeded110", !prof !386

"assert failed109":                               ; preds = %"assert succeeded108"
  %7218 = tail call i32 @halide_error_out_of_memory(i8* null) #15
  br label %call_destructor.exit221

"assert succeeded110":                            ; preds = %"assert succeeded108"
  %b47 = add nsw i32 %7174, 1023
  %t37118 = ashr i32 %b47, 10
  %t38119 = sub i32 %7171, %7183
  %7219 = mul i32 %a38, %7010
  %t48124 = ashr i32 %7174, 10
  %7220 = icmp sgt i32 %7174, 1023
  %7221 = icmp sgt i32 %t37118, %t48124
  br i1 %7186, label %"for color_hist_intm.s0.u120.us.preheader", label %call_destructor.exit433, !prof !396

"for color_hist_intm.s0.u120.us.preheader":       ; preds = %"assert succeeded110"
  %7222 = sext i32 %t73 to i64
  %7223 = add nsw i32 %t48124, -1
  %7224 = zext i32 %7223 to i64
  %7225 = shl nuw nsw i64 %7224, 12
  %7226 = add nuw nsw i64 %7225, 4096
  %7227 = zext i32 %7010 to i64
  %7228 = getelementptr inbounds i8, i8* %7217, i64 -4096
  %7229 = bitcast i8* %7228 to i32*
  %xtraiter531 = and i64 %7227, 1
  %7230 = icmp eq i32 %7010, 1
  %unroll_iter533 = and i64 %7227, 4294967294
  %lcmp.mod532.not = icmp eq i64 %xtraiter531, 0
  br label %"for color_hist_intm.s0.u120.us"

"for color_hist_intm.s0.u120.us":                 ; preds = %"for color_hist_intm.s0.u120.us.preheader", %"end for color_hist_intm.s0.c.rebased129.us"
  %color_hist_intm.s0.u122.us = phi i32 [ %7246, %"end for color_hist_intm.s0.c.rebased129.us" ], [ 0, %"for color_hist_intm.s0.u120.us.preheader" ]
  %7231 = mul i32 %7219, %color_hist_intm.s0.u122.us
  %7232 = sub i32 %7231, %7183
  %t46127.us = add nsw i32 %t38119, %7231
  br i1 %7230, label %"end for color_hist_intm.s0.c.rebased129.us.unr-lcssa", label %"for color_hist_intm.s0.c.rebased128.us"

"for color_hist_intm.s0.c.rebased128.us":         ; preds = %"for color_hist_intm.s0.u120.us", %"end for color_hist_intm.s0.i.i138.us.1"
  %indvars.iv488 = phi i64 [ %indvars.iv.next489.1, %"end for color_hist_intm.s0.i.i138.us.1" ], [ 0, %"for color_hist_intm.s0.u120.us" ]
  %color_hist_intm.s0.c.rebased130.us = phi i32 [ %13730, %"end for color_hist_intm.s0.i.i138.us.1" ], [ 0, %"for color_hist_intm.s0.u120.us" ]
  %niter534 = phi i64 [ %niter534.nsub.1, %"end for color_hist_intm.s0.i.i138.us.1" ], [ %unroll_iter533, %"for color_hist_intm.s0.u120.us" ]
  %7233 = mul nsw i32 %color_hist_intm.s0.c.rebased130.us, %a38
  br i1 %7220, label %"for color_hist_intm.s0.i.i132.preheader.us", label %"end for color_hist_intm.s0.i.i133.us", !prof !396

"end for color_hist_intm.s0.i.i133.us":           ; preds = %"for color_hist_intm.s0.i.i132.preheader.us", %"for color_hist_intm.s0.c.rebased128.us"
  br i1 %7221, label %"for color_hist_intm.s0.i.i137.preheader.us", label %"end for color_hist_intm.s0.i.i138.us", !prof !396

"end for color_hist_intm.s0.i.i138.us":           ; preds = %"for color_hist_intm.s0.i.i137.preheader.us", %"end for color_hist_intm.s0.i.i133.us"
  %7234 = or i32 %color_hist_intm.s0.c.rebased130.us, 1
  %7235 = mul nsw i32 %7234, %a38
  br i1 %7220, label %"for color_hist_intm.s0.i.i132.preheader.us.1", label %"end for color_hist_intm.s0.i.i133.us.1", !prof !396

"end for color_hist_intm.s0.c.rebased129.us.unr-lcssa": ; preds = %"end for color_hist_intm.s0.i.i138.us.1", %"for color_hist_intm.s0.u120.us"
  %indvars.iv488.unr = phi i64 [ 0, %"for color_hist_intm.s0.u120.us" ], [ %indvars.iv.next489.1, %"end for color_hist_intm.s0.i.i138.us.1" ]
  %color_hist_intm.s0.c.rebased130.us.unr = phi i32 [ 0, %"for color_hist_intm.s0.u120.us" ], [ %13730, %"end for color_hist_intm.s0.i.i138.us.1" ]
  br i1 %lcmp.mod532.not, label %"end for color_hist_intm.s0.c.rebased129.us", label %"for color_hist_intm.s0.c.rebased128.us.epil"

"for color_hist_intm.s0.c.rebased128.us.epil":    ; preds = %"end for color_hist_intm.s0.c.rebased129.us.unr-lcssa"
  %7236 = mul nsw i32 %color_hist_intm.s0.c.rebased130.us.unr, %a38
  br i1 %7220, label %"for color_hist_intm.s0.i.i132.preheader.us.epil", label %"end for color_hist_intm.s0.i.i133.us.epil", !prof !396

"for color_hist_intm.s0.i.i132.preheader.us.epil": ; preds = %"for color_hist_intm.s0.c.rebased128.us.epil"
  %7237 = trunc i64 %indvars.iv488.unr to i32
  %7238 = mul i32 %a38, %7237
  %7239 = add i32 %7232, %7238
  %7240 = sext i32 %7239 to i64
  %7241 = add nsw i64 %7222, %7240
  %7242 = shl nsw i64 %7241, 2
  %scevgep484.epil = getelementptr i8, i8* %7217, i64 %7242
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(1) %scevgep484.epil, i8 0, i64 %7226, i1 false)
  br label %"end for color_hist_intm.s0.i.i133.us.epil"

"end for color_hist_intm.s0.i.i133.us.epil":      ; preds = %"for color_hist_intm.s0.i.i132.preheader.us.epil", %"for color_hist_intm.s0.c.rebased128.us.epil"
  br i1 %7221, label %"for color_hist_intm.s0.i.i137.preheader.us.epil", label %"end for color_hist_intm.s0.c.rebased129.us", !prof !396

"for color_hist_intm.s0.i.i137.preheader.us.epil": ; preds = %"end for color_hist_intm.s0.i.i133.us.epil"
  %t50136.us.epil = add nsw i32 %t46127.us, %7236
  %7243 = sext i32 %t50136.us.epil to i64
  %7244 = getelementptr inbounds i32, i32* %7229, i64 %7243
  %7245 = bitcast i32* %7244 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(4096) %7245, i8 0, i64 4096, i1 false)
  br label %"end for color_hist_intm.s0.c.rebased129.us"

"end for color_hist_intm.s0.c.rebased129.us":     ; preds = %"for color_hist_intm.s0.i.i137.preheader.us.epil", %"end for color_hist_intm.s0.i.i133.us.epil", %"end for color_hist_intm.s0.c.rebased129.us.unr-lcssa"
  %7246 = add nuw nsw i32 %color_hist_intm.s0.u122.us, 1
  %.not195.us = icmp eq i32 %7246, 1024
  br i1 %.not195.us, label %"end for color_hist_intm.s0.u121", label %"for color_hist_intm.s0.u120.us"

"for color_hist_intm.s0.i.i137.preheader.us":     ; preds = %"end for color_hist_intm.s0.i.i133.us"
  %t50136.us = add nsw i32 %t46127.us, %7233
  %7247 = sext i32 %t50136.us to i64
  %7248 = getelementptr inbounds i32, i32* %7229, i64 %7247
  %7249 = bitcast i32* %7248 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(4096) %7249, i8 0, i64 4096, i1 false)
  br label %"end for color_hist_intm.s0.i.i138.us"

"for color_hist_intm.s0.i.i132.preheader.us":     ; preds = %"for color_hist_intm.s0.c.rebased128.us"
  %7250 = trunc i64 %indvars.iv488 to i32
  %7251 = mul i32 %a38, %7250
  %7252 = add i32 %7232, %7251
  %7253 = sext i32 %7252 to i64
  %7254 = add nsw i64 %7222, %7253
  %7255 = shl nsw i64 %7254, 2
  %scevgep484 = getelementptr i8, i8* %7217, i64 %7255
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(1) %scevgep484, i8 0, i64 %7226, i1 false)
  br label %"end for color_hist_intm.s0.i.i133.us"

"end for color_hist_intm.s0.u121":                ; preds = %"end for color_hist_intm.s0.c.rebased129.us"
  %7256 = mul nsw i32 %7023, %7021
  %7257 = sub i32 %7009, %7024
  %7258 = add i32 %7256, %7018
  %7259 = insertelement <1024 x i32> undef, i32 %7219, i32 0
  %7260 = shufflevector <1024 x i32> %7259, <1024 x i32> undef, <1024 x i32> zeroinitializer
  %7261 = mul nsw <1024 x i32> %7260, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255, i32 256, i32 257, i32 258, i32 259, i32 260, i32 261, i32 262, i32 263, i32 264, i32 265, i32 266, i32 267, i32 268, i32 269, i32 270, i32 271, i32 272, i32 273, i32 274, i32 275, i32 276, i32 277, i32 278, i32 279, i32 280, i32 281, i32 282, i32 283, i32 284, i32 285, i32 286, i32 287, i32 288, i32 289, i32 290, i32 291, i32 292, i32 293, i32 294, i32 295, i32 296, i32 297, i32 298, i32 299, i32 300, i32 301, i32 302, i32 303, i32 304, i32 305, i32 306, i32 307, i32 308, i32 309, i32 310, i32 311, i32 312, i32 313, i32 314, i32 315, i32 316, i32 317, i32 318, i32 319, i32 320, i32 321, i32 322, i32 323, i32 324, i32 325, i32 326, i32 327, i32 328, i32 329, i32 330, i32 331, i32 332, i32 333, i32 334, i32 335, i32 336, i32 337, i32 338, i32 339, i32 340, i32 341, i32 342, i32 343, i32 344, i32 345, i32 346, i32 347, i32 348, i32 349, i32 350, i32 351, i32 352, i32 353, i32 354, i32 355, i32 356, i32 357, i32 358, i32 359, i32 360, i32 361, i32 362, i32 363, i32 364, i32 365, i32 366, i32 367, i32 368, i32 369, i32 370, i32 371, i32 372, i32 373, i32 374, i32 375, i32 376, i32 377, i32 378, i32 379, i32 380, i32 381, i32 382, i32 383, i32 384, i32 385, i32 386, i32 387, i32 388, i32 389, i32 390, i32 391, i32 392, i32 393, i32 394, i32 395, i32 396, i32 397, i32 398, i32 399, i32 400, i32 401, i32 402, i32 403, i32 404, i32 405, i32 406, i32 407, i32 408, i32 409, i32 410, i32 411, i32 412, i32 413, i32 414, i32 415, i32 416, i32 417, i32 418, i32 419, i32 420, i32 421, i32 422, i32 423, i32 424, i32 425, i32 426, i32 427, i32 428, i32 429, i32 430, i32 431, i32 432, i32 433, i32 434, i32 435, i32 436, i32 437, i32 438, i32 439, i32 440, i32 441, i32 442, i32 443, i32 444, i32 445, i32 446, i32 447, i32 448, i32 449, i32 450, i32 451, i32 452, i32 453, i32 454, i32 455, i32 456, i32 457, i32 458, i32 459, i32 460, i32 461, i32 462, i32 463, i32 464, i32 465, i32 466, i32 467, i32 468, i32 469, i32 470, i32 471, i32 472, i32 473, i32 474, i32 475, i32 476, i32 477, i32 478, i32 479, i32 480, i32 481, i32 482, i32 483, i32 484, i32 485, i32 486, i32 487, i32 488, i32 489, i32 490, i32 491, i32 492, i32 493, i32 494, i32 495, i32 496, i32 497, i32 498, i32 499, i32 500, i32 501, i32 502, i32 503, i32 504, i32 505, i32 506, i32 507, i32 508, i32 509, i32 510, i32 511, i32 512, i32 513, i32 514, i32 515, i32 516, i32 517, i32 518, i32 519, i32 520, i32 521, i32 522, i32 523, i32 524, i32 525, i32 526, i32 527, i32 528, i32 529, i32 530, i32 531, i32 532, i32 533, i32 534, i32 535, i32 536, i32 537, i32 538, i32 539, i32 540, i32 541, i32 542, i32 543, i32 544, i32 545, i32 546, i32 547, i32 548, i32 549, i32 550, i32 551, i32 552, i32 553, i32 554, i32 555, i32 556, i32 557, i32 558, i32 559, i32 560, i32 561, i32 562, i32 563, i32 564, i32 565, i32 566, i32 567, i32 568, i32 569, i32 570, i32 571, i32 572, i32 573, i32 574, i32 575, i32 576, i32 577, i32 578, i32 579, i32 580, i32 581, i32 582, i32 583, i32 584, i32 585, i32 586, i32 587, i32 588, i32 589, i32 590, i32 591, i32 592, i32 593, i32 594, i32 595, i32 596, i32 597, i32 598, i32 599, i32 600, i32 601, i32 602, i32 603, i32 604, i32 605, i32 606, i32 607, i32 608, i32 609, i32 610, i32 611, i32 612, i32 613, i32 614, i32 615, i32 616, i32 617, i32 618, i32 619, i32 620, i32 621, i32 622, i32 623, i32 624, i32 625, i32 626, i32 627, i32 628, i32 629, i32 630, i32 631, i32 632, i32 633, i32 634, i32 635, i32 636, i32 637, i32 638, i32 639, i32 640, i32 641, i32 642, i32 643, i32 644, i32 645, i32 646, i32 647, i32 648, i32 649, i32 650, i32 651, i32 652, i32 653, i32 654, i32 655, i32 656, i32 657, i32 658, i32 659, i32 660, i32 661, i32 662, i32 663, i32 664, i32 665, i32 666, i32 667, i32 668, i32 669, i32 670, i32 671, i32 672, i32 673, i32 674, i32 675, i32 676, i32 677, i32 678, i32 679, i32 680, i32 681, i32 682, i32 683, i32 684, i32 685, i32 686, i32 687, i32 688, i32 689, i32 690, i32 691, i32 692, i32 693, i32 694, i32 695, i32 696, i32 697, i32 698, i32 699, i32 700, i32 701, i32 702, i32 703, i32 704, i32 705, i32 706, i32 707, i32 708, i32 709, i32 710, i32 711, i32 712, i32 713, i32 714, i32 715, i32 716, i32 717, i32 718, i32 719, i32 720, i32 721, i32 722, i32 723, i32 724, i32 725, i32 726, i32 727, i32 728, i32 729, i32 730, i32 731, i32 732, i32 733, i32 734, i32 735, i32 736, i32 737, i32 738, i32 739, i32 740, i32 741, i32 742, i32 743, i32 744, i32 745, i32 746, i32 747, i32 748, i32 749, i32 750, i32 751, i32 752, i32 753, i32 754, i32 755, i32 756, i32 757, i32 758, i32 759, i32 760, i32 761, i32 762, i32 763, i32 764, i32 765, i32 766, i32 767, i32 768, i32 769, i32 770, i32 771, i32 772, i32 773, i32 774, i32 775, i32 776, i32 777, i32 778, i32 779, i32 780, i32 781, i32 782, i32 783, i32 784, i32 785, i32 786, i32 787, i32 788, i32 789, i32 790, i32 791, i32 792, i32 793, i32 794, i32 795, i32 796, i32 797, i32 798, i32 799, i32 800, i32 801, i32 802, i32 803, i32 804, i32 805, i32 806, i32 807, i32 808, i32 809, i32 810, i32 811, i32 812, i32 813, i32 814, i32 815, i32 816, i32 817, i32 818, i32 819, i32 820, i32 821, i32 822, i32 823, i32 824, i32 825, i32 826, i32 827, i32 828, i32 829, i32 830, i32 831, i32 832, i32 833, i32 834, i32 835, i32 836, i32 837, i32 838, i32 839, i32 840, i32 841, i32 842, i32 843, i32 844, i32 845, i32 846, i32 847, i32 848, i32 849, i32 850, i32 851, i32 852, i32 853, i32 854, i32 855, i32 856, i32 857, i32 858, i32 859, i32 860, i32 861, i32 862, i32 863, i32 864, i32 865, i32 866, i32 867, i32 868, i32 869, i32 870, i32 871, i32 872, i32 873, i32 874, i32 875, i32 876, i32 877, i32 878, i32 879, i32 880, i32 881, i32 882, i32 883, i32 884, i32 885, i32 886, i32 887, i32 888, i32 889, i32 890, i32 891, i32 892, i32 893, i32 894, i32 895, i32 896, i32 897, i32 898, i32 899, i32 900, i32 901, i32 902, i32 903, i32 904, i32 905, i32 906, i32 907, i32 908, i32 909, i32 910, i32 911, i32 912, i32 913, i32 914, i32 915, i32 916, i32 917, i32 918, i32 919, i32 920, i32 921, i32 922, i32 923, i32 924, i32 925, i32 926, i32 927, i32 928, i32 929, i32 930, i32 931, i32 932, i32 933, i32 934, i32 935, i32 936, i32 937, i32 938, i32 939, i32 940, i32 941, i32 942, i32 943, i32 944, i32 945, i32 946, i32 947, i32 948, i32 949, i32 950, i32 951, i32 952, i32 953, i32 954, i32 955, i32 956, i32 957, i32 958, i32 959, i32 960, i32 961, i32 962, i32 963, i32 964, i32 965, i32 966, i32 967, i32 968, i32 969, i32 970, i32 971, i32 972, i32 973, i32 974, i32 975, i32 976, i32 977, i32 978, i32 979, i32 980, i32 981, i32 982, i32 983, i32 984, i32 985, i32 986, i32 987, i32 988, i32 989, i32 990, i32 991, i32 992, i32 993, i32 994, i32 995, i32 996, i32 997, i32 998, i32 999, i32 1000, i32 1001, i32 1002, i32 1003, i32 1004, i32 1005, i32 1006, i32 1007, i32 1008, i32 1009, i32 1010, i32 1011, i32 1012, i32 1013, i32 1014, i32 1015, i32 1016, i32 1017, i32 1018, i32 1019, i32 1020, i32 1021, i32 1022, i32 1023>
  %7262 = bitcast i8* %6998 to i32*
  %7263 = bitcast <1024 x i32>* %2 to i8*
  %7264 = bitcast <1024 x i32>* %3 to i8*
  %7265 = bitcast <1024 x i32>* %4 to i8*
  %7266 = bitcast <1024 x i32>* %0 to i8*
  %7267 = bitcast <1024 x i32>* %1 to i8*
  br label %"for color_hist_intm.s1.c.rebased142"

"for color_hist_intm.s1.c.rebased142":            ; preds = %"end for color_hist_intm.s0.u121", %"end for color_hist_intm.s1.r7$y149"
  %indvars.iv492 = phi i64 [ 0, %"end for color_hist_intm.s0.u121" ], [ %indvars.iv.next493, %"end for color_hist_intm.s1.r7$y149" ]
  %color_hist_intm.s1.c.rebased144 = phi i32 [ 0, %"end for color_hist_intm.s0.u121" ], [ %13675, %"end for color_hist_intm.s1.r7$y149" ]
  %7268 = trunc i64 %indvars.iv492 to i32
  %reass.add458 = add i32 %7257, %7268
  %reass.mul459 = mul i32 %reass.add458, %7026
  %t56146 = sub i32 %reass.mul459, %7258
  %7269 = mul nsw i32 %color_hist_intm.s1.c.rebased144, %a38
  %t55147 = sub nsw i32 %7269, %7183
  %7270 = insertelement <1024 x i32> undef, i32 %t55147, i32 0
  %7271 = shufflevector <1024 x i32> %7270, <1024 x i32> undef, <1024 x i32> zeroinitializer
  %7272 = add nsw <1024 x i32> %7271, %7261
  %7273 = sext i32 %t56146 to i64
  br label %"for color_hist_intm.s1.r7$y148"

"for color_hist_intm.s1.r7$y148":                 ; preds = %"for color_hist_intm.s1.c.rebased142", %"for color_hist_intm.s1.r7$y148"
  %indvars.iv490 = phi i64 [ 0, %"for color_hist_intm.s1.c.rebased142" ], [ %indvars.iv.next491, %"for color_hist_intm.s1.r7$y148" ]
  %7274 = mul nsw i64 %indvars.iv490, %7122
  %7275 = add nsw i64 %7274, %7273
  %7276 = getelementptr inbounds i32, i32* %7262, i64 %7275
  %7277 = bitcast i32* %7276 to <16 x i32>*
  %7278 = load <16 x i32>, <16 x i32>* %7277, align 4, !tbaa !397
  %7279 = getelementptr inbounds i32, i32* %7276, i64 16
  %7280 = bitcast i32* %7279 to <16 x i32>*
  %7281 = load <16 x i32>, <16 x i32>* %7280, align 4, !tbaa !397
  %7282 = getelementptr inbounds i32, i32* %7276, i64 32
  %7283 = bitcast i32* %7282 to <16 x i32>*
  %7284 = load <16 x i32>, <16 x i32>* %7283, align 4, !tbaa !397
  %7285 = getelementptr inbounds i32, i32* %7276, i64 48
  %7286 = bitcast i32* %7285 to <16 x i32>*
  %7287 = load <16 x i32>, <16 x i32>* %7286, align 4, !tbaa !397
  %7288 = getelementptr inbounds i32, i32* %7276, i64 64
  %7289 = bitcast i32* %7288 to <16 x i32>*
  %7290 = load <16 x i32>, <16 x i32>* %7289, align 4, !tbaa !397
  %7291 = getelementptr inbounds i32, i32* %7276, i64 80
  %7292 = bitcast i32* %7291 to <16 x i32>*
  %7293 = load <16 x i32>, <16 x i32>* %7292, align 4, !tbaa !397
  %7294 = getelementptr inbounds i32, i32* %7276, i64 96
  %7295 = bitcast i32* %7294 to <16 x i32>*
  %7296 = load <16 x i32>, <16 x i32>* %7295, align 4, !tbaa !397
  %7297 = getelementptr inbounds i32, i32* %7276, i64 112
  %7298 = bitcast i32* %7297 to <16 x i32>*
  %7299 = load <16 x i32>, <16 x i32>* %7298, align 4, !tbaa !397
  %7300 = getelementptr inbounds i32, i32* %7276, i64 128
  %7301 = bitcast i32* %7300 to <16 x i32>*
  %7302 = load <16 x i32>, <16 x i32>* %7301, align 4, !tbaa !397
  %7303 = getelementptr inbounds i32, i32* %7276, i64 144
  %7304 = bitcast i32* %7303 to <16 x i32>*
  %7305 = load <16 x i32>, <16 x i32>* %7304, align 4, !tbaa !397
  %7306 = getelementptr inbounds i32, i32* %7276, i64 160
  %7307 = bitcast i32* %7306 to <16 x i32>*
  %7308 = load <16 x i32>, <16 x i32>* %7307, align 4, !tbaa !397
  %7309 = getelementptr inbounds i32, i32* %7276, i64 176
  %7310 = bitcast i32* %7309 to <16 x i32>*
  %7311 = load <16 x i32>, <16 x i32>* %7310, align 4, !tbaa !397
  %7312 = getelementptr inbounds i32, i32* %7276, i64 192
  %7313 = bitcast i32* %7312 to <16 x i32>*
  %7314 = load <16 x i32>, <16 x i32>* %7313, align 4, !tbaa !397
  %7315 = getelementptr inbounds i32, i32* %7276, i64 208
  %7316 = bitcast i32* %7315 to <16 x i32>*
  %7317 = load <16 x i32>, <16 x i32>* %7316, align 4, !tbaa !397
  %7318 = getelementptr inbounds i32, i32* %7276, i64 224
  %7319 = bitcast i32* %7318 to <16 x i32>*
  %7320 = load <16 x i32>, <16 x i32>* %7319, align 4, !tbaa !397
  %7321 = getelementptr inbounds i32, i32* %7276, i64 240
  %7322 = bitcast i32* %7321 to <16 x i32>*
  %7323 = load <16 x i32>, <16 x i32>* %7322, align 4, !tbaa !397
  %7324 = getelementptr inbounds i32, i32* %7276, i64 256
  %7325 = bitcast i32* %7324 to <16 x i32>*
  %7326 = load <16 x i32>, <16 x i32>* %7325, align 4, !tbaa !397
  %7327 = getelementptr inbounds i32, i32* %7276, i64 272
  %7328 = bitcast i32* %7327 to <16 x i32>*
  %7329 = load <16 x i32>, <16 x i32>* %7328, align 4, !tbaa !397
  %7330 = getelementptr inbounds i32, i32* %7276, i64 288
  %7331 = bitcast i32* %7330 to <16 x i32>*
  %7332 = load <16 x i32>, <16 x i32>* %7331, align 4, !tbaa !397
  %7333 = getelementptr inbounds i32, i32* %7276, i64 304
  %7334 = bitcast i32* %7333 to <16 x i32>*
  %7335 = load <16 x i32>, <16 x i32>* %7334, align 4, !tbaa !397
  %7336 = getelementptr inbounds i32, i32* %7276, i64 320
  %7337 = bitcast i32* %7336 to <16 x i32>*
  %7338 = load <16 x i32>, <16 x i32>* %7337, align 4, !tbaa !397
  %7339 = getelementptr inbounds i32, i32* %7276, i64 336
  %7340 = bitcast i32* %7339 to <16 x i32>*
  %7341 = load <16 x i32>, <16 x i32>* %7340, align 4, !tbaa !397
  %7342 = getelementptr inbounds i32, i32* %7276, i64 352
  %7343 = bitcast i32* %7342 to <16 x i32>*
  %7344 = load <16 x i32>, <16 x i32>* %7343, align 4, !tbaa !397
  %7345 = getelementptr inbounds i32, i32* %7276, i64 368
  %7346 = bitcast i32* %7345 to <16 x i32>*
  %7347 = load <16 x i32>, <16 x i32>* %7346, align 4, !tbaa !397
  %7348 = getelementptr inbounds i32, i32* %7276, i64 384
  %7349 = bitcast i32* %7348 to <16 x i32>*
  %7350 = load <16 x i32>, <16 x i32>* %7349, align 4, !tbaa !397
  %7351 = getelementptr inbounds i32, i32* %7276, i64 400
  %7352 = bitcast i32* %7351 to <16 x i32>*
  %7353 = load <16 x i32>, <16 x i32>* %7352, align 4, !tbaa !397
  %7354 = getelementptr inbounds i32, i32* %7276, i64 416
  %7355 = bitcast i32* %7354 to <16 x i32>*
  %7356 = load <16 x i32>, <16 x i32>* %7355, align 4, !tbaa !397
  %7357 = getelementptr inbounds i32, i32* %7276, i64 432
  %7358 = bitcast i32* %7357 to <16 x i32>*
  %7359 = load <16 x i32>, <16 x i32>* %7358, align 4, !tbaa !397
  %7360 = getelementptr inbounds i32, i32* %7276, i64 448
  %7361 = bitcast i32* %7360 to <16 x i32>*
  %7362 = load <16 x i32>, <16 x i32>* %7361, align 4, !tbaa !397
  %7363 = getelementptr inbounds i32, i32* %7276, i64 464
  %7364 = bitcast i32* %7363 to <16 x i32>*
  %7365 = load <16 x i32>, <16 x i32>* %7364, align 4, !tbaa !397
  %7366 = getelementptr inbounds i32, i32* %7276, i64 480
  %7367 = bitcast i32* %7366 to <16 x i32>*
  %7368 = load <16 x i32>, <16 x i32>* %7367, align 4, !tbaa !397
  %7369 = getelementptr inbounds i32, i32* %7276, i64 496
  %7370 = bitcast i32* %7369 to <16 x i32>*
  %7371 = load <16 x i32>, <16 x i32>* %7370, align 4, !tbaa !397
  %7372 = getelementptr inbounds i32, i32* %7276, i64 512
  %7373 = bitcast i32* %7372 to <16 x i32>*
  %7374 = load <16 x i32>, <16 x i32>* %7373, align 4, !tbaa !397
  %7375 = getelementptr inbounds i32, i32* %7276, i64 528
  %7376 = bitcast i32* %7375 to <16 x i32>*
  %7377 = load <16 x i32>, <16 x i32>* %7376, align 4, !tbaa !397
  %7378 = getelementptr inbounds i32, i32* %7276, i64 544
  %7379 = bitcast i32* %7378 to <16 x i32>*
  %7380 = load <16 x i32>, <16 x i32>* %7379, align 4, !tbaa !397
  %7381 = getelementptr inbounds i32, i32* %7276, i64 560
  %7382 = bitcast i32* %7381 to <16 x i32>*
  %7383 = load <16 x i32>, <16 x i32>* %7382, align 4, !tbaa !397
  %7384 = getelementptr inbounds i32, i32* %7276, i64 576
  %7385 = bitcast i32* %7384 to <16 x i32>*
  %7386 = load <16 x i32>, <16 x i32>* %7385, align 4, !tbaa !397
  %7387 = getelementptr inbounds i32, i32* %7276, i64 592
  %7388 = bitcast i32* %7387 to <16 x i32>*
  %7389 = load <16 x i32>, <16 x i32>* %7388, align 4, !tbaa !397
  %7390 = getelementptr inbounds i32, i32* %7276, i64 608
  %7391 = bitcast i32* %7390 to <16 x i32>*
  %7392 = load <16 x i32>, <16 x i32>* %7391, align 4, !tbaa !397
  %7393 = getelementptr inbounds i32, i32* %7276, i64 624
  %7394 = bitcast i32* %7393 to <16 x i32>*
  %7395 = load <16 x i32>, <16 x i32>* %7394, align 4, !tbaa !397
  %7396 = getelementptr inbounds i32, i32* %7276, i64 640
  %7397 = bitcast i32* %7396 to <16 x i32>*
  %7398 = load <16 x i32>, <16 x i32>* %7397, align 4, !tbaa !397
  %7399 = getelementptr inbounds i32, i32* %7276, i64 656
  %7400 = bitcast i32* %7399 to <16 x i32>*
  %7401 = load <16 x i32>, <16 x i32>* %7400, align 4, !tbaa !397
  %7402 = getelementptr inbounds i32, i32* %7276, i64 672
  %7403 = bitcast i32* %7402 to <16 x i32>*
  %7404 = load <16 x i32>, <16 x i32>* %7403, align 4, !tbaa !397
  %7405 = getelementptr inbounds i32, i32* %7276, i64 688
  %7406 = bitcast i32* %7405 to <16 x i32>*
  %7407 = load <16 x i32>, <16 x i32>* %7406, align 4, !tbaa !397
  %7408 = getelementptr inbounds i32, i32* %7276, i64 704
  %7409 = bitcast i32* %7408 to <16 x i32>*
  %7410 = load <16 x i32>, <16 x i32>* %7409, align 4, !tbaa !397
  %7411 = getelementptr inbounds i32, i32* %7276, i64 720
  %7412 = bitcast i32* %7411 to <16 x i32>*
  %7413 = load <16 x i32>, <16 x i32>* %7412, align 4, !tbaa !397
  %7414 = getelementptr inbounds i32, i32* %7276, i64 736
  %7415 = bitcast i32* %7414 to <16 x i32>*
  %7416 = load <16 x i32>, <16 x i32>* %7415, align 4, !tbaa !397
  %7417 = getelementptr inbounds i32, i32* %7276, i64 752
  %7418 = bitcast i32* %7417 to <16 x i32>*
  %7419 = load <16 x i32>, <16 x i32>* %7418, align 4, !tbaa !397
  %7420 = getelementptr inbounds i32, i32* %7276, i64 768
  %7421 = bitcast i32* %7420 to <16 x i32>*
  %7422 = load <16 x i32>, <16 x i32>* %7421, align 4, !tbaa !397
  %7423 = getelementptr inbounds i32, i32* %7276, i64 784
  %7424 = bitcast i32* %7423 to <16 x i32>*
  %7425 = load <16 x i32>, <16 x i32>* %7424, align 4, !tbaa !397
  %7426 = getelementptr inbounds i32, i32* %7276, i64 800
  %7427 = bitcast i32* %7426 to <16 x i32>*
  %7428 = load <16 x i32>, <16 x i32>* %7427, align 4, !tbaa !397
  %7429 = getelementptr inbounds i32, i32* %7276, i64 816
  %7430 = bitcast i32* %7429 to <16 x i32>*
  %7431 = load <16 x i32>, <16 x i32>* %7430, align 4, !tbaa !397
  %7432 = getelementptr inbounds i32, i32* %7276, i64 832
  %7433 = bitcast i32* %7432 to <16 x i32>*
  %7434 = load <16 x i32>, <16 x i32>* %7433, align 4, !tbaa !397
  %7435 = getelementptr inbounds i32, i32* %7276, i64 848
  %7436 = bitcast i32* %7435 to <16 x i32>*
  %7437 = load <16 x i32>, <16 x i32>* %7436, align 4, !tbaa !397
  %7438 = getelementptr inbounds i32, i32* %7276, i64 864
  %7439 = bitcast i32* %7438 to <16 x i32>*
  %7440 = load <16 x i32>, <16 x i32>* %7439, align 4, !tbaa !397
  %7441 = getelementptr inbounds i32, i32* %7276, i64 880
  %7442 = bitcast i32* %7441 to <16 x i32>*
  %7443 = load <16 x i32>, <16 x i32>* %7442, align 4, !tbaa !397
  %7444 = getelementptr inbounds i32, i32* %7276, i64 896
  %7445 = bitcast i32* %7444 to <16 x i32>*
  %7446 = load <16 x i32>, <16 x i32>* %7445, align 4, !tbaa !397
  %7447 = getelementptr inbounds i32, i32* %7276, i64 912
  %7448 = bitcast i32* %7447 to <16 x i32>*
  %7449 = load <16 x i32>, <16 x i32>* %7448, align 4, !tbaa !397
  %7450 = getelementptr inbounds i32, i32* %7276, i64 928
  %7451 = bitcast i32* %7450 to <16 x i32>*
  %7452 = load <16 x i32>, <16 x i32>* %7451, align 4, !tbaa !397
  %7453 = getelementptr inbounds i32, i32* %7276, i64 944
  %7454 = bitcast i32* %7453 to <16 x i32>*
  %7455 = load <16 x i32>, <16 x i32>* %7454, align 4, !tbaa !397
  %7456 = getelementptr inbounds i32, i32* %7276, i64 960
  %7457 = bitcast i32* %7456 to <16 x i32>*
  %7458 = load <16 x i32>, <16 x i32>* %7457, align 4, !tbaa !397
  %7459 = getelementptr inbounds i32, i32* %7276, i64 976
  %7460 = bitcast i32* %7459 to <16 x i32>*
  %7461 = load <16 x i32>, <16 x i32>* %7460, align 4, !tbaa !397
  %7462 = getelementptr inbounds i32, i32* %7276, i64 992
  %7463 = bitcast i32* %7462 to <16 x i32>*
  %7464 = load <16 x i32>, <16 x i32>* %7463, align 4, !tbaa !397
  %7465 = getelementptr inbounds i32, i32* %7276, i64 1008
  %7466 = bitcast i32* %7465 to <16 x i32>*
  %7467 = load <16 x i32>, <16 x i32>* %7466, align 4, !tbaa !397
  %7468 = shufflevector <16 x i32> %7278, <16 x i32> %7281, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7469 = shufflevector <16 x i32> %7284, <16 x i32> %7287, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7470 = shufflevector <16 x i32> %7290, <16 x i32> %7293, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7471 = shufflevector <16 x i32> %7296, <16 x i32> %7299, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7472 = shufflevector <16 x i32> %7302, <16 x i32> %7305, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7473 = shufflevector <16 x i32> %7308, <16 x i32> %7311, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7474 = shufflevector <16 x i32> %7314, <16 x i32> %7317, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7475 = shufflevector <16 x i32> %7320, <16 x i32> %7323, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7476 = shufflevector <16 x i32> %7326, <16 x i32> %7329, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7477 = shufflevector <16 x i32> %7332, <16 x i32> %7335, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7478 = shufflevector <16 x i32> %7338, <16 x i32> %7341, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7479 = shufflevector <16 x i32> %7344, <16 x i32> %7347, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7480 = shufflevector <16 x i32> %7350, <16 x i32> %7353, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7481 = shufflevector <16 x i32> %7356, <16 x i32> %7359, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7482 = shufflevector <16 x i32> %7362, <16 x i32> %7365, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7483 = shufflevector <16 x i32> %7368, <16 x i32> %7371, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7484 = shufflevector <16 x i32> %7374, <16 x i32> %7377, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7485 = shufflevector <16 x i32> %7380, <16 x i32> %7383, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7486 = shufflevector <16 x i32> %7386, <16 x i32> %7389, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7487 = shufflevector <16 x i32> %7392, <16 x i32> %7395, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7488 = shufflevector <16 x i32> %7398, <16 x i32> %7401, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7489 = shufflevector <16 x i32> %7404, <16 x i32> %7407, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7490 = shufflevector <16 x i32> %7410, <16 x i32> %7413, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7491 = shufflevector <16 x i32> %7416, <16 x i32> %7419, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7492 = shufflevector <16 x i32> %7422, <16 x i32> %7425, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7493 = shufflevector <16 x i32> %7428, <16 x i32> %7431, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7494 = shufflevector <16 x i32> %7434, <16 x i32> %7437, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7495 = shufflevector <16 x i32> %7440, <16 x i32> %7443, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7496 = shufflevector <16 x i32> %7446, <16 x i32> %7449, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7497 = shufflevector <16 x i32> %7452, <16 x i32> %7455, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7498 = shufflevector <16 x i32> %7458, <16 x i32> %7461, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7499 = shufflevector <16 x i32> %7464, <16 x i32> %7467, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7500 = shufflevector <32 x i32> %7468, <32 x i32> %7469, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7501 = shufflevector <32 x i32> %7470, <32 x i32> %7471, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7502 = shufflevector <32 x i32> %7472, <32 x i32> %7473, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7503 = shufflevector <32 x i32> %7474, <32 x i32> %7475, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7504 = shufflevector <32 x i32> %7476, <32 x i32> %7477, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7505 = shufflevector <32 x i32> %7478, <32 x i32> %7479, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7506 = shufflevector <32 x i32> %7480, <32 x i32> %7481, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7507 = shufflevector <32 x i32> %7482, <32 x i32> %7483, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7508 = shufflevector <32 x i32> %7484, <32 x i32> %7485, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7509 = shufflevector <32 x i32> %7486, <32 x i32> %7487, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7510 = shufflevector <32 x i32> %7488, <32 x i32> %7489, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7511 = shufflevector <32 x i32> %7490, <32 x i32> %7491, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7512 = shufflevector <32 x i32> %7492, <32 x i32> %7493, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7513 = shufflevector <32 x i32> %7494, <32 x i32> %7495, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7514 = shufflevector <32 x i32> %7496, <32 x i32> %7497, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7515 = shufflevector <32 x i32> %7498, <32 x i32> %7499, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7516 = shufflevector <64 x i32> %7500, <64 x i32> %7501, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %7517 = shufflevector <64 x i32> %7502, <64 x i32> %7503, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %7518 = shufflevector <64 x i32> %7504, <64 x i32> %7505, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %7519 = shufflevector <64 x i32> %7506, <64 x i32> %7507, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %7520 = shufflevector <64 x i32> %7508, <64 x i32> %7509, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %7521 = shufflevector <64 x i32> %7510, <64 x i32> %7511, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %7522 = shufflevector <64 x i32> %7512, <64 x i32> %7513, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %7523 = shufflevector <64 x i32> %7514, <64 x i32> %7515, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %7524 = shufflevector <128 x i32> %7516, <128 x i32> %7517, <256 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255>
  %7525 = shufflevector <128 x i32> %7518, <128 x i32> %7519, <256 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255>
  %7526 = shufflevector <128 x i32> %7520, <128 x i32> %7521, <256 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255>
  %7527 = shufflevector <128 x i32> %7522, <128 x i32> %7523, <256 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255>
  %7528 = shufflevector <256 x i32> %7524, <256 x i32> %7525, <512 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255, i32 256, i32 257, i32 258, i32 259, i32 260, i32 261, i32 262, i32 263, i32 264, i32 265, i32 266, i32 267, i32 268, i32 269, i32 270, i32 271, i32 272, i32 273, i32 274, i32 275, i32 276, i32 277, i32 278, i32 279, i32 280, i32 281, i32 282, i32 283, i32 284, i32 285, i32 286, i32 287, i32 288, i32 289, i32 290, i32 291, i32 292, i32 293, i32 294, i32 295, i32 296, i32 297, i32 298, i32 299, i32 300, i32 301, i32 302, i32 303, i32 304, i32 305, i32 306, i32 307, i32 308, i32 309, i32 310, i32 311, i32 312, i32 313, i32 314, i32 315, i32 316, i32 317, i32 318, i32 319, i32 320, i32 321, i32 322, i32 323, i32 324, i32 325, i32 326, i32 327, i32 328, i32 329, i32 330, i32 331, i32 332, i32 333, i32 334, i32 335, i32 336, i32 337, i32 338, i32 339, i32 340, i32 341, i32 342, i32 343, i32 344, i32 345, i32 346, i32 347, i32 348, i32 349, i32 350, i32 351, i32 352, i32 353, i32 354, i32 355, i32 356, i32 357, i32 358, i32 359, i32 360, i32 361, i32 362, i32 363, i32 364, i32 365, i32 366, i32 367, i32 368, i32 369, i32 370, i32 371, i32 372, i32 373, i32 374, i32 375, i32 376, i32 377, i32 378, i32 379, i32 380, i32 381, i32 382, i32 383, i32 384, i32 385, i32 386, i32 387, i32 388, i32 389, i32 390, i32 391, i32 392, i32 393, i32 394, i32 395, i32 396, i32 397, i32 398, i32 399, i32 400, i32 401, i32 402, i32 403, i32 404, i32 405, i32 406, i32 407, i32 408, i32 409, i32 410, i32 411, i32 412, i32 413, i32 414, i32 415, i32 416, i32 417, i32 418, i32 419, i32 420, i32 421, i32 422, i32 423, i32 424, i32 425, i32 426, i32 427, i32 428, i32 429, i32 430, i32 431, i32 432, i32 433, i32 434, i32 435, i32 436, i32 437, i32 438, i32 439, i32 440, i32 441, i32 442, i32 443, i32 444, i32 445, i32 446, i32 447, i32 448, i32 449, i32 450, i32 451, i32 452, i32 453, i32 454, i32 455, i32 456, i32 457, i32 458, i32 459, i32 460, i32 461, i32 462, i32 463, i32 464, i32 465, i32 466, i32 467, i32 468, i32 469, i32 470, i32 471, i32 472, i32 473, i32 474, i32 475, i32 476, i32 477, i32 478, i32 479, i32 480, i32 481, i32 482, i32 483, i32 484, i32 485, i32 486, i32 487, i32 488, i32 489, i32 490, i32 491, i32 492, i32 493, i32 494, i32 495, i32 496, i32 497, i32 498, i32 499, i32 500, i32 501, i32 502, i32 503, i32 504, i32 505, i32 506, i32 507, i32 508, i32 509, i32 510, i32 511>
  %7529 = shufflevector <256 x i32> %7526, <256 x i32> %7527, <512 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255, i32 256, i32 257, i32 258, i32 259, i32 260, i32 261, i32 262, i32 263, i32 264, i32 265, i32 266, i32 267, i32 268, i32 269, i32 270, i32 271, i32 272, i32 273, i32 274, i32 275, i32 276, i32 277, i32 278, i32 279, i32 280, i32 281, i32 282, i32 283, i32 284, i32 285, i32 286, i32 287, i32 288, i32 289, i32 290, i32 291, i32 292, i32 293, i32 294, i32 295, i32 296, i32 297, i32 298, i32 299, i32 300, i32 301, i32 302, i32 303, i32 304, i32 305, i32 306, i32 307, i32 308, i32 309, i32 310, i32 311, i32 312, i32 313, i32 314, i32 315, i32 316, i32 317, i32 318, i32 319, i32 320, i32 321, i32 322, i32 323, i32 324, i32 325, i32 326, i32 327, i32 328, i32 329, i32 330, i32 331, i32 332, i32 333, i32 334, i32 335, i32 336, i32 337, i32 338, i32 339, i32 340, i32 341, i32 342, i32 343, i32 344, i32 345, i32 346, i32 347, i32 348, i32 349, i32 350, i32 351, i32 352, i32 353, i32 354, i32 355, i32 356, i32 357, i32 358, i32 359, i32 360, i32 361, i32 362, i32 363, i32 364, i32 365, i32 366, i32 367, i32 368, i32 369, i32 370, i32 371, i32 372, i32 373, i32 374, i32 375, i32 376, i32 377, i32 378, i32 379, i32 380, i32 381, i32 382, i32 383, i32 384, i32 385, i32 386, i32 387, i32 388, i32 389, i32 390, i32 391, i32 392, i32 393, i32 394, i32 395, i32 396, i32 397, i32 398, i32 399, i32 400, i32 401, i32 402, i32 403, i32 404, i32 405, i32 406, i32 407, i32 408, i32 409, i32 410, i32 411, i32 412, i32 413, i32 414, i32 415, i32 416, i32 417, i32 418, i32 419, i32 420, i32 421, i32 422, i32 423, i32 424, i32 425, i32 426, i32 427, i32 428, i32 429, i32 430, i32 431, i32 432, i32 433, i32 434, i32 435, i32 436, i32 437, i32 438, i32 439, i32 440, i32 441, i32 442, i32 443, i32 444, i32 445, i32 446, i32 447, i32 448, i32 449, i32 450, i32 451, i32 452, i32 453, i32 454, i32 455, i32 456, i32 457, i32 458, i32 459, i32 460, i32 461, i32 462, i32 463, i32 464, i32 465, i32 466, i32 467, i32 468, i32 469, i32 470, i32 471, i32 472, i32 473, i32 474, i32 475, i32 476, i32 477, i32 478, i32 479, i32 480, i32 481, i32 482, i32 483, i32 484, i32 485, i32 486, i32 487, i32 488, i32 489, i32 490, i32 491, i32 492, i32 493, i32 494, i32 495, i32 496, i32 497, i32 498, i32 499, i32 500, i32 501, i32 502, i32 503, i32 504, i32 505, i32 506, i32 507, i32 508, i32 509, i32 510, i32 511>
  %7530 = shufflevector <512 x i32> %7528, <512 x i32> %7529, <1024 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255, i32 256, i32 257, i32 258, i32 259, i32 260, i32 261, i32 262, i32 263, i32 264, i32 265, i32 266, i32 267, i32 268, i32 269, i32 270, i32 271, i32 272, i32 273, i32 274, i32 275, i32 276, i32 277, i32 278, i32 279, i32 280, i32 281, i32 282, i32 283, i32 284, i32 285, i32 286, i32 287, i32 288, i32 289, i32 290, i32 291, i32 292, i32 293, i32 294, i32 295, i32 296, i32 297, i32 298, i32 299, i32 300, i32 301, i32 302, i32 303, i32 304, i32 305, i32 306, i32 307, i32 308, i32 309, i32 310, i32 311, i32 312, i32 313, i32 314, i32 315, i32 316, i32 317, i32 318, i32 319, i32 320, i32 321, i32 322, i32 323, i32 324, i32 325, i32 326, i32 327, i32 328, i32 329, i32 330, i32 331, i32 332, i32 333, i32 334, i32 335, i32 336, i32 337, i32 338, i32 339, i32 340, i32 341, i32 342, i32 343, i32 344, i32 345, i32 346, i32 347, i32 348, i32 349, i32 350, i32 351, i32 352, i32 353, i32 354, i32 355, i32 356, i32 357, i32 358, i32 359, i32 360, i32 361, i32 362, i32 363, i32 364, i32 365, i32 366, i32 367, i32 368, i32 369, i32 370, i32 371, i32 372, i32 373, i32 374, i32 375, i32 376, i32 377, i32 378, i32 379, i32 380, i32 381, i32 382, i32 383, i32 384, i32 385, i32 386, i32 387, i32 388, i32 389, i32 390, i32 391, i32 392, i32 393, i32 394, i32 395, i32 396, i32 397, i32 398, i32 399, i32 400, i32 401, i32 402, i32 403, i32 404, i32 405, i32 406, i32 407, i32 408, i32 409, i32 410, i32 411, i32 412, i32 413, i32 414, i32 415, i32 416, i32 417, i32 418, i32 419, i32 420, i32 421, i32 422, i32 423, i32 424, i32 425, i32 426, i32 427, i32 428, i32 429, i32 430, i32 431, i32 432, i32 433, i32 434, i32 435, i32 436, i32 437, i32 438, i32 439, i32 440, i32 441, i32 442, i32 443, i32 444, i32 445, i32 446, i32 447, i32 448, i32 449, i32 450, i32 451, i32 452, i32 453, i32 454, i32 455, i32 456, i32 457, i32 458, i32 459, i32 460, i32 461, i32 462, i32 463, i32 464, i32 465, i32 466, i32 467, i32 468, i32 469, i32 470, i32 471, i32 472, i32 473, i32 474, i32 475, i32 476, i32 477, i32 478, i32 479, i32 480, i32 481, i32 482, i32 483, i32 484, i32 485, i32 486, i32 487, i32 488, i32 489, i32 490, i32 491, i32 492, i32 493, i32 494, i32 495, i32 496, i32 497, i32 498, i32 499, i32 500, i32 501, i32 502, i32 503, i32 504, i32 505, i32 506, i32 507, i32 508, i32 509, i32 510, i32 511, i32 512, i32 513, i32 514, i32 515, i32 516, i32 517, i32 518, i32 519, i32 520, i32 521, i32 522, i32 523, i32 524, i32 525, i32 526, i32 527, i32 528, i32 529, i32 530, i32 531, i32 532, i32 533, i32 534, i32 535, i32 536, i32 537, i32 538, i32 539, i32 540, i32 541, i32 542, i32 543, i32 544, i32 545, i32 546, i32 547, i32 548, i32 549, i32 550, i32 551, i32 552, i32 553, i32 554, i32 555, i32 556, i32 557, i32 558, i32 559, i32 560, i32 561, i32 562, i32 563, i32 564, i32 565, i32 566, i32 567, i32 568, i32 569, i32 570, i32 571, i32 572, i32 573, i32 574, i32 575, i32 576, i32 577, i32 578, i32 579, i32 580, i32 581, i32 582, i32 583, i32 584, i32 585, i32 586, i32 587, i32 588, i32 589, i32 590, i32 591, i32 592, i32 593, i32 594, i32 595, i32 596, i32 597, i32 598, i32 599, i32 600, i32 601, i32 602, i32 603, i32 604, i32 605, i32 606, i32 607, i32 608, i32 609, i32 610, i32 611, i32 612, i32 613, i32 614, i32 615, i32 616, i32 617, i32 618, i32 619, i32 620, i32 621, i32 622, i32 623, i32 624, i32 625, i32 626, i32 627, i32 628, i32 629, i32 630, i32 631, i32 632, i32 633, i32 634, i32 635, i32 636, i32 637, i32 638, i32 639, i32 640, i32 641, i32 642, i32 643, i32 644, i32 645, i32 646, i32 647, i32 648, i32 649, i32 650, i32 651, i32 652, i32 653, i32 654, i32 655, i32 656, i32 657, i32 658, i32 659, i32 660, i32 661, i32 662, i32 663, i32 664, i32 665, i32 666, i32 667, i32 668, i32 669, i32 670, i32 671, i32 672, i32 673, i32 674, i32 675, i32 676, i32 677, i32 678, i32 679, i32 680, i32 681, i32 682, i32 683, i32 684, i32 685, i32 686, i32 687, i32 688, i32 689, i32 690, i32 691, i32 692, i32 693, i32 694, i32 695, i32 696, i32 697, i32 698, i32 699, i32 700, i32 701, i32 702, i32 703, i32 704, i32 705, i32 706, i32 707, i32 708, i32 709, i32 710, i32 711, i32 712, i32 713, i32 714, i32 715, i32 716, i32 717, i32 718, i32 719, i32 720, i32 721, i32 722, i32 723, i32 724, i32 725, i32 726, i32 727, i32 728, i32 729, i32 730, i32 731, i32 732, i32 733, i32 734, i32 735, i32 736, i32 737, i32 738, i32 739, i32 740, i32 741, i32 742, i32 743, i32 744, i32 745, i32 746, i32 747, i32 748, i32 749, i32 750, i32 751, i32 752, i32 753, i32 754, i32 755, i32 756, i32 757, i32 758, i32 759, i32 760, i32 761, i32 762, i32 763, i32 764, i32 765, i32 766, i32 767, i32 768, i32 769, i32 770, i32 771, i32 772, i32 773, i32 774, i32 775, i32 776, i32 777, i32 778, i32 779, i32 780, i32 781, i32 782, i32 783, i32 784, i32 785, i32 786, i32 787, i32 788, i32 789, i32 790, i32 791, i32 792, i32 793, i32 794, i32 795, i32 796, i32 797, i32 798, i32 799, i32 800, i32 801, i32 802, i32 803, i32 804, i32 805, i32 806, i32 807, i32 808, i32 809, i32 810, i32 811, i32 812, i32 813, i32 814, i32 815, i32 816, i32 817, i32 818, i32 819, i32 820, i32 821, i32 822, i32 823, i32 824, i32 825, i32 826, i32 827, i32 828, i32 829, i32 830, i32 831, i32 832, i32 833, i32 834, i32 835, i32 836, i32 837, i32 838, i32 839, i32 840, i32 841, i32 842, i32 843, i32 844, i32 845, i32 846, i32 847, i32 848, i32 849, i32 850, i32 851, i32 852, i32 853, i32 854, i32 855, i32 856, i32 857, i32 858, i32 859, i32 860, i32 861, i32 862, i32 863, i32 864, i32 865, i32 866, i32 867, i32 868, i32 869, i32 870, i32 871, i32 872, i32 873, i32 874, i32 875, i32 876, i32 877, i32 878, i32 879, i32 880, i32 881, i32 882, i32 883, i32 884, i32 885, i32 886, i32 887, i32 888, i32 889, i32 890, i32 891, i32 892, i32 893, i32 894, i32 895, i32 896, i32 897, i32 898, i32 899, i32 900, i32 901, i32 902, i32 903, i32 904, i32 905, i32 906, i32 907, i32 908, i32 909, i32 910, i32 911, i32 912, i32 913, i32 914, i32 915, i32 916, i32 917, i32 918, i32 919, i32 920, i32 921, i32 922, i32 923, i32 924, i32 925, i32 926, i32 927, i32 928, i32 929, i32 930, i32 931, i32 932, i32 933, i32 934, i32 935, i32 936, i32 937, i32 938, i32 939, i32 940, i32 941, i32 942, i32 943, i32 944, i32 945, i32 946, i32 947, i32 948, i32 949, i32 950, i32 951, i32 952, i32 953, i32 954, i32 955, i32 956, i32 957, i32 958, i32 959, i32 960, i32 961, i32 962, i32 963, i32 964, i32 965, i32 966, i32 967, i32 968, i32 969, i32 970, i32 971, i32 972, i32 973, i32 974, i32 975, i32 976, i32 977, i32 978, i32 979, i32 980, i32 981, i32 982, i32 983, i32 984, i32 985, i32 986, i32 987, i32 988, i32 989, i32 990, i32 991, i32 992, i32 993, i32 994, i32 995, i32 996, i32 997, i32 998, i32 999, i32 1000, i32 1001, i32 1002, i32 1003, i32 1004, i32 1005, i32 1006, i32 1007, i32 1008, i32 1009, i32 1010, i32 1011, i32 1012, i32 1013, i32 1014, i32 1015, i32 1016, i32 1017, i32 1018, i32 1019, i32 1020, i32 1021, i32 1022, i32 1023>
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %7263)
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %7264)
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %7265)
  %pimAlloc.i = call i32 @pimAlloc(i32 0, i64 1024, i32 2) #15
  store <1024 x i32> %7530, <1024 x i32>* %2, align 4096
  %pimHostToDevice.i = call i32 @pimCopyHostToDevice(i8* nonnull %7263, i32 %pimAlloc.i, i64 0, i64 0) #15
  %pimAssocAlloc.i = call i32 @pimAllocAssociated(i32 %pimAlloc.i, i32 2) #15
  %pimInst.i = call i32 @pimMinScalar(i32 %pimAlloc.i, i32 %pimAssocAlloc.i, i64 255) #15
  %pimAssocAlloc1.i = call i32 @pimAllocAssociated(i32 %pimAlloc.i, i32 2) #15
  %pimInst4.i = call i32 @pimMaxScalar(i32 %pimAssocAlloc.i, i32 %pimAssocAlloc1.i, i64 0) #15
  %pimAssocAlloc5.i = call i32 @pimAllocAssociated(i32 %pimAlloc.i, i32 2) #15
  store <1024 x i32> %7272, <1024 x i32>* %3, align 4096
  %pimHostToDevice6.i = call i32 @pimCopyHostToDevice(i8* nonnull %7264, i32 %pimAssocAlloc5.i, i64 0, i64 0) #15
  %pimAssocAlloc7.i = call i32 @pimAllocAssociated(i32 %pimAlloc.i, i32 2) #15
  %pimInst8.i = call i32 @pimAdd(i32 %pimAssocAlloc1.i, i32 %pimAssocAlloc5.i, i32 %pimAssocAlloc7.i) #15
  %pimDeviceToHost.i = call i32 @pimCopyDeviceToHost(i32 %pimAssocAlloc7.i, i8* nonnull %7265, i64 0, i64 0) #15
  %load.buffer.i = load <1024 x i32>, <1024 x i32>* %4, align 4096
  %pimFree.i = call i32 @pimFree(i32 %pimAssocAlloc5.i) #15
  %pimFree9.i = call i32 @pimFree(i32 %pimAssocAlloc7.i) #15
  %pimFree10.i = call i32 @pimFree(i32 %pimAssocAlloc1.i) #15
  %pimFree11.i = call i32 @pimFree(i32 %pimAlloc.i) #15
  %pimFree12.i = call i32 @pimFree(i32 %pimAssocAlloc.i) #15
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %7263)
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %7264)
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %7265)
  %7531 = extractelement <1024 x i32> %load.buffer.i, i32 0
  %7532 = sext i32 %7531 to i64
  %7533 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7532
  %7534 = load i32, i32* %7533, align 4, !tbaa !400
  %7535 = insertelement <1024 x i32> undef, i32 %7534, i32 0
  %7536 = extractelement <1024 x i32> %load.buffer.i, i32 1
  %7537 = sext i32 %7536 to i64
  %7538 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7537
  %7539 = load i32, i32* %7538, align 4, !tbaa !400
  %7540 = insertelement <1024 x i32> %7535, i32 %7539, i32 1
  %7541 = extractelement <1024 x i32> %load.buffer.i, i32 2
  %7542 = sext i32 %7541 to i64
  %7543 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7542
  %7544 = load i32, i32* %7543, align 4, !tbaa !400
  %7545 = insertelement <1024 x i32> %7540, i32 %7544, i32 2
  %7546 = extractelement <1024 x i32> %load.buffer.i, i32 3
  %7547 = sext i32 %7546 to i64
  %7548 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7547
  %7549 = load i32, i32* %7548, align 4, !tbaa !400
  %7550 = insertelement <1024 x i32> %7545, i32 %7549, i32 3
  %7551 = extractelement <1024 x i32> %load.buffer.i, i32 4
  %7552 = sext i32 %7551 to i64
  %7553 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7552
  %7554 = load i32, i32* %7553, align 4, !tbaa !400
  %7555 = insertelement <1024 x i32> %7550, i32 %7554, i32 4
  %7556 = extractelement <1024 x i32> %load.buffer.i, i32 5
  %7557 = sext i32 %7556 to i64
  %7558 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7557
  %7559 = load i32, i32* %7558, align 4, !tbaa !400
  %7560 = insertelement <1024 x i32> %7555, i32 %7559, i32 5
  %7561 = extractelement <1024 x i32> %load.buffer.i, i32 6
  %7562 = sext i32 %7561 to i64
  %7563 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7562
  %7564 = load i32, i32* %7563, align 4, !tbaa !400
  %7565 = insertelement <1024 x i32> %7560, i32 %7564, i32 6
  %7566 = extractelement <1024 x i32> %load.buffer.i, i32 7
  %7567 = sext i32 %7566 to i64
  %7568 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7567
  %7569 = load i32, i32* %7568, align 4, !tbaa !400
  %7570 = insertelement <1024 x i32> %7565, i32 %7569, i32 7
  %7571 = extractelement <1024 x i32> %load.buffer.i, i32 8
  %7572 = sext i32 %7571 to i64
  %7573 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7572
  %7574 = load i32, i32* %7573, align 4, !tbaa !400
  %7575 = insertelement <1024 x i32> %7570, i32 %7574, i32 8
  %7576 = extractelement <1024 x i32> %load.buffer.i, i32 9
  %7577 = sext i32 %7576 to i64
  %7578 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7577
  %7579 = load i32, i32* %7578, align 4, !tbaa !400
  %7580 = insertelement <1024 x i32> %7575, i32 %7579, i32 9
  %7581 = extractelement <1024 x i32> %load.buffer.i, i32 10
  %7582 = sext i32 %7581 to i64
  %7583 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7582
  %7584 = load i32, i32* %7583, align 4, !tbaa !400
  %7585 = insertelement <1024 x i32> %7580, i32 %7584, i32 10
  %7586 = extractelement <1024 x i32> %load.buffer.i, i32 11
  %7587 = sext i32 %7586 to i64
  %7588 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7587
  %7589 = load i32, i32* %7588, align 4, !tbaa !400
  %7590 = insertelement <1024 x i32> %7585, i32 %7589, i32 11
  %7591 = extractelement <1024 x i32> %load.buffer.i, i32 12
  %7592 = sext i32 %7591 to i64
  %7593 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7592
  %7594 = load i32, i32* %7593, align 4, !tbaa !400
  %7595 = insertelement <1024 x i32> %7590, i32 %7594, i32 12
  %7596 = extractelement <1024 x i32> %load.buffer.i, i32 13
  %7597 = sext i32 %7596 to i64
  %7598 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7597
  %7599 = load i32, i32* %7598, align 4, !tbaa !400
  %7600 = insertelement <1024 x i32> %7595, i32 %7599, i32 13
  %7601 = extractelement <1024 x i32> %load.buffer.i, i32 14
  %7602 = sext i32 %7601 to i64
  %7603 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7602
  %7604 = load i32, i32* %7603, align 4, !tbaa !400
  %7605 = insertelement <1024 x i32> %7600, i32 %7604, i32 14
  %7606 = extractelement <1024 x i32> %load.buffer.i, i32 15
  %7607 = sext i32 %7606 to i64
  %7608 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7607
  %7609 = load i32, i32* %7608, align 4, !tbaa !400
  %7610 = insertelement <1024 x i32> %7605, i32 %7609, i32 15
  %7611 = extractelement <1024 x i32> %load.buffer.i, i32 16
  %7612 = sext i32 %7611 to i64
  %7613 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7612
  %7614 = load i32, i32* %7613, align 4, !tbaa !400
  %7615 = insertelement <1024 x i32> %7610, i32 %7614, i32 16
  %7616 = extractelement <1024 x i32> %load.buffer.i, i32 17
  %7617 = sext i32 %7616 to i64
  %7618 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7617
  %7619 = load i32, i32* %7618, align 4, !tbaa !400
  %7620 = insertelement <1024 x i32> %7615, i32 %7619, i32 17
  %7621 = extractelement <1024 x i32> %load.buffer.i, i32 18
  %7622 = sext i32 %7621 to i64
  %7623 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7622
  %7624 = load i32, i32* %7623, align 4, !tbaa !400
  %7625 = insertelement <1024 x i32> %7620, i32 %7624, i32 18
  %7626 = extractelement <1024 x i32> %load.buffer.i, i32 19
  %7627 = sext i32 %7626 to i64
  %7628 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7627
  %7629 = load i32, i32* %7628, align 4, !tbaa !400
  %7630 = insertelement <1024 x i32> %7625, i32 %7629, i32 19
  %7631 = extractelement <1024 x i32> %load.buffer.i, i32 20
  %7632 = sext i32 %7631 to i64
  %7633 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7632
  %7634 = load i32, i32* %7633, align 4, !tbaa !400
  %7635 = insertelement <1024 x i32> %7630, i32 %7634, i32 20
  %7636 = extractelement <1024 x i32> %load.buffer.i, i32 21
  %7637 = sext i32 %7636 to i64
  %7638 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7637
  %7639 = load i32, i32* %7638, align 4, !tbaa !400
  %7640 = insertelement <1024 x i32> %7635, i32 %7639, i32 21
  %7641 = extractelement <1024 x i32> %load.buffer.i, i32 22
  %7642 = sext i32 %7641 to i64
  %7643 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7642
  %7644 = load i32, i32* %7643, align 4, !tbaa !400
  %7645 = insertelement <1024 x i32> %7640, i32 %7644, i32 22
  %7646 = extractelement <1024 x i32> %load.buffer.i, i32 23
  %7647 = sext i32 %7646 to i64
  %7648 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7647
  %7649 = load i32, i32* %7648, align 4, !tbaa !400
  %7650 = insertelement <1024 x i32> %7645, i32 %7649, i32 23
  %7651 = extractelement <1024 x i32> %load.buffer.i, i32 24
  %7652 = sext i32 %7651 to i64
  %7653 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7652
  %7654 = load i32, i32* %7653, align 4, !tbaa !400
  %7655 = insertelement <1024 x i32> %7650, i32 %7654, i32 24
  %7656 = extractelement <1024 x i32> %load.buffer.i, i32 25
  %7657 = sext i32 %7656 to i64
  %7658 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7657
  %7659 = load i32, i32* %7658, align 4, !tbaa !400
  %7660 = insertelement <1024 x i32> %7655, i32 %7659, i32 25
  %7661 = extractelement <1024 x i32> %load.buffer.i, i32 26
  %7662 = sext i32 %7661 to i64
  %7663 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7662
  %7664 = load i32, i32* %7663, align 4, !tbaa !400
  %7665 = insertelement <1024 x i32> %7660, i32 %7664, i32 26
  %7666 = extractelement <1024 x i32> %load.buffer.i, i32 27
  %7667 = sext i32 %7666 to i64
  %7668 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7667
  %7669 = load i32, i32* %7668, align 4, !tbaa !400
  %7670 = insertelement <1024 x i32> %7665, i32 %7669, i32 27
  %7671 = extractelement <1024 x i32> %load.buffer.i, i32 28
  %7672 = sext i32 %7671 to i64
  %7673 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7672
  %7674 = load i32, i32* %7673, align 4, !tbaa !400
  %7675 = insertelement <1024 x i32> %7670, i32 %7674, i32 28
  %7676 = extractelement <1024 x i32> %load.buffer.i, i32 29
  %7677 = sext i32 %7676 to i64
  %7678 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7677
  %7679 = load i32, i32* %7678, align 4, !tbaa !400
  %7680 = insertelement <1024 x i32> %7675, i32 %7679, i32 29
  %7681 = extractelement <1024 x i32> %load.buffer.i, i32 30
  %7682 = sext i32 %7681 to i64
  %7683 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7682
  %7684 = load i32, i32* %7683, align 4, !tbaa !400
  %7685 = insertelement <1024 x i32> %7680, i32 %7684, i32 30
  %7686 = extractelement <1024 x i32> %load.buffer.i, i32 31
  %7687 = sext i32 %7686 to i64
  %7688 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7687
  %7689 = load i32, i32* %7688, align 4, !tbaa !400
  %7690 = insertelement <1024 x i32> %7685, i32 %7689, i32 31
  %7691 = extractelement <1024 x i32> %load.buffer.i, i32 32
  %7692 = sext i32 %7691 to i64
  %7693 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7692
  %7694 = load i32, i32* %7693, align 4, !tbaa !400
  %7695 = insertelement <1024 x i32> %7690, i32 %7694, i32 32
  %7696 = extractelement <1024 x i32> %load.buffer.i, i32 33
  %7697 = sext i32 %7696 to i64
  %7698 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7697
  %7699 = load i32, i32* %7698, align 4, !tbaa !400
  %7700 = insertelement <1024 x i32> %7695, i32 %7699, i32 33
  %7701 = extractelement <1024 x i32> %load.buffer.i, i32 34
  %7702 = sext i32 %7701 to i64
  %7703 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7702
  %7704 = load i32, i32* %7703, align 4, !tbaa !400
  %7705 = insertelement <1024 x i32> %7700, i32 %7704, i32 34
  %7706 = extractelement <1024 x i32> %load.buffer.i, i32 35
  %7707 = sext i32 %7706 to i64
  %7708 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7707
  %7709 = load i32, i32* %7708, align 4, !tbaa !400
  %7710 = insertelement <1024 x i32> %7705, i32 %7709, i32 35
  %7711 = extractelement <1024 x i32> %load.buffer.i, i32 36
  %7712 = sext i32 %7711 to i64
  %7713 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7712
  %7714 = load i32, i32* %7713, align 4, !tbaa !400
  %7715 = insertelement <1024 x i32> %7710, i32 %7714, i32 36
  %7716 = extractelement <1024 x i32> %load.buffer.i, i32 37
  %7717 = sext i32 %7716 to i64
  %7718 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7717
  %7719 = load i32, i32* %7718, align 4, !tbaa !400
  %7720 = insertelement <1024 x i32> %7715, i32 %7719, i32 37
  %7721 = extractelement <1024 x i32> %load.buffer.i, i32 38
  %7722 = sext i32 %7721 to i64
  %7723 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7722
  %7724 = load i32, i32* %7723, align 4, !tbaa !400
  %7725 = insertelement <1024 x i32> %7720, i32 %7724, i32 38
  %7726 = extractelement <1024 x i32> %load.buffer.i, i32 39
  %7727 = sext i32 %7726 to i64
  %7728 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7727
  %7729 = load i32, i32* %7728, align 4, !tbaa !400
  %7730 = insertelement <1024 x i32> %7725, i32 %7729, i32 39
  %7731 = extractelement <1024 x i32> %load.buffer.i, i32 40
  %7732 = sext i32 %7731 to i64
  %7733 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7732
  %7734 = load i32, i32* %7733, align 4, !tbaa !400
  %7735 = insertelement <1024 x i32> %7730, i32 %7734, i32 40
  %7736 = extractelement <1024 x i32> %load.buffer.i, i32 41
  %7737 = sext i32 %7736 to i64
  %7738 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7737
  %7739 = load i32, i32* %7738, align 4, !tbaa !400
  %7740 = insertelement <1024 x i32> %7735, i32 %7739, i32 41
  %7741 = extractelement <1024 x i32> %load.buffer.i, i32 42
  %7742 = sext i32 %7741 to i64
  %7743 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7742
  %7744 = load i32, i32* %7743, align 4, !tbaa !400
  %7745 = insertelement <1024 x i32> %7740, i32 %7744, i32 42
  %7746 = extractelement <1024 x i32> %load.buffer.i, i32 43
  %7747 = sext i32 %7746 to i64
  %7748 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7747
  %7749 = load i32, i32* %7748, align 4, !tbaa !400
  %7750 = insertelement <1024 x i32> %7745, i32 %7749, i32 43
  %7751 = extractelement <1024 x i32> %load.buffer.i, i32 44
  %7752 = sext i32 %7751 to i64
  %7753 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7752
  %7754 = load i32, i32* %7753, align 4, !tbaa !400
  %7755 = insertelement <1024 x i32> %7750, i32 %7754, i32 44
  %7756 = extractelement <1024 x i32> %load.buffer.i, i32 45
  %7757 = sext i32 %7756 to i64
  %7758 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7757
  %7759 = load i32, i32* %7758, align 4, !tbaa !400
  %7760 = insertelement <1024 x i32> %7755, i32 %7759, i32 45
  %7761 = extractelement <1024 x i32> %load.buffer.i, i32 46
  %7762 = sext i32 %7761 to i64
  %7763 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7762
  %7764 = load i32, i32* %7763, align 4, !tbaa !400
  %7765 = insertelement <1024 x i32> %7760, i32 %7764, i32 46
  %7766 = extractelement <1024 x i32> %load.buffer.i, i32 47
  %7767 = sext i32 %7766 to i64
  %7768 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7767
  %7769 = load i32, i32* %7768, align 4, !tbaa !400
  %7770 = insertelement <1024 x i32> %7765, i32 %7769, i32 47
  %7771 = extractelement <1024 x i32> %load.buffer.i, i32 48
  %7772 = sext i32 %7771 to i64
  %7773 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7772
  %7774 = load i32, i32* %7773, align 4, !tbaa !400
  %7775 = insertelement <1024 x i32> %7770, i32 %7774, i32 48
  %7776 = extractelement <1024 x i32> %load.buffer.i, i32 49
  %7777 = sext i32 %7776 to i64
  %7778 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7777
  %7779 = load i32, i32* %7778, align 4, !tbaa !400
  %7780 = insertelement <1024 x i32> %7775, i32 %7779, i32 49
  %7781 = extractelement <1024 x i32> %load.buffer.i, i32 50
  %7782 = sext i32 %7781 to i64
  %7783 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7782
  %7784 = load i32, i32* %7783, align 4, !tbaa !400
  %7785 = insertelement <1024 x i32> %7780, i32 %7784, i32 50
  %7786 = extractelement <1024 x i32> %load.buffer.i, i32 51
  %7787 = sext i32 %7786 to i64
  %7788 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7787
  %7789 = load i32, i32* %7788, align 4, !tbaa !400
  %7790 = insertelement <1024 x i32> %7785, i32 %7789, i32 51
  %7791 = extractelement <1024 x i32> %load.buffer.i, i32 52
  %7792 = sext i32 %7791 to i64
  %7793 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7792
  %7794 = load i32, i32* %7793, align 4, !tbaa !400
  %7795 = insertelement <1024 x i32> %7790, i32 %7794, i32 52
  %7796 = extractelement <1024 x i32> %load.buffer.i, i32 53
  %7797 = sext i32 %7796 to i64
  %7798 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7797
  %7799 = load i32, i32* %7798, align 4, !tbaa !400
  %7800 = insertelement <1024 x i32> %7795, i32 %7799, i32 53
  %7801 = extractelement <1024 x i32> %load.buffer.i, i32 54
  %7802 = sext i32 %7801 to i64
  %7803 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7802
  %7804 = load i32, i32* %7803, align 4, !tbaa !400
  %7805 = insertelement <1024 x i32> %7800, i32 %7804, i32 54
  %7806 = extractelement <1024 x i32> %load.buffer.i, i32 55
  %7807 = sext i32 %7806 to i64
  %7808 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7807
  %7809 = load i32, i32* %7808, align 4, !tbaa !400
  %7810 = insertelement <1024 x i32> %7805, i32 %7809, i32 55
  %7811 = extractelement <1024 x i32> %load.buffer.i, i32 56
  %7812 = sext i32 %7811 to i64
  %7813 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7812
  %7814 = load i32, i32* %7813, align 4, !tbaa !400
  %7815 = insertelement <1024 x i32> %7810, i32 %7814, i32 56
  %7816 = extractelement <1024 x i32> %load.buffer.i, i32 57
  %7817 = sext i32 %7816 to i64
  %7818 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7817
  %7819 = load i32, i32* %7818, align 4, !tbaa !400
  %7820 = insertelement <1024 x i32> %7815, i32 %7819, i32 57
  %7821 = extractelement <1024 x i32> %load.buffer.i, i32 58
  %7822 = sext i32 %7821 to i64
  %7823 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7822
  %7824 = load i32, i32* %7823, align 4, !tbaa !400
  %7825 = insertelement <1024 x i32> %7820, i32 %7824, i32 58
  %7826 = extractelement <1024 x i32> %load.buffer.i, i32 59
  %7827 = sext i32 %7826 to i64
  %7828 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7827
  %7829 = load i32, i32* %7828, align 4, !tbaa !400
  %7830 = insertelement <1024 x i32> %7825, i32 %7829, i32 59
  %7831 = extractelement <1024 x i32> %load.buffer.i, i32 60
  %7832 = sext i32 %7831 to i64
  %7833 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7832
  %7834 = load i32, i32* %7833, align 4, !tbaa !400
  %7835 = insertelement <1024 x i32> %7830, i32 %7834, i32 60
  %7836 = extractelement <1024 x i32> %load.buffer.i, i32 61
  %7837 = sext i32 %7836 to i64
  %7838 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7837
  %7839 = load i32, i32* %7838, align 4, !tbaa !400
  %7840 = insertelement <1024 x i32> %7835, i32 %7839, i32 61
  %7841 = extractelement <1024 x i32> %load.buffer.i, i32 62
  %7842 = sext i32 %7841 to i64
  %7843 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7842
  %7844 = load i32, i32* %7843, align 4, !tbaa !400
  %7845 = insertelement <1024 x i32> %7840, i32 %7844, i32 62
  %7846 = extractelement <1024 x i32> %load.buffer.i, i32 63
  %7847 = sext i32 %7846 to i64
  %7848 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7847
  %7849 = load i32, i32* %7848, align 4, !tbaa !400
  %7850 = insertelement <1024 x i32> %7845, i32 %7849, i32 63
  %7851 = extractelement <1024 x i32> %load.buffer.i, i32 64
  %7852 = sext i32 %7851 to i64
  %7853 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7852
  %7854 = load i32, i32* %7853, align 4, !tbaa !400
  %7855 = insertelement <1024 x i32> %7850, i32 %7854, i32 64
  %7856 = extractelement <1024 x i32> %load.buffer.i, i32 65
  %7857 = sext i32 %7856 to i64
  %7858 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7857
  %7859 = load i32, i32* %7858, align 4, !tbaa !400
  %7860 = insertelement <1024 x i32> %7855, i32 %7859, i32 65
  %7861 = extractelement <1024 x i32> %load.buffer.i, i32 66
  %7862 = sext i32 %7861 to i64
  %7863 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7862
  %7864 = load i32, i32* %7863, align 4, !tbaa !400
  %7865 = insertelement <1024 x i32> %7860, i32 %7864, i32 66
  %7866 = extractelement <1024 x i32> %load.buffer.i, i32 67
  %7867 = sext i32 %7866 to i64
  %7868 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7867
  %7869 = load i32, i32* %7868, align 4, !tbaa !400
  %7870 = insertelement <1024 x i32> %7865, i32 %7869, i32 67
  %7871 = extractelement <1024 x i32> %load.buffer.i, i32 68
  %7872 = sext i32 %7871 to i64
  %7873 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7872
  %7874 = load i32, i32* %7873, align 4, !tbaa !400
  %7875 = insertelement <1024 x i32> %7870, i32 %7874, i32 68
  %7876 = extractelement <1024 x i32> %load.buffer.i, i32 69
  %7877 = sext i32 %7876 to i64
  %7878 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7877
  %7879 = load i32, i32* %7878, align 4, !tbaa !400
  %7880 = insertelement <1024 x i32> %7875, i32 %7879, i32 69
  %7881 = extractelement <1024 x i32> %load.buffer.i, i32 70
  %7882 = sext i32 %7881 to i64
  %7883 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7882
  %7884 = load i32, i32* %7883, align 4, !tbaa !400
  %7885 = insertelement <1024 x i32> %7880, i32 %7884, i32 70
  %7886 = extractelement <1024 x i32> %load.buffer.i, i32 71
  %7887 = sext i32 %7886 to i64
  %7888 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7887
  %7889 = load i32, i32* %7888, align 4, !tbaa !400
  %7890 = insertelement <1024 x i32> %7885, i32 %7889, i32 71
  %7891 = extractelement <1024 x i32> %load.buffer.i, i32 72
  %7892 = sext i32 %7891 to i64
  %7893 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7892
  %7894 = load i32, i32* %7893, align 4, !tbaa !400
  %7895 = insertelement <1024 x i32> %7890, i32 %7894, i32 72
  %7896 = extractelement <1024 x i32> %load.buffer.i, i32 73
  %7897 = sext i32 %7896 to i64
  %7898 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7897
  %7899 = load i32, i32* %7898, align 4, !tbaa !400
  %7900 = insertelement <1024 x i32> %7895, i32 %7899, i32 73
  %7901 = extractelement <1024 x i32> %load.buffer.i, i32 74
  %7902 = sext i32 %7901 to i64
  %7903 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7902
  %7904 = load i32, i32* %7903, align 4, !tbaa !400
  %7905 = insertelement <1024 x i32> %7900, i32 %7904, i32 74
  %7906 = extractelement <1024 x i32> %load.buffer.i, i32 75
  %7907 = sext i32 %7906 to i64
  %7908 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7907
  %7909 = load i32, i32* %7908, align 4, !tbaa !400
  %7910 = insertelement <1024 x i32> %7905, i32 %7909, i32 75
  %7911 = extractelement <1024 x i32> %load.buffer.i, i32 76
  %7912 = sext i32 %7911 to i64
  %7913 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7912
  %7914 = load i32, i32* %7913, align 4, !tbaa !400
  %7915 = insertelement <1024 x i32> %7910, i32 %7914, i32 76
  %7916 = extractelement <1024 x i32> %load.buffer.i, i32 77
  %7917 = sext i32 %7916 to i64
  %7918 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7917
  %7919 = load i32, i32* %7918, align 4, !tbaa !400
  %7920 = insertelement <1024 x i32> %7915, i32 %7919, i32 77
  %7921 = extractelement <1024 x i32> %load.buffer.i, i32 78
  %7922 = sext i32 %7921 to i64
  %7923 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7922
  %7924 = load i32, i32* %7923, align 4, !tbaa !400
  %7925 = insertelement <1024 x i32> %7920, i32 %7924, i32 78
  %7926 = extractelement <1024 x i32> %load.buffer.i, i32 79
  %7927 = sext i32 %7926 to i64
  %7928 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7927
  %7929 = load i32, i32* %7928, align 4, !tbaa !400
  %7930 = insertelement <1024 x i32> %7925, i32 %7929, i32 79
  %7931 = extractelement <1024 x i32> %load.buffer.i, i32 80
  %7932 = sext i32 %7931 to i64
  %7933 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7932
  %7934 = load i32, i32* %7933, align 4, !tbaa !400
  %7935 = insertelement <1024 x i32> %7930, i32 %7934, i32 80
  %7936 = extractelement <1024 x i32> %load.buffer.i, i32 81
  %7937 = sext i32 %7936 to i64
  %7938 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7937
  %7939 = load i32, i32* %7938, align 4, !tbaa !400
  %7940 = insertelement <1024 x i32> %7935, i32 %7939, i32 81
  %7941 = extractelement <1024 x i32> %load.buffer.i, i32 82
  %7942 = sext i32 %7941 to i64
  %7943 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7942
  %7944 = load i32, i32* %7943, align 4, !tbaa !400
  %7945 = insertelement <1024 x i32> %7940, i32 %7944, i32 82
  %7946 = extractelement <1024 x i32> %load.buffer.i, i32 83
  %7947 = sext i32 %7946 to i64
  %7948 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7947
  %7949 = load i32, i32* %7948, align 4, !tbaa !400
  %7950 = insertelement <1024 x i32> %7945, i32 %7949, i32 83
  %7951 = extractelement <1024 x i32> %load.buffer.i, i32 84
  %7952 = sext i32 %7951 to i64
  %7953 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7952
  %7954 = load i32, i32* %7953, align 4, !tbaa !400
  %7955 = insertelement <1024 x i32> %7950, i32 %7954, i32 84
  %7956 = extractelement <1024 x i32> %load.buffer.i, i32 85
  %7957 = sext i32 %7956 to i64
  %7958 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7957
  %7959 = load i32, i32* %7958, align 4, !tbaa !400
  %7960 = insertelement <1024 x i32> %7955, i32 %7959, i32 85
  %7961 = extractelement <1024 x i32> %load.buffer.i, i32 86
  %7962 = sext i32 %7961 to i64
  %7963 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7962
  %7964 = load i32, i32* %7963, align 4, !tbaa !400
  %7965 = insertelement <1024 x i32> %7960, i32 %7964, i32 86
  %7966 = extractelement <1024 x i32> %load.buffer.i, i32 87
  %7967 = sext i32 %7966 to i64
  %7968 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7967
  %7969 = load i32, i32* %7968, align 4, !tbaa !400
  %7970 = insertelement <1024 x i32> %7965, i32 %7969, i32 87
  %7971 = extractelement <1024 x i32> %load.buffer.i, i32 88
  %7972 = sext i32 %7971 to i64
  %7973 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7972
  %7974 = load i32, i32* %7973, align 4, !tbaa !400
  %7975 = insertelement <1024 x i32> %7970, i32 %7974, i32 88
  %7976 = extractelement <1024 x i32> %load.buffer.i, i32 89
  %7977 = sext i32 %7976 to i64
  %7978 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7977
  %7979 = load i32, i32* %7978, align 4, !tbaa !400
  %7980 = insertelement <1024 x i32> %7975, i32 %7979, i32 89
  %7981 = extractelement <1024 x i32> %load.buffer.i, i32 90
  %7982 = sext i32 %7981 to i64
  %7983 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7982
  %7984 = load i32, i32* %7983, align 4, !tbaa !400
  %7985 = insertelement <1024 x i32> %7980, i32 %7984, i32 90
  %7986 = extractelement <1024 x i32> %load.buffer.i, i32 91
  %7987 = sext i32 %7986 to i64
  %7988 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7987
  %7989 = load i32, i32* %7988, align 4, !tbaa !400
  %7990 = insertelement <1024 x i32> %7985, i32 %7989, i32 91
  %7991 = extractelement <1024 x i32> %load.buffer.i, i32 92
  %7992 = sext i32 %7991 to i64
  %7993 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7992
  %7994 = load i32, i32* %7993, align 4, !tbaa !400
  %7995 = insertelement <1024 x i32> %7990, i32 %7994, i32 92
  %7996 = extractelement <1024 x i32> %load.buffer.i, i32 93
  %7997 = sext i32 %7996 to i64
  %7998 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %7997
  %7999 = load i32, i32* %7998, align 4, !tbaa !400
  %8000 = insertelement <1024 x i32> %7995, i32 %7999, i32 93
  %8001 = extractelement <1024 x i32> %load.buffer.i, i32 94
  %8002 = sext i32 %8001 to i64
  %8003 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8002
  %8004 = load i32, i32* %8003, align 4, !tbaa !400
  %8005 = insertelement <1024 x i32> %8000, i32 %8004, i32 94
  %8006 = extractelement <1024 x i32> %load.buffer.i, i32 95
  %8007 = sext i32 %8006 to i64
  %8008 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8007
  %8009 = load i32, i32* %8008, align 4, !tbaa !400
  %8010 = insertelement <1024 x i32> %8005, i32 %8009, i32 95
  %8011 = extractelement <1024 x i32> %load.buffer.i, i32 96
  %8012 = sext i32 %8011 to i64
  %8013 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8012
  %8014 = load i32, i32* %8013, align 4, !tbaa !400
  %8015 = insertelement <1024 x i32> %8010, i32 %8014, i32 96
  %8016 = extractelement <1024 x i32> %load.buffer.i, i32 97
  %8017 = sext i32 %8016 to i64
  %8018 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8017
  %8019 = load i32, i32* %8018, align 4, !tbaa !400
  %8020 = insertelement <1024 x i32> %8015, i32 %8019, i32 97
  %8021 = extractelement <1024 x i32> %load.buffer.i, i32 98
  %8022 = sext i32 %8021 to i64
  %8023 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8022
  %8024 = load i32, i32* %8023, align 4, !tbaa !400
  %8025 = insertelement <1024 x i32> %8020, i32 %8024, i32 98
  %8026 = extractelement <1024 x i32> %load.buffer.i, i32 99
  %8027 = sext i32 %8026 to i64
  %8028 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8027
  %8029 = load i32, i32* %8028, align 4, !tbaa !400
  %8030 = insertelement <1024 x i32> %8025, i32 %8029, i32 99
  %8031 = extractelement <1024 x i32> %load.buffer.i, i32 100
  %8032 = sext i32 %8031 to i64
  %8033 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8032
  %8034 = load i32, i32* %8033, align 4, !tbaa !400
  %8035 = insertelement <1024 x i32> %8030, i32 %8034, i32 100
  %8036 = extractelement <1024 x i32> %load.buffer.i, i32 101
  %8037 = sext i32 %8036 to i64
  %8038 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8037
  %8039 = load i32, i32* %8038, align 4, !tbaa !400
  %8040 = insertelement <1024 x i32> %8035, i32 %8039, i32 101
  %8041 = extractelement <1024 x i32> %load.buffer.i, i32 102
  %8042 = sext i32 %8041 to i64
  %8043 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8042
  %8044 = load i32, i32* %8043, align 4, !tbaa !400
  %8045 = insertelement <1024 x i32> %8040, i32 %8044, i32 102
  %8046 = extractelement <1024 x i32> %load.buffer.i, i32 103
  %8047 = sext i32 %8046 to i64
  %8048 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8047
  %8049 = load i32, i32* %8048, align 4, !tbaa !400
  %8050 = insertelement <1024 x i32> %8045, i32 %8049, i32 103
  %8051 = extractelement <1024 x i32> %load.buffer.i, i32 104
  %8052 = sext i32 %8051 to i64
  %8053 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8052
  %8054 = load i32, i32* %8053, align 4, !tbaa !400
  %8055 = insertelement <1024 x i32> %8050, i32 %8054, i32 104
  %8056 = extractelement <1024 x i32> %load.buffer.i, i32 105
  %8057 = sext i32 %8056 to i64
  %8058 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8057
  %8059 = load i32, i32* %8058, align 4, !tbaa !400
  %8060 = insertelement <1024 x i32> %8055, i32 %8059, i32 105
  %8061 = extractelement <1024 x i32> %load.buffer.i, i32 106
  %8062 = sext i32 %8061 to i64
  %8063 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8062
  %8064 = load i32, i32* %8063, align 4, !tbaa !400
  %8065 = insertelement <1024 x i32> %8060, i32 %8064, i32 106
  %8066 = extractelement <1024 x i32> %load.buffer.i, i32 107
  %8067 = sext i32 %8066 to i64
  %8068 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8067
  %8069 = load i32, i32* %8068, align 4, !tbaa !400
  %8070 = insertelement <1024 x i32> %8065, i32 %8069, i32 107
  %8071 = extractelement <1024 x i32> %load.buffer.i, i32 108
  %8072 = sext i32 %8071 to i64
  %8073 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8072
  %8074 = load i32, i32* %8073, align 4, !tbaa !400
  %8075 = insertelement <1024 x i32> %8070, i32 %8074, i32 108
  %8076 = extractelement <1024 x i32> %load.buffer.i, i32 109
  %8077 = sext i32 %8076 to i64
  %8078 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8077
  %8079 = load i32, i32* %8078, align 4, !tbaa !400
  %8080 = insertelement <1024 x i32> %8075, i32 %8079, i32 109
  %8081 = extractelement <1024 x i32> %load.buffer.i, i32 110
  %8082 = sext i32 %8081 to i64
  %8083 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8082
  %8084 = load i32, i32* %8083, align 4, !tbaa !400
  %8085 = insertelement <1024 x i32> %8080, i32 %8084, i32 110
  %8086 = extractelement <1024 x i32> %load.buffer.i, i32 111
  %8087 = sext i32 %8086 to i64
  %8088 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8087
  %8089 = load i32, i32* %8088, align 4, !tbaa !400
  %8090 = insertelement <1024 x i32> %8085, i32 %8089, i32 111
  %8091 = extractelement <1024 x i32> %load.buffer.i, i32 112
  %8092 = sext i32 %8091 to i64
  %8093 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8092
  %8094 = load i32, i32* %8093, align 4, !tbaa !400
  %8095 = insertelement <1024 x i32> %8090, i32 %8094, i32 112
  %8096 = extractelement <1024 x i32> %load.buffer.i, i32 113
  %8097 = sext i32 %8096 to i64
  %8098 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8097
  %8099 = load i32, i32* %8098, align 4, !tbaa !400
  %8100 = insertelement <1024 x i32> %8095, i32 %8099, i32 113
  %8101 = extractelement <1024 x i32> %load.buffer.i, i32 114
  %8102 = sext i32 %8101 to i64
  %8103 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8102
  %8104 = load i32, i32* %8103, align 4, !tbaa !400
  %8105 = insertelement <1024 x i32> %8100, i32 %8104, i32 114
  %8106 = extractelement <1024 x i32> %load.buffer.i, i32 115
  %8107 = sext i32 %8106 to i64
  %8108 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8107
  %8109 = load i32, i32* %8108, align 4, !tbaa !400
  %8110 = insertelement <1024 x i32> %8105, i32 %8109, i32 115
  %8111 = extractelement <1024 x i32> %load.buffer.i, i32 116
  %8112 = sext i32 %8111 to i64
  %8113 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8112
  %8114 = load i32, i32* %8113, align 4, !tbaa !400
  %8115 = insertelement <1024 x i32> %8110, i32 %8114, i32 116
  %8116 = extractelement <1024 x i32> %load.buffer.i, i32 117
  %8117 = sext i32 %8116 to i64
  %8118 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8117
  %8119 = load i32, i32* %8118, align 4, !tbaa !400
  %8120 = insertelement <1024 x i32> %8115, i32 %8119, i32 117
  %8121 = extractelement <1024 x i32> %load.buffer.i, i32 118
  %8122 = sext i32 %8121 to i64
  %8123 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8122
  %8124 = load i32, i32* %8123, align 4, !tbaa !400
  %8125 = insertelement <1024 x i32> %8120, i32 %8124, i32 118
  %8126 = extractelement <1024 x i32> %load.buffer.i, i32 119
  %8127 = sext i32 %8126 to i64
  %8128 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8127
  %8129 = load i32, i32* %8128, align 4, !tbaa !400
  %8130 = insertelement <1024 x i32> %8125, i32 %8129, i32 119
  %8131 = extractelement <1024 x i32> %load.buffer.i, i32 120
  %8132 = sext i32 %8131 to i64
  %8133 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8132
  %8134 = load i32, i32* %8133, align 4, !tbaa !400
  %8135 = insertelement <1024 x i32> %8130, i32 %8134, i32 120
  %8136 = extractelement <1024 x i32> %load.buffer.i, i32 121
  %8137 = sext i32 %8136 to i64
  %8138 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8137
  %8139 = load i32, i32* %8138, align 4, !tbaa !400
  %8140 = insertelement <1024 x i32> %8135, i32 %8139, i32 121
  %8141 = extractelement <1024 x i32> %load.buffer.i, i32 122
  %8142 = sext i32 %8141 to i64
  %8143 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8142
  %8144 = load i32, i32* %8143, align 4, !tbaa !400
  %8145 = insertelement <1024 x i32> %8140, i32 %8144, i32 122
  %8146 = extractelement <1024 x i32> %load.buffer.i, i32 123
  %8147 = sext i32 %8146 to i64
  %8148 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8147
  %8149 = load i32, i32* %8148, align 4, !tbaa !400
  %8150 = insertelement <1024 x i32> %8145, i32 %8149, i32 123
  %8151 = extractelement <1024 x i32> %load.buffer.i, i32 124
  %8152 = sext i32 %8151 to i64
  %8153 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8152
  %8154 = load i32, i32* %8153, align 4, !tbaa !400
  %8155 = insertelement <1024 x i32> %8150, i32 %8154, i32 124
  %8156 = extractelement <1024 x i32> %load.buffer.i, i32 125
  %8157 = sext i32 %8156 to i64
  %8158 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8157
  %8159 = load i32, i32* %8158, align 4, !tbaa !400
  %8160 = insertelement <1024 x i32> %8155, i32 %8159, i32 125
  %8161 = extractelement <1024 x i32> %load.buffer.i, i32 126
  %8162 = sext i32 %8161 to i64
  %8163 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8162
  %8164 = load i32, i32* %8163, align 4, !tbaa !400
  %8165 = insertelement <1024 x i32> %8160, i32 %8164, i32 126
  %8166 = extractelement <1024 x i32> %load.buffer.i, i32 127
  %8167 = sext i32 %8166 to i64
  %8168 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8167
  %8169 = load i32, i32* %8168, align 4, !tbaa !400
  %8170 = insertelement <1024 x i32> %8165, i32 %8169, i32 127
  %8171 = extractelement <1024 x i32> %load.buffer.i, i32 128
  %8172 = sext i32 %8171 to i64
  %8173 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8172
  %8174 = load i32, i32* %8173, align 4, !tbaa !400
  %8175 = insertelement <1024 x i32> %8170, i32 %8174, i32 128
  %8176 = extractelement <1024 x i32> %load.buffer.i, i32 129
  %8177 = sext i32 %8176 to i64
  %8178 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8177
  %8179 = load i32, i32* %8178, align 4, !tbaa !400
  %8180 = insertelement <1024 x i32> %8175, i32 %8179, i32 129
  %8181 = extractelement <1024 x i32> %load.buffer.i, i32 130
  %8182 = sext i32 %8181 to i64
  %8183 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8182
  %8184 = load i32, i32* %8183, align 4, !tbaa !400
  %8185 = insertelement <1024 x i32> %8180, i32 %8184, i32 130
  %8186 = extractelement <1024 x i32> %load.buffer.i, i32 131
  %8187 = sext i32 %8186 to i64
  %8188 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8187
  %8189 = load i32, i32* %8188, align 4, !tbaa !400
  %8190 = insertelement <1024 x i32> %8185, i32 %8189, i32 131
  %8191 = extractelement <1024 x i32> %load.buffer.i, i32 132
  %8192 = sext i32 %8191 to i64
  %8193 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8192
  %8194 = load i32, i32* %8193, align 4, !tbaa !400
  %8195 = insertelement <1024 x i32> %8190, i32 %8194, i32 132
  %8196 = extractelement <1024 x i32> %load.buffer.i, i32 133
  %8197 = sext i32 %8196 to i64
  %8198 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8197
  %8199 = load i32, i32* %8198, align 4, !tbaa !400
  %8200 = insertelement <1024 x i32> %8195, i32 %8199, i32 133
  %8201 = extractelement <1024 x i32> %load.buffer.i, i32 134
  %8202 = sext i32 %8201 to i64
  %8203 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8202
  %8204 = load i32, i32* %8203, align 4, !tbaa !400
  %8205 = insertelement <1024 x i32> %8200, i32 %8204, i32 134
  %8206 = extractelement <1024 x i32> %load.buffer.i, i32 135
  %8207 = sext i32 %8206 to i64
  %8208 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8207
  %8209 = load i32, i32* %8208, align 4, !tbaa !400
  %8210 = insertelement <1024 x i32> %8205, i32 %8209, i32 135
  %8211 = extractelement <1024 x i32> %load.buffer.i, i32 136
  %8212 = sext i32 %8211 to i64
  %8213 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8212
  %8214 = load i32, i32* %8213, align 4, !tbaa !400
  %8215 = insertelement <1024 x i32> %8210, i32 %8214, i32 136
  %8216 = extractelement <1024 x i32> %load.buffer.i, i32 137
  %8217 = sext i32 %8216 to i64
  %8218 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8217
  %8219 = load i32, i32* %8218, align 4, !tbaa !400
  %8220 = insertelement <1024 x i32> %8215, i32 %8219, i32 137
  %8221 = extractelement <1024 x i32> %load.buffer.i, i32 138
  %8222 = sext i32 %8221 to i64
  %8223 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8222
  %8224 = load i32, i32* %8223, align 4, !tbaa !400
  %8225 = insertelement <1024 x i32> %8220, i32 %8224, i32 138
  %8226 = extractelement <1024 x i32> %load.buffer.i, i32 139
  %8227 = sext i32 %8226 to i64
  %8228 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8227
  %8229 = load i32, i32* %8228, align 4, !tbaa !400
  %8230 = insertelement <1024 x i32> %8225, i32 %8229, i32 139
  %8231 = extractelement <1024 x i32> %load.buffer.i, i32 140
  %8232 = sext i32 %8231 to i64
  %8233 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8232
  %8234 = load i32, i32* %8233, align 4, !tbaa !400
  %8235 = insertelement <1024 x i32> %8230, i32 %8234, i32 140
  %8236 = extractelement <1024 x i32> %load.buffer.i, i32 141
  %8237 = sext i32 %8236 to i64
  %8238 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8237
  %8239 = load i32, i32* %8238, align 4, !tbaa !400
  %8240 = insertelement <1024 x i32> %8235, i32 %8239, i32 141
  %8241 = extractelement <1024 x i32> %load.buffer.i, i32 142
  %8242 = sext i32 %8241 to i64
  %8243 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8242
  %8244 = load i32, i32* %8243, align 4, !tbaa !400
  %8245 = insertelement <1024 x i32> %8240, i32 %8244, i32 142
  %8246 = extractelement <1024 x i32> %load.buffer.i, i32 143
  %8247 = sext i32 %8246 to i64
  %8248 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8247
  %8249 = load i32, i32* %8248, align 4, !tbaa !400
  %8250 = insertelement <1024 x i32> %8245, i32 %8249, i32 143
  %8251 = extractelement <1024 x i32> %load.buffer.i, i32 144
  %8252 = sext i32 %8251 to i64
  %8253 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8252
  %8254 = load i32, i32* %8253, align 4, !tbaa !400
  %8255 = insertelement <1024 x i32> %8250, i32 %8254, i32 144
  %8256 = extractelement <1024 x i32> %load.buffer.i, i32 145
  %8257 = sext i32 %8256 to i64
  %8258 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8257
  %8259 = load i32, i32* %8258, align 4, !tbaa !400
  %8260 = insertelement <1024 x i32> %8255, i32 %8259, i32 145
  %8261 = extractelement <1024 x i32> %load.buffer.i, i32 146
  %8262 = sext i32 %8261 to i64
  %8263 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8262
  %8264 = load i32, i32* %8263, align 4, !tbaa !400
  %8265 = insertelement <1024 x i32> %8260, i32 %8264, i32 146
  %8266 = extractelement <1024 x i32> %load.buffer.i, i32 147
  %8267 = sext i32 %8266 to i64
  %8268 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8267
  %8269 = load i32, i32* %8268, align 4, !tbaa !400
  %8270 = insertelement <1024 x i32> %8265, i32 %8269, i32 147
  %8271 = extractelement <1024 x i32> %load.buffer.i, i32 148
  %8272 = sext i32 %8271 to i64
  %8273 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8272
  %8274 = load i32, i32* %8273, align 4, !tbaa !400
  %8275 = insertelement <1024 x i32> %8270, i32 %8274, i32 148
  %8276 = extractelement <1024 x i32> %load.buffer.i, i32 149
  %8277 = sext i32 %8276 to i64
  %8278 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8277
  %8279 = load i32, i32* %8278, align 4, !tbaa !400
  %8280 = insertelement <1024 x i32> %8275, i32 %8279, i32 149
  %8281 = extractelement <1024 x i32> %load.buffer.i, i32 150
  %8282 = sext i32 %8281 to i64
  %8283 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8282
  %8284 = load i32, i32* %8283, align 4, !tbaa !400
  %8285 = insertelement <1024 x i32> %8280, i32 %8284, i32 150
  %8286 = extractelement <1024 x i32> %load.buffer.i, i32 151
  %8287 = sext i32 %8286 to i64
  %8288 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8287
  %8289 = load i32, i32* %8288, align 4, !tbaa !400
  %8290 = insertelement <1024 x i32> %8285, i32 %8289, i32 151
  %8291 = extractelement <1024 x i32> %load.buffer.i, i32 152
  %8292 = sext i32 %8291 to i64
  %8293 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8292
  %8294 = load i32, i32* %8293, align 4, !tbaa !400
  %8295 = insertelement <1024 x i32> %8290, i32 %8294, i32 152
  %8296 = extractelement <1024 x i32> %load.buffer.i, i32 153
  %8297 = sext i32 %8296 to i64
  %8298 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8297
  %8299 = load i32, i32* %8298, align 4, !tbaa !400
  %8300 = insertelement <1024 x i32> %8295, i32 %8299, i32 153
  %8301 = extractelement <1024 x i32> %load.buffer.i, i32 154
  %8302 = sext i32 %8301 to i64
  %8303 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8302
  %8304 = load i32, i32* %8303, align 4, !tbaa !400
  %8305 = insertelement <1024 x i32> %8300, i32 %8304, i32 154
  %8306 = extractelement <1024 x i32> %load.buffer.i, i32 155
  %8307 = sext i32 %8306 to i64
  %8308 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8307
  %8309 = load i32, i32* %8308, align 4, !tbaa !400
  %8310 = insertelement <1024 x i32> %8305, i32 %8309, i32 155
  %8311 = extractelement <1024 x i32> %load.buffer.i, i32 156
  %8312 = sext i32 %8311 to i64
  %8313 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8312
  %8314 = load i32, i32* %8313, align 4, !tbaa !400
  %8315 = insertelement <1024 x i32> %8310, i32 %8314, i32 156
  %8316 = extractelement <1024 x i32> %load.buffer.i, i32 157
  %8317 = sext i32 %8316 to i64
  %8318 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8317
  %8319 = load i32, i32* %8318, align 4, !tbaa !400
  %8320 = insertelement <1024 x i32> %8315, i32 %8319, i32 157
  %8321 = extractelement <1024 x i32> %load.buffer.i, i32 158
  %8322 = sext i32 %8321 to i64
  %8323 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8322
  %8324 = load i32, i32* %8323, align 4, !tbaa !400
  %8325 = insertelement <1024 x i32> %8320, i32 %8324, i32 158
  %8326 = extractelement <1024 x i32> %load.buffer.i, i32 159
  %8327 = sext i32 %8326 to i64
  %8328 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8327
  %8329 = load i32, i32* %8328, align 4, !tbaa !400
  %8330 = insertelement <1024 x i32> %8325, i32 %8329, i32 159
  %8331 = extractelement <1024 x i32> %load.buffer.i, i32 160
  %8332 = sext i32 %8331 to i64
  %8333 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8332
  %8334 = load i32, i32* %8333, align 4, !tbaa !400
  %8335 = insertelement <1024 x i32> %8330, i32 %8334, i32 160
  %8336 = extractelement <1024 x i32> %load.buffer.i, i32 161
  %8337 = sext i32 %8336 to i64
  %8338 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8337
  %8339 = load i32, i32* %8338, align 4, !tbaa !400
  %8340 = insertelement <1024 x i32> %8335, i32 %8339, i32 161
  %8341 = extractelement <1024 x i32> %load.buffer.i, i32 162
  %8342 = sext i32 %8341 to i64
  %8343 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8342
  %8344 = load i32, i32* %8343, align 4, !tbaa !400
  %8345 = insertelement <1024 x i32> %8340, i32 %8344, i32 162
  %8346 = extractelement <1024 x i32> %load.buffer.i, i32 163
  %8347 = sext i32 %8346 to i64
  %8348 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8347
  %8349 = load i32, i32* %8348, align 4, !tbaa !400
  %8350 = insertelement <1024 x i32> %8345, i32 %8349, i32 163
  %8351 = extractelement <1024 x i32> %load.buffer.i, i32 164
  %8352 = sext i32 %8351 to i64
  %8353 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8352
  %8354 = load i32, i32* %8353, align 4, !tbaa !400
  %8355 = insertelement <1024 x i32> %8350, i32 %8354, i32 164
  %8356 = extractelement <1024 x i32> %load.buffer.i, i32 165
  %8357 = sext i32 %8356 to i64
  %8358 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8357
  %8359 = load i32, i32* %8358, align 4, !tbaa !400
  %8360 = insertelement <1024 x i32> %8355, i32 %8359, i32 165
  %8361 = extractelement <1024 x i32> %load.buffer.i, i32 166
  %8362 = sext i32 %8361 to i64
  %8363 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8362
  %8364 = load i32, i32* %8363, align 4, !tbaa !400
  %8365 = insertelement <1024 x i32> %8360, i32 %8364, i32 166
  %8366 = extractelement <1024 x i32> %load.buffer.i, i32 167
  %8367 = sext i32 %8366 to i64
  %8368 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8367
  %8369 = load i32, i32* %8368, align 4, !tbaa !400
  %8370 = insertelement <1024 x i32> %8365, i32 %8369, i32 167
  %8371 = extractelement <1024 x i32> %load.buffer.i, i32 168
  %8372 = sext i32 %8371 to i64
  %8373 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8372
  %8374 = load i32, i32* %8373, align 4, !tbaa !400
  %8375 = insertelement <1024 x i32> %8370, i32 %8374, i32 168
  %8376 = extractelement <1024 x i32> %load.buffer.i, i32 169
  %8377 = sext i32 %8376 to i64
  %8378 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8377
  %8379 = load i32, i32* %8378, align 4, !tbaa !400
  %8380 = insertelement <1024 x i32> %8375, i32 %8379, i32 169
  %8381 = extractelement <1024 x i32> %load.buffer.i, i32 170
  %8382 = sext i32 %8381 to i64
  %8383 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8382
  %8384 = load i32, i32* %8383, align 4, !tbaa !400
  %8385 = insertelement <1024 x i32> %8380, i32 %8384, i32 170
  %8386 = extractelement <1024 x i32> %load.buffer.i, i32 171
  %8387 = sext i32 %8386 to i64
  %8388 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8387
  %8389 = load i32, i32* %8388, align 4, !tbaa !400
  %8390 = insertelement <1024 x i32> %8385, i32 %8389, i32 171
  %8391 = extractelement <1024 x i32> %load.buffer.i, i32 172
  %8392 = sext i32 %8391 to i64
  %8393 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8392
  %8394 = load i32, i32* %8393, align 4, !tbaa !400
  %8395 = insertelement <1024 x i32> %8390, i32 %8394, i32 172
  %8396 = extractelement <1024 x i32> %load.buffer.i, i32 173
  %8397 = sext i32 %8396 to i64
  %8398 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8397
  %8399 = load i32, i32* %8398, align 4, !tbaa !400
  %8400 = insertelement <1024 x i32> %8395, i32 %8399, i32 173
  %8401 = extractelement <1024 x i32> %load.buffer.i, i32 174
  %8402 = sext i32 %8401 to i64
  %8403 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8402
  %8404 = load i32, i32* %8403, align 4, !tbaa !400
  %8405 = insertelement <1024 x i32> %8400, i32 %8404, i32 174
  %8406 = extractelement <1024 x i32> %load.buffer.i, i32 175
  %8407 = sext i32 %8406 to i64
  %8408 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8407
  %8409 = load i32, i32* %8408, align 4, !tbaa !400
  %8410 = insertelement <1024 x i32> %8405, i32 %8409, i32 175
  %8411 = extractelement <1024 x i32> %load.buffer.i, i32 176
  %8412 = sext i32 %8411 to i64
  %8413 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8412
  %8414 = load i32, i32* %8413, align 4, !tbaa !400
  %8415 = insertelement <1024 x i32> %8410, i32 %8414, i32 176
  %8416 = extractelement <1024 x i32> %load.buffer.i, i32 177
  %8417 = sext i32 %8416 to i64
  %8418 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8417
  %8419 = load i32, i32* %8418, align 4, !tbaa !400
  %8420 = insertelement <1024 x i32> %8415, i32 %8419, i32 177
  %8421 = extractelement <1024 x i32> %load.buffer.i, i32 178
  %8422 = sext i32 %8421 to i64
  %8423 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8422
  %8424 = load i32, i32* %8423, align 4, !tbaa !400
  %8425 = insertelement <1024 x i32> %8420, i32 %8424, i32 178
  %8426 = extractelement <1024 x i32> %load.buffer.i, i32 179
  %8427 = sext i32 %8426 to i64
  %8428 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8427
  %8429 = load i32, i32* %8428, align 4, !tbaa !400
  %8430 = insertelement <1024 x i32> %8425, i32 %8429, i32 179
  %8431 = extractelement <1024 x i32> %load.buffer.i, i32 180
  %8432 = sext i32 %8431 to i64
  %8433 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8432
  %8434 = load i32, i32* %8433, align 4, !tbaa !400
  %8435 = insertelement <1024 x i32> %8430, i32 %8434, i32 180
  %8436 = extractelement <1024 x i32> %load.buffer.i, i32 181
  %8437 = sext i32 %8436 to i64
  %8438 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8437
  %8439 = load i32, i32* %8438, align 4, !tbaa !400
  %8440 = insertelement <1024 x i32> %8435, i32 %8439, i32 181
  %8441 = extractelement <1024 x i32> %load.buffer.i, i32 182
  %8442 = sext i32 %8441 to i64
  %8443 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8442
  %8444 = load i32, i32* %8443, align 4, !tbaa !400
  %8445 = insertelement <1024 x i32> %8440, i32 %8444, i32 182
  %8446 = extractelement <1024 x i32> %load.buffer.i, i32 183
  %8447 = sext i32 %8446 to i64
  %8448 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8447
  %8449 = load i32, i32* %8448, align 4, !tbaa !400
  %8450 = insertelement <1024 x i32> %8445, i32 %8449, i32 183
  %8451 = extractelement <1024 x i32> %load.buffer.i, i32 184
  %8452 = sext i32 %8451 to i64
  %8453 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8452
  %8454 = load i32, i32* %8453, align 4, !tbaa !400
  %8455 = insertelement <1024 x i32> %8450, i32 %8454, i32 184
  %8456 = extractelement <1024 x i32> %load.buffer.i, i32 185
  %8457 = sext i32 %8456 to i64
  %8458 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8457
  %8459 = load i32, i32* %8458, align 4, !tbaa !400
  %8460 = insertelement <1024 x i32> %8455, i32 %8459, i32 185
  %8461 = extractelement <1024 x i32> %load.buffer.i, i32 186
  %8462 = sext i32 %8461 to i64
  %8463 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8462
  %8464 = load i32, i32* %8463, align 4, !tbaa !400
  %8465 = insertelement <1024 x i32> %8460, i32 %8464, i32 186
  %8466 = extractelement <1024 x i32> %load.buffer.i, i32 187
  %8467 = sext i32 %8466 to i64
  %8468 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8467
  %8469 = load i32, i32* %8468, align 4, !tbaa !400
  %8470 = insertelement <1024 x i32> %8465, i32 %8469, i32 187
  %8471 = extractelement <1024 x i32> %load.buffer.i, i32 188
  %8472 = sext i32 %8471 to i64
  %8473 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8472
  %8474 = load i32, i32* %8473, align 4, !tbaa !400
  %8475 = insertelement <1024 x i32> %8470, i32 %8474, i32 188
  %8476 = extractelement <1024 x i32> %load.buffer.i, i32 189
  %8477 = sext i32 %8476 to i64
  %8478 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8477
  %8479 = load i32, i32* %8478, align 4, !tbaa !400
  %8480 = insertelement <1024 x i32> %8475, i32 %8479, i32 189
  %8481 = extractelement <1024 x i32> %load.buffer.i, i32 190
  %8482 = sext i32 %8481 to i64
  %8483 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8482
  %8484 = load i32, i32* %8483, align 4, !tbaa !400
  %8485 = insertelement <1024 x i32> %8480, i32 %8484, i32 190
  %8486 = extractelement <1024 x i32> %load.buffer.i, i32 191
  %8487 = sext i32 %8486 to i64
  %8488 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8487
  %8489 = load i32, i32* %8488, align 4, !tbaa !400
  %8490 = insertelement <1024 x i32> %8485, i32 %8489, i32 191
  %8491 = extractelement <1024 x i32> %load.buffer.i, i32 192
  %8492 = sext i32 %8491 to i64
  %8493 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8492
  %8494 = load i32, i32* %8493, align 4, !tbaa !400
  %8495 = insertelement <1024 x i32> %8490, i32 %8494, i32 192
  %8496 = extractelement <1024 x i32> %load.buffer.i, i32 193
  %8497 = sext i32 %8496 to i64
  %8498 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8497
  %8499 = load i32, i32* %8498, align 4, !tbaa !400
  %8500 = insertelement <1024 x i32> %8495, i32 %8499, i32 193
  %8501 = extractelement <1024 x i32> %load.buffer.i, i32 194
  %8502 = sext i32 %8501 to i64
  %8503 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8502
  %8504 = load i32, i32* %8503, align 4, !tbaa !400
  %8505 = insertelement <1024 x i32> %8500, i32 %8504, i32 194
  %8506 = extractelement <1024 x i32> %load.buffer.i, i32 195
  %8507 = sext i32 %8506 to i64
  %8508 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8507
  %8509 = load i32, i32* %8508, align 4, !tbaa !400
  %8510 = insertelement <1024 x i32> %8505, i32 %8509, i32 195
  %8511 = extractelement <1024 x i32> %load.buffer.i, i32 196
  %8512 = sext i32 %8511 to i64
  %8513 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8512
  %8514 = load i32, i32* %8513, align 4, !tbaa !400
  %8515 = insertelement <1024 x i32> %8510, i32 %8514, i32 196
  %8516 = extractelement <1024 x i32> %load.buffer.i, i32 197
  %8517 = sext i32 %8516 to i64
  %8518 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8517
  %8519 = load i32, i32* %8518, align 4, !tbaa !400
  %8520 = insertelement <1024 x i32> %8515, i32 %8519, i32 197
  %8521 = extractelement <1024 x i32> %load.buffer.i, i32 198
  %8522 = sext i32 %8521 to i64
  %8523 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8522
  %8524 = load i32, i32* %8523, align 4, !tbaa !400
  %8525 = insertelement <1024 x i32> %8520, i32 %8524, i32 198
  %8526 = extractelement <1024 x i32> %load.buffer.i, i32 199
  %8527 = sext i32 %8526 to i64
  %8528 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8527
  %8529 = load i32, i32* %8528, align 4, !tbaa !400
  %8530 = insertelement <1024 x i32> %8525, i32 %8529, i32 199
  %8531 = extractelement <1024 x i32> %load.buffer.i, i32 200
  %8532 = sext i32 %8531 to i64
  %8533 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8532
  %8534 = load i32, i32* %8533, align 4, !tbaa !400
  %8535 = insertelement <1024 x i32> %8530, i32 %8534, i32 200
  %8536 = extractelement <1024 x i32> %load.buffer.i, i32 201
  %8537 = sext i32 %8536 to i64
  %8538 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8537
  %8539 = load i32, i32* %8538, align 4, !tbaa !400
  %8540 = insertelement <1024 x i32> %8535, i32 %8539, i32 201
  %8541 = extractelement <1024 x i32> %load.buffer.i, i32 202
  %8542 = sext i32 %8541 to i64
  %8543 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8542
  %8544 = load i32, i32* %8543, align 4, !tbaa !400
  %8545 = insertelement <1024 x i32> %8540, i32 %8544, i32 202
  %8546 = extractelement <1024 x i32> %load.buffer.i, i32 203
  %8547 = sext i32 %8546 to i64
  %8548 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8547
  %8549 = load i32, i32* %8548, align 4, !tbaa !400
  %8550 = insertelement <1024 x i32> %8545, i32 %8549, i32 203
  %8551 = extractelement <1024 x i32> %load.buffer.i, i32 204
  %8552 = sext i32 %8551 to i64
  %8553 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8552
  %8554 = load i32, i32* %8553, align 4, !tbaa !400
  %8555 = insertelement <1024 x i32> %8550, i32 %8554, i32 204
  %8556 = extractelement <1024 x i32> %load.buffer.i, i32 205
  %8557 = sext i32 %8556 to i64
  %8558 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8557
  %8559 = load i32, i32* %8558, align 4, !tbaa !400
  %8560 = insertelement <1024 x i32> %8555, i32 %8559, i32 205
  %8561 = extractelement <1024 x i32> %load.buffer.i, i32 206
  %8562 = sext i32 %8561 to i64
  %8563 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8562
  %8564 = load i32, i32* %8563, align 4, !tbaa !400
  %8565 = insertelement <1024 x i32> %8560, i32 %8564, i32 206
  %8566 = extractelement <1024 x i32> %load.buffer.i, i32 207
  %8567 = sext i32 %8566 to i64
  %8568 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8567
  %8569 = load i32, i32* %8568, align 4, !tbaa !400
  %8570 = insertelement <1024 x i32> %8565, i32 %8569, i32 207
  %8571 = extractelement <1024 x i32> %load.buffer.i, i32 208
  %8572 = sext i32 %8571 to i64
  %8573 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8572
  %8574 = load i32, i32* %8573, align 4, !tbaa !400
  %8575 = insertelement <1024 x i32> %8570, i32 %8574, i32 208
  %8576 = extractelement <1024 x i32> %load.buffer.i, i32 209
  %8577 = sext i32 %8576 to i64
  %8578 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8577
  %8579 = load i32, i32* %8578, align 4, !tbaa !400
  %8580 = insertelement <1024 x i32> %8575, i32 %8579, i32 209
  %8581 = extractelement <1024 x i32> %load.buffer.i, i32 210
  %8582 = sext i32 %8581 to i64
  %8583 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8582
  %8584 = load i32, i32* %8583, align 4, !tbaa !400
  %8585 = insertelement <1024 x i32> %8580, i32 %8584, i32 210
  %8586 = extractelement <1024 x i32> %load.buffer.i, i32 211
  %8587 = sext i32 %8586 to i64
  %8588 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8587
  %8589 = load i32, i32* %8588, align 4, !tbaa !400
  %8590 = insertelement <1024 x i32> %8585, i32 %8589, i32 211
  %8591 = extractelement <1024 x i32> %load.buffer.i, i32 212
  %8592 = sext i32 %8591 to i64
  %8593 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8592
  %8594 = load i32, i32* %8593, align 4, !tbaa !400
  %8595 = insertelement <1024 x i32> %8590, i32 %8594, i32 212
  %8596 = extractelement <1024 x i32> %load.buffer.i, i32 213
  %8597 = sext i32 %8596 to i64
  %8598 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8597
  %8599 = load i32, i32* %8598, align 4, !tbaa !400
  %8600 = insertelement <1024 x i32> %8595, i32 %8599, i32 213
  %8601 = extractelement <1024 x i32> %load.buffer.i, i32 214
  %8602 = sext i32 %8601 to i64
  %8603 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8602
  %8604 = load i32, i32* %8603, align 4, !tbaa !400
  %8605 = insertelement <1024 x i32> %8600, i32 %8604, i32 214
  %8606 = extractelement <1024 x i32> %load.buffer.i, i32 215
  %8607 = sext i32 %8606 to i64
  %8608 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8607
  %8609 = load i32, i32* %8608, align 4, !tbaa !400
  %8610 = insertelement <1024 x i32> %8605, i32 %8609, i32 215
  %8611 = extractelement <1024 x i32> %load.buffer.i, i32 216
  %8612 = sext i32 %8611 to i64
  %8613 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8612
  %8614 = load i32, i32* %8613, align 4, !tbaa !400
  %8615 = insertelement <1024 x i32> %8610, i32 %8614, i32 216
  %8616 = extractelement <1024 x i32> %load.buffer.i, i32 217
  %8617 = sext i32 %8616 to i64
  %8618 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8617
  %8619 = load i32, i32* %8618, align 4, !tbaa !400
  %8620 = insertelement <1024 x i32> %8615, i32 %8619, i32 217
  %8621 = extractelement <1024 x i32> %load.buffer.i, i32 218
  %8622 = sext i32 %8621 to i64
  %8623 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8622
  %8624 = load i32, i32* %8623, align 4, !tbaa !400
  %8625 = insertelement <1024 x i32> %8620, i32 %8624, i32 218
  %8626 = extractelement <1024 x i32> %load.buffer.i, i32 219
  %8627 = sext i32 %8626 to i64
  %8628 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8627
  %8629 = load i32, i32* %8628, align 4, !tbaa !400
  %8630 = insertelement <1024 x i32> %8625, i32 %8629, i32 219
  %8631 = extractelement <1024 x i32> %load.buffer.i, i32 220
  %8632 = sext i32 %8631 to i64
  %8633 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8632
  %8634 = load i32, i32* %8633, align 4, !tbaa !400
  %8635 = insertelement <1024 x i32> %8630, i32 %8634, i32 220
  %8636 = extractelement <1024 x i32> %load.buffer.i, i32 221
  %8637 = sext i32 %8636 to i64
  %8638 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8637
  %8639 = load i32, i32* %8638, align 4, !tbaa !400
  %8640 = insertelement <1024 x i32> %8635, i32 %8639, i32 221
  %8641 = extractelement <1024 x i32> %load.buffer.i, i32 222
  %8642 = sext i32 %8641 to i64
  %8643 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8642
  %8644 = load i32, i32* %8643, align 4, !tbaa !400
  %8645 = insertelement <1024 x i32> %8640, i32 %8644, i32 222
  %8646 = extractelement <1024 x i32> %load.buffer.i, i32 223
  %8647 = sext i32 %8646 to i64
  %8648 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8647
  %8649 = load i32, i32* %8648, align 4, !tbaa !400
  %8650 = insertelement <1024 x i32> %8645, i32 %8649, i32 223
  %8651 = extractelement <1024 x i32> %load.buffer.i, i32 224
  %8652 = sext i32 %8651 to i64
  %8653 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8652
  %8654 = load i32, i32* %8653, align 4, !tbaa !400
  %8655 = insertelement <1024 x i32> %8650, i32 %8654, i32 224
  %8656 = extractelement <1024 x i32> %load.buffer.i, i32 225
  %8657 = sext i32 %8656 to i64
  %8658 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8657
  %8659 = load i32, i32* %8658, align 4, !tbaa !400
  %8660 = insertelement <1024 x i32> %8655, i32 %8659, i32 225
  %8661 = extractelement <1024 x i32> %load.buffer.i, i32 226
  %8662 = sext i32 %8661 to i64
  %8663 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8662
  %8664 = load i32, i32* %8663, align 4, !tbaa !400
  %8665 = insertelement <1024 x i32> %8660, i32 %8664, i32 226
  %8666 = extractelement <1024 x i32> %load.buffer.i, i32 227
  %8667 = sext i32 %8666 to i64
  %8668 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8667
  %8669 = load i32, i32* %8668, align 4, !tbaa !400
  %8670 = insertelement <1024 x i32> %8665, i32 %8669, i32 227
  %8671 = extractelement <1024 x i32> %load.buffer.i, i32 228
  %8672 = sext i32 %8671 to i64
  %8673 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8672
  %8674 = load i32, i32* %8673, align 4, !tbaa !400
  %8675 = insertelement <1024 x i32> %8670, i32 %8674, i32 228
  %8676 = extractelement <1024 x i32> %load.buffer.i, i32 229
  %8677 = sext i32 %8676 to i64
  %8678 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8677
  %8679 = load i32, i32* %8678, align 4, !tbaa !400
  %8680 = insertelement <1024 x i32> %8675, i32 %8679, i32 229
  %8681 = extractelement <1024 x i32> %load.buffer.i, i32 230
  %8682 = sext i32 %8681 to i64
  %8683 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8682
  %8684 = load i32, i32* %8683, align 4, !tbaa !400
  %8685 = insertelement <1024 x i32> %8680, i32 %8684, i32 230
  %8686 = extractelement <1024 x i32> %load.buffer.i, i32 231
  %8687 = sext i32 %8686 to i64
  %8688 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8687
  %8689 = load i32, i32* %8688, align 4, !tbaa !400
  %8690 = insertelement <1024 x i32> %8685, i32 %8689, i32 231
  %8691 = extractelement <1024 x i32> %load.buffer.i, i32 232
  %8692 = sext i32 %8691 to i64
  %8693 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8692
  %8694 = load i32, i32* %8693, align 4, !tbaa !400
  %8695 = insertelement <1024 x i32> %8690, i32 %8694, i32 232
  %8696 = extractelement <1024 x i32> %load.buffer.i, i32 233
  %8697 = sext i32 %8696 to i64
  %8698 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8697
  %8699 = load i32, i32* %8698, align 4, !tbaa !400
  %8700 = insertelement <1024 x i32> %8695, i32 %8699, i32 233
  %8701 = extractelement <1024 x i32> %load.buffer.i, i32 234
  %8702 = sext i32 %8701 to i64
  %8703 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8702
  %8704 = load i32, i32* %8703, align 4, !tbaa !400
  %8705 = insertelement <1024 x i32> %8700, i32 %8704, i32 234
  %8706 = extractelement <1024 x i32> %load.buffer.i, i32 235
  %8707 = sext i32 %8706 to i64
  %8708 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8707
  %8709 = load i32, i32* %8708, align 4, !tbaa !400
  %8710 = insertelement <1024 x i32> %8705, i32 %8709, i32 235
  %8711 = extractelement <1024 x i32> %load.buffer.i, i32 236
  %8712 = sext i32 %8711 to i64
  %8713 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8712
  %8714 = load i32, i32* %8713, align 4, !tbaa !400
  %8715 = insertelement <1024 x i32> %8710, i32 %8714, i32 236
  %8716 = extractelement <1024 x i32> %load.buffer.i, i32 237
  %8717 = sext i32 %8716 to i64
  %8718 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8717
  %8719 = load i32, i32* %8718, align 4, !tbaa !400
  %8720 = insertelement <1024 x i32> %8715, i32 %8719, i32 237
  %8721 = extractelement <1024 x i32> %load.buffer.i, i32 238
  %8722 = sext i32 %8721 to i64
  %8723 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8722
  %8724 = load i32, i32* %8723, align 4, !tbaa !400
  %8725 = insertelement <1024 x i32> %8720, i32 %8724, i32 238
  %8726 = extractelement <1024 x i32> %load.buffer.i, i32 239
  %8727 = sext i32 %8726 to i64
  %8728 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8727
  %8729 = load i32, i32* %8728, align 4, !tbaa !400
  %8730 = insertelement <1024 x i32> %8725, i32 %8729, i32 239
  %8731 = extractelement <1024 x i32> %load.buffer.i, i32 240
  %8732 = sext i32 %8731 to i64
  %8733 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8732
  %8734 = load i32, i32* %8733, align 4, !tbaa !400
  %8735 = insertelement <1024 x i32> %8730, i32 %8734, i32 240
  %8736 = extractelement <1024 x i32> %load.buffer.i, i32 241
  %8737 = sext i32 %8736 to i64
  %8738 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8737
  %8739 = load i32, i32* %8738, align 4, !tbaa !400
  %8740 = insertelement <1024 x i32> %8735, i32 %8739, i32 241
  %8741 = extractelement <1024 x i32> %load.buffer.i, i32 242
  %8742 = sext i32 %8741 to i64
  %8743 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8742
  %8744 = load i32, i32* %8743, align 4, !tbaa !400
  %8745 = insertelement <1024 x i32> %8740, i32 %8744, i32 242
  %8746 = extractelement <1024 x i32> %load.buffer.i, i32 243
  %8747 = sext i32 %8746 to i64
  %8748 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8747
  %8749 = load i32, i32* %8748, align 4, !tbaa !400
  %8750 = insertelement <1024 x i32> %8745, i32 %8749, i32 243
  %8751 = extractelement <1024 x i32> %load.buffer.i, i32 244
  %8752 = sext i32 %8751 to i64
  %8753 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8752
  %8754 = load i32, i32* %8753, align 4, !tbaa !400
  %8755 = insertelement <1024 x i32> %8750, i32 %8754, i32 244
  %8756 = extractelement <1024 x i32> %load.buffer.i, i32 245
  %8757 = sext i32 %8756 to i64
  %8758 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8757
  %8759 = load i32, i32* %8758, align 4, !tbaa !400
  %8760 = insertelement <1024 x i32> %8755, i32 %8759, i32 245
  %8761 = extractelement <1024 x i32> %load.buffer.i, i32 246
  %8762 = sext i32 %8761 to i64
  %8763 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8762
  %8764 = load i32, i32* %8763, align 4, !tbaa !400
  %8765 = insertelement <1024 x i32> %8760, i32 %8764, i32 246
  %8766 = extractelement <1024 x i32> %load.buffer.i, i32 247
  %8767 = sext i32 %8766 to i64
  %8768 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8767
  %8769 = load i32, i32* %8768, align 4, !tbaa !400
  %8770 = insertelement <1024 x i32> %8765, i32 %8769, i32 247
  %8771 = extractelement <1024 x i32> %load.buffer.i, i32 248
  %8772 = sext i32 %8771 to i64
  %8773 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8772
  %8774 = load i32, i32* %8773, align 4, !tbaa !400
  %8775 = insertelement <1024 x i32> %8770, i32 %8774, i32 248
  %8776 = extractelement <1024 x i32> %load.buffer.i, i32 249
  %8777 = sext i32 %8776 to i64
  %8778 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8777
  %8779 = load i32, i32* %8778, align 4, !tbaa !400
  %8780 = insertelement <1024 x i32> %8775, i32 %8779, i32 249
  %8781 = extractelement <1024 x i32> %load.buffer.i, i32 250
  %8782 = sext i32 %8781 to i64
  %8783 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8782
  %8784 = load i32, i32* %8783, align 4, !tbaa !400
  %8785 = insertelement <1024 x i32> %8780, i32 %8784, i32 250
  %8786 = extractelement <1024 x i32> %load.buffer.i, i32 251
  %8787 = sext i32 %8786 to i64
  %8788 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8787
  %8789 = load i32, i32* %8788, align 4, !tbaa !400
  %8790 = insertelement <1024 x i32> %8785, i32 %8789, i32 251
  %8791 = extractelement <1024 x i32> %load.buffer.i, i32 252
  %8792 = sext i32 %8791 to i64
  %8793 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8792
  %8794 = load i32, i32* %8793, align 4, !tbaa !400
  %8795 = insertelement <1024 x i32> %8790, i32 %8794, i32 252
  %8796 = extractelement <1024 x i32> %load.buffer.i, i32 253
  %8797 = sext i32 %8796 to i64
  %8798 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8797
  %8799 = load i32, i32* %8798, align 4, !tbaa !400
  %8800 = insertelement <1024 x i32> %8795, i32 %8799, i32 253
  %8801 = extractelement <1024 x i32> %load.buffer.i, i32 254
  %8802 = sext i32 %8801 to i64
  %8803 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8802
  %8804 = load i32, i32* %8803, align 4, !tbaa !400
  %8805 = insertelement <1024 x i32> %8800, i32 %8804, i32 254
  %8806 = extractelement <1024 x i32> %load.buffer.i, i32 255
  %8807 = sext i32 %8806 to i64
  %8808 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8807
  %8809 = load i32, i32* %8808, align 4, !tbaa !400
  %8810 = insertelement <1024 x i32> %8805, i32 %8809, i32 255
  %8811 = extractelement <1024 x i32> %load.buffer.i, i32 256
  %8812 = sext i32 %8811 to i64
  %8813 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8812
  %8814 = load i32, i32* %8813, align 4, !tbaa !400
  %8815 = insertelement <1024 x i32> %8810, i32 %8814, i32 256
  %8816 = extractelement <1024 x i32> %load.buffer.i, i32 257
  %8817 = sext i32 %8816 to i64
  %8818 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8817
  %8819 = load i32, i32* %8818, align 4, !tbaa !400
  %8820 = insertelement <1024 x i32> %8815, i32 %8819, i32 257
  %8821 = extractelement <1024 x i32> %load.buffer.i, i32 258
  %8822 = sext i32 %8821 to i64
  %8823 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8822
  %8824 = load i32, i32* %8823, align 4, !tbaa !400
  %8825 = insertelement <1024 x i32> %8820, i32 %8824, i32 258
  %8826 = extractelement <1024 x i32> %load.buffer.i, i32 259
  %8827 = sext i32 %8826 to i64
  %8828 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8827
  %8829 = load i32, i32* %8828, align 4, !tbaa !400
  %8830 = insertelement <1024 x i32> %8825, i32 %8829, i32 259
  %8831 = extractelement <1024 x i32> %load.buffer.i, i32 260
  %8832 = sext i32 %8831 to i64
  %8833 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8832
  %8834 = load i32, i32* %8833, align 4, !tbaa !400
  %8835 = insertelement <1024 x i32> %8830, i32 %8834, i32 260
  %8836 = extractelement <1024 x i32> %load.buffer.i, i32 261
  %8837 = sext i32 %8836 to i64
  %8838 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8837
  %8839 = load i32, i32* %8838, align 4, !tbaa !400
  %8840 = insertelement <1024 x i32> %8835, i32 %8839, i32 261
  %8841 = extractelement <1024 x i32> %load.buffer.i, i32 262
  %8842 = sext i32 %8841 to i64
  %8843 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8842
  %8844 = load i32, i32* %8843, align 4, !tbaa !400
  %8845 = insertelement <1024 x i32> %8840, i32 %8844, i32 262
  %8846 = extractelement <1024 x i32> %load.buffer.i, i32 263
  %8847 = sext i32 %8846 to i64
  %8848 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8847
  %8849 = load i32, i32* %8848, align 4, !tbaa !400
  %8850 = insertelement <1024 x i32> %8845, i32 %8849, i32 263
  %8851 = extractelement <1024 x i32> %load.buffer.i, i32 264
  %8852 = sext i32 %8851 to i64
  %8853 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8852
  %8854 = load i32, i32* %8853, align 4, !tbaa !400
  %8855 = insertelement <1024 x i32> %8850, i32 %8854, i32 264
  %8856 = extractelement <1024 x i32> %load.buffer.i, i32 265
  %8857 = sext i32 %8856 to i64
  %8858 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8857
  %8859 = load i32, i32* %8858, align 4, !tbaa !400
  %8860 = insertelement <1024 x i32> %8855, i32 %8859, i32 265
  %8861 = extractelement <1024 x i32> %load.buffer.i, i32 266
  %8862 = sext i32 %8861 to i64
  %8863 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8862
  %8864 = load i32, i32* %8863, align 4, !tbaa !400
  %8865 = insertelement <1024 x i32> %8860, i32 %8864, i32 266
  %8866 = extractelement <1024 x i32> %load.buffer.i, i32 267
  %8867 = sext i32 %8866 to i64
  %8868 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8867
  %8869 = load i32, i32* %8868, align 4, !tbaa !400
  %8870 = insertelement <1024 x i32> %8865, i32 %8869, i32 267
  %8871 = extractelement <1024 x i32> %load.buffer.i, i32 268
  %8872 = sext i32 %8871 to i64
  %8873 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8872
  %8874 = load i32, i32* %8873, align 4, !tbaa !400
  %8875 = insertelement <1024 x i32> %8870, i32 %8874, i32 268
  %8876 = extractelement <1024 x i32> %load.buffer.i, i32 269
  %8877 = sext i32 %8876 to i64
  %8878 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8877
  %8879 = load i32, i32* %8878, align 4, !tbaa !400
  %8880 = insertelement <1024 x i32> %8875, i32 %8879, i32 269
  %8881 = extractelement <1024 x i32> %load.buffer.i, i32 270
  %8882 = sext i32 %8881 to i64
  %8883 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8882
  %8884 = load i32, i32* %8883, align 4, !tbaa !400
  %8885 = insertelement <1024 x i32> %8880, i32 %8884, i32 270
  %8886 = extractelement <1024 x i32> %load.buffer.i, i32 271
  %8887 = sext i32 %8886 to i64
  %8888 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8887
  %8889 = load i32, i32* %8888, align 4, !tbaa !400
  %8890 = insertelement <1024 x i32> %8885, i32 %8889, i32 271
  %8891 = extractelement <1024 x i32> %load.buffer.i, i32 272
  %8892 = sext i32 %8891 to i64
  %8893 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8892
  %8894 = load i32, i32* %8893, align 4, !tbaa !400
  %8895 = insertelement <1024 x i32> %8890, i32 %8894, i32 272
  %8896 = extractelement <1024 x i32> %load.buffer.i, i32 273
  %8897 = sext i32 %8896 to i64
  %8898 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8897
  %8899 = load i32, i32* %8898, align 4, !tbaa !400
  %8900 = insertelement <1024 x i32> %8895, i32 %8899, i32 273
  %8901 = extractelement <1024 x i32> %load.buffer.i, i32 274
  %8902 = sext i32 %8901 to i64
  %8903 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8902
  %8904 = load i32, i32* %8903, align 4, !tbaa !400
  %8905 = insertelement <1024 x i32> %8900, i32 %8904, i32 274
  %8906 = extractelement <1024 x i32> %load.buffer.i, i32 275
  %8907 = sext i32 %8906 to i64
  %8908 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8907
  %8909 = load i32, i32* %8908, align 4, !tbaa !400
  %8910 = insertelement <1024 x i32> %8905, i32 %8909, i32 275
  %8911 = extractelement <1024 x i32> %load.buffer.i, i32 276
  %8912 = sext i32 %8911 to i64
  %8913 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8912
  %8914 = load i32, i32* %8913, align 4, !tbaa !400
  %8915 = insertelement <1024 x i32> %8910, i32 %8914, i32 276
  %8916 = extractelement <1024 x i32> %load.buffer.i, i32 277
  %8917 = sext i32 %8916 to i64
  %8918 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8917
  %8919 = load i32, i32* %8918, align 4, !tbaa !400
  %8920 = insertelement <1024 x i32> %8915, i32 %8919, i32 277
  %8921 = extractelement <1024 x i32> %load.buffer.i, i32 278
  %8922 = sext i32 %8921 to i64
  %8923 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8922
  %8924 = load i32, i32* %8923, align 4, !tbaa !400
  %8925 = insertelement <1024 x i32> %8920, i32 %8924, i32 278
  %8926 = extractelement <1024 x i32> %load.buffer.i, i32 279
  %8927 = sext i32 %8926 to i64
  %8928 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8927
  %8929 = load i32, i32* %8928, align 4, !tbaa !400
  %8930 = insertelement <1024 x i32> %8925, i32 %8929, i32 279
  %8931 = extractelement <1024 x i32> %load.buffer.i, i32 280
  %8932 = sext i32 %8931 to i64
  %8933 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8932
  %8934 = load i32, i32* %8933, align 4, !tbaa !400
  %8935 = insertelement <1024 x i32> %8930, i32 %8934, i32 280
  %8936 = extractelement <1024 x i32> %load.buffer.i, i32 281
  %8937 = sext i32 %8936 to i64
  %8938 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8937
  %8939 = load i32, i32* %8938, align 4, !tbaa !400
  %8940 = insertelement <1024 x i32> %8935, i32 %8939, i32 281
  %8941 = extractelement <1024 x i32> %load.buffer.i, i32 282
  %8942 = sext i32 %8941 to i64
  %8943 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8942
  %8944 = load i32, i32* %8943, align 4, !tbaa !400
  %8945 = insertelement <1024 x i32> %8940, i32 %8944, i32 282
  %8946 = extractelement <1024 x i32> %load.buffer.i, i32 283
  %8947 = sext i32 %8946 to i64
  %8948 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8947
  %8949 = load i32, i32* %8948, align 4, !tbaa !400
  %8950 = insertelement <1024 x i32> %8945, i32 %8949, i32 283
  %8951 = extractelement <1024 x i32> %load.buffer.i, i32 284
  %8952 = sext i32 %8951 to i64
  %8953 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8952
  %8954 = load i32, i32* %8953, align 4, !tbaa !400
  %8955 = insertelement <1024 x i32> %8950, i32 %8954, i32 284
  %8956 = extractelement <1024 x i32> %load.buffer.i, i32 285
  %8957 = sext i32 %8956 to i64
  %8958 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8957
  %8959 = load i32, i32* %8958, align 4, !tbaa !400
  %8960 = insertelement <1024 x i32> %8955, i32 %8959, i32 285
  %8961 = extractelement <1024 x i32> %load.buffer.i, i32 286
  %8962 = sext i32 %8961 to i64
  %8963 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8962
  %8964 = load i32, i32* %8963, align 4, !tbaa !400
  %8965 = insertelement <1024 x i32> %8960, i32 %8964, i32 286
  %8966 = extractelement <1024 x i32> %load.buffer.i, i32 287
  %8967 = sext i32 %8966 to i64
  %8968 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8967
  %8969 = load i32, i32* %8968, align 4, !tbaa !400
  %8970 = insertelement <1024 x i32> %8965, i32 %8969, i32 287
  %8971 = extractelement <1024 x i32> %load.buffer.i, i32 288
  %8972 = sext i32 %8971 to i64
  %8973 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8972
  %8974 = load i32, i32* %8973, align 4, !tbaa !400
  %8975 = insertelement <1024 x i32> %8970, i32 %8974, i32 288
  %8976 = extractelement <1024 x i32> %load.buffer.i, i32 289
  %8977 = sext i32 %8976 to i64
  %8978 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8977
  %8979 = load i32, i32* %8978, align 4, !tbaa !400
  %8980 = insertelement <1024 x i32> %8975, i32 %8979, i32 289
  %8981 = extractelement <1024 x i32> %load.buffer.i, i32 290
  %8982 = sext i32 %8981 to i64
  %8983 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8982
  %8984 = load i32, i32* %8983, align 4, !tbaa !400
  %8985 = insertelement <1024 x i32> %8980, i32 %8984, i32 290
  %8986 = extractelement <1024 x i32> %load.buffer.i, i32 291
  %8987 = sext i32 %8986 to i64
  %8988 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8987
  %8989 = load i32, i32* %8988, align 4, !tbaa !400
  %8990 = insertelement <1024 x i32> %8985, i32 %8989, i32 291
  %8991 = extractelement <1024 x i32> %load.buffer.i, i32 292
  %8992 = sext i32 %8991 to i64
  %8993 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8992
  %8994 = load i32, i32* %8993, align 4, !tbaa !400
  %8995 = insertelement <1024 x i32> %8990, i32 %8994, i32 292
  %8996 = extractelement <1024 x i32> %load.buffer.i, i32 293
  %8997 = sext i32 %8996 to i64
  %8998 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %8997
  %8999 = load i32, i32* %8998, align 4, !tbaa !400
  %9000 = insertelement <1024 x i32> %8995, i32 %8999, i32 293
  %9001 = extractelement <1024 x i32> %load.buffer.i, i32 294
  %9002 = sext i32 %9001 to i64
  %9003 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9002
  %9004 = load i32, i32* %9003, align 4, !tbaa !400
  %9005 = insertelement <1024 x i32> %9000, i32 %9004, i32 294
  %9006 = extractelement <1024 x i32> %load.buffer.i, i32 295
  %9007 = sext i32 %9006 to i64
  %9008 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9007
  %9009 = load i32, i32* %9008, align 4, !tbaa !400
  %9010 = insertelement <1024 x i32> %9005, i32 %9009, i32 295
  %9011 = extractelement <1024 x i32> %load.buffer.i, i32 296
  %9012 = sext i32 %9011 to i64
  %9013 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9012
  %9014 = load i32, i32* %9013, align 4, !tbaa !400
  %9015 = insertelement <1024 x i32> %9010, i32 %9014, i32 296
  %9016 = extractelement <1024 x i32> %load.buffer.i, i32 297
  %9017 = sext i32 %9016 to i64
  %9018 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9017
  %9019 = load i32, i32* %9018, align 4, !tbaa !400
  %9020 = insertelement <1024 x i32> %9015, i32 %9019, i32 297
  %9021 = extractelement <1024 x i32> %load.buffer.i, i32 298
  %9022 = sext i32 %9021 to i64
  %9023 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9022
  %9024 = load i32, i32* %9023, align 4, !tbaa !400
  %9025 = insertelement <1024 x i32> %9020, i32 %9024, i32 298
  %9026 = extractelement <1024 x i32> %load.buffer.i, i32 299
  %9027 = sext i32 %9026 to i64
  %9028 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9027
  %9029 = load i32, i32* %9028, align 4, !tbaa !400
  %9030 = insertelement <1024 x i32> %9025, i32 %9029, i32 299
  %9031 = extractelement <1024 x i32> %load.buffer.i, i32 300
  %9032 = sext i32 %9031 to i64
  %9033 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9032
  %9034 = load i32, i32* %9033, align 4, !tbaa !400
  %9035 = insertelement <1024 x i32> %9030, i32 %9034, i32 300
  %9036 = extractelement <1024 x i32> %load.buffer.i, i32 301
  %9037 = sext i32 %9036 to i64
  %9038 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9037
  %9039 = load i32, i32* %9038, align 4, !tbaa !400
  %9040 = insertelement <1024 x i32> %9035, i32 %9039, i32 301
  %9041 = extractelement <1024 x i32> %load.buffer.i, i32 302
  %9042 = sext i32 %9041 to i64
  %9043 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9042
  %9044 = load i32, i32* %9043, align 4, !tbaa !400
  %9045 = insertelement <1024 x i32> %9040, i32 %9044, i32 302
  %9046 = extractelement <1024 x i32> %load.buffer.i, i32 303
  %9047 = sext i32 %9046 to i64
  %9048 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9047
  %9049 = load i32, i32* %9048, align 4, !tbaa !400
  %9050 = insertelement <1024 x i32> %9045, i32 %9049, i32 303
  %9051 = extractelement <1024 x i32> %load.buffer.i, i32 304
  %9052 = sext i32 %9051 to i64
  %9053 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9052
  %9054 = load i32, i32* %9053, align 4, !tbaa !400
  %9055 = insertelement <1024 x i32> %9050, i32 %9054, i32 304
  %9056 = extractelement <1024 x i32> %load.buffer.i, i32 305
  %9057 = sext i32 %9056 to i64
  %9058 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9057
  %9059 = load i32, i32* %9058, align 4, !tbaa !400
  %9060 = insertelement <1024 x i32> %9055, i32 %9059, i32 305
  %9061 = extractelement <1024 x i32> %load.buffer.i, i32 306
  %9062 = sext i32 %9061 to i64
  %9063 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9062
  %9064 = load i32, i32* %9063, align 4, !tbaa !400
  %9065 = insertelement <1024 x i32> %9060, i32 %9064, i32 306
  %9066 = extractelement <1024 x i32> %load.buffer.i, i32 307
  %9067 = sext i32 %9066 to i64
  %9068 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9067
  %9069 = load i32, i32* %9068, align 4, !tbaa !400
  %9070 = insertelement <1024 x i32> %9065, i32 %9069, i32 307
  %9071 = extractelement <1024 x i32> %load.buffer.i, i32 308
  %9072 = sext i32 %9071 to i64
  %9073 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9072
  %9074 = load i32, i32* %9073, align 4, !tbaa !400
  %9075 = insertelement <1024 x i32> %9070, i32 %9074, i32 308
  %9076 = extractelement <1024 x i32> %load.buffer.i, i32 309
  %9077 = sext i32 %9076 to i64
  %9078 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9077
  %9079 = load i32, i32* %9078, align 4, !tbaa !400
  %9080 = insertelement <1024 x i32> %9075, i32 %9079, i32 309
  %9081 = extractelement <1024 x i32> %load.buffer.i, i32 310
  %9082 = sext i32 %9081 to i64
  %9083 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9082
  %9084 = load i32, i32* %9083, align 4, !tbaa !400
  %9085 = insertelement <1024 x i32> %9080, i32 %9084, i32 310
  %9086 = extractelement <1024 x i32> %load.buffer.i, i32 311
  %9087 = sext i32 %9086 to i64
  %9088 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9087
  %9089 = load i32, i32* %9088, align 4, !tbaa !400
  %9090 = insertelement <1024 x i32> %9085, i32 %9089, i32 311
  %9091 = extractelement <1024 x i32> %load.buffer.i, i32 312
  %9092 = sext i32 %9091 to i64
  %9093 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9092
  %9094 = load i32, i32* %9093, align 4, !tbaa !400
  %9095 = insertelement <1024 x i32> %9090, i32 %9094, i32 312
  %9096 = extractelement <1024 x i32> %load.buffer.i, i32 313
  %9097 = sext i32 %9096 to i64
  %9098 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9097
  %9099 = load i32, i32* %9098, align 4, !tbaa !400
  %9100 = insertelement <1024 x i32> %9095, i32 %9099, i32 313
  %9101 = extractelement <1024 x i32> %load.buffer.i, i32 314
  %9102 = sext i32 %9101 to i64
  %9103 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9102
  %9104 = load i32, i32* %9103, align 4, !tbaa !400
  %9105 = insertelement <1024 x i32> %9100, i32 %9104, i32 314
  %9106 = extractelement <1024 x i32> %load.buffer.i, i32 315
  %9107 = sext i32 %9106 to i64
  %9108 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9107
  %9109 = load i32, i32* %9108, align 4, !tbaa !400
  %9110 = insertelement <1024 x i32> %9105, i32 %9109, i32 315
  %9111 = extractelement <1024 x i32> %load.buffer.i, i32 316
  %9112 = sext i32 %9111 to i64
  %9113 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9112
  %9114 = load i32, i32* %9113, align 4, !tbaa !400
  %9115 = insertelement <1024 x i32> %9110, i32 %9114, i32 316
  %9116 = extractelement <1024 x i32> %load.buffer.i, i32 317
  %9117 = sext i32 %9116 to i64
  %9118 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9117
  %9119 = load i32, i32* %9118, align 4, !tbaa !400
  %9120 = insertelement <1024 x i32> %9115, i32 %9119, i32 317
  %9121 = extractelement <1024 x i32> %load.buffer.i, i32 318
  %9122 = sext i32 %9121 to i64
  %9123 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9122
  %9124 = load i32, i32* %9123, align 4, !tbaa !400
  %9125 = insertelement <1024 x i32> %9120, i32 %9124, i32 318
  %9126 = extractelement <1024 x i32> %load.buffer.i, i32 319
  %9127 = sext i32 %9126 to i64
  %9128 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9127
  %9129 = load i32, i32* %9128, align 4, !tbaa !400
  %9130 = insertelement <1024 x i32> %9125, i32 %9129, i32 319
  %9131 = extractelement <1024 x i32> %load.buffer.i, i32 320
  %9132 = sext i32 %9131 to i64
  %9133 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9132
  %9134 = load i32, i32* %9133, align 4, !tbaa !400
  %9135 = insertelement <1024 x i32> %9130, i32 %9134, i32 320
  %9136 = extractelement <1024 x i32> %load.buffer.i, i32 321
  %9137 = sext i32 %9136 to i64
  %9138 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9137
  %9139 = load i32, i32* %9138, align 4, !tbaa !400
  %9140 = insertelement <1024 x i32> %9135, i32 %9139, i32 321
  %9141 = extractelement <1024 x i32> %load.buffer.i, i32 322
  %9142 = sext i32 %9141 to i64
  %9143 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9142
  %9144 = load i32, i32* %9143, align 4, !tbaa !400
  %9145 = insertelement <1024 x i32> %9140, i32 %9144, i32 322
  %9146 = extractelement <1024 x i32> %load.buffer.i, i32 323
  %9147 = sext i32 %9146 to i64
  %9148 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9147
  %9149 = load i32, i32* %9148, align 4, !tbaa !400
  %9150 = insertelement <1024 x i32> %9145, i32 %9149, i32 323
  %9151 = extractelement <1024 x i32> %load.buffer.i, i32 324
  %9152 = sext i32 %9151 to i64
  %9153 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9152
  %9154 = load i32, i32* %9153, align 4, !tbaa !400
  %9155 = insertelement <1024 x i32> %9150, i32 %9154, i32 324
  %9156 = extractelement <1024 x i32> %load.buffer.i, i32 325
  %9157 = sext i32 %9156 to i64
  %9158 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9157
  %9159 = load i32, i32* %9158, align 4, !tbaa !400
  %9160 = insertelement <1024 x i32> %9155, i32 %9159, i32 325
  %9161 = extractelement <1024 x i32> %load.buffer.i, i32 326
  %9162 = sext i32 %9161 to i64
  %9163 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9162
  %9164 = load i32, i32* %9163, align 4, !tbaa !400
  %9165 = insertelement <1024 x i32> %9160, i32 %9164, i32 326
  %9166 = extractelement <1024 x i32> %load.buffer.i, i32 327
  %9167 = sext i32 %9166 to i64
  %9168 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9167
  %9169 = load i32, i32* %9168, align 4, !tbaa !400
  %9170 = insertelement <1024 x i32> %9165, i32 %9169, i32 327
  %9171 = extractelement <1024 x i32> %load.buffer.i, i32 328
  %9172 = sext i32 %9171 to i64
  %9173 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9172
  %9174 = load i32, i32* %9173, align 4, !tbaa !400
  %9175 = insertelement <1024 x i32> %9170, i32 %9174, i32 328
  %9176 = extractelement <1024 x i32> %load.buffer.i, i32 329
  %9177 = sext i32 %9176 to i64
  %9178 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9177
  %9179 = load i32, i32* %9178, align 4, !tbaa !400
  %9180 = insertelement <1024 x i32> %9175, i32 %9179, i32 329
  %9181 = extractelement <1024 x i32> %load.buffer.i, i32 330
  %9182 = sext i32 %9181 to i64
  %9183 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9182
  %9184 = load i32, i32* %9183, align 4, !tbaa !400
  %9185 = insertelement <1024 x i32> %9180, i32 %9184, i32 330
  %9186 = extractelement <1024 x i32> %load.buffer.i, i32 331
  %9187 = sext i32 %9186 to i64
  %9188 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9187
  %9189 = load i32, i32* %9188, align 4, !tbaa !400
  %9190 = insertelement <1024 x i32> %9185, i32 %9189, i32 331
  %9191 = extractelement <1024 x i32> %load.buffer.i, i32 332
  %9192 = sext i32 %9191 to i64
  %9193 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9192
  %9194 = load i32, i32* %9193, align 4, !tbaa !400
  %9195 = insertelement <1024 x i32> %9190, i32 %9194, i32 332
  %9196 = extractelement <1024 x i32> %load.buffer.i, i32 333
  %9197 = sext i32 %9196 to i64
  %9198 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9197
  %9199 = load i32, i32* %9198, align 4, !tbaa !400
  %9200 = insertelement <1024 x i32> %9195, i32 %9199, i32 333
  %9201 = extractelement <1024 x i32> %load.buffer.i, i32 334
  %9202 = sext i32 %9201 to i64
  %9203 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9202
  %9204 = load i32, i32* %9203, align 4, !tbaa !400
  %9205 = insertelement <1024 x i32> %9200, i32 %9204, i32 334
  %9206 = extractelement <1024 x i32> %load.buffer.i, i32 335
  %9207 = sext i32 %9206 to i64
  %9208 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9207
  %9209 = load i32, i32* %9208, align 4, !tbaa !400
  %9210 = insertelement <1024 x i32> %9205, i32 %9209, i32 335
  %9211 = extractelement <1024 x i32> %load.buffer.i, i32 336
  %9212 = sext i32 %9211 to i64
  %9213 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9212
  %9214 = load i32, i32* %9213, align 4, !tbaa !400
  %9215 = insertelement <1024 x i32> %9210, i32 %9214, i32 336
  %9216 = extractelement <1024 x i32> %load.buffer.i, i32 337
  %9217 = sext i32 %9216 to i64
  %9218 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9217
  %9219 = load i32, i32* %9218, align 4, !tbaa !400
  %9220 = insertelement <1024 x i32> %9215, i32 %9219, i32 337
  %9221 = extractelement <1024 x i32> %load.buffer.i, i32 338
  %9222 = sext i32 %9221 to i64
  %9223 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9222
  %9224 = load i32, i32* %9223, align 4, !tbaa !400
  %9225 = insertelement <1024 x i32> %9220, i32 %9224, i32 338
  %9226 = extractelement <1024 x i32> %load.buffer.i, i32 339
  %9227 = sext i32 %9226 to i64
  %9228 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9227
  %9229 = load i32, i32* %9228, align 4, !tbaa !400
  %9230 = insertelement <1024 x i32> %9225, i32 %9229, i32 339
  %9231 = extractelement <1024 x i32> %load.buffer.i, i32 340
  %9232 = sext i32 %9231 to i64
  %9233 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9232
  %9234 = load i32, i32* %9233, align 4, !tbaa !400
  %9235 = insertelement <1024 x i32> %9230, i32 %9234, i32 340
  %9236 = extractelement <1024 x i32> %load.buffer.i, i32 341
  %9237 = sext i32 %9236 to i64
  %9238 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9237
  %9239 = load i32, i32* %9238, align 4, !tbaa !400
  %9240 = insertelement <1024 x i32> %9235, i32 %9239, i32 341
  %9241 = extractelement <1024 x i32> %load.buffer.i, i32 342
  %9242 = sext i32 %9241 to i64
  %9243 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9242
  %9244 = load i32, i32* %9243, align 4, !tbaa !400
  %9245 = insertelement <1024 x i32> %9240, i32 %9244, i32 342
  %9246 = extractelement <1024 x i32> %load.buffer.i, i32 343
  %9247 = sext i32 %9246 to i64
  %9248 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9247
  %9249 = load i32, i32* %9248, align 4, !tbaa !400
  %9250 = insertelement <1024 x i32> %9245, i32 %9249, i32 343
  %9251 = extractelement <1024 x i32> %load.buffer.i, i32 344
  %9252 = sext i32 %9251 to i64
  %9253 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9252
  %9254 = load i32, i32* %9253, align 4, !tbaa !400
  %9255 = insertelement <1024 x i32> %9250, i32 %9254, i32 344
  %9256 = extractelement <1024 x i32> %load.buffer.i, i32 345
  %9257 = sext i32 %9256 to i64
  %9258 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9257
  %9259 = load i32, i32* %9258, align 4, !tbaa !400
  %9260 = insertelement <1024 x i32> %9255, i32 %9259, i32 345
  %9261 = extractelement <1024 x i32> %load.buffer.i, i32 346
  %9262 = sext i32 %9261 to i64
  %9263 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9262
  %9264 = load i32, i32* %9263, align 4, !tbaa !400
  %9265 = insertelement <1024 x i32> %9260, i32 %9264, i32 346
  %9266 = extractelement <1024 x i32> %load.buffer.i, i32 347
  %9267 = sext i32 %9266 to i64
  %9268 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9267
  %9269 = load i32, i32* %9268, align 4, !tbaa !400
  %9270 = insertelement <1024 x i32> %9265, i32 %9269, i32 347
  %9271 = extractelement <1024 x i32> %load.buffer.i, i32 348
  %9272 = sext i32 %9271 to i64
  %9273 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9272
  %9274 = load i32, i32* %9273, align 4, !tbaa !400
  %9275 = insertelement <1024 x i32> %9270, i32 %9274, i32 348
  %9276 = extractelement <1024 x i32> %load.buffer.i, i32 349
  %9277 = sext i32 %9276 to i64
  %9278 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9277
  %9279 = load i32, i32* %9278, align 4, !tbaa !400
  %9280 = insertelement <1024 x i32> %9275, i32 %9279, i32 349
  %9281 = extractelement <1024 x i32> %load.buffer.i, i32 350
  %9282 = sext i32 %9281 to i64
  %9283 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9282
  %9284 = load i32, i32* %9283, align 4, !tbaa !400
  %9285 = insertelement <1024 x i32> %9280, i32 %9284, i32 350
  %9286 = extractelement <1024 x i32> %load.buffer.i, i32 351
  %9287 = sext i32 %9286 to i64
  %9288 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9287
  %9289 = load i32, i32* %9288, align 4, !tbaa !400
  %9290 = insertelement <1024 x i32> %9285, i32 %9289, i32 351
  %9291 = extractelement <1024 x i32> %load.buffer.i, i32 352
  %9292 = sext i32 %9291 to i64
  %9293 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9292
  %9294 = load i32, i32* %9293, align 4, !tbaa !400
  %9295 = insertelement <1024 x i32> %9290, i32 %9294, i32 352
  %9296 = extractelement <1024 x i32> %load.buffer.i, i32 353
  %9297 = sext i32 %9296 to i64
  %9298 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9297
  %9299 = load i32, i32* %9298, align 4, !tbaa !400
  %9300 = insertelement <1024 x i32> %9295, i32 %9299, i32 353
  %9301 = extractelement <1024 x i32> %load.buffer.i, i32 354
  %9302 = sext i32 %9301 to i64
  %9303 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9302
  %9304 = load i32, i32* %9303, align 4, !tbaa !400
  %9305 = insertelement <1024 x i32> %9300, i32 %9304, i32 354
  %9306 = extractelement <1024 x i32> %load.buffer.i, i32 355
  %9307 = sext i32 %9306 to i64
  %9308 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9307
  %9309 = load i32, i32* %9308, align 4, !tbaa !400
  %9310 = insertelement <1024 x i32> %9305, i32 %9309, i32 355
  %9311 = extractelement <1024 x i32> %load.buffer.i, i32 356
  %9312 = sext i32 %9311 to i64
  %9313 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9312
  %9314 = load i32, i32* %9313, align 4, !tbaa !400
  %9315 = insertelement <1024 x i32> %9310, i32 %9314, i32 356
  %9316 = extractelement <1024 x i32> %load.buffer.i, i32 357
  %9317 = sext i32 %9316 to i64
  %9318 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9317
  %9319 = load i32, i32* %9318, align 4, !tbaa !400
  %9320 = insertelement <1024 x i32> %9315, i32 %9319, i32 357
  %9321 = extractelement <1024 x i32> %load.buffer.i, i32 358
  %9322 = sext i32 %9321 to i64
  %9323 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9322
  %9324 = load i32, i32* %9323, align 4, !tbaa !400
  %9325 = insertelement <1024 x i32> %9320, i32 %9324, i32 358
  %9326 = extractelement <1024 x i32> %load.buffer.i, i32 359
  %9327 = sext i32 %9326 to i64
  %9328 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9327
  %9329 = load i32, i32* %9328, align 4, !tbaa !400
  %9330 = insertelement <1024 x i32> %9325, i32 %9329, i32 359
  %9331 = extractelement <1024 x i32> %load.buffer.i, i32 360
  %9332 = sext i32 %9331 to i64
  %9333 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9332
  %9334 = load i32, i32* %9333, align 4, !tbaa !400
  %9335 = insertelement <1024 x i32> %9330, i32 %9334, i32 360
  %9336 = extractelement <1024 x i32> %load.buffer.i, i32 361
  %9337 = sext i32 %9336 to i64
  %9338 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9337
  %9339 = load i32, i32* %9338, align 4, !tbaa !400
  %9340 = insertelement <1024 x i32> %9335, i32 %9339, i32 361
  %9341 = extractelement <1024 x i32> %load.buffer.i, i32 362
  %9342 = sext i32 %9341 to i64
  %9343 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9342
  %9344 = load i32, i32* %9343, align 4, !tbaa !400
  %9345 = insertelement <1024 x i32> %9340, i32 %9344, i32 362
  %9346 = extractelement <1024 x i32> %load.buffer.i, i32 363
  %9347 = sext i32 %9346 to i64
  %9348 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9347
  %9349 = load i32, i32* %9348, align 4, !tbaa !400
  %9350 = insertelement <1024 x i32> %9345, i32 %9349, i32 363
  %9351 = extractelement <1024 x i32> %load.buffer.i, i32 364
  %9352 = sext i32 %9351 to i64
  %9353 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9352
  %9354 = load i32, i32* %9353, align 4, !tbaa !400
  %9355 = insertelement <1024 x i32> %9350, i32 %9354, i32 364
  %9356 = extractelement <1024 x i32> %load.buffer.i, i32 365
  %9357 = sext i32 %9356 to i64
  %9358 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9357
  %9359 = load i32, i32* %9358, align 4, !tbaa !400
  %9360 = insertelement <1024 x i32> %9355, i32 %9359, i32 365
  %9361 = extractelement <1024 x i32> %load.buffer.i, i32 366
  %9362 = sext i32 %9361 to i64
  %9363 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9362
  %9364 = load i32, i32* %9363, align 4, !tbaa !400
  %9365 = insertelement <1024 x i32> %9360, i32 %9364, i32 366
  %9366 = extractelement <1024 x i32> %load.buffer.i, i32 367
  %9367 = sext i32 %9366 to i64
  %9368 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9367
  %9369 = load i32, i32* %9368, align 4, !tbaa !400
  %9370 = insertelement <1024 x i32> %9365, i32 %9369, i32 367
  %9371 = extractelement <1024 x i32> %load.buffer.i, i32 368
  %9372 = sext i32 %9371 to i64
  %9373 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9372
  %9374 = load i32, i32* %9373, align 4, !tbaa !400
  %9375 = insertelement <1024 x i32> %9370, i32 %9374, i32 368
  %9376 = extractelement <1024 x i32> %load.buffer.i, i32 369
  %9377 = sext i32 %9376 to i64
  %9378 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9377
  %9379 = load i32, i32* %9378, align 4, !tbaa !400
  %9380 = insertelement <1024 x i32> %9375, i32 %9379, i32 369
  %9381 = extractelement <1024 x i32> %load.buffer.i, i32 370
  %9382 = sext i32 %9381 to i64
  %9383 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9382
  %9384 = load i32, i32* %9383, align 4, !tbaa !400
  %9385 = insertelement <1024 x i32> %9380, i32 %9384, i32 370
  %9386 = extractelement <1024 x i32> %load.buffer.i, i32 371
  %9387 = sext i32 %9386 to i64
  %9388 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9387
  %9389 = load i32, i32* %9388, align 4, !tbaa !400
  %9390 = insertelement <1024 x i32> %9385, i32 %9389, i32 371
  %9391 = extractelement <1024 x i32> %load.buffer.i, i32 372
  %9392 = sext i32 %9391 to i64
  %9393 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9392
  %9394 = load i32, i32* %9393, align 4, !tbaa !400
  %9395 = insertelement <1024 x i32> %9390, i32 %9394, i32 372
  %9396 = extractelement <1024 x i32> %load.buffer.i, i32 373
  %9397 = sext i32 %9396 to i64
  %9398 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9397
  %9399 = load i32, i32* %9398, align 4, !tbaa !400
  %9400 = insertelement <1024 x i32> %9395, i32 %9399, i32 373
  %9401 = extractelement <1024 x i32> %load.buffer.i, i32 374
  %9402 = sext i32 %9401 to i64
  %9403 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9402
  %9404 = load i32, i32* %9403, align 4, !tbaa !400
  %9405 = insertelement <1024 x i32> %9400, i32 %9404, i32 374
  %9406 = extractelement <1024 x i32> %load.buffer.i, i32 375
  %9407 = sext i32 %9406 to i64
  %9408 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9407
  %9409 = load i32, i32* %9408, align 4, !tbaa !400
  %9410 = insertelement <1024 x i32> %9405, i32 %9409, i32 375
  %9411 = extractelement <1024 x i32> %load.buffer.i, i32 376
  %9412 = sext i32 %9411 to i64
  %9413 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9412
  %9414 = load i32, i32* %9413, align 4, !tbaa !400
  %9415 = insertelement <1024 x i32> %9410, i32 %9414, i32 376
  %9416 = extractelement <1024 x i32> %load.buffer.i, i32 377
  %9417 = sext i32 %9416 to i64
  %9418 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9417
  %9419 = load i32, i32* %9418, align 4, !tbaa !400
  %9420 = insertelement <1024 x i32> %9415, i32 %9419, i32 377
  %9421 = extractelement <1024 x i32> %load.buffer.i, i32 378
  %9422 = sext i32 %9421 to i64
  %9423 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9422
  %9424 = load i32, i32* %9423, align 4, !tbaa !400
  %9425 = insertelement <1024 x i32> %9420, i32 %9424, i32 378
  %9426 = extractelement <1024 x i32> %load.buffer.i, i32 379
  %9427 = sext i32 %9426 to i64
  %9428 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9427
  %9429 = load i32, i32* %9428, align 4, !tbaa !400
  %9430 = insertelement <1024 x i32> %9425, i32 %9429, i32 379
  %9431 = extractelement <1024 x i32> %load.buffer.i, i32 380
  %9432 = sext i32 %9431 to i64
  %9433 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9432
  %9434 = load i32, i32* %9433, align 4, !tbaa !400
  %9435 = insertelement <1024 x i32> %9430, i32 %9434, i32 380
  %9436 = extractelement <1024 x i32> %load.buffer.i, i32 381
  %9437 = sext i32 %9436 to i64
  %9438 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9437
  %9439 = load i32, i32* %9438, align 4, !tbaa !400
  %9440 = insertelement <1024 x i32> %9435, i32 %9439, i32 381
  %9441 = extractelement <1024 x i32> %load.buffer.i, i32 382
  %9442 = sext i32 %9441 to i64
  %9443 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9442
  %9444 = load i32, i32* %9443, align 4, !tbaa !400
  %9445 = insertelement <1024 x i32> %9440, i32 %9444, i32 382
  %9446 = extractelement <1024 x i32> %load.buffer.i, i32 383
  %9447 = sext i32 %9446 to i64
  %9448 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9447
  %9449 = load i32, i32* %9448, align 4, !tbaa !400
  %9450 = insertelement <1024 x i32> %9445, i32 %9449, i32 383
  %9451 = extractelement <1024 x i32> %load.buffer.i, i32 384
  %9452 = sext i32 %9451 to i64
  %9453 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9452
  %9454 = load i32, i32* %9453, align 4, !tbaa !400
  %9455 = insertelement <1024 x i32> %9450, i32 %9454, i32 384
  %9456 = extractelement <1024 x i32> %load.buffer.i, i32 385
  %9457 = sext i32 %9456 to i64
  %9458 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9457
  %9459 = load i32, i32* %9458, align 4, !tbaa !400
  %9460 = insertelement <1024 x i32> %9455, i32 %9459, i32 385
  %9461 = extractelement <1024 x i32> %load.buffer.i, i32 386
  %9462 = sext i32 %9461 to i64
  %9463 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9462
  %9464 = load i32, i32* %9463, align 4, !tbaa !400
  %9465 = insertelement <1024 x i32> %9460, i32 %9464, i32 386
  %9466 = extractelement <1024 x i32> %load.buffer.i, i32 387
  %9467 = sext i32 %9466 to i64
  %9468 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9467
  %9469 = load i32, i32* %9468, align 4, !tbaa !400
  %9470 = insertelement <1024 x i32> %9465, i32 %9469, i32 387
  %9471 = extractelement <1024 x i32> %load.buffer.i, i32 388
  %9472 = sext i32 %9471 to i64
  %9473 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9472
  %9474 = load i32, i32* %9473, align 4, !tbaa !400
  %9475 = insertelement <1024 x i32> %9470, i32 %9474, i32 388
  %9476 = extractelement <1024 x i32> %load.buffer.i, i32 389
  %9477 = sext i32 %9476 to i64
  %9478 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9477
  %9479 = load i32, i32* %9478, align 4, !tbaa !400
  %9480 = insertelement <1024 x i32> %9475, i32 %9479, i32 389
  %9481 = extractelement <1024 x i32> %load.buffer.i, i32 390
  %9482 = sext i32 %9481 to i64
  %9483 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9482
  %9484 = load i32, i32* %9483, align 4, !tbaa !400
  %9485 = insertelement <1024 x i32> %9480, i32 %9484, i32 390
  %9486 = extractelement <1024 x i32> %load.buffer.i, i32 391
  %9487 = sext i32 %9486 to i64
  %9488 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9487
  %9489 = load i32, i32* %9488, align 4, !tbaa !400
  %9490 = insertelement <1024 x i32> %9485, i32 %9489, i32 391
  %9491 = extractelement <1024 x i32> %load.buffer.i, i32 392
  %9492 = sext i32 %9491 to i64
  %9493 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9492
  %9494 = load i32, i32* %9493, align 4, !tbaa !400
  %9495 = insertelement <1024 x i32> %9490, i32 %9494, i32 392
  %9496 = extractelement <1024 x i32> %load.buffer.i, i32 393
  %9497 = sext i32 %9496 to i64
  %9498 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9497
  %9499 = load i32, i32* %9498, align 4, !tbaa !400
  %9500 = insertelement <1024 x i32> %9495, i32 %9499, i32 393
  %9501 = extractelement <1024 x i32> %load.buffer.i, i32 394
  %9502 = sext i32 %9501 to i64
  %9503 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9502
  %9504 = load i32, i32* %9503, align 4, !tbaa !400
  %9505 = insertelement <1024 x i32> %9500, i32 %9504, i32 394
  %9506 = extractelement <1024 x i32> %load.buffer.i, i32 395
  %9507 = sext i32 %9506 to i64
  %9508 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9507
  %9509 = load i32, i32* %9508, align 4, !tbaa !400
  %9510 = insertelement <1024 x i32> %9505, i32 %9509, i32 395
  %9511 = extractelement <1024 x i32> %load.buffer.i, i32 396
  %9512 = sext i32 %9511 to i64
  %9513 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9512
  %9514 = load i32, i32* %9513, align 4, !tbaa !400
  %9515 = insertelement <1024 x i32> %9510, i32 %9514, i32 396
  %9516 = extractelement <1024 x i32> %load.buffer.i, i32 397
  %9517 = sext i32 %9516 to i64
  %9518 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9517
  %9519 = load i32, i32* %9518, align 4, !tbaa !400
  %9520 = insertelement <1024 x i32> %9515, i32 %9519, i32 397
  %9521 = extractelement <1024 x i32> %load.buffer.i, i32 398
  %9522 = sext i32 %9521 to i64
  %9523 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9522
  %9524 = load i32, i32* %9523, align 4, !tbaa !400
  %9525 = insertelement <1024 x i32> %9520, i32 %9524, i32 398
  %9526 = extractelement <1024 x i32> %load.buffer.i, i32 399
  %9527 = sext i32 %9526 to i64
  %9528 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9527
  %9529 = load i32, i32* %9528, align 4, !tbaa !400
  %9530 = insertelement <1024 x i32> %9525, i32 %9529, i32 399
  %9531 = extractelement <1024 x i32> %load.buffer.i, i32 400
  %9532 = sext i32 %9531 to i64
  %9533 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9532
  %9534 = load i32, i32* %9533, align 4, !tbaa !400
  %9535 = insertelement <1024 x i32> %9530, i32 %9534, i32 400
  %9536 = extractelement <1024 x i32> %load.buffer.i, i32 401
  %9537 = sext i32 %9536 to i64
  %9538 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9537
  %9539 = load i32, i32* %9538, align 4, !tbaa !400
  %9540 = insertelement <1024 x i32> %9535, i32 %9539, i32 401
  %9541 = extractelement <1024 x i32> %load.buffer.i, i32 402
  %9542 = sext i32 %9541 to i64
  %9543 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9542
  %9544 = load i32, i32* %9543, align 4, !tbaa !400
  %9545 = insertelement <1024 x i32> %9540, i32 %9544, i32 402
  %9546 = extractelement <1024 x i32> %load.buffer.i, i32 403
  %9547 = sext i32 %9546 to i64
  %9548 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9547
  %9549 = load i32, i32* %9548, align 4, !tbaa !400
  %9550 = insertelement <1024 x i32> %9545, i32 %9549, i32 403
  %9551 = extractelement <1024 x i32> %load.buffer.i, i32 404
  %9552 = sext i32 %9551 to i64
  %9553 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9552
  %9554 = load i32, i32* %9553, align 4, !tbaa !400
  %9555 = insertelement <1024 x i32> %9550, i32 %9554, i32 404
  %9556 = extractelement <1024 x i32> %load.buffer.i, i32 405
  %9557 = sext i32 %9556 to i64
  %9558 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9557
  %9559 = load i32, i32* %9558, align 4, !tbaa !400
  %9560 = insertelement <1024 x i32> %9555, i32 %9559, i32 405
  %9561 = extractelement <1024 x i32> %load.buffer.i, i32 406
  %9562 = sext i32 %9561 to i64
  %9563 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9562
  %9564 = load i32, i32* %9563, align 4, !tbaa !400
  %9565 = insertelement <1024 x i32> %9560, i32 %9564, i32 406
  %9566 = extractelement <1024 x i32> %load.buffer.i, i32 407
  %9567 = sext i32 %9566 to i64
  %9568 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9567
  %9569 = load i32, i32* %9568, align 4, !tbaa !400
  %9570 = insertelement <1024 x i32> %9565, i32 %9569, i32 407
  %9571 = extractelement <1024 x i32> %load.buffer.i, i32 408
  %9572 = sext i32 %9571 to i64
  %9573 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9572
  %9574 = load i32, i32* %9573, align 4, !tbaa !400
  %9575 = insertelement <1024 x i32> %9570, i32 %9574, i32 408
  %9576 = extractelement <1024 x i32> %load.buffer.i, i32 409
  %9577 = sext i32 %9576 to i64
  %9578 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9577
  %9579 = load i32, i32* %9578, align 4, !tbaa !400
  %9580 = insertelement <1024 x i32> %9575, i32 %9579, i32 409
  %9581 = extractelement <1024 x i32> %load.buffer.i, i32 410
  %9582 = sext i32 %9581 to i64
  %9583 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9582
  %9584 = load i32, i32* %9583, align 4, !tbaa !400
  %9585 = insertelement <1024 x i32> %9580, i32 %9584, i32 410
  %9586 = extractelement <1024 x i32> %load.buffer.i, i32 411
  %9587 = sext i32 %9586 to i64
  %9588 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9587
  %9589 = load i32, i32* %9588, align 4, !tbaa !400
  %9590 = insertelement <1024 x i32> %9585, i32 %9589, i32 411
  %9591 = extractelement <1024 x i32> %load.buffer.i, i32 412
  %9592 = sext i32 %9591 to i64
  %9593 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9592
  %9594 = load i32, i32* %9593, align 4, !tbaa !400
  %9595 = insertelement <1024 x i32> %9590, i32 %9594, i32 412
  %9596 = extractelement <1024 x i32> %load.buffer.i, i32 413
  %9597 = sext i32 %9596 to i64
  %9598 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9597
  %9599 = load i32, i32* %9598, align 4, !tbaa !400
  %9600 = insertelement <1024 x i32> %9595, i32 %9599, i32 413
  %9601 = extractelement <1024 x i32> %load.buffer.i, i32 414
  %9602 = sext i32 %9601 to i64
  %9603 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9602
  %9604 = load i32, i32* %9603, align 4, !tbaa !400
  %9605 = insertelement <1024 x i32> %9600, i32 %9604, i32 414
  %9606 = extractelement <1024 x i32> %load.buffer.i, i32 415
  %9607 = sext i32 %9606 to i64
  %9608 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9607
  %9609 = load i32, i32* %9608, align 4, !tbaa !400
  %9610 = insertelement <1024 x i32> %9605, i32 %9609, i32 415
  %9611 = extractelement <1024 x i32> %load.buffer.i, i32 416
  %9612 = sext i32 %9611 to i64
  %9613 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9612
  %9614 = load i32, i32* %9613, align 4, !tbaa !400
  %9615 = insertelement <1024 x i32> %9610, i32 %9614, i32 416
  %9616 = extractelement <1024 x i32> %load.buffer.i, i32 417
  %9617 = sext i32 %9616 to i64
  %9618 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9617
  %9619 = load i32, i32* %9618, align 4, !tbaa !400
  %9620 = insertelement <1024 x i32> %9615, i32 %9619, i32 417
  %9621 = extractelement <1024 x i32> %load.buffer.i, i32 418
  %9622 = sext i32 %9621 to i64
  %9623 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9622
  %9624 = load i32, i32* %9623, align 4, !tbaa !400
  %9625 = insertelement <1024 x i32> %9620, i32 %9624, i32 418
  %9626 = extractelement <1024 x i32> %load.buffer.i, i32 419
  %9627 = sext i32 %9626 to i64
  %9628 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9627
  %9629 = load i32, i32* %9628, align 4, !tbaa !400
  %9630 = insertelement <1024 x i32> %9625, i32 %9629, i32 419
  %9631 = extractelement <1024 x i32> %load.buffer.i, i32 420
  %9632 = sext i32 %9631 to i64
  %9633 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9632
  %9634 = load i32, i32* %9633, align 4, !tbaa !400
  %9635 = insertelement <1024 x i32> %9630, i32 %9634, i32 420
  %9636 = extractelement <1024 x i32> %load.buffer.i, i32 421
  %9637 = sext i32 %9636 to i64
  %9638 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9637
  %9639 = load i32, i32* %9638, align 4, !tbaa !400
  %9640 = insertelement <1024 x i32> %9635, i32 %9639, i32 421
  %9641 = extractelement <1024 x i32> %load.buffer.i, i32 422
  %9642 = sext i32 %9641 to i64
  %9643 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9642
  %9644 = load i32, i32* %9643, align 4, !tbaa !400
  %9645 = insertelement <1024 x i32> %9640, i32 %9644, i32 422
  %9646 = extractelement <1024 x i32> %load.buffer.i, i32 423
  %9647 = sext i32 %9646 to i64
  %9648 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9647
  %9649 = load i32, i32* %9648, align 4, !tbaa !400
  %9650 = insertelement <1024 x i32> %9645, i32 %9649, i32 423
  %9651 = extractelement <1024 x i32> %load.buffer.i, i32 424
  %9652 = sext i32 %9651 to i64
  %9653 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9652
  %9654 = load i32, i32* %9653, align 4, !tbaa !400
  %9655 = insertelement <1024 x i32> %9650, i32 %9654, i32 424
  %9656 = extractelement <1024 x i32> %load.buffer.i, i32 425
  %9657 = sext i32 %9656 to i64
  %9658 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9657
  %9659 = load i32, i32* %9658, align 4, !tbaa !400
  %9660 = insertelement <1024 x i32> %9655, i32 %9659, i32 425
  %9661 = extractelement <1024 x i32> %load.buffer.i, i32 426
  %9662 = sext i32 %9661 to i64
  %9663 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9662
  %9664 = load i32, i32* %9663, align 4, !tbaa !400
  %9665 = insertelement <1024 x i32> %9660, i32 %9664, i32 426
  %9666 = extractelement <1024 x i32> %load.buffer.i, i32 427
  %9667 = sext i32 %9666 to i64
  %9668 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9667
  %9669 = load i32, i32* %9668, align 4, !tbaa !400
  %9670 = insertelement <1024 x i32> %9665, i32 %9669, i32 427
  %9671 = extractelement <1024 x i32> %load.buffer.i, i32 428
  %9672 = sext i32 %9671 to i64
  %9673 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9672
  %9674 = load i32, i32* %9673, align 4, !tbaa !400
  %9675 = insertelement <1024 x i32> %9670, i32 %9674, i32 428
  %9676 = extractelement <1024 x i32> %load.buffer.i, i32 429
  %9677 = sext i32 %9676 to i64
  %9678 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9677
  %9679 = load i32, i32* %9678, align 4, !tbaa !400
  %9680 = insertelement <1024 x i32> %9675, i32 %9679, i32 429
  %9681 = extractelement <1024 x i32> %load.buffer.i, i32 430
  %9682 = sext i32 %9681 to i64
  %9683 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9682
  %9684 = load i32, i32* %9683, align 4, !tbaa !400
  %9685 = insertelement <1024 x i32> %9680, i32 %9684, i32 430
  %9686 = extractelement <1024 x i32> %load.buffer.i, i32 431
  %9687 = sext i32 %9686 to i64
  %9688 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9687
  %9689 = load i32, i32* %9688, align 4, !tbaa !400
  %9690 = insertelement <1024 x i32> %9685, i32 %9689, i32 431
  %9691 = extractelement <1024 x i32> %load.buffer.i, i32 432
  %9692 = sext i32 %9691 to i64
  %9693 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9692
  %9694 = load i32, i32* %9693, align 4, !tbaa !400
  %9695 = insertelement <1024 x i32> %9690, i32 %9694, i32 432
  %9696 = extractelement <1024 x i32> %load.buffer.i, i32 433
  %9697 = sext i32 %9696 to i64
  %9698 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9697
  %9699 = load i32, i32* %9698, align 4, !tbaa !400
  %9700 = insertelement <1024 x i32> %9695, i32 %9699, i32 433
  %9701 = extractelement <1024 x i32> %load.buffer.i, i32 434
  %9702 = sext i32 %9701 to i64
  %9703 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9702
  %9704 = load i32, i32* %9703, align 4, !tbaa !400
  %9705 = insertelement <1024 x i32> %9700, i32 %9704, i32 434
  %9706 = extractelement <1024 x i32> %load.buffer.i, i32 435
  %9707 = sext i32 %9706 to i64
  %9708 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9707
  %9709 = load i32, i32* %9708, align 4, !tbaa !400
  %9710 = insertelement <1024 x i32> %9705, i32 %9709, i32 435
  %9711 = extractelement <1024 x i32> %load.buffer.i, i32 436
  %9712 = sext i32 %9711 to i64
  %9713 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9712
  %9714 = load i32, i32* %9713, align 4, !tbaa !400
  %9715 = insertelement <1024 x i32> %9710, i32 %9714, i32 436
  %9716 = extractelement <1024 x i32> %load.buffer.i, i32 437
  %9717 = sext i32 %9716 to i64
  %9718 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9717
  %9719 = load i32, i32* %9718, align 4, !tbaa !400
  %9720 = insertelement <1024 x i32> %9715, i32 %9719, i32 437
  %9721 = extractelement <1024 x i32> %load.buffer.i, i32 438
  %9722 = sext i32 %9721 to i64
  %9723 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9722
  %9724 = load i32, i32* %9723, align 4, !tbaa !400
  %9725 = insertelement <1024 x i32> %9720, i32 %9724, i32 438
  %9726 = extractelement <1024 x i32> %load.buffer.i, i32 439
  %9727 = sext i32 %9726 to i64
  %9728 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9727
  %9729 = load i32, i32* %9728, align 4, !tbaa !400
  %9730 = insertelement <1024 x i32> %9725, i32 %9729, i32 439
  %9731 = extractelement <1024 x i32> %load.buffer.i, i32 440
  %9732 = sext i32 %9731 to i64
  %9733 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9732
  %9734 = load i32, i32* %9733, align 4, !tbaa !400
  %9735 = insertelement <1024 x i32> %9730, i32 %9734, i32 440
  %9736 = extractelement <1024 x i32> %load.buffer.i, i32 441
  %9737 = sext i32 %9736 to i64
  %9738 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9737
  %9739 = load i32, i32* %9738, align 4, !tbaa !400
  %9740 = insertelement <1024 x i32> %9735, i32 %9739, i32 441
  %9741 = extractelement <1024 x i32> %load.buffer.i, i32 442
  %9742 = sext i32 %9741 to i64
  %9743 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9742
  %9744 = load i32, i32* %9743, align 4, !tbaa !400
  %9745 = insertelement <1024 x i32> %9740, i32 %9744, i32 442
  %9746 = extractelement <1024 x i32> %load.buffer.i, i32 443
  %9747 = sext i32 %9746 to i64
  %9748 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9747
  %9749 = load i32, i32* %9748, align 4, !tbaa !400
  %9750 = insertelement <1024 x i32> %9745, i32 %9749, i32 443
  %9751 = extractelement <1024 x i32> %load.buffer.i, i32 444
  %9752 = sext i32 %9751 to i64
  %9753 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9752
  %9754 = load i32, i32* %9753, align 4, !tbaa !400
  %9755 = insertelement <1024 x i32> %9750, i32 %9754, i32 444
  %9756 = extractelement <1024 x i32> %load.buffer.i, i32 445
  %9757 = sext i32 %9756 to i64
  %9758 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9757
  %9759 = load i32, i32* %9758, align 4, !tbaa !400
  %9760 = insertelement <1024 x i32> %9755, i32 %9759, i32 445
  %9761 = extractelement <1024 x i32> %load.buffer.i, i32 446
  %9762 = sext i32 %9761 to i64
  %9763 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9762
  %9764 = load i32, i32* %9763, align 4, !tbaa !400
  %9765 = insertelement <1024 x i32> %9760, i32 %9764, i32 446
  %9766 = extractelement <1024 x i32> %load.buffer.i, i32 447
  %9767 = sext i32 %9766 to i64
  %9768 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9767
  %9769 = load i32, i32* %9768, align 4, !tbaa !400
  %9770 = insertelement <1024 x i32> %9765, i32 %9769, i32 447
  %9771 = extractelement <1024 x i32> %load.buffer.i, i32 448
  %9772 = sext i32 %9771 to i64
  %9773 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9772
  %9774 = load i32, i32* %9773, align 4, !tbaa !400
  %9775 = insertelement <1024 x i32> %9770, i32 %9774, i32 448
  %9776 = extractelement <1024 x i32> %load.buffer.i, i32 449
  %9777 = sext i32 %9776 to i64
  %9778 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9777
  %9779 = load i32, i32* %9778, align 4, !tbaa !400
  %9780 = insertelement <1024 x i32> %9775, i32 %9779, i32 449
  %9781 = extractelement <1024 x i32> %load.buffer.i, i32 450
  %9782 = sext i32 %9781 to i64
  %9783 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9782
  %9784 = load i32, i32* %9783, align 4, !tbaa !400
  %9785 = insertelement <1024 x i32> %9780, i32 %9784, i32 450
  %9786 = extractelement <1024 x i32> %load.buffer.i, i32 451
  %9787 = sext i32 %9786 to i64
  %9788 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9787
  %9789 = load i32, i32* %9788, align 4, !tbaa !400
  %9790 = insertelement <1024 x i32> %9785, i32 %9789, i32 451
  %9791 = extractelement <1024 x i32> %load.buffer.i, i32 452
  %9792 = sext i32 %9791 to i64
  %9793 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9792
  %9794 = load i32, i32* %9793, align 4, !tbaa !400
  %9795 = insertelement <1024 x i32> %9790, i32 %9794, i32 452
  %9796 = extractelement <1024 x i32> %load.buffer.i, i32 453
  %9797 = sext i32 %9796 to i64
  %9798 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9797
  %9799 = load i32, i32* %9798, align 4, !tbaa !400
  %9800 = insertelement <1024 x i32> %9795, i32 %9799, i32 453
  %9801 = extractelement <1024 x i32> %load.buffer.i, i32 454
  %9802 = sext i32 %9801 to i64
  %9803 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9802
  %9804 = load i32, i32* %9803, align 4, !tbaa !400
  %9805 = insertelement <1024 x i32> %9800, i32 %9804, i32 454
  %9806 = extractelement <1024 x i32> %load.buffer.i, i32 455
  %9807 = sext i32 %9806 to i64
  %9808 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9807
  %9809 = load i32, i32* %9808, align 4, !tbaa !400
  %9810 = insertelement <1024 x i32> %9805, i32 %9809, i32 455
  %9811 = extractelement <1024 x i32> %load.buffer.i, i32 456
  %9812 = sext i32 %9811 to i64
  %9813 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9812
  %9814 = load i32, i32* %9813, align 4, !tbaa !400
  %9815 = insertelement <1024 x i32> %9810, i32 %9814, i32 456
  %9816 = extractelement <1024 x i32> %load.buffer.i, i32 457
  %9817 = sext i32 %9816 to i64
  %9818 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9817
  %9819 = load i32, i32* %9818, align 4, !tbaa !400
  %9820 = insertelement <1024 x i32> %9815, i32 %9819, i32 457
  %9821 = extractelement <1024 x i32> %load.buffer.i, i32 458
  %9822 = sext i32 %9821 to i64
  %9823 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9822
  %9824 = load i32, i32* %9823, align 4, !tbaa !400
  %9825 = insertelement <1024 x i32> %9820, i32 %9824, i32 458
  %9826 = extractelement <1024 x i32> %load.buffer.i, i32 459
  %9827 = sext i32 %9826 to i64
  %9828 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9827
  %9829 = load i32, i32* %9828, align 4, !tbaa !400
  %9830 = insertelement <1024 x i32> %9825, i32 %9829, i32 459
  %9831 = extractelement <1024 x i32> %load.buffer.i, i32 460
  %9832 = sext i32 %9831 to i64
  %9833 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9832
  %9834 = load i32, i32* %9833, align 4, !tbaa !400
  %9835 = insertelement <1024 x i32> %9830, i32 %9834, i32 460
  %9836 = extractelement <1024 x i32> %load.buffer.i, i32 461
  %9837 = sext i32 %9836 to i64
  %9838 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9837
  %9839 = load i32, i32* %9838, align 4, !tbaa !400
  %9840 = insertelement <1024 x i32> %9835, i32 %9839, i32 461
  %9841 = extractelement <1024 x i32> %load.buffer.i, i32 462
  %9842 = sext i32 %9841 to i64
  %9843 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9842
  %9844 = load i32, i32* %9843, align 4, !tbaa !400
  %9845 = insertelement <1024 x i32> %9840, i32 %9844, i32 462
  %9846 = extractelement <1024 x i32> %load.buffer.i, i32 463
  %9847 = sext i32 %9846 to i64
  %9848 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9847
  %9849 = load i32, i32* %9848, align 4, !tbaa !400
  %9850 = insertelement <1024 x i32> %9845, i32 %9849, i32 463
  %9851 = extractelement <1024 x i32> %load.buffer.i, i32 464
  %9852 = sext i32 %9851 to i64
  %9853 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9852
  %9854 = load i32, i32* %9853, align 4, !tbaa !400
  %9855 = insertelement <1024 x i32> %9850, i32 %9854, i32 464
  %9856 = extractelement <1024 x i32> %load.buffer.i, i32 465
  %9857 = sext i32 %9856 to i64
  %9858 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9857
  %9859 = load i32, i32* %9858, align 4, !tbaa !400
  %9860 = insertelement <1024 x i32> %9855, i32 %9859, i32 465
  %9861 = extractelement <1024 x i32> %load.buffer.i, i32 466
  %9862 = sext i32 %9861 to i64
  %9863 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9862
  %9864 = load i32, i32* %9863, align 4, !tbaa !400
  %9865 = insertelement <1024 x i32> %9860, i32 %9864, i32 466
  %9866 = extractelement <1024 x i32> %load.buffer.i, i32 467
  %9867 = sext i32 %9866 to i64
  %9868 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9867
  %9869 = load i32, i32* %9868, align 4, !tbaa !400
  %9870 = insertelement <1024 x i32> %9865, i32 %9869, i32 467
  %9871 = extractelement <1024 x i32> %load.buffer.i, i32 468
  %9872 = sext i32 %9871 to i64
  %9873 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9872
  %9874 = load i32, i32* %9873, align 4, !tbaa !400
  %9875 = insertelement <1024 x i32> %9870, i32 %9874, i32 468
  %9876 = extractelement <1024 x i32> %load.buffer.i, i32 469
  %9877 = sext i32 %9876 to i64
  %9878 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9877
  %9879 = load i32, i32* %9878, align 4, !tbaa !400
  %9880 = insertelement <1024 x i32> %9875, i32 %9879, i32 469
  %9881 = extractelement <1024 x i32> %load.buffer.i, i32 470
  %9882 = sext i32 %9881 to i64
  %9883 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9882
  %9884 = load i32, i32* %9883, align 4, !tbaa !400
  %9885 = insertelement <1024 x i32> %9880, i32 %9884, i32 470
  %9886 = extractelement <1024 x i32> %load.buffer.i, i32 471
  %9887 = sext i32 %9886 to i64
  %9888 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9887
  %9889 = load i32, i32* %9888, align 4, !tbaa !400
  %9890 = insertelement <1024 x i32> %9885, i32 %9889, i32 471
  %9891 = extractelement <1024 x i32> %load.buffer.i, i32 472
  %9892 = sext i32 %9891 to i64
  %9893 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9892
  %9894 = load i32, i32* %9893, align 4, !tbaa !400
  %9895 = insertelement <1024 x i32> %9890, i32 %9894, i32 472
  %9896 = extractelement <1024 x i32> %load.buffer.i, i32 473
  %9897 = sext i32 %9896 to i64
  %9898 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9897
  %9899 = load i32, i32* %9898, align 4, !tbaa !400
  %9900 = insertelement <1024 x i32> %9895, i32 %9899, i32 473
  %9901 = extractelement <1024 x i32> %load.buffer.i, i32 474
  %9902 = sext i32 %9901 to i64
  %9903 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9902
  %9904 = load i32, i32* %9903, align 4, !tbaa !400
  %9905 = insertelement <1024 x i32> %9900, i32 %9904, i32 474
  %9906 = extractelement <1024 x i32> %load.buffer.i, i32 475
  %9907 = sext i32 %9906 to i64
  %9908 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9907
  %9909 = load i32, i32* %9908, align 4, !tbaa !400
  %9910 = insertelement <1024 x i32> %9905, i32 %9909, i32 475
  %9911 = extractelement <1024 x i32> %load.buffer.i, i32 476
  %9912 = sext i32 %9911 to i64
  %9913 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9912
  %9914 = load i32, i32* %9913, align 4, !tbaa !400
  %9915 = insertelement <1024 x i32> %9910, i32 %9914, i32 476
  %9916 = extractelement <1024 x i32> %load.buffer.i, i32 477
  %9917 = sext i32 %9916 to i64
  %9918 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9917
  %9919 = load i32, i32* %9918, align 4, !tbaa !400
  %9920 = insertelement <1024 x i32> %9915, i32 %9919, i32 477
  %9921 = extractelement <1024 x i32> %load.buffer.i, i32 478
  %9922 = sext i32 %9921 to i64
  %9923 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9922
  %9924 = load i32, i32* %9923, align 4, !tbaa !400
  %9925 = insertelement <1024 x i32> %9920, i32 %9924, i32 478
  %9926 = extractelement <1024 x i32> %load.buffer.i, i32 479
  %9927 = sext i32 %9926 to i64
  %9928 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9927
  %9929 = load i32, i32* %9928, align 4, !tbaa !400
  %9930 = insertelement <1024 x i32> %9925, i32 %9929, i32 479
  %9931 = extractelement <1024 x i32> %load.buffer.i, i32 480
  %9932 = sext i32 %9931 to i64
  %9933 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9932
  %9934 = load i32, i32* %9933, align 4, !tbaa !400
  %9935 = insertelement <1024 x i32> %9930, i32 %9934, i32 480
  %9936 = extractelement <1024 x i32> %load.buffer.i, i32 481
  %9937 = sext i32 %9936 to i64
  %9938 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9937
  %9939 = load i32, i32* %9938, align 4, !tbaa !400
  %9940 = insertelement <1024 x i32> %9935, i32 %9939, i32 481
  %9941 = extractelement <1024 x i32> %load.buffer.i, i32 482
  %9942 = sext i32 %9941 to i64
  %9943 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9942
  %9944 = load i32, i32* %9943, align 4, !tbaa !400
  %9945 = insertelement <1024 x i32> %9940, i32 %9944, i32 482
  %9946 = extractelement <1024 x i32> %load.buffer.i, i32 483
  %9947 = sext i32 %9946 to i64
  %9948 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9947
  %9949 = load i32, i32* %9948, align 4, !tbaa !400
  %9950 = insertelement <1024 x i32> %9945, i32 %9949, i32 483
  %9951 = extractelement <1024 x i32> %load.buffer.i, i32 484
  %9952 = sext i32 %9951 to i64
  %9953 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9952
  %9954 = load i32, i32* %9953, align 4, !tbaa !400
  %9955 = insertelement <1024 x i32> %9950, i32 %9954, i32 484
  %9956 = extractelement <1024 x i32> %load.buffer.i, i32 485
  %9957 = sext i32 %9956 to i64
  %9958 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9957
  %9959 = load i32, i32* %9958, align 4, !tbaa !400
  %9960 = insertelement <1024 x i32> %9955, i32 %9959, i32 485
  %9961 = extractelement <1024 x i32> %load.buffer.i, i32 486
  %9962 = sext i32 %9961 to i64
  %9963 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9962
  %9964 = load i32, i32* %9963, align 4, !tbaa !400
  %9965 = insertelement <1024 x i32> %9960, i32 %9964, i32 486
  %9966 = extractelement <1024 x i32> %load.buffer.i, i32 487
  %9967 = sext i32 %9966 to i64
  %9968 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9967
  %9969 = load i32, i32* %9968, align 4, !tbaa !400
  %9970 = insertelement <1024 x i32> %9965, i32 %9969, i32 487
  %9971 = extractelement <1024 x i32> %load.buffer.i, i32 488
  %9972 = sext i32 %9971 to i64
  %9973 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9972
  %9974 = load i32, i32* %9973, align 4, !tbaa !400
  %9975 = insertelement <1024 x i32> %9970, i32 %9974, i32 488
  %9976 = extractelement <1024 x i32> %load.buffer.i, i32 489
  %9977 = sext i32 %9976 to i64
  %9978 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9977
  %9979 = load i32, i32* %9978, align 4, !tbaa !400
  %9980 = insertelement <1024 x i32> %9975, i32 %9979, i32 489
  %9981 = extractelement <1024 x i32> %load.buffer.i, i32 490
  %9982 = sext i32 %9981 to i64
  %9983 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9982
  %9984 = load i32, i32* %9983, align 4, !tbaa !400
  %9985 = insertelement <1024 x i32> %9980, i32 %9984, i32 490
  %9986 = extractelement <1024 x i32> %load.buffer.i, i32 491
  %9987 = sext i32 %9986 to i64
  %9988 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9987
  %9989 = load i32, i32* %9988, align 4, !tbaa !400
  %9990 = insertelement <1024 x i32> %9985, i32 %9989, i32 491
  %9991 = extractelement <1024 x i32> %load.buffer.i, i32 492
  %9992 = sext i32 %9991 to i64
  %9993 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9992
  %9994 = load i32, i32* %9993, align 4, !tbaa !400
  %9995 = insertelement <1024 x i32> %9990, i32 %9994, i32 492
  %9996 = extractelement <1024 x i32> %load.buffer.i, i32 493
  %9997 = sext i32 %9996 to i64
  %9998 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %9997
  %9999 = load i32, i32* %9998, align 4, !tbaa !400
  %10000 = insertelement <1024 x i32> %9995, i32 %9999, i32 493
  %10001 = extractelement <1024 x i32> %load.buffer.i, i32 494
  %10002 = sext i32 %10001 to i64
  %10003 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10002
  %10004 = load i32, i32* %10003, align 4, !tbaa !400
  %10005 = insertelement <1024 x i32> %10000, i32 %10004, i32 494
  %10006 = extractelement <1024 x i32> %load.buffer.i, i32 495
  %10007 = sext i32 %10006 to i64
  %10008 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10007
  %10009 = load i32, i32* %10008, align 4, !tbaa !400
  %10010 = insertelement <1024 x i32> %10005, i32 %10009, i32 495
  %10011 = extractelement <1024 x i32> %load.buffer.i, i32 496
  %10012 = sext i32 %10011 to i64
  %10013 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10012
  %10014 = load i32, i32* %10013, align 4, !tbaa !400
  %10015 = insertelement <1024 x i32> %10010, i32 %10014, i32 496
  %10016 = extractelement <1024 x i32> %load.buffer.i, i32 497
  %10017 = sext i32 %10016 to i64
  %10018 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10017
  %10019 = load i32, i32* %10018, align 4, !tbaa !400
  %10020 = insertelement <1024 x i32> %10015, i32 %10019, i32 497
  %10021 = extractelement <1024 x i32> %load.buffer.i, i32 498
  %10022 = sext i32 %10021 to i64
  %10023 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10022
  %10024 = load i32, i32* %10023, align 4, !tbaa !400
  %10025 = insertelement <1024 x i32> %10020, i32 %10024, i32 498
  %10026 = extractelement <1024 x i32> %load.buffer.i, i32 499
  %10027 = sext i32 %10026 to i64
  %10028 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10027
  %10029 = load i32, i32* %10028, align 4, !tbaa !400
  %10030 = insertelement <1024 x i32> %10025, i32 %10029, i32 499
  %10031 = extractelement <1024 x i32> %load.buffer.i, i32 500
  %10032 = sext i32 %10031 to i64
  %10033 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10032
  %10034 = load i32, i32* %10033, align 4, !tbaa !400
  %10035 = insertelement <1024 x i32> %10030, i32 %10034, i32 500
  %10036 = extractelement <1024 x i32> %load.buffer.i, i32 501
  %10037 = sext i32 %10036 to i64
  %10038 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10037
  %10039 = load i32, i32* %10038, align 4, !tbaa !400
  %10040 = insertelement <1024 x i32> %10035, i32 %10039, i32 501
  %10041 = extractelement <1024 x i32> %load.buffer.i, i32 502
  %10042 = sext i32 %10041 to i64
  %10043 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10042
  %10044 = load i32, i32* %10043, align 4, !tbaa !400
  %10045 = insertelement <1024 x i32> %10040, i32 %10044, i32 502
  %10046 = extractelement <1024 x i32> %load.buffer.i, i32 503
  %10047 = sext i32 %10046 to i64
  %10048 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10047
  %10049 = load i32, i32* %10048, align 4, !tbaa !400
  %10050 = insertelement <1024 x i32> %10045, i32 %10049, i32 503
  %10051 = extractelement <1024 x i32> %load.buffer.i, i32 504
  %10052 = sext i32 %10051 to i64
  %10053 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10052
  %10054 = load i32, i32* %10053, align 4, !tbaa !400
  %10055 = insertelement <1024 x i32> %10050, i32 %10054, i32 504
  %10056 = extractelement <1024 x i32> %load.buffer.i, i32 505
  %10057 = sext i32 %10056 to i64
  %10058 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10057
  %10059 = load i32, i32* %10058, align 4, !tbaa !400
  %10060 = insertelement <1024 x i32> %10055, i32 %10059, i32 505
  %10061 = extractelement <1024 x i32> %load.buffer.i, i32 506
  %10062 = sext i32 %10061 to i64
  %10063 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10062
  %10064 = load i32, i32* %10063, align 4, !tbaa !400
  %10065 = insertelement <1024 x i32> %10060, i32 %10064, i32 506
  %10066 = extractelement <1024 x i32> %load.buffer.i, i32 507
  %10067 = sext i32 %10066 to i64
  %10068 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10067
  %10069 = load i32, i32* %10068, align 4, !tbaa !400
  %10070 = insertelement <1024 x i32> %10065, i32 %10069, i32 507
  %10071 = extractelement <1024 x i32> %load.buffer.i, i32 508
  %10072 = sext i32 %10071 to i64
  %10073 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10072
  %10074 = load i32, i32* %10073, align 4, !tbaa !400
  %10075 = insertelement <1024 x i32> %10070, i32 %10074, i32 508
  %10076 = extractelement <1024 x i32> %load.buffer.i, i32 509
  %10077 = sext i32 %10076 to i64
  %10078 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10077
  %10079 = load i32, i32* %10078, align 4, !tbaa !400
  %10080 = insertelement <1024 x i32> %10075, i32 %10079, i32 509
  %10081 = extractelement <1024 x i32> %load.buffer.i, i32 510
  %10082 = sext i32 %10081 to i64
  %10083 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10082
  %10084 = load i32, i32* %10083, align 4, !tbaa !400
  %10085 = insertelement <1024 x i32> %10080, i32 %10084, i32 510
  %10086 = extractelement <1024 x i32> %load.buffer.i, i32 511
  %10087 = sext i32 %10086 to i64
  %10088 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10087
  %10089 = load i32, i32* %10088, align 4, !tbaa !400
  %10090 = insertelement <1024 x i32> %10085, i32 %10089, i32 511
  %10091 = extractelement <1024 x i32> %load.buffer.i, i32 512
  %10092 = sext i32 %10091 to i64
  %10093 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10092
  %10094 = load i32, i32* %10093, align 4, !tbaa !400
  %10095 = insertelement <1024 x i32> %10090, i32 %10094, i32 512
  %10096 = extractelement <1024 x i32> %load.buffer.i, i32 513
  %10097 = sext i32 %10096 to i64
  %10098 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10097
  %10099 = load i32, i32* %10098, align 4, !tbaa !400
  %10100 = insertelement <1024 x i32> %10095, i32 %10099, i32 513
  %10101 = extractelement <1024 x i32> %load.buffer.i, i32 514
  %10102 = sext i32 %10101 to i64
  %10103 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10102
  %10104 = load i32, i32* %10103, align 4, !tbaa !400
  %10105 = insertelement <1024 x i32> %10100, i32 %10104, i32 514
  %10106 = extractelement <1024 x i32> %load.buffer.i, i32 515
  %10107 = sext i32 %10106 to i64
  %10108 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10107
  %10109 = load i32, i32* %10108, align 4, !tbaa !400
  %10110 = insertelement <1024 x i32> %10105, i32 %10109, i32 515
  %10111 = extractelement <1024 x i32> %load.buffer.i, i32 516
  %10112 = sext i32 %10111 to i64
  %10113 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10112
  %10114 = load i32, i32* %10113, align 4, !tbaa !400
  %10115 = insertelement <1024 x i32> %10110, i32 %10114, i32 516
  %10116 = extractelement <1024 x i32> %load.buffer.i, i32 517
  %10117 = sext i32 %10116 to i64
  %10118 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10117
  %10119 = load i32, i32* %10118, align 4, !tbaa !400
  %10120 = insertelement <1024 x i32> %10115, i32 %10119, i32 517
  %10121 = extractelement <1024 x i32> %load.buffer.i, i32 518
  %10122 = sext i32 %10121 to i64
  %10123 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10122
  %10124 = load i32, i32* %10123, align 4, !tbaa !400
  %10125 = insertelement <1024 x i32> %10120, i32 %10124, i32 518
  %10126 = extractelement <1024 x i32> %load.buffer.i, i32 519
  %10127 = sext i32 %10126 to i64
  %10128 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10127
  %10129 = load i32, i32* %10128, align 4, !tbaa !400
  %10130 = insertelement <1024 x i32> %10125, i32 %10129, i32 519
  %10131 = extractelement <1024 x i32> %load.buffer.i, i32 520
  %10132 = sext i32 %10131 to i64
  %10133 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10132
  %10134 = load i32, i32* %10133, align 4, !tbaa !400
  %10135 = insertelement <1024 x i32> %10130, i32 %10134, i32 520
  %10136 = extractelement <1024 x i32> %load.buffer.i, i32 521
  %10137 = sext i32 %10136 to i64
  %10138 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10137
  %10139 = load i32, i32* %10138, align 4, !tbaa !400
  %10140 = insertelement <1024 x i32> %10135, i32 %10139, i32 521
  %10141 = extractelement <1024 x i32> %load.buffer.i, i32 522
  %10142 = sext i32 %10141 to i64
  %10143 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10142
  %10144 = load i32, i32* %10143, align 4, !tbaa !400
  %10145 = insertelement <1024 x i32> %10140, i32 %10144, i32 522
  %10146 = extractelement <1024 x i32> %load.buffer.i, i32 523
  %10147 = sext i32 %10146 to i64
  %10148 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10147
  %10149 = load i32, i32* %10148, align 4, !tbaa !400
  %10150 = insertelement <1024 x i32> %10145, i32 %10149, i32 523
  %10151 = extractelement <1024 x i32> %load.buffer.i, i32 524
  %10152 = sext i32 %10151 to i64
  %10153 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10152
  %10154 = load i32, i32* %10153, align 4, !tbaa !400
  %10155 = insertelement <1024 x i32> %10150, i32 %10154, i32 524
  %10156 = extractelement <1024 x i32> %load.buffer.i, i32 525
  %10157 = sext i32 %10156 to i64
  %10158 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10157
  %10159 = load i32, i32* %10158, align 4, !tbaa !400
  %10160 = insertelement <1024 x i32> %10155, i32 %10159, i32 525
  %10161 = extractelement <1024 x i32> %load.buffer.i, i32 526
  %10162 = sext i32 %10161 to i64
  %10163 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10162
  %10164 = load i32, i32* %10163, align 4, !tbaa !400
  %10165 = insertelement <1024 x i32> %10160, i32 %10164, i32 526
  %10166 = extractelement <1024 x i32> %load.buffer.i, i32 527
  %10167 = sext i32 %10166 to i64
  %10168 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10167
  %10169 = load i32, i32* %10168, align 4, !tbaa !400
  %10170 = insertelement <1024 x i32> %10165, i32 %10169, i32 527
  %10171 = extractelement <1024 x i32> %load.buffer.i, i32 528
  %10172 = sext i32 %10171 to i64
  %10173 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10172
  %10174 = load i32, i32* %10173, align 4, !tbaa !400
  %10175 = insertelement <1024 x i32> %10170, i32 %10174, i32 528
  %10176 = extractelement <1024 x i32> %load.buffer.i, i32 529
  %10177 = sext i32 %10176 to i64
  %10178 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10177
  %10179 = load i32, i32* %10178, align 4, !tbaa !400
  %10180 = insertelement <1024 x i32> %10175, i32 %10179, i32 529
  %10181 = extractelement <1024 x i32> %load.buffer.i, i32 530
  %10182 = sext i32 %10181 to i64
  %10183 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10182
  %10184 = load i32, i32* %10183, align 4, !tbaa !400
  %10185 = insertelement <1024 x i32> %10180, i32 %10184, i32 530
  %10186 = extractelement <1024 x i32> %load.buffer.i, i32 531
  %10187 = sext i32 %10186 to i64
  %10188 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10187
  %10189 = load i32, i32* %10188, align 4, !tbaa !400
  %10190 = insertelement <1024 x i32> %10185, i32 %10189, i32 531
  %10191 = extractelement <1024 x i32> %load.buffer.i, i32 532
  %10192 = sext i32 %10191 to i64
  %10193 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10192
  %10194 = load i32, i32* %10193, align 4, !tbaa !400
  %10195 = insertelement <1024 x i32> %10190, i32 %10194, i32 532
  %10196 = extractelement <1024 x i32> %load.buffer.i, i32 533
  %10197 = sext i32 %10196 to i64
  %10198 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10197
  %10199 = load i32, i32* %10198, align 4, !tbaa !400
  %10200 = insertelement <1024 x i32> %10195, i32 %10199, i32 533
  %10201 = extractelement <1024 x i32> %load.buffer.i, i32 534
  %10202 = sext i32 %10201 to i64
  %10203 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10202
  %10204 = load i32, i32* %10203, align 4, !tbaa !400
  %10205 = insertelement <1024 x i32> %10200, i32 %10204, i32 534
  %10206 = extractelement <1024 x i32> %load.buffer.i, i32 535
  %10207 = sext i32 %10206 to i64
  %10208 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10207
  %10209 = load i32, i32* %10208, align 4, !tbaa !400
  %10210 = insertelement <1024 x i32> %10205, i32 %10209, i32 535
  %10211 = extractelement <1024 x i32> %load.buffer.i, i32 536
  %10212 = sext i32 %10211 to i64
  %10213 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10212
  %10214 = load i32, i32* %10213, align 4, !tbaa !400
  %10215 = insertelement <1024 x i32> %10210, i32 %10214, i32 536
  %10216 = extractelement <1024 x i32> %load.buffer.i, i32 537
  %10217 = sext i32 %10216 to i64
  %10218 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10217
  %10219 = load i32, i32* %10218, align 4, !tbaa !400
  %10220 = insertelement <1024 x i32> %10215, i32 %10219, i32 537
  %10221 = extractelement <1024 x i32> %load.buffer.i, i32 538
  %10222 = sext i32 %10221 to i64
  %10223 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10222
  %10224 = load i32, i32* %10223, align 4, !tbaa !400
  %10225 = insertelement <1024 x i32> %10220, i32 %10224, i32 538
  %10226 = extractelement <1024 x i32> %load.buffer.i, i32 539
  %10227 = sext i32 %10226 to i64
  %10228 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10227
  %10229 = load i32, i32* %10228, align 4, !tbaa !400
  %10230 = insertelement <1024 x i32> %10225, i32 %10229, i32 539
  %10231 = extractelement <1024 x i32> %load.buffer.i, i32 540
  %10232 = sext i32 %10231 to i64
  %10233 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10232
  %10234 = load i32, i32* %10233, align 4, !tbaa !400
  %10235 = insertelement <1024 x i32> %10230, i32 %10234, i32 540
  %10236 = extractelement <1024 x i32> %load.buffer.i, i32 541
  %10237 = sext i32 %10236 to i64
  %10238 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10237
  %10239 = load i32, i32* %10238, align 4, !tbaa !400
  %10240 = insertelement <1024 x i32> %10235, i32 %10239, i32 541
  %10241 = extractelement <1024 x i32> %load.buffer.i, i32 542
  %10242 = sext i32 %10241 to i64
  %10243 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10242
  %10244 = load i32, i32* %10243, align 4, !tbaa !400
  %10245 = insertelement <1024 x i32> %10240, i32 %10244, i32 542
  %10246 = extractelement <1024 x i32> %load.buffer.i, i32 543
  %10247 = sext i32 %10246 to i64
  %10248 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10247
  %10249 = load i32, i32* %10248, align 4, !tbaa !400
  %10250 = insertelement <1024 x i32> %10245, i32 %10249, i32 543
  %10251 = extractelement <1024 x i32> %load.buffer.i, i32 544
  %10252 = sext i32 %10251 to i64
  %10253 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10252
  %10254 = load i32, i32* %10253, align 4, !tbaa !400
  %10255 = insertelement <1024 x i32> %10250, i32 %10254, i32 544
  %10256 = extractelement <1024 x i32> %load.buffer.i, i32 545
  %10257 = sext i32 %10256 to i64
  %10258 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10257
  %10259 = load i32, i32* %10258, align 4, !tbaa !400
  %10260 = insertelement <1024 x i32> %10255, i32 %10259, i32 545
  %10261 = extractelement <1024 x i32> %load.buffer.i, i32 546
  %10262 = sext i32 %10261 to i64
  %10263 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10262
  %10264 = load i32, i32* %10263, align 4, !tbaa !400
  %10265 = insertelement <1024 x i32> %10260, i32 %10264, i32 546
  %10266 = extractelement <1024 x i32> %load.buffer.i, i32 547
  %10267 = sext i32 %10266 to i64
  %10268 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10267
  %10269 = load i32, i32* %10268, align 4, !tbaa !400
  %10270 = insertelement <1024 x i32> %10265, i32 %10269, i32 547
  %10271 = extractelement <1024 x i32> %load.buffer.i, i32 548
  %10272 = sext i32 %10271 to i64
  %10273 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10272
  %10274 = load i32, i32* %10273, align 4, !tbaa !400
  %10275 = insertelement <1024 x i32> %10270, i32 %10274, i32 548
  %10276 = extractelement <1024 x i32> %load.buffer.i, i32 549
  %10277 = sext i32 %10276 to i64
  %10278 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10277
  %10279 = load i32, i32* %10278, align 4, !tbaa !400
  %10280 = insertelement <1024 x i32> %10275, i32 %10279, i32 549
  %10281 = extractelement <1024 x i32> %load.buffer.i, i32 550
  %10282 = sext i32 %10281 to i64
  %10283 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10282
  %10284 = load i32, i32* %10283, align 4, !tbaa !400
  %10285 = insertelement <1024 x i32> %10280, i32 %10284, i32 550
  %10286 = extractelement <1024 x i32> %load.buffer.i, i32 551
  %10287 = sext i32 %10286 to i64
  %10288 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10287
  %10289 = load i32, i32* %10288, align 4, !tbaa !400
  %10290 = insertelement <1024 x i32> %10285, i32 %10289, i32 551
  %10291 = extractelement <1024 x i32> %load.buffer.i, i32 552
  %10292 = sext i32 %10291 to i64
  %10293 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10292
  %10294 = load i32, i32* %10293, align 4, !tbaa !400
  %10295 = insertelement <1024 x i32> %10290, i32 %10294, i32 552
  %10296 = extractelement <1024 x i32> %load.buffer.i, i32 553
  %10297 = sext i32 %10296 to i64
  %10298 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10297
  %10299 = load i32, i32* %10298, align 4, !tbaa !400
  %10300 = insertelement <1024 x i32> %10295, i32 %10299, i32 553
  %10301 = extractelement <1024 x i32> %load.buffer.i, i32 554
  %10302 = sext i32 %10301 to i64
  %10303 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10302
  %10304 = load i32, i32* %10303, align 4, !tbaa !400
  %10305 = insertelement <1024 x i32> %10300, i32 %10304, i32 554
  %10306 = extractelement <1024 x i32> %load.buffer.i, i32 555
  %10307 = sext i32 %10306 to i64
  %10308 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10307
  %10309 = load i32, i32* %10308, align 4, !tbaa !400
  %10310 = insertelement <1024 x i32> %10305, i32 %10309, i32 555
  %10311 = extractelement <1024 x i32> %load.buffer.i, i32 556
  %10312 = sext i32 %10311 to i64
  %10313 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10312
  %10314 = load i32, i32* %10313, align 4, !tbaa !400
  %10315 = insertelement <1024 x i32> %10310, i32 %10314, i32 556
  %10316 = extractelement <1024 x i32> %load.buffer.i, i32 557
  %10317 = sext i32 %10316 to i64
  %10318 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10317
  %10319 = load i32, i32* %10318, align 4, !tbaa !400
  %10320 = insertelement <1024 x i32> %10315, i32 %10319, i32 557
  %10321 = extractelement <1024 x i32> %load.buffer.i, i32 558
  %10322 = sext i32 %10321 to i64
  %10323 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10322
  %10324 = load i32, i32* %10323, align 4, !tbaa !400
  %10325 = insertelement <1024 x i32> %10320, i32 %10324, i32 558
  %10326 = extractelement <1024 x i32> %load.buffer.i, i32 559
  %10327 = sext i32 %10326 to i64
  %10328 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10327
  %10329 = load i32, i32* %10328, align 4, !tbaa !400
  %10330 = insertelement <1024 x i32> %10325, i32 %10329, i32 559
  %10331 = extractelement <1024 x i32> %load.buffer.i, i32 560
  %10332 = sext i32 %10331 to i64
  %10333 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10332
  %10334 = load i32, i32* %10333, align 4, !tbaa !400
  %10335 = insertelement <1024 x i32> %10330, i32 %10334, i32 560
  %10336 = extractelement <1024 x i32> %load.buffer.i, i32 561
  %10337 = sext i32 %10336 to i64
  %10338 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10337
  %10339 = load i32, i32* %10338, align 4, !tbaa !400
  %10340 = insertelement <1024 x i32> %10335, i32 %10339, i32 561
  %10341 = extractelement <1024 x i32> %load.buffer.i, i32 562
  %10342 = sext i32 %10341 to i64
  %10343 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10342
  %10344 = load i32, i32* %10343, align 4, !tbaa !400
  %10345 = insertelement <1024 x i32> %10340, i32 %10344, i32 562
  %10346 = extractelement <1024 x i32> %load.buffer.i, i32 563
  %10347 = sext i32 %10346 to i64
  %10348 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10347
  %10349 = load i32, i32* %10348, align 4, !tbaa !400
  %10350 = insertelement <1024 x i32> %10345, i32 %10349, i32 563
  %10351 = extractelement <1024 x i32> %load.buffer.i, i32 564
  %10352 = sext i32 %10351 to i64
  %10353 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10352
  %10354 = load i32, i32* %10353, align 4, !tbaa !400
  %10355 = insertelement <1024 x i32> %10350, i32 %10354, i32 564
  %10356 = extractelement <1024 x i32> %load.buffer.i, i32 565
  %10357 = sext i32 %10356 to i64
  %10358 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10357
  %10359 = load i32, i32* %10358, align 4, !tbaa !400
  %10360 = insertelement <1024 x i32> %10355, i32 %10359, i32 565
  %10361 = extractelement <1024 x i32> %load.buffer.i, i32 566
  %10362 = sext i32 %10361 to i64
  %10363 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10362
  %10364 = load i32, i32* %10363, align 4, !tbaa !400
  %10365 = insertelement <1024 x i32> %10360, i32 %10364, i32 566
  %10366 = extractelement <1024 x i32> %load.buffer.i, i32 567
  %10367 = sext i32 %10366 to i64
  %10368 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10367
  %10369 = load i32, i32* %10368, align 4, !tbaa !400
  %10370 = insertelement <1024 x i32> %10365, i32 %10369, i32 567
  %10371 = extractelement <1024 x i32> %load.buffer.i, i32 568
  %10372 = sext i32 %10371 to i64
  %10373 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10372
  %10374 = load i32, i32* %10373, align 4, !tbaa !400
  %10375 = insertelement <1024 x i32> %10370, i32 %10374, i32 568
  %10376 = extractelement <1024 x i32> %load.buffer.i, i32 569
  %10377 = sext i32 %10376 to i64
  %10378 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10377
  %10379 = load i32, i32* %10378, align 4, !tbaa !400
  %10380 = insertelement <1024 x i32> %10375, i32 %10379, i32 569
  %10381 = extractelement <1024 x i32> %load.buffer.i, i32 570
  %10382 = sext i32 %10381 to i64
  %10383 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10382
  %10384 = load i32, i32* %10383, align 4, !tbaa !400
  %10385 = insertelement <1024 x i32> %10380, i32 %10384, i32 570
  %10386 = extractelement <1024 x i32> %load.buffer.i, i32 571
  %10387 = sext i32 %10386 to i64
  %10388 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10387
  %10389 = load i32, i32* %10388, align 4, !tbaa !400
  %10390 = insertelement <1024 x i32> %10385, i32 %10389, i32 571
  %10391 = extractelement <1024 x i32> %load.buffer.i, i32 572
  %10392 = sext i32 %10391 to i64
  %10393 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10392
  %10394 = load i32, i32* %10393, align 4, !tbaa !400
  %10395 = insertelement <1024 x i32> %10390, i32 %10394, i32 572
  %10396 = extractelement <1024 x i32> %load.buffer.i, i32 573
  %10397 = sext i32 %10396 to i64
  %10398 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10397
  %10399 = load i32, i32* %10398, align 4, !tbaa !400
  %10400 = insertelement <1024 x i32> %10395, i32 %10399, i32 573
  %10401 = extractelement <1024 x i32> %load.buffer.i, i32 574
  %10402 = sext i32 %10401 to i64
  %10403 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10402
  %10404 = load i32, i32* %10403, align 4, !tbaa !400
  %10405 = insertelement <1024 x i32> %10400, i32 %10404, i32 574
  %10406 = extractelement <1024 x i32> %load.buffer.i, i32 575
  %10407 = sext i32 %10406 to i64
  %10408 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10407
  %10409 = load i32, i32* %10408, align 4, !tbaa !400
  %10410 = insertelement <1024 x i32> %10405, i32 %10409, i32 575
  %10411 = extractelement <1024 x i32> %load.buffer.i, i32 576
  %10412 = sext i32 %10411 to i64
  %10413 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10412
  %10414 = load i32, i32* %10413, align 4, !tbaa !400
  %10415 = insertelement <1024 x i32> %10410, i32 %10414, i32 576
  %10416 = extractelement <1024 x i32> %load.buffer.i, i32 577
  %10417 = sext i32 %10416 to i64
  %10418 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10417
  %10419 = load i32, i32* %10418, align 4, !tbaa !400
  %10420 = insertelement <1024 x i32> %10415, i32 %10419, i32 577
  %10421 = extractelement <1024 x i32> %load.buffer.i, i32 578
  %10422 = sext i32 %10421 to i64
  %10423 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10422
  %10424 = load i32, i32* %10423, align 4, !tbaa !400
  %10425 = insertelement <1024 x i32> %10420, i32 %10424, i32 578
  %10426 = extractelement <1024 x i32> %load.buffer.i, i32 579
  %10427 = sext i32 %10426 to i64
  %10428 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10427
  %10429 = load i32, i32* %10428, align 4, !tbaa !400
  %10430 = insertelement <1024 x i32> %10425, i32 %10429, i32 579
  %10431 = extractelement <1024 x i32> %load.buffer.i, i32 580
  %10432 = sext i32 %10431 to i64
  %10433 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10432
  %10434 = load i32, i32* %10433, align 4, !tbaa !400
  %10435 = insertelement <1024 x i32> %10430, i32 %10434, i32 580
  %10436 = extractelement <1024 x i32> %load.buffer.i, i32 581
  %10437 = sext i32 %10436 to i64
  %10438 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10437
  %10439 = load i32, i32* %10438, align 4, !tbaa !400
  %10440 = insertelement <1024 x i32> %10435, i32 %10439, i32 581
  %10441 = extractelement <1024 x i32> %load.buffer.i, i32 582
  %10442 = sext i32 %10441 to i64
  %10443 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10442
  %10444 = load i32, i32* %10443, align 4, !tbaa !400
  %10445 = insertelement <1024 x i32> %10440, i32 %10444, i32 582
  %10446 = extractelement <1024 x i32> %load.buffer.i, i32 583
  %10447 = sext i32 %10446 to i64
  %10448 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10447
  %10449 = load i32, i32* %10448, align 4, !tbaa !400
  %10450 = insertelement <1024 x i32> %10445, i32 %10449, i32 583
  %10451 = extractelement <1024 x i32> %load.buffer.i, i32 584
  %10452 = sext i32 %10451 to i64
  %10453 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10452
  %10454 = load i32, i32* %10453, align 4, !tbaa !400
  %10455 = insertelement <1024 x i32> %10450, i32 %10454, i32 584
  %10456 = extractelement <1024 x i32> %load.buffer.i, i32 585
  %10457 = sext i32 %10456 to i64
  %10458 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10457
  %10459 = load i32, i32* %10458, align 4, !tbaa !400
  %10460 = insertelement <1024 x i32> %10455, i32 %10459, i32 585
  %10461 = extractelement <1024 x i32> %load.buffer.i, i32 586
  %10462 = sext i32 %10461 to i64
  %10463 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10462
  %10464 = load i32, i32* %10463, align 4, !tbaa !400
  %10465 = insertelement <1024 x i32> %10460, i32 %10464, i32 586
  %10466 = extractelement <1024 x i32> %load.buffer.i, i32 587
  %10467 = sext i32 %10466 to i64
  %10468 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10467
  %10469 = load i32, i32* %10468, align 4, !tbaa !400
  %10470 = insertelement <1024 x i32> %10465, i32 %10469, i32 587
  %10471 = extractelement <1024 x i32> %load.buffer.i, i32 588
  %10472 = sext i32 %10471 to i64
  %10473 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10472
  %10474 = load i32, i32* %10473, align 4, !tbaa !400
  %10475 = insertelement <1024 x i32> %10470, i32 %10474, i32 588
  %10476 = extractelement <1024 x i32> %load.buffer.i, i32 589
  %10477 = sext i32 %10476 to i64
  %10478 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10477
  %10479 = load i32, i32* %10478, align 4, !tbaa !400
  %10480 = insertelement <1024 x i32> %10475, i32 %10479, i32 589
  %10481 = extractelement <1024 x i32> %load.buffer.i, i32 590
  %10482 = sext i32 %10481 to i64
  %10483 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10482
  %10484 = load i32, i32* %10483, align 4, !tbaa !400
  %10485 = insertelement <1024 x i32> %10480, i32 %10484, i32 590
  %10486 = extractelement <1024 x i32> %load.buffer.i, i32 591
  %10487 = sext i32 %10486 to i64
  %10488 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10487
  %10489 = load i32, i32* %10488, align 4, !tbaa !400
  %10490 = insertelement <1024 x i32> %10485, i32 %10489, i32 591
  %10491 = extractelement <1024 x i32> %load.buffer.i, i32 592
  %10492 = sext i32 %10491 to i64
  %10493 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10492
  %10494 = load i32, i32* %10493, align 4, !tbaa !400
  %10495 = insertelement <1024 x i32> %10490, i32 %10494, i32 592
  %10496 = extractelement <1024 x i32> %load.buffer.i, i32 593
  %10497 = sext i32 %10496 to i64
  %10498 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10497
  %10499 = load i32, i32* %10498, align 4, !tbaa !400
  %10500 = insertelement <1024 x i32> %10495, i32 %10499, i32 593
  %10501 = extractelement <1024 x i32> %load.buffer.i, i32 594
  %10502 = sext i32 %10501 to i64
  %10503 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10502
  %10504 = load i32, i32* %10503, align 4, !tbaa !400
  %10505 = insertelement <1024 x i32> %10500, i32 %10504, i32 594
  %10506 = extractelement <1024 x i32> %load.buffer.i, i32 595
  %10507 = sext i32 %10506 to i64
  %10508 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10507
  %10509 = load i32, i32* %10508, align 4, !tbaa !400
  %10510 = insertelement <1024 x i32> %10505, i32 %10509, i32 595
  %10511 = extractelement <1024 x i32> %load.buffer.i, i32 596
  %10512 = sext i32 %10511 to i64
  %10513 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10512
  %10514 = load i32, i32* %10513, align 4, !tbaa !400
  %10515 = insertelement <1024 x i32> %10510, i32 %10514, i32 596
  %10516 = extractelement <1024 x i32> %load.buffer.i, i32 597
  %10517 = sext i32 %10516 to i64
  %10518 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10517
  %10519 = load i32, i32* %10518, align 4, !tbaa !400
  %10520 = insertelement <1024 x i32> %10515, i32 %10519, i32 597
  %10521 = extractelement <1024 x i32> %load.buffer.i, i32 598
  %10522 = sext i32 %10521 to i64
  %10523 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10522
  %10524 = load i32, i32* %10523, align 4, !tbaa !400
  %10525 = insertelement <1024 x i32> %10520, i32 %10524, i32 598
  %10526 = extractelement <1024 x i32> %load.buffer.i, i32 599
  %10527 = sext i32 %10526 to i64
  %10528 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10527
  %10529 = load i32, i32* %10528, align 4, !tbaa !400
  %10530 = insertelement <1024 x i32> %10525, i32 %10529, i32 599
  %10531 = extractelement <1024 x i32> %load.buffer.i, i32 600
  %10532 = sext i32 %10531 to i64
  %10533 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10532
  %10534 = load i32, i32* %10533, align 4, !tbaa !400
  %10535 = insertelement <1024 x i32> %10530, i32 %10534, i32 600
  %10536 = extractelement <1024 x i32> %load.buffer.i, i32 601
  %10537 = sext i32 %10536 to i64
  %10538 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10537
  %10539 = load i32, i32* %10538, align 4, !tbaa !400
  %10540 = insertelement <1024 x i32> %10535, i32 %10539, i32 601
  %10541 = extractelement <1024 x i32> %load.buffer.i, i32 602
  %10542 = sext i32 %10541 to i64
  %10543 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10542
  %10544 = load i32, i32* %10543, align 4, !tbaa !400
  %10545 = insertelement <1024 x i32> %10540, i32 %10544, i32 602
  %10546 = extractelement <1024 x i32> %load.buffer.i, i32 603
  %10547 = sext i32 %10546 to i64
  %10548 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10547
  %10549 = load i32, i32* %10548, align 4, !tbaa !400
  %10550 = insertelement <1024 x i32> %10545, i32 %10549, i32 603
  %10551 = extractelement <1024 x i32> %load.buffer.i, i32 604
  %10552 = sext i32 %10551 to i64
  %10553 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10552
  %10554 = load i32, i32* %10553, align 4, !tbaa !400
  %10555 = insertelement <1024 x i32> %10550, i32 %10554, i32 604
  %10556 = extractelement <1024 x i32> %load.buffer.i, i32 605
  %10557 = sext i32 %10556 to i64
  %10558 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10557
  %10559 = load i32, i32* %10558, align 4, !tbaa !400
  %10560 = insertelement <1024 x i32> %10555, i32 %10559, i32 605
  %10561 = extractelement <1024 x i32> %load.buffer.i, i32 606
  %10562 = sext i32 %10561 to i64
  %10563 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10562
  %10564 = load i32, i32* %10563, align 4, !tbaa !400
  %10565 = insertelement <1024 x i32> %10560, i32 %10564, i32 606
  %10566 = extractelement <1024 x i32> %load.buffer.i, i32 607
  %10567 = sext i32 %10566 to i64
  %10568 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10567
  %10569 = load i32, i32* %10568, align 4, !tbaa !400
  %10570 = insertelement <1024 x i32> %10565, i32 %10569, i32 607
  %10571 = extractelement <1024 x i32> %load.buffer.i, i32 608
  %10572 = sext i32 %10571 to i64
  %10573 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10572
  %10574 = load i32, i32* %10573, align 4, !tbaa !400
  %10575 = insertelement <1024 x i32> %10570, i32 %10574, i32 608
  %10576 = extractelement <1024 x i32> %load.buffer.i, i32 609
  %10577 = sext i32 %10576 to i64
  %10578 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10577
  %10579 = load i32, i32* %10578, align 4, !tbaa !400
  %10580 = insertelement <1024 x i32> %10575, i32 %10579, i32 609
  %10581 = extractelement <1024 x i32> %load.buffer.i, i32 610
  %10582 = sext i32 %10581 to i64
  %10583 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10582
  %10584 = load i32, i32* %10583, align 4, !tbaa !400
  %10585 = insertelement <1024 x i32> %10580, i32 %10584, i32 610
  %10586 = extractelement <1024 x i32> %load.buffer.i, i32 611
  %10587 = sext i32 %10586 to i64
  %10588 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10587
  %10589 = load i32, i32* %10588, align 4, !tbaa !400
  %10590 = insertelement <1024 x i32> %10585, i32 %10589, i32 611
  %10591 = extractelement <1024 x i32> %load.buffer.i, i32 612
  %10592 = sext i32 %10591 to i64
  %10593 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10592
  %10594 = load i32, i32* %10593, align 4, !tbaa !400
  %10595 = insertelement <1024 x i32> %10590, i32 %10594, i32 612
  %10596 = extractelement <1024 x i32> %load.buffer.i, i32 613
  %10597 = sext i32 %10596 to i64
  %10598 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10597
  %10599 = load i32, i32* %10598, align 4, !tbaa !400
  %10600 = insertelement <1024 x i32> %10595, i32 %10599, i32 613
  %10601 = extractelement <1024 x i32> %load.buffer.i, i32 614
  %10602 = sext i32 %10601 to i64
  %10603 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10602
  %10604 = load i32, i32* %10603, align 4, !tbaa !400
  %10605 = insertelement <1024 x i32> %10600, i32 %10604, i32 614
  %10606 = extractelement <1024 x i32> %load.buffer.i, i32 615
  %10607 = sext i32 %10606 to i64
  %10608 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10607
  %10609 = load i32, i32* %10608, align 4, !tbaa !400
  %10610 = insertelement <1024 x i32> %10605, i32 %10609, i32 615
  %10611 = extractelement <1024 x i32> %load.buffer.i, i32 616
  %10612 = sext i32 %10611 to i64
  %10613 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10612
  %10614 = load i32, i32* %10613, align 4, !tbaa !400
  %10615 = insertelement <1024 x i32> %10610, i32 %10614, i32 616
  %10616 = extractelement <1024 x i32> %load.buffer.i, i32 617
  %10617 = sext i32 %10616 to i64
  %10618 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10617
  %10619 = load i32, i32* %10618, align 4, !tbaa !400
  %10620 = insertelement <1024 x i32> %10615, i32 %10619, i32 617
  %10621 = extractelement <1024 x i32> %load.buffer.i, i32 618
  %10622 = sext i32 %10621 to i64
  %10623 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10622
  %10624 = load i32, i32* %10623, align 4, !tbaa !400
  %10625 = insertelement <1024 x i32> %10620, i32 %10624, i32 618
  %10626 = extractelement <1024 x i32> %load.buffer.i, i32 619
  %10627 = sext i32 %10626 to i64
  %10628 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10627
  %10629 = load i32, i32* %10628, align 4, !tbaa !400
  %10630 = insertelement <1024 x i32> %10625, i32 %10629, i32 619
  %10631 = extractelement <1024 x i32> %load.buffer.i, i32 620
  %10632 = sext i32 %10631 to i64
  %10633 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10632
  %10634 = load i32, i32* %10633, align 4, !tbaa !400
  %10635 = insertelement <1024 x i32> %10630, i32 %10634, i32 620
  %10636 = extractelement <1024 x i32> %load.buffer.i, i32 621
  %10637 = sext i32 %10636 to i64
  %10638 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10637
  %10639 = load i32, i32* %10638, align 4, !tbaa !400
  %10640 = insertelement <1024 x i32> %10635, i32 %10639, i32 621
  %10641 = extractelement <1024 x i32> %load.buffer.i, i32 622
  %10642 = sext i32 %10641 to i64
  %10643 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10642
  %10644 = load i32, i32* %10643, align 4, !tbaa !400
  %10645 = insertelement <1024 x i32> %10640, i32 %10644, i32 622
  %10646 = extractelement <1024 x i32> %load.buffer.i, i32 623
  %10647 = sext i32 %10646 to i64
  %10648 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10647
  %10649 = load i32, i32* %10648, align 4, !tbaa !400
  %10650 = insertelement <1024 x i32> %10645, i32 %10649, i32 623
  %10651 = extractelement <1024 x i32> %load.buffer.i, i32 624
  %10652 = sext i32 %10651 to i64
  %10653 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10652
  %10654 = load i32, i32* %10653, align 4, !tbaa !400
  %10655 = insertelement <1024 x i32> %10650, i32 %10654, i32 624
  %10656 = extractelement <1024 x i32> %load.buffer.i, i32 625
  %10657 = sext i32 %10656 to i64
  %10658 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10657
  %10659 = load i32, i32* %10658, align 4, !tbaa !400
  %10660 = insertelement <1024 x i32> %10655, i32 %10659, i32 625
  %10661 = extractelement <1024 x i32> %load.buffer.i, i32 626
  %10662 = sext i32 %10661 to i64
  %10663 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10662
  %10664 = load i32, i32* %10663, align 4, !tbaa !400
  %10665 = insertelement <1024 x i32> %10660, i32 %10664, i32 626
  %10666 = extractelement <1024 x i32> %load.buffer.i, i32 627
  %10667 = sext i32 %10666 to i64
  %10668 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10667
  %10669 = load i32, i32* %10668, align 4, !tbaa !400
  %10670 = insertelement <1024 x i32> %10665, i32 %10669, i32 627
  %10671 = extractelement <1024 x i32> %load.buffer.i, i32 628
  %10672 = sext i32 %10671 to i64
  %10673 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10672
  %10674 = load i32, i32* %10673, align 4, !tbaa !400
  %10675 = insertelement <1024 x i32> %10670, i32 %10674, i32 628
  %10676 = extractelement <1024 x i32> %load.buffer.i, i32 629
  %10677 = sext i32 %10676 to i64
  %10678 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10677
  %10679 = load i32, i32* %10678, align 4, !tbaa !400
  %10680 = insertelement <1024 x i32> %10675, i32 %10679, i32 629
  %10681 = extractelement <1024 x i32> %load.buffer.i, i32 630
  %10682 = sext i32 %10681 to i64
  %10683 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10682
  %10684 = load i32, i32* %10683, align 4, !tbaa !400
  %10685 = insertelement <1024 x i32> %10680, i32 %10684, i32 630
  %10686 = extractelement <1024 x i32> %load.buffer.i, i32 631
  %10687 = sext i32 %10686 to i64
  %10688 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10687
  %10689 = load i32, i32* %10688, align 4, !tbaa !400
  %10690 = insertelement <1024 x i32> %10685, i32 %10689, i32 631
  %10691 = extractelement <1024 x i32> %load.buffer.i, i32 632
  %10692 = sext i32 %10691 to i64
  %10693 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10692
  %10694 = load i32, i32* %10693, align 4, !tbaa !400
  %10695 = insertelement <1024 x i32> %10690, i32 %10694, i32 632
  %10696 = extractelement <1024 x i32> %load.buffer.i, i32 633
  %10697 = sext i32 %10696 to i64
  %10698 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10697
  %10699 = load i32, i32* %10698, align 4, !tbaa !400
  %10700 = insertelement <1024 x i32> %10695, i32 %10699, i32 633
  %10701 = extractelement <1024 x i32> %load.buffer.i, i32 634
  %10702 = sext i32 %10701 to i64
  %10703 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10702
  %10704 = load i32, i32* %10703, align 4, !tbaa !400
  %10705 = insertelement <1024 x i32> %10700, i32 %10704, i32 634
  %10706 = extractelement <1024 x i32> %load.buffer.i, i32 635
  %10707 = sext i32 %10706 to i64
  %10708 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10707
  %10709 = load i32, i32* %10708, align 4, !tbaa !400
  %10710 = insertelement <1024 x i32> %10705, i32 %10709, i32 635
  %10711 = extractelement <1024 x i32> %load.buffer.i, i32 636
  %10712 = sext i32 %10711 to i64
  %10713 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10712
  %10714 = load i32, i32* %10713, align 4, !tbaa !400
  %10715 = insertelement <1024 x i32> %10710, i32 %10714, i32 636
  %10716 = extractelement <1024 x i32> %load.buffer.i, i32 637
  %10717 = sext i32 %10716 to i64
  %10718 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10717
  %10719 = load i32, i32* %10718, align 4, !tbaa !400
  %10720 = insertelement <1024 x i32> %10715, i32 %10719, i32 637
  %10721 = extractelement <1024 x i32> %load.buffer.i, i32 638
  %10722 = sext i32 %10721 to i64
  %10723 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10722
  %10724 = load i32, i32* %10723, align 4, !tbaa !400
  %10725 = insertelement <1024 x i32> %10720, i32 %10724, i32 638
  %10726 = extractelement <1024 x i32> %load.buffer.i, i32 639
  %10727 = sext i32 %10726 to i64
  %10728 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10727
  %10729 = load i32, i32* %10728, align 4, !tbaa !400
  %10730 = insertelement <1024 x i32> %10725, i32 %10729, i32 639
  %10731 = extractelement <1024 x i32> %load.buffer.i, i32 640
  %10732 = sext i32 %10731 to i64
  %10733 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10732
  %10734 = load i32, i32* %10733, align 4, !tbaa !400
  %10735 = insertelement <1024 x i32> %10730, i32 %10734, i32 640
  %10736 = extractelement <1024 x i32> %load.buffer.i, i32 641
  %10737 = sext i32 %10736 to i64
  %10738 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10737
  %10739 = load i32, i32* %10738, align 4, !tbaa !400
  %10740 = insertelement <1024 x i32> %10735, i32 %10739, i32 641
  %10741 = extractelement <1024 x i32> %load.buffer.i, i32 642
  %10742 = sext i32 %10741 to i64
  %10743 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10742
  %10744 = load i32, i32* %10743, align 4, !tbaa !400
  %10745 = insertelement <1024 x i32> %10740, i32 %10744, i32 642
  %10746 = extractelement <1024 x i32> %load.buffer.i, i32 643
  %10747 = sext i32 %10746 to i64
  %10748 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10747
  %10749 = load i32, i32* %10748, align 4, !tbaa !400
  %10750 = insertelement <1024 x i32> %10745, i32 %10749, i32 643
  %10751 = extractelement <1024 x i32> %load.buffer.i, i32 644
  %10752 = sext i32 %10751 to i64
  %10753 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10752
  %10754 = load i32, i32* %10753, align 4, !tbaa !400
  %10755 = insertelement <1024 x i32> %10750, i32 %10754, i32 644
  %10756 = extractelement <1024 x i32> %load.buffer.i, i32 645
  %10757 = sext i32 %10756 to i64
  %10758 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10757
  %10759 = load i32, i32* %10758, align 4, !tbaa !400
  %10760 = insertelement <1024 x i32> %10755, i32 %10759, i32 645
  %10761 = extractelement <1024 x i32> %load.buffer.i, i32 646
  %10762 = sext i32 %10761 to i64
  %10763 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10762
  %10764 = load i32, i32* %10763, align 4, !tbaa !400
  %10765 = insertelement <1024 x i32> %10760, i32 %10764, i32 646
  %10766 = extractelement <1024 x i32> %load.buffer.i, i32 647
  %10767 = sext i32 %10766 to i64
  %10768 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10767
  %10769 = load i32, i32* %10768, align 4, !tbaa !400
  %10770 = insertelement <1024 x i32> %10765, i32 %10769, i32 647
  %10771 = extractelement <1024 x i32> %load.buffer.i, i32 648
  %10772 = sext i32 %10771 to i64
  %10773 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10772
  %10774 = load i32, i32* %10773, align 4, !tbaa !400
  %10775 = insertelement <1024 x i32> %10770, i32 %10774, i32 648
  %10776 = extractelement <1024 x i32> %load.buffer.i, i32 649
  %10777 = sext i32 %10776 to i64
  %10778 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10777
  %10779 = load i32, i32* %10778, align 4, !tbaa !400
  %10780 = insertelement <1024 x i32> %10775, i32 %10779, i32 649
  %10781 = extractelement <1024 x i32> %load.buffer.i, i32 650
  %10782 = sext i32 %10781 to i64
  %10783 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10782
  %10784 = load i32, i32* %10783, align 4, !tbaa !400
  %10785 = insertelement <1024 x i32> %10780, i32 %10784, i32 650
  %10786 = extractelement <1024 x i32> %load.buffer.i, i32 651
  %10787 = sext i32 %10786 to i64
  %10788 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10787
  %10789 = load i32, i32* %10788, align 4, !tbaa !400
  %10790 = insertelement <1024 x i32> %10785, i32 %10789, i32 651
  %10791 = extractelement <1024 x i32> %load.buffer.i, i32 652
  %10792 = sext i32 %10791 to i64
  %10793 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10792
  %10794 = load i32, i32* %10793, align 4, !tbaa !400
  %10795 = insertelement <1024 x i32> %10790, i32 %10794, i32 652
  %10796 = extractelement <1024 x i32> %load.buffer.i, i32 653
  %10797 = sext i32 %10796 to i64
  %10798 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10797
  %10799 = load i32, i32* %10798, align 4, !tbaa !400
  %10800 = insertelement <1024 x i32> %10795, i32 %10799, i32 653
  %10801 = extractelement <1024 x i32> %load.buffer.i, i32 654
  %10802 = sext i32 %10801 to i64
  %10803 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10802
  %10804 = load i32, i32* %10803, align 4, !tbaa !400
  %10805 = insertelement <1024 x i32> %10800, i32 %10804, i32 654
  %10806 = extractelement <1024 x i32> %load.buffer.i, i32 655
  %10807 = sext i32 %10806 to i64
  %10808 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10807
  %10809 = load i32, i32* %10808, align 4, !tbaa !400
  %10810 = insertelement <1024 x i32> %10805, i32 %10809, i32 655
  %10811 = extractelement <1024 x i32> %load.buffer.i, i32 656
  %10812 = sext i32 %10811 to i64
  %10813 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10812
  %10814 = load i32, i32* %10813, align 4, !tbaa !400
  %10815 = insertelement <1024 x i32> %10810, i32 %10814, i32 656
  %10816 = extractelement <1024 x i32> %load.buffer.i, i32 657
  %10817 = sext i32 %10816 to i64
  %10818 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10817
  %10819 = load i32, i32* %10818, align 4, !tbaa !400
  %10820 = insertelement <1024 x i32> %10815, i32 %10819, i32 657
  %10821 = extractelement <1024 x i32> %load.buffer.i, i32 658
  %10822 = sext i32 %10821 to i64
  %10823 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10822
  %10824 = load i32, i32* %10823, align 4, !tbaa !400
  %10825 = insertelement <1024 x i32> %10820, i32 %10824, i32 658
  %10826 = extractelement <1024 x i32> %load.buffer.i, i32 659
  %10827 = sext i32 %10826 to i64
  %10828 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10827
  %10829 = load i32, i32* %10828, align 4, !tbaa !400
  %10830 = insertelement <1024 x i32> %10825, i32 %10829, i32 659
  %10831 = extractelement <1024 x i32> %load.buffer.i, i32 660
  %10832 = sext i32 %10831 to i64
  %10833 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10832
  %10834 = load i32, i32* %10833, align 4, !tbaa !400
  %10835 = insertelement <1024 x i32> %10830, i32 %10834, i32 660
  %10836 = extractelement <1024 x i32> %load.buffer.i, i32 661
  %10837 = sext i32 %10836 to i64
  %10838 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10837
  %10839 = load i32, i32* %10838, align 4, !tbaa !400
  %10840 = insertelement <1024 x i32> %10835, i32 %10839, i32 661
  %10841 = extractelement <1024 x i32> %load.buffer.i, i32 662
  %10842 = sext i32 %10841 to i64
  %10843 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10842
  %10844 = load i32, i32* %10843, align 4, !tbaa !400
  %10845 = insertelement <1024 x i32> %10840, i32 %10844, i32 662
  %10846 = extractelement <1024 x i32> %load.buffer.i, i32 663
  %10847 = sext i32 %10846 to i64
  %10848 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10847
  %10849 = load i32, i32* %10848, align 4, !tbaa !400
  %10850 = insertelement <1024 x i32> %10845, i32 %10849, i32 663
  %10851 = extractelement <1024 x i32> %load.buffer.i, i32 664
  %10852 = sext i32 %10851 to i64
  %10853 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10852
  %10854 = load i32, i32* %10853, align 4, !tbaa !400
  %10855 = insertelement <1024 x i32> %10850, i32 %10854, i32 664
  %10856 = extractelement <1024 x i32> %load.buffer.i, i32 665
  %10857 = sext i32 %10856 to i64
  %10858 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10857
  %10859 = load i32, i32* %10858, align 4, !tbaa !400
  %10860 = insertelement <1024 x i32> %10855, i32 %10859, i32 665
  %10861 = extractelement <1024 x i32> %load.buffer.i, i32 666
  %10862 = sext i32 %10861 to i64
  %10863 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10862
  %10864 = load i32, i32* %10863, align 4, !tbaa !400
  %10865 = insertelement <1024 x i32> %10860, i32 %10864, i32 666
  %10866 = extractelement <1024 x i32> %load.buffer.i, i32 667
  %10867 = sext i32 %10866 to i64
  %10868 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10867
  %10869 = load i32, i32* %10868, align 4, !tbaa !400
  %10870 = insertelement <1024 x i32> %10865, i32 %10869, i32 667
  %10871 = extractelement <1024 x i32> %load.buffer.i, i32 668
  %10872 = sext i32 %10871 to i64
  %10873 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10872
  %10874 = load i32, i32* %10873, align 4, !tbaa !400
  %10875 = insertelement <1024 x i32> %10870, i32 %10874, i32 668
  %10876 = extractelement <1024 x i32> %load.buffer.i, i32 669
  %10877 = sext i32 %10876 to i64
  %10878 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10877
  %10879 = load i32, i32* %10878, align 4, !tbaa !400
  %10880 = insertelement <1024 x i32> %10875, i32 %10879, i32 669
  %10881 = extractelement <1024 x i32> %load.buffer.i, i32 670
  %10882 = sext i32 %10881 to i64
  %10883 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10882
  %10884 = load i32, i32* %10883, align 4, !tbaa !400
  %10885 = insertelement <1024 x i32> %10880, i32 %10884, i32 670
  %10886 = extractelement <1024 x i32> %load.buffer.i, i32 671
  %10887 = sext i32 %10886 to i64
  %10888 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10887
  %10889 = load i32, i32* %10888, align 4, !tbaa !400
  %10890 = insertelement <1024 x i32> %10885, i32 %10889, i32 671
  %10891 = extractelement <1024 x i32> %load.buffer.i, i32 672
  %10892 = sext i32 %10891 to i64
  %10893 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10892
  %10894 = load i32, i32* %10893, align 4, !tbaa !400
  %10895 = insertelement <1024 x i32> %10890, i32 %10894, i32 672
  %10896 = extractelement <1024 x i32> %load.buffer.i, i32 673
  %10897 = sext i32 %10896 to i64
  %10898 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10897
  %10899 = load i32, i32* %10898, align 4, !tbaa !400
  %10900 = insertelement <1024 x i32> %10895, i32 %10899, i32 673
  %10901 = extractelement <1024 x i32> %load.buffer.i, i32 674
  %10902 = sext i32 %10901 to i64
  %10903 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10902
  %10904 = load i32, i32* %10903, align 4, !tbaa !400
  %10905 = insertelement <1024 x i32> %10900, i32 %10904, i32 674
  %10906 = extractelement <1024 x i32> %load.buffer.i, i32 675
  %10907 = sext i32 %10906 to i64
  %10908 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10907
  %10909 = load i32, i32* %10908, align 4, !tbaa !400
  %10910 = insertelement <1024 x i32> %10905, i32 %10909, i32 675
  %10911 = extractelement <1024 x i32> %load.buffer.i, i32 676
  %10912 = sext i32 %10911 to i64
  %10913 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10912
  %10914 = load i32, i32* %10913, align 4, !tbaa !400
  %10915 = insertelement <1024 x i32> %10910, i32 %10914, i32 676
  %10916 = extractelement <1024 x i32> %load.buffer.i, i32 677
  %10917 = sext i32 %10916 to i64
  %10918 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10917
  %10919 = load i32, i32* %10918, align 4, !tbaa !400
  %10920 = insertelement <1024 x i32> %10915, i32 %10919, i32 677
  %10921 = extractelement <1024 x i32> %load.buffer.i, i32 678
  %10922 = sext i32 %10921 to i64
  %10923 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10922
  %10924 = load i32, i32* %10923, align 4, !tbaa !400
  %10925 = insertelement <1024 x i32> %10920, i32 %10924, i32 678
  %10926 = extractelement <1024 x i32> %load.buffer.i, i32 679
  %10927 = sext i32 %10926 to i64
  %10928 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10927
  %10929 = load i32, i32* %10928, align 4, !tbaa !400
  %10930 = insertelement <1024 x i32> %10925, i32 %10929, i32 679
  %10931 = extractelement <1024 x i32> %load.buffer.i, i32 680
  %10932 = sext i32 %10931 to i64
  %10933 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10932
  %10934 = load i32, i32* %10933, align 4, !tbaa !400
  %10935 = insertelement <1024 x i32> %10930, i32 %10934, i32 680
  %10936 = extractelement <1024 x i32> %load.buffer.i, i32 681
  %10937 = sext i32 %10936 to i64
  %10938 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10937
  %10939 = load i32, i32* %10938, align 4, !tbaa !400
  %10940 = insertelement <1024 x i32> %10935, i32 %10939, i32 681
  %10941 = extractelement <1024 x i32> %load.buffer.i, i32 682
  %10942 = sext i32 %10941 to i64
  %10943 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10942
  %10944 = load i32, i32* %10943, align 4, !tbaa !400
  %10945 = insertelement <1024 x i32> %10940, i32 %10944, i32 682
  %10946 = extractelement <1024 x i32> %load.buffer.i, i32 683
  %10947 = sext i32 %10946 to i64
  %10948 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10947
  %10949 = load i32, i32* %10948, align 4, !tbaa !400
  %10950 = insertelement <1024 x i32> %10945, i32 %10949, i32 683
  %10951 = extractelement <1024 x i32> %load.buffer.i, i32 684
  %10952 = sext i32 %10951 to i64
  %10953 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10952
  %10954 = load i32, i32* %10953, align 4, !tbaa !400
  %10955 = insertelement <1024 x i32> %10950, i32 %10954, i32 684
  %10956 = extractelement <1024 x i32> %load.buffer.i, i32 685
  %10957 = sext i32 %10956 to i64
  %10958 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10957
  %10959 = load i32, i32* %10958, align 4, !tbaa !400
  %10960 = insertelement <1024 x i32> %10955, i32 %10959, i32 685
  %10961 = extractelement <1024 x i32> %load.buffer.i, i32 686
  %10962 = sext i32 %10961 to i64
  %10963 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10962
  %10964 = load i32, i32* %10963, align 4, !tbaa !400
  %10965 = insertelement <1024 x i32> %10960, i32 %10964, i32 686
  %10966 = extractelement <1024 x i32> %load.buffer.i, i32 687
  %10967 = sext i32 %10966 to i64
  %10968 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10967
  %10969 = load i32, i32* %10968, align 4, !tbaa !400
  %10970 = insertelement <1024 x i32> %10965, i32 %10969, i32 687
  %10971 = extractelement <1024 x i32> %load.buffer.i, i32 688
  %10972 = sext i32 %10971 to i64
  %10973 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10972
  %10974 = load i32, i32* %10973, align 4, !tbaa !400
  %10975 = insertelement <1024 x i32> %10970, i32 %10974, i32 688
  %10976 = extractelement <1024 x i32> %load.buffer.i, i32 689
  %10977 = sext i32 %10976 to i64
  %10978 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10977
  %10979 = load i32, i32* %10978, align 4, !tbaa !400
  %10980 = insertelement <1024 x i32> %10975, i32 %10979, i32 689
  %10981 = extractelement <1024 x i32> %load.buffer.i, i32 690
  %10982 = sext i32 %10981 to i64
  %10983 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10982
  %10984 = load i32, i32* %10983, align 4, !tbaa !400
  %10985 = insertelement <1024 x i32> %10980, i32 %10984, i32 690
  %10986 = extractelement <1024 x i32> %load.buffer.i, i32 691
  %10987 = sext i32 %10986 to i64
  %10988 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10987
  %10989 = load i32, i32* %10988, align 4, !tbaa !400
  %10990 = insertelement <1024 x i32> %10985, i32 %10989, i32 691
  %10991 = extractelement <1024 x i32> %load.buffer.i, i32 692
  %10992 = sext i32 %10991 to i64
  %10993 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10992
  %10994 = load i32, i32* %10993, align 4, !tbaa !400
  %10995 = insertelement <1024 x i32> %10990, i32 %10994, i32 692
  %10996 = extractelement <1024 x i32> %load.buffer.i, i32 693
  %10997 = sext i32 %10996 to i64
  %10998 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %10997
  %10999 = load i32, i32* %10998, align 4, !tbaa !400
  %11000 = insertelement <1024 x i32> %10995, i32 %10999, i32 693
  %11001 = extractelement <1024 x i32> %load.buffer.i, i32 694
  %11002 = sext i32 %11001 to i64
  %11003 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11002
  %11004 = load i32, i32* %11003, align 4, !tbaa !400
  %11005 = insertelement <1024 x i32> %11000, i32 %11004, i32 694
  %11006 = extractelement <1024 x i32> %load.buffer.i, i32 695
  %11007 = sext i32 %11006 to i64
  %11008 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11007
  %11009 = load i32, i32* %11008, align 4, !tbaa !400
  %11010 = insertelement <1024 x i32> %11005, i32 %11009, i32 695
  %11011 = extractelement <1024 x i32> %load.buffer.i, i32 696
  %11012 = sext i32 %11011 to i64
  %11013 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11012
  %11014 = load i32, i32* %11013, align 4, !tbaa !400
  %11015 = insertelement <1024 x i32> %11010, i32 %11014, i32 696
  %11016 = extractelement <1024 x i32> %load.buffer.i, i32 697
  %11017 = sext i32 %11016 to i64
  %11018 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11017
  %11019 = load i32, i32* %11018, align 4, !tbaa !400
  %11020 = insertelement <1024 x i32> %11015, i32 %11019, i32 697
  %11021 = extractelement <1024 x i32> %load.buffer.i, i32 698
  %11022 = sext i32 %11021 to i64
  %11023 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11022
  %11024 = load i32, i32* %11023, align 4, !tbaa !400
  %11025 = insertelement <1024 x i32> %11020, i32 %11024, i32 698
  %11026 = extractelement <1024 x i32> %load.buffer.i, i32 699
  %11027 = sext i32 %11026 to i64
  %11028 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11027
  %11029 = load i32, i32* %11028, align 4, !tbaa !400
  %11030 = insertelement <1024 x i32> %11025, i32 %11029, i32 699
  %11031 = extractelement <1024 x i32> %load.buffer.i, i32 700
  %11032 = sext i32 %11031 to i64
  %11033 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11032
  %11034 = load i32, i32* %11033, align 4, !tbaa !400
  %11035 = insertelement <1024 x i32> %11030, i32 %11034, i32 700
  %11036 = extractelement <1024 x i32> %load.buffer.i, i32 701
  %11037 = sext i32 %11036 to i64
  %11038 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11037
  %11039 = load i32, i32* %11038, align 4, !tbaa !400
  %11040 = insertelement <1024 x i32> %11035, i32 %11039, i32 701
  %11041 = extractelement <1024 x i32> %load.buffer.i, i32 702
  %11042 = sext i32 %11041 to i64
  %11043 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11042
  %11044 = load i32, i32* %11043, align 4, !tbaa !400
  %11045 = insertelement <1024 x i32> %11040, i32 %11044, i32 702
  %11046 = extractelement <1024 x i32> %load.buffer.i, i32 703
  %11047 = sext i32 %11046 to i64
  %11048 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11047
  %11049 = load i32, i32* %11048, align 4, !tbaa !400
  %11050 = insertelement <1024 x i32> %11045, i32 %11049, i32 703
  %11051 = extractelement <1024 x i32> %load.buffer.i, i32 704
  %11052 = sext i32 %11051 to i64
  %11053 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11052
  %11054 = load i32, i32* %11053, align 4, !tbaa !400
  %11055 = insertelement <1024 x i32> %11050, i32 %11054, i32 704
  %11056 = extractelement <1024 x i32> %load.buffer.i, i32 705
  %11057 = sext i32 %11056 to i64
  %11058 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11057
  %11059 = load i32, i32* %11058, align 4, !tbaa !400
  %11060 = insertelement <1024 x i32> %11055, i32 %11059, i32 705
  %11061 = extractelement <1024 x i32> %load.buffer.i, i32 706
  %11062 = sext i32 %11061 to i64
  %11063 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11062
  %11064 = load i32, i32* %11063, align 4, !tbaa !400
  %11065 = insertelement <1024 x i32> %11060, i32 %11064, i32 706
  %11066 = extractelement <1024 x i32> %load.buffer.i, i32 707
  %11067 = sext i32 %11066 to i64
  %11068 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11067
  %11069 = load i32, i32* %11068, align 4, !tbaa !400
  %11070 = insertelement <1024 x i32> %11065, i32 %11069, i32 707
  %11071 = extractelement <1024 x i32> %load.buffer.i, i32 708
  %11072 = sext i32 %11071 to i64
  %11073 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11072
  %11074 = load i32, i32* %11073, align 4, !tbaa !400
  %11075 = insertelement <1024 x i32> %11070, i32 %11074, i32 708
  %11076 = extractelement <1024 x i32> %load.buffer.i, i32 709
  %11077 = sext i32 %11076 to i64
  %11078 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11077
  %11079 = load i32, i32* %11078, align 4, !tbaa !400
  %11080 = insertelement <1024 x i32> %11075, i32 %11079, i32 709
  %11081 = extractelement <1024 x i32> %load.buffer.i, i32 710
  %11082 = sext i32 %11081 to i64
  %11083 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11082
  %11084 = load i32, i32* %11083, align 4, !tbaa !400
  %11085 = insertelement <1024 x i32> %11080, i32 %11084, i32 710
  %11086 = extractelement <1024 x i32> %load.buffer.i, i32 711
  %11087 = sext i32 %11086 to i64
  %11088 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11087
  %11089 = load i32, i32* %11088, align 4, !tbaa !400
  %11090 = insertelement <1024 x i32> %11085, i32 %11089, i32 711
  %11091 = extractelement <1024 x i32> %load.buffer.i, i32 712
  %11092 = sext i32 %11091 to i64
  %11093 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11092
  %11094 = load i32, i32* %11093, align 4, !tbaa !400
  %11095 = insertelement <1024 x i32> %11090, i32 %11094, i32 712
  %11096 = extractelement <1024 x i32> %load.buffer.i, i32 713
  %11097 = sext i32 %11096 to i64
  %11098 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11097
  %11099 = load i32, i32* %11098, align 4, !tbaa !400
  %11100 = insertelement <1024 x i32> %11095, i32 %11099, i32 713
  %11101 = extractelement <1024 x i32> %load.buffer.i, i32 714
  %11102 = sext i32 %11101 to i64
  %11103 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11102
  %11104 = load i32, i32* %11103, align 4, !tbaa !400
  %11105 = insertelement <1024 x i32> %11100, i32 %11104, i32 714
  %11106 = extractelement <1024 x i32> %load.buffer.i, i32 715
  %11107 = sext i32 %11106 to i64
  %11108 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11107
  %11109 = load i32, i32* %11108, align 4, !tbaa !400
  %11110 = insertelement <1024 x i32> %11105, i32 %11109, i32 715
  %11111 = extractelement <1024 x i32> %load.buffer.i, i32 716
  %11112 = sext i32 %11111 to i64
  %11113 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11112
  %11114 = load i32, i32* %11113, align 4, !tbaa !400
  %11115 = insertelement <1024 x i32> %11110, i32 %11114, i32 716
  %11116 = extractelement <1024 x i32> %load.buffer.i, i32 717
  %11117 = sext i32 %11116 to i64
  %11118 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11117
  %11119 = load i32, i32* %11118, align 4, !tbaa !400
  %11120 = insertelement <1024 x i32> %11115, i32 %11119, i32 717
  %11121 = extractelement <1024 x i32> %load.buffer.i, i32 718
  %11122 = sext i32 %11121 to i64
  %11123 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11122
  %11124 = load i32, i32* %11123, align 4, !tbaa !400
  %11125 = insertelement <1024 x i32> %11120, i32 %11124, i32 718
  %11126 = extractelement <1024 x i32> %load.buffer.i, i32 719
  %11127 = sext i32 %11126 to i64
  %11128 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11127
  %11129 = load i32, i32* %11128, align 4, !tbaa !400
  %11130 = insertelement <1024 x i32> %11125, i32 %11129, i32 719
  %11131 = extractelement <1024 x i32> %load.buffer.i, i32 720
  %11132 = sext i32 %11131 to i64
  %11133 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11132
  %11134 = load i32, i32* %11133, align 4, !tbaa !400
  %11135 = insertelement <1024 x i32> %11130, i32 %11134, i32 720
  %11136 = extractelement <1024 x i32> %load.buffer.i, i32 721
  %11137 = sext i32 %11136 to i64
  %11138 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11137
  %11139 = load i32, i32* %11138, align 4, !tbaa !400
  %11140 = insertelement <1024 x i32> %11135, i32 %11139, i32 721
  %11141 = extractelement <1024 x i32> %load.buffer.i, i32 722
  %11142 = sext i32 %11141 to i64
  %11143 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11142
  %11144 = load i32, i32* %11143, align 4, !tbaa !400
  %11145 = insertelement <1024 x i32> %11140, i32 %11144, i32 722
  %11146 = extractelement <1024 x i32> %load.buffer.i, i32 723
  %11147 = sext i32 %11146 to i64
  %11148 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11147
  %11149 = load i32, i32* %11148, align 4, !tbaa !400
  %11150 = insertelement <1024 x i32> %11145, i32 %11149, i32 723
  %11151 = extractelement <1024 x i32> %load.buffer.i, i32 724
  %11152 = sext i32 %11151 to i64
  %11153 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11152
  %11154 = load i32, i32* %11153, align 4, !tbaa !400
  %11155 = insertelement <1024 x i32> %11150, i32 %11154, i32 724
  %11156 = extractelement <1024 x i32> %load.buffer.i, i32 725
  %11157 = sext i32 %11156 to i64
  %11158 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11157
  %11159 = load i32, i32* %11158, align 4, !tbaa !400
  %11160 = insertelement <1024 x i32> %11155, i32 %11159, i32 725
  %11161 = extractelement <1024 x i32> %load.buffer.i, i32 726
  %11162 = sext i32 %11161 to i64
  %11163 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11162
  %11164 = load i32, i32* %11163, align 4, !tbaa !400
  %11165 = insertelement <1024 x i32> %11160, i32 %11164, i32 726
  %11166 = extractelement <1024 x i32> %load.buffer.i, i32 727
  %11167 = sext i32 %11166 to i64
  %11168 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11167
  %11169 = load i32, i32* %11168, align 4, !tbaa !400
  %11170 = insertelement <1024 x i32> %11165, i32 %11169, i32 727
  %11171 = extractelement <1024 x i32> %load.buffer.i, i32 728
  %11172 = sext i32 %11171 to i64
  %11173 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11172
  %11174 = load i32, i32* %11173, align 4, !tbaa !400
  %11175 = insertelement <1024 x i32> %11170, i32 %11174, i32 728
  %11176 = extractelement <1024 x i32> %load.buffer.i, i32 729
  %11177 = sext i32 %11176 to i64
  %11178 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11177
  %11179 = load i32, i32* %11178, align 4, !tbaa !400
  %11180 = insertelement <1024 x i32> %11175, i32 %11179, i32 729
  %11181 = extractelement <1024 x i32> %load.buffer.i, i32 730
  %11182 = sext i32 %11181 to i64
  %11183 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11182
  %11184 = load i32, i32* %11183, align 4, !tbaa !400
  %11185 = insertelement <1024 x i32> %11180, i32 %11184, i32 730
  %11186 = extractelement <1024 x i32> %load.buffer.i, i32 731
  %11187 = sext i32 %11186 to i64
  %11188 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11187
  %11189 = load i32, i32* %11188, align 4, !tbaa !400
  %11190 = insertelement <1024 x i32> %11185, i32 %11189, i32 731
  %11191 = extractelement <1024 x i32> %load.buffer.i, i32 732
  %11192 = sext i32 %11191 to i64
  %11193 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11192
  %11194 = load i32, i32* %11193, align 4, !tbaa !400
  %11195 = insertelement <1024 x i32> %11190, i32 %11194, i32 732
  %11196 = extractelement <1024 x i32> %load.buffer.i, i32 733
  %11197 = sext i32 %11196 to i64
  %11198 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11197
  %11199 = load i32, i32* %11198, align 4, !tbaa !400
  %11200 = insertelement <1024 x i32> %11195, i32 %11199, i32 733
  %11201 = extractelement <1024 x i32> %load.buffer.i, i32 734
  %11202 = sext i32 %11201 to i64
  %11203 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11202
  %11204 = load i32, i32* %11203, align 4, !tbaa !400
  %11205 = insertelement <1024 x i32> %11200, i32 %11204, i32 734
  %11206 = extractelement <1024 x i32> %load.buffer.i, i32 735
  %11207 = sext i32 %11206 to i64
  %11208 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11207
  %11209 = load i32, i32* %11208, align 4, !tbaa !400
  %11210 = insertelement <1024 x i32> %11205, i32 %11209, i32 735
  %11211 = extractelement <1024 x i32> %load.buffer.i, i32 736
  %11212 = sext i32 %11211 to i64
  %11213 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11212
  %11214 = load i32, i32* %11213, align 4, !tbaa !400
  %11215 = insertelement <1024 x i32> %11210, i32 %11214, i32 736
  %11216 = extractelement <1024 x i32> %load.buffer.i, i32 737
  %11217 = sext i32 %11216 to i64
  %11218 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11217
  %11219 = load i32, i32* %11218, align 4, !tbaa !400
  %11220 = insertelement <1024 x i32> %11215, i32 %11219, i32 737
  %11221 = extractelement <1024 x i32> %load.buffer.i, i32 738
  %11222 = sext i32 %11221 to i64
  %11223 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11222
  %11224 = load i32, i32* %11223, align 4, !tbaa !400
  %11225 = insertelement <1024 x i32> %11220, i32 %11224, i32 738
  %11226 = extractelement <1024 x i32> %load.buffer.i, i32 739
  %11227 = sext i32 %11226 to i64
  %11228 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11227
  %11229 = load i32, i32* %11228, align 4, !tbaa !400
  %11230 = insertelement <1024 x i32> %11225, i32 %11229, i32 739
  %11231 = extractelement <1024 x i32> %load.buffer.i, i32 740
  %11232 = sext i32 %11231 to i64
  %11233 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11232
  %11234 = load i32, i32* %11233, align 4, !tbaa !400
  %11235 = insertelement <1024 x i32> %11230, i32 %11234, i32 740
  %11236 = extractelement <1024 x i32> %load.buffer.i, i32 741
  %11237 = sext i32 %11236 to i64
  %11238 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11237
  %11239 = load i32, i32* %11238, align 4, !tbaa !400
  %11240 = insertelement <1024 x i32> %11235, i32 %11239, i32 741
  %11241 = extractelement <1024 x i32> %load.buffer.i, i32 742
  %11242 = sext i32 %11241 to i64
  %11243 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11242
  %11244 = load i32, i32* %11243, align 4, !tbaa !400
  %11245 = insertelement <1024 x i32> %11240, i32 %11244, i32 742
  %11246 = extractelement <1024 x i32> %load.buffer.i, i32 743
  %11247 = sext i32 %11246 to i64
  %11248 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11247
  %11249 = load i32, i32* %11248, align 4, !tbaa !400
  %11250 = insertelement <1024 x i32> %11245, i32 %11249, i32 743
  %11251 = extractelement <1024 x i32> %load.buffer.i, i32 744
  %11252 = sext i32 %11251 to i64
  %11253 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11252
  %11254 = load i32, i32* %11253, align 4, !tbaa !400
  %11255 = insertelement <1024 x i32> %11250, i32 %11254, i32 744
  %11256 = extractelement <1024 x i32> %load.buffer.i, i32 745
  %11257 = sext i32 %11256 to i64
  %11258 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11257
  %11259 = load i32, i32* %11258, align 4, !tbaa !400
  %11260 = insertelement <1024 x i32> %11255, i32 %11259, i32 745
  %11261 = extractelement <1024 x i32> %load.buffer.i, i32 746
  %11262 = sext i32 %11261 to i64
  %11263 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11262
  %11264 = load i32, i32* %11263, align 4, !tbaa !400
  %11265 = insertelement <1024 x i32> %11260, i32 %11264, i32 746
  %11266 = extractelement <1024 x i32> %load.buffer.i, i32 747
  %11267 = sext i32 %11266 to i64
  %11268 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11267
  %11269 = load i32, i32* %11268, align 4, !tbaa !400
  %11270 = insertelement <1024 x i32> %11265, i32 %11269, i32 747
  %11271 = extractelement <1024 x i32> %load.buffer.i, i32 748
  %11272 = sext i32 %11271 to i64
  %11273 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11272
  %11274 = load i32, i32* %11273, align 4, !tbaa !400
  %11275 = insertelement <1024 x i32> %11270, i32 %11274, i32 748
  %11276 = extractelement <1024 x i32> %load.buffer.i, i32 749
  %11277 = sext i32 %11276 to i64
  %11278 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11277
  %11279 = load i32, i32* %11278, align 4, !tbaa !400
  %11280 = insertelement <1024 x i32> %11275, i32 %11279, i32 749
  %11281 = extractelement <1024 x i32> %load.buffer.i, i32 750
  %11282 = sext i32 %11281 to i64
  %11283 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11282
  %11284 = load i32, i32* %11283, align 4, !tbaa !400
  %11285 = insertelement <1024 x i32> %11280, i32 %11284, i32 750
  %11286 = extractelement <1024 x i32> %load.buffer.i, i32 751
  %11287 = sext i32 %11286 to i64
  %11288 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11287
  %11289 = load i32, i32* %11288, align 4, !tbaa !400
  %11290 = insertelement <1024 x i32> %11285, i32 %11289, i32 751
  %11291 = extractelement <1024 x i32> %load.buffer.i, i32 752
  %11292 = sext i32 %11291 to i64
  %11293 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11292
  %11294 = load i32, i32* %11293, align 4, !tbaa !400
  %11295 = insertelement <1024 x i32> %11290, i32 %11294, i32 752
  %11296 = extractelement <1024 x i32> %load.buffer.i, i32 753
  %11297 = sext i32 %11296 to i64
  %11298 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11297
  %11299 = load i32, i32* %11298, align 4, !tbaa !400
  %11300 = insertelement <1024 x i32> %11295, i32 %11299, i32 753
  %11301 = extractelement <1024 x i32> %load.buffer.i, i32 754
  %11302 = sext i32 %11301 to i64
  %11303 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11302
  %11304 = load i32, i32* %11303, align 4, !tbaa !400
  %11305 = insertelement <1024 x i32> %11300, i32 %11304, i32 754
  %11306 = extractelement <1024 x i32> %load.buffer.i, i32 755
  %11307 = sext i32 %11306 to i64
  %11308 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11307
  %11309 = load i32, i32* %11308, align 4, !tbaa !400
  %11310 = insertelement <1024 x i32> %11305, i32 %11309, i32 755
  %11311 = extractelement <1024 x i32> %load.buffer.i, i32 756
  %11312 = sext i32 %11311 to i64
  %11313 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11312
  %11314 = load i32, i32* %11313, align 4, !tbaa !400
  %11315 = insertelement <1024 x i32> %11310, i32 %11314, i32 756
  %11316 = extractelement <1024 x i32> %load.buffer.i, i32 757
  %11317 = sext i32 %11316 to i64
  %11318 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11317
  %11319 = load i32, i32* %11318, align 4, !tbaa !400
  %11320 = insertelement <1024 x i32> %11315, i32 %11319, i32 757
  %11321 = extractelement <1024 x i32> %load.buffer.i, i32 758
  %11322 = sext i32 %11321 to i64
  %11323 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11322
  %11324 = load i32, i32* %11323, align 4, !tbaa !400
  %11325 = insertelement <1024 x i32> %11320, i32 %11324, i32 758
  %11326 = extractelement <1024 x i32> %load.buffer.i, i32 759
  %11327 = sext i32 %11326 to i64
  %11328 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11327
  %11329 = load i32, i32* %11328, align 4, !tbaa !400
  %11330 = insertelement <1024 x i32> %11325, i32 %11329, i32 759
  %11331 = extractelement <1024 x i32> %load.buffer.i, i32 760
  %11332 = sext i32 %11331 to i64
  %11333 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11332
  %11334 = load i32, i32* %11333, align 4, !tbaa !400
  %11335 = insertelement <1024 x i32> %11330, i32 %11334, i32 760
  %11336 = extractelement <1024 x i32> %load.buffer.i, i32 761
  %11337 = sext i32 %11336 to i64
  %11338 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11337
  %11339 = load i32, i32* %11338, align 4, !tbaa !400
  %11340 = insertelement <1024 x i32> %11335, i32 %11339, i32 761
  %11341 = extractelement <1024 x i32> %load.buffer.i, i32 762
  %11342 = sext i32 %11341 to i64
  %11343 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11342
  %11344 = load i32, i32* %11343, align 4, !tbaa !400
  %11345 = insertelement <1024 x i32> %11340, i32 %11344, i32 762
  %11346 = extractelement <1024 x i32> %load.buffer.i, i32 763
  %11347 = sext i32 %11346 to i64
  %11348 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11347
  %11349 = load i32, i32* %11348, align 4, !tbaa !400
  %11350 = insertelement <1024 x i32> %11345, i32 %11349, i32 763
  %11351 = extractelement <1024 x i32> %load.buffer.i, i32 764
  %11352 = sext i32 %11351 to i64
  %11353 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11352
  %11354 = load i32, i32* %11353, align 4, !tbaa !400
  %11355 = insertelement <1024 x i32> %11350, i32 %11354, i32 764
  %11356 = extractelement <1024 x i32> %load.buffer.i, i32 765
  %11357 = sext i32 %11356 to i64
  %11358 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11357
  %11359 = load i32, i32* %11358, align 4, !tbaa !400
  %11360 = insertelement <1024 x i32> %11355, i32 %11359, i32 765
  %11361 = extractelement <1024 x i32> %load.buffer.i, i32 766
  %11362 = sext i32 %11361 to i64
  %11363 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11362
  %11364 = load i32, i32* %11363, align 4, !tbaa !400
  %11365 = insertelement <1024 x i32> %11360, i32 %11364, i32 766
  %11366 = extractelement <1024 x i32> %load.buffer.i, i32 767
  %11367 = sext i32 %11366 to i64
  %11368 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11367
  %11369 = load i32, i32* %11368, align 4, !tbaa !400
  %11370 = insertelement <1024 x i32> %11365, i32 %11369, i32 767
  %11371 = extractelement <1024 x i32> %load.buffer.i, i32 768
  %11372 = sext i32 %11371 to i64
  %11373 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11372
  %11374 = load i32, i32* %11373, align 4, !tbaa !400
  %11375 = insertelement <1024 x i32> %11370, i32 %11374, i32 768
  %11376 = extractelement <1024 x i32> %load.buffer.i, i32 769
  %11377 = sext i32 %11376 to i64
  %11378 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11377
  %11379 = load i32, i32* %11378, align 4, !tbaa !400
  %11380 = insertelement <1024 x i32> %11375, i32 %11379, i32 769
  %11381 = extractelement <1024 x i32> %load.buffer.i, i32 770
  %11382 = sext i32 %11381 to i64
  %11383 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11382
  %11384 = load i32, i32* %11383, align 4, !tbaa !400
  %11385 = insertelement <1024 x i32> %11380, i32 %11384, i32 770
  %11386 = extractelement <1024 x i32> %load.buffer.i, i32 771
  %11387 = sext i32 %11386 to i64
  %11388 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11387
  %11389 = load i32, i32* %11388, align 4, !tbaa !400
  %11390 = insertelement <1024 x i32> %11385, i32 %11389, i32 771
  %11391 = extractelement <1024 x i32> %load.buffer.i, i32 772
  %11392 = sext i32 %11391 to i64
  %11393 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11392
  %11394 = load i32, i32* %11393, align 4, !tbaa !400
  %11395 = insertelement <1024 x i32> %11390, i32 %11394, i32 772
  %11396 = extractelement <1024 x i32> %load.buffer.i, i32 773
  %11397 = sext i32 %11396 to i64
  %11398 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11397
  %11399 = load i32, i32* %11398, align 4, !tbaa !400
  %11400 = insertelement <1024 x i32> %11395, i32 %11399, i32 773
  %11401 = extractelement <1024 x i32> %load.buffer.i, i32 774
  %11402 = sext i32 %11401 to i64
  %11403 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11402
  %11404 = load i32, i32* %11403, align 4, !tbaa !400
  %11405 = insertelement <1024 x i32> %11400, i32 %11404, i32 774
  %11406 = extractelement <1024 x i32> %load.buffer.i, i32 775
  %11407 = sext i32 %11406 to i64
  %11408 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11407
  %11409 = load i32, i32* %11408, align 4, !tbaa !400
  %11410 = insertelement <1024 x i32> %11405, i32 %11409, i32 775
  %11411 = extractelement <1024 x i32> %load.buffer.i, i32 776
  %11412 = sext i32 %11411 to i64
  %11413 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11412
  %11414 = load i32, i32* %11413, align 4, !tbaa !400
  %11415 = insertelement <1024 x i32> %11410, i32 %11414, i32 776
  %11416 = extractelement <1024 x i32> %load.buffer.i, i32 777
  %11417 = sext i32 %11416 to i64
  %11418 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11417
  %11419 = load i32, i32* %11418, align 4, !tbaa !400
  %11420 = insertelement <1024 x i32> %11415, i32 %11419, i32 777
  %11421 = extractelement <1024 x i32> %load.buffer.i, i32 778
  %11422 = sext i32 %11421 to i64
  %11423 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11422
  %11424 = load i32, i32* %11423, align 4, !tbaa !400
  %11425 = insertelement <1024 x i32> %11420, i32 %11424, i32 778
  %11426 = extractelement <1024 x i32> %load.buffer.i, i32 779
  %11427 = sext i32 %11426 to i64
  %11428 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11427
  %11429 = load i32, i32* %11428, align 4, !tbaa !400
  %11430 = insertelement <1024 x i32> %11425, i32 %11429, i32 779
  %11431 = extractelement <1024 x i32> %load.buffer.i, i32 780
  %11432 = sext i32 %11431 to i64
  %11433 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11432
  %11434 = load i32, i32* %11433, align 4, !tbaa !400
  %11435 = insertelement <1024 x i32> %11430, i32 %11434, i32 780
  %11436 = extractelement <1024 x i32> %load.buffer.i, i32 781
  %11437 = sext i32 %11436 to i64
  %11438 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11437
  %11439 = load i32, i32* %11438, align 4, !tbaa !400
  %11440 = insertelement <1024 x i32> %11435, i32 %11439, i32 781
  %11441 = extractelement <1024 x i32> %load.buffer.i, i32 782
  %11442 = sext i32 %11441 to i64
  %11443 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11442
  %11444 = load i32, i32* %11443, align 4, !tbaa !400
  %11445 = insertelement <1024 x i32> %11440, i32 %11444, i32 782
  %11446 = extractelement <1024 x i32> %load.buffer.i, i32 783
  %11447 = sext i32 %11446 to i64
  %11448 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11447
  %11449 = load i32, i32* %11448, align 4, !tbaa !400
  %11450 = insertelement <1024 x i32> %11445, i32 %11449, i32 783
  %11451 = extractelement <1024 x i32> %load.buffer.i, i32 784
  %11452 = sext i32 %11451 to i64
  %11453 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11452
  %11454 = load i32, i32* %11453, align 4, !tbaa !400
  %11455 = insertelement <1024 x i32> %11450, i32 %11454, i32 784
  %11456 = extractelement <1024 x i32> %load.buffer.i, i32 785
  %11457 = sext i32 %11456 to i64
  %11458 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11457
  %11459 = load i32, i32* %11458, align 4, !tbaa !400
  %11460 = insertelement <1024 x i32> %11455, i32 %11459, i32 785
  %11461 = extractelement <1024 x i32> %load.buffer.i, i32 786
  %11462 = sext i32 %11461 to i64
  %11463 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11462
  %11464 = load i32, i32* %11463, align 4, !tbaa !400
  %11465 = insertelement <1024 x i32> %11460, i32 %11464, i32 786
  %11466 = extractelement <1024 x i32> %load.buffer.i, i32 787
  %11467 = sext i32 %11466 to i64
  %11468 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11467
  %11469 = load i32, i32* %11468, align 4, !tbaa !400
  %11470 = insertelement <1024 x i32> %11465, i32 %11469, i32 787
  %11471 = extractelement <1024 x i32> %load.buffer.i, i32 788
  %11472 = sext i32 %11471 to i64
  %11473 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11472
  %11474 = load i32, i32* %11473, align 4, !tbaa !400
  %11475 = insertelement <1024 x i32> %11470, i32 %11474, i32 788
  %11476 = extractelement <1024 x i32> %load.buffer.i, i32 789
  %11477 = sext i32 %11476 to i64
  %11478 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11477
  %11479 = load i32, i32* %11478, align 4, !tbaa !400
  %11480 = insertelement <1024 x i32> %11475, i32 %11479, i32 789
  %11481 = extractelement <1024 x i32> %load.buffer.i, i32 790
  %11482 = sext i32 %11481 to i64
  %11483 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11482
  %11484 = load i32, i32* %11483, align 4, !tbaa !400
  %11485 = insertelement <1024 x i32> %11480, i32 %11484, i32 790
  %11486 = extractelement <1024 x i32> %load.buffer.i, i32 791
  %11487 = sext i32 %11486 to i64
  %11488 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11487
  %11489 = load i32, i32* %11488, align 4, !tbaa !400
  %11490 = insertelement <1024 x i32> %11485, i32 %11489, i32 791
  %11491 = extractelement <1024 x i32> %load.buffer.i, i32 792
  %11492 = sext i32 %11491 to i64
  %11493 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11492
  %11494 = load i32, i32* %11493, align 4, !tbaa !400
  %11495 = insertelement <1024 x i32> %11490, i32 %11494, i32 792
  %11496 = extractelement <1024 x i32> %load.buffer.i, i32 793
  %11497 = sext i32 %11496 to i64
  %11498 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11497
  %11499 = load i32, i32* %11498, align 4, !tbaa !400
  %11500 = insertelement <1024 x i32> %11495, i32 %11499, i32 793
  %11501 = extractelement <1024 x i32> %load.buffer.i, i32 794
  %11502 = sext i32 %11501 to i64
  %11503 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11502
  %11504 = load i32, i32* %11503, align 4, !tbaa !400
  %11505 = insertelement <1024 x i32> %11500, i32 %11504, i32 794
  %11506 = extractelement <1024 x i32> %load.buffer.i, i32 795
  %11507 = sext i32 %11506 to i64
  %11508 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11507
  %11509 = load i32, i32* %11508, align 4, !tbaa !400
  %11510 = insertelement <1024 x i32> %11505, i32 %11509, i32 795
  %11511 = extractelement <1024 x i32> %load.buffer.i, i32 796
  %11512 = sext i32 %11511 to i64
  %11513 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11512
  %11514 = load i32, i32* %11513, align 4, !tbaa !400
  %11515 = insertelement <1024 x i32> %11510, i32 %11514, i32 796
  %11516 = extractelement <1024 x i32> %load.buffer.i, i32 797
  %11517 = sext i32 %11516 to i64
  %11518 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11517
  %11519 = load i32, i32* %11518, align 4, !tbaa !400
  %11520 = insertelement <1024 x i32> %11515, i32 %11519, i32 797
  %11521 = extractelement <1024 x i32> %load.buffer.i, i32 798
  %11522 = sext i32 %11521 to i64
  %11523 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11522
  %11524 = load i32, i32* %11523, align 4, !tbaa !400
  %11525 = insertelement <1024 x i32> %11520, i32 %11524, i32 798
  %11526 = extractelement <1024 x i32> %load.buffer.i, i32 799
  %11527 = sext i32 %11526 to i64
  %11528 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11527
  %11529 = load i32, i32* %11528, align 4, !tbaa !400
  %11530 = insertelement <1024 x i32> %11525, i32 %11529, i32 799
  %11531 = extractelement <1024 x i32> %load.buffer.i, i32 800
  %11532 = sext i32 %11531 to i64
  %11533 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11532
  %11534 = load i32, i32* %11533, align 4, !tbaa !400
  %11535 = insertelement <1024 x i32> %11530, i32 %11534, i32 800
  %11536 = extractelement <1024 x i32> %load.buffer.i, i32 801
  %11537 = sext i32 %11536 to i64
  %11538 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11537
  %11539 = load i32, i32* %11538, align 4, !tbaa !400
  %11540 = insertelement <1024 x i32> %11535, i32 %11539, i32 801
  %11541 = extractelement <1024 x i32> %load.buffer.i, i32 802
  %11542 = sext i32 %11541 to i64
  %11543 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11542
  %11544 = load i32, i32* %11543, align 4, !tbaa !400
  %11545 = insertelement <1024 x i32> %11540, i32 %11544, i32 802
  %11546 = extractelement <1024 x i32> %load.buffer.i, i32 803
  %11547 = sext i32 %11546 to i64
  %11548 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11547
  %11549 = load i32, i32* %11548, align 4, !tbaa !400
  %11550 = insertelement <1024 x i32> %11545, i32 %11549, i32 803
  %11551 = extractelement <1024 x i32> %load.buffer.i, i32 804
  %11552 = sext i32 %11551 to i64
  %11553 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11552
  %11554 = load i32, i32* %11553, align 4, !tbaa !400
  %11555 = insertelement <1024 x i32> %11550, i32 %11554, i32 804
  %11556 = extractelement <1024 x i32> %load.buffer.i, i32 805
  %11557 = sext i32 %11556 to i64
  %11558 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11557
  %11559 = load i32, i32* %11558, align 4, !tbaa !400
  %11560 = insertelement <1024 x i32> %11555, i32 %11559, i32 805
  %11561 = extractelement <1024 x i32> %load.buffer.i, i32 806
  %11562 = sext i32 %11561 to i64
  %11563 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11562
  %11564 = load i32, i32* %11563, align 4, !tbaa !400
  %11565 = insertelement <1024 x i32> %11560, i32 %11564, i32 806
  %11566 = extractelement <1024 x i32> %load.buffer.i, i32 807
  %11567 = sext i32 %11566 to i64
  %11568 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11567
  %11569 = load i32, i32* %11568, align 4, !tbaa !400
  %11570 = insertelement <1024 x i32> %11565, i32 %11569, i32 807
  %11571 = extractelement <1024 x i32> %load.buffer.i, i32 808
  %11572 = sext i32 %11571 to i64
  %11573 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11572
  %11574 = load i32, i32* %11573, align 4, !tbaa !400
  %11575 = insertelement <1024 x i32> %11570, i32 %11574, i32 808
  %11576 = extractelement <1024 x i32> %load.buffer.i, i32 809
  %11577 = sext i32 %11576 to i64
  %11578 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11577
  %11579 = load i32, i32* %11578, align 4, !tbaa !400
  %11580 = insertelement <1024 x i32> %11575, i32 %11579, i32 809
  %11581 = extractelement <1024 x i32> %load.buffer.i, i32 810
  %11582 = sext i32 %11581 to i64
  %11583 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11582
  %11584 = load i32, i32* %11583, align 4, !tbaa !400
  %11585 = insertelement <1024 x i32> %11580, i32 %11584, i32 810
  %11586 = extractelement <1024 x i32> %load.buffer.i, i32 811
  %11587 = sext i32 %11586 to i64
  %11588 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11587
  %11589 = load i32, i32* %11588, align 4, !tbaa !400
  %11590 = insertelement <1024 x i32> %11585, i32 %11589, i32 811
  %11591 = extractelement <1024 x i32> %load.buffer.i, i32 812
  %11592 = sext i32 %11591 to i64
  %11593 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11592
  %11594 = load i32, i32* %11593, align 4, !tbaa !400
  %11595 = insertelement <1024 x i32> %11590, i32 %11594, i32 812
  %11596 = extractelement <1024 x i32> %load.buffer.i, i32 813
  %11597 = sext i32 %11596 to i64
  %11598 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11597
  %11599 = load i32, i32* %11598, align 4, !tbaa !400
  %11600 = insertelement <1024 x i32> %11595, i32 %11599, i32 813
  %11601 = extractelement <1024 x i32> %load.buffer.i, i32 814
  %11602 = sext i32 %11601 to i64
  %11603 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11602
  %11604 = load i32, i32* %11603, align 4, !tbaa !400
  %11605 = insertelement <1024 x i32> %11600, i32 %11604, i32 814
  %11606 = extractelement <1024 x i32> %load.buffer.i, i32 815
  %11607 = sext i32 %11606 to i64
  %11608 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11607
  %11609 = load i32, i32* %11608, align 4, !tbaa !400
  %11610 = insertelement <1024 x i32> %11605, i32 %11609, i32 815
  %11611 = extractelement <1024 x i32> %load.buffer.i, i32 816
  %11612 = sext i32 %11611 to i64
  %11613 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11612
  %11614 = load i32, i32* %11613, align 4, !tbaa !400
  %11615 = insertelement <1024 x i32> %11610, i32 %11614, i32 816
  %11616 = extractelement <1024 x i32> %load.buffer.i, i32 817
  %11617 = sext i32 %11616 to i64
  %11618 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11617
  %11619 = load i32, i32* %11618, align 4, !tbaa !400
  %11620 = insertelement <1024 x i32> %11615, i32 %11619, i32 817
  %11621 = extractelement <1024 x i32> %load.buffer.i, i32 818
  %11622 = sext i32 %11621 to i64
  %11623 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11622
  %11624 = load i32, i32* %11623, align 4, !tbaa !400
  %11625 = insertelement <1024 x i32> %11620, i32 %11624, i32 818
  %11626 = extractelement <1024 x i32> %load.buffer.i, i32 819
  %11627 = sext i32 %11626 to i64
  %11628 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11627
  %11629 = load i32, i32* %11628, align 4, !tbaa !400
  %11630 = insertelement <1024 x i32> %11625, i32 %11629, i32 819
  %11631 = extractelement <1024 x i32> %load.buffer.i, i32 820
  %11632 = sext i32 %11631 to i64
  %11633 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11632
  %11634 = load i32, i32* %11633, align 4, !tbaa !400
  %11635 = insertelement <1024 x i32> %11630, i32 %11634, i32 820
  %11636 = extractelement <1024 x i32> %load.buffer.i, i32 821
  %11637 = sext i32 %11636 to i64
  %11638 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11637
  %11639 = load i32, i32* %11638, align 4, !tbaa !400
  %11640 = insertelement <1024 x i32> %11635, i32 %11639, i32 821
  %11641 = extractelement <1024 x i32> %load.buffer.i, i32 822
  %11642 = sext i32 %11641 to i64
  %11643 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11642
  %11644 = load i32, i32* %11643, align 4, !tbaa !400
  %11645 = insertelement <1024 x i32> %11640, i32 %11644, i32 822
  %11646 = extractelement <1024 x i32> %load.buffer.i, i32 823
  %11647 = sext i32 %11646 to i64
  %11648 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11647
  %11649 = load i32, i32* %11648, align 4, !tbaa !400
  %11650 = insertelement <1024 x i32> %11645, i32 %11649, i32 823
  %11651 = extractelement <1024 x i32> %load.buffer.i, i32 824
  %11652 = sext i32 %11651 to i64
  %11653 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11652
  %11654 = load i32, i32* %11653, align 4, !tbaa !400
  %11655 = insertelement <1024 x i32> %11650, i32 %11654, i32 824
  %11656 = extractelement <1024 x i32> %load.buffer.i, i32 825
  %11657 = sext i32 %11656 to i64
  %11658 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11657
  %11659 = load i32, i32* %11658, align 4, !tbaa !400
  %11660 = insertelement <1024 x i32> %11655, i32 %11659, i32 825
  %11661 = extractelement <1024 x i32> %load.buffer.i, i32 826
  %11662 = sext i32 %11661 to i64
  %11663 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11662
  %11664 = load i32, i32* %11663, align 4, !tbaa !400
  %11665 = insertelement <1024 x i32> %11660, i32 %11664, i32 826
  %11666 = extractelement <1024 x i32> %load.buffer.i, i32 827
  %11667 = sext i32 %11666 to i64
  %11668 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11667
  %11669 = load i32, i32* %11668, align 4, !tbaa !400
  %11670 = insertelement <1024 x i32> %11665, i32 %11669, i32 827
  %11671 = extractelement <1024 x i32> %load.buffer.i, i32 828
  %11672 = sext i32 %11671 to i64
  %11673 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11672
  %11674 = load i32, i32* %11673, align 4, !tbaa !400
  %11675 = insertelement <1024 x i32> %11670, i32 %11674, i32 828
  %11676 = extractelement <1024 x i32> %load.buffer.i, i32 829
  %11677 = sext i32 %11676 to i64
  %11678 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11677
  %11679 = load i32, i32* %11678, align 4, !tbaa !400
  %11680 = insertelement <1024 x i32> %11675, i32 %11679, i32 829
  %11681 = extractelement <1024 x i32> %load.buffer.i, i32 830
  %11682 = sext i32 %11681 to i64
  %11683 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11682
  %11684 = load i32, i32* %11683, align 4, !tbaa !400
  %11685 = insertelement <1024 x i32> %11680, i32 %11684, i32 830
  %11686 = extractelement <1024 x i32> %load.buffer.i, i32 831
  %11687 = sext i32 %11686 to i64
  %11688 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11687
  %11689 = load i32, i32* %11688, align 4, !tbaa !400
  %11690 = insertelement <1024 x i32> %11685, i32 %11689, i32 831
  %11691 = extractelement <1024 x i32> %load.buffer.i, i32 832
  %11692 = sext i32 %11691 to i64
  %11693 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11692
  %11694 = load i32, i32* %11693, align 4, !tbaa !400
  %11695 = insertelement <1024 x i32> %11690, i32 %11694, i32 832
  %11696 = extractelement <1024 x i32> %load.buffer.i, i32 833
  %11697 = sext i32 %11696 to i64
  %11698 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11697
  %11699 = load i32, i32* %11698, align 4, !tbaa !400
  %11700 = insertelement <1024 x i32> %11695, i32 %11699, i32 833
  %11701 = extractelement <1024 x i32> %load.buffer.i, i32 834
  %11702 = sext i32 %11701 to i64
  %11703 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11702
  %11704 = load i32, i32* %11703, align 4, !tbaa !400
  %11705 = insertelement <1024 x i32> %11700, i32 %11704, i32 834
  %11706 = extractelement <1024 x i32> %load.buffer.i, i32 835
  %11707 = sext i32 %11706 to i64
  %11708 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11707
  %11709 = load i32, i32* %11708, align 4, !tbaa !400
  %11710 = insertelement <1024 x i32> %11705, i32 %11709, i32 835
  %11711 = extractelement <1024 x i32> %load.buffer.i, i32 836
  %11712 = sext i32 %11711 to i64
  %11713 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11712
  %11714 = load i32, i32* %11713, align 4, !tbaa !400
  %11715 = insertelement <1024 x i32> %11710, i32 %11714, i32 836
  %11716 = extractelement <1024 x i32> %load.buffer.i, i32 837
  %11717 = sext i32 %11716 to i64
  %11718 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11717
  %11719 = load i32, i32* %11718, align 4, !tbaa !400
  %11720 = insertelement <1024 x i32> %11715, i32 %11719, i32 837
  %11721 = extractelement <1024 x i32> %load.buffer.i, i32 838
  %11722 = sext i32 %11721 to i64
  %11723 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11722
  %11724 = load i32, i32* %11723, align 4, !tbaa !400
  %11725 = insertelement <1024 x i32> %11720, i32 %11724, i32 838
  %11726 = extractelement <1024 x i32> %load.buffer.i, i32 839
  %11727 = sext i32 %11726 to i64
  %11728 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11727
  %11729 = load i32, i32* %11728, align 4, !tbaa !400
  %11730 = insertelement <1024 x i32> %11725, i32 %11729, i32 839
  %11731 = extractelement <1024 x i32> %load.buffer.i, i32 840
  %11732 = sext i32 %11731 to i64
  %11733 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11732
  %11734 = load i32, i32* %11733, align 4, !tbaa !400
  %11735 = insertelement <1024 x i32> %11730, i32 %11734, i32 840
  %11736 = extractelement <1024 x i32> %load.buffer.i, i32 841
  %11737 = sext i32 %11736 to i64
  %11738 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11737
  %11739 = load i32, i32* %11738, align 4, !tbaa !400
  %11740 = insertelement <1024 x i32> %11735, i32 %11739, i32 841
  %11741 = extractelement <1024 x i32> %load.buffer.i, i32 842
  %11742 = sext i32 %11741 to i64
  %11743 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11742
  %11744 = load i32, i32* %11743, align 4, !tbaa !400
  %11745 = insertelement <1024 x i32> %11740, i32 %11744, i32 842
  %11746 = extractelement <1024 x i32> %load.buffer.i, i32 843
  %11747 = sext i32 %11746 to i64
  %11748 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11747
  %11749 = load i32, i32* %11748, align 4, !tbaa !400
  %11750 = insertelement <1024 x i32> %11745, i32 %11749, i32 843
  %11751 = extractelement <1024 x i32> %load.buffer.i, i32 844
  %11752 = sext i32 %11751 to i64
  %11753 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11752
  %11754 = load i32, i32* %11753, align 4, !tbaa !400
  %11755 = insertelement <1024 x i32> %11750, i32 %11754, i32 844
  %11756 = extractelement <1024 x i32> %load.buffer.i, i32 845
  %11757 = sext i32 %11756 to i64
  %11758 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11757
  %11759 = load i32, i32* %11758, align 4, !tbaa !400
  %11760 = insertelement <1024 x i32> %11755, i32 %11759, i32 845
  %11761 = extractelement <1024 x i32> %load.buffer.i, i32 846
  %11762 = sext i32 %11761 to i64
  %11763 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11762
  %11764 = load i32, i32* %11763, align 4, !tbaa !400
  %11765 = insertelement <1024 x i32> %11760, i32 %11764, i32 846
  %11766 = extractelement <1024 x i32> %load.buffer.i, i32 847
  %11767 = sext i32 %11766 to i64
  %11768 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11767
  %11769 = load i32, i32* %11768, align 4, !tbaa !400
  %11770 = insertelement <1024 x i32> %11765, i32 %11769, i32 847
  %11771 = extractelement <1024 x i32> %load.buffer.i, i32 848
  %11772 = sext i32 %11771 to i64
  %11773 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11772
  %11774 = load i32, i32* %11773, align 4, !tbaa !400
  %11775 = insertelement <1024 x i32> %11770, i32 %11774, i32 848
  %11776 = extractelement <1024 x i32> %load.buffer.i, i32 849
  %11777 = sext i32 %11776 to i64
  %11778 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11777
  %11779 = load i32, i32* %11778, align 4, !tbaa !400
  %11780 = insertelement <1024 x i32> %11775, i32 %11779, i32 849
  %11781 = extractelement <1024 x i32> %load.buffer.i, i32 850
  %11782 = sext i32 %11781 to i64
  %11783 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11782
  %11784 = load i32, i32* %11783, align 4, !tbaa !400
  %11785 = insertelement <1024 x i32> %11780, i32 %11784, i32 850
  %11786 = extractelement <1024 x i32> %load.buffer.i, i32 851
  %11787 = sext i32 %11786 to i64
  %11788 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11787
  %11789 = load i32, i32* %11788, align 4, !tbaa !400
  %11790 = insertelement <1024 x i32> %11785, i32 %11789, i32 851
  %11791 = extractelement <1024 x i32> %load.buffer.i, i32 852
  %11792 = sext i32 %11791 to i64
  %11793 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11792
  %11794 = load i32, i32* %11793, align 4, !tbaa !400
  %11795 = insertelement <1024 x i32> %11790, i32 %11794, i32 852
  %11796 = extractelement <1024 x i32> %load.buffer.i, i32 853
  %11797 = sext i32 %11796 to i64
  %11798 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11797
  %11799 = load i32, i32* %11798, align 4, !tbaa !400
  %11800 = insertelement <1024 x i32> %11795, i32 %11799, i32 853
  %11801 = extractelement <1024 x i32> %load.buffer.i, i32 854
  %11802 = sext i32 %11801 to i64
  %11803 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11802
  %11804 = load i32, i32* %11803, align 4, !tbaa !400
  %11805 = insertelement <1024 x i32> %11800, i32 %11804, i32 854
  %11806 = extractelement <1024 x i32> %load.buffer.i, i32 855
  %11807 = sext i32 %11806 to i64
  %11808 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11807
  %11809 = load i32, i32* %11808, align 4, !tbaa !400
  %11810 = insertelement <1024 x i32> %11805, i32 %11809, i32 855
  %11811 = extractelement <1024 x i32> %load.buffer.i, i32 856
  %11812 = sext i32 %11811 to i64
  %11813 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11812
  %11814 = load i32, i32* %11813, align 4, !tbaa !400
  %11815 = insertelement <1024 x i32> %11810, i32 %11814, i32 856
  %11816 = extractelement <1024 x i32> %load.buffer.i, i32 857
  %11817 = sext i32 %11816 to i64
  %11818 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11817
  %11819 = load i32, i32* %11818, align 4, !tbaa !400
  %11820 = insertelement <1024 x i32> %11815, i32 %11819, i32 857
  %11821 = extractelement <1024 x i32> %load.buffer.i, i32 858
  %11822 = sext i32 %11821 to i64
  %11823 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11822
  %11824 = load i32, i32* %11823, align 4, !tbaa !400
  %11825 = insertelement <1024 x i32> %11820, i32 %11824, i32 858
  %11826 = extractelement <1024 x i32> %load.buffer.i, i32 859
  %11827 = sext i32 %11826 to i64
  %11828 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11827
  %11829 = load i32, i32* %11828, align 4, !tbaa !400
  %11830 = insertelement <1024 x i32> %11825, i32 %11829, i32 859
  %11831 = extractelement <1024 x i32> %load.buffer.i, i32 860
  %11832 = sext i32 %11831 to i64
  %11833 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11832
  %11834 = load i32, i32* %11833, align 4, !tbaa !400
  %11835 = insertelement <1024 x i32> %11830, i32 %11834, i32 860
  %11836 = extractelement <1024 x i32> %load.buffer.i, i32 861
  %11837 = sext i32 %11836 to i64
  %11838 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11837
  %11839 = load i32, i32* %11838, align 4, !tbaa !400
  %11840 = insertelement <1024 x i32> %11835, i32 %11839, i32 861
  %11841 = extractelement <1024 x i32> %load.buffer.i, i32 862
  %11842 = sext i32 %11841 to i64
  %11843 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11842
  %11844 = load i32, i32* %11843, align 4, !tbaa !400
  %11845 = insertelement <1024 x i32> %11840, i32 %11844, i32 862
  %11846 = extractelement <1024 x i32> %load.buffer.i, i32 863
  %11847 = sext i32 %11846 to i64
  %11848 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11847
  %11849 = load i32, i32* %11848, align 4, !tbaa !400
  %11850 = insertelement <1024 x i32> %11845, i32 %11849, i32 863
  %11851 = extractelement <1024 x i32> %load.buffer.i, i32 864
  %11852 = sext i32 %11851 to i64
  %11853 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11852
  %11854 = load i32, i32* %11853, align 4, !tbaa !400
  %11855 = insertelement <1024 x i32> %11850, i32 %11854, i32 864
  %11856 = extractelement <1024 x i32> %load.buffer.i, i32 865
  %11857 = sext i32 %11856 to i64
  %11858 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11857
  %11859 = load i32, i32* %11858, align 4, !tbaa !400
  %11860 = insertelement <1024 x i32> %11855, i32 %11859, i32 865
  %11861 = extractelement <1024 x i32> %load.buffer.i, i32 866
  %11862 = sext i32 %11861 to i64
  %11863 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11862
  %11864 = load i32, i32* %11863, align 4, !tbaa !400
  %11865 = insertelement <1024 x i32> %11860, i32 %11864, i32 866
  %11866 = extractelement <1024 x i32> %load.buffer.i, i32 867
  %11867 = sext i32 %11866 to i64
  %11868 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11867
  %11869 = load i32, i32* %11868, align 4, !tbaa !400
  %11870 = insertelement <1024 x i32> %11865, i32 %11869, i32 867
  %11871 = extractelement <1024 x i32> %load.buffer.i, i32 868
  %11872 = sext i32 %11871 to i64
  %11873 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11872
  %11874 = load i32, i32* %11873, align 4, !tbaa !400
  %11875 = insertelement <1024 x i32> %11870, i32 %11874, i32 868
  %11876 = extractelement <1024 x i32> %load.buffer.i, i32 869
  %11877 = sext i32 %11876 to i64
  %11878 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11877
  %11879 = load i32, i32* %11878, align 4, !tbaa !400
  %11880 = insertelement <1024 x i32> %11875, i32 %11879, i32 869
  %11881 = extractelement <1024 x i32> %load.buffer.i, i32 870
  %11882 = sext i32 %11881 to i64
  %11883 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11882
  %11884 = load i32, i32* %11883, align 4, !tbaa !400
  %11885 = insertelement <1024 x i32> %11880, i32 %11884, i32 870
  %11886 = extractelement <1024 x i32> %load.buffer.i, i32 871
  %11887 = sext i32 %11886 to i64
  %11888 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11887
  %11889 = load i32, i32* %11888, align 4, !tbaa !400
  %11890 = insertelement <1024 x i32> %11885, i32 %11889, i32 871
  %11891 = extractelement <1024 x i32> %load.buffer.i, i32 872
  %11892 = sext i32 %11891 to i64
  %11893 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11892
  %11894 = load i32, i32* %11893, align 4, !tbaa !400
  %11895 = insertelement <1024 x i32> %11890, i32 %11894, i32 872
  %11896 = extractelement <1024 x i32> %load.buffer.i, i32 873
  %11897 = sext i32 %11896 to i64
  %11898 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11897
  %11899 = load i32, i32* %11898, align 4, !tbaa !400
  %11900 = insertelement <1024 x i32> %11895, i32 %11899, i32 873
  %11901 = extractelement <1024 x i32> %load.buffer.i, i32 874
  %11902 = sext i32 %11901 to i64
  %11903 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11902
  %11904 = load i32, i32* %11903, align 4, !tbaa !400
  %11905 = insertelement <1024 x i32> %11900, i32 %11904, i32 874
  %11906 = extractelement <1024 x i32> %load.buffer.i, i32 875
  %11907 = sext i32 %11906 to i64
  %11908 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11907
  %11909 = load i32, i32* %11908, align 4, !tbaa !400
  %11910 = insertelement <1024 x i32> %11905, i32 %11909, i32 875
  %11911 = extractelement <1024 x i32> %load.buffer.i, i32 876
  %11912 = sext i32 %11911 to i64
  %11913 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11912
  %11914 = load i32, i32* %11913, align 4, !tbaa !400
  %11915 = insertelement <1024 x i32> %11910, i32 %11914, i32 876
  %11916 = extractelement <1024 x i32> %load.buffer.i, i32 877
  %11917 = sext i32 %11916 to i64
  %11918 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11917
  %11919 = load i32, i32* %11918, align 4, !tbaa !400
  %11920 = insertelement <1024 x i32> %11915, i32 %11919, i32 877
  %11921 = extractelement <1024 x i32> %load.buffer.i, i32 878
  %11922 = sext i32 %11921 to i64
  %11923 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11922
  %11924 = load i32, i32* %11923, align 4, !tbaa !400
  %11925 = insertelement <1024 x i32> %11920, i32 %11924, i32 878
  %11926 = extractelement <1024 x i32> %load.buffer.i, i32 879
  %11927 = sext i32 %11926 to i64
  %11928 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11927
  %11929 = load i32, i32* %11928, align 4, !tbaa !400
  %11930 = insertelement <1024 x i32> %11925, i32 %11929, i32 879
  %11931 = extractelement <1024 x i32> %load.buffer.i, i32 880
  %11932 = sext i32 %11931 to i64
  %11933 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11932
  %11934 = load i32, i32* %11933, align 4, !tbaa !400
  %11935 = insertelement <1024 x i32> %11930, i32 %11934, i32 880
  %11936 = extractelement <1024 x i32> %load.buffer.i, i32 881
  %11937 = sext i32 %11936 to i64
  %11938 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11937
  %11939 = load i32, i32* %11938, align 4, !tbaa !400
  %11940 = insertelement <1024 x i32> %11935, i32 %11939, i32 881
  %11941 = extractelement <1024 x i32> %load.buffer.i, i32 882
  %11942 = sext i32 %11941 to i64
  %11943 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11942
  %11944 = load i32, i32* %11943, align 4, !tbaa !400
  %11945 = insertelement <1024 x i32> %11940, i32 %11944, i32 882
  %11946 = extractelement <1024 x i32> %load.buffer.i, i32 883
  %11947 = sext i32 %11946 to i64
  %11948 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11947
  %11949 = load i32, i32* %11948, align 4, !tbaa !400
  %11950 = insertelement <1024 x i32> %11945, i32 %11949, i32 883
  %11951 = extractelement <1024 x i32> %load.buffer.i, i32 884
  %11952 = sext i32 %11951 to i64
  %11953 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11952
  %11954 = load i32, i32* %11953, align 4, !tbaa !400
  %11955 = insertelement <1024 x i32> %11950, i32 %11954, i32 884
  %11956 = extractelement <1024 x i32> %load.buffer.i, i32 885
  %11957 = sext i32 %11956 to i64
  %11958 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11957
  %11959 = load i32, i32* %11958, align 4, !tbaa !400
  %11960 = insertelement <1024 x i32> %11955, i32 %11959, i32 885
  %11961 = extractelement <1024 x i32> %load.buffer.i, i32 886
  %11962 = sext i32 %11961 to i64
  %11963 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11962
  %11964 = load i32, i32* %11963, align 4, !tbaa !400
  %11965 = insertelement <1024 x i32> %11960, i32 %11964, i32 886
  %11966 = extractelement <1024 x i32> %load.buffer.i, i32 887
  %11967 = sext i32 %11966 to i64
  %11968 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11967
  %11969 = load i32, i32* %11968, align 4, !tbaa !400
  %11970 = insertelement <1024 x i32> %11965, i32 %11969, i32 887
  %11971 = extractelement <1024 x i32> %load.buffer.i, i32 888
  %11972 = sext i32 %11971 to i64
  %11973 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11972
  %11974 = load i32, i32* %11973, align 4, !tbaa !400
  %11975 = insertelement <1024 x i32> %11970, i32 %11974, i32 888
  %11976 = extractelement <1024 x i32> %load.buffer.i, i32 889
  %11977 = sext i32 %11976 to i64
  %11978 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11977
  %11979 = load i32, i32* %11978, align 4, !tbaa !400
  %11980 = insertelement <1024 x i32> %11975, i32 %11979, i32 889
  %11981 = extractelement <1024 x i32> %load.buffer.i, i32 890
  %11982 = sext i32 %11981 to i64
  %11983 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11982
  %11984 = load i32, i32* %11983, align 4, !tbaa !400
  %11985 = insertelement <1024 x i32> %11980, i32 %11984, i32 890
  %11986 = extractelement <1024 x i32> %load.buffer.i, i32 891
  %11987 = sext i32 %11986 to i64
  %11988 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11987
  %11989 = load i32, i32* %11988, align 4, !tbaa !400
  %11990 = insertelement <1024 x i32> %11985, i32 %11989, i32 891
  %11991 = extractelement <1024 x i32> %load.buffer.i, i32 892
  %11992 = sext i32 %11991 to i64
  %11993 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11992
  %11994 = load i32, i32* %11993, align 4, !tbaa !400
  %11995 = insertelement <1024 x i32> %11990, i32 %11994, i32 892
  %11996 = extractelement <1024 x i32> %load.buffer.i, i32 893
  %11997 = sext i32 %11996 to i64
  %11998 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %11997
  %11999 = load i32, i32* %11998, align 4, !tbaa !400
  %12000 = insertelement <1024 x i32> %11995, i32 %11999, i32 893
  %12001 = extractelement <1024 x i32> %load.buffer.i, i32 894
  %12002 = sext i32 %12001 to i64
  %12003 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12002
  %12004 = load i32, i32* %12003, align 4, !tbaa !400
  %12005 = insertelement <1024 x i32> %12000, i32 %12004, i32 894
  %12006 = extractelement <1024 x i32> %load.buffer.i, i32 895
  %12007 = sext i32 %12006 to i64
  %12008 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12007
  %12009 = load i32, i32* %12008, align 4, !tbaa !400
  %12010 = insertelement <1024 x i32> %12005, i32 %12009, i32 895
  %12011 = extractelement <1024 x i32> %load.buffer.i, i32 896
  %12012 = sext i32 %12011 to i64
  %12013 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12012
  %12014 = load i32, i32* %12013, align 4, !tbaa !400
  %12015 = insertelement <1024 x i32> %12010, i32 %12014, i32 896
  %12016 = extractelement <1024 x i32> %load.buffer.i, i32 897
  %12017 = sext i32 %12016 to i64
  %12018 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12017
  %12019 = load i32, i32* %12018, align 4, !tbaa !400
  %12020 = insertelement <1024 x i32> %12015, i32 %12019, i32 897
  %12021 = extractelement <1024 x i32> %load.buffer.i, i32 898
  %12022 = sext i32 %12021 to i64
  %12023 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12022
  %12024 = load i32, i32* %12023, align 4, !tbaa !400
  %12025 = insertelement <1024 x i32> %12020, i32 %12024, i32 898
  %12026 = extractelement <1024 x i32> %load.buffer.i, i32 899
  %12027 = sext i32 %12026 to i64
  %12028 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12027
  %12029 = load i32, i32* %12028, align 4, !tbaa !400
  %12030 = insertelement <1024 x i32> %12025, i32 %12029, i32 899
  %12031 = extractelement <1024 x i32> %load.buffer.i, i32 900
  %12032 = sext i32 %12031 to i64
  %12033 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12032
  %12034 = load i32, i32* %12033, align 4, !tbaa !400
  %12035 = insertelement <1024 x i32> %12030, i32 %12034, i32 900
  %12036 = extractelement <1024 x i32> %load.buffer.i, i32 901
  %12037 = sext i32 %12036 to i64
  %12038 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12037
  %12039 = load i32, i32* %12038, align 4, !tbaa !400
  %12040 = insertelement <1024 x i32> %12035, i32 %12039, i32 901
  %12041 = extractelement <1024 x i32> %load.buffer.i, i32 902
  %12042 = sext i32 %12041 to i64
  %12043 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12042
  %12044 = load i32, i32* %12043, align 4, !tbaa !400
  %12045 = insertelement <1024 x i32> %12040, i32 %12044, i32 902
  %12046 = extractelement <1024 x i32> %load.buffer.i, i32 903
  %12047 = sext i32 %12046 to i64
  %12048 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12047
  %12049 = load i32, i32* %12048, align 4, !tbaa !400
  %12050 = insertelement <1024 x i32> %12045, i32 %12049, i32 903
  %12051 = extractelement <1024 x i32> %load.buffer.i, i32 904
  %12052 = sext i32 %12051 to i64
  %12053 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12052
  %12054 = load i32, i32* %12053, align 4, !tbaa !400
  %12055 = insertelement <1024 x i32> %12050, i32 %12054, i32 904
  %12056 = extractelement <1024 x i32> %load.buffer.i, i32 905
  %12057 = sext i32 %12056 to i64
  %12058 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12057
  %12059 = load i32, i32* %12058, align 4, !tbaa !400
  %12060 = insertelement <1024 x i32> %12055, i32 %12059, i32 905
  %12061 = extractelement <1024 x i32> %load.buffer.i, i32 906
  %12062 = sext i32 %12061 to i64
  %12063 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12062
  %12064 = load i32, i32* %12063, align 4, !tbaa !400
  %12065 = insertelement <1024 x i32> %12060, i32 %12064, i32 906
  %12066 = extractelement <1024 x i32> %load.buffer.i, i32 907
  %12067 = sext i32 %12066 to i64
  %12068 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12067
  %12069 = load i32, i32* %12068, align 4, !tbaa !400
  %12070 = insertelement <1024 x i32> %12065, i32 %12069, i32 907
  %12071 = extractelement <1024 x i32> %load.buffer.i, i32 908
  %12072 = sext i32 %12071 to i64
  %12073 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12072
  %12074 = load i32, i32* %12073, align 4, !tbaa !400
  %12075 = insertelement <1024 x i32> %12070, i32 %12074, i32 908
  %12076 = extractelement <1024 x i32> %load.buffer.i, i32 909
  %12077 = sext i32 %12076 to i64
  %12078 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12077
  %12079 = load i32, i32* %12078, align 4, !tbaa !400
  %12080 = insertelement <1024 x i32> %12075, i32 %12079, i32 909
  %12081 = extractelement <1024 x i32> %load.buffer.i, i32 910
  %12082 = sext i32 %12081 to i64
  %12083 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12082
  %12084 = load i32, i32* %12083, align 4, !tbaa !400
  %12085 = insertelement <1024 x i32> %12080, i32 %12084, i32 910
  %12086 = extractelement <1024 x i32> %load.buffer.i, i32 911
  %12087 = sext i32 %12086 to i64
  %12088 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12087
  %12089 = load i32, i32* %12088, align 4, !tbaa !400
  %12090 = insertelement <1024 x i32> %12085, i32 %12089, i32 911
  %12091 = extractelement <1024 x i32> %load.buffer.i, i32 912
  %12092 = sext i32 %12091 to i64
  %12093 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12092
  %12094 = load i32, i32* %12093, align 4, !tbaa !400
  %12095 = insertelement <1024 x i32> %12090, i32 %12094, i32 912
  %12096 = extractelement <1024 x i32> %load.buffer.i, i32 913
  %12097 = sext i32 %12096 to i64
  %12098 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12097
  %12099 = load i32, i32* %12098, align 4, !tbaa !400
  %12100 = insertelement <1024 x i32> %12095, i32 %12099, i32 913
  %12101 = extractelement <1024 x i32> %load.buffer.i, i32 914
  %12102 = sext i32 %12101 to i64
  %12103 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12102
  %12104 = load i32, i32* %12103, align 4, !tbaa !400
  %12105 = insertelement <1024 x i32> %12100, i32 %12104, i32 914
  %12106 = extractelement <1024 x i32> %load.buffer.i, i32 915
  %12107 = sext i32 %12106 to i64
  %12108 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12107
  %12109 = load i32, i32* %12108, align 4, !tbaa !400
  %12110 = insertelement <1024 x i32> %12105, i32 %12109, i32 915
  %12111 = extractelement <1024 x i32> %load.buffer.i, i32 916
  %12112 = sext i32 %12111 to i64
  %12113 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12112
  %12114 = load i32, i32* %12113, align 4, !tbaa !400
  %12115 = insertelement <1024 x i32> %12110, i32 %12114, i32 916
  %12116 = extractelement <1024 x i32> %load.buffer.i, i32 917
  %12117 = sext i32 %12116 to i64
  %12118 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12117
  %12119 = load i32, i32* %12118, align 4, !tbaa !400
  %12120 = insertelement <1024 x i32> %12115, i32 %12119, i32 917
  %12121 = extractelement <1024 x i32> %load.buffer.i, i32 918
  %12122 = sext i32 %12121 to i64
  %12123 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12122
  %12124 = load i32, i32* %12123, align 4, !tbaa !400
  %12125 = insertelement <1024 x i32> %12120, i32 %12124, i32 918
  %12126 = extractelement <1024 x i32> %load.buffer.i, i32 919
  %12127 = sext i32 %12126 to i64
  %12128 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12127
  %12129 = load i32, i32* %12128, align 4, !tbaa !400
  %12130 = insertelement <1024 x i32> %12125, i32 %12129, i32 919
  %12131 = extractelement <1024 x i32> %load.buffer.i, i32 920
  %12132 = sext i32 %12131 to i64
  %12133 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12132
  %12134 = load i32, i32* %12133, align 4, !tbaa !400
  %12135 = insertelement <1024 x i32> %12130, i32 %12134, i32 920
  %12136 = extractelement <1024 x i32> %load.buffer.i, i32 921
  %12137 = sext i32 %12136 to i64
  %12138 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12137
  %12139 = load i32, i32* %12138, align 4, !tbaa !400
  %12140 = insertelement <1024 x i32> %12135, i32 %12139, i32 921
  %12141 = extractelement <1024 x i32> %load.buffer.i, i32 922
  %12142 = sext i32 %12141 to i64
  %12143 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12142
  %12144 = load i32, i32* %12143, align 4, !tbaa !400
  %12145 = insertelement <1024 x i32> %12140, i32 %12144, i32 922
  %12146 = extractelement <1024 x i32> %load.buffer.i, i32 923
  %12147 = sext i32 %12146 to i64
  %12148 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12147
  %12149 = load i32, i32* %12148, align 4, !tbaa !400
  %12150 = insertelement <1024 x i32> %12145, i32 %12149, i32 923
  %12151 = extractelement <1024 x i32> %load.buffer.i, i32 924
  %12152 = sext i32 %12151 to i64
  %12153 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12152
  %12154 = load i32, i32* %12153, align 4, !tbaa !400
  %12155 = insertelement <1024 x i32> %12150, i32 %12154, i32 924
  %12156 = extractelement <1024 x i32> %load.buffer.i, i32 925
  %12157 = sext i32 %12156 to i64
  %12158 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12157
  %12159 = load i32, i32* %12158, align 4, !tbaa !400
  %12160 = insertelement <1024 x i32> %12155, i32 %12159, i32 925
  %12161 = extractelement <1024 x i32> %load.buffer.i, i32 926
  %12162 = sext i32 %12161 to i64
  %12163 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12162
  %12164 = load i32, i32* %12163, align 4, !tbaa !400
  %12165 = insertelement <1024 x i32> %12160, i32 %12164, i32 926
  %12166 = extractelement <1024 x i32> %load.buffer.i, i32 927
  %12167 = sext i32 %12166 to i64
  %12168 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12167
  %12169 = load i32, i32* %12168, align 4, !tbaa !400
  %12170 = insertelement <1024 x i32> %12165, i32 %12169, i32 927
  %12171 = extractelement <1024 x i32> %load.buffer.i, i32 928
  %12172 = sext i32 %12171 to i64
  %12173 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12172
  %12174 = load i32, i32* %12173, align 4, !tbaa !400
  %12175 = insertelement <1024 x i32> %12170, i32 %12174, i32 928
  %12176 = extractelement <1024 x i32> %load.buffer.i, i32 929
  %12177 = sext i32 %12176 to i64
  %12178 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12177
  %12179 = load i32, i32* %12178, align 4, !tbaa !400
  %12180 = insertelement <1024 x i32> %12175, i32 %12179, i32 929
  %12181 = extractelement <1024 x i32> %load.buffer.i, i32 930
  %12182 = sext i32 %12181 to i64
  %12183 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12182
  %12184 = load i32, i32* %12183, align 4, !tbaa !400
  %12185 = insertelement <1024 x i32> %12180, i32 %12184, i32 930
  %12186 = extractelement <1024 x i32> %load.buffer.i, i32 931
  %12187 = sext i32 %12186 to i64
  %12188 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12187
  %12189 = load i32, i32* %12188, align 4, !tbaa !400
  %12190 = insertelement <1024 x i32> %12185, i32 %12189, i32 931
  %12191 = extractelement <1024 x i32> %load.buffer.i, i32 932
  %12192 = sext i32 %12191 to i64
  %12193 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12192
  %12194 = load i32, i32* %12193, align 4, !tbaa !400
  %12195 = insertelement <1024 x i32> %12190, i32 %12194, i32 932
  %12196 = extractelement <1024 x i32> %load.buffer.i, i32 933
  %12197 = sext i32 %12196 to i64
  %12198 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12197
  %12199 = load i32, i32* %12198, align 4, !tbaa !400
  %12200 = insertelement <1024 x i32> %12195, i32 %12199, i32 933
  %12201 = extractelement <1024 x i32> %load.buffer.i, i32 934
  %12202 = sext i32 %12201 to i64
  %12203 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12202
  %12204 = load i32, i32* %12203, align 4, !tbaa !400
  %12205 = insertelement <1024 x i32> %12200, i32 %12204, i32 934
  %12206 = extractelement <1024 x i32> %load.buffer.i, i32 935
  %12207 = sext i32 %12206 to i64
  %12208 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12207
  %12209 = load i32, i32* %12208, align 4, !tbaa !400
  %12210 = insertelement <1024 x i32> %12205, i32 %12209, i32 935
  %12211 = extractelement <1024 x i32> %load.buffer.i, i32 936
  %12212 = sext i32 %12211 to i64
  %12213 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12212
  %12214 = load i32, i32* %12213, align 4, !tbaa !400
  %12215 = insertelement <1024 x i32> %12210, i32 %12214, i32 936
  %12216 = extractelement <1024 x i32> %load.buffer.i, i32 937
  %12217 = sext i32 %12216 to i64
  %12218 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12217
  %12219 = load i32, i32* %12218, align 4, !tbaa !400
  %12220 = insertelement <1024 x i32> %12215, i32 %12219, i32 937
  %12221 = extractelement <1024 x i32> %load.buffer.i, i32 938
  %12222 = sext i32 %12221 to i64
  %12223 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12222
  %12224 = load i32, i32* %12223, align 4, !tbaa !400
  %12225 = insertelement <1024 x i32> %12220, i32 %12224, i32 938
  %12226 = extractelement <1024 x i32> %load.buffer.i, i32 939
  %12227 = sext i32 %12226 to i64
  %12228 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12227
  %12229 = load i32, i32* %12228, align 4, !tbaa !400
  %12230 = insertelement <1024 x i32> %12225, i32 %12229, i32 939
  %12231 = extractelement <1024 x i32> %load.buffer.i, i32 940
  %12232 = sext i32 %12231 to i64
  %12233 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12232
  %12234 = load i32, i32* %12233, align 4, !tbaa !400
  %12235 = insertelement <1024 x i32> %12230, i32 %12234, i32 940
  %12236 = extractelement <1024 x i32> %load.buffer.i, i32 941
  %12237 = sext i32 %12236 to i64
  %12238 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12237
  %12239 = load i32, i32* %12238, align 4, !tbaa !400
  %12240 = insertelement <1024 x i32> %12235, i32 %12239, i32 941
  %12241 = extractelement <1024 x i32> %load.buffer.i, i32 942
  %12242 = sext i32 %12241 to i64
  %12243 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12242
  %12244 = load i32, i32* %12243, align 4, !tbaa !400
  %12245 = insertelement <1024 x i32> %12240, i32 %12244, i32 942
  %12246 = extractelement <1024 x i32> %load.buffer.i, i32 943
  %12247 = sext i32 %12246 to i64
  %12248 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12247
  %12249 = load i32, i32* %12248, align 4, !tbaa !400
  %12250 = insertelement <1024 x i32> %12245, i32 %12249, i32 943
  %12251 = extractelement <1024 x i32> %load.buffer.i, i32 944
  %12252 = sext i32 %12251 to i64
  %12253 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12252
  %12254 = load i32, i32* %12253, align 4, !tbaa !400
  %12255 = insertelement <1024 x i32> %12250, i32 %12254, i32 944
  %12256 = extractelement <1024 x i32> %load.buffer.i, i32 945
  %12257 = sext i32 %12256 to i64
  %12258 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12257
  %12259 = load i32, i32* %12258, align 4, !tbaa !400
  %12260 = insertelement <1024 x i32> %12255, i32 %12259, i32 945
  %12261 = extractelement <1024 x i32> %load.buffer.i, i32 946
  %12262 = sext i32 %12261 to i64
  %12263 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12262
  %12264 = load i32, i32* %12263, align 4, !tbaa !400
  %12265 = insertelement <1024 x i32> %12260, i32 %12264, i32 946
  %12266 = extractelement <1024 x i32> %load.buffer.i, i32 947
  %12267 = sext i32 %12266 to i64
  %12268 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12267
  %12269 = load i32, i32* %12268, align 4, !tbaa !400
  %12270 = insertelement <1024 x i32> %12265, i32 %12269, i32 947
  %12271 = extractelement <1024 x i32> %load.buffer.i, i32 948
  %12272 = sext i32 %12271 to i64
  %12273 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12272
  %12274 = load i32, i32* %12273, align 4, !tbaa !400
  %12275 = insertelement <1024 x i32> %12270, i32 %12274, i32 948
  %12276 = extractelement <1024 x i32> %load.buffer.i, i32 949
  %12277 = sext i32 %12276 to i64
  %12278 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12277
  %12279 = load i32, i32* %12278, align 4, !tbaa !400
  %12280 = insertelement <1024 x i32> %12275, i32 %12279, i32 949
  %12281 = extractelement <1024 x i32> %load.buffer.i, i32 950
  %12282 = sext i32 %12281 to i64
  %12283 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12282
  %12284 = load i32, i32* %12283, align 4, !tbaa !400
  %12285 = insertelement <1024 x i32> %12280, i32 %12284, i32 950
  %12286 = extractelement <1024 x i32> %load.buffer.i, i32 951
  %12287 = sext i32 %12286 to i64
  %12288 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12287
  %12289 = load i32, i32* %12288, align 4, !tbaa !400
  %12290 = insertelement <1024 x i32> %12285, i32 %12289, i32 951
  %12291 = extractelement <1024 x i32> %load.buffer.i, i32 952
  %12292 = sext i32 %12291 to i64
  %12293 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12292
  %12294 = load i32, i32* %12293, align 4, !tbaa !400
  %12295 = insertelement <1024 x i32> %12290, i32 %12294, i32 952
  %12296 = extractelement <1024 x i32> %load.buffer.i, i32 953
  %12297 = sext i32 %12296 to i64
  %12298 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12297
  %12299 = load i32, i32* %12298, align 4, !tbaa !400
  %12300 = insertelement <1024 x i32> %12295, i32 %12299, i32 953
  %12301 = extractelement <1024 x i32> %load.buffer.i, i32 954
  %12302 = sext i32 %12301 to i64
  %12303 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12302
  %12304 = load i32, i32* %12303, align 4, !tbaa !400
  %12305 = insertelement <1024 x i32> %12300, i32 %12304, i32 954
  %12306 = extractelement <1024 x i32> %load.buffer.i, i32 955
  %12307 = sext i32 %12306 to i64
  %12308 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12307
  %12309 = load i32, i32* %12308, align 4, !tbaa !400
  %12310 = insertelement <1024 x i32> %12305, i32 %12309, i32 955
  %12311 = extractelement <1024 x i32> %load.buffer.i, i32 956
  %12312 = sext i32 %12311 to i64
  %12313 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12312
  %12314 = load i32, i32* %12313, align 4, !tbaa !400
  %12315 = insertelement <1024 x i32> %12310, i32 %12314, i32 956
  %12316 = extractelement <1024 x i32> %load.buffer.i, i32 957
  %12317 = sext i32 %12316 to i64
  %12318 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12317
  %12319 = load i32, i32* %12318, align 4, !tbaa !400
  %12320 = insertelement <1024 x i32> %12315, i32 %12319, i32 957
  %12321 = extractelement <1024 x i32> %load.buffer.i, i32 958
  %12322 = sext i32 %12321 to i64
  %12323 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12322
  %12324 = load i32, i32* %12323, align 4, !tbaa !400
  %12325 = insertelement <1024 x i32> %12320, i32 %12324, i32 958
  %12326 = extractelement <1024 x i32> %load.buffer.i, i32 959
  %12327 = sext i32 %12326 to i64
  %12328 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12327
  %12329 = load i32, i32* %12328, align 4, !tbaa !400
  %12330 = insertelement <1024 x i32> %12325, i32 %12329, i32 959
  %12331 = extractelement <1024 x i32> %load.buffer.i, i32 960
  %12332 = sext i32 %12331 to i64
  %12333 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12332
  %12334 = load i32, i32* %12333, align 4, !tbaa !400
  %12335 = insertelement <1024 x i32> %12330, i32 %12334, i32 960
  %12336 = extractelement <1024 x i32> %load.buffer.i, i32 961
  %12337 = sext i32 %12336 to i64
  %12338 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12337
  %12339 = load i32, i32* %12338, align 4, !tbaa !400
  %12340 = insertelement <1024 x i32> %12335, i32 %12339, i32 961
  %12341 = extractelement <1024 x i32> %load.buffer.i, i32 962
  %12342 = sext i32 %12341 to i64
  %12343 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12342
  %12344 = load i32, i32* %12343, align 4, !tbaa !400
  %12345 = insertelement <1024 x i32> %12340, i32 %12344, i32 962
  %12346 = extractelement <1024 x i32> %load.buffer.i, i32 963
  %12347 = sext i32 %12346 to i64
  %12348 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12347
  %12349 = load i32, i32* %12348, align 4, !tbaa !400
  %12350 = insertelement <1024 x i32> %12345, i32 %12349, i32 963
  %12351 = extractelement <1024 x i32> %load.buffer.i, i32 964
  %12352 = sext i32 %12351 to i64
  %12353 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12352
  %12354 = load i32, i32* %12353, align 4, !tbaa !400
  %12355 = insertelement <1024 x i32> %12350, i32 %12354, i32 964
  %12356 = extractelement <1024 x i32> %load.buffer.i, i32 965
  %12357 = sext i32 %12356 to i64
  %12358 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12357
  %12359 = load i32, i32* %12358, align 4, !tbaa !400
  %12360 = insertelement <1024 x i32> %12355, i32 %12359, i32 965
  %12361 = extractelement <1024 x i32> %load.buffer.i, i32 966
  %12362 = sext i32 %12361 to i64
  %12363 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12362
  %12364 = load i32, i32* %12363, align 4, !tbaa !400
  %12365 = insertelement <1024 x i32> %12360, i32 %12364, i32 966
  %12366 = extractelement <1024 x i32> %load.buffer.i, i32 967
  %12367 = sext i32 %12366 to i64
  %12368 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12367
  %12369 = load i32, i32* %12368, align 4, !tbaa !400
  %12370 = insertelement <1024 x i32> %12365, i32 %12369, i32 967
  %12371 = extractelement <1024 x i32> %load.buffer.i, i32 968
  %12372 = sext i32 %12371 to i64
  %12373 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12372
  %12374 = load i32, i32* %12373, align 4, !tbaa !400
  %12375 = insertelement <1024 x i32> %12370, i32 %12374, i32 968
  %12376 = extractelement <1024 x i32> %load.buffer.i, i32 969
  %12377 = sext i32 %12376 to i64
  %12378 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12377
  %12379 = load i32, i32* %12378, align 4, !tbaa !400
  %12380 = insertelement <1024 x i32> %12375, i32 %12379, i32 969
  %12381 = extractelement <1024 x i32> %load.buffer.i, i32 970
  %12382 = sext i32 %12381 to i64
  %12383 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12382
  %12384 = load i32, i32* %12383, align 4, !tbaa !400
  %12385 = insertelement <1024 x i32> %12380, i32 %12384, i32 970
  %12386 = extractelement <1024 x i32> %load.buffer.i, i32 971
  %12387 = sext i32 %12386 to i64
  %12388 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12387
  %12389 = load i32, i32* %12388, align 4, !tbaa !400
  %12390 = insertelement <1024 x i32> %12385, i32 %12389, i32 971
  %12391 = extractelement <1024 x i32> %load.buffer.i, i32 972
  %12392 = sext i32 %12391 to i64
  %12393 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12392
  %12394 = load i32, i32* %12393, align 4, !tbaa !400
  %12395 = insertelement <1024 x i32> %12390, i32 %12394, i32 972
  %12396 = extractelement <1024 x i32> %load.buffer.i, i32 973
  %12397 = sext i32 %12396 to i64
  %12398 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12397
  %12399 = load i32, i32* %12398, align 4, !tbaa !400
  %12400 = insertelement <1024 x i32> %12395, i32 %12399, i32 973
  %12401 = extractelement <1024 x i32> %load.buffer.i, i32 974
  %12402 = sext i32 %12401 to i64
  %12403 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12402
  %12404 = load i32, i32* %12403, align 4, !tbaa !400
  %12405 = insertelement <1024 x i32> %12400, i32 %12404, i32 974
  %12406 = extractelement <1024 x i32> %load.buffer.i, i32 975
  %12407 = sext i32 %12406 to i64
  %12408 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12407
  %12409 = load i32, i32* %12408, align 4, !tbaa !400
  %12410 = insertelement <1024 x i32> %12405, i32 %12409, i32 975
  %12411 = extractelement <1024 x i32> %load.buffer.i, i32 976
  %12412 = sext i32 %12411 to i64
  %12413 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12412
  %12414 = load i32, i32* %12413, align 4, !tbaa !400
  %12415 = insertelement <1024 x i32> %12410, i32 %12414, i32 976
  %12416 = extractelement <1024 x i32> %load.buffer.i, i32 977
  %12417 = sext i32 %12416 to i64
  %12418 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12417
  %12419 = load i32, i32* %12418, align 4, !tbaa !400
  %12420 = insertelement <1024 x i32> %12415, i32 %12419, i32 977
  %12421 = extractelement <1024 x i32> %load.buffer.i, i32 978
  %12422 = sext i32 %12421 to i64
  %12423 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12422
  %12424 = load i32, i32* %12423, align 4, !tbaa !400
  %12425 = insertelement <1024 x i32> %12420, i32 %12424, i32 978
  %12426 = extractelement <1024 x i32> %load.buffer.i, i32 979
  %12427 = sext i32 %12426 to i64
  %12428 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12427
  %12429 = load i32, i32* %12428, align 4, !tbaa !400
  %12430 = insertelement <1024 x i32> %12425, i32 %12429, i32 979
  %12431 = extractelement <1024 x i32> %load.buffer.i, i32 980
  %12432 = sext i32 %12431 to i64
  %12433 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12432
  %12434 = load i32, i32* %12433, align 4, !tbaa !400
  %12435 = insertelement <1024 x i32> %12430, i32 %12434, i32 980
  %12436 = extractelement <1024 x i32> %load.buffer.i, i32 981
  %12437 = sext i32 %12436 to i64
  %12438 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12437
  %12439 = load i32, i32* %12438, align 4, !tbaa !400
  %12440 = insertelement <1024 x i32> %12435, i32 %12439, i32 981
  %12441 = extractelement <1024 x i32> %load.buffer.i, i32 982
  %12442 = sext i32 %12441 to i64
  %12443 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12442
  %12444 = load i32, i32* %12443, align 4, !tbaa !400
  %12445 = insertelement <1024 x i32> %12440, i32 %12444, i32 982
  %12446 = extractelement <1024 x i32> %load.buffer.i, i32 983
  %12447 = sext i32 %12446 to i64
  %12448 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12447
  %12449 = load i32, i32* %12448, align 4, !tbaa !400
  %12450 = insertelement <1024 x i32> %12445, i32 %12449, i32 983
  %12451 = extractelement <1024 x i32> %load.buffer.i, i32 984
  %12452 = sext i32 %12451 to i64
  %12453 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12452
  %12454 = load i32, i32* %12453, align 4, !tbaa !400
  %12455 = insertelement <1024 x i32> %12450, i32 %12454, i32 984
  %12456 = extractelement <1024 x i32> %load.buffer.i, i32 985
  %12457 = sext i32 %12456 to i64
  %12458 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12457
  %12459 = load i32, i32* %12458, align 4, !tbaa !400
  %12460 = insertelement <1024 x i32> %12455, i32 %12459, i32 985
  %12461 = extractelement <1024 x i32> %load.buffer.i, i32 986
  %12462 = sext i32 %12461 to i64
  %12463 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12462
  %12464 = load i32, i32* %12463, align 4, !tbaa !400
  %12465 = insertelement <1024 x i32> %12460, i32 %12464, i32 986
  %12466 = extractelement <1024 x i32> %load.buffer.i, i32 987
  %12467 = sext i32 %12466 to i64
  %12468 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12467
  %12469 = load i32, i32* %12468, align 4, !tbaa !400
  %12470 = insertelement <1024 x i32> %12465, i32 %12469, i32 987
  %12471 = extractelement <1024 x i32> %load.buffer.i, i32 988
  %12472 = sext i32 %12471 to i64
  %12473 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12472
  %12474 = load i32, i32* %12473, align 4, !tbaa !400
  %12475 = insertelement <1024 x i32> %12470, i32 %12474, i32 988
  %12476 = extractelement <1024 x i32> %load.buffer.i, i32 989
  %12477 = sext i32 %12476 to i64
  %12478 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12477
  %12479 = load i32, i32* %12478, align 4, !tbaa !400
  %12480 = insertelement <1024 x i32> %12475, i32 %12479, i32 989
  %12481 = extractelement <1024 x i32> %load.buffer.i, i32 990
  %12482 = sext i32 %12481 to i64
  %12483 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12482
  %12484 = load i32, i32* %12483, align 4, !tbaa !400
  %12485 = insertelement <1024 x i32> %12480, i32 %12484, i32 990
  %12486 = extractelement <1024 x i32> %load.buffer.i, i32 991
  %12487 = sext i32 %12486 to i64
  %12488 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12487
  %12489 = load i32, i32* %12488, align 4, !tbaa !400
  %12490 = insertelement <1024 x i32> %12485, i32 %12489, i32 991
  %12491 = extractelement <1024 x i32> %load.buffer.i, i32 992
  %12492 = sext i32 %12491 to i64
  %12493 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12492
  %12494 = load i32, i32* %12493, align 4, !tbaa !400
  %12495 = insertelement <1024 x i32> %12490, i32 %12494, i32 992
  %12496 = extractelement <1024 x i32> %load.buffer.i, i32 993
  %12497 = sext i32 %12496 to i64
  %12498 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12497
  %12499 = load i32, i32* %12498, align 4, !tbaa !400
  %12500 = insertelement <1024 x i32> %12495, i32 %12499, i32 993
  %12501 = extractelement <1024 x i32> %load.buffer.i, i32 994
  %12502 = sext i32 %12501 to i64
  %12503 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12502
  %12504 = load i32, i32* %12503, align 4, !tbaa !400
  %12505 = insertelement <1024 x i32> %12500, i32 %12504, i32 994
  %12506 = extractelement <1024 x i32> %load.buffer.i, i32 995
  %12507 = sext i32 %12506 to i64
  %12508 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12507
  %12509 = load i32, i32* %12508, align 4, !tbaa !400
  %12510 = insertelement <1024 x i32> %12505, i32 %12509, i32 995
  %12511 = extractelement <1024 x i32> %load.buffer.i, i32 996
  %12512 = sext i32 %12511 to i64
  %12513 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12512
  %12514 = load i32, i32* %12513, align 4, !tbaa !400
  %12515 = insertelement <1024 x i32> %12510, i32 %12514, i32 996
  %12516 = extractelement <1024 x i32> %load.buffer.i, i32 997
  %12517 = sext i32 %12516 to i64
  %12518 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12517
  %12519 = load i32, i32* %12518, align 4, !tbaa !400
  %12520 = insertelement <1024 x i32> %12515, i32 %12519, i32 997
  %12521 = extractelement <1024 x i32> %load.buffer.i, i32 998
  %12522 = sext i32 %12521 to i64
  %12523 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12522
  %12524 = load i32, i32* %12523, align 4, !tbaa !400
  %12525 = insertelement <1024 x i32> %12520, i32 %12524, i32 998
  %12526 = extractelement <1024 x i32> %load.buffer.i, i32 999
  %12527 = sext i32 %12526 to i64
  %12528 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12527
  %12529 = load i32, i32* %12528, align 4, !tbaa !400
  %12530 = insertelement <1024 x i32> %12525, i32 %12529, i32 999
  %12531 = extractelement <1024 x i32> %load.buffer.i, i32 1000
  %12532 = sext i32 %12531 to i64
  %12533 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12532
  %12534 = load i32, i32* %12533, align 4, !tbaa !400
  %12535 = insertelement <1024 x i32> %12530, i32 %12534, i32 1000
  %12536 = extractelement <1024 x i32> %load.buffer.i, i32 1001
  %12537 = sext i32 %12536 to i64
  %12538 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12537
  %12539 = load i32, i32* %12538, align 4, !tbaa !400
  %12540 = insertelement <1024 x i32> %12535, i32 %12539, i32 1001
  %12541 = extractelement <1024 x i32> %load.buffer.i, i32 1002
  %12542 = sext i32 %12541 to i64
  %12543 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12542
  %12544 = load i32, i32* %12543, align 4, !tbaa !400
  %12545 = insertelement <1024 x i32> %12540, i32 %12544, i32 1002
  %12546 = extractelement <1024 x i32> %load.buffer.i, i32 1003
  %12547 = sext i32 %12546 to i64
  %12548 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12547
  %12549 = load i32, i32* %12548, align 4, !tbaa !400
  %12550 = insertelement <1024 x i32> %12545, i32 %12549, i32 1003
  %12551 = extractelement <1024 x i32> %load.buffer.i, i32 1004
  %12552 = sext i32 %12551 to i64
  %12553 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12552
  %12554 = load i32, i32* %12553, align 4, !tbaa !400
  %12555 = insertelement <1024 x i32> %12550, i32 %12554, i32 1004
  %12556 = extractelement <1024 x i32> %load.buffer.i, i32 1005
  %12557 = sext i32 %12556 to i64
  %12558 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12557
  %12559 = load i32, i32* %12558, align 4, !tbaa !400
  %12560 = insertelement <1024 x i32> %12555, i32 %12559, i32 1005
  %12561 = extractelement <1024 x i32> %load.buffer.i, i32 1006
  %12562 = sext i32 %12561 to i64
  %12563 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12562
  %12564 = load i32, i32* %12563, align 4, !tbaa !400
  %12565 = insertelement <1024 x i32> %12560, i32 %12564, i32 1006
  %12566 = extractelement <1024 x i32> %load.buffer.i, i32 1007
  %12567 = sext i32 %12566 to i64
  %12568 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12567
  %12569 = load i32, i32* %12568, align 4, !tbaa !400
  %12570 = insertelement <1024 x i32> %12565, i32 %12569, i32 1007
  %12571 = extractelement <1024 x i32> %load.buffer.i, i32 1008
  %12572 = sext i32 %12571 to i64
  %12573 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12572
  %12574 = load i32, i32* %12573, align 4, !tbaa !400
  %12575 = insertelement <1024 x i32> %12570, i32 %12574, i32 1008
  %12576 = extractelement <1024 x i32> %load.buffer.i, i32 1009
  %12577 = sext i32 %12576 to i64
  %12578 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12577
  %12579 = load i32, i32* %12578, align 4, !tbaa !400
  %12580 = insertelement <1024 x i32> %12575, i32 %12579, i32 1009
  %12581 = extractelement <1024 x i32> %load.buffer.i, i32 1010
  %12582 = sext i32 %12581 to i64
  %12583 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12582
  %12584 = load i32, i32* %12583, align 4, !tbaa !400
  %12585 = insertelement <1024 x i32> %12580, i32 %12584, i32 1010
  %12586 = extractelement <1024 x i32> %load.buffer.i, i32 1011
  %12587 = sext i32 %12586 to i64
  %12588 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12587
  %12589 = load i32, i32* %12588, align 4, !tbaa !400
  %12590 = insertelement <1024 x i32> %12585, i32 %12589, i32 1011
  %12591 = extractelement <1024 x i32> %load.buffer.i, i32 1012
  %12592 = sext i32 %12591 to i64
  %12593 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12592
  %12594 = load i32, i32* %12593, align 4, !tbaa !400
  %12595 = insertelement <1024 x i32> %12590, i32 %12594, i32 1012
  %12596 = extractelement <1024 x i32> %load.buffer.i, i32 1013
  %12597 = sext i32 %12596 to i64
  %12598 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12597
  %12599 = load i32, i32* %12598, align 4, !tbaa !400
  %12600 = insertelement <1024 x i32> %12595, i32 %12599, i32 1013
  %12601 = extractelement <1024 x i32> %load.buffer.i, i32 1014
  %12602 = sext i32 %12601 to i64
  %12603 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12602
  %12604 = load i32, i32* %12603, align 4, !tbaa !400
  %12605 = insertelement <1024 x i32> %12600, i32 %12604, i32 1014
  %12606 = extractelement <1024 x i32> %load.buffer.i, i32 1015
  %12607 = sext i32 %12606 to i64
  %12608 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12607
  %12609 = load i32, i32* %12608, align 4, !tbaa !400
  %12610 = insertelement <1024 x i32> %12605, i32 %12609, i32 1015
  %12611 = extractelement <1024 x i32> %load.buffer.i, i32 1016
  %12612 = sext i32 %12611 to i64
  %12613 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12612
  %12614 = load i32, i32* %12613, align 4, !tbaa !400
  %12615 = insertelement <1024 x i32> %12610, i32 %12614, i32 1016
  %12616 = extractelement <1024 x i32> %load.buffer.i, i32 1017
  %12617 = sext i32 %12616 to i64
  %12618 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12617
  %12619 = load i32, i32* %12618, align 4, !tbaa !400
  %12620 = insertelement <1024 x i32> %12615, i32 %12619, i32 1017
  %12621 = extractelement <1024 x i32> %load.buffer.i, i32 1018
  %12622 = sext i32 %12621 to i64
  %12623 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12622
  %12624 = load i32, i32* %12623, align 4, !tbaa !400
  %12625 = insertelement <1024 x i32> %12620, i32 %12624, i32 1018
  %12626 = extractelement <1024 x i32> %load.buffer.i, i32 1019
  %12627 = sext i32 %12626 to i64
  %12628 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12627
  %12629 = load i32, i32* %12628, align 4, !tbaa !400
  %12630 = insertelement <1024 x i32> %12625, i32 %12629, i32 1019
  %12631 = extractelement <1024 x i32> %load.buffer.i, i32 1020
  %12632 = sext i32 %12631 to i64
  %12633 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12632
  %12634 = load i32, i32* %12633, align 4, !tbaa !400
  %12635 = insertelement <1024 x i32> %12630, i32 %12634, i32 1020
  %12636 = extractelement <1024 x i32> %load.buffer.i, i32 1021
  %12637 = sext i32 %12636 to i64
  %12638 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12637
  %12639 = load i32, i32* %12638, align 4, !tbaa !400
  %12640 = insertelement <1024 x i32> %12635, i32 %12639, i32 1021
  %12641 = extractelement <1024 x i32> %load.buffer.i, i32 1022
  %12642 = sext i32 %12641 to i64
  %12643 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12642
  %12644 = load i32, i32* %12643, align 4, !tbaa !400
  %12645 = insertelement <1024 x i32> %12640, i32 %12644, i32 1022
  %12646 = extractelement <1024 x i32> %load.buffer.i, i32 1023
  %12647 = sext i32 %12646 to i64
  %12648 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %12647
  %12649 = load i32, i32* %12648, align 4, !tbaa !400
  %12650 = insertelement <1024 x i32> %12645, i32 %12649, i32 1023
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %7266)
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %7267)
  %pimAlloc.i171 = call i32 @pimAlloc(i32 0, i64 1024, i32 2) #15
  store <1024 x i32> %12650, <1024 x i32>* %0, align 4096
  %pimHostToDevice.i172 = call i32 @pimCopyHostToDevice(i8* nonnull %7266, i32 %pimAlloc.i171, i64 0, i64 0) #15
  %pimAssocAlloc.i173 = call i32 @pimAllocAssociated(i32 %pimAlloc.i171, i32 2) #15
  %pimInst.i174 = call i32 @pimAddScalar(i32 %pimAlloc.i171, i32 %pimAssocAlloc.i173, i64 1) #15
  %pimDeviceToHost.i175 = call i32 @pimCopyDeviceToHost(i32 %pimAssocAlloc.i173, i8* nonnull %7267, i64 0, i64 0) #15
  %load.buffer.i176 = load <1024 x i32>, <1024 x i32>* %1, align 4096
  %pimFree.i177 = call i32 @pimFree(i32 %pimAssocAlloc.i173) #15
  %pimFree1.i = call i32 @pimFree(i32 %pimAlloc.i171) #15
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %7266)
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %7267)
  %12651 = extractelement <1024 x i32> %load.buffer.i176, i32 0
  store i32 %12651, i32* %7533, align 4, !tbaa !400
  %12652 = extractelement <1024 x i32> %load.buffer.i176, i32 1
  store i32 %12652, i32* %7538, align 4, !tbaa !400
  %12653 = extractelement <1024 x i32> %load.buffer.i176, i32 2
  store i32 %12653, i32* %7543, align 4, !tbaa !400
  %12654 = extractelement <1024 x i32> %load.buffer.i176, i32 3
  store i32 %12654, i32* %7548, align 4, !tbaa !400
  %12655 = extractelement <1024 x i32> %load.buffer.i176, i32 4
  store i32 %12655, i32* %7553, align 4, !tbaa !400
  %12656 = extractelement <1024 x i32> %load.buffer.i176, i32 5
  store i32 %12656, i32* %7558, align 4, !tbaa !400
  %12657 = extractelement <1024 x i32> %load.buffer.i176, i32 6
  store i32 %12657, i32* %7563, align 4, !tbaa !400
  %12658 = extractelement <1024 x i32> %load.buffer.i176, i32 7
  store i32 %12658, i32* %7568, align 4, !tbaa !400
  %12659 = extractelement <1024 x i32> %load.buffer.i176, i32 8
  store i32 %12659, i32* %7573, align 4, !tbaa !400
  %12660 = extractelement <1024 x i32> %load.buffer.i176, i32 9
  store i32 %12660, i32* %7578, align 4, !tbaa !400
  %12661 = extractelement <1024 x i32> %load.buffer.i176, i32 10
  store i32 %12661, i32* %7583, align 4, !tbaa !400
  %12662 = extractelement <1024 x i32> %load.buffer.i176, i32 11
  store i32 %12662, i32* %7588, align 4, !tbaa !400
  %12663 = extractelement <1024 x i32> %load.buffer.i176, i32 12
  store i32 %12663, i32* %7593, align 4, !tbaa !400
  %12664 = extractelement <1024 x i32> %load.buffer.i176, i32 13
  store i32 %12664, i32* %7598, align 4, !tbaa !400
  %12665 = extractelement <1024 x i32> %load.buffer.i176, i32 14
  store i32 %12665, i32* %7603, align 4, !tbaa !400
  %12666 = extractelement <1024 x i32> %load.buffer.i176, i32 15
  store i32 %12666, i32* %7608, align 4, !tbaa !400
  %12667 = extractelement <1024 x i32> %load.buffer.i176, i32 16
  store i32 %12667, i32* %7613, align 4, !tbaa !400
  %12668 = extractelement <1024 x i32> %load.buffer.i176, i32 17
  store i32 %12668, i32* %7618, align 4, !tbaa !400
  %12669 = extractelement <1024 x i32> %load.buffer.i176, i32 18
  store i32 %12669, i32* %7623, align 4, !tbaa !400
  %12670 = extractelement <1024 x i32> %load.buffer.i176, i32 19
  store i32 %12670, i32* %7628, align 4, !tbaa !400
  %12671 = extractelement <1024 x i32> %load.buffer.i176, i32 20
  store i32 %12671, i32* %7633, align 4, !tbaa !400
  %12672 = extractelement <1024 x i32> %load.buffer.i176, i32 21
  store i32 %12672, i32* %7638, align 4, !tbaa !400
  %12673 = extractelement <1024 x i32> %load.buffer.i176, i32 22
  store i32 %12673, i32* %7643, align 4, !tbaa !400
  %12674 = extractelement <1024 x i32> %load.buffer.i176, i32 23
  store i32 %12674, i32* %7648, align 4, !tbaa !400
  %12675 = extractelement <1024 x i32> %load.buffer.i176, i32 24
  store i32 %12675, i32* %7653, align 4, !tbaa !400
  %12676 = extractelement <1024 x i32> %load.buffer.i176, i32 25
  store i32 %12676, i32* %7658, align 4, !tbaa !400
  %12677 = extractelement <1024 x i32> %load.buffer.i176, i32 26
  store i32 %12677, i32* %7663, align 4, !tbaa !400
  %12678 = extractelement <1024 x i32> %load.buffer.i176, i32 27
  store i32 %12678, i32* %7668, align 4, !tbaa !400
  %12679 = extractelement <1024 x i32> %load.buffer.i176, i32 28
  store i32 %12679, i32* %7673, align 4, !tbaa !400
  %12680 = extractelement <1024 x i32> %load.buffer.i176, i32 29
  store i32 %12680, i32* %7678, align 4, !tbaa !400
  %12681 = extractelement <1024 x i32> %load.buffer.i176, i32 30
  store i32 %12681, i32* %7683, align 4, !tbaa !400
  %12682 = extractelement <1024 x i32> %load.buffer.i176, i32 31
  store i32 %12682, i32* %7688, align 4, !tbaa !400
  %12683 = extractelement <1024 x i32> %load.buffer.i176, i32 32
  store i32 %12683, i32* %7693, align 4, !tbaa !400
  %12684 = extractelement <1024 x i32> %load.buffer.i176, i32 33
  store i32 %12684, i32* %7698, align 4, !tbaa !400
  %12685 = extractelement <1024 x i32> %load.buffer.i176, i32 34
  store i32 %12685, i32* %7703, align 4, !tbaa !400
  %12686 = extractelement <1024 x i32> %load.buffer.i176, i32 35
  store i32 %12686, i32* %7708, align 4, !tbaa !400
  %12687 = extractelement <1024 x i32> %load.buffer.i176, i32 36
  store i32 %12687, i32* %7713, align 4, !tbaa !400
  %12688 = extractelement <1024 x i32> %load.buffer.i176, i32 37
  store i32 %12688, i32* %7718, align 4, !tbaa !400
  %12689 = extractelement <1024 x i32> %load.buffer.i176, i32 38
  store i32 %12689, i32* %7723, align 4, !tbaa !400
  %12690 = extractelement <1024 x i32> %load.buffer.i176, i32 39
  store i32 %12690, i32* %7728, align 4, !tbaa !400
  %12691 = extractelement <1024 x i32> %load.buffer.i176, i32 40
  store i32 %12691, i32* %7733, align 4, !tbaa !400
  %12692 = extractelement <1024 x i32> %load.buffer.i176, i32 41
  store i32 %12692, i32* %7738, align 4, !tbaa !400
  %12693 = extractelement <1024 x i32> %load.buffer.i176, i32 42
  store i32 %12693, i32* %7743, align 4, !tbaa !400
  %12694 = extractelement <1024 x i32> %load.buffer.i176, i32 43
  store i32 %12694, i32* %7748, align 4, !tbaa !400
  %12695 = extractelement <1024 x i32> %load.buffer.i176, i32 44
  store i32 %12695, i32* %7753, align 4, !tbaa !400
  %12696 = extractelement <1024 x i32> %load.buffer.i176, i32 45
  store i32 %12696, i32* %7758, align 4, !tbaa !400
  %12697 = extractelement <1024 x i32> %load.buffer.i176, i32 46
  store i32 %12697, i32* %7763, align 4, !tbaa !400
  %12698 = extractelement <1024 x i32> %load.buffer.i176, i32 47
  store i32 %12698, i32* %7768, align 4, !tbaa !400
  %12699 = extractelement <1024 x i32> %load.buffer.i176, i32 48
  store i32 %12699, i32* %7773, align 4, !tbaa !400
  %12700 = extractelement <1024 x i32> %load.buffer.i176, i32 49
  store i32 %12700, i32* %7778, align 4, !tbaa !400
  %12701 = extractelement <1024 x i32> %load.buffer.i176, i32 50
  store i32 %12701, i32* %7783, align 4, !tbaa !400
  %12702 = extractelement <1024 x i32> %load.buffer.i176, i32 51
  store i32 %12702, i32* %7788, align 4, !tbaa !400
  %12703 = extractelement <1024 x i32> %load.buffer.i176, i32 52
  store i32 %12703, i32* %7793, align 4, !tbaa !400
  %12704 = extractelement <1024 x i32> %load.buffer.i176, i32 53
  store i32 %12704, i32* %7798, align 4, !tbaa !400
  %12705 = extractelement <1024 x i32> %load.buffer.i176, i32 54
  store i32 %12705, i32* %7803, align 4, !tbaa !400
  %12706 = extractelement <1024 x i32> %load.buffer.i176, i32 55
  store i32 %12706, i32* %7808, align 4, !tbaa !400
  %12707 = extractelement <1024 x i32> %load.buffer.i176, i32 56
  store i32 %12707, i32* %7813, align 4, !tbaa !400
  %12708 = extractelement <1024 x i32> %load.buffer.i176, i32 57
  store i32 %12708, i32* %7818, align 4, !tbaa !400
  %12709 = extractelement <1024 x i32> %load.buffer.i176, i32 58
  store i32 %12709, i32* %7823, align 4, !tbaa !400
  %12710 = extractelement <1024 x i32> %load.buffer.i176, i32 59
  store i32 %12710, i32* %7828, align 4, !tbaa !400
  %12711 = extractelement <1024 x i32> %load.buffer.i176, i32 60
  store i32 %12711, i32* %7833, align 4, !tbaa !400
  %12712 = extractelement <1024 x i32> %load.buffer.i176, i32 61
  store i32 %12712, i32* %7838, align 4, !tbaa !400
  %12713 = extractelement <1024 x i32> %load.buffer.i176, i32 62
  store i32 %12713, i32* %7843, align 4, !tbaa !400
  %12714 = extractelement <1024 x i32> %load.buffer.i176, i32 63
  store i32 %12714, i32* %7848, align 4, !tbaa !400
  %12715 = extractelement <1024 x i32> %load.buffer.i176, i32 64
  store i32 %12715, i32* %7853, align 4, !tbaa !400
  %12716 = extractelement <1024 x i32> %load.buffer.i176, i32 65
  store i32 %12716, i32* %7858, align 4, !tbaa !400
  %12717 = extractelement <1024 x i32> %load.buffer.i176, i32 66
  store i32 %12717, i32* %7863, align 4, !tbaa !400
  %12718 = extractelement <1024 x i32> %load.buffer.i176, i32 67
  store i32 %12718, i32* %7868, align 4, !tbaa !400
  %12719 = extractelement <1024 x i32> %load.buffer.i176, i32 68
  store i32 %12719, i32* %7873, align 4, !tbaa !400
  %12720 = extractelement <1024 x i32> %load.buffer.i176, i32 69
  store i32 %12720, i32* %7878, align 4, !tbaa !400
  %12721 = extractelement <1024 x i32> %load.buffer.i176, i32 70
  store i32 %12721, i32* %7883, align 4, !tbaa !400
  %12722 = extractelement <1024 x i32> %load.buffer.i176, i32 71
  store i32 %12722, i32* %7888, align 4, !tbaa !400
  %12723 = extractelement <1024 x i32> %load.buffer.i176, i32 72
  store i32 %12723, i32* %7893, align 4, !tbaa !400
  %12724 = extractelement <1024 x i32> %load.buffer.i176, i32 73
  store i32 %12724, i32* %7898, align 4, !tbaa !400
  %12725 = extractelement <1024 x i32> %load.buffer.i176, i32 74
  store i32 %12725, i32* %7903, align 4, !tbaa !400
  %12726 = extractelement <1024 x i32> %load.buffer.i176, i32 75
  store i32 %12726, i32* %7908, align 4, !tbaa !400
  %12727 = extractelement <1024 x i32> %load.buffer.i176, i32 76
  store i32 %12727, i32* %7913, align 4, !tbaa !400
  %12728 = extractelement <1024 x i32> %load.buffer.i176, i32 77
  store i32 %12728, i32* %7918, align 4, !tbaa !400
  %12729 = extractelement <1024 x i32> %load.buffer.i176, i32 78
  store i32 %12729, i32* %7923, align 4, !tbaa !400
  %12730 = extractelement <1024 x i32> %load.buffer.i176, i32 79
  store i32 %12730, i32* %7928, align 4, !tbaa !400
  %12731 = extractelement <1024 x i32> %load.buffer.i176, i32 80
  store i32 %12731, i32* %7933, align 4, !tbaa !400
  %12732 = extractelement <1024 x i32> %load.buffer.i176, i32 81
  store i32 %12732, i32* %7938, align 4, !tbaa !400
  %12733 = extractelement <1024 x i32> %load.buffer.i176, i32 82
  store i32 %12733, i32* %7943, align 4, !tbaa !400
  %12734 = extractelement <1024 x i32> %load.buffer.i176, i32 83
  store i32 %12734, i32* %7948, align 4, !tbaa !400
  %12735 = extractelement <1024 x i32> %load.buffer.i176, i32 84
  store i32 %12735, i32* %7953, align 4, !tbaa !400
  %12736 = extractelement <1024 x i32> %load.buffer.i176, i32 85
  store i32 %12736, i32* %7958, align 4, !tbaa !400
  %12737 = extractelement <1024 x i32> %load.buffer.i176, i32 86
  store i32 %12737, i32* %7963, align 4, !tbaa !400
  %12738 = extractelement <1024 x i32> %load.buffer.i176, i32 87
  store i32 %12738, i32* %7968, align 4, !tbaa !400
  %12739 = extractelement <1024 x i32> %load.buffer.i176, i32 88
  store i32 %12739, i32* %7973, align 4, !tbaa !400
  %12740 = extractelement <1024 x i32> %load.buffer.i176, i32 89
  store i32 %12740, i32* %7978, align 4, !tbaa !400
  %12741 = extractelement <1024 x i32> %load.buffer.i176, i32 90
  store i32 %12741, i32* %7983, align 4, !tbaa !400
  %12742 = extractelement <1024 x i32> %load.buffer.i176, i32 91
  store i32 %12742, i32* %7988, align 4, !tbaa !400
  %12743 = extractelement <1024 x i32> %load.buffer.i176, i32 92
  store i32 %12743, i32* %7993, align 4, !tbaa !400
  %12744 = extractelement <1024 x i32> %load.buffer.i176, i32 93
  store i32 %12744, i32* %7998, align 4, !tbaa !400
  %12745 = extractelement <1024 x i32> %load.buffer.i176, i32 94
  store i32 %12745, i32* %8003, align 4, !tbaa !400
  %12746 = extractelement <1024 x i32> %load.buffer.i176, i32 95
  store i32 %12746, i32* %8008, align 4, !tbaa !400
  %12747 = extractelement <1024 x i32> %load.buffer.i176, i32 96
  store i32 %12747, i32* %8013, align 4, !tbaa !400
  %12748 = extractelement <1024 x i32> %load.buffer.i176, i32 97
  store i32 %12748, i32* %8018, align 4, !tbaa !400
  %12749 = extractelement <1024 x i32> %load.buffer.i176, i32 98
  store i32 %12749, i32* %8023, align 4, !tbaa !400
  %12750 = extractelement <1024 x i32> %load.buffer.i176, i32 99
  store i32 %12750, i32* %8028, align 4, !tbaa !400
  %12751 = extractelement <1024 x i32> %load.buffer.i176, i32 100
  store i32 %12751, i32* %8033, align 4, !tbaa !400
  %12752 = extractelement <1024 x i32> %load.buffer.i176, i32 101
  store i32 %12752, i32* %8038, align 4, !tbaa !400
  %12753 = extractelement <1024 x i32> %load.buffer.i176, i32 102
  store i32 %12753, i32* %8043, align 4, !tbaa !400
  %12754 = extractelement <1024 x i32> %load.buffer.i176, i32 103
  store i32 %12754, i32* %8048, align 4, !tbaa !400
  %12755 = extractelement <1024 x i32> %load.buffer.i176, i32 104
  store i32 %12755, i32* %8053, align 4, !tbaa !400
  %12756 = extractelement <1024 x i32> %load.buffer.i176, i32 105
  store i32 %12756, i32* %8058, align 4, !tbaa !400
  %12757 = extractelement <1024 x i32> %load.buffer.i176, i32 106
  store i32 %12757, i32* %8063, align 4, !tbaa !400
  %12758 = extractelement <1024 x i32> %load.buffer.i176, i32 107
  store i32 %12758, i32* %8068, align 4, !tbaa !400
  %12759 = extractelement <1024 x i32> %load.buffer.i176, i32 108
  store i32 %12759, i32* %8073, align 4, !tbaa !400
  %12760 = extractelement <1024 x i32> %load.buffer.i176, i32 109
  store i32 %12760, i32* %8078, align 4, !tbaa !400
  %12761 = extractelement <1024 x i32> %load.buffer.i176, i32 110
  store i32 %12761, i32* %8083, align 4, !tbaa !400
  %12762 = extractelement <1024 x i32> %load.buffer.i176, i32 111
  store i32 %12762, i32* %8088, align 4, !tbaa !400
  %12763 = extractelement <1024 x i32> %load.buffer.i176, i32 112
  store i32 %12763, i32* %8093, align 4, !tbaa !400
  %12764 = extractelement <1024 x i32> %load.buffer.i176, i32 113
  store i32 %12764, i32* %8098, align 4, !tbaa !400
  %12765 = extractelement <1024 x i32> %load.buffer.i176, i32 114
  store i32 %12765, i32* %8103, align 4, !tbaa !400
  %12766 = extractelement <1024 x i32> %load.buffer.i176, i32 115
  store i32 %12766, i32* %8108, align 4, !tbaa !400
  %12767 = extractelement <1024 x i32> %load.buffer.i176, i32 116
  store i32 %12767, i32* %8113, align 4, !tbaa !400
  %12768 = extractelement <1024 x i32> %load.buffer.i176, i32 117
  store i32 %12768, i32* %8118, align 4, !tbaa !400
  %12769 = extractelement <1024 x i32> %load.buffer.i176, i32 118
  store i32 %12769, i32* %8123, align 4, !tbaa !400
  %12770 = extractelement <1024 x i32> %load.buffer.i176, i32 119
  store i32 %12770, i32* %8128, align 4, !tbaa !400
  %12771 = extractelement <1024 x i32> %load.buffer.i176, i32 120
  store i32 %12771, i32* %8133, align 4, !tbaa !400
  %12772 = extractelement <1024 x i32> %load.buffer.i176, i32 121
  store i32 %12772, i32* %8138, align 4, !tbaa !400
  %12773 = extractelement <1024 x i32> %load.buffer.i176, i32 122
  store i32 %12773, i32* %8143, align 4, !tbaa !400
  %12774 = extractelement <1024 x i32> %load.buffer.i176, i32 123
  store i32 %12774, i32* %8148, align 4, !tbaa !400
  %12775 = extractelement <1024 x i32> %load.buffer.i176, i32 124
  store i32 %12775, i32* %8153, align 4, !tbaa !400
  %12776 = extractelement <1024 x i32> %load.buffer.i176, i32 125
  store i32 %12776, i32* %8158, align 4, !tbaa !400
  %12777 = extractelement <1024 x i32> %load.buffer.i176, i32 126
  store i32 %12777, i32* %8163, align 4, !tbaa !400
  %12778 = extractelement <1024 x i32> %load.buffer.i176, i32 127
  store i32 %12778, i32* %8168, align 4, !tbaa !400
  %12779 = extractelement <1024 x i32> %load.buffer.i176, i32 128
  store i32 %12779, i32* %8173, align 4, !tbaa !400
  %12780 = extractelement <1024 x i32> %load.buffer.i176, i32 129
  store i32 %12780, i32* %8178, align 4, !tbaa !400
  %12781 = extractelement <1024 x i32> %load.buffer.i176, i32 130
  store i32 %12781, i32* %8183, align 4, !tbaa !400
  %12782 = extractelement <1024 x i32> %load.buffer.i176, i32 131
  store i32 %12782, i32* %8188, align 4, !tbaa !400
  %12783 = extractelement <1024 x i32> %load.buffer.i176, i32 132
  store i32 %12783, i32* %8193, align 4, !tbaa !400
  %12784 = extractelement <1024 x i32> %load.buffer.i176, i32 133
  store i32 %12784, i32* %8198, align 4, !tbaa !400
  %12785 = extractelement <1024 x i32> %load.buffer.i176, i32 134
  store i32 %12785, i32* %8203, align 4, !tbaa !400
  %12786 = extractelement <1024 x i32> %load.buffer.i176, i32 135
  store i32 %12786, i32* %8208, align 4, !tbaa !400
  %12787 = extractelement <1024 x i32> %load.buffer.i176, i32 136
  store i32 %12787, i32* %8213, align 4, !tbaa !400
  %12788 = extractelement <1024 x i32> %load.buffer.i176, i32 137
  store i32 %12788, i32* %8218, align 4, !tbaa !400
  %12789 = extractelement <1024 x i32> %load.buffer.i176, i32 138
  store i32 %12789, i32* %8223, align 4, !tbaa !400
  %12790 = extractelement <1024 x i32> %load.buffer.i176, i32 139
  store i32 %12790, i32* %8228, align 4, !tbaa !400
  %12791 = extractelement <1024 x i32> %load.buffer.i176, i32 140
  store i32 %12791, i32* %8233, align 4, !tbaa !400
  %12792 = extractelement <1024 x i32> %load.buffer.i176, i32 141
  store i32 %12792, i32* %8238, align 4, !tbaa !400
  %12793 = extractelement <1024 x i32> %load.buffer.i176, i32 142
  store i32 %12793, i32* %8243, align 4, !tbaa !400
  %12794 = extractelement <1024 x i32> %load.buffer.i176, i32 143
  store i32 %12794, i32* %8248, align 4, !tbaa !400
  %12795 = extractelement <1024 x i32> %load.buffer.i176, i32 144
  store i32 %12795, i32* %8253, align 4, !tbaa !400
  %12796 = extractelement <1024 x i32> %load.buffer.i176, i32 145
  store i32 %12796, i32* %8258, align 4, !tbaa !400
  %12797 = extractelement <1024 x i32> %load.buffer.i176, i32 146
  store i32 %12797, i32* %8263, align 4, !tbaa !400
  %12798 = extractelement <1024 x i32> %load.buffer.i176, i32 147
  store i32 %12798, i32* %8268, align 4, !tbaa !400
  %12799 = extractelement <1024 x i32> %load.buffer.i176, i32 148
  store i32 %12799, i32* %8273, align 4, !tbaa !400
  %12800 = extractelement <1024 x i32> %load.buffer.i176, i32 149
  store i32 %12800, i32* %8278, align 4, !tbaa !400
  %12801 = extractelement <1024 x i32> %load.buffer.i176, i32 150
  store i32 %12801, i32* %8283, align 4, !tbaa !400
  %12802 = extractelement <1024 x i32> %load.buffer.i176, i32 151
  store i32 %12802, i32* %8288, align 4, !tbaa !400
  %12803 = extractelement <1024 x i32> %load.buffer.i176, i32 152
  store i32 %12803, i32* %8293, align 4, !tbaa !400
  %12804 = extractelement <1024 x i32> %load.buffer.i176, i32 153
  store i32 %12804, i32* %8298, align 4, !tbaa !400
  %12805 = extractelement <1024 x i32> %load.buffer.i176, i32 154
  store i32 %12805, i32* %8303, align 4, !tbaa !400
  %12806 = extractelement <1024 x i32> %load.buffer.i176, i32 155
  store i32 %12806, i32* %8308, align 4, !tbaa !400
  %12807 = extractelement <1024 x i32> %load.buffer.i176, i32 156
  store i32 %12807, i32* %8313, align 4, !tbaa !400
  %12808 = extractelement <1024 x i32> %load.buffer.i176, i32 157
  store i32 %12808, i32* %8318, align 4, !tbaa !400
  %12809 = extractelement <1024 x i32> %load.buffer.i176, i32 158
  store i32 %12809, i32* %8323, align 4, !tbaa !400
  %12810 = extractelement <1024 x i32> %load.buffer.i176, i32 159
  store i32 %12810, i32* %8328, align 4, !tbaa !400
  %12811 = extractelement <1024 x i32> %load.buffer.i176, i32 160
  store i32 %12811, i32* %8333, align 4, !tbaa !400
  %12812 = extractelement <1024 x i32> %load.buffer.i176, i32 161
  store i32 %12812, i32* %8338, align 4, !tbaa !400
  %12813 = extractelement <1024 x i32> %load.buffer.i176, i32 162
  store i32 %12813, i32* %8343, align 4, !tbaa !400
  %12814 = extractelement <1024 x i32> %load.buffer.i176, i32 163
  store i32 %12814, i32* %8348, align 4, !tbaa !400
  %12815 = extractelement <1024 x i32> %load.buffer.i176, i32 164
  store i32 %12815, i32* %8353, align 4, !tbaa !400
  %12816 = extractelement <1024 x i32> %load.buffer.i176, i32 165
  store i32 %12816, i32* %8358, align 4, !tbaa !400
  %12817 = extractelement <1024 x i32> %load.buffer.i176, i32 166
  store i32 %12817, i32* %8363, align 4, !tbaa !400
  %12818 = extractelement <1024 x i32> %load.buffer.i176, i32 167
  store i32 %12818, i32* %8368, align 4, !tbaa !400
  %12819 = extractelement <1024 x i32> %load.buffer.i176, i32 168
  store i32 %12819, i32* %8373, align 4, !tbaa !400
  %12820 = extractelement <1024 x i32> %load.buffer.i176, i32 169
  store i32 %12820, i32* %8378, align 4, !tbaa !400
  %12821 = extractelement <1024 x i32> %load.buffer.i176, i32 170
  store i32 %12821, i32* %8383, align 4, !tbaa !400
  %12822 = extractelement <1024 x i32> %load.buffer.i176, i32 171
  store i32 %12822, i32* %8388, align 4, !tbaa !400
  %12823 = extractelement <1024 x i32> %load.buffer.i176, i32 172
  store i32 %12823, i32* %8393, align 4, !tbaa !400
  %12824 = extractelement <1024 x i32> %load.buffer.i176, i32 173
  store i32 %12824, i32* %8398, align 4, !tbaa !400
  %12825 = extractelement <1024 x i32> %load.buffer.i176, i32 174
  store i32 %12825, i32* %8403, align 4, !tbaa !400
  %12826 = extractelement <1024 x i32> %load.buffer.i176, i32 175
  store i32 %12826, i32* %8408, align 4, !tbaa !400
  %12827 = extractelement <1024 x i32> %load.buffer.i176, i32 176
  store i32 %12827, i32* %8413, align 4, !tbaa !400
  %12828 = extractelement <1024 x i32> %load.buffer.i176, i32 177
  store i32 %12828, i32* %8418, align 4, !tbaa !400
  %12829 = extractelement <1024 x i32> %load.buffer.i176, i32 178
  store i32 %12829, i32* %8423, align 4, !tbaa !400
  %12830 = extractelement <1024 x i32> %load.buffer.i176, i32 179
  store i32 %12830, i32* %8428, align 4, !tbaa !400
  %12831 = extractelement <1024 x i32> %load.buffer.i176, i32 180
  store i32 %12831, i32* %8433, align 4, !tbaa !400
  %12832 = extractelement <1024 x i32> %load.buffer.i176, i32 181
  store i32 %12832, i32* %8438, align 4, !tbaa !400
  %12833 = extractelement <1024 x i32> %load.buffer.i176, i32 182
  store i32 %12833, i32* %8443, align 4, !tbaa !400
  %12834 = extractelement <1024 x i32> %load.buffer.i176, i32 183
  store i32 %12834, i32* %8448, align 4, !tbaa !400
  %12835 = extractelement <1024 x i32> %load.buffer.i176, i32 184
  store i32 %12835, i32* %8453, align 4, !tbaa !400
  %12836 = extractelement <1024 x i32> %load.buffer.i176, i32 185
  store i32 %12836, i32* %8458, align 4, !tbaa !400
  %12837 = extractelement <1024 x i32> %load.buffer.i176, i32 186
  store i32 %12837, i32* %8463, align 4, !tbaa !400
  %12838 = extractelement <1024 x i32> %load.buffer.i176, i32 187
  store i32 %12838, i32* %8468, align 4, !tbaa !400
  %12839 = extractelement <1024 x i32> %load.buffer.i176, i32 188
  store i32 %12839, i32* %8473, align 4, !tbaa !400
  %12840 = extractelement <1024 x i32> %load.buffer.i176, i32 189
  store i32 %12840, i32* %8478, align 4, !tbaa !400
  %12841 = extractelement <1024 x i32> %load.buffer.i176, i32 190
  store i32 %12841, i32* %8483, align 4, !tbaa !400
  %12842 = extractelement <1024 x i32> %load.buffer.i176, i32 191
  store i32 %12842, i32* %8488, align 4, !tbaa !400
  %12843 = extractelement <1024 x i32> %load.buffer.i176, i32 192
  store i32 %12843, i32* %8493, align 4, !tbaa !400
  %12844 = extractelement <1024 x i32> %load.buffer.i176, i32 193
  store i32 %12844, i32* %8498, align 4, !tbaa !400
  %12845 = extractelement <1024 x i32> %load.buffer.i176, i32 194
  store i32 %12845, i32* %8503, align 4, !tbaa !400
  %12846 = extractelement <1024 x i32> %load.buffer.i176, i32 195
  store i32 %12846, i32* %8508, align 4, !tbaa !400
  %12847 = extractelement <1024 x i32> %load.buffer.i176, i32 196
  store i32 %12847, i32* %8513, align 4, !tbaa !400
  %12848 = extractelement <1024 x i32> %load.buffer.i176, i32 197
  store i32 %12848, i32* %8518, align 4, !tbaa !400
  %12849 = extractelement <1024 x i32> %load.buffer.i176, i32 198
  store i32 %12849, i32* %8523, align 4, !tbaa !400
  %12850 = extractelement <1024 x i32> %load.buffer.i176, i32 199
  store i32 %12850, i32* %8528, align 4, !tbaa !400
  %12851 = extractelement <1024 x i32> %load.buffer.i176, i32 200
  store i32 %12851, i32* %8533, align 4, !tbaa !400
  %12852 = extractelement <1024 x i32> %load.buffer.i176, i32 201
  store i32 %12852, i32* %8538, align 4, !tbaa !400
  %12853 = extractelement <1024 x i32> %load.buffer.i176, i32 202
  store i32 %12853, i32* %8543, align 4, !tbaa !400
  %12854 = extractelement <1024 x i32> %load.buffer.i176, i32 203
  store i32 %12854, i32* %8548, align 4, !tbaa !400
  %12855 = extractelement <1024 x i32> %load.buffer.i176, i32 204
  store i32 %12855, i32* %8553, align 4, !tbaa !400
  %12856 = extractelement <1024 x i32> %load.buffer.i176, i32 205
  store i32 %12856, i32* %8558, align 4, !tbaa !400
  %12857 = extractelement <1024 x i32> %load.buffer.i176, i32 206
  store i32 %12857, i32* %8563, align 4, !tbaa !400
  %12858 = extractelement <1024 x i32> %load.buffer.i176, i32 207
  store i32 %12858, i32* %8568, align 4, !tbaa !400
  %12859 = extractelement <1024 x i32> %load.buffer.i176, i32 208
  store i32 %12859, i32* %8573, align 4, !tbaa !400
  %12860 = extractelement <1024 x i32> %load.buffer.i176, i32 209
  store i32 %12860, i32* %8578, align 4, !tbaa !400
  %12861 = extractelement <1024 x i32> %load.buffer.i176, i32 210
  store i32 %12861, i32* %8583, align 4, !tbaa !400
  %12862 = extractelement <1024 x i32> %load.buffer.i176, i32 211
  store i32 %12862, i32* %8588, align 4, !tbaa !400
  %12863 = extractelement <1024 x i32> %load.buffer.i176, i32 212
  store i32 %12863, i32* %8593, align 4, !tbaa !400
  %12864 = extractelement <1024 x i32> %load.buffer.i176, i32 213
  store i32 %12864, i32* %8598, align 4, !tbaa !400
  %12865 = extractelement <1024 x i32> %load.buffer.i176, i32 214
  store i32 %12865, i32* %8603, align 4, !tbaa !400
  %12866 = extractelement <1024 x i32> %load.buffer.i176, i32 215
  store i32 %12866, i32* %8608, align 4, !tbaa !400
  %12867 = extractelement <1024 x i32> %load.buffer.i176, i32 216
  store i32 %12867, i32* %8613, align 4, !tbaa !400
  %12868 = extractelement <1024 x i32> %load.buffer.i176, i32 217
  store i32 %12868, i32* %8618, align 4, !tbaa !400
  %12869 = extractelement <1024 x i32> %load.buffer.i176, i32 218
  store i32 %12869, i32* %8623, align 4, !tbaa !400
  %12870 = extractelement <1024 x i32> %load.buffer.i176, i32 219
  store i32 %12870, i32* %8628, align 4, !tbaa !400
  %12871 = extractelement <1024 x i32> %load.buffer.i176, i32 220
  store i32 %12871, i32* %8633, align 4, !tbaa !400
  %12872 = extractelement <1024 x i32> %load.buffer.i176, i32 221
  store i32 %12872, i32* %8638, align 4, !tbaa !400
  %12873 = extractelement <1024 x i32> %load.buffer.i176, i32 222
  store i32 %12873, i32* %8643, align 4, !tbaa !400
  %12874 = extractelement <1024 x i32> %load.buffer.i176, i32 223
  store i32 %12874, i32* %8648, align 4, !tbaa !400
  %12875 = extractelement <1024 x i32> %load.buffer.i176, i32 224
  store i32 %12875, i32* %8653, align 4, !tbaa !400
  %12876 = extractelement <1024 x i32> %load.buffer.i176, i32 225
  store i32 %12876, i32* %8658, align 4, !tbaa !400
  %12877 = extractelement <1024 x i32> %load.buffer.i176, i32 226
  store i32 %12877, i32* %8663, align 4, !tbaa !400
  %12878 = extractelement <1024 x i32> %load.buffer.i176, i32 227
  store i32 %12878, i32* %8668, align 4, !tbaa !400
  %12879 = extractelement <1024 x i32> %load.buffer.i176, i32 228
  store i32 %12879, i32* %8673, align 4, !tbaa !400
  %12880 = extractelement <1024 x i32> %load.buffer.i176, i32 229
  store i32 %12880, i32* %8678, align 4, !tbaa !400
  %12881 = extractelement <1024 x i32> %load.buffer.i176, i32 230
  store i32 %12881, i32* %8683, align 4, !tbaa !400
  %12882 = extractelement <1024 x i32> %load.buffer.i176, i32 231
  store i32 %12882, i32* %8688, align 4, !tbaa !400
  %12883 = extractelement <1024 x i32> %load.buffer.i176, i32 232
  store i32 %12883, i32* %8693, align 4, !tbaa !400
  %12884 = extractelement <1024 x i32> %load.buffer.i176, i32 233
  store i32 %12884, i32* %8698, align 4, !tbaa !400
  %12885 = extractelement <1024 x i32> %load.buffer.i176, i32 234
  store i32 %12885, i32* %8703, align 4, !tbaa !400
  %12886 = extractelement <1024 x i32> %load.buffer.i176, i32 235
  store i32 %12886, i32* %8708, align 4, !tbaa !400
  %12887 = extractelement <1024 x i32> %load.buffer.i176, i32 236
  store i32 %12887, i32* %8713, align 4, !tbaa !400
  %12888 = extractelement <1024 x i32> %load.buffer.i176, i32 237
  store i32 %12888, i32* %8718, align 4, !tbaa !400
  %12889 = extractelement <1024 x i32> %load.buffer.i176, i32 238
  store i32 %12889, i32* %8723, align 4, !tbaa !400
  %12890 = extractelement <1024 x i32> %load.buffer.i176, i32 239
  store i32 %12890, i32* %8728, align 4, !tbaa !400
  %12891 = extractelement <1024 x i32> %load.buffer.i176, i32 240
  store i32 %12891, i32* %8733, align 4, !tbaa !400
  %12892 = extractelement <1024 x i32> %load.buffer.i176, i32 241
  store i32 %12892, i32* %8738, align 4, !tbaa !400
  %12893 = extractelement <1024 x i32> %load.buffer.i176, i32 242
  store i32 %12893, i32* %8743, align 4, !tbaa !400
  %12894 = extractelement <1024 x i32> %load.buffer.i176, i32 243
  store i32 %12894, i32* %8748, align 4, !tbaa !400
  %12895 = extractelement <1024 x i32> %load.buffer.i176, i32 244
  store i32 %12895, i32* %8753, align 4, !tbaa !400
  %12896 = extractelement <1024 x i32> %load.buffer.i176, i32 245
  store i32 %12896, i32* %8758, align 4, !tbaa !400
  %12897 = extractelement <1024 x i32> %load.buffer.i176, i32 246
  store i32 %12897, i32* %8763, align 4, !tbaa !400
  %12898 = extractelement <1024 x i32> %load.buffer.i176, i32 247
  store i32 %12898, i32* %8768, align 4, !tbaa !400
  %12899 = extractelement <1024 x i32> %load.buffer.i176, i32 248
  store i32 %12899, i32* %8773, align 4, !tbaa !400
  %12900 = extractelement <1024 x i32> %load.buffer.i176, i32 249
  store i32 %12900, i32* %8778, align 4, !tbaa !400
  %12901 = extractelement <1024 x i32> %load.buffer.i176, i32 250
  store i32 %12901, i32* %8783, align 4, !tbaa !400
  %12902 = extractelement <1024 x i32> %load.buffer.i176, i32 251
  store i32 %12902, i32* %8788, align 4, !tbaa !400
  %12903 = extractelement <1024 x i32> %load.buffer.i176, i32 252
  store i32 %12903, i32* %8793, align 4, !tbaa !400
  %12904 = extractelement <1024 x i32> %load.buffer.i176, i32 253
  store i32 %12904, i32* %8798, align 4, !tbaa !400
  %12905 = extractelement <1024 x i32> %load.buffer.i176, i32 254
  store i32 %12905, i32* %8803, align 4, !tbaa !400
  %12906 = extractelement <1024 x i32> %load.buffer.i176, i32 255
  store i32 %12906, i32* %8808, align 4, !tbaa !400
  %12907 = extractelement <1024 x i32> %load.buffer.i176, i32 256
  store i32 %12907, i32* %8813, align 4, !tbaa !400
  %12908 = extractelement <1024 x i32> %load.buffer.i176, i32 257
  store i32 %12908, i32* %8818, align 4, !tbaa !400
  %12909 = extractelement <1024 x i32> %load.buffer.i176, i32 258
  store i32 %12909, i32* %8823, align 4, !tbaa !400
  %12910 = extractelement <1024 x i32> %load.buffer.i176, i32 259
  store i32 %12910, i32* %8828, align 4, !tbaa !400
  %12911 = extractelement <1024 x i32> %load.buffer.i176, i32 260
  store i32 %12911, i32* %8833, align 4, !tbaa !400
  %12912 = extractelement <1024 x i32> %load.buffer.i176, i32 261
  store i32 %12912, i32* %8838, align 4, !tbaa !400
  %12913 = extractelement <1024 x i32> %load.buffer.i176, i32 262
  store i32 %12913, i32* %8843, align 4, !tbaa !400
  %12914 = extractelement <1024 x i32> %load.buffer.i176, i32 263
  store i32 %12914, i32* %8848, align 4, !tbaa !400
  %12915 = extractelement <1024 x i32> %load.buffer.i176, i32 264
  store i32 %12915, i32* %8853, align 4, !tbaa !400
  %12916 = extractelement <1024 x i32> %load.buffer.i176, i32 265
  store i32 %12916, i32* %8858, align 4, !tbaa !400
  %12917 = extractelement <1024 x i32> %load.buffer.i176, i32 266
  store i32 %12917, i32* %8863, align 4, !tbaa !400
  %12918 = extractelement <1024 x i32> %load.buffer.i176, i32 267
  store i32 %12918, i32* %8868, align 4, !tbaa !400
  %12919 = extractelement <1024 x i32> %load.buffer.i176, i32 268
  store i32 %12919, i32* %8873, align 4, !tbaa !400
  %12920 = extractelement <1024 x i32> %load.buffer.i176, i32 269
  store i32 %12920, i32* %8878, align 4, !tbaa !400
  %12921 = extractelement <1024 x i32> %load.buffer.i176, i32 270
  store i32 %12921, i32* %8883, align 4, !tbaa !400
  %12922 = extractelement <1024 x i32> %load.buffer.i176, i32 271
  store i32 %12922, i32* %8888, align 4, !tbaa !400
  %12923 = extractelement <1024 x i32> %load.buffer.i176, i32 272
  store i32 %12923, i32* %8893, align 4, !tbaa !400
  %12924 = extractelement <1024 x i32> %load.buffer.i176, i32 273
  store i32 %12924, i32* %8898, align 4, !tbaa !400
  %12925 = extractelement <1024 x i32> %load.buffer.i176, i32 274
  store i32 %12925, i32* %8903, align 4, !tbaa !400
  %12926 = extractelement <1024 x i32> %load.buffer.i176, i32 275
  store i32 %12926, i32* %8908, align 4, !tbaa !400
  %12927 = extractelement <1024 x i32> %load.buffer.i176, i32 276
  store i32 %12927, i32* %8913, align 4, !tbaa !400
  %12928 = extractelement <1024 x i32> %load.buffer.i176, i32 277
  store i32 %12928, i32* %8918, align 4, !tbaa !400
  %12929 = extractelement <1024 x i32> %load.buffer.i176, i32 278
  store i32 %12929, i32* %8923, align 4, !tbaa !400
  %12930 = extractelement <1024 x i32> %load.buffer.i176, i32 279
  store i32 %12930, i32* %8928, align 4, !tbaa !400
  %12931 = extractelement <1024 x i32> %load.buffer.i176, i32 280
  store i32 %12931, i32* %8933, align 4, !tbaa !400
  %12932 = extractelement <1024 x i32> %load.buffer.i176, i32 281
  store i32 %12932, i32* %8938, align 4, !tbaa !400
  %12933 = extractelement <1024 x i32> %load.buffer.i176, i32 282
  store i32 %12933, i32* %8943, align 4, !tbaa !400
  %12934 = extractelement <1024 x i32> %load.buffer.i176, i32 283
  store i32 %12934, i32* %8948, align 4, !tbaa !400
  %12935 = extractelement <1024 x i32> %load.buffer.i176, i32 284
  store i32 %12935, i32* %8953, align 4, !tbaa !400
  %12936 = extractelement <1024 x i32> %load.buffer.i176, i32 285
  store i32 %12936, i32* %8958, align 4, !tbaa !400
  %12937 = extractelement <1024 x i32> %load.buffer.i176, i32 286
  store i32 %12937, i32* %8963, align 4, !tbaa !400
  %12938 = extractelement <1024 x i32> %load.buffer.i176, i32 287
  store i32 %12938, i32* %8968, align 4, !tbaa !400
  %12939 = extractelement <1024 x i32> %load.buffer.i176, i32 288
  store i32 %12939, i32* %8973, align 4, !tbaa !400
  %12940 = extractelement <1024 x i32> %load.buffer.i176, i32 289
  store i32 %12940, i32* %8978, align 4, !tbaa !400
  %12941 = extractelement <1024 x i32> %load.buffer.i176, i32 290
  store i32 %12941, i32* %8983, align 4, !tbaa !400
  %12942 = extractelement <1024 x i32> %load.buffer.i176, i32 291
  store i32 %12942, i32* %8988, align 4, !tbaa !400
  %12943 = extractelement <1024 x i32> %load.buffer.i176, i32 292
  store i32 %12943, i32* %8993, align 4, !tbaa !400
  %12944 = extractelement <1024 x i32> %load.buffer.i176, i32 293
  store i32 %12944, i32* %8998, align 4, !tbaa !400
  %12945 = extractelement <1024 x i32> %load.buffer.i176, i32 294
  store i32 %12945, i32* %9003, align 4, !tbaa !400
  %12946 = extractelement <1024 x i32> %load.buffer.i176, i32 295
  store i32 %12946, i32* %9008, align 4, !tbaa !400
  %12947 = extractelement <1024 x i32> %load.buffer.i176, i32 296
  store i32 %12947, i32* %9013, align 4, !tbaa !400
  %12948 = extractelement <1024 x i32> %load.buffer.i176, i32 297
  store i32 %12948, i32* %9018, align 4, !tbaa !400
  %12949 = extractelement <1024 x i32> %load.buffer.i176, i32 298
  store i32 %12949, i32* %9023, align 4, !tbaa !400
  %12950 = extractelement <1024 x i32> %load.buffer.i176, i32 299
  store i32 %12950, i32* %9028, align 4, !tbaa !400
  %12951 = extractelement <1024 x i32> %load.buffer.i176, i32 300
  store i32 %12951, i32* %9033, align 4, !tbaa !400
  %12952 = extractelement <1024 x i32> %load.buffer.i176, i32 301
  store i32 %12952, i32* %9038, align 4, !tbaa !400
  %12953 = extractelement <1024 x i32> %load.buffer.i176, i32 302
  store i32 %12953, i32* %9043, align 4, !tbaa !400
  %12954 = extractelement <1024 x i32> %load.buffer.i176, i32 303
  store i32 %12954, i32* %9048, align 4, !tbaa !400
  %12955 = extractelement <1024 x i32> %load.buffer.i176, i32 304
  store i32 %12955, i32* %9053, align 4, !tbaa !400
  %12956 = extractelement <1024 x i32> %load.buffer.i176, i32 305
  store i32 %12956, i32* %9058, align 4, !tbaa !400
  %12957 = extractelement <1024 x i32> %load.buffer.i176, i32 306
  store i32 %12957, i32* %9063, align 4, !tbaa !400
  %12958 = extractelement <1024 x i32> %load.buffer.i176, i32 307
  store i32 %12958, i32* %9068, align 4, !tbaa !400
  %12959 = extractelement <1024 x i32> %load.buffer.i176, i32 308
  store i32 %12959, i32* %9073, align 4, !tbaa !400
  %12960 = extractelement <1024 x i32> %load.buffer.i176, i32 309
  store i32 %12960, i32* %9078, align 4, !tbaa !400
  %12961 = extractelement <1024 x i32> %load.buffer.i176, i32 310
  store i32 %12961, i32* %9083, align 4, !tbaa !400
  %12962 = extractelement <1024 x i32> %load.buffer.i176, i32 311
  store i32 %12962, i32* %9088, align 4, !tbaa !400
  %12963 = extractelement <1024 x i32> %load.buffer.i176, i32 312
  store i32 %12963, i32* %9093, align 4, !tbaa !400
  %12964 = extractelement <1024 x i32> %load.buffer.i176, i32 313
  store i32 %12964, i32* %9098, align 4, !tbaa !400
  %12965 = extractelement <1024 x i32> %load.buffer.i176, i32 314
  store i32 %12965, i32* %9103, align 4, !tbaa !400
  %12966 = extractelement <1024 x i32> %load.buffer.i176, i32 315
  store i32 %12966, i32* %9108, align 4, !tbaa !400
  %12967 = extractelement <1024 x i32> %load.buffer.i176, i32 316
  store i32 %12967, i32* %9113, align 4, !tbaa !400
  %12968 = extractelement <1024 x i32> %load.buffer.i176, i32 317
  store i32 %12968, i32* %9118, align 4, !tbaa !400
  %12969 = extractelement <1024 x i32> %load.buffer.i176, i32 318
  store i32 %12969, i32* %9123, align 4, !tbaa !400
  %12970 = extractelement <1024 x i32> %load.buffer.i176, i32 319
  store i32 %12970, i32* %9128, align 4, !tbaa !400
  %12971 = extractelement <1024 x i32> %load.buffer.i176, i32 320
  store i32 %12971, i32* %9133, align 4, !tbaa !400
  %12972 = extractelement <1024 x i32> %load.buffer.i176, i32 321
  store i32 %12972, i32* %9138, align 4, !tbaa !400
  %12973 = extractelement <1024 x i32> %load.buffer.i176, i32 322
  store i32 %12973, i32* %9143, align 4, !tbaa !400
  %12974 = extractelement <1024 x i32> %load.buffer.i176, i32 323
  store i32 %12974, i32* %9148, align 4, !tbaa !400
  %12975 = extractelement <1024 x i32> %load.buffer.i176, i32 324
  store i32 %12975, i32* %9153, align 4, !tbaa !400
  %12976 = extractelement <1024 x i32> %load.buffer.i176, i32 325
  store i32 %12976, i32* %9158, align 4, !tbaa !400
  %12977 = extractelement <1024 x i32> %load.buffer.i176, i32 326
  store i32 %12977, i32* %9163, align 4, !tbaa !400
  %12978 = extractelement <1024 x i32> %load.buffer.i176, i32 327
  store i32 %12978, i32* %9168, align 4, !tbaa !400
  %12979 = extractelement <1024 x i32> %load.buffer.i176, i32 328
  store i32 %12979, i32* %9173, align 4, !tbaa !400
  %12980 = extractelement <1024 x i32> %load.buffer.i176, i32 329
  store i32 %12980, i32* %9178, align 4, !tbaa !400
  %12981 = extractelement <1024 x i32> %load.buffer.i176, i32 330
  store i32 %12981, i32* %9183, align 4, !tbaa !400
  %12982 = extractelement <1024 x i32> %load.buffer.i176, i32 331
  store i32 %12982, i32* %9188, align 4, !tbaa !400
  %12983 = extractelement <1024 x i32> %load.buffer.i176, i32 332
  store i32 %12983, i32* %9193, align 4, !tbaa !400
  %12984 = extractelement <1024 x i32> %load.buffer.i176, i32 333
  store i32 %12984, i32* %9198, align 4, !tbaa !400
  %12985 = extractelement <1024 x i32> %load.buffer.i176, i32 334
  store i32 %12985, i32* %9203, align 4, !tbaa !400
  %12986 = extractelement <1024 x i32> %load.buffer.i176, i32 335
  store i32 %12986, i32* %9208, align 4, !tbaa !400
  %12987 = extractelement <1024 x i32> %load.buffer.i176, i32 336
  store i32 %12987, i32* %9213, align 4, !tbaa !400
  %12988 = extractelement <1024 x i32> %load.buffer.i176, i32 337
  store i32 %12988, i32* %9218, align 4, !tbaa !400
  %12989 = extractelement <1024 x i32> %load.buffer.i176, i32 338
  store i32 %12989, i32* %9223, align 4, !tbaa !400
  %12990 = extractelement <1024 x i32> %load.buffer.i176, i32 339
  store i32 %12990, i32* %9228, align 4, !tbaa !400
  %12991 = extractelement <1024 x i32> %load.buffer.i176, i32 340
  store i32 %12991, i32* %9233, align 4, !tbaa !400
  %12992 = extractelement <1024 x i32> %load.buffer.i176, i32 341
  store i32 %12992, i32* %9238, align 4, !tbaa !400
  %12993 = extractelement <1024 x i32> %load.buffer.i176, i32 342
  store i32 %12993, i32* %9243, align 4, !tbaa !400
  %12994 = extractelement <1024 x i32> %load.buffer.i176, i32 343
  store i32 %12994, i32* %9248, align 4, !tbaa !400
  %12995 = extractelement <1024 x i32> %load.buffer.i176, i32 344
  store i32 %12995, i32* %9253, align 4, !tbaa !400
  %12996 = extractelement <1024 x i32> %load.buffer.i176, i32 345
  store i32 %12996, i32* %9258, align 4, !tbaa !400
  %12997 = extractelement <1024 x i32> %load.buffer.i176, i32 346
  store i32 %12997, i32* %9263, align 4, !tbaa !400
  %12998 = extractelement <1024 x i32> %load.buffer.i176, i32 347
  store i32 %12998, i32* %9268, align 4, !tbaa !400
  %12999 = extractelement <1024 x i32> %load.buffer.i176, i32 348
  store i32 %12999, i32* %9273, align 4, !tbaa !400
  %13000 = extractelement <1024 x i32> %load.buffer.i176, i32 349
  store i32 %13000, i32* %9278, align 4, !tbaa !400
  %13001 = extractelement <1024 x i32> %load.buffer.i176, i32 350
  store i32 %13001, i32* %9283, align 4, !tbaa !400
  %13002 = extractelement <1024 x i32> %load.buffer.i176, i32 351
  store i32 %13002, i32* %9288, align 4, !tbaa !400
  %13003 = extractelement <1024 x i32> %load.buffer.i176, i32 352
  store i32 %13003, i32* %9293, align 4, !tbaa !400
  %13004 = extractelement <1024 x i32> %load.buffer.i176, i32 353
  store i32 %13004, i32* %9298, align 4, !tbaa !400
  %13005 = extractelement <1024 x i32> %load.buffer.i176, i32 354
  store i32 %13005, i32* %9303, align 4, !tbaa !400
  %13006 = extractelement <1024 x i32> %load.buffer.i176, i32 355
  store i32 %13006, i32* %9308, align 4, !tbaa !400
  %13007 = extractelement <1024 x i32> %load.buffer.i176, i32 356
  store i32 %13007, i32* %9313, align 4, !tbaa !400
  %13008 = extractelement <1024 x i32> %load.buffer.i176, i32 357
  store i32 %13008, i32* %9318, align 4, !tbaa !400
  %13009 = extractelement <1024 x i32> %load.buffer.i176, i32 358
  store i32 %13009, i32* %9323, align 4, !tbaa !400
  %13010 = extractelement <1024 x i32> %load.buffer.i176, i32 359
  store i32 %13010, i32* %9328, align 4, !tbaa !400
  %13011 = extractelement <1024 x i32> %load.buffer.i176, i32 360
  store i32 %13011, i32* %9333, align 4, !tbaa !400
  %13012 = extractelement <1024 x i32> %load.buffer.i176, i32 361
  store i32 %13012, i32* %9338, align 4, !tbaa !400
  %13013 = extractelement <1024 x i32> %load.buffer.i176, i32 362
  store i32 %13013, i32* %9343, align 4, !tbaa !400
  %13014 = extractelement <1024 x i32> %load.buffer.i176, i32 363
  store i32 %13014, i32* %9348, align 4, !tbaa !400
  %13015 = extractelement <1024 x i32> %load.buffer.i176, i32 364
  store i32 %13015, i32* %9353, align 4, !tbaa !400
  %13016 = extractelement <1024 x i32> %load.buffer.i176, i32 365
  store i32 %13016, i32* %9358, align 4, !tbaa !400
  %13017 = extractelement <1024 x i32> %load.buffer.i176, i32 366
  store i32 %13017, i32* %9363, align 4, !tbaa !400
  %13018 = extractelement <1024 x i32> %load.buffer.i176, i32 367
  store i32 %13018, i32* %9368, align 4, !tbaa !400
  %13019 = extractelement <1024 x i32> %load.buffer.i176, i32 368
  store i32 %13019, i32* %9373, align 4, !tbaa !400
  %13020 = extractelement <1024 x i32> %load.buffer.i176, i32 369
  store i32 %13020, i32* %9378, align 4, !tbaa !400
  %13021 = extractelement <1024 x i32> %load.buffer.i176, i32 370
  store i32 %13021, i32* %9383, align 4, !tbaa !400
  %13022 = extractelement <1024 x i32> %load.buffer.i176, i32 371
  store i32 %13022, i32* %9388, align 4, !tbaa !400
  %13023 = extractelement <1024 x i32> %load.buffer.i176, i32 372
  store i32 %13023, i32* %9393, align 4, !tbaa !400
  %13024 = extractelement <1024 x i32> %load.buffer.i176, i32 373
  store i32 %13024, i32* %9398, align 4, !tbaa !400
  %13025 = extractelement <1024 x i32> %load.buffer.i176, i32 374
  store i32 %13025, i32* %9403, align 4, !tbaa !400
  %13026 = extractelement <1024 x i32> %load.buffer.i176, i32 375
  store i32 %13026, i32* %9408, align 4, !tbaa !400
  %13027 = extractelement <1024 x i32> %load.buffer.i176, i32 376
  store i32 %13027, i32* %9413, align 4, !tbaa !400
  %13028 = extractelement <1024 x i32> %load.buffer.i176, i32 377
  store i32 %13028, i32* %9418, align 4, !tbaa !400
  %13029 = extractelement <1024 x i32> %load.buffer.i176, i32 378
  store i32 %13029, i32* %9423, align 4, !tbaa !400
  %13030 = extractelement <1024 x i32> %load.buffer.i176, i32 379
  store i32 %13030, i32* %9428, align 4, !tbaa !400
  %13031 = extractelement <1024 x i32> %load.buffer.i176, i32 380
  store i32 %13031, i32* %9433, align 4, !tbaa !400
  %13032 = extractelement <1024 x i32> %load.buffer.i176, i32 381
  store i32 %13032, i32* %9438, align 4, !tbaa !400
  %13033 = extractelement <1024 x i32> %load.buffer.i176, i32 382
  store i32 %13033, i32* %9443, align 4, !tbaa !400
  %13034 = extractelement <1024 x i32> %load.buffer.i176, i32 383
  store i32 %13034, i32* %9448, align 4, !tbaa !400
  %13035 = extractelement <1024 x i32> %load.buffer.i176, i32 384
  store i32 %13035, i32* %9453, align 4, !tbaa !400
  %13036 = extractelement <1024 x i32> %load.buffer.i176, i32 385
  store i32 %13036, i32* %9458, align 4, !tbaa !400
  %13037 = extractelement <1024 x i32> %load.buffer.i176, i32 386
  store i32 %13037, i32* %9463, align 4, !tbaa !400
  %13038 = extractelement <1024 x i32> %load.buffer.i176, i32 387
  store i32 %13038, i32* %9468, align 4, !tbaa !400
  %13039 = extractelement <1024 x i32> %load.buffer.i176, i32 388
  store i32 %13039, i32* %9473, align 4, !tbaa !400
  %13040 = extractelement <1024 x i32> %load.buffer.i176, i32 389
  store i32 %13040, i32* %9478, align 4, !tbaa !400
  %13041 = extractelement <1024 x i32> %load.buffer.i176, i32 390
  store i32 %13041, i32* %9483, align 4, !tbaa !400
  %13042 = extractelement <1024 x i32> %load.buffer.i176, i32 391
  store i32 %13042, i32* %9488, align 4, !tbaa !400
  %13043 = extractelement <1024 x i32> %load.buffer.i176, i32 392
  store i32 %13043, i32* %9493, align 4, !tbaa !400
  %13044 = extractelement <1024 x i32> %load.buffer.i176, i32 393
  store i32 %13044, i32* %9498, align 4, !tbaa !400
  %13045 = extractelement <1024 x i32> %load.buffer.i176, i32 394
  store i32 %13045, i32* %9503, align 4, !tbaa !400
  %13046 = extractelement <1024 x i32> %load.buffer.i176, i32 395
  store i32 %13046, i32* %9508, align 4, !tbaa !400
  %13047 = extractelement <1024 x i32> %load.buffer.i176, i32 396
  store i32 %13047, i32* %9513, align 4, !tbaa !400
  %13048 = extractelement <1024 x i32> %load.buffer.i176, i32 397
  store i32 %13048, i32* %9518, align 4, !tbaa !400
  %13049 = extractelement <1024 x i32> %load.buffer.i176, i32 398
  store i32 %13049, i32* %9523, align 4, !tbaa !400
  %13050 = extractelement <1024 x i32> %load.buffer.i176, i32 399
  store i32 %13050, i32* %9528, align 4, !tbaa !400
  %13051 = extractelement <1024 x i32> %load.buffer.i176, i32 400
  store i32 %13051, i32* %9533, align 4, !tbaa !400
  %13052 = extractelement <1024 x i32> %load.buffer.i176, i32 401
  store i32 %13052, i32* %9538, align 4, !tbaa !400
  %13053 = extractelement <1024 x i32> %load.buffer.i176, i32 402
  store i32 %13053, i32* %9543, align 4, !tbaa !400
  %13054 = extractelement <1024 x i32> %load.buffer.i176, i32 403
  store i32 %13054, i32* %9548, align 4, !tbaa !400
  %13055 = extractelement <1024 x i32> %load.buffer.i176, i32 404
  store i32 %13055, i32* %9553, align 4, !tbaa !400
  %13056 = extractelement <1024 x i32> %load.buffer.i176, i32 405
  store i32 %13056, i32* %9558, align 4, !tbaa !400
  %13057 = extractelement <1024 x i32> %load.buffer.i176, i32 406
  store i32 %13057, i32* %9563, align 4, !tbaa !400
  %13058 = extractelement <1024 x i32> %load.buffer.i176, i32 407
  store i32 %13058, i32* %9568, align 4, !tbaa !400
  %13059 = extractelement <1024 x i32> %load.buffer.i176, i32 408
  store i32 %13059, i32* %9573, align 4, !tbaa !400
  %13060 = extractelement <1024 x i32> %load.buffer.i176, i32 409
  store i32 %13060, i32* %9578, align 4, !tbaa !400
  %13061 = extractelement <1024 x i32> %load.buffer.i176, i32 410
  store i32 %13061, i32* %9583, align 4, !tbaa !400
  %13062 = extractelement <1024 x i32> %load.buffer.i176, i32 411
  store i32 %13062, i32* %9588, align 4, !tbaa !400
  %13063 = extractelement <1024 x i32> %load.buffer.i176, i32 412
  store i32 %13063, i32* %9593, align 4, !tbaa !400
  %13064 = extractelement <1024 x i32> %load.buffer.i176, i32 413
  store i32 %13064, i32* %9598, align 4, !tbaa !400
  %13065 = extractelement <1024 x i32> %load.buffer.i176, i32 414
  store i32 %13065, i32* %9603, align 4, !tbaa !400
  %13066 = extractelement <1024 x i32> %load.buffer.i176, i32 415
  store i32 %13066, i32* %9608, align 4, !tbaa !400
  %13067 = extractelement <1024 x i32> %load.buffer.i176, i32 416
  store i32 %13067, i32* %9613, align 4, !tbaa !400
  %13068 = extractelement <1024 x i32> %load.buffer.i176, i32 417
  store i32 %13068, i32* %9618, align 4, !tbaa !400
  %13069 = extractelement <1024 x i32> %load.buffer.i176, i32 418
  store i32 %13069, i32* %9623, align 4, !tbaa !400
  %13070 = extractelement <1024 x i32> %load.buffer.i176, i32 419
  store i32 %13070, i32* %9628, align 4, !tbaa !400
  %13071 = extractelement <1024 x i32> %load.buffer.i176, i32 420
  store i32 %13071, i32* %9633, align 4, !tbaa !400
  %13072 = extractelement <1024 x i32> %load.buffer.i176, i32 421
  store i32 %13072, i32* %9638, align 4, !tbaa !400
  %13073 = extractelement <1024 x i32> %load.buffer.i176, i32 422
  store i32 %13073, i32* %9643, align 4, !tbaa !400
  %13074 = extractelement <1024 x i32> %load.buffer.i176, i32 423
  store i32 %13074, i32* %9648, align 4, !tbaa !400
  %13075 = extractelement <1024 x i32> %load.buffer.i176, i32 424
  store i32 %13075, i32* %9653, align 4, !tbaa !400
  %13076 = extractelement <1024 x i32> %load.buffer.i176, i32 425
  store i32 %13076, i32* %9658, align 4, !tbaa !400
  %13077 = extractelement <1024 x i32> %load.buffer.i176, i32 426
  store i32 %13077, i32* %9663, align 4, !tbaa !400
  %13078 = extractelement <1024 x i32> %load.buffer.i176, i32 427
  store i32 %13078, i32* %9668, align 4, !tbaa !400
  %13079 = extractelement <1024 x i32> %load.buffer.i176, i32 428
  store i32 %13079, i32* %9673, align 4, !tbaa !400
  %13080 = extractelement <1024 x i32> %load.buffer.i176, i32 429
  store i32 %13080, i32* %9678, align 4, !tbaa !400
  %13081 = extractelement <1024 x i32> %load.buffer.i176, i32 430
  store i32 %13081, i32* %9683, align 4, !tbaa !400
  %13082 = extractelement <1024 x i32> %load.buffer.i176, i32 431
  store i32 %13082, i32* %9688, align 4, !tbaa !400
  %13083 = extractelement <1024 x i32> %load.buffer.i176, i32 432
  store i32 %13083, i32* %9693, align 4, !tbaa !400
  %13084 = extractelement <1024 x i32> %load.buffer.i176, i32 433
  store i32 %13084, i32* %9698, align 4, !tbaa !400
  %13085 = extractelement <1024 x i32> %load.buffer.i176, i32 434
  store i32 %13085, i32* %9703, align 4, !tbaa !400
  %13086 = extractelement <1024 x i32> %load.buffer.i176, i32 435
  store i32 %13086, i32* %9708, align 4, !tbaa !400
  %13087 = extractelement <1024 x i32> %load.buffer.i176, i32 436
  store i32 %13087, i32* %9713, align 4, !tbaa !400
  %13088 = extractelement <1024 x i32> %load.buffer.i176, i32 437
  store i32 %13088, i32* %9718, align 4, !tbaa !400
  %13089 = extractelement <1024 x i32> %load.buffer.i176, i32 438
  store i32 %13089, i32* %9723, align 4, !tbaa !400
  %13090 = extractelement <1024 x i32> %load.buffer.i176, i32 439
  store i32 %13090, i32* %9728, align 4, !tbaa !400
  %13091 = extractelement <1024 x i32> %load.buffer.i176, i32 440
  store i32 %13091, i32* %9733, align 4, !tbaa !400
  %13092 = extractelement <1024 x i32> %load.buffer.i176, i32 441
  store i32 %13092, i32* %9738, align 4, !tbaa !400
  %13093 = extractelement <1024 x i32> %load.buffer.i176, i32 442
  store i32 %13093, i32* %9743, align 4, !tbaa !400
  %13094 = extractelement <1024 x i32> %load.buffer.i176, i32 443
  store i32 %13094, i32* %9748, align 4, !tbaa !400
  %13095 = extractelement <1024 x i32> %load.buffer.i176, i32 444
  store i32 %13095, i32* %9753, align 4, !tbaa !400
  %13096 = extractelement <1024 x i32> %load.buffer.i176, i32 445
  store i32 %13096, i32* %9758, align 4, !tbaa !400
  %13097 = extractelement <1024 x i32> %load.buffer.i176, i32 446
  store i32 %13097, i32* %9763, align 4, !tbaa !400
  %13098 = extractelement <1024 x i32> %load.buffer.i176, i32 447
  store i32 %13098, i32* %9768, align 4, !tbaa !400
  %13099 = extractelement <1024 x i32> %load.buffer.i176, i32 448
  store i32 %13099, i32* %9773, align 4, !tbaa !400
  %13100 = extractelement <1024 x i32> %load.buffer.i176, i32 449
  store i32 %13100, i32* %9778, align 4, !tbaa !400
  %13101 = extractelement <1024 x i32> %load.buffer.i176, i32 450
  store i32 %13101, i32* %9783, align 4, !tbaa !400
  %13102 = extractelement <1024 x i32> %load.buffer.i176, i32 451
  store i32 %13102, i32* %9788, align 4, !tbaa !400
  %13103 = extractelement <1024 x i32> %load.buffer.i176, i32 452
  store i32 %13103, i32* %9793, align 4, !tbaa !400
  %13104 = extractelement <1024 x i32> %load.buffer.i176, i32 453
  store i32 %13104, i32* %9798, align 4, !tbaa !400
  %13105 = extractelement <1024 x i32> %load.buffer.i176, i32 454
  store i32 %13105, i32* %9803, align 4, !tbaa !400
  %13106 = extractelement <1024 x i32> %load.buffer.i176, i32 455
  store i32 %13106, i32* %9808, align 4, !tbaa !400
  %13107 = extractelement <1024 x i32> %load.buffer.i176, i32 456
  store i32 %13107, i32* %9813, align 4, !tbaa !400
  %13108 = extractelement <1024 x i32> %load.buffer.i176, i32 457
  store i32 %13108, i32* %9818, align 4, !tbaa !400
  %13109 = extractelement <1024 x i32> %load.buffer.i176, i32 458
  store i32 %13109, i32* %9823, align 4, !tbaa !400
  %13110 = extractelement <1024 x i32> %load.buffer.i176, i32 459
  store i32 %13110, i32* %9828, align 4, !tbaa !400
  %13111 = extractelement <1024 x i32> %load.buffer.i176, i32 460
  store i32 %13111, i32* %9833, align 4, !tbaa !400
  %13112 = extractelement <1024 x i32> %load.buffer.i176, i32 461
  store i32 %13112, i32* %9838, align 4, !tbaa !400
  %13113 = extractelement <1024 x i32> %load.buffer.i176, i32 462
  store i32 %13113, i32* %9843, align 4, !tbaa !400
  %13114 = extractelement <1024 x i32> %load.buffer.i176, i32 463
  store i32 %13114, i32* %9848, align 4, !tbaa !400
  %13115 = extractelement <1024 x i32> %load.buffer.i176, i32 464
  store i32 %13115, i32* %9853, align 4, !tbaa !400
  %13116 = extractelement <1024 x i32> %load.buffer.i176, i32 465
  store i32 %13116, i32* %9858, align 4, !tbaa !400
  %13117 = extractelement <1024 x i32> %load.buffer.i176, i32 466
  store i32 %13117, i32* %9863, align 4, !tbaa !400
  %13118 = extractelement <1024 x i32> %load.buffer.i176, i32 467
  store i32 %13118, i32* %9868, align 4, !tbaa !400
  %13119 = extractelement <1024 x i32> %load.buffer.i176, i32 468
  store i32 %13119, i32* %9873, align 4, !tbaa !400
  %13120 = extractelement <1024 x i32> %load.buffer.i176, i32 469
  store i32 %13120, i32* %9878, align 4, !tbaa !400
  %13121 = extractelement <1024 x i32> %load.buffer.i176, i32 470
  store i32 %13121, i32* %9883, align 4, !tbaa !400
  %13122 = extractelement <1024 x i32> %load.buffer.i176, i32 471
  store i32 %13122, i32* %9888, align 4, !tbaa !400
  %13123 = extractelement <1024 x i32> %load.buffer.i176, i32 472
  store i32 %13123, i32* %9893, align 4, !tbaa !400
  %13124 = extractelement <1024 x i32> %load.buffer.i176, i32 473
  store i32 %13124, i32* %9898, align 4, !tbaa !400
  %13125 = extractelement <1024 x i32> %load.buffer.i176, i32 474
  store i32 %13125, i32* %9903, align 4, !tbaa !400
  %13126 = extractelement <1024 x i32> %load.buffer.i176, i32 475
  store i32 %13126, i32* %9908, align 4, !tbaa !400
  %13127 = extractelement <1024 x i32> %load.buffer.i176, i32 476
  store i32 %13127, i32* %9913, align 4, !tbaa !400
  %13128 = extractelement <1024 x i32> %load.buffer.i176, i32 477
  store i32 %13128, i32* %9918, align 4, !tbaa !400
  %13129 = extractelement <1024 x i32> %load.buffer.i176, i32 478
  store i32 %13129, i32* %9923, align 4, !tbaa !400
  %13130 = extractelement <1024 x i32> %load.buffer.i176, i32 479
  store i32 %13130, i32* %9928, align 4, !tbaa !400
  %13131 = extractelement <1024 x i32> %load.buffer.i176, i32 480
  store i32 %13131, i32* %9933, align 4, !tbaa !400
  %13132 = extractelement <1024 x i32> %load.buffer.i176, i32 481
  store i32 %13132, i32* %9938, align 4, !tbaa !400
  %13133 = extractelement <1024 x i32> %load.buffer.i176, i32 482
  store i32 %13133, i32* %9943, align 4, !tbaa !400
  %13134 = extractelement <1024 x i32> %load.buffer.i176, i32 483
  store i32 %13134, i32* %9948, align 4, !tbaa !400
  %13135 = extractelement <1024 x i32> %load.buffer.i176, i32 484
  store i32 %13135, i32* %9953, align 4, !tbaa !400
  %13136 = extractelement <1024 x i32> %load.buffer.i176, i32 485
  store i32 %13136, i32* %9958, align 4, !tbaa !400
  %13137 = extractelement <1024 x i32> %load.buffer.i176, i32 486
  store i32 %13137, i32* %9963, align 4, !tbaa !400
  %13138 = extractelement <1024 x i32> %load.buffer.i176, i32 487
  store i32 %13138, i32* %9968, align 4, !tbaa !400
  %13139 = extractelement <1024 x i32> %load.buffer.i176, i32 488
  store i32 %13139, i32* %9973, align 4, !tbaa !400
  %13140 = extractelement <1024 x i32> %load.buffer.i176, i32 489
  store i32 %13140, i32* %9978, align 4, !tbaa !400
  %13141 = extractelement <1024 x i32> %load.buffer.i176, i32 490
  store i32 %13141, i32* %9983, align 4, !tbaa !400
  %13142 = extractelement <1024 x i32> %load.buffer.i176, i32 491
  store i32 %13142, i32* %9988, align 4, !tbaa !400
  %13143 = extractelement <1024 x i32> %load.buffer.i176, i32 492
  store i32 %13143, i32* %9993, align 4, !tbaa !400
  %13144 = extractelement <1024 x i32> %load.buffer.i176, i32 493
  store i32 %13144, i32* %9998, align 4, !tbaa !400
  %13145 = extractelement <1024 x i32> %load.buffer.i176, i32 494
  store i32 %13145, i32* %10003, align 4, !tbaa !400
  %13146 = extractelement <1024 x i32> %load.buffer.i176, i32 495
  store i32 %13146, i32* %10008, align 4, !tbaa !400
  %13147 = extractelement <1024 x i32> %load.buffer.i176, i32 496
  store i32 %13147, i32* %10013, align 4, !tbaa !400
  %13148 = extractelement <1024 x i32> %load.buffer.i176, i32 497
  store i32 %13148, i32* %10018, align 4, !tbaa !400
  %13149 = extractelement <1024 x i32> %load.buffer.i176, i32 498
  store i32 %13149, i32* %10023, align 4, !tbaa !400
  %13150 = extractelement <1024 x i32> %load.buffer.i176, i32 499
  store i32 %13150, i32* %10028, align 4, !tbaa !400
  %13151 = extractelement <1024 x i32> %load.buffer.i176, i32 500
  store i32 %13151, i32* %10033, align 4, !tbaa !400
  %13152 = extractelement <1024 x i32> %load.buffer.i176, i32 501
  store i32 %13152, i32* %10038, align 4, !tbaa !400
  %13153 = extractelement <1024 x i32> %load.buffer.i176, i32 502
  store i32 %13153, i32* %10043, align 4, !tbaa !400
  %13154 = extractelement <1024 x i32> %load.buffer.i176, i32 503
  store i32 %13154, i32* %10048, align 4, !tbaa !400
  %13155 = extractelement <1024 x i32> %load.buffer.i176, i32 504
  store i32 %13155, i32* %10053, align 4, !tbaa !400
  %13156 = extractelement <1024 x i32> %load.buffer.i176, i32 505
  store i32 %13156, i32* %10058, align 4, !tbaa !400
  %13157 = extractelement <1024 x i32> %load.buffer.i176, i32 506
  store i32 %13157, i32* %10063, align 4, !tbaa !400
  %13158 = extractelement <1024 x i32> %load.buffer.i176, i32 507
  store i32 %13158, i32* %10068, align 4, !tbaa !400
  %13159 = extractelement <1024 x i32> %load.buffer.i176, i32 508
  store i32 %13159, i32* %10073, align 4, !tbaa !400
  %13160 = extractelement <1024 x i32> %load.buffer.i176, i32 509
  store i32 %13160, i32* %10078, align 4, !tbaa !400
  %13161 = extractelement <1024 x i32> %load.buffer.i176, i32 510
  store i32 %13161, i32* %10083, align 4, !tbaa !400
  %13162 = extractelement <1024 x i32> %load.buffer.i176, i32 511
  store i32 %13162, i32* %10088, align 4, !tbaa !400
  %13163 = extractelement <1024 x i32> %load.buffer.i176, i32 512
  store i32 %13163, i32* %10093, align 4, !tbaa !400
  %13164 = extractelement <1024 x i32> %load.buffer.i176, i32 513
  store i32 %13164, i32* %10098, align 4, !tbaa !400
  %13165 = extractelement <1024 x i32> %load.buffer.i176, i32 514
  store i32 %13165, i32* %10103, align 4, !tbaa !400
  %13166 = extractelement <1024 x i32> %load.buffer.i176, i32 515
  store i32 %13166, i32* %10108, align 4, !tbaa !400
  %13167 = extractelement <1024 x i32> %load.buffer.i176, i32 516
  store i32 %13167, i32* %10113, align 4, !tbaa !400
  %13168 = extractelement <1024 x i32> %load.buffer.i176, i32 517
  store i32 %13168, i32* %10118, align 4, !tbaa !400
  %13169 = extractelement <1024 x i32> %load.buffer.i176, i32 518
  store i32 %13169, i32* %10123, align 4, !tbaa !400
  %13170 = extractelement <1024 x i32> %load.buffer.i176, i32 519
  store i32 %13170, i32* %10128, align 4, !tbaa !400
  %13171 = extractelement <1024 x i32> %load.buffer.i176, i32 520
  store i32 %13171, i32* %10133, align 4, !tbaa !400
  %13172 = extractelement <1024 x i32> %load.buffer.i176, i32 521
  store i32 %13172, i32* %10138, align 4, !tbaa !400
  %13173 = extractelement <1024 x i32> %load.buffer.i176, i32 522
  store i32 %13173, i32* %10143, align 4, !tbaa !400
  %13174 = extractelement <1024 x i32> %load.buffer.i176, i32 523
  store i32 %13174, i32* %10148, align 4, !tbaa !400
  %13175 = extractelement <1024 x i32> %load.buffer.i176, i32 524
  store i32 %13175, i32* %10153, align 4, !tbaa !400
  %13176 = extractelement <1024 x i32> %load.buffer.i176, i32 525
  store i32 %13176, i32* %10158, align 4, !tbaa !400
  %13177 = extractelement <1024 x i32> %load.buffer.i176, i32 526
  store i32 %13177, i32* %10163, align 4, !tbaa !400
  %13178 = extractelement <1024 x i32> %load.buffer.i176, i32 527
  store i32 %13178, i32* %10168, align 4, !tbaa !400
  %13179 = extractelement <1024 x i32> %load.buffer.i176, i32 528
  store i32 %13179, i32* %10173, align 4, !tbaa !400
  %13180 = extractelement <1024 x i32> %load.buffer.i176, i32 529
  store i32 %13180, i32* %10178, align 4, !tbaa !400
  %13181 = extractelement <1024 x i32> %load.buffer.i176, i32 530
  store i32 %13181, i32* %10183, align 4, !tbaa !400
  %13182 = extractelement <1024 x i32> %load.buffer.i176, i32 531
  store i32 %13182, i32* %10188, align 4, !tbaa !400
  %13183 = extractelement <1024 x i32> %load.buffer.i176, i32 532
  store i32 %13183, i32* %10193, align 4, !tbaa !400
  %13184 = extractelement <1024 x i32> %load.buffer.i176, i32 533
  store i32 %13184, i32* %10198, align 4, !tbaa !400
  %13185 = extractelement <1024 x i32> %load.buffer.i176, i32 534
  store i32 %13185, i32* %10203, align 4, !tbaa !400
  %13186 = extractelement <1024 x i32> %load.buffer.i176, i32 535
  store i32 %13186, i32* %10208, align 4, !tbaa !400
  %13187 = extractelement <1024 x i32> %load.buffer.i176, i32 536
  store i32 %13187, i32* %10213, align 4, !tbaa !400
  %13188 = extractelement <1024 x i32> %load.buffer.i176, i32 537
  store i32 %13188, i32* %10218, align 4, !tbaa !400
  %13189 = extractelement <1024 x i32> %load.buffer.i176, i32 538
  store i32 %13189, i32* %10223, align 4, !tbaa !400
  %13190 = extractelement <1024 x i32> %load.buffer.i176, i32 539
  store i32 %13190, i32* %10228, align 4, !tbaa !400
  %13191 = extractelement <1024 x i32> %load.buffer.i176, i32 540
  store i32 %13191, i32* %10233, align 4, !tbaa !400
  %13192 = extractelement <1024 x i32> %load.buffer.i176, i32 541
  store i32 %13192, i32* %10238, align 4, !tbaa !400
  %13193 = extractelement <1024 x i32> %load.buffer.i176, i32 542
  store i32 %13193, i32* %10243, align 4, !tbaa !400
  %13194 = extractelement <1024 x i32> %load.buffer.i176, i32 543
  store i32 %13194, i32* %10248, align 4, !tbaa !400
  %13195 = extractelement <1024 x i32> %load.buffer.i176, i32 544
  store i32 %13195, i32* %10253, align 4, !tbaa !400
  %13196 = extractelement <1024 x i32> %load.buffer.i176, i32 545
  store i32 %13196, i32* %10258, align 4, !tbaa !400
  %13197 = extractelement <1024 x i32> %load.buffer.i176, i32 546
  store i32 %13197, i32* %10263, align 4, !tbaa !400
  %13198 = extractelement <1024 x i32> %load.buffer.i176, i32 547
  store i32 %13198, i32* %10268, align 4, !tbaa !400
  %13199 = extractelement <1024 x i32> %load.buffer.i176, i32 548
  store i32 %13199, i32* %10273, align 4, !tbaa !400
  %13200 = extractelement <1024 x i32> %load.buffer.i176, i32 549
  store i32 %13200, i32* %10278, align 4, !tbaa !400
  %13201 = extractelement <1024 x i32> %load.buffer.i176, i32 550
  store i32 %13201, i32* %10283, align 4, !tbaa !400
  %13202 = extractelement <1024 x i32> %load.buffer.i176, i32 551
  store i32 %13202, i32* %10288, align 4, !tbaa !400
  %13203 = extractelement <1024 x i32> %load.buffer.i176, i32 552
  store i32 %13203, i32* %10293, align 4, !tbaa !400
  %13204 = extractelement <1024 x i32> %load.buffer.i176, i32 553
  store i32 %13204, i32* %10298, align 4, !tbaa !400
  %13205 = extractelement <1024 x i32> %load.buffer.i176, i32 554
  store i32 %13205, i32* %10303, align 4, !tbaa !400
  %13206 = extractelement <1024 x i32> %load.buffer.i176, i32 555
  store i32 %13206, i32* %10308, align 4, !tbaa !400
  %13207 = extractelement <1024 x i32> %load.buffer.i176, i32 556
  store i32 %13207, i32* %10313, align 4, !tbaa !400
  %13208 = extractelement <1024 x i32> %load.buffer.i176, i32 557
  store i32 %13208, i32* %10318, align 4, !tbaa !400
  %13209 = extractelement <1024 x i32> %load.buffer.i176, i32 558
  store i32 %13209, i32* %10323, align 4, !tbaa !400
  %13210 = extractelement <1024 x i32> %load.buffer.i176, i32 559
  store i32 %13210, i32* %10328, align 4, !tbaa !400
  %13211 = extractelement <1024 x i32> %load.buffer.i176, i32 560
  store i32 %13211, i32* %10333, align 4, !tbaa !400
  %13212 = extractelement <1024 x i32> %load.buffer.i176, i32 561
  store i32 %13212, i32* %10338, align 4, !tbaa !400
  %13213 = extractelement <1024 x i32> %load.buffer.i176, i32 562
  store i32 %13213, i32* %10343, align 4, !tbaa !400
  %13214 = extractelement <1024 x i32> %load.buffer.i176, i32 563
  store i32 %13214, i32* %10348, align 4, !tbaa !400
  %13215 = extractelement <1024 x i32> %load.buffer.i176, i32 564
  store i32 %13215, i32* %10353, align 4, !tbaa !400
  %13216 = extractelement <1024 x i32> %load.buffer.i176, i32 565
  store i32 %13216, i32* %10358, align 4, !tbaa !400
  %13217 = extractelement <1024 x i32> %load.buffer.i176, i32 566
  store i32 %13217, i32* %10363, align 4, !tbaa !400
  %13218 = extractelement <1024 x i32> %load.buffer.i176, i32 567
  store i32 %13218, i32* %10368, align 4, !tbaa !400
  %13219 = extractelement <1024 x i32> %load.buffer.i176, i32 568
  store i32 %13219, i32* %10373, align 4, !tbaa !400
  %13220 = extractelement <1024 x i32> %load.buffer.i176, i32 569
  store i32 %13220, i32* %10378, align 4, !tbaa !400
  %13221 = extractelement <1024 x i32> %load.buffer.i176, i32 570
  store i32 %13221, i32* %10383, align 4, !tbaa !400
  %13222 = extractelement <1024 x i32> %load.buffer.i176, i32 571
  store i32 %13222, i32* %10388, align 4, !tbaa !400
  %13223 = extractelement <1024 x i32> %load.buffer.i176, i32 572
  store i32 %13223, i32* %10393, align 4, !tbaa !400
  %13224 = extractelement <1024 x i32> %load.buffer.i176, i32 573
  store i32 %13224, i32* %10398, align 4, !tbaa !400
  %13225 = extractelement <1024 x i32> %load.buffer.i176, i32 574
  store i32 %13225, i32* %10403, align 4, !tbaa !400
  %13226 = extractelement <1024 x i32> %load.buffer.i176, i32 575
  store i32 %13226, i32* %10408, align 4, !tbaa !400
  %13227 = extractelement <1024 x i32> %load.buffer.i176, i32 576
  store i32 %13227, i32* %10413, align 4, !tbaa !400
  %13228 = extractelement <1024 x i32> %load.buffer.i176, i32 577
  store i32 %13228, i32* %10418, align 4, !tbaa !400
  %13229 = extractelement <1024 x i32> %load.buffer.i176, i32 578
  store i32 %13229, i32* %10423, align 4, !tbaa !400
  %13230 = extractelement <1024 x i32> %load.buffer.i176, i32 579
  store i32 %13230, i32* %10428, align 4, !tbaa !400
  %13231 = extractelement <1024 x i32> %load.buffer.i176, i32 580
  store i32 %13231, i32* %10433, align 4, !tbaa !400
  %13232 = extractelement <1024 x i32> %load.buffer.i176, i32 581
  store i32 %13232, i32* %10438, align 4, !tbaa !400
  %13233 = extractelement <1024 x i32> %load.buffer.i176, i32 582
  store i32 %13233, i32* %10443, align 4, !tbaa !400
  %13234 = extractelement <1024 x i32> %load.buffer.i176, i32 583
  store i32 %13234, i32* %10448, align 4, !tbaa !400
  %13235 = extractelement <1024 x i32> %load.buffer.i176, i32 584
  store i32 %13235, i32* %10453, align 4, !tbaa !400
  %13236 = extractelement <1024 x i32> %load.buffer.i176, i32 585
  store i32 %13236, i32* %10458, align 4, !tbaa !400
  %13237 = extractelement <1024 x i32> %load.buffer.i176, i32 586
  store i32 %13237, i32* %10463, align 4, !tbaa !400
  %13238 = extractelement <1024 x i32> %load.buffer.i176, i32 587
  store i32 %13238, i32* %10468, align 4, !tbaa !400
  %13239 = extractelement <1024 x i32> %load.buffer.i176, i32 588
  store i32 %13239, i32* %10473, align 4, !tbaa !400
  %13240 = extractelement <1024 x i32> %load.buffer.i176, i32 589
  store i32 %13240, i32* %10478, align 4, !tbaa !400
  %13241 = extractelement <1024 x i32> %load.buffer.i176, i32 590
  store i32 %13241, i32* %10483, align 4, !tbaa !400
  %13242 = extractelement <1024 x i32> %load.buffer.i176, i32 591
  store i32 %13242, i32* %10488, align 4, !tbaa !400
  %13243 = extractelement <1024 x i32> %load.buffer.i176, i32 592
  store i32 %13243, i32* %10493, align 4, !tbaa !400
  %13244 = extractelement <1024 x i32> %load.buffer.i176, i32 593
  store i32 %13244, i32* %10498, align 4, !tbaa !400
  %13245 = extractelement <1024 x i32> %load.buffer.i176, i32 594
  store i32 %13245, i32* %10503, align 4, !tbaa !400
  %13246 = extractelement <1024 x i32> %load.buffer.i176, i32 595
  store i32 %13246, i32* %10508, align 4, !tbaa !400
  %13247 = extractelement <1024 x i32> %load.buffer.i176, i32 596
  store i32 %13247, i32* %10513, align 4, !tbaa !400
  %13248 = extractelement <1024 x i32> %load.buffer.i176, i32 597
  store i32 %13248, i32* %10518, align 4, !tbaa !400
  %13249 = extractelement <1024 x i32> %load.buffer.i176, i32 598
  store i32 %13249, i32* %10523, align 4, !tbaa !400
  %13250 = extractelement <1024 x i32> %load.buffer.i176, i32 599
  store i32 %13250, i32* %10528, align 4, !tbaa !400
  %13251 = extractelement <1024 x i32> %load.buffer.i176, i32 600
  store i32 %13251, i32* %10533, align 4, !tbaa !400
  %13252 = extractelement <1024 x i32> %load.buffer.i176, i32 601
  store i32 %13252, i32* %10538, align 4, !tbaa !400
  %13253 = extractelement <1024 x i32> %load.buffer.i176, i32 602
  store i32 %13253, i32* %10543, align 4, !tbaa !400
  %13254 = extractelement <1024 x i32> %load.buffer.i176, i32 603
  store i32 %13254, i32* %10548, align 4, !tbaa !400
  %13255 = extractelement <1024 x i32> %load.buffer.i176, i32 604
  store i32 %13255, i32* %10553, align 4, !tbaa !400
  %13256 = extractelement <1024 x i32> %load.buffer.i176, i32 605
  store i32 %13256, i32* %10558, align 4, !tbaa !400
  %13257 = extractelement <1024 x i32> %load.buffer.i176, i32 606
  store i32 %13257, i32* %10563, align 4, !tbaa !400
  %13258 = extractelement <1024 x i32> %load.buffer.i176, i32 607
  store i32 %13258, i32* %10568, align 4, !tbaa !400
  %13259 = extractelement <1024 x i32> %load.buffer.i176, i32 608
  store i32 %13259, i32* %10573, align 4, !tbaa !400
  %13260 = extractelement <1024 x i32> %load.buffer.i176, i32 609
  store i32 %13260, i32* %10578, align 4, !tbaa !400
  %13261 = extractelement <1024 x i32> %load.buffer.i176, i32 610
  store i32 %13261, i32* %10583, align 4, !tbaa !400
  %13262 = extractelement <1024 x i32> %load.buffer.i176, i32 611
  store i32 %13262, i32* %10588, align 4, !tbaa !400
  %13263 = extractelement <1024 x i32> %load.buffer.i176, i32 612
  store i32 %13263, i32* %10593, align 4, !tbaa !400
  %13264 = extractelement <1024 x i32> %load.buffer.i176, i32 613
  store i32 %13264, i32* %10598, align 4, !tbaa !400
  %13265 = extractelement <1024 x i32> %load.buffer.i176, i32 614
  store i32 %13265, i32* %10603, align 4, !tbaa !400
  %13266 = extractelement <1024 x i32> %load.buffer.i176, i32 615
  store i32 %13266, i32* %10608, align 4, !tbaa !400
  %13267 = extractelement <1024 x i32> %load.buffer.i176, i32 616
  store i32 %13267, i32* %10613, align 4, !tbaa !400
  %13268 = extractelement <1024 x i32> %load.buffer.i176, i32 617
  store i32 %13268, i32* %10618, align 4, !tbaa !400
  %13269 = extractelement <1024 x i32> %load.buffer.i176, i32 618
  store i32 %13269, i32* %10623, align 4, !tbaa !400
  %13270 = extractelement <1024 x i32> %load.buffer.i176, i32 619
  store i32 %13270, i32* %10628, align 4, !tbaa !400
  %13271 = extractelement <1024 x i32> %load.buffer.i176, i32 620
  store i32 %13271, i32* %10633, align 4, !tbaa !400
  %13272 = extractelement <1024 x i32> %load.buffer.i176, i32 621
  store i32 %13272, i32* %10638, align 4, !tbaa !400
  %13273 = extractelement <1024 x i32> %load.buffer.i176, i32 622
  store i32 %13273, i32* %10643, align 4, !tbaa !400
  %13274 = extractelement <1024 x i32> %load.buffer.i176, i32 623
  store i32 %13274, i32* %10648, align 4, !tbaa !400
  %13275 = extractelement <1024 x i32> %load.buffer.i176, i32 624
  store i32 %13275, i32* %10653, align 4, !tbaa !400
  %13276 = extractelement <1024 x i32> %load.buffer.i176, i32 625
  store i32 %13276, i32* %10658, align 4, !tbaa !400
  %13277 = extractelement <1024 x i32> %load.buffer.i176, i32 626
  store i32 %13277, i32* %10663, align 4, !tbaa !400
  %13278 = extractelement <1024 x i32> %load.buffer.i176, i32 627
  store i32 %13278, i32* %10668, align 4, !tbaa !400
  %13279 = extractelement <1024 x i32> %load.buffer.i176, i32 628
  store i32 %13279, i32* %10673, align 4, !tbaa !400
  %13280 = extractelement <1024 x i32> %load.buffer.i176, i32 629
  store i32 %13280, i32* %10678, align 4, !tbaa !400
  %13281 = extractelement <1024 x i32> %load.buffer.i176, i32 630
  store i32 %13281, i32* %10683, align 4, !tbaa !400
  %13282 = extractelement <1024 x i32> %load.buffer.i176, i32 631
  store i32 %13282, i32* %10688, align 4, !tbaa !400
  %13283 = extractelement <1024 x i32> %load.buffer.i176, i32 632
  store i32 %13283, i32* %10693, align 4, !tbaa !400
  %13284 = extractelement <1024 x i32> %load.buffer.i176, i32 633
  store i32 %13284, i32* %10698, align 4, !tbaa !400
  %13285 = extractelement <1024 x i32> %load.buffer.i176, i32 634
  store i32 %13285, i32* %10703, align 4, !tbaa !400
  %13286 = extractelement <1024 x i32> %load.buffer.i176, i32 635
  store i32 %13286, i32* %10708, align 4, !tbaa !400
  %13287 = extractelement <1024 x i32> %load.buffer.i176, i32 636
  store i32 %13287, i32* %10713, align 4, !tbaa !400
  %13288 = extractelement <1024 x i32> %load.buffer.i176, i32 637
  store i32 %13288, i32* %10718, align 4, !tbaa !400
  %13289 = extractelement <1024 x i32> %load.buffer.i176, i32 638
  store i32 %13289, i32* %10723, align 4, !tbaa !400
  %13290 = extractelement <1024 x i32> %load.buffer.i176, i32 639
  store i32 %13290, i32* %10728, align 4, !tbaa !400
  %13291 = extractelement <1024 x i32> %load.buffer.i176, i32 640
  store i32 %13291, i32* %10733, align 4, !tbaa !400
  %13292 = extractelement <1024 x i32> %load.buffer.i176, i32 641
  store i32 %13292, i32* %10738, align 4, !tbaa !400
  %13293 = extractelement <1024 x i32> %load.buffer.i176, i32 642
  store i32 %13293, i32* %10743, align 4, !tbaa !400
  %13294 = extractelement <1024 x i32> %load.buffer.i176, i32 643
  store i32 %13294, i32* %10748, align 4, !tbaa !400
  %13295 = extractelement <1024 x i32> %load.buffer.i176, i32 644
  store i32 %13295, i32* %10753, align 4, !tbaa !400
  %13296 = extractelement <1024 x i32> %load.buffer.i176, i32 645
  store i32 %13296, i32* %10758, align 4, !tbaa !400
  %13297 = extractelement <1024 x i32> %load.buffer.i176, i32 646
  store i32 %13297, i32* %10763, align 4, !tbaa !400
  %13298 = extractelement <1024 x i32> %load.buffer.i176, i32 647
  store i32 %13298, i32* %10768, align 4, !tbaa !400
  %13299 = extractelement <1024 x i32> %load.buffer.i176, i32 648
  store i32 %13299, i32* %10773, align 4, !tbaa !400
  %13300 = extractelement <1024 x i32> %load.buffer.i176, i32 649
  store i32 %13300, i32* %10778, align 4, !tbaa !400
  %13301 = extractelement <1024 x i32> %load.buffer.i176, i32 650
  store i32 %13301, i32* %10783, align 4, !tbaa !400
  %13302 = extractelement <1024 x i32> %load.buffer.i176, i32 651
  store i32 %13302, i32* %10788, align 4, !tbaa !400
  %13303 = extractelement <1024 x i32> %load.buffer.i176, i32 652
  store i32 %13303, i32* %10793, align 4, !tbaa !400
  %13304 = extractelement <1024 x i32> %load.buffer.i176, i32 653
  store i32 %13304, i32* %10798, align 4, !tbaa !400
  %13305 = extractelement <1024 x i32> %load.buffer.i176, i32 654
  store i32 %13305, i32* %10803, align 4, !tbaa !400
  %13306 = extractelement <1024 x i32> %load.buffer.i176, i32 655
  store i32 %13306, i32* %10808, align 4, !tbaa !400
  %13307 = extractelement <1024 x i32> %load.buffer.i176, i32 656
  store i32 %13307, i32* %10813, align 4, !tbaa !400
  %13308 = extractelement <1024 x i32> %load.buffer.i176, i32 657
  store i32 %13308, i32* %10818, align 4, !tbaa !400
  %13309 = extractelement <1024 x i32> %load.buffer.i176, i32 658
  store i32 %13309, i32* %10823, align 4, !tbaa !400
  %13310 = extractelement <1024 x i32> %load.buffer.i176, i32 659
  store i32 %13310, i32* %10828, align 4, !tbaa !400
  %13311 = extractelement <1024 x i32> %load.buffer.i176, i32 660
  store i32 %13311, i32* %10833, align 4, !tbaa !400
  %13312 = extractelement <1024 x i32> %load.buffer.i176, i32 661
  store i32 %13312, i32* %10838, align 4, !tbaa !400
  %13313 = extractelement <1024 x i32> %load.buffer.i176, i32 662
  store i32 %13313, i32* %10843, align 4, !tbaa !400
  %13314 = extractelement <1024 x i32> %load.buffer.i176, i32 663
  store i32 %13314, i32* %10848, align 4, !tbaa !400
  %13315 = extractelement <1024 x i32> %load.buffer.i176, i32 664
  store i32 %13315, i32* %10853, align 4, !tbaa !400
  %13316 = extractelement <1024 x i32> %load.buffer.i176, i32 665
  store i32 %13316, i32* %10858, align 4, !tbaa !400
  %13317 = extractelement <1024 x i32> %load.buffer.i176, i32 666
  store i32 %13317, i32* %10863, align 4, !tbaa !400
  %13318 = extractelement <1024 x i32> %load.buffer.i176, i32 667
  store i32 %13318, i32* %10868, align 4, !tbaa !400
  %13319 = extractelement <1024 x i32> %load.buffer.i176, i32 668
  store i32 %13319, i32* %10873, align 4, !tbaa !400
  %13320 = extractelement <1024 x i32> %load.buffer.i176, i32 669
  store i32 %13320, i32* %10878, align 4, !tbaa !400
  %13321 = extractelement <1024 x i32> %load.buffer.i176, i32 670
  store i32 %13321, i32* %10883, align 4, !tbaa !400
  %13322 = extractelement <1024 x i32> %load.buffer.i176, i32 671
  store i32 %13322, i32* %10888, align 4, !tbaa !400
  %13323 = extractelement <1024 x i32> %load.buffer.i176, i32 672
  store i32 %13323, i32* %10893, align 4, !tbaa !400
  %13324 = extractelement <1024 x i32> %load.buffer.i176, i32 673
  store i32 %13324, i32* %10898, align 4, !tbaa !400
  %13325 = extractelement <1024 x i32> %load.buffer.i176, i32 674
  store i32 %13325, i32* %10903, align 4, !tbaa !400
  %13326 = extractelement <1024 x i32> %load.buffer.i176, i32 675
  store i32 %13326, i32* %10908, align 4, !tbaa !400
  %13327 = extractelement <1024 x i32> %load.buffer.i176, i32 676
  store i32 %13327, i32* %10913, align 4, !tbaa !400
  %13328 = extractelement <1024 x i32> %load.buffer.i176, i32 677
  store i32 %13328, i32* %10918, align 4, !tbaa !400
  %13329 = extractelement <1024 x i32> %load.buffer.i176, i32 678
  store i32 %13329, i32* %10923, align 4, !tbaa !400
  %13330 = extractelement <1024 x i32> %load.buffer.i176, i32 679
  store i32 %13330, i32* %10928, align 4, !tbaa !400
  %13331 = extractelement <1024 x i32> %load.buffer.i176, i32 680
  store i32 %13331, i32* %10933, align 4, !tbaa !400
  %13332 = extractelement <1024 x i32> %load.buffer.i176, i32 681
  store i32 %13332, i32* %10938, align 4, !tbaa !400
  %13333 = extractelement <1024 x i32> %load.buffer.i176, i32 682
  store i32 %13333, i32* %10943, align 4, !tbaa !400
  %13334 = extractelement <1024 x i32> %load.buffer.i176, i32 683
  store i32 %13334, i32* %10948, align 4, !tbaa !400
  %13335 = extractelement <1024 x i32> %load.buffer.i176, i32 684
  store i32 %13335, i32* %10953, align 4, !tbaa !400
  %13336 = extractelement <1024 x i32> %load.buffer.i176, i32 685
  store i32 %13336, i32* %10958, align 4, !tbaa !400
  %13337 = extractelement <1024 x i32> %load.buffer.i176, i32 686
  store i32 %13337, i32* %10963, align 4, !tbaa !400
  %13338 = extractelement <1024 x i32> %load.buffer.i176, i32 687
  store i32 %13338, i32* %10968, align 4, !tbaa !400
  %13339 = extractelement <1024 x i32> %load.buffer.i176, i32 688
  store i32 %13339, i32* %10973, align 4, !tbaa !400
  %13340 = extractelement <1024 x i32> %load.buffer.i176, i32 689
  store i32 %13340, i32* %10978, align 4, !tbaa !400
  %13341 = extractelement <1024 x i32> %load.buffer.i176, i32 690
  store i32 %13341, i32* %10983, align 4, !tbaa !400
  %13342 = extractelement <1024 x i32> %load.buffer.i176, i32 691
  store i32 %13342, i32* %10988, align 4, !tbaa !400
  %13343 = extractelement <1024 x i32> %load.buffer.i176, i32 692
  store i32 %13343, i32* %10993, align 4, !tbaa !400
  %13344 = extractelement <1024 x i32> %load.buffer.i176, i32 693
  store i32 %13344, i32* %10998, align 4, !tbaa !400
  %13345 = extractelement <1024 x i32> %load.buffer.i176, i32 694
  store i32 %13345, i32* %11003, align 4, !tbaa !400
  %13346 = extractelement <1024 x i32> %load.buffer.i176, i32 695
  store i32 %13346, i32* %11008, align 4, !tbaa !400
  %13347 = extractelement <1024 x i32> %load.buffer.i176, i32 696
  store i32 %13347, i32* %11013, align 4, !tbaa !400
  %13348 = extractelement <1024 x i32> %load.buffer.i176, i32 697
  store i32 %13348, i32* %11018, align 4, !tbaa !400
  %13349 = extractelement <1024 x i32> %load.buffer.i176, i32 698
  store i32 %13349, i32* %11023, align 4, !tbaa !400
  %13350 = extractelement <1024 x i32> %load.buffer.i176, i32 699
  store i32 %13350, i32* %11028, align 4, !tbaa !400
  %13351 = extractelement <1024 x i32> %load.buffer.i176, i32 700
  store i32 %13351, i32* %11033, align 4, !tbaa !400
  %13352 = extractelement <1024 x i32> %load.buffer.i176, i32 701
  store i32 %13352, i32* %11038, align 4, !tbaa !400
  %13353 = extractelement <1024 x i32> %load.buffer.i176, i32 702
  store i32 %13353, i32* %11043, align 4, !tbaa !400
  %13354 = extractelement <1024 x i32> %load.buffer.i176, i32 703
  store i32 %13354, i32* %11048, align 4, !tbaa !400
  %13355 = extractelement <1024 x i32> %load.buffer.i176, i32 704
  store i32 %13355, i32* %11053, align 4, !tbaa !400
  %13356 = extractelement <1024 x i32> %load.buffer.i176, i32 705
  store i32 %13356, i32* %11058, align 4, !tbaa !400
  %13357 = extractelement <1024 x i32> %load.buffer.i176, i32 706
  store i32 %13357, i32* %11063, align 4, !tbaa !400
  %13358 = extractelement <1024 x i32> %load.buffer.i176, i32 707
  store i32 %13358, i32* %11068, align 4, !tbaa !400
  %13359 = extractelement <1024 x i32> %load.buffer.i176, i32 708
  store i32 %13359, i32* %11073, align 4, !tbaa !400
  %13360 = extractelement <1024 x i32> %load.buffer.i176, i32 709
  store i32 %13360, i32* %11078, align 4, !tbaa !400
  %13361 = extractelement <1024 x i32> %load.buffer.i176, i32 710
  store i32 %13361, i32* %11083, align 4, !tbaa !400
  %13362 = extractelement <1024 x i32> %load.buffer.i176, i32 711
  store i32 %13362, i32* %11088, align 4, !tbaa !400
  %13363 = extractelement <1024 x i32> %load.buffer.i176, i32 712
  store i32 %13363, i32* %11093, align 4, !tbaa !400
  %13364 = extractelement <1024 x i32> %load.buffer.i176, i32 713
  store i32 %13364, i32* %11098, align 4, !tbaa !400
  %13365 = extractelement <1024 x i32> %load.buffer.i176, i32 714
  store i32 %13365, i32* %11103, align 4, !tbaa !400
  %13366 = extractelement <1024 x i32> %load.buffer.i176, i32 715
  store i32 %13366, i32* %11108, align 4, !tbaa !400
  %13367 = extractelement <1024 x i32> %load.buffer.i176, i32 716
  store i32 %13367, i32* %11113, align 4, !tbaa !400
  %13368 = extractelement <1024 x i32> %load.buffer.i176, i32 717
  store i32 %13368, i32* %11118, align 4, !tbaa !400
  %13369 = extractelement <1024 x i32> %load.buffer.i176, i32 718
  store i32 %13369, i32* %11123, align 4, !tbaa !400
  %13370 = extractelement <1024 x i32> %load.buffer.i176, i32 719
  store i32 %13370, i32* %11128, align 4, !tbaa !400
  %13371 = extractelement <1024 x i32> %load.buffer.i176, i32 720
  store i32 %13371, i32* %11133, align 4, !tbaa !400
  %13372 = extractelement <1024 x i32> %load.buffer.i176, i32 721
  store i32 %13372, i32* %11138, align 4, !tbaa !400
  %13373 = extractelement <1024 x i32> %load.buffer.i176, i32 722
  store i32 %13373, i32* %11143, align 4, !tbaa !400
  %13374 = extractelement <1024 x i32> %load.buffer.i176, i32 723
  store i32 %13374, i32* %11148, align 4, !tbaa !400
  %13375 = extractelement <1024 x i32> %load.buffer.i176, i32 724
  store i32 %13375, i32* %11153, align 4, !tbaa !400
  %13376 = extractelement <1024 x i32> %load.buffer.i176, i32 725
  store i32 %13376, i32* %11158, align 4, !tbaa !400
  %13377 = extractelement <1024 x i32> %load.buffer.i176, i32 726
  store i32 %13377, i32* %11163, align 4, !tbaa !400
  %13378 = extractelement <1024 x i32> %load.buffer.i176, i32 727
  store i32 %13378, i32* %11168, align 4, !tbaa !400
  %13379 = extractelement <1024 x i32> %load.buffer.i176, i32 728
  store i32 %13379, i32* %11173, align 4, !tbaa !400
  %13380 = extractelement <1024 x i32> %load.buffer.i176, i32 729
  store i32 %13380, i32* %11178, align 4, !tbaa !400
  %13381 = extractelement <1024 x i32> %load.buffer.i176, i32 730
  store i32 %13381, i32* %11183, align 4, !tbaa !400
  %13382 = extractelement <1024 x i32> %load.buffer.i176, i32 731
  store i32 %13382, i32* %11188, align 4, !tbaa !400
  %13383 = extractelement <1024 x i32> %load.buffer.i176, i32 732
  store i32 %13383, i32* %11193, align 4, !tbaa !400
  %13384 = extractelement <1024 x i32> %load.buffer.i176, i32 733
  store i32 %13384, i32* %11198, align 4, !tbaa !400
  %13385 = extractelement <1024 x i32> %load.buffer.i176, i32 734
  store i32 %13385, i32* %11203, align 4, !tbaa !400
  %13386 = extractelement <1024 x i32> %load.buffer.i176, i32 735
  store i32 %13386, i32* %11208, align 4, !tbaa !400
  %13387 = extractelement <1024 x i32> %load.buffer.i176, i32 736
  store i32 %13387, i32* %11213, align 4, !tbaa !400
  %13388 = extractelement <1024 x i32> %load.buffer.i176, i32 737
  store i32 %13388, i32* %11218, align 4, !tbaa !400
  %13389 = extractelement <1024 x i32> %load.buffer.i176, i32 738
  store i32 %13389, i32* %11223, align 4, !tbaa !400
  %13390 = extractelement <1024 x i32> %load.buffer.i176, i32 739
  store i32 %13390, i32* %11228, align 4, !tbaa !400
  %13391 = extractelement <1024 x i32> %load.buffer.i176, i32 740
  store i32 %13391, i32* %11233, align 4, !tbaa !400
  %13392 = extractelement <1024 x i32> %load.buffer.i176, i32 741
  store i32 %13392, i32* %11238, align 4, !tbaa !400
  %13393 = extractelement <1024 x i32> %load.buffer.i176, i32 742
  store i32 %13393, i32* %11243, align 4, !tbaa !400
  %13394 = extractelement <1024 x i32> %load.buffer.i176, i32 743
  store i32 %13394, i32* %11248, align 4, !tbaa !400
  %13395 = extractelement <1024 x i32> %load.buffer.i176, i32 744
  store i32 %13395, i32* %11253, align 4, !tbaa !400
  %13396 = extractelement <1024 x i32> %load.buffer.i176, i32 745
  store i32 %13396, i32* %11258, align 4, !tbaa !400
  %13397 = extractelement <1024 x i32> %load.buffer.i176, i32 746
  store i32 %13397, i32* %11263, align 4, !tbaa !400
  %13398 = extractelement <1024 x i32> %load.buffer.i176, i32 747
  store i32 %13398, i32* %11268, align 4, !tbaa !400
  %13399 = extractelement <1024 x i32> %load.buffer.i176, i32 748
  store i32 %13399, i32* %11273, align 4, !tbaa !400
  %13400 = extractelement <1024 x i32> %load.buffer.i176, i32 749
  store i32 %13400, i32* %11278, align 4, !tbaa !400
  %13401 = extractelement <1024 x i32> %load.buffer.i176, i32 750
  store i32 %13401, i32* %11283, align 4, !tbaa !400
  %13402 = extractelement <1024 x i32> %load.buffer.i176, i32 751
  store i32 %13402, i32* %11288, align 4, !tbaa !400
  %13403 = extractelement <1024 x i32> %load.buffer.i176, i32 752
  store i32 %13403, i32* %11293, align 4, !tbaa !400
  %13404 = extractelement <1024 x i32> %load.buffer.i176, i32 753
  store i32 %13404, i32* %11298, align 4, !tbaa !400
  %13405 = extractelement <1024 x i32> %load.buffer.i176, i32 754
  store i32 %13405, i32* %11303, align 4, !tbaa !400
  %13406 = extractelement <1024 x i32> %load.buffer.i176, i32 755
  store i32 %13406, i32* %11308, align 4, !tbaa !400
  %13407 = extractelement <1024 x i32> %load.buffer.i176, i32 756
  store i32 %13407, i32* %11313, align 4, !tbaa !400
  %13408 = extractelement <1024 x i32> %load.buffer.i176, i32 757
  store i32 %13408, i32* %11318, align 4, !tbaa !400
  %13409 = extractelement <1024 x i32> %load.buffer.i176, i32 758
  store i32 %13409, i32* %11323, align 4, !tbaa !400
  %13410 = extractelement <1024 x i32> %load.buffer.i176, i32 759
  store i32 %13410, i32* %11328, align 4, !tbaa !400
  %13411 = extractelement <1024 x i32> %load.buffer.i176, i32 760
  store i32 %13411, i32* %11333, align 4, !tbaa !400
  %13412 = extractelement <1024 x i32> %load.buffer.i176, i32 761
  store i32 %13412, i32* %11338, align 4, !tbaa !400
  %13413 = extractelement <1024 x i32> %load.buffer.i176, i32 762
  store i32 %13413, i32* %11343, align 4, !tbaa !400
  %13414 = extractelement <1024 x i32> %load.buffer.i176, i32 763
  store i32 %13414, i32* %11348, align 4, !tbaa !400
  %13415 = extractelement <1024 x i32> %load.buffer.i176, i32 764
  store i32 %13415, i32* %11353, align 4, !tbaa !400
  %13416 = extractelement <1024 x i32> %load.buffer.i176, i32 765
  store i32 %13416, i32* %11358, align 4, !tbaa !400
  %13417 = extractelement <1024 x i32> %load.buffer.i176, i32 766
  store i32 %13417, i32* %11363, align 4, !tbaa !400
  %13418 = extractelement <1024 x i32> %load.buffer.i176, i32 767
  store i32 %13418, i32* %11368, align 4, !tbaa !400
  %13419 = extractelement <1024 x i32> %load.buffer.i176, i32 768
  store i32 %13419, i32* %11373, align 4, !tbaa !400
  %13420 = extractelement <1024 x i32> %load.buffer.i176, i32 769
  store i32 %13420, i32* %11378, align 4, !tbaa !400
  %13421 = extractelement <1024 x i32> %load.buffer.i176, i32 770
  store i32 %13421, i32* %11383, align 4, !tbaa !400
  %13422 = extractelement <1024 x i32> %load.buffer.i176, i32 771
  store i32 %13422, i32* %11388, align 4, !tbaa !400
  %13423 = extractelement <1024 x i32> %load.buffer.i176, i32 772
  store i32 %13423, i32* %11393, align 4, !tbaa !400
  %13424 = extractelement <1024 x i32> %load.buffer.i176, i32 773
  store i32 %13424, i32* %11398, align 4, !tbaa !400
  %13425 = extractelement <1024 x i32> %load.buffer.i176, i32 774
  store i32 %13425, i32* %11403, align 4, !tbaa !400
  %13426 = extractelement <1024 x i32> %load.buffer.i176, i32 775
  store i32 %13426, i32* %11408, align 4, !tbaa !400
  %13427 = extractelement <1024 x i32> %load.buffer.i176, i32 776
  store i32 %13427, i32* %11413, align 4, !tbaa !400
  %13428 = extractelement <1024 x i32> %load.buffer.i176, i32 777
  store i32 %13428, i32* %11418, align 4, !tbaa !400
  %13429 = extractelement <1024 x i32> %load.buffer.i176, i32 778
  store i32 %13429, i32* %11423, align 4, !tbaa !400
  %13430 = extractelement <1024 x i32> %load.buffer.i176, i32 779
  store i32 %13430, i32* %11428, align 4, !tbaa !400
  %13431 = extractelement <1024 x i32> %load.buffer.i176, i32 780
  store i32 %13431, i32* %11433, align 4, !tbaa !400
  %13432 = extractelement <1024 x i32> %load.buffer.i176, i32 781
  store i32 %13432, i32* %11438, align 4, !tbaa !400
  %13433 = extractelement <1024 x i32> %load.buffer.i176, i32 782
  store i32 %13433, i32* %11443, align 4, !tbaa !400
  %13434 = extractelement <1024 x i32> %load.buffer.i176, i32 783
  store i32 %13434, i32* %11448, align 4, !tbaa !400
  %13435 = extractelement <1024 x i32> %load.buffer.i176, i32 784
  store i32 %13435, i32* %11453, align 4, !tbaa !400
  %13436 = extractelement <1024 x i32> %load.buffer.i176, i32 785
  store i32 %13436, i32* %11458, align 4, !tbaa !400
  %13437 = extractelement <1024 x i32> %load.buffer.i176, i32 786
  store i32 %13437, i32* %11463, align 4, !tbaa !400
  %13438 = extractelement <1024 x i32> %load.buffer.i176, i32 787
  store i32 %13438, i32* %11468, align 4, !tbaa !400
  %13439 = extractelement <1024 x i32> %load.buffer.i176, i32 788
  store i32 %13439, i32* %11473, align 4, !tbaa !400
  %13440 = extractelement <1024 x i32> %load.buffer.i176, i32 789
  store i32 %13440, i32* %11478, align 4, !tbaa !400
  %13441 = extractelement <1024 x i32> %load.buffer.i176, i32 790
  store i32 %13441, i32* %11483, align 4, !tbaa !400
  %13442 = extractelement <1024 x i32> %load.buffer.i176, i32 791
  store i32 %13442, i32* %11488, align 4, !tbaa !400
  %13443 = extractelement <1024 x i32> %load.buffer.i176, i32 792
  store i32 %13443, i32* %11493, align 4, !tbaa !400
  %13444 = extractelement <1024 x i32> %load.buffer.i176, i32 793
  store i32 %13444, i32* %11498, align 4, !tbaa !400
  %13445 = extractelement <1024 x i32> %load.buffer.i176, i32 794
  store i32 %13445, i32* %11503, align 4, !tbaa !400
  %13446 = extractelement <1024 x i32> %load.buffer.i176, i32 795
  store i32 %13446, i32* %11508, align 4, !tbaa !400
  %13447 = extractelement <1024 x i32> %load.buffer.i176, i32 796
  store i32 %13447, i32* %11513, align 4, !tbaa !400
  %13448 = extractelement <1024 x i32> %load.buffer.i176, i32 797
  store i32 %13448, i32* %11518, align 4, !tbaa !400
  %13449 = extractelement <1024 x i32> %load.buffer.i176, i32 798
  store i32 %13449, i32* %11523, align 4, !tbaa !400
  %13450 = extractelement <1024 x i32> %load.buffer.i176, i32 799
  store i32 %13450, i32* %11528, align 4, !tbaa !400
  %13451 = extractelement <1024 x i32> %load.buffer.i176, i32 800
  store i32 %13451, i32* %11533, align 4, !tbaa !400
  %13452 = extractelement <1024 x i32> %load.buffer.i176, i32 801
  store i32 %13452, i32* %11538, align 4, !tbaa !400
  %13453 = extractelement <1024 x i32> %load.buffer.i176, i32 802
  store i32 %13453, i32* %11543, align 4, !tbaa !400
  %13454 = extractelement <1024 x i32> %load.buffer.i176, i32 803
  store i32 %13454, i32* %11548, align 4, !tbaa !400
  %13455 = extractelement <1024 x i32> %load.buffer.i176, i32 804
  store i32 %13455, i32* %11553, align 4, !tbaa !400
  %13456 = extractelement <1024 x i32> %load.buffer.i176, i32 805
  store i32 %13456, i32* %11558, align 4, !tbaa !400
  %13457 = extractelement <1024 x i32> %load.buffer.i176, i32 806
  store i32 %13457, i32* %11563, align 4, !tbaa !400
  %13458 = extractelement <1024 x i32> %load.buffer.i176, i32 807
  store i32 %13458, i32* %11568, align 4, !tbaa !400
  %13459 = extractelement <1024 x i32> %load.buffer.i176, i32 808
  store i32 %13459, i32* %11573, align 4, !tbaa !400
  %13460 = extractelement <1024 x i32> %load.buffer.i176, i32 809
  store i32 %13460, i32* %11578, align 4, !tbaa !400
  %13461 = extractelement <1024 x i32> %load.buffer.i176, i32 810
  store i32 %13461, i32* %11583, align 4, !tbaa !400
  %13462 = extractelement <1024 x i32> %load.buffer.i176, i32 811
  store i32 %13462, i32* %11588, align 4, !tbaa !400
  %13463 = extractelement <1024 x i32> %load.buffer.i176, i32 812
  store i32 %13463, i32* %11593, align 4, !tbaa !400
  %13464 = extractelement <1024 x i32> %load.buffer.i176, i32 813
  store i32 %13464, i32* %11598, align 4, !tbaa !400
  %13465 = extractelement <1024 x i32> %load.buffer.i176, i32 814
  store i32 %13465, i32* %11603, align 4, !tbaa !400
  %13466 = extractelement <1024 x i32> %load.buffer.i176, i32 815
  store i32 %13466, i32* %11608, align 4, !tbaa !400
  %13467 = extractelement <1024 x i32> %load.buffer.i176, i32 816
  store i32 %13467, i32* %11613, align 4, !tbaa !400
  %13468 = extractelement <1024 x i32> %load.buffer.i176, i32 817
  store i32 %13468, i32* %11618, align 4, !tbaa !400
  %13469 = extractelement <1024 x i32> %load.buffer.i176, i32 818
  store i32 %13469, i32* %11623, align 4, !tbaa !400
  %13470 = extractelement <1024 x i32> %load.buffer.i176, i32 819
  store i32 %13470, i32* %11628, align 4, !tbaa !400
  %13471 = extractelement <1024 x i32> %load.buffer.i176, i32 820
  store i32 %13471, i32* %11633, align 4, !tbaa !400
  %13472 = extractelement <1024 x i32> %load.buffer.i176, i32 821
  store i32 %13472, i32* %11638, align 4, !tbaa !400
  %13473 = extractelement <1024 x i32> %load.buffer.i176, i32 822
  store i32 %13473, i32* %11643, align 4, !tbaa !400
  %13474 = extractelement <1024 x i32> %load.buffer.i176, i32 823
  store i32 %13474, i32* %11648, align 4, !tbaa !400
  %13475 = extractelement <1024 x i32> %load.buffer.i176, i32 824
  store i32 %13475, i32* %11653, align 4, !tbaa !400
  %13476 = extractelement <1024 x i32> %load.buffer.i176, i32 825
  store i32 %13476, i32* %11658, align 4, !tbaa !400
  %13477 = extractelement <1024 x i32> %load.buffer.i176, i32 826
  store i32 %13477, i32* %11663, align 4, !tbaa !400
  %13478 = extractelement <1024 x i32> %load.buffer.i176, i32 827
  store i32 %13478, i32* %11668, align 4, !tbaa !400
  %13479 = extractelement <1024 x i32> %load.buffer.i176, i32 828
  store i32 %13479, i32* %11673, align 4, !tbaa !400
  %13480 = extractelement <1024 x i32> %load.buffer.i176, i32 829
  store i32 %13480, i32* %11678, align 4, !tbaa !400
  %13481 = extractelement <1024 x i32> %load.buffer.i176, i32 830
  store i32 %13481, i32* %11683, align 4, !tbaa !400
  %13482 = extractelement <1024 x i32> %load.buffer.i176, i32 831
  store i32 %13482, i32* %11688, align 4, !tbaa !400
  %13483 = extractelement <1024 x i32> %load.buffer.i176, i32 832
  store i32 %13483, i32* %11693, align 4, !tbaa !400
  %13484 = extractelement <1024 x i32> %load.buffer.i176, i32 833
  store i32 %13484, i32* %11698, align 4, !tbaa !400
  %13485 = extractelement <1024 x i32> %load.buffer.i176, i32 834
  store i32 %13485, i32* %11703, align 4, !tbaa !400
  %13486 = extractelement <1024 x i32> %load.buffer.i176, i32 835
  store i32 %13486, i32* %11708, align 4, !tbaa !400
  %13487 = extractelement <1024 x i32> %load.buffer.i176, i32 836
  store i32 %13487, i32* %11713, align 4, !tbaa !400
  %13488 = extractelement <1024 x i32> %load.buffer.i176, i32 837
  store i32 %13488, i32* %11718, align 4, !tbaa !400
  %13489 = extractelement <1024 x i32> %load.buffer.i176, i32 838
  store i32 %13489, i32* %11723, align 4, !tbaa !400
  %13490 = extractelement <1024 x i32> %load.buffer.i176, i32 839
  store i32 %13490, i32* %11728, align 4, !tbaa !400
  %13491 = extractelement <1024 x i32> %load.buffer.i176, i32 840
  store i32 %13491, i32* %11733, align 4, !tbaa !400
  %13492 = extractelement <1024 x i32> %load.buffer.i176, i32 841
  store i32 %13492, i32* %11738, align 4, !tbaa !400
  %13493 = extractelement <1024 x i32> %load.buffer.i176, i32 842
  store i32 %13493, i32* %11743, align 4, !tbaa !400
  %13494 = extractelement <1024 x i32> %load.buffer.i176, i32 843
  store i32 %13494, i32* %11748, align 4, !tbaa !400
  %13495 = extractelement <1024 x i32> %load.buffer.i176, i32 844
  store i32 %13495, i32* %11753, align 4, !tbaa !400
  %13496 = extractelement <1024 x i32> %load.buffer.i176, i32 845
  store i32 %13496, i32* %11758, align 4, !tbaa !400
  %13497 = extractelement <1024 x i32> %load.buffer.i176, i32 846
  store i32 %13497, i32* %11763, align 4, !tbaa !400
  %13498 = extractelement <1024 x i32> %load.buffer.i176, i32 847
  store i32 %13498, i32* %11768, align 4, !tbaa !400
  %13499 = extractelement <1024 x i32> %load.buffer.i176, i32 848
  store i32 %13499, i32* %11773, align 4, !tbaa !400
  %13500 = extractelement <1024 x i32> %load.buffer.i176, i32 849
  store i32 %13500, i32* %11778, align 4, !tbaa !400
  %13501 = extractelement <1024 x i32> %load.buffer.i176, i32 850
  store i32 %13501, i32* %11783, align 4, !tbaa !400
  %13502 = extractelement <1024 x i32> %load.buffer.i176, i32 851
  store i32 %13502, i32* %11788, align 4, !tbaa !400
  %13503 = extractelement <1024 x i32> %load.buffer.i176, i32 852
  store i32 %13503, i32* %11793, align 4, !tbaa !400
  %13504 = extractelement <1024 x i32> %load.buffer.i176, i32 853
  store i32 %13504, i32* %11798, align 4, !tbaa !400
  %13505 = extractelement <1024 x i32> %load.buffer.i176, i32 854
  store i32 %13505, i32* %11803, align 4, !tbaa !400
  %13506 = extractelement <1024 x i32> %load.buffer.i176, i32 855
  store i32 %13506, i32* %11808, align 4, !tbaa !400
  %13507 = extractelement <1024 x i32> %load.buffer.i176, i32 856
  store i32 %13507, i32* %11813, align 4, !tbaa !400
  %13508 = extractelement <1024 x i32> %load.buffer.i176, i32 857
  store i32 %13508, i32* %11818, align 4, !tbaa !400
  %13509 = extractelement <1024 x i32> %load.buffer.i176, i32 858
  store i32 %13509, i32* %11823, align 4, !tbaa !400
  %13510 = extractelement <1024 x i32> %load.buffer.i176, i32 859
  store i32 %13510, i32* %11828, align 4, !tbaa !400
  %13511 = extractelement <1024 x i32> %load.buffer.i176, i32 860
  store i32 %13511, i32* %11833, align 4, !tbaa !400
  %13512 = extractelement <1024 x i32> %load.buffer.i176, i32 861
  store i32 %13512, i32* %11838, align 4, !tbaa !400
  %13513 = extractelement <1024 x i32> %load.buffer.i176, i32 862
  store i32 %13513, i32* %11843, align 4, !tbaa !400
  %13514 = extractelement <1024 x i32> %load.buffer.i176, i32 863
  store i32 %13514, i32* %11848, align 4, !tbaa !400
  %13515 = extractelement <1024 x i32> %load.buffer.i176, i32 864
  store i32 %13515, i32* %11853, align 4, !tbaa !400
  %13516 = extractelement <1024 x i32> %load.buffer.i176, i32 865
  store i32 %13516, i32* %11858, align 4, !tbaa !400
  %13517 = extractelement <1024 x i32> %load.buffer.i176, i32 866
  store i32 %13517, i32* %11863, align 4, !tbaa !400
  %13518 = extractelement <1024 x i32> %load.buffer.i176, i32 867
  store i32 %13518, i32* %11868, align 4, !tbaa !400
  %13519 = extractelement <1024 x i32> %load.buffer.i176, i32 868
  store i32 %13519, i32* %11873, align 4, !tbaa !400
  %13520 = extractelement <1024 x i32> %load.buffer.i176, i32 869
  store i32 %13520, i32* %11878, align 4, !tbaa !400
  %13521 = extractelement <1024 x i32> %load.buffer.i176, i32 870
  store i32 %13521, i32* %11883, align 4, !tbaa !400
  %13522 = extractelement <1024 x i32> %load.buffer.i176, i32 871
  store i32 %13522, i32* %11888, align 4, !tbaa !400
  %13523 = extractelement <1024 x i32> %load.buffer.i176, i32 872
  store i32 %13523, i32* %11893, align 4, !tbaa !400
  %13524 = extractelement <1024 x i32> %load.buffer.i176, i32 873
  store i32 %13524, i32* %11898, align 4, !tbaa !400
  %13525 = extractelement <1024 x i32> %load.buffer.i176, i32 874
  store i32 %13525, i32* %11903, align 4, !tbaa !400
  %13526 = extractelement <1024 x i32> %load.buffer.i176, i32 875
  store i32 %13526, i32* %11908, align 4, !tbaa !400
  %13527 = extractelement <1024 x i32> %load.buffer.i176, i32 876
  store i32 %13527, i32* %11913, align 4, !tbaa !400
  %13528 = extractelement <1024 x i32> %load.buffer.i176, i32 877
  store i32 %13528, i32* %11918, align 4, !tbaa !400
  %13529 = extractelement <1024 x i32> %load.buffer.i176, i32 878
  store i32 %13529, i32* %11923, align 4, !tbaa !400
  %13530 = extractelement <1024 x i32> %load.buffer.i176, i32 879
  store i32 %13530, i32* %11928, align 4, !tbaa !400
  %13531 = extractelement <1024 x i32> %load.buffer.i176, i32 880
  store i32 %13531, i32* %11933, align 4, !tbaa !400
  %13532 = extractelement <1024 x i32> %load.buffer.i176, i32 881
  store i32 %13532, i32* %11938, align 4, !tbaa !400
  %13533 = extractelement <1024 x i32> %load.buffer.i176, i32 882
  store i32 %13533, i32* %11943, align 4, !tbaa !400
  %13534 = extractelement <1024 x i32> %load.buffer.i176, i32 883
  store i32 %13534, i32* %11948, align 4, !tbaa !400
  %13535 = extractelement <1024 x i32> %load.buffer.i176, i32 884
  store i32 %13535, i32* %11953, align 4, !tbaa !400
  %13536 = extractelement <1024 x i32> %load.buffer.i176, i32 885
  store i32 %13536, i32* %11958, align 4, !tbaa !400
  %13537 = extractelement <1024 x i32> %load.buffer.i176, i32 886
  store i32 %13537, i32* %11963, align 4, !tbaa !400
  %13538 = extractelement <1024 x i32> %load.buffer.i176, i32 887
  store i32 %13538, i32* %11968, align 4, !tbaa !400
  %13539 = extractelement <1024 x i32> %load.buffer.i176, i32 888
  store i32 %13539, i32* %11973, align 4, !tbaa !400
  %13540 = extractelement <1024 x i32> %load.buffer.i176, i32 889
  store i32 %13540, i32* %11978, align 4, !tbaa !400
  %13541 = extractelement <1024 x i32> %load.buffer.i176, i32 890
  store i32 %13541, i32* %11983, align 4, !tbaa !400
  %13542 = extractelement <1024 x i32> %load.buffer.i176, i32 891
  store i32 %13542, i32* %11988, align 4, !tbaa !400
  %13543 = extractelement <1024 x i32> %load.buffer.i176, i32 892
  store i32 %13543, i32* %11993, align 4, !tbaa !400
  %13544 = extractelement <1024 x i32> %load.buffer.i176, i32 893
  store i32 %13544, i32* %11998, align 4, !tbaa !400
  %13545 = extractelement <1024 x i32> %load.buffer.i176, i32 894
  store i32 %13545, i32* %12003, align 4, !tbaa !400
  %13546 = extractelement <1024 x i32> %load.buffer.i176, i32 895
  store i32 %13546, i32* %12008, align 4, !tbaa !400
  %13547 = extractelement <1024 x i32> %load.buffer.i176, i32 896
  store i32 %13547, i32* %12013, align 4, !tbaa !400
  %13548 = extractelement <1024 x i32> %load.buffer.i176, i32 897
  store i32 %13548, i32* %12018, align 4, !tbaa !400
  %13549 = extractelement <1024 x i32> %load.buffer.i176, i32 898
  store i32 %13549, i32* %12023, align 4, !tbaa !400
  %13550 = extractelement <1024 x i32> %load.buffer.i176, i32 899
  store i32 %13550, i32* %12028, align 4, !tbaa !400
  %13551 = extractelement <1024 x i32> %load.buffer.i176, i32 900
  store i32 %13551, i32* %12033, align 4, !tbaa !400
  %13552 = extractelement <1024 x i32> %load.buffer.i176, i32 901
  store i32 %13552, i32* %12038, align 4, !tbaa !400
  %13553 = extractelement <1024 x i32> %load.buffer.i176, i32 902
  store i32 %13553, i32* %12043, align 4, !tbaa !400
  %13554 = extractelement <1024 x i32> %load.buffer.i176, i32 903
  store i32 %13554, i32* %12048, align 4, !tbaa !400
  %13555 = extractelement <1024 x i32> %load.buffer.i176, i32 904
  store i32 %13555, i32* %12053, align 4, !tbaa !400
  %13556 = extractelement <1024 x i32> %load.buffer.i176, i32 905
  store i32 %13556, i32* %12058, align 4, !tbaa !400
  %13557 = extractelement <1024 x i32> %load.buffer.i176, i32 906
  store i32 %13557, i32* %12063, align 4, !tbaa !400
  %13558 = extractelement <1024 x i32> %load.buffer.i176, i32 907
  store i32 %13558, i32* %12068, align 4, !tbaa !400
  %13559 = extractelement <1024 x i32> %load.buffer.i176, i32 908
  store i32 %13559, i32* %12073, align 4, !tbaa !400
  %13560 = extractelement <1024 x i32> %load.buffer.i176, i32 909
  store i32 %13560, i32* %12078, align 4, !tbaa !400
  %13561 = extractelement <1024 x i32> %load.buffer.i176, i32 910
  store i32 %13561, i32* %12083, align 4, !tbaa !400
  %13562 = extractelement <1024 x i32> %load.buffer.i176, i32 911
  store i32 %13562, i32* %12088, align 4, !tbaa !400
  %13563 = extractelement <1024 x i32> %load.buffer.i176, i32 912
  store i32 %13563, i32* %12093, align 4, !tbaa !400
  %13564 = extractelement <1024 x i32> %load.buffer.i176, i32 913
  store i32 %13564, i32* %12098, align 4, !tbaa !400
  %13565 = extractelement <1024 x i32> %load.buffer.i176, i32 914
  store i32 %13565, i32* %12103, align 4, !tbaa !400
  %13566 = extractelement <1024 x i32> %load.buffer.i176, i32 915
  store i32 %13566, i32* %12108, align 4, !tbaa !400
  %13567 = extractelement <1024 x i32> %load.buffer.i176, i32 916
  store i32 %13567, i32* %12113, align 4, !tbaa !400
  %13568 = extractelement <1024 x i32> %load.buffer.i176, i32 917
  store i32 %13568, i32* %12118, align 4, !tbaa !400
  %13569 = extractelement <1024 x i32> %load.buffer.i176, i32 918
  store i32 %13569, i32* %12123, align 4, !tbaa !400
  %13570 = extractelement <1024 x i32> %load.buffer.i176, i32 919
  store i32 %13570, i32* %12128, align 4, !tbaa !400
  %13571 = extractelement <1024 x i32> %load.buffer.i176, i32 920
  store i32 %13571, i32* %12133, align 4, !tbaa !400
  %13572 = extractelement <1024 x i32> %load.buffer.i176, i32 921
  store i32 %13572, i32* %12138, align 4, !tbaa !400
  %13573 = extractelement <1024 x i32> %load.buffer.i176, i32 922
  store i32 %13573, i32* %12143, align 4, !tbaa !400
  %13574 = extractelement <1024 x i32> %load.buffer.i176, i32 923
  store i32 %13574, i32* %12148, align 4, !tbaa !400
  %13575 = extractelement <1024 x i32> %load.buffer.i176, i32 924
  store i32 %13575, i32* %12153, align 4, !tbaa !400
  %13576 = extractelement <1024 x i32> %load.buffer.i176, i32 925
  store i32 %13576, i32* %12158, align 4, !tbaa !400
  %13577 = extractelement <1024 x i32> %load.buffer.i176, i32 926
  store i32 %13577, i32* %12163, align 4, !tbaa !400
  %13578 = extractelement <1024 x i32> %load.buffer.i176, i32 927
  store i32 %13578, i32* %12168, align 4, !tbaa !400
  %13579 = extractelement <1024 x i32> %load.buffer.i176, i32 928
  store i32 %13579, i32* %12173, align 4, !tbaa !400
  %13580 = extractelement <1024 x i32> %load.buffer.i176, i32 929
  store i32 %13580, i32* %12178, align 4, !tbaa !400
  %13581 = extractelement <1024 x i32> %load.buffer.i176, i32 930
  store i32 %13581, i32* %12183, align 4, !tbaa !400
  %13582 = extractelement <1024 x i32> %load.buffer.i176, i32 931
  store i32 %13582, i32* %12188, align 4, !tbaa !400
  %13583 = extractelement <1024 x i32> %load.buffer.i176, i32 932
  store i32 %13583, i32* %12193, align 4, !tbaa !400
  %13584 = extractelement <1024 x i32> %load.buffer.i176, i32 933
  store i32 %13584, i32* %12198, align 4, !tbaa !400
  %13585 = extractelement <1024 x i32> %load.buffer.i176, i32 934
  store i32 %13585, i32* %12203, align 4, !tbaa !400
  %13586 = extractelement <1024 x i32> %load.buffer.i176, i32 935
  store i32 %13586, i32* %12208, align 4, !tbaa !400
  %13587 = extractelement <1024 x i32> %load.buffer.i176, i32 936
  store i32 %13587, i32* %12213, align 4, !tbaa !400
  %13588 = extractelement <1024 x i32> %load.buffer.i176, i32 937
  store i32 %13588, i32* %12218, align 4, !tbaa !400
  %13589 = extractelement <1024 x i32> %load.buffer.i176, i32 938
  store i32 %13589, i32* %12223, align 4, !tbaa !400
  %13590 = extractelement <1024 x i32> %load.buffer.i176, i32 939
  store i32 %13590, i32* %12228, align 4, !tbaa !400
  %13591 = extractelement <1024 x i32> %load.buffer.i176, i32 940
  store i32 %13591, i32* %12233, align 4, !tbaa !400
  %13592 = extractelement <1024 x i32> %load.buffer.i176, i32 941
  store i32 %13592, i32* %12238, align 4, !tbaa !400
  %13593 = extractelement <1024 x i32> %load.buffer.i176, i32 942
  store i32 %13593, i32* %12243, align 4, !tbaa !400
  %13594 = extractelement <1024 x i32> %load.buffer.i176, i32 943
  store i32 %13594, i32* %12248, align 4, !tbaa !400
  %13595 = extractelement <1024 x i32> %load.buffer.i176, i32 944
  store i32 %13595, i32* %12253, align 4, !tbaa !400
  %13596 = extractelement <1024 x i32> %load.buffer.i176, i32 945
  store i32 %13596, i32* %12258, align 4, !tbaa !400
  %13597 = extractelement <1024 x i32> %load.buffer.i176, i32 946
  store i32 %13597, i32* %12263, align 4, !tbaa !400
  %13598 = extractelement <1024 x i32> %load.buffer.i176, i32 947
  store i32 %13598, i32* %12268, align 4, !tbaa !400
  %13599 = extractelement <1024 x i32> %load.buffer.i176, i32 948
  store i32 %13599, i32* %12273, align 4, !tbaa !400
  %13600 = extractelement <1024 x i32> %load.buffer.i176, i32 949
  store i32 %13600, i32* %12278, align 4, !tbaa !400
  %13601 = extractelement <1024 x i32> %load.buffer.i176, i32 950
  store i32 %13601, i32* %12283, align 4, !tbaa !400
  %13602 = extractelement <1024 x i32> %load.buffer.i176, i32 951
  store i32 %13602, i32* %12288, align 4, !tbaa !400
  %13603 = extractelement <1024 x i32> %load.buffer.i176, i32 952
  store i32 %13603, i32* %12293, align 4, !tbaa !400
  %13604 = extractelement <1024 x i32> %load.buffer.i176, i32 953
  store i32 %13604, i32* %12298, align 4, !tbaa !400
  %13605 = extractelement <1024 x i32> %load.buffer.i176, i32 954
  store i32 %13605, i32* %12303, align 4, !tbaa !400
  %13606 = extractelement <1024 x i32> %load.buffer.i176, i32 955
  store i32 %13606, i32* %12308, align 4, !tbaa !400
  %13607 = extractelement <1024 x i32> %load.buffer.i176, i32 956
  store i32 %13607, i32* %12313, align 4, !tbaa !400
  %13608 = extractelement <1024 x i32> %load.buffer.i176, i32 957
  store i32 %13608, i32* %12318, align 4, !tbaa !400
  %13609 = extractelement <1024 x i32> %load.buffer.i176, i32 958
  store i32 %13609, i32* %12323, align 4, !tbaa !400
  %13610 = extractelement <1024 x i32> %load.buffer.i176, i32 959
  store i32 %13610, i32* %12328, align 4, !tbaa !400
  %13611 = extractelement <1024 x i32> %load.buffer.i176, i32 960
  store i32 %13611, i32* %12333, align 4, !tbaa !400
  %13612 = extractelement <1024 x i32> %load.buffer.i176, i32 961
  store i32 %13612, i32* %12338, align 4, !tbaa !400
  %13613 = extractelement <1024 x i32> %load.buffer.i176, i32 962
  store i32 %13613, i32* %12343, align 4, !tbaa !400
  %13614 = extractelement <1024 x i32> %load.buffer.i176, i32 963
  store i32 %13614, i32* %12348, align 4, !tbaa !400
  %13615 = extractelement <1024 x i32> %load.buffer.i176, i32 964
  store i32 %13615, i32* %12353, align 4, !tbaa !400
  %13616 = extractelement <1024 x i32> %load.buffer.i176, i32 965
  store i32 %13616, i32* %12358, align 4, !tbaa !400
  %13617 = extractelement <1024 x i32> %load.buffer.i176, i32 966
  store i32 %13617, i32* %12363, align 4, !tbaa !400
  %13618 = extractelement <1024 x i32> %load.buffer.i176, i32 967
  store i32 %13618, i32* %12368, align 4, !tbaa !400
  %13619 = extractelement <1024 x i32> %load.buffer.i176, i32 968
  store i32 %13619, i32* %12373, align 4, !tbaa !400
  %13620 = extractelement <1024 x i32> %load.buffer.i176, i32 969
  store i32 %13620, i32* %12378, align 4, !tbaa !400
  %13621 = extractelement <1024 x i32> %load.buffer.i176, i32 970
  store i32 %13621, i32* %12383, align 4, !tbaa !400
  %13622 = extractelement <1024 x i32> %load.buffer.i176, i32 971
  store i32 %13622, i32* %12388, align 4, !tbaa !400
  %13623 = extractelement <1024 x i32> %load.buffer.i176, i32 972
  store i32 %13623, i32* %12393, align 4, !tbaa !400
  %13624 = extractelement <1024 x i32> %load.buffer.i176, i32 973
  store i32 %13624, i32* %12398, align 4, !tbaa !400
  %13625 = extractelement <1024 x i32> %load.buffer.i176, i32 974
  store i32 %13625, i32* %12403, align 4, !tbaa !400
  %13626 = extractelement <1024 x i32> %load.buffer.i176, i32 975
  store i32 %13626, i32* %12408, align 4, !tbaa !400
  %13627 = extractelement <1024 x i32> %load.buffer.i176, i32 976
  store i32 %13627, i32* %12413, align 4, !tbaa !400
  %13628 = extractelement <1024 x i32> %load.buffer.i176, i32 977
  store i32 %13628, i32* %12418, align 4, !tbaa !400
  %13629 = extractelement <1024 x i32> %load.buffer.i176, i32 978
  store i32 %13629, i32* %12423, align 4, !tbaa !400
  %13630 = extractelement <1024 x i32> %load.buffer.i176, i32 979
  store i32 %13630, i32* %12428, align 4, !tbaa !400
  %13631 = extractelement <1024 x i32> %load.buffer.i176, i32 980
  store i32 %13631, i32* %12433, align 4, !tbaa !400
  %13632 = extractelement <1024 x i32> %load.buffer.i176, i32 981
  store i32 %13632, i32* %12438, align 4, !tbaa !400
  %13633 = extractelement <1024 x i32> %load.buffer.i176, i32 982
  store i32 %13633, i32* %12443, align 4, !tbaa !400
  %13634 = extractelement <1024 x i32> %load.buffer.i176, i32 983
  store i32 %13634, i32* %12448, align 4, !tbaa !400
  %13635 = extractelement <1024 x i32> %load.buffer.i176, i32 984
  store i32 %13635, i32* %12453, align 4, !tbaa !400
  %13636 = extractelement <1024 x i32> %load.buffer.i176, i32 985
  store i32 %13636, i32* %12458, align 4, !tbaa !400
  %13637 = extractelement <1024 x i32> %load.buffer.i176, i32 986
  store i32 %13637, i32* %12463, align 4, !tbaa !400
  %13638 = extractelement <1024 x i32> %load.buffer.i176, i32 987
  store i32 %13638, i32* %12468, align 4, !tbaa !400
  %13639 = extractelement <1024 x i32> %load.buffer.i176, i32 988
  store i32 %13639, i32* %12473, align 4, !tbaa !400
  %13640 = extractelement <1024 x i32> %load.buffer.i176, i32 989
  store i32 %13640, i32* %12478, align 4, !tbaa !400
  %13641 = extractelement <1024 x i32> %load.buffer.i176, i32 990
  store i32 %13641, i32* %12483, align 4, !tbaa !400
  %13642 = extractelement <1024 x i32> %load.buffer.i176, i32 991
  store i32 %13642, i32* %12488, align 4, !tbaa !400
  %13643 = extractelement <1024 x i32> %load.buffer.i176, i32 992
  store i32 %13643, i32* %12493, align 4, !tbaa !400
  %13644 = extractelement <1024 x i32> %load.buffer.i176, i32 993
  store i32 %13644, i32* %12498, align 4, !tbaa !400
  %13645 = extractelement <1024 x i32> %load.buffer.i176, i32 994
  store i32 %13645, i32* %12503, align 4, !tbaa !400
  %13646 = extractelement <1024 x i32> %load.buffer.i176, i32 995
  store i32 %13646, i32* %12508, align 4, !tbaa !400
  %13647 = extractelement <1024 x i32> %load.buffer.i176, i32 996
  store i32 %13647, i32* %12513, align 4, !tbaa !400
  %13648 = extractelement <1024 x i32> %load.buffer.i176, i32 997
  store i32 %13648, i32* %12518, align 4, !tbaa !400
  %13649 = extractelement <1024 x i32> %load.buffer.i176, i32 998
  store i32 %13649, i32* %12523, align 4, !tbaa !400
  %13650 = extractelement <1024 x i32> %load.buffer.i176, i32 999
  store i32 %13650, i32* %12528, align 4, !tbaa !400
  %13651 = extractelement <1024 x i32> %load.buffer.i176, i32 1000
  store i32 %13651, i32* %12533, align 4, !tbaa !400
  %13652 = extractelement <1024 x i32> %load.buffer.i176, i32 1001
  store i32 %13652, i32* %12538, align 4, !tbaa !400
  %13653 = extractelement <1024 x i32> %load.buffer.i176, i32 1002
  store i32 %13653, i32* %12543, align 4, !tbaa !400
  %13654 = extractelement <1024 x i32> %load.buffer.i176, i32 1003
  store i32 %13654, i32* %12548, align 4, !tbaa !400
  %13655 = extractelement <1024 x i32> %load.buffer.i176, i32 1004
  store i32 %13655, i32* %12553, align 4, !tbaa !400
  %13656 = extractelement <1024 x i32> %load.buffer.i176, i32 1005
  store i32 %13656, i32* %12558, align 4, !tbaa !400
  %13657 = extractelement <1024 x i32> %load.buffer.i176, i32 1006
  store i32 %13657, i32* %12563, align 4, !tbaa !400
  %13658 = extractelement <1024 x i32> %load.buffer.i176, i32 1007
  store i32 %13658, i32* %12568, align 4, !tbaa !400
  %13659 = extractelement <1024 x i32> %load.buffer.i176, i32 1008
  store i32 %13659, i32* %12573, align 4, !tbaa !400
  %13660 = extractelement <1024 x i32> %load.buffer.i176, i32 1009
  store i32 %13660, i32* %12578, align 4, !tbaa !400
  %13661 = extractelement <1024 x i32> %load.buffer.i176, i32 1010
  store i32 %13661, i32* %12583, align 4, !tbaa !400
  %13662 = extractelement <1024 x i32> %load.buffer.i176, i32 1011
  store i32 %13662, i32* %12588, align 4, !tbaa !400
  %13663 = extractelement <1024 x i32> %load.buffer.i176, i32 1012
  store i32 %13663, i32* %12593, align 4, !tbaa !400
  %13664 = extractelement <1024 x i32> %load.buffer.i176, i32 1013
  store i32 %13664, i32* %12598, align 4, !tbaa !400
  %13665 = extractelement <1024 x i32> %load.buffer.i176, i32 1014
  store i32 %13665, i32* %12603, align 4, !tbaa !400
  %13666 = extractelement <1024 x i32> %load.buffer.i176, i32 1015
  store i32 %13666, i32* %12608, align 4, !tbaa !400
  %13667 = extractelement <1024 x i32> %load.buffer.i176, i32 1016
  store i32 %13667, i32* %12613, align 4, !tbaa !400
  %13668 = extractelement <1024 x i32> %load.buffer.i176, i32 1017
  store i32 %13668, i32* %12618, align 4, !tbaa !400
  %13669 = extractelement <1024 x i32> %load.buffer.i176, i32 1018
  store i32 %13669, i32* %12623, align 4, !tbaa !400
  %13670 = extractelement <1024 x i32> %load.buffer.i176, i32 1019
  store i32 %13670, i32* %12628, align 4, !tbaa !400
  %13671 = extractelement <1024 x i32> %load.buffer.i176, i32 1020
  store i32 %13671, i32* %12633, align 4, !tbaa !400
  %13672 = extractelement <1024 x i32> %load.buffer.i176, i32 1021
  store i32 %13672, i32* %12638, align 4, !tbaa !400
  %13673 = extractelement <1024 x i32> %load.buffer.i176, i32 1022
  store i32 %13673, i32* %12643, align 4, !tbaa !400
  %13674 = extractelement <1024 x i32> %load.buffer.i176, i32 1023
  store i32 %13674, i32* %12648, align 4, !tbaa !400
  %indvars.iv.next491 = add nuw nsw i64 %indvars.iv490, 1
  %.not199 = icmp eq i64 %indvars.iv.next491, 256
  br i1 %.not199, label %"end for color_hist_intm.s1.r7$y149", label %"for color_hist_intm.s1.r7$y148"

"end for color_hist_intm.s1.r7$y149":             ; preds = %"for color_hist_intm.s1.r7$y148"
  %indvars.iv.next493 = add nuw nsw i64 %indvars.iv492, 1
  %13675 = add nuw nsw i32 %color_hist_intm.s1.c.rebased144, 1
  %13676 = icmp eq i64 %indvars.iv.next493, %7227
  br i1 %13676, label %"consume color_hist_intm153", label %"for color_hist_intm.s1.c.rebased142"

"consume color_hist_intm153":                     ; preds = %"end for color_hist_intm.s1.r7$y149"
  %t57154 = sub i32 %7006, %7183
  %13677 = icmp sgt i32 %7007, 0
  %13678 = sext i32 %7219 to i64
  %13679 = bitcast i8* %6999 to i32*
  br i1 %13677, label %"for BINS.s0.c.rebased156.us.preheader", label %call_destructor.exit433, !prof !396

"for BINS.s0.c.rebased156.us.preheader":          ; preds = %"consume color_hist_intm153"
  %13680 = zext i32 %7007 to i64
  br label %"for BINS.s0.c.rebased156.us"

"for BINS.s0.c.rebased156.us":                    ; preds = %"for BINS.s0.c.rebased156.us.preheader", %"end for BINS.s0.x.rebased163.loopexit.us"
  %indvars.iv499 = phi i64 [ 0, %"for BINS.s0.c.rebased156.us.preheader" ], [ %indvars.iv.next500, %"end for BINS.s0.x.rebased163.loopexit.us" ]
  %BINS.s0.c.rebased158.us = phi i32 [ 0, %"for BINS.s0.c.rebased156.us.preheader" ], [ %13708, %"end for BINS.s0.x.rebased163.loopexit.us" ]
  %13681 = trunc i64 %indvars.iv499 to i32
  %t62160.us = mul i32 %7011, %13681
  %13682 = mul nsw i32 %BINS.s0.c.rebased158.us, %a38
  %t60161.us = add nsw i32 %t57154, %13682
  %13683 = sext i32 %t62160.us to i64
  %13684 = sext i32 %t60161.us to i64
  br label %"for BINS.s0.x.rebased162.us"

"for BINS.s0.x.rebased162.us":                    ; preds = %"for BINS.s0.c.rebased156.us", %"consume color_hist170.us"
  %indvars.iv496 = phi i64 [ 0, %"for BINS.s0.c.rebased156.us" ], [ %indvars.iv.next497, %"consume color_hist170.us" ]
  %13685 = add nsw i64 %indvars.iv496, %13684
  br label %"for color_hist.s1.r7$x167.us"

"for color_hist.s1.r7$x167.us":                   ; preds = %"for color_hist.s1.r7$x167.us", %"for BINS.s0.x.rebased162.us"
  %indvars.iv494 = phi i64 [ 0, %"for BINS.s0.x.rebased162.us" ], [ %indvars.iv.next495.3, %"for color_hist.s1.r7$x167.us" ]
  %color_hist187.sroa.126.1.us = phi <16 x i32> [ zeroinitializer, %"for BINS.s0.x.rebased162.us" ], [ %color_hist187.sroa.126.4092.vec.insert.us.3, %"for color_hist.s1.r7$x167.us" ]
  %color_hist187.sroa.126.4092.vec.extract.us = extractelement <16 x i32> %color_hist187.sroa.126.1.us, i32 15
  %13686 = mul nsw i64 %indvars.iv494, %13678
  %13687 = add nsw i64 %13686, %13685
  %13688 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %13687
  %13689 = load i32, i32* %13688, align 4, !tbaa !400
  %13690 = add nsw i32 %13689, %color_hist187.sroa.126.4092.vec.extract.us
  %indvars.iv.next495 = or i64 %indvars.iv494, 1
  %13691 = mul nsw i64 %indvars.iv.next495, %13678
  %13692 = add nsw i64 %13691, %13685
  %13693 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %13692
  %13694 = load i32, i32* %13693, align 4, !tbaa !400
  %13695 = add nsw i32 %13694, %13690
  %indvars.iv.next495.1 = or i64 %indvars.iv494, 2
  %13696 = mul nsw i64 %indvars.iv.next495.1, %13678
  %13697 = add nsw i64 %13696, %13685
  %13698 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %13697
  %13699 = load i32, i32* %13698, align 4, !tbaa !400
  %13700 = add nsw i32 %13699, %13695
  %indvars.iv.next495.2 = or i64 %indvars.iv494, 3
  %13701 = mul nsw i64 %indvars.iv.next495.2, %13678
  %13702 = add nsw i64 %13701, %13685
  %13703 = getelementptr inbounds i32, i32* %color_hist_intm111, i64 %13702
  %13704 = load i32, i32* %13703, align 4, !tbaa !400
  %13705 = add nsw i32 %13704, %13700
  %color_hist187.sroa.126.4092.vec.insert.us.3 = insertelement <16 x i32> %color_hist187.sroa.126.1.us, i32 %13705, i32 15
  %indvars.iv.next495.3 = add nuw nsw i64 %indvars.iv494, 4
  %.not197.us.3 = icmp eq i64 %indvars.iv.next495.3, 1024
  br i1 %.not197.us.3, label %"consume color_hist170.us", label %"for color_hist.s1.r7$x167.us"

"consume color_hist170.us":                       ; preds = %"for color_hist.s1.r7$x167.us"
  %13706 = add nsw i64 %indvars.iv496, %13683
  %13707 = getelementptr inbounds i32, i32* %13679, i64 %13706
  store i32 %13705, i32* %13707, align 4, !tbaa !402
  %indvars.iv.next497 = add nuw nsw i64 %indvars.iv496, 1
  %.not198.us = icmp eq i64 %indvars.iv.next497, %13680
  br i1 %.not198.us, label %"end for BINS.s0.x.rebased163.loopexit.us", label %"for BINS.s0.x.rebased162.us"

"end for BINS.s0.x.rebased163.loopexit.us":       ; preds = %"consume color_hist170.us"
  %indvars.iv.next500 = add nuw nsw i64 %indvars.iv499, 1
  %13708 = add nuw nsw i32 %BINS.s0.c.rebased158.us, 1
  %.not196.us = icmp eq i64 %indvars.iv.next500, %7227
  br i1 %.not196.us, label %call_destructor.exit433, label %"for BINS.s0.c.rebased156.us"

call_destructor.exit433:                          ; preds = %"end for BINS.s0.x.rebased163.loopexit.us", %"consume color_hist_intm153", %"assert succeeded110"
  call void @halide_free(i8* null, i8* nonnull %7217) #14
  br label %call_destructor.exit221

"for color_hist_intm.s0.i.i.preheader.us.1":      ; preds = %"end for color_hist_intm.s0.i.i40.us"
  %13709 = trunc i64 %indvars.iv to i32
  %13710 = or i32 %13709, 1
  %13711 = mul i32 %a13, %13710
  %13712 = add i32 %244, %13711
  %13713 = sext i32 %13712 to i64
  %13714 = add nsw i64 %234, %13713
  %13715 = shl nsw i64 %13714, 2
  %scevgep.1 = getelementptr i8, i8* %229, i64 %13715
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(1) %scevgep.1, i8 0, i64 %238, i1 false)
  br label %"end for color_hist_intm.s0.i.i.us.1"

"end for color_hist_intm.s0.i.i.us.1":            ; preds = %"for color_hist_intm.s0.i.i.preheader.us.1", %"end for color_hist_intm.s0.i.i40.us"
  br i1 %233, label %"for color_hist_intm.s0.i.i39.preheader.us.1", label %"end for color_hist_intm.s0.i.i40.us.1", !prof !396

"for color_hist_intm.s0.i.i39.preheader.us.1":    ; preds = %"end for color_hist_intm.s0.i.i.us.1"
  %t50.us.1 = add nsw i32 %t46.us, %247
  %13716 = sext i32 %t50.us.1 to i64
  %13717 = getelementptr inbounds i32, i32* %241, i64 %13716
  %13718 = bitcast i32* %13717 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(4096) %13718, i8 0, i64 4096, i1 false)
  br label %"end for color_hist_intm.s0.i.i40.us.1"

"end for color_hist_intm.s0.i.i40.us.1":          ; preds = %"for color_hist_intm.s0.i.i39.preheader.us.1", %"end for color_hist_intm.s0.i.i.us.1"
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %13719 = add nuw nsw i32 %color_hist_intm.s0.c.rebased.us, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %"end for color_hist_intm.s0.c.rebased.us.unr-lcssa", label %"for color_hist_intm.s0.c.rebased.us"

"for color_hist_intm.s0.i.i132.preheader.us.1":   ; preds = %"end for color_hist_intm.s0.i.i138.us"
  %13720 = trunc i64 %indvars.iv488 to i32
  %13721 = or i32 %13720, 1
  %13722 = mul i32 %a38, %13721
  %13723 = add i32 %7232, %13722
  %13724 = sext i32 %13723 to i64
  %13725 = add nsw i64 %7222, %13724
  %13726 = shl nsw i64 %13725, 2
  %scevgep484.1 = getelementptr i8, i8* %7217, i64 %13726
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(1) %scevgep484.1, i8 0, i64 %7226, i1 false)
  br label %"end for color_hist_intm.s0.i.i133.us.1"

"end for color_hist_intm.s0.i.i133.us.1":         ; preds = %"for color_hist_intm.s0.i.i132.preheader.us.1", %"end for color_hist_intm.s0.i.i138.us"
  br i1 %7221, label %"for color_hist_intm.s0.i.i137.preheader.us.1", label %"end for color_hist_intm.s0.i.i138.us.1", !prof !396

"for color_hist_intm.s0.i.i137.preheader.us.1":   ; preds = %"end for color_hist_intm.s0.i.i133.us.1"
  %t50136.us.1 = add nsw i32 %t46127.us, %7235
  %13727 = sext i32 %t50136.us.1 to i64
  %13728 = getelementptr inbounds i32, i32* %7229, i64 %13727
  %13729 = bitcast i32* %13728 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(4096) %13729, i8 0, i64 4096, i1 false)
  br label %"end for color_hist_intm.s0.i.i138.us.1"

"end for color_hist_intm.s0.i.i138.us.1":         ; preds = %"for color_hist_intm.s0.i.i137.preheader.us.1", %"end for color_hist_intm.s0.i.i133.us.1"
  %indvars.iv.next489.1 = add nuw nsw i64 %indvars.iv488, 2
  %13730 = add nuw nsw i32 %color_hist_intm.s0.c.rebased130.us, 2
  %niter534.nsub.1 = add i64 %niter534, -2
  %niter534.ncmp.1 = icmp eq i64 %niter534.nsub.1, 0
  br i1 %niter534.ncmp.1, label %"end for color_hist_intm.s0.c.rebased129.us.unr-lcssa", label %"for color_hist_intm.s0.c.rebased128.us"
}

define i32 @histogram_argv(i8** nocapture readonly %0) local_unnamed_addr {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 8
  %3 = getelementptr i8*, i8** %0, i64 1
  %4 = bitcast i8** %3 to %struct.halide_buffer_t**
  %5 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %4, align 8
  %6 = tail call i32 @histogram(%struct.halide_buffer_t* %2, %struct.halide_buffer_t* %5) #17
  ret i32 %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @histogram_metadata() local_unnamed_addr #10 {
entry:
  ret %struct.halide_filter_metadata_t* @histogram_metadata_storage
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.cttz.i64(i64, i1 immarg) #7

define <1024 x i32> @hydride.node.histogram_bitserial_depth1_rafae.0(<1024 x i32> %arg, <1024 x i32> %arg.1) local_unnamed_addr {
entry:
  %pimAlloc = tail call i32 @pimAlloc(i32 0, i64 1024, i32 2)
  %0 = alloca <1024 x i32>, align 4096
  store <1024 x i32> %arg.1, <1024 x i32>* %0, align 4096
  %1 = bitcast <1024 x i32>* %0 to i8*
  %pimHostToDevice = call i32 @pimCopyHostToDevice(i8* nonnull %1, i32 %pimAlloc, i64 0, i64 0)
  %pimAssocAlloc = call i32 @pimAllocAssociated(i32 %pimAlloc, i32 2)
  %pimInst = call i32 @pimMinScalar(i32 %pimAlloc, i32 %pimAssocAlloc, i64 255)
  %pimAssocAlloc1 = call i32 @pimAllocAssociated(i32 %pimAlloc, i32 2)
  %pimInst4 = call i32 @pimMaxScalar(i32 %pimAssocAlloc, i32 %pimAssocAlloc1, i64 0)
  %pimAssocAlloc5 = call i32 @pimAllocAssociated(i32 %pimAlloc, i32 2)
  %2 = alloca <1024 x i32>, align 4096
  store <1024 x i32> %arg, <1024 x i32>* %2, align 4096
  %3 = bitcast <1024 x i32>* %2 to i8*
  %pimHostToDevice6 = call i32 @pimCopyHostToDevice(i8* nonnull %3, i32 %pimAssocAlloc5, i64 0, i64 0)
  %pimAssocAlloc7 = call i32 @pimAllocAssociated(i32 %pimAlloc, i32 2)
  %pimInst8 = call i32 @pimAdd(i32 %pimAssocAlloc1, i32 %pimAssocAlloc5, i32 %pimAssocAlloc7)
  %4 = alloca <1024 x i32>, align 4096
  %5 = bitcast <1024 x i32>* %4 to i8*
  %pimDeviceToHost = call i32 @pimCopyDeviceToHost(i32 %pimAssocAlloc7, i8* nonnull %5, i64 0, i64 0)
  %load.buffer = load <1024 x i32>, <1024 x i32>* %4, align 4096
  %pimFree = call i32 @pimFree(i32 %pimAssocAlloc5)
  %pimFree9 = call i32 @pimFree(i32 %pimAssocAlloc7)
  %pimFree10 = call i32 @pimFree(i32 %pimAssocAlloc1)
  %pimFree11 = call i32 @pimFree(i32 %pimAlloc)
  %pimFree12 = call i32 @pimFree(i32 %pimAssocAlloc)
  ret <1024 x i32> %load.buffer
}

declare i32 @pimAlloc(i32, i64, i32) local_unnamed_addr

declare i32 @pimCopyHostToDevice(i8*, i32, i64, i64) local_unnamed_addr

declare i32 @pimAllocAssociated(i32, i32) local_unnamed_addr

declare i32 @pimMinScalar(i32, i32, i64) local_unnamed_addr

declare i32 @pimMaxScalar(i32, i32, i64) local_unnamed_addr

declare i32 @pimAdd(i32, i32, i32) local_unnamed_addr

declare i32 @pimCopyDeviceToHost(i32, i8*, i64, i64) local_unnamed_addr

declare i32 @pimFree(i32) local_unnamed_addr

define <1024 x i32> @hydride.node.histogram_bitserial_depth1_rafae.1(<1024 x i32> %arg) local_unnamed_addr {
entry:
  %pimAlloc = tail call i32 @pimAlloc(i32 0, i64 1024, i32 2)
  %0 = alloca <1024 x i32>, align 4096
  store <1024 x i32> %arg, <1024 x i32>* %0, align 4096
  %1 = bitcast <1024 x i32>* %0 to i8*
  %pimHostToDevice = call i32 @pimCopyHostToDevice(i8* nonnull %1, i32 %pimAlloc, i64 0, i64 0)
  %pimAssocAlloc = call i32 @pimAllocAssociated(i32 %pimAlloc, i32 2)
  %pimInst = call i32 @pimAddScalar(i32 %pimAlloc, i32 %pimAssocAlloc, i64 1)
  %2 = alloca <1024 x i32>, align 4096
  %3 = bitcast <1024 x i32>* %2 to i8*
  %pimDeviceToHost = call i32 @pimCopyDeviceToHost(i32 %pimAssocAlloc, i8* nonnull %3, i64 0, i64 0)
  %load.buffer = load <1024 x i32>, <1024 x i32>* %2, align 4096
  %pimFree = call i32 @pimFree(i32 %pimAssocAlloc)
  %pimFree1 = call i32 @pimFree(i32 %pimAlloc)
  ret <1024 x i32> %load.buffer
}

declare i32 @pimAddScalar(i32, i32, i64) local_unnamed_addr

define void @pimInitDeviceWrapper() local_unnamed_addr {
entry:
  %pimInit = tail call i32 @pimCreateDevice(i32 1, i32 4, i32 128, i32 32, i32 1024, i32 8192)
  ret void
}

declare i32 @pimCreateDevice(i32, i32, i32, i32, i32, i32) local_unnamed_addr

define void @pimShowStatsWrapper() local_unnamed_addr {
entry:
  tail call void @pimShowStats()
  ret void
}

declare void @pimShowStats() local_unnamed_addr

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.abs.i64(i64, i1 immarg) #7

; Function Attrs: nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32>, <8 x i32*>, i32 immarg, <8 x i1>) #11

; Function Attrs: nofree nosync nounwind readonly willreturn
declare <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*>, i32 immarg, <4 x i1>, <4 x i32>) #12

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i64 @llvm.vector.reduce.add.v4i64(<4 x i64>) #13

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { "reciprocal-estimates"="none" }
attributes #10 = { norecurse nounwind readnone willreturn }
attributes #11 = { nofree nosync nounwind willreturn writeonly }
attributes #12 = { nofree nosync nounwind readonly willreturn }
attributes #13 = { nofree nosync nounwind readnone willreturn }
attributes #14 = { nobuiltin nounwind "no-builtins" }
attributes #15 = { nounwind }
attributes #16 = { nobuiltin "no-builtins" }
attributes #17 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"cascadelake"}
!4 = !{i32 2, !"halide_mattrs", !"+fma,+f16c,+avx512f,+avx512cd,+avx512vl,+avx512bw,+avx512dq"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!12, !12, i64 0}
!15 = !{!16, !16, i64 0}
!16 = !{!"bool", !12, i64 0}
!17 = !{i8 0, i8 2}
!18 = !{!19, !19, i64 0}
!19 = !{!"long", !12, i64 0}
!20 = !{!21, !11, i64 0}
!21 = !{!"_ZTSN6Halide7Runtime8Internal4workE", !22, i64 0, !11, i64 56, !11, i64 64, !11, i64 72, !23, i64 80, !11, i64 88, !23, i64 96, !11, i64 104, !23, i64 112, !23, i64 116, !23, i64 120, !16, i64 124}
!22 = !{!"_ZTS22halide_parallel_task_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !23, i64 32, !23, i64 36, !23, i64 40, !23, i64 44, !16, i64 48}
!23 = !{!"int", !12, i64 0}
!24 = !{!21, !23, i64 36}
!25 = !{!21, !23, i64 40}
!26 = !{!21, !16, i64 48}
!27 = !{!21, !11, i64 24}
!28 = !{!21, !23, i64 32}
!29 = !{!21, !11, i64 8}
!30 = !{!21, !23, i64 44}
!31 = !{!21, !11, i64 16}
!32 = !{!21, !11, i64 56}
!33 = !{!21, !11, i64 104}
!34 = !{!21, !23, i64 116}
!35 = !{!21, !23, i64 112}
!36 = !{!21, !23, i64 120}
!37 = !{!21, !16, i64 124}
!38 = !{!21, !11, i64 72}
!39 = !{!21, !23, i64 80}
!40 = !{!21, !11, i64 88}
!41 = !{!42, !42, i64 0}
!42 = !{!"vtable pointer", !13, i64 0}
!43 = !{!44, !11, i64 8}
!44 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE", !11, i64 8}
!45 = !{!46, !16, i64 2121}
!46 = !{!"_ZTSN6Halide7Runtime8Internal12work_queue_tE", !47, i64 0, !23, i64 8, !23, i64 12, !11, i64 16, !23, i64 24, !23, i64 28, !23, i64 32, !48, i64 40, !48, i64 48, !48, i64 56, !23, i64 64, !23, i64 68, !12, i64 72, !16, i64 2120, !16, i64 2121, !23, i64 2124}
!47 = !{!"_ZTS12halide_mutex", !12, i64 0}
!48 = !{!"_ZTS11halide_cond", !12, i64 0}
!49 = distinct !{!49, !50}
!50 = !{!"llvm.loop.mustprogress"}
!51 = !{!46, !23, i64 8}
!52 = !{!46, !23, i64 24}
!53 = !{!46, !23, i64 2124}
!54 = !{!46, !23, i64 28}
!55 = distinct !{!55, !50}
!56 = !{!21, !23, i64 96}
!57 = !{!46, !11, i64 16}
!58 = !{!21, !11, i64 64}
!59 = !{!46, !23, i64 68}
!60 = !{!46, !23, i64 32}
!61 = distinct !{!61, !50}
!62 = distinct !{!62, !50}
!63 = !{!46, !16, i64 2120}
!64 = distinct !{!64, !50}
!65 = !{!66, !11, i64 0}
!66 = !{!"_ZTS26halide_semaphore_acquire_t", !11, i64 0, !23, i64 8}
!67 = !{!66, !23, i64 8}
!68 = distinct !{!68, !50}
!69 = !{!46, !23, i64 64}
!70 = distinct !{!70, !50}
!71 = distinct !{!71, !50}
!72 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 8, !10, i64 80, i64 4, !73, i64 88, i64 8, !10, i64 96, i64 4, !73, i64 104, i64 8, !10, i64 112, i64 4, !73, i64 116, i64 4, !73, i64 120, i64 4, !73, i64 124, i64 1, !15}
!73 = !{!23, !23, i64 0}
!74 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 28, i64 4, !73, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 1, !15, i64 48, i64 8, !10, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 4, !73, i64 80, i64 8, !10, i64 88, i64 4, !73, i64 96, i64 8, !10, i64 104, i64 4, !73, i64 108, i64 4, !73, i64 112, i64 4, !73, i64 116, i64 1, !15}
!75 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 32, i64 8, !10, i64 40, i64 4, !73, i64 48, i64 8, !10, i64 56, i64 4, !73, i64 60, i64 4, !73, i64 64, i64 4, !73, i64 68, i64 1, !15}
!76 = !{i64 0, i64 8, !10, i64 8, i64 4, !73, i64 12, i64 4, !73, i64 16, i64 4, !73, i64 20, i64 1, !15}
!77 = distinct !{!77, !50}
!78 = distinct !{!78, !50}
!79 = !{!80, !11, i64 144}
!80 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization10queue_dataE", !81, i64 0, !84, i64 136, !11, i64 144, !84, i64 152}
!81 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization13thread_parkerE", !82, i64 0, !83, i64 64, !16, i64 128}
!82 = !{!"_ZTS15pthread_mutex_t", !12, i64 0}
!83 = !{!"_ZTS14pthread_cond_t", !12, i64 0}
!84 = !{!"long long", !12, i64 0}
!85 = !{!86, !11, i64 16}
!86 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11hash_bucketE", !87, i64 0, !11, i64 8, !11, i64 16}
!87 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization9word_lockE", !84, i64 0}
!88 = distinct !{!88, !50}
!89 = !{!80, !84, i64 152}
!90 = !{!81, !16, i64 128}
!91 = distinct !{!91, !50}
!92 = !{!93, !11, i64 152}
!93 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20word_lock_queue_dataE", !81, i64 0, !11, i64 136, !11, i64 144, !11, i64 152}
!94 = !{!93, !11, i64 136}
!95 = !{!93, !11, i64 144}
!96 = distinct !{!96, !50}
!97 = distinct !{!97, !50}
!98 = distinct !{!98, !50}
!99 = !{!100, !11, i64 8}
!100 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE", !11, i64 8, !11, i64 16}
!101 = !{!100, !11, i64 16}
!102 = !{!103, !11, i64 8}
!103 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE", !11, i64 8, !11, i64 16}
!104 = !{!103, !11, i64 16}
!105 = !{!80, !84, i64 136}
!106 = !{!107, !16, i64 0}
!107 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization15validate_actionE", !16, i64 0, !84, i64 8}
!108 = !{!107, !84, i64 8}
!109 = !{!86, !11, i64 8}
!110 = !{!84, !84, i64 0}
!111 = !{!112, !11, i64 0}
!112 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11bucket_pairE", !11, i64 0, !11, i64 8}
!113 = distinct !{!113, !50}
!114 = !{!112, !11, i64 8}
!115 = !{!116, !11, i64 0}
!116 = !{!"_ZTSN6Halide7Runtime8Internal14spawned_threadE", !11, i64 0, !11, i64 8, !19, i64 16}
!117 = !{!116, !11, i64 8}
!118 = !{!116, !19, i64 16}
!119 = !{!22, !23, i64 40}
!120 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15}
!121 = distinct !{!121, !50}
!122 = distinct !{!122, !50}
!123 = distinct !{!123, !50}
!124 = !{!125, !11, i64 8}
!125 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE", !11, i64 8, !11, i64 16}
!126 = !{!125, !11, i64 16}
!127 = !{!128, !11, i64 0}
!128 = !{!"_ZTS18halide_mutex_array", !11, i64 0}
!129 = distinct !{!129, !50}
!130 = !{!131, !134, i64 34}
!131 = !{!"_ZTS20halide_trace_event_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !132, i64 32, !135, i64 36, !23, i64 40, !23, i64 44, !23, i64 48}
!132 = !{!"_ZTS13halide_type_t", !133, i64 0, !12, i64 1, !134, i64 2}
!133 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!134 = !{!"short", !12, i64 0}
!135 = !{!"_ZTS25halide_trace_event_code_t", !12, i64 0}
!136 = !{!132, !12, i64 1}
!137 = !{!131, !23, i64 48}
!138 = !{!131, !11, i64 0}
!139 = !{!131, !11, i64 24}
!140 = !{!141, !23, i64 0}
!141 = !{!"_ZTSN6Halide7Runtime8Internal23SharedExclusiveSpinLockE", !23, i64 0}
!142 = !{!143, !23, i64 4}
!143 = !{!"_ZTSN6Halide7Runtime8Internal11TraceBufferE", !141, i64 0, !23, i64 4, !23, i64 8, !12, i64 12}
!144 = !{!143, !23, i64 8}
!145 = distinct !{!145, !50}
!146 = !{!147, !23, i64 0}
!147 = !{!"_ZTS21halide_trace_packet_t", !23, i64 0, !23, i64 4, !132, i64 8, !135, i64 12, !23, i64 16, !23, i64 20, !23, i64 24}
!148 = !{!147, !23, i64 4}
!149 = !{!131, !11, i64 16}
!150 = !{!131, !11, i64 8}
!151 = !{!147, !23, i64 24}
!152 = !{!147, !134, i64 10}
!153 = distinct !{!153, !50}
!154 = !{!131, !135, i64 36}
!155 = !{!131, !12, i64 33}
!156 = distinct !{!156, !50}
!157 = !{!131, !23, i64 44}
!158 = distinct !{!158, !50, !159}
!159 = !{!"llvm.loop.peeled.count", i32 1}
!160 = !{!131, !133, i64 32}
!161 = !{!134, !134, i64 0}
!162 = !{!163, !163, i64 0}
!163 = !{!"float", !12, i64 0}
!164 = !{!165, !165, i64 0}
!165 = !{!"double", !12, i64 0}
!166 = distinct !{!166, !50, !159}
!167 = distinct !{!167, !50}
!168 = !{!131, !23, i64 40}
!169 = distinct !{!169, !50}
!170 = distinct !{!170, !50}
!171 = distinct !{!171, !50}
!172 = !{!173, !11, i64 16}
!173 = !{!"_ZTS15halide_buffer_t", !84, i64 0, !11, i64 8, !11, i64 16, !84, i64 24, !132, i64 32, !23, i64 36, !11, i64 40, !11, i64 48}
!174 = !{!173, !84, i64 0}
!175 = !{!173, !23, i64 36}
!176 = !{!173, !11, i64 40}
!177 = !{i64 0, i64 4, !73, i64 4, i64 4, !73, i64 8, i64 4, !73, i64 12, i64 4, !73}
!178 = !{!179, !23, i64 4}
!179 = !{!"_ZTS18halide_dimension_t", !23, i64 0, !23, i64 4, !23, i64 8, !23, i64 12}
!180 = distinct !{!180, !50}
!181 = !{!179, !23, i64 0}
!182 = !{!179, !23, i64 8}
!183 = distinct !{!183, !50, !184}
!184 = !{!"llvm.loop.isvectorized", i32 1}
!185 = distinct !{!185, !186}
!186 = !{!"llvm.loop.unroll.disable"}
!187 = distinct !{!187, !50, !188, !184}
!188 = !{!"llvm.loop.unroll.runtime.disable"}
!189 = !{!190, !134, i64 0}
!190 = !{!"_ZTSN6Halide7Runtime8Internal18halide_tiff_headerE", !134, i64 0, !134, i64 2, !23, i64 4, !134, i64 8, !12, i64 10, !23, i64 190, !12, i64 194, !12, i64 202}
!191 = !{!190, !134, i64 2}
!192 = !{!190, !23, i64 4}
!193 = !{!190, !134, i64 8}
!194 = !{!195, !134, i64 0}
!195 = !{!"_ZTSN6Halide7Runtime8Internal8tiff_tagE", !134, i64 0, !134, i64 2, !23, i64 4, !12, i64 8}
!196 = !{!195, !134, i64 2}
!197 = !{!195, !23, i64 4}
!198 = distinct !{!198, !50}
!199 = distinct !{!199, !50}
!200 = distinct !{!200, !50}
!201 = distinct !{!201, !50}
!202 = distinct !{!202, !50}
!203 = !{!204}
!204 = distinct !{!204, !205}
!205 = distinct !{!205, !"LVerDomain"}
!206 = !{!207}
!207 = distinct !{!207, !205}
!208 = distinct !{!208, !50, !184}
!209 = distinct !{!209, !186}
!210 = distinct !{!210, !186}
!211 = distinct !{!211, !50, !184}
!212 = distinct !{!212, !186}
!213 = distinct !{!213, !50, !184}
!214 = distinct !{!214, !50, !184}
!215 = distinct !{!215, !50, !188, !184}
!216 = distinct !{!216, !50, !184}
!217 = distinct !{!217, !50, !188, !184}
!218 = distinct !{!218, !50, !184}
!219 = distinct !{!219, !50, !188, !184}
!220 = distinct !{!220, !50}
!221 = distinct !{!221, !50, !184}
!222 = distinct !{!222, !50, !188, !184}
!223 = distinct !{!223, !50}
!224 = distinct !{!224, !50}
!225 = distinct !{!225, !50}
!226 = distinct !{!226, !50}
!227 = !{!228, !11, i64 0}
!228 = !{!"_ZTSN6Halide7Runtime8Internal10CacheEntryE", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !19, i64 32, !11, i64 40, !23, i64 48, !23, i64 52, !23, i64 56, !23, i64 60, !11, i64 64, !11, i64 72, !84, i64 80, !16, i64 88}
!229 = distinct !{!229, !50}
!230 = !{!228, !23, i64 56}
!231 = !{!228, !11, i64 24}
!232 = !{!228, !11, i64 72}
!233 = distinct !{!233, !50}
!234 = distinct !{!234, !50}
!235 = !{!236, !84, i64 0}
!236 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !84, i64 0, !84, i64 8, !84, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !84, i64 408}
!237 = !{!236, !84, i64 8}
!238 = !{!236, !84, i64 408}
!239 = distinct !{!239, !50}
!240 = !{!236, !84, i64 16}
!241 = distinct !{!241, !50, !184}
!242 = distinct !{!242, !50, !188, !184}
!243 = distinct !{!243, !50}
!244 = distinct !{!244, !186}
!245 = distinct !{!245, !50}
!246 = distinct !{!246, !50}
!247 = distinct !{!247, !50}
!248 = !{i64 0, i64 8, !110, i64 8, i64 8, !110, i64 16, i64 8, !110, i64 24, i64 128, !14, i64 152, i64 128, !14, i64 280, i64 128, !14, i64 408, i64 8, !110}
!249 = distinct !{!249, !50}
!250 = !{!179, !23, i64 12}
!251 = !{!228, !11, i64 16}
!252 = !{!228, !19, i64 32}
!253 = !{!228, !23, i64 48}
!254 = !{!228, !23, i64 52}
!255 = !{!228, !23, i64 60}
!256 = !{!228, !11, i64 64}
!257 = !{!228, !11, i64 40}
!258 = distinct !{!258, !50}
!259 = distinct !{!259, !50}
!260 = distinct !{!260, !50}
!261 = !{!228, !16, i64 88}
!262 = !{!228, !84, i64 80}
!263 = !{i64 0, i64 8, !110, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !110, i64 32, i64 1, !264, i64 33, i64 1, !14, i64 34, i64 2, !161, i64 36, i64 4, !73, i64 40, i64 8, !10, i64 48, i64 8, !10}
!264 = !{!133, !133, i64 0}
!265 = distinct !{!265, !50}
!266 = distinct !{!266, !186}
!267 = distinct !{!267, !50}
!268 = !{!228, !11, i64 8}
!269 = distinct !{!269, !50}
!270 = distinct !{!270, !50, !184}
!271 = distinct !{!271, !50, !188, !184}
!272 = distinct !{!272, !50, !184}
!273 = distinct !{!273, !50, !188, !184}
!274 = distinct !{!274, !50}
!275 = distinct !{!275, !50}
!276 = distinct !{!276, !50}
!277 = distinct !{!277, !50}
!278 = distinct !{!278, !50}
!279 = distinct !{!279, !50, !184}
!280 = distinct !{!280, !50, !188, !184}
!281 = distinct !{!281, !50, !184}
!282 = distinct !{!282, !50, !188, !184}
!283 = distinct !{!283, !50}
!284 = !{!285, !23, i64 8}
!285 = !{!"_ZTSN6Halide7Runtime8Internal16CacheBlockHeaderE", !11, i64 0, !23, i64 8}
!286 = !{!285, !11, i64 0}
!287 = distinct !{!287, !50}
!288 = distinct !{!288, !186}
!289 = distinct !{!289, !50}
!290 = distinct !{!290, !50}
!291 = distinct !{!291, !50}
!292 = distinct !{!292, !50, !184}
!293 = distinct !{!293, !50, !188, !184}
!294 = distinct !{!294, !50, !184}
!295 = distinct !{!295, !50, !188, !184}
!296 = distinct !{!296, !50}
!297 = distinct !{!297, !50}
!298 = distinct !{!298, !50}
!299 = distinct !{!299, !50}
!300 = distinct !{!300, !50}
!301 = distinct !{!301, !50}
!302 = distinct !{!302, !50}
!303 = distinct !{!303, !50}
!304 = distinct !{!304, !50}
!305 = !{!132, !133, i64 0}
!306 = !{!132, !134, i64 2}
!307 = !{!173, !11, i64 8}
!308 = !{!173, !84, i64 24}
!309 = distinct !{!309, !50}
!310 = !{!311, !11, i64 0}
!311 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 8}
!312 = distinct !{!312, !50}
!313 = !{!311, !11, i64 8}
!314 = !{!315, !11, i64 120}
!315 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!316 = !{!317, !11, i64 48}
!317 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!318 = !{!317, !11, i64 40}
!319 = !{!317, !11, i64 56}
!320 = !{!317, !11, i64 0}
!321 = !{!317, !11, i64 16}
!322 = !{!317, !11, i64 8}
!323 = !{!317, !11, i64 32}
!324 = !{!317, !11, i64 24}
!325 = !{!317, !11, i64 64}
!326 = !{!317, !11, i64 72}
!327 = distinct !{!327, !50, !184}
!328 = distinct !{!328, !50, !188, !184}
!329 = distinct !{!329, !50, !184}
!330 = distinct !{!330, !50, !188, !184}
!331 = !{!317, !11, i64 112}
!332 = !{!317, !11, i64 120}
!333 = !{!317, !11, i64 80}
!334 = !{!317, !11, i64 88}
!335 = !{!317, !11, i64 96}
!336 = !{!317, !11, i64 104}
!337 = !{i32 22, i32 33}
!338 = !{!339, !11, i64 40}
!339 = !{!"_ZTS21halide_profiler_state", !47, i64 0, !23, i64 8, !23, i64 12, !23, i64 16, !23, i64 20, !11, i64 24, !11, i64 32, !11, i64 40}
!340 = !{!339, !23, i64 16}
!341 = !{!342, !84, i64 0}
!342 = !{!"_ZTS30halide_profiler_pipeline_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !23, i64 72, !23, i64 76, !23, i64 80, !23, i64 84, !23, i64 88}
!343 = !{!342, !23, i64 80}
!344 = !{!342, !84, i64 32}
!345 = !{!342, !84, i64 40}
!346 = !{!342, !11, i64 48}
!347 = !{!342, !23, i64 84}
!348 = !{!342, !23, i64 88}
!349 = !{!342, !84, i64 16}
!350 = !{!342, !84, i64 24}
!351 = !{!342, !23, i64 72}
!352 = !{!342, !11, i64 56}
!353 = distinct !{!353, !50}
!354 = !{!355, !84, i64 32}
!355 = !{!"_ZTS26halide_profiler_func_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !84, i64 48, !11, i64 56, !23, i64 64}
!356 = !{!355, !84, i64 0}
!357 = !{!355, !11, i64 56}
!358 = distinct !{!358, !50}
!359 = distinct !{!359, !50}
!360 = distinct !{!360, !50}
!361 = !{!355, !84, i64 40}
!362 = !{!355, !84, i64 48}
!363 = distinct !{!363, !50}
!364 = !{!355, !84, i64 16}
!365 = distinct !{!365, !50}
!366 = !{!355, !23, i64 64}
!367 = distinct !{!367, !50}
!368 = !{!355, !84, i64 24}
!369 = distinct !{!369, !50}
!370 = distinct !{!370, !50}
!371 = !{!339, !11, i64 24}
!372 = !{!342, !11, i64 64}
!373 = distinct !{!373, !50}
!374 = !{!339, !23, i64 12}
!375 = distinct !{!375, !50}
!376 = !{!342, !23, i64 76}
!377 = distinct !{!377, !50}
!378 = distinct !{!378, !50}
!379 = !{!339, !11, i64 32}
!380 = !{!339, !23, i64 20}
!381 = !{!339, !23, i64 8}
!382 = distinct !{!382, !50}
!383 = distinct !{!383, !50}
!384 = distinct !{!384, !50}
!385 = distinct !{!385, !50}
!386 = !{!"branch_weights", i32 0, i32 1073741824}
!387 = !{!173, !133, i64 32}
!388 = !{!173, !12, i64 33}
!389 = !{!173, !134, i64 34}
!390 = !{i64 0, i64 4, !73, i64 4, i64 4, !73, i64 8, i64 4, !73}
!391 = !{i64 0, i64 4, !73, i64 4, i64 4, !73}
!392 = !{i64 0, i64 4, !73}
!393 = !{i64 0, i64 64}
!394 = !{!"branch_weights", i32 1073741824, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0}
!395 = !{!"branch_weights", i32 1073741824, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0}
!396 = !{!"branch_weights", i32 1073741824, i32 0}
!397 = !{!398, !398, i64 0}
!398 = !{!"IMG", !399, i64 0}
!399 = !{!"Halide buffer"}
!400 = !{!401, !401, i64 0}
!401 = !{!"color_hist_intm", !399, i64 0}
!402 = !{!403, !403, i64 0}
!403 = !{!"BINS", !399, i64 0}
