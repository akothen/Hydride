module name=tensor_add, target=x86-64-linux-avx-avx2-avx512-avx512_skylake-f16c-fma-sse41
external_plus_metadata func tensor_add (A, B, output) {
assert((uint64)reinterpret((halide_buffer_t *)output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("output"))
assert((uint64)reinterpret((halide_buffer_t *)B.buffer) != (uint64)0, halide_error_buffer_argument_is_null("B"))
assert((uint64)reinterpret((halide_buffer_t *)A.buffer) != (uint64)0, halide_error_buffer_argument_is_null("A"))
let A = (void *)_halide_buffer_get_host((halide_buffer_t *)A.buffer)
let A.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)A.buffer)
let A.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)A.buffer)
let A.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)A.buffer)
let A.min.0 = _halide_buffer_get_min((halide_buffer_t *)A.buffer, 0)
let A.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)A.buffer, 0)
let A.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)A.buffer, 0)
let A.min.1 = _halide_buffer_get_min((halide_buffer_t *)A.buffer, 1)
let A.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)A.buffer, 1)
let A.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)A.buffer, 1)
let B = (void *)_halide_buffer_get_host((halide_buffer_t *)B.buffer)
let B.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)B.buffer)
let B.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)B.buffer)
let B.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)B.buffer)
let B.min.0 = _halide_buffer_get_min((halide_buffer_t *)B.buffer, 0)
let B.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)B.buffer, 0)
let B.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)B.buffer, 0)
let B.min.1 = _halide_buffer_get_min((halide_buffer_t *)B.buffer, 1)
let B.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)B.buffer, 1)
let B.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)B.buffer, 1)
let output = (void *)_halide_buffer_get_host((halide_buffer_t *)output.buffer)
let output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)output.buffer)
let output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)output.buffer)
let output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)output.buffer)
let output.min.0 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 0)
let output.min.1 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)A.buffer)) {
 let t28 = max(output.extent.0, 1024) in (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)A.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)A.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 2, (halide_dimension_t *)make_struct((min(output.extent.0, 1024) + output.min.0) + -1024, t28, 1, 0, output.min.1, output.extent.1, t28, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)B.buffer)) {
 let t29 = max(output.extent.0, 1024) in (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)B.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)B.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 2, (halide_dimension_t *)make_struct((min(output.extent.0, 1024) + output.min.0) + -1024, t29, 1, 0, output.min.1, output.extent.1, t29, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer)) {
 let t30 = max(output.extent.0, 1024) in (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 2, (halide_dimension_t *)make_struct((min(output.extent.0, 1024) + output.min.0) + -1024, t30, 1, 0, output.min.1, output.extent.1, t30, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)A.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)B.buffer)))) {
 assert(A.type == (uint32)73728, halide_error_bad_type("Input buffer A", A.type, (uint32)73728))
 assert(A.dimensions == 2, halide_error_bad_dimensions("Input buffer A", A.dimensions, 2))
 assert(B.type == (uint32)73728, halide_error_bad_type("Input buffer B", B.type, (uint32)73728))
 assert(B.dimensions == 2, halide_error_bad_dimensions("Input buffer B", B.dimensions, 2))
 assert(output.type == (uint32)73728, halide_error_bad_type("Output buffer output", output.type, (uint32)73728))
 assert(output.dimensions == 2, halide_error_bad_dimensions("Output buffer output", output.dimensions, 2))
 assert(((A.min.0 + 1024) <= (min(output.extent.0, 1024) + output.min.0)) && ((output.extent.0 + output.min.0) <= (A.extent.0 + A.min.0)), halide_error_access_out_of_bounds("Input buffer A", 0, (min(output.extent.0, 1024) + output.min.0) + -1024, (output.extent.0 + output.min.0) + -1, A.min.0, (A.extent.0 + A.min.0) + -1))
 assert(0 <= A.extent.0, halide_error_buffer_extents_negative("Input buffer A", 0, A.extent.0))
 assert((A.min.1 <= output.min.1) && ((output.extent.1 + output.min.1) <= (A.extent.1 + A.min.1)), halide_error_access_out_of_bounds("Input buffer A", 1, output.min.1, (output.extent.1 + output.min.1) + -1, A.min.1, (A.extent.1 + A.min.1) + -1))
 assert(0 <= A.extent.1, halide_error_buffer_extents_negative("Input buffer A", 1, A.extent.1))
 assert(((B.min.0 + 1024) <= (min(output.extent.0, 1024) + output.min.0)) && ((output.extent.0 + output.min.0) <= (B.extent.0 + B.min.0)), halide_error_access_out_of_bounds("Input buffer B", 0, (min(output.extent.0, 1024) + output.min.0) + -1024, (output.extent.0 + output.min.0) + -1, B.min.0, (B.extent.0 + B.min.0) + -1))
 assert(0 <= B.extent.0, halide_error_buffer_extents_negative("Input buffer B", 0, B.extent.0))
 assert((B.min.1 <= output.min.1) && ((output.extent.1 + output.min.1) <= (B.extent.1 + B.min.1)), halide_error_access_out_of_bounds("Input buffer B", 1, output.min.1, (output.extent.1 + output.min.1) + -1, B.min.1, (B.extent.1 + B.min.1) + -1))
 assert(0 <= B.extent.1, halide_error_buffer_extents_negative("Input buffer B", 1, B.extent.1))
 assert(1024 <= output.extent.0, let t31 = (output.extent.0 + output.min.0) in halide_error_access_out_of_bounds("Output buffer output", 0, (min(output.extent.0, 1024) + output.min.0) + -1024, t31 + -1, output.min.0, t31 + -1))
 assert(0 <= output.extent.1, halide_error_buffer_extents_negative("Output buffer output", 1, output.extent.1))
 assert(A.stride.0 == 1, halide_error_constraint_violated("A.stride.0", A.stride.0, "1", 1))
 assert(B.stride.0 == 1, halide_error_constraint_violated("B.stride.0", B.stride.0, "1", 1))
 assert(output.stride.0 == 1, halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
 let A.total_extent.1 = int64(A.extent.1)*int64(A.extent.0)
 let B.total_extent.1 = int64(B.extent.1)*int64(B.extent.0)
 let output.total_extent.1 = int64(output.extent.1)*int64(output.extent.0)
 assert(uint64(A.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("A", uint64(A.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(A.extent.1)*int64(A.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("A", (uint64)abs(int64(A.extent.1)*int64(A.stride.1)), (uint64)2147483647))
 assert(A.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("A", A.total_extent.1, (int64)2147483647))
 assert(uint64(B.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("B", uint64(B.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(B.extent.1)*int64(B.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("B", (uint64)abs(int64(B.extent.1)*int64(B.stride.1)), (uint64)2147483647))
 assert(B.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("B", B.total_extent.1, (int64)2147483647))
 assert(uint64(output.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", uint64(output.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(output.extent.1)*int64(output.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", (uint64)abs(int64(output.extent.1)*int64(output.stride.1)), (uint64)2147483647))
 assert(output.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
 assert(!A.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer A"))
 assert(!B.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer B"))
 assert(!output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer output"))
 assert(A != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer A"))
 assert(B != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer B"))
 assert(output != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer output"))
 produce output {
  let t21 = (output.extent.0 + 1023)/1024
  let t23 = (output.min.0 - (B.min.1*B.stride.1)) - B.min.0
  let t22 = (output.min.0 - (A.min.1*A.stride.1)) - A.min.0
  let t24 = 0 - (output.min.1*output.stride.1)
  for (output.s0.x.x, 0, t21) {
   let output.s0.x.v0.base.s = min(output.s0.x.x*1024, output.extent.0 + -1024)
   let t27 = output.s0.x.v0.base.s + t24
   let t26 = output.s0.x.v0.base.s + t23
   let t25 = output.s0.x.v0.base.s + t22
   for (output.s0.y.rebased, 0, output.extent.1) {
    let t20 = output.min.1 + output.s0.y.rebased
    output[ramp((output.stride.1*t20) + t27, 1, 1024)] = A[ramp((A.stride.1*t20) + t25, 1, 1024)] + B[ramp((B.stride.1*t20) + t26, 1, 1024)]
   }
  }
 }
}
}


