module name=gaussian5x5, target=arm-64-osx-arm_dot_prod-arm_fp16-armv7s-armv81a-no_asserts-no_bounds_query-sve-sve2
external_plus_metadata func gaussian5x5 (input, output) {
assert((uint64)reinterpret((halide_buffer_t *)output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("output"))
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let output = (void *)_halide_buffer_get_host((halide_buffer_t *)output.buffer)
let output.min.0 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 0)
let output.min.1 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 1)
assert(input.stride.0 == 1, 0)
assert(output.stride.0 == 1, 0)
produce output {
 let t146 = input.extent.0 + input.min.0
 let t147 = max(input.extent.1, 0) + input.min.1
 let t148 = (output.extent.0 + 63)/32
 let t149 = (output.extent.0 + 31)/32
 let t150 = min(max(((input.min.0 - output.min.0) + 33)/32, 0), t148)
 let t133 = max((min(t146 - output.min.0, output.extent.0 + 61) + 2)/32, t150)
 let t136 = max(t149*32, (((output.extent.0 + -1)/32)*32) + 4)
 let t124 = (output.extent.1 + 3)/4
 let t145 = 0 - (output.min.1*output.stride.1)
 for (output.s0.y.y, 0, t124) {
  allocate bounded_input[uint8 * (t148*32) * 8]
  produce bounded_input {
   let bounded_input.s0.y.prologue = let t201 = ((output.s0.y.y*4) + output.min.1) in min(max(t201 + -2, input.min.1), t201 + 6)
   let bounded_input.s0.y.epilogue = let t202 = ((output.s0.y.y*4) + output.min.1) in min(max(max(t202 + -2, input.min.1), input.extent.1 + input.min.1), t202 + 6)
   let t153 = output.s0.y.y*4
   let t151 = max(min((input.min.1 - output.min.1) - t153, 6), -2)
   let t152 = (output.min.1 - input.min.1) + t153
   for (bounded_input.s0.y.rebased, 0, t151 + 2) {
    let t155 = bounded_input.s0.y.rebased*t148
    let t154 = ((max(min(bounded_input.s0.y.rebased + t152, input.extent.1 + 1), 2) + -2)*input.stride.1) - input.min.0
    for (bounded_input.s0.x.x, 0, t148) {
     bounded_input[ramp((bounded_input.s0.x.x + t155)*32, 1, 32) aligned(32, 0)] = input[max(min(ramp(((bounded_input.s0.x.x*32) + output.min.0) + -2, 1, 32), x32(t146 + -1)), x32(input.min.0)) + x32(t154)]
    }
   }
   let t163 = output.s0.y.y*4
   let t164 = output.min.1 + t163
   let t165 = t164 + -2
   let t166 = t164 + 6
   let t156 = min(max(t147, t165), t166) - min(max(input.min.1, t165), t166)
   let t158 = bounded_input.s0.y.prologue - input.min.1
   for (bounded_input.s0.y.rebased, 0, t156) {
    let t168 = ((((min(max(t164 + -2, input.min.1), t164 + 6) - output.min.1) - t163) + bounded_input.s0.y.rebased) + 2)*t148
    let t167 = ((bounded_input.s0.y.rebased + t158)*input.stride.1) - input.min.0
    for (bounded_input.s0.x.x, 0, t150) {
     bounded_input[ramp((bounded_input.s0.x.x + t168)*32, 1, 32) aligned(32, 0)] = input[max(min(ramp(((bounded_input.s0.x.x*32) + output.min.0) + -2, 1, 32), x32(t146 + -1)), x32(input.min.0)) + x32(t167)]
    }
    let t169 = t133 - t150
    let t171 = (((((min(max(t164 + -2, input.min.1), t164 + 6) - output.min.1) - t163) + bounded_input.s0.y.rebased) + 2)*t148) + t150
    let t170 = ((bounded_input.s0.y.rebased + t158)*input.stride.1) + (output.min.0 - input.min.0)
    for (bounded_input.s0.x.x.rebased, 0, t169) {
     bounded_input[ramp((bounded_input.s0.x.x.rebased + t171)*32, 1, 32) aligned(32, 0)] = input[ramp((((bounded_input.s0.x.x.rebased + t150)*32) + t170) + -2, 1, 32)]
    }
    let t173 = ((bounded_input.s0.y.rebased + t158)*input.stride.1) - input.min.0
    let t172 = t148 - t133
    let t174 = (((((min(max(t164 + -2, input.min.1), t164 + 6) - output.min.1) - t163) + bounded_input.s0.y.rebased) + 2)*t148) + t133
    for (bounded_input.s0.x.x.rebased, 0, t172) {
     bounded_input[ramp((bounded_input.s0.x.x.rebased + t174)*32, 1, 32) aligned(32, 0)] = input[max(min(ramp((((bounded_input.s0.x.x.rebased + t133)*32) + output.min.0) + -2, 1, 32), x32(t146 + -1)), x32(input.min.0)) + x32(t173)]
    }
   }
   let t179 = output.s0.y.y*4
   let t175 = max(min((output.min.1 - t147) + t179, 2), -6)
   let t177 = bounded_input.s0.y.epilogue - input.min.1
   for (bounded_input.s0.y.rebased, 0, t175 + 6) {
    let t181 = ((max(min((t147 - output.min.1) - t179, 6), -2) + bounded_input.s0.y.rebased) + 2)*t148
    let t180 = (max(min(bounded_input.s0.y.rebased + t177, input.extent.1 + -1), 0)*input.stride.1) - input.min.0
    for (bounded_input.s0.x.x, 0, t148) {
     bounded_input[ramp((bounded_input.s0.x.x + t181)*32, 1, 32) aligned(32, 0)] = input[max(min(ramp(((bounded_input.s0.x.x*32) + output.min.0) + -2, 1, 32), x32(t146 + -1)), x32(input.min.0)) + x32(t180)]
    }
   }
  }
  allocate rows[int16 * (((t136 + 63)/32)*32) * 4]
  produce rows {
   consume bounded_input {
    let t191 = (t136 + 63)/32
    for (rows.s0.x.x, 0, t148) {
     rows[ramp(rows.s0.x.x*32, 1, 32) aligned(32, 0)] = (((int16x32)shift_left(int16x32(bounded_input[ramp((rows.s0.x.x + t148)*32, 1, 32) aligned(32, 0)]), x32((uint16)2)) + ((int16x32)shift_left(int16x32(bounded_input[ramp(((t148*3) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)]), x32((uint16)2)) + (int16x32)widening_mul(bounded_input[ramp(((t148*2) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)], x32((int8)6)))) + int16x32(bounded_input[ramp(rows.s0.x.x*32, 1, 32) aligned(32, 0)])) + int16x32(bounded_input[ramp(((t148*4) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)])
     rows[ramp((rows.s0.x.x + t191)*32, 1, 32) aligned(32, 0)] = (((int16x32)shift_left(int16x32(bounded_input[ramp(((t148*2) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)]), x32((uint16)2)) + ((int16x32)shift_left(int16x32(bounded_input[ramp(((t148*4) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)]), x32((uint16)2)) + (int16x32)widening_mul(bounded_input[ramp(((t148*3) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)], x32((int8)6)))) + int16x32(bounded_input[ramp((rows.s0.x.x + t148)*32, 1, 32) aligned(32, 0)])) + int16x32(bounded_input[ramp(((t148*5) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)])
     rows[ramp(((t191*2) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)] = (((int16x32)shift_left(int16x32(bounded_input[ramp(((t148*3) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)]), x32((uint16)2)) + ((int16x32)shift_left(int16x32(bounded_input[ramp(((t148*5) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)]), x32((uint16)2)) + (int16x32)widening_mul(bounded_input[ramp(((t148*4) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)], x32((int8)6)))) + int16x32(bounded_input[ramp(((t148*2) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)])) + int16x32(bounded_input[ramp(((t148*6) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)])
     rows[ramp(((t191*3) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)] = (((int16x32)shift_left(int16x32(bounded_input[ramp(((t148*4) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)]), x32((uint16)2)) + ((int16x32)shift_left(int16x32(bounded_input[ramp(((t148*6) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)]), x32((uint16)2)) + (int16x32)widening_mul(bounded_input[ramp(((t148*5) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)], x32((int8)6)))) + int16x32(bounded_input[ramp(((t148*3) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)])) + int16x32(bounded_input[ramp(((t148*7) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)])
    }
   }
  }
  free bounded_input
  consume rows {
   let t199 = (output.s0.y.y*4) + output.min.1
   let t200 = (t136 + 63)/32
   let t192 = (output.stride.1*t199) + t145
   let t198 = ((t199 + 3)*output.stride.1) + t145
   let t196 = ((t199 + 2)*output.stride.1) + t145
   let t194 = ((t199 + 1)*output.stride.1) + t145
   for (output.s0.x.x, 0, t149) {
    output[ramp((output.s0.x.x*32) + t192, 1, 32)] = uint8x32((int16x32)shift_right((int16x32)shift_left(rows[ramp((output.s0.x.x*32) + 1, 1, 32) aligned(32, 1)], x32((uint16)2)) + (rows[ramp(output.s0.x.x*32, 1, 32) aligned(32, 0)] + ((rows[ramp((output.s0.x.x*32) + 2, 1, 32) aligned(32, 2)]*x32((int16)6)) + (rows[ramp((output.s0.x.x*32) + 4, 1, 32) aligned(32, 4)] + (int16x32)shift_left(rows[ramp((output.s0.x.x*32) + 3, 1, 32) aligned(32, 3)], x32((uint16)2))))), x32((uint16)8)))
    let t121 = output.s0.x.x + t200
    output[ramp((output.s0.x.x*32) + t194, 1, 32)] = uint8x32((int16x32)shift_right((int16x32)shift_left(rows[ramp((t121*32) + 1, 1, 32) aligned(32, 1)], x32((uint16)2)) + (rows[ramp(t121*32, 1, 32) aligned(32, 0)] + ((rows[ramp((t121*32) + 2, 1, 32) aligned(32, 2)]*x32((int16)6)) + (rows[ramp((t121*32) + 4, 1, 32) aligned(32, 4)] + (int16x32)shift_left(rows[ramp((t121*32) + 3, 1, 32) aligned(32, 3)], x32((uint16)2))))), x32((uint16)8)))
    let t122 = (t200*2) + output.s0.x.x
    output[ramp((output.s0.x.x*32) + t196, 1, 32)] = uint8x32((int16x32)shift_right((int16x32)shift_left(rows[ramp((t122*32) + 1, 1, 32) aligned(32, 1)], x32((uint16)2)) + (rows[ramp(t122*32, 1, 32) aligned(32, 0)] + ((rows[ramp((t122*32) + 2, 1, 32) aligned(32, 2)]*x32((int16)6)) + (rows[ramp((t122*32) + 4, 1, 32) aligned(32, 4)] + (int16x32)shift_left(rows[ramp((t122*32) + 3, 1, 32) aligned(32, 3)], x32((uint16)2))))), x32((uint16)8)))
    let t123 = (t200*3) + output.s0.x.x
    output[ramp((output.s0.x.x*32) + t198, 1, 32)] = uint8x32((int16x32)shift_right((int16x32)shift_left(rows[ramp((t123*32) + 1, 1, 32) aligned(32, 1)], x32((uint16)2)) + (rows[ramp(t123*32, 1, 32) aligned(32, 0)] + ((rows[ramp((t123*32) + 2, 1, 32) aligned(32, 2)]*x32((int16)6)) + (rows[ramp((t123*32) + 4, 1, 32) aligned(32, 4)] + (int16x32)shift_left(rows[ramp((t123*32) + 3, 1, 32) aligned(32, 3)], x32((uint16)2))))), x32((uint16)8)))
   }
  }
  free rows
 }
}
}


