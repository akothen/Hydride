module name=matmul_bias_gelu_matmul, target=arm-64-osx-arm_dot_prod-arm_fp16-armv7s-armv81a-no_asserts-no_bounds_query-sve-sve2
external_plus_metadata func matmul_bias_gelu_matmul (A, B, C, bias, output) {
assert((uint64)reinterpret((halide_buffer_t *)output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("output"))
assert((uint64)reinterpret((halide_buffer_t *)bias.buffer) != (uint64)0, halide_error_buffer_argument_is_null("bias"))
assert((uint64)reinterpret((halide_buffer_t *)C.buffer) != (uint64)0, halide_error_buffer_argument_is_null("C"))
assert((uint64)reinterpret((halide_buffer_t *)B.buffer) != (uint64)0, halide_error_buffer_argument_is_null("B"))
assert((uint64)reinterpret((halide_buffer_t *)A.buffer) != (uint64)0, halide_error_buffer_argument_is_null("A"))
let A = (void *)_halide_buffer_get_host((halide_buffer_t *)A.buffer)
let A.min.0 = _halide_buffer_get_min((halide_buffer_t *)A.buffer, 0)
let A.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)A.buffer, 0)
let A.min.1 = _halide_buffer_get_min((halide_buffer_t *)A.buffer, 1)
let A.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)A.buffer, 1)
let A.min.2 = _halide_buffer_get_min((halide_buffer_t *)A.buffer, 2)
let A.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)A.buffer, 2)
let B = (void *)_halide_buffer_get_host((halide_buffer_t *)B.buffer)
let B.min.0 = _halide_buffer_get_min((halide_buffer_t *)B.buffer, 0)
let B.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)B.buffer, 0)
let B.min.1 = _halide_buffer_get_min((halide_buffer_t *)B.buffer, 1)
let B.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)B.buffer, 1)
let B.min.2 = _halide_buffer_get_min((halide_buffer_t *)B.buffer, 2)
let B.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)B.buffer, 2)
let C = (void *)_halide_buffer_get_host((halide_buffer_t *)C.buffer)
let C.min.0 = _halide_buffer_get_min((halide_buffer_t *)C.buffer, 0)
let C.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)C.buffer, 0)
let C.min.1 = _halide_buffer_get_min((halide_buffer_t *)C.buffer, 1)
let C.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)C.buffer, 1)
let C.min.2 = _halide_buffer_get_min((halide_buffer_t *)C.buffer, 2)
let C.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)C.buffer, 2)
let bias = (void *)_halide_buffer_get_host((halide_buffer_t *)bias.buffer)
let bias.min.0 = _halide_buffer_get_min((halide_buffer_t *)bias.buffer, 0)
let bias.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)bias.buffer, 0)
let output = (void *)_halide_buffer_get_host((halide_buffer_t *)output.buffer)
let output.min.0 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 0)
let output.min.1 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 1)
let output.min.2 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 2)
let output.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 2)
let output.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 2)
assert(A.stride.0 == 1, 0)
assert(B.stride.0 == 1, 0)
assert(C.stride.0 == 1, 0)
assert(bias.stride.0 == 1, 0)
assert(output.stride.0 == 1, 0)
produce output {
 let t1106 = B.min.2*B.stride.2
 let t1107 = B.min.1*B.stride.1
 let t1100 = (int16)rounding_mul_shift_right((int16)31232, (int16)31232, (uint16)15)
 let t1101 = (int16)rounding_mul_shift_right((int16)23249, (int16)31232, (uint16)15)
 let t1099 = (int16)rounding_mul_shift_right((int16)23249, (int16)17496, (uint16)15)
 let t1103 = (int16)rounding_mul_shift_right((int16)23249, (int16)16384, (uint16)15)
 let t1096 = (int16)rounding_mul_shift_right((int16)23249, (int16)0, (uint16)15)
 let t1098 = (int16)rounding_mul_shift_right((int16)17496, (int16)17496, (uint16)15)
 let t1102 = (int16)rounding_mul_shift_right((int16)16384, (int16)16384, (uint16)15)
 let t1095 = (int16)rounding_mul_shift_right((int16)0, (int16)0, (uint16)15)
 let t1076 = (output.extent.2 + 3)/4
 let t1077 = (output.extent.1 + 63)/64
 let t1094 = ((((B.stride.1*240) + output.min.0) - t1106) - t1107) - B.min.0
 let t1093 = ((((B.stride.1*224) + output.min.0) - t1106) - t1107) - B.min.0
 let t1092 = ((((B.stride.1*208) + output.min.0) - t1106) - t1107) - B.min.0
 let t1091 = ((((B.stride.1*192) + output.min.0) - t1106) - t1107) - B.min.0
 let t1090 = ((((B.stride.1*176) + output.min.0) - t1106) - t1107) - B.min.0
 let t1089 = ((((B.stride.1*160) + output.min.0) - t1106) - t1107) - B.min.0
 let t1088 = ((((B.stride.1*144) + output.min.0) - t1106) - t1107) - B.min.0
 let t1087 = ((((B.stride.1*128) + output.min.0) - t1106) - t1107) - B.min.0
 let t1086 = ((((B.stride.1*112) + output.min.0) - t1106) - t1107) - B.min.0
 let t1085 = ((((B.stride.1*96) + output.min.0) - t1106) - t1107) - B.min.0
 let t1084 = ((((B.stride.1*80) + output.min.0) - t1106) - t1107) - B.min.0
 let t1083 = ((((B.stride.1*64) + output.min.0) - t1106) - t1107) - B.min.0
 let t1082 = ((((B.stride.1*48) + output.min.0) - t1106) - t1107) - B.min.0
 let t1081 = ((((B.stride.1*32) + output.min.0) - t1106) - t1107) - B.min.0
 let t1080 = ((((B.stride.1*16) + output.min.0) - t1106) - t1107) - B.min.0
 let t1104 = ((output.min.0 - (C.min.2*C.stride.2)) - (C.min.1*C.stride.1)) - C.min.0
 let t1078 = ((output.min.0 - t1106) - t1107) - B.min.0
 let t1079 = ((output.min.0 - (A.min.2*A.stride.2)) - (A.min.1*A.stride.1)) - A.min.0
 let t1097 = output.min.0 - bias.min.0
 let t1105 = 0 - ((output.min.2*output.stride.2) + (output.min.1*output.stride.1))
 for (output.s0.c.rebased, 0, output.extent.0) {
  let t1127 = saturating_add(196608, int32((((int16)rounding_mul_shift_right((int16)-9421, t1098, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2555, (int16)rounding_mul_shift_right(t1098, (int16)17496, (uint16)15), (uint16)15) + t1099)) + (int16)5)))
  let t1128 = saturating_add(147456, int32((((int16)rounding_mul_shift_right((int16)-9421, t1100, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2555, (int16)rounding_mul_shift_right(t1100, (int16)31232, (uint16)15), (uint16)15) + t1101)) + (int16)5)))
  let t1129 = saturating_add(32768, int32((((int16)rounding_mul_shift_right((int16)-9421, t1102, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2555, (int16)rounding_mul_shift_right(t1102, (int16)16384, (uint16)15), (uint16)15) + t1103)) + (int16)5))*2)
  let t1125 = saturating_add(32768, int32((((int16)rounding_mul_shift_right((int16)-9421, t1095, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2555, (int16)rounding_mul_shift_right(t1095, (int16)0, (uint16)15), (uint16)15) + t1096)) + (int16)5))*2)
  let t1131 = output.s0.c.rebased + t1105
  let t1130 = output.s0.c.rebased + t1104
  let t1126 = output.s0.c.rebased + t1097
  let t1124 = output.s0.c.rebased + t1094
  let t1123 = output.s0.c.rebased + t1093
  let t1122 = output.s0.c.rebased + t1092
  let t1121 = output.s0.c.rebased + t1091
  let t1120 = output.s0.c.rebased + t1090
  let t1119 = output.s0.c.rebased + t1089
  let t1118 = output.s0.c.rebased + t1088
  let t1117 = output.s0.c.rebased + t1087
  let t1116 = output.s0.c.rebased + t1086
  let t1115 = output.s0.c.rebased + t1085
  let t1114 = output.s0.c.rebased + t1084
  let t1113 = output.s0.c.rebased + t1083
  let t1112 = output.s0.c.rebased + t1082
  let t1111 = output.s0.c.rebased + t1081
  let t1110 = output.s0.c.rebased + t1080
  let t1109 = output.s0.c.rebased + t1079
  let t1108 = output.s0.c.rebased + t1078
  for (output.s0.y.y, 0, t1076) {
   let output.s0.y.yi.base.s = min(output.s0.y.y*4, output.extent.2 + -4)
   let t1148 = 0 - t1125
   let t1149 = 0 - t1127
   let t1150 = 0 - t1128
   let t1151 = 0 - t1129
   let t1152 = output.min.2 + output.s0.y.yi.base.s
   let t1153 = t1152 + 1
   let t1154 = t1152 + 2
   let t1155 = t1152 + 3
   let t1142 = shift_left(1, t1151/32768)
   let t1140 = shift_left(1, t1150/32768)
   let t1138 = shift_left(1, t1149/32768)
   let t1136 = shift_left(1, t1148/32768)
   let t1147 = (output.stride.2*t1155) + t1131
   let t1135 = (A.stride.2*t1155) + t1109
   let t1146 = (output.stride.2*t1154) + t1131
   let t1134 = (A.stride.2*t1154) + t1109
   let t1145 = (output.stride.2*t1153) + t1131
   let t1133 = (A.stride.2*t1153) + t1109
   let t1144 = (output.stride.2*t1152) + t1131
   let t1132 = (A.stride.2*t1152) + t1109
   let t1143 = int16((t1151 % 32768))
   let t1141 = int16((t1150 % 32768))
   let t1139 = int16((t1149 % 32768))
   let t1137 = int16((t1148 % 32768))
   for (output.s0.x.x, 0, t1077) {
    let output.s0.x.xi.base.s = min(output.s0.x.x*64, output.extent.1 + -64)
    allocate matrix_mul1[int32 * 1024] in Stack
    produce matrix_mul1 {
     matrix_mul1[ramp(0, 1, 16)] = x16(0)
     matrix_mul1[ramp(16, 1, 16)] = x16(0)
     matrix_mul1[ramp(32, 1, 16)] = x16(0)
     matrix_mul1[ramp(48, 1, 16)] = x16(0)
     matrix_mul1[ramp(64, 1, 16)] = x16(0)
     matrix_mul1[ramp(80, 1, 16)] = x16(0)
     matrix_mul1[ramp(96, 1, 16)] = x16(0)
     matrix_mul1[ramp(112, 1, 16)] = x16(0)
     matrix_mul1[ramp(128, 1, 16)] = x16(0)
     matrix_mul1[ramp(144, 1, 16)] = x16(0)
     matrix_mul1[ramp(160, 1, 16)] = x16(0)
     matrix_mul1[ramp(176, 1, 16)] = x16(0)
     matrix_mul1[ramp(192, 1, 16)] = x16(0)
     matrix_mul1[ramp(208, 1, 16)] = x16(0)
     matrix_mul1[ramp(224, 1, 16)] = x16(0)
     matrix_mul1[ramp(240, 1, 16)] = x16(0)
     matrix_mul1[ramp(256, 1, 16)] = x16(0)
     matrix_mul1[ramp(272, 1, 16)] = x16(0)
     matrix_mul1[ramp(288, 1, 16)] = x16(0)
     matrix_mul1[ramp(304, 1, 16)] = x16(0)
     matrix_mul1[ramp(320, 1, 16)] = x16(0)
     matrix_mul1[ramp(336, 1, 16)] = x16(0)
     matrix_mul1[ramp(352, 1, 16)] = x16(0)
     matrix_mul1[ramp(368, 1, 16)] = x16(0)
     matrix_mul1[ramp(384, 1, 16)] = x16(0)
     matrix_mul1[ramp(400, 1, 16)] = x16(0)
     matrix_mul1[ramp(416, 1, 16)] = x16(0)
     matrix_mul1[ramp(432, 1, 16)] = x16(0)
     matrix_mul1[ramp(448, 1, 16)] = x16(0)
     matrix_mul1[ramp(464, 1, 16)] = x16(0)
     matrix_mul1[ramp(480, 1, 16)] = x16(0)
     matrix_mul1[ramp(496, 1, 16)] = x16(0)
     matrix_mul1[ramp(512, 1, 16)] = x16(0)
     matrix_mul1[ramp(528, 1, 16)] = x16(0)
     matrix_mul1[ramp(544, 1, 16)] = x16(0)
     matrix_mul1[ramp(560, 1, 16)] = x16(0)
     matrix_mul1[ramp(576, 1, 16)] = x16(0)
     matrix_mul1[ramp(592, 1, 16)] = x16(0)
     matrix_mul1[ramp(608, 1, 16)] = x16(0)
     matrix_mul1[ramp(624, 1, 16)] = x16(0)
     matrix_mul1[ramp(640, 1, 16)] = x16(0)
     matrix_mul1[ramp(656, 1, 16)] = x16(0)
     matrix_mul1[ramp(672, 1, 16)] = x16(0)
     matrix_mul1[ramp(688, 1, 16)] = x16(0)
     matrix_mul1[ramp(704, 1, 16)] = x16(0)
     matrix_mul1[ramp(720, 1, 16)] = x16(0)
     matrix_mul1[ramp(736, 1, 16)] = x16(0)
     matrix_mul1[ramp(752, 1, 16)] = x16(0)
     matrix_mul1[ramp(768, 1, 16)] = x16(0)
     matrix_mul1[ramp(784, 1, 16)] = x16(0)
     matrix_mul1[ramp(800, 1, 16)] = x16(0)
     matrix_mul1[ramp(816, 1, 16)] = x16(0)
     matrix_mul1[ramp(832, 1, 16)] = x16(0)
     matrix_mul1[ramp(848, 1, 16)] = x16(0)
     matrix_mul1[ramp(864, 1, 16)] = x16(0)
     matrix_mul1[ramp(880, 1, 16)] = x16(0)
     matrix_mul1[ramp(896, 1, 16)] = x16(0)
     matrix_mul1[ramp(912, 1, 16)] = x16(0)
     matrix_mul1[ramp(928, 1, 16)] = x16(0)
     matrix_mul1[ramp(944, 1, 16)] = x16(0)
     matrix_mul1[ramp(960, 1, 16)] = x16(0)
     matrix_mul1[ramp(976, 1, 16)] = x16(0)
     matrix_mul1[ramp(992, 1, 16)] = x16(0)
     matrix_mul1[ramp(1008, 1, 16)] = x16(0)
     for (matrix_mul1.s1.r14$x, 0, 256) {
      matrix_mul1[ramp(0, 1, 16)] = matrix_mul1[ramp(0, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1108, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1132]))
      matrix_mul1[ramp(16, 1, 16)] = matrix_mul1[ramp(16, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1110, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1132]))
      matrix_mul1[ramp(32, 1, 16)] = matrix_mul1[ramp(32, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1111, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1132]))
      matrix_mul1[ramp(48, 1, 16)] = matrix_mul1[ramp(48, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1112, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1132]))
      matrix_mul1[ramp(64, 1, 16)] = matrix_mul1[ramp(64, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1113, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1132]))
      matrix_mul1[ramp(80, 1, 16)] = matrix_mul1[ramp(80, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1114, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1132]))
      matrix_mul1[ramp(96, 1, 16)] = matrix_mul1[ramp(96, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1115, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1132]))
      matrix_mul1[ramp(112, 1, 16)] = matrix_mul1[ramp(112, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1116, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1132]))
      matrix_mul1[ramp(128, 1, 16)] = matrix_mul1[ramp(128, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1117, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1132]))
      matrix_mul1[ramp(144, 1, 16)] = matrix_mul1[ramp(144, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1118, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1132]))
      matrix_mul1[ramp(160, 1, 16)] = matrix_mul1[ramp(160, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1119, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1132]))
      matrix_mul1[ramp(176, 1, 16)] = matrix_mul1[ramp(176, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1120, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1132]))
      matrix_mul1[ramp(192, 1, 16)] = matrix_mul1[ramp(192, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1121, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1132]))
      matrix_mul1[ramp(208, 1, 16)] = matrix_mul1[ramp(208, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1122, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1132]))
      matrix_mul1[ramp(224, 1, 16)] = matrix_mul1[ramp(224, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1123, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1132]))
      matrix_mul1[ramp(240, 1, 16)] = matrix_mul1[ramp(240, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1124, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1132]))
      matrix_mul1[ramp(256, 1, 16)] = matrix_mul1[ramp(256, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1108, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1133]))
      matrix_mul1[ramp(272, 1, 16)] = matrix_mul1[ramp(272, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1110, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1133]))
      matrix_mul1[ramp(288, 1, 16)] = matrix_mul1[ramp(288, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1111, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1133]))
      matrix_mul1[ramp(304, 1, 16)] = matrix_mul1[ramp(304, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1112, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1133]))
      matrix_mul1[ramp(320, 1, 16)] = matrix_mul1[ramp(320, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1113, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1133]))
      matrix_mul1[ramp(336, 1, 16)] = matrix_mul1[ramp(336, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1114, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1133]))
      matrix_mul1[ramp(352, 1, 16)] = matrix_mul1[ramp(352, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1115, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1133]))
      matrix_mul1[ramp(368, 1, 16)] = matrix_mul1[ramp(368, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1116, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1133]))
      matrix_mul1[ramp(384, 1, 16)] = matrix_mul1[ramp(384, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1117, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1133]))
      matrix_mul1[ramp(400, 1, 16)] = matrix_mul1[ramp(400, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1118, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1133]))
      matrix_mul1[ramp(416, 1, 16)] = matrix_mul1[ramp(416, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1119, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1133]))
      matrix_mul1[ramp(432, 1, 16)] = matrix_mul1[ramp(432, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1120, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1133]))
      matrix_mul1[ramp(448, 1, 16)] = matrix_mul1[ramp(448, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1121, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1133]))
      matrix_mul1[ramp(464, 1, 16)] = matrix_mul1[ramp(464, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1122, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1133]))
      matrix_mul1[ramp(480, 1, 16)] = matrix_mul1[ramp(480, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1123, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1133]))
      matrix_mul1[ramp(496, 1, 16)] = matrix_mul1[ramp(496, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1124, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1133]))
      matrix_mul1[ramp(512, 1, 16)] = matrix_mul1[ramp(512, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1108, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1134]))
      matrix_mul1[ramp(528, 1, 16)] = matrix_mul1[ramp(528, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1110, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1134]))
      matrix_mul1[ramp(544, 1, 16)] = matrix_mul1[ramp(544, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1111, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1134]))
      matrix_mul1[ramp(560, 1, 16)] = matrix_mul1[ramp(560, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1112, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1134]))
      matrix_mul1[ramp(576, 1, 16)] = matrix_mul1[ramp(576, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1113, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1134]))
      matrix_mul1[ramp(592, 1, 16)] = matrix_mul1[ramp(592, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1114, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1134]))
      matrix_mul1[ramp(608, 1, 16)] = matrix_mul1[ramp(608, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1115, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1134]))
      matrix_mul1[ramp(624, 1, 16)] = matrix_mul1[ramp(624, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1116, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1134]))
      matrix_mul1[ramp(640, 1, 16)] = matrix_mul1[ramp(640, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1117, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1134]))
      matrix_mul1[ramp(656, 1, 16)] = matrix_mul1[ramp(656, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1118, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1134]))
      matrix_mul1[ramp(672, 1, 16)] = matrix_mul1[ramp(672, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1119, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1134]))
      matrix_mul1[ramp(688, 1, 16)] = matrix_mul1[ramp(688, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1120, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1134]))
      matrix_mul1[ramp(704, 1, 16)] = matrix_mul1[ramp(704, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1121, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1134]))
      matrix_mul1[ramp(720, 1, 16)] = matrix_mul1[ramp(720, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1122, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1134]))
      matrix_mul1[ramp(736, 1, 16)] = matrix_mul1[ramp(736, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1123, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1134]))
      matrix_mul1[ramp(752, 1, 16)] = matrix_mul1[ramp(752, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1124, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1134]))
      matrix_mul1[ramp(768, 1, 16)] = matrix_mul1[ramp(768, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1108, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1135]))
      matrix_mul1[ramp(784, 1, 16)] = matrix_mul1[ramp(784, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1110, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1135]))
      matrix_mul1[ramp(800, 1, 16)] = matrix_mul1[ramp(800, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1111, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1135]))
      matrix_mul1[ramp(816, 1, 16)] = matrix_mul1[ramp(816, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1112, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1135]))
      matrix_mul1[ramp(832, 1, 16)] = matrix_mul1[ramp(832, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1113, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1135]))
      matrix_mul1[ramp(848, 1, 16)] = matrix_mul1[ramp(848, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1114, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1135]))
      matrix_mul1[ramp(864, 1, 16)] = matrix_mul1[ramp(864, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1115, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1135]))
      matrix_mul1[ramp(880, 1, 16)] = matrix_mul1[ramp(880, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1116, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1135]))
      matrix_mul1[ramp(896, 1, 16)] = matrix_mul1[ramp(896, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1117, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1135]))
      matrix_mul1[ramp(912, 1, 16)] = matrix_mul1[ramp(912, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1118, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1135]))
      matrix_mul1[ramp(928, 1, 16)] = matrix_mul1[ramp(928, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1119, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1135]))
      matrix_mul1[ramp(944, 1, 16)] = matrix_mul1[ramp(944, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1120, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1135]))
      matrix_mul1[ramp(960, 1, 16)] = matrix_mul1[ramp(960, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1121, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1135]))
      matrix_mul1[ramp(976, 1, 16)] = matrix_mul1[ramp(976, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1122, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1135]))
      matrix_mul1[ramp(992, 1, 16)] = matrix_mul1[ramp(992, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1123, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1135]))
      matrix_mul1[ramp(1008, 1, 16)] = matrix_mul1[ramp(1008, 1, 16)] + (int32x16)widening_mul(B[ramp((B.stride.2*matrix_mul1.s1.r14$x) + t1124, B.stride.1, 16)], x16(A[(A.stride.1*matrix_mul1.s1.r14$x) + t1135]))
     }
    }
    allocate matrix_mul2[int32 * 256] in Stack
    produce matrix_mul2 {
     matrix_mul2[ramp(0, 1, 16)] = x16(0)
     matrix_mul2[ramp(16, 1, 16)] = x16(0)
     matrix_mul2[ramp(32, 1, 16)] = x16(0)
     matrix_mul2[ramp(48, 1, 16)] = x16(0)
     matrix_mul2[ramp(64, 1, 16)] = x16(0)
     matrix_mul2[ramp(80, 1, 16)] = x16(0)
     matrix_mul2[ramp(96, 1, 16)] = x16(0)
     matrix_mul2[ramp(112, 1, 16)] = x16(0)
     matrix_mul2[ramp(128, 1, 16)] = x16(0)
     matrix_mul2[ramp(144, 1, 16)] = x16(0)
     matrix_mul2[ramp(160, 1, 16)] = x16(0)
     matrix_mul2[ramp(176, 1, 16)] = x16(0)
     matrix_mul2[ramp(192, 1, 16)] = x16(0)
     matrix_mul2[ramp(208, 1, 16)] = x16(0)
     matrix_mul2[ramp(224, 1, 16)] = x16(0)
     matrix_mul2[ramp(240, 1, 16)] = x16(0)
     consume matrix_mul1 {
      let t1168 = output.min.1 + output.s0.x.xi.base.s
      let t1159 = (int16)rounding_mul_shift_right(t1143, t1143, (uint16)15)
      let t1158 = (int16)rounding_mul_shift_right(t1141, t1141, (uint16)15)
      let t1157 = (int16)rounding_mul_shift_right(t1139, t1139, (uint16)15)
      let t1156 = (int16)rounding_mul_shift_right(t1137, t1137, (uint16)15)
      let t1164 = (int16)rounding_mul_shift_right((int16)22812, t1143, (uint16)15)
      let t1163 = (int16)rounding_mul_shift_right((int16)22812, t1141, (uint16)15)
      let t1162 = (int16)rounding_mul_shift_right((int16)22812, t1139, (uint16)15)
      let t1161 = (int16)rounding_mul_shift_right((int16)22812, t1137, (uint16)15)
      let t1167 = ((t1168 + 48)*C.stride.1) + t1130
      let t1166 = ((t1168 + 32)*C.stride.1) + t1130
      let t1165 = ((t1168 + 16)*C.stride.1) + t1130
      let t1160 = (C.stride.1*t1168) + t1130
      for (matrix_mul2.s1.r14$x, 0, 256) {
       let t677 = bias[t1126] + matrix_mul1[matrix_mul2.s1.r14$x]
       matrix_mul2[ramp(0, 1, 16)] = matrix_mul2[ramp(0, 1, 16)] + (int32x16(C[ramp((C.stride.2*matrix_mul2.s1.r14$x) + t1160, C.stride.1, 16)])*x16((saturating_add(t1136, rounding_mul_shift_right(t1136, int32(((int16)rounding_mul_shift_right((int16)7363, t1156, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1156, t1137, (uint16)15), (uint16)15) + t1161)))*65536, (uint32)31))*t677)*((((saturating_add(t1138, rounding_mul_shift_right(t1138, int32(((int16)rounding_mul_shift_right((int16)7363, t1157, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1157, t1139, (uint16)15), (uint16)15) + t1162)))*65536, (uint32)31))/saturating_add(t1140, rounding_mul_shift_right(t1140, int32(((int16)rounding_mul_shift_right((int16)7363, t1158, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1158, t1141, (uint16)15), (uint16)15) + t1163)))*65536, (uint32)31)))*(saturating_add(t1142, rounding_mul_shift_right(t1142, int32(((int16)rounding_mul_shift_right((int16)7363, t1159, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1159, t1143, (uint16)15), (uint16)15) + t1164)))*65536, (uint32)31))*t677))*((t677*t677) + 6)) + 1)))
       let t698 = bias[t1126] + matrix_mul1[matrix_mul2.s1.r14$x]
       matrix_mul2[ramp(16, 1, 16)] = matrix_mul2[ramp(16, 1, 16)] + (int32x16(C[ramp((C.stride.2*matrix_mul2.s1.r14$x) + t1165, C.stride.1, 16)])*x16((saturating_add(t1136, rounding_mul_shift_right(t1136, int32(((int16)rounding_mul_shift_right((int16)7363, t1156, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1156, t1137, (uint16)15), (uint16)15) + t1161)))*65536, (uint32)31))*t698)*((((saturating_add(t1138, rounding_mul_shift_right(t1138, int32(((int16)rounding_mul_shift_right((int16)7363, t1157, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1157, t1139, (uint16)15), (uint16)15) + t1162)))*65536, (uint32)31))/saturating_add(t1140, rounding_mul_shift_right(t1140, int32(((int16)rounding_mul_shift_right((int16)7363, t1158, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1158, t1141, (uint16)15), (uint16)15) + t1163)))*65536, (uint32)31)))*(saturating_add(t1142, rounding_mul_shift_right(t1142, int32(((int16)rounding_mul_shift_right((int16)7363, t1159, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1159, t1143, (uint16)15), (uint16)15) + t1164)))*65536, (uint32)31))*t698))*((t698*t698) + 6)) + 1)))
       let t719 = bias[t1126] + matrix_mul1[matrix_mul2.s1.r14$x]
       matrix_mul2[ramp(32, 1, 16)] = matrix_mul2[ramp(32, 1, 16)] + (int32x16(C[ramp((C.stride.2*matrix_mul2.s1.r14$x) + t1166, C.stride.1, 16)])*x16((saturating_add(t1136, rounding_mul_shift_right(t1136, int32(((int16)rounding_mul_shift_right((int16)7363, t1156, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1156, t1137, (uint16)15), (uint16)15) + t1161)))*65536, (uint32)31))*t719)*((((saturating_add(t1138, rounding_mul_shift_right(t1138, int32(((int16)rounding_mul_shift_right((int16)7363, t1157, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1157, t1139, (uint16)15), (uint16)15) + t1162)))*65536, (uint32)31))/saturating_add(t1140, rounding_mul_shift_right(t1140, int32(((int16)rounding_mul_shift_right((int16)7363, t1158, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1158, t1141, (uint16)15), (uint16)15) + t1163)))*65536, (uint32)31)))*(saturating_add(t1142, rounding_mul_shift_right(t1142, int32(((int16)rounding_mul_shift_right((int16)7363, t1159, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1159, t1143, (uint16)15), (uint16)15) + t1164)))*65536, (uint32)31))*t719))*((t719*t719) + 6)) + 1)))
       let t740 = bias[t1126] + matrix_mul1[matrix_mul2.s1.r14$x]
       matrix_mul2[ramp(48, 1, 16)] = matrix_mul2[ramp(48, 1, 16)] + (int32x16(C[ramp((C.stride.2*matrix_mul2.s1.r14$x) + t1167, C.stride.1, 16)])*x16((saturating_add(t1136, rounding_mul_shift_right(t1136, int32(((int16)rounding_mul_shift_right((int16)7363, t1156, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1156, t1137, (uint16)15), (uint16)15) + t1161)))*65536, (uint32)31))*t740)*((((saturating_add(t1138, rounding_mul_shift_right(t1138, int32(((int16)rounding_mul_shift_right((int16)7363, t1157, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1157, t1139, (uint16)15), (uint16)15) + t1162)))*65536, (uint32)31))/saturating_add(t1140, rounding_mul_shift_right(t1140, int32(((int16)rounding_mul_shift_right((int16)7363, t1158, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1158, t1141, (uint16)15), (uint16)15) + t1163)))*65536, (uint32)31)))*(saturating_add(t1142, rounding_mul_shift_right(t1142, int32(((int16)rounding_mul_shift_right((int16)7363, t1159, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1159, t1143, (uint16)15), (uint16)15) + t1164)))*65536, (uint32)31))*t740))*((t740*t740) + 6)) + 1)))
       let t761 = bias[t1126] + matrix_mul1[matrix_mul2.s1.r14$x + 256]
       matrix_mul2[ramp(64, 1, 16)] = matrix_mul2[ramp(64, 1, 16)] + (int32x16(C[ramp((C.stride.2*matrix_mul2.s1.r14$x) + t1160, C.stride.1, 16)])*x16((saturating_add(t1136, rounding_mul_shift_right(t1136, int32(((int16)rounding_mul_shift_right((int16)7363, t1156, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1156, t1137, (uint16)15), (uint16)15) + t1161)))*65536, (uint32)31))*t761)*((((saturating_add(t1138, rounding_mul_shift_right(t1138, int32(((int16)rounding_mul_shift_right((int16)7363, t1157, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1157, t1139, (uint16)15), (uint16)15) + t1162)))*65536, (uint32)31))/saturating_add(t1140, rounding_mul_shift_right(t1140, int32(((int16)rounding_mul_shift_right((int16)7363, t1158, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1158, t1141, (uint16)15), (uint16)15) + t1163)))*65536, (uint32)31)))*(saturating_add(t1142, rounding_mul_shift_right(t1142, int32(((int16)rounding_mul_shift_right((int16)7363, t1159, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1159, t1143, (uint16)15), (uint16)15) + t1164)))*65536, (uint32)31))*t761))*((t761*t761) + 6)) + 1)))
       let t782 = bias[t1126] + matrix_mul1[matrix_mul2.s1.r14$x + 256]
       matrix_mul2[ramp(80, 1, 16)] = matrix_mul2[ramp(80, 1, 16)] + (int32x16(C[ramp((C.stride.2*matrix_mul2.s1.r14$x) + t1165, C.stride.1, 16)])*x16((saturating_add(t1136, rounding_mul_shift_right(t1136, int32(((int16)rounding_mul_shift_right((int16)7363, t1156, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1156, t1137, (uint16)15), (uint16)15) + t1161)))*65536, (uint32)31))*t782)*((((saturating_add(t1138, rounding_mul_shift_right(t1138, int32(((int16)rounding_mul_shift_right((int16)7363, t1157, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1157, t1139, (uint16)15), (uint16)15) + t1162)))*65536, (uint32)31))/saturating_add(t1140, rounding_mul_shift_right(t1140, int32(((int16)rounding_mul_shift_right((int16)7363, t1158, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1158, t1141, (uint16)15), (uint16)15) + t1163)))*65536, (uint32)31)))*(saturating_add(t1142, rounding_mul_shift_right(t1142, int32(((int16)rounding_mul_shift_right((int16)7363, t1159, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1159, t1143, (uint16)15), (uint16)15) + t1164)))*65536, (uint32)31))*t782))*((t782*t782) + 6)) + 1)))
       let t803 = bias[t1126] + matrix_mul1[matrix_mul2.s1.r14$x + 256]
       matrix_mul2[ramp(96, 1, 16)] = matrix_mul2[ramp(96, 1, 16)] + (int32x16(C[ramp((C.stride.2*matrix_mul2.s1.r14$x) + t1166, C.stride.1, 16)])*x16((saturating_add(t1136, rounding_mul_shift_right(t1136, int32(((int16)rounding_mul_shift_right((int16)7363, t1156, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1156, t1137, (uint16)15), (uint16)15) + t1161)))*65536, (uint32)31))*t803)*((((saturating_add(t1138, rounding_mul_shift_right(t1138, int32(((int16)rounding_mul_shift_right((int16)7363, t1157, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1157, t1139, (uint16)15), (uint16)15) + t1162)))*65536, (uint32)31))/saturating_add(t1140, rounding_mul_shift_right(t1140, int32(((int16)rounding_mul_shift_right((int16)7363, t1158, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1158, t1141, (uint16)15), (uint16)15) + t1163)))*65536, (uint32)31)))*(saturating_add(t1142, rounding_mul_shift_right(t1142, int32(((int16)rounding_mul_shift_right((int16)7363, t1159, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1159, t1143, (uint16)15), (uint16)15) + t1164)))*65536, (uint32)31))*t803))*((t803*t803) + 6)) + 1)))
       let t824 = bias[t1126] + matrix_mul1[matrix_mul2.s1.r14$x + 256]
       matrix_mul2[ramp(112, 1, 16)] = matrix_mul2[ramp(112, 1, 16)] + (int32x16(C[ramp((C.stride.2*matrix_mul2.s1.r14$x) + t1167, C.stride.1, 16)])*x16((saturating_add(t1136, rounding_mul_shift_right(t1136, int32(((int16)rounding_mul_shift_right((int16)7363, t1156, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1156, t1137, (uint16)15), (uint16)15) + t1161)))*65536, (uint32)31))*t824)*((((saturating_add(t1138, rounding_mul_shift_right(t1138, int32(((int16)rounding_mul_shift_right((int16)7363, t1157, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1157, t1139, (uint16)15), (uint16)15) + t1162)))*65536, (uint32)31))/saturating_add(t1140, rounding_mul_shift_right(t1140, int32(((int16)rounding_mul_shift_right((int16)7363, t1158, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1158, t1141, (uint16)15), (uint16)15) + t1163)))*65536, (uint32)31)))*(saturating_add(t1142, rounding_mul_shift_right(t1142, int32(((int16)rounding_mul_shift_right((int16)7363, t1159, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1159, t1143, (uint16)15), (uint16)15) + t1164)))*65536, (uint32)31))*t824))*((t824*t824) + 6)) + 1)))
       let t845 = bias[t1126] + matrix_mul1[matrix_mul2.s1.r14$x + 512]
       matrix_mul2[ramp(128, 1, 16)] = matrix_mul2[ramp(128, 1, 16)] + (int32x16(C[ramp((C.stride.2*matrix_mul2.s1.r14$x) + t1160, C.stride.1, 16)])*x16((saturating_add(t1136, rounding_mul_shift_right(t1136, int32(((int16)rounding_mul_shift_right((int16)7363, t1156, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1156, t1137, (uint16)15), (uint16)15) + t1161)))*65536, (uint32)31))*t845)*((((saturating_add(t1138, rounding_mul_shift_right(t1138, int32(((int16)rounding_mul_shift_right((int16)7363, t1157, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1157, t1139, (uint16)15), (uint16)15) + t1162)))*65536, (uint32)31))/saturating_add(t1140, rounding_mul_shift_right(t1140, int32(((int16)rounding_mul_shift_right((int16)7363, t1158, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1158, t1141, (uint16)15), (uint16)15) + t1163)))*65536, (uint32)31)))*(saturating_add(t1142, rounding_mul_shift_right(t1142, int32(((int16)rounding_mul_shift_right((int16)7363, t1159, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1159, t1143, (uint16)15), (uint16)15) + t1164)))*65536, (uint32)31))*t845))*((t845*t845) + 6)) + 1)))
       let t866 = bias[t1126] + matrix_mul1[matrix_mul2.s1.r14$x + 512]
       matrix_mul2[ramp(144, 1, 16)] = matrix_mul2[ramp(144, 1, 16)] + (int32x16(C[ramp((C.stride.2*matrix_mul2.s1.r14$x) + t1165, C.stride.1, 16)])*x16((saturating_add(t1136, rounding_mul_shift_right(t1136, int32(((int16)rounding_mul_shift_right((int16)7363, t1156, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1156, t1137, (uint16)15), (uint16)15) + t1161)))*65536, (uint32)31))*t866)*((((saturating_add(t1138, rounding_mul_shift_right(t1138, int32(((int16)rounding_mul_shift_right((int16)7363, t1157, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1157, t1139, (uint16)15), (uint16)15) + t1162)))*65536, (uint32)31))/saturating_add(t1140, rounding_mul_shift_right(t1140, int32(((int16)rounding_mul_shift_right((int16)7363, t1158, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1158, t1141, (uint16)15), (uint16)15) + t1163)))*65536, (uint32)31)))*(saturating_add(t1142, rounding_mul_shift_right(t1142, int32(((int16)rounding_mul_shift_right((int16)7363, t1159, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1159, t1143, (uint16)15), (uint16)15) + t1164)))*65536, (uint32)31))*t866))*((t866*t866) + 6)) + 1)))
       let t887 = bias[t1126] + matrix_mul1[matrix_mul2.s1.r14$x + 512]
       matrix_mul2[ramp(160, 1, 16)] = matrix_mul2[ramp(160, 1, 16)] + (int32x16(C[ramp((C.stride.2*matrix_mul2.s1.r14$x) + t1166, C.stride.1, 16)])*x16((saturating_add(t1136, rounding_mul_shift_right(t1136, int32(((int16)rounding_mul_shift_right((int16)7363, t1156, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1156, t1137, (uint16)15), (uint16)15) + t1161)))*65536, (uint32)31))*t887)*((((saturating_add(t1138, rounding_mul_shift_right(t1138, int32(((int16)rounding_mul_shift_right((int16)7363, t1157, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1157, t1139, (uint16)15), (uint16)15) + t1162)))*65536, (uint32)31))/saturating_add(t1140, rounding_mul_shift_right(t1140, int32(((int16)rounding_mul_shift_right((int16)7363, t1158, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1158, t1141, (uint16)15), (uint16)15) + t1163)))*65536, (uint32)31)))*(saturating_add(t1142, rounding_mul_shift_right(t1142, int32(((int16)rounding_mul_shift_right((int16)7363, t1159, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1159, t1143, (uint16)15), (uint16)15) + t1164)))*65536, (uint32)31))*t887))*((t887*t887) + 6)) + 1)))
       let t908 = bias[t1126] + matrix_mul1[matrix_mul2.s1.r14$x + 512]
       matrix_mul2[ramp(176, 1, 16)] = matrix_mul2[ramp(176, 1, 16)] + (int32x16(C[ramp((C.stride.2*matrix_mul2.s1.r14$x) + t1167, C.stride.1, 16)])*x16((saturating_add(t1136, rounding_mul_shift_right(t1136, int32(((int16)rounding_mul_shift_right((int16)7363, t1156, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1156, t1137, (uint16)15), (uint16)15) + t1161)))*65536, (uint32)31))*t908)*((((saturating_add(t1138, rounding_mul_shift_right(t1138, int32(((int16)rounding_mul_shift_right((int16)7363, t1157, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1157, t1139, (uint16)15), (uint16)15) + t1162)))*65536, (uint32)31))/saturating_add(t1140, rounding_mul_shift_right(t1140, int32(((int16)rounding_mul_shift_right((int16)7363, t1158, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1158, t1141, (uint16)15), (uint16)15) + t1163)))*65536, (uint32)31)))*(saturating_add(t1142, rounding_mul_shift_right(t1142, int32(((int16)rounding_mul_shift_right((int16)7363, t1159, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1159, t1143, (uint16)15), (uint16)15) + t1164)))*65536, (uint32)31))*t908))*((t908*t908) + 6)) + 1)))
       let t929 = bias[t1126] + matrix_mul1[matrix_mul2.s1.r14$x + 768]
       matrix_mul2[ramp(192, 1, 16)] = matrix_mul2[ramp(192, 1, 16)] + (int32x16(C[ramp((C.stride.2*matrix_mul2.s1.r14$x) + t1160, C.stride.1, 16)])*x16((saturating_add(t1136, rounding_mul_shift_right(t1136, int32(((int16)rounding_mul_shift_right((int16)7363, t1156, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1156, t1137, (uint16)15), (uint16)15) + t1161)))*65536, (uint32)31))*t929)*((((saturating_add(t1138, rounding_mul_shift_right(t1138, int32(((int16)rounding_mul_shift_right((int16)7363, t1157, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1157, t1139, (uint16)15), (uint16)15) + t1162)))*65536, (uint32)31))/saturating_add(t1140, rounding_mul_shift_right(t1140, int32(((int16)rounding_mul_shift_right((int16)7363, t1158, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1158, t1141, (uint16)15), (uint16)15) + t1163)))*65536, (uint32)31)))*(saturating_add(t1142, rounding_mul_shift_right(t1142, int32(((int16)rounding_mul_shift_right((int16)7363, t1159, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1159, t1143, (uint16)15), (uint16)15) + t1164)))*65536, (uint32)31))*t929))*((t929*t929) + 6)) + 1)))
       let t950 = bias[t1126] + matrix_mul1[matrix_mul2.s1.r14$x + 768]
       matrix_mul2[ramp(208, 1, 16)] = matrix_mul2[ramp(208, 1, 16)] + (int32x16(C[ramp((C.stride.2*matrix_mul2.s1.r14$x) + t1165, C.stride.1, 16)])*x16((saturating_add(t1136, rounding_mul_shift_right(t1136, int32(((int16)rounding_mul_shift_right((int16)7363, t1156, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1156, t1137, (uint16)15), (uint16)15) + t1161)))*65536, (uint32)31))*t950)*((((saturating_add(t1138, rounding_mul_shift_right(t1138, int32(((int16)rounding_mul_shift_right((int16)7363, t1157, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1157, t1139, (uint16)15), (uint16)15) + t1162)))*65536, (uint32)31))/saturating_add(t1140, rounding_mul_shift_right(t1140, int32(((int16)rounding_mul_shift_right((int16)7363, t1158, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1158, t1141, (uint16)15), (uint16)15) + t1163)))*65536, (uint32)31)))*(saturating_add(t1142, rounding_mul_shift_right(t1142, int32(((int16)rounding_mul_shift_right((int16)7363, t1159, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1159, t1143, (uint16)15), (uint16)15) + t1164)))*65536, (uint32)31))*t950))*((t950*t950) + 6)) + 1)))
       let t971 = bias[t1126] + matrix_mul1[matrix_mul2.s1.r14$x + 768]
       matrix_mul2[ramp(224, 1, 16)] = matrix_mul2[ramp(224, 1, 16)] + (int32x16(C[ramp((C.stride.2*matrix_mul2.s1.r14$x) + t1166, C.stride.1, 16)])*x16((saturating_add(t1136, rounding_mul_shift_right(t1136, int32(((int16)rounding_mul_shift_right((int16)7363, t1156, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1156, t1137, (uint16)15), (uint16)15) + t1161)))*65536, (uint32)31))*t971)*((((saturating_add(t1138, rounding_mul_shift_right(t1138, int32(((int16)rounding_mul_shift_right((int16)7363, t1157, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1157, t1139, (uint16)15), (uint16)15) + t1162)))*65536, (uint32)31))/saturating_add(t1140, rounding_mul_shift_right(t1140, int32(((int16)rounding_mul_shift_right((int16)7363, t1158, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1158, t1141, (uint16)15), (uint16)15) + t1163)))*65536, (uint32)31)))*(saturating_add(t1142, rounding_mul_shift_right(t1142, int32(((int16)rounding_mul_shift_right((int16)7363, t1159, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1159, t1143, (uint16)15), (uint16)15) + t1164)))*65536, (uint32)31))*t971))*((t971*t971) + 6)) + 1)))
       let t992 = bias[t1126] + matrix_mul1[matrix_mul2.s1.r14$x + 768]
       matrix_mul2[ramp(240, 1, 16)] = matrix_mul2[ramp(240, 1, 16)] + (int32x16(C[ramp((C.stride.2*matrix_mul2.s1.r14$x) + t1167, C.stride.1, 16)])*x16((saturating_add(t1136, rounding_mul_shift_right(t1136, int32(((int16)rounding_mul_shift_right((int16)7363, t1156, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1156, t1137, (uint16)15), (uint16)15) + t1161)))*65536, (uint32)31))*t992)*((((saturating_add(t1138, rounding_mul_shift_right(t1138, int32(((int16)rounding_mul_shift_right((int16)7363, t1157, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1157, t1139, (uint16)15), (uint16)15) + t1162)))*65536, (uint32)31))/saturating_add(t1140, rounding_mul_shift_right(t1140, int32(((int16)rounding_mul_shift_right((int16)7363, t1158, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1158, t1141, (uint16)15), (uint16)15) + t1163)))*65536, (uint32)31)))*(saturating_add(t1142, rounding_mul_shift_right(t1142, int32(((int16)rounding_mul_shift_right((int16)7363, t1159, (uint16)15) + ((int16)rounding_mul_shift_right((int16)2592, (int16)rounding_mul_shift_right(t1159, t1143, (uint16)15), (uint16)15) + t1164)))*65536, (uint32)31))*t992))*((t992*t992) + 6)) + 1)))
      }
     }
     free matrix_mul1
    }
    consume matrix_mul2 {
     output[ramp(((output.min.1 + output.s0.x.xi.base.s)*output.stride.1) + t1144, output.stride.1, 16)] = matrix_mul2[ramp(0, 1, 16)]
     output[ramp((((output.min.1 + output.s0.x.xi.base.s) + 16)*output.stride.1) + t1144, output.stride.1, 16)] = matrix_mul2[ramp(16, 1, 16)]
     output[ramp((((output.min.1 + output.s0.x.xi.base.s) + 32)*output.stride.1) + t1144, output.stride.1, 16)] = matrix_mul2[ramp(32, 1, 16)]
     output[ramp((((output.min.1 + output.s0.x.xi.base.s) + 48)*output.stride.1) + t1144, output.stride.1, 16)] = matrix_mul2[ramp(48, 1, 16)]
     output[ramp(((output.min.1 + output.s0.x.xi.base.s)*output.stride.1) + t1145, output.stride.1, 16)] = matrix_mul2[ramp(64, 1, 16)]
     output[ramp((((output.min.1 + output.s0.x.xi.base.s) + 16)*output.stride.1) + t1145, output.stride.1, 16)] = matrix_mul2[ramp(80, 1, 16)]
     output[ramp((((output.min.1 + output.s0.x.xi.base.s) + 32)*output.stride.1) + t1145, output.stride.1, 16)] = matrix_mul2[ramp(96, 1, 16)]
     output[ramp((((output.min.1 + output.s0.x.xi.base.s) + 48)*output.stride.1) + t1145, output.stride.1, 16)] = matrix_mul2[ramp(112, 1, 16)]
     output[ramp(((output.min.1 + output.s0.x.xi.base.s)*output.stride.1) + t1146, output.stride.1, 16)] = matrix_mul2[ramp(128, 1, 16)]
     output[ramp((((output.min.1 + output.s0.x.xi.base.s) + 16)*output.stride.1) + t1146, output.stride.1, 16)] = matrix_mul2[ramp(144, 1, 16)]
     output[ramp((((output.min.1 + output.s0.x.xi.base.s) + 32)*output.stride.1) + t1146, output.stride.1, 16)] = matrix_mul2[ramp(160, 1, 16)]
     output[ramp((((output.min.1 + output.s0.x.xi.base.s) + 48)*output.stride.1) + t1146, output.stride.1, 16)] = matrix_mul2[ramp(176, 1, 16)]
     output[ramp(((output.min.1 + output.s0.x.xi.base.s)*output.stride.1) + t1147, output.stride.1, 16)] = matrix_mul2[ramp(192, 1, 16)]
     output[ramp((((output.min.1 + output.s0.x.xi.base.s) + 16)*output.stride.1) + t1147, output.stride.1, 16)] = matrix_mul2[ramp(208, 1, 16)]
     output[ramp((((output.min.1 + output.s0.x.xi.base.s) + 32)*output.stride.1) + t1147, output.stride.1, 16)] = matrix_mul2[ramp(224, 1, 16)]
     output[ramp((((output.min.1 + output.s0.x.xi.base.s) + 48)*output.stride.1) + t1147, output.stride.1, 16)] = matrix_mul2[ramp(240, 1, 16)]
     free matrix_mul2
    }
   }
  }
 }
}
}


