module name=blur3x3, target=arm-64-osx-arm_dot_prod-arm_fp16-armv7s-armv81a-no_asserts-no_bounds_query-sve-sve2
external_plus_metadata func blur3x3 (input, blur_y) {
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
assert((uint64)reinterpret((halide_buffer_t *)blur_y.buffer) != (uint64)0, halide_error_buffer_argument_is_null("blur_y"))
let blur_y = (void *)_halide_buffer_get_host((halide_buffer_t *)blur_y.buffer)
let blur_y.min.0 = _halide_buffer_get_min((halide_buffer_t *)blur_y.buffer, 0)
let blur_y.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)blur_y.buffer, 0)
let blur_y.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)blur_y.buffer, 0)
let blur_y.min.1 = _halide_buffer_get_min((halide_buffer_t *)blur_y.buffer, 1)
let blur_y.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)blur_y.buffer, 1)
let blur_y.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)blur_y.buffer, 1)
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
assert(blur_y.stride.0 == 1, 0)
assert(input.stride.0 == 1, 0)
produce blur_y {
 let t529 = blur_y.extent.0 + blur_y.min.0
 let t530 = input.extent.0 + input.min.0
 let t531 = min(blur_y.extent.0, 16)
 let t532 = max(input.extent.1, 0) + input.min.1
 let t533 = blur_y.min.1*blur_y.stride.1
 let t534 = (blur_y.extent.0 + 15)/16
 let t535 = max(blur_y.extent.0, 16)
 let t536 = (t535 + 17)/16
 let t537 = min(t534, 1)
 let t538 = min(max((((input.min.0 - t531) - blur_y.min.0) + 31)/16, 0), t536)
 let t539 = 16 < blur_y.extent.0
 let t540 = t531 + -16
 let t541 = min(select(t539, min(blur_y.extent.0, 0), t540), t540)
 let t542 = t535 + 1
 let t543 = blur_y.extent.0 + -16
 let t544 = max(select(t539, ((blur_y.extent.0 + -1)/16)*16, t543), t543) + (((max(select(t539, max(blur_y.extent.0, 0), 16), 16) + -1)/16)*16)
 let t510 = (max(max(min(t544 + 16, blur_y.extent.0), min(t543, t544) + 17), min(blur_y.extent.0 + 2, ((t542/16)*16) + t531) + -1) - t541) + 1
 let t524 = 0 < blur_y.extent.0
 let t520 = max((min(min((t530 - t531) - blur_y.min.0, min(((min(t530 + 13, t529) - t531) - blur_y.min.0) + 16, t535) + -14), t542)/16) + 1, t538)
 let t523 = max(blur_y.extent.0/16, t537)
 let t508 = (blur_y.extent.1 + 63)/64
 for (blur_y.s0.y.y, 0, t508) {
  let blur_y.s0.y.yi.base.s = min(blur_y.s0.y.y*64, blur_y.extent.1 + -64)
  allocate read_input[uint16 * t510 * 66] in Stack
  produce read_input {
   let read_input.s0.y.prologue = let t604 = (blur_y.min.1 + blur_y.s0.y.yi.base.s) in min(max(t604, input.min.1), t604 + 66)
   let read_input.s0.y.epilogue = let t605 = (blur_y.min.1 + blur_y.s0.y.yi.base.s) in min(max(max(t605, input.min.1), input.extent.1 + input.min.1), t605 + 66)
   let t545 = max(min((input.min.1 - blur_y.min.1) - min(blur_y.s0.y.y*64, blur_y.extent.1 + -64), 66), 0)
   let t547 = (blur_y.min.1 - input.min.1) + blur_y.s0.y.yi.base.s
   let t548 = blur_y.min.0 + t541
   let t546 = blur_y.min.0 + t531
   for (read_input.s0.y.rebased, 0, t545) {
    let t549 = (max(min(read_input.s0.y.rebased + t547, input.extent.1 + -1), 0)*input.stride.1) - input.min.0
    let t550 = (read_input.s0.y.rebased*t510) - t548
    for (read_input.s0.x.x, 0, t536) {
     let read_input.s0.x.v2.base.s = min((read_input.s0.x.x*16) + t546, t529 + 2)
     read_input[ramp((read_input.s0.x.v2.base.s + t550) + -16, 1, 16)] = input[max(min(ramp(read_input.s0.x.v2.base.s + -16, 1, 16), x16(t530 + -1)), x16(input.min.0)) + x16(t549)]
    }
   }
   let t558 = min(blur_y.s0.y.y*64, blur_y.extent.1 + -64)
   let t559 = blur_y.min.1 + t558
   let t560 = t559 + 66
   let t551 = min(max(t532, t559), t560) - min(max(input.min.1, t559), t560)
   let t557 = t536 - t520
   let t554 = read_input.s0.y.prologue - input.min.1
   let t555 = blur_y.min.0 + t541
   let t552 = blur_y.min.0 + t531
   for (read_input.s0.y.rebased, 0, t551) {
    let t562 = ((read_input.s0.y.rebased + t554)*input.stride.1) - input.min.0
    for (read_input.s0.x.x, 0, t538) {
     let read_input.s0.x.v2.base.s = min((read_input.s0.x.x*16) + t552, t529 + 2)
     read_input[ramp(((((max(min((input.min.1 - blur_y.min.1) - t558, 66), 0) + read_input.s0.y.rebased)*t510) - t555) + read_input.s0.x.v2.base.s) + -16, 1, 16)] = input[max(min(ramp(read_input.s0.x.v2.base.s + -16, 1, 16), x16(t530 + -1)), x16(input.min.0)) + x16(t562)]
    }
    let t565 = ((read_input.s0.y.rebased + t554)*input.stride.1) - input.min.0
    let t563 = t520 - t538
    for (read_input.s0.x.x.rebased, 0, t563) {
     let read_input.s0.x.v2.base.s = ((read_input.s0.x.x.rebased + t538)*16) + t552
     read_input[ramp(((((max(min((input.min.1 - blur_y.min.1) - t558, 66), 0) + read_input.s0.y.rebased)*t510) - t555) + read_input.s0.x.v2.base.s) + -16, 1, 16)] = input[ramp((read_input.s0.x.v2.base.s + t565) + -16, 1, 16)]
    }
    let t567 = ((read_input.s0.y.rebased + t554)*input.stride.1) - input.min.0
    for (read_input.s0.x.x.rebased, 0, t557) {
     let read_input.s0.x.v2.base.s = min(((read_input.s0.x.x.rebased + t520)*16) + t552, t529 + 2)
     read_input[ramp(((((max(min((input.min.1 - blur_y.min.1) - t558, 66), 0) + read_input.s0.y.rebased)*t510) - t555) + read_input.s0.x.v2.base.s) + -16, 1, 16)] = input[max(min(ramp(read_input.s0.x.v2.base.s + -16, 1, 16), x16(t530 + -1)), x16(input.min.0)) + x16(t567)]
    }
   }
   let t573 = min(blur_y.s0.y.y*64, blur_y.extent.1 + -64)
   let t568 = max(min((blur_y.min.1 - t532) + t573, 0), -66)
   let t571 = read_input.s0.y.epilogue - input.min.1
   let t572 = blur_y.min.0 + t541
   let t569 = blur_y.min.0 + t531
   for (read_input.s0.y.rebased, 0, t568 + 66) {
    let t575 = (max(min(read_input.s0.y.rebased + t571, input.extent.1 + -1), 0)*input.stride.1) - input.min.0
    for (read_input.s0.x.x, 0, t536) {
     let read_input.s0.x.v2.base.s = min((read_input.s0.x.x*16) + t569, t529 + 2)
     read_input[ramp(((((max(min((t532 - blur_y.min.1) - t573, 66), 0) + read_input.s0.y.rebased)*t510) - t572) + read_input.s0.x.v2.base.s) + -16, 1, 16)] = input[max(min(ramp(read_input.s0.x.v2.base.s + -16, 1, 16), x16(t530 + -1)), x16(input.min.0)) + x16(t575)]
    }
   }
  }
  allocate blur_x[uint16 * (blur_y.extent.0 - t541) * 4] in Stack
  consume read_input {
   let t576 = (t510*2) - t541
   let t577 = blur_y.min.1 + blur_y.s0.y.yi.base.s
   for (blur_y.s0.y.yi.$n.rebased, 0, 2) {
    let t580 = (((blur_y.s0.y.yi.$n.rebased + t577) % 4)*(blur_y.extent.0 - t541)) - t541
    let t579 = ((blur_y.s0.y.yi.$n.rebased + -2)*t510) + t576
    for (blur_y.s0.x.x, 0, t534) {
     if (0 < select(0 < blur_y.s0.x.x, max(min(blur_y.extent.0 - (blur_y.s0.x.x*16), 16), 0), 16)) {
      let blur_y.s0.x.v0.base.s = min(blur_y.s0.x.x*16, blur_y.extent.0 + -16)
      let blur_x.s0.x.min_2.s = select(0 < blur_y.s0.x.x, min(blur_y.s0.x.x*16, blur_y.extent.0), blur_y.s0.x.v0.base.s)
      produce blur_x {
       let blur_x.s0.x.v1.base.s = min(blur_x.s0.x.min_2.s, blur_y.s0.x.v0.base.s)
       let t445 = blur_x.s0.x.v1.base.s + t579
       blur_x[ramp(blur_x.s0.x.v1.base.s + t580, 1, 16)] = (read_input[ramp(t445 + 1, 1, 16)] + (read_input[ramp(t445 + 2, 1, 16)] + read_input[ramp(t445, 1, 16)]))/x16((uint16)3)
      }
     }
    }
   }
   let t590 = t510*2
   let t587 = t590 - t541
   let t581 = (t531 + t590) - t541
   let t589 = t534 - t523
   let t582 = t531 - t541
   let t585 = t531 - t533
   let t588 = 0 - t533
   let t583 = blur_y.min.1 + blur_y.s0.y.yi.base.s
   for (blur_y.s0.y.yi.$n, 0, 64) {
    if (t524) {
     produce blur_x {
      let t447 = (blur_y.s0.y.yi.$n*t510) + t581
      blur_x[ramp((((((blur_y.s0.y.yi.$n + t583) + 2) % 4)*(blur_y.extent.0 - t541)) + t582) + -16, 1, 16)] = (read_input[ramp(t447 + -15, 1, 16)] + (read_input[ramp(t447 + -14, 1, 16)] + read_input[ramp(t447 + -16, 1, 16)]))/x16((uint16)3)
     }
     consume blur_x {
      let t499 = blur_y.s0.y.yi.$n + t583
      let t606 = blur_y.extent.0 - t541
      blur_y[ramp(((blur_y.stride.1*t499) + t585) + -16, 1, 16)] = (blur_x[ramp(((((t499 + 1) % 4)*t606) + t582) + -16, 1, 16)] + (blur_x[ramp(((((t499 + 2) % 4)*t606) + t582) + -16, 1, 16)] + blur_x[ramp((((t499 % 4)*t606) + t582) + -16, 1, 16)]))/x16((uint16)3)
     }
    }
    let t596 = blur_y.s0.y.yi.$n + t583
    let t597 = blur_y.extent.0 - t541
    let t593 = (((t596 + 2) % 4)*t597) - t541
    let t591 = t523 - t537
    let t592 = (blur_y.s0.y.yi.$n*t510) + t587
    for (blur_y.s0.x.x.rebased, 0, t591) {
     if (let t607 = (blur_y.s0.x.x.rebased + t537) in (0 < select(0 < t607, max(min(blur_y.extent.0 - (t607*16), 16), 0), 16))) {
      produce blur_x {
       let t453 = ((blur_y.s0.x.x.rebased + t537)*16) + t592
       blur_x[ramp(((blur_y.s0.x.x.rebased + t537)*16) + t593, 1, 16)] = (read_input[ramp(t453 + 1, 1, 16)] + (read_input[ramp(t453 + 2, 1, 16)] + read_input[ramp(t453, 1, 16)]))/x16((uint16)3)
      }
     }
     consume blur_x {
      let t504 = blur_y.s0.x.x.rebased + t537
      blur_y[ramp((t504*16) + ((blur_y.stride.1*t596) + t588), 1, 16)] = (blur_x[ramp((t504*16) + ((((t596 + 1) % 4)*t597) - t541), 1, 16)] + (blur_x[ramp((t504*16) + ((((t596 + 2) % 4)*t597) - t541), 1, 16)] + blur_x[ramp((t504*16) + (((t596 % 4)*t597) - t541), 1, 16)]))/x16((uint16)3)
     }
    }
    let t602 = blur_y.s0.y.yi.$n + t583
    let t603 = blur_y.extent.0 - t541
    let t599 = (((t602 + 2) % 4)*t603) - t541
    let t598 = (blur_y.s0.y.yi.$n*t510) + t587
    for (blur_y.s0.x.x.rebased, 0, t589) {
     let blur_y.s0.x.v0.base.s = min((blur_y.s0.x.x.rebased + t523)*16, blur_y.extent.0 + -16)
     let blur_x.s0.x.min_2.s = min((blur_y.s0.x.x.rebased + t523)*16, blur_y.extent.0)
     if (let t608 = (blur_y.s0.x.x.rebased + t523) in (0 < select(0 < t608, max(min(blur_y.extent.0 - (t608*16), 16), 0), 16))) {
      produce blur_x {
       let blur_x.s0.x.v1.base.s = min(blur_x.s0.x.min_2.s, blur_y.s0.x.v0.base.s)
       let t458 = blur_x.s0.x.v1.base.s + t598
       blur_x[ramp(blur_x.s0.x.v1.base.s + t599, 1, 16)] = (read_input[ramp(t458 + 1, 1, 16)] + (read_input[ramp(t458 + 2, 1, 16)] + read_input[ramp(t458, 1, 16)]))/x16((uint16)3)
      }
     }
     consume blur_x {
      blur_y[ramp(((blur_y.stride.1*t602) + t588) + blur_y.s0.x.v0.base.s, 1, 16)] = (blur_x[ramp(((((t602 + 1) % 4)*t603) - t541) + blur_y.s0.x.v0.base.s, 1, 16)] + (blur_x[ramp(((((t602 + 2) % 4)*t603) - t541) + blur_y.s0.x.v0.base.s, 1, 16)] + blur_x[ramp((((t602 % 4)*t603) - t541) + blur_y.s0.x.v0.base.s, 1, 16)]))/x16((uint16)3)
     }
    }
   }
   free read_input
   free blur_x
  }
 }
}
}


