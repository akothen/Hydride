module name=gaussian3x3, target=arm-64-osx-arm_dot_prod-arm_fp16-armv7s-armv81a-no_asserts-no_bounds_query-sve-sve2
external_plus_metadata func gaussian3x3 (input, output) {
assert((uint64)reinterpret((halide_buffer_t *)output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("output"))
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let output = (void *)_halide_buffer_get_host((halide_buffer_t *)output.buffer)
let output.min.0 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 0)
let output.min.1 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 1)
assert(input.stride.0 == 1, 0)
assert(output.stride.0 == 1, 0)
produce output {
 let t119 = input.extent.0 + input.min.0
 let t120 = max(input.extent.1, 0) + input.min.1
 let t121 = (output.extent.0 + 63)/32
 let t122 = (output.extent.0 + 31)/32
 let t123 = min(max((input.min.0 - output.min.0)/32, -1) + 1, t121)
 let t109 = max((min(t119 - output.min.0, output.extent.0 + 62) + 1)/32, t123)
 let t112 = max(t122*32, (((output.extent.0 + -1)/32)*32) + 2)
 let t100 = (output.extent.1 + 3)/4
 let t118 = 0 - (output.min.1*output.stride.1)
 for (output.s0.y.y, 0, t100) {
  allocate bounded_input[uint8 * (t121*32) * 6]
  produce bounded_input {
   let bounded_input.s0.y.prologue = let t172 = ((output.s0.y.y*4) + output.min.1) in min(max(t172 + -1, input.min.1), t172 + 5)
   let bounded_input.s0.y.epilogue = let t173 = ((output.s0.y.y*4) + output.min.1) in min(max(max(t173 + -1, input.min.1), input.extent.1 + input.min.1), t173 + 5)
   let t126 = output.s0.y.y*4
   let t124 = max(min((input.min.1 - output.min.1) - t126, 5), -1)
   let t125 = (output.min.1 - input.min.1) + t126
   for (bounded_input.s0.y.rebased, 0, t124 + 1) {
    let t128 = bounded_input.s0.y.rebased*t121
    let t127 = ((max(min(bounded_input.s0.y.rebased + t125, input.extent.1), 1) + -1)*input.stride.1) - input.min.0
    for (bounded_input.s0.x.x, 0, t121) {
     bounded_input[ramp((bounded_input.s0.x.x + t128)*32, 1, 32) aligned(32, 0)] = input[max(min(ramp(((bounded_input.s0.x.x*32) + output.min.0) + -1, 1, 32), x32(t119 + -1)), x32(input.min.0)) + x32(t127)]
    }
   }
   let t136 = output.s0.y.y*4
   let t137 = output.min.1 + t136
   let t138 = t137 + -1
   let t139 = t137 + 5
   let t129 = min(max(t120, t138), t139) - min(max(input.min.1, t138), t139)
   let t131 = bounded_input.s0.y.prologue - input.min.1
   for (bounded_input.s0.y.rebased, 0, t129) {
    let t141 = ((((min(max(t137 + -1, input.min.1), t137 + 5) - output.min.1) - t136) + bounded_input.s0.y.rebased) + 1)*t121
    let t140 = ((bounded_input.s0.y.rebased + t131)*input.stride.1) - input.min.0
    for (bounded_input.s0.x.x, 0, t123) {
     bounded_input[ramp((bounded_input.s0.x.x + t141)*32, 1, 32) aligned(32, 0)] = input[max(min(ramp(((bounded_input.s0.x.x*32) + output.min.0) + -1, 1, 32), x32(t119 + -1)), x32(input.min.0)) + x32(t140)]
    }
    let t142 = t109 - t123
    let t144 = (((((min(max(t137 + -1, input.min.1), t137 + 5) - output.min.1) - t136) + bounded_input.s0.y.rebased) + 1)*t121) + t123
    let t143 = ((bounded_input.s0.y.rebased + t131)*input.stride.1) + (output.min.0 - input.min.0)
    for (bounded_input.s0.x.x.rebased, 0, t142) {
     bounded_input[ramp((bounded_input.s0.x.x.rebased + t144)*32, 1, 32) aligned(32, 0)] = input[ramp((((bounded_input.s0.x.x.rebased + t123)*32) + t143) + -1, 1, 32)]
    }
    let t146 = ((bounded_input.s0.y.rebased + t131)*input.stride.1) - input.min.0
    let t145 = t121 - t109
    let t147 = (((((min(max(t137 + -1, input.min.1), t137 + 5) - output.min.1) - t136) + bounded_input.s0.y.rebased) + 1)*t121) + t109
    for (bounded_input.s0.x.x.rebased, 0, t145) {
     bounded_input[ramp((bounded_input.s0.x.x.rebased + t147)*32, 1, 32) aligned(32, 0)] = input[max(min(ramp((((bounded_input.s0.x.x.rebased + t109)*32) + output.min.0) + -1, 1, 32), x32(t119 + -1)), x32(input.min.0)) + x32(t146)]
    }
   }
   let t152 = output.s0.y.y*4
   let t148 = max(min((output.min.1 - t120) + t152, 1), -5)
   let t150 = bounded_input.s0.y.epilogue - input.min.1
   for (bounded_input.s0.y.rebased, 0, t148 + 5) {
    let t154 = ((max(min((t120 - output.min.1) - t152, 5), -1) + bounded_input.s0.y.rebased) + 1)*t121
    let t153 = (max(min(bounded_input.s0.y.rebased + t150, input.extent.1 + -1), 0)*input.stride.1) - input.min.0
    for (bounded_input.s0.x.x, 0, t121) {
     bounded_input[ramp((bounded_input.s0.x.x + t154)*32, 1, 32) aligned(32, 0)] = input[max(min(ramp(((bounded_input.s0.x.x*32) + output.min.0) + -1, 1, 32), x32(t119 + -1)), x32(input.min.0)) + x32(t153)]
    }
   }
  }
  allocate rows[int16 * (((t112 + 63)/32)*32) * 4]
  produce rows {
   consume bounded_input {
    let t162 = (t112 + 63)/32
    for (rows.s0.x.x, 0, t121) {
     rows[ramp(rows.s0.x.x*32, 1, 32) aligned(32, 0)] = ((int16x32)shift_left(int16x32(bounded_input[ramp((rows.s0.x.x + t121)*32, 1, 32) aligned(32, 0)]), x32((uint16)1)) + int16x32(bounded_input[ramp(rows.s0.x.x*32, 1, 32) aligned(32, 0)])) + int16x32(bounded_input[ramp(((t121*2) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)])
     rows[ramp((rows.s0.x.x + t162)*32, 1, 32) aligned(32, 0)] = ((int16x32)shift_left(int16x32(bounded_input[ramp(((t121*2) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)]), x32((uint16)1)) + int16x32(bounded_input[ramp((rows.s0.x.x + t121)*32, 1, 32) aligned(32, 0)])) + int16x32(bounded_input[ramp(((t121*3) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)])
     rows[ramp(((t162*2) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)] = ((int16x32)shift_left(int16x32(bounded_input[ramp(((t121*3) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)]), x32((uint16)1)) + int16x32(bounded_input[ramp(((t121*2) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)])) + int16x32(bounded_input[ramp(((t121*4) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)])
     rows[ramp(((t162*3) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)] = ((int16x32)shift_left(int16x32(bounded_input[ramp(((t121*4) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)]), x32((uint16)1)) + int16x32(bounded_input[ramp(((t121*3) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)])) + int16x32(bounded_input[ramp(((t121*5) + rows.s0.x.x)*32, 1, 32) aligned(32, 0)])
    }
   }
  }
  free bounded_input
  consume rows {
   let t170 = (output.s0.y.y*4) + output.min.1
   let t171 = (t112 + 63)/32
   let t163 = (output.stride.1*t170) + t118
   let t169 = ((t170 + 3)*output.stride.1) + t118
   let t167 = ((t170 + 2)*output.stride.1) + t118
   let t165 = ((t170 + 1)*output.stride.1) + t118
   for (output.s0.x.x, 0, t122) {
    output[ramp((output.s0.x.x*32) + t163, 1, 32)] = uint8x32((int16x32)shift_right(((int16x32)shift_left(rows[ramp((output.s0.x.x*32) + 1, 1, 32) aligned(32, 1)], x32((uint16)1)) + (rows[ramp(output.s0.x.x*32, 1, 32) aligned(32, 0)] + rows[ramp((output.s0.x.x*32) + 2, 1, 32) aligned(32, 2)])) + x32((int16)8), x32((uint16)4)))
    let t97 = output.s0.x.x + t171
    output[ramp((output.s0.x.x*32) + t165, 1, 32)] = uint8x32((int16x32)shift_right(((int16x32)shift_left(rows[ramp((t97*32) + 1, 1, 32) aligned(32, 1)], x32((uint16)1)) + (rows[ramp(t97*32, 1, 32) aligned(32, 0)] + rows[ramp((t97*32) + 2, 1, 32) aligned(32, 2)])) + x32((int16)8), x32((uint16)4)))
    let t98 = (t171*2) + output.s0.x.x
    output[ramp((output.s0.x.x*32) + t167, 1, 32)] = uint8x32((int16x32)shift_right(((int16x32)shift_left(rows[ramp((t98*32) + 1, 1, 32) aligned(32, 1)], x32((uint16)1)) + (rows[ramp(t98*32, 1, 32) aligned(32, 0)] + rows[ramp((t98*32) + 2, 1, 32) aligned(32, 2)])) + x32((int16)8), x32((uint16)4)))
    let t99 = (t171*3) + output.s0.x.x
    output[ramp((output.s0.x.x*32) + t169, 1, 32)] = uint8x32((int16x32)shift_right(((int16x32)shift_left(rows[ramp((t99*32) + 1, 1, 32) aligned(32, 1)], x32((uint16)1)) + (rows[ramp(t99*32, 1, 32) aligned(32, 0)] + rows[ramp((t99*32) + 2, 1, 32) aligned(32, 2)])) + x32((int16)8), x32((uint16)4)))
   }
  }
  free rows
 }
}
}


