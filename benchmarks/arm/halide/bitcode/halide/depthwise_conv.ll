; ModuleID = 'depthwise_conv'
source_filename = "/home/muchenx2/Hydride/frontends/halide/src/runtime/posix_allocator.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx"

%struct.mach_timebase_info = type { i32, i32 }
%"struct.Halide::Runtime::Internal::Synchronization::hash_table" = type { [1024 x %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"] }
%"struct.Halide::Runtime::Internal::Synchronization::hash_bucket" = type { %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* }
%"class.Halide::Runtime::Internal::Synchronization::word_lock" = type { i64 }
%"struct.Halide::Runtime::Internal::Synchronization::queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", i64, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::thread_parker" = type <{ %struct.pthread_mutex_t, %struct.pthread_mutex_t, i8, [7 x i8] }>
%struct.pthread_mutex_t = type { [8 x i64] }
%"struct.Halide::Runtime::Internal::work_queue_t" = type { %struct.halide_mutex, i32, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i32, i32, [4 x i8], %struct.halide_mutex, %struct.halide_mutex, %struct.halide_mutex, i32, i32, [256 x %struct.halide_thread*], i8, i8, i32 }
%"struct.Halide::Runtime::Internal::work" = type { %struct.halide_parallel_task_t, i32 (i8*, i32, i8*)*, %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"*, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i8*, i32, i32, i32, i8 }
%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8, [7 x i8] }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32, [4 x i8] }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex = type { [1 x i64] }
%struct.halide_thread = type opaque
%"class.Halide::Runtime::Internal::TraceBuffer" = type { %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock", i32, i32, [1048576 x i8] }
%"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" = type { i32 }
%struct.halide_trace_event_t = type <{ i8*, i8*, i32*, i8*, %struct.halide_type_t, i32, i32, i32, i32, [4 x i8] }>
%struct.halide_type_t = type { i8, i8, i16 }
%"struct.Halide::Runtime::Internal::CacheEntry" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, i8*, i64, i8*, i32, i32, i32, i32, %struct.halide_dimension_t*, %struct.halide_buffer_t*, i64, i8, [7 x i8] }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_profiler_state = type { %struct.halide_mutex, i32, i32, i32, i32, %struct.halide_profiler_pipeline_stats*, void (i32*, i32*)*, %struct.halide_thread* }
%struct.halide_profiler_pipeline_stats = type { i64, i64, i64, i64, i64, i64, i8*, %struct.halide_profiler_func_stats*, i8*, i32, i32, i32, i32, i32, [4 x i8] }
%struct.halide_profiler_func_stats = type { i64, i64, i64, i64, i64, i64, i64, i8*, i32, [4 x i8] }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_scalar_value_t = type { %union.anon.28 }
%union.anon.28 = type { double }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64* }
%"struct.Halide::Runtime::Internal::Synchronization::parking_control" = type { i32 (...)** }
%"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* }
%"struct.Halide::Runtime::Internal::Synchronization::validate_action" = type { i8, [7 x i8], i64 }
%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"* }
%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair" = type { %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* }
%"struct.Halide::Runtime::Internal::spawned_thread" = type { void (i8*)*, i8*, i64 }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%"struct.Halide::Runtime::Internal::halide_tiff_header" = type <{ i16, i16, i32, i16, [15 x %"struct.Halide::Runtime::Internal::tiff_tag"], i32, [2 x i32], [2 x i32] }>
%"struct.Halide::Runtime::Internal::tiff_tag" = type { i16, i16, i32, %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" }
%"struct.Halide::Runtime::Internal::CacheBlockHeader" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, i32, [4 x i8] }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }
%struct.halide_pseudostack_slot_t = type { i8*, i64, i64 }

@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i64)* @halide_default_malloc, align 8
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 8
@_ZN6Halide7Runtime8Internal13error_handlerE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_error, align 8
@.str = private unnamed_addr constant [8 x i8] c"Error: \00", align 1
@_ZN6Halide7Runtime8Internal12custom_printE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_print, align 8
@_ZN6Halide7Runtime8Internal29halide_reference_clock_initedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal22halide_reference_clockE = linkonce local_unnamed_addr global i64 0, align 8
@_ZN6Halide7Runtime8Internal20halide_timebase_infoE = linkonce global %struct.mach_timebase_info zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal15Synchronization5tableE = linkonce global %"struct.Halide::Runtime::Internal::Synchronization::hash_table" zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal10work_queueE = linkonce global %"struct.Halide::Runtime::Internal::work_queue_t" { %struct.halide_mutex zeroinitializer, i32 0, i32 0, %"struct.Halide::Runtime::Internal::work"* null, i32 0, i32 0, i32 0, [4 x i8] undef, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, i32 0, i32 0, [256 x %struct.halide_thread*] zeroinitializer, i8 0, i8 0, i32 0 }, align 8
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 8
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 8
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 8
@_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.5 = private unnamed_addr constant [130 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:386 halide_abort_if_false() failed: next != nullptr\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.5.6 = private unnamed_addr constant [124 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:994 halide_abort_if_false() failed: val & 0x1\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.6 = private unnamed_addr constant [186 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:155 halide_abort_if_false() failed: bytes == limit && \22Logic error in thread pool work queue initialization.\\n\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [263 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:527 halide_abort_if_false() failed: (min_threads <= ((task_parent->task.min_threads * task_parent->active_workers) - task_parent->threads_reserved)) && \22Logic error: thread over commit.\\n\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"HL_NUM_THREADS\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"HL_NUMTHREADS\00", align 1
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 8
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 8
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 8
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 8
@llvm.global_dtors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @halide_thread_pool_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_trace_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_cache_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_profiler_shutdown, i8* null }]
@_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.4 = private unnamed_addr constant [38 x i8] c"halide_set_num_threads: must be >= 0.\00", align 1
@_ZN6Halide7Runtime8Internal17custom_get_symbolE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_get_symbol, align 8
@_ZN6Halide7Runtime8Internal19custom_load_libraryE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_load_library, align 8
@_ZN6Halide7Runtime8Internal25custom_get_library_symbolE = linkonce local_unnamed_addr global i8* (i8*, i8*)* @halide_default_get_library_symbol, align 8
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@_ZN6Halide7Runtime8Internal19halide_trace_bufferE = linkonce local_unnamed_addr global %"class.Halide::Runtime::Internal::TraceBuffer"* null, align 8
@_ZN6Halide7Runtime8Internal17halide_trace_fileE = linkonce local_unnamed_addr global i32 -1, align 4
@_ZN6Halide7Runtime8Internal22halide_trace_file_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE = linkonce local_unnamed_addr global i8* null, align 8
@_ZN6Halide7Runtime8Internal19halide_custom_traceE = linkonce local_unnamed_addr global i32 (i8*, %struct.halide_trace_event_t*)* @halide_default_trace, align 8
@_ZZ20halide_default_traceE3ids = internal global i32 1, align 4
@.str.32 = private unnamed_addr constant [144 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:115 halide_abort_if_false() failed: success && \22Could not write to trace file\22\0A\00", align 1
@.str.31 = private unnamed_addr constant [120 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:87 halide_abort_if_false() failed: size <= buffer_size\0A\00", align 1
@.str.1.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.11 = private unnamed_addr constant [140 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:218 halide_abort_if_false() failed: print_bits <= 64 && \22Tracing bad type\22\0A\00", align 1
@__const.halide_default_trace.event_types = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.17, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0)], align 8
@.str.17 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c">)\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c">, <\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c" = <\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.24 = private unnamed_addr constant [142 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:287 halide_abort_if_false() failed: print_bits >= 16 && \22Tracing a bad type\22\0A\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c" tag = \22\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.3.12 = private unnamed_addr constant [5 x i8] c"Load\00", align 1
@.str.4.13 = private unnamed_addr constant [6 x i8] c"Store\00", align 1
@.str.5.14 = private unnamed_addr constant [18 x i8] c"Begin realization\00", align 1
@.str.6.15 = private unnamed_addr constant [16 x i8] c"End realization\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"Produce\00", align 1
@.str.8.16 = private unnamed_addr constant [12 x i8] c"End produce\00", align 1
@.str.9.17 = private unnamed_addr constant [8 x i8] c"Consume\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"End consume\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Begin pipeline\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"End pipeline\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Tag\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"HL_TRACE_FILE\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.30 = private unnamed_addr constant [139 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:351 halide_abort_if_false() failed: file && \22Failed to open trace file\\n\22\0A\00", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE = linkonce local_unnamed_addr global [10 x i16] [i16 3, i16 3, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2], align 2
@_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\06\09\08\0B\0A\0D\0C\0F\0E", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\09\02\01\04\03\06\05\0D\0C", align 1
@.str.34 = private unnamed_addr constant [51 x i8] c"Bounds query buffer passed to halide_debug_to_file\00", align 1
@.str.1.35 = private unnamed_addr constant [59 x i8] c"Can't debug_to_file a Func with more than four dimensions\0A\00", align 1
@.str.2.36 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.3.37 = private unnamed_addr constant [6 x i8] c".tiff\00", align 1
@.str.4.38 = private unnamed_addr constant [5 x i8] c".tif\00", align 1
@.str.5.39 = private unnamed_addr constant [5 x i8] c".mat\00", align 1
@__const.halide_debug_to_file.header = private unnamed_addr constant [129 x i8] c"MATLAB 5.0 MAT-file, produced by Halide                                                                                     \00\01IM\00", align 1
@.str.6.40 = private unnamed_addr constant [53 x i8] c"Can't debug_to_file to a .mat file greater than 4GB\0A\00", align 1
@_ZN6Halide7Runtime8Internal16memoization_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal13cache_entriesE = linkonce global [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*] zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal18most_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal19least_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal14max_cache_sizeE = linkonce local_unnamed_addr global i64 1048576, align 8
@_ZN6Halide7Runtime8Internal18current_cache_sizeE = linkonce local_unnamed_addr global i64 0, align 8
@.str.2.42 = private unnamed_addr constant [126 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:284 halide_abort_if_false() failed: prev_hash_entry != nullptr\0A\00", align 1
@.str.3.43 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:373 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.4.44 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:377 halide_abort_if_false() failed: least_recently_used == entry\0A\00", align 1
@.str.5.45 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:380 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.9.46 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:472 halide_abort_if_false() failed: no_host_pointers_equal\0A\00", align 1
@.str.12.47 = private unnamed_addr constant [123 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:550 halide_abort_if_false() failed: entry->in_use_count > 0\0A\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.57 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.58 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.59 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.60 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.61 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.62 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.63 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.64 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9.65 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11.67 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12.68 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13.71 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18.72 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17.73 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16.74 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15.75 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14.76 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19.77 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20.78 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21.79 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23.82 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24.83 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 8
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@.str.6.88 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.89 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.90 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.91 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.92 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.93 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.96 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.97 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.98 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.99 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26.100 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27.101 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28.102 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29.103 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30.104 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31.105 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32.106 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33.107 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34.108 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.111 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.112 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.113 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.114 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.115 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.116 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.117 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.118 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.119 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.120 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.121 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.122 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.123 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.124 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.125 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.126 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.127 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.128 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.129 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.130 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.131 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.132 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.133 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.134 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.135 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.136 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.137 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.138 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.139 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.140 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.141 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.142 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.143 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.144 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.145 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.146 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.147 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50.148 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.149 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.150 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.151 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.152 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.153 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.29.163 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.7.164 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8.165 = private unnamed_addr constant [14 x i8] c" total time: \00", align 1
@.str.9.166 = private unnamed_addr constant [4 x i8] c" ms\00", align 1
@.str.10.167 = private unnamed_addr constant [12 x i8] c"  samples: \00", align 1
@.str.11.168 = private unnamed_addr constant [9 x i8] c"  runs: \00", align 1
@.str.12.169 = private unnamed_addr constant [13 x i8] c"  time/run: \00", align 1
@.str.13.170 = private unnamed_addr constant [5 x i8] c" ms\0A\00", align 1
@.str.14.171 = private unnamed_addr constant [24 x i8] c" average threads used: \00", align 1
@.str.15.172 = private unnamed_addr constant [20 x i8] c" heap allocations: \00", align 1
@.str.16.173 = private unnamed_addr constant [20 x i8] c"  peak heap usage: \00", align 1
@.str.17.174 = private unnamed_addr constant [8 x i8] c" bytes\0A\00", align 1
@.str.18.175 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.19.176 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.20.177 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.21.178 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.22.179 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.23.180 = private unnamed_addr constant [3 x i8] c"%)\00", align 1
@.str.24.181 = private unnamed_addr constant [10 x i8] c"threads: \00", align 1
@.str.25.182 = private unnamed_addr constant [8 x i8] c" peak: \00", align 1
@.str.26.183 = private unnamed_addr constant [7 x i8] c" num: \00", align 1
@.str.27.184 = private unnamed_addr constant [7 x i8] c" avg: \00", align 1
@.str.28.185 = private unnamed_addr constant [9 x i8] c" stack: \00", align 1
@_ZZ25halide_profiler_get_stateE1s = internal global %struct.halide_profiler_state { %struct.halide_mutex zeroinitializer, i32 1, i32 0, i32 0, i32 0, %struct.halide_profiler_pipeline_stats* null, void (i32*, i32*)* null, %struct.halide_thread* null }, align 8
@.str.186 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:246 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.1.187 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:273 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.2.188 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:274 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.3.189 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:275 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@.str.4.190 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:309 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.5.191 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:310 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.6.192 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:311 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 8
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.197 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant i64 0
@1 = private constant [8 x i64*] [i64* @0, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str = private constant [6 x i8] c"input\00", align 32
@str.200 = private constant [11 x i8] c"input_zero\00", align 32
@2 = private constant i64 0
@3 = private constant i64 0
@4 = private constant i64 0
@5 = private constant [6 x i64*] [i64* @2, i64* null, i64* @3, i64* null, i64* @4, i64* null]
@str.201 = private constant [7 x i8] c"filter\00", align 32
@str.202 = private constant [12 x i8] c"filter_zero\00", align 32
@6 = private constant i64 0
@7 = private constant [2 x i64*] [i64* @6, i64* null]
@str.203 = private constant [5 x i8] c"bias\00", align 32
@str.204 = private constant [17 x i8] c"depth_multiplier\00", align 32
@str.205 = private constant [9 x i8] c"stride_x\00", align 32
@str.206 = private constant [9 x i8] c"stride_y\00", align 32
@str.207 = private constant [11 x i8] c"dilation_x\00", align 32
@str.208 = private constant [11 x i8] c"dilation_y\00", align 32
@str.209 = private constant [18 x i8] c"output_multiplier\00", align 32
@str.210 = private constant [13 x i8] c"output_shift\00", align 32
@str.211 = private constant [12 x i8] c"output_zero\00", align 32
@str.212 = private constant [11 x i8] c"output_min\00", align 32
@str.213 = private constant [11 x i8] c"output_max\00", align 32
@8 = private constant i64 0
@9 = private constant [8 x i64*] [i64* @8, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str.214 = private constant [7 x i8] c"output\00", align 32
@10 = private constant [16 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @1, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.200, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.201, i32 0, i32 0), i32 1, i32 3, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([6 x i64*], [6 x i64*]* @5, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.202, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.203, i32 0, i32 0), i32 1, i32 1, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([2 x i64*], [2 x i64*]* @7, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.205, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.206, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.207, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.208, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str.209, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.210, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.211, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.212, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.213, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.214, i32 0, i32 0), i32 2, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @9, i32 0, i32 0) }]
@str.215 = private constant [84 x i8] c"arm-64-osx-arm_dot_prod-arm_fp16-armv7s-armv81a-no_asserts-no_bounds_query-sve-sve2\00", align 32
@str.216 = private constant [15 x i8] c"depthwise_conv\00", align 32
@depthwise_conv_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 16, %struct.halide_filter_argument_t* getelementptr inbounds ([16 x %struct.halide_filter_argument_t], [16 x %struct.halide_filter_argument_t]* @10, i32 0, i32 0), i8* getelementptr inbounds ([84 x i8], [84 x i8]* @str.215, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str.216, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.76, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15.75, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16.74, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.73, i64 0, i64 0)], align 8

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i64 %x) #0 {
entry:
  %add = add i64 %x, 32
  %call1 = tail call i8* @malloc(i64 %add) #14
  %cmp = icmp eq i8* %call1, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call1 to i64
  %sub = add i64 %0, 39
  %and = and i64 %sub, -32
  %1 = inttoptr i64 %and to i8*
  %2 = inttoptr i64 %and to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 -1
  store i8* %call1, i8** %arrayidx, align 8, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i64 -8
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !10
  tail call void @free(i8* %1) #14
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i64)* @halide_set_custom_malloc(i8* (i8*, i64)* %user_malloc) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  store i8* (i8*, i64)* %user_malloc, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  ret i8* (i8*, i64)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_malloc(i8* %user_context, i64 %x) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %user_context, i64 %x) #14
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %ptr) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_error(i8* %user_context, i8* %msg) #0 {
entry:
  %buf = alloca [4096 x i8], align 1
  %0 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %0) #11
  %add.ptr = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 4094
  %call = call i8* @halide_string_to_string(i8* nonnull %0, i8* nonnull %add.ptr, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)) #14
  %add.ptr2 = getelementptr inbounds i8, i8* %call, i64 4094
  %call3 = call i8* @halide_string_to_string(i8* %call, i8* nonnull %add.ptr2, i8* %msg) #14
  %arrayidx = getelementptr inbounds i8, i8* %call3, i64 -1
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %cmp.not = icmp eq i8 %1, 10
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8 10, i8* %call3, align 1, !tbaa !14
  %arrayidx5 = getelementptr inbounds i8, i8* %call3, i64 1
  store i8 0, i8* %arrayidx5, align 1, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %dst.0 = phi i8* [ %arrayidx5, %if.then ], [ %call3, %entry ]
  %sub.ptr.lhs.cast = ptrtoint i8* %dst.0 to i64
  %sub.ptr.rhs.cast = ptrtoint [4096 x i8]* %buf to i64
  %sub.ptr.sub = sub i64 1, %sub.ptr.rhs.cast
  %add = add i64 %sub.ptr.sub, %sub.ptr.lhs.cast
  %call9 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 %add) #14
  call void @halide_print(i8* %user_context, i8* nonnull %0) #14
  call void @abort() #14
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @abort() local_unnamed_addr #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak void @halide_error(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #14
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_error_handler(void (i8*, i8*)* %handler) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  store void (i8*, i8*)* %handler, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_print(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #14
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_print(void (i8*, i8*)* %print) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  store void (i8*, i8*)* %print, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_start_clock(i8* %user_context) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_reference_clock_initedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i32 @mach_timebase_info(%struct.mach_timebase_info* nonnull @_ZN6Halide7Runtime8Internal20halide_timebase_infoE) #14
  %call1 = tail call i64 @mach_absolute_time() #14
  store i64 %call1, i64* @_ZN6Halide7Runtime8Internal22halide_reference_clockE, align 8, !tbaa !18
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_reference_clock_initedE, align 1, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

declare i32 @mach_timebase_info(%struct.mach_timebase_info*) local_unnamed_addr #1

declare i64 @mach_absolute_time() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i64 @halide_current_time_ns(i8* %user_context) local_unnamed_addr #0 {
entry:
  %call = tail call i64 @mach_absolute_time() #14
  %0 = load i64, i64* @_ZN6Halide7Runtime8Internal22halide_reference_clockE, align 8, !tbaa !18
  %sub = sub i64 %call, %0
  %1 = load i32, i32* getelementptr inbounds (%struct.mach_timebase_info, %struct.mach_timebase_info* @_ZN6Halide7Runtime8Internal20halide_timebase_infoE, i64 0, i32 0), align 4, !tbaa !20
  %conv = zext i32 %1 to i64
  %mul = mul i64 %sub, %conv
  %2 = load i32, i32* getelementptr inbounds (%struct.mach_timebase_info, %struct.mach_timebase_info* @_ZN6Halide7Runtime8Internal20halide_timebase_infoE, i64 0, i32 1), align 4, !tbaa !23
  %conv1 = zext i32 %2 to i64
  %div = udiv i64 %mul, %conv1
  ret i64 %div
}

; Function Attrs: nounwind mustprogress
define weak void @halide_sleep_ms(i8* %user_context, i32 %ms) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %ms, 1000
  %call = tail call i32 @usleep(i32 %mul) #14
  ret void
}

declare i32 @usleep(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_print(i8* %user_context, i8* %str) #0 {
entry:
  %call = tail call i64 @strlen(i8* %str) #14
  %call1 = tail call i64 @write(i32 1, i8* %str, i64 %call) #14
  ret void
}

declare i64 @strlen(i8*) local_unnamed_addr #1

declare i64 @write(i32, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_host_cpu_count() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @sysconf(i32 58) #14
  %conv = trunc i64 %call to i32
  ret i32 %conv
}

declare i64 @sysconf(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_yield() local_unnamed_addr #0 {
entry:
  %call = tail call i32 @swtch_pri(i32 0) #14
  ret void
}

declare i32 @swtch_pri(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %job = alloca %"struct.Halide::Runtime::Internal::work", align 8
  %cmp = icmp slt i32 %size, 1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %"struct.Halide::Runtime::Internal::work"* %job to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %0) #11
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 0
  store i32 (i8*, i32, i32, i8*, i8*)* null, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !24
  %min2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 5
  store i32 %min, i32* %min2, align 4, !tbaa !27
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 6
  store i32 %size, i32* %extent, align 8, !tbaa !28
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 8
  store i8 0, i8* %serial, align 8, !tbaa !29
  %semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 3
  store %struct.halide_semaphore_acquire_t* null, %struct.halide_semaphore_acquire_t** %semaphores, align 8, !tbaa !30
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 4
  store i32 0, i32* %num_semaphores, align 8, !tbaa !31
  %closure8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 1
  store i8* %closure, i8** %closure8, align 8, !tbaa !32
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 7
  store i32 0, i32* %min_threads, align 4, !tbaa !33
  %name = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 2
  store i8* null, i8** %name, align 8, !tbaa !34
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 1
  store i32 (i8*, i32, i8*)* %f, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !35
  %user_context11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 7
  store i8* %user_context, i8** %user_context11, align 8, !tbaa !36
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 9
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 8
  %1 = bitcast i32* %active_workers to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %1, align 8, !tbaa !37
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !38
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !39
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %job, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !40
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 4
  store i32 0, i32* %sibling_count, align 8, !tbaa !41
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 5
  store %"struct.Halide::Runtime::Internal::work"* null, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !42
  call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 1, %"struct.Halide::Runtime::Internal::work"* nonnull %job, %"struct.Halide::Runtime::Internal::work"* null) #15
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %job) #15
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %2 = load i32, i32* %exit_status, align 4, !tbaa !43
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %0) #11
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %2, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = load atomic i64, i64* %state.i monotonic, align 8
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %6 = ptrtoint %struct.halide_mutex* %mutex to i64
  br label %while.cond.outer.i.i

while.cond.outer.i.i:                             ; preds = %while.cond.outer.i.i.backedge, %if.then.i
  %expected.0.ph.i.i = phi i64 [ %2, %if.then.i ], [ %expected.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i = phi i32 [ 40, %if.then.i ], [ %spinner.sroa.0.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %and55.i.i = and i64 %expected.0.ph.i.i, 1
  %tobool.not56.i.i = icmp eq i64 %and55.i.i, 0
  br i1 %tobool.not56.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %while.cond.outer.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %expected.057.i.i = phi i64 [ %9, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i ], [ %expected.0.ph.i.i, %while.cond.outer.i.i ]
  %or.i.i = or i64 %expected.057.i.i, 1
  %7 = cmpxchg weak i64* %state.i, i64 %expected.057.i.i, i64 %or.i.i acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then.i.i
  %9 = extractvalue { i64, i1 } %7, 0
  %and.i.i = and i64 %9, 1
  %tobool.not.i.i = icmp eq i64 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.end4.i.i.loopexit

if.end4.i.i.loopexit:                             ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %10 = extractvalue { i64, i1 } %7, 0
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end4.i.i.loopexit, %while.cond.outer.i.i
  %expected.0.lcssa.i.i = phi i64 [ %expected.0.ph.i.i, %while.cond.outer.i.i ], [ %10, %if.end4.i.i.loopexit ]
  %cmp.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i, 0
  br i1 %cmp.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, label %if.end8.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i: ; preds = %if.end4.i.i
  %cmp4.i.not.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i, 1
  br i1 %cmp4.i.not.i.i, label %if.end8.i.i, label %if.then6.i.i

if.then6.i.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i
  %dec.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i, -1
  call void @halide_thread_yield() #14
  %11 = load atomic i64, i64* %state.i monotonic, align 8
  br label %while.cond.outer.i.i.backedge

if.end8.i.i:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, %if.end4.i.i
  %spinner.sroa.0.152.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i ], [ %spinner.sroa.0.0.ph.i.i, %if.end4.i.i ]
  %and9.i.i = and i64 %expected.0.lcssa.i.i, 2
  %cmp.i.i = icmp eq i64 %and9.i.i, 0
  br i1 %cmp.i.i, label %if.then10.i.i, label %if.end19.i.i

if.then10.i.i:                                    ; preds = %if.end8.i.i
  %or12.i.i = or i64 %expected.0.lcssa.i.i, 2
  %12 = cmpxchg weak i64* %state.i, i64 %expected.0.lcssa.i.i, i64 %or12.i.i monotonic monotonic
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %if.end19.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then10.i.i
  %14 = extractvalue { i64, i1 } %12, 0
  br label %while.cond.outer.i.i.backedge

if.end19.i.i:                                     ; preds = %if.then10.i.i, %if.end8.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !44
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !46
  %call21.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %5, i64 %6) #14
  %cmp22.i.i = icmp eq i64 %call21.i.i, %6
  br i1 %cmp22.i.i, label %cleanup30.critedge.i.i, label %if.end24.i.i

if.end24.i.i:                                     ; preds = %if.end19.i.i
  %15 = load atomic i64, i64* %state.i monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %while.cond.outer.i.i.backedge

while.cond.outer.i.i.backedge:                    ; preds = %if.end24.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i, %if.then6.i.i
  %expected.0.ph.i.i.be = phi i64 [ %14, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ %15, %if.end24.i.i ], [ %11, %if.then6.i.i ]
  %spinner.sroa.0.0.ph.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ 40, %if.end24.i.i ], [ %dec.i.i.i, %if.then6.i.i ]
  br label %while.cond.outer.i.i

cleanup30.critedge.i.i:                           ; preds = %if.end19.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit: ; preds = %if.then.i.i, %cleanup30.critedge.i.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_jobs, %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !48, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %land.rhs.i, label %if.end4

land.rhs.i:                                       ; preds = %entry, %while.body.i
  %bytes.011.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), %entry ]
  %1 = load i8, i8* %bytes.011.i, align 1, !tbaa !14
  %cmp2.i = icmp eq i8 %1, 0
  br i1 %cmp2.i, label %while.body.i, label %do.body.i

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %bytes.011.i, i64 1
  %exitcond.not.i = icmp eq i8* %incdec.ptr.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*)
  br i1 %exitcond.not.i, label %do.body.i, label %land.rhs.i, !llvm.loop !52

do.body.i:                                        ; preds = %while.body.i, %land.rhs.i
  %bytes.0.lcssa.i = phi i8* [ %bytes.011.i, %land.rhs.i ], [ bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*), %while.body.i ]
  %cmp3.i = icmp eq i8* %bytes.0.lcssa.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*)
  br i1 %cmp3.i, label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit, label %if.then.i

if.then.i:                                        ; preds = %do.body.i
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.6, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit

_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit: ; preds = %if.then.i, %do.body.i
  %2 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !54
  %tobool1.not = icmp eq i32 %2, 0
  br i1 %tobool1.not, label %if.then2, label %if.end

if.then2:                                         ; preds = %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #15
  br label %if.end

if.end:                                           ; preds = %if.then2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %3 = phi i32 [ %call, %if.then2 ], [ %2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit ]
  %4 = icmp sgt i32 %3, 1
  %spec.select.i = select i1 %4, i32 %3, i32 1
  %5 = icmp slt i32 %spec.select.i, 256
  %call3176 = select i1 %5, i32 %spec.select.i, i32 256
  store i32 %call3176, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !54
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !48
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %cmp181 = icmp sgt i32 %num_jobs, 0
  br i1 %cmp181, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end4
  %wide.trip.count = zext i32 %num_jobs to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.inc
  %phi.bo = and i8 %stealable_jobs.1, 1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end4
  %workers_to_wake.0.lcssa = phi i32 [ -1, %if.end4 ], [ %workers_to_wake.1, %for.cond.cleanup.loopexit ]
  %stealable_jobs.0.lcssa = phi i8 [ 0, %if.end4 ], [ %phi.bo, %for.cond.cleanup.loopexit ]
  %job_has_acquires.0.lcssa = phi i8 [ 0, %if.end4 ], [ %spec.select, %for.cond.cleanup.loopexit ]
  %job_may_block.0.lcssa = phi i8 [ 0, %if.end4 ], [ %job_may_block.1, %for.cond.cleanup.loopexit ]
  %min_threads.0.lcssa = phi i32 [ 0, %if.end4 ], [ %add, %for.cond.cleanup.loopexit ]
  %cmp31 = icmp eq %"struct.Halide::Runtime::Internal::work"* %task_parent, null
  br i1 %cmp31, label %if.then32, label %do.body61

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %indvars.iv193 = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next194, %for.inc ]
  %min_threads.0187 = phi i32 [ 0, %for.body.preheader ], [ %add, %for.inc ]
  %job_may_block.0185 = phi i8 [ 0, %for.body.preheader ], [ %job_may_block.1, %for.inc ]
  %job_has_acquires.0184 = phi i8 [ 0, %for.body.preheader ], [ %spec.select, %for.inc ]
  %stealable_jobs.0183 = phi i8 [ 0, %for.body.preheader ], [ %stealable_jobs.1, %for.inc ]
  %workers_to_wake.0182 = phi i32 [ -1, %for.body.preheader ], [ %workers_to_wake.1, %for.inc ]
  %min_threads5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 7
  %6 = load i32, i32* %min_threads5, align 4, !tbaa !33
  %cmp6 = icmp eq i32 %6, 0
  %add = add i32 %6, %min_threads.0187
  %stealable_jobs.1 = select i1 %cmp6, i8 1, i8 %stealable_jobs.0183
  %job_may_block.1 = select i1 %cmp6, i8 %job_may_block.0185, i8 1
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 4
  %7 = load i32, i32* %num_semaphores, align 8, !tbaa !31
  %cmp16.not = icmp eq i32 %7, 0
  %spec.select = select i1 %cmp16.not, i8 %job_has_acquires.0184, i8 1
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 8
  %8 = load i8, i8* %serial, align 8, !tbaa !29, !range !17
  %tobool22.not = icmp eq i8 %8, 0
  br i1 %tobool22.not, label %if.else24, label %if.then23

if.then23:                                        ; preds = %for.body
  %inc = add nsw i32 %workers_to_wake.0182, 1
  br label %for.inc

if.else24:                                        ; preds = %for.body
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 6
  %9 = load i32, i32* %extent, align 8, !tbaa !28
  %add28 = add nsw i32 %9, %workers_to_wake.0182
  br label %for.inc

for.inc:                                          ; preds = %if.else24, %if.then23
  %workers_to_wake.1 = phi i32 [ %inc, %if.then23 ], [ %add28, %if.else24 ]
  %indvars.iv.next194 = add nuw nsw i64 %indvars.iv193, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next194, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body, !llvm.loop !55

if.then32:                                        ; preds = %for.cond.cleanup
  %10 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %11 = and i8 %10, 1
  %12 = icmp eq i8 %11, 0
  %not. = xor i1 %12, true
  %add36 = zext i1 %not. to i32
  %min_threads.2 = add nsw i32 %min_threads.0.lcssa, %add36
  %13 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !56
  %cmp38180 = icmp slt i32 %13, 256
  br i1 %cmp38180, label %land.rhs, label %do.end50

land.rhs:                                         ; preds = %if.then32, %while.body
  %14 = phi i32 [ %inc45, %while.body ], [ %13, %if.then32 ]
  %15 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !54
  %sub = add nsw i32 %15, -1
  %cmp39 = icmp slt i32 %14, %sub
  br i1 %cmp39, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %add40 = add nsw i32 %14, 1
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  %sub41 = sub i32 %add40, %16
  %cmp42 = icmp slt i32 %sub41, %min_threads.2
  br i1 %cmp42, label %while.body, label %do.end50

while.body:                                       ; preds = %lor.rhs, %land.rhs
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !58
  %inc43 = add nsw i32 %17, 1
  store i32 %inc43, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !58
  %call44 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal13worker_threadEPv, i8* null) #15
  %18 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !56
  %inc45 = add nsw i32 %18, 1
  store i32 %inc45, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !56
  %idxprom46 = sext i32 %18 to i64
  %arrayidx47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %idxprom46
  store %struct.halide_thread* %call44, %struct.halide_thread** %arrayidx47, align 8, !tbaa !10
  %cmp38 = icmp slt i32 %18, 255
  br i1 %cmp38, label %land.rhs, label %do.end50, !llvm.loop !59

do.end50:                                         ; preds = %while.body, %lor.rhs, %if.then32
  br i1 %12, label %if.end77, label %if.then54

if.then54:                                        ; preds = %do.end50
  %19 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  %inc55 = add nsw i32 %19, 1
  store i32 %inc55, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  br label %if.end77

do.body61:                                        ; preds = %for.cond.cleanup
  %min_threads63 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 0, i32 7
  %20 = load i32, i32* %min_threads63, align 4, !tbaa !33
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 8
  %21 = load i32, i32* %active_workers, align 8, !tbaa !60
  %mul = mul nsw i32 %21, %20
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %22 = load i32, i32* %threads_reserved, align 8, !tbaa !61
  %sub64 = sub nsw i32 %mul, %22
  %cmp65.not = icmp sgt i32 %min_threads.0.lcssa, %sub64
  br i1 %cmp65.not, label %if.then66, label %do.end69

if.then66:                                        ; preds = %do.body61
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([263 x i8], [263 x i8]* @.str.3, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end69

do.end69:                                         ; preds = %if.then66, %do.body61
  %23 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %if.end77, label %if.then73

if.then73:                                        ; preds = %do.end69
  %26 = load i32, i32* %threads_reserved, align 8, !tbaa !61
  %inc75 = add nsw i32 %26, 1
  store i32 %inc75, i32* %threads_reserved, align 8, !tbaa !61
  br label %if.end77

if.end77:                                         ; preds = %if.then73, %do.end69, %if.then54, %do.end50
  br i1 %cmp181, label %for.body83.lr.ph, label %for.cond.cleanup82

for.body83.lr.ph:                                 ; preds = %if.end77
  %.promoted = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !62
  %27 = zext i32 %num_jobs to i64
  %min.iters.check = icmp eq i32 %num_jobs, 1
  br i1 %min.iters.check, label %for.body83.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body83.lr.ph
  %n.vec = and i64 %27, 4294967294
  %ind.end = and i64 %27, 1
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vector.recur = phi %"struct.Halide::Runtime::Internal::work"* [ %.promoted, %vector.ph ], [ %31, %vector.body ]
  %offset.idx = sub i64 %27, %index
  %28 = add nsw i64 %offset.idx, -1
  %29 = add i64 %offset.idx, -2
  %30 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28
  %31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29
  %32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 2
  %33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %vector.recur, %"struct.Halide::Runtime::Internal::work"** %32, align 8, !tbaa !63
  store %"struct.Halide::Runtime::Internal::work"* %30, %"struct.Halide::Runtime::Internal::work"** %33, align 8, !tbaa !63
  %34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 3
  %35 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %34, align 8, !tbaa !40
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %35, align 8, !tbaa !40
  %36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 4
  %37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 4
  store i32 %num_jobs, i32* %36, align 8, !tbaa !41
  store i32 %num_jobs, i32* %37, align 8, !tbaa !41
  %38 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 6
  %39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 6
  store i32 0, i32* %38, align 8, !tbaa !61
  store i32 0, i32* %39, align 8, !tbaa !61
  %index.next = add i64 %index, 2
  %40 = icmp eq i64 %index.next, %n.vec
  br i1 %40, label %middle.block, label %vector.body, !llvm.loop !64

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %27
  br i1 %cmp.n, label %for.cond80.for.cond.cleanup82_crit_edge, label %for.body83.preheader

for.body83.preheader:                             ; preds = %for.body83.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ %ind.end, %middle.block ], [ %27, %for.body83.lr.ph ]
  %scalar.recur.ph = phi %"struct.Halide::Runtime::Internal::work"* [ %31, %middle.block ], [ %.promoted, %for.body83.lr.ph ]
  br label %for.body83

for.cond80.for.cond.cleanup82_crit_edge:          ; preds = %for.body83, %middle.block
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !62
  br label %for.cond.cleanup82

for.cond.cleanup82:                               ; preds = %for.cond80.for.cond.cleanup82_crit_edge, %if.end77
  %41 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !66
  %tobool96 = icmp ne i32 %41, 0
  %42 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8
  %43 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8
  %cmp98 = icmp slt i32 %42, %43
  %44 = or i1 %tobool96, %cmp98
  %cmp102 = icmp sgt i32 %workers_to_wake.0.lcssa, %42
  %or.cond174 = or i1 %cmp102, %44
  %storemerge = select i1 %or.cond174, i32 %43, i32 %workers_to_wake.0.lcssa
  store i32 %storemerge, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !67
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #15
  %45 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !67
  %46 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !58
  %cmp106 = icmp sgt i32 %45, %46
  br i1 %cmp106, label %if.then107, label %if.end111

for.body83:                                       ; preds = %for.body83.preheader, %for.body83
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body83 ], [ %indvars.iv.ph, %for.body83.preheader ]
  %scalar.recur = phi %"struct.Halide::Runtime::Internal::work"* [ %arrayidx85, %for.body83 ], [ %scalar.recur.ph, %for.body83.preheader ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx85 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %scalar.recur, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !63
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !40
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 4
  store i32 %num_jobs, i32* %sibling_count, align 8, !tbaa !41
  %threads_reserved93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 6
  store i32 0, i32* %threads_reserved93, align 8, !tbaa !61
  %cmp81 = icmp sgt i64 %indvars.iv, 1
  br i1 %cmp81, label %for.body83, label %for.cond80.for.cond.cleanup82_crit_edge, !llvm.loop !68

if.then107:                                       ; preds = %for.cond.cleanup82
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #15
  %tobool108.not = icmp eq i8 %stealable_jobs.0.lcssa, 0
  br i1 %tobool108.not, label %if.end111, label %if.then109

if.then109:                                       ; preds = %if.then107
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #15
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.then107, %for.cond.cleanup82
  %47 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %48 = and i8 %47, 1
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %if.end123, label %if.then115

if.then115:                                       ; preds = %if.end111
  br i1 %cmp31, label %if.else120, label %if.then117

if.then117:                                       ; preds = %if.then115
  %threads_reserved118 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %50 = load i32, i32* %threads_reserved118, align 8, !tbaa !61
  %dec119 = add nsw i32 %50, -1
  store i32 %dec119, i32* %threads_reserved118, align 8, !tbaa !61
  br label %if.end123

if.else120:                                       ; preds = %if.then115
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  %dec121 = add nsw i32 %51, -1
  store i32 %dec121, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  br label %if.end123

if.end123:                                        ; preds = %if.else120, %if.then117, %if.end111
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %owned_job) local_unnamed_addr #0 {
entry:
  %active_workers.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 8
  %tobool.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %owned_job, null
  %extent.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 0, i32 6
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 9
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 5
  %siblings56 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 3
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 11
  %next_job10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 2
  br label %while.cond

while.cond:                                       ; preds = %while.cond.backedge, %entry
  %spin_count.0 = phi i32 [ 0, %entry ], [ %spin_count.0.be, %while.cond.backedge ]
  br i1 %tobool.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.cond
  %0 = load i32, i32* %extent.i, align 8, !tbaa !28
  %tobool.not.i = icmp eq i32 %0, 0
  br i1 %tobool.not.i, label %cond.end, label %if.then

cond.false:                                       ; preds = %while.cond
  %1 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !69, !range !17
  %tobool1.not = icmp eq i8 %1, 0
  br i1 %tobool1.not, label %do.end.thread, label %while.end316

cond.end:                                         ; preds = %cond.true
  %2 = load i32, i32* %active_workers.i, align 8, !tbaa !60
  %tobool2.i.not = icmp eq i32 %2, 0
  br i1 %tobool2.i.not, label %while.end316, label %if.then

if.then:                                          ; preds = %cond.end, %cond.true
  %3 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !62
  %4 = load i32, i32* %exit_status, align 4, !tbaa !43
  %cmp.not = icmp eq i32 %4, 0
  br i1 %cmp.not, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %active_workers.i, align 8, !tbaa !60
  %cmp4 = icmp eq i32 %5, 0
  br i1 %cmp4, label %while.cond6.preheader, label %do.end

while.cond6.preheader:                            ; preds = %if.then3
  %cmp7.not524 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, %owned_job
  br i1 %cmp7.not524, label %while.end, label %while.body8

while.body8:                                      ; preds = %while.cond6.preheader, %while.body8
  %job.0525 = phi %"struct.Halide::Runtime::Internal::work"* [ %6, %while.body8 ], [ %3, %while.cond6.preheader ]
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !63
  %cmp7.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %6, %owned_job
  br i1 %cmp7.not, label %while.end.loopexit, label %while.body8, !llvm.loop !70

while.end.loopexit:                               ; preds = %while.body8
  %next_job.le = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond6.preheader
  %prev_ptr.0.lcssa = phi %"struct.Halide::Runtime::Internal::work"** [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %while.cond6.preheader ], [ %next_job.le, %while.end.loopexit ]
  %7 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job10, align 8, !tbaa !63
  store %"struct.Halide::Runtime::Internal::work"* %7, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.0.lcssa, align 8, !tbaa !10
  store i32 0, i32* %extent.i, align 8, !tbaa !28
  br label %while.cond.backedge

if.else:                                          ; preds = %if.then
  %8 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !42
  %tobool11.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %8, null
  br i1 %tobool11.not, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %exit_status13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %8, i64 0, i32 9
  %9 = load i32, i32* %exit_status13, align 4, !tbaa !43
  %cmp14.not = icmp eq i32 %9, 0
  br i1 %cmp14.not, label %do.end, label %if.then15

if.then15:                                        ; preds = %land.lhs.true
  store i32 %9, i32* %exit_status, align 4, !tbaa !43
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #15
  br label %while.cond.backedge

do.end:                                           ; preds = %land.lhs.true, %if.else, %if.then3
  %tobool23.not527 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, null
  br i1 %tobool23.not527, label %if.then105, label %do.end27

do.end.thread:                                    ; preds = %cond.false
  %10 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !62
  %tobool23.not527563 = icmp eq %"struct.Halide::Runtime::Internal::work"* %10, null
  br i1 %tobool23.not527563, label %if.else112, label %do.end27.us

do.end27.us:                                      ; preds = %do.end.thread, %cleanup.us
  %job.1529.us = phi %"struct.Halide::Runtime::Internal::work"* [ %29, %cleanup.us ], [ %10, %do.end.thread ]
  %prev_ptr.1528.us = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95.us, %cleanup.us ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end.thread ]
  %parent_job29.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 5
  %11 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29.us, align 8, !tbaa !42
  %cmp30.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %11, null
  br i1 %cmp30.us, label %if.then31.us, label %if.else32.us

if.else32.us:                                     ; preds = %do.end27.us
  %active_workers33.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 8
  %12 = load i32, i32* %active_workers33.us, align 8, !tbaa !60
  %cmp34.us = icmp eq i32 %12, 0
  %min_threads.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 0, i32 7
  %13 = load i32, i32* %min_threads.us, align 4, !tbaa !33
  br i1 %cmp34.us, label %if.then35.us, label %if.else38.us

if.else38.us:                                     ; preds = %if.else32.us
  %mul.us = mul nsw i32 %13, %12
  %threads_reserved42.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %14 = load i32, i32* %threads_reserved42.us, align 8, !tbaa !61
  %sub43.us = sub nsw i32 %mul.us, %14
  br label %if.end45.us

if.then35.us:                                     ; preds = %if.else32.us
  %threads_reserved.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %15 = load i32, i32* %threads_reserved.us, align 8, !tbaa !61
  %sub37.us = sub nsw i32 %13, %15
  br label %if.end45.us

if.then31.us:                                     ; preds = %do.end27.us
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !56
  %add.us = add nsw i32 %16, 1
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  %sub.us = sub i32 %add.us, %17
  br label %if.end45.us

if.end45.us:                                      ; preds = %if.then31.us, %if.then35.us, %if.else38.us
  %threads_available.0.us = phi i32 [ %sub.us, %if.then31.us ], [ %sub37.us, %if.then35.us ], [ %sub43.us, %if.else38.us ]
  %min_threads47.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 7
  %18 = load i32, i32* %min_threads47.us, align 4, !tbaa !33
  %cmp48.not.us = icmp sge i32 %threads_available.0.us, %18
  %serial.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 8
  %19 = load i8, i8* %serial.us, align 8, !tbaa !29, !range !17
  %tobool69.not.us = icmp eq i8 %19, 0
  br i1 %tobool69.not.us, label %if.end45.us.lor.end73.us_crit_edge, label %lor.rhs70.us

if.end45.us.lor.end73.us_crit_edge:               ; preds = %if.end45.us
  %.0 = and i1 %cmp48.not.us, true
  br label %lor.end73.us

lor.rhs70.us:                                     ; preds = %if.end45.us
  %active_workers71.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 8
  %20 = load i32, i32* %active_workers71.us, align 8, !tbaa !60
  %cmp72.us = icmp eq i32 %20, 0
  %.1 = and i1 %cmp48.not.us, %cmp72.us
  br label %lor.end73.us

lor.end73.us:                                     ; preds = %if.end45.us.lor.end73.us_crit_edge, %lor.rhs70.us
  %.phi = phi i1 [ %.0, %if.end45.us.lor.end73.us_crit_edge ], [ %.1, %lor.rhs70.us ]
  br i1 %.phi, label %if.then86.us, label %cleanup.us

if.then86.us:                                     ; preds = %lor.end73.us
  %next_semaphore.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 10
  %21 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !38
  %num_semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 4
  %22 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !31
  %cmp14.i.us = icmp slt i32 %21, %22
  br i1 %cmp14.i.us, label %for.body.lr.ph.i.us, label %if.else127

for.body.lr.ph.i.us:                              ; preds = %if.then86.us
  %semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 3
  br label %for.body.i.us

for.body.i.us:                                    ; preds = %for.inc.i.us, %for.body.lr.ph.i.us
  %23 = phi i32 [ %21, %for.body.lr.ph.i.us ], [ %inc.i.us, %for.inc.i.us ]
  %24 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i.us, align 8, !tbaa !30
  %idxprom.i.us = sext i32 %23 to i64
  %semaphore.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 0
  %25 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i.us, align 8, !tbaa !71
  %count.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 1
  %26 = load i32, i32* %count.i.us, align 8, !tbaa !73
  %call.i.us = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %25, i32 %26) #14
  br i1 %call.i.us, label %for.inc.i.us, label %cleanup.us

for.inc.i.us:                                     ; preds = %for.body.i.us
  %27 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !38
  %inc.i.us = add nsw i32 %27, 1
  store i32 %inc.i.us, i32* %next_semaphore.i.us, align 8, !tbaa !38
  %28 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !31
  %cmp.i.us = icmp slt i32 %inc.i.us, %28
  br i1 %cmp.i.us, label %for.body.i.us, label %if.else127, !llvm.loop !74

cleanup.us:                                       ; preds = %for.body.i.us, %lor.end73.us
  %next_job95.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 2
  %29 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95.us, align 8, !tbaa !63
  %tobool23.not.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %29, null
  br i1 %tobool23.not.us, label %if.then103, label %do.end27.us

do.end27:                                         ; preds = %do.end, %cleanup
  %job.1529 = phi %"struct.Halide::Runtime::Internal::work"* [ %50, %cleanup ], [ %3, %do.end ]
  %prev_ptr.1528 = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95, %cleanup ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end ]
  %parent_job29 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 5
  %30 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29, align 8, !tbaa !42
  %cmp30 = icmp eq %"struct.Halide::Runtime::Internal::work"* %30, null
  br i1 %cmp30, label %if.then31, label %if.else32

if.then31:                                        ; preds = %do.end27
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !56
  %add = add nsw i32 %31, 1
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  %sub = sub i32 %add, %32
  br label %if.end45

if.else32:                                        ; preds = %do.end27
  %active_workers33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 8
  %33 = load i32, i32* %active_workers33, align 8, !tbaa !60
  %cmp34 = icmp eq i32 %33, 0
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 0, i32 7
  %34 = load i32, i32* %min_threads, align 4, !tbaa !33
  br i1 %cmp34, label %if.then35, label %if.else38

if.then35:                                        ; preds = %if.else32
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !61
  %sub37 = sub nsw i32 %34, %35
  br label %if.end45

if.else38:                                        ; preds = %if.else32
  %mul = mul nsw i32 %34, %33
  %threads_reserved42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %36 = load i32, i32* %threads_reserved42, align 8, !tbaa !61
  %sub43 = sub nsw i32 %mul, %36
  br label %if.end45

if.end45:                                         ; preds = %if.else38, %if.then35, %if.then31
  %threads_available.0 = phi i32 [ %sub, %if.then31 ], [ %sub37, %if.then35 ], [ %sub43, %if.else38 ]
  %min_threads47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 7
  %37 = load i32, i32* %min_threads47, align 4, !tbaa !33
  %cmp48.not = icmp slt i32 %threads_available.0, %37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 3
  %38 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !40
  %39 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings56, align 8, !tbaa !40
  %cmp57 = icmp ne %"struct.Halide::Runtime::Internal::work"* %38, %39
  %cmp60 = icmp ne i32 %37, 0
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 8
  %40 = load i8, i8* %serial, align 8, !tbaa !29, !range !17
  %tobool69.not = icmp eq i8 %40, 0
  br i1 %tobool69.not, label %if.end45.lor.end73_crit_edge, label %lor.rhs70

if.end45.lor.end73_crit_edge:                     ; preds = %if.end45
  %.not472.0 = xor i1 true, true
  br label %lor.end73

lor.rhs70:                                        ; preds = %if.end45
  %active_workers71 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 8
  %41 = load i32, i32* %active_workers71, align 8, !tbaa !60
  %cmp72 = icmp eq i32 %41, 0
  %.not472.1 = xor i1 %cmp72, true
  br label %lor.end73

lor.end73:                                        ; preds = %if.end45.lor.end73_crit_edge, %lor.rhs70
  %.not472.phi = phi i1 [ %.not472.0, %if.end45.lor.end73_crit_edge ], [ %.not472.1, %lor.rhs70 ]
  %.not = and i1 %cmp60, %cmp57
  %brmerge = or i1 %cmp48.not, %.not
  %brmerge473 = or i1 %brmerge, %.not472.phi
  br i1 %brmerge473, label %cleanup, label %if.then86

if.then86:                                        ; preds = %lor.end73
  %next_semaphore.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 10
  %42 = load i32, i32* %next_semaphore.i, align 8, !tbaa !38
  %num_semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 4
  %43 = load i32, i32* %num_semaphores.i, align 8, !tbaa !31
  %cmp14.i = icmp slt i32 %42, %43
  br i1 %cmp14.i, label %for.body.lr.ph.i, label %if.else127

for.body.lr.ph.i:                                 ; preds = %if.then86
  %semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 3
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %44 = phi i32 [ %42, %for.body.lr.ph.i ], [ %inc.i, %for.inc.i ]
  %45 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i, align 8, !tbaa !30
  %idxprom.i = sext i32 %44 to i64
  %semaphore.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 0
  %46 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i, align 8, !tbaa !71
  %count.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 1
  %47 = load i32, i32* %count.i, align 8, !tbaa !73
  %call.i = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %46, i32 %47) #14
  br i1 %call.i, label %for.inc.i, label %cleanup

for.inc.i:                                        ; preds = %for.body.i
  %48 = load i32, i32* %next_semaphore.i, align 8, !tbaa !38
  %inc.i = add nsw i32 %48, 1
  store i32 %inc.i, i32* %next_semaphore.i, align 8, !tbaa !38
  %49 = load i32, i32* %num_semaphores.i, align 8, !tbaa !31
  %cmp.i = icmp slt i32 %inc.i, %49
  br i1 %cmp.i, label %for.body.i, label %if.else127, !llvm.loop !74

cleanup:                                          ; preds = %for.body.i, %lor.end73
  %next_job95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 2
  %50 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95, align 8, !tbaa !63
  %tobool23.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %50, null
  br i1 %tobool23.not, label %if.then103, label %do.end27

if.then103:                                       ; preds = %cleanup, %cleanup.us
  br i1 %tobool.not, label %if.else112, label %if.then105

if.then105:                                       ; preds = %do.end, %if.then103
  %inc = add nsw i32 %spin_count.0, 1
  %cmp106 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp106, label %if.then107, label %if.else108

if.then107:                                       ; preds = %if.then105
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  tail call void @halide_thread_yield() #14
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  br label %while.cond.backedge

if.else108:                                       ; preds = %if.then105
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !66
  %inc109 = add nsw i32 %51, 1
  store i32 %inc109, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !66
  store i8 1, i8* %owner_is_sleeping, align 4, !tbaa !39
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !39
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !66
  %dec = add nsw i32 %52, -1
  store i32 %dec, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !66
  br label %while.cond.backedge

if.else112:                                       ; preds = %if.then103, %do.end.thread
  %53 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !75
  %inc113 = add nsw i32 %53, 1
  store i32 %inc113, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !75
  %54 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !58
  %55 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !67
  %cmp114 = icmp sgt i32 %54, %55
  br i1 %cmp114, label %if.then115, label %if.else118

if.then115:                                       ; preds = %if.else112
  %dec116 = add nsw i32 %54, -1
  store i32 %dec116, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !58
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %56 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !58
  %inc117 = add nsw i32 %56, 1
  store i32 %inc117, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !58
  br label %if.end124

if.else118:                                       ; preds = %if.else112
  %inc119 = add nsw i32 %spin_count.0, 1
  %cmp120 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp120, label %if.then121, label %if.else122

if.then121:                                       ; preds = %if.else118
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  tail call void @halide_thread_yield() #14
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  br label %if.end124

if.else122:                                       ; preds = %if.else118
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  br label %if.end124

if.end124:                                        ; preds = %if.else122, %if.then121, %if.then115
  %spin_count.1 = phi i32 [ %spin_count.0, %if.then115 ], [ %inc119, %if.then121 ], [ %inc119, %if.else122 ]
  %57 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !75
  %dec125 = add nsw i32 %57, -1
  store i32 %dec125, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !75
  br label %while.cond.backedge

if.else127:                                       ; preds = %if.then86, %if.then86.us, %for.inc.i, %for.inc.i.us
  %next_semaphore.i521 = phi i32* [ %next_semaphore.i.us, %for.inc.i.us ], [ %next_semaphore.i, %for.inc.i ], [ %next_semaphore.i.us, %if.then86.us ], [ %next_semaphore.i, %if.then86 ]
  %prev_ptr.1519 = phi %"struct.Halide::Runtime::Internal::work"** [ %prev_ptr.1528.us, %for.inc.i.us ], [ %prev_ptr.1528, %for.inc.i ], [ %prev_ptr.1528.us, %if.then86.us ], [ %prev_ptr.1528, %if.then86 ]
  %job.1515 = phi %"struct.Halide::Runtime::Internal::work"* [ %job.1529.us, %for.inc.i.us ], [ %job.1529, %for.inc.i ], [ %job.1529.us, %if.then86.us ], [ %job.1529, %if.then86 ]
  store i32 0, i32* %next_semaphore.i521, align 8, !tbaa !38
  %active_workers132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 8
  %58 = load i32, i32* %active_workers132, align 8, !tbaa !60
  %inc133 = add nsw i32 %58, 1
  store i32 %inc133, i32* %active_workers132, align 8, !tbaa !60
  %parent_job134 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 5
  %59 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !42
  %cmp135 = icmp eq %"struct.Halide::Runtime::Internal::work"* %59, null
  %min_threads138 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 7
  %60 = load i32, i32* %min_threads138, align 4, !tbaa !33
  br i1 %cmp135, label %if.then136, label %if.else143

if.then136:                                       ; preds = %if.else127
  %61 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  %add139 = add nsw i32 %61, %60
  store i32 %add139, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  br label %if.end152

if.else143:                                       ; preds = %if.else127
  %threads_reserved147 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %59, i64 0, i32 6
  %62 = load i32, i32* %threads_reserved147, align 8, !tbaa !61
  %add148 = add nsw i32 %62, %60
  store i32 %add148, i32* %threads_reserved147, align 8, !tbaa !61
  br label %if.end152

if.end152:                                        ; preds = %if.else143, %if.then136
  %serial154 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 8
  %63 = load i8, i8* %serial154, align 8, !tbaa !29, !range !17
  %tobool155.not = icmp eq i8 %63, 0
  br i1 %tobool155.not, label %if.else198, label %if.then156

if.then156:                                       ; preds = %if.end152
  %next_job157 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %64 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !63
  store %"struct.Halide::Runtime::Internal::work"* %64, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %extent163 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %next_semaphore.i474 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 10
  %num_semaphores.i475 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 4
  %semaphores.i477 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 3
  %user_context = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %min = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %closure = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %65 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  br label %while.cond161.preheader

while.cond161.preheader:                          ; preds = %if.end172, %if.then156
  %iters.0538 = phi i32 [ 1, %if.then156 ], [ 0, %if.end172 ]
  %total_iters.0537 = phi i32 [ 0, %if.then156 ], [ %add178, %if.end172 ]
  %66 = load i32, i32* %extent163, align 8, !tbaa !28
  %sub164531 = sub nsw i32 %66, %total_iters.0537
  %cmp165532 = icmp sgt i32 %sub164531, %iters.0538
  br i1 %cmp165532, label %land.rhs.preheader, label %while.end169

land.rhs.preheader:                               ; preds = %while.cond161.preheader
  %.pre = load i32, i32* %next_semaphore.i474, align 8, !tbaa !38
  %.pre560 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !31
  br label %land.rhs

land.rhs:                                         ; preds = %while.body167, %land.rhs.preheader
  %67 = phi i32 [ %76, %while.body167 ], [ %66, %land.rhs.preheader ]
  %68 = phi i32 [ %77, %while.body167 ], [ %.pre560, %land.rhs.preheader ]
  %69 = phi i32 [ 0, %while.body167 ], [ %.pre, %land.rhs.preheader ]
  %iters.1533 = phi i32 [ %inc168, %while.body167 ], [ %iters.0538, %land.rhs.preheader ]
  %cmp14.i476 = icmp slt i32 %69, %68
  br i1 %cmp14.i476, label %for.body.i483, label %while.body167

for.body.i483:                                    ; preds = %land.rhs, %for.inc.i486
  %70 = phi i32 [ %inc.i484, %for.inc.i486 ], [ %69, %land.rhs ]
  %71 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i477, align 8, !tbaa !30
  %idxprom.i479 = sext i32 %70 to i64
  %semaphore.i480 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 0
  %72 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i480, align 8, !tbaa !71
  %count.i481 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 1
  %73 = load i32, i32* %count.i481, align 8, !tbaa !73
  %call.i482 = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %72, i32 %73) #14
  br i1 %call.i482, label %for.inc.i486, label %while.end169

for.inc.i486:                                     ; preds = %for.body.i483
  %74 = load i32, i32* %next_semaphore.i474, align 8, !tbaa !38
  %inc.i484 = add nsw i32 %74, 1
  store i32 %inc.i484, i32* %next_semaphore.i474, align 8, !tbaa !38
  %75 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !31
  %cmp.i485 = icmp slt i32 %inc.i484, %75
  br i1 %cmp.i485, label %for.body.i483, label %while.body167.loopexit, !llvm.loop !74

while.body167.loopexit:                           ; preds = %for.inc.i486
  %.pre561 = load i32, i32* %extent163, align 8, !tbaa !28
  br label %while.body167

while.body167:                                    ; preds = %while.body167.loopexit, %land.rhs
  %76 = phi i32 [ %.pre561, %while.body167.loopexit ], [ %67, %land.rhs ]
  %77 = phi i32 [ %75, %while.body167.loopexit ], [ %68, %land.rhs ]
  store i32 0, i32* %next_semaphore.i474, align 8, !tbaa !38
  %inc168 = add nuw nsw i32 %iters.1533, 1
  %sub164 = sub nsw i32 %76, %total_iters.0537
  %cmp165 = icmp sgt i32 %sub164, %inc168
  br i1 %cmp165, label %land.rhs, label %if.end172, !llvm.loop !76

while.end169:                                     ; preds = %for.body.i483, %while.cond161.preheader
  %iters.1523 = phi i32 [ %iters.0538, %while.cond161.preheader ], [ %iters.1533, %for.body.i483 ]
  %cmp170 = icmp eq i32 %iters.1523, 0
  br i1 %cmp170, label %while.end179, label %if.end172

if.end172:                                        ; preds = %while.body167, %while.end169
  %iters.1523566 = phi i32 [ %iters.1523, %while.end169 ], [ %inc168, %while.body167 ]
  %78 = load i8*, i8** %user_context, align 8, !tbaa !36
  %79 = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !24
  %80 = load i32, i32* %min, align 4, !tbaa !27
  %add175 = add nsw i32 %80, %total_iters.0537
  %81 = load i8*, i8** %closure, align 8, !tbaa !32
  %call177 = tail call i32 @halide_do_loop_task(i8* %78, i32 (i8*, i32, i32, i8*, i8*)* %79, i32 %add175, i32 %iters.1523566, i8* %81, i8* nonnull %65) #15
  %add178 = add nuw nsw i32 %iters.1523566, %total_iters.0537
  %cmp159 = icmp eq i32 %call177, 0
  br i1 %cmp159, label %while.cond161.preheader, label %while.end179, !llvm.loop !77

while.end179:                                     ; preds = %if.end172, %while.end169
  %cmp170568 = phi i1 [ true, %while.end169 ], [ false, %if.end172 ]
  %result.0.lcssa = phi i32 [ 0, %while.end169 ], [ %call177, %if.end172 ]
  %total_iters.0.lcssa = phi i32 [ %total_iters.0537, %while.end169 ], [ %add178, %if.end172 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %82 = load i32, i32* %min, align 4, !tbaa !27
  %add182 = add nsw i32 %82, %total_iters.0.lcssa
  store i32 %add182, i32* %min, align 4, !tbaa !27
  %83 = load i32, i32* %extent163, align 8, !tbaa !28
  %sub185 = sub nsw i32 %83, %total_iters.0.lcssa
  store i32 %sub185, i32* %extent163, align 8, !tbaa !28
  br i1 %cmp170568, label %if.else190, label %if.end230.thread505

if.end230.thread505:                              ; preds = %while.end179
  store i32 0, i32* %extent163, align 8, !tbaa !28
  br label %if.then238

if.else190:                                       ; preds = %while.end179
  %cmp193 = icmp sgt i32 %sub185, 0
  br i1 %cmp193, label %if.then194, label %if.end271

if.then194:                                       ; preds = %if.else190
  %84 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !62
  store %"struct.Halide::Runtime::Internal::work"* %84, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !63
  store %"struct.Halide::Runtime::Internal::work"* %job.1515, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !62
  br label %if.end271

if.else198:                                       ; preds = %if.end152
  %myjob.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %myjob.sroa.0.0.copyload = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %myjob.sroa.0.0..sroa_idx, align 8, !tbaa.struct !78
  %myjob.sroa.4.0..sroa_idx327 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %myjob.sroa.4.0.copyload = load i8*, i8** %myjob.sroa.4.0..sroa_idx327, align 8, !tbaa.struct !79
  %myjob.sroa.6333.0..sroa_idx334 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %myjob.sroa.6333.0.copyload = load i32, i32* %myjob.sroa.6333.0..sroa_idx334, align 4
  %myjob.sroa.8340.0..sroa_idx341 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 1
  %myjob.sroa.8340.0.copyload = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %myjob.sroa.8340.0..sroa_idx341, align 8, !tbaa.struct !80
  %myjob.sroa.10347.0..sroa_idx348 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %myjob.sroa.10347.0.copyload = load i8*, i8** %myjob.sroa.10347.0..sroa_idx348, align 8, !tbaa.struct !81
  %inc201 = add nsw i32 %myjob.sroa.6333.0.copyload, 1
  store i32 %inc201, i32* %myjob.sroa.6333.0..sroa_idx334, align 4, !tbaa !27
  %extent203 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %85 = load i32, i32* %extent203, align 8, !tbaa !28
  %dec204 = add nsw i32 %85, -1
  store i32 %dec204, i32* %extent203, align 8, !tbaa !28
  %cmp207 = icmp eq i32 %dec204, 0
  br i1 %cmp207, label %if.then208, label %if.end210

if.then208:                                       ; preds = %if.else198
  %next_job209 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %86 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job209, align 8, !tbaa !63
  store %"struct.Halide::Runtime::Internal::work"* %86, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %if.else198
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %tobool211.not = icmp eq i32 (i8*, i32, i8*)* %myjob.sroa.8340.0.copyload, null
  br i1 %tobool211.not, label %if.else220, label %if.then212

if.then212:                                       ; preds = %if.end210
  %call219 = tail call i32 @halide_do_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i8*)* nonnull %myjob.sroa.8340.0.copyload, i32 %myjob.sroa.6333.0.copyload, i8* %myjob.sroa.4.0.copyload) #15
  br label %if.end230

if.else220:                                       ; preds = %if.end210
  %87 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  %call228 = tail call i32 @halide_do_loop_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i32, i8*, i8*)* %myjob.sroa.0.0.copyload, i32 %myjob.sroa.6333.0.copyload, i32 1, i8* %myjob.sroa.4.0.copyload, i8* %87) #15
  br label %if.end230

if.end230:                                        ; preds = %if.else220, %if.then212
  %result.1 = phi i32 [ %call219, %if.then212 ], [ %call228, %if.else220 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %cmp237.not = icmp eq i32 %result.1, 0
  br i1 %cmp237.not, label %if.end271, label %if.then238

if.then238:                                       ; preds = %if.end230, %if.end230.thread505
  %result.2510 = phi i32 [ %result.0.lcssa, %if.end230.thread505 ], [ %result.1, %if.end230 ]
  %exit_status239 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  store i32 %result.2510, i32* %exit_status239, align 4, !tbaa !43
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 4
  %88 = load i32, i32* %sibling_count, align 8, !tbaa !41
  %cmp240540 = icmp sgt i32 %88, 0
  br i1 %cmp240540, label %do.end243.lr.ph, label %if.end271

do.end243.lr.ph:                                  ; preds = %if.then238
  %siblings244 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 3
  %89 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings244, align 8, !tbaa !40
  %wide.trip.count = zext i32 %88 to i64
  br label %do.end243

do.end243:                                        ; preds = %for.inc, %do.end243.lr.ph
  %indvars.iv = phi i64 [ 0, %do.end243.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %wake_owners.0541 = phi i8 [ 0, %do.end243.lr.ph ], [ %wake_owners.1, %for.inc ]
  %exit_status245 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 9
  %90 = load i32, i32* %exit_status245, align 4, !tbaa !43
  %cmp246 = icmp eq i32 %90, 0
  br i1 %cmp246, label %if.then247, label %for.inc

if.then247:                                       ; preds = %do.end243
  store i32 %result.2510, i32* %exit_status245, align 4, !tbaa !43
  %91 = load i32, i32* %active_workers132, align 8, !tbaa !60
  %cmp253 = icmp eq i32 %91, 0
  br i1 %cmp253, label %land.rhs254, label %land.end260

land.rhs254:                                      ; preds = %if.then247
  %owner_is_sleeping258 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 11
  %92 = load i8, i8* %owner_is_sleeping258, align 4, !tbaa !39, !range !17
  br label %land.end260

land.end260:                                      ; preds = %land.rhs254, %if.then247
  %93 = phi i8 [ 0, %if.then247 ], [ %92, %land.rhs254 ]
  %94 = and i8 %wake_owners.0541, 1
  %or = or i8 %93, %94
  br label %for.inc

for.inc:                                          ; preds = %land.end260, %do.end243
  %wake_owners.1 = phi i8 [ %or, %land.end260 ], [ %wake_owners.0541, %do.end243 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %if.end271, label %do.end243, !llvm.loop !82

if.end271:                                        ; preds = %for.inc, %if.then238, %if.end230, %if.then194, %if.else190
  %wake_owners.2 = phi i8 [ 0, %if.end230 ], [ 0, %if.else190 ], [ 0, %if.then194 ], [ 0, %if.then238 ], [ %wake_owners.1, %for.inc ]
  %95 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !42
  %cmp273 = icmp eq %"struct.Halide::Runtime::Internal::work"* %95, null
  %96 = load i32, i32* %min_threads138, align 4, !tbaa !33
  br i1 %cmp273, label %if.then274, label %if.else281

if.then274:                                       ; preds = %if.end271
  %97 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  %sub277 = sub nsw i32 %97, %96
  store i32 %sub277, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  br label %if.end290

if.else281:                                       ; preds = %if.end271
  %threads_reserved285 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %95, i64 0, i32 6
  %98 = load i32, i32* %threads_reserved285, align 8, !tbaa !61
  %sub286 = sub nsw i32 %98, %96
  store i32 %sub286, i32* %threads_reserved285, align 8, !tbaa !61
  br label %if.end290

if.end290:                                        ; preds = %if.else281, %if.then274
  %99 = load i32, i32* %active_workers132, align 8, !tbaa !60
  %dec292 = add nsw i32 %99, -1
  store i32 %dec292, i32* %active_workers132, align 8, !tbaa !60
  %100 = and i8 %wake_owners.2, 1
  %tobool296.not = icmp eq i8 %100, 0
  br i1 %tobool296.not, label %lor.lhs.false297, label %if.then310

lor.lhs.false297:                                 ; preds = %if.end290
  %cmp299 = icmp eq i32 %dec292, 0
  br i1 %cmp299, label %land.lhs.true300, label %while.cond.backedge

land.lhs.true300:                                 ; preds = %lor.lhs.false297
  %extent302 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %101 = load i32, i32* %extent302, align 8, !tbaa !28
  %cmp303 = icmp eq i32 %101, 0
  br i1 %cmp303, label %land.lhs.true307, label %lor.lhs.false304

lor.lhs.false304:                                 ; preds = %land.lhs.true300
  %exit_status305 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  %102 = load i32, i32* %exit_status305, align 4, !tbaa !43
  %cmp306.not = icmp eq i32 %102, 0
  br i1 %cmp306.not, label %while.cond.backedge, label %land.lhs.true307

land.lhs.true307:                                 ; preds = %lor.lhs.false304, %land.lhs.true300
  %owner_is_sleeping308 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 11
  %103 = load i8, i8* %owner_is_sleeping308, align 4, !tbaa !39, !range !17
  %tobool309.not = icmp eq i8 %103, 0
  br i1 %tobool309.not, label %while.cond.backedge, label %if.then310

if.then310:                                       ; preds = %land.lhs.true307, %if.end290
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #15
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then310, %land.lhs.true307, %lor.lhs.false304, %lor.lhs.false297, %if.end124, %if.else108, %if.then107, %if.then15, %while.end
  %spin_count.0.be = phi i32 [ %spin_count.0, %while.end ], [ %spin_count.0, %if.then15 ], [ %inc, %if.then107 ], [ %inc, %if.else108 ], [ %spin_count.1, %if.end124 ], [ 0, %if.then310 ], [ 0, %land.lhs.true307 ], [ 0, %lor.lhs.false304 ], [ 0, %lor.lhs.false297 ]
  br label %while.cond, !llvm.loop !83

while.end316:                                     ; preds = %cond.end, %cond.false
  ret void
}

; Function Attrs: nounwind
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %4 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #11
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !44
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !46
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %7 = ptrtoint %struct.halide_mutex* %mutex to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %6, i64 %7) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #0 align 2 {
entry:
  %call = tail call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #15
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)***
  %state.i60 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  br label %while.cond

while.cond:                                       ; preds = %cleanup, %entry
  %data_location.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %head, %entry ], [ %data_location.1, %cleanup ]
  %prev.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ null, %entry ], [ %prev.1, %cleanup ]
  %data.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %0, %entry ], [ %data.1, %cleanup ]
  %retval.0 = phi i64 [ undef, %entry ], [ %retval.1, %cleanup ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, null
  br i1 %cmp.not, label %while.end22, label %while.body

while.body:                                       ; preds = %while.cond
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 1
  %2 = load atomic i64, i64* %sleep_address monotonic, align 8
  %cmp2 = icmp eq i64 %2, %addr
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 2
  %3 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next3, align 8, !tbaa !84
  br i1 %cmp2, label %if.then, label %cleanup

if.then:                                          ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.0, align 8, !tbaa !10
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !89
  %cmp4 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %4, %data.0
  br i1 %cmp4, label %if.then5, label %while.cond7.preheader

while.cond7.preheader:                            ; preds = %if.then
  %cmp872.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, null
  br i1 %cmp872.not, label %if.end, label %while.body9

if.then5:                                         ; preds = %if.then
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.0, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !89
  br label %if.end

while.body9:                                      ; preds = %while.cond7.preheader, %while.body9
  %data2.073 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %6, %while.body9 ], [ %3, %while.cond7.preheader ]
  %sleep_address10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 1
  %5 = load atomic i64, i64* %sleep_address10 monotonic, align 8
  %cmp11 = icmp eq i64 %5, %addr
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next12, align 8, !tbaa !84
  %cmp8 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, null
  %7 = or i1 %cmp11, %cmp8
  br i1 %7, label %if.end.loopexit, label %while.body9, !llvm.loop !92

if.end.loopexit:                                  ; preds = %while.body9
  %frombool = zext i1 %cmp11 to i8
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit, %if.then5, %while.cond7.preheader
  %more_waiters.1 = phi i8 [ 0, %if.then5 ], [ 0, %while.cond7.preheader ], [ %frombool, %if.end.loopexit ]
  %tobool13 = icmp ne i8 %more_waiters.1, 0
  %vtable = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !44
  %vfn = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable, i64 2
  %8 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn, align 8
  %call14 = tail call i64 %8(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 1, i1 zeroext %tobool13) #14
  %unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 3
  store i64 %call14, i64* %unpark_info, align 8, !tbaa !93
  %mutex.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 0
  %call.i = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i) #14
  %9 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i61 = and i64 %9, 2
  %cmp.i62 = icmp ne i64 %and.i61, 0
  %cmp3.not.i63 = icmp ult i64 %9, 4
  %or.cond.i64 = or i1 %cmp3.not.i63, %cmp.i62
  br i1 %or.cond.i64, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, label %if.then.i65

if.then.i65:                                      ; preds = %if.end
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66: ; preds = %if.then.i65, %if.end
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !94
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 1
  %call.i67 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #14
  %call.i69 = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i) #14
  %10 = zext i8 %more_waiters.1 to i64
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %next3, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %data.0, %while.body ]
  %data.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %3, %while.body ]
  %retval.1 = phi i64 [ %10, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %retval.0, %while.body ]
  br i1 %cmp2, label %cleanup27, label %while.cond, !llvm.loop !95

while.end22:                                      ; preds = %while.cond
  %vtable23 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !44
  %vfn24 = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable23, i64 2
  %11 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn24, align 8
  %call25 = tail call i64 %11(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 0, i1 zeroext false) #14
  %12 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i = and i64 %12, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %12, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup27, label %if.then.i

if.then.i:                                        ; preds = %while.end22
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %cleanup27

cleanup27:                                        ; preds = %cleanup, %if.then.i, %while.end22
  %retval.2 = phi i64 [ 0, %while.end22 ], [ 0, %if.then.i ], [ %retval.1, %cleanup ]
  ret i64 %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) local_unnamed_addr #0 {
entry:
  %mul.i = mul i64 %addr, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit: ; preds = %if.then.i, %entry
  ret %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx
}

declare i32 @pthread_mutex_lock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %expected.0 = phi i64 [ %0, %entry ], [ %3, %if.end ]
  %and = and i64 %expected.0, 2
  %tobool.not = icmp ne i64 %and, 0
  %cmp = icmp ult i64 %expected.0, 4
  %or.cond = or i1 %cmp, %tobool.not
  br i1 %or.cond, label %cleanup75, label %if.end

if.end:                                           ; preds = %while.cond
  %or = or i64 %expected.0, 2
  %1 = cmpxchg weak i64* %state, i64 %expected.0, i64 %or acquire monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  br i1 %2, label %while.cond11, label %while.cond

while.cond11:                                     ; preds = %if.end, %cleanup70
  %.pn.pn = phi { i64, i1 } [ %.pn, %cleanup70 ], [ %1, %if.end ]
  %expected.3 = extractvalue { i64, i1 } %.pn.pn, 0
  %and13 = and i64 %expected.3, -4
  %4 = inttoptr i64 %and13 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  %tail14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %4, i64 0, i32 3
  %tail.0143 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !96
  %cmp16144 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0143, null
  br i1 %cmp16144, label %while.body17, label %while.end23

while.body17:                                     ; preds = %while.cond11, %do.end
  %current.0145 = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %5, %do.end ], [ %4, %while.cond11 ]
  %next18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next18, align 8, !tbaa !98
  %cmp19.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, null
  br i1 %cmp19.not, label %if.then20, label %do.end

if.then20:                                        ; preds = %while.body17
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.5, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then20, %while.body17
  %prev = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev, align 8, !tbaa !99
  %tail22 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 3
  %tail.0 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail22, align 8, !tbaa !96
  %cmp16 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0, null
  br i1 %cmp16, label %while.body17, label %while.end23, !llvm.loop !100

while.end23:                                      ; preds = %do.end, %while.cond11
  %tail.0.lcssa = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %tail.0143, %while.cond11 ], [ %tail.0, %do.end ]
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !96
  %and25 = and i64 %expected.3, 1
  %tobool26.not = icmp eq i64 %and25, 0
  br i1 %tobool26.not, label %if.end35, label %if.then27

if.then27:                                        ; preds = %while.end23
  %and29 = and i64 %expected.3, -3
  %6 = cmpxchg weak i64* %state, i64 %expected.3, i64 %and29 acq_rel monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %cleanup75, label %cleanup70

if.end35:                                         ; preds = %while.end23
  %prev36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 2
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev36, align 8, !tbaa !99
  %cmp37 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, null
  br i1 %cmp37, label %while.body41, label %if.else62

while.body41:                                     ; preds = %if.end35, %if.end47
  %expected.5146 = phi i64 [ %11, %if.end47 ], [ %expected.3, %if.end35 ]
  %and43 = and i64 %expected.5146, 1
  %9 = cmpxchg weak i64* %state, i64 %expected.5146, i64 %and43 acq_rel monotonic
  %10 = extractvalue { i64, i1 } %9, 1
  br i1 %10, label %if.end66, label %if.end47

if.end47:                                         ; preds = %while.body41
  %11 = extractvalue { i64, i1 } %9, 0
  %cmp49 = icmp ult i64 %11, 4
  br i1 %cmp49, label %while.body41, label %cleanup70, !llvm.loop !101

if.else62:                                        ; preds = %if.end35
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !96
  %12 = atomicrmw and i64* %state, i64 -3 release
  br label %if.end66

if.end66:                                         ; preds = %while.body41, %if.else62
  %mutex.i103 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 0
  %call.i104 = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i103) #14
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !94
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 1
  %call.i101 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #14
  %call.i = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i103) #14
  br label %cleanup75

cleanup70:                                        ; preds = %if.end47, %if.then27
  %.pn = phi { i64, i1 } [ %6, %if.then27 ], [ %9, %if.end47 ]
  fence acquire
  br label %while.cond11

cleanup75:                                        ; preds = %while.cond, %if.then27, %if.end66
  ret void
}

declare i32 @pthread_cond_signal(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_unlock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %node = alloca %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", align 8
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i8*
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 2
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 0
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 1
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 1
  %tail.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 3
  %2 = ptrtoint %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i64
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i to <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>*
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %while.cond.outer.backedge, %entry
  %expected.0.ph = phi i64 [ %0, %entry ], [ %expected.0.ph.be, %while.cond.outer.backedge ]
  %spinner.sroa.0.0.ph = phi i32 [ 40, %entry ], [ %spinner.sroa.0.0.ph.be, %while.cond.outer.backedge ]
  %and46 = and i64 %expected.0.ph, 1
  %tobool.not47 = icmp eq i64 %and46, 0
  br i1 %tobool.not47, label %if.then, label %if.end4

if.then:                                          ; preds = %while.cond.outer, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %expected.048 = phi i64 [ %6, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit ], [ %expected.0.ph, %while.cond.outer ]
  %or = or i64 %expected.048, 1
  %4 = cmpxchg weak i64* %state, i64 %expected.048, i64 %or acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup23, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit: ; preds = %if.then
  %6 = extractvalue { i64, i1 } %4, 0
  %and = and i64 %6, 1
  %tobool.not = icmp eq i64 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end4.loopexit

if.end4.loopexit:                                 ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %7 = extractvalue { i64, i1 } %4, 0
  br label %if.end4

if.end4:                                          ; preds = %if.end4.loopexit, %while.cond.outer
  %expected.0.lcssa = phi i64 [ %expected.0.ph, %while.cond.outer ], [ %7, %if.end4.loopexit ]
  %cmp.not = icmp ugt i64 %expected.0.lcssa, 3
  %cmp.i = icmp sgt i32 %spinner.sroa.0.0.ph, 0
  %or.cond = and i1 %cmp.i, %cmp.not
  br i1 %or.cond, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, label %if.end9

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit: ; preds = %if.end4
  %cmp4.i = icmp sgt i32 %spinner.sroa.0.0.ph, 1
  br i1 %cmp4.i, label %if.then7, label %if.end9

if.then7:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit
  %dec.i = add nsw i32 %spinner.sroa.0.0.ph, -1
  call void @halide_thread_yield() #14
  %8 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond.outer.backedge

if.end9:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, %if.end4
  %spinner.sroa.0.2 = phi i32 [ %spinner.sroa.0.0.ph, %if.end4 ], [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit ]
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1) #11
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !94
  %call.i.i29 = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #14
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #14
  store <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>* %3, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !96
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !94
  %and10 = and i64 %expected.0.lcssa, -4
  %cmp11 = icmp eq i64 %and10, 0
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !96
  br label %if.end13

if.else:                                          ; preds = %if.end9
  %9 = inttoptr i64 %and10 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %9, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i, align 8, !tbaa !98
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  %and15 = and i64 %expected.0.lcssa, 3
  %or16 = or i64 %and15, %2
  %10 = cmpxchg weak i64* %state, i64 %expected.0.lcssa, i64 %or16 release monotonic
  %11 = extractvalue { i64, i1 } %10, 1
  br i1 %11, label %if.then19, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit: ; preds = %if.end13
  %12 = extractvalue { i64, i1 } %10, 0
  br label %if.end22

if.then19:                                        ; preds = %if.end13
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %13 = load i8, i8* %should_park.i.i, align 8, !tbaa !94, !range !17
  %tobool.not6.i = icmp eq i8 %13, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %if.then19, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %14 = load i8, i8* %should_park.i.i, align 8, !tbaa !94, !range !17
  %tobool.not.i = icmp eq i8 %14, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !102

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %if.then19
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %15 = load atomic i64, i64* %state monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit
  %expected.3 = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %12, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %spinner.sroa.0.3 = phi i32 [ 40, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %spinner.sroa.0.2, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %call.i.i = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #14
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1) #11
  br label %while.cond.outer.backedge

while.cond.outer.backedge:                        ; preds = %if.end22, %if.then7
  %expected.0.ph.be = phi i64 [ %8, %if.then7 ], [ %expected.3, %if.end22 ]
  %spinner.sroa.0.0.ph.be = phi i32 [ %dec.i, %if.then7 ], [ %spinner.sroa.0.3, %if.end22 ]
  br label %while.cond.outer

cleanup23:                                        ; preds = %if.then
  ret void
}

declare i32 @pthread_mutex_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_wait(%struct.pthread_mutex_t*, %struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_cond_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 align 2 {
entry:
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %lock_state, align 8, !tbaa !46
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 3
  ret i1 %cmp
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) unnamed_addr #2 align 2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  %0 = select i1 %more_waiters, i64 2, i64 0
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %1 = load i64*, i64** %lock_state, align 8, !tbaa !46
  store atomic i64 %0, i64* %1 release, align 8
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 align 2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak void @halide_cond_broadcast(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !44
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !103
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !105
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5, i64 %0, i64 0) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = load atomic i32, i32* %value acquire, align 4
  %sub12 = sub nsw i32 %0, %n
  %cmp113 = icmp sgt i32 %sub12, -1
  br i1 %cmp113, label %land.rhs, label %return

land.rhs:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit
  %sub15 = phi i32 [ %sub, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %sub12, %if.end ]
  %expected.014 = phi i32 [ %3, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %0, %if.end ]
  %1 = cmpxchg weak i32* %value, i32 %expected.014, i32 %sub15 acq_rel monotonic
  %2 = extractvalue { i32, i1 } %1, 1
  br i1 %2, label %return.loopexit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit: ; preds = %land.rhs
  %3 = extractvalue { i32, i1 } %1, 0
  %sub = sub nsw i32 %3, %n
  %cmp1 = icmp sgt i32 %sub, -1
  br i1 %cmp1, label %land.rhs, label %return.loopexit

return.loopexit:                                  ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit, %land.rhs
  %4 = extractvalue { i32, i1 } %1, 1
  br label %return

return:                                           ; preds = %return.loopexit, %if.end, %entry
  %retval.0 = phi i1 [ true, %entry ], [ false, %if.end ], [ %4, %return.loopexit ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_cond_wait(%struct.halide_mutex* %cond, %struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #11
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !44
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !106
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  %2 = bitcast %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i to %struct.halide_mutex**
  store %struct.halide_mutex* %mutex, %struct.halide_mutex** %2, align 8, !tbaa !108
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %4 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %3, i64 %4) #14
  %5 = ptrtoint %struct.halide_mutex* %mutex to i64
  %cmp.not.i = icmp eq i64 %call.i, %5
  %6 = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %7 = cmpxchg weak i64* %6, i64 0, i64 1 acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  %9 = load atomic i64, i64* %6 monotonic, align 8
  %10 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i to i8*
  %11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0
  br label %while.cond.outer.i.i.i

while.cond.outer.i.i.i:                           ; preds = %while.cond.outer.i.i.i.backedge, %if.then.i.i
  %expected.0.ph.i.i.i = phi i64 [ %9, %if.then.i.i ], [ %expected.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i.i = phi i32 [ 40, %if.then.i.i ], [ %spinner.sroa.0.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %and55.i.i.i = and i64 %expected.0.ph.i.i.i, 1
  %tobool.not56.i.i.i = icmp eq i64 %and55.i.i.i, 0
  br i1 %tobool.not56.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i

if.then.i.i.i:                                    ; preds = %while.cond.outer.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %expected.057.i.i.i = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i ], [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ]
  %or.i.i.i = or i64 %expected.057.i.i.i, 1
  %13 = cmpxchg weak i64* %6, i64 %expected.057.i.i.i, i64 %or.i.i.i acquire monotonic
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then.i.i.i
  %15 = extractvalue { i64, i1 } %13, 0
  %and.i.i.i = and i64 %15, 1
  %tobool.not.i.i.i = icmp eq i64 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i.loopexit

if.end4.i.i.i.loopexit:                           ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %16 = extractvalue { i64, i1 } %13, 0
  br label %if.end4.i.i.i

if.end4.i.i.i:                                    ; preds = %if.end4.i.i.i.loopexit, %while.cond.outer.i.i.i
  %expected.0.lcssa.i.i.i = phi i64 [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ], [ %16, %if.end4.i.i.i.loopexit ]
  %cmp.i.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, label %if.end8.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i: ; preds = %if.end4.i.i.i
  %cmp4.i.not.i.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i.i, 1
  br i1 %cmp4.i.not.i.i.i, label %if.end8.i.i.i, label %if.then6.i.i.i

if.then6.i.i.i:                                   ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i
  %dec.i.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i.i, -1
  call void @halide_thread_yield() #14
  %17 = load atomic i64, i64* %6 monotonic, align 8
  br label %while.cond.outer.i.i.i.backedge

if.end8.i.i.i:                                    ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, %if.end4.i.i.i
  %spinner.sroa.0.152.i.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i ], [ %spinner.sroa.0.0.ph.i.i.i, %if.end4.i.i.i ]
  %and9.i.i.i = and i64 %expected.0.lcssa.i.i.i, 2
  %cmp.i.i.i = icmp eq i64 %and9.i.i.i, 0
  br i1 %cmp.i.i.i, label %if.then10.i.i.i, label %if.end19.i.i.i

if.then10.i.i.i:                                  ; preds = %if.end8.i.i.i
  %or12.i.i.i = or i64 %expected.0.lcssa.i.i.i, 2
  %18 = cmpxchg weak i64* %6, i64 %expected.0.lcssa.i.i.i, i64 %or12.i.i.i monotonic monotonic
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %if.end19.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then10.i.i.i
  %20 = extractvalue { i64, i1 } %18, 0
  br label %while.cond.outer.i.i.i.backedge

if.end19.i.i.i:                                   ; preds = %if.then10.i.i.i, %if.end8.i.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !44
  store i64* %6, i64** %lock_state2.i.i.i.i, align 8, !tbaa !46
  %call21.i.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %12, i64 %5) #14
  %cmp22.i.i.i = icmp eq i64 %call21.i.i.i, %5
  br i1 %cmp22.i.i.i, label %cleanup30.critedge.i.i.i, label %if.end24.i.i.i

if.end24.i.i.i:                                   ; preds = %if.end19.i.i.i
  %21 = load atomic i64, i64* %6 monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %while.cond.outer.i.i.i.backedge

while.cond.outer.i.i.i.backedge:                  ; preds = %if.end24.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i, %if.then6.i.i.i
  %expected.0.ph.i.i.i.be = phi i64 [ %20, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ %21, %if.end24.i.i.i ], [ %17, %if.then6.i.i.i ]
  %spinner.sroa.0.0.ph.i.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ 40, %if.end24.i.i.i ], [ %dec.i.i.i.i, %if.then6.i.i.i ]
  br label %while.cond.outer.i.i.i

cleanup30.critedge.i.i.i:                         ; preds = %if.end19.i.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.else.i:                                        ; preds = %entry
  %22 = load atomic i64, i64* %6 monotonic, align 8
  %and.i = and i64 %22, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %if.then2.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.then2.i:                                       ; preds = %if.else.i
  call void @halide_print(i8* null, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str.5.6, i64 0, i64 0)) #14
  call void @abort() #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit: ; preds = %if.then.i.i.i, %if.then2.i, %if.else.i, %cleanup30.critedge.i.i.i, %if.then.i
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #4 align 2 {
entry:
  %queue_data = alloca %"struct.Halide::Runtime::Internal::Synchronization::queue_data", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %0) #11
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !94
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 0
  %call.i.i = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #14
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 1
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #14
  %sleep_address.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 1
  store i64 0, i64* %sleep_address.i, align 8, !tbaa !109
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !84
  %unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 3
  store i64 0, i64* %unpark_info.i, align 8, !tbaa !93
  %call = call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #15
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !110
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !112
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !44
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call2 = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #14
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %4 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %4, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %4, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %cleanup

if.end:                                           ; preds = %entry
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !84
  store i64 %addr, i64* %sleep_address.i, align 8, !tbaa !109
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !94
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !113
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, i64 0, i32 2
  %head.sink = select i1 %cmp.not, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head.sink, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !89
  %state.i23 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %7 = atomicrmw and i64* %state.i23, i64 -2 release
  %and.i24 = and i64 %7, 2
  %cmp.i25 = icmp ne i64 %and.i24, 0
  %cmp3.not.i26 = icmp ult i64 %7, 4
  %or.cond.i27 = or i1 %cmp3.not.i26, %cmp.i25
  br i1 %or.cond.i27, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, label %if.then.i28

if.then.i28:                                      ; preds = %if.end
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29: ; preds = %if.then.i28, %if.end
  %8 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)***
  %vtable9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*** %8, align 8, !tbaa !44
  %vfn10 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vtable9, i64 1
  %9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vfn10, align 8
  call void %9(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) #14
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %10 = load i8, i8* %should_park.i.i, align 8, !tbaa !94, !range !17
  %tobool.not6.i = icmp eq i8 %10, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %11 = load i8, i8* %should_park.i.i, align 8, !tbaa !94, !range !17
  %tobool.not.i = icmp eq i8 %11, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !102

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %if.then.i, %if.then
  %unpark_info.i.sink = phi i64* [ %unpark_info.i, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %invalid_unpark_info.i, %if.then ], [ %invalid_unpark_info.i, %if.then.i ]
  %12 = load i64, i64* %unpark_info.i.sink, align 8, !tbaa !18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  %call.i.i22 = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #14
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %0) #11
  ret i64 %12
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !106
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !108
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store atomic i64 %3, i64* %0 monotonic, align 8
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp4.not = icmp eq i64 %1, %3
  br i1 %cmp4.not, label %cleanup, label %if.then5

if.then5:                                         ; preds = %if.else
  %invalid_unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 %3, i64* %invalid_unpark_info, align 8, !tbaa !112
  br label %cleanup

cleanup:                                          ; preds = %if.then5, %if.else, %if.then
  %retval.0 = phi i1 [ false, %if.then5 ], [ true, %if.else ], [ true, %if.then ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this) unnamed_addr #4 align 2 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %0 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !108
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0, i64 0, i32 0
  %1 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  br i1 %2, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %3 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %5 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !44
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !46
  %7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %8 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0 to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %7, i64 %8) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !106
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr_from, i64 %addr_to, i64 %unpark_info) local_unnamed_addr #4 align 2 {
entry:
  %buckets = alloca %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  call void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %buckets, i64 %addr_from, i64 %addr_to) #15
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !110
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !112
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !44
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #14
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #15
  br label %cleanup

if.end:                                           ; preds = %entry
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !114
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %cmp.not92 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  br i1 %cmp.not92, label %if.end38, label %while.body

while.body:                                       ; preds = %if.end, %if.end22
  %wakeup.098 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end22 ], [ null, %if.end ]
  %requeue_tail.097 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.2, %if.end22 ], [ null, %if.end ]
  %requeue.096 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.3, %if.end22 ], [ null, %if.end ]
  %data.095 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %7, %if.end22 ], [ %5, %if.end ]
  %prev.094 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.1, %if.end22 ], [ null, %if.end ]
  %data_location.093 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.1, %if.end22 ], [ %head, %if.end ]
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 1
  %6 = load atomic i64, i64* %sleep_address monotonic, align 8
  %next2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 2
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next2, align 8, !tbaa !84
  %cmp3 = icmp eq i64 %6, %addr_from
  br i1 %cmp3, label %if.then4, label %if.end22

if.then4:                                         ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.093, align 8, !tbaa !10
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !114
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %8, i64 0, i32 2
  %9 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !89
  %cmp6 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %9, %data.095
  br i1 %cmp6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.then4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.094, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !89
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.then4
  %10 = load i8, i8* %1, align 8, !tbaa !110, !range !17
  %tobool = icmp ne i8 %10, 0
  %cmp11 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.098, null
  %or.cond = and i1 %cmp11, %tobool
  br i1 %or.cond, label %if.end22, label %if.else

if.else:                                          ; preds = %if.end10
  %cmp13 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.096, null
  br i1 %cmp13, label %if.end17, label %if.else15

if.else15:                                        ; preds = %if.else
  %next16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.097, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next16, align 8, !tbaa !84
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.else
  %requeue.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.else15 ], [ %data.095, %if.else ]
  store atomic i64 %addr_to, i64* %sleep_address monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.end17, %if.end10, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.093, %if.end10 ], [ %data_location.093, %if.end17 ], [ %next2, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.094, %if.end10 ], [ %prev.094, %if.end17 ], [ %data.095, %while.body ]
  %requeue.3 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.end10 ], [ %requeue.1, %if.end17 ], [ %requeue.096, %while.body ]
  %requeue_tail.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.097, %if.end10 ], [ %data.095, %if.end17 ], [ %requeue_tail.097, %while.body ]
  %wakeup.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.095, %if.end10 ], [ %wakeup.098, %if.end17 ], [ %wakeup.098, %while.body ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !116

while.end:                                        ; preds = %if.end22
  %cmp23.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, null
  br i1 %cmp23.not, label %if.end38, label %if.then24

if.then24:                                        ; preds = %while.end
  %next25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next25, align 8, !tbaa !84
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %11 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !117
  %head26 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 1
  %12 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head26, align 8, !tbaa !113
  %cmp27 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %12, null
  br i1 %cmp27, label %if.end35, label %if.else31

if.else31:                                        ; preds = %if.then24
  %tail33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  %13 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail33, align 8, !tbaa !89
  %next34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %13, i64 0, i32 2
  br label %if.end35

if.end35:                                         ; preds = %if.else31, %if.then24
  %next34.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %next34, %if.else31 ], [ %head26, %if.then24 ]
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next34.sink, align 8, !tbaa !10
  %tail37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail37, align 8, !tbaa !89
  br label %if.end38

if.end38:                                         ; preds = %if.end35, %while.end, %if.end
  %cmp23106 = phi i1 [ true, %if.end35 ], [ false, %while.end ], [ false, %if.end ]
  %wakeup.0.lcssa105 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end35 ], [ %wakeup.2, %while.end ], [ null, %if.end ]
  %cmp39 = icmp ne %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, null
  %14 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)***
  %vtable41 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*** %14, align 8, !tbaa !44
  %vfn42 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vtable41, i64 3
  %15 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vfn42, align 8
  call void %15(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %cmp39, i1 zeroext %cmp23106) #14
  br i1 %cmp39, label %if.then44, label %if.else48

if.then44:                                        ; preds = %if.end38
  %unpark_info45 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 3
  store i64 %unpark_info, i64* %unpark_info45, align 8, !tbaa !93
  %mutex.i89 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 0
  %call.i90 = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i89) #14
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #15
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !94
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 1
  %call.i88 = call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #14
  %call.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i89) #14
  br label %if.end49

if.else48:                                        ; preds = %if.end38
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #15
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.then44
  %16 = load i8, i8* %1, align 8
  %17 = and i8 %16, 1
  %tobool52 = icmp ne i8 %17, 0
  %18 = and i1 %cmp39, %tobool52
  %conv = zext i1 %18 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then
  %retval.0 = phi i32 [ %conv, %if.end49 ], [ 0, %if.then ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* noalias sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %agg.result, i64 %addr_from, i64 %addr_to) local_unnamed_addr #4 {
entry:
  %mul.i = mul i64 %addr_from, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %mul.i37 = mul i64 %addr_to, -7046029254386353131
  %shr.i38 = lshr i64 %mul.i37, 54
  %cmp = icmp eq i64 %shr.i, %shr.i38
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i42, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %cleanup, label %if.then.i43

if.then.i43:                                      ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp2 = icmp ult i64 %shr.i, %shr.i38
  br i1 %cmp2, label %if.then3, label %if.else9

if.then3:                                         ; preds = %if.else
  %arrayidx5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %state.i52 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0, i32 0
  %2 = cmpxchg weak i64* %state.i52, i64 0, i64 1 acquire monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, label %if.then.i53

if.then.i53:                                      ; preds = %if.then3
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54: ; preds = %if.then.i53, %if.then3
  %state.i49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0, i32 0
  %4 = cmpxchg weak i64* %state.i49, i64 0, i64 1 acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup, label %if.then.i50

if.then.i50:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #14
  br label %cleanup

if.else9:                                         ; preds = %if.else
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %arrayidx13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0, i32 0
  %6 = cmpxchg weak i64* %state.i39, i64 0, i64 1 acquire monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, label %if.then.i40

if.then.i40:                                      ; preds = %if.else9
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41: ; preds = %if.then.i40, %if.else9
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0, i32 0
  %8 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41
  %mutex15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex15) #14
  br label %cleanup

cleanup:                                          ; preds = %if.then.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, %if.then.i50, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, %if.then.i43, %if.then
  %arrayidx13.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx5, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx5, %if.then.i50 ], [ %arrayidx13, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx13, %if.then.i ]
  %arrayidx11.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx6, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx6, %if.then.i50 ], [ %arrayidx11, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx11, %if.then.i ]
  %from2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from2.i, align 8, !tbaa !10
  %to3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to3.i, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) local_unnamed_addr #0 {
entry:
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !114
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %1 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !117
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %2 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %2, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %2, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end15, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %if.end15

if.else:                                          ; preds = %entry
  %cmp4 = icmp ugt %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %state.i25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %3 = atomicrmw and i64* %state.i25, i64 -2 release
  %and.i26 = and i64 %3, 2
  %cmp.i27 = icmp ne i64 %and.i26, 0
  %cmp3.not.i28 = icmp ult i64 %3, 4
  %or.cond.i29 = or i1 %cmp3.not.i28, %cmp.i27
  br i1 %or.cond.i29, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, label %if.then.i30

if.then.i30:                                      ; preds = %if.then5
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31: ; preds = %if.then.i30, %if.then5
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !117
  %state.i32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0, i32 0
  %5 = atomicrmw and i64* %state.i32, i64 -2 release
  %and.i33 = and i64 %5, 2
  %cmp.i34 = icmp ne i64 %and.i33, 0
  %cmp3.not.i35 = icmp ult i64 %5, 4
  %or.cond.i36 = or i1 %cmp3.not.i35, %cmp.i34
  br i1 %or.cond.i36, label %if.end15, label %if.then.i37

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31
  %mutex9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex9) #14
  br label %if.end15

if.else10:                                        ; preds = %if.else
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0, i32 0
  %6 = atomicrmw and i64* %state.i39, i64 -2 release
  %and.i40 = and i64 %6, 2
  %cmp.i41 = icmp ne i64 %and.i40, 0
  %cmp3.not.i42 = icmp ult i64 %6, 4
  %or.cond.i43 = or i1 %cmp3.not.i42, %cmp.i41
  br i1 %or.cond.i43, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, label %if.then.i44

if.then.i44:                                      ; preds = %if.else10
  %mutex12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex12) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45: ; preds = %if.then.i44, %if.else10
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !114
  %state.i46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0, i32 0
  %8 = atomicrmw and i64* %state.i46, i64 -2 release
  %and.i47 = and i64 %8, 2
  %cmp.i48 = icmp ne i64 %and.i47, 0
  %cmp3.not.i49 = icmp ult i64 %8, 4
  %or.cond.i50 = or i1 %cmp3.not.i49, %cmp.i48
  br i1 %or.cond.i50, label %if.end15, label %if.then.i51

if.then.i51:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #14
  br label %if.end15

if.end15:                                         ; preds = %if.then.i51, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, %if.then.i37, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, %if.then.i, %if.then
  ret void
}

; Function Attrs: nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #4 align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !103
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !105
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  %cmp.not = icmp eq i64 %1, %3
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  store atomic i64 0, i64* %0 monotonic, align 8
  %4 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !105
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %4, i64 0, i32 0
  %5 = load atomic i64, i64* %state.i monotonic, align 8
  %and11.i = and i64 %5, 1
  %tobool.not12.i = icmp eq i64 %and11.i, 0
  br i1 %tobool.not12.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i
  %val.013.i = phi i64 [ %8, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ %5, %if.end ]
  %or.i = or i64 %val.013.i, 2
  %6 = cmpxchg weak i64* %state.i, i64 %val.013.i, i64 %or.i monotonic monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i: ; preds = %if.end.i
  %8 = extractvalue { i64, i1 } %6, 0
  %and.i = and i64 %8, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit: ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i, %if.end.i, %if.end
  %tobool.not.lcssa.i = phi i8 [ 1, %if.end ], [ 1, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ 0, %if.end.i ]
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  store i8 %tobool.not.lcssa.i, i8* %unpark_one, align 8, !tbaa !110
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, %entry
  ret i1 %cmp.not
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 align 2 {
entry:
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  %0 = load i8, i8* %unpark_one, align 8, !tbaa !110, !range !17
  %tobool.not = icmp ne i8 %0, 0
  %1 = and i1 %tobool.not, %some_requeued
  br i1 %1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !105
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, i64 0, i32 0
  %3 = atomicrmw or i64* %state.i, i64 2 monotonic
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() local_unnamed_addr #0 {
entry:
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #14
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.end, label %cond.true

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #14
  %tobool2.not = icmp eq i8* %call1, null
  br i1 %tobool2.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end, %entry
  %threads_str.010 = phi i8* [ %call1, %if.end ], [ %call, %entry ]
  %call3 = tail call i32 @atoi(i8* nonnull %threads_str.010) #14
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = tail call i32 @halide_host_cpu_count() #14
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal13worker_threadEPv(i8* %arg) #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %0 = bitcast i8* %arg to %"struct.Halide::Runtime::Internal::work"*
  tail call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %0) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @malloc(i64 24) #14
  %f1 = bitcast i8* %call to void (i8*)**
  store void (i8*)* %f, void (i8*)** %f1, align 8, !tbaa !118
  %closure2 = getelementptr inbounds i8, i8* %call, i64 8
  %0 = bitcast i8* %closure2 to i8**
  store i8* %closure, i8** %0, align 8, !tbaa !121
  %handle = getelementptr inbounds i8, i8* %call, i64 16
  %1 = bitcast i8* %handle to i64*
  store i64 0, i64* %1, align 8, !tbaa !122
  %call4 = tail call i32 @pthread_create(i64* nonnull %1, i8* null, i8* (i8*)* nonnull @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv, i8* %call) #14
  %2 = bitcast i8* %call to %struct.halide_thread*
  ret %struct.halide_thread* %2
}

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv(i8* %arg) #0 {
entry:
  %f = bitcast i8* %arg to void (i8*)**
  %0 = load void (i8*)*, void (i8*)** %f, align 8, !tbaa !118
  %closure = getelementptr inbounds i8, i8* %arg, i64 8
  %1 = bitcast i8* %closure to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !121
  tail call void %0(i8* %2) #14
  ret i8* null
}

declare i32 @pthread_create(i64*, i8*, i8* (i8*)*, i8*) local_unnamed_addr #1

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  %conv = sext i32 %num_tasks to i64
  %0 = alloca %"struct.Halide::Runtime::Internal::work", i64 %conv, align 8
  %cmp76 = icmp sgt i32 %num_tasks, 0
  br i1 %cmp76, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %num_tasks.addr.0.lcssa = phi i32 [ %num_tasks, %entry ], [ %num_tasks.addr.1, %for.inc ]
  %cmp17 = icmp eq i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp17, label %cleanup, label %if.end19

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv82 = phi i64 [ %indvars.iv.next83, %for.inc ], [ 0, %entry ]
  %num_tasks.addr.078 = phi i32 [ %num_tasks.addr.1, %for.inc ], [ %num_tasks, %entry ]
  %tasks.addr.077 = phi %struct.halide_parallel_task_t* [ %tasks.addr.1, %for.inc ], [ %tasks, %entry ]
  %extent = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 0, i32 6
  %1 = load i32, i32* %extent, align 8, !tbaa !123
  %cmp1 = icmp slt i32 %1, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %dec = add nsw i32 %num_tasks.addr.078, -1
  br label %for.inc

if.end:                                           ; preds = %for.body
  %incdec.ptr = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 1
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82
  %2 = bitcast %"struct.Halide::Runtime::Internal::work"* %arrayidx to i8*
  %3 = bitcast %struct.halide_parallel_task_t* %tasks.addr.077 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %2, i8* nonnull align 8 dereferenceable(56) %3, i64 56, i1 false), !tbaa.struct !124
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 1
  store i32 (i8*, i32, i8*)* null, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !35
  %user_context6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 7
  store i8* %user_context, i8** %user_context6, align 8, !tbaa !36
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 8
  %4 = bitcast i32* %active_workers to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %4, align 8, !tbaa !37
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !38
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !39
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 5
  %5 = bitcast %"struct.Halide::Runtime::Internal::work"** %parent_job to i8**
  store i8* %task_parent, i8** %5, align 8, !tbaa !42
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %tasks.addr.1 = phi %struct.halide_parallel_task_t* [ %tasks.addr.077, %if.then ], [ %incdec.ptr, %if.end ]
  %num_tasks.addr.1 = phi i32 [ %dec, %if.then ], [ %num_tasks.addr.078, %if.end ]
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %6 = sext i32 %num_tasks.addr.1 to i64
  %cmp = icmp slt i64 %indvars.iv.next83, %6
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !125

if.end19:                                         ; preds = %for.cond.cleanup
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %7 = bitcast i8* %task_parent to %"struct.Halide::Runtime::Internal::work"*
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_tasks.addr.0.lcssa, %"struct.Halide::Runtime::Internal::work"* nonnull %0, %"struct.Halide::Runtime::Internal::work"* %7) #15
  %cmp2373 = icmp sgt i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp2373, label %for.body25.preheader, label %for.cond.cleanup24

for.body25.preheader:                             ; preds = %if.end19
  %wide.trip.count = zext i32 %num_tasks.addr.0.lcssa to i64
  br label %for.body25

for.cond.cleanup24:                               ; preds = %for.body25, %if.end19
  %exit_status20.0.lcssa = phi i32 [ 0, %if.end19 ], [ %spec.select, %for.body25 ]
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  br label %cleanup

for.body25:                                       ; preds = %for.body25, %for.body25.preheader
  %indvars.iv = phi i64 [ 0, %for.body25.preheader ], [ %indvars.iv.next, %for.body25 ]
  %exit_status20.074 = phi i32 [ 0, %for.body25.preheader ], [ %spec.select, %for.body25 ]
  %add.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %add.ptr) #15
  %exit_status28 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 9
  %8 = load i32, i32* %exit_status28, align 4, !tbaa !43
  %cmp29.not = icmp eq i32 %8, 0
  %spec.select = select i1 %cmp29.not, i32 %exit_status20.074, i32 %8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup24, label %for.body25, !llvm.loop !126

cleanup:                                          ; preds = %for.cond.cleanup24, %for.cond.cleanup
  %retval.0 = phi i32 [ %exit_status20.0.lcssa, %for.cond.cleanup24 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #2 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  store atomic i32 %n, i32* %value release, align 4
  ret i32 %n
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = atomicrmw add i32* %value, i32 %n acq_rel
  %cmp = icmp eq i32 %0, 0
  %cmp1 = icmp ne i32 %n, 0
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #15
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %add = add nsw i32 %0, %n
  ret i32 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_pool_cleanup() #0 {
entry:
  tail call void @halide_shutdown_thread_pool() #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !48, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !69
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #15
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #15
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !56
  %cmp4 = icmp sgt i32 %1, 0
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %call.i = tail call i8* @memset(i8* nonnull bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i32 0, i64 2116) #14
  br label %if.end

for.body:                                         ; preds = %if.then, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %indvars.iv
  %2 = load %struct.halide_thread*, %struct.halide_thread** %arrayidx, align 8, !tbaa !10
  tail call void @halide_join_thread(%struct.halide_thread* %2) #15
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %3 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !56
  %4 = sext i32 %3 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %4
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !127

if.end:                                           ; preds = %for.cond.cleanup, %entry
  ret void
}

declare i8* @memset(i8*, i32, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  %ret = alloca i8*, align 8
  %0 = bitcast %struct.halide_thread* %thread_arg to %"struct.Halide::Runtime::Internal::spawned_thread"*
  %1 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #11
  store i8* null, i8** %ret, align 8, !tbaa !10
  %handle = getelementptr inbounds %"struct.Halide::Runtime::Internal::spawned_thread", %"struct.Halide::Runtime::Internal::spawned_thread"* %0, i64 0, i32 2
  %2 = load i64, i64* %handle, align 8, !tbaa !122
  %call = call i32 @pthread_join(i64 %2, i8** nonnull %ret) #14
  %3 = bitcast %struct.halide_thread* %thread_arg to i8*
  call void @free(i8* %3) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #11
  ret void
}

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #1

; Function Attrs: nounwind
define weak void @halide_cond_signal(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !44
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !128
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !130
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 align 2 {
entry:
  ret i1 true
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !128
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_malloc(i8* null, i64 8) #14
  %0 = bitcast i8* %call to %struct.halide_mutex_array*
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %conv = sext i32 %sz to i64
  %mul = shl nsw i64 %conv, 3
  %call1 = tail call i8* @halide_malloc(i8* null, i64 %mul) #14
  %1 = bitcast i8* %call to i8**
  store i8* %call1, i8** %1, align 8, !tbaa !131
  %cmp4 = icmp eq i8* %call1, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  tail call void @halide_free(i8* null, i8* nonnull %call) #14
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %call10 = tail call i8* @memset(i8* nonnull %call1, i32 0, i64 %mul) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then5, %entry
  %retval.0 = phi %struct.halide_mutex_array* [ null, %if.then5 ], [ %0, %if.end6 ], [ null, %entry ]
  ret %struct.halide_mutex_array* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %array to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !131
  tail call void @halide_free(i8* %user_context, i8* %1) #14
  tail call void @halide_free(i8* %user_context, i8* %array) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !131
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_lock(%struct.halide_mutex* %arrayidx) #15
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !131
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %arrayidx) #15
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  br i1 %cmp, label %if.end3.thread, label %if.end

if.end3.thread:                                   ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #14
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %0 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !54
  br label %if.else.i

if.end:                                           ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %cmp1 = icmp eq i32 %n, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #15
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %n.addr.0 = phi i32 [ %call, %if.then2 ], [ %n, %if.end ]
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !54
  %cmp.i = icmp sgt i32 %n.addr.0, 256
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit, label %if.else.i

if.else.i:                                        ; preds = %if.end3, %if.end3.thread
  %2 = phi i32 [ %0, %if.end3.thread ], [ %1, %if.end3 ]
  %n.addr.012 = phi i32 [ %n, %if.end3.thread ], [ %n.addr.0, %if.end3 ]
  %3 = icmp sgt i32 %n.addr.012, 1
  %spec.select.i = select i1 %3, i32 %n.addr.012, i32 1
  br label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit

_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit: ; preds = %if.else.i, %if.end3
  %4 = phi i32 [ %2, %if.else.i ], [ %1, %if.end3 ]
  %call48 = phi i32 [ %spec.select.i, %if.else.i ], [ 256, %if.end3 ]
  store i32 %call48, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !54
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  ret i32 %4
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_set_custom_do_loop_task(i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_custom_parallel_runtime(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release) local_unnamed_addr #2 {
entry:
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  store i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i1 %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_symbol(i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* nonnull inttoptr (i64 -2 to i8*), i8* %name) #14
  ret i8* %call
}

declare i8* @dlsym(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_load_library(i8* %name) #0 {
entry:
  %call = tail call i8* @dlopen(i8* %name, i32 5) #14
  ret i8* %call
}

declare i8* @dlopen(i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_library_symbol(i8* %lib, i8* %name) #0 {
entry:
  %cmp = icmp eq i8* %lib, null
  %spec.select = select i1 %cmp, i8* inttoptr (i64 -2 to i8*), i8* %lib
  %call = tail call i8* @dlsym(i8* %spec.select, i8* %name) #14
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_get_symbol(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_load_library(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i8*)* @halide_set_custom_get_library_symbol(i8* (i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  store i8* (i8*, i8*)* %f, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  ret i8* (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_symbol(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #14
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_load_library(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #14
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_library_symbol(i8* %lib, i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %lib, i8* %name) #14
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !37
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !133

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !37
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0)) #14
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #14
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !37
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

; Function Attrs: nounwind
define weak i32 @halide_default_trace(i8* %user_context, %struct.halide_trace_event_t* %e) #4 {
entry:
  %0 = atomicrmw add i32* @_ZZ20halide_default_traceE3ids, i32 1 seq_cst
  %call = tail call i32 @halide_get_trace_file(i8* %user_context) #15
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4
  %lanes = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %1 = load i16, i16* %lanes, align 2, !tbaa !134
  %conv = zext i16 %1 to i32
  %bits.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %2 = load i8, i8* %bits.i, align 1, !tbaa !140
  %conv.i = zext i8 %2 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %mul = mul nuw nsw i32 %div.i, %conv
  %dimensions = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %3 = load i32, i32* %dimensions, align 8, !tbaa !141
  %mul3 = shl i32 %3, 2
  %func = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !142
  %call4 = tail call i64 @strlen(i8* %4) #14
  %5 = trunc i64 %call4 to i32
  %conv5 = add i32 %5, 1
  %trace_tag = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %6 = load i8*, i8** %trace_tag, align 8, !tbaa !143
  %tobool.not = icmp eq i8* %6, null
  br i1 %tobool.not, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.then
  %call7 = tail call i64 @strlen(i8* nonnull %6) #14
  %7 = trunc i64 %call7 to i32
  %phi.cast = add i32 %7, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.then
  %cond = phi i32 [ %phi.cast, %cond.true ], [ 1, %if.then ]
  %add11 = add i32 %mul3, 31
  %add12 = add i32 %add11, %mul
  %add13 = add i32 %add12, %conv5
  %add14 = add i32 %add13, %cond
  %and = and i32 %add14, -4
  %8 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 0, i32 0
  %cmp.i.i = icmp ult i32 %and, 1048577
  %cursor.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 1
  %overage.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 2
  %arraydecay.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 0
  br i1 %cmp.i.i, label %while.body.i.i.us.i.preheader, label %while.body.i.i.i.preheader

while.body.i.i.i.preheader:                       ; preds = %cond.end
  %9 = bitcast i32* %cursor.i.i to <2 x i32>*
  br label %while.body.i.i.i

while.body.i.i.us.i.preheader:                    ; preds = %cond.end
  %10 = bitcast i32* %cursor.i.i to <2 x i32>*
  br label %while.body.i.i.us.i

while.body.i.i.us.i:                              ; preds = %while.body.i.i.us.i.backedge, %while.body.i.i.us.i.preheader
  %11 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !144
  %and.i.i.us.i = and i32 %11, 1073741823
  %add.i.i.us.i = add nuw nsw i32 %and.i.i.us.i, 1
  %12 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.us.i, i32 %add.i.i.us.i seq_cst seq_cst
  %13 = extractvalue { i32, i1 } %12, 1
  br i1 %13, label %do.end.i.us.i, label %while.body.i.i.us.i.backedge

do.end.i.us.i:                                    ; preds = %while.body.i.i.us.i
  %14 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.us.i = add i32 %14, %and
  %cmp2.i.us.i = icmp ugt i32 %add.i.us.i, 1048576
  br i1 %cmp2.i.us.i, label %while.body.us.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.us.i:                                  ; preds = %do.end.i.us.i
  %15 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %16 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.us.i

while.body.i.i5.us.i:                             ; preds = %while.body.i.i5.us.i, %while.body.us.i
  %17 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %18 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i, label %while.body.i.i5.us.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i: ; preds = %while.body.i.i5.us.i
  %20 = load i32, i32* %cursor.i.i, align 4, !tbaa !146
  %tobool.not.i.us.i = icmp eq i32 %20, 0
  br i1 %tobool.not.i.us.i, label %do.end.critedge.i.us.i, label %if.then.i9.us.i

if.then.i9.us.i:                                  ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %21 = load i32, i32* %overage.i.i, align 4, !tbaa !148
  %sub.i.us.i = sub i32 %20, %21
  store i32 %sub.i.us.i, i32* %cursor.i.i, align 4, !tbaa !146
  %conv.i.us.i = zext i32 %sub.i.us.i to i64
  %call.i.us.i = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.us.i) #14
  %conv5.i.us.i = trunc i64 %call.i.us.i to i32
  %cmp.i8.us.i = icmp eq i32 %sub.i.us.i, %conv5.i.us.i
  store <2 x i32> zeroinitializer, <2 x i32>* %10, align 4, !tbaa !37
  %22 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.us.i, label %while.body.i.i.us.i.backedge, label %if.then10.i.us.i

if.then10.i.us.i:                                 ; preds = %if.then.i9.us.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %while.body.i.i.us.i.backedge

do.end.critedge.i.us.i:                           ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %23 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.us.i.backedge

while.body.i.i.us.i.backedge:                     ; preds = %do.end.critedge.i.us.i, %if.then10.i.us.i, %if.then.i9.us.i, %while.body.i.i.us.i
  br label %while.body.i.i.us.i, !llvm.loop !149

while.body.i.i.i:                                 ; preds = %while.body.i.i.i.backedge, %while.body.i.i.i.preheader
  %24 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !144
  %and.i.i.i = and i32 %24, 1073741823
  %add.i.i.i = add nuw nsw i32 %and.i.i.i, 1
  %25 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.i, i32 %add.i.i.i seq_cst seq_cst
  %26 = extractvalue { i32, i1 } %25, 1
  br i1 %26, label %if.then.i.i, label %while.body.i.i.i.backedge

if.then.i.i:                                      ; preds = %while.body.i.i.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.31, i64 0, i64 0)) #14
  tail call void @abort() #14
  %27 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.i400 = add i32 %27, %and
  %cmp2.i.i = icmp ugt i32 %add.i.i400, 1048576
  br i1 %cmp2.i.i, label %while.body.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.i:                                     ; preds = %if.then.i.i
  %28 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %29 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.i

while.body.i.i5.i:                                ; preds = %while.body.i.i5.i, %while.body.i
  %30 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %31 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %32 = extractvalue { i32, i1 } %31, 1
  br i1 %32, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i, label %while.body.i.i5.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i: ; preds = %while.body.i.i5.i
  %33 = load i32, i32* %cursor.i.i, align 4, !tbaa !146
  %tobool.not.i.i = icmp eq i32 %33, 0
  br i1 %tobool.not.i.i, label %do.end.critedge.i.i, label %if.then.i9.i

if.then.i9.i:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %34 = load i32, i32* %overage.i.i, align 4, !tbaa !148
  %sub.i.i = sub i32 %33, %34
  store i32 %sub.i.i, i32* %cursor.i.i, align 4, !tbaa !146
  %conv.i.i = zext i32 %sub.i.i to i64
  %call.i.i401 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.i) #14
  %conv5.i.i = trunc i64 %call.i.i401 to i32
  %cmp.i8.i = icmp eq i32 %sub.i.i, %conv5.i.i
  store <2 x i32> zeroinitializer, <2 x i32>* %9, align 4, !tbaa !37
  %35 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.i, label %while.body.i.i.i.backedge, label %if.then10.i.i

if.then10.i.i:                                    ; preds = %if.then.i9.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %while.body.i.i.i.backedge

do.end.critedge.i.i:                              ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %36 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.i.backedge

while.body.i.i.i.backedge:                        ; preds = %do.end.critedge.i.i, %if.then10.i.i, %if.then.i9.i, %while.body.i.i.i
  br label %while.body.i.i.i, !llvm.loop !149

_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit: ; preds = %if.then.i.i, %do.end.i.us.i
  %.lcssa.i = phi i32 [ %14, %do.end.i.us.i ], [ %27, %if.then.i.i ]
  %idx.ext.i.i = zext i32 %.lcssa.i to i64
  %add.ptr.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 %idx.ext.i.i
  %cmp16 = icmp ugt i32 %and, 4096
  br i1 %cmp16, label %if.then17, label %if.end

if.then17:                                        ; preds = %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i404 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i404, label %if.then.i415, label %if.else.i421

if.then.i415:                                     ; preds = %if.then17
  %conv.i4071 = zext i32 %and to i64
  %call.i4082 = tail call i8* @halide_uint64_to_string(i8* null, i8* null, i64 %conv.i4071, i32 1) #14
  %call.i41117 = tail call i8* @halide_string_to_string(i8* %call.i4082, i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

if.else.i421:                                     ; preds = %if.then17
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %conv.i4073 = zext i32 %and to i64
  %call.i4084 = tail call i8* @halide_uint64_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i64 %conv.i4073, i32 1) #14
  %call.i411 = tail call i8* @halide_string_to_string(i8* %call.i4084, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i416 = ptrtoint i8* %call.i411 to i64
  %sub.ptr.rhs.cast.i.i417 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i418 = sub i64 1, %sub.ptr.rhs.cast.i.i417
  %add.i.i419 = add i64 %sub.ptr.sub.i.i418, %sub.ptr.lhs.cast.i.i416
  %call.i.i420 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* null, i8* nonnull %call.i, i64 %add.i.i419) #14
  tail call void @halide_print(i8* null, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit: ; preds = %if.else.i421, %if.then.i415
  tail call void @free(i8* %call.i) #14
  br label %if.end

if.end:                                           ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit, %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %size = bitcast i8* %add.ptr.i.i to i32*
  store i32 %and, i32* %size, align 4, !tbaa !150
  %id = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 4
  %37 = bitcast i8* %id to i32*
  store i32 %0, i32* %37, align 4, !tbaa !152
  %38 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 8
  %39 = bitcast %struct.halide_type_t* %type to i32*
  %40 = bitcast i8* %38 to i32*
  %41 = load i32, i32* %39, align 8
  store i32 %41, i32* %40, align 4
  %event = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %event22 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 12
  %42 = bitcast i32* %event to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4, !tbaa !14
  %dimensions26 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 24
  %44 = bitcast i8* %dimensions26 to i32*
  %45 = bitcast i8* %event22 to <4 x i32>*
  store <4 x i32> %43, <4 x i32>* %45, align 4, !tbaa !14
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %46 = load i32*, i32** %coordinates, align 8, !tbaa !153
  %tobool27.not = icmp eq i32* %46, null
  br i1 %tobool27.not, label %if.end33, label %if.then28

if.then28:                                        ; preds = %if.end
  %47 = bitcast i32* %46 to i8*
  %48 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %conv31 = zext i32 %mul3 to i64
  %call32 = tail call i8* @memcpy(i8* nonnull %48, i8* nonnull %47, i64 %conv31) #14
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.end
  %value = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %49 = load i8*, i8** %value, align 8, !tbaa !154
  %tobool34.not = icmp eq i8* %49, null
  br i1 %tobool34.not, label %if.end40, label %if.then35

if.then35:                                        ; preds = %if.end33
  %50 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %44, align 4, !tbaa !155
  %idx.ext.i = sext i32 %52 to i64
  %add.ptr.i424 = getelementptr inbounds i32, i32* %51, i64 %idx.ext.i
  %53 = bitcast i32* %add.ptr.i424 to i8*
  %conv38 = zext i32 %mul to i64
  %call39 = tail call i8* @memcpy(i8* nonnull %53, i8* nonnull %49, i64 %conv38) #14
  br label %if.end40

if.end40:                                         ; preds = %if.end33, %if.then35
  %54 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %44, align 4, !tbaa !155
  %idx.ext.i.i425 = sext i32 %56 to i64
  %add.ptr.i.i426 = getelementptr inbounds i32, i32* %55, i64 %idx.ext.i.i425
  %57 = bitcast i32* %add.ptr.i.i426 to i8*
  %lanes.i = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 10
  %58 = bitcast i8* %lanes.i to i16*
  %59 = load i16, i16* %58, align 2, !tbaa !156
  %conv.i427 = zext i16 %59 to i32
  %60 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 9
  %61 = load i8, i8* %60, align 1, !tbaa !140
  %conv.i.i428 = zext i8 %61 to i32
  %add.i.i429 = add nuw nsw i32 %conv.i.i428, 7
  %div.i.i = lshr i32 %add.i.i429, 3
  %mul.i = mul nuw nsw i32 %div.i.i, %conv.i427
  %idx.ext.i430 = zext i32 %mul.i to i64
  %add.ptr.i431 = getelementptr inbounds i8, i8* %57, i64 %idx.ext.i430
  %62 = load i8*, i8** %func, align 8, !tbaa !142
  %conv43 = zext i32 %conv5 to i64
  %call44 = tail call i8* @memcpy(i8* nonnull %add.ptr.i431, i8* %62, i64 %conv43) #14
  %63 = load i32, i32* %44, align 4, !tbaa !155
  %idx.ext.i.i.i = sext i32 %63 to i64
  %add.ptr.i.i.i = getelementptr inbounds i32, i32* %55, i64 %idx.ext.i.i.i
  %64 = bitcast i32* %add.ptr.i.i.i to i8*
  %65 = load i16, i16* %58, align 2, !tbaa !156
  %conv.i.i432 = zext i16 %65 to i32
  %66 = load i8, i8* %60, align 1, !tbaa !140
  %conv.i.i.i = zext i8 %66 to i32
  %add.i.i.i433 = add nuw nsw i32 %conv.i.i.i, 7
  %div.i.i.i = lshr i32 %add.i.i.i433, 3
  %mul.i.i = mul nuw nsw i32 %div.i.i.i, %conv.i.i432
  %idx.ext.i.i434 = zext i32 %mul.i.i to i64
  %add.ptr.i.i435 = getelementptr inbounds i8, i8* %64, i64 %idx.ext.i.i434
  br label %while.cond.i437

while.cond.i437:                                  ; preds = %while.cond.i437, %if.end40
  %f.0.i = phi i8* [ %add.ptr.i.i435, %if.end40 ], [ %incdec.ptr.i, %while.cond.i437 ]
  %incdec.ptr.i = getelementptr inbounds i8, i8* %f.0.i, i64 1
  %67 = load i8, i8* %f.0.i, align 1, !tbaa !14
  %tobool.not.i436 = icmp eq i8 %67, 0
  br i1 %tobool.not.i436, label %_ZN21halide_trace_packet_t9trace_tagEv.exit, label %while.cond.i437, !llvm.loop !157

_ZN21halide_trace_packet_t9trace_tagEv.exit:      ; preds = %while.cond.i437
  %68 = load i8*, i8** %trace_tag, align 8, !tbaa !143
  %tobool47.not = icmp eq i8* %68, null
  %spec.select = select i1 %tobool47.not, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.10, i64 0, i64 0), i8* %68
  %conv53 = zext i32 %cond to i64
  %call54 = tail call i8* @memcpy(i8* nonnull %incdec.ptr.i, i8* %spec.select, i64 %conv53) #14
  %69 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  fence seq_cst
  %lock.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %69, i64 0, i32 0, i32 0
  %70 = atomicrmw sub i32* %lock.i.i, i32 1 seq_cst
  %71 = load i32, i32* %event, align 4, !tbaa !158
  %cmp56 = icmp eq i32 %71, 9
  br i1 %cmp56, label %if.then57, label %if.end277

if.then57:                                        ; preds = %_ZN21halide_trace_packet_t9trace_tagEv.exit
  %72 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i438 = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 0, i32 0
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %if.then57
  %73 = atomicrmw or i32* %lock.i.i438, i32 1073741824 seq_cst
  %74 = cmpxchg i32* %lock.i.i438, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %75 = extractvalue { i32, i1 } %74, 1
  br i1 %75, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i, label %while.body.i.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i: ; preds = %while.body.i.i
  %cursor.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 1
  %76 = load i32, i32* %cursor.i, align 4, !tbaa !146
  %tobool.not.i439 = icmp eq i32 %76, 0
  br i1 %tobool.not.i439, label %do.end.critedge.i, label %if.then.i442

if.then.i442:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %overage.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 2
  %77 = load i32, i32* %overage.i, align 4, !tbaa !148
  %sub.i = sub i32 %76, %77
  store i32 %sub.i, i32* %cursor.i, align 4, !tbaa !146
  %arraydecay.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 3, i64 0
  %conv.i440 = zext i32 %sub.i to i64
  %call.i441 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i, i64 %conv.i440) #14
  %conv5.i = trunc i64 %call.i441 to i32
  %cmp.i = icmp eq i32 %sub.i, %conv5.i
  %78 = bitcast i32* %cursor.i to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %78, align 4, !tbaa !37
  %79 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br i1 %cmp.i, label %if.end277, label %if.then10.i

if.then10.i:                                      ; preds = %if.then.i442
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %if.end277

do.end.critedge.i:                                ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %80 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br label %if.end277

if.else:                                          ; preds = %entry
  %call.i445 = tail call i8* @malloc(i64 4096) #14
  %tobool.not.i448 = icmp eq i8* %call.i445, null
  br i1 %tobool.not.i448, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit, label %if.then6.i451

if.then6.i451:                                    ; preds = %if.else
  %add.ptr.i449 = getelementptr inbounds i8, i8* %call.i445, i64 4095
  store i8 0, i8* %add.ptr.i449, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit: ; preds = %if.then6.i451, %if.else
  %ss.sroa.74.0 = phi i8* [ %add.ptr.i449, %if.then6.i451 ], [ null, %if.else ]
  %bits = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %81 = load i8, i8* %bits, align 1, !tbaa !159
  %conv60 = zext i8 %81 to i32
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit
  %print_bits.0 = phi i32 [ 8, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit ], [ %shl, %while.cond ]
  %cmp61 = icmp slt i32 %print_bits.0, %conv60
  %shl = shl i32 %print_bits.0, 1
  br i1 %cmp61, label %while.cond, label %do.body, !llvm.loop !160

do.body:                                          ; preds = %while.cond
  %cmp62 = icmp slt i32 %print_bits.0, 65
  br i1 %cmp62, label %do.end, label %if.then63

if.then63:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2.11, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then63, %do.body
  %event65 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %82 = load i32, i32* %event65, align 4, !tbaa !158
  %cmp66 = icmp slt i32 %82, 2
  %idxprom = zext i32 %82 to i64
  %arrayidx = getelementptr inbounds [11 x i8*], [11 x i8*]* @__const.halide_default_trace.event_types, i64 0, i64 %idxprom
  %83 = load i8*, i8** %arrayidx, align 8, !tbaa !10
  %call.i456 = tail call i8* @halide_string_to_string(i8* %call.i445, i8* %ss.sroa.74.0, i8* %83) #14
  %call.i459 = tail call i8* @halide_string_to_string(i8* %call.i456, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %func70 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %84 = load i8*, i8** %func70, align 8, !tbaa !142
  %call.i462 = tail call i8* @halide_string_to_string(i8* %call.i459, i8* %ss.sroa.74.0, i8* %84) #14
  %call.i465 = tail call i8* @halide_string_to_string(i8* %call.i462, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  %value_index73 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 7
  %85 = load i32, i32* %value_index73, align 4, !tbaa !161
  %conv.i468 = sext i32 %85 to i64
  %call.i469 = tail call i8* @halide_int64_to_string(i8* %call.i465, i8* %ss.sroa.74.0, i64 %conv.i468, i32 1) #14
  %call.i472 = tail call i8* @halide_string_to_string(i8* %call.i469, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #14
  %lanes77 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %86 = load i16, i16* %lanes77, align 2, !tbaa !134
  %cmp79 = icmp ugt i16 %86, 1
  br i1 %cmp79, label %if.then80, label %if.end82

if.then80:                                        ; preds = %do.end
  %call.i475 = tail call i8* @halide_string_to_string(i8* %call.i472, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)) #14
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %do.end
  %ss.sroa.7.0 = phi i8* [ %call.i475, %if.then80 ], [ %call.i472, %do.end ]
  %dimensions83 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %87 = load i32, i32* %dimensions83, align 8, !tbaa !141
  %cmp84660 = icmp sgt i32 %87, 0
  br i1 %cmp84660, label %if.end100.peel, label %for.cond.cleanup

if.end100.peel:                                   ; preds = %if.end82
  %coordinates101 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %.pre = load i32*, i32** %coordinates101, align 8, !tbaa !153
  %.pre673 = load i32, i32* %.pre, align 4, !tbaa !37
  %conv.i484.peel = sext i32 %.pre673 to i64
  %call.i485.peel = tail call i8* @halide_int64_to_string(i8* %ss.sroa.7.0, i8* %ss.sroa.74.0, i64 %conv.i484.peel, i32 1) #14
  %88 = load i32, i32* %dimensions83, align 8, !tbaa !141
  %cmp84.peel = icmp sgt i32 %88, 1
  br i1 %cmp84.peel, label %if.then86, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %if.end100, %if.end100.peel, %if.end82
  %ss.sroa.7.1.lcssa = phi i8* [ %ss.sroa.7.0, %if.end82 ], [ %call.i485.peel, %if.end100.peel ], [ %call.i485, %if.end100 ]
  %89 = load i16, i16* %lanes77, align 2, !tbaa !134
  %cmp108 = icmp ugt i16 %89, 1
  %.sink684 = select i1 %cmp108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)
  %call.i491 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1.lcssa, i8* %ss.sroa.74.0, i8* %.sink684) #14
  br i1 %cmp66, label %if.then115, label %if.end263

if.then86:                                        ; preds = %if.end100.peel, %if.end100
  %indvars.iv670 = phi i64 [ %indvars.iv.next671, %if.end100 ], [ 1, %if.end100.peel ]
  %ss.sroa.7.1661 = phi i8* [ %call.i485, %if.end100 ], [ %call.i485.peel, %if.end100.peel ]
  %90 = load i16, i16* %lanes77, align 2, !tbaa !134
  %cmp90 = icmp ugt i16 %90, 1
  br i1 %cmp90, label %land.lhs.true, label %if.else97.split

land.lhs.true:                                    ; preds = %if.then86
  %conv89 = zext i16 %90 to i32
  %91 = trunc i64 %indvars.iv670 to i32
  %rem = urem i32 %91, %conv89
  %cmp94 = icmp eq i32 %rem, 0
  br i1 %cmp94, label %if.end100, label %if.else97.split

if.else97.split:                                  ; preds = %if.then86, %land.lhs.true
  br label %if.end100

if.end100:                                        ; preds = %land.lhs.true, %if.else97.split
  %.sink = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0), %if.else97.split ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), %land.lhs.true ]
  %call.i4786 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1661, i8* %ss.sroa.74.0, i8* %.sink) #14
  %92 = load i32*, i32** %coordinates101, align 8, !tbaa !153
  %arrayidx103 = getelementptr inbounds i32, i32* %92, i64 %indvars.iv670
  %93 = load i32, i32* %arrayidx103, align 4, !tbaa !37
  %conv.i484 = sext i32 %93 to i64
  %call.i485 = tail call i8* @halide_int64_to_string(i8* %call.i4786, i8* %ss.sroa.74.0, i64 %conv.i484, i32 1) #14
  %indvars.iv.next671 = add nuw nsw i64 %indvars.iv670, 1
  %94 = load i32, i32* %dimensions83, align 8, !tbaa !141
  %95 = sext i32 %94 to i64
  %cmp84 = icmp slt i64 %indvars.iv.next671, %95
  br i1 %cmp84, label %if.then86, label %for.cond.cleanup, !llvm.loop !162

if.then115:                                       ; preds = %for.cond.cleanup
  %96 = load i16, i16* %lanes77, align 2, !tbaa !134
  %cmp119 = icmp ugt i16 %96, 1
  %.sink685 = select i1 %cmp119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0)
  %call.i497 = tail call i8* @halide_string_to_string(i8* %call.i491, i8* %ss.sroa.74.0, i8* %.sink685) #14
  %97 = load i16, i16* %lanes77, align 2, !tbaa !134
  %cmp130655.not = icmp eq i16 %97, 0
  br i1 %cmp130655.not, label %if.end263, label %if.end136.peel

if.end136.peel:                                   ; preds = %if.then115
  %code = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 0
  %value245 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %98 = bitcast i8** %value245 to i8***
  %cmp214 = icmp sgt i32 %print_bits.0, 15
  %99 = bitcast i8** %value245 to i16**
  %100 = bitcast i8** %value245 to float**
  %101 = bitcast i8** %value245 to double**
  %102 = bitcast i8** %value245 to i32**
  %103 = bitcast i8** %value245 to i64**
  %.pre674 = load i8, i8* %code, align 8, !tbaa !164
  switch i8 %.pre674, label %for.inc253.peel [
    i8 0, label %if.then140.peel
    i8 1, label %if.then176.peel
    i8 2, label %do.body213.peel
    i8 3, label %if.then244.peel
  ]

if.then244.peel:                                  ; preds = %if.end136.peel
  %104 = load i8**, i8*** %98, align 8, !tbaa !154
  %105 = load i8*, i8** %104, align 8, !tbaa !10
  %call.i543.peel = tail call i8* @halide_pointer_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i8* %105) #14
  br label %for.inc253.peel

do.body213.peel:                                  ; preds = %if.end136.peel
  br i1 %cmp214, label %do.end218.peel, label %if.then215.peel

if.then215.peel:                                  ; preds = %do.body213.peel
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end218.peel

do.end218.peel:                                   ; preds = %if.then215.peel, %do.body213.peel
  switch i32 %print_bits.0, label %if.else232.peel [
    i32 32, label %if.then220.peel
    i32 16, label %if.then227.peel
  ]

if.then227.peel:                                  ; preds = %do.end218.peel
  %106 = load i16*, i16** %99, align 8, !tbaa !154
  %107 = load i16, i16* %106, align 2, !tbaa !165
  %call.i535.peel = tail call double @halide_float16_bits_to_double(i16 zeroext %107) #14
  %call2.i.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %call.i535.peel, i32 1) #14
  br label %for.inc253.peel

if.then220.peel:                                  ; preds = %do.end218.peel
  %108 = load float*, float** %100, align 8, !tbaa !154
  %109 = load float, float* %108, align 4, !tbaa !166
  %conv.i533.peel = fpext float %109 to double
  %call.i534.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %conv.i533.peel, i32 0) #14
  br label %for.inc253.peel

if.else232.peel:                                  ; preds = %do.end218.peel
  %110 = load double*, double** %101, align 8, !tbaa !154
  %111 = load double, double* %110, align 8, !tbaa !168
  %call.i540.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %111, i32 1) #14
  br label %for.inc253.peel

if.then176.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else199.peel [
    i32 8, label %if.then178.peel
    i32 16, label %if.then186.peel
    i32 32, label %if.then194.peel
  ]

if.then194.peel:                                  ; preds = %if.then176.peel
  %112 = load i32*, i32** %102, align 8, !tbaa !154
  %113 = load i32, i32* %112, align 4, !tbaa !37
  %conv.i526.peel = zext i32 %113 to i64
  %call.i527.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i526.peel, i32 1) #14
  br label %for.inc253.peel

if.then186.peel:                                  ; preds = %if.then176.peel
  %114 = load i16*, i16** %99, align 8, !tbaa !154
  %115 = load i16, i16* %114, align 2, !tbaa !165
  %conv.i522.peel = zext i16 %115 to i64
  %call.i523.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i522.peel, i32 1) #14
  br label %for.inc253.peel

if.then178.peel:                                  ; preds = %if.then176.peel
  %116 = load i8*, i8** %value245, align 8, !tbaa !154
  %117 = load i8, i8* %116, align 1, !tbaa !14
  %conv.i518.peel = zext i8 %117 to i64
  %call.i519.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i518.peel, i32 1) #14
  br label %for.inc253.peel

if.else199.peel:                                  ; preds = %if.then176.peel
  %118 = load i64*, i64** %103, align 8, !tbaa !154
  %119 = load i64, i64* %118, align 8, !tbaa !18
  %call.i530.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %119, i32 1) #14
  br label %for.inc253.peel

if.then140.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else163.peel [
    i32 8, label %if.then142.peel
    i32 16, label %if.then150.peel
    i32 32, label %if.then158.peel
  ]

if.then158.peel:                                  ; preds = %if.then140.peel
  %120 = load i32*, i32** %102, align 8, !tbaa !154
  %121 = load i32, i32* %120, align 4, !tbaa !37
  %conv.i511.peel = sext i32 %121 to i64
  %call.i512.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i511.peel, i32 1) #14
  br label %for.inc253.peel

if.then150.peel:                                  ; preds = %if.then140.peel
  %122 = load i16*, i16** %99, align 8, !tbaa !154
  %123 = load i16, i16* %122, align 2, !tbaa !165
  %conv.i507.peel = sext i16 %123 to i64
  %call.i508.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i507.peel, i32 1) #14
  br label %for.inc253.peel

if.then142.peel:                                  ; preds = %if.then140.peel
  %124 = load i8*, i8** %value245, align 8, !tbaa !154
  %125 = load i8, i8* %124, align 1, !tbaa !14
  %conv.i503.peel = sext i8 %125 to i64
  %call.i504.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i503.peel, i32 1) #14
  br label %for.inc253.peel

if.else163.peel:                                  ; preds = %if.then140.peel
  %126 = load i64*, i64** %103, align 8, !tbaa !154
  %127 = load i64, i64* %126, align 8, !tbaa !18
  %call.i515.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %127, i32 1) #14
  br label %for.inc253.peel

for.inc253.peel:                                  ; preds = %if.else163.peel, %if.then142.peel, %if.then150.peel, %if.then158.peel, %if.else199.peel, %if.then178.peel, %if.then186.peel, %if.then194.peel, %if.else232.peel, %if.then220.peel, %if.then227.peel, %if.then244.peel, %if.end136.peel
  %ss.sroa.7.7.peel = phi i8* [ %call.i497, %if.end136.peel ], [ %call.i543.peel, %if.then244.peel ], [ %call.i540.peel, %if.else232.peel ], [ %call2.i.peel, %if.then227.peel ], [ %call.i534.peel, %if.then220.peel ], [ %call.i530.peel, %if.else199.peel ], [ %call.i527.peel, %if.then194.peel ], [ %call.i523.peel, %if.then186.peel ], [ %call.i519.peel, %if.then178.peel ], [ %call.i515.peel, %if.else163.peel ], [ %call.i512.peel, %if.then158.peel ], [ %call.i508.peel, %if.then150.peel ], [ %call.i504.peel, %if.then142.peel ]
  %128 = load i16, i16* %lanes77, align 2, !tbaa !134
  %cmp130.peel = icmp ugt i16 %128, 1
  br i1 %cmp130.peel, label %if.end136, label %if.end263

for.cond.cleanup131:                              ; preds = %for.inc253
  %cmp259 = icmp ugt i16 %154, 1
  br i1 %cmp259, label %if.then260, label %if.end263

if.end136:                                        ; preds = %for.inc253.peel, %for.inc253
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc253 ], [ 1, %for.inc253.peel ]
  %ss.sroa.7.5656 = phi i8* [ %ss.sroa.7.7, %for.inc253 ], [ %ss.sroa.7.7.peel, %for.inc253.peel ]
  %call.i500 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.5656, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %129 = load i8, i8* %code, align 8, !tbaa !164
  switch i8 %129, label %for.inc253 [
    i8 0, label %if.then140
    i8 1, label %if.then176
    i8 2, label %do.body213
    i8 3, label %if.then244
  ]

if.then140:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else163 [
    i32 8, label %if.then142
    i32 16, label %if.then150
    i32 32, label %if.then158
  ]

if.then142:                                       ; preds = %if.then140
  %130 = load i8*, i8** %value245, align 8, !tbaa !154
  %arrayidx145 = getelementptr inbounds i8, i8* %130, i64 %indvars.iv
  %131 = load i8, i8* %arrayidx145, align 1, !tbaa !14
  %conv.i503 = sext i8 %131 to i64
  %call.i504 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i503, i32 1) #14
  br label %for.inc253

if.then150:                                       ; preds = %if.then140
  %132 = load i16*, i16** %99, align 8, !tbaa !154
  %arrayidx153 = getelementptr inbounds i16, i16* %132, i64 %indvars.iv
  %133 = load i16, i16* %arrayidx153, align 2, !tbaa !165
  %conv.i507 = sext i16 %133 to i64
  %call.i508 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i507, i32 1) #14
  br label %for.inc253

if.then158:                                       ; preds = %if.then140
  %134 = load i32*, i32** %102, align 8, !tbaa !154
  %arrayidx161 = getelementptr inbounds i32, i32* %134, i64 %indvars.iv
  %135 = load i32, i32* %arrayidx161, align 4, !tbaa !37
  %conv.i511 = sext i32 %135 to i64
  %call.i512 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i511, i32 1) #14
  br label %for.inc253

if.else163:                                       ; preds = %if.then140
  %136 = load i64*, i64** %103, align 8, !tbaa !154
  %arrayidx166 = getelementptr inbounds i64, i64* %136, i64 %indvars.iv
  %137 = load i64, i64* %arrayidx166, align 8, !tbaa !18
  %call.i515 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %137, i32 1) #14
  br label %for.inc253

if.then176:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else199 [
    i32 8, label %if.then178
    i32 16, label %if.then186
    i32 32, label %if.then194
  ]

if.then178:                                       ; preds = %if.then176
  %138 = load i8*, i8** %value245, align 8, !tbaa !154
  %arrayidx181 = getelementptr inbounds i8, i8* %138, i64 %indvars.iv
  %139 = load i8, i8* %arrayidx181, align 1, !tbaa !14
  %conv.i518 = zext i8 %139 to i64
  %call.i519 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i518, i32 1) #14
  br label %for.inc253

if.then186:                                       ; preds = %if.then176
  %140 = load i16*, i16** %99, align 8, !tbaa !154
  %arrayidx189 = getelementptr inbounds i16, i16* %140, i64 %indvars.iv
  %141 = load i16, i16* %arrayidx189, align 2, !tbaa !165
  %conv.i522 = zext i16 %141 to i64
  %call.i523 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i522, i32 1) #14
  br label %for.inc253

if.then194:                                       ; preds = %if.then176
  %142 = load i32*, i32** %102, align 8, !tbaa !154
  %arrayidx197 = getelementptr inbounds i32, i32* %142, i64 %indvars.iv
  %143 = load i32, i32* %arrayidx197, align 4, !tbaa !37
  %conv.i526 = zext i32 %143 to i64
  %call.i527 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i526, i32 1) #14
  br label %for.inc253

if.else199:                                       ; preds = %if.then176
  %144 = load i64*, i64** %103, align 8, !tbaa !154
  %arrayidx202 = getelementptr inbounds i64, i64* %144, i64 %indvars.iv
  %145 = load i64, i64* %arrayidx202, align 8, !tbaa !18
  %call.i530 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %145, i32 1) #14
  br label %for.inc253

do.body213:                                       ; preds = %if.end136
  br i1 %cmp214, label %do.end218, label %if.then215

if.then215:                                       ; preds = %do.body213
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end218

do.end218:                                        ; preds = %if.then215, %do.body213
  switch i32 %print_bits.0, label %if.else232 [
    i32 32, label %if.then220
    i32 16, label %if.then227
  ]

if.then220:                                       ; preds = %do.end218
  %146 = load float*, float** %100, align 8, !tbaa !154
  %arrayidx223 = getelementptr inbounds float, float* %146, i64 %indvars.iv
  %147 = load float, float* %arrayidx223, align 4, !tbaa !166
  %conv.i533 = fpext float %147 to double
  %call.i534 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %conv.i533, i32 0) #14
  br label %for.inc253

if.then227:                                       ; preds = %do.end218
  %148 = load i16*, i16** %99, align 8, !tbaa !154
  %arrayidx230 = getelementptr inbounds i16, i16* %148, i64 %indvars.iv
  %149 = load i16, i16* %arrayidx230, align 2, !tbaa !165
  %call.i535 = tail call double @halide_float16_bits_to_double(i16 zeroext %149) #14
  %call2.i = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %call.i535, i32 1) #14
  br label %for.inc253

if.else232:                                       ; preds = %do.end218
  %150 = load double*, double** %101, align 8, !tbaa !154
  %arrayidx235 = getelementptr inbounds double, double* %150, i64 %indvars.iv
  %151 = load double, double* %arrayidx235, align 8, !tbaa !168
  %call.i540 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %151, i32 1) #14
  br label %for.inc253

if.then244:                                       ; preds = %if.end136
  %152 = load i8**, i8*** %98, align 8, !tbaa !154
  %arrayidx247 = getelementptr inbounds i8*, i8** %152, i64 %indvars.iv
  %153 = load i8*, i8** %arrayidx247, align 8, !tbaa !10
  %call.i543 = tail call i8* @halide_pointer_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i8* %153) #14
  br label %for.inc253

for.inc253:                                       ; preds = %if.then244, %if.else232, %if.then227, %if.then220, %if.else199, %if.then194, %if.then186, %if.then178, %if.else163, %if.then158, %if.then150, %if.then142, %if.end136
  %ss.sroa.7.7 = phi i8* [ %call.i500, %if.end136 ], [ %call.i543, %if.then244 ], [ %call.i540, %if.else232 ], [ %call2.i, %if.then227 ], [ %call.i534, %if.then220 ], [ %call.i530, %if.else199 ], [ %call.i527, %if.then194 ], [ %call.i523, %if.then186 ], [ %call.i519, %if.then178 ], [ %call.i515, %if.else163 ], [ %call.i512, %if.then158 ], [ %call.i508, %if.then150 ], [ %call.i504, %if.then142 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %154 = load i16, i16* %lanes77, align 2, !tbaa !134
  %155 = zext i16 %154 to i64
  %cmp130 = icmp ult i64 %indvars.iv.next, %155
  br i1 %cmp130, label %if.end136, label %for.cond.cleanup131, !llvm.loop !170

if.then260:                                       ; preds = %for.cond.cleanup131
  %call.i546 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.7, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0)) #14
  br label %if.end263

if.end263:                                        ; preds = %if.then260, %for.cond.cleanup131, %for.inc253.peel, %if.then115, %for.cond.cleanup
  %ss.sroa.7.8 = phi i8* [ %call.i546, %if.then260 ], [ %ss.sroa.7.7, %for.cond.cleanup131 ], [ %call.i491, %for.cond.cleanup ], [ %ss.sroa.7.7.peel, %for.inc253.peel ], [ %call.i497, %if.then115 ]
  %trace_tag264 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %156 = load i8*, i8** %trace_tag264, align 8, !tbaa !143
  %tobool265.not = icmp eq i8* %156, null
  br i1 %tobool265.not, label %if.end274, label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end263
  %157 = load i8, i8* %156, align 1, !tbaa !14
  %tobool268.not = icmp eq i8 %157, 0
  br i1 %tobool268.not, label %if.end274, label %if.then269

if.then269:                                       ; preds = %land.lhs.true266
  %call.i549 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.8, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0)) #14
  %158 = load i8*, i8** %trace_tag264, align 8, !tbaa !143
  %call.i552 = tail call i8* @halide_string_to_string(i8* %call.i549, i8* %ss.sroa.74.0, i8* %158) #14
  %call.i555 = tail call i8* @halide_string_to_string(i8* %call.i552, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0)) #14
  br label %if.end274

if.end274:                                        ; preds = %if.then269, %land.lhs.true266, %if.end263
  %ss.sroa.7.9 = phi i8* [ %ss.sroa.7.8, %if.end263 ], [ %ss.sroa.7.8, %land.lhs.true266 ], [ %call.i555, %if.then269 ]
  %call.i558 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.9, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  br label %while.cond.i560

while.cond.i560:                                  ; preds = %while.cond.i560, %if.end274
  %159 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i559 = icmp eq i8 %159, 0
  br i1 %tobool.not.i559, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i560, !llvm.loop !171

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i560
  br i1 %tobool.not.i448, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %sub.ptr.lhs.cast.i.i563 = ptrtoint i8* %call.i558 to i64
  %sub.ptr.rhs.cast.i.i564 = ptrtoint i8* %call.i445 to i64
  %sub.ptr.sub.i.i565 = sub i64 1, %sub.ptr.rhs.cast.i.i564
  %add.i.i566 = add i64 %sub.ptr.sub.i.i565, %sub.ptr.lhs.cast.i.i563
  %call.i.i567 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #14
  tail call void @halide_print(i8* %user_context, i8* nonnull %call.i445) #14
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i445) #14
  br label %if.end277

if.end277:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit, %do.end.critedge.i, %if.then10.i, %if.then.i442, %_ZN21halide_trace_packet_t9trace_tagEv.exit
  ret i32 %0
}

; Function Attrs: nounwind
define weak i32 @halide_get_trace_file(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !171

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !37
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i64 0, i64 0)) #14
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.then
  %call2 = tail call i8* @fopen(i8* nonnull %call, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i64 0, i64 0)) #14
  %tobool3.not = icmp eq i8* %call2, null
  br i1 %tobool3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.then1
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.30, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.then1
  %call5 = tail call i32 @fileno(i8* %call2) #14
  tail call void @halide_set_trace_file(i32 %call5) #15
  store i8* %call2, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %2 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool6.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %2, null
  br i1 %tobool6.not, label %if.then7, label %if.end11

if.then7:                                         ; preds = %do.end
  %call8 = tail call i8* @malloc(i64 1048588) #14
  store i8* %call8, i8** bitcast (%"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE to i8**), align 8, !tbaa !10
  %cursor.i = getelementptr inbounds i8, i8* %call8, i64 4
  %3 = bitcast i8* %cursor.i to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %3, align 4, !tbaa !37
  %lock.i.i = bitcast i8* %call8 to i32*
  store volatile i32 0, i32* %lock.i.i, align 4, !tbaa !144
  br label %if.end11

if.else:                                          ; preds = %if.then
  tail call void @halide_set_trace_file(i32 0) #15
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then7, %do.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %4 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !37
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  ret i32 %4
}

declare i8* @memcpy(i8*, i8*, i64) local_unnamed_addr #1

declare i8* @fopen(i8*, i8*) local_unnamed_addr #1

declare i32 @fileno(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_trace_file(i32 %fd) local_unnamed_addr #2 {
entry:
  store i32 %fd, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !37
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_trace_cleanup() #0 {
entry:
  %call = tail call i32 @halide_shutdown_trace() #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_shutdown_trace() local_unnamed_addr #0 {
entry:
  %0 = load i8*, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %tobool.not = icmp eq i8* %0, null
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @fclose(i8* nonnull %0) #14
  store i32 0, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !37
  store i8 0, i8* @_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE, align 1, !tbaa !15
  store i8* null, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %1 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool1.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %1, null
  br i1 %tobool1.not, label %return, label %if.then2

if.then2:                                         ; preds = %if.then
  %2 = bitcast %"class.Halide::Runtime::Internal::TraceBuffer"* %1 to i8*
  tail call void @free(i8* nonnull %2) #14
  br label %return

return:                                           ; preds = %if.then2, %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then2 ], [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @fclose(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, %struct.halide_trace_event_t*)* @halide_set_custom_trace(i32 (i8*, %struct.halide_trace_event_t*)* %t) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  store i32 (i8*, %struct.halide_trace_event_t*)* %t, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  ret i32 (i8*, %struct.halide_trace_event_t*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* %e) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, %struct.halide_trace_event_t* %e) #14
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_trace_helper(i8* %user_context, i8* %func, i8* %value, i32* %coords, i32 %type_code, i32 %type_bits, i32 %type_lanes, i32 %code, i32 %parent_id, i32 %value_index, i32 %dimensions, i8* %trace_tag) local_unnamed_addr #4 {
entry:
  %event = alloca %struct.halide_trace_event_t, align 8
  %0 = bitcast %struct.halide_trace_event_t* %event to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %0) #11
  %code.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 0
  %bits.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 1
  %lanes.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 2
  %func1 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 0
  store i8* %func, i8** %func1, align 8, !tbaa !142
  %value2 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 1
  store i8* %value, i8** %value2, align 8, !tbaa !154
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 2
  store i32* %coords, i32** %coordinates, align 8, !tbaa !153
  %trace_tag3 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 3
  store i8* %trace_tag, i8** %trace_tag3, align 8, !tbaa !143
  %conv = trunc i32 %type_code to i8
  store i8 %conv, i8* %code.i.i, align 8, !tbaa !164
  %conv5 = trunc i32 %type_bits to i8
  store i8 %conv5, i8* %bits.i.i, align 1, !tbaa !159
  %conv7 = trunc i32 %type_lanes to i16
  store i16 %conv7, i16* %lanes.i.i, align 2, !tbaa !134
  %event9 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 5
  store i32 %code, i32* %event9, align 4, !tbaa !158
  %parent_id10 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 6
  store i32 %parent_id, i32* %parent_id10, align 8, !tbaa !172
  %value_index11 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 7
  store i32 %value_index, i32* %value_index11, align 4, !tbaa !161
  %dimensions12 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 8
  store i32 %dimensions, i32* %dimensions12, align 8, !tbaa !141
  %call = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 56) #14
  %add = add nsw i32 %type_bits, 7
  %div = sdiv i32 %add, 8
  %mul = mul nsw i32 %div, %type_lanes
  %conv13 = sext i32 %mul to i64
  %call14 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %value, i64 %conv13) #14
  %1 = bitcast i32* %coords to i8*
  %conv15 = sext i32 %dimensions to i64
  %mul16 = shl nsw i64 %conv15, 2
  %call17 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %1, i64 %mul16) #14
  %call18 = call i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* nonnull %event) #14
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %0) #11
  ret i32 %call18
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* %suffix) local_unnamed_addr #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %f.0 = phi i8* [ %filename, %entry ], [ %incdec.ptr, %while.cond ]
  %0 = load i8, i8* %f.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %0, 0
  %incdec.ptr = getelementptr inbounds i8, i8* %f.0, i64 1
  br i1 %tobool.not, label %while.cond1, label %while.cond, !llvm.loop !173

while.cond1:                                      ; preds = %while.cond, %while.cond1
  %s.0 = phi i8* [ %incdec.ptr4, %while.cond1 ], [ %suffix, %while.cond ]
  %1 = load i8, i8* %s.0, align 1, !tbaa !14
  %tobool2.not = icmp eq i8 %1, 0
  %incdec.ptr4 = getelementptr inbounds i8, i8* %s.0, i64 1
  br i1 %tobool2.not, label %while.cond6.preheader, label %while.cond1, !llvm.loop !174

while.cond6.preheader:                            ; preds = %while.cond1
  %cmp34 = icmp ne i8* %s.0, %suffix
  %cmp735 = icmp ne i8* %f.0, %filename
  %2 = and i1 %cmp735, %cmp34
  br i1 %2, label %if.end, label %while.cond6.preheader.while.end13_crit_edge

while.cond6.preheader.while.end13_crit_edge:      ; preds = %while.cond6.preheader
  %cmp16.0 = icmp eq i8 0, 0
  br label %while.end13

if.end:                                           ; preds = %while.cond6.preheader, %if.end.while.body8_crit_edge
  %f.13649 = phi i8* [ %incdec.ptr11, %if.end.while.body8_crit_edge ], [ %f.0, %while.cond6.preheader ]
  %s.13748 = phi i8* [ %incdec.ptr12, %if.end.while.body8_crit_edge ], [ %s.0, %while.cond6.preheader ]
  %incdec.ptr11 = getelementptr inbounds i8, i8* %f.13649, i64 -1
  %incdec.ptr12 = getelementptr inbounds i8, i8* %s.13748, i64 -1
  %cmp = icmp ne i8* %incdec.ptr12, %suffix
  %cmp7 = icmp ne i8* %incdec.ptr11, %filename
  %3 = and i1 %cmp7, %cmp
  %.pre = load i8, i8* %incdec.ptr11, align 1, !tbaa !14
  %.pre45 = load i8, i8* %incdec.ptr12, align 1, !tbaa !14
  br i1 %3, label %if.end.while.body8_crit_edge, label %if.end.while.end13_crit_edge, !llvm.loop !175

if.end.while.end13_crit_edge:                     ; preds = %if.end
  %cmp16.1 = icmp eq i8 %.pre, %.pre45
  br label %while.end13

if.end.while.body8_crit_edge:                     ; preds = %if.end
  %cmp10.not = icmp eq i8 %.pre, %.pre45
  br i1 %cmp10.not, label %if.end, label %cleanup

while.end13:                                      ; preds = %if.end.while.end13_crit_edge, %while.cond6.preheader.while.end13_crit_edge
  %cmp16.phi = phi i1 [ %cmp16.0, %while.cond6.preheader.while.end13_crit_edge ], [ %cmp16.1, %if.end.while.end13_crit_edge ]
  br label %cleanup

cleanup:                                          ; preds = %if.end.while.body8_crit_edge, %while.end13
  %retval.0 = phi i1 [ %cmp16.phi, %while.end13 ], [ false, %if.end.while.body8_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_debug_to_file(i8* %user_context, i8* %filename, i32 %type_code, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %shape = alloca [4 x %struct.halide_dimension_t], align 16
  %header = alloca %"struct.Halide::Runtime::Internal::halide_tiff_header", align 2
  %offset = alloca i32, align 4
  %count = alloca i32, align 4
  %array_name = alloca [256 x i8], align 1
  %array_name43 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  %header198 = alloca [129 x i8], align 1
  %tags = alloca [8 x i32], align 4
  %extents = alloca [4 x i32], align 4
  %name_header = alloca [2 x i32], align 4
  %payload_header = alloca [2 x i32], align 4
  %header289 = alloca [5 x i32], align 4
  %temp = alloca [4096 x i8], align 1
  %idx = alloca [4 x i32], align 4
  %zero = alloca i64, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !176
  %cmp.i = icmp eq i8* %0, null
  br i1 %cmp.i, label %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, label %if.end

_ZNK15halide_buffer_t15is_bounds_queryEv.exit:    ; preds = %entry
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp2.i = icmp eq i64 %1, 0
  br i1 %cmp2.i, label %if.then, label %if.end

if.then:                                          ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.34, i64 0, i64 0)) #14
  br label %return

if.end:                                           ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, %entry
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !179
  %cmp = icmp sgt i32 %2, 4
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1.35, i64 0, i64 0)) #14
  br label %return

if.end2:                                          ; preds = %if.end
  %call3 = tail call i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %cmp4.not = icmp eq i32 %call3, 0
  br i1 %cmp4.not, label %if.end6, label %return

if.end6:                                          ; preds = %if.end2
  %call.i598 = tail call i8* @fopen(i8* %filename, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.36, i64 0, i64 0)) #14
  %cmp.i601.not = icmp eq i8* %call.i598, null
  br i1 %cmp.i601.not, label %return, label %if.end9

if.end9:                                          ; preds = %if.end6
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #11
  %min.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 0
  %extent.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %4 = bitcast [4 x %struct.halide_dimension_t]* %shape to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %4, align 16, !tbaa !37
  %min.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 0
  %extent.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %5 = bitcast i32* %min.i.1 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %5, align 16, !tbaa !37
  %min.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 0
  %extent.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %6 = bitcast i32* %min.i.2 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %6, align 16, !tbaa !37
  %min.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 0
  %extent.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %7 = bitcast i32* %min.i.3 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %7, align 16, !tbaa !37
  %8 = load i32, i32* %dimensions, align 4, !tbaa !179
  %cmp11875 = icmp sgt i32 %8, 0
  br i1 %cmp11875, label %for.body.lr.ph, label %for.body22.preheader

for.body.lr.ph:                                   ; preds = %if.end9
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !180
  %10 = zext i32 %8 to i64
  %11 = add nsw i64 %10, -1
  %12 = icmp ult i64 %11, 3
  %13 = select i1 %12, i64 %10, i64 4
  br label %for.body

for.cond19.preheader:                             ; preds = %for.body
  %cmp20873 = icmp slt i32 %8, 4
  br i1 %cmp20873, label %for.body22.preheader, label %for.cond.cleanup21

for.body22.preheader:                             ; preds = %for.cond19.preheader, %if.end9
  %elts.0.lcssa907 = phi i64 [ %mul, %for.cond19.preheader ], [ 1, %if.end9 ]
  %14 = sext i32 %8 to i64
  %15 = sub i32 3, %8
  %16 = zext i32 %15 to i64
  %17 = add nuw nsw i64 %16, 1
  %min.iters.check = icmp eq i32 %15, 0
  br i1 %min.iters.check, label %for.body22.preheader162, label %vector.ph

vector.ph:                                        ; preds = %for.body22.preheader
  %n.vec = and i64 %17, 8589934590
  %ind.end = add nsw i64 %n.vec, %14
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %offset.idx = add i64 %index, %14
  %induction36 = add i64 %offset.idx, 1
  %18 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %offset.idx, i32 0
  %19 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %induction36, i32 0
  %20 = bitcast i32* %18 to <2 x i32>*
  store <2 x i32> <i32 0, i32 1>, <2 x i32>* %20, align 16, !tbaa !37
  %21 = bitcast i32* %19 to <2 x i32>*
  store <2 x i32> <i32 0, i32 1>, <2 x i32>* %21, align 16, !tbaa !37
  %22 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %offset.idx, i32 2
  %23 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %induction36, i32 2
  store i32 0, i32* %22, align 8, !tbaa !181
  store i32 0, i32* %23, align 8, !tbaa !181
  %index.next = add i64 %index, 2
  %24 = icmp eq i64 %index.next, %n.vec
  br i1 %24, label %middle.block, label %vector.body, !llvm.loop !183

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %17, %n.vec
  br i1 %cmp.n, label %for.cond.cleanup21, label %for.body22.preheader162

for.body22.preheader162:                          ; preds = %for.body22.preheader, %middle.block
  %indvars.iv.ph = phi i64 [ %14, %for.body22.preheader ], [ %ind.end, %middle.block ]
  br label %for.body22

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv887 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next888, %for.body ]
  %elts.0877 = phi i64 [ 1, %for.body.lr.ph ], [ %mul, %for.body ]
  %arrayidx = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i64 %indvars.iv887
  %arrayidx14 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv887
  %25 = bitcast %struct.halide_dimension_t* %arrayidx14 to i8*
  %26 = bitcast %struct.halide_dimension_t* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 dereferenceable(16) %25, i8* nonnull align 4 dereferenceable(16) %26, i64 16, i1 false), !tbaa.struct !184
  %extent = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv887, i32 1
  %27 = load i32, i32* %extent, align 4, !tbaa !185
  %conv903 = zext i32 %27 to i64
  %mul = mul i64 %elts.0877, %conv903
  %indvars.iv.next888 = add nuw nsw i64 %indvars.iv887, 1
  %exitcond.not17 = icmp eq i64 %indvars.iv.next888, %13
  br i1 %exitcond.not17, label %for.cond19.preheader, label %for.body, !llvm.loop !186

for.cond.cleanup21:                               ; preds = %for.body22, %middle.block, %for.cond19.preheader
  %elts.0.lcssa906 = phi i64 [ %mul, %for.cond19.preheader ], [ %elts.0.lcssa907, %middle.block ], [ %elts.0.lcssa907, %for.body22 ]
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %28 = load i8, i8* %bits.i, align 1, !tbaa !140
  %conv.i = zext i8 %28 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %call34 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.37, i64 0, i64 0)) #15
  br i1 %call34, label %if.then36, label %lor.lhs.false

for.body22:                                       ; preds = %for.body22.preheader162, %for.body22
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body22 ], [ %indvars.iv.ph, %for.body22.preheader162 ]
  %min = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 0
  %29 = bitcast i32* %min to <2 x i32>*
  store <2 x i32> <i32 0, i32 1>, <2 x i32>* %29, align 16, !tbaa !37
  %stride = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 2
  store i32 0, i32* %stride, align 8, !tbaa !181
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond886.not = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond886.not, label %for.cond.cleanup21, label %for.body22, !llvm.loop !187

lor.lhs.false:                                    ; preds = %for.cond.cleanup21
  %call35 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.38, i64 0, i64 0)) #15
  br i1 %call35, label %if.then36, label %if.else164

if.then36:                                        ; preds = %lor.lhs.false, %for.cond.cleanup21
  %30 = load i32, i32* %extent.i, align 4, !tbaa !185
  %31 = load i32, i32* %extent.i.1, align 4, !tbaa !185
  %32 = load i32, i32* %extent.i.3, align 4, !tbaa !185
  %switch = icmp ult i32 %32, 2
  %33 = load i32, i32* %extent.i.2, align 4, !tbaa !185
  %cmp50 = icmp slt i32 %33, 5
  %or.cond = and i1 %switch, %cmp50
  %depth.0 = select i1 %or.cond, i32 1, i32 %33
  %channels.0 = select i1 %or.cond, i32 %33, i32 %32
  %34 = bitcast %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 210, i8* nonnull %34) #11
  %byte_order_marker = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 0
  store i16 18761, i16* %byte_order_marker, align 2, !tbaa !188
  %version = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 1
  store i16 42, i16* %version, align 2, !tbaa !190
  %ifd0_offset = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 2
  store i32 8, i32* %ifd0_offset, align 2, !tbaa !191
  %entry_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 3
  store i16 15, i16* %entry_count, align 2, !tbaa !192
  %tag_code2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 0
  store i16 256, i16* %tag_code2.i, align 2, !tbaa !193
  %type_code.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 1
  store i16 4, i16* %type_code.i, align 2, !tbaa !195
  %count3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 2
  store i32 1, i32* %count3.i, align 2, !tbaa !196
  %i32.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 3, i32 0
  store i32 %30, i32* %i32.i, align 2, !tbaa !14
  %tag_code2.i632 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 0
  store i16 257, i16* %tag_code2.i632, align 2, !tbaa !193
  %type_code.i633 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 1
  store i16 4, i16* %type_code.i633, align 2, !tbaa !195
  %count3.i634 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 2
  store i32 1, i32* %count3.i634, align 2, !tbaa !196
  %i32.i635 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 3, i32 0
  store i32 %31, i32* %i32.i635, align 2, !tbaa !14
  %35 = trunc i32 %add.i to i16
  %conv68 = and i16 %35, 504
  %tag_code2.i643 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 0
  store i16 258, i16* %tag_code2.i643, align 2, !tbaa !193
  %type_code.i644 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 1
  store i16 3, i16* %type_code.i644, align 2, !tbaa !195
  %count3.i645 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 2
  store i32 1, i32* %count3.i645, align 2, !tbaa !196
  %value4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 3
  %i16.i = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i to i16*
  store i16 %conv68, i16* %i16.i, align 2, !tbaa !14
  %tag_code2.i653 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 0
  store i16 259, i16* %tag_code2.i653, align 2, !tbaa !193
  %type_code.i654 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 1
  store i16 3, i16* %type_code.i654, align 2, !tbaa !195
  %count3.i655 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 2
  store i32 1, i32* %count3.i655, align 2, !tbaa !196
  %value4.i656 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 3
  %i16.i657 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i656 to i16*
  store i16 1, i16* %i16.i657, align 2, !tbaa !14
  %cmp71 = icmp sgt i32 %channels.0, 2
  %conv72 = select i1 %cmp71, i16 2, i16 1
  %tag_code2.i665 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 0
  store i16 262, i16* %tag_code2.i665, align 2, !tbaa !193
  %type_code.i666 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 1
  store i16 3, i16* %type_code.i666, align 2, !tbaa !195
  %count3.i667 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 2
  store i32 1, i32* %count3.i667, align 2, !tbaa !196
  %value4.i668 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 3
  %i16.i669 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i668 to i16*
  store i16 %conv72, i16* %i16.i669, align 2, !tbaa !14
  %tag_code2.i677 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 0
  store i16 273, i16* %tag_code2.i677, align 2, !tbaa !193
  %type_code.i678 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 1
  store i16 4, i16* %type_code.i678, align 2, !tbaa !195
  %count3.i679 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 2
  store i32 %channels.0, i32* %count3.i679, align 2, !tbaa !196
  %i32.i680 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 3, i32 0
  store i32 210, i32* %i32.i680, align 2, !tbaa !14
  %conv75 = trunc i32 %channels.0 to i16
  %tag_code2.i688 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 0
  store i16 277, i16* %tag_code2.i688, align 2, !tbaa !193
  %type_code.i689 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 1
  store i16 3, i16* %type_code.i689, align 2, !tbaa !195
  %count3.i690 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 2
  store i32 1, i32* %count3.i690, align 2, !tbaa !196
  %value4.i691 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 3
  %i16.i692 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i691 to i16*
  store i16 %conv75, i16* %i16.i692, align 2, !tbaa !14
  %tag_code2.i706 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 0
  store i16 278, i16* %tag_code2.i706, align 2, !tbaa !193
  %type_code.i707 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 1
  store i16 4, i16* %type_code.i707, align 2, !tbaa !195
  %count3.i708 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 2
  store i32 1, i32* %count3.i708, align 2, !tbaa !196
  %i32.i709 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 3, i32 0
  store i32 %31, i32* %i32.i709, align 2, !tbaa !14
  %cmp80 = icmp eq i32 %channels.0, 1
  %36 = trunc i64 %elts.0.lcssa906 to i32
  %conv86595 = mul i32 %div.i, %36
  %mul84 = shl i32 %channels.0, 2
  %add = add i32 %mul84, 210
  %add.sink = select i1 %cmp80, i32 %conv86595, i32 %add
  %37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 0
  store i16 279, i16* %37, align 2
  %38 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 1
  store i16 4, i16* %38, align 2
  %39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 2
  store i32 %channels.0, i32* %39, align 2
  %40 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 3, i32 0
  store i32 %add.sink, i32* %40, align 2
  %tag_code2.i732 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 0
  store i16 282, i16* %tag_code2.i732, align 2, !tbaa !193
  %type_code3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 1
  store i16 5, i16* %type_code3.i, align 2, !tbaa !195
  %count4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 2
  %41 = bitcast i32* %count4.i to <2 x i32>*
  store <2 x i32> <i32 1, i32 194>, <2 x i32>* %41, align 2, !tbaa !14
  %tag_code2.i741 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 0
  store i16 283, i16* %tag_code2.i741, align 2, !tbaa !193
  %type_code3.i742 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 1
  store i16 5, i16* %type_code3.i742, align 2, !tbaa !195
  %count4.i743 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 2
  %42 = bitcast i32* %count4.i743 to <2 x i32>*
  store <2 x i32> <i32 1, i32 202>, <2 x i32>* %42, align 2, !tbaa !14
  %tag_code2.i759 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 0
  store i16 284, i16* %tag_code2.i759, align 2, !tbaa !193
  %type_code.i760 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 1
  store i16 3, i16* %type_code.i760, align 2, !tbaa !195
  %count3.i761 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 2
  store i32 1, i32* %count3.i761, align 2, !tbaa !196
  %value4.i762 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 3
  %i16.i763 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i762 to i16*
  store i16 2, i16* %i16.i763, align 2, !tbaa !14
  %tag_code2.i754 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 0
  store i16 296, i16* %tag_code2.i754, align 2, !tbaa !193
  %type_code.i755 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 1
  store i16 3, i16* %type_code.i755, align 2, !tbaa !195
  %count3.i756 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 2
  store i32 1, i32* %count3.i756, align 2, !tbaa !196
  %value4.i757 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 3
  %i16.i758 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i757 to i16*
  store i16 1, i16* %i16.i758, align 2, !tbaa !14
  %idxprom92 = sext i32 %type_code to i64
  %arrayidx93 = getelementptr inbounds [10 x i16], [10 x i16]* @_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE, i64 0, i64 %idxprom92
  %43 = load i16, i16* %arrayidx93, align 2, !tbaa !165
  %tag_code2.i749 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 0
  store i16 339, i16* %tag_code2.i749, align 2, !tbaa !193
  %type_code.i750 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 1
  store i16 3, i16* %type_code.i750, align 2, !tbaa !195
  %count3.i751 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 2
  store i32 1, i32* %count3.i751, align 2, !tbaa !196
  %value4.i752 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 3
  %i16.i753 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i752 to i16*
  store i16 %43, i16* %i16.i753, align 2, !tbaa !14
  %tag_code2.i745 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 0
  store i16 -32539, i16* %tag_code2.i745, align 2, !tbaa !193
  %type_code.i746 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 1
  store i16 4, i16* %type_code.i746, align 2, !tbaa !195
  %count3.i747 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 2
  store i32 1, i32* %count3.i747, align 2, !tbaa !196
  %i32.i748 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 3, i32 0
  store i32 %depth.0, i32* %i32.i748, align 2, !tbaa !14
  %ifd0_end = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 5
  %44 = bitcast i32* %ifd0_end to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 1, i32 1>, <4 x i32>* %44, align 2, !tbaa !37
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 7, i64 1
  store i32 1, i32* %arrayidx100, align 2, !tbaa !37
  %call.i736 = call i64 @fwrite(i8* nonnull %34, i64 210, i64 1, i8* nonnull %call.i598) #14
  %cmp.i737.not = icmp eq i64 %call.i736, 0
  br i1 %cmp.i737.not, label %cleanup154, label %if.end103

if.end103:                                        ; preds = %if.then36
  %cmp104 = icmp sgt i32 %channels.0, 1
  br i1 %cmp104, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph, label %cleanup154.thread

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph: ; preds = %if.end103
  %45 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %45) #11
  %mul108 = shl i32 %channels.0, 3
  %add109 = add i32 %mul108, 210
  store i32 %add109, i32* %offset, align 4, !tbaa !37
  %mul123 = mul i32 %depth.0, %div.i
  %46 = load i32, i32* %extent.i, align 4
  %47 = load i32, i32* %extent.i.1, align 4
  %mul124 = mul i32 %mul123, %46
  %mul125 = mul i32 %mul124, %47
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731: ; preds = %if.end118, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph
  %i111.0865 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph ], [ %inc128, %if.end118 ]
  %call.i727 = call i64 @fwrite(i8* nonnull %45, i64 4, i64 1, i8* nonnull %call.i598) #14
  %cmp.i728.not = icmp eq i64 %call.i727, 0
  br i1 %cmp.i728.not, label %cleanup151.thread, label %if.end118

if.end118:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731
  %48 = load i32, i32* %offset, align 4, !tbaa !37
  %add126 = add nsw i32 %mul125, %48
  store i32 %add126, i32* %offset, align 4, !tbaa !37
  %inc128 = add nuw nsw i32 %i111.0865, 1
  %exitcond881.not = icmp eq i32 %inc128, %channels.0
  br i1 %exitcond881.not, label %for.end129, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, !llvm.loop !197

for.end129:                                       ; preds = %if.end118
  %49 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %49) #11
  store i32 %mul125, i32* %count, align 4, !tbaa !37
  %inc146.1 = add nuw nsw i32 0, 1
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

for.cond138:                                      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  %exitcond.not = icmp eq i32 %inc146.phi, %channels.0
  br i1 %exitcond.not, label %cleanup151, label %for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge, !llvm.loop !198

for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge: ; preds = %for.cond138
  %inc146.0 = add nuw nsw i32 %inc146.phi, 1
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720: ; preds = %for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge, %for.end129
  %inc146.phi = phi i32 [ %inc146.0, %for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge ], [ %inc146.1, %for.end129 ]
  %call.i716 = call i64 @fwrite(i8* nonnull %49, i64 4, i64 1, i8* nonnull %call.i598) #14
  %cmp.i717.not = icmp eq i64 %call.i716, 0
  br i1 %cmp.i717.not, label %select.unfold, label %for.cond138

select.unfold:                                    ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #11
  br label %cleanup151.thread

cleanup151.thread:                                ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, %select.unfold
  %retval.2.ph = phi i32 [ -5, %select.unfold ], [ -4, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #11
  br label %cleanup154

cleanup151:                                       ; preds = %for.cond138
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #11
  br label %cleanup154.thread

cleanup154.thread:                                ; preds = %cleanup151, %if.end103
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %34) #11
  br label %if.end311

cleanup154:                                       ; preds = %cleanup151.thread, %if.then36
  %retval.4 = phi i32 [ -3, %if.then36 ], [ %retval.2.ph, %cleanup151.thread ]
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %34) #11
  br label %cleanup433

if.else164:                                       ; preds = %lor.lhs.false
  %call165 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.39, i64 0, i64 0)) #15
  br i1 %call165, label %while.cond, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631

while.cond:                                       ; preds = %if.else164, %while.cond
  %end.0 = phi i8* [ %incdec.ptr167, %while.cond ], [ %filename, %if.else164 ]
  %50 = load i8, i8* %end.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %50, 0
  %incdec.ptr167 = getelementptr inbounds i8, i8* %end.0, i64 1
  br i1 %tobool.not, label %while.body171, label %while.cond, !llvm.loop !199

while.cond174.preheader:                          ; preds = %while.body171
  %end.1872.lcssa883 = ptrtoint i8* %end.1872 to i64
  %51 = ptrtoint i8* %filename to i64
  %52 = sub i64 %51, %end.1872.lcssa883
  br label %while.cond174

while.body171:                                    ; preds = %while.cond, %while.body171
  %end.1872 = phi i8* [ %incdec.ptr172.ptr, %while.body171 ], [ %end.0, %while.cond ]
  %incdec.ptr172.ptr = getelementptr inbounds i8, i8* %end.1872, i64 -1
  %.pr = load i8, i8* %incdec.ptr172.ptr, align 1, !tbaa !14
  %cmp170.not = icmp eq i8 %.pr, 46
  br i1 %cmp170.not, label %while.cond174.preheader, label %while.body171, !llvm.loop !200

while.cond174:                                    ; preds = %land.rhs176, %while.cond174.preheader
  %start.0.idx = phi i64 [ %start.0.add, %land.rhs176 ], [ -1, %while.cond174.preheader ]
  %start.0.ptr.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.idx
  %cmp175.not = icmp eq i8* %start.0.ptr.ptr, %filename
  br i1 %cmp175.not, label %while.end183, label %land.rhs176

land.rhs176:                                      ; preds = %while.cond174
  %start.0.add = add nsw i64 %start.0.idx, -1
  %arrayidx177.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.add
  %53 = load i8, i8* %arrayidx177.ptr, align 1, !tbaa !14
  %cmp179.not = icmp eq i8 %53, 47
  br i1 %cmp179.not, label %while.end183, label %while.cond174, !llvm.loop !201

while.end183:                                     ; preds = %land.rhs176, %while.cond174
  %start.0.idx.lcssa = phi i64 [ %52, %while.cond174 ], [ %start.0.idx, %land.rhs176 ]
  %54 = trunc i64 %start.0.idx.lcssa to i32
  %conv184 = xor i32 %54, -1
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %55) #11
  %cmp186.not868 = icmp eq i64 %start.0.idx.lcssa, -1
  br i1 %cmp186.not868, label %iter.check, label %while.body187.preheader

while.body187.preheader:                          ; preds = %while.end183
  %56 = xor i64 %start.0.idx.lcssa, -1
  %min.iters.check40 = icmp ugt i64 %start.0.idx.lcssa, -33
  br i1 %min.iters.check40, label %while.body187.preheader160, label %vector.memcheck

vector.memcheck:                                  ; preds = %while.body187.preheader
  %57 = xor i64 %start.0.idx.lcssa, -1
  %scevgep44 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %57
  %scevgep45 = getelementptr i8, i8* %end.1872, i64 %start.0.idx.lcssa
  %scevgep46 = getelementptr i8, i8* %end.1872, i64 -1
  %bound0 = icmp ult i8* %array_name43, %scevgep46
  %bound1 = icmp ult i8* %scevgep45, %scevgep44
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %while.body187.preheader160, label %vector.ph42

vector.ph42:                                      ; preds = %vector.memcheck
  %n.vec48 = and i64 %56, -32
  %ind.end52 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %n.vec48
  %ind.end54 = add i64 %start.0.idx.lcssa, %n.vec48
  br label %vector.body39

vector.body39:                                    ; preds = %vector.body39, %vector.ph42
  %index49 = phi i64 [ 0, %vector.ph42 ], [ %index.next50, %vector.body39 ]
  %next.gep = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index49
  %offset.idx57 = add i64 %start.0.idx.lcssa, %index49
  %58 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx57
  %59 = bitcast i8* %58 to <16 x i8>*
  %wide.load = load <16 x i8>, <16 x i8>* %59, align 1, !tbaa !14, !alias.scope !202
  %60 = getelementptr inbounds i8, i8* %58, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %wide.load58 = load <16 x i8>, <16 x i8>* %61, align 1, !tbaa !14, !alias.scope !202
  %62 = bitcast i8* %next.gep to <16 x i8>*
  store <16 x i8> %wide.load, <16 x i8>* %62, align 1, !tbaa !14, !alias.scope !205, !noalias !202
  %63 = getelementptr i8, i8* %next.gep, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  store <16 x i8> %wide.load58, <16 x i8>* %64, align 1, !tbaa !14, !alias.scope !205, !noalias !202
  %index.next50 = add i64 %index49, 32
  %65 = icmp eq i64 %index.next50, %n.vec48
  br i1 %65, label %middle.block37, label %vector.body39, !llvm.loop !207

middle.block37:                                   ; preds = %vector.body39
  %cmp.n55 = icmp eq i64 %n.vec48, %56
  br i1 %cmp.n55, label %while.cond191.preheader, label %while.body187.preheader160

while.body187.preheader160:                       ; preds = %vector.memcheck, %while.body187.preheader, %middle.block37
  %dst.0870.ph = phi i8* [ %55, %vector.memcheck ], [ %55, %while.body187.preheader ], [ %ind.end52, %middle.block37 ]
  %start.1869.idx.ph = phi i64 [ %start.0.idx.lcssa, %vector.memcheck ], [ %start.0.idx.lcssa, %while.body187.preheader ], [ %ind.end54, %middle.block37 ]
  br label %while.body187

while.cond191.preheader:                          ; preds = %while.body187, %middle.block37
  %incdec.ptr189.lcssa = phi i8* [ %ind.end52, %middle.block37 ], [ %incdec.ptr189, %while.body187 ]
  %add.ptr = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 256
  %cmp193866 = icmp ult i8* %incdec.ptr189.lcssa, %add.ptr
  br i1 %cmp193866, label %iter.check, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705

iter.check:                                       ; preds = %while.cond191.preheader, %while.end183
  %dst.0.lcssa911 = phi i8* [ %incdec.ptr189.lcssa, %while.cond191.preheader ], [ %55, %while.end183 ]
  %dst.0.lcssa91162 = ptrtoint i8* %dst.0.lcssa911 to i64
  %scevgep = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 1, i64 0
  %66 = sub i64 0, %dst.0.lcssa91162
  %scevgep63 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %66
  %exitcount.ptrcnt.to.int = ptrtoint i8* %scevgep63 to i64
  %min.iters.check65 = icmp ult i8* %scevgep63, inttoptr (i64 4 to i8*)
  br i1 %min.iters.check65, label %while.body194.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  %min.iters.check67 = icmp ult i8* %scevgep63, inttoptr (i64 32 to i8*)
  br i1 %min.iters.check67, label %vec.epilog.ph, label %vector.ph68

vector.ph68:                                      ; preds = %vector.main.loop.iter.check
  %n.vec70 = and i64 %exitcount.ptrcnt.to.int, -32
  %next.gep74.0 = getelementptr i8, i8* %dst.0.lcssa911, i64 0
  %index.next72.0 = add i64 0, 32
  br label %vector.body61

vector.body61:                                    ; preds = %vector.body61.vector.body61_crit_edge, %vector.ph68
  %index.next72.phi = phi i64 [ %index.next72.0, %vector.ph68 ], [ %index.next72.1, %vector.body61.vector.body61_crit_edge ]
  %next.gep74.phi = phi i8* [ %next.gep74.0, %vector.ph68 ], [ %next.gep74.1, %vector.body61.vector.body61_crit_edge ]
  %67 = bitcast i8* %next.gep74.phi to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %67, align 1, !tbaa !14
  %68 = getelementptr i8, i8* %next.gep74.phi, i64 16
  %69 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %69, align 1, !tbaa !14
  %70 = icmp eq i64 %index.next72.phi, %n.vec70
  br i1 %70, label %middle.block59, label %vector.body61.vector.body61_crit_edge, !llvm.loop !208

vector.body61.vector.body61_crit_edge:            ; preds = %vector.body61
  %next.gep74.1 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next72.phi
  %index.next72.1 = add i64 %index.next72.phi, 32
  br label %vector.body61

middle.block59:                                   ; preds = %vector.body61
  %cmp.n73 = icmp eq i64 %n.vec70, %exitcount.ptrcnt.to.int
  br i1 %cmp.n73, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block59
  %ind.end85 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec70
  %n.vec.remaining = and i64 %exitcount.ptrcnt.to.int, 28
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  br i1 %min.epilog.iters.check, label %while.body194.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %vec.epilog.resume.val = phi i64 [ %n.vec70, %vec.epilog.iter.check ], [ 0, %vector.main.loop.iter.check ]
  %71 = sub i64 0, %dst.0.lcssa91162
  %scevgep76 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %71
  %exitcount.ptrcnt.to.int78 = ptrtoint i8* %scevgep76 to i64
  %n.vec80 = and i64 %exitcount.ptrcnt.to.int78, -4
  %ind.end84 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec80
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index81 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next82, %vec.epilog.vector.body ]
  %next.gep87 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index81
  %72 = bitcast i8* %next.gep87 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %72, align 1, !tbaa !14
  %index.next82 = add i64 %index81, 4
  %73 = icmp eq i64 %index.next82, %n.vec80
  br i1 %73, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !209

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %cmp.n86 = icmp eq i64 %n.vec80, %exitcount.ptrcnt.to.int78
  br i1 %cmp.n86, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194.preheader

while.body194.preheader:                          ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %dst.1867.ph = phi i8* [ %dst.0.lcssa911, %iter.check ], [ %ind.end85, %vec.epilog.iter.check ], [ %ind.end84, %vec.epilog.middle.block ]
  br label %while.body194

while.body187:                                    ; preds = %while.body187.preheader160, %while.body187
  %dst.0870 = phi i8* [ %incdec.ptr189, %while.body187 ], [ %dst.0870.ph, %while.body187.preheader160 ]
  %start.1869.idx = phi i64 [ %start.1869.add, %while.body187 ], [ %start.1869.idx.ph, %while.body187.preheader160 ]
  %start.1869.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx
  %start.1869.add = add nuw nsw i64 %start.1869.idx, 1
  %74 = load i8, i8* %start.1869.ptr, align 1, !tbaa !14
  %incdec.ptr189 = getelementptr inbounds i8, i8* %dst.0870, i64 1
  store i8 %74, i8* %dst.0870, align 1, !tbaa !14
  %cmp186.not = icmp eq i64 %start.1869.add, -1
  br i1 %cmp186.not, label %while.cond191.preheader, label %while.body187, !llvm.loop !210

while.body194:                                    ; preds = %while.body194.preheader, %while.body194
  %dst.1867 = phi i8* [ %incdec.ptr195, %while.body194 ], [ %dst.1867.ph, %while.body194.preheader ]
  %incdec.ptr195 = getelementptr inbounds i8, i8* %dst.1867, i64 1
  store i8 0, i8* %dst.1867, align 1, !tbaa !14
  %exitcond882.not = icmp eq i8* %incdec.ptr195, %scevgep
  br i1 %exitcond882.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194, !llvm.loop !211

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705: ; preds = %while.body194, %middle.block59, %vec.epilog.middle.block, %while.cond191.preheader
  %add197 = sub i32 6, %54
  %and = and i32 %add197, -8
  %75 = getelementptr inbounds [129 x i8], [129 x i8]* %header198, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %75) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(129) %75, i8* nonnull align 1 dereferenceable(129) getelementptr inbounds ([129 x i8], [129 x i8]* @__const.halide_debug_to_file.header, i64 0, i64 0), i64 129, i1 false)
  %call.i701 = call i64 @fwrite(i8* nonnull %75, i64 128, i64 1, i8* nonnull %call.i598) #14
  %76 = load i32, i32* %dimensions, align 4, !tbaa !179
  %cmp19.i.i = icmp sgt i32 %76, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %sub.i694.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %77 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !180
  %wide.trip.count.i.i = zext i32 %76 to i64
  %min.iters.check91 = icmp ult i32 %76, 3
  br i1 %min.iters.check91, label %for.body.i.i.preheader, label %vector.ph92

vector.ph92:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec94 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body90

vector.body90:                                    ; preds = %pred.load.continue103, %vector.ph92
  %index95 = phi i64 [ 0, %vector.ph92 ], [ %index.next96, %pred.load.continue103 ]
  %vec.phi = phi i64 [ 0, %vector.ph92 ], [ %predphi, %pred.load.continue103 ]
  %vec.phi101 = phi i64 [ 0, %vector.ph92 ], [ %predphi104, %pred.load.continue103 ]
  %induction100 = or i64 %index95, 1
  %78 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index95, i32 2
  %79 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction100, i32 2
  %80 = load i32, i32* %78, align 4, !tbaa !181
  %81 = load i32, i32* %79, align 4, !tbaa !181
  %82 = icmp sgt i32 %80, 0
  %83 = icmp sgt i32 %81, 0
  %84 = zext i32 %80 to i64
  %85 = zext i32 %81 to i64
  br i1 %82, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body90
  %86 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index95, i32 1
  %87 = load i32, i32* %86, align 4, !tbaa !185
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body90
  %88 = phi i32 [ poison, %vector.body90 ], [ %87, %pred.load.if ]
  br i1 %83, label %pred.load.if102, label %pred.load.continue103

pred.load.if102:                                  ; preds = %pred.load.continue
  %89 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction100, i32 1
  %90 = load i32, i32* %89, align 4, !tbaa !185
  br label %pred.load.continue103

pred.load.continue103:                            ; preds = %pred.load.if102, %pred.load.continue
  %91 = phi i32 [ poison, %pred.load.continue ], [ %90, %pred.load.if102 ]
  %92 = add nsw i32 %88, -1
  %93 = add nsw i32 %91, -1
  %94 = sext i32 %92 to i64
  %95 = sext i32 %93 to i64
  %96 = mul nsw i64 %94, %84
  %97 = mul nsw i64 %95, %85
  %98 = select i1 %82, i64 %96, i64 0
  %predphi = add i64 %vec.phi, %98
  %99 = select i1 %83, i64 %97, i64 0
  %predphi104 = add i64 %vec.phi101, %99
  %index.next96 = add i64 %index95, 2
  %100 = icmp eq i64 %index.next96, %n.vec94
  br i1 %100, label %middle.block88, label %vector.body90, !llvm.loop !213

middle.block88:                                   ; preds = %pred.load.continue103
  %bin.rdx = add i64 %predphi104, %predphi
  %cmp.n98 = icmp eq i64 %n.vec94, %wide.trip.count.i.i
  br i1 %cmp.n98, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block88
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec94, %middle.block88 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx, %middle.block88 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i.i, i32 2
  %101 = load i32, i32* %stride2.i.i, align 4, !tbaa !181
  %cmp3.i.i = icmp sgt i32 %101, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %101 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i.i, i32 1
  %102 = load i32, i32* %extent.i.i, align 4, !tbaa !185
  %sub.i.i = add nsw i32 %102, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i693 = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i693, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !214

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block88
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx, %middle.block88 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check108 = icmp ult i32 %76, 3
  br i1 %min.iters.check108, label %for.body.i13.i.preheader157, label %vector.ph109

vector.ph109:                                     ; preds = %for.body.i13.i.preheader
  %n.vec111 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body107

vector.body107:                                   ; preds = %pred.load.continue123, %vector.ph109
  %index112 = phi i64 [ 0, %vector.ph109 ], [ %index.next113, %pred.load.continue123 ]
  %vec.phi118 = phi i64 [ 0, %vector.ph109 ], [ %predphi124, %pred.load.continue123 ]
  %vec.phi119 = phi i64 [ 0, %vector.ph109 ], [ %predphi125, %pred.load.continue123 ]
  %induction117 = or i64 %index112, 1
  %103 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index112, i32 2
  %104 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction117, i32 2
  %105 = load i32, i32* %103, align 4, !tbaa !181
  %106 = load i32, i32* %104, align 4, !tbaa !181
  %107 = icmp slt i32 %105, 0
  %108 = icmp slt i32 %106, 0
  %109 = sext i32 %105 to i64
  %110 = sext i32 %106 to i64
  br i1 %107, label %pred.load.if120, label %pred.load.continue121

pred.load.if120:                                  ; preds = %vector.body107
  %111 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index112, i32 1
  %112 = load i32, i32* %111, align 4, !tbaa !185
  br label %pred.load.continue121

pred.load.continue121:                            ; preds = %pred.load.if120, %vector.body107
  %113 = phi i32 [ poison, %vector.body107 ], [ %112, %pred.load.if120 ]
  br i1 %108, label %pred.load.if122, label %pred.load.continue123

pred.load.if122:                                  ; preds = %pred.load.continue121
  %114 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction117, i32 1
  %115 = load i32, i32* %114, align 4, !tbaa !185
  br label %pred.load.continue123

pred.load.continue123:                            ; preds = %pred.load.if122, %pred.load.continue121
  %116 = phi i32 [ poison, %pred.load.continue121 ], [ %115, %pred.load.if122 ]
  %117 = add nsw i32 %113, -1
  %118 = add nsw i32 %116, -1
  %119 = sext i32 %117 to i64
  %120 = sext i32 %118 to i64
  %121 = mul nsw i64 %119, %109
  %122 = mul nsw i64 %120, %110
  %123 = select i1 %107, i64 %121, i64 0
  %predphi124 = add i64 %vec.phi118, %123
  %124 = select i1 %108, i64 %122, i64 0
  %predphi125 = add i64 %vec.phi119, %124
  %index.next113 = add i64 %index112, 2
  %125 = icmp eq i64 %index.next113, %n.vec111
  br i1 %125, label %middle.block105, label %vector.body107, !llvm.loop !215

middle.block105:                                  ; preds = %pred.load.continue123
  %bin.rdx126 = add i64 %predphi125, %predphi124
  %cmp.n115 = icmp eq i64 %n.vec111, %wide.trip.count.i.i
  br i1 %cmp.n115, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader157

for.body.i13.i.preheader157:                      ; preds = %for.body.i13.i.preheader, %middle.block105
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec111, %middle.block105 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx126, %middle.block105 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader157, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader157 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader157 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i10.i, i32 2
  %126 = load i32, i32* %stride2.i11.i, align 4, !tbaa !181
  %cmp3.i12.i = icmp slt i32 %126, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %126 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i10.i, i32 1
  %127 = load i32, i32* %extent.i15.i, align 4, !tbaa !185
  %sub.i16.i = add nsw i32 %127, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !216

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block105
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx126, %middle.block105 ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i694.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i694.phi = phi i64 [ %sub.i694.0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i694.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %128 = load i8, i8* %bits.i, align 1, !tbaa !140
  %conv.i.i696 = zext i8 %128 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i696, 7
  %div.i.i697 = lshr i64 %add.i4.i, 3
  %mul.i698 = mul i64 %div.i.i697, %sub.i694.phi
  %129 = trunc i64 %mul.i698 to i32
  %130 = add i32 %129, 7
  %131 = and i32 %130, 7
  %conv204 = xor i32 %131, 7
  %conv205 = zext i32 %conv204 to i64
  %add206 = add i64 %mul.i698, %conv205
  %tobool207.not = icmp ult i64 %add206, 4294967296
  br i1 %tobool207.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687, label %cleanup278.thread

cleanup278.thread:                                ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6.40, i64 0, i64 0)) #14
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %75) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %55) #11
  br label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687: ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %132 = icmp sgt i32 %76, 2
  %spec.store.select = select i1 %132, i32 %76, i32 2
  %133 = bitcast [8 x i32]* %tags to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %133) #11
  %arrayinit.begin = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 0
  store i32 14, i32* %arrayinit.begin, align 4, !tbaa !37
  %arrayinit.element = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 1
  %add214 = shl i32 %spec.store.select, 2
  %and215 = add i32 %add214, 4
  %mul216 = and i32 %and215, -8
  %add217 = add i32 %and, 40
  %add218 = add i32 %add217, %mul216
  %add220 = add i32 %add218, %129
  %add221 = add i32 %add220, %conv204
  store i32 %add221, i32* %arrayinit.element, align 4, !tbaa !37
  %arrayinit.element222 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 2
  %134 = bitcast i32* %arrayinit.element222 to <2 x i32>*
  store <2 x i32> <i32 6, i32 8>, <2 x i32>* %134, align 4, !tbaa !37
  %arrayinit.element224 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 4
  %idxprom225 = sext i32 %type_code to i64
  %arrayidx226 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE, i64 0, i64 %idxprom225
  %135 = load i8, i8* %arrayidx226, align 1, !tbaa !14
  %conv227 = zext i8 %135 to i32
  store i32 %conv227, i32* %arrayinit.element224, align 4, !tbaa !37
  %arrayinit.element228 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 5
  %136 = bitcast i32* %arrayinit.element228 to <2 x i32>*
  store <2 x i32> <i32 1, i32 5>, <2 x i32>* %136, align 4, !tbaa !37
  %arrayinit.element230 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 7
  store i32 %add214, i32* %arrayinit.element230, align 4, !tbaa !37
  %call.i683 = call i64 @fwrite(i8* nonnull %133, i64 32, i64 1, i8* nonnull %call.i598) #14
  %cmp.i684.not = icmp eq i64 %call.i683, 0
  br i1 %cmp.i684.not, label %cleanup278, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %137 = bitcast [4 x i32]* %extents to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %137) #11
  %arrayinit.begin235 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 0
  %138 = load i32, i32* %extent.i, align 4, !tbaa !185
  store i32 %138, i32* %arrayinit.begin235, align 4, !tbaa !37
  %arrayinit.element238 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 1
  %139 = load i32, i32* %extent.i.1, align 4, !tbaa !185
  store i32 %139, i32* %arrayinit.element238, align 4, !tbaa !37
  %arrayinit.element241 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 2
  %140 = load i32, i32* %extent.i.2, align 4, !tbaa !185
  store i32 %140, i32* %arrayinit.element241, align 4, !tbaa !37
  %arrayinit.element244 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 3
  %141 = load i32, i32* %extent.i.3, align 4, !tbaa !185
  store i32 %141, i32* %arrayinit.element244, align 4, !tbaa !37
  %conv248 = sext i32 %mul216 to i64
  %call.i672 = call i64 @fwrite(i8* nonnull %137, i64 %conv248, i64 1, i8* nonnull %call.i598) #14
  %cmp.i673.not = icmp eq i64 %call.i672, 0
  br i1 %cmp.i673.not, label %cleanup274, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %142 = bitcast [2 x i32]* %name_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %142) #11
  %arrayinit.begin252 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 0
  store i32 1, i32* %arrayinit.begin252, align 4, !tbaa !37
  %arrayinit.element253 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 1
  store i32 %conv184, i32* %arrayinit.element253, align 4, !tbaa !37
  %call.i660 = call i64 @fwrite(i8* nonnull %142, i64 8, i64 1, i8* nonnull %call.i598) #14
  %cmp.i661.not = icmp eq i64 %call.i660, 0
  br i1 %cmp.i661.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %conv258 = zext i32 %and to i64
  %call.i648 = call i64 @fwrite(i8* nonnull %55, i64 %conv258, i64 1, i8* nonnull %call.i598) #14
  %cmp.i649.not = icmp eq i64 %call.i648, 0
  br i1 %cmp.i649.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652
  %143 = bitcast [2 x i32]* %payload_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %143) #11
  %arrayinit.begin262 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 0
  %arrayidx264 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE, i64 0, i64 %idxprom225
  %144 = load i8, i8* %arrayidx264, align 1, !tbaa !14
  %conv265 = zext i8 %144 to i32
  store i32 %conv265, i32* %arrayinit.begin262, align 4, !tbaa !37
  %arrayinit.element266 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 1
  store i32 %129, i32* %arrayinit.element266, align 4, !tbaa !37
  %call.i638 = call i64 @fwrite(i8* nonnull %143, i64 8, i64 1, i8* nonnull %call.i598) #14
  %cmp.i639.not = icmp eq i64 %call.i638, 0
  %cleanup.dest.slot.5 = zext i1 %cmp.i639.not to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %143) #11
  br label %cleanup273

cleanup273:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %cleanup.dest.slot.6 = phi i32 [ %cleanup.dest.slot.5, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  %retval.6 = phi i32 [ -11, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ -9, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ -10, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %142) #11
  br label %cleanup274

cleanup274:                                       ; preds = %cleanup273, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %cleanup.dest.slot.7 = phi i32 [ %cleanup.dest.slot.6, %cleanup273 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  %retval.7 = phi i32 [ %retval.6, %cleanup273 ], [ -8, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %137) #11
  br label %cleanup278

cleanup278:                                       ; preds = %cleanup274, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %cleanup.dest.slot.8 = phi i32 [ %cleanup.dest.slot.7, %cleanup274 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  %retval.8 = phi i32 [ %retval.7, %cleanup274 ], [ -7, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %133) #11
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %75) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %55) #11
  %cond442 = icmp eq i32 %cleanup.dest.slot.8, 0
  br i1 %cond442, label %if.end311, label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631: ; preds = %if.else164
  %145 = bitcast [5 x i32]* %header289 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %145) #11
  %arrayinit.begin290 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 0
  %146 = load i32, i32* %extent.i, align 4, !tbaa !185
  store i32 %146, i32* %arrayinit.begin290, align 4, !tbaa !37
  %arrayinit.element293 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 1
  %147 = load i32, i32* %extent.i.1, align 4, !tbaa !185
  store i32 %147, i32* %arrayinit.element293, align 4, !tbaa !37
  %arrayinit.element296 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 2
  %148 = load i32, i32* %extent.i.2, align 4, !tbaa !185
  store i32 %148, i32* %arrayinit.element296, align 4, !tbaa !37
  %arrayinit.element299 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 3
  %149 = load i32, i32* %extent.i.3, align 4, !tbaa !185
  store i32 %149, i32* %arrayinit.element299, align 4, !tbaa !37
  %arrayinit.element302 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 4
  store i32 %type_code, i32* %arrayinit.element302, align 4, !tbaa !37
  %call.i627 = call i64 @fwrite(i8* nonnull %145, i64 20, i64 1, i8* nonnull %call.i598) #14
  %cmp.i628.not = icmp eq i64 %call.i627, 0
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %145) #11
  br i1 %cmp.i628.not, label %cleanup433, label %if.end311

if.end311:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup154.thread
  %final_padding_bytes.0 = phi i32 [ %conv204, %cleanup278 ], [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ 0, %cleanup154.thread ]
  %150 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %150) #11
  %div = udiv i32 4096, %div.i
  %151 = load i32, i32* %extent.i.3, align 4, !tbaa !185
  %cmp320856 = icmp sgt i32 %151, 0
  br i1 %cmp320856, label %for.body322.lr.ph, label %if.end412

for.body322.lr.ph:                                ; preds = %if.end311
  %152 = load i32, i32* %min.i.3, align 16, !tbaa !217
  %153 = bitcast [4 x i32]* %idx to i8*
  %arrayinit.begin357 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 0
  %arrayinit.element358 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 1
  %arrayinit.element359 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 2
  %arrayinit.element360 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 3
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %conv368 = zext i32 %div.i to i64
  %mul373 = mul nuw nsw i32 %div, %div.i
  %conv374 = zext i32 %mul373 to i64
  %.pre891 = load i32, i32* %min.i.2, align 16, !tbaa !217
  %.pre892 = load i32, i32* %extent.i.2, align 4, !tbaa !185
  %.pre893 = load i32, i32* %min.i.1, align 16
  %.pre894 = load i32, i32* %extent.i.1, align 4
  %.pre = load i32, i32* %extent.i, align 4
  %154 = load i32, i32* %min.i, align 16
  %155 = load i32, i32* %extent.i, align 4
  %156 = load i32, i32* %min.i, align 16
  %add352 = add nsw i32 %156, %155
  %.pre15 = load i32, i32* %extent.i.1, align 4
  %.pre16 = load i32, i32* %min.i.1, align 16
  %.pre896 = load i32, i32* %extent.i.2, align 4
  %.pre897 = load i32, i32* %min.i.2, align 16
  %.pre898 = load i32, i32* %extent.i.3, align 4
  %.pre899 = load i32, i32* %min.i.3, align 16
  br label %for.body322

for.body322:                                      ; preds = %for.inc399, %for.body322.lr.ph
  %157 = phi i32 [ %152, %for.body322.lr.ph ], [ %218, %for.inc399 ]
  %158 = phi i32 [ %151, %for.body322.lr.ph ], [ %219, %for.inc399 ]
  %159 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %220, %for.inc399 ]
  %160 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %221, %for.inc399 ]
  %161 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %222, %for.inc399 ]
  %162 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %223, %for.inc399 ]
  %dim3.0858 = phi i32 [ %152, %for.body322.lr.ph ], [ %inc400, %for.inc399 ]
  %counter.0857 = phi i32 [ 0, %for.body322.lr.ph ], [ %counter.1.lcssa, %for.inc399 ]
  %cmp331848 = icmp sgt i32 %161, 0
  br i1 %cmp331848, label %for.body333, label %for.inc399

for.body333:                                      ; preds = %for.body322, %for.inc394
  %163 = phi i32 [ %212, %for.inc394 ], [ %.pre893, %for.body322 ]
  %164 = phi i32 [ %213, %for.inc394 ], [ %.pre894, %for.body322 ]
  %165 = phi i32 [ %214, %for.inc394 ], [ %159, %for.body322 ]
  %166 = phi i32 [ %215, %for.inc394 ], [ %160, %for.body322 ]
  %167 = phi i32 [ %216, %for.inc394 ], [ %.pre894, %for.body322 ]
  %168 = phi i32 [ %217, %for.inc394 ], [ %.pre893, %for.body322 ]
  %dim2.0850 = phi i32 [ %inc395, %for.inc394 ], [ %162, %for.body322 ]
  %counter.1849 = phi i32 [ %counter.2.lcssa, %for.inc394 ], [ %counter.0857, %for.body322 ]
  %cmp342839 = icmp sgt i32 %167, 0
  br i1 %cmp342839, label %for.body344, label %for.inc394

for.body344:                                      ; preds = %for.body333, %for.inc389
  %169 = phi i32 [ %209, %for.inc389 ], [ %163, %for.body333 ]
  %170 = phi i32 [ %210, %for.inc389 ], [ %164, %for.body333 ]
  %171 = phi i32 [ %211, %for.inc389 ], [ %.pre, %for.body333 ]
  %dim1.0841 = phi i32 [ %inc390, %for.inc389 ], [ %168, %for.body333 ]
  %counter.2840 = phi i32 [ %counter.6797, %for.inc389 ], [ %counter.1849, %for.body333 ]
  %cmp353834 = icmp sgt i32 %171, 0
  br i1 %cmp353834, label %for.body355, label %for.inc389

for.body355:                                      ; preds = %for.body344, %for.inc384
  %dim0.0836 = phi i32 [ %inc385, %for.inc384 ], [ %154, %for.body344 ]
  %counter.3835 = phi i32 [ %counter.4, %for.inc384 ], [ %counter.2840, %for.body344 ]
  %inc356 = add nsw i32 %counter.3835, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %153) #11
  store i32 %dim0.0836, i32* %arrayinit.begin357, align 4, !tbaa !37
  store i32 %dim1.0841, i32* %arrayinit.element358, align 4, !tbaa !37
  store i32 %dim2.0850, i32* %arrayinit.element359, align 4, !tbaa !37
  store i32 %dim3.0858, i32* %arrayinit.element360, align 4, !tbaa !37
  %172 = load i32, i32* %dimensions, align 4, !tbaa !179
  %cmp17.i = icmp sgt i32 %172, 0
  br i1 %cmp17.i, label %for.body.lr.ph.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit

for.body.lr.ph.i:                                 ; preds = %for.body355
  %173 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !180
  %wide.trip.count.i = zext i32 %172 to i64
  %stride.i621920 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 0, i32 2
  %174 = load i32, i32* %stride.i621920, align 4, !tbaa !181
  %conv.i622921 = sext i32 %174 to i64
  %min.i623922 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 0, i32 0
  %175 = load i32, i32* %min.i623922, align 4, !tbaa !217
  %sub.i923 = sub nsw i32 %dim0.0836, %175
  %conv7.i924 = sext i32 %sub.i923 to i64
  %mul.i925 = mul nsw i64 %conv7.i924, %conv.i622921
  %exitcond.not.i927 = icmp eq i32 %172, 1
  br i1 %exitcond.not.i927, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.preheader, !llvm.loop !218

for.body.i.for.body.i_crit_edge.preheader:        ; preds = %for.body.lr.ph.i
  %stride.i62126 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 1, i32 2
  %176 = load i32, i32* %stride.i62126, align 4, !tbaa !181
  %conv.i62227 = sext i32 %176 to i64
  %min.i62328 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 1, i32 0
  %177 = load i32, i32* %min.i62328, align 4, !tbaa !217
  %sub.i29 = sub nsw i32 %dim1.0841, %177
  %conv7.i30 = sext i32 %sub.i29 to i64
  %mul.i31 = mul nsw i64 %conv7.i30, %conv.i62227
  %add.i62432 = add nsw i64 %mul.i31, %mul.i925
  %exitcond.not.i33 = icmp eq i32 %172, 2
  br i1 %exitcond.not.i33, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph, !llvm.loop !218

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph: ; preds = %for.body.i.for.body.i_crit_edge.preheader
  %178 = add nsw i64 %wide.trip.count.i, -2
  %min.iters.check131 = icmp ult i64 %178, 5
  br i1 %min.iters.check131, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, label %vector.ph132

vector.ph132:                                     ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %n.mod.vf133 = and i64 %178, 3
  %179 = icmp eq i64 %n.mod.vf133, 0
  %180 = select i1 %179, i64 4, i64 %n.mod.vf133
  %n.vec134 = sub nsw i64 %178, %180
  %ind.end138 = add nsw i64 %n.vec134, 2
  %181 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %add.i62432, i32 0
  br label %vector.body130

vector.body130:                                   ; preds = %vector.body130, %vector.ph132
  %index135 = phi i64 [ 0, %vector.ph132 ], [ %index.next136, %vector.body130 ]
  %vec.phi141 = phi <2 x i64> [ %181, %vector.ph132 ], [ %201, %vector.body130 ]
  %vec.phi142 = phi <2 x i64> [ zeroinitializer, %vector.ph132 ], [ %202, %vector.body130 ]
  %offset.idx140 = or i64 %index135, 2
  %182 = add i64 %offset.idx140, 2
  %183 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %offset.idx140
  %184 = bitcast i32* %183 to <2 x i32>*
  %wide.load143 = load <2 x i32>, <2 x i32>* %184, align 4, !tbaa !37
  %185 = getelementptr inbounds i32, i32* %183, i64 2
  %186 = bitcast i32* %185 to <2 x i32>*
  %wide.load144 = load <2 x i32>, <2 x i32>* %186, align 4, !tbaa !37
  %187 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %offset.idx140, i32 2
  %188 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %182, i32 2
  %189 = getelementptr inbounds i32, i32* %187, i64 -2
  %190 = bitcast i32* %189 to <8 x i32>*
  %191 = getelementptr inbounds i32, i32* %188, i64 -2
  %192 = bitcast i32* %191 to <8 x i32>*
  %wide.vec = load <8 x i32>, <8 x i32>* %190, align 4, !tbaa !37
  %wide.vec145 = load <8 x i32>, <8 x i32>* %192, align 4, !tbaa !37
  %strided.vec = shufflevector <8 x i32> %wide.vec, <8 x i32> poison, <2 x i32> <i32 0, i32 4>
  %strided.vec146 = shufflevector <8 x i32> %wide.vec145, <8 x i32> poison, <2 x i32> <i32 0, i32 4>
  %strided.vec147 = shufflevector <8 x i32> %wide.vec, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %strided.vec148 = shufflevector <8 x i32> %wide.vec145, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %193 = sext <2 x i32> %strided.vec147 to <2 x i64>
  %194 = sext <2 x i32> %strided.vec148 to <2 x i64>
  %195 = sub nsw <2 x i32> %wide.load143, %strided.vec
  %196 = sub nsw <2 x i32> %wide.load144, %strided.vec146
  %197 = sext <2 x i32> %195 to <2 x i64>
  %198 = sext <2 x i32> %196 to <2 x i64>
  %199 = mul nsw <2 x i64> %197, %193
  %200 = mul nsw <2 x i64> %198, %194
  %201 = add <2 x i64> %199, %vec.phi141
  %202 = add <2 x i64> %200, %vec.phi142
  %index.next136 = add i64 %index135, 4
  %203 = icmp eq i64 %index.next136, %n.vec134
  br i1 %203, label %middle.block128, label %vector.body130, !llvm.loop !219

middle.block128:                                  ; preds = %vector.body130
  %bin.rdx149 = add <2 x i64> %202, %201
  %204 = call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx149)
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader: ; preds = %middle.block128, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %indvars.iv.next.i35.ph = phi i64 [ 2, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %ind.end138, %middle.block128 ]
  %add.i62434.ph = phi i64 [ %add.i62432, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %204, %middle.block128 ]
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge: ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge
  %indvars.iv.next.i35 = phi i64 [ %indvars.iv.next.i, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %indvars.iv.next.i35.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %add.i62434 = phi i64 [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %add.i62434.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %arrayidx3.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %indvars.iv.next.i35
  %.pre895.pre = load i32, i32* %arrayidx3.i.phi.trans.insert.phi.trans.insert, align 4, !tbaa !37
  %stride.i621 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %indvars.iv.next.i35, i32 2
  %205 = load i32, i32* %stride.i621, align 4, !tbaa !181
  %conv.i622 = sext i32 %205 to i64
  %min.i623 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %indvars.iv.next.i35, i32 0
  %206 = load i32, i32* %min.i623, align 4, !tbaa !217
  %sub.i = sub nsw i32 %.pre895.pre, %206
  %conv7.i = sext i32 %sub.i to i64
  %mul.i = mul nsw i64 %conv7.i, %conv.i622
  %add.i624 = add nsw i64 %mul.i, %add.i62434
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i35, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, !llvm.loop !220

_ZNK15halide_buffer_t10address_ofEPKi.exit:       ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, %for.body.i.for.body.i_crit_edge.preheader, %for.body.lr.ph.i, %for.body355
  %index.0.lcssa.i = phi i64 [ 0, %for.body355 ], [ %mul.i925, %for.body.lr.ph.i ], [ %add.i62432, %for.body.i.for.body.i_crit_edge.preheader ], [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ]
  %207 = load i8*, i8** %host.i, align 8, !tbaa !176
  %208 = load i8, i8* %bits.i, align 1, !tbaa !140
  %conv.i.i = zext i8 %208 to i64
  %add.i.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i.i, 3
  %mul9.i = mul nsw i64 %div.i.i, %index.0.lcssa.i
  %add.ptr.i = getelementptr inbounds i8, i8* %207, i64 %mul9.i
  %mul366 = mul nsw i32 %counter.3835, %div.i
  %idx.ext = sext i32 %mul366 to i64
  %add.ptr367 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 %idx.ext
  %call369 = call i8* @memcpy(i8* nonnull %add.ptr367, i8* %add.ptr.i, i64 %conv368) #14
  %cmp370 = icmp eq i32 %inc356, %div
  br i1 %cmp370, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, label %for.inc384

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619: ; preds = %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %call.i615 = call i64 @fwrite(i8* nonnull %150, i64 %conv374, i64 1, i8* nonnull %call.i598) #14
  %cmp.i616.not = icmp eq i64 %call.i615, 0
  br i1 %cmp.i616.not, label %cleanup425.loopexit, label %for.inc384

for.inc384:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %counter.4 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619 ], [ %inc356, %_ZNK15halide_buffer_t10address_ofEPKi.exit ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %153) #11
  %inc385 = add nsw i32 %dim0.0836, 1
  %cmp353 = icmp slt i32 %inc385, %add352
  br i1 %cmp353, label %for.body355, label %for.inc389, !llvm.loop !221

for.inc389:                                       ; preds = %for.inc384, %for.body344
  %209 = phi i32 [ %169, %for.body344 ], [ %.pre16, %for.inc384 ]
  %210 = phi i32 [ %170, %for.body344 ], [ %.pre15, %for.inc384 ]
  %211 = phi i32 [ %171, %for.body344 ], [ %155, %for.inc384 ]
  %counter.6797 = phi i32 [ %counter.2840, %for.body344 ], [ %counter.4, %for.inc384 ]
  %inc390 = add nsw i32 %dim1.0841, 1
  %add341 = add nsw i32 %209, %210
  %cmp342 = icmp slt i32 %inc390, %add341
  br i1 %cmp342, label %for.body344, label %for.inc394, !llvm.loop !222

for.inc394:                                       ; preds = %for.inc389, %for.body333
  %212 = phi i32 [ %163, %for.body333 ], [ %209, %for.inc389 ]
  %213 = phi i32 [ %164, %for.body333 ], [ %210, %for.inc389 ]
  %214 = phi i32 [ %165, %for.body333 ], [ %.pre897, %for.inc389 ]
  %215 = phi i32 [ %166, %for.body333 ], [ %.pre896, %for.inc389 ]
  %216 = phi i32 [ %167, %for.body333 ], [ %210, %for.inc389 ]
  %217 = phi i32 [ %168, %for.body333 ], [ %209, %for.inc389 ]
  %counter.2.lcssa = phi i32 [ %counter.1849, %for.body333 ], [ %counter.6797, %for.inc389 ]
  %inc395 = add nsw i32 %dim2.0850, 1
  %add330 = add nsw i32 %215, %214
  %cmp331 = icmp slt i32 %inc395, %add330
  br i1 %cmp331, label %for.body333, label %for.inc399, !llvm.loop !223

for.inc399:                                       ; preds = %for.inc394, %for.body322
  %218 = phi i32 [ %157, %for.body322 ], [ %.pre899, %for.inc394 ]
  %219 = phi i32 [ %158, %for.body322 ], [ %.pre898, %for.inc394 ]
  %220 = phi i32 [ %159, %for.body322 ], [ %214, %for.inc394 ]
  %221 = phi i32 [ %160, %for.body322 ], [ %215, %for.inc394 ]
  %222 = phi i32 [ %161, %for.body322 ], [ %215, %for.inc394 ]
  %223 = phi i32 [ %162, %for.body322 ], [ %214, %for.inc394 ]
  %counter.1.lcssa = phi i32 [ %counter.0857, %for.body322 ], [ %counter.2.lcssa, %for.inc394 ]
  %inc400 = add nsw i32 %dim3.0858, 1
  %add319 = add nsw i32 %219, %218
  %cmp320 = icmp slt i32 %inc400, %add319
  br i1 %cmp320, label %for.body322, label %for.end403, !llvm.loop !224

for.end403:                                       ; preds = %for.inc399
  %cmp404 = icmp sgt i32 %counter.1.lcssa, 0
  br i1 %cmp404, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, label %if.end412

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612: ; preds = %for.end403
  %mul407 = mul nsw i32 %counter.1.lcssa, %div.i
  %conv408 = sext i32 %mul407 to i64
  %call.i608 = call i64 @fwrite(i8* nonnull %150, i64 %conv408, i64 1, i8* nonnull %call.i598) #14
  %cmp.i609.not = icmp eq i64 %call.i608, 0
  br i1 %cmp.i609.not, label %cleanup425, label %if.end412

if.end412:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, %for.end403, %if.end311
  %224 = bitcast i64* %zero to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %224) #11
  store i64 0, i64* %zero, align 8, !tbaa !18
  %tobool413.not = icmp eq i32 %final_padding_bytes.0, 0
  br i1 %tobool413.not, label %if.end423, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit: ; preds = %if.end412
  %conv415 = zext i32 %final_padding_bytes.0 to i64
  %call.i604 = call i64 @fwrite(i8* nonnull %224, i64 %conv415, i64 1, i8* nonnull %call.i598) #14
  %cmp.i605.not = icmp eq i64 %call.i604, 0
  br i1 %cmp.i605.not, label %cleanup424, label %if.end423

if.end423:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit, %if.end412
  br label %cleanup424

cleanup424:                                       ; preds = %if.end423, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit
  %retval.21 = phi i32 [ 0, %if.end423 ], [ -16, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %224) #11
  br label %cleanup425

cleanup425.loopexit:                              ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %153) #11
  br label %cleanup425

cleanup425:                                       ; preds = %cleanup425.loopexit, %cleanup424, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612
  %retval.22 = phi i32 [ %retval.21, %cleanup424 ], [ -14, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612 ], [ -13, %cleanup425.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %150) #11
  br label %cleanup433

cleanup433:                                       ; preds = %cleanup425, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup278.thread, %cleanup154
  %retval.23 = phi i32 [ %retval.22, %cleanup425 ], [ %retval.4, %cleanup154 ], [ %retval.8, %cleanup278 ], [ -12, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ -6, %cleanup278.thread ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #11
  %call.i = call i32 @fclose(i8* nonnull %call.i598) #14
  br label %return

return:                                           ; preds = %cleanup433, %if.end6, %if.end2, %if.then1, %if.then
  %retval.26 = phi i32 [ -1, %if.then ], [ -1, %if.then1 ], [ %call3, %if.end2 ], [ %retval.23, %cleanup433 ], [ -2, %if.end6 ]
  ret i32 %retval.26
}

declare i64 @fwrite(i8*, i64, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_cache_cleanup() #0 {
entry:
  tail call void @halide_memoization_cache_cleanup() #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_memoization_cache_cleanup() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %while.end
  store i64 0, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  ret void

for.body:                                         ; preds = %while.end, %entry
  %__begin1.018 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %while.end ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  %cmp2.not16 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not16, label %while.end, label %while.body

while.body:                                       ; preds = %for.body, %while.body
  %entry1.017 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %while.body ], [ %0, %for.body ]
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next3, align 8, !tbaa !225
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.017) #15
  %2 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %2) #14
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp2.not, label %while.end, label %while.body, !llvm.loop !227

while.end:                                        ; preds = %while.body, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this) local_unnamed_addr #0 align 2 {
entry:
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  %0 = load i32, i32* %tuple_count, align 8, !tbaa !228
  %cmp11.not = icmp eq i32 %0, 0
  br i1 %cmp11.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  %1 = load i8*, i8** %metadata_storage, align 8, !tbaa !229
  tail call void @halide_free(i8* null, i8* %1) #14
  ret void

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !230
  %arrayidx = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %2, i64 %indvars.iv
  %call = tail call i32 @halide_device_free(i8* null, %struct.halide_buffer_t* %arrayidx) #14
  %3 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !230
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %3, i64 %indvars.iv, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !176
  %call6 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %4) #15
  %5 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call6 to i8*
  tail call void @halide_free(i8* null, i8* %5) #14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %6 = load i32, i32* %tuple_count, align 8, !tbaa !228
  %7 = zext i32 %6 to i64
  %cmp = icmp ult i64 %indvars.iv.next, %7
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !231
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) local_unnamed_addr #2 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %host, i64 -32
  %0 = bitcast i8* %add.ptr to %"struct.Halide::Runtime::Internal::CacheBlockHeader"*
  ret %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %0
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp41 = icmp sgt i32 %d, -1
  br i1 %cmp41, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.042 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %idxprom36 = zext i32 %d.addr.042 to i64
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom36
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !18
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.042, -1
  %cmp = icmp sgt i32 %d.addr.042, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !232

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.042, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %idxprom5 = sext i32 %d.addr.0.lcssa to i64
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom5
  %1 = load i64, i64* %arrayidx6, align 8, !tbaa !18
  %cmp737.not = icmp eq i64 %1, 0
  br i1 %cmp737.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 4, i64 %idxprom5
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 5, i64 %idxprom5
  %inc.0 = add nuw i64 0, 1
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !233
  %add = add i64 %2, %src_off
  %3 = inttoptr i64 %add to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !235
  %add3 = add i64 %4, %dst_off
  %5 = inttoptr i64 %add3 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !236
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i64 %6) #14
  br label %if.end

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %inc.phi = phi i64 [ %inc.0, %for.body.lr.ph ], [ %inc.1, %for.body.for.body_crit_edge ]
  %src_off.addr.039 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body.for.body_crit_edge ]
  %dst_off.addr.038 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add13, %for.body.for.body_crit_edge ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.039, i64 %dst_off.addr.038) #15
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !18
  %add10 = add i64 %7, %src_off.addr.039
  %8 = load i64, i64* %arrayidx12, align 8, !tbaa !18
  %add13 = add i64 %8, %dst_off.addr.038
  %9 = load i64, i64* %arrayidx6, align 8, !tbaa !18
  %cmp7 = icmp ult i64 %inc.phi, %9
  br i1 %cmp7, label %for.body.for.body_crit_edge, label %if.end, !llvm.loop !237

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.1 = add nuw i64 %inc.phi, 1
  br label %for.body

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !233
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !235
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !238
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !176
  %2 = ptrtoint i8* %1 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %3 = load i64, i64* %device, align 8, !tbaa !178
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !233
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %4 = load i8*, i8** %host5, align 8, !tbaa !176
  %5 = ptrtoint i8* %4 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %6 = load i64, i64* %device7, align 8, !tbaa !178
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %5, %cond.true4 ], [ %6, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !235
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 4, i32 1
  %7 = load i8, i8* %bits.i, align 1, !tbaa !140
  %conv.i = zext i8 %7 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !236
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 0
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 0
  %arrayidx14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 0
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 1
  %8 = bitcast i64* %arrayidx to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %8, align 8, !tbaa !18
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 1
  %9 = bitcast i64* %arrayidx12 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %9, align 8, !tbaa !18
  %arrayidx14.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 1
  %10 = bitcast i64* %arrayidx14 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %10, align 8, !tbaa !18
  %arrayidx.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 2
  %arrayidx12.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 2
  %arrayidx14.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 2
  %arrayidx.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 3
  %11 = bitcast i64* %arrayidx.2 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %11, align 8, !tbaa !18
  %arrayidx12.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 3
  %12 = bitcast i64* %arrayidx12.2 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %12, align 8, !tbaa !18
  %arrayidx14.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 3
  %13 = bitcast i64* %arrayidx14.2 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %13, align 8, !tbaa !18
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 4
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 4
  %arrayidx14.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 4
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 5
  %14 = bitcast i64* %arrayidx.4 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %14, align 8, !tbaa !18
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 5
  %15 = bitcast i64* %arrayidx12.4 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !18
  %arrayidx14.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 5
  %16 = bitcast i64* %arrayidx14.4 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %16, align 8, !tbaa !18
  %arrayidx.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 6
  %arrayidx12.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 6
  %arrayidx14.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 6
  %arrayidx.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 7
  %17 = bitcast i64* %arrayidx.6 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %17, align 8, !tbaa !18
  %arrayidx12.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 7
  %18 = bitcast i64* %arrayidx12.6 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %18, align 8, !tbaa !18
  %arrayidx14.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 7
  %19 = bitcast i64* %arrayidx14.6 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %19, align 8, !tbaa !18
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 8
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 8
  %arrayidx14.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 8
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 9
  %20 = bitcast i64* %arrayidx.8 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %20, align 8, !tbaa !18
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 9
  %21 = bitcast i64* %arrayidx12.8 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %21, align 8, !tbaa !18
  %arrayidx14.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 9
  %22 = bitcast i64* %arrayidx14.8 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !18
  %arrayidx.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 10
  %arrayidx12.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 10
  %arrayidx14.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 10
  %arrayidx.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 11
  %23 = bitcast i64* %arrayidx.10 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %23, align 8, !tbaa !18
  %arrayidx12.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 11
  %24 = bitcast i64* %arrayidx12.10 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %24, align 8, !tbaa !18
  %arrayidx14.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 11
  %25 = bitcast i64* %arrayidx14.10 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %25, align 8, !tbaa !18
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 12
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 12
  %arrayidx14.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 12
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 13
  %26 = bitcast i64* %arrayidx.12 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %26, align 8, !tbaa !18
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 13
  %27 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %27, align 8, !tbaa !18
  %arrayidx14.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 13
  %28 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %28, align 8, !tbaa !18
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 14
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 14
  %arrayidx14.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 14
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 15
  %29 = bitcast i64* %arrayidx.14 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %29, align 8, !tbaa !18
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 15
  %30 = bitcast i64* %arrayidx12.14 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %30, align 8, !tbaa !18
  %arrayidx14.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 15
  %31 = bitcast i64* %arrayidx14.14 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %31, align 8, !tbaa !18
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %32 = load i32, i32* %dimensions, align 4, !tbaa !179
  %cmp17272 = icmp sgt i32 %32, 0
  br i1 %cmp17272, label %for.body19.lr.ph, label %cond.end8.for.cond.cleanup18_crit_edge

cond.end8.for.cond.cleanup18_crit_edge:           ; preds = %cond.end8
  %mul37.0 = mul i64 %conv, 0
  br label %for.cond.cleanup18

for.body19.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %33 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !180
  %dim23 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %34 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim23, align 8, !tbaa !180
  %wide.trip.count = zext i32 %32 to i64
  %min.iters.check = icmp ult i32 %32, 5
  br i1 %min.iters.check, label %for.body19.preheader, label %vector.ph

for.body19.preheader:                             ; preds = %middle.block, %for.body19.lr.ph
  %indvars.iv284.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %n.vec, %middle.block ]
  %.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %61, %middle.block ]
  br label %for.body19

vector.ph:                                        ; preds = %for.body19.lr.ph
  %n.mod.vf = and i64 %wide.trip.count, 3
  %35 = icmp eq i64 %n.mod.vf, 0
  %36 = select i1 %35, i64 4, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count, %36
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <2 x i64> [ zeroinitializer, %vector.ph ], [ %58, %vector.body ]
  %vec.phi2 = phi <2 x i64> [ zeroinitializer, %vector.ph ], [ %59, %vector.body ]
  %37 = or i64 %index, 2
  %38 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %index, i32 2
  %39 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %37, i32 2
  %40 = getelementptr inbounds i32, i32* %38, i64 -2
  %41 = bitcast i32* %40 to <8 x i32>*
  %42 = getelementptr inbounds i32, i32* %39, i64 -2
  %43 = bitcast i32* %42 to <8 x i32>*
  %wide.vec = load <8 x i32>, <8 x i32>* %41, align 4, !tbaa !37
  %wide.vec3 = load <8 x i32>, <8 x i32>* %43, align 4, !tbaa !37
  %strided.vec5 = shufflevector <8 x i32> %wide.vec, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %strided.vec6 = shufflevector <8 x i32> %wide.vec3, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %44 = sext <2 x i32> %strided.vec5 to <2 x i64>
  %45 = sext <2 x i32> %strided.vec6 to <2 x i64>
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %index, i32 0
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %37, i32 0
  %48 = bitcast i32* %46 to <8 x i32>*
  %49 = bitcast i32* %47 to <8 x i32>*
  %wide.vec7 = load <8 x i32>, <8 x i32>* %48, align 4, !tbaa !217
  %wide.vec8 = load <8 x i32>, <8 x i32>* %49, align 4, !tbaa !217
  %50 = sub nsw <8 x i32> %wide.vec7, %wide.vec
  %51 = shufflevector <8 x i32> %50, <8 x i32> undef, <2 x i32> <i32 0, i32 4>
  %52 = sub nsw <8 x i32> %wide.vec8, %wide.vec3
  %53 = shufflevector <8 x i32> %52, <8 x i32> undef, <2 x i32> <i32 0, i32 4>
  %54 = sext <2 x i32> %51 to <2 x i64>
  %55 = sext <2 x i32> %53 to <2 x i64>
  %56 = mul nsw <2 x i64> %54, %44
  %57 = mul nsw <2 x i64> %55, %45
  %58 = add <2 x i64> %56, %vec.phi
  %59 = add <2 x i64> %57, %vec.phi2
  %index.next = add i64 %index, 4
  %60 = icmp eq i64 %index.next, %n.vec
  br i1 %60, label %middle.block, label %vector.body, !llvm.loop !239

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %59, %58
  %61 = call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br label %for.body19.preheader

for.cond.cleanup18:                               ; preds = %for.body19.for.cond.cleanup18_crit_edge, %cond.end8.for.cond.cleanup18_crit_edge
  %mul37.phi = phi i64 [ %mul37.0, %cond.end8.for.cond.cleanup18_crit_edge ], [ %mul37.1, %for.body19.for.cond.cleanup18_crit_edge ]
  store i64 %mul37.phi, i64* %src_begin, align 8, !tbaa !238
  %dimensions39 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %62 = load i32, i32* %dimensions39, align 4, !tbaa !179
  %cmp40.not = icmp eq i32 %32, %62
  br i1 %cmp40.not, label %lor.lhs.false, label %if.then

for.body19:                                       ; preds = %for.body19.preheader, %for.body19
  %indvars.iv284 = phi i64 [ %indvars.iv.next285, %for.body19 ], [ %indvars.iv284.ph, %for.body19.preheader ]
  %63 = phi i64 [ %add, %for.body19 ], [ %.ph, %for.body19.preheader ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv284, i32 2
  %64 = load i32, i32* %stride, align 4, !tbaa !181
  %conv22 = sext i32 %64 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %indvars.iv284, i32 0
  %65 = load i32, i32* %min, align 4, !tbaa !217
  %min29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv284, i32 0
  %66 = load i32, i32* %min29, align 4, !tbaa !217
  %sub = sub nsw i32 %65, %66
  %conv30 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv30, %conv22
  %add = add i64 %mul, %63
  %indvars.iv.next285 = add nuw nsw i64 %indvars.iv284, 1
  %exitcond286.not = icmp eq i64 %indvars.iv.next285, %wide.trip.count
  br i1 %exitcond286.not, label %for.body19.for.cond.cleanup18_crit_edge, label %for.body19, !llvm.loop !240

for.body19.for.cond.cleanup18_crit_edge:          ; preds = %for.body19
  %mul37.1 = mul i64 %add, %conv
  br label %for.cond.cleanup18

lor.lhs.false:                                    ; preds = %for.cond.cleanup18
  %bits.i253 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 4, i32 1
  %67 = load i8, i8* %bits.i253, align 1, !tbaa !140
  %conv.i254 = zext i8 %67 to i32
  %add.i255 = add nuw nsw i32 %conv.i254, 7
  %div.i256 = lshr i32 %add.i255, 3
  %cmp45.not = icmp ne i32 %div.i, %div.i256
  %cmp48 = icmp sgt i32 %32, 16
  %or.cond261 = or i1 %cmp48, %cmp45.not
  br i1 %or.cond261, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup18
  %68 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %68, i8 0, i64 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp50 = icmp eq i32 %div.i, 0
  br i1 %cmp50, label %if.then51, label %for.cond54.preheader

for.cond54.preheader:                             ; preds = %if.end
  br i1 %cmp17272, label %for.body58.lr.ph, label %while.end

for.body58.lr.ph:                                 ; preds = %for.cond54.preheader
  %dim60 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %69 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim60, align 8, !tbaa !180
  %dim70 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %70 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim70, align 8, !tbaa !180
  %wide.trip.count282 = zext i32 %32 to i64
  br label %for.body58

if.then51:                                        ; preds = %if.end
  %71 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %71, i8 0, i64 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup94
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !236
  %.pre290 = load i64, i64* %arrayidx12, align 8, !tbaa !18
  %cmp139263 = icmp eq i64 %.pre, %.pre290
  br i1 %cmp139263, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre291 = load i64, i64* %arrayidx14, align 8, !tbaa !18
  %72 = bitcast i64* %arrayidx.1 to <2 x i64>*
  %73 = bitcast i64* %arrayidx to <2 x i64>*
  %74 = bitcast i64* %arrayidx12.1 to <2 x i64>*
  %75 = bitcast i64* %arrayidx12 to <2 x i64>*
  %76 = bitcast i64* %arrayidx14.1 to <2 x i64>*
  %77 = bitcast i64* %arrayidx14 to <2 x i64>*
  %78 = bitcast i64* %arrayidx.3 to <2 x i64>*
  %79 = bitcast i64* %arrayidx.2 to <2 x i64>*
  %80 = bitcast i64* %arrayidx12.3 to <2 x i64>*
  %81 = bitcast i64* %arrayidx12.2 to <2 x i64>*
  %82 = bitcast i64* %arrayidx14.3 to <2 x i64>*
  %83 = bitcast i64* %arrayidx14.2 to <2 x i64>*
  %84 = bitcast i64* %arrayidx.5 to <2 x i64>*
  %85 = bitcast i64* %arrayidx.4 to <2 x i64>*
  %86 = bitcast i64* %arrayidx12.5 to <2 x i64>*
  %87 = bitcast i64* %arrayidx12.4 to <2 x i64>*
  %88 = bitcast i64* %arrayidx14.5 to <2 x i64>*
  %89 = bitcast i64* %arrayidx14.4 to <2 x i64>*
  %90 = bitcast i64* %arrayidx.7 to <2 x i64>*
  %91 = bitcast i64* %arrayidx.6 to <2 x i64>*
  %92 = bitcast i64* %arrayidx12.7 to <2 x i64>*
  %93 = bitcast i64* %arrayidx12.6 to <2 x i64>*
  %94 = bitcast i64* %arrayidx14.7 to <2 x i64>*
  %95 = bitcast i64* %arrayidx14.6 to <2 x i64>*
  %96 = bitcast i64* %arrayidx.9 to <2 x i64>*
  %97 = bitcast i64* %arrayidx.8 to <2 x i64>*
  %98 = bitcast i64* %arrayidx12.9 to <2 x i64>*
  %99 = bitcast i64* %arrayidx12.8 to <2 x i64>*
  %100 = bitcast i64* %arrayidx14.9 to <2 x i64>*
  %101 = bitcast i64* %arrayidx14.8 to <2 x i64>*
  %102 = bitcast i64* %arrayidx.11 to <2 x i64>*
  %103 = bitcast i64* %arrayidx.10 to <2 x i64>*
  %104 = bitcast i64* %arrayidx12.11 to <2 x i64>*
  %105 = bitcast i64* %arrayidx12.10 to <2 x i64>*
  %106 = bitcast i64* %arrayidx14.11 to <2 x i64>*
  %107 = bitcast i64* %arrayidx14.10 to <2 x i64>*
  %108 = bitcast i64* %arrayidx.13 to <2 x i64>*
  %109 = bitcast i64* %arrayidx.12 to <2 x i64>*
  %110 = bitcast i64* %arrayidx12.13 to <2 x i64>*
  %111 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  %112 = bitcast i64* %arrayidx14.13 to <2 x i64>*
  %113 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  br label %land.rhs

for.body58:                                       ; preds = %for.cond.cleanup94, %for.body58.lr.ph
  %indvars.iv278 = phi i64 [ 0, %for.body58.lr.ph ], [ %indvars.iv.next279, %for.cond.cleanup94 ]
  %stride63 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %69, i64 %indvars.iv278, i32 2
  %114 = load i32, i32* %stride63, align 4, !tbaa !181
  %conv64 = sext i32 %114 to i64
  %mul68 = mul nsw i64 %conv64, %conv
  %stride73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %70, i64 %indvars.iv278, i32 2
  %115 = load i32, i32* %stride73, align 4, !tbaa !181
  %conv74 = sext i32 %115 to i64
  %mul78 = mul nsw i64 %conv74, %conv
  %cmp80264.not = icmp eq i64 %indvars.iv278, 0
  br i1 %cmp80264.not, label %for.end91, label %for.body81.lr.ph

for.body81.lr.ph:                                 ; preds = %for.body58
  %cmp86.not = icmp eq i64 %mul68, 0
  br i1 %cmp86.not, label %for.body81.preheader, label %for.body81.us

for.body81.preheader:                             ; preds = %for.body81.lr.ph
  %116 = trunc i64 %indvars.iv278 to i32
  br label %for.end91

for.body81.us:                                    ; preds = %for.body81.lr.ph, %for.inc89.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc89.us ], [ 0, %for.body81.lr.ph ]
  %arrayidx84.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv
  %117 = load i64, i64* %arrayidx84.us, align 8, !tbaa !18
  %cmp85.us = icmp ult i64 %mul68, %117
  br i1 %cmp85.us, label %for.end91.loopexit, label %for.inc89.us

for.inc89.us:                                     ; preds = %for.body81.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %indvars.iv278
  br i1 %exitcond.not, label %for.end91.loopexit, label %for.body81.us, !llvm.loop !241

for.end91.loopexit:                               ; preds = %for.inc89.us, %for.body81.us
  %insert.0.lcssa.ph.in = phi i64 [ %indvars.iv278, %for.inc89.us ], [ %indvars.iv, %for.body81.us ]
  %insert.0.lcssa.ph = trunc i64 %insert.0.lcssa.ph.in to i32
  br label %for.end91

for.end91:                                        ; preds = %for.end91.loopexit, %for.body81.preheader, %for.body58
  %insert.0.lcssa = phi i32 [ 0, %for.body58 ], [ %insert.0.lcssa.ph, %for.end91.loopexit ], [ %116, %for.body81.preheader ]
  %118 = zext i32 %insert.0.lcssa to i64
  %cmp93267 = icmp ugt i64 %indvars.iv278, %118
  br i1 %cmp93267, label %for.body95.preheader, label %for.cond.cleanup94

for.body95.preheader:                             ; preds = %for.end91
  %119 = sext i32 %insert.0.lcssa to i64
  br label %for.body95

for.cond.cleanup94:                               ; preds = %for.body95, %for.end91
  %extent122 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %69, i64 %indvars.iv278, i32 1
  %120 = load i32, i32* %extent122, align 4, !tbaa !185
  %conv123 = sext i32 %120 to i64
  %arrayidx126 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %118
  store i64 %conv123, i64* %arrayidx126, align 8, !tbaa !18
  %arrayidx129 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %118
  store i64 %mul68, i64* %arrayidx129, align 8, !tbaa !18
  %arrayidx132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %118
  store i64 %mul78, i64* %arrayidx132, align 8, !tbaa !18
  %indvars.iv.next279 = add nuw nsw i64 %indvars.iv278, 1
  %exitcond283.not = icmp eq i64 %indvars.iv.next279, %wide.trip.count282
  br i1 %exitcond283.not, label %while.cond.preheader, label %for.body58, !llvm.loop !242

for.body95:                                       ; preds = %for.body95, %for.body95.preheader
  %indvars.iv280 = phi i64 [ %indvars.iv278, %for.body95.preheader ], [ %indvars.iv.next281, %for.body95 ]
  %indvars.iv.next281 = add nsw i64 %indvars.iv280, -1
  %arrayidx99 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  %121 = load i64, i64* %arrayidx99, align 8, !tbaa !18
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280
  store i64 %121, i64* %arrayidx102, align 8, !tbaa !18
  %arrayidx106 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  %122 = load i64, i64* %arrayidx106, align 8, !tbaa !18
  %arrayidx109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280
  store i64 %122, i64* %arrayidx109, align 8, !tbaa !18
  %arrayidx113 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  %123 = load i64, i64* %arrayidx113, align 8, !tbaa !18
  %arrayidx116 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280
  store i64 %123, i64* %arrayidx116, align 8, !tbaa !18
  %cmp93 = icmp sgt i64 %indvars.iv.next281, %119
  br i1 %cmp93, label %for.body95, label %for.cond.cleanup94, !llvm.loop !243

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %124 = phi i64 [ %.pre291, %land.rhs.lr.ph ], [ %152, %while.body ]
  %125 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul147, %while.body ]
  %cmp143 = icmp eq i64 %125, %124
  br i1 %cmp143, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %126 = load i64, i64* %arrayidx, align 8, !tbaa !18
  %mul147 = mul i64 %126, %124
  store i64 %mul147, i64* %chunk_size, align 8, !tbaa !236
  %127 = load <2 x i64>, <2 x i64>* %72, align 8, !tbaa !18
  store <2 x i64> %127, <2 x i64>* %73, align 8, !tbaa !18
  %128 = load <2 x i64>, <2 x i64>* %74, align 8, !tbaa !18
  store <2 x i64> %128, <2 x i64>* %75, align 8, !tbaa !18
  %129 = load <2 x i64>, <2 x i64>* %76, align 8, !tbaa !18
  store <2 x i64> %129, <2 x i64>* %77, align 8, !tbaa !18
  %130 = load <2 x i64>, <2 x i64>* %78, align 8, !tbaa !18
  store <2 x i64> %130, <2 x i64>* %79, align 8, !tbaa !18
  %131 = load <2 x i64>, <2 x i64>* %80, align 8, !tbaa !18
  store <2 x i64> %131, <2 x i64>* %81, align 8, !tbaa !18
  %132 = load <2 x i64>, <2 x i64>* %82, align 8, !tbaa !18
  store <2 x i64> %132, <2 x i64>* %83, align 8, !tbaa !18
  %133 = load <2 x i64>, <2 x i64>* %84, align 8, !tbaa !18
  store <2 x i64> %133, <2 x i64>* %85, align 8, !tbaa !18
  %134 = load <2 x i64>, <2 x i64>* %86, align 8, !tbaa !18
  store <2 x i64> %134, <2 x i64>* %87, align 8, !tbaa !18
  %135 = load <2 x i64>, <2 x i64>* %88, align 8, !tbaa !18
  store <2 x i64> %135, <2 x i64>* %89, align 8, !tbaa !18
  %136 = load <2 x i64>, <2 x i64>* %90, align 8, !tbaa !18
  store <2 x i64> %136, <2 x i64>* %91, align 8, !tbaa !18
  %137 = load <2 x i64>, <2 x i64>* %92, align 8, !tbaa !18
  store <2 x i64> %137, <2 x i64>* %93, align 8, !tbaa !18
  %138 = load <2 x i64>, <2 x i64>* %94, align 8, !tbaa !18
  store <2 x i64> %138, <2 x i64>* %95, align 8, !tbaa !18
  %139 = load <2 x i64>, <2 x i64>* %96, align 8, !tbaa !18
  store <2 x i64> %139, <2 x i64>* %97, align 8, !tbaa !18
  %140 = load <2 x i64>, <2 x i64>* %98, align 8, !tbaa !18
  store <2 x i64> %140, <2 x i64>* %99, align 8, !tbaa !18
  %141 = load <2 x i64>, <2 x i64>* %100, align 8, !tbaa !18
  store <2 x i64> %141, <2 x i64>* %101, align 8, !tbaa !18
  %142 = load <2 x i64>, <2 x i64>* %102, align 8, !tbaa !18
  store <2 x i64> %142, <2 x i64>* %103, align 8, !tbaa !18
  %143 = load <2 x i64>, <2 x i64>* %104, align 8, !tbaa !18
  store <2 x i64> %143, <2 x i64>* %105, align 8, !tbaa !18
  %144 = load <2 x i64>, <2 x i64>* %106, align 8, !tbaa !18
  store <2 x i64> %144, <2 x i64>* %107, align 8, !tbaa !18
  %145 = load <2 x i64>, <2 x i64>* %108, align 8, !tbaa !18
  store <2 x i64> %145, <2 x i64>* %109, align 8, !tbaa !18
  %146 = load <2 x i64>, <2 x i64>* %110, align 8, !tbaa !18
  store <2 x i64> %146, <2 x i64>* %111, align 8, !tbaa !18
  %147 = load <2 x i64>, <2 x i64>* %112, align 8, !tbaa !18
  store <2 x i64> %147, <2 x i64>* %113, align 8, !tbaa !18
  %148 = load i64, i64* %arrayidx.15, align 8, !tbaa !18
  store i64 %148, i64* %arrayidx.14, align 8, !tbaa !18
  %149 = load i64, i64* %arrayidx12.15, align 8, !tbaa !18
  store i64 %149, i64* %arrayidx12.14, align 8, !tbaa !18
  %150 = load i64, i64* %arrayidx14.15, align 8, !tbaa !18
  store i64 %150, i64* %arrayidx14.14, align 8, !tbaa !18
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !18
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !18
  store i64 0, i64* %arrayidx14.15, align 8, !tbaa !18
  %151 = extractelement <2 x i64> %128, i32 0
  %cmp139 = icmp eq i64 %mul147, %151
  %152 = extractelement <2 x i64> %129, i32 0
  br i1 %cmp139, label %land.rhs, label %while.end, !llvm.loop !244

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond54.preheader
  %153 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %153, i8* nonnull align 8 dereferenceable(416) %0, i64 416, i1 false), !tbaa.struct !245
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then51, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %key1, i8* %key2, i64 %key_size) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @memcmp(i8* %key1, i8* %key2, i64 %key_size) #14
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

declare i32 @memcmp(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %buf, %struct.halide_dimension_t* %shape) local_unnamed_addr #0 {
entry:
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %0 = load i32, i32* %dimensions, align 4, !tbaa !179
  %cmp9 = icmp sgt i32 %0, 0
  br i1 %cmp9, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !180
  %2 = zext i32 %0 to i64
  br label %for.body

for.cond:                                         ; preds = %_ZNK18halide_dimension_tneERKS_.exit
  %exitcond.not = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond.not, label %return, label %for.body, !llvm.loop !246

for.body:                                         ; preds = %for.cond, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %min.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 0
  %3 = load i32, i32* %min.i.i, align 4, !tbaa !217
  %min2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %min2.i.i, align 4, !tbaa !217
  %cmp.i.i = icmp eq i32 %3, %4
  br i1 %cmp.i.i, label %land.lhs.true.i.i, label %return

land.lhs.true.i.i:                                ; preds = %for.body
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 1
  %5 = load i32, i32* %extent.i.i, align 4, !tbaa !185
  %extent3.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 1
  %6 = load i32, i32* %extent3.i.i, align 4, !tbaa !185
  %cmp4.i.i = icmp eq i32 %5, %6
  br i1 %cmp4.i.i, label %land.lhs.true5.i.i, label %return

land.lhs.true5.i.i:                               ; preds = %land.lhs.true.i.i
  %stride.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 2
  %7 = load i32, i32* %stride.i.i, align 4, !tbaa !181
  %stride6.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 2
  %8 = load i32, i32* %stride6.i.i, align 4, !tbaa !181
  %cmp7.i.i = icmp eq i32 %7, %8
  br i1 %cmp7.i.i, label %_ZNK18halide_dimension_tneERKS_.exit, label %return

_ZNK18halide_dimension_tneERKS_.exit:             ; preds = %land.lhs.true5.i.i
  %flags.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 3
  %9 = load i32, i32* %flags.i.i, align 4, !tbaa !247
  %flags8.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 3
  %10 = load i32, i32* %flags8.i.i, align 4, !tbaa !247
  %cmp9.i.i.not = icmp eq i32 %9, %10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp9.i.i.not, label %for.cond, label %return

return:                                           ; preds = %_ZNK18halide_dimension_tneERKS_.exit, %land.lhs.true5.i.i, %land.lhs.true.i.i, %for.body, %for.cond, %entry
  %cmp.lcssa = phi i1 [ true, %entry ], [ false, %_ZNK18halide_dimension_tneERKS_.exit ], [ true, %for.cond ], [ false, %land.lhs.true5.i.i ], [ false, %land.lhs.true.i.i ], [ false, %for.body ]
  ret i1 %cmp.lcssa
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this, i8* %cache_key, i64 %cache_key_size, i32 %key_hash, %struct.halide_buffer_t* %computed_bounds_buf, i32 %tuples, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key_arg, i64 %eviction_key_arg) local_unnamed_addr #0 align 2 {
entry:
  %frombool = zext i1 %has_eviction_key_arg to i8
  %0 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %this to <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>*
  store <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>* %0, align 8, !tbaa !10
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !248
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 4
  store i64 %cache_key_size, i64* %key_size, align 8, !tbaa !249
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 6
  store i32 %key_hash, i32* %hash, align 8, !tbaa !250
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 7
  store i32 0, i32* %in_use_count, align 4, !tbaa !251
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  store i32 %tuples, i32* %tuple_count, align 8, !tbaa !228
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 5
  %1 = load i32, i32* %dimensions, align 4, !tbaa !179
  %dimensions2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 9
  store i32 %1, i32* %dimensions2, align 4, !tbaa !252
  %conv = zext i32 %tuples to i64
  %mul = mul nuw nsw i64 %conv, 56
  %conv5 = sext i32 %1 to i64
  %add8 = add i32 %tuples, 1
  %conv9 = zext i32 %add8 to i64
  %mul6 = shl nuw nsw i64 %conv9, 4
  %mul10 = mul i64 %mul6, %conv5
  %add11 = add i64 %mul10, %mul
  %add13 = add i64 %add11, %cache_key_size
  %call = tail call i8* @halide_malloc(i8* null, i64 %add13) #14
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  store i8* %call, i8** %metadata_storage, align 8, !tbaa !229
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  %2 = bitcast %struct.halide_buffer_t** %buf to i8**
  store i8* %call, i8** %2, align 8, !tbaa !230
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 %mul
  %computed_bounds = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 10
  %3 = bitcast %struct.halide_dimension_t** %computed_bounds to i8**
  store i8* %add.ptr, i8** %3, align 8, !tbaa !253
  %add.ptr18 = getelementptr inbounds i8, i8* %call, i64 %add11
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 5
  store i8* %add.ptr18, i8** %key, align 8, !tbaa !254
  %4 = load i64, i64* %key_size, align 8, !tbaa !249
  %cmp117.not = icmp eq i64 %4, 0
  br i1 %cmp117.not, label %for.cond23.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %if.end
  %5 = load i8, i8* %cache_key, align 1, !tbaa !14
  store i8 %5, i8* %add.ptr18, align 1, !tbaa !14
  %6 = load i64, i64* %key_size, align 8, !tbaa !249
  %cmp130 = icmp ugt i64 %6, 1
  br i1 %cmp130, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !255

for.cond23.preheader:                             ; preds = %for.body.for.body_crit_edge, %for.body.preheader, %if.end
  %7 = load i32, i32* %dimensions2, align 4, !tbaa !252
  %cmp25115 = icmp sgt i32 %7, 0
  br i1 %cmp25115, label %for.body27.lr.ph, label %for.cond36.preheader

for.body27.lr.ph:                                 ; preds = %for.cond23.preheader
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 6
  br label %for.body27

for.body.for.body_crit_edge:                      ; preds = %for.body.preheader, %for.body.for.body_crit_edge
  %inc131 = phi i64 [ %inc, %for.body.for.body_crit_edge ], [ 1, %for.body.preheader ]
  %.pre = load i8*, i8** %key, align 8, !tbaa !254
  %arrayidx = getelementptr inbounds i8, i8* %cache_key, i64 %inc131
  %8 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %arrayidx21 = getelementptr inbounds i8, i8* %.pre, i64 %inc131
  store i8 %8, i8* %arrayidx21, align 1, !tbaa !14
  %inc = add nuw i64 %inc131, 1
  %9 = load i64, i64* %key_size, align 8, !tbaa !249
  %cmp = icmp ult i64 %inc, %9
  br i1 %cmp, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !255

for.cond36.preheader:                             ; preds = %for.body27, %for.cond23.preheader
  %10 = load i32, i32* %tuple_count, align 8, !tbaa !228
  %cmp38113.not = icmp eq i32 %10, 0
  br i1 %cmp38113.not, label %for.cond.cleanup39, label %for.body40

for.body27:                                       ; preds = %for.body27, %for.body27.lr.ph
  %indvars.iv121 = phi i64 [ 0, %for.body27.lr.ph ], [ %indvars.iv.next122, %for.body27 ]
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !180
  %arrayidx28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 %indvars.iv121
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !253
  %arrayidx31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 %indvars.iv121
  %13 = bitcast %struct.halide_dimension_t* %arrayidx31 to i8*
  %14 = bitcast %struct.halide_dimension_t* %arrayidx28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %13, i8* nonnull align 4 dereferenceable(16) %14, i64 16, i1 false), !tbaa.struct !184
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  %15 = load i32, i32* %dimensions2, align 4, !tbaa !252
  %16 = sext i32 %15 to i64
  %cmp25 = icmp slt i64 %indvars.iv.next122, %16
  br i1 %cmp25, label %for.body27, label %for.cond36.preheader, !llvm.loop !256

for.cond36.loopexit:                              ; preds = %for.body59.for.body59_crit_edge, %for.body59.preheader, %for.body40
  %17 = load i32, i32* %tuple_count, align 8, !tbaa !228
  %18 = zext i32 %17 to i64
  %cmp38 = icmp ult i64 %indvars.iv.next120, %18
  br i1 %cmp38, label %for.body40, label %for.cond.cleanup39, !llvm.loop !257

for.cond.cleanup39:                               ; preds = %for.cond36.loopexit, %for.cond36.preheader
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 13
  store i8 %frombool, i8* %has_eviction_key, align 8, !tbaa !258
  %eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 12
  store i64 %eviction_key_arg, i64* %eviction_key, align 8, !tbaa !259
  br label %cleanup

for.body40:                                       ; preds = %for.cond36.preheader, %for.cond36.loopexit
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %for.cond36.loopexit ], [ 0, %for.cond36.preheader ]
  %arrayidx42 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv119
  %19 = bitcast %struct.halide_buffer_t** %arrayidx42 to i8**
  %20 = load i8*, i8** %19, align 8, !tbaa !10
  %21 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !230
  %arrayidx45 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %21, i64 %indvars.iv119
  %22 = bitcast %struct.halide_buffer_t* %arrayidx45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %22, i8* nonnull align 8 dereferenceable(56) %20, i64 56, i1 false), !tbaa.struct !260
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !253
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv119, 1
  %24 = load i32, i32* %dimensions2, align 4, !tbaa !252
  %25 = trunc i64 %indvars.iv.next120 to i32
  %mul49 = mul i32 %24, %25
  %idx.ext = zext i32 %mul49 to i64
  %add.ptr50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i64 %idx.ext
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !230
  %dim54 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 %indvars.iv119, i32 6
  store %struct.halide_dimension_t* %add.ptr50, %struct.halide_dimension_t** %dim54, align 8, !tbaa !180
  %cmp57111 = icmp sgt i32 %24, 0
  br i1 %cmp57111, label %for.body59.preheader, label %for.cond36.loopexit

for.body59.preheader:                             ; preds = %for.body40
  %27 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62125 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %27, i64 0, i32 6
  %28 = bitcast %struct.halide_dimension_t** %dim62125 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !180
  %30 = bitcast %struct.halide_dimension_t* %add.ptr50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %30, i8* nonnull align 4 dereferenceable(16) %29, i64 16, i1 false), !tbaa.struct !184
  %31 = load i32, i32* %dimensions2, align 4, !tbaa !252
  %cmp57128 = icmp sgt i32 %31, 1
  br i1 %cmp57128, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !262

for.body59.for.body59_crit_edge:                  ; preds = %for.body59.preheader, %for.body59.for.body59_crit_edge
  %indvars.iv.next129 = phi i64 [ %indvars.iv.next, %for.body59.for.body59_crit_edge ], [ 1, %for.body59.preheader ]
  %.pre123 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !230
  %dim68.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %.pre123, i64 %indvars.iv119, i32 6
  %.pre124 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim68.phi.trans.insert, align 8, !tbaa !180
  %32 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %32, i64 0, i32 6
  %33 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim62, align 8, !tbaa !180
  %arrayidx64 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv.next129
  %arrayidx70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre124, i64 %indvars.iv.next129
  %34 = bitcast %struct.halide_dimension_t* %arrayidx70 to i8*
  %35 = bitcast %struct.halide_dimension_t* %arrayidx64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %34, i8* nonnull align 4 dereferenceable(16) %35, i64 16, i1 false), !tbaa.struct !184
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next129, 1
  %36 = load i32, i32* %dimensions2, align 4, !tbaa !252
  %37 = sext i32 %36 to i64
  %cmp57 = icmp slt i64 %indvars.iv.next, %37
  br i1 %cmp57, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !262

cleanup:                                          ; preds = %for.cond.cleanup39, %entry
  %38 = xor i1 %tobool.not, true
  ret i1 %38
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %key, i64 %key_size) local_unnamed_addr #0 {
entry:
  %cmp8.not = icmp eq i64 %key_size, 0
  br i1 %cmp8.not, label %for.cond.cleanup, label %entry.for.body_crit_edge

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw i64 0, 1
  %arrayidx.1 = getelementptr inbounds i8, i8* %key, i64 0
  %add.1 = mul i32 5381, 33
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %h.0.lcssa = phi i32 [ 5381, %entry ], [ %add1, %for.body ]
  ret i32 %h.0.lcssa

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %add.phi = phi i32 [ %add.0, %for.body.for.body_crit_edge ], [ %add.1, %entry.for.body_crit_edge ]
  %arrayidx.phi = phi i8* [ %arrayidx.0, %for.body.for.body_crit_edge ], [ %arrayidx.1, %entry.for.body_crit_edge ]
  %inc.phi = phi i64 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %0 = load i8, i8* %arrayidx.phi, align 1, !tbaa !14
  %conv = zext i8 %0 to i32
  %add1 = add i32 %add.phi, %conv
  %exitcond.not = icmp eq i64 %inc.phi, %key_size
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body.for.body_crit_edge, !llvm.loop !263

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw i64 %inc.phi, 1
  %arrayidx.0 = getelementptr inbounds i8, i8* %key, i64 %inc.phi
  %add.0 = mul i32 %add1, 33
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11prune_cacheEv() local_unnamed_addr #0 {
entry:
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %1 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  %2 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !18
  %cmp84 = icmp sgt i64 %1, %2
  %cmp185 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  %3 = and i1 %cmp185, %cmp84
  br i1 %3, label %while.body, label %while.end42

while.body:                                       ; preds = %entry, %if.end41
  %4 = phi i64 [ %74, %if.end41 ], [ %2, %entry ]
  %5 = phi i64 [ %75, %if.end41 ], [ %1, %entry ]
  %prune_candidate.086 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %6, %if.end41 ], [ %0, %entry ]
  %more_recent2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 1
  %6 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent2, align 8, !tbaa !264
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 7
  %7 = load i32, i32* %in_use_count, align 4, !tbaa !251
  %cmp3 = icmp eq i32 %7, 0
  br i1 %cmp3, label %if.then, label %if.end41

if.then:                                          ; preds = %while.body
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 6
  %8 = load i32, i32* %hash, align 8, !tbaa !250
  %9 = and i32 %8, 255
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %10 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp5 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %10, %prune_candidate.086
  br i1 %cmp5, label %if.then6, label %while.cond9

if.then6:                                         ; preds = %if.then
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %11 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !225
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %11, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  br label %if.end21

while.cond9:                                      ; preds = %if.then, %land.rhs11
  %prev_hash_entry.0 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %12, %land.rhs11 ], [ %10, %if.then ]
  %cmp10.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, null
  br i1 %cmp10.not, label %if.then18, label %land.rhs11

land.rhs11:                                       ; preds = %while.cond9
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  %12 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next12, align 8, !tbaa !225
  %cmp13.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %12, %prune_candidate.086
  br i1 %cmp13.not, label %do.end, label %while.cond9, !llvm.loop !265

if.then18:                                        ; preds = %while.cond9
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.2.42, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %land.rhs11, %if.then18
  %next19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %13 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next19, align 8, !tbaa !225
  %next20 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %13, %"struct.Halide::Runtime::Internal::CacheEntry"** %next20, align 8, !tbaa !225
  br label %if.end21

if.end21:                                         ; preds = %do.end, %if.then6
  %14 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp22 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %14, %prune_candidate.086
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %cmp25.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  br i1 %cmp25.not, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end24
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %15 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !248
  %less_recent27 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %15, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent27, align 8, !tbaa !248
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp29 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %16, %prune_candidate.086
  %less_recent31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !248
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end28
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %17, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %cmp34.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp34.not, label %if.end37, label %if.then35

if.then35:                                        ; preds = %if.end32
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !248
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end32
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 8
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !228
  %cmp3882.not = icmp eq i32 %18, 0
  br i1 %cmp3882.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end37
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 11
  %19 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !230
  %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  %wide.trip.count = zext i32 %18 to i64
  br label %for.body

for.cond.for.cond.cleanup_crit_edge:              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %if.end37
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %prune_candidate.086) #15
  %20 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %20) #14
  %.pre92 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  %.pre93 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !18
  br label %if.end41

for.body:                                         ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %sub89 = phi i64 [ %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted, %for.body.lr.ph ], [ %sub, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 5
  %21 = load i32, i32* %dimensions.i.i, align 4, !tbaa !179
  %cmp19.i.i = icmp sgt i32 %21, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body
  %sub.i.neg.0 = add i64 0, -1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !180
  %wide.trip.count.i.i = zext i32 %21 to i64
  %min.iters.check28 = icmp ult i32 %21, 3
  br i1 %min.iters.check28, label %for.body.i.i.preheader, label %vector.ph29

vector.ph29:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec31 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body27

vector.body27:                                    ; preds = %pred.load.continue43, %vector.ph29
  %index32 = phi i64 [ 0, %vector.ph29 ], [ %index.next33, %pred.load.continue43 ]
  %vec.phi38 = phi i64 [ 0, %vector.ph29 ], [ %predphi44, %pred.load.continue43 ]
  %vec.phi39 = phi i64 [ 0, %vector.ph29 ], [ %predphi45, %pred.load.continue43 ]
  %induction37 = or i64 %index32, 1
  %23 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index32, i32 2
  %24 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction37, i32 2
  %25 = load i32, i32* %23, align 4, !tbaa !181
  %26 = load i32, i32* %24, align 4, !tbaa !181
  %27 = icmp sgt i32 %25, 0
  %28 = icmp sgt i32 %26, 0
  %29 = zext i32 %25 to i64
  %30 = zext i32 %26 to i64
  br i1 %27, label %pred.load.if40, label %pred.load.continue41

pred.load.if40:                                   ; preds = %vector.body27
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index32, i32 1
  %32 = load i32, i32* %31, align 4, !tbaa !185
  br label %pred.load.continue41

pred.load.continue41:                             ; preds = %pred.load.if40, %vector.body27
  %33 = phi i32 [ poison, %vector.body27 ], [ %32, %pred.load.if40 ]
  br i1 %28, label %pred.load.if42, label %pred.load.continue43

pred.load.if42:                                   ; preds = %pred.load.continue41
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction37, i32 1
  %35 = load i32, i32* %34, align 4, !tbaa !185
  br label %pred.load.continue43

pred.load.continue43:                             ; preds = %pred.load.if42, %pred.load.continue41
  %36 = phi i32 [ poison, %pred.load.continue41 ], [ %35, %pred.load.if42 ]
  %37 = add nsw i32 %33, -1
  %38 = add nsw i32 %36, -1
  %39 = sext i32 %37 to i64
  %40 = sext i32 %38 to i64
  %41 = mul nsw i64 %39, %29
  %42 = mul nsw i64 %40, %30
  %43 = select i1 %27, i64 %41, i64 0
  %predphi44 = add i64 %vec.phi38, %43
  %44 = select i1 %28, i64 %42, i64 0
  %predphi45 = add i64 %vec.phi39, %44
  %index.next33 = add i64 %index32, 2
  %45 = icmp eq i64 %index.next33, %n.vec31
  br i1 %45, label %middle.block25, label %vector.body27, !llvm.loop !266

middle.block25:                                   ; preds = %pred.load.continue43
  %bin.rdx46 = add i64 %predphi45, %predphi44
  %cmp.n35 = icmp eq i64 %n.vec31, %wide.trip.count.i.i
  br i1 %cmp.n35, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block25
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec31, %middle.block25 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx46, %middle.block25 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 2
  %46 = load i32, i32* %stride2.i.i, align 4, !tbaa !181
  %cmp3.i.i = icmp sgt i32 %46, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %46 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 1
  %47 = load i32, i32* %extent.i.i, align 4, !tbaa !185
  %sub.i.i = add nsw i32 %47, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !267

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block25
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx46, %middle.block25 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check = icmp ult i32 %21, 3
  br i1 %min.iters.check, label %for.body.i13.i.preheader48, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue23, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue23 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue23 ]
  %vec.phi21 = phi i64 [ 0, %vector.ph ], [ %predphi24, %pred.load.continue23 ]
  %induction20 = or i64 %index, 1
  %48 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 2
  %49 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction20, i32 2
  %50 = load i32, i32* %48, align 4, !tbaa !181
  %51 = load i32, i32* %49, align 4, !tbaa !181
  %52 = icmp slt i32 %50, 0
  %53 = icmp slt i32 %51, 0
  %54 = sext i32 %50 to i64
  %55 = sext i32 %51 to i64
  br i1 %52, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %56 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 1
  %57 = load i32, i32* %56, align 4, !tbaa !185
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %58 = phi i32 [ poison, %vector.body ], [ %57, %pred.load.if ]
  br i1 %53, label %pred.load.if22, label %pred.load.continue23

pred.load.if22:                                   ; preds = %pred.load.continue
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction20, i32 1
  %60 = load i32, i32* %59, align 4, !tbaa !185
  br label %pred.load.continue23

pred.load.continue23:                             ; preds = %pred.load.if22, %pred.load.continue
  %61 = phi i32 [ poison, %pred.load.continue ], [ %60, %pred.load.if22 ]
  %62 = add nsw i32 %58, -1
  %63 = add nsw i32 %61, -1
  %64 = sext i32 %62 to i64
  %65 = sext i32 %63 to i64
  %66 = mul nsw i64 %64, %54
  %67 = mul nsw i64 %65, %55
  %68 = select i1 %52, i64 %66, i64 0
  %predphi = add i64 %vec.phi, %68
  %69 = select i1 %53, i64 %67, i64 0
  %predphi24 = add i64 %vec.phi21, %69
  %index.next = add i64 %index, 2
  %70 = icmp eq i64 %index.next, %n.vec
  br i1 %70, label %middle.block, label %vector.body, !llvm.loop !268

middle.block:                                     ; preds = %pred.load.continue23
  %bin.rdx = add i64 %predphi24, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader48

for.body.i13.i.preheader48:                       ; preds = %for.body.i13.i.preheader, %middle.block
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader48, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader48 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader48 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 2
  %71 = load i32, i32* %stride2.i11.i, align 4, !tbaa !181
  %cmp3.i12.i = icmp slt i32 %71, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %71 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 1
  %72 = load i32, i32* %extent.i15.i, align 4, !tbaa !185
  %sub.i16.i = add nsw i32 %72, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !269

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i.neg = xor i64 %index.1.i.i.lcssa, -1
  %sub.i.neg.1 = add i64 %index.1.i21.i.lcssa, %add8.i.i.neg
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.neg.phi = phi i64 [ %sub.i.neg.0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.neg.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 4, i32 1
  %73 = load i8, i8* %bits.i.i, align 1, !tbaa !140
  %conv.i.i = zext i8 %73 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i.neg = mul i64 %div.i.i, %sub.i.neg.phi
  %sub = add i64 %mul.i.neg, %sub89
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.for.cond.cleanup_crit_edge, label %for.body, !llvm.loop !270

if.end41:                                         ; preds = %for.cond.cleanup, %while.body
  %74 = phi i64 [ %.pre93, %for.cond.cleanup ], [ %4, %while.body ]
  %75 = phi i64 [ %.pre92, %for.cond.cleanup ], [ %5, %while.body ]
  %cmp = icmp sgt i64 %75, %74
  %cmp1 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %76 = and i1 %cmp1, %cmp
  br i1 %76, label %while.body, label %while.end42, !llvm.loop !271

while.end42:                                      ; preds = %if.end41, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_set_size(i64 %size) local_unnamed_addr #4 {
entry:
  %cmp = icmp eq i64 %size, 0
  %spec.store.select = select i1 %cmp, i64 1048576, i64 %size
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  store i64 %spec.store.select, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !18
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_lookup(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers) local_unnamed_addr #4 {
entry:
  %conv = sext i32 %size to i64
  %call = tail call i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %cache_key, i64 %conv) #15
  %0 = and i32 %call, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry3.0220 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp.not221 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0220, null
  br i1 %cmp.not221, label %for.cond75.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %cmp16215 = icmp sgt i32 %tuple_count, 0
  %1 = sext i32 %tuple_count to i64
  br i1 %cmp16215, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.lr.ph, %if.end73.us
  %entry3.0222.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0.us, %if.end73.us ], [ %entry3.0220, %while.body.lr.ph ]
  %hash.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 6
  %2 = load i32, i32* %hash.us, align 8, !tbaa !250
  %cmp4.us = icmp eq i32 %2, %call
  br i1 %cmp4.us, label %land.lhs.true.us, label %if.end73.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 4
  %3 = load i64, i64* %key_size.us, align 8, !tbaa !249
  %cmp6.us = icmp eq i64 %3, %conv
  br i1 %cmp6.us, label %land.lhs.true7.us, label %if.end73.us

land.lhs.true7.us:                                ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 5
  %4 = load i8*, i8** %key.us, align 8, !tbaa !254
  %call9.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %4, i8* %cache_key, i64 %conv) #15
  br i1 %call9.us, label %land.lhs.true10.us, label %if.end73.us

land.lhs.true10.us:                               ; preds = %land.lhs.true7.us
  %computed_bounds11.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 10
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11.us, align 8, !tbaa !253
  %call12.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %5) #15
  br i1 %call12.us, label %land.lhs.true13.us, label %if.end73.us

land.lhs.true13.us:                               ; preds = %land.lhs.true10.us
  %tuple_count14.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 8
  %6 = load i32, i32* %tuple_count14.us, align 8, !tbaa !228
  %cmp15.us = icmp eq i32 %6, %tuple_count
  br i1 %cmp15.us, label %for.cond.preheader.us, label %if.end73.us

for.cond.preheader.us:                            ; preds = %land.lhs.true13.us
  %buf.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 11
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %for.cond.preheader.us
  %indvars.iv226.us = phi i64 [ 0, %for.cond.preheader.us ], [ %indvars.iv.next227.us, %for.body.us ]
  %arrayidx18.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv226.us
  %7 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx18.us, align 8, !tbaa !10
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf.us, align 8, !tbaa !230
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %8, i64 %indvars.iv226.us, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !180
  %call21.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %7, %struct.halide_dimension_t* %9) #15
  %indvars.iv.next227.us = add nuw nsw i64 %indvars.iv226.us, 1
  %cmp16.us = icmp slt i64 %indvars.iv.next227.us, %1
  %10 = and i1 %cmp16.us, %call21.us
  br i1 %10, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !272

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call21.us, label %if.then23, label %if.end73.us

if.end73.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true13.us, %land.lhs.true10.us, %land.lhs.true7.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 0
  %entry3.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0.us, null
  br i1 %cmp.not.us, label %for.cond75.preheader, label %while.body.us, !llvm.loop !273

for.cond75.preheader:                             ; preds = %if.end73, %if.end73.us, %entry
  %cmp76210 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp76210, label %for.body78.preheader, label %cleanup119

for.body78.preheader:                             ; preds = %for.cond75.preheader
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body78

while.body:                                       ; preds = %while.body.lr.ph, %if.end73
  %entry3.0222 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0, %if.end73 ], [ %entry3.0220, %while.body.lr.ph ]
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 6
  %11 = load i32, i32* %hash, align 8, !tbaa !250
  %cmp4 = icmp eq i32 %11, %call
  br i1 %cmp4, label %land.lhs.true, label %if.end73

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 4
  %12 = load i64, i64* %key_size, align 8, !tbaa !249
  %cmp6 = icmp eq i64 %12, %conv
  br i1 %cmp6, label %land.lhs.true7, label %if.end73

land.lhs.true7:                                   ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 5
  %13 = load i8*, i8** %key, align 8, !tbaa !254
  %call9 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %13, i8* %cache_key, i64 %conv) #15
  br i1 %call9, label %land.lhs.true10, label %if.end73

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %computed_bounds11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 10
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11, align 8, !tbaa !253
  %call12 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %14) #15
  br i1 %call12, label %land.lhs.true13, label %if.end73

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %tuple_count14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 8
  %15 = load i32, i32* %tuple_count14, align 8, !tbaa !228
  %cmp15 = icmp eq i32 %15, %tuple_count
  br i1 %cmp15, label %if.then23, label %if.end73

if.then23:                                        ; preds = %land.lhs.true13, %for.cond.cleanup.us
  %.us-phi = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0222.us, %for.cond.cleanup.us ], [ %entry3.0222, %land.lhs.true13 ]
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp24.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %16
  br i1 %cmp24.not, label %if.end57, label %do.body

do.body:                                          ; preds = %if.then23
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 1
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !264
  %cmp26.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp26.not, label %if.then27, label %do.end

if.then27:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.3.43, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then27, %do.body
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 2
  %18 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !248
  %cmp28.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %18, null
  br i1 %cmp28.not, label %do.body33, label %if.then29

if.then29:                                        ; preds = %do.end
  %19 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !264
  %more_recent32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %18, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %19, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent32, align 8, !tbaa !264
  %.pr = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !264
  br label %do.body41

do.body33:                                        ; preds = %do.end
  %20 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp34 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %20, %.us-phi
  br i1 %cmp34, label %do.end38, label %if.then35

if.then35:                                        ; preds = %do.body33
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.44, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end38

do.end38:                                         ; preds = %if.then35, %do.body33
  %21 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !264
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %21, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %do.body41

do.body41:                                        ; preds = %do.end38, %if.then29
  %22 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pr, %if.then29 ], [ %21, %do.end38 ]
  %cmp43.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %22, null
  br i1 %cmp43.not, label %if.then44, label %do.end47

if.then44:                                        ; preds = %do.body41
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.5.45, i64 0, i64 0)) #14
  tail call void @abort() #14
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !264
  br label %do.end47

do.end47:                                         ; preds = %if.then44, %do.body41
  %23 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pre, %if.then44 ], [ %22, %do.body41 ]
  %24 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !248
  %less_recent50 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %23, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %24, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent50, align 8, !tbaa !248
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !264
  %25 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %25, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !248
  %cmp53.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %25, null
  br i1 %cmp53.not, label %if.end56, label %if.then54

if.then54:                                        ; preds = %do.end47
  %more_recent55 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %25, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent55, align 8, !tbaa !264
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %do.end47
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then23
  br i1 %cmp16215, label %for.body62.lr.ph, label %cleanup119.loopexit223

for.body62.lr.ph:                                 ; preds = %if.end57
  %buf66 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 11
  %wide.trip.count230 = zext i32 %tuple_count to i64
  br label %for.body62

for.body62:                                       ; preds = %for.body62, %for.body62.lr.ph
  %indvars.iv228 = phi i64 [ 0, %for.body62.lr.ph ], [ %indvars.iv.next229, %for.body62 ]
  %arrayidx65 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228
  %26 = bitcast %struct.halide_buffer_t** %arrayidx65 to i8**
  %27 = load i8*, i8** %26, align 8, !tbaa !10
  %28 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !230
  %arrayidx68 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %28, i64 %indvars.iv228
  %29 = bitcast %struct.halide_buffer_t* %arrayidx68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %27, i8* nonnull align 8 dereferenceable(56) %29, i64 56, i1 false), !tbaa.struct !260
  %indvars.iv.next229 = add nuw nsw i64 %indvars.iv228, 1
  %exitcond231.not = icmp eq i64 %indvars.iv.next229, %wide.trip.count230
  br i1 %exitcond231.not, label %cleanup119.loopexit223, label %for.body62, !llvm.loop !274

if.end73:                                         ; preds = %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 0
  %entry3.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0, null
  br i1 %cmp.not, label %for.cond75.preheader, label %while.body, !llvm.loop !273

for.body78:                                       ; preds = %for.inc114, %for.body78.preheader
  %indvars.iv = phi i64 [ 0, %for.body78.preheader ], [ %indvars.iv.next, %for.inc114 ]
  %arrayidx81 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %30 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx81, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 5
  %31 = load i32, i32* %dimensions.i.i, align 4, !tbaa !179
  %cmp19.i.i = icmp sgt i32 %31, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body78
  %sub.i.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body78
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 6
  %32 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !180
  %wide.trip.count.i.i = zext i32 %31 to i64
  %min.iters.check38 = icmp ult i32 %31, 3
  br i1 %min.iters.check38, label %for.body.i.i.preheader, label %vector.ph39

vector.ph39:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec41 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body37

vector.body37:                                    ; preds = %pred.load.continue53, %vector.ph39
  %index42 = phi i64 [ 0, %vector.ph39 ], [ %index.next43, %pred.load.continue53 ]
  %vec.phi48 = phi i64 [ 0, %vector.ph39 ], [ %predphi54, %pred.load.continue53 ]
  %vec.phi49 = phi i64 [ 0, %vector.ph39 ], [ %predphi55, %pred.load.continue53 ]
  %induction47 = or i64 %index42, 1
  %33 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index42, i32 2
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction47, i32 2
  %35 = load i32, i32* %33, align 4, !tbaa !181
  %36 = load i32, i32* %34, align 4, !tbaa !181
  %37 = icmp sgt i32 %35, 0
  %38 = icmp sgt i32 %36, 0
  %39 = zext i32 %35 to i64
  %40 = zext i32 %36 to i64
  br i1 %37, label %pred.load.if50, label %pred.load.continue51

pred.load.if50:                                   ; preds = %vector.body37
  %41 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index42, i32 1
  %42 = load i32, i32* %41, align 4, !tbaa !185
  br label %pred.load.continue51

pred.load.continue51:                             ; preds = %pred.load.if50, %vector.body37
  %43 = phi i32 [ poison, %vector.body37 ], [ %42, %pred.load.if50 ]
  br i1 %38, label %pred.load.if52, label %pred.load.continue53

pred.load.if52:                                   ; preds = %pred.load.continue51
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction47, i32 1
  %45 = load i32, i32* %44, align 4, !tbaa !185
  br label %pred.load.continue53

pred.load.continue53:                             ; preds = %pred.load.if52, %pred.load.continue51
  %46 = phi i32 [ poison, %pred.load.continue51 ], [ %45, %pred.load.if52 ]
  %47 = add nsw i32 %43, -1
  %48 = add nsw i32 %46, -1
  %49 = sext i32 %47 to i64
  %50 = sext i32 %48 to i64
  %51 = mul nsw i64 %49, %39
  %52 = mul nsw i64 %50, %40
  %53 = select i1 %37, i64 %51, i64 0
  %predphi54 = add i64 %vec.phi48, %53
  %54 = select i1 %38, i64 %52, i64 0
  %predphi55 = add i64 %vec.phi49, %54
  %index.next43 = add i64 %index42, 2
  %55 = icmp eq i64 %index.next43, %n.vec41
  br i1 %55, label %middle.block35, label %vector.body37, !llvm.loop !275

middle.block35:                                   ; preds = %pred.load.continue53
  %bin.rdx56 = add i64 %predphi55, %predphi54
  %cmp.n45 = icmp eq i64 %n.vec41, %wide.trip.count.i.i
  br i1 %cmp.n45, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block35
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec41, %middle.block35 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx56, %middle.block35 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i.i, i32 2
  %56 = load i32, i32* %stride2.i.i, align 4, !tbaa !181
  %cmp3.i.i = icmp sgt i32 %56, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %56 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i.i, i32 1
  %57 = load i32, i32* %extent.i.i, align 4, !tbaa !185
  %sub.i.i = add nsw i32 %57, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !276

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block35
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx56, %middle.block35 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check = icmp ult i32 %31, 3
  br i1 %min.iters.check, label %for.body.i13.i.preheader58, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue33, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue33 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue33 ]
  %vec.phi31 = phi i64 [ 0, %vector.ph ], [ %predphi34, %pred.load.continue33 ]
  %induction30 = or i64 %index, 1
  %58 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index, i32 2
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction30, i32 2
  %60 = load i32, i32* %58, align 4, !tbaa !181
  %61 = load i32, i32* %59, align 4, !tbaa !181
  %62 = icmp slt i32 %60, 0
  %63 = icmp slt i32 %61, 0
  %64 = sext i32 %60 to i64
  %65 = sext i32 %61 to i64
  br i1 %62, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %66 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index, i32 1
  %67 = load i32, i32* %66, align 4, !tbaa !185
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %68 = phi i32 [ poison, %vector.body ], [ %67, %pred.load.if ]
  br i1 %63, label %pred.load.if32, label %pred.load.continue33

pred.load.if32:                                   ; preds = %pred.load.continue
  %69 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction30, i32 1
  %70 = load i32, i32* %69, align 4, !tbaa !185
  br label %pred.load.continue33

pred.load.continue33:                             ; preds = %pred.load.if32, %pred.load.continue
  %71 = phi i32 [ poison, %pred.load.continue ], [ %70, %pred.load.if32 ]
  %72 = add nsw i32 %68, -1
  %73 = add nsw i32 %71, -1
  %74 = sext i32 %72 to i64
  %75 = sext i32 %73 to i64
  %76 = mul nsw i64 %74, %64
  %77 = mul nsw i64 %75, %65
  %78 = select i1 %62, i64 %76, i64 0
  %predphi = add i64 %vec.phi, %78
  %79 = select i1 %63, i64 %77, i64 0
  %predphi34 = add i64 %vec.phi31, %79
  %index.next = add i64 %index, 2
  %80 = icmp eq i64 %index.next, %n.vec
  br i1 %80, label %middle.block, label %vector.body, !llvm.loop !277

middle.block:                                     ; preds = %pred.load.continue33
  %bin.rdx = add i64 %predphi34, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader58

for.body.i13.i.preheader58:                       ; preds = %for.body.i13.i.preheader, %middle.block
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader58, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader58 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader58 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i10.i, i32 2
  %81 = load i32, i32* %stride2.i11.i, align 4, !tbaa !181
  %cmp3.i12.i = icmp slt i32 %81, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %81 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i10.i, i32 1
  %82 = load i32, i32* %extent.i15.i, align 4, !tbaa !185
  %sub.i16.i = add nsw i32 %82, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !278

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.phi = phi i64 [ %sub.i.0, %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 4, i32 1
  %83 = load i8, i8* %bits.i.i, align 1, !tbaa !140
  %conv.i.i = zext i8 %83 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i.phi
  %add84 = add i64 %mul.i, 32
  %call85 = tail call i8* @halide_malloc(i8* %user_context, i64 %add84) #14
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 2
  store i8* %call85, i8** %host, align 8, !tbaa !176
  %cmp87 = icmp eq i8* %call85, null
  br i1 %cmp87, label %for.cond89.preheader, label %for.inc114

for.cond89.preheader:                             ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %cmp90208.not = icmp eq i64 %indvars.iv, 0
  br i1 %cmp90208.not, label %cleanup119, label %for.body92

for.body92:                                       ; preds = %for.cond89.preheader, %for.body92
  %indvars.iv224 = phi i64 [ %indvars.iv.next225, %for.body92 ], [ %indvars.iv, %for.cond89.preheader ]
  %sub = add nuw nsw i64 %indvars.iv224, 4294967295
  %84 = and i64 %sub, 4294967295
  %arrayidx94 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %84
  %85 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host95 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %85, i64 0, i32 2
  %86 = load i8*, i8** %host95, align 8, !tbaa !176
  %call96 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %86) #15
  %87 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call96 to i8*
  tail call void @halide_free(i8* %user_context, i8* %87) #14
  %88 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host100 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %88, i64 0, i32 2
  store i8* null, i8** %host100, align 8, !tbaa !176
  %89 = icmp sgt i64 %indvars.iv224, 1
  %indvars.iv.next225 = add nsw i64 %indvars.iv224, -1
  br i1 %89, label %for.body92, label %cleanup119, !llvm.loop !279

for.inc114:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %add.ptr = getelementptr inbounds i8, i8* %call85, i64 32
  store i8* %add.ptr, i8** %host, align 8, !tbaa !176
  %call108 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* nonnull %add.ptr) #15
  %hash109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 1
  store i32 %call, i32* %hash109, align 8, !tbaa !280
  %entry110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry110, align 8, !tbaa !282
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %cleanup119, label %for.body78, !llvm.loop !283

cleanup119.loopexit223:                           ; preds = %for.body62, %if.end57
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 7
  %90 = load i32, i32* %in_use_count, align 4, !tbaa !251
  %add = add i32 %90, %tuple_count
  store i32 %add, i32* %in_use_count, align 4, !tbaa !251
  br label %cleanup119

cleanup119:                                       ; preds = %for.inc114, %for.body92, %cleanup119.loopexit223, %for.cond89.preheader, %for.cond75.preheader
  %retval.6 = phi i32 [ 1, %for.cond75.preheader ], [ 0, %cleanup119.loopexit223 ], [ -1, %for.cond89.preheader ], [ -1, %for.body92 ], [ 1, %for.inc114 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  ret i32 %retval.6
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_store(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  %0 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, align 8, !tbaa !10
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %0, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !176
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %1) #15
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 1
  %2 = load i32, i32* %hash, align 8, !tbaa !280
  %3 = and i32 %2, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  %idxprom = zext i32 %3 to i64
  %arrayidx7 = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry6.0228 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %cmp.not229 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0228, null
  br i1 %cmp.not229, label %for.cond61.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %conv10 = sext i32 %size to i64
  %cmp22221 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp22221, label %while.body.us.preheader, label %while.body

while.body.us.preheader:                          ; preds = %while.body.lr.ph
  %4 = zext i32 %tuple_count to i64
  br label %while.body.us

while.body.us:                                    ; preds = %if.end59.us, %while.body.us.preheader
  %entry6.0230.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0.us, %if.end59.us ], [ %entry6.0228, %while.body.us.preheader ]
  %hash8.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 6
  %5 = load i32, i32* %hash8.us, align 8, !tbaa !250
  %cmp9.us = icmp eq i32 %5, %2
  br i1 %cmp9.us, label %land.lhs.true.us, label %if.end59.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 4
  %6 = load i64, i64* %key_size.us, align 8, !tbaa !249
  %cmp11.us = icmp eq i64 %6, %conv10
  br i1 %cmp11.us, label %land.lhs.true12.us, label %if.end59.us

land.lhs.true12.us:                               ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 5
  %7 = load i8*, i8** %key.us, align 8, !tbaa !254
  %call14.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %7, i8* %cache_key, i64 %conv10) #15
  br i1 %call14.us, label %land.lhs.true15.us, label %if.end59.us

land.lhs.true15.us:                               ; preds = %land.lhs.true12.us
  %computed_bounds16.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 10
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16.us, align 8, !tbaa !253
  %call17.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %8) #15
  br i1 %call17.us, label %land.lhs.true18.us, label %if.end59.us

land.lhs.true18.us:                               ; preds = %land.lhs.true15.us
  %tuple_count19.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 8
  %9 = load i32, i32* %tuple_count19.us, align 8, !tbaa !228
  %cmp20.us = icmp eq i32 %9, %tuple_count
  br i1 %cmp20.us, label %for.body.lr.ph.us, label %if.end59.us

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call30.us, label %do.body.us, label %if.end59.us

do.body.us:                                       ; preds = %for.cond.cleanup.us
  %10 = and i8 %spec.select.us, 1
  %tobool41.not.us = icmp eq i8 %10, 0
  br i1 %tobool41.not.us, label %if.then42.us, label %for.body48.us.preheader

for.body48.us.preheader:                          ; preds = %if.then42.us, %do.body.us
  %indvars.iv.next245.1 = add nuw nsw i64 0, 1
  %arrayidx50.us.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 0
  br label %for.body48.us

if.then42.us:                                     ; preds = %do.body.us
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.9.46, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %for.body48.us.preheader

if.end59.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true18.us, %land.lhs.true15.us, %land.lhs.true12.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 0
  %entry6.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0.us, null
  br i1 %cmp.not.us, label %for.cond61.preheader, label %while.body.us, !llvm.loop !284

for.body48.us:                                    ; preds = %for.body48.us.for.body48.us_crit_edge, %for.body48.us.preheader
  %arrayidx50.us.phi = phi %struct.halide_buffer_t** [ %arrayidx50.us.0, %for.body48.us.for.body48.us_crit_edge ], [ %arrayidx50.us.1, %for.body48.us.preheader ]
  %indvars.iv.next245.phi = phi i64 [ %indvars.iv.next245.0, %for.body48.us.for.body48.us_crit_edge ], [ %indvars.iv.next245.1, %for.body48.us.preheader ]
  %11 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx50.us.phi, align 8, !tbaa !10
  %host51.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %11, i64 0, i32 2
  %12 = load i8*, i8** %host51.us, align 8, !tbaa !176
  %call52.us = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %12) #15
  %entry53.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call52.us, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry53.us, align 8, !tbaa !282
  %exitcond247.not = icmp eq i64 %indvars.iv.next245.phi, %4
  br i1 %exitcond247.not, label %cleanup132, label %for.body48.us.for.body48.us_crit_edge, !llvm.loop !285

for.body48.us.for.body48.us_crit_edge:            ; preds = %for.body48.us
  %indvars.iv.next245.0 = add nuw nsw i64 %indvars.iv.next245.phi, 1
  %arrayidx50.us.0 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next245.phi
  br label %for.body48.us

for.body.us:                                      ; preds = %for.body.lr.ph.us, %for.body.us
  %13 = phi %struct.halide_buffer_t* [ %.pre, %for.body.lr.ph.us ], [ %16, %for.body.us ]
  %indvars.iv242 = phi i64 [ 0, %for.body.lr.ph.us ], [ %indvars.iv.next243, %for.body.us ]
  %no_host_pointers_equal.0222.us = phi i8 [ 1, %for.body.lr.ph.us ], [ %spec.select.us, %for.body.us ]
  %arrayidx24.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv242
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx24.us, align 8, !tbaa !10
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %13, i64 %indvars.iv242, i32 6
  %15 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !180
  %call30.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %14, %struct.halide_dimension_t* %15) #15
  %16 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !230
  %host35.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %16, i64 %indvars.iv242, i32 2
  %17 = load i8*, i8** %host35.us, align 8, !tbaa !176
  %host36.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %14, i64 0, i32 2
  %18 = load i8*, i8** %host36.us, align 8, !tbaa !176
  %cmp37.us = icmp eq i8* %17, %18
  %spec.select.us = select i1 %cmp37.us, i8 0, i8 %no_host_pointers_equal.0222.us
  %indvars.iv.next243 = add nuw nsw i64 %indvars.iv242, 1
  %cmp22.us = icmp ult i64 %indvars.iv.next243, %4
  %19 = and i1 %cmp22.us, %call30.us
  br i1 %19, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !286

for.body.lr.ph.us:                                ; preds = %land.lhs.true18.us
  %buf27.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 11
  %.pre = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !230
  br label %for.body.us

for.cond61.preheader:                             ; preds = %if.end59, %if.end59.us, %entry
  %cmp62218 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp62218, label %for.body64.preheader, label %for.cond.cleanup63

for.body64.preheader:                             ; preds = %for.cond61.preheader
  %wide.trip.count240 = zext i32 %tuple_count to i64
  br label %for.body64

while.body:                                       ; preds = %while.body.lr.ph, %if.end59
  %entry6.0230 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0, %if.end59 ], [ %entry6.0228, %while.body.lr.ph ]
  %hash8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 6
  %20 = load i32, i32* %hash8, align 8, !tbaa !250
  %cmp9 = icmp eq i32 %20, %2
  br i1 %cmp9, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 4
  %21 = load i64, i64* %key_size, align 8, !tbaa !249
  %cmp11 = icmp eq i64 %21, %conv10
  br i1 %cmp11, label %land.lhs.true12, label %if.end59

land.lhs.true12:                                  ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 5
  %22 = load i8*, i8** %key, align 8, !tbaa !254
  %call14 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %22, i8* %cache_key, i64 %conv10) #15
  br i1 %call14, label %land.lhs.true15, label %if.end59

land.lhs.true15:                                  ; preds = %land.lhs.true12
  %computed_bounds16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 10
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16, align 8, !tbaa !253
  %call17 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %23) #15
  br i1 %call17, label %land.lhs.true18, label %if.end59

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %tuple_count19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 8
  %24 = load i32, i32* %tuple_count19, align 8, !tbaa !228
  %cmp20 = icmp eq i32 %24, %tuple_count
  br i1 %cmp20, label %cleanup132, label %if.end59

if.end59:                                         ; preds = %land.lhs.true18, %land.lhs.true15, %land.lhs.true12, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 0
  %entry6.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0, null
  br i1 %cmp.not, label %for.cond61.preheader, label %while.body, !llvm.loop !284

for.cond.cleanup63:                               ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.cond61.preheader
  %added_size.0.lcssa = phi i64 [ 0, %for.cond61.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %25 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  %add73 = add i64 %25, %added_size.0.lcssa
  store i64 %add73, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #15
  %call74 = tail call i8* @halide_malloc(i8* null, i64 96) #14
  %tobool75.not = icmp eq i8* %call74, null
  br i1 %tobool75.not, label %if.then83, label %if.then76

for.body64:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body64.preheader
  %indvars.iv238 = phi i64 [ 0, %for.body64.preheader ], [ %indvars.iv.next239, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %added_size.0219 = phi i64 [ 0, %for.body64.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %arrayidx67 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv238
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx67, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 5
  %27 = load i32, i32* %dimensions.i.i, align 4, !tbaa !179
  %cmp19.i.i = icmp sgt i32 %27, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body64
  %sub.i.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body64
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 6
  %28 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !180
  %wide.trip.count.i.i = zext i32 %27 to i64
  %min.iters.check24 = icmp ult i32 %27, 3
  br i1 %min.iters.check24, label %for.body.i.i.preheader, label %vector.ph25

vector.ph25:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec27 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body23

vector.body23:                                    ; preds = %pred.load.continue39, %vector.ph25
  %index28 = phi i64 [ 0, %vector.ph25 ], [ %index.next29, %pred.load.continue39 ]
  %vec.phi34 = phi i64 [ 0, %vector.ph25 ], [ %predphi40, %pred.load.continue39 ]
  %vec.phi35 = phi i64 [ 0, %vector.ph25 ], [ %predphi41, %pred.load.continue39 ]
  %induction33 = or i64 %index28, 1
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index28, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction33, i32 2
  %31 = load i32, i32* %29, align 4, !tbaa !181
  %32 = load i32, i32* %30, align 4, !tbaa !181
  %33 = icmp sgt i32 %31, 0
  %34 = icmp sgt i32 %32, 0
  %35 = zext i32 %31 to i64
  %36 = zext i32 %32 to i64
  br i1 %33, label %pred.load.if36, label %pred.load.continue37

pred.load.if36:                                   ; preds = %vector.body23
  %37 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index28, i32 1
  %38 = load i32, i32* %37, align 4, !tbaa !185
  br label %pred.load.continue37

pred.load.continue37:                             ; preds = %pred.load.if36, %vector.body23
  %39 = phi i32 [ poison, %vector.body23 ], [ %38, %pred.load.if36 ]
  br i1 %34, label %pred.load.if38, label %pred.load.continue39

pred.load.if38:                                   ; preds = %pred.load.continue37
  %40 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction33, i32 1
  %41 = load i32, i32* %40, align 4, !tbaa !185
  br label %pred.load.continue39

pred.load.continue39:                             ; preds = %pred.load.if38, %pred.load.continue37
  %42 = phi i32 [ poison, %pred.load.continue37 ], [ %41, %pred.load.if38 ]
  %43 = add nsw i32 %39, -1
  %44 = add nsw i32 %42, -1
  %45 = sext i32 %43 to i64
  %46 = sext i32 %44 to i64
  %47 = mul nsw i64 %45, %35
  %48 = mul nsw i64 %46, %36
  %49 = select i1 %33, i64 %47, i64 0
  %predphi40 = add i64 %vec.phi34, %49
  %50 = select i1 %34, i64 %48, i64 0
  %predphi41 = add i64 %vec.phi35, %50
  %index.next29 = add i64 %index28, 2
  %51 = icmp eq i64 %index.next29, %n.vec27
  br i1 %51, label %middle.block21, label %vector.body23, !llvm.loop !287

middle.block21:                                   ; preds = %pred.load.continue39
  %bin.rdx42 = add i64 %predphi41, %predphi40
  %cmp.n31 = icmp eq i64 %n.vec27, %wide.trip.count.i.i
  br i1 %cmp.n31, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block21
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec27, %middle.block21 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx42, %middle.block21 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 2
  %52 = load i32, i32* %stride2.i.i, align 4, !tbaa !181
  %cmp3.i.i = icmp sgt i32 %52, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %52 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 1
  %53 = load i32, i32* %extent.i.i, align 4, !tbaa !185
  %sub.i.i = add nsw i32 %53, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !288

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block21
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx42, %middle.block21 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check = icmp ult i32 %27, 3
  br i1 %min.iters.check, label %for.body.i13.i.preheader44, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue19, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue19 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue19 ]
  %vec.phi17 = phi i64 [ 0, %vector.ph ], [ %predphi20, %pred.load.continue19 ]
  %induction16 = or i64 %index, 1
  %54 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 2
  %55 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction16, i32 2
  %56 = load i32, i32* %54, align 4, !tbaa !181
  %57 = load i32, i32* %55, align 4, !tbaa !181
  %58 = icmp slt i32 %56, 0
  %59 = icmp slt i32 %57, 0
  %60 = sext i32 %56 to i64
  %61 = sext i32 %57 to i64
  br i1 %58, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %62 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 1
  %63 = load i32, i32* %62, align 4, !tbaa !185
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %64 = phi i32 [ poison, %vector.body ], [ %63, %pred.load.if ]
  br i1 %59, label %pred.load.if18, label %pred.load.continue19

pred.load.if18:                                   ; preds = %pred.load.continue
  %65 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction16, i32 1
  %66 = load i32, i32* %65, align 4, !tbaa !185
  br label %pred.load.continue19

pred.load.continue19:                             ; preds = %pred.load.if18, %pred.load.continue
  %67 = phi i32 [ poison, %pred.load.continue ], [ %66, %pred.load.if18 ]
  %68 = add nsw i32 %64, -1
  %69 = add nsw i32 %67, -1
  %70 = sext i32 %68 to i64
  %71 = sext i32 %69 to i64
  %72 = mul nsw i64 %70, %60
  %73 = mul nsw i64 %71, %61
  %74 = select i1 %58, i64 %72, i64 0
  %predphi = add i64 %vec.phi, %74
  %75 = select i1 %59, i64 %73, i64 0
  %predphi20 = add i64 %vec.phi17, %75
  %index.next = add i64 %index, 2
  %76 = icmp eq i64 %index.next, %n.vec
  br i1 %76, label %middle.block, label %vector.body, !llvm.loop !289

middle.block:                                     ; preds = %pred.load.continue19
  %bin.rdx = add i64 %predphi20, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader44

for.body.i13.i.preheader44:                       ; preds = %for.body.i13.i.preheader, %middle.block
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader44, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader44 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader44 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 2
  %77 = load i32, i32* %stride2.i11.i, align 4, !tbaa !181
  %cmp3.i12.i = icmp slt i32 %77, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %77 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 1
  %78 = load i32, i32* %extent.i15.i, align 4, !tbaa !185
  %sub.i16.i = add nsw i32 %78, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !290

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.phi = phi i64 [ %sub.i.0, %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 4, i32 1
  %79 = load i8, i8* %bits.i.i, align 1, !tbaa !140
  %conv.i.i = zext i8 %79 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i.phi
  %add = add i64 %mul.i, %added_size.0219
  %indvars.iv.next239 = add nuw nsw i64 %indvars.iv238, 1
  %exitcond241.not = icmp eq i64 %indvars.iv.next239, %wide.trip.count240
  br i1 %exitcond241.not, label %for.cond.cleanup63, label %for.body64, !llvm.loop !291

if.then76:                                        ; preds = %for.cond.cleanup63
  %80 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"*
  %conv77 = sext i32 %size to i64
  %call79 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %80, i8* %cache_key, i64 %conv77, i32 %2, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** nonnull %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) #15
  br i1 %call79, label %if.end101, label %if.then83

if.then83:                                        ; preds = %if.then76, %for.cond.cleanup63
  %81 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  %sub = sub i64 %81, %added_size.0.lcssa
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  br i1 %cmp62218, label %for.body88.preheader, label %for.cond.cleanup87

for.body88.preheader:                             ; preds = %if.then83
  %wide.trip.count = zext i32 %tuple_count to i64
  %indvars.iv.next.0 = add nuw nsw i64 0, 1
  %arrayidx90.0 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 0
  br label %for.body88

for.cond.cleanup87:                               ; preds = %for.body88, %if.then83
  br i1 %tobool75.not, label %cleanup132, label %if.then99

for.body88:                                       ; preds = %for.body88.for.body88_crit_edge, %for.body88.preheader
  %arrayidx90.phi = phi %struct.halide_buffer_t** [ %arrayidx90.0, %for.body88.preheader ], [ %arrayidx90.1, %for.body88.for.body88_crit_edge ]
  %indvars.iv.next.phi = phi i64 [ %indvars.iv.next.0, %for.body88.preheader ], [ %indvars.iv.next.1, %for.body88.for.body88_crit_edge ]
  %82 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx90.phi, align 8, !tbaa !10
  %host91 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %82, i64 0, i32 2
  %83 = load i8*, i8** %host91, align 8, !tbaa !176
  %call92 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %83) #15
  %entry93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call92, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry93, align 8, !tbaa !282
  %exitcond.not = icmp eq i64 %indvars.iv.next.phi, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup87, label %for.body88.for.body88_crit_edge, !llvm.loop !292

for.body88.for.body88_crit_edge:                  ; preds = %for.body88
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.next.phi, 1
  %arrayidx90.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next.phi
  br label %for.body88

if.then99:                                        ; preds = %for.cond.cleanup87
  tail call void @halide_free(i8* %user_context, i8* nonnull %call74) #14
  br label %cleanup132

if.end101:                                        ; preds = %if.then76
  %84 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %next104 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %84, %"struct.Halide::Runtime::Internal::CacheEntry"** %next104, align 8, !tbaa !225
  %85 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %less_recent = getelementptr inbounds i8, i8* %call74, i64 16
  %86 = bitcast i8* %less_recent to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %85, %"struct.Halide::Runtime::Internal::CacheEntry"** %86, align 8, !tbaa !248
  %cmp105.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %85, null
  br i1 %cmp105.not, label %if.end107, label %if.then106

if.then106:                                       ; preds = %if.end101
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %85, i64 0, i32 1
  %87 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent to i8**
  store i8* %call74, i8** %87, align 8, !tbaa !264
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.end101
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE to i8**), align 8, !tbaa !10
  %88 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp108 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %88, null
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.end107
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE to i8**), align 8, !tbaa !10
  br label %if.end110

if.end110:                                        ; preds = %if.then109, %if.end107
  %89 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7 to i8**
  store i8* %call74, i8** %89, align 8, !tbaa !10
  %in_use_count = getelementptr inbounds i8, i8* %call74, i64 52
  %90 = bitcast i8* %in_use_count to i32*
  store i32 %tuple_count, i32* %90, align 4, !tbaa !251
  br i1 %cmp62218, label %for.body117.preheader, label %cleanup132

for.body117.preheader:                            ; preds = %if.end110
  %wide.trip.count236 = zext i32 %tuple_count to i64
  %indvars.iv.next235.0 = add nuw nsw i64 0, 1
  %arrayidx119.0 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 0
  br label %for.body117

for.body117:                                      ; preds = %for.body117.for.body117_crit_edge, %for.body117.preheader
  %arrayidx119.phi = phi %struct.halide_buffer_t** [ %arrayidx119.0, %for.body117.preheader ], [ %arrayidx119.1, %for.body117.for.body117_crit_edge ]
  %indvars.iv.next235.phi = phi i64 [ %indvars.iv.next235.0, %for.body117.preheader ], [ %indvars.iv.next235.1, %for.body117.for.body117_crit_edge ]
  %91 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx119.phi, align 8, !tbaa !10
  %host120 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %91, i64 0, i32 2
  %92 = load i8*, i8** %host120, align 8, !tbaa !176
  %call121 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %92) #15
  %93 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call121 to i8**
  store i8* %call74, i8** %93, align 8, !tbaa !282
  %exitcond237.not = icmp eq i64 %indvars.iv.next235.phi, %wide.trip.count236
  br i1 %exitcond237.not, label %cleanup132, label %for.body117.for.body117_crit_edge, !llvm.loop !293

for.body117.for.body117_crit_edge:                ; preds = %for.body117
  %indvars.iv.next235.1 = add nuw nsw i64 %indvars.iv.next235.phi, 1
  %arrayidx119.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next235.phi
  br label %for.body117

cleanup132:                                       ; preds = %land.lhs.true18, %for.body48.us, %for.body117, %if.end110, %if.then99, %for.cond.cleanup87
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  ret i32 0
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_release(i8* %user_context, i8* %host) local_unnamed_addr #4 {
entry:
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) #15
  %entry2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry2, align 8, !tbaa !282
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call to i8*
  tail call void @halide_free(i8* %user_context, i8* %1) #14
  br label %if.end6

if.else:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %0, i64 0, i32 7
  %2 = load i32, i32* %in_use_count, align 4, !tbaa !251
  %cmp3.not = icmp eq i32 %2, 0
  br i1 %cmp3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.else
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.12.47, i64 0, i64 0)) #14
  tail call void @abort() #14
  %.pre = load i32, i32* %in_use_count, align 4, !tbaa !251
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.else
  %3 = phi i32 [ %.pre, %if.then4 ], [ %2, %if.else ]
  %dec = add i32 %3, -1
  store i32 %dec, i32* %in_use_count, align 4, !tbaa !251
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  br label %if.end6

if.end6:                                          ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_evict(i8* %user_context, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  br label %for.body

for.cond.cleanup:                                 ; preds = %if.end25
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  ret void

for.body:                                         ; preds = %if.end25, %entry
  %__begin1.059 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %if.end25 ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, align 8, !tbaa !10
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not, label %if.end25, label %while.body

while.body:                                       ; preds = %for.body, %if.end24
  %prev.058 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.1, %if.end24 ], [ %__begin1.059, %for.body ]
  %entry1.056 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %if.end24 ], [ %0, %for.body ]
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next4, align 8, !tbaa !225
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 13
  %2 = load i8, i8* %has_eviction_key, align 8, !tbaa !258, !range !17
  %tobool.not = icmp eq i8 %2, 0
  br i1 %tobool.not, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %eviction_key5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 12
  %3 = load i64, i64* %eviction_key5, align 8, !tbaa !259
  %cmp6 = icmp eq i64 %3, %eviction_key
  br i1 %cmp6, label %if.then7, label %if.end24

if.then7:                                         ; preds = %land.lhs.true
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %1, %"struct.Halide::Runtime::Internal::CacheEntry"** %prev.058, align 8, !tbaa !10
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 1
  %4 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !264
  %cmp8.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %4, null
  %less_recent12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 2
  %5 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !248
  br i1 %cmp8.not, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.then7
  %less_recent11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %4, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent11, align 8, !tbaa !248
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !248
  br label %if.end

if.else:                                          ; preds = %if.then7
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then9
  %6 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %5, %if.else ], [ %.pre, %if.then9 ]
  %cmp14.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %more_recent18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 1
  %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink = select i1 %cmp14.not, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %4, %"struct.Halide::Runtime::Internal::CacheEntry"** %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink, align 8, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.056) #15
  %7 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056 to i8*
  tail call void @halide_free(i8* %user_context, i8* nonnull %7) #14
  br label %if.end24

if.end24:                                         ; preds = %if.end, %land.lhs.true, %while.body
  %prev.1 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.058, %if.end ], [ %next4, %land.lhs.true ], [ %next4, %while.body ]
  %cmp3.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp3.not, label %if.end25, label %while.body, !llvm.loop !294

if.end25:                                         ; preds = %if.end24, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i64 0, i64 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !14
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !14
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !14
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i64 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i64 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !14
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %entry.for.body_crit_edge, label %for.cond.cleanup

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw nsw i32 0, 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i64 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %arg.addr.017 = phi i64 [ %div, %for.body.for.body_crit_edge ], [ %arg, %entry.for.body_crit_edge ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body.for.body_crit_edge ], [ %add.ptr, %entry.for.body_crit_edge ]
  %inc.phi = phi i32 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i64 -1
  %cmp = icmp slt i32 %inc.phi, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body.for.body_crit_edge, label %for.cond.cleanup, !llvm.loop !295

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw nsw i32 %inc.phi, 1
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i64 1
  store i8 45, i8* %dst, align 1, !tbaa !14
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #15
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !168
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !18
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i64 8) #14
  %2 = load i64, i64* %bits, align 8, !tbaa !18
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.57, i64 0, i64 0)) #15
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.58, i64 0, i64 0)) #15
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.59, i64 0, i64 0)) #15
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.60, i64 0, i64 0)) #15
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.61, i64 0, i64 0)) #15
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.62, i64 0, i64 0)) #15
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.63, i64 0, i64 0)) #15
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.64, i64 0, i64 0)) #15
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9.65, i64 0, i64 0)) #15
  %4 = load double, double* %arg.addr, align 8, !tbaa !168
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !168
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !168
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.condthread-pre-split.while.body_crit_edge, label %while.cond40thread-pre-split

while.condthread-pre-split.while.body_crit_edge:  ; preds = %while.condthread-pre-split
  %dec.1 = add nsw i32 0, -1
  br label %while.body

while.body:                                       ; preds = %while.condthread-pre-split.while.body_crit_edge, %while.body.while.body_crit_edge
  %dec.phi = phi i32 [ %dec.0, %while.body.while.body_crit_edge ], [ %dec.1, %while.condthread-pre-split.while.body_crit_edge ]
  %5 = phi double [ %mul, %while.body.while.body_crit_edge ], [ %.pr, %while.condthread-pre-split.while.body_crit_edge ]
  %mul = fmul double %5, 1.000000e+01
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body.while.body_crit_edge, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !296

while.body.while.body_crit_edge:                  ; preds = %while.body
  %dec.0 = add nsw i32 %dec.phi, -1
  br label %while.body

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !168
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr261 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec.phi, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr261, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr261, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !297

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !168
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr261, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #15
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #15
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #15
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11.67, i64 0, i64 0)) #15
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.68, i64 0, i64 0)) #15
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59262 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59262, i32 2) #15
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #15
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %integer_part.0 = select i1 %cmp72, i64 0, i64 %shr77
  %sub81 = select i1 %cmp72, i64 0, i64 %shl80
  %f.0.in = sub i64 %add67, %sub81
  %f.0 = uitofp i64 %f.0.in to double
  %conv84258 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84258, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond259 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond259 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select260 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.then71, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.then71 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.then71 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select260, %if.then71 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #15
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader, label %for.cond.cleanup

for.cond111.preheader:                            ; preds = %if.end104, %if.end137
  %i.0270 = phi i32 [ %inc139, %if.end137 ], [ 0, %if.end104 ]
  %int_part_ptr.0268 = phi i8* [ %int_part_ptr.1, %if.end137 ], [ %add.ptr105, %if.end104 ]
  %cmp113.not264 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not264, label %if.end137, label %for.body115

for.cond.cleanup:                                 ; preds = %if.end137, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1, %if.end137 ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #15
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #15
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #15
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0266.pn = phi i8* [ %p.0266, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0265 = phi i32 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0266 = getelementptr inbounds i8, i8* %p.0266.pn, i64 -1
  %9 = load i8, i8* %p.0266, align 1, !tbaa !14
  %sub117 = add i8 %9, -48
  %conv119 = sext i8 %sub117 to i32
  %mul120 = shl nsw i32 %conv119, 1
  %add121 = or i32 %mul120, %carry.0265
  %10 = trunc i32 %add121 to i8
  %cmp124 = icmp sgt i8 %10, 9
  %sub127 = add nsw i32 %add121, 246
  %carry.1 = zext i1 %cmp124 to i32
  %new_digit.0.in = select i1 %cmp124, i32 %sub127, i32 %add121
  %11 = trunc i32 %new_digit.0.in to i8
  %conv133 = add i8 %11, 48
  store i8 %conv133, i8* %p.0266, align 1, !tbaa !14
  %cmp113.not = icmp eq i8* %p.0266, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !298

if.then135:                                       ; preds = %for.cond.cleanup114
  %incdec.ptr136 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i64 -1
  store i8 49, i8* %incdec.ptr136, align 1, !tbaa !14
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %incdec.ptr136, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %inc139 = add nuw nsw i32 %i.0270, 1
  %exitcond.not = icmp eq i32 %inc139, %integer_exponent.0
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond111.preheader, !llvm.loop !299

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i64 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 18
  %1 = ptrtoint i8* %arg to i64
  %and = and i64 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !14
  %shr = lshr i64 %1, 4
  %tobool.not = icmp eq i64 %shr, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %and.1 = and i64 %shr, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.1
  %3 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 16
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !14
  %shr.1 = lshr i64 %1, 8
  %tobool.not.1 = icmp eq i64 %shr.1, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.14, %for.cond.13, %for.cond.12, %for.cond.11, %for.cond.10, %for.cond.9, %for.cond.8, %for.cond.7, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ], [ %incdec.ptr.7, %for.cond.7 ], [ %incdec.ptr.8, %for.cond.8 ], [ %incdec.ptr.9, %for.cond.9 ], [ %incdec.ptr.10, %for.cond.10 ], [ %incdec.ptr.11, %for.cond.11 ], [ %incdec.ptr.12, %for.cond.12 ], [ %incdec.ptr.13, %for.cond.13 ], [ %incdec.ptr.14, %for.cond.14 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ], [ %incdec.ptr.8, %for.cond.7 ], [ %incdec.ptr.9, %for.cond.8 ], [ %incdec.ptr.10, %for.cond.9 ], [ %incdec.ptr.11, %for.cond.10 ], [ %incdec.ptr.12, %for.cond.11 ], [ %incdec.ptr.13, %for.cond.12 ], [ %incdec.ptr.14, %for.cond.13 ], [ %incdec.ptr.15, %for.cond.14 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i64 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !14
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !14
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #15
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %and.2 = and i64 %shr.1, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.2
  %4 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 15
  store i8 %4, i8* %incdec.ptr.1, align 1, !tbaa !14
  %shr.2 = lshr i64 %1, 12
  %tobool.not.2 = icmp eq i64 %shr.2, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %and.3 = and i64 %shr.2, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.3
  %5 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 14
  store i8 %5, i8* %incdec.ptr.2, align 1, !tbaa !14
  %shr.3 = lshr i64 %1, 16
  %tobool.not.3 = icmp eq i64 %shr.3, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %and.4 = and i64 %shr.3, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.4
  %6 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 13
  store i8 %6, i8* %incdec.ptr.3, align 1, !tbaa !14
  %shr.4 = lshr i64 %1, 20
  %tobool.not.4 = icmp eq i64 %shr.4, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %and.5 = and i64 %shr.4, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.5
  %7 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 12
  store i8 %7, i8* %incdec.ptr.4, align 1, !tbaa !14
  %shr.5 = lshr i64 %1, 24
  %tobool.not.5 = icmp eq i64 %shr.5, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %and.6 = and i64 %shr.5, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.6
  %8 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 11
  store i8 %8, i8* %incdec.ptr.5, align 1, !tbaa !14
  %shr.6 = lshr i64 %1, 28
  %tobool.not.6 = icmp eq i64 %shr.6, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %and.7 = and i64 %shr.6, 15
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.7
  %9 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 10
  store i8 %9, i8* %incdec.ptr.6, align 1, !tbaa !14
  %shr.7 = lshr i64 %1, 32
  %tobool.not.7 = icmp eq i64 %shr.7, 0
  br i1 %tobool.not.7, label %cleanup, label %for.cond.7

for.cond.7:                                       ; preds = %for.cond.6
  %and.8 = and i64 %shr.7, 15
  %arrayidx.8 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.8
  %10 = load i8, i8* %arrayidx.8, align 1, !tbaa !14
  %incdec.ptr.8 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 9
  store i8 %10, i8* %incdec.ptr.7, align 1, !tbaa !14
  %shr.8 = lshr i64 %1, 36
  %tobool.not.8 = icmp eq i64 %shr.8, 0
  br i1 %tobool.not.8, label %cleanup, label %for.cond.8

for.cond.8:                                       ; preds = %for.cond.7
  %and.9 = and i64 %shr.8, 15
  %arrayidx.9 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.9
  %11 = load i8, i8* %arrayidx.9, align 1, !tbaa !14
  %incdec.ptr.9 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 8
  store i8 %11, i8* %incdec.ptr.8, align 1, !tbaa !14
  %shr.9 = lshr i64 %1, 40
  %tobool.not.9 = icmp eq i64 %shr.9, 0
  br i1 %tobool.not.9, label %cleanup, label %for.cond.9

for.cond.9:                                       ; preds = %for.cond.8
  %and.10 = and i64 %shr.9, 15
  %arrayidx.10 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.10
  %12 = load i8, i8* %arrayidx.10, align 1, !tbaa !14
  %incdec.ptr.10 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 7
  store i8 %12, i8* %incdec.ptr.9, align 1, !tbaa !14
  %shr.10 = lshr i64 %1, 44
  %tobool.not.10 = icmp eq i64 %shr.10, 0
  br i1 %tobool.not.10, label %cleanup, label %for.cond.10

for.cond.10:                                      ; preds = %for.cond.9
  %and.11 = and i64 %shr.10, 15
  %arrayidx.11 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.11
  %13 = load i8, i8* %arrayidx.11, align 1, !tbaa !14
  %incdec.ptr.11 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 6
  store i8 %13, i8* %incdec.ptr.10, align 1, !tbaa !14
  %shr.11 = lshr i64 %1, 48
  %tobool.not.11 = icmp eq i64 %shr.11, 0
  br i1 %tobool.not.11, label %cleanup, label %for.cond.11

for.cond.11:                                      ; preds = %for.cond.10
  %and.12 = and i64 %shr.11, 15
  %arrayidx.12 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.12
  %14 = load i8, i8* %arrayidx.12, align 1, !tbaa !14
  %incdec.ptr.12 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 5
  store i8 %14, i8* %incdec.ptr.11, align 1, !tbaa !14
  %shr.12 = lshr i64 %1, 52
  %tobool.not.12 = icmp eq i64 %shr.12, 0
  br i1 %tobool.not.12, label %cleanup, label %for.cond.12

for.cond.12:                                      ; preds = %for.cond.11
  %and.13 = and i64 %shr.12, 15
  %arrayidx.13 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.13
  %15 = load i8, i8* %arrayidx.13, align 1, !tbaa !14
  %incdec.ptr.13 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 4
  store i8 %15, i8* %incdec.ptr.12, align 1, !tbaa !14
  %shr.13 = lshr i64 %1, 56
  %tobool.not.13 = icmp eq i64 %shr.13, 0
  br i1 %tobool.not.13, label %cleanup, label %for.cond.13

for.cond.13:                                      ; preds = %for.cond.12
  %and.14 = and i64 %shr.13, 15
  %arrayidx.14 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.14
  %16 = load i8, i8* %arrayidx.14, align 1, !tbaa !14
  %incdec.ptr.14 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 3
  store i8 %16, i8* %incdec.ptr.13, align 1, !tbaa !14
  %shr.14 = lshr i64 %1, 60
  %tobool.not.14 = icmp eq i64 %shr.14, 0
  br i1 %tobool.not.14, label %cleanup, label %for.cond.14

for.cond.14:                                      ; preds = %for.cond.13
  %arrayidx.15 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %shr.14
  %17 = load i8, i8* %arrayidx.15, align 1, !tbaa !14
  %incdec.ptr.15 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 2
  store i8 %17, i8* %incdec.ptr.14, align 1, !tbaa !14
  br label %cleanup
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !300
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i64
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i64 0, i64 %2
  %switch.load = load i8*, i8** %switch.gep, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18.72, i64 0, i64 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #15
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !140
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #15
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !301
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19.77, i64 0, i64 0)) #15
  %5 = load i16, i16* %lanes, align 2, !tbaa !301
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20.78, i64 0, i64 0)) #15
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21.79, i64 0, i64 0)) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !178
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #15
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !302
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #15
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %3 = load i8*, i8** %host, align 8, !tbaa !176
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #15
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !303
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #15
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #15
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !179
  %cmp1179 = icmp sgt i32 %5, 0
  br i1 %cmp1179, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call26, %for.body ]
  %call27 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #15
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %dst.addr.080 = phi i8* [ %call10, %for.body.lr.ph ], [ %call26, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.080, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.82, i64 0, i64 0)) #15
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !180
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 %indvars.iv, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !217
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #15
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !180
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 %indvars.iv, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !185
  %conv18 = sext i32 %9 to i64
  %call19 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv18, i32 1) #15
  %call20 = tail call i8* @halide_string_to_string(i8* %call19, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !180
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i64 %indvars.iv, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !181
  %conv24 = sext i32 %11 to i64
  %call25 = tail call i8* @halide_int64_to_string(i8* %call20, i8* %end, i64 %conv24, i32 1) #15
  %call26 = tail call i8* @halide_string_to_string(i8* %call25, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24.83, i64 0, i64 0)) #15
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !179
  %13 = sext i32 %12 to i64
  %cmp11 = icmp slt i64 %indvars.iv.next, %13
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !304

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call27, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 32
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 8, !tbaa !305
  %call = tail call i32 %0(i8* %user_context) #14
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !307

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15, !range !17
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i64 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !308
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !303
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 8, !tbaa !311
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !303
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !303
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 8, !tbaa !313
  %call = tail call i32 %1(i8* %user_context) #14
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.88, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.89, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !302
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !178
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !302
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.90, i64 0, i64 0)) #14
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #15
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !303
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 8, !tbaa !314
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !303
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !303
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.91, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !302
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.92, i64 0, i64 0)) #14
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 8, !tbaa !316
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %10() #14
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.93, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !302
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 8, !tbaa !318
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.96, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !302
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 8, !tbaa !319
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !178
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.22.97, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !303
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !303
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.98, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !302
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.99, i64 0, i64 0)) #14
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 8, !tbaa !320
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %10() #14
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26.100, i64 0, i64 0)) #14
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27.101, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !302
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 8, !tbaa !321
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !178
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.28.102, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %12 = load i8*, i8** %host, align 8, !tbaa !176
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #14
  store i8* null, i8** %host, align 8, !tbaa !176
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !303
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !303
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29.103, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !179
  %cmp19.i.i = icmp sgt i32 %4, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %if.end
  %sub.i.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !180
  %wide.trip.count.i.i = zext i32 %4 to i64
  %min.iters.check = icmp ult i32 %4, 3
  br i1 %min.iters.check, label %for.body.i.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body.lr.ph.i.i
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue6, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue6 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue6 ]
  %vec.phi4 = phi i64 [ 0, %vector.ph ], [ %predphi7, %pred.load.continue6 ]
  %induction3 = or i64 %index, 1
  %6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 2
  %7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction3, i32 2
  %8 = load i32, i32* %6, align 4, !tbaa !181
  %9 = load i32, i32* %7, align 4, !tbaa !181
  %10 = icmp sgt i32 %8, 0
  %11 = icmp sgt i32 %9, 0
  %12 = zext i32 %8 to i64
  %13 = zext i32 %9 to i64
  br i1 %10, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %14 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 1
  %15 = load i32, i32* %14, align 4, !tbaa !185
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %16 = phi i32 [ poison, %vector.body ], [ %15, %pred.load.if ]
  br i1 %11, label %pred.load.if5, label %pred.load.continue6

pred.load.if5:                                    ; preds = %pred.load.continue
  %17 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction3, i32 1
  %18 = load i32, i32* %17, align 4, !tbaa !185
  br label %pred.load.continue6

pred.load.continue6:                              ; preds = %pred.load.if5, %pred.load.continue
  %19 = phi i32 [ poison, %pred.load.continue ], [ %18, %pred.load.if5 ]
  %20 = add nsw i32 %16, -1
  %21 = add nsw i32 %19, -1
  %22 = sext i32 %20 to i64
  %23 = sext i32 %21 to i64
  %24 = mul nsw i64 %22, %12
  %25 = mul nsw i64 %23, %13
  %26 = select i1 %10, i64 %24, i64 0
  %predphi = add i64 %vec.phi, %26
  %27 = select i1 %11, i64 %25, i64 0
  %predphi7 = add i64 %vec.phi4, %27
  %index.next = add i64 %index, 2
  %28 = icmp eq i64 %index.next, %n.vec
  br i1 %28, label %middle.block, label %vector.body, !llvm.loop !322

middle.block:                                     ; preds = %pred.load.continue6
  %bin.rdx = add i64 %predphi7, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec, %middle.block ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx, %middle.block ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 2
  %29 = load i32, i32* %stride2.i.i, align 4, !tbaa !181
  %cmp3.i.i = icmp sgt i32 %29, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %29 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 1
  %30 = load i32, i32* %extent.i.i, align 4, !tbaa !185
  %sub.i.i = add nsw i32 %30, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !323

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check11 = icmp ult i32 %4, 3
  br i1 %min.iters.check11, label %for.body.i13.i.preheader31, label %vector.ph12

vector.ph12:                                      ; preds = %for.body.i13.i.preheader
  %n.vec14 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body10

vector.body10:                                    ; preds = %pred.load.continue26, %vector.ph12
  %index15 = phi i64 [ 0, %vector.ph12 ], [ %index.next16, %pred.load.continue26 ]
  %vec.phi21 = phi i64 [ 0, %vector.ph12 ], [ %predphi27, %pred.load.continue26 ]
  %vec.phi22 = phi i64 [ 0, %vector.ph12 ], [ %predphi28, %pred.load.continue26 ]
  %induction20 = or i64 %index15, 1
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index15, i32 2
  %32 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction20, i32 2
  %33 = load i32, i32* %31, align 4, !tbaa !181
  %34 = load i32, i32* %32, align 4, !tbaa !181
  %35 = icmp slt i32 %33, 0
  %36 = icmp slt i32 %34, 0
  %37 = sext i32 %33 to i64
  %38 = sext i32 %34 to i64
  br i1 %35, label %pred.load.if23, label %pred.load.continue24

pred.load.if23:                                   ; preds = %vector.body10
  %39 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index15, i32 1
  %40 = load i32, i32* %39, align 4, !tbaa !185
  br label %pred.load.continue24

pred.load.continue24:                             ; preds = %pred.load.if23, %vector.body10
  %41 = phi i32 [ poison, %vector.body10 ], [ %40, %pred.load.if23 ]
  br i1 %36, label %pred.load.if25, label %pred.load.continue26

pred.load.if25:                                   ; preds = %pred.load.continue24
  %42 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction20, i32 1
  %43 = load i32, i32* %42, align 4, !tbaa !185
  br label %pred.load.continue26

pred.load.continue26:                             ; preds = %pred.load.if25, %pred.load.continue24
  %44 = phi i32 [ poison, %pred.load.continue24 ], [ %43, %pred.load.if25 ]
  %45 = add nsw i32 %41, -1
  %46 = add nsw i32 %44, -1
  %47 = sext i32 %45 to i64
  %48 = sext i32 %46 to i64
  %49 = mul nsw i64 %47, %37
  %50 = mul nsw i64 %48, %38
  %51 = select i1 %35, i64 %49, i64 0
  %predphi27 = add i64 %vec.phi21, %51
  %52 = select i1 %36, i64 %50, i64 0
  %predphi28 = add i64 %vec.phi22, %52
  %index.next16 = add i64 %index15, 2
  %53 = icmp eq i64 %index.next16, %n.vec14
  br i1 %53, label %middle.block8, label %vector.body10, !llvm.loop !324

middle.block8:                                    ; preds = %pred.load.continue26
  %bin.rdx29 = add i64 %predphi28, %predphi27
  %cmp.n18 = icmp eq i64 %n.vec14, %wide.trip.count.i.i
  br i1 %cmp.n18, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader31

for.body.i13.i.preheader31:                       ; preds = %for.body.i13.i.preheader, %middle.block8
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec14, %middle.block8 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx29, %middle.block8 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader31, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader31 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader31 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 2
  %54 = load i32, i32* %stride2.i11.i, align 4, !tbaa !181
  %cmp3.i12.i = icmp slt i32 %54, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %54 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 1
  %55 = load i32, i32* %extent.i15.i, align 4, !tbaa !185
  %sub.i16.i = add nsw i32 %55, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !325

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block8
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx29, %middle.block8 ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.phi = phi i64 [ %sub.i.0, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %56 = load i8, i8* %bits.i.i, align 1, !tbaa !140
  %conv.i.i = zext i8 %56 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i.phi
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i64 %mul.i) #14
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  store i8* %call2, i8** %host, align 8, !tbaa !176
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #15
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %57 = load i8*, i8** %host, align 8, !tbaa !176
  tail call void @halide_free(i8* %user_context, i8* %57) #14
  store i8* null, i8** %host, align 8, !tbaa !176
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30.104, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #15
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !176
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #14
  store i8* null, i8** %host, align 8, !tbaa !176
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !303
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !303
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31.105, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !302
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32.106, i64 0, i64 0)) #14
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #14
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !302
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 8, !tbaa !326
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %10() #14
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33.107, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !302
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 8, !tbaa !327
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !178
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.34.108, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !178
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %3() #14
  store i64 %handle, i64* %device, align 8, !tbaa !178
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !178
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i64 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i64 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %7() #14
  store i64 0, i64* %device, align 8, !tbaa !178
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #15
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i64 0, i64 0)) #14
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !178
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #15
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !178
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 8, !tbaa !176
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !303
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !303
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !302
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %9 = load i8*, i8** %host34, align 8, !tbaa !176
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i64 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 8, !tbaa !328
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #15
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #15
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !302
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i64 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 8, !tbaa !309
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i64 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 8, !tbaa !328
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #15
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !302
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i64 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 8, !tbaa !309
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i64 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 8, !tbaa !328
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !303
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !303
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #15
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #15
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 8, !tbaa !309
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i64 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 8, !tbaa !328
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #14
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !303
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !303
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !303
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %1() #14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i64 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 8, !tbaa !309
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i64 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 8, !tbaa !315
  tail call void %4() #14
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #15
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %6() #14
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 8, !tbaa !309
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 8, !tbaa !317
  tail call void %9() #14
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #14
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i64 0, i64 0)) #14
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !178
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !178
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #14
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !179
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !179
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i64 0, i64 0)) #14
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !309
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 8, !tbaa !329
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !178
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !178
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #14
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !179
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !179
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i64 0, i64 0)) #14
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !309
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 8, !tbaa !330
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !178
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #14
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !178
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 8, !tbaa !331
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  store i64 0, i64* %device, align 8, !tbaa !178
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i64 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %5() #14
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !332
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #15
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #14
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #14
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.115, i64 0, i64 0)) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #14
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.116, i64 0, i64 0)) #14
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #14
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #14
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #14
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.118, i64 0, i64 0)) #14
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #14
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #14
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #14
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !37
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !37
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !300
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !140
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !301
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !300
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !140
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !301
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i64 4) #14
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i64 4) #14
  %call.i = call i8* @malloc(i64 1024) #14
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.120, i64 0, i64 0)) #14
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #14
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.121, i64 0, i64 0)) #14
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #14
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.122, i64 0, i64 0)) #14
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.123, i64 0, i64 0)) #14
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.124, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #14
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.126, i64 0, i64 0)) #14
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #14
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #14
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i64 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !14
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #14
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #14
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.128, i64 0, i64 0)) #14
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #14
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #14
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #14
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i100

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %if.end17.sink.split

if.else.i100:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i64
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i64
  %sub.ptr.sub.i.i97 = sub i64 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i64 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %call.i.i99 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %add.i.i98) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #14
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i100, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i100 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #14
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.133, i64 0, i64 0)) #14
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.134, i64 0, i64 0)) #14
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #14
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.137, i64 0, i64 0)) #14
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #14
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #14
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.139, i64 0, i64 0)) #14
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #14
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #14
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #14
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #14
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.140, i64 0, i64 0)) #14
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #14
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #14
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #14
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #14
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #14
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.144, i64 0, i64 0)) #14
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #14
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i64 0, i64 0)) #14
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.147, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0)) #14
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #14
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #14
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #14
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i64 0, i64 0)) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i64 0, i64 0)) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #14
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #14
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #14
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #14
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #14
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #14
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #14
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i64 0, i64 0)) #14
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #14
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #14
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.149, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i64 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !14
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #14
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #14
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #14
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #14
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #14
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #14
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.150, i64 0, i64 0)) #14
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.151, i64 0, i64 0)) #14
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #14
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i167

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %if.end

if.else.i167:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i64
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i64
  %sub.ptr.sub.i.i164 = sub i64 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i64 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %call.i.i166 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %add.i.i165) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #14
  br label %if.end

if.end:                                           ; preds = %if.else.i167, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i167 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #14
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #14
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #14
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #14
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #14
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i64 0, i64 0)) #14
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #14
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #14
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #14
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #14
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i64 0, i64 0)) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #14
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #14
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #14
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i64 0, i64 0)) #14
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -41
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_shutdown() #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !333
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  store i32 -2, i32* %current_func, align 8, !tbaa !335
  tail call void @halide_join_thread(%struct.halide_thread* nonnull %0) #14
  store %struct.halide_thread* null, %struct.halide_thread** %sampling_thread, align 8, !tbaa !333
  store i32 -1, i32* %current_func, align 8, !tbaa !335
  tail call void @halide_profiler_report_unlocked(i8* null, %struct.halide_profiler_state* nonnull %call) #15
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* nonnull %call) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_profiler_state* @halide_profiler_get_state() local_unnamed_addr #2 {
entry:
  ret %struct.halide_profiler_state* @_ZZ25halide_profiler_get_stateE1s
}

; Function Attrs: nounwind
define weak void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %s) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit, label %if.then6.i

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry
  %sstr.sroa.125.0 = phi i8* [ %add.ptr.i, %if.then6.i ], [ null, %entry ]
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.0624 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not625 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0624, null
  br i1 %tobool.not625, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sub.ptr.rhs.cast.i.i348 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i349 = sub i64 1, %sub.ptr.rhs.cast.i.i348
  br label %for.body

for.cond.cleanup:                                 ; preds = %cleanup181, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sstr.sroa.19.0.lcssa = phi i8* [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit ], [ %sstr.sroa.19.15, %cleanup181 ]
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.cond.cleanup
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %for.cond.cleanup
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %sstr.sroa.19.0.lcssa to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret void

for.body:                                         ; preds = %cleanup181, %for.body.lr.ph
  %p.0627 = phi %struct.halide_profiler_pipeline_stats* [ %p.0624, %for.body.lr.ph ], [ %p.0, %cleanup181 ]
  %sstr.sroa.19.0626 = phi i8* [ %call.i, %for.body.lr.ph ], [ %sstr.sroa.19.15, %cleanup181 ]
  %time = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 0
  %0 = load i64, i64* %time, align 8, !tbaa !336
  %conv = uitofp i64 %0 to float
  %div = fdiv float %conv, 1.000000e+06
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !338
  %tobool1.not = icmp eq i32 %1, 0
  br i1 %tobool1.not, label %cleanup181, label %if.end

if.end:                                           ; preds = %for.body
  br i1 %tobool.not.i, label %if.end.split, label %if.then.i278

if.end.split:                                     ; preds = %if.end
  %active_threads_numerator1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %2 = load i64, i64* %active_threads_numerator1, align 8, !tbaa !339
  %active_threads_denominator2 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %3 = load i64, i64* %active_threads_denominator2, align 8, !tbaa !340
  %cmp3 = icmp eq i64 %2, %3
  %name4 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %4 = load i8*, i8** %name4, align 8, !tbaa !341
  %call.i2825 = tail call i8* @halide_string_to_string(i8* null, i8* %sstr.sroa.125.0, i8* %4) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

if.then.i278:                                     ; preds = %if.end
  store i8 0, i8* %call.i, align 1, !tbaa !14
  %active_threads_numerator6 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %5 = load i64, i64* %active_threads_numerator6, align 8, !tbaa !339
  %active_threads_denominator7 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %6 = load i64, i64* %active_threads_denominator7, align 8, !tbaa !340
  %cmp8 = icmp eq i64 %5, %6
  %name9 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %7 = load i8*, i8** %name9, align 8, !tbaa !341
  %call.i28210 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* %sstr.sroa.125.0, i8* %7) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit: ; preds = %if.end.split, %if.then.i278
  %8 = phi i64 [ %2, %if.end.split ], [ %5, %if.then.i278 ]
  %9 = phi i64 [ %3, %if.end.split ], [ %6, %if.then.i278 ]
  %10 = phi i1 [ %cmp3, %if.end.split ], [ %cmp8, %if.then.i278 ]
  %phi.call = phi i8* [ %call.i2825, %if.end.split ], [ %call.i28210, %if.then.i278 ]
  %call.i285 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  %call.i288 = tail call i8* @halide_string_to_string(i8* %call.i285, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8.165, i64 0, i64 0)) #14
  %conv.i = fpext float %div to double
  %call.i291 = tail call i8* @halide_double_to_string(i8* %call.i288, i8* %sstr.sroa.125.0, double %conv.i, i32 0) #14
  %call.i294 = tail call i8* @halide_string_to_string(i8* %call.i291, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.166, i64 0, i64 0)) #14
  %call.i297 = tail call i8* @halide_string_to_string(i8* %call.i294, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.167, i64 0, i64 0)) #14
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 12
  %11 = load i32, i32* %samples, align 4, !tbaa !342
  %conv.i300 = sext i32 %11 to i64
  %call.i301 = tail call i8* @halide_int64_to_string(i8* %call.i297, i8* %sstr.sroa.125.0, i64 %conv.i300, i32 1) #14
  %call.i304 = tail call i8* @halide_string_to_string(i8* %call.i301, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.168, i64 0, i64 0)) #14
  %12 = load i32, i32* %runs, align 8, !tbaa !338
  %conv.i307 = sext i32 %12 to i64
  %call.i308 = tail call i8* @halide_int64_to_string(i8* %call.i304, i8* %sstr.sroa.125.0, i64 %conv.i307, i32 1) #14
  %call.i311 = tail call i8* @halide_string_to_string(i8* %call.i308, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12.169, i64 0, i64 0)) #14
  %13 = load i32, i32* %runs, align 8, !tbaa !338
  %conv19 = sitofp i32 %13 to float
  %div20 = fdiv float %div, %conv19
  %conv.i314 = fpext float %div20 to double
  %call.i315 = tail call i8* @halide_double_to_string(i8* %call.i311, i8* %sstr.sroa.125.0, double %conv.i314, i32 0) #14
  %call.i318 = tail call i8* @halide_string_to_string(i8* %call.i315, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13.170, i64 0, i64 0)) #14
  br i1 %10, label %if.end28, label %if.then24

if.then24:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %conv3 = uitofp i64 %8 to double
  %conv5 = uitofp i64 %9 to double
  %add = fadd double %conv5, 1.000000e-10
  %div6 = fdiv double %conv3, %add
  %conv7 = fptrunc double %div6 to float
  %call.i321 = tail call i8* @halide_string_to_string(i8* %call.i318, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14.171, i64 0, i64 0)) #14
  %conv.i324 = fpext float %conv7 to double
  %call.i325 = tail call i8* @halide_double_to_string(i8* %call.i321, i8* %sstr.sroa.125.0, double %conv.i324, i32 0) #14
  %call.i328 = tail call i8* @halide_string_to_string(i8* %call.i325, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %sstr.sroa.19.1 = phi i8* [ %call.i318, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit ], [ %call.i328, %if.then24 ]
  %call.i331 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.1, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15.172, i64 0, i64 0)) #14
  %num_allocs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 13
  %14 = load i32, i32* %num_allocs, align 8, !tbaa !343
  %conv.i334 = sext i32 %14 to i64
  %call.i335 = tail call i8* @halide_int64_to_string(i8* %call.i331, i8* %sstr.sroa.125.0, i64 %conv.i334, i32 1) #14
  %call.i338 = tail call i8* @halide_string_to_string(i8* %call.i335, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.173, i64 0, i64 0)) #14
  %memory_peak = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 2
  %15 = load i64, i64* %memory_peak, align 8, !tbaa !344
  %call.i341 = tail call i8* @halide_uint64_to_string(i8* %call.i338, i8* %sstr.sroa.125.0, i64 %15, i32 1) #14
  %call.i344 = tail call i8* @halide_string_to_string(i8* %call.i341, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.174, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit, label %if.then.i352

if.then.i352:                                     ; preds = %if.end28
  %sub.ptr.lhs.cast.i.i347 = ptrtoint i8* %call.i344 to i64
  %add.i.i350 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i347
  %call.i.i351 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i350) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit: ; preds = %if.then.i352, %if.end28
  %retval.0.i = phi i8* [ %call.i, %if.then.i352 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end28 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i) #14
  %16 = load i64, i64* %time, align 8, !tbaa !336
  %tobool36.not = icmp eq i64 %16, 0
  br i1 %tobool36.not, label %lor.end, label %for.cond53.preheader

lor.end:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %memory_total = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 3
  %17 = load i64, i64* %memory_total, align 8, !tbaa !345
  %tobool37.not = icmp eq i64 %17, 0
  br i1 %tobool37.not, label %for.cond41.preheader, label %for.cond53.preheader

for.cond41.preheader:                             ; preds = %lor.end
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %18 = load i32, i32* %num_funcs, align 8, !tbaa !346
  %cmp42589 = icmp sgt i32 %18, 0
  br i1 %cmp42589, label %for.body44.lr.ph, label %cleanup181

for.body44.lr.ph:                                 ; preds = %for.cond41.preheader
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  %19 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !347
  %20 = zext i32 %18 to i64
  br label %for.body44

for.cond41:                                       ; preds = %for.body44
  %exitcond.not = icmp eq i64 %indvars.iv.next, %20
  br i1 %exitcond.not, label %cleanup181, label %for.body44, !llvm.loop !348

for.body44:                                       ; preds = %for.cond41, %for.body44.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body44.lr.ph ], [ %indvars.iv.next, %for.cond41 ]
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %19, i64 %indvars.iv, i32 4
  %21 = load i64, i64* %stack_peak, align 8, !tbaa !349
  %tobool45.not = icmp eq i64 %21, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool45.not, label %for.cond41, label %for.cond53.preheader

for.cond53.preheader:                             ; preds = %for.body44, %lor.end, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %num_funcs54 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %22 = load i32, i32* %num_funcs54, align 8, !tbaa !346
  %cmp55621 = icmp sgt i32 %22, 0
  br i1 %cmp55621, label %for.body57.lr.ph, label %cleanup181

for.body57.lr.ph:                                 ; preds = %for.cond53.preheader
  %funcs59 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  br label %for.body57

for.body57:                                       ; preds = %cleanup172, %for.body57.lr.ph
  %indvars.iv630 = phi i64 [ 0, %for.body57.lr.ph ], [ %indvars.iv.next631, %cleanup172 ]
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358, label %if.then.i356

if.then.i356:                                     ; preds = %for.body57
  store i8 0, i8* %call.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358: ; preds = %if.then.i356, %for.body57
  %23 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs59, align 8, !tbaa !347
  %add.ptr61 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630
  %cmp62 = icmp eq i64 %indvars.iv630, 0
  br i1 %cmp62, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %time63 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %24 = load i64, i64* %time63, align 8, !tbaa !351
  %cmp64 = icmp eq i64 %24, 0
  br i1 %cmp64, label %cleanup172, label %if.end66

if.end66:                                         ; preds = %land.lhs.true, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %call.i361 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.175, i64 0, i64 0)) #14
  %name68 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 7
  %25 = load i8*, i8** %name68, align 8, !tbaa !352
  %call.i364 = tail call i8* @halide_string_to_string(i8* %call.i361, i8* %sstr.sroa.125.0, i8* %25) #14
  %call.i367 = tail call i8* @halide_string_to_string(i8* %call.i364, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19.176, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i591 = ptrtoint i8* %call.i367 to i64
  %sub.ptr.sub.i592 = sub i64 %sub.ptr.lhs.cast.i591, %sub.ptr.rhs.cast.i.i348
  %cmp73593 = icmp ult i64 %sub.ptr.sub.i592, 25
  br i1 %cmp73593, label %while.body, label %while.end

while.body:                                       ; preds = %if.end66, %while.body
  %sstr.sroa.19.3594 = phi i8* [ %call.i384, %while.body ], [ %call.i367, %if.end66 ]
  %call.i384 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.3594, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i = ptrtoint i8* %call.i384 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i.i348
  %cmp73 = icmp ult i64 %sub.ptr.sub.i, 25
  br i1 %cmp73, label %while.body, label %while.end, !llvm.loop !353

while.end:                                        ; preds = %while.body, %if.end66
  %sstr.sroa.19.3.lcssa = phi i8* [ %call.i367, %if.end66 ], [ %call.i384, %while.body ]
  %time75 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %26 = load i64, i64* %time75, align 8, !tbaa !351
  %conv76 = uitofp i64 %26 to float
  %27 = load i32, i32* %runs, align 8, !tbaa !338
  %conv78 = sitofp i32 %27 to float
  %mul = fmul float %conv78, 1.000000e+06
  %div79 = fdiv float %conv76, %mul
  %conv.i387 = fpext float %div79 to double
  %call.i388 = tail call i8* @halide_double_to_string(i8* %sstr.sroa.19.3.lcssa, i8* %sstr.sroa.125.0, double %conv.i387, i32 0) #14
  %tobool.not.i390 = icmp eq i8* %call.i388, null
  br i1 %tobool.not.i390, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, label %if.then.i393

if.then.i393:                                     ; preds = %while.end
  %add.ptr.i391 = getelementptr inbounds i8, i8* %call.i388, i64 -3
  %cmp.i = icmp ult i8* %add.ptr.i391, %call.i
  %spec.store.select.i = select i1 %cmp.i, i8* %call.i, i8* %add.ptr.i391
  store i8 0, i8* %spec.store.select.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit: ; preds = %if.then.i393, %while.end
  %sstr.sroa.19.4 = phi i8* [ null, %while.end ], [ %spec.store.select.i, %if.then.i393 ]
  %call.i399 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.4, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.178, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i400596 = ptrtoint i8* %call.i399 to i64
  %sub.ptr.sub.i402597 = sub i64 %sub.ptr.lhs.cast.i400596, %sub.ptr.rhs.cast.i.i348
  %cmp85598 = icmp ult i64 %sub.ptr.sub.i402597, 35
  br i1 %cmp85598, label %while.body86, label %while.end88

while.body86:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, %while.body86
  %sstr.sroa.19.5599 = phi i8* [ %call.i408, %while.body86 ], [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ]
  %call.i408 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5599, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i400 = ptrtoint i8* %call.i408 to i64
  %sub.ptr.sub.i402 = sub i64 %sub.ptr.lhs.cast.i400, %sub.ptr.rhs.cast.i.i348
  %cmp85 = icmp ult i64 %sub.ptr.sub.i402, 35
  br i1 %cmp85, label %while.body86, label %while.end88, !llvm.loop !354

while.end88:                                      ; preds = %while.body86, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit
  %sstr.sroa.19.5.lcssa = phi i8* [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ], [ %call.i408, %while.body86 ]
  %28 = load i64, i64* %time, align 8, !tbaa !336
  %cmp90.not = icmp eq i64 %28, 0
  br i1 %cmp90.not, label %if.end97, label %if.then91

if.then91:                                        ; preds = %while.end88
  %29 = load i64, i64* %time75, align 8, !tbaa !351
  %mul93 = mul i64 %29, 100
  %div95 = udiv i64 %mul93, %28
  br label %if.end97

if.end97:                                         ; preds = %if.then91, %while.end88
  %percent.0 = phi i64 [ %div95, %if.then91 ], [ 0, %while.end88 ]
  %call.i411 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #14
  %sext = shl i64 %percent.0, 32
  %conv.i414 = ashr exact i64 %sext, 32
  %call.i415 = tail call i8* @halide_int64_to_string(i8* %call.i411, i8* %sstr.sroa.125.0, i64 %conv.i414, i32 1) #14
  %call.i418 = tail call i8* @halide_string_to_string(i8* %call.i415, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23.180, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i419601 = ptrtoint i8* %call.i418 to i64
  %sub.ptr.sub.i421602 = sub i64 %sub.ptr.lhs.cast.i419601, %sub.ptr.rhs.cast.i.i348
  %cmp104603 = icmp ult i64 %sub.ptr.sub.i421602, 43
  br i1 %cmp104603, label %while.body105, label %while.end107

while.body105:                                    ; preds = %if.end97, %while.body105
  %sstr.sroa.19.6604 = phi i8* [ %call.i427, %while.body105 ], [ %call.i418, %if.end97 ]
  %call.i427 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6604, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i419 = ptrtoint i8* %call.i427 to i64
  %sub.ptr.sub.i421 = sub i64 %sub.ptr.lhs.cast.i419, %sub.ptr.rhs.cast.i.i348
  %cmp104 = icmp ult i64 %sub.ptr.sub.i421, 43
  br i1 %cmp104, label %while.body105, label %while.end107, !llvm.loop !355

while.end107:                                     ; preds = %while.body105, %if.end97
  %sstr.sroa.19.6.lcssa = phi i8* [ %call.i418, %if.end97 ], [ %call.i427, %while.body105 ]
  br i1 %10, label %if.end127, label %if.then109

if.then109:                                       ; preds = %while.end107
  %active_threads_numerator111 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 5
  %30 = load i64, i64* %active_threads_numerator111, align 8, !tbaa !356
  %conv112 = uitofp i64 %30 to double
  %active_threads_denominator113 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 6
  %31 = load i64, i64* %active_threads_denominator113, align 8, !tbaa !357
  %conv114 = uitofp i64 %31 to double
  %add115 = fadd double %conv114, 1.000000e-10
  %div116 = fdiv double %conv112, %add115
  %conv117 = fptrunc double %div116 to float
  %call.i430 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.181, i64 0, i64 0)) #14
  %conv.i433 = fpext float %conv117 to double
  %call.i434 = tail call i8* @halide_double_to_string(i8* %call.i430, i8* %sstr.sroa.125.0, double %conv.i433, i32 0) #14
  %tobool.not.i436 = icmp eq i8* %call.i434, null
  br i1 %tobool.not.i436, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, label %if.then.i441

if.then.i441:                                     ; preds = %if.then109
  %add.ptr.i437 = getelementptr inbounds i8, i8* %call.i434, i64 -3
  %cmp.i439 = icmp ult i8* %add.ptr.i437, %call.i
  %spec.store.select.i440 = select i1 %cmp.i439, i8* %call.i, i8* %add.ptr.i437
  store i8 0, i8* %spec.store.select.i440, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442: ; preds = %if.then.i441, %if.then109
  %sstr.sroa.19.7 = phi i8* [ null, %if.then109 ], [ %spec.store.select.i440, %if.then.i441 ]
  %sub.ptr.lhs.cast.i447606 = ptrtoint i8* %sstr.sroa.19.7 to i64
  %sub.ptr.sub.i449607 = sub i64 %sub.ptr.lhs.cast.i447606, %sub.ptr.rhs.cast.i.i348
  %cmp123608 = icmp ult i64 %sub.ptr.sub.i449607, 58
  br i1 %cmp123608, label %while.body124, label %if.end127

while.body124:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.body124
  %sstr.sroa.19.8609 = phi i8* [ %call.i455, %while.body124 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ]
  %call.i455 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.8609, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i447 = ptrtoint i8* %call.i455 to i64
  %sub.ptr.sub.i449 = sub i64 %sub.ptr.lhs.cast.i447, %sub.ptr.rhs.cast.i.i348
  %cmp123 = icmp ult i64 %sub.ptr.sub.i449, 58
  br i1 %cmp123, label %while.body124, label %if.end127, !llvm.loop !358

if.end127:                                        ; preds = %while.body124, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.end107
  %sstr.sroa.19.9 = phi i8* [ %sstr.sroa.19.6.lcssa, %while.end107 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ %call.i455, %while.body124 ]
  %cursor.0 = phi i64 [ 58, %while.end107 ], [ 73, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ 73, %while.body124 ]
  %memory_peak128 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 2
  %32 = load i64, i64* %memory_peak128, align 8, !tbaa !359
  %tobool129.not = icmp eq i64 %32, 0
  br i1 %tobool129.not, label %if.end162, label %if.then130

if.then130:                                       ; preds = %if.end127
  %call.i458 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.9, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25.182, i64 0, i64 0)) #14
  %33 = load i64, i64* %memory_peak128, align 8, !tbaa !359
  %call.i461 = tail call i8* @halide_uint64_to_string(i8* %call.i458, i8* %sstr.sroa.125.0, i64 %33, i32 1) #14
  %sub.ptr.lhs.cast.i462611 = ptrtoint i8* %call.i461 to i64
  %sub.ptr.sub.i464612 = sub i64 %sub.ptr.lhs.cast.i462611, %sub.ptr.rhs.cast.i.i348
  %cmp137613 = icmp ult i64 %sub.ptr.sub.i464612, %cursor.0
  br i1 %cmp137613, label %while.body138, label %while.end140

while.body138:                                    ; preds = %if.then130, %while.body138
  %sstr.sroa.19.10614 = phi i8* [ %call.i470, %while.body138 ], [ %call.i461, %if.then130 ]
  %call.i470 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10614, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i462 = ptrtoint i8* %call.i470 to i64
  %sub.ptr.sub.i464 = sub i64 %sub.ptr.lhs.cast.i462, %sub.ptr.rhs.cast.i.i348
  %cmp137 = icmp ult i64 %sub.ptr.sub.i464, %cursor.0
  br i1 %cmp137, label %while.body138, label %while.end140, !llvm.loop !360

while.end140:                                     ; preds = %while.body138, %if.then130
  %sstr.sroa.19.10.lcssa = phi i8* [ %call.i461, %if.then130 ], [ %call.i470, %while.body138 ]
  %call.i473 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26.183, i64 0, i64 0)) #14
  %num_allocs142 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 8
  %34 = load i32, i32* %num_allocs142, align 8, !tbaa !361
  %conv.i476 = sext i32 %34 to i64
  %call.i477 = tail call i8* @halide_int64_to_string(i8* %call.i473, i8* %sstr.sroa.125.0, i64 %conv.i476, i32 1) #14
  %add144 = add nuw nsw i64 %cursor.0, 15
  %sub.ptr.lhs.cast.i478616 = ptrtoint i8* %call.i477 to i64
  %sub.ptr.sub.i480617 = sub i64 %sub.ptr.lhs.cast.i478616, %sub.ptr.rhs.cast.i.i348
  %cmp147618 = icmp ult i64 %sub.ptr.sub.i480617, %add144
  br i1 %cmp147618, label %while.body148, label %while.end150

while.body148:                                    ; preds = %while.end140, %while.body148
  %sstr.sroa.19.11619 = phi i8* [ %call.i467, %while.body148 ], [ %call.i477, %while.end140 ]
  %call.i467 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11619, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i478 = ptrtoint i8* %call.i467 to i64
  %sub.ptr.sub.i480 = sub i64 %sub.ptr.lhs.cast.i478, %sub.ptr.rhs.cast.i.i348
  %cmp147 = icmp ult i64 %sub.ptr.sub.i480, %add144
  br i1 %cmp147, label %while.body148, label %while.end150, !llvm.loop !362

while.end150:                                     ; preds = %while.body148, %while.end140
  %sstr.sroa.19.11.lcssa = phi i8* [ %call.i477, %while.end140 ], [ %call.i467, %while.body148 ]
  %35 = load i32, i32* %num_allocs142, align 8, !tbaa !361
  %cmp152.not = icmp eq i32 %35, 0
  br i1 %cmp152.not, label %if.end159, label %if.then153

if.then153:                                       ; preds = %while.end150
  %memory_total154 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 3
  %36 = load i64, i64* %memory_total154, align 8, !tbaa !363
  %conv156 = sext i32 %35 to i64
  %div157 = udiv i64 %36, %conv156
  br label %if.end159

if.end159:                                        ; preds = %if.then153, %while.end150
  %alloc_avg.0 = phi i64 [ %div157, %if.then153 ], [ 0, %while.end150 ]
  %call.i452 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27.184, i64 0, i64 0)) #14
  %sext586 = shl i64 %alloc_avg.0, 32
  %conv.i445 = ashr exact i64 %sext586, 32
  %call.i446 = tail call i8* @halide_int64_to_string(i8* %call.i452, i8* %sstr.sroa.125.0, i64 %conv.i445, i32 1) #14
  br label %if.end162

if.end162:                                        ; preds = %if.end159, %if.end127
  %sstr.sroa.19.12 = phi i8* [ %sstr.sroa.19.9, %if.end127 ], [ %call.i446, %if.end159 ]
  %stack_peak163 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 4
  %37 = load i64, i64* %stack_peak163, align 8, !tbaa !349
  %cmp164.not = icmp eq i64 %37, 0
  br i1 %cmp164.not, label %if.end169, label %if.then165

if.then165:                                       ; preds = %if.end162
  %call.i424 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.12, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28.185, i64 0, i64 0)) #14
  %38 = load i64, i64* %stack_peak163, align 8, !tbaa !349
  %call.i405 = tail call i8* @halide_uint64_to_string(i8* %call.i424, i8* %sstr.sroa.125.0, i64 %38, i32 1) #14
  br label %if.end169

if.end169:                                        ; preds = %if.then165, %if.end162
  %sstr.sroa.19.13 = phi i8* [ %sstr.sroa.19.12, %if.end162 ], [ %call.i405, %if.then165 ]
  %call.i396 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.13, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, label %if.then.i379

if.then.i379:                                     ; preds = %if.end169
  %sub.ptr.lhs.cast.i.i374 = ptrtoint i8* %call.i396 to i64
  %add.i.i377 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i374
  %call.i.i378 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i377) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381: ; preds = %if.then.i379, %if.end169
  %retval.0.i380 = phi i8* [ %call.i, %if.then.i379 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end169 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i380) #14
  br label %cleanup172

cleanup172:                                       ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, %land.lhs.true
  %sstr.sroa.19.14 = phi i8* [ %call.i, %land.lhs.true ], [ %call.i396, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381 ]
  %indvars.iv.next631 = add nuw nsw i64 %indvars.iv630, 1
  %39 = load i32, i32* %num_funcs54, align 8, !tbaa !346
  %40 = sext i32 %39 to i64
  %cmp55 = icmp slt i64 %indvars.iv.next631, %40
  br i1 %cmp55, label %for.body57, label %cleanup181, !llvm.loop !364

cleanup181:                                       ; preds = %for.cond41, %cleanup172, %for.cond53.preheader, %for.cond41.preheader, %for.body
  %sstr.sroa.19.15 = phi i8* [ %sstr.sroa.19.0626, %for.body ], [ %call.i344, %for.cond53.preheader ], [ %call.i344, %for.cond41.preheader ], [ %sstr.sroa.19.14, %cleanup172 ], [ %call.i344, %for.cond41 ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 8
  %41 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %41, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.cond.cleanup, label %for.body, !llvm.loop !365
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %s) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !366
  %tobool.not9 = icmp eq %struct.halide_profiler_pipeline_stats* %0, null
  br i1 %tobool.not9, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %1 = phi %struct.halide_profiler_pipeline_stats* [ %7, %while.body ], [ %0, %entry ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %3 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !367
  store %struct.halide_profiler_pipeline_stats* %3, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !366
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 7
  %4 = bitcast %struct.halide_profiler_func_stats** %funcs to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !347
  tail call void @free(i8* %5) #14
  %6 = bitcast %struct.halide_profiler_pipeline_stats* %1 to i8*
  tail call void @free(i8* nonnull %6) #14
  %7 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !366
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %7, null
  br i1 %tobool.not, label %while.end, label %while.body, !llvm.loop !368

while.end:                                        ; preds = %while.body, %entry
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 2
  store i32 0, i32* %first_free_id, align 4, !tbaa !369
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.0121 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not122 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0121, null
  br i1 %tobool.not122, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.0123 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.0121, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !341
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %num_funcs1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 9
  %1 = load i32, i32* %num_funcs1, align 8, !tbaa !346
  %cmp2 = icmp eq i32 %1, %num_funcs
  br i1 %cmp2, label %cleanup62, label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.end, label %for.body, !llvm.loop !370

for.end:                                          ; preds = %for.inc, %entry
  %call4 = tail call i8* @malloc(i64 96) #14
  %3 = bitcast i8* %call4 to %struct.halide_profiler_pipeline_stats*
  %tobool5.not = icmp eq i8* %call4, null
  br i1 %tobool5.not, label %cleanup62, label %if.end7

if.end7:                                          ; preds = %for.end
  %4 = bitcast %struct.halide_profiler_pipeline_stats** %pipelines to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !366
  %next9 = getelementptr inbounds i8, i8* %call4, i64 64
  %6 = bitcast i8* %next9 to i8**
  store i8* %5, i8** %6, align 8, !tbaa !367
  %name10 = getelementptr inbounds i8, i8* %call4, i64 48
  %7 = bitcast i8* %name10 to i8**
  store i8* %pipeline_name, i8** %7, align 8, !tbaa !341
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 2
  %8 = load i32, i32* %first_free_id, align 4, !tbaa !369
  %first_func_id = getelementptr inbounds i8, i8* %call4, i64 76
  %9 = bitcast i8* %first_func_id to i32*
  store i32 %8, i32* %9, align 4, !tbaa !371
  %num_funcs11 = getelementptr inbounds i8, i8* %call4, i64 72
  %10 = bitcast i8* %num_funcs11 to i32*
  store i32 %num_funcs, i32* %10, align 8, !tbaa !346
  %runs = getelementptr inbounds i8, i8* %call4, i64 80
  %11 = bitcast i8* %runs to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %11, align 8, !tbaa !37
  %12 = bitcast i8* %call4 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %12, align 8, !tbaa !18
  %memory_peak = getelementptr inbounds i8, i8* %call4, i64 16
  %13 = bitcast i8* %memory_peak to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %13, align 8, !tbaa !18
  %num_allocs = getelementptr inbounds i8, i8* %call4, i64 88
  %14 = bitcast i8* %num_allocs to i32*
  store i32 0, i32* %14, align 8, !tbaa !343
  %active_threads_numerator = getelementptr inbounds i8, i8* %call4, i64 32
  %15 = bitcast i8* %active_threads_numerator to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !18
  %conv = sext i32 %num_funcs to i64
  %mul = mul nsw i64 %conv, 72
  %call12 = tail call i8* @malloc(i64 %mul) #14
  %funcs = getelementptr inbounds i8, i8* %call4, i64 56
  %16 = bitcast i8* %funcs to i8**
  store i8* %call12, i8** %16, align 8, !tbaa !347
  %tobool14.not = icmp eq i8* %call12, null
  %17 = bitcast i8* %call12 to %struct.halide_profiler_func_stats*
  br i1 %tobool14.not, label %if.then15, label %for.cond17.preheader

for.cond17.preheader:                             ; preds = %if.end7
  %cmp18119 = icmp sgt i32 %num_funcs, 0
  br i1 %cmp18119, label %for.body20.lr.ph, label %for.cond.cleanup19

for.body20.lr.ph:                                 ; preds = %for.cond17.preheader
  %wide.trip.count = zext i32 %num_funcs to i64
  br label %for.body20

if.then15:                                        ; preds = %if.end7
  tail call void @free(i8* nonnull %call4) #14
  br label %cleanup62

for.cond.cleanup19:                               ; preds = %for.body20, %for.cond17.preheader
  %18 = load i32, i32* %first_free_id, align 4, !tbaa !369
  %add = add nsw i32 %18, %num_funcs
  store i32 %add, i32* %first_free_id, align 4, !tbaa !369
  store i8* %call4, i8** %4, align 8, !tbaa !366
  br label %cleanup62

for.body20:                                       ; preds = %for.body20, %for.body20.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body20.lr.ph ], [ %indvars.iv.next, %for.body20 ]
  %time22 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 0
  store i64 0, i64* %time22, align 8, !tbaa !351
  %arrayidx24 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv
  %19 = load i64, i64* %arrayidx24, align 8, !tbaa !18
  %20 = inttoptr i64 %19 to i8*
  %name28 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 7
  store i8* %20, i8** %name28, align 8, !tbaa !352
  %memory_current32 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 1
  %21 = bitcast i64* %memory_current32 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %21, align 8, !tbaa !18
  %memory_total40 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 3
  %num_allocs44 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 8
  store i32 0, i32* %num_allocs44, align 8, !tbaa !361
  %22 = bitcast i64* %memory_total40 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !18
  %active_threads_numerator51 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 5
  %23 = bitcast i64* %active_threads_numerator51 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %23, align 8, !tbaa !18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup19, label %for.body20, !llvm.loop !372

cleanup62:                                        ; preds = %land.lhs.true, %for.cond.cleanup19, %if.then15, %for.end
  %retval.2 = phi %struct.halide_profiler_pipeline_stats* [ %3, %for.cond.cleanup19 ], [ null, %if.then15 ], [ null, %for.end ], [ %p.0123, %land.lhs.true ]
  ret %struct.halide_profiler_pipeline_stats* %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* %s, i32 %func_id, i64 %time, i32 %active_threads) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.055 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not56 = icmp eq %struct.halide_profiler_pipeline_stats* %p.055, null
  br i1 %tobool.not56, label %cleanup25, label %for.body

for.body:                                         ; preds = %entry, %if.end23
  %p.058 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %if.end23 ], [ %p.055, %entry ]
  %p_prev.057 = phi %struct.halide_profiler_pipeline_stats* [ %p.058, %if.end23 ], [ null, %entry ]
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 10
  %0 = load i32, i32* %first_func_id, align 4, !tbaa !371
  %cmp.not = icmp sgt i32 %0, %func_id
  br i1 %cmp.not, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 9
  %1 = load i32, i32* %num_funcs, align 8, !tbaa !346
  %add = add nsw i32 %1, %0
  %cmp2 = icmp sgt i32 %add, %func_id
  br i1 %cmp2, label %if.then, label %if.end23

if.then:                                          ; preds = %land.lhs.true
  %tobool3.not = icmp eq %struct.halide_profiler_pipeline_stats* %p_prev.057, null
  br i1 %tobool3.not, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %2 = load i8*, i8** %next, align 8, !tbaa !367
  %next5 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p_prev.057, i64 0, i32 8
  store i8* %2, i8** %next5, align 8, !tbaa !367
  %3 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  store %struct.halide_profiler_pipeline_stats* %p.055, %struct.halide_profiler_pipeline_stats** %3, align 8, !tbaa !367
  store %struct.halide_profiler_pipeline_stats* %p.058, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !366
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 7
  %4 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !347
  %idx.ext = sext i32 %func_id to i64
  %add.ptr = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %4, i64 %idx.ext
  %idx.ext10 = sext i32 %0 to i64
  %idx.neg = sub nsw i64 0, %idx.ext10
  %add.ptr11 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr, i64 %idx.neg
  %time12 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 0
  %5 = load i64, i64* %time12, align 8, !tbaa !351
  %add13 = add i64 %5, %time
  store i64 %add13, i64* %time12, align 8, !tbaa !351
  %conv = sext i32 %active_threads to i64
  %active_threads_numerator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 5
  %6 = load i64, i64* %active_threads_numerator, align 8, !tbaa !356
  %add14 = add i64 %6, %conv
  store i64 %add14, i64* %active_threads_numerator, align 8, !tbaa !356
  %active_threads_denominator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 6
  %7 = load i64, i64* %active_threads_denominator, align 8, !tbaa !357
  %add15 = add i64 %7, 1
  store i64 %add15, i64* %active_threads_denominator, align 8, !tbaa !357
  %time16 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 0
  %8 = load i64, i64* %time16, align 8, !tbaa !336
  %add17 = add i64 %8, %time
  store i64 %add17, i64* %time16, align 8, !tbaa !336
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 12
  %9 = load i32, i32* %samples, align 4, !tbaa !342
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %samples, align 4, !tbaa !342
  %active_threads_numerator19 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 4
  %10 = load i64, i64* %active_threads_numerator19, align 8, !tbaa !339
  %add20 = add i64 %10, %conv
  store i64 %add20, i64* %active_threads_numerator19, align 8, !tbaa !339
  %active_threads_denominator21 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 5
  %11 = load i64, i64* %active_threads_denominator21, align 8, !tbaa !340
  %add22 = add i64 %11, 1
  store i64 %add22, i64* %active_threads_denominator21, align 8, !tbaa !340
  ret void

if.end23:                                         ; preds = %land.lhs.true, %for.body
  %next24 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %12 = bitcast i8** %next24 to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %12, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup25, label %for.body, !llvm.loop !373

cleanup25:                                        ; preds = %if.end23, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_profiler_sample(%struct.halide_profiler_state* %s, i64* %prev_t) local_unnamed_addr #0 {
entry:
  %func = alloca i32, align 4
  %active_threads = alloca i32, align 4
  %0 = bitcast i32* %func to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  %1 = bitcast i32* %active_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  %get_remote_profiler_state = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 6
  %2 = load void (i32*, i32*)*, void (i32*, i32*)** %get_remote_profiler_state, align 8, !tbaa !374
  %tobool.not = icmp eq void (i32*, i32*)* %2, null
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void %2(i32* nonnull %func, i32* nonnull %active_threads) #14
  br label %if.end

if.else:                                          ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 3
  %3 = load i32, i32* %current_func, align 8, !tbaa !335
  store i32 %3, i32* %func, align 4, !tbaa !37
  %active_threads2 = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 4
  %4 = load i32, i32* %active_threads2, align 4, !tbaa !375
  store i32 %4, i32* %active_threads, align 4, !tbaa !37
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call = call i64 @halide_current_time_ns(i8* null) #14
  %5 = load i32, i32* %func, align 4, !tbaa !37
  %cmp = icmp eq i32 %5, -2
  br i1 %cmp, label %cleanup, label %if.else4

if.else4:                                         ; preds = %if.end
  %cmp5 = icmp sgt i32 %5, -1
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.else4
  %6 = load i64, i64* %prev_t, align 8, !tbaa !18
  %sub = sub i64 %call, %6
  %7 = load i32, i32* %active_threads, align 4, !tbaa !37
  call void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* nonnull %s, i32 %5, i64 %sub, i32 %7) #15
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.else4
  store i64 %call, i64* %prev_t, align 8, !tbaa !18
  %sleep_time = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 1
  %8 = load i32, i32* %sleep_time, align 8, !tbaa !376
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.end
  %retval.0 = phi i32 [ %8, %if.end8 ], [ -1, %if.end ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv(i8* %0) #4 {
entry:
  %t = alloca i64, align 8
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %lock = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock) #14
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  %1 = load i32, i32* %current_func, align 8, !tbaa !335
  %cmp.not23 = icmp eq i32 %1, -2
  br i1 %cmp.not23, label %while.end8, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %2 = bitcast i64* %t to i8*
  br label %while.body

while.body:                                       ; preds = %while.end, %while.body.lr.ph
  %call1 = call i64 @halide_current_time_ns(i8* null) #14
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #11
  store i64 %call1, i64* %t, align 8, !tbaa !18
  %call420 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* nonnull %call, i64* nonnull %t) #15
  %cmp521 = icmp slt i32 %call420, 0
  br i1 %cmp521, label %while.end, label %if.end

if.end:                                           ; preds = %while.body, %if.end
  %call422 = phi i32 [ %call4, %if.end ], [ %call420, %while.body ]
  call void @halide_mutex_unlock(%struct.halide_mutex* %lock) #14
  call void @halide_sleep_ms(i8* null, i32 %call422) #14
  call void @halide_mutex_lock(%struct.halide_mutex* %lock) #14
  %call4 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* %call, i64* nonnull %t) #15
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %while.end, label %if.end

while.end:                                        ; preds = %if.end, %while.body
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #11
  %3 = load i32, i32* %current_func, align 8, !tbaa !335
  %cmp.not = icmp eq i32 %3, -2
  br i1 %cmp.not, label %while.end8, label %while.body, !llvm.loop !377

while.end8:                                       ; preds = %while.end, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock) #14
  ret void
}

; Function Attrs: nounwind
define weak %struct.halide_profiler_pipeline_stats* @halide_profiler_get_pipeline_state(i8* %pipeline_name) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #14
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.013 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not14 = icmp eq %struct.halide_profiler_pipeline_stats* %p.013, null
  br i1 %tobool.not14, label %cleanup, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.015 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.013, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !341
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 8
  %1 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %1, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup, label %for.body, !llvm.loop !378

cleanup:                                          ; preds = %for.inc, %for.body, %entry
  %p.0.lcssa = phi %struct.halide_profiler_pipeline_stats* [ null, %entry ], [ null, %for.inc ], [ %p.015, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #14
  ret %struct.halide_profiler_pipeline_stats* %p.0.lcssa
}

; Function Attrs: nounwind
define weak i32 @halide_profiler_pipeline_start(i8* %user_context, i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #14
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !333
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @halide_start_clock(i8* %user_context) #14
  %call2 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv, i8* null) #14
  store %struct.halide_thread* %call2, %struct.halide_thread** %sampling_thread, align 8, !tbaa !333
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call4 = tail call %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) #15
  %tobool5.not = icmp eq %struct.halide_profiler_pipeline_stats* %call4, null
  br i1 %tobool5.not, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32 @halide_error_out_of_memory(i8* %user_context) #14
  br label %cleanup

if.end8:                                          ; preds = %if.end
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !338
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %runs, align 8, !tbaa !338
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 10
  %2 = load i32, i32* %first_func_id, align 4, !tbaa !371
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then6
  %retval.0 = phi i32 [ %2, %if.end8 ], [ %call7, %if.then6 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock.i) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_stack_peak_update(i8* %user_context, i8* %pipeline_state, i64* %f_values) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp.not, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.186, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !346
  %cmp118 = icmp sgt i32 %1, 0
  br i1 %cmp118, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %do.end
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %do.end
  ret void

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %3 = phi i32 [ %1, %for.body.lr.ph ], [ %9, %for.inc ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i64, i64* %f_values, i64 %indvars.iv
  %4 = load i64, i64* %arrayidx, align 8, !tbaa !18
  %cmp2.not = icmp eq i64 %4, 0
  br i1 %cmp2.not, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %5 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !347
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %5, i64 %indvars.iv, i32 4
  %6 = load i64, i64* %stack_peak, align 8, !tbaa !18
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then3
  %old_val.0.i = phi i64 [ %6, %if.then3 ], [ %8, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %4
  br i1 %cmp.i, label %while.body.i, label %for.inc.loopexit

while.body.i:                                     ; preds = %while.cond.i
  %7 = cmpxchg i64* %stack_peak, i64 %old_val.0.i, i64 %4 seq_cst seq_cst
  %8 = extractvalue { i64, i1 } %7, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %8
  br i1 %cmp1.i, label %for.inc.loopexit, label %while.cond.i, !llvm.loop !379

for.inc.loopexit:                                 ; preds = %while.body.i, %while.cond.i
  %.pre = load i32, i32* %0, align 8, !tbaa !346
  br label %for.inc

for.inc:                                          ; preds = %for.inc.loopexit, %for.body
  %9 = phi i32 [ %.pre, %for.inc.loopexit ], [ %3, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = sext i32 %9 to i64
  %cmp1 = icmp slt i64 %indvars.iv.next, %10
  br i1 %cmp1, label %for.body, label %for.cond.cleanup, !llvm.loop !380
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_allocate(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %incr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %incr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.1.187, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.2.188, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !346
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.3.189, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !347
  %idxprom = sext i32 %func_id to i64
  %num_allocs = getelementptr inbounds i8, i8* %pipeline_state, i64 88
  %4 = bitcast i8* %num_allocs to i32*
  %5 = atomicrmw add i32* %4, i32 1 seq_cst
  %memory_total = getelementptr inbounds i8, i8* %pipeline_state, i64 24
  %6 = bitcast i8* %memory_total to i64*
  %7 = atomicrmw add i64* %6, i64 %incr seq_cst
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %8 = bitcast i8* %memory_current to i64*
  %9 = atomicrmw add i64* %8, i64 %incr seq_cst
  %10 = add i64 %9, %incr
  %memory_peak = getelementptr inbounds i8, i8* %pipeline_state, i64 16
  %11 = bitcast i8* %memory_peak to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !18
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %do.end15
  %old_val.0.i = phi i64 [ %12, %do.end15 ], [ %14, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %10
  br i1 %cmp.i, label %while.body.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit

while.body.i:                                     ; preds = %while.cond.i
  %13 = cmpxchg i64* %11, i64 %old_val.0.i, i64 %10 seq_cst seq_cst
  %14 = extractvalue { i64, i1 } %13, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %14
  br i1 %cmp1.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit, label %while.cond.i, !llvm.loop !379

_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit: ; preds = %while.body.i, %while.cond.i
  %num_allocs16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 8
  %15 = atomicrmw add i32* %num_allocs16, i32 1 seq_cst
  %memory_total17 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 3
  %16 = atomicrmw add i64* %memory_total17, i64 %incr seq_cst
  %memory_current18 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %17 = atomicrmw add i64* %memory_current18, i64 %incr seq_cst
  %18 = add i64 %17, %incr
  %memory_peak19 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 2
  %19 = load i64, i64* %memory_peak19, align 8, !tbaa !18
  br label %while.cond.i43

while.cond.i43:                                   ; preds = %while.body.i45, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit
  %old_val.0.i41 = phi i64 [ %19, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit ], [ %21, %while.body.i45 ]
  %cmp.i42 = icmp ult i64 %old_val.0.i41, %18
  br i1 %cmp.i42, label %while.body.i45, label %return

while.body.i45:                                   ; preds = %while.cond.i43
  %20 = cmpxchg i64* %memory_peak19, i64 %old_val.0.i41, i64 %18 seq_cst seq_cst
  %21 = extractvalue { i64, i1 } %20, 0
  %cmp1.i44 = icmp eq i64 %old_val.0.i41, %21
  br i1 %cmp1.i44, label %return, label %while.cond.i43, !llvm.loop !379

return:                                           ; preds = %while.body.i45, %while.cond.i43, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_free(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %decr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %decr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.190, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.5.191, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !346
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.6.192, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !347
  %idxprom = sext i32 %func_id to i64
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %4 = bitcast i8* %memory_current to i64*
  %5 = atomicrmw sub i64* %4, i64 %decr seq_cst
  %memory_current16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %6 = atomicrmw sub i64* %memory_current16, i64 %decr seq_cst
  br label %return

return:                                           ; preds = %do.end15, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_report(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #14
  tail call void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %call) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #14
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_reset() local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #14
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %call) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #14
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_profiler_pipeline_end(i8* %user_context, i8* %state) local_unnamed_addr #2 {
entry:
  %current_func = getelementptr inbounds i8, i8* %state, i64 16
  %0 = bitcast i8* %current_func to i32*
  store i32 -1, i32* %0, align 8, !tbaa !335
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #14
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #14
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i64 32) #14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #14
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.197, i64 0, i64 0)) #14
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !18
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 0), align 8, !tbaa !18
  %and = and i64 %3, %2
  %cmp6.not = icmp eq i64 %and, 0
  br i1 %cmp6.not, label %for.inc.critedge, label %if.then7

if.then7:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 2), align 8, !tbaa !18
  %and10 = and i64 %4, %and
  %cmp11.not = icmp eq i64 %and10, %and
  br i1 %cmp11.not, label %for.inc.critedge, label %cleanup15

for.inc.critedge:                                 ; preds = %if.then7, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i64 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !18
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 1), align 8, !tbaa !18
  %and.1 = and i64 %6, %5
  %cmp6.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp6.not.1, label %for.inc.critedge.1, label %if.then7.1

cleanup15:                                        ; preds = %for.inc.critedge.1, %if.then7.1, %if.then7
  %cmp3.lcssa = phi i32 [ 0, %if.then7 ], [ 0, %if.then7.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then7.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 3), align 8, !tbaa !18
  %and10.1 = and i64 %7, %and.1
  %cmp11.not.1 = icmp eq i64 %and10.1, %and.1
  br i1 %cmp11.not.1, label %for.inc.critedge.1, label %cleanup15

for.inc.critedge.1:                               ; preds = %if.then7.1, %for.inc.critedge
  br label %cleanup15
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #14
  ret i32 %call
}

; Function Attrs: nounwind willreturn
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #8 {
entry:
  %arrayidx3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i64 0, i32 1, i64 0
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %0, align 8, !tbaa !18
  %1 = bitcast i64* %arrayidx3.i to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %1, align 8, !tbaa !18
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16>, <4 x i16>) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16>, <8 x i16>) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <16 x i8> @llvm.aarch64.neon.umin.v16i8(<16 x i8>, <16 x i8>) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8>, <16 x i8>) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16>) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32>) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32>, <4 x i32>) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32>, <4 x i32>) #9

; Function Attrs: nounwind
define i32 @depthwise_conv(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, i8 %input_zero, %struct.halide_buffer_t* noalias nocapture readonly %filter.buffer, i8 %filter_zero, %struct.halide_buffer_t* noalias nocapture readonly %bias.buffer, i32 %depth_multiplier, i32 %stride_x, i32 %stride_y, i32 %a121, i32 %a120, i32 %output_multiplier, i32 %output_shift, i8 %output_zero, i8 %output_min, i8 %output_max, %struct.halide_buffer_t* noalias readonly %output.buffer) local_unnamed_addr #10 {
entry:
  %offset_c559790 = alloca [64 x i32], align 16
  %resampled_input.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep720 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i64 0, i32 0
  %.fca.1.gep721 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep722 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i64 0, i32 2
  %sum_filter792 = alloca [16 x i32], align 16
  %filter_zeroed.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i64 0, i32 0
  %0 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %0, i8 0, i64 24, i1 false)
  %.fca.1.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i64 0, i32 2
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %bias.buffer, i64 0, i32 2
  %1 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %1, i8 0, i64 24, i1 false)
  %2 = load i8*, i8** %host.i, align 8, !tbaa !176
  %host.i937 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i64 0, i32 2
  %3 = load i8*, i8** %host.i937, align 8, !tbaa !176
  %dim.i938 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i64 0, i32 6
  %4 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i938, align 8, !tbaa !180
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %4, i64 0, i32 1
  %5 = load i32, i32* %extent.i, align 4, !tbaa !185
  %extent.i946 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %4, i64 1, i32 1
  %6 = load i32, i32* %extent.i946, align 4, !tbaa !185
  %stride.i948 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %4, i64 1, i32 2
  %7 = load i32, i32* %stride.i948, align 4, !tbaa !181
  %extent.i952 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %4, i64 2, i32 1
  %8 = load i32, i32* %extent.i952, align 4, !tbaa !185
  %stride.i954 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %4, i64 2, i32 2
  %9 = load i32, i32* %stride.i954, align 4, !tbaa !181
  %host.i955 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 2
  %10 = load i8*, i8** %host.i955, align 8, !tbaa !176
  %dim.i956 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 6
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i956, align 8, !tbaa !180
  %min.i961 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 1, i32 0
  %12 = load i32, i32* %min.i961, align 4, !tbaa !217
  %stride.i963 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 1, i32 2
  %13 = load i32, i32* %stride.i963, align 4, !tbaa !181
  %min.i965 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 2, i32 0
  %14 = load i32, i32* %min.i965, align 4, !tbaa !217
  %stride.i967 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 2, i32 2
  %15 = load i32, i32* %stride.i967, align 4, !tbaa !181
  %min.i969 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 3, i32 0
  %16 = load i32, i32* %min.i969, align 4, !tbaa !217
  %extent.i971 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 3, i32 1
  %17 = load i32, i32* %extent.i971, align 4, !tbaa !185
  %stride.i973 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 3, i32 2
  %18 = load i32, i32* %stride.i973, align 4, !tbaa !181
  %host.i974 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i64 0, i32 2
  %19 = load i8*, i8** %host.i974, align 8, !tbaa !176
  %dim.i975 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i64 0, i32 6
  %20 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i975, align 8, !tbaa !180
  %min.i982 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %20, i64 1, i32 0
  %21 = load i32, i32* %min.i982, align 4, !tbaa !217
  %extent.i984 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %20, i64 1, i32 1
  %22 = load i32, i32* %extent.i984, align 4, !tbaa !185
  %stride.i986 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %20, i64 1, i32 2
  %23 = load i32, i32* %stride.i986, align 4, !tbaa !181
  %min.i988 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %20, i64 2, i32 0
  %24 = load i32, i32* %min.i988, align 4, !tbaa !217
  %extent.i990 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %20, i64 2, i32 1
  %25 = load i32, i32* %extent.i990, align 4, !tbaa !185
  %stride.i992 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %20, i64 2, i32 2
  %26 = load i32, i32* %stride.i992, align 4, !tbaa !181
  %stride.i998 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %20, i64 3, i32 2
  %27 = load i32, i32* %stride.i998, align 4, !tbaa !181
  %28 = icmp sgt i32 %22, 7
  %29 = and i32 %22, 1
  %30 = icmp eq i32 %29, 0
  %31 = or i1 %28, %30
  %32 = icmp sgt i32 %25, 7
  %33 = and i32 %25, 1
  %34 = icmp eq i32 %33, 0
  %35 = or i1 %32, %34
  %36 = and i1 %31, %35
  %37 = icmp sgt i32 %5, 15
  %38 = and i1 %37, %36
  br i1 %38, label %then_bb, label %next_bb

after_bb.loopexit:                                ; preds = %"end for output.s0.b.rebased"
  %39 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  br label %after_bb

after_bb.loopexit1459:                            ; preds = %"end for output.s0.b.rebased48"
  %40 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  br label %after_bb

after_bb.loopexit1461:                            ; preds = %"end for output.s0.y.yo187"
  %41 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  br label %after_bb

after_bb:                                         ; preds = %after_bb.loopexit1461, %after_bb.loopexit1459, %after_bb.loopexit, %"consume sum_filter114", %next_bb19
  %.01331 = phi i8* [ null, %"consume sum_filter114" ], [ null, %next_bb19 ], [ %.2, %after_bb.loopexit ], [ %.4, %after_bb.loopexit1459 ], [ %41, %after_bb.loopexit1461 ]
  %.0 = phi i8* [ %2185, %"consume sum_filter114" ], [ null, %next_bb19 ], [ %39, %after_bb.loopexit ], [ %40, %after_bb.loopexit1459 ], [ %2185, %after_bb.loopexit1461 ]
  %42 = load i8*, i8** %host.i, align 8, !tbaa !176
  %43 = load i8*, i8** %host.i937, align 8, !tbaa !176
  %44 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i938, align 8, !tbaa !180
  %extent.i1008 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %44, i64 0, i32 1
  %45 = load i32, i32* %extent.i1008, align 4, !tbaa !185
  %extent.i1014 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %44, i64 1, i32 1
  %46 = load i32, i32* %extent.i1014, align 4, !tbaa !185
  %stride.i1016 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %44, i64 1, i32 2
  %47 = load i32, i32* %stride.i1016, align 4, !tbaa !181
  %extent.i1020 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %44, i64 2, i32 1
  %48 = load i32, i32* %extent.i1020, align 4, !tbaa !185
  %stride.i1022 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %44, i64 2, i32 2
  %49 = load i32, i32* %stride.i1022, align 4, !tbaa !181
  %50 = load i8*, i8** %host.i955, align 8, !tbaa !176
  %51 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i956, align 8, !tbaa !180
  %min.i1029 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %51, i64 1, i32 0
  %52 = load i32, i32* %min.i1029, align 4, !tbaa !217
  %stride.i1031 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %51, i64 1, i32 2
  %53 = load i32, i32* %stride.i1031, align 4, !tbaa !181
  %min.i1033 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %51, i64 2, i32 0
  %54 = load i32, i32* %min.i1033, align 4, !tbaa !217
  %stride.i1035 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %51, i64 2, i32 2
  %55 = load i32, i32* %stride.i1035, align 4, !tbaa !181
  %min.i1037 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %51, i64 3, i32 0
  %56 = load i32, i32* %min.i1037, align 4, !tbaa !217
  %extent.i1039 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %51, i64 3, i32 1
  %57 = load i32, i32* %extent.i1039, align 4, !tbaa !185
  %stride.i1041 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %51, i64 3, i32 2
  %58 = load i32, i32* %stride.i1041, align 4, !tbaa !181
  %59 = load i8*, i8** %host.i974, align 8, !tbaa !176
  %60 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i975, align 8, !tbaa !180
  %min.i1050 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %60, i64 1, i32 0
  %61 = load i32, i32* %min.i1050, align 4, !tbaa !217
  %extent.i1052 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %60, i64 1, i32 1
  %62 = load i32, i32* %extent.i1052, align 4, !tbaa !185
  %stride.i1054 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %60, i64 1, i32 2
  %63 = load i32, i32* %stride.i1054, align 4, !tbaa !181
  %min.i1056 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %60, i64 2, i32 0
  %64 = load i32, i32* %min.i1056, align 4, !tbaa !217
  %extent.i1058 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %60, i64 2, i32 1
  %65 = load i32, i32* %extent.i1058, align 4, !tbaa !185
  %stride.i1060 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %60, i64 2, i32 2
  %66 = load i32, i32* %stride.i1060, align 4, !tbaa !181
  %stride.i1066 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %60, i64 3, i32 2
  %67 = load i32, i32* %stride.i1066, align 4, !tbaa !181
  %68 = icmp sgt i32 %62, 7
  %69 = and i32 %62, 1
  %70 = icmp eq i32 %69, 0
  %71 = or i1 %68, %70
  %72 = icmp sgt i32 %65, 7
  %73 = and i32 %65, 1
  %74 = icmp eq i32 %73, 0
  %75 = or i1 %72, %74
  %76 = and i1 %71, %75
  %77 = icmp sgt i32 %45, 15
  %78 = and i1 %77, %76
  br i1 %78, label %then_bb237, label %next_bb238

then_bb:                                          ; preds = %entry
  %t2201 = icmp slt i32 %a121, 0
  %79 = add nsw i32 %6, -1
  %t2202 = mul nsw i32 %79, %a121
  %t2203 = icmp slt i32 %stride_x, 0
  %80 = icmp slt i32 %22, 2
  %t2204 = select i1 %80, i32 %22, i32 2
  %t2205 = add nsw i32 %t2204, -2
  %t2206 = add nsw i32 %22, -1
  %t2207 = select i1 %t2201, i32 %t2202, i32 0
  %81 = select i1 %t2203, i32 %t2206, i32 %t2205
  %82 = add nsw i32 %81, %21
  %t2208 = mul nsw i32 %82, %stride_x
  %t2209 = icmp slt i32 %a120, 0
  %83 = add nsw i32 %8, -1
  %t2210 = mul nsw i32 %83, %a120
  %t2211 = icmp slt i32 %stride_y, 0
  %84 = icmp slt i32 %25, 2
  %t2212 = select i1 %84, i32 %25, i32 2
  %t2213 = add nsw i32 %t2212, -2
  %t2214 = add nsw i32 %25, -1
  %t2215 = select i1 %t2209, i32 %t2210, i32 0
  %85 = select i1 %t2211, i32 %t2214, i32 %t2213
  %86 = add nsw i32 %85, %24
  %t2216 = mul nsw i32 %86, %stride_y
  %87 = icmp eq i32 %6, 3
  %88 = icmp eq i32 %8, 3
  %t2217 = and i1 %87, %88
  %a121.op914 = shl i32 %a121, 1
  %t2218 = select i1 %t2201, i32 %a121.op914, i32 0
  %a120.op915 = shl i32 %a120, 1
  %t2219 = select i1 %t2209, i32 %a120.op915, i32 0
  %t2194 = icmp eq i32 %depth_multiplier, 1
  %89 = add nuw nsw i32 %25, 1
  %t2196 = ashr i32 %89, 1
  %90 = add nuw nsw i32 %22, 1
  %t2197 = ashr i32 %90, 1
  %91 = add nuw nsw i32 %5, 15
  %t2172 = ashr i32 %91, 4
  %92 = icmp sgt i32 %a120, 0
  %93 = select i1 %92, i32 %a120, i32 0
  %t2185 = shl nuw nsw i32 %93, 1
  %94 = icmp sgt i32 %a121, 0
  %95 = select i1 %94, i32 %a121, i32 0
  %t2192 = shl nuw nsw i32 %95, 1
  %96 = select i1 %t2217, i32 %t2219, i32 %t2215
  %b16 = add nsw i32 %t2216, %96
  %97 = select i1 %t2217, i32 %t2218, i32 %t2207
  %b15 = add nsw i32 %t2208, %97
  %b20 = add nsw i32 %t2216, %t2215
  %98 = select i1 %t2209, i32 0, i32 %t2210
  %99 = select i1 %t2211, i32 %t2213, i32 %t2214
  %100 = add nsw i32 %99, %24
  %101 = mul nsw i32 %100, %stride_y
  %b19 = add nsw i32 %101, %98
  %b18 = add nsw i32 %t2208, %t2207
  %102 = select i1 %t2201, i32 0, i32 %t2202
  %103 = select i1 %t2203, i32 %t2205, i32 %t2206
  %104 = add nsw i32 %103, %21
  %105 = mul nsw i32 %104, %stride_x
  %b17 = add nsw i32 %105, %102
  %106 = mul nsw i32 %15, %14
  %107 = mul nsw i32 %18, %16
  %108 = mul nsw i32 %13, %12
  %109 = add i32 %106, %108
  %t2195 = add i32 %109, %107
  %b10 = add nsw i32 %5, -16
  %110 = icmp sgt i32 %6, 0
  %111 = select i1 %110, i32 %6, i32 0
  %t2484 = zext i32 %111 to i64
  %112 = icmp sgt i32 %8, 0
  %113 = select i1 %112, i32 %8, i32 0
  %t2485 = zext i32 %113 to i64
  %114 = shl nuw nsw i64 %t2484, 5
  %115 = mul i64 %114, %t2485
  %116 = or i64 %115, 6
  %117 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  %118 = sext i32 %7 to i64
  %119 = insertelement <8 x i8> undef, i8 %filter_zero, i32 0
  %120 = shufflevector <8 x i8> %119, <8 x i8> undef, <8 x i32> zeroinitializer
  %121 = zext <8 x i8> %120 to <8 x i16>
  %122 = bitcast i8* %2 to i32*
  %123 = zext i8 %input_zero to i32
  %124 = insertelement <16 x i32> undef, i32 %123, i32 0
  %125 = shufflevector <16 x i32> %124, <16 x i32> undef, <16 x i32> zeroinitializer
  %126 = bitcast [16 x i32]* %sum_filter792 to <4 x i32>*
  %127 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter792, i64 0, i64 4
  %128 = bitcast i32* %127 to <4 x i32>*
  %129 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter792, i64 0, i64 8
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter792, i64 0, i64 12
  %132 = bitcast i32* %131 to <4 x i32>*
  %133 = icmp slt i32 %t2207, %97
  %t2225 = select i1 %133, i32 %b18, i32 %b15
  %134 = icmp slt i32 %t2215, %96
  %t2223 = select i1 %134, i32 %b20, i32 %b16
  %135 = select i1 %t2217, i32 %t2192, i32 %102
  %a15 = add nsw i32 %105, %135
  %136 = icmp sgt i32 %135, %102
  %137 = select i1 %136, i32 %a15, i32 %b17
  %t2226 = sub nsw i32 %137, %t2225
  %138 = select i1 %t2217, i32 %t2185, i32 %98
  %a17 = add nsw i32 %101, %138
  %139 = icmp sgt i32 %138, %98
  %140 = select i1 %139, i32 %a17, i32 %b19
  %t2224 = sub nsw i32 %140, %t2223
  %t2228 = sub nsw i32 %b17, %b18
  %t2227 = sub nsw i32 %b19, %b20
  %.neg1425 = mul i32 %26, %24
  %.neg1426 = mul i32 %23, %21
  %.neg1427 = mul i32 %27, %16
  %141 = icmp sgt i32 %17, 0
  %a22 = add nsw i32 %t2224, 1
  %a21 = add nsw i32 %t2226, 1
  %.inv918 = icmp slt i32 %t2226, 0
  %142 = select i1 %.inv918, i32 0, i32 %a21
  %t2486 = zext i32 %142 to i64
  %.inv919 = icmp slt i32 %t2224, 0
  %143 = select i1 %.inv919, i32 0, i32 %a22
  %t2487 = zext i32 %143 to i64
  %t2488 = shl nuw nsw i64 %t2486, 4
  %144 = mul i64 %t2488, %t2487
  %145 = or i64 %144, 3
  %146 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %t2245 = sub i32 %b18, %t2225
  %t2246 = sub i32 %b20, %t2223
  %147 = icmp eq i32 %depth_multiplier, 0
  %t2491 = select i1 %147, <16 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <16 x i32> zeroinitializer
  %depth_multiplier.lobit928 = ashr i32 %depth_multiplier, 31
  %148 = insertelement <16 x i32> undef, i32 %depth_multiplier, i32 0
  %149 = shufflevector <16 x i32> %148, <16 x i32> undef, <16 x i32> zeroinitializer
  %150 = sub nsw <16 x i32> %149, %t2491
  %151 = xor i32 %depth_multiplier.lobit928, -1
  %152 = sub nsw i32 %151, %depth_multiplier.lobit928
  %153 = insertelement <16 x i32> undef, i32 %152, i32 0
  %154 = shufflevector <16 x i32> %153, <16 x i32> undef, <16 x i32> zeroinitializer
  %155 = xor <16 x i32> %t2491, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %156 = sext i32 %b18 to i64
  %157 = sext i32 %13 to i64
  %t2254 = sub nsw i32 %a120.op915, %t2223
  %t2250 = sub nsw i32 %a121.op914, %t2225
  %reass.add1429 = add i32 %.neg1425, %.neg1426
  %reass.add1430 = add i32 %reass.add1429, %.neg1427
  %158 = icmp sgt i32 %25, 0
  %b25 = add nsw i32 %25, -2
  %t2284 = sub nsw i32 %a121, %t2225
  %t2285 = sub nsw i32 %a120, %t2223
  %159 = icmp sgt i32 %22, 0
  %b26 = add nsw i32 %22, -2
  %160 = bitcast [64 x i32]* %offset_c559790 to <4 x i32>*
  %161 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 4
  %162 = bitcast i32* %161 to <4 x i32>*
  %163 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 8
  %164 = bitcast i32* %163 to <4 x i32>*
  %165 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 12
  %166 = bitcast i32* %165 to <4 x i32>*
  %167 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 16
  %168 = bitcast i32* %167 to <4 x i32>*
  %169 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 20
  %170 = bitcast i32* %169 to <4 x i32>*
  %171 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 24
  %172 = bitcast i32* %171 to <4 x i32>*
  %173 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 28
  %174 = bitcast i32* %173 to <4 x i32>*
  %175 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 32
  %176 = bitcast i32* %175 to <4 x i32>*
  %177 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 36
  %178 = bitcast i32* %177 to <4 x i32>*
  %179 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 40
  %180 = bitcast i32* %179 to <4 x i32>*
  %181 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 44
  %182 = bitcast i32* %181 to <4 x i32>*
  %183 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 48
  %184 = bitcast i32* %183 to <4 x i32>*
  %185 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 52
  %186 = bitcast i32* %185 to <4 x i32>*
  %187 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 56
  %188 = bitcast i32* %187 to <4 x i32>*
  %189 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 60
  %190 = bitcast i32* %189 to <4 x i32>*
  %191 = sext i32 %a121 to i64
  %192 = sext i32 %21 to i64
  %193 = sext i32 %stride_x to i64
  %194 = insertelement <16 x i32> undef, i32 %output_multiplier, i32 0
  %195 = shufflevector <16 x i32> %194, <16 x i32> undef, <4 x i32> zeroinitializer
  %196 = sub nsw i32 0, %output_shift
  %197 = insertelement <16 x i32> undef, i32 %196, i32 0
  %198 = shufflevector <16 x i32> %197, <16 x i32> undef, <4 x i32> zeroinitializer
  %199 = zext i8 %output_zero to i16
  %200 = insertelement <16 x i16> undef, i16 %199, i32 0
  %201 = shufflevector <16 x i16> %200, <16 x i16> undef, <8 x i32> zeroinitializer
  %202 = insertelement <16 x i8> undef, i8 %output_max, i32 0
  %203 = shufflevector <16 x i8> %202, <16 x i8> undef, <16 x i32> zeroinitializer
  %204 = insertelement <16 x i8> undef, i8 %output_min, i32 0
  %205 = shufflevector <16 x i8> %204, <16 x i8> undef, <16 x i32> zeroinitializer
  %206 = sext i32 %23 to i64
  %207 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  %208 = zext i32 %6 to i64
  %209 = sext i32 %6 to i64
  %210 = sext i32 %9 to i64
  %211 = zext i32 %8 to i64
  %212 = zext i32 %t2228 to i64
  %213 = sext i32 %t2246 to i64
  %214 = sext i32 %a21 to i64
  %215 = sext i32 %t2245 to i64
  %216 = sext i32 %b20 to i64
  %217 = sext i32 %15 to i64
  %218 = zext i32 %t2227 to i64
  %219 = sext i32 %16 to i64
  %220 = sext i32 %18 to i64
  %zext1999 = zext i32 %17 to i64
  %221 = or i32 %t2227, %t2228
  %222 = icmp slt i32 %221, 0
  %223 = or i32 %t2227, %t2228
  %.not2296 = icmp sgt i32 %223, -1
  br label %"for output.s0.c.co"

next_bb:                                          ; preds = %entry
  br i1 %37, label %then_bb18, label %next_bb19

"for output.s0.c.co":                             ; preds = %then_bb, %"end for output.s0.b.rebased"
  %.11332 = phi i8* [ null, %then_bb ], [ %.2, %"end for output.s0.b.rebased" ]
  %output.s0.c.co = phi i32 [ 0, %then_bb ], [ %346, %"end for output.s0.b.rebased" ]
  %a8 = shl nsw i32 %output.s0.c.co, 4
  %224 = icmp slt i32 %a8, %b10
  %output.s0.c.c.base = select i1 %224, i32 %a8, i32 %b10
  %225 = load i64, i64* %.fca.1.gep, align 8, !tbaa !381
  %cmp.i = icmp ult i64 %225, %116
  %226 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !383
  br i1 %cmp.i, label %if.then.i, label %pseudostack_alloc.exit, !prof !384

if.then.i:                                        ; preds = %"for output.s0.c.co"
  %tobool1.not.i = icmp ne i8* %226, null
  %227 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i = icmp ugt i64 %227, 16384
  %or.cond = and i1 %tobool1.not.i, %cmp2.i
  br i1 %or.cond, label %if.then3.i, label %if.end.i

if.then3.i:                                       ; preds = %if.then.i
  call void @halide_free(i8* null, i8* nonnull %226) #14
  %.pre2140 = load i64, i64* %.fca.2.gep, align 8, !tbaa !385
  br label %if.end.i

if.end.i:                                         ; preds = %if.then3.i, %if.then.i
  %228 = phi i64 [ %.pre2140, %if.then3.i ], [ %227, %if.then.i ]
  %add.i = add i64 %228, %116
  store i64 %add.i, i64* %.fca.2.gep, align 8, !tbaa !385
  %cmp7.i = icmp ugt i64 %add.i, 16384
  br i1 %cmp7.i, label %if.then8.i, label %if.end11.i

if.then8.i:                                       ; preds = %if.end.i
  %call.i = call i8* @halide_malloc(i8* null, i64 %116) #14
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then8.i, %if.end.i
  %storemerge.i = phi i8* [ %call.i, %if.then8.i ], [ null, %if.end.i ]
  store i8* %storemerge.i, i8** %.fca.0.gep, align 8, !tbaa !383
  store i64 %116, i64* %.fca.1.gep, align 8, !tbaa !381
  br label %pseudostack_alloc.exit

pseudostack_alloc.exit:                           ; preds = %"for output.s0.c.co", %if.end11.i
  %229 = phi i8* [ %storemerge.i, %if.end11.i ], [ %226, %"for output.s0.c.co" ]
  %230 = bitcast i8* %229 to i16*
  %.not916 = icmp eq i8* %229, null
  br i1 %.not916, label %then_bb2, label %"produce filter_zeroed", !prof !386

then_bb2:                                         ; preds = %pseudostack_alloc.exit
  %231 = alloca i8*, i64 %116, align 16
  %232 = bitcast i8** %231 to i16*
  store i8** %231, i8*** %117, align 8
  br label %"produce filter_zeroed"

"produce filter_zeroed":                          ; preds = %pseudostack_alloc.exit, %then_bb2
  %filter_zeroed = phi i16* [ %232, %then_bb2 ], [ %230, %pseudostack_alloc.exit ]
  br i1 %112, label %"for filter_zeroed.s0.y.preheader", label %"consume sum_filter", !prof !387

"for filter_zeroed.s0.y.preheader":               ; preds = %"produce filter_zeroed"
  br i1 %110, label %"for filter_zeroed.s0.y.us.preheader", label %"consume sum_filter", !prof !387

"for filter_zeroed.s0.y.us.preheader":            ; preds = %"for filter_zeroed.s0.y.preheader"
  %233 = sext i32 %output.s0.c.c.base to i64
  br label %"for filter_zeroed.s0.y.us"

"for filter_zeroed.s0.y.us":                      ; preds = %"for filter_zeroed.s0.y.us.preheader", %"end for filter_zeroed.s0.x.loopexit.us"
  %indvars.iv1969 = phi i64 [ 0, %"for filter_zeroed.s0.y.us.preheader" ], [ %indvars.iv.next1970, %"end for filter_zeroed.s0.x.loopexit.us" ]
  %234 = mul nsw i64 %indvars.iv1969, %209
  %235 = mul nsw i64 %indvars.iv1969, %210
  %236 = add nsw i64 %235, %233
  br label %"for filter_zeroed.s0.x.us"

"for filter_zeroed.s0.x.us":                      ; preds = %"for filter_zeroed.s0.y.us", %"for filter_zeroed.s0.x.us"
  %indvars.iv1967 = phi i64 [ 0, %"for filter_zeroed.s0.y.us" ], [ %indvars.iv.next1968, %"for filter_zeroed.s0.x.us" ]
  %237 = mul nsw i64 %indvars.iv1967, %118
  %238 = add nsw i64 %237, %236
  %239 = getelementptr inbounds i8, i8* %3, i64 %238
  %240 = bitcast i8* %239 to <8 x i8>*
  %241 = load <8 x i8>, <8 x i8>* %240, align 1, !tbaa !388
  %242 = zext <8 x i8> %241 to <8 x i16>
  %243 = sub nsw <8 x i16> %242, %121
  %244 = add nsw i64 %indvars.iv1967, %234
  %245 = shl nsw i64 %244, 4
  %246 = getelementptr inbounds i16, i16* %filter_zeroed, i64 %245
  %247 = bitcast i16* %246 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %247, align 16, !tbaa !391
  %248 = getelementptr inbounds i8, i8* %239, i64 8
  %249 = bitcast i8* %248 to <8 x i8>*
  %250 = load <8 x i8>, <8 x i8>* %249, align 1, !tbaa !388
  %251 = zext <8 x i8> %250 to <8 x i16>
  %252 = sub nsw <8 x i16> %251, %121
  %253 = getelementptr inbounds i16, i16* %246, i64 8
  %254 = bitcast i16* %253 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %254, align 16, !tbaa !391
  %indvars.iv.next1968 = add nuw nsw i64 %indvars.iv1967, 1
  %.not935.us = icmp eq i64 %indvars.iv.next1968, %208
  br i1 %.not935.us, label %"end for filter_zeroed.s0.x.loopexit.us", label %"for filter_zeroed.s0.x.us"

"end for filter_zeroed.s0.x.loopexit.us":         ; preds = %"for filter_zeroed.s0.x.us"
  %indvars.iv.next1970 = add nuw nsw i64 %indvars.iv1969, 1
  %.not934.us = icmp eq i64 %indvars.iv.next1970, %211
  br i1 %.not934.us, label %"for sum_filter.s1.r19$y.preheader", label %"for filter_zeroed.s0.y.us"

"for sum_filter.s1.r19$y.preheader":              ; preds = %"end for filter_zeroed.s0.x.loopexit.us"
  br i1 %110, label %"for sum_filter.s1.r19$y.us", label %"consume sum_filter", !prof !387

"for sum_filter.s1.r19$y.us":                     ; preds = %"for sum_filter.s1.r19$y.preheader", %"end for sum_filter.s1.r19$x.loopexit.us"
  %indvars.iv1975 = phi i64 [ %indvars.iv.next1976, %"end for sum_filter.s1.r19$x.loopexit.us" ], [ 0, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved791.sroa.120.0.us = phi <4 x i32> [ %273, %"end for sum_filter.s1.r19$x.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved791.sroa.80.0.us = phi <4 x i32> [ %272, %"end for sum_filter.s1.r19$x.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved791.sroa.40.0.us = phi <4 x i32> [ %271, %"end for sum_filter.s1.r19$x.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved791.sroa.0.0.us = phi <4 x i32> [ %270, %"end for sum_filter.s1.r19$x.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %255 = mul nsw i64 %indvars.iv1975, %209
  br label %"for sum_filter.s1.r19$x.us"

"for sum_filter.s1.r19$x.us":                     ; preds = %"for sum_filter.s1.r19$y.us", %"for sum_filter.s1.r19$x.us"
  %indvars.iv1973 = phi i64 [ 0, %"for sum_filter.s1.r19$y.us" ], [ %indvars.iv.next1974, %"for sum_filter.s1.r19$x.us" ]
  %convolved791.sroa.120.1.us = phi <4 x i32> [ %convolved791.sroa.120.0.us, %"for sum_filter.s1.r19$y.us" ], [ %273, %"for sum_filter.s1.r19$x.us" ]
  %convolved791.sroa.80.1.us = phi <4 x i32> [ %convolved791.sroa.80.0.us, %"for sum_filter.s1.r19$y.us" ], [ %272, %"for sum_filter.s1.r19$x.us" ]
  %convolved791.sroa.40.1.us = phi <4 x i32> [ %convolved791.sroa.40.0.us, %"for sum_filter.s1.r19$y.us" ], [ %271, %"for sum_filter.s1.r19$x.us" ]
  %convolved791.sroa.0.1.us = phi <4 x i32> [ %convolved791.sroa.0.0.us, %"for sum_filter.s1.r19$y.us" ], [ %270, %"for sum_filter.s1.r19$x.us" ]
  %256 = shufflevector <4 x i32> %convolved791.sroa.0.1.us, <4 x i32> %convolved791.sroa.40.1.us, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %257 = shufflevector <4 x i32> %convolved791.sroa.80.1.us, <4 x i32> %convolved791.sroa.120.1.us, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %258 = shufflevector <8 x i32> %256, <8 x i32> %257, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %259 = add nsw i64 %indvars.iv1973, %255
  %260 = shl nsw i64 %259, 4
  %261 = getelementptr inbounds i16, i16* %filter_zeroed, i64 %260
  %262 = bitcast i16* %261 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 16, !tbaa !391
  %264 = getelementptr inbounds i16, i16* %261, i64 8
  %265 = bitcast i16* %264 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 16, !tbaa !391
  %267 = shufflevector <8 x i16> %263, <8 x i16> %266, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %268 = sext <16 x i16> %267 to <16 x i32>
  %269 = add nsw <16 x i32> %258, %268
  %270 = shufflevector <16 x i32> %269, <16 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %271 = shufflevector <16 x i32> %269, <16 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %272 = shufflevector <16 x i32> %269, <16 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %273 = shufflevector <16 x i32> %269, <16 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %indvars.iv.next1974 = add nuw nsw i64 %indvars.iv1973, 1
  %.not933.us = icmp eq i64 %indvars.iv.next1974, %208
  br i1 %.not933.us, label %"end for sum_filter.s1.r19$x.loopexit.us", label %"for sum_filter.s1.r19$x.us"

"end for sum_filter.s1.r19$x.loopexit.us":        ; preds = %"for sum_filter.s1.r19$x.us"
  %indvars.iv.next1976 = add nuw nsw i64 %indvars.iv1975, 1
  %.not932.us = icmp eq i64 %indvars.iv.next1976, %211
  br i1 %.not932.us, label %"consume sum_filter", label %"for sum_filter.s1.r19$y.us"

"consume sum_filter":                             ; preds = %"end for sum_filter.s1.r19$x.loopexit.us", %"for filter_zeroed.s0.y.preheader", %"for sum_filter.s1.r19$y.preheader", %"produce filter_zeroed"
  %convolved791.sroa.120.3 = phi <4 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ], [ zeroinitializer, %"for filter_zeroed.s0.y.preheader" ], [ %273, %"end for sum_filter.s1.r19$x.loopexit.us" ]
  %convolved791.sroa.80.3 = phi <4 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ], [ zeroinitializer, %"for filter_zeroed.s0.y.preheader" ], [ %272, %"end for sum_filter.s1.r19$x.loopexit.us" ]
  %convolved791.sroa.40.3 = phi <4 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ], [ zeroinitializer, %"for filter_zeroed.s0.y.preheader" ], [ %271, %"end for sum_filter.s1.r19$x.loopexit.us" ]
  %convolved791.sroa.0.3 = phi <4 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ], [ zeroinitializer, %"for filter_zeroed.s0.y.preheader" ], [ %270, %"end for sum_filter.s1.r19$x.loopexit.us" ]
  %274 = sext i32 %output.s0.c.c.base to i64
  %275 = getelementptr inbounds i32, i32* %122, i64 %274
  %276 = bitcast i32* %275 to <4 x i32>*
  %277 = load <4 x i32>, <4 x i32>* %276, align 4, !tbaa !393
  %278 = getelementptr inbounds i32, i32* %275, i64 4
  %279 = bitcast i32* %278 to <4 x i32>*
  %280 = load <4 x i32>, <4 x i32>* %279, align 4, !tbaa !393
  %281 = getelementptr inbounds i32, i32* %275, i64 8
  %282 = bitcast i32* %281 to <4 x i32>*
  %283 = load <4 x i32>, <4 x i32>* %282, align 4, !tbaa !393
  %284 = getelementptr inbounds i32, i32* %275, i64 12
  %285 = bitcast i32* %284 to <4 x i32>*
  %286 = load <4 x i32>, <4 x i32>* %285, align 4, !tbaa !393
  %287 = shufflevector <4 x i32> %277, <4 x i32> %280, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %288 = shufflevector <4 x i32> %283, <4 x i32> %286, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %289 = shufflevector <8 x i32> %287, <8 x i32> %288, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %290 = shufflevector <4 x i32> %convolved791.sroa.0.3, <4 x i32> %convolved791.sroa.40.3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %291 = shufflevector <4 x i32> %convolved791.sroa.80.3, <4 x i32> %convolved791.sroa.120.3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %292 = shufflevector <8 x i32> %290, <8 x i32> %291, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %293 = mul nsw <16 x i32> %292, %125
  %294 = sub nsw <16 x i32> %289, %293
  %295 = shufflevector <16 x i32> %294, <16 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %295, <4 x i32>* %126, align 16, !tbaa !395
  %296 = shufflevector <16 x i32> %294, <16 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i32> %296, <4 x i32>* %128, align 16, !tbaa !406
  %297 = shufflevector <16 x i32> %294, <16 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  store <4 x i32> %297, <4 x i32>* %130, align 16, !tbaa !408
  %298 = shufflevector <16 x i32> %294, <16 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  store <4 x i32> %298, <4 x i32>* %132, align 16, !tbaa !411
  br i1 %141, label %"for output.s0.b.rebased.preheader", label %"end for output.s0.b.rebased", !prof !387

"for output.s0.b.rebased.preheader":              ; preds = %"consume sum_filter"
  %299 = insertelement <16 x i32> undef, i32 %output.s0.c.c.base, i32 0
  %300 = shufflevector <16 x i32> %299, <16 x i32> undef, <16 x i32> zeroinitializer
  %301 = add nsw <16 x i32> %300, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %.lobit927 = ashr <16 x i32> %301, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %302 = sub nsw <16 x i32> %301, %.lobit927
  %303 = and <16 x i32> %.lobit927, %154
  %304 = sub i32 %output.s0.c.c.base, %t2195
  %305 = bitcast i16* %filter_zeroed to <8 x i16>*
  %306 = getelementptr inbounds i16, i16* %filter_zeroed, i64 8
  %307 = bitcast i16* %306 to <8 x i16>*
  %308 = getelementptr inbounds i16, i16* %filter_zeroed, i64 16
  %309 = bitcast i16* %308 to <8 x i16>*
  %310 = getelementptr inbounds i16, i16* %filter_zeroed, i64 24
  %311 = bitcast i16* %310 to <8 x i16>*
  %312 = getelementptr inbounds i16, i16* %filter_zeroed, i64 32
  %313 = bitcast i16* %312 to <8 x i16>*
  %314 = getelementptr inbounds i16, i16* %filter_zeroed, i64 40
  %315 = bitcast i16* %314 to <8 x i16>*
  %316 = getelementptr inbounds i16, i16* %filter_zeroed, i64 48
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = getelementptr inbounds i16, i16* %filter_zeroed, i64 56
  %319 = bitcast i16* %318 to <8 x i16>*
  %320 = getelementptr inbounds i16, i16* %filter_zeroed, i64 64
  %321 = bitcast i16* %320 to <8 x i16>*
  %322 = getelementptr inbounds i16, i16* %filter_zeroed, i64 72
  %323 = bitcast i16* %322 to <8 x i16>*
  %324 = getelementptr inbounds i16, i16* %filter_zeroed, i64 80
  %325 = bitcast i16* %324 to <8 x i16>*
  %326 = getelementptr inbounds i16, i16* %filter_zeroed, i64 88
  %327 = bitcast i16* %326 to <8 x i16>*
  %328 = getelementptr inbounds i16, i16* %filter_zeroed, i64 96
  %329 = bitcast i16* %328 to <8 x i16>*
  %330 = getelementptr inbounds i16, i16* %filter_zeroed, i64 104
  %331 = bitcast i16* %330 to <8 x i16>*
  %332 = getelementptr inbounds i16, i16* %filter_zeroed, i64 112
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = getelementptr inbounds i16, i16* %filter_zeroed, i64 120
  %335 = bitcast i16* %334 to <8 x i16>*
  %336 = getelementptr inbounds i16, i16* %filter_zeroed, i64 128
  %337 = bitcast i16* %336 to <8 x i16>*
  %338 = getelementptr inbounds i16, i16* %filter_zeroed, i64 136
  %339 = bitcast i16* %338 to <8 x i16>*
  %340 = sext i32 %304 to i64
  br label %"for output.s0.b.rebased"

"for output.s0.b.rebased":                        ; preds = %"for output.s0.b.rebased.preheader", %"end for output.s0.y.yo"
  %indvars.iv1996 = phi i64 [ 0, %"for output.s0.b.rebased.preheader" ], [ %indvars.iv.next1997, %"end for output.s0.y.yo" ]
  %341 = load i64, i64* %.fca.1.gep721, align 8, !tbaa !381
  %cmp.i1068 = icmp ult i64 %341, %145
  %342 = load i8*, i8** %.fca.0.gep720, align 8, !tbaa !383
  br i1 %cmp.i1068, label %if.then.i1071, label %pseudostack_alloc.exit1084, !prof !384

if.then.i1071:                                    ; preds = %"for output.s0.b.rebased"
  %tobool1.not.i1070 = icmp ne i8* %342, null
  %343 = load i64, i64* %.fca.2.gep722, align 8
  %cmp2.i1073 = icmp ugt i64 %343, 16384
  %or.cond1392 = and i1 %tobool1.not.i1070, %cmp2.i1073
  br i1 %or.cond1392, label %if.then3.i1075, label %if.end.i1079

if.then3.i1075:                                   ; preds = %if.then.i1071
  call void @halide_free(i8* null, i8* nonnull %342) #14
  %.pre2141 = load i64, i64* %.fca.2.gep722, align 8, !tbaa !385
  br label %if.end.i1079

if.end.i1079:                                     ; preds = %if.then3.i1075, %if.then.i1071
  %344 = phi i64 [ %.pre2141, %if.then3.i1075 ], [ %343, %if.then.i1071 ]
  %add.i1077 = add i64 %344, %145
  store i64 %add.i1077, i64* %.fca.2.gep722, align 8, !tbaa !385
  %cmp7.i1078 = icmp ugt i64 %add.i1077, 16384
  br i1 %cmp7.i1078, label %if.then8.i1081, label %if.end11.i1083

if.then8.i1081:                                   ; preds = %if.end.i1079
  %call.i1080 = call i8* @halide_malloc(i8* null, i64 %145) #14
  br label %if.end11.i1083

if.end11.i1083:                                   ; preds = %if.then8.i1081, %if.end.i1079
  %storemerge.i1082 = phi i8* [ %call.i1080, %if.then8.i1081 ], [ null, %if.end.i1079 ]
  store i8* %storemerge.i1082, i8** %.fca.0.gep720, align 8, !tbaa !383
  store i64 %145, i64* %.fca.1.gep721, align 8, !tbaa !381
  br label %pseudostack_alloc.exit1084

pseudostack_alloc.exit1084:                       ; preds = %"for output.s0.b.rebased", %if.end11.i1083
  %345 = phi i8* [ %storemerge.i1082, %if.end11.i1083 ], [ %342, %"for output.s0.b.rebased" ]
  %.not920 = icmp eq i8* %345, null
  br i1 %.not920, label %then_bb5, label %"produce resampled_input", !prof !386

"end for output.s0.b.rebased":                    ; preds = %"end for output.s0.y.yo", %"consume sum_filter"
  %.2 = phi i8* [ %.11332, %"consume sum_filter" ], [ %207, %"end for output.s0.y.yo" ]
  %346 = add nuw nsw i32 %output.s0.c.co, 1
  %.not917 = icmp eq i32 %346, %t2172
  br i1 %.not917, label %after_bb.loopexit, label %"for output.s0.c.co"

then_bb5:                                         ; preds = %pseudostack_alloc.exit1084
  %347 = alloca i8*, i64 %145, align 16
  %348 = bitcast i8** %347 to i8*
  store i8** %347, i8*** %146, align 8
  br label %"produce resampled_input"

"produce resampled_input":                        ; preds = %pseudostack_alloc.exit1084, %then_bb5
  %resampled_input = phi i8* [ %348, %then_bb5 ], [ %345, %pseudostack_alloc.exit1084 ]
  %349 = add nsw i64 %indvars.iv1996, %219
  br i1 %t2194, label %then_bb7, label %next_bb8

then_bb7:                                         ; preds = %"produce resampled_input"
  %350 = mul nsw i64 %349, %220
  %351 = add nsw i64 %350, %340
  br i1 %.not2296, label %"for resampled_input.s0.y.rebased.us", label %"consume resampled_input", !prof !413

"for resampled_input.s0.y.rebased.us":            ; preds = %then_bb7, %"end for resampled_input.s0.x.rebased.loopexit.us"
  %indvars.iv1986 = phi i64 [ %indvars.iv.next1987, %"end for resampled_input.s0.x.rebased.loopexit.us" ], [ 0, %then_bb7 ]
  %352 = add nsw i64 %indvars.iv1986, %213
  %353 = mul nsw i64 %352, %214
  %354 = add nsw i64 %353, %215
  %355 = add nsw i64 %indvars.iv1986, %216
  %356 = mul nsw i64 %355, %217
  %357 = add nsw i64 %351, %356
  br label %"for resampled_input.s0.x.rebased.us"

"for resampled_input.s0.x.rebased.us":            ; preds = %"for resampled_input.s0.y.rebased.us", %"for resampled_input.s0.x.rebased.us"
  %indvars.iv1984 = phi i64 [ 0, %"for resampled_input.s0.y.rebased.us" ], [ %indvars.iv.next1985, %"for resampled_input.s0.x.rebased.us" ]
  %358 = add nsw i64 %indvars.iv1984, %156
  %359 = mul nsw i64 %358, %157
  %360 = add nsw i64 %359, %357
  %361 = getelementptr inbounds i8, i8* %10, i64 %360
  %362 = bitcast i8* %361 to <16 x i8>*
  %363 = load <16 x i8>, <16 x i8>* %362, align 1, !tbaa !414
  %364 = add nsw i64 %indvars.iv1984, %354
  %365 = shl nsw i64 %364, 4
  %366 = getelementptr inbounds i8, i8* %resampled_input, i64 %365
  %367 = bitcast i8* %366 to <16 x i8>*
  store <16 x i8> %363, <16 x i8>* %367, align 16, !tbaa !416
  %indvars.iv.next1985 = add nuw nsw i64 %indvars.iv1984, 1
  %.not931.us = icmp eq i64 %indvars.iv1984, %212
  br i1 %.not931.us, label %"end for resampled_input.s0.x.rebased.loopexit.us", label %"for resampled_input.s0.x.rebased.us"

"end for resampled_input.s0.x.rebased.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased.us"
  %indvars.iv.next1987 = add nuw nsw i64 %indvars.iv1986, 1
  %.not930.us = icmp eq i64 %indvars.iv1986, %218
  br i1 %.not930.us, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased.us"

next_bb8:                                         ; preds = %"produce resampled_input"
  %368 = trunc i64 %349 to i32
  %369 = mul i32 %18, %368
  %t2244 = sub i32 %369, %t2195
  br i1 %222, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased9.preheader.split.us", !prof !418

"for resampled_input.s0.y.rebased9.preheader.split.us": ; preds = %next_bb8
  %370 = sdiv <16 x i32> %302, %150
  %371 = add nsw <16 x i32> %370, %303
  %372 = and <16 x i32> %371, %155
  br label %"for resampled_input.s0.y.rebased9.us"

"for resampled_input.s0.y.rebased9.us":           ; preds = %"end for resampled_input.s0.x.rebased13.loopexit.us", %"for resampled_input.s0.y.rebased9.preheader.split.us"
  %indvars.iv1980 = phi i64 [ %indvars.iv.next1981, %"end for resampled_input.s0.x.rebased13.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased9.preheader.split.us" ]
  %373 = add nsw i64 %indvars.iv1980, %213
  %374 = mul nsw i64 %373, %214
  %375 = add nsw i64 %374, %215
  %376 = trunc i64 %indvars.iv1980 to i32
  %377 = add i32 %b20, %376
  %378 = mul i32 %377, %15
  %379 = add i32 %378, %t2244
  br label %"for resampled_input.s0.x.rebased12.us"

"for resampled_input.s0.x.rebased12.us":          ; preds = %"for resampled_input.s0.y.rebased9.us", %"for resampled_input.s0.x.rebased12.us"
  %indvars.iv1978 = phi i64 [ 0, %"for resampled_input.s0.y.rebased9.us" ], [ %indvars.iv.next1979, %"for resampled_input.s0.x.rebased12.us" ]
  %380 = trunc i64 %indvars.iv1978 to i32
  %381 = add nsw i32 %b18, %380
  %382 = mul nsw i32 %381, %13
  %383 = add nsw i32 %379, %382
  %384 = insertelement <16 x i32> undef, i32 %383, i32 0
  %385 = shufflevector <16 x i32> %384, <16 x i32> undef, <16 x i32> zeroinitializer
  %386 = add nsw <16 x i32> %385, %372
  %387 = extractelement <16 x i32> %386, i32 0
  %388 = sext i32 %387 to i64
  %389 = getelementptr inbounds i8, i8* %10, i64 %388
  %390 = load i8, i8* %389, align 1, !tbaa !414
  %391 = insertelement <16 x i8> undef, i8 %390, i32 0
  %392 = extractelement <16 x i32> %386, i32 1
  %393 = sext i32 %392 to i64
  %394 = getelementptr inbounds i8, i8* %10, i64 %393
  %395 = load i8, i8* %394, align 1, !tbaa !414
  %396 = insertelement <16 x i8> %391, i8 %395, i32 1
  %397 = extractelement <16 x i32> %386, i32 2
  %398 = sext i32 %397 to i64
  %399 = getelementptr inbounds i8, i8* %10, i64 %398
  %400 = load i8, i8* %399, align 1, !tbaa !414
  %401 = insertelement <16 x i8> %396, i8 %400, i32 2
  %402 = extractelement <16 x i32> %386, i32 3
  %403 = sext i32 %402 to i64
  %404 = getelementptr inbounds i8, i8* %10, i64 %403
  %405 = load i8, i8* %404, align 1, !tbaa !414
  %406 = insertelement <16 x i8> %401, i8 %405, i32 3
  %407 = extractelement <16 x i32> %386, i32 4
  %408 = sext i32 %407 to i64
  %409 = getelementptr inbounds i8, i8* %10, i64 %408
  %410 = load i8, i8* %409, align 1, !tbaa !414
  %411 = insertelement <16 x i8> %406, i8 %410, i32 4
  %412 = extractelement <16 x i32> %386, i32 5
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds i8, i8* %10, i64 %413
  %415 = load i8, i8* %414, align 1, !tbaa !414
  %416 = insertelement <16 x i8> %411, i8 %415, i32 5
  %417 = extractelement <16 x i32> %386, i32 6
  %418 = sext i32 %417 to i64
  %419 = getelementptr inbounds i8, i8* %10, i64 %418
  %420 = load i8, i8* %419, align 1, !tbaa !414
  %421 = insertelement <16 x i8> %416, i8 %420, i32 6
  %422 = extractelement <16 x i32> %386, i32 7
  %423 = sext i32 %422 to i64
  %424 = getelementptr inbounds i8, i8* %10, i64 %423
  %425 = load i8, i8* %424, align 1, !tbaa !414
  %426 = insertelement <16 x i8> %421, i8 %425, i32 7
  %427 = extractelement <16 x i32> %386, i32 8
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds i8, i8* %10, i64 %428
  %430 = load i8, i8* %429, align 1, !tbaa !414
  %431 = insertelement <16 x i8> %426, i8 %430, i32 8
  %432 = extractelement <16 x i32> %386, i32 9
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds i8, i8* %10, i64 %433
  %435 = load i8, i8* %434, align 1, !tbaa !414
  %436 = insertelement <16 x i8> %431, i8 %435, i32 9
  %437 = extractelement <16 x i32> %386, i32 10
  %438 = sext i32 %437 to i64
  %439 = getelementptr inbounds i8, i8* %10, i64 %438
  %440 = load i8, i8* %439, align 1, !tbaa !414
  %441 = insertelement <16 x i8> %436, i8 %440, i32 10
  %442 = extractelement <16 x i32> %386, i32 11
  %443 = sext i32 %442 to i64
  %444 = getelementptr inbounds i8, i8* %10, i64 %443
  %445 = load i8, i8* %444, align 1, !tbaa !414
  %446 = insertelement <16 x i8> %441, i8 %445, i32 11
  %447 = extractelement <16 x i32> %386, i32 12
  %448 = sext i32 %447 to i64
  %449 = getelementptr inbounds i8, i8* %10, i64 %448
  %450 = load i8, i8* %449, align 1, !tbaa !414
  %451 = insertelement <16 x i8> %446, i8 %450, i32 12
  %452 = extractelement <16 x i32> %386, i32 13
  %453 = sext i32 %452 to i64
  %454 = getelementptr inbounds i8, i8* %10, i64 %453
  %455 = load i8, i8* %454, align 1, !tbaa !414
  %456 = insertelement <16 x i8> %451, i8 %455, i32 13
  %457 = extractelement <16 x i32> %386, i32 14
  %458 = sext i32 %457 to i64
  %459 = getelementptr inbounds i8, i8* %10, i64 %458
  %460 = load i8, i8* %459, align 1, !tbaa !414
  %461 = insertelement <16 x i8> %456, i8 %460, i32 14
  %462 = extractelement <16 x i32> %386, i32 15
  %463 = sext i32 %462 to i64
  %464 = getelementptr inbounds i8, i8* %10, i64 %463
  %465 = load i8, i8* %464, align 1, !tbaa !414
  %466 = insertelement <16 x i8> %461, i8 %465, i32 15
  %467 = add nsw i64 %indvars.iv1978, %375
  %468 = shl nsw i64 %467, 4
  %469 = getelementptr inbounds i8, i8* %resampled_input, i64 %468
  %470 = bitcast i8* %469 to <16 x i8>*
  store <16 x i8> %466, <16 x i8>* %470, align 16, !tbaa !416
  %indvars.iv.next1979 = add nuw nsw i64 %indvars.iv1978, 1
  %.not929.us = icmp eq i64 %indvars.iv1978, %212
  br i1 %.not929.us, label %"end for resampled_input.s0.x.rebased13.loopexit.us", label %"for resampled_input.s0.x.rebased12.us"

"end for resampled_input.s0.x.rebased13.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased12.us"
  %indvars.iv.next1981 = add nuw nsw i64 %indvars.iv1980, 1
  %.not926.us = icmp eq i64 %indvars.iv1980, %218
  br i1 %.not926.us, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased9.us"

"consume resampled_input":                        ; preds = %"end for resampled_input.s0.x.rebased13.loopexit.us", %"end for resampled_input.s0.x.rebased.loopexit.us", %next_bb8, %then_bb7
  %471 = trunc i64 %349 to i32
  %472 = mul i32 %27, %471
  %t2234 = add i32 %472, %output.s0.c.c.base
  %t2255 = sub i32 %t2234, %reass.add1430
  br i1 %158, label %"for output.s0.y.yo.preheader", label %"end for output.s0.y.yo", !prof !387

"for output.s0.y.yo.preheader":                   ; preds = %"consume resampled_input"
  %473 = load <4 x i32>, <4 x i32>* %126, align 16
  %474 = load <4 x i32>, <4 x i32>* %128, align 16
  %475 = load <4 x i32>, <4 x i32>* %130, align 16
  %476 = load <4 x i32>, <4 x i32>* %132, align 16
  br label %"for output.s0.y.yo"

"for output.s0.y.yo":                             ; preds = %"for output.s0.y.yo.preheader", %"end for output.s0.x.xo"
  %output.s0.y.yo = phi i32 [ %506, %"end for output.s0.x.xo" ], [ 0, %"for output.s0.y.yo.preheader" ]
  %a23 = shl nuw nsw i32 %output.s0.y.yo, 1
  %477 = icmp slt i32 %a23, %b25
  %output.s0.y.y.base.s = select i1 %477, i32 %a23, i32 %b25
  %t2280 = add nsw i32 %output.s0.y.y.base.s, %24
  %t2281 = add nsw i32 %t2280, 1
  %t2282 = mul nsw i32 %t2280, %stride_y
  %478 = add nsw i32 %t2282, %t2254
  %t2283 = mul nsw i32 %478, %a21
  %479 = add nsw i32 %t2282, %t2285
  %t2286 = mul nsw i32 %479, %a21
  %t2287 = mul nsw i32 %t2281, %stride_y
  %480 = add nsw i32 %t2287, %t2254
  %t2288 = mul nsw i32 %480, %a21
  %481 = add nsw i32 %t2287, %t2285
  %t2289 = mul nsw i32 %481, %a21
  %t2290 = sub nsw i32 %t2282, %t2223
  %t2291 = mul nsw i32 %t2290, %a21
  %t2292 = sub nsw i32 %t2287, %t2223
  %t2293 = mul nsw i32 %t2292, %a21
  br i1 %159, label %"for output.s0.x.xo.preheader", label %"end for output.s0.x.xo", !prof !387

"for output.s0.x.xo.preheader":                   ; preds = %"for output.s0.y.yo"
  %482 = mul nsw i32 %t2280, %26
  %t2278 = add nsw i32 %482, %t2255
  %483 = mul nsw i32 %t2281, %26
  %t2279 = add nsw i32 %483, %t2255
  %t2274 = add nsw i32 %t2283, %t2250
  %t2272 = add nsw i32 %t2283, %t2284
  %t2267 = add nsw i32 %t2286, %t2250
  %t2265 = add nsw i32 %t2286, %t2284
  %t2275 = add nsw i32 %t2288, %t2250
  %t2273 = add nsw i32 %t2288, %t2284
  %t2268 = add nsw i32 %t2289, %t2250
  %t2266 = add nsw i32 %t2289, %t2284
  %t2260 = add nsw i32 %t2291, %t2250
  %t2258 = add nsw i32 %t2291, %t2284
  %t2261 = add nsw i32 %t2293, %t2250
  %t2259 = add nsw i32 %t2293, %t2284
  %t2270 = sub nsw i32 %t2283, %t2225
  %t2263 = sub nsw i32 %t2286, %t2225
  %t2271 = sub nsw i32 %t2288, %t2225
  %t2264 = sub nsw i32 %t2289, %t2225
  %t2256 = sub nsw i32 %t2291, %t2225
  %t2257 = sub nsw i32 %t2293, %t2225
  %484 = sext i32 %t2256 to i64
  %485 = sext i32 %t2257 to i64
  %486 = sext i32 %t2258 to i64
  %487 = sext i32 %t2259 to i64
  %488 = sext i32 %t2260 to i64
  %489 = sext i32 %t2261 to i64
  %490 = sext i32 %t2263 to i64
  %491 = sext i32 %t2264 to i64
  %492 = sext i32 %t2265 to i64
  %493 = sext i32 %t2266 to i64
  %494 = sext i32 %t2267 to i64
  %495 = sext i32 %t2268 to i64
  %496 = sext i32 %t2270 to i64
  %497 = sext i32 %t2271 to i64
  %498 = sext i32 %t2272 to i64
  %499 = sext i32 %t2273 to i64
  %500 = sext i32 %t2274 to i64
  %501 = sext i32 %t2275 to i64
  %502 = sext i32 %t2278 to i64
  %503 = sext i32 %t2279 to i64
  br label %"for output.s0.x.xo"

"end for output.s0.y.yo":                         ; preds = %"end for output.s0.x.xo", %"consume resampled_input"
  %indvars.iv.next1997 = add nuw nsw i64 %indvars.iv1996, 1
  %504 = icmp eq i64 %indvars.iv.next1997, %zext1999
  br i1 %504, label %"end for output.s0.b.rebased", label %"for output.s0.b.rebased"

"for output.s0.x.xo":                             ; preds = %"for output.s0.x.xo.preheader", %"consume convolved"
  %output.s0.x.xo = phi i32 [ %1457, %"consume convolved" ], [ 0, %"for output.s0.x.xo.preheader" ]
  %a24 = shl nuw nsw i32 %output.s0.x.xo, 1
  %505 = icmp slt i32 %a24, %b26
  %output.s0.x.x.base.s = select i1 %505, i32 %a24, i32 %b26
  br i1 %t2217, label %then_bb16, label %next_bb17

"end for output.s0.x.xo.loopexit":                ; preds = %"consume convolved"
  store <4 x i32> %1351, <4 x i32>* %160, align 16, !tbaa !419
  store <4 x i32> %1350, <4 x i32>* %162, align 16, !tbaa !430
  store <4 x i32> %1349, <4 x i32>* %164, align 16, !tbaa !432
  store <4 x i32> %1348, <4 x i32>* %166, align 16, !tbaa !435
  store <4 x i32> %1347, <4 x i32>* %168, align 16, !tbaa !437
  store <4 x i32> %1346, <4 x i32>* %170, align 16, !tbaa !441
  store <4 x i32> %1345, <4 x i32>* %172, align 16, !tbaa !443
  store <4 x i32> %1344, <4 x i32>* %174, align 16, !tbaa !446
  store <4 x i32> %1343, <4 x i32>* %176, align 16, !tbaa !448
  store <4 x i32> %1342, <4 x i32>* %178, align 16, !tbaa !453
  store <4 x i32> %1341, <4 x i32>* %180, align 16, !tbaa !455
  store <4 x i32> %1340, <4 x i32>* %182, align 16, !tbaa !458
  store <4 x i32> %1339, <4 x i32>* %184, align 16, !tbaa !460
  store <4 x i32> %1338, <4 x i32>* %186, align 16, !tbaa !464
  store <4 x i32> %1337, <4 x i32>* %188, align 16, !tbaa !466
  store <4 x i32> %1336, <4 x i32>* %190, align 16, !tbaa !469
  br label %"end for output.s0.x.xo"

"end for output.s0.x.xo":                         ; preds = %"end for output.s0.x.xo.loopexit", %"for output.s0.y.yo"
  %506 = add nuw nsw i32 %output.s0.y.yo, 1
  %.not922 = icmp eq i32 %506, %t2196
  br i1 %.not922, label %"end for output.s0.y.yo", label %"for output.s0.y.yo"

then_bb16:                                        ; preds = %"for output.s0.x.xo"
  %507 = load <8 x i16>, <8 x i16>* %305, align 16, !tbaa !471
  %508 = load <8 x i16>, <8 x i16>* %307, align 16, !tbaa !480
  %509 = shufflevector <8 x i16> %508, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %510 = sext i32 %output.s0.x.x.base.s to i64
  %511 = add nsw i64 %510, %192
  %512 = mul nsw i64 %511, %193
  %513 = add nsw i64 %512, %484
  %514 = shl nsw i64 %513, 4
  %515 = getelementptr inbounds i8, i8* %resampled_input, i64 %514
  %516 = bitcast i8* %515 to <16 x i8>*
  %517 = load <16 x i8>, <16 x i8>* %516, align 16, !tbaa !416
  %518 = zext <16 x i8> %517 to <16 x i16>
  %519 = shufflevector <8 x i16> %507, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %520 = shufflevector <16 x i16> %518, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %521 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %519, <4 x i16> %520)
  %522 = shufflevector <8 x i16> %507, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %523 = shufflevector <16 x i16> %518, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %524 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %522, <4 x i16> %523)
  %525 = shufflevector <8 x i16> %508, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %526 = shufflevector <16 x i16> %518, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %527 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %525, <4 x i16> %526)
  %528 = shufflevector <16 x i16> %509, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %529 = shufflevector <16 x i16> %518, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %530 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %528, <4 x i16> %529)
  %531 = add nsw <4 x i32> %521, %473
  %532 = add nsw <4 x i32> %524, %474
  %533 = add nsw <4 x i32> %527, %475
  %534 = add nsw <4 x i32> %530, %476
  %535 = add nsw i64 %511, 1
  %536 = mul nsw i64 %535, %193
  %537 = add nsw i64 %536, %484
  %538 = shl nsw i64 %537, 4
  %539 = getelementptr inbounds i8, i8* %resampled_input, i64 %538
  %540 = bitcast i8* %539 to <16 x i8>*
  %541 = load <16 x i8>, <16 x i8>* %540, align 16, !tbaa !416
  %542 = zext <16 x i8> %541 to <16 x i16>
  %543 = shufflevector <16 x i16> %542, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %544 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %519, <4 x i16> %543)
  %545 = shufflevector <16 x i16> %542, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %546 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %522, <4 x i16> %545)
  %547 = shufflevector <16 x i16> %542, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %548 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %525, <4 x i16> %547)
  %549 = shufflevector <16 x i16> %542, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %550 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %528, <4 x i16> %549)
  %551 = add nsw <4 x i32> %544, %473
  %552 = add nsw <4 x i32> %546, %474
  %553 = add nsw <4 x i32> %548, %475
  %554 = add nsw <4 x i32> %550, %476
  %555 = add nsw i64 %512, %485
  %556 = shl nsw i64 %555, 4
  %557 = getelementptr inbounds i8, i8* %resampled_input, i64 %556
  %558 = bitcast i8* %557 to <16 x i8>*
  %559 = load <16 x i8>, <16 x i8>* %558, align 16, !tbaa !416
  %560 = zext <16 x i8> %559 to <16 x i16>
  %561 = shufflevector <16 x i16> %560, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %562 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %519, <4 x i16> %561)
  %563 = shufflevector <16 x i16> %560, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %564 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %522, <4 x i16> %563)
  %565 = shufflevector <16 x i16> %560, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %566 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %525, <4 x i16> %565)
  %567 = shufflevector <16 x i16> %560, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %568 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %528, <4 x i16> %567)
  %569 = add nsw <4 x i32> %562, %473
  %570 = add nsw <4 x i32> %564, %474
  %571 = add nsw <4 x i32> %566, %475
  %572 = add nsw <4 x i32> %568, %476
  %573 = add nsw i64 %536, %485
  %574 = shl nsw i64 %573, 4
  %575 = getelementptr inbounds i8, i8* %resampled_input, i64 %574
  %576 = bitcast i8* %575 to <16 x i8>*
  %577 = load <16 x i8>, <16 x i8>* %576, align 16, !tbaa !416
  %578 = zext <16 x i8> %577 to <16 x i16>
  %579 = shufflevector <16 x i16> %578, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %580 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %519, <4 x i16> %579)
  %581 = shufflevector <16 x i16> %578, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %582 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %522, <4 x i16> %581)
  %583 = shufflevector <16 x i16> %578, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %584 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %525, <4 x i16> %583)
  %585 = shufflevector <16 x i16> %578, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %586 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %528, <4 x i16> %585)
  %587 = add nsw <4 x i32> %580, %473
  %588 = add nsw <4 x i32> %582, %474
  %589 = add nsw <4 x i32> %584, %475
  %590 = add nsw <4 x i32> %586, %476
  %591 = load <8 x i16>, <8 x i16>* %309, align 16, !tbaa !482
  %592 = load <8 x i16>, <8 x i16>* %311, align 16, !tbaa !485
  %593 = shufflevector <8 x i16> %592, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %594 = add nsw i64 %512, %486
  %595 = shl nsw i64 %594, 4
  %596 = getelementptr inbounds i8, i8* %resampled_input, i64 %595
  %597 = bitcast i8* %596 to <16 x i8>*
  %598 = load <16 x i8>, <16 x i8>* %597, align 16, !tbaa !416
  %599 = zext <16 x i8> %598 to <16 x i16>
  %600 = shufflevector <8 x i16> %591, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %601 = shufflevector <16 x i16> %599, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %602 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %600, <4 x i16> %601)
  %603 = shufflevector <8 x i16> %591, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %604 = shufflevector <16 x i16> %599, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %605 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %603, <4 x i16> %604)
  %606 = shufflevector <8 x i16> %592, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %607 = shufflevector <16 x i16> %599, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %608 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %606, <4 x i16> %607)
  %609 = shufflevector <16 x i16> %593, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %610 = shufflevector <16 x i16> %599, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %611 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %609, <4 x i16> %610)
  %612 = add nsw <4 x i32> %602, %531
  %613 = add nsw <4 x i32> %605, %532
  %614 = add nsw <4 x i32> %608, %533
  %615 = add nsw <4 x i32> %611, %534
  %616 = add nsw i64 %536, %486
  %617 = shl nsw i64 %616, 4
  %618 = getelementptr inbounds i8, i8* %resampled_input, i64 %617
  %619 = bitcast i8* %618 to <16 x i8>*
  %620 = load <16 x i8>, <16 x i8>* %619, align 16, !tbaa !416
  %621 = zext <16 x i8> %620 to <16 x i16>
  %622 = shufflevector <16 x i16> %621, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %623 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %600, <4 x i16> %622)
  %624 = shufflevector <16 x i16> %621, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %625 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %603, <4 x i16> %624)
  %626 = shufflevector <16 x i16> %621, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %627 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %606, <4 x i16> %626)
  %628 = shufflevector <16 x i16> %621, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %629 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %609, <4 x i16> %628)
  %630 = add nsw <4 x i32> %623, %551
  %631 = add nsw <4 x i32> %625, %552
  %632 = add nsw <4 x i32> %627, %553
  %633 = add nsw <4 x i32> %629, %554
  %634 = add nsw i64 %512, %487
  %635 = shl nsw i64 %634, 4
  %636 = getelementptr inbounds i8, i8* %resampled_input, i64 %635
  %637 = bitcast i8* %636 to <16 x i8>*
  %638 = load <16 x i8>, <16 x i8>* %637, align 16, !tbaa !416
  %639 = zext <16 x i8> %638 to <16 x i16>
  %640 = shufflevector <16 x i16> %639, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %641 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %600, <4 x i16> %640)
  %642 = shufflevector <16 x i16> %639, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %643 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %603, <4 x i16> %642)
  %644 = shufflevector <16 x i16> %639, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %645 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %606, <4 x i16> %644)
  %646 = shufflevector <16 x i16> %639, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %647 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %609, <4 x i16> %646)
  %648 = add nsw <4 x i32> %641, %569
  %649 = add nsw <4 x i32> %643, %570
  %650 = add nsw <4 x i32> %645, %571
  %651 = add nsw <4 x i32> %647, %572
  %652 = add nsw i64 %536, %487
  %653 = shl nsw i64 %652, 4
  %654 = getelementptr inbounds i8, i8* %resampled_input, i64 %653
  %655 = bitcast i8* %654 to <16 x i8>*
  %656 = load <16 x i8>, <16 x i8>* %655, align 16, !tbaa !416
  %657 = zext <16 x i8> %656 to <16 x i16>
  %658 = shufflevector <16 x i16> %657, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %659 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %600, <4 x i16> %658)
  %660 = shufflevector <16 x i16> %657, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %661 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %603, <4 x i16> %660)
  %662 = shufflevector <16 x i16> %657, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %663 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %606, <4 x i16> %662)
  %664 = shufflevector <16 x i16> %657, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %665 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %609, <4 x i16> %664)
  %666 = add nsw <4 x i32> %659, %587
  %667 = add nsw <4 x i32> %661, %588
  %668 = add nsw <4 x i32> %663, %589
  %669 = add nsw <4 x i32> %665, %590
  %670 = load <8 x i16>, <8 x i16>* %313, align 16, !tbaa !487
  %671 = load <8 x i16>, <8 x i16>* %315, align 16, !tbaa !491
  %672 = shufflevector <8 x i16> %671, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %673 = add nsw i64 %512, %488
  %674 = shl nsw i64 %673, 4
  %675 = getelementptr inbounds i8, i8* %resampled_input, i64 %674
  %676 = bitcast i8* %675 to <16 x i8>*
  %677 = load <16 x i8>, <16 x i8>* %676, align 16, !tbaa !416
  %678 = zext <16 x i8> %677 to <16 x i16>
  %679 = shufflevector <8 x i16> %670, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %680 = shufflevector <16 x i16> %678, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %681 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %679, <4 x i16> %680)
  %682 = shufflevector <8 x i16> %670, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %683 = shufflevector <16 x i16> %678, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %684 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %682, <4 x i16> %683)
  %685 = shufflevector <8 x i16> %671, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %686 = shufflevector <16 x i16> %678, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %687 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %685, <4 x i16> %686)
  %688 = shufflevector <16 x i16> %672, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %689 = shufflevector <16 x i16> %678, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %690 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %688, <4 x i16> %689)
  %691 = add nsw <4 x i32> %681, %612
  %692 = add nsw <4 x i32> %684, %613
  %693 = add nsw <4 x i32> %687, %614
  %694 = add nsw <4 x i32> %690, %615
  %695 = add nsw i64 %536, %488
  %696 = shl nsw i64 %695, 4
  %697 = getelementptr inbounds i8, i8* %resampled_input, i64 %696
  %698 = bitcast i8* %697 to <16 x i8>*
  %699 = load <16 x i8>, <16 x i8>* %698, align 16, !tbaa !416
  %700 = zext <16 x i8> %699 to <16 x i16>
  %701 = shufflevector <16 x i16> %700, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %702 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %679, <4 x i16> %701)
  %703 = shufflevector <16 x i16> %700, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %704 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %682, <4 x i16> %703)
  %705 = shufflevector <16 x i16> %700, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %706 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %685, <4 x i16> %705)
  %707 = shufflevector <16 x i16> %700, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %708 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %688, <4 x i16> %707)
  %709 = add nsw <4 x i32> %702, %630
  %710 = add nsw <4 x i32> %704, %631
  %711 = add nsw <4 x i32> %706, %632
  %712 = add nsw <4 x i32> %708, %633
  %713 = add nsw i64 %512, %489
  %714 = shl nsw i64 %713, 4
  %715 = getelementptr inbounds i8, i8* %resampled_input, i64 %714
  %716 = bitcast i8* %715 to <16 x i8>*
  %717 = load <16 x i8>, <16 x i8>* %716, align 16, !tbaa !416
  %718 = zext <16 x i8> %717 to <16 x i16>
  %719 = shufflevector <16 x i16> %718, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %720 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %679, <4 x i16> %719)
  %721 = shufflevector <16 x i16> %718, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %722 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %682, <4 x i16> %721)
  %723 = shufflevector <16 x i16> %718, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %724 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %685, <4 x i16> %723)
  %725 = shufflevector <16 x i16> %718, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %726 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %688, <4 x i16> %725)
  %727 = add nsw <4 x i32> %720, %648
  %728 = add nsw <4 x i32> %722, %649
  %729 = add nsw <4 x i32> %724, %650
  %730 = add nsw <4 x i32> %726, %651
  %731 = add nsw i64 %536, %489
  %732 = shl nsw i64 %731, 4
  %733 = getelementptr inbounds i8, i8* %resampled_input, i64 %732
  %734 = bitcast i8* %733 to <16 x i8>*
  %735 = load <16 x i8>, <16 x i8>* %734, align 16, !tbaa !416
  %736 = zext <16 x i8> %735 to <16 x i16>
  %737 = shufflevector <16 x i16> %736, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %738 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %679, <4 x i16> %737)
  %739 = shufflevector <16 x i16> %736, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %740 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %682, <4 x i16> %739)
  %741 = shufflevector <16 x i16> %736, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %742 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %685, <4 x i16> %741)
  %743 = shufflevector <16 x i16> %736, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %744 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %688, <4 x i16> %743)
  %745 = add nsw <4 x i32> %738, %666
  %746 = add nsw <4 x i32> %740, %667
  %747 = add nsw <4 x i32> %742, %668
  %748 = add nsw <4 x i32> %744, %669
  %749 = load <8 x i16>, <8 x i16>* %317, align 16, !tbaa !391
  %750 = load <8 x i16>, <8 x i16>* %319, align 16, !tbaa !391
  %751 = shufflevector <8 x i16> %750, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %752 = add nsw i64 %512, %490
  %753 = shl nsw i64 %752, 4
  %754 = getelementptr inbounds i8, i8* %resampled_input, i64 %753
  %755 = bitcast i8* %754 to <16 x i8>*
  %756 = load <16 x i8>, <16 x i8>* %755, align 16, !tbaa !416
  %757 = zext <16 x i8> %756 to <16 x i16>
  %758 = shufflevector <8 x i16> %749, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %759 = shufflevector <16 x i16> %757, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %760 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %758, <4 x i16> %759)
  %761 = shufflevector <8 x i16> %749, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %762 = shufflevector <16 x i16> %757, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %763 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %761, <4 x i16> %762)
  %764 = shufflevector <8 x i16> %750, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %765 = shufflevector <16 x i16> %757, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %766 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %764, <4 x i16> %765)
  %767 = shufflevector <16 x i16> %751, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %768 = shufflevector <16 x i16> %757, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %769 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %767, <4 x i16> %768)
  %770 = add nsw <4 x i32> %760, %691
  %771 = add nsw <4 x i32> %763, %692
  %772 = add nsw <4 x i32> %766, %693
  %773 = add nsw <4 x i32> %769, %694
  %774 = add nsw i64 %536, %490
  %775 = shl nsw i64 %774, 4
  %776 = getelementptr inbounds i8, i8* %resampled_input, i64 %775
  %777 = bitcast i8* %776 to <16 x i8>*
  %778 = load <16 x i8>, <16 x i8>* %777, align 16, !tbaa !416
  %779 = zext <16 x i8> %778 to <16 x i16>
  %780 = shufflevector <16 x i16> %779, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %781 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %758, <4 x i16> %780)
  %782 = shufflevector <16 x i16> %779, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %783 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %761, <4 x i16> %782)
  %784 = shufflevector <16 x i16> %779, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %785 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %764, <4 x i16> %784)
  %786 = shufflevector <16 x i16> %779, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %787 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %767, <4 x i16> %786)
  %788 = add nsw <4 x i32> %781, %709
  %789 = add nsw <4 x i32> %783, %710
  %790 = add nsw <4 x i32> %785, %711
  %791 = add nsw <4 x i32> %787, %712
  %792 = add nsw i64 %512, %491
  %793 = shl nsw i64 %792, 4
  %794 = getelementptr inbounds i8, i8* %resampled_input, i64 %793
  %795 = bitcast i8* %794 to <16 x i8>*
  %796 = load <16 x i8>, <16 x i8>* %795, align 16, !tbaa !416
  %797 = zext <16 x i8> %796 to <16 x i16>
  %798 = shufflevector <16 x i16> %797, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %799 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %758, <4 x i16> %798)
  %800 = shufflevector <16 x i16> %797, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %801 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %761, <4 x i16> %800)
  %802 = shufflevector <16 x i16> %797, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %803 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %764, <4 x i16> %802)
  %804 = shufflevector <16 x i16> %797, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %805 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %767, <4 x i16> %804)
  %806 = add nsw <4 x i32> %799, %727
  %807 = add nsw <4 x i32> %801, %728
  %808 = add nsw <4 x i32> %803, %729
  %809 = add nsw <4 x i32> %805, %730
  %810 = add nsw i64 %536, %491
  %811 = shl nsw i64 %810, 4
  %812 = getelementptr inbounds i8, i8* %resampled_input, i64 %811
  %813 = bitcast i8* %812 to <16 x i8>*
  %814 = load <16 x i8>, <16 x i8>* %813, align 16, !tbaa !416
  %815 = zext <16 x i8> %814 to <16 x i16>
  %816 = shufflevector <16 x i16> %815, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %817 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %758, <4 x i16> %816)
  %818 = shufflevector <16 x i16> %815, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %819 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %761, <4 x i16> %818)
  %820 = shufflevector <16 x i16> %815, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %821 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %764, <4 x i16> %820)
  %822 = shufflevector <16 x i16> %815, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %823 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %767, <4 x i16> %822)
  %824 = add nsw <4 x i32> %817, %745
  %825 = add nsw <4 x i32> %819, %746
  %826 = add nsw <4 x i32> %821, %747
  %827 = add nsw <4 x i32> %823, %748
  %828 = load <8 x i16>, <8 x i16>* %321, align 16, !tbaa !391
  %829 = load <8 x i16>, <8 x i16>* %323, align 16, !tbaa !391
  %830 = shufflevector <8 x i16> %829, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %831 = add nsw i64 %512, %492
  %832 = shl nsw i64 %831, 4
  %833 = getelementptr inbounds i8, i8* %resampled_input, i64 %832
  %834 = bitcast i8* %833 to <16 x i8>*
  %835 = load <16 x i8>, <16 x i8>* %834, align 16, !tbaa !416
  %836 = zext <16 x i8> %835 to <16 x i16>
  %837 = shufflevector <8 x i16> %828, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %838 = shufflevector <16 x i16> %836, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %839 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %837, <4 x i16> %838)
  %840 = shufflevector <8 x i16> %828, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %841 = shufflevector <16 x i16> %836, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %842 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %840, <4 x i16> %841)
  %843 = shufflevector <8 x i16> %829, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %844 = shufflevector <16 x i16> %836, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %845 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %843, <4 x i16> %844)
  %846 = shufflevector <16 x i16> %830, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %847 = shufflevector <16 x i16> %836, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %848 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %846, <4 x i16> %847)
  %849 = add nsw <4 x i32> %839, %770
  %850 = add nsw <4 x i32> %842, %771
  %851 = add nsw <4 x i32> %845, %772
  %852 = add nsw <4 x i32> %848, %773
  %853 = add nsw i64 %536, %492
  %854 = shl nsw i64 %853, 4
  %855 = getelementptr inbounds i8, i8* %resampled_input, i64 %854
  %856 = bitcast i8* %855 to <16 x i8>*
  %857 = load <16 x i8>, <16 x i8>* %856, align 16, !tbaa !416
  %858 = zext <16 x i8> %857 to <16 x i16>
  %859 = shufflevector <16 x i16> %858, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %860 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %837, <4 x i16> %859)
  %861 = shufflevector <16 x i16> %858, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %862 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %840, <4 x i16> %861)
  %863 = shufflevector <16 x i16> %858, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %864 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %843, <4 x i16> %863)
  %865 = shufflevector <16 x i16> %858, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %866 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %846, <4 x i16> %865)
  %867 = add nsw <4 x i32> %860, %788
  %868 = add nsw <4 x i32> %862, %789
  %869 = add nsw <4 x i32> %864, %790
  %870 = add nsw <4 x i32> %866, %791
  %871 = add nsw i64 %512, %493
  %872 = shl nsw i64 %871, 4
  %873 = getelementptr inbounds i8, i8* %resampled_input, i64 %872
  %874 = bitcast i8* %873 to <16 x i8>*
  %875 = load <16 x i8>, <16 x i8>* %874, align 16, !tbaa !416
  %876 = zext <16 x i8> %875 to <16 x i16>
  %877 = shufflevector <16 x i16> %876, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %878 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %837, <4 x i16> %877)
  %879 = shufflevector <16 x i16> %876, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %880 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %840, <4 x i16> %879)
  %881 = shufflevector <16 x i16> %876, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %882 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %843, <4 x i16> %881)
  %883 = shufflevector <16 x i16> %876, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %884 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %846, <4 x i16> %883)
  %885 = add nsw <4 x i32> %878, %806
  %886 = add nsw <4 x i32> %880, %807
  %887 = add nsw <4 x i32> %882, %808
  %888 = add nsw <4 x i32> %884, %809
  %889 = add nsw i64 %536, %493
  %890 = shl nsw i64 %889, 4
  %891 = getelementptr inbounds i8, i8* %resampled_input, i64 %890
  %892 = bitcast i8* %891 to <16 x i8>*
  %893 = load <16 x i8>, <16 x i8>* %892, align 16, !tbaa !416
  %894 = zext <16 x i8> %893 to <16 x i16>
  %895 = shufflevector <16 x i16> %894, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %896 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %837, <4 x i16> %895)
  %897 = shufflevector <16 x i16> %894, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %898 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %840, <4 x i16> %897)
  %899 = shufflevector <16 x i16> %894, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %900 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %843, <4 x i16> %899)
  %901 = shufflevector <16 x i16> %894, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %902 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %846, <4 x i16> %901)
  %903 = add nsw <4 x i32> %896, %824
  %904 = add nsw <4 x i32> %898, %825
  %905 = add nsw <4 x i32> %900, %826
  %906 = add nsw <4 x i32> %902, %827
  %907 = load <8 x i16>, <8 x i16>* %325, align 16, !tbaa !391
  %908 = load <8 x i16>, <8 x i16>* %327, align 16, !tbaa !391
  %909 = shufflevector <8 x i16> %908, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %910 = add nsw i64 %512, %494
  %911 = shl nsw i64 %910, 4
  %912 = getelementptr inbounds i8, i8* %resampled_input, i64 %911
  %913 = bitcast i8* %912 to <16 x i8>*
  %914 = load <16 x i8>, <16 x i8>* %913, align 16, !tbaa !416
  %915 = zext <16 x i8> %914 to <16 x i16>
  %916 = shufflevector <8 x i16> %907, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %917 = shufflevector <16 x i16> %915, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %918 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %916, <4 x i16> %917)
  %919 = shufflevector <8 x i16> %907, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %920 = shufflevector <16 x i16> %915, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %921 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %919, <4 x i16> %920)
  %922 = shufflevector <8 x i16> %908, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %923 = shufflevector <16 x i16> %915, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %924 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %922, <4 x i16> %923)
  %925 = shufflevector <16 x i16> %909, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %926 = shufflevector <16 x i16> %915, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %927 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %925, <4 x i16> %926)
  %928 = add nsw <4 x i32> %918, %849
  %929 = add nsw <4 x i32> %921, %850
  %930 = add nsw <4 x i32> %924, %851
  %931 = add nsw <4 x i32> %927, %852
  %932 = add nsw i64 %536, %494
  %933 = shl nsw i64 %932, 4
  %934 = getelementptr inbounds i8, i8* %resampled_input, i64 %933
  %935 = bitcast i8* %934 to <16 x i8>*
  %936 = load <16 x i8>, <16 x i8>* %935, align 16, !tbaa !416
  %937 = zext <16 x i8> %936 to <16 x i16>
  %938 = shufflevector <16 x i16> %937, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %939 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %916, <4 x i16> %938)
  %940 = shufflevector <16 x i16> %937, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %941 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %919, <4 x i16> %940)
  %942 = shufflevector <16 x i16> %937, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %943 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %922, <4 x i16> %942)
  %944 = shufflevector <16 x i16> %937, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %945 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %925, <4 x i16> %944)
  %946 = add nsw <4 x i32> %939, %867
  %947 = add nsw <4 x i32> %941, %868
  %948 = add nsw <4 x i32> %943, %869
  %949 = add nsw <4 x i32> %945, %870
  %950 = add nsw i64 %512, %495
  %951 = shl nsw i64 %950, 4
  %952 = getelementptr inbounds i8, i8* %resampled_input, i64 %951
  %953 = bitcast i8* %952 to <16 x i8>*
  %954 = load <16 x i8>, <16 x i8>* %953, align 16, !tbaa !416
  %955 = zext <16 x i8> %954 to <16 x i16>
  %956 = shufflevector <16 x i16> %955, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %957 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %916, <4 x i16> %956)
  %958 = shufflevector <16 x i16> %955, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %959 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %919, <4 x i16> %958)
  %960 = shufflevector <16 x i16> %955, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %961 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %922, <4 x i16> %960)
  %962 = shufflevector <16 x i16> %955, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %963 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %925, <4 x i16> %962)
  %964 = add nsw <4 x i32> %957, %885
  %965 = add nsw <4 x i32> %959, %886
  %966 = add nsw <4 x i32> %961, %887
  %967 = add nsw <4 x i32> %963, %888
  %968 = add nsw i64 %536, %495
  %969 = shl nsw i64 %968, 4
  %970 = getelementptr inbounds i8, i8* %resampled_input, i64 %969
  %971 = bitcast i8* %970 to <16 x i8>*
  %972 = load <16 x i8>, <16 x i8>* %971, align 16, !tbaa !416
  %973 = zext <16 x i8> %972 to <16 x i16>
  %974 = shufflevector <16 x i16> %973, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %975 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %916, <4 x i16> %974)
  %976 = shufflevector <16 x i16> %973, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %977 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %919, <4 x i16> %976)
  %978 = shufflevector <16 x i16> %973, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %979 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %922, <4 x i16> %978)
  %980 = shufflevector <16 x i16> %973, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %981 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %925, <4 x i16> %980)
  %982 = add nsw <4 x i32> %975, %903
  %983 = add nsw <4 x i32> %977, %904
  %984 = add nsw <4 x i32> %979, %905
  %985 = add nsw <4 x i32> %981, %906
  %986 = load <8 x i16>, <8 x i16>* %329, align 16, !tbaa !391
  %987 = load <8 x i16>, <8 x i16>* %331, align 16, !tbaa !391
  %988 = shufflevector <8 x i16> %987, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %989 = add nsw i64 %512, %496
  %990 = shl nsw i64 %989, 4
  %991 = getelementptr inbounds i8, i8* %resampled_input, i64 %990
  %992 = bitcast i8* %991 to <16 x i8>*
  %993 = load <16 x i8>, <16 x i8>* %992, align 16, !tbaa !416
  %994 = zext <16 x i8> %993 to <16 x i16>
  %995 = shufflevector <8 x i16> %986, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %996 = shufflevector <16 x i16> %994, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %997 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %995, <4 x i16> %996)
  %998 = shufflevector <8 x i16> %986, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %999 = shufflevector <16 x i16> %994, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1000 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %998, <4 x i16> %999)
  %1001 = shufflevector <8 x i16> %987, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1002 = shufflevector <16 x i16> %994, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1003 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1001, <4 x i16> %1002)
  %1004 = shufflevector <16 x i16> %988, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1005 = shufflevector <16 x i16> %994, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1006 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1004, <4 x i16> %1005)
  %1007 = add nsw <4 x i32> %997, %928
  %1008 = add nsw <4 x i32> %1000, %929
  %1009 = add nsw <4 x i32> %1003, %930
  %1010 = add nsw <4 x i32> %1006, %931
  %1011 = add nsw i64 %536, %496
  %1012 = shl nsw i64 %1011, 4
  %1013 = getelementptr inbounds i8, i8* %resampled_input, i64 %1012
  %1014 = bitcast i8* %1013 to <16 x i8>*
  %1015 = load <16 x i8>, <16 x i8>* %1014, align 16, !tbaa !416
  %1016 = zext <16 x i8> %1015 to <16 x i16>
  %1017 = shufflevector <16 x i16> %1016, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1018 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %995, <4 x i16> %1017)
  %1019 = shufflevector <16 x i16> %1016, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1020 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %998, <4 x i16> %1019)
  %1021 = shufflevector <16 x i16> %1016, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1022 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1001, <4 x i16> %1021)
  %1023 = shufflevector <16 x i16> %1016, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1024 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1004, <4 x i16> %1023)
  %1025 = add nsw <4 x i32> %1018, %946
  %1026 = add nsw <4 x i32> %1020, %947
  %1027 = add nsw <4 x i32> %1022, %948
  %1028 = add nsw <4 x i32> %1024, %949
  %1029 = add nsw i64 %512, %497
  %1030 = shl nsw i64 %1029, 4
  %1031 = getelementptr inbounds i8, i8* %resampled_input, i64 %1030
  %1032 = bitcast i8* %1031 to <16 x i8>*
  %1033 = load <16 x i8>, <16 x i8>* %1032, align 16, !tbaa !416
  %1034 = zext <16 x i8> %1033 to <16 x i16>
  %1035 = shufflevector <16 x i16> %1034, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1036 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %995, <4 x i16> %1035)
  %1037 = shufflevector <16 x i16> %1034, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1038 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %998, <4 x i16> %1037)
  %1039 = shufflevector <16 x i16> %1034, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1040 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1001, <4 x i16> %1039)
  %1041 = shufflevector <16 x i16> %1034, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1042 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1004, <4 x i16> %1041)
  %1043 = add nsw <4 x i32> %1036, %964
  %1044 = add nsw <4 x i32> %1038, %965
  %1045 = add nsw <4 x i32> %1040, %966
  %1046 = add nsw <4 x i32> %1042, %967
  %1047 = add nsw i64 %536, %497
  %1048 = shl nsw i64 %1047, 4
  %1049 = getelementptr inbounds i8, i8* %resampled_input, i64 %1048
  %1050 = bitcast i8* %1049 to <16 x i8>*
  %1051 = load <16 x i8>, <16 x i8>* %1050, align 16, !tbaa !416
  %1052 = zext <16 x i8> %1051 to <16 x i16>
  %1053 = shufflevector <16 x i16> %1052, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1054 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %995, <4 x i16> %1053)
  %1055 = shufflevector <16 x i16> %1052, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1056 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %998, <4 x i16> %1055)
  %1057 = shufflevector <16 x i16> %1052, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1058 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1001, <4 x i16> %1057)
  %1059 = shufflevector <16 x i16> %1052, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1060 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1004, <4 x i16> %1059)
  %1061 = add nsw <4 x i32> %1054, %982
  %1062 = add nsw <4 x i32> %1056, %983
  %1063 = add nsw <4 x i32> %1058, %984
  %1064 = add nsw <4 x i32> %1060, %985
  %1065 = load <8 x i16>, <8 x i16>* %333, align 16, !tbaa !391
  %1066 = load <8 x i16>, <8 x i16>* %335, align 16, !tbaa !391
  %1067 = shufflevector <8 x i16> %1066, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %1068 = add nsw i64 %512, %498
  %1069 = shl nsw i64 %1068, 4
  %1070 = getelementptr inbounds i8, i8* %resampled_input, i64 %1069
  %1071 = bitcast i8* %1070 to <16 x i8>*
  %1072 = load <16 x i8>, <16 x i8>* %1071, align 16, !tbaa !416
  %1073 = zext <16 x i8> %1072 to <16 x i16>
  %1074 = shufflevector <8 x i16> %1065, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1075 = shufflevector <16 x i16> %1073, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1076 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1074, <4 x i16> %1075)
  %1077 = shufflevector <8 x i16> %1065, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1078 = shufflevector <16 x i16> %1073, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1079 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1077, <4 x i16> %1078)
  %1080 = shufflevector <8 x i16> %1066, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1081 = shufflevector <16 x i16> %1073, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1082 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1080, <4 x i16> %1081)
  %1083 = shufflevector <16 x i16> %1067, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1084 = shufflevector <16 x i16> %1073, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1085 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1083, <4 x i16> %1084)
  %1086 = add nsw <4 x i32> %1076, %1007
  %1087 = add nsw <4 x i32> %1079, %1008
  %1088 = add nsw <4 x i32> %1082, %1009
  %1089 = add nsw <4 x i32> %1085, %1010
  %1090 = add nsw i64 %536, %498
  %1091 = shl nsw i64 %1090, 4
  %1092 = getelementptr inbounds i8, i8* %resampled_input, i64 %1091
  %1093 = bitcast i8* %1092 to <16 x i8>*
  %1094 = load <16 x i8>, <16 x i8>* %1093, align 16, !tbaa !416
  %1095 = zext <16 x i8> %1094 to <16 x i16>
  %1096 = shufflevector <16 x i16> %1095, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1097 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1074, <4 x i16> %1096)
  %1098 = shufflevector <16 x i16> %1095, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1099 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1077, <4 x i16> %1098)
  %1100 = shufflevector <16 x i16> %1095, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1101 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1080, <4 x i16> %1100)
  %1102 = shufflevector <16 x i16> %1095, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1103 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1083, <4 x i16> %1102)
  %1104 = add nsw <4 x i32> %1097, %1025
  %1105 = add nsw <4 x i32> %1099, %1026
  %1106 = add nsw <4 x i32> %1101, %1027
  %1107 = add nsw <4 x i32> %1103, %1028
  %1108 = add nsw i64 %512, %499
  %1109 = shl nsw i64 %1108, 4
  %1110 = getelementptr inbounds i8, i8* %resampled_input, i64 %1109
  %1111 = bitcast i8* %1110 to <16 x i8>*
  %1112 = load <16 x i8>, <16 x i8>* %1111, align 16, !tbaa !416
  %1113 = zext <16 x i8> %1112 to <16 x i16>
  %1114 = shufflevector <16 x i16> %1113, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1115 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1074, <4 x i16> %1114)
  %1116 = shufflevector <16 x i16> %1113, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1117 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1077, <4 x i16> %1116)
  %1118 = shufflevector <16 x i16> %1113, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1119 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1080, <4 x i16> %1118)
  %1120 = shufflevector <16 x i16> %1113, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1121 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1083, <4 x i16> %1120)
  %1122 = add nsw <4 x i32> %1115, %1043
  %1123 = add nsw <4 x i32> %1117, %1044
  %1124 = add nsw <4 x i32> %1119, %1045
  %1125 = add nsw <4 x i32> %1121, %1046
  %1126 = add nsw i64 %536, %499
  %1127 = shl nsw i64 %1126, 4
  %1128 = getelementptr inbounds i8, i8* %resampled_input, i64 %1127
  %1129 = bitcast i8* %1128 to <16 x i8>*
  %1130 = load <16 x i8>, <16 x i8>* %1129, align 16, !tbaa !416
  %1131 = zext <16 x i8> %1130 to <16 x i16>
  %1132 = shufflevector <16 x i16> %1131, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1133 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1074, <4 x i16> %1132)
  %1134 = shufflevector <16 x i16> %1131, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1135 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1077, <4 x i16> %1134)
  %1136 = shufflevector <16 x i16> %1131, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1137 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1080, <4 x i16> %1136)
  %1138 = shufflevector <16 x i16> %1131, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1139 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1083, <4 x i16> %1138)
  %1140 = add nsw <4 x i32> %1133, %1061
  %1141 = add nsw <4 x i32> %1135, %1062
  %1142 = add nsw <4 x i32> %1137, %1063
  %1143 = add nsw <4 x i32> %1139, %1064
  %1144 = load <8 x i16>, <8 x i16>* %337, align 16, !tbaa !391
  %1145 = load <8 x i16>, <8 x i16>* %339, align 16, !tbaa !391
  %1146 = shufflevector <8 x i16> %1145, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %1147 = add nsw i64 %512, %500
  %1148 = shl nsw i64 %1147, 4
  %1149 = getelementptr inbounds i8, i8* %resampled_input, i64 %1148
  %1150 = bitcast i8* %1149 to <16 x i8>*
  %1151 = load <16 x i8>, <16 x i8>* %1150, align 16, !tbaa !416
  %1152 = zext <16 x i8> %1151 to <16 x i16>
  %1153 = shufflevector <8 x i16> %1144, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1154 = shufflevector <16 x i16> %1152, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1155 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1153, <4 x i16> %1154)
  %1156 = shufflevector <8 x i16> %1144, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1157 = shufflevector <16 x i16> %1152, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1158 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1156, <4 x i16> %1157)
  %1159 = shufflevector <8 x i16> %1145, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1160 = shufflevector <16 x i16> %1152, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1161 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1159, <4 x i16> %1160)
  %1162 = shufflevector <16 x i16> %1146, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1163 = shufflevector <16 x i16> %1152, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1164 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1162, <4 x i16> %1163)
  %1165 = add nsw <4 x i32> %1155, %1086
  %1166 = add nsw <4 x i32> %1158, %1087
  %1167 = add nsw <4 x i32> %1161, %1088
  %1168 = add nsw <4 x i32> %1164, %1089
  %1169 = add nsw i64 %536, %500
  %1170 = shl nsw i64 %1169, 4
  %1171 = getelementptr inbounds i8, i8* %resampled_input, i64 %1170
  %1172 = bitcast i8* %1171 to <16 x i8>*
  %1173 = load <16 x i8>, <16 x i8>* %1172, align 16, !tbaa !416
  %1174 = zext <16 x i8> %1173 to <16 x i16>
  %1175 = shufflevector <16 x i16> %1174, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1176 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1153, <4 x i16> %1175)
  %1177 = shufflevector <16 x i16> %1174, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1178 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1156, <4 x i16> %1177)
  %1179 = shufflevector <16 x i16> %1174, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1180 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1159, <4 x i16> %1179)
  %1181 = shufflevector <16 x i16> %1174, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1182 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1162, <4 x i16> %1181)
  %1183 = add nsw <4 x i32> %1176, %1104
  %1184 = add nsw <4 x i32> %1178, %1105
  %1185 = add nsw <4 x i32> %1180, %1106
  %1186 = add nsw <4 x i32> %1182, %1107
  %1187 = add nsw i64 %512, %501
  %1188 = shl nsw i64 %1187, 4
  %1189 = getelementptr inbounds i8, i8* %resampled_input, i64 %1188
  %1190 = bitcast i8* %1189 to <16 x i8>*
  %1191 = load <16 x i8>, <16 x i8>* %1190, align 16, !tbaa !416
  %1192 = zext <16 x i8> %1191 to <16 x i16>
  %1193 = shufflevector <16 x i16> %1192, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1194 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1153, <4 x i16> %1193)
  %1195 = shufflevector <16 x i16> %1192, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1196 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1156, <4 x i16> %1195)
  %1197 = shufflevector <16 x i16> %1192, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1198 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1159, <4 x i16> %1197)
  %1199 = shufflevector <16 x i16> %1192, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1200 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1162, <4 x i16> %1199)
  %1201 = add nsw <4 x i32> %1194, %1122
  %1202 = add nsw <4 x i32> %1196, %1123
  %1203 = add nsw <4 x i32> %1198, %1124
  %1204 = add nsw <4 x i32> %1200, %1125
  %1205 = add nsw i64 %536, %501
  %1206 = shl nsw i64 %1205, 4
  %1207 = getelementptr inbounds i8, i8* %resampled_input, i64 %1206
  %1208 = bitcast i8* %1207 to <16 x i8>*
  %1209 = load <16 x i8>, <16 x i8>* %1208, align 16, !tbaa !416
  %1210 = zext <16 x i8> %1209 to <16 x i16>
  %1211 = shufflevector <16 x i16> %1210, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1212 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1153, <4 x i16> %1211)
  %1213 = shufflevector <16 x i16> %1210, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1214 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1156, <4 x i16> %1213)
  %1215 = shufflevector <16 x i16> %1210, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1216 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1159, <4 x i16> %1215)
  %1217 = shufflevector <16 x i16> %1210, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1218 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1162, <4 x i16> %1217)
  %1219 = add nsw <4 x i32> %1212, %1140
  %1220 = add nsw <4 x i32> %1214, %1141
  %1221 = add nsw <4 x i32> %1216, %1142
  %1222 = add nsw <4 x i32> %1218, %1143
  br label %"consume convolved"

next_bb17:                                        ; preds = %"for output.s0.x.xo"
  %t2296 = add nsw i32 %output.s0.x.x.base.s, %21
  %1223 = add nsw i32 %t2296, 1
  %1224 = mul nsw i32 %1223, %stride_x
  %t2295 = sub nsw i32 %1224, %t2225
  %1225 = mul nsw i32 %t2296, %stride_x
  %t2294 = sub nsw i32 %1225, %t2225
  br i1 %112, label %"for convolved.s1.r19$y.preheader", label %"consume convolved", !prof !387

"for convolved.s1.r19$y.preheader":               ; preds = %next_bb17
  br i1 %110, label %"for convolved.s1.r19$y.us", label %"consume convolved", !prof !387

"for convolved.s1.r19$y.us":                      ; preds = %"for convolved.s1.r19$y.preheader", %"end for convolved.s1.r19$x.loopexit.us"
  %indvars.iv1992 = phi i64 [ %indvars.iv.next1993, %"end for convolved.s1.r19$x.loopexit.us" ], [ 0, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa1577.us1609 = phi <4 x i32> [ %1334, %"end for convolved.s1.r19$x.loopexit.us" ], [ %476, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa1575.us1607 = phi <4 x i32> [ %1333, %"end for convolved.s1.r19$x.loopexit.us" ], [ %475, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa1573.us1605 = phi <4 x i32> [ %1332, %"end for convolved.s1.r19$x.loopexit.us" ], [ %474, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa1571.us1603 = phi <4 x i32> [ %1331, %"end for convolved.s1.r19$x.loopexit.us" ], [ %473, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa1569.us1601 = phi <4 x i32> [ %1316, %"end for convolved.s1.r19$x.loopexit.us" ], [ %476, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa1567.us1599 = phi <4 x i32> [ %1315, %"end for convolved.s1.r19$x.loopexit.us" ], [ %475, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa1565.us1597 = phi <4 x i32> [ %1314, %"end for convolved.s1.r19$x.loopexit.us" ], [ %474, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa1563.us1595 = phi <4 x i32> [ %1313, %"end for convolved.s1.r19$x.loopexit.us" ], [ %473, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa1561.us1593 = phi <4 x i32> [ %1298, %"end for convolved.s1.r19$x.loopexit.us" ], [ %476, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa1559.us1591 = phi <4 x i32> [ %1297, %"end for convolved.s1.r19$x.loopexit.us" ], [ %475, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa1557.us1589 = phi <4 x i32> [ %1296, %"end for convolved.s1.r19$x.loopexit.us" ], [ %474, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa1555.us1587 = phi <4 x i32> [ %1295, %"end for convolved.s1.r19$x.loopexit.us" ], [ %473, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa1553.us1585 = phi <4 x i32> [ %1280, %"end for convolved.s1.r19$x.loopexit.us" ], [ %476, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa1551.us1583 = phi <4 x i32> [ %1279, %"end for convolved.s1.r19$x.loopexit.us" ], [ %475, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa1549.us1581 = phi <4 x i32> [ %1278, %"end for convolved.s1.r19$x.loopexit.us" ], [ %474, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa1547.us1579 = phi <4 x i32> [ %1277, %"end for convolved.s1.r19$x.loopexit.us" ], [ %473, %"for convolved.s1.r19$y.preheader" ]
  %"convolved.s1.r19$y.us" = phi i32 [ %1335, %"end for convolved.s1.r19$x.loopexit.us" ], [ 0, %"for convolved.s1.r19$y.preheader" ]
  %t2302.us = mul nsw i32 %"convolved.s1.r19$y.us", %a120
  %1226 = add nsw i32 %t2302.us, %t2290
  %t2303.us = mul nsw i32 %1226, %a21
  %1227 = add nsw i32 %t2302.us, %t2292
  %t2304.us = mul nsw i32 %1227, %a21
  %1228 = mul nsw i64 %indvars.iv1992, %209
  %t2301.us = add nsw i32 %t2304.us, %t2295
  %t2300.us = add nsw i32 %t2304.us, %t2294
  %t2299.us = add nsw i32 %t2303.us, %t2295
  %t2298.us = add nsw i32 %t2303.us, %t2294
  %1229 = sext i32 %t2298.us to i64
  %1230 = sext i32 %t2299.us to i64
  %1231 = sext i32 %t2300.us to i64
  %1232 = sext i32 %t2301.us to i64
  br label %"for convolved.s1.r19$x.us"

"for convolved.s1.r19$x.us":                      ; preds = %"for convolved.s1.r19$y.us", %"for convolved.s1.r19$x.us"
  %indvars.iv1990 = phi i64 [ 0, %"for convolved.s1.r19$y.us" ], [ %indvars.iv.next1991, %"for convolved.s1.r19$x.us" ]
  %1233 = phi <4 x i32> [ %.lcssa1577.us1609, %"for convolved.s1.r19$y.us" ], [ %1334, %"for convolved.s1.r19$x.us" ]
  %1234 = phi <4 x i32> [ %.lcssa1575.us1607, %"for convolved.s1.r19$y.us" ], [ %1333, %"for convolved.s1.r19$x.us" ]
  %1235 = phi <4 x i32> [ %.lcssa1573.us1605, %"for convolved.s1.r19$y.us" ], [ %1332, %"for convolved.s1.r19$x.us" ]
  %1236 = phi <4 x i32> [ %.lcssa1571.us1603, %"for convolved.s1.r19$y.us" ], [ %1331, %"for convolved.s1.r19$x.us" ]
  %1237 = phi <4 x i32> [ %.lcssa1569.us1601, %"for convolved.s1.r19$y.us" ], [ %1316, %"for convolved.s1.r19$x.us" ]
  %1238 = phi <4 x i32> [ %.lcssa1567.us1599, %"for convolved.s1.r19$y.us" ], [ %1315, %"for convolved.s1.r19$x.us" ]
  %1239 = phi <4 x i32> [ %.lcssa1565.us1597, %"for convolved.s1.r19$y.us" ], [ %1314, %"for convolved.s1.r19$x.us" ]
  %1240 = phi <4 x i32> [ %.lcssa1563.us1595, %"for convolved.s1.r19$y.us" ], [ %1313, %"for convolved.s1.r19$x.us" ]
  %1241 = phi <4 x i32> [ %.lcssa1561.us1593, %"for convolved.s1.r19$y.us" ], [ %1298, %"for convolved.s1.r19$x.us" ]
  %1242 = phi <4 x i32> [ %.lcssa1559.us1591, %"for convolved.s1.r19$y.us" ], [ %1297, %"for convolved.s1.r19$x.us" ]
  %1243 = phi <4 x i32> [ %.lcssa1557.us1589, %"for convolved.s1.r19$y.us" ], [ %1296, %"for convolved.s1.r19$x.us" ]
  %1244 = phi <4 x i32> [ %.lcssa1555.us1587, %"for convolved.s1.r19$y.us" ], [ %1295, %"for convolved.s1.r19$x.us" ]
  %1245 = phi <4 x i32> [ %.lcssa1553.us1585, %"for convolved.s1.r19$y.us" ], [ %1280, %"for convolved.s1.r19$x.us" ]
  %1246 = phi <4 x i32> [ %.lcssa1551.us1583, %"for convolved.s1.r19$y.us" ], [ %1279, %"for convolved.s1.r19$x.us" ]
  %1247 = phi <4 x i32> [ %.lcssa1549.us1581, %"for convolved.s1.r19$y.us" ], [ %1278, %"for convolved.s1.r19$x.us" ]
  %1248 = phi <4 x i32> [ %.lcssa1547.us1579, %"for convolved.s1.r19$y.us" ], [ %1277, %"for convolved.s1.r19$x.us" ]
  %1249 = add nsw i64 %indvars.iv1990, %1228
  %1250 = shl nsw i64 %1249, 4
  %1251 = getelementptr inbounds i16, i16* %filter_zeroed, i64 %1250
  %1252 = bitcast i16* %1251 to <8 x i16>*
  %1253 = load <8 x i16>, <8 x i16>* %1252, align 16, !tbaa !391
  %1254 = getelementptr inbounds i16, i16* %1251, i64 8
  %1255 = bitcast i16* %1254 to <8 x i16>*
  %1256 = load <8 x i16>, <8 x i16>* %1255, align 16, !tbaa !391
  %1257 = shufflevector <8 x i16> %1256, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %1258 = mul nsw i64 %indvars.iv1990, %191
  %1259 = add nsw i64 %1258, %1229
  %1260 = shl nsw i64 %1259, 4
  %1261 = getelementptr inbounds i8, i8* %resampled_input, i64 %1260
  %1262 = bitcast i8* %1261 to <16 x i8>*
  %1263 = load <16 x i8>, <16 x i8>* %1262, align 16, !tbaa !416
  %1264 = zext <16 x i8> %1263 to <16 x i16>
  %1265 = shufflevector <8 x i16> %1253, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1266 = shufflevector <16 x i16> %1264, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1267 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1265, <4 x i16> %1266)
  %1268 = shufflevector <8 x i16> %1253, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1269 = shufflevector <16 x i16> %1264, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1270 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1268, <4 x i16> %1269)
  %1271 = shufflevector <8 x i16> %1256, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1272 = shufflevector <16 x i16> %1264, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1273 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1271, <4 x i16> %1272)
  %1274 = shufflevector <16 x i16> %1257, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1275 = shufflevector <16 x i16> %1264, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1276 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1274, <4 x i16> %1275)
  %1277 = add nsw <4 x i32> %1267, %1248
  %1278 = add nsw <4 x i32> %1270, %1247
  %1279 = add nsw <4 x i32> %1273, %1246
  %1280 = add nsw <4 x i32> %1276, %1245
  %1281 = add nsw i64 %1258, %1230
  %1282 = shl nsw i64 %1281, 4
  %1283 = getelementptr inbounds i8, i8* %resampled_input, i64 %1282
  %1284 = bitcast i8* %1283 to <16 x i8>*
  %1285 = load <16 x i8>, <16 x i8>* %1284, align 16, !tbaa !416
  %1286 = zext <16 x i8> %1285 to <16 x i16>
  %1287 = shufflevector <16 x i16> %1286, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1288 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1265, <4 x i16> %1287)
  %1289 = shufflevector <16 x i16> %1286, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1290 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1268, <4 x i16> %1289)
  %1291 = shufflevector <16 x i16> %1286, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1292 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1271, <4 x i16> %1291)
  %1293 = shufflevector <16 x i16> %1286, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1294 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1274, <4 x i16> %1293)
  %1295 = add nsw <4 x i32> %1288, %1244
  %1296 = add nsw <4 x i32> %1290, %1243
  %1297 = add nsw <4 x i32> %1292, %1242
  %1298 = add nsw <4 x i32> %1294, %1241
  %1299 = add nsw i64 %1258, %1231
  %1300 = shl nsw i64 %1299, 4
  %1301 = getelementptr inbounds i8, i8* %resampled_input, i64 %1300
  %1302 = bitcast i8* %1301 to <16 x i8>*
  %1303 = load <16 x i8>, <16 x i8>* %1302, align 16, !tbaa !416
  %1304 = zext <16 x i8> %1303 to <16 x i16>
  %1305 = shufflevector <16 x i16> %1304, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1306 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1265, <4 x i16> %1305)
  %1307 = shufflevector <16 x i16> %1304, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1308 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1268, <4 x i16> %1307)
  %1309 = shufflevector <16 x i16> %1304, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1310 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1271, <4 x i16> %1309)
  %1311 = shufflevector <16 x i16> %1304, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1312 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1274, <4 x i16> %1311)
  %1313 = add nsw <4 x i32> %1306, %1240
  %1314 = add nsw <4 x i32> %1308, %1239
  %1315 = add nsw <4 x i32> %1310, %1238
  %1316 = add nsw <4 x i32> %1312, %1237
  %1317 = add nsw i64 %1258, %1232
  %1318 = shl nsw i64 %1317, 4
  %1319 = getelementptr inbounds i8, i8* %resampled_input, i64 %1318
  %1320 = bitcast i8* %1319 to <16 x i8>*
  %1321 = load <16 x i8>, <16 x i8>* %1320, align 16, !tbaa !416
  %1322 = zext <16 x i8> %1321 to <16 x i16>
  %1323 = shufflevector <16 x i16> %1322, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1324 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1265, <4 x i16> %1323)
  %1325 = shufflevector <16 x i16> %1322, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1326 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1268, <4 x i16> %1325)
  %1327 = shufflevector <16 x i16> %1322, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1328 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1271, <4 x i16> %1327)
  %1329 = shufflevector <16 x i16> %1322, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1330 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1274, <4 x i16> %1329)
  %1331 = add nsw <4 x i32> %1324, %1236
  %1332 = add nsw <4 x i32> %1326, %1235
  %1333 = add nsw <4 x i32> %1328, %1234
  %1334 = add nsw <4 x i32> %1330, %1233
  %indvars.iv.next1991 = add nuw nsw i64 %indvars.iv1990, 1
  %.not925.us = icmp eq i64 %indvars.iv.next1991, %208
  br i1 %.not925.us, label %"end for convolved.s1.r19$x.loopexit.us", label %"for convolved.s1.r19$x.us"

"end for convolved.s1.r19$x.loopexit.us":         ; preds = %"for convolved.s1.r19$x.us"
  %indvars.iv.next1993 = add nuw nsw i64 %indvars.iv1992, 1
  %1335 = add nuw nsw i32 %"convolved.s1.r19$y.us", 1
  %.not924.us = icmp eq i64 %indvars.iv.next1993, %211
  br i1 %.not924.us, label %"consume convolved", label %"for convolved.s1.r19$y.us"

"consume convolved":                              ; preds = %"end for convolved.s1.r19$x.loopexit.us", %"for convolved.s1.r19$y.preheader", %next_bb17, %then_bb16
  %1336 = phi <4 x i32> [ %476, %next_bb17 ], [ %1222, %then_bb16 ], [ %476, %"for convolved.s1.r19$y.preheader" ], [ %1334, %"end for convolved.s1.r19$x.loopexit.us" ]
  %1337 = phi <4 x i32> [ %475, %next_bb17 ], [ %1221, %then_bb16 ], [ %475, %"for convolved.s1.r19$y.preheader" ], [ %1333, %"end for convolved.s1.r19$x.loopexit.us" ]
  %1338 = phi <4 x i32> [ %474, %next_bb17 ], [ %1220, %then_bb16 ], [ %474, %"for convolved.s1.r19$y.preheader" ], [ %1332, %"end for convolved.s1.r19$x.loopexit.us" ]
  %1339 = phi <4 x i32> [ %473, %next_bb17 ], [ %1219, %then_bb16 ], [ %473, %"for convolved.s1.r19$y.preheader" ], [ %1331, %"end for convolved.s1.r19$x.loopexit.us" ]
  %1340 = phi <4 x i32> [ %476, %next_bb17 ], [ %1204, %then_bb16 ], [ %476, %"for convolved.s1.r19$y.preheader" ], [ %1316, %"end for convolved.s1.r19$x.loopexit.us" ]
  %1341 = phi <4 x i32> [ %475, %next_bb17 ], [ %1203, %then_bb16 ], [ %475, %"for convolved.s1.r19$y.preheader" ], [ %1315, %"end for convolved.s1.r19$x.loopexit.us" ]
  %1342 = phi <4 x i32> [ %474, %next_bb17 ], [ %1202, %then_bb16 ], [ %474, %"for convolved.s1.r19$y.preheader" ], [ %1314, %"end for convolved.s1.r19$x.loopexit.us" ]
  %1343 = phi <4 x i32> [ %473, %next_bb17 ], [ %1201, %then_bb16 ], [ %473, %"for convolved.s1.r19$y.preheader" ], [ %1313, %"end for convolved.s1.r19$x.loopexit.us" ]
  %1344 = phi <4 x i32> [ %476, %next_bb17 ], [ %1186, %then_bb16 ], [ %476, %"for convolved.s1.r19$y.preheader" ], [ %1298, %"end for convolved.s1.r19$x.loopexit.us" ]
  %1345 = phi <4 x i32> [ %475, %next_bb17 ], [ %1185, %then_bb16 ], [ %475, %"for convolved.s1.r19$y.preheader" ], [ %1297, %"end for convolved.s1.r19$x.loopexit.us" ]
  %1346 = phi <4 x i32> [ %474, %next_bb17 ], [ %1184, %then_bb16 ], [ %474, %"for convolved.s1.r19$y.preheader" ], [ %1296, %"end for convolved.s1.r19$x.loopexit.us" ]
  %1347 = phi <4 x i32> [ %473, %next_bb17 ], [ %1183, %then_bb16 ], [ %473, %"for convolved.s1.r19$y.preheader" ], [ %1295, %"end for convolved.s1.r19$x.loopexit.us" ]
  %1348 = phi <4 x i32> [ %476, %next_bb17 ], [ %1168, %then_bb16 ], [ %476, %"for convolved.s1.r19$y.preheader" ], [ %1280, %"end for convolved.s1.r19$x.loopexit.us" ]
  %1349 = phi <4 x i32> [ %475, %next_bb17 ], [ %1167, %then_bb16 ], [ %475, %"for convolved.s1.r19$y.preheader" ], [ %1279, %"end for convolved.s1.r19$x.loopexit.us" ]
  %1350 = phi <4 x i32> [ %474, %next_bb17 ], [ %1166, %then_bb16 ], [ %474, %"for convolved.s1.r19$y.preheader" ], [ %1278, %"end for convolved.s1.r19$x.loopexit.us" ]
  %1351 = phi <4 x i32> [ %473, %next_bb17 ], [ %1165, %then_bb16 ], [ %473, %"for convolved.s1.r19$y.preheader" ], [ %1277, %"end for convolved.s1.r19$x.loopexit.us" ]
  %1352 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %1351, <4 x i32> %195)
  %1353 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %1350, <4 x i32> %195)
  %1354 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %1349, <4 x i32> %195)
  %1355 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %1348, <4 x i32> %195)
  %1356 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %1352, <4 x i32> %198)
  %1357 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %1353, <4 x i32> %198)
  %1358 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %1354, <4 x i32> %198)
  %1359 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %1355, <4 x i32> %198)
  %1360 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %1356)
  %1361 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %1357)
  %1362 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %1358)
  %1363 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %1359)
  %1364 = shufflevector <4 x i16> %1360, <4 x i16> %1361, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1365 = shufflevector <4 x i16> %1362, <4 x i16> %1363, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1366 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %1364, <8 x i16> %201)
  %1367 = shufflevector <16 x i16> %1365, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1368 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %1367, <8 x i16> %201)
  %1369 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %1366)
  %1370 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %1368)
  %1371 = shufflevector <8 x i8> %1369, <8 x i8> %1370, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1372 = call <16 x i8> @llvm.aarch64.neon.umin.v16i8(<16 x i8> %1371, <16 x i8> %203)
  %1373 = call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1372, <16 x i8> %205)
  %1374 = sext i32 %output.s0.x.x.base.s to i64
  %1375 = add nsw i64 %1374, %192
  %1376 = mul nsw i64 %1375, %206
  %1377 = add nsw i64 %1376, %502
  %1378 = getelementptr inbounds i8, i8* %19, i64 %1377
  %1379 = bitcast i8* %1378 to <16 x i8>*
  store <16 x i8> %1373, <16 x i8>* %1379, align 1, !tbaa !493
  %1380 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %1347, <4 x i32> %195)
  %1381 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %1346, <4 x i32> %195)
  %1382 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %1345, <4 x i32> %195)
  %1383 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %1344, <4 x i32> %195)
  %1384 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %1380, <4 x i32> %198)
  %1385 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %1381, <4 x i32> %198)
  %1386 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %1382, <4 x i32> %198)
  %1387 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %1383, <4 x i32> %198)
  %1388 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %1384)
  %1389 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %1385)
  %1390 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %1386)
  %1391 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %1387)
  %1392 = shufflevector <4 x i16> %1388, <4 x i16> %1389, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1393 = shufflevector <4 x i16> %1390, <4 x i16> %1391, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1394 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %1392, <8 x i16> %201)
  %1395 = shufflevector <16 x i16> %1393, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1396 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %1395, <8 x i16> %201)
  %1397 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %1394)
  %1398 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %1396)
  %1399 = shufflevector <8 x i8> %1397, <8 x i8> %1398, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1400 = call <16 x i8> @llvm.aarch64.neon.umin.v16i8(<16 x i8> %1399, <16 x i8> %203)
  %1401 = call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1400, <16 x i8> %205)
  %1402 = add nsw i64 %1375, 1
  %1403 = mul nsw i64 %1402, %206
  %1404 = add nsw i64 %1403, %502
  %1405 = getelementptr inbounds i8, i8* %19, i64 %1404
  %1406 = bitcast i8* %1405 to <16 x i8>*
  store <16 x i8> %1401, <16 x i8>* %1406, align 1, !tbaa !493
  %1407 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %1343, <4 x i32> %195)
  %1408 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %1342, <4 x i32> %195)
  %1409 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %1341, <4 x i32> %195)
  %1410 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %1340, <4 x i32> %195)
  %1411 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %1407, <4 x i32> %198)
  %1412 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %1408, <4 x i32> %198)
  %1413 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %1409, <4 x i32> %198)
  %1414 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %1410, <4 x i32> %198)
  %1415 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %1411)
  %1416 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %1412)
  %1417 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %1413)
  %1418 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %1414)
  %1419 = shufflevector <4 x i16> %1415, <4 x i16> %1416, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1420 = shufflevector <4 x i16> %1417, <4 x i16> %1418, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1421 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %1419, <8 x i16> %201)
  %1422 = shufflevector <16 x i16> %1420, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1423 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %1422, <8 x i16> %201)
  %1424 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %1421)
  %1425 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %1423)
  %1426 = shufflevector <8 x i8> %1424, <8 x i8> %1425, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1427 = call <16 x i8> @llvm.aarch64.neon.umin.v16i8(<16 x i8> %1426, <16 x i8> %203)
  %1428 = call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1427, <16 x i8> %205)
  %1429 = add nsw i64 %1376, %503
  %1430 = getelementptr inbounds i8, i8* %19, i64 %1429
  %1431 = bitcast i8* %1430 to <16 x i8>*
  store <16 x i8> %1428, <16 x i8>* %1431, align 1, !tbaa !493
  %1432 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %1339, <4 x i32> %195)
  %1433 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %1338, <4 x i32> %195)
  %1434 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %1337, <4 x i32> %195)
  %1435 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %1336, <4 x i32> %195)
  %1436 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %1432, <4 x i32> %198)
  %1437 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %1433, <4 x i32> %198)
  %1438 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %1434, <4 x i32> %198)
  %1439 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %1435, <4 x i32> %198)
  %1440 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %1436)
  %1441 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %1437)
  %1442 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %1438)
  %1443 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %1439)
  %1444 = shufflevector <4 x i16> %1440, <4 x i16> %1441, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1445 = shufflevector <4 x i16> %1442, <4 x i16> %1443, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1446 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %1444, <8 x i16> %201)
  %1447 = shufflevector <16 x i16> %1445, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1448 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %1447, <8 x i16> %201)
  %1449 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %1446)
  %1450 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %1448)
  %1451 = shufflevector <8 x i8> %1449, <8 x i8> %1450, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1452 = call <16 x i8> @llvm.aarch64.neon.umin.v16i8(<16 x i8> %1451, <16 x i8> %203)
  %1453 = call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1452, <16 x i8> %205)
  %1454 = add nsw i64 %1403, %503
  %1455 = getelementptr inbounds i8, i8* %19, i64 %1454
  %1456 = bitcast i8* %1455 to <16 x i8>*
  store <16 x i8> %1453, <16 x i8>* %1456, align 1, !tbaa !493
  %1457 = add nuw nsw i32 %output.s0.x.xo, 1
  %.not923 = icmp eq i32 %1457, %t2197
  br i1 %.not923, label %"end for output.s0.x.xo.loopexit", label %"for output.s0.x.xo"

then_bb18:                                        ; preds = %next_bb
  %t2330 = icmp slt i32 %a121, 0
  %1458 = add nsw i32 %6, -1
  %t2331 = mul nsw i32 %1458, %a121
  %t2332 = icmp slt i32 %stride_x, 0
  %t2333 = select i1 %t2330, i32 %t2331, i32 0
  %1459 = select i1 %t2332, i32 %22, i32 1
  %1460 = add i32 %21, -1
  %1461 = add i32 %1460, %1459
  %t2334 = mul nsw i32 %1461, %stride_x
  %t2335 = icmp slt i32 %a120, 0
  %1462 = add nsw i32 %8, -1
  %t2336 = mul nsw i32 %1462, %a120
  %t2337 = icmp slt i32 %stride_y, 0
  %t2338 = select i1 %t2335, i32 %t2336, i32 0
  %1463 = select i1 %t2337, i32 %25, i32 1
  %1464 = add i32 %24, -1
  %1465 = add i32 %1464, %1463
  %t2339 = mul nsw i32 %1465, %stride_y
  %1466 = icmp eq i32 %6, 3
  %1467 = icmp eq i32 %8, 3
  %t2340 = and i1 %1466, %1467
  %a121.op892 = shl i32 %a121, 1
  %t2341 = select i1 %t2330, i32 %a121.op892, i32 0
  %a120.op893 = shl i32 %a120, 1
  %t2342 = select i1 %t2335, i32 %a120.op893, i32 0
  %t2325 = icmp eq i32 %depth_multiplier, 1
  %1468 = add nuw nsw i32 %5, 15
  %t2305 = ashr i32 %1468, 4
  %1469 = icmp sgt i32 %a120, 0
  %1470 = select i1 %1469, i32 %a120, i32 0
  %t2317 = shl nuw nsw i32 %1470, 1
  %1471 = icmp sgt i32 %a121, 0
  %1472 = select i1 %1471, i32 %a121, i32 0
  %t2323 = shl nuw nsw i32 %1472, 1
  %1473 = select i1 %t2340, i32 %t2342, i32 %t2338
  %b39 = add nsw i32 %t2339, %1473
  %1474 = select i1 %t2340, i32 %t2341, i32 %t2333
  %b38 = add nsw i32 %t2334, %1474
  %b43 = add nsw i32 %t2339, %t2338
  %1475 = select i1 %t2335, i32 0, i32 %t2336
  %1476 = add nsw i32 %25, -1
  %1477 = select i1 %t2337, i32 0, i32 %1476
  %1478 = add nsw i32 %1477, %24
  %1479 = mul nsw i32 %1478, %stride_y
  %b42 = add nsw i32 %1479, %1475
  %b41 = add nsw i32 %t2334, %t2333
  %1480 = select i1 %t2330, i32 0, i32 %t2331
  %1481 = add nsw i32 %22, -1
  %1482 = select i1 %t2332, i32 0, i32 %1481
  %1483 = add nsw i32 %1482, %21
  %1484 = mul nsw i32 %1483, %stride_x
  %b40 = add nsw i32 %1484, %1480
  %1485 = mul nsw i32 %15, %14
  %1486 = mul nsw i32 %18, %16
  %1487 = mul nsw i32 %13, %12
  %1488 = add i32 %1485, %1487
  %t2326 = add i32 %1488, %1486
  %b33 = add nsw i32 %5, -16
  %1489 = icmp sgt i32 %6, 0
  %1490 = select i1 %1489, i32 %6, i32 0
  %t2493 = zext i32 %1490 to i64
  %1491 = icmp sgt i32 %8, 0
  %1492 = select i1 %1491, i32 %8, i32 0
  %t2494 = zext i32 %1492 to i64
  %1493 = shl nuw nsw i64 %t2493, 5
  %1494 = mul i64 %1493, %t2494
  %1495 = or i64 %1494, 6
  %1496 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  %1497 = sext i32 %7 to i64
  %1498 = insertelement <8 x i8> undef, i8 %filter_zero, i32 0
  %1499 = shufflevector <8 x i8> %1498, <8 x i8> undef, <8 x i32> zeroinitializer
  %1500 = zext <8 x i8> %1499 to <8 x i16>
  %1501 = bitcast [64 x i32]* %offset_c559790 to <4 x i32>*
  %1502 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 4
  %1503 = bitcast i32* %1502 to <4 x i32>*
  %1504 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 8
  %1505 = bitcast i32* %1504 to <4 x i32>*
  %1506 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 12
  %1507 = bitcast i32* %1506 to <4 x i32>*
  %1508 = bitcast i8* %2 to i32*
  %1509 = zext i8 %input_zero to i32
  %1510 = insertelement <16 x i32> undef, i32 %1509, i32 0
  %1511 = shufflevector <16 x i32> %1510, <16 x i32> undef, <16 x i32> zeroinitializer
  %1512 = icmp slt i32 %t2333, %1474
  %t2348 = select i1 %1512, i32 %b41, i32 %b38
  %1513 = icmp slt i32 %t2338, %1473
  %t2346 = select i1 %1513, i32 %b43, i32 %b39
  %1514 = select i1 %t2340, i32 %t2323, i32 %1480
  %a38 = add nsw i32 %1484, %1514
  %1515 = icmp sgt i32 %1514, %1480
  %1516 = select i1 %1515, i32 %a38, i32 %b40
  %t2349 = sub nsw i32 %1516, %t2348
  %1517 = select i1 %t2340, i32 %t2317, i32 %1475
  %a40 = add nsw i32 %1479, %1517
  %1518 = icmp sgt i32 %1517, %1475
  %1519 = select i1 %1518, i32 %a40, i32 %b42
  %t2347 = sub nsw i32 %1519, %t2346
  %t2351 = sub nsw i32 %b40, %b41
  %t2350 = sub nsw i32 %b42, %b43
  %.neg1418 = mul i32 %26, %24
  %.neg1419 = mul i32 %23, %21
  %.neg1420 = mul i32 %27, %16
  %1520 = icmp sgt i32 %17, 0
  %a45 = add nsw i32 %t2347, 1
  %a44 = add nsw i32 %t2349, 1
  %.inv896 = icmp slt i32 %t2349, 0
  %1521 = select i1 %.inv896, i32 0, i32 %a44
  %t2495 = zext i32 %1521 to i64
  %.inv897 = icmp slt i32 %t2347, 0
  %1522 = select i1 %.inv897, i32 0, i32 %a45
  %t2496 = zext i32 %1522 to i64
  %t2497 = shl nuw nsw i64 %t2495, 4
  %1523 = mul i64 %t2497, %t2496
  %1524 = or i64 %1523, 3
  %1525 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %t2364 = sub i32 %b41, %t2348
  %t2365 = sub i32 %b43, %t2346
  %1526 = icmp eq i32 %depth_multiplier, 0
  %t2500 = select i1 %1526, <16 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <16 x i32> zeroinitializer
  %depth_multiplier.lobit906 = ashr i32 %depth_multiplier, 31
  %1527 = insertelement <16 x i32> undef, i32 %depth_multiplier, i32 0
  %1528 = shufflevector <16 x i32> %1527, <16 x i32> undef, <16 x i32> zeroinitializer
  %1529 = sub nsw <16 x i32> %1528, %t2500
  %1530 = xor i32 %depth_multiplier.lobit906, -1
  %1531 = sub nsw i32 %1530, %depth_multiplier.lobit906
  %1532 = insertelement <16 x i32> undef, i32 %1531, i32 0
  %1533 = shufflevector <16 x i32> %1532, <16 x i32> undef, <16 x i32> zeroinitializer
  %1534 = xor <16 x i32> %t2500, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %1535 = sext i32 %b41 to i64
  %1536 = sext i32 %13 to i64
  %t2373 = sub i32 %a120.op893, %t2346
  %t2369 = sub nsw i32 %a121.op892, %t2348
  %1537 = icmp sgt i32 %25, 0
  %t2391 = sub nsw i32 %a121, %t2348
  %1538 = sub i32 %a120, %t2346
  %reass.add1422 = add i32 %.neg1418, %.neg1419
  %reass.add1423 = add i32 %reass.add1422, %.neg1420
  %1539 = icmp sgt i32 %22, 0
  %1540 = bitcast [16 x i32]* %sum_filter792 to <4 x i32>*
  %1541 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter792, i64 0, i64 4
  %1542 = bitcast i32* %1541 to <4 x i32>*
  %1543 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter792, i64 0, i64 8
  %1544 = bitcast i32* %1543 to <4 x i32>*
  %1545 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter792, i64 0, i64 12
  %1546 = bitcast i32* %1545 to <4 x i32>*
  %1547 = sext i32 %a121 to i64
  %1548 = sext i32 %21 to i64
  %1549 = sext i32 %stride_x to i64
  %1550 = insertelement <16 x i32> undef, i32 %output_multiplier, i32 0
  %1551 = shufflevector <16 x i32> %1550, <16 x i32> undef, <4 x i32> zeroinitializer
  %1552 = sub nsw i32 0, %output_shift
  %1553 = insertelement <16 x i32> undef, i32 %1552, i32 0
  %1554 = shufflevector <16 x i32> %1553, <16 x i32> undef, <4 x i32> zeroinitializer
  %1555 = zext i8 %output_zero to i16
  %1556 = insertelement <16 x i16> undef, i16 %1555, i32 0
  %1557 = shufflevector <16 x i16> %1556, <16 x i16> undef, <8 x i32> zeroinitializer
  %1558 = insertelement <16 x i8> undef, i8 %output_max, i32 0
  %1559 = shufflevector <16 x i8> %1558, <16 x i8> undef, <16 x i32> zeroinitializer
  %1560 = insertelement <16 x i8> undef, i8 %output_min, i32 0
  %1561 = shufflevector <16 x i8> %1560, <16 x i8> undef, <16 x i32> zeroinitializer
  %1562 = sext i32 %23 to i64
  %1563 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  %1564 = zext i32 %6 to i64
  %1565 = sext i32 %6 to i64
  %1566 = sext i32 %9 to i64
  %1567 = zext i32 %8 to i64
  %1568 = zext i32 %t2351 to i64
  %1569 = sext i32 %t2365 to i64
  %1570 = sext i32 %a44 to i64
  %1571 = sext i32 %t2364 to i64
  %1572 = sext i32 %b43 to i64
  %1573 = sext i32 %15 to i64
  %1574 = zext i32 %t2350 to i64
  %1575 = zext i32 %22 to i64
  %1576 = sext i32 %24 to i64
  %1577 = sext i32 %stride_y to i64
  %1578 = sext i32 %t2373 to i64
  %1579 = sext i32 %t2348 to i64
  %1580 = sext i32 %1538 to i64
  %1581 = sext i32 %t2346 to i64
  %1582 = zext i32 %25 to i64
  %1583 = sext i32 %16 to i64
  %1584 = sext i32 %18 to i64
  %1585 = bitcast [64 x i32]* %offset_c559790 to i8*
  %1586 = bitcast [64 x i32]* %offset_c559790 to i8*
  %1587 = bitcast [64 x i32]* %offset_c559790 to i8*
  %zext1966 = zext i32 %17 to i64
  %1588 = or i32 %t2350, %t2351
  %1589 = icmp slt i32 %1588, 0
  %1590 = or i32 %t2350, %t2351
  %.not2295 = icmp sgt i32 %1590, -1
  br label %"for output.s0.c.co20"

next_bb19:                                        ; preds = %next_bb
  %1591 = icmp sgt i32 %5, 0
  br i1 %1591, label %if.end.i1133, label %after_bb

"for output.s0.c.co20":                           ; preds = %then_bb18, %"end for output.s0.b.rebased48"
  %.3 = phi i8* [ null, %then_bb18 ], [ %.4, %"end for output.s0.b.rebased48" ]
  %output.s0.c.co22 = phi i32 [ 0, %then_bb18 ], [ %1722, %"end for output.s0.b.rebased48" ]
  %a31 = shl nsw i32 %output.s0.c.co22, 4
  %1592 = icmp slt i32 %a31, %b33
  %output.s0.c.c.base23 = select i1 %1592, i32 %a31, i32 %b33
  %1593 = load i64, i64* %.fca.1.gep, align 8, !tbaa !381
  %cmp.i1086 = icmp ult i64 %1593, %1495
  %1594 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !383
  br i1 %cmp.i1086, label %if.then.i1089, label %pseudostack_alloc.exit1102, !prof !384

if.then.i1089:                                    ; preds = %"for output.s0.c.co20"
  %tobool1.not.i1088 = icmp ne i8* %1594, null
  %1595 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i1091 = icmp ugt i64 %1595, 16384
  %or.cond1393 = and i1 %tobool1.not.i1088, %cmp2.i1091
  br i1 %or.cond1393, label %if.then3.i1093, label %if.end.i1097

if.then3.i1093:                                   ; preds = %if.then.i1089
  call void @halide_free(i8* null, i8* nonnull %1594) #14
  %.pre2138 = load i64, i64* %.fca.2.gep, align 8, !tbaa !385
  br label %if.end.i1097

if.end.i1097:                                     ; preds = %if.then3.i1093, %if.then.i1089
  %1596 = phi i64 [ %.pre2138, %if.then3.i1093 ], [ %1595, %if.then.i1089 ]
  %add.i1095 = add i64 %1596, %1495
  store i64 %add.i1095, i64* %.fca.2.gep, align 8, !tbaa !385
  %cmp7.i1096 = icmp ugt i64 %add.i1095, 16384
  br i1 %cmp7.i1096, label %if.then8.i1099, label %if.end11.i1101

if.then8.i1099:                                   ; preds = %if.end.i1097
  %call.i1098 = call i8* @halide_malloc(i8* null, i64 %1495) #14
  br label %if.end11.i1101

if.end11.i1101:                                   ; preds = %if.then8.i1099, %if.end.i1097
  %storemerge.i1100 = phi i8* [ %call.i1098, %if.then8.i1099 ], [ null, %if.end.i1097 ]
  store i8* %storemerge.i1100, i8** %.fca.0.gep, align 8, !tbaa !383
  store i64 %1495, i64* %.fca.1.gep, align 8, !tbaa !381
  br label %pseudostack_alloc.exit1102

pseudostack_alloc.exit1102:                       ; preds = %"for output.s0.c.co20", %if.end11.i1101
  %1597 = phi i8* [ %storemerge.i1100, %if.end11.i1101 ], [ %1594, %"for output.s0.c.co20" ]
  %1598 = bitcast i8* %1597 to i16*
  %.not894 = icmp eq i8* %1597, null
  br i1 %.not894, label %then_bb25, label %"produce filter_zeroed27", !prof !386

then_bb25:                                        ; preds = %pseudostack_alloc.exit1102
  %1599 = alloca i8*, i64 %1495, align 16
  %1600 = bitcast i8** %1599 to i16*
  store i8** %1599, i8*** %1496, align 8
  br label %"produce filter_zeroed27"

"produce filter_zeroed27":                        ; preds = %pseudostack_alloc.exit1102, %then_bb25
  %filter_zeroed26 = phi i16* [ %1600, %then_bb25 ], [ %1598, %pseudostack_alloc.exit1102 ]
  br i1 %1491, label %"for filter_zeroed.s0.y28.preheader", label %"consume sum_filter44.critedge", !prof !387

"for filter_zeroed.s0.y28.preheader":             ; preds = %"produce filter_zeroed27"
  br i1 %1489, label %"for filter_zeroed.s0.y28.us.preheader", label %"for sum_filter.s1.r19$y38.preheader.thread", !prof !387

"for sum_filter.s1.r19$y38.preheader.thread":     ; preds = %"for filter_zeroed.s0.y28.preheader"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(64) %1586, i8 0, i64 64, i1 false)
  br label %"consume sum_filter44"

"for filter_zeroed.s0.y28.us.preheader":          ; preds = %"for filter_zeroed.s0.y28.preheader"
  %1601 = sext i32 %output.s0.c.c.base23 to i64
  br label %"for filter_zeroed.s0.y28.us"

"for filter_zeroed.s0.y28.us":                    ; preds = %"for filter_zeroed.s0.y28.us.preheader", %"end for filter_zeroed.s0.x32.loopexit.us"
  %indvars.iv1918 = phi i64 [ 0, %"for filter_zeroed.s0.y28.us.preheader" ], [ %indvars.iv.next1919, %"end for filter_zeroed.s0.x32.loopexit.us" ]
  %1602 = mul nsw i64 %indvars.iv1918, %1565
  %1603 = mul nsw i64 %indvars.iv1918, %1566
  %1604 = add nsw i64 %1603, %1601
  br label %"for filter_zeroed.s0.x31.us"

"for filter_zeroed.s0.x31.us":                    ; preds = %"for filter_zeroed.s0.y28.us", %"for filter_zeroed.s0.x31.us"
  %indvars.iv1916 = phi i64 [ 0, %"for filter_zeroed.s0.y28.us" ], [ %indvars.iv.next1917, %"for filter_zeroed.s0.x31.us" ]
  %1605 = mul nsw i64 %indvars.iv1916, %1497
  %1606 = add nsw i64 %1605, %1604
  %1607 = getelementptr inbounds i8, i8* %3, i64 %1606
  %1608 = bitcast i8* %1607 to <8 x i8>*
  %1609 = load <8 x i8>, <8 x i8>* %1608, align 1, !tbaa !388
  %1610 = zext <8 x i8> %1609 to <8 x i16>
  %1611 = sub nsw <8 x i16> %1610, %1500
  %1612 = add nsw i64 %indvars.iv1916, %1602
  %1613 = shl nsw i64 %1612, 4
  %1614 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 %1613
  %1615 = bitcast i16* %1614 to <8 x i16>*
  store <8 x i16> %1611, <8 x i16>* %1615, align 16, !tbaa !391
  %1616 = getelementptr inbounds i8, i8* %1607, i64 8
  %1617 = bitcast i8* %1616 to <8 x i8>*
  %1618 = load <8 x i8>, <8 x i8>* %1617, align 1, !tbaa !388
  %1619 = zext <8 x i8> %1618 to <8 x i16>
  %1620 = sub nsw <8 x i16> %1619, %1500
  %1621 = getelementptr inbounds i16, i16* %1614, i64 8
  %1622 = bitcast i16* %1621 to <8 x i16>*
  store <8 x i16> %1620, <8 x i16>* %1622, align 16, !tbaa !391
  %indvars.iv.next1917 = add nuw nsw i64 %indvars.iv1916, 1
  %.not913.us = icmp eq i64 %indvars.iv.next1917, %1564
  br i1 %.not913.us, label %"end for filter_zeroed.s0.x32.loopexit.us", label %"for filter_zeroed.s0.x31.us"

"end for filter_zeroed.s0.x32.loopexit.us":       ; preds = %"for filter_zeroed.s0.x31.us"
  %indvars.iv.next1919 = add nuw nsw i64 %indvars.iv1918, 1
  %.not912.us = icmp eq i64 %indvars.iv.next1919, %1567
  br i1 %.not912.us, label %"for sum_filter.s1.r19$y38.preheader", label %"for filter_zeroed.s0.y28.us"

"for sum_filter.s1.r19$y38.preheader":            ; preds = %"end for filter_zeroed.s0.x32.loopexit.us"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(64) %1587, i8 0, i64 64, i1 false)
  br i1 %1489, label %"for sum_filter.s1.r19$y38.us", label %"consume sum_filter44", !prof !387

"for sum_filter.s1.r19$y38.us":                   ; preds = %"for sum_filter.s1.r19$y38.preheader", %"end for sum_filter.s1.r19$x42.loopexit.us"
  %indvars.iv1924 = phi i64 [ %indvars.iv.next1925, %"end for sum_filter.s1.r19$x42.loopexit.us" ], [ 0, %"for sum_filter.s1.r19$y38.preheader" ]
  %.lcssa1506.us1513 = phi <4 x i32> [ %1645, %"end for sum_filter.s1.r19$x42.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y38.preheader" ]
  %.lcssa1504.us1511 = phi <4 x i32> [ %1644, %"end for sum_filter.s1.r19$x42.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y38.preheader" ]
  %.lcssa1502.us1509 = phi <4 x i32> [ %1643, %"end for sum_filter.s1.r19$x42.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y38.preheader" ]
  %.lcssa1500.us1507 = phi <4 x i32> [ %1642, %"end for sum_filter.s1.r19$x42.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y38.preheader" ]
  %1623 = mul nsw i64 %indvars.iv1924, %1565
  br label %"for sum_filter.s1.r19$x41.us"

"for sum_filter.s1.r19$x41.us":                   ; preds = %"for sum_filter.s1.r19$y38.us", %"for sum_filter.s1.r19$x41.us"
  %indvars.iv1922 = phi i64 [ 0, %"for sum_filter.s1.r19$y38.us" ], [ %indvars.iv.next1923, %"for sum_filter.s1.r19$x41.us" ]
  %1624 = phi <4 x i32> [ %.lcssa1506.us1513, %"for sum_filter.s1.r19$y38.us" ], [ %1645, %"for sum_filter.s1.r19$x41.us" ]
  %1625 = phi <4 x i32> [ %.lcssa1504.us1511, %"for sum_filter.s1.r19$y38.us" ], [ %1644, %"for sum_filter.s1.r19$x41.us" ]
  %1626 = phi <4 x i32> [ %.lcssa1502.us1509, %"for sum_filter.s1.r19$y38.us" ], [ %1643, %"for sum_filter.s1.r19$x41.us" ]
  %1627 = phi <4 x i32> [ %.lcssa1500.us1507, %"for sum_filter.s1.r19$y38.us" ], [ %1642, %"for sum_filter.s1.r19$x41.us" ]
  %1628 = shufflevector <4 x i32> %1627, <4 x i32> %1626, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1629 = shufflevector <4 x i32> %1625, <4 x i32> %1624, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1630 = shufflevector <8 x i32> %1628, <8 x i32> %1629, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1631 = add nsw i64 %indvars.iv1922, %1623
  %1632 = shl nsw i64 %1631, 4
  %1633 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 %1632
  %1634 = bitcast i16* %1633 to <8 x i16>*
  %1635 = load <8 x i16>, <8 x i16>* %1634, align 16, !tbaa !391
  %1636 = getelementptr inbounds i16, i16* %1633, i64 8
  %1637 = bitcast i16* %1636 to <8 x i16>*
  %1638 = load <8 x i16>, <8 x i16>* %1637, align 16, !tbaa !391
  %1639 = shufflevector <8 x i16> %1635, <8 x i16> %1638, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1640 = sext <16 x i16> %1639 to <16 x i32>
  %1641 = add nsw <16 x i32> %1630, %1640
  %1642 = shufflevector <16 x i32> %1641, <16 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1643 = shufflevector <16 x i32> %1641, <16 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1644 = shufflevector <16 x i32> %1641, <16 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1645 = shufflevector <16 x i32> %1641, <16 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %indvars.iv.next1923 = add nuw nsw i64 %indvars.iv1922, 1
  %.not911.us = icmp eq i64 %indvars.iv.next1923, %1564
  br i1 %.not911.us, label %"end for sum_filter.s1.r19$x42.loopexit.us", label %"for sum_filter.s1.r19$x41.us"

"end for sum_filter.s1.r19$x42.loopexit.us":      ; preds = %"for sum_filter.s1.r19$x41.us"
  %indvars.iv.next1925 = add nuw nsw i64 %indvars.iv1924, 1
  %.not910.us = icmp eq i64 %indvars.iv.next1925, %1567
  br i1 %.not910.us, label %"consume sum_filter44.loopexit.split.us", label %"for sum_filter.s1.r19$y38.us"

"consume sum_filter44.loopexit.split.us":         ; preds = %"end for sum_filter.s1.r19$x42.loopexit.us"
  store <4 x i32> %1642, <4 x i32>* %1501, align 16, !tbaa !419
  store <4 x i32> %1643, <4 x i32>* %1503, align 16, !tbaa !430
  store <4 x i32> %1644, <4 x i32>* %1505, align 16, !tbaa !432
  store <4 x i32> %1645, <4 x i32>* %1507, align 16, !tbaa !435
  br label %"consume sum_filter44"

"consume sum_filter44.critedge":                  ; preds = %"produce filter_zeroed27"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(64) %1585, i8 0, i64 64, i1 false)
  br label %"consume sum_filter44"

"consume sum_filter44":                           ; preds = %"for sum_filter.s1.r19$y38.preheader", %"for sum_filter.s1.r19$y38.preheader.thread", %"consume sum_filter44.loopexit.split.us", %"consume sum_filter44.critedge"
  %1646 = phi <4 x i32> [ %1645, %"consume sum_filter44.loopexit.split.us" ], [ zeroinitializer, %"consume sum_filter44.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y38.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y38.preheader" ]
  %1647 = phi <4 x i32> [ %1644, %"consume sum_filter44.loopexit.split.us" ], [ zeroinitializer, %"consume sum_filter44.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y38.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y38.preheader" ]
  %1648 = phi <4 x i32> [ %1643, %"consume sum_filter44.loopexit.split.us" ], [ zeroinitializer, %"consume sum_filter44.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y38.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y38.preheader" ]
  %1649 = phi <4 x i32> [ %1642, %"consume sum_filter44.loopexit.split.us" ], [ zeroinitializer, %"consume sum_filter44.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y38.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y38.preheader" ]
  %1650 = sext i32 %output.s0.c.c.base23 to i64
  %1651 = getelementptr inbounds i32, i32* %1508, i64 %1650
  %1652 = bitcast i32* %1651 to <4 x i32>*
  %1653 = load <4 x i32>, <4 x i32>* %1652, align 4, !tbaa !393
  %1654 = getelementptr inbounds i32, i32* %1651, i64 4
  %1655 = bitcast i32* %1654 to <4 x i32>*
  %1656 = load <4 x i32>, <4 x i32>* %1655, align 4, !tbaa !393
  %1657 = getelementptr inbounds i32, i32* %1651, i64 8
  %1658 = bitcast i32* %1657 to <4 x i32>*
  %1659 = load <4 x i32>, <4 x i32>* %1658, align 4, !tbaa !393
  %1660 = getelementptr inbounds i32, i32* %1651, i64 12
  %1661 = bitcast i32* %1660 to <4 x i32>*
  %1662 = load <4 x i32>, <4 x i32>* %1661, align 4, !tbaa !393
  %1663 = shufflevector <4 x i32> %1653, <4 x i32> %1656, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1664 = shufflevector <4 x i32> %1659, <4 x i32> %1662, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1665 = shufflevector <8 x i32> %1663, <8 x i32> %1664, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1666 = shufflevector <4 x i32> %1649, <4 x i32> %1648, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1667 = shufflevector <4 x i32> %1647, <4 x i32> %1646, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1668 = shufflevector <8 x i32> %1666, <8 x i32> %1667, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1669 = mul nsw <16 x i32> %1668, %1511
  %1670 = sub nsw <16 x i32> %1665, %1669
  %1671 = shufflevector <16 x i32> %1670, <16 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1672 = shufflevector <16 x i32> %1670, <16 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1673 = shufflevector <16 x i32> %1670, <16 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1674 = shufflevector <16 x i32> %1670, <16 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  br i1 %1520, label %"for output.s0.b.rebased47.preheader", label %"end for output.s0.b.rebased48", !prof !387

"for output.s0.b.rebased47.preheader":            ; preds = %"consume sum_filter44"
  %1675 = insertelement <16 x i32> undef, i32 %output.s0.c.c.base23, i32 0
  %1676 = shufflevector <16 x i32> %1675, <16 x i32> undef, <16 x i32> zeroinitializer
  %1677 = add nsw <16 x i32> %1676, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %.lobit905 = ashr <16 x i32> %1677, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %1678 = sub nsw <16 x i32> %1677, %.lobit905
  %1679 = and <16 x i32> %.lobit905, %1533
  %1680 = sub i32 %output.s0.c.c.base23, %t2326
  %1681 = bitcast i16* %filter_zeroed26 to <8 x i16>*
  %1682 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 8
  %1683 = bitcast i16* %1682 to <8 x i16>*
  %1684 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 16
  %1685 = bitcast i16* %1684 to <8 x i16>*
  %1686 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 24
  %1687 = bitcast i16* %1686 to <8 x i16>*
  %1688 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 32
  %1689 = bitcast i16* %1688 to <8 x i16>*
  %1690 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 40
  %1691 = bitcast i16* %1690 to <8 x i16>*
  %1692 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 48
  %1693 = bitcast i16* %1692 to <8 x i16>*
  %1694 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 56
  %1695 = bitcast i16* %1694 to <8 x i16>*
  %1696 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 64
  %1697 = bitcast i16* %1696 to <8 x i16>*
  %1698 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 72
  %1699 = bitcast i16* %1698 to <8 x i16>*
  %1700 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 80
  %1701 = bitcast i16* %1700 to <8 x i16>*
  %1702 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 88
  %1703 = bitcast i16* %1702 to <8 x i16>*
  %1704 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 96
  %1705 = bitcast i16* %1704 to <8 x i16>*
  %1706 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 104
  %1707 = bitcast i16* %1706 to <8 x i16>*
  %1708 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 112
  %1709 = bitcast i16* %1708 to <8 x i16>*
  %1710 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 120
  %1711 = bitcast i16* %1710 to <8 x i16>*
  %1712 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 128
  %1713 = bitcast i16* %1712 to <8 x i16>*
  %1714 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 136
  %1715 = bitcast i16* %1714 to <8 x i16>*
  %1716 = sext i32 %1680 to i64
  br label %"for output.s0.b.rebased47"

"for output.s0.b.rebased47":                      ; preds = %"for output.s0.b.rebased47.preheader", %"end for output.s0.y.yo71"
  %indvars.iv1963 = phi i64 [ 0, %"for output.s0.b.rebased47.preheader" ], [ %indvars.iv.next1964, %"end for output.s0.y.yo71" ]
  %1717 = load i64, i64* %.fca.1.gep721, align 8, !tbaa !381
  %cmp.i1104 = icmp ult i64 %1717, %1524
  %1718 = load i8*, i8** %.fca.0.gep720, align 8, !tbaa !383
  br i1 %cmp.i1104, label %if.then.i1107, label %pseudostack_alloc.exit1120, !prof !384

if.then.i1107:                                    ; preds = %"for output.s0.b.rebased47"
  %tobool1.not.i1106 = icmp ne i8* %1718, null
  %1719 = load i64, i64* %.fca.2.gep722, align 8
  %cmp2.i1109 = icmp ugt i64 %1719, 16384
  %or.cond1394 = and i1 %tobool1.not.i1106, %cmp2.i1109
  br i1 %or.cond1394, label %if.then3.i1111, label %if.end.i1115

if.then3.i1111:                                   ; preds = %if.then.i1107
  call void @halide_free(i8* null, i8* nonnull %1718) #14
  %.pre2139 = load i64, i64* %.fca.2.gep722, align 8, !tbaa !385
  br label %if.end.i1115

if.end.i1115:                                     ; preds = %if.then3.i1111, %if.then.i1107
  %1720 = phi i64 [ %.pre2139, %if.then3.i1111 ], [ %1719, %if.then.i1107 ]
  %add.i1113 = add i64 %1720, %1524
  store i64 %add.i1113, i64* %.fca.2.gep722, align 8, !tbaa !385
  %cmp7.i1114 = icmp ugt i64 %add.i1113, 16384
  br i1 %cmp7.i1114, label %if.then8.i1117, label %if.end11.i1119

if.then8.i1117:                                   ; preds = %if.end.i1115
  %call.i1116 = call i8* @halide_malloc(i8* null, i64 %1524) #14
  br label %if.end11.i1119

if.end11.i1119:                                   ; preds = %if.then8.i1117, %if.end.i1115
  %storemerge.i1118 = phi i8* [ %call.i1116, %if.then8.i1117 ], [ null, %if.end.i1115 ]
  store i8* %storemerge.i1118, i8** %.fca.0.gep720, align 8, !tbaa !383
  store i64 %1524, i64* %.fca.1.gep721, align 8, !tbaa !381
  br label %pseudostack_alloc.exit1120

pseudostack_alloc.exit1120:                       ; preds = %"for output.s0.b.rebased47", %if.end11.i1119
  %1721 = phi i8* [ %storemerge.i1118, %if.end11.i1119 ], [ %1718, %"for output.s0.b.rebased47" ]
  %.not898 = icmp eq i8* %1721, null
  br i1 %.not898, label %then_bb51, label %"produce resampled_input53", !prof !386

"end for output.s0.b.rebased48":                  ; preds = %"end for output.s0.y.yo71", %"consume sum_filter44"
  %.4 = phi i8* [ %.3, %"consume sum_filter44" ], [ %1563, %"end for output.s0.y.yo71" ]
  %1722 = add nuw nsw i32 %output.s0.c.co22, 1
  %.not895 = icmp eq i32 %1722, %t2305
  br i1 %.not895, label %after_bb.loopexit1459, label %"for output.s0.c.co20"

then_bb51:                                        ; preds = %pseudostack_alloc.exit1120
  %1723 = alloca i8*, i64 %1524, align 16
  %1724 = bitcast i8** %1723 to i8*
  store i8** %1723, i8*** %1525, align 8
  br label %"produce resampled_input53"

"produce resampled_input53":                      ; preds = %pseudostack_alloc.exit1120, %then_bb51
  %resampled_input52 = phi i8* [ %1724, %then_bb51 ], [ %1721, %pseudostack_alloc.exit1120 ]
  br i1 %t2325, label %then_bb55, label %next_bb56

then_bb55:                                        ; preds = %"produce resampled_input53"
  %1725 = add nsw i64 %indvars.iv1963, %1583
  %1726 = mul nsw i64 %1725, %1584
  %1727 = add nsw i64 %1726, %1716
  br i1 %.not2295, label %"for resampled_input.s0.y.rebased57.us", label %"consume resampled_input69", !prof !413

"for resampled_input.s0.y.rebased57.us":          ; preds = %then_bb55, %"end for resampled_input.s0.x.rebased61.loopexit.us"
  %indvars.iv1935 = phi i64 [ %indvars.iv.next1936, %"end for resampled_input.s0.x.rebased61.loopexit.us" ], [ 0, %then_bb55 ]
  %1728 = add nsw i64 %indvars.iv1935, %1569
  %1729 = mul nsw i64 %1728, %1570
  %1730 = add nsw i64 %1729, %1571
  %1731 = add nsw i64 %indvars.iv1935, %1572
  %1732 = mul nsw i64 %1731, %1573
  %1733 = add nsw i64 %1727, %1732
  br label %"for resampled_input.s0.x.rebased60.us"

"for resampled_input.s0.x.rebased60.us":          ; preds = %"for resampled_input.s0.y.rebased57.us", %"for resampled_input.s0.x.rebased60.us"
  %indvars.iv1933 = phi i64 [ 0, %"for resampled_input.s0.y.rebased57.us" ], [ %indvars.iv.next1934, %"for resampled_input.s0.x.rebased60.us" ]
  %1734 = add nsw i64 %indvars.iv1933, %1535
  %1735 = mul nsw i64 %1734, %1536
  %1736 = add nsw i64 %1735, %1733
  %1737 = getelementptr inbounds i8, i8* %10, i64 %1736
  %1738 = bitcast i8* %1737 to <16 x i8>*
  %1739 = load <16 x i8>, <16 x i8>* %1738, align 1, !tbaa !414
  %1740 = add nsw i64 %indvars.iv1933, %1730
  %1741 = shl nsw i64 %1740, 4
  %1742 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1741
  %1743 = bitcast i8* %1742 to <16 x i8>*
  store <16 x i8> %1739, <16 x i8>* %1743, align 16, !tbaa !416
  %indvars.iv.next1934 = add nuw nsw i64 %indvars.iv1933, 1
  %.not909.us = icmp eq i64 %indvars.iv1933, %1568
  br i1 %.not909.us, label %"end for resampled_input.s0.x.rebased61.loopexit.us", label %"for resampled_input.s0.x.rebased60.us"

"end for resampled_input.s0.x.rebased61.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased60.us"
  %indvars.iv.next1936 = add nuw nsw i64 %indvars.iv1935, 1
  %.not908.us = icmp eq i64 %indvars.iv1935, %1574
  br i1 %.not908.us, label %"consume resampled_input69", label %"for resampled_input.s0.y.rebased57.us"

next_bb56:                                        ; preds = %"produce resampled_input53"
  %1744 = trunc i64 %indvars.iv1963 to i32
  %1745 = add i32 %16, %1744
  %1746 = mul i32 %1745, %18
  %t2363 = sub i32 %1746, %t2326
  br i1 %1589, label %"consume resampled_input69", label %"for resampled_input.s0.y.rebased63.preheader.split.us", !prof !418

"for resampled_input.s0.y.rebased63.preheader.split.us": ; preds = %next_bb56
  %1747 = sdiv <16 x i32> %1678, %1529
  %1748 = add nsw <16 x i32> %1747, %1679
  %1749 = and <16 x i32> %1748, %1534
  br label %"for resampled_input.s0.y.rebased63.us"

"for resampled_input.s0.y.rebased63.us":          ; preds = %"end for resampled_input.s0.x.rebased67.loopexit.us", %"for resampled_input.s0.y.rebased63.preheader.split.us"
  %indvars.iv1929 = phi i64 [ %indvars.iv.next1930, %"end for resampled_input.s0.x.rebased67.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased63.preheader.split.us" ]
  %1750 = add nsw i64 %indvars.iv1929, %1569
  %1751 = mul nsw i64 %1750, %1570
  %1752 = add nsw i64 %1751, %1571
  %1753 = trunc i64 %indvars.iv1929 to i32
  %1754 = add i32 %b43, %1753
  %1755 = mul i32 %1754, %15
  %1756 = add i32 %1755, %t2363
  br label %"for resampled_input.s0.x.rebased66.us"

"for resampled_input.s0.x.rebased66.us":          ; preds = %"for resampled_input.s0.y.rebased63.us", %"for resampled_input.s0.x.rebased66.us"
  %indvars.iv1927 = phi i64 [ 0, %"for resampled_input.s0.y.rebased63.us" ], [ %indvars.iv.next1928, %"for resampled_input.s0.x.rebased66.us" ]
  %1757 = trunc i64 %indvars.iv1927 to i32
  %1758 = add nsw i32 %b41, %1757
  %1759 = mul nsw i32 %1758, %13
  %1760 = add nsw i32 %1756, %1759
  %1761 = insertelement <16 x i32> undef, i32 %1760, i32 0
  %1762 = shufflevector <16 x i32> %1761, <16 x i32> undef, <16 x i32> zeroinitializer
  %1763 = add nsw <16 x i32> %1762, %1749
  %1764 = extractelement <16 x i32> %1763, i32 0
  %1765 = sext i32 %1764 to i64
  %1766 = getelementptr inbounds i8, i8* %10, i64 %1765
  %1767 = load i8, i8* %1766, align 1, !tbaa !414
  %1768 = insertelement <16 x i8> undef, i8 %1767, i32 0
  %1769 = extractelement <16 x i32> %1763, i32 1
  %1770 = sext i32 %1769 to i64
  %1771 = getelementptr inbounds i8, i8* %10, i64 %1770
  %1772 = load i8, i8* %1771, align 1, !tbaa !414
  %1773 = insertelement <16 x i8> %1768, i8 %1772, i32 1
  %1774 = extractelement <16 x i32> %1763, i32 2
  %1775 = sext i32 %1774 to i64
  %1776 = getelementptr inbounds i8, i8* %10, i64 %1775
  %1777 = load i8, i8* %1776, align 1, !tbaa !414
  %1778 = insertelement <16 x i8> %1773, i8 %1777, i32 2
  %1779 = extractelement <16 x i32> %1763, i32 3
  %1780 = sext i32 %1779 to i64
  %1781 = getelementptr inbounds i8, i8* %10, i64 %1780
  %1782 = load i8, i8* %1781, align 1, !tbaa !414
  %1783 = insertelement <16 x i8> %1778, i8 %1782, i32 3
  %1784 = extractelement <16 x i32> %1763, i32 4
  %1785 = sext i32 %1784 to i64
  %1786 = getelementptr inbounds i8, i8* %10, i64 %1785
  %1787 = load i8, i8* %1786, align 1, !tbaa !414
  %1788 = insertelement <16 x i8> %1783, i8 %1787, i32 4
  %1789 = extractelement <16 x i32> %1763, i32 5
  %1790 = sext i32 %1789 to i64
  %1791 = getelementptr inbounds i8, i8* %10, i64 %1790
  %1792 = load i8, i8* %1791, align 1, !tbaa !414
  %1793 = insertelement <16 x i8> %1788, i8 %1792, i32 5
  %1794 = extractelement <16 x i32> %1763, i32 6
  %1795 = sext i32 %1794 to i64
  %1796 = getelementptr inbounds i8, i8* %10, i64 %1795
  %1797 = load i8, i8* %1796, align 1, !tbaa !414
  %1798 = insertelement <16 x i8> %1793, i8 %1797, i32 6
  %1799 = extractelement <16 x i32> %1763, i32 7
  %1800 = sext i32 %1799 to i64
  %1801 = getelementptr inbounds i8, i8* %10, i64 %1800
  %1802 = load i8, i8* %1801, align 1, !tbaa !414
  %1803 = insertelement <16 x i8> %1798, i8 %1802, i32 7
  %1804 = extractelement <16 x i32> %1763, i32 8
  %1805 = sext i32 %1804 to i64
  %1806 = getelementptr inbounds i8, i8* %10, i64 %1805
  %1807 = load i8, i8* %1806, align 1, !tbaa !414
  %1808 = insertelement <16 x i8> %1803, i8 %1807, i32 8
  %1809 = extractelement <16 x i32> %1763, i32 9
  %1810 = sext i32 %1809 to i64
  %1811 = getelementptr inbounds i8, i8* %10, i64 %1810
  %1812 = load i8, i8* %1811, align 1, !tbaa !414
  %1813 = insertelement <16 x i8> %1808, i8 %1812, i32 9
  %1814 = extractelement <16 x i32> %1763, i32 10
  %1815 = sext i32 %1814 to i64
  %1816 = getelementptr inbounds i8, i8* %10, i64 %1815
  %1817 = load i8, i8* %1816, align 1, !tbaa !414
  %1818 = insertelement <16 x i8> %1813, i8 %1817, i32 10
  %1819 = extractelement <16 x i32> %1763, i32 11
  %1820 = sext i32 %1819 to i64
  %1821 = getelementptr inbounds i8, i8* %10, i64 %1820
  %1822 = load i8, i8* %1821, align 1, !tbaa !414
  %1823 = insertelement <16 x i8> %1818, i8 %1822, i32 11
  %1824 = extractelement <16 x i32> %1763, i32 12
  %1825 = sext i32 %1824 to i64
  %1826 = getelementptr inbounds i8, i8* %10, i64 %1825
  %1827 = load i8, i8* %1826, align 1, !tbaa !414
  %1828 = insertelement <16 x i8> %1823, i8 %1827, i32 12
  %1829 = extractelement <16 x i32> %1763, i32 13
  %1830 = sext i32 %1829 to i64
  %1831 = getelementptr inbounds i8, i8* %10, i64 %1830
  %1832 = load i8, i8* %1831, align 1, !tbaa !414
  %1833 = insertelement <16 x i8> %1828, i8 %1832, i32 13
  %1834 = extractelement <16 x i32> %1763, i32 14
  %1835 = sext i32 %1834 to i64
  %1836 = getelementptr inbounds i8, i8* %10, i64 %1835
  %1837 = load i8, i8* %1836, align 1, !tbaa !414
  %1838 = insertelement <16 x i8> %1833, i8 %1837, i32 14
  %1839 = extractelement <16 x i32> %1763, i32 15
  %1840 = sext i32 %1839 to i64
  %1841 = getelementptr inbounds i8, i8* %10, i64 %1840
  %1842 = load i8, i8* %1841, align 1, !tbaa !414
  %1843 = insertelement <16 x i8> %1838, i8 %1842, i32 15
  %1844 = add nsw i64 %indvars.iv1927, %1752
  %1845 = shl nsw i64 %1844, 4
  %1846 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1845
  %1847 = bitcast i8* %1846 to <16 x i8>*
  store <16 x i8> %1843, <16 x i8>* %1847, align 16, !tbaa !416
  %indvars.iv.next1928 = add nuw nsw i64 %indvars.iv1927, 1
  %.not907.us = icmp eq i64 %indvars.iv1927, %1568
  br i1 %.not907.us, label %"end for resampled_input.s0.x.rebased67.loopexit.us", label %"for resampled_input.s0.x.rebased66.us"

"end for resampled_input.s0.x.rebased67.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased66.us"
  %indvars.iv.next1930 = add nuw nsw i64 %indvars.iv1929, 1
  %.not904.us = icmp eq i64 %indvars.iv1929, %1574
  br i1 %.not904.us, label %"consume resampled_input69", label %"for resampled_input.s0.y.rebased63.us"

"consume resampled_input69":                      ; preds = %"end for resampled_input.s0.x.rebased67.loopexit.us", %"end for resampled_input.s0.x.rebased61.loopexit.us", %next_bb56, %then_bb55
  br i1 %1537, label %"for output.s0.y.yo70.preheader", label %"end for output.s0.y.yo71", !prof !387

"for output.s0.y.yo70.preheader":                 ; preds = %"consume resampled_input69"
  %1848 = trunc i64 %indvars.iv1963 to i32
  %1849 = add i32 %16, %1848
  %1850 = mul i32 %1849, %27
  %t2357 = add i32 %1850, %output.s0.c.c.base23
  br label %"for output.s0.y.yo70"

"for output.s0.y.yo70":                           ; preds = %"for output.s0.y.yo70.preheader", %"end for output.s0.x.xo74"
  %indvars.iv1946 = phi i64 [ 0, %"for output.s0.y.yo70.preheader" ], [ %indvars.iv.next1947, %"end for output.s0.x.xo74" ]
  %output.s0.y.yo72 = phi i32 [ 0, %"for output.s0.y.yo70.preheader" ], [ %1875, %"end for output.s0.x.xo74" ]
  %1851 = add nsw i64 %indvars.iv1946, %1576
  %t2388 = add nsw i32 %output.s0.y.yo72, %24
  %1852 = mul nsw i64 %1851, %1577
  %t2389 = mul nsw i32 %t2388, %stride_y
  %1853 = add nsw i32 %t2373, %t2389
  %t2390 = mul nsw i32 %1853, %a44
  %1854 = add nsw i32 %1538, %t2389
  %t2392 = mul nsw i32 %1854, %a44
  %1855 = sub nsw i64 %1852, %1581
  %t2393 = sub nsw i32 %t2389, %t2346
  %t2394 = mul nsw i32 %t2393, %a44
  br i1 %1539, label %"for output.s0.x.xo73.preheader", label %"end for output.s0.x.xo74", !prof !387

"for output.s0.x.xo73.preheader":                 ; preds = %"for output.s0.y.yo70"
  %1856 = mul nsw i64 %1855, %1570
  %1857 = add nsw i64 %1852, %1580
  %1858 = mul nsw i64 %1857, %1570
  %1859 = add nsw i64 %1852, %1578
  %1860 = mul nsw i64 %1859, %1570
  %1861 = trunc i64 %1851 to i32
  %1862 = mul i32 %26, %1861
  %t2374 = add i32 %t2357, %1862
  %t2387 = sub i32 %t2374, %reass.add1423
  %t2385 = add nsw i32 %t2390, %t2369
  %t2384 = add nsw i32 %t2390, %t2391
  %t2381 = add nsw i32 %t2392, %t2369
  %t2380 = add nsw i32 %t2392, %t2391
  %t2377 = add nsw i32 %t2394, %t2369
  %t2376 = add nsw i32 %t2394, %t2391
  %1863 = sub nsw i64 %1860, %1579
  %1864 = sub nsw i64 %1858, %1579
  %1865 = sub nsw i64 %1856, %1579
  %1866 = sext i32 %t2376 to i64
  %1867 = sext i32 %t2377 to i64
  %1868 = sext i32 %t2380 to i64
  %1869 = sext i32 %t2381 to i64
  %1870 = sext i32 %t2384 to i64
  %1871 = sext i32 %t2385 to i64
  %1872 = sext i32 %t2387 to i64
  %1873 = trunc i64 %1855 to i32
  br label %"for output.s0.x.xo73"

"end for output.s0.y.yo71":                       ; preds = %"end for output.s0.x.xo74", %"consume resampled_input69"
  %indvars.iv.next1964 = add nuw nsw i64 %indvars.iv1963, 1
  %1874 = icmp eq i64 %indvars.iv.next1964, %zext1966
  br i1 %1874, label %"end for output.s0.b.rebased48", label %"for output.s0.b.rebased47"

"for output.s0.x.xo73":                           ; preds = %"for output.s0.x.xo73.preheader", %"consume convolved86"
  %indvars.iv1944 = phi i64 [ 0, %"for output.s0.x.xo73.preheader" ], [ %indvars.iv.next1945, %"consume convolved86" ]
  br i1 %t2340, label %then_bb78, label %next_bb79

"end for output.s0.x.xo74.loopexit":              ; preds = %"consume convolved86"
  store <4 x i32> %.lcssa1515.us.lcssa1531, <4 x i32>* %1540, align 16, !tbaa !395
  store <4 x i32> %.lcssa1517.us.lcssa1534, <4 x i32>* %1542, align 16, !tbaa !406
  store <4 x i32> %.lcssa1519.us.lcssa1537, <4 x i32>* %1544, align 16, !tbaa !408
  store <4 x i32> %.lcssa1521.us.lcssa1540, <4 x i32>* %1546, align 16, !tbaa !411
  br label %"end for output.s0.x.xo74"

"end for output.s0.x.xo74":                       ; preds = %"end for output.s0.x.xo74.loopexit", %"for output.s0.y.yo70"
  %indvars.iv.next1947 = add nuw nsw i64 %indvars.iv1946, 1
  %1875 = add nuw nsw i32 %output.s0.y.yo72, 1
  %.not900 = icmp eq i64 %indvars.iv.next1947, %1582
  br i1 %.not900, label %"end for output.s0.y.yo71", label %"for output.s0.y.yo70"

then_bb78:                                        ; preds = %"for output.s0.x.xo73"
  %1876 = load <8 x i16>, <8 x i16>* %1681, align 16, !tbaa !471
  %1877 = load <8 x i16>, <8 x i16>* %1683, align 16, !tbaa !480
  %1878 = shufflevector <8 x i16> %1877, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %1879 = add nsw i64 %indvars.iv1944, %1548
  %1880 = mul nsw i64 %1879, %1549
  %1881 = add nsw i64 %1880, %1865
  %1882 = shl nsw i64 %1881, 4
  %1883 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1882
  %1884 = bitcast i8* %1883 to <16 x i8>*
  %1885 = load <16 x i8>, <16 x i8>* %1884, align 16, !tbaa !416
  %1886 = zext <16 x i8> %1885 to <16 x i16>
  %1887 = shufflevector <8 x i16> %1876, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1888 = shufflevector <16 x i16> %1886, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1889 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1887, <4 x i16> %1888)
  %1890 = shufflevector <8 x i16> %1876, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1891 = shufflevector <16 x i16> %1886, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1892 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1890, <4 x i16> %1891)
  %1893 = shufflevector <8 x i16> %1877, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1894 = shufflevector <16 x i16> %1886, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1895 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1893, <4 x i16> %1894)
  %1896 = shufflevector <16 x i16> %1878, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1897 = shufflevector <16 x i16> %1886, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1898 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1896, <4 x i16> %1897)
  %1899 = add nsw <4 x i32> %1889, %1671
  %1900 = add nsw <4 x i32> %1892, %1672
  %1901 = add nsw <4 x i32> %1895, %1673
  %1902 = add nsw <4 x i32> %1898, %1674
  %1903 = load <8 x i16>, <8 x i16>* %1685, align 16, !tbaa !482
  %1904 = load <8 x i16>, <8 x i16>* %1687, align 16, !tbaa !485
  %1905 = shufflevector <8 x i16> %1904, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %1906 = add nsw i64 %1880, %1866
  %1907 = shl nsw i64 %1906, 4
  %1908 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1907
  %1909 = bitcast i8* %1908 to <16 x i8>*
  %1910 = load <16 x i8>, <16 x i8>* %1909, align 16, !tbaa !416
  %1911 = zext <16 x i8> %1910 to <16 x i16>
  %1912 = shufflevector <8 x i16> %1903, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1913 = shufflevector <16 x i16> %1911, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1914 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1912, <4 x i16> %1913)
  %1915 = shufflevector <8 x i16> %1903, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1916 = shufflevector <16 x i16> %1911, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1917 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1915, <4 x i16> %1916)
  %1918 = shufflevector <8 x i16> %1904, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1919 = shufflevector <16 x i16> %1911, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1920 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1918, <4 x i16> %1919)
  %1921 = shufflevector <16 x i16> %1905, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1922 = shufflevector <16 x i16> %1911, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1923 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1921, <4 x i16> %1922)
  %1924 = add nsw <4 x i32> %1914, %1899
  %1925 = add nsw <4 x i32> %1917, %1900
  %1926 = add nsw <4 x i32> %1920, %1901
  %1927 = add nsw <4 x i32> %1923, %1902
  %1928 = load <8 x i16>, <8 x i16>* %1689, align 16, !tbaa !487
  %1929 = load <8 x i16>, <8 x i16>* %1691, align 16, !tbaa !491
  %1930 = shufflevector <8 x i16> %1929, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %1931 = add nsw i64 %1880, %1867
  %1932 = shl nsw i64 %1931, 4
  %1933 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1932
  %1934 = bitcast i8* %1933 to <16 x i8>*
  %1935 = load <16 x i8>, <16 x i8>* %1934, align 16, !tbaa !416
  %1936 = zext <16 x i8> %1935 to <16 x i16>
  %1937 = shufflevector <8 x i16> %1928, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1938 = shufflevector <16 x i16> %1936, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1939 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1937, <4 x i16> %1938)
  %1940 = shufflevector <8 x i16> %1928, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1941 = shufflevector <16 x i16> %1936, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1942 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1940, <4 x i16> %1941)
  %1943 = shufflevector <8 x i16> %1929, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1944 = shufflevector <16 x i16> %1936, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1945 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1943, <4 x i16> %1944)
  %1946 = shufflevector <16 x i16> %1930, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1947 = shufflevector <16 x i16> %1936, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1948 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1946, <4 x i16> %1947)
  %1949 = add nsw <4 x i32> %1939, %1924
  %1950 = add nsw <4 x i32> %1942, %1925
  %1951 = add nsw <4 x i32> %1945, %1926
  %1952 = add nsw <4 x i32> %1948, %1927
  %1953 = load <8 x i16>, <8 x i16>* %1693, align 16, !tbaa !391
  %1954 = load <8 x i16>, <8 x i16>* %1695, align 16, !tbaa !391
  %1955 = shufflevector <8 x i16> %1954, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %1956 = add nsw i64 %1880, %1864
  %1957 = shl nsw i64 %1956, 4
  %1958 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1957
  %1959 = bitcast i8* %1958 to <16 x i8>*
  %1960 = load <16 x i8>, <16 x i8>* %1959, align 16, !tbaa !416
  %1961 = zext <16 x i8> %1960 to <16 x i16>
  %1962 = shufflevector <8 x i16> %1953, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1963 = shufflevector <16 x i16> %1961, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1964 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1962, <4 x i16> %1963)
  %1965 = shufflevector <8 x i16> %1953, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1966 = shufflevector <16 x i16> %1961, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1967 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1965, <4 x i16> %1966)
  %1968 = shufflevector <8 x i16> %1954, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1969 = shufflevector <16 x i16> %1961, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1970 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1968, <4 x i16> %1969)
  %1971 = shufflevector <16 x i16> %1955, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1972 = shufflevector <16 x i16> %1961, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1973 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1971, <4 x i16> %1972)
  %1974 = add nsw <4 x i32> %1964, %1949
  %1975 = add nsw <4 x i32> %1967, %1950
  %1976 = add nsw <4 x i32> %1970, %1951
  %1977 = add nsw <4 x i32> %1973, %1952
  %1978 = load <8 x i16>, <8 x i16>* %1697, align 16, !tbaa !391
  %1979 = load <8 x i16>, <8 x i16>* %1699, align 16, !tbaa !391
  %1980 = shufflevector <8 x i16> %1979, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %1981 = add nsw i64 %1880, %1868
  %1982 = shl nsw i64 %1981, 4
  %1983 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1982
  %1984 = bitcast i8* %1983 to <16 x i8>*
  %1985 = load <16 x i8>, <16 x i8>* %1984, align 16, !tbaa !416
  %1986 = zext <16 x i8> %1985 to <16 x i16>
  %1987 = shufflevector <8 x i16> %1978, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1988 = shufflevector <16 x i16> %1986, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1989 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1987, <4 x i16> %1988)
  %1990 = shufflevector <8 x i16> %1978, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1991 = shufflevector <16 x i16> %1986, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1992 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1990, <4 x i16> %1991)
  %1993 = shufflevector <8 x i16> %1979, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1994 = shufflevector <16 x i16> %1986, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1995 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1993, <4 x i16> %1994)
  %1996 = shufflevector <16 x i16> %1980, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1997 = shufflevector <16 x i16> %1986, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1998 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %1996, <4 x i16> %1997)
  %1999 = add nsw <4 x i32> %1989, %1974
  %2000 = add nsw <4 x i32> %1992, %1975
  %2001 = add nsw <4 x i32> %1995, %1976
  %2002 = add nsw <4 x i32> %1998, %1977
  %2003 = load <8 x i16>, <8 x i16>* %1701, align 16, !tbaa !391
  %2004 = load <8 x i16>, <8 x i16>* %1703, align 16, !tbaa !391
  %2005 = shufflevector <8 x i16> %2004, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2006 = add nsw i64 %1880, %1869
  %2007 = shl nsw i64 %2006, 4
  %2008 = getelementptr inbounds i8, i8* %resampled_input52, i64 %2007
  %2009 = bitcast i8* %2008 to <16 x i8>*
  %2010 = load <16 x i8>, <16 x i8>* %2009, align 16, !tbaa !416
  %2011 = zext <16 x i8> %2010 to <16 x i16>
  %2012 = shufflevector <8 x i16> %2003, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2013 = shufflevector <16 x i16> %2011, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2014 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2012, <4 x i16> %2013)
  %2015 = shufflevector <8 x i16> %2003, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2016 = shufflevector <16 x i16> %2011, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2017 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2015, <4 x i16> %2016)
  %2018 = shufflevector <8 x i16> %2004, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2019 = shufflevector <16 x i16> %2011, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2020 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2018, <4 x i16> %2019)
  %2021 = shufflevector <16 x i16> %2005, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2022 = shufflevector <16 x i16> %2011, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2023 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2021, <4 x i16> %2022)
  %2024 = add nsw <4 x i32> %2014, %1999
  %2025 = add nsw <4 x i32> %2017, %2000
  %2026 = add nsw <4 x i32> %2020, %2001
  %2027 = add nsw <4 x i32> %2023, %2002
  %2028 = load <8 x i16>, <8 x i16>* %1705, align 16, !tbaa !391
  %2029 = load <8 x i16>, <8 x i16>* %1707, align 16, !tbaa !391
  %2030 = shufflevector <8 x i16> %2029, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2031 = add nsw i64 %1880, %1863
  %2032 = shl nsw i64 %2031, 4
  %2033 = getelementptr inbounds i8, i8* %resampled_input52, i64 %2032
  %2034 = bitcast i8* %2033 to <16 x i8>*
  %2035 = load <16 x i8>, <16 x i8>* %2034, align 16, !tbaa !416
  %2036 = zext <16 x i8> %2035 to <16 x i16>
  %2037 = shufflevector <8 x i16> %2028, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2038 = shufflevector <16 x i16> %2036, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2039 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2037, <4 x i16> %2038)
  %2040 = shufflevector <8 x i16> %2028, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2041 = shufflevector <16 x i16> %2036, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2042 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2040, <4 x i16> %2041)
  %2043 = shufflevector <8 x i16> %2029, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2044 = shufflevector <16 x i16> %2036, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2045 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2043, <4 x i16> %2044)
  %2046 = shufflevector <16 x i16> %2030, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2047 = shufflevector <16 x i16> %2036, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2048 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2046, <4 x i16> %2047)
  %2049 = add nsw <4 x i32> %2039, %2024
  %2050 = add nsw <4 x i32> %2042, %2025
  %2051 = add nsw <4 x i32> %2045, %2026
  %2052 = add nsw <4 x i32> %2048, %2027
  %2053 = load <8 x i16>, <8 x i16>* %1709, align 16, !tbaa !391
  %2054 = load <8 x i16>, <8 x i16>* %1711, align 16, !tbaa !391
  %2055 = shufflevector <8 x i16> %2054, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2056 = add nsw i64 %1880, %1870
  %2057 = shl nsw i64 %2056, 4
  %2058 = getelementptr inbounds i8, i8* %resampled_input52, i64 %2057
  %2059 = bitcast i8* %2058 to <16 x i8>*
  %2060 = load <16 x i8>, <16 x i8>* %2059, align 16, !tbaa !416
  %2061 = zext <16 x i8> %2060 to <16 x i16>
  %2062 = shufflevector <8 x i16> %2053, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2063 = shufflevector <16 x i16> %2061, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2064 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2062, <4 x i16> %2063)
  %2065 = shufflevector <8 x i16> %2053, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2066 = shufflevector <16 x i16> %2061, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2067 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2065, <4 x i16> %2066)
  %2068 = shufflevector <8 x i16> %2054, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2069 = shufflevector <16 x i16> %2061, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2070 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2068, <4 x i16> %2069)
  %2071 = shufflevector <16 x i16> %2055, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2072 = shufflevector <16 x i16> %2061, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2073 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2071, <4 x i16> %2072)
  %2074 = add nsw <4 x i32> %2064, %2049
  %2075 = add nsw <4 x i32> %2067, %2050
  %2076 = add nsw <4 x i32> %2070, %2051
  %2077 = add nsw <4 x i32> %2073, %2052
  %2078 = load <8 x i16>, <8 x i16>* %1713, align 16, !tbaa !391
  %2079 = load <8 x i16>, <8 x i16>* %1715, align 16, !tbaa !391
  %2080 = shufflevector <8 x i16> %2079, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2081 = add nsw i64 %1880, %1871
  %2082 = shl nsw i64 %2081, 4
  %2083 = getelementptr inbounds i8, i8* %resampled_input52, i64 %2082
  %2084 = bitcast i8* %2083 to <16 x i8>*
  %2085 = load <16 x i8>, <16 x i8>* %2084, align 16, !tbaa !416
  %2086 = zext <16 x i8> %2085 to <16 x i16>
  %2087 = shufflevector <8 x i16> %2078, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2088 = shufflevector <16 x i16> %2086, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2089 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2087, <4 x i16> %2088)
  %2090 = shufflevector <8 x i16> %2078, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2091 = shufflevector <16 x i16> %2086, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2092 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2090, <4 x i16> %2091)
  %2093 = shufflevector <8 x i16> %2079, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2094 = shufflevector <16 x i16> %2086, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2095 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2093, <4 x i16> %2094)
  %2096 = shufflevector <16 x i16> %2080, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2097 = shufflevector <16 x i16> %2086, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2098 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2096, <4 x i16> %2097)
  %2099 = add nsw <4 x i32> %2089, %2074
  %2100 = add nsw <4 x i32> %2092, %2075
  %2101 = add nsw <4 x i32> %2095, %2076
  %2102 = add nsw <4 x i32> %2098, %2077
  br label %"consume convolved86"

next_bb79:                                        ; preds = %"for output.s0.x.xo73"
  %2103 = trunc i64 %indvars.iv1944 to i32
  %2104 = add nsw i32 %21, %2103
  %2105 = mul nsw i32 %2104, %stride_x
  %t2395 = sub i32 %2105, %t2348
  br i1 %1491, label %"for convolved.s1.r19$y80.preheader", label %"consume convolved86", !prof !387

"for convolved.s1.r19$y80.preheader":             ; preds = %next_bb79
  br i1 %1489, label %"for convolved.s1.r19$y80.us", label %"consume convolved86", !prof !387

"for convolved.s1.r19$y80.us":                    ; preds = %"for convolved.s1.r19$y80.preheader", %"end for convolved.s1.r19$x84.loopexit.us"
  %indvars.iv1941 = phi i64 [ %indvars.iv.next1942, %"end for convolved.s1.r19$x84.loopexit.us" ], [ 0, %"for convolved.s1.r19$y80.preheader" ]
  %.lcssa1521.us1529 = phi <4 x i32> [ %2146, %"end for convolved.s1.r19$x84.loopexit.us" ], [ %1674, %"for convolved.s1.r19$y80.preheader" ]
  %.lcssa1519.us1527 = phi <4 x i32> [ %2145, %"end for convolved.s1.r19$x84.loopexit.us" ], [ %1673, %"for convolved.s1.r19$y80.preheader" ]
  %.lcssa1517.us1525 = phi <4 x i32> [ %2144, %"end for convolved.s1.r19$x84.loopexit.us" ], [ %1672, %"for convolved.s1.r19$y80.preheader" ]
  %.lcssa1515.us1523 = phi <4 x i32> [ %2143, %"end for convolved.s1.r19$x84.loopexit.us" ], [ %1671, %"for convolved.s1.r19$y80.preheader" ]
  %"convolved.s1.r19$y82.us" = phi i32 [ %2147, %"end for convolved.s1.r19$x84.loopexit.us" ], [ 0, %"for convolved.s1.r19$y80.preheader" ]
  %2106 = mul nsw i64 %indvars.iv1941, %1565
  %2107 = mul nsw i32 %"convolved.s1.r19$y82.us", %a120
  %2108 = add nsw i32 %2107, %1873
  %2109 = mul nsw i32 %2108, %a44
  %t2397.us = add nsw i32 %t2395, %2109
  %2110 = sext i32 %t2397.us to i64
  br label %"for convolved.s1.r19$x83.us"

"for convolved.s1.r19$x83.us":                    ; preds = %"for convolved.s1.r19$y80.us", %"for convolved.s1.r19$x83.us"
  %indvars.iv1939 = phi i64 [ 0, %"for convolved.s1.r19$y80.us" ], [ %indvars.iv.next1940, %"for convolved.s1.r19$x83.us" ]
  %2111 = phi <4 x i32> [ %.lcssa1521.us1529, %"for convolved.s1.r19$y80.us" ], [ %2146, %"for convolved.s1.r19$x83.us" ]
  %2112 = phi <4 x i32> [ %.lcssa1519.us1527, %"for convolved.s1.r19$y80.us" ], [ %2145, %"for convolved.s1.r19$x83.us" ]
  %2113 = phi <4 x i32> [ %.lcssa1517.us1525, %"for convolved.s1.r19$y80.us" ], [ %2144, %"for convolved.s1.r19$x83.us" ]
  %2114 = phi <4 x i32> [ %.lcssa1515.us1523, %"for convolved.s1.r19$y80.us" ], [ %2143, %"for convolved.s1.r19$x83.us" ]
  %2115 = add nsw i64 %indvars.iv1939, %2106
  %2116 = shl nsw i64 %2115, 4
  %2117 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 %2116
  %2118 = bitcast i16* %2117 to <8 x i16>*
  %2119 = load <8 x i16>, <8 x i16>* %2118, align 16, !tbaa !391
  %2120 = getelementptr inbounds i16, i16* %2117, i64 8
  %2121 = bitcast i16* %2120 to <8 x i16>*
  %2122 = load <8 x i16>, <8 x i16>* %2121, align 16, !tbaa !391
  %2123 = shufflevector <8 x i16> %2122, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2124 = mul nsw i64 %indvars.iv1939, %1547
  %2125 = add nsw i64 %2124, %2110
  %2126 = shl nsw i64 %2125, 4
  %2127 = getelementptr inbounds i8, i8* %resampled_input52, i64 %2126
  %2128 = bitcast i8* %2127 to <16 x i8>*
  %2129 = load <16 x i8>, <16 x i8>* %2128, align 16, !tbaa !416
  %2130 = zext <16 x i8> %2129 to <16 x i16>
  %2131 = shufflevector <8 x i16> %2119, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2132 = shufflevector <16 x i16> %2130, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2133 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2131, <4 x i16> %2132)
  %2134 = shufflevector <8 x i16> %2119, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2135 = shufflevector <16 x i16> %2130, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2136 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2134, <4 x i16> %2135)
  %2137 = shufflevector <8 x i16> %2122, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2138 = shufflevector <16 x i16> %2130, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2139 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2137, <4 x i16> %2138)
  %2140 = shufflevector <16 x i16> %2123, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2141 = shufflevector <16 x i16> %2130, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2142 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2140, <4 x i16> %2141)
  %2143 = add nsw <4 x i32> %2133, %2114
  %2144 = add nsw <4 x i32> %2136, %2113
  %2145 = add nsw <4 x i32> %2139, %2112
  %2146 = add nsw <4 x i32> %2142, %2111
  %indvars.iv.next1940 = add nuw nsw i64 %indvars.iv1939, 1
  %.not903.us = icmp eq i64 %indvars.iv.next1940, %1564
  br i1 %.not903.us, label %"end for convolved.s1.r19$x84.loopexit.us", label %"for convolved.s1.r19$x83.us"

"end for convolved.s1.r19$x84.loopexit.us":       ; preds = %"for convolved.s1.r19$x83.us"
  %indvars.iv.next1942 = add nuw nsw i64 %indvars.iv1941, 1
  %2147 = add nuw nsw i32 %"convolved.s1.r19$y82.us", 1
  %.not902.us = icmp eq i64 %indvars.iv.next1942, %1567
  br i1 %.not902.us, label %"consume convolved86", label %"for convolved.s1.r19$y80.us"

"consume convolved86":                            ; preds = %"end for convolved.s1.r19$x84.loopexit.us", %"for convolved.s1.r19$y80.preheader", %next_bb79, %then_bb78
  %.lcssa1521.us.lcssa1540 = phi <4 x i32> [ %1674, %next_bb79 ], [ %2102, %then_bb78 ], [ %1674, %"for convolved.s1.r19$y80.preheader" ], [ %2146, %"end for convolved.s1.r19$x84.loopexit.us" ]
  %.lcssa1519.us.lcssa1537 = phi <4 x i32> [ %1673, %next_bb79 ], [ %2101, %then_bb78 ], [ %1673, %"for convolved.s1.r19$y80.preheader" ], [ %2145, %"end for convolved.s1.r19$x84.loopexit.us" ]
  %.lcssa1517.us.lcssa1534 = phi <4 x i32> [ %1672, %next_bb79 ], [ %2100, %then_bb78 ], [ %1672, %"for convolved.s1.r19$y80.preheader" ], [ %2144, %"end for convolved.s1.r19$x84.loopexit.us" ]
  %.lcssa1515.us.lcssa1531 = phi <4 x i32> [ %1671, %next_bb79 ], [ %2099, %then_bb78 ], [ %1671, %"for convolved.s1.r19$y80.preheader" ], [ %2143, %"end for convolved.s1.r19$x84.loopexit.us" ]
  %2148 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %.lcssa1515.us.lcssa1531, <4 x i32> %1551)
  %2149 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %.lcssa1517.us.lcssa1534, <4 x i32> %1551)
  %2150 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %.lcssa1519.us.lcssa1537, <4 x i32> %1551)
  %2151 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %.lcssa1521.us.lcssa1540, <4 x i32> %1551)
  %2152 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %2148, <4 x i32> %1554)
  %2153 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %2149, <4 x i32> %1554)
  %2154 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %2150, <4 x i32> %1554)
  %2155 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %2151, <4 x i32> %1554)
  %2156 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %2152)
  %2157 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %2153)
  %2158 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %2154)
  %2159 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %2155)
  %2160 = shufflevector <4 x i16> %2156, <4 x i16> %2157, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2161 = shufflevector <4 x i16> %2158, <4 x i16> %2159, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2162 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %2160, <8 x i16> %1557)
  %2163 = shufflevector <16 x i16> %2161, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2164 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %2163, <8 x i16> %1557)
  %2165 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %2162)
  %2166 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %2164)
  %2167 = shufflevector <8 x i8> %2165, <8 x i8> %2166, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2168 = call <16 x i8> @llvm.aarch64.neon.umin.v16i8(<16 x i8> %2167, <16 x i8> %1559)
  %2169 = call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2168, <16 x i8> %1561)
  %2170 = add nsw i64 %indvars.iv1944, %1548
  %2171 = mul nsw i64 %2170, %1562
  %2172 = add nsw i64 %2171, %1872
  %2173 = getelementptr inbounds i8, i8* %19, i64 %2172
  %2174 = bitcast i8* %2173 to <16 x i8>*
  store <16 x i8> %2169, <16 x i8>* %2174, align 1, !tbaa !493
  %indvars.iv.next1945 = add nuw nsw i64 %indvars.iv1944, 1
  %.not901 = icmp eq i64 %indvars.iv.next1945, %1575
  br i1 %.not901, label %"end for output.s0.x.xo74.loopexit", label %"for output.s0.x.xo73"

if.end.i1133:                                     ; preds = %next_bb19
  %2175 = icmp eq i32 %6, 3
  %2176 = icmp eq i32 %8, 3
  %2177 = and i1 %2175, %2176
  %2178 = icmp sgt i32 %6, 0
  %2179 = select i1 %2178, i32 %6, i32 0
  %t2502 = zext i32 %2179 to i64
  %2180 = icmp sgt i32 %8, 0
  %2181 = select i1 %2180, i32 %8, i32 0
  %t2503 = zext i32 %2181 to i64
  %2182 = shl nuw nsw i64 %t2502, 5
  %2183 = mul i64 %2182, %t2503
  %2184 = or i64 %2183, 6
  %2185 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  store i64 %2184, i64* %.fca.2.gep, align 8, !tbaa !385
  %cmp7.i1132 = icmp ugt i64 %2184, 16384
  br i1 %cmp7.i1132, label %pseudostack_alloc.exit1138, label %pseudostack_alloc.exit1138.thread

pseudostack_alloc.exit1138.thread:                ; preds = %if.end.i1133
  store i64 %2184, i64* %.fca.1.gep, align 8, !tbaa !381
  br label %then_bb90

pseudostack_alloc.exit1138:                       ; preds = %if.end.i1133
  %call.i1134 = tail call i8* @halide_malloc(i8* null, i64 %2184) #14
  store i8* %call.i1134, i8** %.fca.0.gep, align 8, !tbaa !383
  store i64 %2184, i64* %.fca.1.gep, align 8, !tbaa !381
  %2186 = bitcast i8* %call.i1134 to i16*
  %.not861 = icmp eq i8* %call.i1134, null
  br i1 %.not861, label %then_bb90, label %"produce filter_zeroed92", !prof !386

then_bb90:                                        ; preds = %pseudostack_alloc.exit1138.thread, %pseudostack_alloc.exit1138
  %2187 = alloca i8*, i64 %2184, align 16
  %2188 = bitcast i8** %2187 to i16*
  %2189 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  store i8** %2187, i8*** %2189, align 8
  br label %"produce filter_zeroed92"

"produce filter_zeroed92":                        ; preds = %pseudostack_alloc.exit1138, %then_bb90
  %filter_zeroed91 = phi i16* [ %2188, %then_bb90 ], [ %2186, %pseudostack_alloc.exit1138 ]
  %t2399 = icmp sgt i32 %5, 8
  %t2398 = icmp sgt i32 %5, 7
  br i1 %2180, label %"for filter_zeroed.s0.y93.preheader", label %"produce sum_filter107", !prof !387

"for filter_zeroed.s0.y93.preheader":             ; preds = %"produce filter_zeroed92"
  %2190 = insertelement <8 x i32> undef, i32 %5, i32 0
  %2191 = shufflevector <8 x i32> %2190, <8 x i32> undef, <8 x i32> zeroinitializer
  %2192 = icmp sgt <8 x i32> %2191, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2193 = sext i32 %7 to i64
  %2194 = insertelement <8 x i8> undef, i8 %filter_zero, i32 0
  %2195 = shufflevector <8 x i8> %2194, <8 x i8> undef, <8 x i32> zeroinitializer
  %2196 = zext <8 x i8> %2195 to <8 x i16>
  %2197 = icmp sgt <8 x i32> %2191, <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br i1 %2178, label %"for filter_zeroed.s0.y93.us.preheader", label %"produce sum_filter107", !prof !387

"for filter_zeroed.s0.y93.us.preheader":          ; preds = %"for filter_zeroed.s0.y93.preheader"
  %2198 = zext i32 %6 to i64
  %2199 = zext i32 %6 to i64
  %2200 = sext i32 %9 to i64
  %2201 = zext i32 %8 to i64
  br label %"for filter_zeroed.s0.y93.us"

"for filter_zeroed.s0.y93.us":                    ; preds = %"for filter_zeroed.s0.y93.us.preheader", %"end for filter_zeroed.s0.x97.loopexit.us"
  %indvars.iv1869 = phi i64 [ 0, %"for filter_zeroed.s0.y93.us.preheader" ], [ %indvars.iv.next1870, %"end for filter_zeroed.s0.x97.loopexit.us" ]
  %2202 = mul nsw i64 %indvars.iv1869, %2199
  %2203 = mul nsw i64 %indvars.iv1869, %2200
  br i1 %t2398, label %"for filter_zeroed.s0.x96.preheader.split.us.us", label %"for filter_zeroed.s0.x96.us1487"

"for filter_zeroed.s0.x96.us1487":                ; preds = %"for filter_zeroed.s0.y93.us", %"for filter_zeroed.s0.x96.us1487"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"for filter_zeroed.s0.x96.us1487" ], [ 0, %"for filter_zeroed.s0.y93.us" ]
  %2204 = mul nsw i64 %indvars.iv, %2193
  %2205 = add nsw i64 %2204, %2203
  %2206 = getelementptr inbounds i8, i8* %3, i64 %2205
  %2207 = bitcast i8* %2206 to <8 x i8>*
  %2208 = call <8 x i8> @llvm.masked.load.v8i8.p0v8i8(<8 x i8>* %2207, i32 1, <8 x i1> %2192, <8 x i8> undef), !tbaa !388
  %2209 = zext <8 x i8> %2208 to <8 x i16>
  %2210 = sub nsw <8 x i16> %2209, %2196
  %2211 = add nuw nsw i64 %indvars.iv, %2202
  %2212 = shl nsw i64 %2211, 4
  %2213 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 %2212
  %2214 = bitcast i16* %2213 to <8 x i16>*
  call void @llvm.masked.store.v8i16.p0v8i16(<8 x i16> %2210, <8 x i16>* %2214, i32 16, <8 x i1> %2192), !tbaa !391
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %.not891.us1489 = icmp eq i64 %indvars.iv.next, %2198
  br i1 %.not891.us1489, label %"end for filter_zeroed.s0.x97.loopexit.us", label %"for filter_zeroed.s0.x96.us1487"

"end for filter_zeroed.s0.x97.loopexit.us":       ; preds = %"for filter_zeroed.s0.x96.us1487", %"for filter_zeroed.s0.x96.us.us1492", %"for filter_zeroed.s0.x96.us.us.us"
  %indvars.iv.next1870 = add nuw nsw i64 %indvars.iv1869, 1
  %.not890.us = icmp eq i64 %indvars.iv.next1870, %2201
  br i1 %.not890.us, label %"produce sum_filter107", label %"for filter_zeroed.s0.y93.us"

"for filter_zeroed.s0.x96.preheader.split.us.us": ; preds = %"for filter_zeroed.s0.y93.us"
  br i1 %t2399, label %"for filter_zeroed.s0.x96.us.us.us", label %"for filter_zeroed.s0.x96.us.us1492"

"for filter_zeroed.s0.x96.us.us1492":             ; preds = %"for filter_zeroed.s0.x96.preheader.split.us.us", %"for filter_zeroed.s0.x96.us.us1492"
  %indvars.iv1865 = phi i64 [ %indvars.iv.next1866, %"for filter_zeroed.s0.x96.us.us1492" ], [ 0, %"for filter_zeroed.s0.x96.preheader.split.us.us" ]
  %2215 = mul nsw i64 %indvars.iv1865, %2193
  %2216 = add nsw i64 %2215, %2203
  %2217 = getelementptr inbounds i8, i8* %3, i64 %2216
  %2218 = bitcast i8* %2217 to <8 x i8>*
  %2219 = load <8 x i8>, <8 x i8>* %2218, align 1, !tbaa !388
  %2220 = zext <8 x i8> %2219 to <8 x i16>
  %2221 = sub nsw <8 x i16> %2220, %2196
  %2222 = add nuw nsw i64 %indvars.iv1865, %2202
  %2223 = shl nsw i64 %2222, 4
  %2224 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 %2223
  %2225 = bitcast i16* %2224 to <8 x i16>*
  store <8 x i16> %2221, <8 x i16>* %2225, align 16, !tbaa !391
  %indvars.iv.next1866 = add nuw nsw i64 %indvars.iv1865, 1
  %.not891.us.us1494 = icmp eq i64 %indvars.iv.next1866, %2198
  br i1 %.not891.us.us1494, label %"end for filter_zeroed.s0.x97.loopexit.us", label %"for filter_zeroed.s0.x96.us.us1492"

"for filter_zeroed.s0.x96.us.us.us":              ; preds = %"for filter_zeroed.s0.x96.preheader.split.us.us", %"for filter_zeroed.s0.x96.us.us.us"
  %indvars.iv1867 = phi i64 [ %indvars.iv.next1868, %"for filter_zeroed.s0.x96.us.us.us" ], [ 0, %"for filter_zeroed.s0.x96.preheader.split.us.us" ]
  %2226 = mul nsw i64 %indvars.iv1867, %2193
  %2227 = add nsw i64 %2226, %2203
  %2228 = getelementptr inbounds i8, i8* %3, i64 %2227
  %2229 = bitcast i8* %2228 to <8 x i8>*
  %2230 = load <8 x i8>, <8 x i8>* %2229, align 1, !tbaa !388
  %2231 = zext <8 x i8> %2230 to <8 x i16>
  %2232 = sub nsw <8 x i16> %2231, %2196
  %2233 = add nuw nsw i64 %indvars.iv1867, %2202
  %2234 = shl nsw i64 %2233, 4
  %2235 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 %2234
  %2236 = bitcast i16* %2235 to <8 x i16>*
  store <8 x i16> %2232, <8 x i16>* %2236, align 16, !tbaa !391
  %2237 = getelementptr inbounds i8, i8* %2228, i64 8
  %2238 = bitcast i8* %2237 to <8 x i8>*
  %2239 = call <8 x i8> @llvm.masked.load.v8i8.p0v8i8(<8 x i8>* nonnull %2238, i32 1, <8 x i1> %2197, <8 x i8> undef), !tbaa !388
  %2240 = zext <8 x i8> %2239 to <8 x i16>
  %2241 = sub nsw <8 x i16> %2240, %2196
  %2242 = getelementptr inbounds i16, i16* %2235, i64 8
  %2243 = bitcast i16* %2242 to <8 x i16>*
  call void @llvm.masked.store.v8i16.p0v8i16(<8 x i16> %2241, <8 x i16>* nonnull %2243, i32 16, <8 x i1> %2197), !tbaa !391
  %indvars.iv.next1868 = add nuw nsw i64 %indvars.iv1867, 1
  %.not891.us.us.us = icmp eq i64 %indvars.iv.next1868, %2198
  br i1 %.not891.us.us.us, label %"end for filter_zeroed.s0.x97.loopexit.us", label %"for filter_zeroed.s0.x96.us.us.us"

"produce sum_filter107":                          ; preds = %"end for filter_zeroed.s0.x97.loopexit.us", %"for filter_zeroed.s0.y93.preheader", %"produce filter_zeroed92"
  %2244 = insertelement <16 x i32> undef, i32 %5, i32 0
  %2245 = shufflevector <16 x i32> %2244, <16 x i32> undef, <16 x i32> zeroinitializer
  %2246 = icmp sgt <16 x i32> %2245, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2247 = bitcast [16 x i32]* %sum_filter792 to <4 x i32>*
  %2248 = shufflevector <16 x i1> %2246, <16 x i1> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> zeroinitializer, <4 x i32>* nonnull %2247, i32 16, <4 x i1> %2248), !tbaa !395
  %2249 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter792, i64 0, i64 4
  %2250 = bitcast i32* %2249 to <4 x i32>*
  %2251 = shufflevector <16 x i1> %2246, <16 x i1> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> zeroinitializer, <4 x i32>* nonnull %2250, i32 16, <4 x i1> %2251), !tbaa !406
  %2252 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter792, i64 0, i64 8
  %2253 = bitcast i32* %2252 to <4 x i32>*
  %2254 = shufflevector <16 x i1> %2246, <16 x i1> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> zeroinitializer, <4 x i32>* nonnull %2253, i32 16, <4 x i1> %2254), !tbaa !408
  %2255 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter792, i64 0, i64 12
  %2256 = bitcast i32* %2255 to <4 x i32>*
  %2257 = shufflevector <16 x i1> %2246, <16 x i1> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> zeroinitializer, <4 x i32>* nonnull %2256, i32 16, <4 x i1> %2257), !tbaa !411
  br i1 %2180, label %"for sum_filter.s1.r19$y108.preheader", label %"consume sum_filter114", !prof !387

"for sum_filter.s1.r19$y108.preheader":           ; preds = %"produce sum_filter107"
  %2258 = shufflevector <16 x i1> %2246, <16 x i1> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2259 = shufflevector <16 x i1> %2246, <16 x i1> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br i1 %2178, label %"for sum_filter.s1.r19$y108.us.preheader", label %"consume sum_filter114", !prof !387

"for sum_filter.s1.r19$y108.us.preheader":        ; preds = %"for sum_filter.s1.r19$y108.preheader"
  %2260 = zext i32 %6 to i64
  %2261 = zext i32 %6 to i64
  %2262 = zext i32 %8 to i64
  br label %"for sum_filter.s1.r19$y108.us"

"for sum_filter.s1.r19$y108.us":                  ; preds = %"for sum_filter.s1.r19$y108.us.preheader", %"end for sum_filter.s1.r19$x112.loopexit.us"
  %indvars.iv1875 = phi i64 [ 0, %"for sum_filter.s1.r19$y108.us.preheader" ], [ %indvars.iv.next1876, %"end for sum_filter.s1.r19$x112.loopexit.us" ]
  %2263 = mul nsw i64 %indvars.iv1875, %2261
  br label %"for sum_filter.s1.r19$x111.us"

"for sum_filter.s1.r19$x111.us":                  ; preds = %"for sum_filter.s1.r19$y108.us", %"for sum_filter.s1.r19$x111.us"
  %indvars.iv1873 = phi i64 [ 0, %"for sum_filter.s1.r19$y108.us" ], [ %indvars.iv.next1874, %"for sum_filter.s1.r19$x111.us" ]
  %unmaskedload885.us = load <4 x i32>, <4 x i32>* %2247, align 16
  %2264 = select <4 x i1> %2248, <4 x i32> %unmaskedload885.us, <4 x i32> undef
  %unmaskedload886.us = load <4 x i32>, <4 x i32>* %2250, align 16
  %2265 = select <4 x i1> %2251, <4 x i32> %unmaskedload886.us, <4 x i32> undef
  %unmaskedload887.us = load <4 x i32>, <4 x i32>* %2253, align 16
  %2266 = select <4 x i1> %2254, <4 x i32> %unmaskedload887.us, <4 x i32> undef
  %unmaskedload888.us = load <4 x i32>, <4 x i32>* %2256, align 16
  %2267 = select <4 x i1> %2257, <4 x i32> %unmaskedload888.us, <4 x i32> undef
  %2268 = shufflevector <4 x i32> %2264, <4 x i32> %2265, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2269 = shufflevector <4 x i32> %2266, <4 x i32> %2267, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2270 = shufflevector <8 x i32> %2268, <8 x i32> %2269, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2271 = add nuw nsw i64 %indvars.iv1873, %2263
  %2272 = shl nsw i64 %2271, 4
  %2273 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 %2272
  %2274 = bitcast i16* %2273 to <8 x i16>*
  %2275 = call <8 x i16> @llvm.masked.load.v8i16.p0v8i16(<8 x i16>* %2274, i32 16, <8 x i1> %2258, <8 x i16> undef), !tbaa !391
  %2276 = getelementptr inbounds i16, i16* %2273, i64 8
  %2277 = bitcast i16* %2276 to <8 x i16>*
  %2278 = call <8 x i16> @llvm.masked.load.v8i16.p0v8i16(<8 x i16>* nonnull %2277, i32 16, <8 x i1> %2259, <8 x i16> undef), !tbaa !391
  %2279 = shufflevector <8 x i16> %2275, <8 x i16> %2278, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2280 = sext <16 x i16> %2279 to <16 x i32>
  %2281 = add nsw <16 x i32> %2270, %2280
  %2282 = shufflevector <16 x i32> %2281, <16 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> %2282, <4 x i32>* nonnull %2247, i32 16, <4 x i1> %2248), !tbaa !395
  %2283 = shufflevector <16 x i32> %2281, <16 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> %2283, <4 x i32>* nonnull %2250, i32 16, <4 x i1> %2251), !tbaa !406
  %2284 = shufflevector <16 x i32> %2281, <16 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> %2284, <4 x i32>* nonnull %2253, i32 16, <4 x i1> %2254), !tbaa !408
  %2285 = shufflevector <16 x i32> %2281, <16 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> %2285, <4 x i32>* nonnull %2256, i32 16, <4 x i1> %2257), !tbaa !411
  %indvars.iv.next1874 = add nuw nsw i64 %indvars.iv1873, 1
  %.not889.us = icmp eq i64 %indvars.iv.next1874, %2260
  br i1 %.not889.us, label %"end for sum_filter.s1.r19$x112.loopexit.us", label %"for sum_filter.s1.r19$x111.us"

"end for sum_filter.s1.r19$x112.loopexit.us":     ; preds = %"for sum_filter.s1.r19$x111.us"
  %indvars.iv.next1876 = add nuw nsw i64 %indvars.iv1875, 1
  %.not884.us = icmp eq i64 %indvars.iv.next1876, %2262
  br i1 %.not884.us, label %"consume sum_filter114", label %"for sum_filter.s1.r19$y108.us"

"consume sum_filter114":                          ; preds = %"end for sum_filter.s1.r19$x112.loopexit.us", %"for sum_filter.s1.r19$y108.preheader", %"produce sum_filter107"
  %2286 = bitcast i8* %2 to <4 x i32>*
  %2287 = call <4 x i32> @llvm.masked.load.v4i32.p0v4i32(<4 x i32>* %2286, i32 4, <4 x i1> %2248, <4 x i32> undef), !tbaa !495
  %2288 = getelementptr inbounds i8, i8* %2, i64 16
  %2289 = bitcast i8* %2288 to <4 x i32>*
  %2290 = call <4 x i32> @llvm.masked.load.v4i32.p0v4i32(<4 x i32>* nonnull %2289, i32 4, <4 x i1> %2251, <4 x i32> undef), !tbaa !505
  %2291 = getelementptr inbounds i8, i8* %2, i64 32
  %2292 = bitcast i8* %2291 to <4 x i32>*
  %2293 = call <4 x i32> @llvm.masked.load.v4i32.p0v4i32(<4 x i32>* nonnull %2292, i32 4, <4 x i1> %2254, <4 x i32> undef), !tbaa !507
  %2294 = getelementptr inbounds i8, i8* %2, i64 48
  %2295 = bitcast i8* %2294 to <4 x i32>*
  %2296 = call <4 x i32> @llvm.masked.load.v4i32.p0v4i32(<4 x i32>* nonnull %2295, i32 4, <4 x i1> %2257, <4 x i32> undef), !tbaa !510
  %2297 = shufflevector <4 x i32> %2287, <4 x i32> %2290, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2298 = shufflevector <4 x i32> %2293, <4 x i32> %2296, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2299 = shufflevector <8 x i32> %2297, <8 x i32> %2298, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %unmaskedload862 = load <4 x i32>, <4 x i32>* %2247, align 16
  %2300 = select <4 x i1> %2248, <4 x i32> %unmaskedload862, <4 x i32> undef
  %unmaskedload863 = load <4 x i32>, <4 x i32>* %2250, align 16
  %2301 = select <4 x i1> %2251, <4 x i32> %unmaskedload863, <4 x i32> undef
  %unmaskedload864 = load <4 x i32>, <4 x i32>* %2253, align 16
  %2302 = select <4 x i1> %2254, <4 x i32> %unmaskedload864, <4 x i32> undef
  %unmaskedload865 = load <4 x i32>, <4 x i32>* %2256, align 16
  %2303 = select <4 x i1> %2257, <4 x i32> %unmaskedload865, <4 x i32> undef
  %2304 = shufflevector <4 x i32> %2300, <4 x i32> %2301, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2305 = shufflevector <4 x i32> %2302, <4 x i32> %2303, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2306 = shufflevector <8 x i32> %2304, <8 x i32> %2305, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2307 = zext i8 %input_zero to i32
  %2308 = insertelement <16 x i32> undef, i32 %2307, i32 0
  %2309 = shufflevector <16 x i32> %2308, <16 x i32> undef, <16 x i32> zeroinitializer
  %2310 = mul nsw <16 x i32> %2306, %2309
  %2311 = sub nsw <16 x i32> %2299, %2310
  %2312 = shufflevector <16 x i32> %2311, <16 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2313 = bitcast [64 x i32]* %offset_c559790 to <4 x i32>*
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> %2312, <4 x i32>* nonnull %2313, i32 16, <4 x i1> %2248), !tbaa !419
  %2314 = shufflevector <16 x i32> %2311, <16 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2315 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 4
  %2316 = bitcast i32* %2315 to <4 x i32>*
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> %2314, <4 x i32>* nonnull %2316, i32 16, <4 x i1> %2251), !tbaa !430
  %2317 = shufflevector <16 x i32> %2311, <16 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2318 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 8
  %2319 = bitcast i32* %2318 to <4 x i32>*
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> %2317, <4 x i32>* nonnull %2319, i32 16, <4 x i1> %2254), !tbaa !432
  %2320 = shufflevector <16 x i32> %2311, <16 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2321 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 12
  %2322 = bitcast i32* %2321 to <4 x i32>*
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> %2320, <4 x i32>* nonnull %2322, i32 16, <4 x i1> %2257), !tbaa !435
  %t2427 = icmp slt i32 %a121, 0
  %2323 = add nsw i32 %6, -1
  %t2428 = mul nsw i32 %2323, %a121
  %t2429 = icmp slt i32 %stride_x, 0
  %t2430 = select i1 %t2427, i32 %t2428, i32 0
  %2324 = select i1 %t2429, i32 %22, i32 1
  %2325 = add i32 %21, -1
  %2326 = add i32 %2325, %2324
  %t2431 = mul nsw i32 %2326, %stride_x
  %t2432 = icmp slt i32 %a120, 0
  %2327 = add nsw i32 %8, -1
  %t2433 = mul nsw i32 %2327, %a120
  %t2434 = icmp slt i32 %stride_y, 0
  %t2435 = select i1 %t2432, i32 %t2433, i32 0
  %2328 = select i1 %t2434, i32 %25, i32 1
  %2329 = add i32 %24, -1
  %2330 = add i32 %2329, %2328
  %t2436 = mul nsw i32 %2330, %stride_y
  %a121.op866 = shl i32 %a121, 1
  %t2438 = select i1 %t2427, i32 %a121.op866, i32 0
  %a120.op867 = shl i32 %a120, 1
  %t2439 = select i1 %t2432, i32 %a120.op867, i32 0
  %t2420 = icmp eq i32 %depth_multiplier, 1
  %2331 = select i1 %2177, i32 %t2439, i32 %t2435
  %2332 = select i1 %2177, i32 %t2438, i32 %t2430
  %b60 = add nsw i32 %t2436, %t2435
  %2333 = select i1 %t2432, i32 0, i32 %t2433
  %2334 = add nsw i32 %25, -1
  %2335 = select i1 %t2434, i32 0, i32 %2334
  %2336 = add nsw i32 %2335, %24
  %2337 = mul nsw i32 %2336, %stride_y
  %b59 = add nsw i32 %2337, %2333
  %b63 = add nsw i32 %t2431, %t2430
  %2338 = select i1 %t2427, i32 0, i32 %t2428
  %2339 = add nsw i32 %22, -1
  %2340 = select i1 %t2429, i32 0, i32 %2339
  %2341 = add nsw i32 %2340, %21
  %2342 = mul nsw i32 %2341, %stride_x
  %b62 = add nsw i32 %2342, %2338
  %2343 = mul nsw i32 %15, %14
  %2344 = mul nsw i32 %18, %16
  %2345 = mul nsw i32 %13, %12
  %2346 = add i32 %2343, %2345
  %t2421 = add i32 %2346, %2344
  %2347 = icmp sgt i32 %17, 0
  br i1 %2347, label %"for output.s0.b.rebased117.preheader", label %after_bb, !prof !387

"for output.s0.b.rebased117.preheader":           ; preds = %"consume sum_filter114"
  %b61 = add nsw i32 %t2431, %2332
  %b58 = add nsw i32 %t2436, %2331
  %2348 = icmp sgt i32 %a121, 0
  %2349 = select i1 %2348, i32 %a121, i32 0
  %t2418 = shl nuw nsw i32 %2349, 1
  %2350 = icmp sgt i32 %a120, 0
  %2351 = select i1 %2350, i32 %a120, i32 0
  %t2412 = shl nuw nsw i32 %2351, 1
  %2352 = icmp slt i32 %t2435, %2331
  %resampled_input.y.min_realized = select i1 %2352, i32 %b60, i32 %b58
  %2353 = select i1 %2177, i32 %t2412, i32 %2333
  %a57 = add nsw i32 %2337, %2353
  %2354 = icmp sgt i32 %2353, %2333
  %2355 = select i1 %2354, i32 %a57, i32 %b59
  %2356 = sub nsw i32 %2355, %resampled_input.y.min_realized
  %a65 = add nsw i32 %2356, 1
  %2357 = icmp slt i32 %t2430, %2332
  %resampled_input.x.min_realized = select i1 %2357, i32 %b63, i32 %b61
  %2358 = select i1 %2177, i32 %t2418, i32 %2338
  %a60 = add nsw i32 %2342, %2358
  %2359 = icmp sgt i32 %2358, %2338
  %2360 = select i1 %2359, i32 %a60, i32 %b62
  %2361 = sub nsw i32 %2360, %resampled_input.x.min_realized
  %a64 = add nsw i32 %2361, 1
  %.inv868 = icmp slt i32 %2361, 0
  %2362 = select i1 %.inv868, i32 0, i32 %a64
  %t2504 = zext i32 %2362 to i64
  %.inv869 = icmp slt i32 %2356, 0
  %2363 = select i1 %.inv869, i32 0, i32 %a65
  %t2505 = zext i32 %2363 to i64
  %t2506 = shl nuw nsw i64 %t2504, 4
  %2364 = mul i64 %t2506, %t2505
  %2365 = or i64 %2364, 3
  %2366 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %t2450 = sub i32 %b63, %resampled_input.x.min_realized
  %t2448 = sub nsw i32 %b62, %b63
  %t2451 = sub i32 %b60, %resampled_input.y.min_realized
  %t2447 = sub nsw i32 %b59, %b60
  %2367 = sext i32 %b63 to i64
  %2368 = sext i32 %13 to i64
  %2369 = icmp sgt i32 %5, 1
  %2370 = icmp eq i32 %depth_multiplier, 0
  %t2508 = sext i1 %2370 to i32
  %2371 = sub nsw i32 %depth_multiplier, %t2508
  %2372 = add i32 %2371, 1
  %2373 = icmp ult i32 %2372, 3
  %2374 = select i1 %2373, i32 %2371, i32 0
  %2375 = xor i32 %t2508, -1
  %2376 = and i32 %2374, %2375
  %2377 = sext i32 %2376 to i64
  %.not1411 = icmp eq i32 %5, 2
  %2378 = icmp sgt i32 %5, 3
  %.not1412 = icmp eq i32 %5, 4
  %2379 = icmp sgt i32 %5, 5
  %.not1413 = icmp eq i32 %5, 6
  %.not1408 = icmp eq i32 %5, 9
  %2380 = icmp sgt i32 %5, 10
  %.not1409 = icmp eq i32 %5, 11
  %2381 = icmp sgt i32 %5, 12
  %.not1410 = icmp eq i32 %5, 13
  %2382 = icmp sgt i32 %5, 14
  %.neg = mul i32 %26, %24
  %.neg1414 = mul i32 %23, %21
  %.neg1415 = mul i32 %27, %16
  %t2459 = sub i32 %a120.op867, %resampled_input.y.min_realized
  %t2455 = sub nsw i32 %a121.op866, %resampled_input.x.min_realized
  %2383 = icmp sgt i32 %25, 0
  %t2477 = sub nsw i32 %a121, %resampled_input.x.min_realized
  %2384 = sub i32 %a120, %resampled_input.y.min_realized
  %reass.add = add i32 %.neg, %.neg1414
  %reass.add1417 = add i32 %reass.add, %.neg1415
  %2385 = icmp sgt i32 %22, 0
  %2386 = sext i32 %a121 to i64
  %2387 = bitcast i16* %filter_zeroed91 to <8 x i16>*
  %2388 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 8
  %2389 = bitcast i16* %2388 to <8 x i16>*
  %2390 = sext i32 %21 to i64
  %2391 = sext i32 %stride_x to i64
  %2392 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 16
  %2393 = bitcast i16* %2392 to <8 x i16>*
  %2394 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 24
  %2395 = bitcast i16* %2394 to <8 x i16>*
  %2396 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 32
  %2397 = bitcast i16* %2396 to <8 x i16>*
  %2398 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 40
  %2399 = bitcast i16* %2398 to <8 x i16>*
  %2400 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 48
  %2401 = bitcast i16* %2400 to <8 x i16>*
  %2402 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 56
  %2403 = bitcast i16* %2402 to <8 x i16>*
  %2404 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 64
  %2405 = bitcast i16* %2404 to <8 x i16>*
  %2406 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 72
  %2407 = bitcast i16* %2406 to <8 x i16>*
  %2408 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 80
  %2409 = bitcast i16* %2408 to <8 x i16>*
  %2410 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 88
  %2411 = bitcast i16* %2410 to <8 x i16>*
  %2412 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 96
  %2413 = bitcast i16* %2412 to <8 x i16>*
  %2414 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 104
  %2415 = bitcast i16* %2414 to <8 x i16>*
  %2416 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 112
  %2417 = bitcast i16* %2416 to <8 x i16>*
  %2418 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 120
  %2419 = bitcast i16* %2418 to <8 x i16>*
  %2420 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 128
  %2421 = bitcast i16* %2420 to <8 x i16>*
  %2422 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 136
  %2423 = bitcast i16* %2422 to <8 x i16>*
  %2424 = insertelement <16 x i32> undef, i32 %output_multiplier, i32 0
  %2425 = shufflevector <16 x i32> %2424, <16 x i32> undef, <4 x i32> zeroinitializer
  %2426 = sub nsw i32 0, %output_shift
  %2427 = insertelement <16 x i32> undef, i32 %2426, i32 0
  %2428 = shufflevector <16 x i32> %2427, <16 x i32> undef, <4 x i32> zeroinitializer
  %2429 = zext i8 %output_zero to i16
  %2430 = insertelement <16 x i16> undef, i16 %2429, i32 0
  %2431 = shufflevector <16 x i16> %2430, <16 x i16> undef, <8 x i32> zeroinitializer
  %2432 = insertelement <16 x i8> undef, i8 %output_max, i32 0
  %2433 = shufflevector <16 x i8> %2432, <16 x i8> undef, <16 x i32> zeroinitializer
  %2434 = insertelement <16 x i8> undef, i8 %output_min, i32 0
  %2435 = shufflevector <16 x i8> %2434, <16 x i8> undef, <16 x i32> zeroinitializer
  %2436 = sext i32 %23 to i64
  %2437 = zext i32 %t2448 to i64
  %2438 = sext i32 %t2451 to i64
  %2439 = sext i32 %a64 to i64
  %2440 = sext i32 %t2450 to i64
  %2441 = sext i32 %b60 to i64
  %2442 = sext i32 %15 to i64
  %2443 = zext i32 %t2447 to i64
  %2444 = zext i32 %6 to i64
  %2445 = sext i32 %6 to i64
  %2446 = zext i32 %8 to i64
  %2447 = zext i32 %22 to i64
  %2448 = sext i32 %24 to i64
  %2449 = sext i32 %stride_y to i64
  %2450 = sext i32 %t2459 to i64
  %2451 = sext i32 %resampled_input.x.min_realized to i64
  %2452 = sext i32 %2384 to i64
  %2453 = sext i32 %resampled_input.y.min_realized to i64
  %2454 = zext i32 %25 to i64
  %2455 = zext i32 %16 to i64
  %zext = zext i32 %17 to i64
  %2456 = or i32 %t2447, %t2448
  %2457 = icmp slt i32 %2456, 0
  %.not2294 = icmp sgt i32 %2456, -1
  br label %"for output.s0.b.rebased117"

"for output.s0.b.rebased117":                     ; preds = %"for output.s0.b.rebased117.preheader", %"end for output.s0.y.yo187"
  %indvars.iv1914 = phi i64 [ 0, %"for output.s0.b.rebased117.preheader" ], [ %indvars.iv.next1915, %"end for output.s0.y.yo187" ]
  %2458 = load i64, i64* %.fca.1.gep721, align 8, !tbaa !381
  %cmp.i1140 = icmp ult i64 %2458, %2365
  %2459 = load i8*, i8** %.fca.0.gep720, align 8, !tbaa !383
  br i1 %cmp.i1140, label %if.then.i1143, label %pseudostack_alloc.exit1156, !prof !384

if.then.i1143:                                    ; preds = %"for output.s0.b.rebased117"
  %tobool1.not.i1142 = icmp ne i8* %2459, null
  %2460 = load i64, i64* %.fca.2.gep722, align 8
  %cmp2.i1145 = icmp ugt i64 %2460, 16384
  %or.cond1395 = and i1 %tobool1.not.i1142, %cmp2.i1145
  br i1 %or.cond1395, label %if.then3.i1147, label %if.end.i1151

if.then3.i1147:                                   ; preds = %if.then.i1143
  call void @halide_free(i8* null, i8* nonnull %2459) #14
  %.pre = load i64, i64* %.fca.2.gep722, align 8, !tbaa !385
  br label %if.end.i1151

if.end.i1151:                                     ; preds = %if.then3.i1147, %if.then.i1143
  %2461 = phi i64 [ %.pre, %if.then3.i1147 ], [ %2460, %if.then.i1143 ]
  %add.i1149 = add i64 %2461, %2365
  store i64 %add.i1149, i64* %.fca.2.gep722, align 8, !tbaa !385
  %cmp7.i1150 = icmp ugt i64 %add.i1149, 16384
  br i1 %cmp7.i1150, label %if.then8.i1153, label %if.end11.i1155

if.then8.i1153:                                   ; preds = %if.end.i1151
  %call.i1152 = call i8* @halide_malloc(i8* null, i64 %2365) #14
  br label %if.end11.i1155

if.end11.i1155:                                   ; preds = %if.then8.i1153, %if.end.i1151
  %storemerge.i1154 = phi i8* [ %call.i1152, %if.then8.i1153 ], [ null, %if.end.i1151 ]
  store i8* %storemerge.i1154, i8** %.fca.0.gep720, align 8, !tbaa !383
  store i64 %2365, i64* %.fca.1.gep721, align 8, !tbaa !381
  br label %pseudostack_alloc.exit1156

pseudostack_alloc.exit1156:                       ; preds = %"for output.s0.b.rebased117", %if.end11.i1155
  %2462 = phi i8* [ %storemerge.i1154, %if.end11.i1155 ], [ %2459, %"for output.s0.b.rebased117" ]
  %.not870 = icmp eq i8* %2462, null
  br i1 %.not870, label %then_bb121, label %"produce resampled_input123", !prof !386

then_bb121:                                       ; preds = %pseudostack_alloc.exit1156
  %2463 = alloca i8*, i64 %2365, align 16
  %2464 = bitcast i8** %2463 to i8*
  store i8** %2463, i8*** %2366, align 8
  br label %"produce resampled_input123"

"produce resampled_input123":                     ; preds = %pseudostack_alloc.exit1156, %then_bb121
  %resampled_input122 = phi i8* [ %2464, %then_bb121 ], [ %2462, %pseudostack_alloc.exit1156 ]
  %2465 = add nuw i64 %indvars.iv1914, %2455
  br i1 %t2420, label %then_bb125, label %next_bb126

then_bb125:                                       ; preds = %"produce resampled_input123"
  br i1 %.not2294, label %"for resampled_input.s0.y.rebased127.us.preheader", label %"consume resampled_input185", !prof !413

"for resampled_input.s0.y.rebased127.us.preheader": ; preds = %then_bb125
  %2466 = trunc i64 %2465 to i32
  %2467 = mul i32 %18, %2466
  %t2442 = sub i32 %2467, %t2421
  %2468 = sext i32 %t2442 to i64
  br label %"for resampled_input.s0.y.rebased127.us"

"for resampled_input.s0.y.rebased127.us":         ; preds = %"for resampled_input.s0.y.rebased127.us.preheader", %"end for resampled_input.s0.x.rebased131.loopexit.us"
  %indvars.iv1886 = phi i64 [ 0, %"for resampled_input.s0.y.rebased127.us.preheader" ], [ %indvars.iv.next1887, %"end for resampled_input.s0.x.rebased131.loopexit.us" ]
  %2469 = add nsw i64 %indvars.iv1886, %2438
  %2470 = mul nsw i64 %2469, %2439
  %2471 = add nsw i64 %2470, %2440
  %2472 = add nsw i64 %indvars.iv1886, %2441
  %2473 = mul nsw i64 %2472, %2442
  %2474 = add nsw i64 %2473, %2468
  br label %"for resampled_input.s0.x.rebased130.us"

"for resampled_input.s0.x.rebased130.us":         ; preds = %"for resampled_input.s0.y.rebased127.us", %"for resampled_input.s0.x.rebased130.us"
  %indvars.iv1884 = phi i64 [ 0, %"for resampled_input.s0.y.rebased127.us" ], [ %indvars.iv.next1885, %"for resampled_input.s0.x.rebased130.us" ]
  %2475 = add nsw i64 %indvars.iv1884, %2367
  %2476 = mul nsw i64 %2475, %2368
  %2477 = add nsw i64 %2476, %2474
  %2478 = getelementptr inbounds i8, i8* %10, i64 %2477
  %2479 = bitcast i8* %2478 to <16 x i8>*
  %2480 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %2479, i32 1, <16 x i1> %2246, <16 x i8> undef), !tbaa !414
  %2481 = add nsw i64 %indvars.iv1884, %2471
  %2482 = shl nsw i64 %2481, 4
  %2483 = getelementptr inbounds i8, i8* %resampled_input122, i64 %2482
  %2484 = bitcast i8* %2483 to <16 x i8>*
  call void @llvm.masked.store.v16i8.p0v16i8(<16 x i8> %2480, <16 x i8>* %2484, i32 16, <16 x i1> %2246), !tbaa !416
  %indvars.iv.next1885 = add nuw nsw i64 %indvars.iv1884, 1
  %.not883.us = icmp eq i64 %indvars.iv1884, %2437
  br i1 %.not883.us, label %"end for resampled_input.s0.x.rebased131.loopexit.us", label %"for resampled_input.s0.x.rebased130.us"

"end for resampled_input.s0.x.rebased131.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased130.us"
  %indvars.iv.next1887 = add nuw nsw i64 %indvars.iv1886, 1
  %.not882.us = icmp eq i64 %indvars.iv1886, %2443
  br i1 %.not882.us, label %"consume resampled_input185", label %"for resampled_input.s0.y.rebased127.us"

next_bb126:                                       ; preds = %"produce resampled_input123"
  br i1 %2457, label %"consume resampled_input185", label %"for resampled_input.s0.y.rebased133.us.preheader", !prof !418

"for resampled_input.s0.y.rebased133.us.preheader": ; preds = %next_bb126
  %2485 = trunc i64 %2465 to i32
  %2486 = mul i32 %18, %2485
  %t2449 = sub i32 %2486, %t2421
  %2487 = sext i32 %t2449 to i64
  br label %"for resampled_input.s0.y.rebased133.us"

"for resampled_input.s0.y.rebased133.us":         ; preds = %"for resampled_input.s0.y.rebased133.us.preheader", %"end for resampled_input.s0.x.rebased137.loopexit.us"
  %indvars.iv1880 = phi i64 [ 0, %"for resampled_input.s0.y.rebased133.us.preheader" ], [ %indvars.iv.next1881, %"end for resampled_input.s0.x.rebased137.loopexit.us" ]
  %2488 = add nsw i64 %indvars.iv1880, %2438
  %2489 = mul nsw i64 %2488, %2439
  %2490 = add nsw i64 %2489, %2440
  %2491 = add nsw i64 %indvars.iv1880, %2441
  %2492 = mul nsw i64 %2491, %2442
  %2493 = add nsw i64 %2492, %2487
  br label %"for resampled_input.s0.x.rebased136.us"

"for resampled_input.s0.x.rebased136.us":         ; preds = %"for resampled_input.s0.y.rebased133.us", %after_bb184.us
  %indvars.iv1878 = phi i64 [ 0, %"for resampled_input.s0.y.rebased133.us" ], [ %indvars.iv.next1879, %after_bb184.us ]
  %2494 = add nsw i64 %indvars.iv1878, %2367
  %2495 = mul nsw i64 %2494, %2368
  %2496 = add nsw i64 %2495, %2493
  %2497 = getelementptr inbounds i8, i8* %10, i64 %2496
  %2498 = load i8, i8* %2497, align 1, !tbaa !414
  br i1 %2369, label %after_bb142.us, label %after_bb157.us

after_bb142.us:                                   ; preds = %"for resampled_input.s0.x.rebased136.us"
  %2499 = add nsw i64 %2496, %2377
  %2500 = getelementptr inbounds i8, i8* %10, i64 %2499
  %2501 = load i8, i8* %2500, align 1, !tbaa !414
  br i1 %.not1411, label %after_bb157.us, label %after_bb145.us

after_bb145.us:                                   ; preds = %after_bb142.us
  %2502 = sdiv i32 2, %2371
  %2503 = and i32 %2502, %2375
  %2504 = sext i32 %2503 to i64
  %2505 = add nsw i64 %2496, %2504
  %2506 = getelementptr inbounds i8, i8* %10, i64 %2505
  %2507 = load i8, i8* %2506, align 1, !tbaa !414
  br i1 %2378, label %after_bb148.us, label %after_bb157.us

after_bb148.us:                                   ; preds = %after_bb145.us
  %2508 = sdiv i32 3, %2371
  %2509 = and i32 %2508, %2375
  %2510 = sext i32 %2509 to i64
  %2511 = add nsw i64 %2496, %2510
  %2512 = getelementptr inbounds i8, i8* %10, i64 %2511
  %2513 = load i8, i8* %2512, align 1, !tbaa !414
  br i1 %.not1412, label %after_bb157.us, label %after_bb151.us

after_bb151.us:                                   ; preds = %after_bb148.us
  %2514 = sdiv i32 4, %2371
  %2515 = and i32 %2514, %2375
  %2516 = sext i32 %2515 to i64
  %2517 = add nsw i64 %2496, %2516
  %2518 = getelementptr inbounds i8, i8* %10, i64 %2517
  %2519 = load i8, i8* %2518, align 1, !tbaa !414
  br i1 %2379, label %after_bb154.us, label %after_bb157.us

after_bb154.us:                                   ; preds = %after_bb151.us
  %2520 = sdiv i32 5, %2371
  %2521 = and i32 %2520, %2375
  %2522 = sext i32 %2521 to i64
  %2523 = add nsw i64 %2496, %2522
  %2524 = getelementptr inbounds i8, i8* %10, i64 %2523
  %2525 = load i8, i8* %2524, align 1, !tbaa !414
  br i1 %.not1413, label %after_bb157.us, label %true_bb155.us

true_bb155.us:                                    ; preds = %after_bb154.us
  %2526 = sdiv i32 6, %2371
  %2527 = and i32 %2526, %2375
  %2528 = sext i32 %2527 to i64
  %2529 = add nsw i64 %2496, %2528
  %2530 = getelementptr inbounds i8, i8* %10, i64 %2529
  %2531 = load i8, i8* %2530, align 1, !tbaa !414
  br label %after_bb157.us

after_bb157.us:                                   ; preds = %true_bb155.us, %after_bb154.us, %after_bb151.us, %after_bb148.us, %after_bb145.us, %after_bb142.us, %"for resampled_input.s0.x.rebased136.us"
  %2532 = phi i8 [ %2525, %true_bb155.us ], [ %2525, %after_bb154.us ], [ 0, %after_bb151.us ], [ 0, %after_bb148.us ], [ 0, %after_bb145.us ], [ 0, %after_bb142.us ], [ 0, %"for resampled_input.s0.x.rebased136.us" ]
  %2533 = phi i8 [ %2513, %true_bb155.us ], [ %2513, %after_bb154.us ], [ %2513, %after_bb151.us ], [ %2513, %after_bb148.us ], [ 0, %after_bb145.us ], [ 0, %after_bb142.us ], [ 0, %"for resampled_input.s0.x.rebased136.us" ]
  %2534 = phi i8 [ %2501, %true_bb155.us ], [ %2501, %after_bb154.us ], [ %2501, %after_bb151.us ], [ %2501, %after_bb148.us ], [ %2501, %after_bb145.us ], [ %2501, %after_bb142.us ], [ 0, %"for resampled_input.s0.x.rebased136.us" ]
  %2535 = phi i8 [ %2507, %true_bb155.us ], [ %2507, %after_bb154.us ], [ %2507, %after_bb151.us ], [ %2507, %after_bb148.us ], [ %2507, %after_bb145.us ], [ 0, %after_bb142.us ], [ 0, %"for resampled_input.s0.x.rebased136.us" ]
  %2536 = phi i8 [ %2519, %true_bb155.us ], [ %2519, %after_bb154.us ], [ %2519, %after_bb151.us ], [ 0, %after_bb148.us ], [ 0, %after_bb145.us ], [ 0, %after_bb142.us ], [ 0, %"for resampled_input.s0.x.rebased136.us" ]
  %2537 = phi i8 [ %2531, %true_bb155.us ], [ 0, %after_bb154.us ], [ 0, %after_bb151.us ], [ 0, %after_bb148.us ], [ 0, %after_bb145.us ], [ 0, %after_bb142.us ], [ 0, %"for resampled_input.s0.x.rebased136.us" ]
  br i1 %t2398, label %true_bb158.us, label %after_bb160.us

true_bb158.us:                                    ; preds = %after_bb157.us
  %2538 = sdiv i32 7, %2371
  %2539 = and i32 %2538, %2375
  %2540 = sext i32 %2539 to i64
  %2541 = add nsw i64 %2496, %2540
  %2542 = getelementptr inbounds i8, i8* %10, i64 %2541
  %2543 = load i8, i8* %2542, align 1, !tbaa !414
  br label %after_bb160.us

after_bb160.us:                                   ; preds = %true_bb158.us, %after_bb157.us
  %2544 = phi i8 [ %2543, %true_bb158.us ], [ 0, %after_bb157.us ]
  br i1 %t2399, label %after_bb163.us, label %after_bb184.us

after_bb163.us:                                   ; preds = %after_bb160.us
  %2545 = sdiv i32 8, %2371
  %2546 = and i32 %2545, %2375
  %2547 = sext i32 %2546 to i64
  %2548 = add nsw i64 %2496, %2547
  %2549 = getelementptr inbounds i8, i8* %10, i64 %2548
  %2550 = load i8, i8* %2549, align 1, !tbaa !414
  br i1 %.not1408, label %after_bb184.us, label %after_bb166.us

after_bb166.us:                                   ; preds = %after_bb163.us
  %2551 = sdiv i32 9, %2371
  %2552 = and i32 %2551, %2375
  %2553 = sext i32 %2552 to i64
  %2554 = add nsw i64 %2496, %2553
  %2555 = getelementptr inbounds i8, i8* %10, i64 %2554
  %2556 = load i8, i8* %2555, align 1, !tbaa !414
  br i1 %2380, label %after_bb169.us, label %after_bb184.us

after_bb169.us:                                   ; preds = %after_bb166.us
  %2557 = sdiv i32 10, %2371
  %2558 = and i32 %2557, %2375
  %2559 = sext i32 %2558 to i64
  %2560 = add nsw i64 %2496, %2559
  %2561 = getelementptr inbounds i8, i8* %10, i64 %2560
  %2562 = load i8, i8* %2561, align 1, !tbaa !414
  br i1 %.not1409, label %after_bb184.us, label %after_bb172.us

after_bb172.us:                                   ; preds = %after_bb169.us
  %2563 = sdiv i32 11, %2371
  %2564 = and i32 %2563, %2375
  %2565 = sext i32 %2564 to i64
  %2566 = add nsw i64 %2496, %2565
  %2567 = getelementptr inbounds i8, i8* %10, i64 %2566
  %2568 = load i8, i8* %2567, align 1, !tbaa !414
  br i1 %2381, label %after_bb175.us, label %after_bb184.us

after_bb175.us:                                   ; preds = %after_bb172.us
  %2569 = sdiv i32 12, %2371
  %2570 = and i32 %2569, %2375
  %2571 = sext i32 %2570 to i64
  %2572 = add nsw i64 %2496, %2571
  %2573 = getelementptr inbounds i8, i8* %10, i64 %2572
  %2574 = load i8, i8* %2573, align 1, !tbaa !414
  br i1 %.not1410, label %after_bb184.us, label %after_bb178.us

after_bb178.us:                                   ; preds = %after_bb175.us
  %2575 = sdiv i32 13, %2371
  %2576 = and i32 %2575, %2375
  %2577 = sext i32 %2576 to i64
  %2578 = add nsw i64 %2496, %2577
  %2579 = getelementptr inbounds i8, i8* %10, i64 %2578
  %2580 = load i8, i8* %2579, align 1, !tbaa !414
  br i1 %2382, label %true_bb179.us, label %after_bb184.us

true_bb179.us:                                    ; preds = %after_bb178.us
  %2581 = sdiv i32 14, %2371
  %2582 = and i32 %2581, %2375
  %2583 = sext i32 %2582 to i64
  %2584 = add nsw i64 %2496, %2583
  %2585 = getelementptr inbounds i8, i8* %10, i64 %2584
  %2586 = load i8, i8* %2585, align 1, !tbaa !414
  br label %after_bb184.us

after_bb184.us:                                   ; preds = %true_bb179.us, %after_bb178.us, %after_bb175.us, %after_bb172.us, %after_bb169.us, %after_bb166.us, %after_bb163.us, %after_bb160.us
  %2587 = phi i8 [ %2580, %true_bb179.us ], [ %2580, %after_bb178.us ], [ 0, %after_bb175.us ], [ 0, %after_bb172.us ], [ 0, %after_bb169.us ], [ 0, %after_bb166.us ], [ 0, %after_bb163.us ], [ 0, %after_bb160.us ]
  %2588 = phi i8 [ %2568, %true_bb179.us ], [ %2568, %after_bb178.us ], [ %2568, %after_bb175.us ], [ %2568, %after_bb172.us ], [ 0, %after_bb169.us ], [ 0, %after_bb166.us ], [ 0, %after_bb163.us ], [ 0, %after_bb160.us ]
  %2589 = phi i8 [ %2556, %true_bb179.us ], [ %2556, %after_bb178.us ], [ %2556, %after_bb175.us ], [ %2556, %after_bb172.us ], [ %2556, %after_bb169.us ], [ %2556, %after_bb166.us ], [ 0, %after_bb163.us ], [ 0, %after_bb160.us ]
  %2590 = phi i8 [ %2550, %true_bb179.us ], [ %2550, %after_bb178.us ], [ %2550, %after_bb175.us ], [ %2550, %after_bb172.us ], [ %2550, %after_bb169.us ], [ %2550, %after_bb166.us ], [ %2550, %after_bb163.us ], [ 0, %after_bb160.us ]
  %2591 = phi i8 [ %2562, %true_bb179.us ], [ %2562, %after_bb178.us ], [ %2562, %after_bb175.us ], [ %2562, %after_bb172.us ], [ %2562, %after_bb169.us ], [ 0, %after_bb166.us ], [ 0, %after_bb163.us ], [ 0, %after_bb160.us ]
  %2592 = phi i8 [ %2574, %true_bb179.us ], [ %2574, %after_bb178.us ], [ %2574, %after_bb175.us ], [ 0, %after_bb172.us ], [ 0, %after_bb169.us ], [ 0, %after_bb166.us ], [ 0, %after_bb163.us ], [ 0, %after_bb160.us ]
  %2593 = phi i8 [ %2586, %true_bb179.us ], [ 0, %after_bb178.us ], [ 0, %after_bb175.us ], [ 0, %after_bb172.us ], [ 0, %after_bb169.us ], [ 0, %after_bb166.us ], [ 0, %after_bb163.us ], [ 0, %after_bb160.us ]
  %2594 = insertelement <16 x i8> <i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, i8 %2498, i32 0
  %2595 = insertelement <16 x i8> %2594, i8 %2534, i32 1
  %2596 = insertelement <16 x i8> %2595, i8 %2535, i32 2
  %2597 = insertelement <16 x i8> %2596, i8 %2533, i32 3
  %2598 = insertelement <16 x i8> %2597, i8 %2536, i32 4
  %2599 = insertelement <16 x i8> %2598, i8 %2532, i32 5
  %2600 = insertelement <16 x i8> %2599, i8 %2537, i32 6
  %2601 = insertelement <16 x i8> %2600, i8 %2544, i32 7
  %2602 = insertelement <16 x i8> %2601, i8 %2590, i32 8
  %2603 = insertelement <16 x i8> %2602, i8 %2589, i32 9
  %2604 = insertelement <16 x i8> %2603, i8 %2591, i32 10
  %2605 = insertelement <16 x i8> %2604, i8 %2588, i32 11
  %2606 = insertelement <16 x i8> %2605, i8 %2592, i32 12
  %2607 = insertelement <16 x i8> %2606, i8 %2587, i32 13
  %2608 = insertelement <16 x i8> %2607, i8 %2593, i32 14
  %2609 = add nsw i64 %indvars.iv1878, %2490
  %2610 = shl nsw i64 %2609, 4
  %2611 = getelementptr inbounds i8, i8* %resampled_input122, i64 %2610
  %2612 = bitcast i8* %2611 to <16 x i8>*
  call void @llvm.masked.store.v16i8.p0v16i8(<16 x i8> %2608, <16 x i8>* %2612, i32 16, <16 x i1> %2246), !tbaa !416
  %indvars.iv.next1879 = add nuw nsw i64 %indvars.iv1878, 1
  %.not881.us = icmp eq i64 %indvars.iv1878, %2437
  br i1 %.not881.us, label %"end for resampled_input.s0.x.rebased137.loopexit.us", label %"for resampled_input.s0.x.rebased136.us"

"end for resampled_input.s0.x.rebased137.loopexit.us": ; preds = %after_bb184.us
  %indvars.iv.next1881 = add nuw nsw i64 %indvars.iv1880, 1
  %.not880.us = icmp eq i64 %indvars.iv1880, %2443
  br i1 %.not880.us, label %"consume resampled_input185", label %"for resampled_input.s0.y.rebased133.us"

"consume resampled_input185":                     ; preds = %"end for resampled_input.s0.x.rebased137.loopexit.us", %"end for resampled_input.s0.x.rebased131.loopexit.us", %next_bb126, %then_bb125
  br i1 %2383, label %"for output.s0.y.yo186.preheader", label %"end for output.s0.y.yo187", !prof !387

"for output.s0.y.yo186.preheader":                ; preds = %"consume resampled_input185"
  %2613 = load <4 x i32>, <4 x i32>* %2313, align 16
  %2614 = load <4 x i32>, <4 x i32>* %2316, align 16
  %2615 = load <4 x i32>, <4 x i32>* %2319, align 16
  %2616 = load <4 x i32>, <4 x i32>* %2322, align 16
  %2617 = trunc i64 %2465 to i32
  %2618 = mul i32 %27, %2617
  br label %"for output.s0.y.yo186"

"for output.s0.y.yo186":                          ; preds = %"for output.s0.y.yo186.preheader", %"end for output.s0.x.xo190"
  %indvars.iv1897 = phi i64 [ 0, %"for output.s0.y.yo186.preheader" ], [ %indvars.iv.next1898, %"end for output.s0.x.xo190" ]
  %output.s0.y.yo188 = phi i32 [ 0, %"for output.s0.y.yo186.preheader" ], [ %2643, %"end for output.s0.x.xo190" ]
  %2619 = add nsw i64 %indvars.iv1897, %2448
  %t2474 = add nsw i32 %output.s0.y.yo188, %24
  %2620 = mul nsw i64 %2619, %2449
  %t2475 = mul nsw i32 %t2474, %stride_y
  %2621 = add nsw i32 %t2459, %t2475
  %t2476 = mul nsw i32 %2621, %a64
  %2622 = add nsw i32 %2384, %t2475
  %t2478 = mul nsw i32 %2622, %a64
  %2623 = sub nsw i64 %2620, %2453
  %t2479 = sub nsw i32 %t2475, %resampled_input.y.min_realized
  %t2480 = mul nsw i32 %t2479, %a64
  br i1 %2385, label %"for output.s0.x.xo189.preheader", label %"end for output.s0.x.xo190", !prof !387

"for output.s0.x.xo189.preheader":                ; preds = %"for output.s0.y.yo186"
  %2624 = mul nsw i64 %2623, %2439
  %2625 = add nsw i64 %2620, %2452
  %2626 = mul nsw i64 %2625, %2439
  %2627 = add nsw i64 %2620, %2450
  %2628 = mul nsw i64 %2627, %2439
  %2629 = trunc i64 %2619 to i32
  %2630 = mul i32 %26, %2629
  %t2460 = add i32 %2630, %2618
  %t2473 = sub i32 %t2460, %reass.add1417
  %t2471 = add nsw i32 %t2476, %t2455
  %t2470 = add nsw i32 %t2476, %t2477
  %t2467 = add nsw i32 %t2478, %t2455
  %t2466 = add nsw i32 %t2478, %t2477
  %t2463 = add nsw i32 %t2480, %t2455
  %t2462 = add nsw i32 %t2480, %t2477
  %2631 = sub nsw i64 %2628, %2451
  %2632 = sub nsw i64 %2626, %2451
  %2633 = sub nsw i64 %2624, %2451
  %2634 = sext i32 %t2462 to i64
  %2635 = sext i32 %t2463 to i64
  %2636 = sext i32 %t2466 to i64
  %2637 = sext i32 %t2467 to i64
  %2638 = sext i32 %t2470 to i64
  %2639 = sext i32 %t2471 to i64
  %2640 = sext i32 %t2473 to i64
  %2641 = trunc i64 %2623 to i32
  br label %"for output.s0.x.xo189"

"end for output.s0.y.yo187":                      ; preds = %"end for output.s0.x.xo190", %"consume resampled_input185"
  %indvars.iv.next1915 = add nuw nsw i64 %indvars.iv1914, 1
  %2642 = icmp eq i64 %indvars.iv.next1915, %zext
  br i1 %2642, label %after_bb.loopexit1461, label %"for output.s0.b.rebased117"

"for output.s0.x.xo189":                          ; preds = %"for output.s0.x.xo189.preheader", %"consume convolved202"
  %indvars.iv1895 = phi i64 [ 0, %"for output.s0.x.xo189.preheader" ], [ %indvars.iv.next1896, %"consume convolved202" ]
  br i1 %2177, label %then_bb194, label %next_bb195

"end for output.s0.x.xo190":                      ; preds = %"consume convolved202", %"for output.s0.y.yo186"
  %indvars.iv.next1898 = add nuw nsw i64 %indvars.iv1897, 1
  %2643 = add nuw nsw i32 %output.s0.y.yo188, 1
  %.not872 = icmp eq i64 %indvars.iv.next1898, %2454
  br i1 %.not872, label %"end for output.s0.y.yo187", label %"for output.s0.y.yo186"

then_bb194:                                       ; preds = %"for output.s0.x.xo189"
  %2644 = load <8 x i16>, <8 x i16>* %2387, align 16, !tbaa !471
  %2645 = load <8 x i16>, <8 x i16>* %2389, align 16, !tbaa !480
  %2646 = shufflevector <8 x i16> %2645, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2647 = add nsw i64 %indvars.iv1895, %2390
  %2648 = mul nsw i64 %2647, %2391
  %2649 = add nsw i64 %2648, %2633
  %2650 = shl nsw i64 %2649, 4
  %2651 = getelementptr inbounds i8, i8* %resampled_input122, i64 %2650
  %2652 = bitcast i8* %2651 to <16 x i8>*
  %2653 = load <16 x i8>, <16 x i8>* %2652, align 16, !tbaa !416
  %2654 = zext <16 x i8> %2653 to <16 x i16>
  %2655 = shufflevector <8 x i16> %2644, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2656 = shufflevector <16 x i16> %2654, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2657 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2655, <4 x i16> %2656)
  %2658 = shufflevector <8 x i16> %2644, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2659 = shufflevector <16 x i16> %2654, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2660 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2658, <4 x i16> %2659)
  %2661 = shufflevector <8 x i16> %2645, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2662 = shufflevector <16 x i16> %2654, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2663 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2661, <4 x i16> %2662)
  %2664 = shufflevector <16 x i16> %2646, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2665 = shufflevector <16 x i16> %2654, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2666 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2664, <4 x i16> %2665)
  %2667 = add nsw <4 x i32> %2657, %2613
  %2668 = add nsw <4 x i32> %2660, %2614
  %2669 = add nsw <4 x i32> %2663, %2615
  %2670 = add nsw <4 x i32> %2666, %2616
  %2671 = load <8 x i16>, <8 x i16>* %2393, align 16, !tbaa !482
  %2672 = load <8 x i16>, <8 x i16>* %2395, align 16, !tbaa !485
  %2673 = shufflevector <8 x i16> %2672, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2674 = add nsw i64 %2648, %2634
  %2675 = shl nsw i64 %2674, 4
  %2676 = getelementptr inbounds i8, i8* %resampled_input122, i64 %2675
  %2677 = bitcast i8* %2676 to <16 x i8>*
  %2678 = load <16 x i8>, <16 x i8>* %2677, align 16, !tbaa !416
  %2679 = zext <16 x i8> %2678 to <16 x i16>
  %2680 = shufflevector <8 x i16> %2671, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2681 = shufflevector <16 x i16> %2679, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2682 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2680, <4 x i16> %2681)
  %2683 = shufflevector <8 x i16> %2671, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2684 = shufflevector <16 x i16> %2679, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2685 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2683, <4 x i16> %2684)
  %2686 = shufflevector <8 x i16> %2672, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2687 = shufflevector <16 x i16> %2679, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2688 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2686, <4 x i16> %2687)
  %2689 = shufflevector <16 x i16> %2673, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2690 = shufflevector <16 x i16> %2679, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2691 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2689, <4 x i16> %2690)
  %2692 = add nsw <4 x i32> %2667, %2682
  %2693 = add nsw <4 x i32> %2668, %2685
  %2694 = add nsw <4 x i32> %2669, %2688
  %2695 = add nsw <4 x i32> %2670, %2691
  %2696 = load <8 x i16>, <8 x i16>* %2397, align 16, !tbaa !487
  %2697 = load <8 x i16>, <8 x i16>* %2399, align 16, !tbaa !491
  %2698 = shufflevector <8 x i16> %2697, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2699 = add nsw i64 %2648, %2635
  %2700 = shl nsw i64 %2699, 4
  %2701 = getelementptr inbounds i8, i8* %resampled_input122, i64 %2700
  %2702 = bitcast i8* %2701 to <16 x i8>*
  %2703 = load <16 x i8>, <16 x i8>* %2702, align 16, !tbaa !416
  %2704 = zext <16 x i8> %2703 to <16 x i16>
  %2705 = shufflevector <8 x i16> %2696, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2706 = shufflevector <16 x i16> %2704, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2707 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2705, <4 x i16> %2706)
  %2708 = shufflevector <8 x i16> %2696, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2709 = shufflevector <16 x i16> %2704, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2710 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2708, <4 x i16> %2709)
  %2711 = shufflevector <8 x i16> %2697, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2712 = shufflevector <16 x i16> %2704, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2713 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2711, <4 x i16> %2712)
  %2714 = shufflevector <16 x i16> %2698, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2715 = shufflevector <16 x i16> %2704, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2716 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2714, <4 x i16> %2715)
  %2717 = add nsw <4 x i32> %2692, %2707
  %2718 = add nsw <4 x i32> %2693, %2710
  %2719 = add nsw <4 x i32> %2694, %2713
  %2720 = add nsw <4 x i32> %2695, %2716
  %2721 = load <8 x i16>, <8 x i16>* %2401, align 16, !tbaa !391
  %2722 = load <8 x i16>, <8 x i16>* %2403, align 16, !tbaa !391
  %2723 = shufflevector <8 x i16> %2722, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2724 = add nsw i64 %2648, %2632
  %2725 = shl nsw i64 %2724, 4
  %2726 = getelementptr inbounds i8, i8* %resampled_input122, i64 %2725
  %2727 = bitcast i8* %2726 to <16 x i8>*
  %2728 = load <16 x i8>, <16 x i8>* %2727, align 16, !tbaa !416
  %2729 = zext <16 x i8> %2728 to <16 x i16>
  %2730 = shufflevector <8 x i16> %2721, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2731 = shufflevector <16 x i16> %2729, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2732 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2730, <4 x i16> %2731)
  %2733 = shufflevector <8 x i16> %2721, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2734 = shufflevector <16 x i16> %2729, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2735 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2733, <4 x i16> %2734)
  %2736 = shufflevector <8 x i16> %2722, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2737 = shufflevector <16 x i16> %2729, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2738 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2736, <4 x i16> %2737)
  %2739 = shufflevector <16 x i16> %2723, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2740 = shufflevector <16 x i16> %2729, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2741 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2739, <4 x i16> %2740)
  %2742 = add nsw <4 x i32> %2717, %2732
  %2743 = add nsw <4 x i32> %2718, %2735
  %2744 = add nsw <4 x i32> %2719, %2738
  %2745 = add nsw <4 x i32> %2720, %2741
  %2746 = load <8 x i16>, <8 x i16>* %2405, align 16, !tbaa !391
  %2747 = load <8 x i16>, <8 x i16>* %2407, align 16, !tbaa !391
  %2748 = shufflevector <8 x i16> %2747, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2749 = add nsw i64 %2648, %2636
  %2750 = shl nsw i64 %2749, 4
  %2751 = getelementptr inbounds i8, i8* %resampled_input122, i64 %2750
  %2752 = bitcast i8* %2751 to <16 x i8>*
  %2753 = load <16 x i8>, <16 x i8>* %2752, align 16, !tbaa !416
  %2754 = zext <16 x i8> %2753 to <16 x i16>
  %2755 = shufflevector <8 x i16> %2746, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2756 = shufflevector <16 x i16> %2754, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2757 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2755, <4 x i16> %2756)
  %2758 = shufflevector <8 x i16> %2746, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2759 = shufflevector <16 x i16> %2754, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2760 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2758, <4 x i16> %2759)
  %2761 = shufflevector <8 x i16> %2747, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2762 = shufflevector <16 x i16> %2754, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2763 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2761, <4 x i16> %2762)
  %2764 = shufflevector <16 x i16> %2748, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2765 = shufflevector <16 x i16> %2754, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2766 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2764, <4 x i16> %2765)
  %2767 = add nsw <4 x i32> %2742, %2757
  %2768 = add nsw <4 x i32> %2743, %2760
  %2769 = add nsw <4 x i32> %2744, %2763
  %2770 = add nsw <4 x i32> %2745, %2766
  %2771 = load <8 x i16>, <8 x i16>* %2409, align 16, !tbaa !391
  %2772 = load <8 x i16>, <8 x i16>* %2411, align 16, !tbaa !391
  %2773 = shufflevector <8 x i16> %2772, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2774 = add nsw i64 %2648, %2637
  %2775 = shl nsw i64 %2774, 4
  %2776 = getelementptr inbounds i8, i8* %resampled_input122, i64 %2775
  %2777 = bitcast i8* %2776 to <16 x i8>*
  %2778 = load <16 x i8>, <16 x i8>* %2777, align 16, !tbaa !416
  %2779 = zext <16 x i8> %2778 to <16 x i16>
  %2780 = shufflevector <8 x i16> %2771, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2781 = shufflevector <16 x i16> %2779, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2782 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2780, <4 x i16> %2781)
  %2783 = shufflevector <8 x i16> %2771, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2784 = shufflevector <16 x i16> %2779, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2785 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2783, <4 x i16> %2784)
  %2786 = shufflevector <8 x i16> %2772, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2787 = shufflevector <16 x i16> %2779, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2788 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2786, <4 x i16> %2787)
  %2789 = shufflevector <16 x i16> %2773, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2790 = shufflevector <16 x i16> %2779, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2791 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2789, <4 x i16> %2790)
  %2792 = add nsw <4 x i32> %2767, %2782
  %2793 = add nsw <4 x i32> %2768, %2785
  %2794 = add nsw <4 x i32> %2769, %2788
  %2795 = add nsw <4 x i32> %2770, %2791
  %2796 = load <8 x i16>, <8 x i16>* %2413, align 16, !tbaa !391
  %2797 = load <8 x i16>, <8 x i16>* %2415, align 16, !tbaa !391
  %2798 = shufflevector <8 x i16> %2797, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2799 = add nsw i64 %2648, %2631
  %2800 = shl nsw i64 %2799, 4
  %2801 = getelementptr inbounds i8, i8* %resampled_input122, i64 %2800
  %2802 = bitcast i8* %2801 to <16 x i8>*
  %2803 = load <16 x i8>, <16 x i8>* %2802, align 16, !tbaa !416
  %2804 = zext <16 x i8> %2803 to <16 x i16>
  %2805 = shufflevector <8 x i16> %2796, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2806 = shufflevector <16 x i16> %2804, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2807 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2805, <4 x i16> %2806)
  %2808 = shufflevector <8 x i16> %2796, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2809 = shufflevector <16 x i16> %2804, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2810 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2808, <4 x i16> %2809)
  %2811 = shufflevector <8 x i16> %2797, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2812 = shufflevector <16 x i16> %2804, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2813 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2811, <4 x i16> %2812)
  %2814 = shufflevector <16 x i16> %2798, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2815 = shufflevector <16 x i16> %2804, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2816 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2814, <4 x i16> %2815)
  %2817 = add nsw <4 x i32> %2792, %2807
  %2818 = add nsw <4 x i32> %2793, %2810
  %2819 = add nsw <4 x i32> %2794, %2813
  %2820 = add nsw <4 x i32> %2795, %2816
  %2821 = load <8 x i16>, <8 x i16>* %2417, align 16, !tbaa !391
  %2822 = load <8 x i16>, <8 x i16>* %2419, align 16, !tbaa !391
  %2823 = shufflevector <8 x i16> %2822, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2824 = add nsw i64 %2648, %2638
  %2825 = shl nsw i64 %2824, 4
  %2826 = getelementptr inbounds i8, i8* %resampled_input122, i64 %2825
  %2827 = bitcast i8* %2826 to <16 x i8>*
  %2828 = load <16 x i8>, <16 x i8>* %2827, align 16, !tbaa !416
  %2829 = zext <16 x i8> %2828 to <16 x i16>
  %2830 = shufflevector <8 x i16> %2821, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2831 = shufflevector <16 x i16> %2829, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2832 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2830, <4 x i16> %2831)
  %2833 = shufflevector <8 x i16> %2821, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2834 = shufflevector <16 x i16> %2829, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2835 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2833, <4 x i16> %2834)
  %2836 = shufflevector <8 x i16> %2822, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2837 = shufflevector <16 x i16> %2829, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2838 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2836, <4 x i16> %2837)
  %2839 = shufflevector <16 x i16> %2823, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2840 = shufflevector <16 x i16> %2829, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2841 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2839, <4 x i16> %2840)
  %2842 = add nsw <4 x i32> %2817, %2832
  %2843 = add nsw <4 x i32> %2818, %2835
  %2844 = add nsw <4 x i32> %2819, %2838
  %2845 = add nsw <4 x i32> %2820, %2841
  %2846 = load <8 x i16>, <8 x i16>* %2421, align 16, !tbaa !391
  %2847 = load <8 x i16>, <8 x i16>* %2423, align 16, !tbaa !391
  %2848 = shufflevector <8 x i16> %2847, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2849 = add nsw i64 %2648, %2639
  %2850 = shl nsw i64 %2849, 4
  %2851 = getelementptr inbounds i8, i8* %resampled_input122, i64 %2850
  %2852 = bitcast i8* %2851 to <16 x i8>*
  %2853 = load <16 x i8>, <16 x i8>* %2852, align 16, !tbaa !416
  %2854 = zext <16 x i8> %2853 to <16 x i16>
  %2855 = shufflevector <8 x i16> %2846, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2856 = shufflevector <16 x i16> %2854, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2857 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2855, <4 x i16> %2856)
  %2858 = shufflevector <8 x i16> %2846, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2859 = shufflevector <16 x i16> %2854, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2860 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2858, <4 x i16> %2859)
  %2861 = shufflevector <8 x i16> %2847, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2862 = shufflevector <16 x i16> %2854, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2863 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2861, <4 x i16> %2862)
  %2864 = shufflevector <16 x i16> %2848, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2865 = shufflevector <16 x i16> %2854, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2866 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2864, <4 x i16> %2865)
  %2867 = add nsw <4 x i32> %2842, %2857
  %2868 = add nsw <4 x i32> %2843, %2860
  %2869 = add nsw <4 x i32> %2844, %2863
  %2870 = add nsw <4 x i32> %2845, %2866
  br label %"consume convolved202"

next_bb195:                                       ; preds = %"for output.s0.x.xo189"
  %2871 = trunc i64 %indvars.iv1895 to i32
  %2872 = add nsw i32 %21, %2871
  %2873 = mul nsw i32 %2872, %stride_x
  %t2481 = sub i32 %2873, %resampled_input.x.min_realized
  br i1 %2180, label %"for convolved.s1.r19$y196.preheader", label %"consume convolved202", !prof !387

"for convolved.s1.r19$y196.preheader":            ; preds = %next_bb195
  br i1 %2178, label %"for convolved.s1.r19$y196.us", label %"consume convolved202", !prof !387

"for convolved.s1.r19$y196.us":                   ; preds = %"for convolved.s1.r19$y196.preheader", %"end for convolved.s1.r19$x200.loopexit.us"
  %indvars.iv1892 = phi i64 [ %indvars.iv.next1893, %"end for convolved.s1.r19$x200.loopexit.us" ], [ 0, %"for convolved.s1.r19$y196.preheader" ]
  %convolved791.sroa.120.4.us = phi <4 x i32> [ %2910, %"end for convolved.s1.r19$x200.loopexit.us" ], [ %2616, %"for convolved.s1.r19$y196.preheader" ]
  %convolved791.sroa.80.4.us = phi <4 x i32> [ %2909, %"end for convolved.s1.r19$x200.loopexit.us" ], [ %2615, %"for convolved.s1.r19$y196.preheader" ]
  %convolved791.sroa.40.4.us = phi <4 x i32> [ %2908, %"end for convolved.s1.r19$x200.loopexit.us" ], [ %2614, %"for convolved.s1.r19$y196.preheader" ]
  %convolved791.sroa.0.4.us = phi <4 x i32> [ %2907, %"end for convolved.s1.r19$x200.loopexit.us" ], [ %2613, %"for convolved.s1.r19$y196.preheader" ]
  %"convolved.s1.r19$y198.us" = phi i32 [ %2911, %"end for convolved.s1.r19$x200.loopexit.us" ], [ 0, %"for convolved.s1.r19$y196.preheader" ]
  %2874 = mul nsw i64 %indvars.iv1892, %2445
  %2875 = mul nsw i32 %"convolved.s1.r19$y198.us", %a120
  %2876 = add nsw i32 %2875, %2641
  %2877 = mul nsw i32 %2876, %a64
  %t2483.us = add nsw i32 %t2481, %2877
  %2878 = sext i32 %t2483.us to i64
  br label %"for convolved.s1.r19$x199.us"

"for convolved.s1.r19$x199.us":                   ; preds = %"for convolved.s1.r19$y196.us", %"for convolved.s1.r19$x199.us"
  %indvars.iv1890 = phi i64 [ 0, %"for convolved.s1.r19$y196.us" ], [ %indvars.iv.next1891, %"for convolved.s1.r19$x199.us" ]
  %convolved791.sroa.120.5.us = phi <4 x i32> [ %convolved791.sroa.120.4.us, %"for convolved.s1.r19$y196.us" ], [ %2910, %"for convolved.s1.r19$x199.us" ]
  %convolved791.sroa.80.5.us = phi <4 x i32> [ %convolved791.sroa.80.4.us, %"for convolved.s1.r19$y196.us" ], [ %2909, %"for convolved.s1.r19$x199.us" ]
  %convolved791.sroa.40.5.us = phi <4 x i32> [ %convolved791.sroa.40.4.us, %"for convolved.s1.r19$y196.us" ], [ %2908, %"for convolved.s1.r19$x199.us" ]
  %convolved791.sroa.0.5.us = phi <4 x i32> [ %convolved791.sroa.0.4.us, %"for convolved.s1.r19$y196.us" ], [ %2907, %"for convolved.s1.r19$x199.us" ]
  %2879 = add nsw i64 %indvars.iv1890, %2874
  %2880 = shl nsw i64 %2879, 4
  %2881 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 %2880
  %2882 = bitcast i16* %2881 to <8 x i16>*
  %2883 = load <8 x i16>, <8 x i16>* %2882, align 16, !tbaa !391
  %2884 = getelementptr inbounds i16, i16* %2881, i64 8
  %2885 = bitcast i16* %2884 to <8 x i16>*
  %2886 = load <8 x i16>, <8 x i16>* %2885, align 16, !tbaa !391
  %2887 = shufflevector <8 x i16> %2886, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2888 = mul nsw i64 %indvars.iv1890, %2386
  %2889 = add nsw i64 %2888, %2878
  %2890 = shl nsw i64 %2889, 4
  %2891 = getelementptr inbounds i8, i8* %resampled_input122, i64 %2890
  %2892 = bitcast i8* %2891 to <16 x i8>*
  %2893 = load <16 x i8>, <16 x i8>* %2892, align 16, !tbaa !416
  %2894 = zext <16 x i8> %2893 to <16 x i16>
  %2895 = shufflevector <8 x i16> %2883, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2896 = shufflevector <16 x i16> %2894, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2897 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2895, <4 x i16> %2896)
  %2898 = shufflevector <8 x i16> %2883, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2899 = shufflevector <16 x i16> %2894, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2900 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2898, <4 x i16> %2899)
  %2901 = shufflevector <8 x i16> %2886, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2902 = shufflevector <16 x i16> %2894, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2903 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2901, <4 x i16> %2902)
  %2904 = shufflevector <16 x i16> %2887, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2905 = shufflevector <16 x i16> %2894, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2906 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %2904, <4 x i16> %2905)
  %2907 = add nsw <4 x i32> %2897, %convolved791.sroa.0.5.us
  %2908 = add nsw <4 x i32> %2900, %convolved791.sroa.40.5.us
  %2909 = add nsw <4 x i32> %2903, %convolved791.sroa.80.5.us
  %2910 = add nsw <4 x i32> %2906, %convolved791.sroa.120.5.us
  %indvars.iv.next1891 = add nuw nsw i64 %indvars.iv1890, 1
  %.not879.us = icmp eq i64 %indvars.iv.next1891, %2444
  br i1 %.not879.us, label %"end for convolved.s1.r19$x200.loopexit.us", label %"for convolved.s1.r19$x199.us"

"end for convolved.s1.r19$x200.loopexit.us":      ; preds = %"for convolved.s1.r19$x199.us"
  %indvars.iv.next1893 = add nuw nsw i64 %indvars.iv1892, 1
  %2911 = add nuw nsw i32 %"convolved.s1.r19$y198.us", 1
  %.not878.us = icmp eq i64 %indvars.iv.next1893, %2446
  br i1 %.not878.us, label %"consume convolved202", label %"for convolved.s1.r19$y196.us"

"consume convolved202":                           ; preds = %"end for convolved.s1.r19$x200.loopexit.us", %"for convolved.s1.r19$y196.preheader", %next_bb195, %then_bb194
  %convolved791.sroa.120.7 = phi <4 x i32> [ %2870, %then_bb194 ], [ %2616, %next_bb195 ], [ %2616, %"for convolved.s1.r19$y196.preheader" ], [ %2910, %"end for convolved.s1.r19$x200.loopexit.us" ]
  %convolved791.sroa.80.7 = phi <4 x i32> [ %2869, %then_bb194 ], [ %2615, %next_bb195 ], [ %2615, %"for convolved.s1.r19$y196.preheader" ], [ %2909, %"end for convolved.s1.r19$x200.loopexit.us" ]
  %convolved791.sroa.40.7 = phi <4 x i32> [ %2868, %then_bb194 ], [ %2614, %next_bb195 ], [ %2614, %"for convolved.s1.r19$y196.preheader" ], [ %2908, %"end for convolved.s1.r19$x200.loopexit.us" ]
  %convolved791.sroa.0.7 = phi <4 x i32> [ %2867, %then_bb194 ], [ %2613, %next_bb195 ], [ %2613, %"for convolved.s1.r19$y196.preheader" ], [ %2907, %"end for convolved.s1.r19$x200.loopexit.us" ]
  %2912 = select <4 x i1> %2248, <4 x i32> %convolved791.sroa.0.7, <4 x i32> undef
  %2913 = select <4 x i1> %2251, <4 x i32> %convolved791.sroa.40.7, <4 x i32> undef
  %2914 = select <4 x i1> %2254, <4 x i32> %convolved791.sroa.80.7, <4 x i32> undef
  %2915 = select <4 x i1> %2257, <4 x i32> %convolved791.sroa.120.7, <4 x i32> undef
  %2916 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %2912, <4 x i32> %2425)
  %2917 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %2913, <4 x i32> %2425)
  %2918 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %2914, <4 x i32> %2425)
  %2919 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %2915, <4 x i32> %2425)
  %2920 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %2916, <4 x i32> %2428)
  %2921 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %2917, <4 x i32> %2428)
  %2922 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %2918, <4 x i32> %2428)
  %2923 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %2919, <4 x i32> %2428)
  %2924 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %2920)
  %2925 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %2921)
  %2926 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %2922)
  %2927 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %2923)
  %2928 = shufflevector <4 x i16> %2924, <4 x i16> %2925, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2929 = shufflevector <4 x i16> %2926, <4 x i16> %2927, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2930 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %2928, <8 x i16> %2431)
  %2931 = shufflevector <16 x i16> %2929, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2932 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %2931, <8 x i16> %2431)
  %2933 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %2930)
  %2934 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %2932)
  %2935 = shufflevector <8 x i8> %2933, <8 x i8> %2934, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2936 = call <16 x i8> @llvm.aarch64.neon.umin.v16i8(<16 x i8> %2935, <16 x i8> %2433)
  %2937 = call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2936, <16 x i8> %2435)
  %2938 = add nsw i64 %indvars.iv1895, %2390
  %2939 = mul nsw i64 %2938, %2436
  %2940 = add nsw i64 %2939, %2640
  %2941 = getelementptr inbounds i8, i8* %19, i64 %2940
  %2942 = bitcast i8* %2941 to <16 x i8>*
  call void @llvm.masked.store.v16i8.p0v16i8(<16 x i8> %2937, <16 x i8>* %2942, i32 1, <16 x i1> %2246), !tbaa !493
  %indvars.iv.next1896 = add nuw nsw i64 %indvars.iv1895, 1
  %.not877 = icmp eq i64 %indvars.iv.next1896, %2447
  br i1 %.not877, label %"end for output.s0.x.xo190", label %"for output.s0.x.xo189"

after_bb236.loopexit:                             ; preds = %"end for output.s0.b.rebased308"
  %2943 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  br label %after_bb236

after_bb236.loopexit1455:                         ; preds = %"end for output.s0.b.rebased465"
  %2944 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  br label %after_bb236

after_bb236:                                      ; preds = %after_bb236.loopexit1455, %after_bb236.loopexit, %"consume sum_filter571", %next_bb408
  %.5 = phi i8* [ %.01331, %"consume sum_filter571" ], [ %.01331, %next_bb408 ], [ %.7, %after_bb236.loopexit ], [ %.9, %after_bb236.loopexit1455 ]
  %.1 = phi i8* [ %5058, %"consume sum_filter571" ], [ %.0, %next_bb408 ], [ %2943, %after_bb236.loopexit ], [ %2944, %after_bb236.loopexit1455 ]
  %tobool.not.i.not = icmp eq i8* %.5, null
  br i1 %tobool.not.i.not, label %call_destructor.exit, label %if.then.i1157

if.then.i1157.loopexit:                           ; preds = %"end for output.s0.y.yo684"
  %2945 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  br label %if.then.i1157

if.then.i1157:                                    ; preds = %if.then.i1157.loopexit, %after_bb236
  %.11365 = phi i8* [ %.1, %after_bb236 ], [ %5058, %if.then.i1157.loopexit ]
  %.51362 = phi i8* [ %.5, %after_bb236 ], [ %2945, %if.then.i1157.loopexit ]
  %ptr1.i = bitcast i8* %.51362 to i8**
  %2946 = load i8*, i8** %ptr1.i, align 8, !tbaa !383
  %tobool.not.i1271 = icmp eq i8* %2946, null
  br i1 %tobool.not.i1271, label %pseudostack_free.exit, label %land.lhs.true.i1274

land.lhs.true.i1274:                              ; preds = %if.then.i1157
  %cumulative_size.i1272 = getelementptr inbounds i8, i8* %.51362, i64 16
  %2947 = bitcast i8* %cumulative_size.i1272 to i64*
  %2948 = load i64, i64* %2947, align 8, !tbaa !385
  %cmp.i1273 = icmp ugt i64 %2948, 16384
  br i1 %cmp.i1273, label %if.then.i1275, label %pseudostack_free.exit

if.then.i1275:                                    ; preds = %land.lhs.true.i1274
  call void @halide_free(i8* null, i8* nonnull %2946) #14
  br label %pseudostack_free.exit

pseudostack_free.exit:                            ; preds = %if.then.i1157, %land.lhs.true.i1274, %if.then.i1275
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %.51362, i8 0, i64 24, i1 false)
  br label %call_destructor.exit

call_destructor.exit:                             ; preds = %after_bb236, %pseudostack_free.exit
  %.11364 = phi i8* [ %.1, %after_bb236 ], [ %.11365, %pseudostack_free.exit ]
  %tobool.not.i1159.not = icmp eq i8* %.11364, null
  br i1 %tobool.not.i1159.not, label %call_destructor.exit1162, label %if.then.i1160

if.then.i1160:                                    ; preds = %call_destructor.exit
  %ptr1.i1278 = bitcast i8* %.11364 to i8**
  %2949 = load i8*, i8** %ptr1.i1278, align 8, !tbaa !383
  %tobool.not.i1279 = icmp eq i8* %2949, null
  br i1 %tobool.not.i1279, label %pseudostack_free.exit1287, label %land.lhs.true.i1282

land.lhs.true.i1282:                              ; preds = %if.then.i1160
  %cumulative_size.i1280 = getelementptr inbounds i8, i8* %.11364, i64 16
  %2950 = bitcast i8* %cumulative_size.i1280 to i64*
  %2951 = load i64, i64* %2950, align 8, !tbaa !385
  %cmp.i1281 = icmp ugt i64 %2951, 16384
  br i1 %cmp.i1281, label %if.then.i1283, label %pseudostack_free.exit1287

if.then.i1283:                                    ; preds = %land.lhs.true.i1282
  call void @halide_free(i8* null, i8* nonnull %2949) #14
  br label %pseudostack_free.exit1287

pseudostack_free.exit1287:                        ; preds = %if.then.i1160, %land.lhs.true.i1282, %if.then.i1283
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %.11364, i8 0, i64 24, i1 false)
  br label %call_destructor.exit1162

call_destructor.exit1162:                         ; preds = %call_destructor.exit, %pseudostack_free.exit1287
  ret i32 0

then_bb237:                                       ; preds = %after_bb
  %t2201239 = icmp slt i32 %a121, 0
  %2952 = add nsw i32 %46, -1
  %t2202240 = mul nsw i32 %2952, %a121
  %t2203241 = icmp slt i32 %stride_x, 0
  %2953 = icmp slt i32 %62, 2
  %t2204242 = select i1 %2953, i32 %62, i32 2
  %t2205243 = add nsw i32 %t2204242, -2
  %t2206244 = add nsw i32 %62, -1
  %t2207245 = select i1 %t2201239, i32 %t2202240, i32 0
  %2954 = select i1 %t2203241, i32 %t2206244, i32 %t2205243
  %2955 = add nsw i32 %2954, %61
  %t2208246 = mul nsw i32 %2955, %stride_x
  %t2209247 = icmp slt i32 %a120, 0
  %2956 = add nsw i32 %48, -1
  %t2210248 = mul nsw i32 %2956, %a120
  %t2211249 = icmp slt i32 %stride_y, 0
  %2957 = icmp slt i32 %65, 2
  %t2212250 = select i1 %2957, i32 %65, i32 2
  %t2213251 = add nsw i32 %t2212250, -2
  %t2214252 = add nsw i32 %65, -1
  %t2215253 = select i1 %t2209247, i32 %t2210248, i32 0
  %2958 = select i1 %t2211249, i32 %t2214252, i32 %t2213251
  %2959 = add nsw i32 %2958, %64
  %t2216254 = mul nsw i32 %2959, %stride_y
  %2960 = icmp eq i32 %46, 3
  %2961 = icmp eq i32 %48, 3
  %t2217255 = and i1 %2960, %2961
  %a121.op839 = shl i32 %a121, 1
  %t2218256 = select i1 %t2201239, i32 %a121.op839, i32 0
  %a120.op840 = shl i32 %a120, 1
  %t2219257 = select i1 %t2209247, i32 %a120.op840, i32 0
  %t2194258 = icmp eq i32 %depth_multiplier, 1
  %2962 = add nuw nsw i32 %65, 1
  %t2196259 = ashr i32 %2962, 1
  %2963 = add nuw nsw i32 %62, 1
  %t2197260 = ashr i32 %2963, 1
  %2964 = add nuw nsw i32 %45, 15
  %t2172261 = ashr i32 %2964, 4
  %2965 = icmp sgt i32 %a120, 0
  %2966 = select i1 %2965, i32 %a120, i32 0
  %t2185262 = shl nuw nsw i32 %2966, 1
  %2967 = icmp sgt i32 %a121, 0
  %2968 = select i1 %2967, i32 %a121, i32 0
  %t2192263 = shl nuw nsw i32 %2968, 1
  %2969 = select i1 %t2217255, i32 %t2219257, i32 %t2215253
  %b82 = add nsw i32 %t2216254, %2969
  %2970 = select i1 %t2217255, i32 %t2218256, i32 %t2207245
  %b81 = add nsw i32 %t2208246, %2970
  %b86 = add nsw i32 %t2216254, %t2215253
  %2971 = select i1 %t2209247, i32 0, i32 %t2210248
  %2972 = select i1 %t2211249, i32 %t2213251, i32 %t2214252
  %2973 = add nsw i32 %2972, %64
  %2974 = mul nsw i32 %2973, %stride_y
  %b85 = add nsw i32 %2974, %2971
  %b84 = add nsw i32 %t2208246, %t2207245
  %2975 = select i1 %t2201239, i32 0, i32 %t2202240
  %2976 = select i1 %t2203241, i32 %t2205243, i32 %t2206244
  %2977 = add nsw i32 %2976, %61
  %2978 = mul nsw i32 %2977, %stride_x
  %b83 = add nsw i32 %2978, %2975
  %2979 = mul nsw i32 %55, %54
  %2980 = mul nsw i32 %58, %56
  %2981 = mul nsw i32 %53, %52
  %2982 = add i32 %2979, %2981
  %t2195265 = add i32 %2982, %2980
  %b76 = add nsw i32 %45, -16
  %2983 = icmp sgt i32 %46, 0
  %2984 = select i1 %2983, i32 %46, i32 0
  %t2538 = zext i32 %2984 to i64
  %2985 = icmp sgt i32 %48, 0
  %2986 = select i1 %2985, i32 %48, i32 0
  %t2539 = zext i32 %2986 to i64
  %2987 = shl nuw nsw i64 %t2538, 5
  %2988 = mul i64 %2987, %t2539
  %2989 = or i64 %2988, 6
  %2990 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  %2991 = sext i32 %47 to i64
  %2992 = insertelement <8 x i8> undef, i8 %filter_zero, i32 0
  %2993 = shufflevector <8 x i8> %2992, <8 x i8> undef, <8 x i32> zeroinitializer
  %2994 = zext <8 x i8> %2993 to <8 x i16>
  %2995 = bitcast i8* %42 to i32*
  %2996 = zext i8 %input_zero to i32
  %2997 = insertelement <16 x i32> undef, i32 %2996, i32 0
  %2998 = shufflevector <16 x i32> %2997, <16 x i32> undef, <16 x i32> zeroinitializer
  %2999 = bitcast [16 x i32]* %sum_filter792 to <4 x i32>*
  %3000 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter792, i64 0, i64 4
  %3001 = bitcast i32* %3000 to <4 x i32>*
  %3002 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter792, i64 0, i64 8
  %3003 = bitcast i32* %3002 to <4 x i32>*
  %3004 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter792, i64 0, i64 12
  %3005 = bitcast i32* %3004 to <4 x i32>*
  %3006 = icmp slt i32 %t2207245, %2970
  %t2225300 = select i1 %3006, i32 %b84, i32 %b81
  %3007 = icmp slt i32 %t2215253, %2969
  %t2223301 = select i1 %3007, i32 %b86, i32 %b82
  %3008 = select i1 %t2217255, i32 %t2192263, i32 %2975
  %a81 = add nsw i32 %2978, %3008
  %3009 = icmp sgt i32 %3008, %2975
  %3010 = select i1 %3009, i32 %a81, i32 %b83
  %t2226302 = sub nsw i32 %3010, %t2225300
  %3011 = select i1 %t2217255, i32 %t2185262, i32 %2971
  %a83 = add nsw i32 %2974, %3011
  %3012 = icmp sgt i32 %3011, %2971
  %3013 = select i1 %3012, i32 %a83, i32 %b85
  %t2224303 = sub nsw i32 %3013, %t2223301
  %t2228304 = sub nsw i32 %b83, %b84
  %t2227305 = sub nsw i32 %b85, %b86
  %.neg1446 = mul i32 %66, %64
  %.neg1447 = mul i32 %63, %61
  %.neg1448 = mul i32 %67, %56
  %3014 = icmp sgt i32 %57, 0
  %a88 = add nsw i32 %t2224303, 1
  %a87 = add nsw i32 %t2226302, 1
  %.inv843 = icmp slt i32 %t2226302, 0
  %3015 = select i1 %.inv843, i32 0, i32 %a87
  %t2540 = zext i32 %3015 to i64
  %.inv844 = icmp slt i32 %t2224303, 0
  %3016 = select i1 %.inv844, i32 0, i32 %a88
  %t2541 = zext i32 %3016 to i64
  %t2542 = shl nuw nsw i64 %t2540, 4
  %3017 = mul i64 %t2542, %t2541
  %3018 = or i64 %3017, 3
  %3019 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %t2245329 = sub i32 %b84, %t2225300
  %t2246330 = sub i32 %b86, %t2223301
  %3020 = icmp eq i32 %depth_multiplier, 0
  %t2545 = select i1 %3020, <16 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <16 x i32> zeroinitializer
  %depth_multiplier.lobit853 = ashr i32 %depth_multiplier, 31
  %3021 = insertelement <16 x i32> undef, i32 %depth_multiplier, i32 0
  %3022 = shufflevector <16 x i32> %3021, <16 x i32> undef, <16 x i32> zeroinitializer
  %3023 = sub nsw <16 x i32> %3022, %t2545
  %3024 = xor i32 %depth_multiplier.lobit853, -1
  %3025 = sub nsw i32 %3024, %depth_multiplier.lobit853
  %3026 = insertelement <16 x i32> undef, i32 %3025, i32 0
  %3027 = shufflevector <16 x i32> %3026, <16 x i32> undef, <16 x i32> zeroinitializer
  %3028 = xor <16 x i32> %t2545, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %3029 = sext i32 %b84 to i64
  %3030 = sext i32 %53 to i64
  %t2254340 = sub nsw i32 %a120.op840, %t2223301
  %t2250341 = sub nsw i32 %a121.op839, %t2225300
  %reass.add1450 = add i32 %.neg1446, %.neg1447
  %reass.add1451 = add i32 %reass.add1450, %.neg1448
  %3031 = icmp sgt i32 %65, 0
  %b91 = add nsw i32 %65, -2
  %t2284351 = sub nsw i32 %a121, %t2225300
  %t2285352 = sub nsw i32 %a120, %t2223301
  %3032 = icmp sgt i32 %62, 0
  %b92 = add nsw i32 %62, -2
  %3033 = bitcast [64 x i32]* %offset_c559790 to <4 x i32>*
  %3034 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 4
  %3035 = bitcast i32* %3034 to <4 x i32>*
  %3036 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 8
  %3037 = bitcast i32* %3036 to <4 x i32>*
  %3038 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 12
  %3039 = bitcast i32* %3038 to <4 x i32>*
  %3040 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 16
  %3041 = bitcast i32* %3040 to <4 x i32>*
  %3042 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 20
  %3043 = bitcast i32* %3042 to <4 x i32>*
  %3044 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 24
  %3045 = bitcast i32* %3044 to <4 x i32>*
  %3046 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 28
  %3047 = bitcast i32* %3046 to <4 x i32>*
  %3048 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 32
  %3049 = bitcast i32* %3048 to <4 x i32>*
  %3050 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 36
  %3051 = bitcast i32* %3050 to <4 x i32>*
  %3052 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 40
  %3053 = bitcast i32* %3052 to <4 x i32>*
  %3054 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 44
  %3055 = bitcast i32* %3054 to <4 x i32>*
  %3056 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 48
  %3057 = bitcast i32* %3056 to <4 x i32>*
  %3058 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 52
  %3059 = bitcast i32* %3058 to <4 x i32>*
  %3060 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 56
  %3061 = bitcast i32* %3060 to <4 x i32>*
  %3062 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 60
  %3063 = bitcast i32* %3062 to <4 x i32>*
  %3064 = sext i32 %a121 to i64
  %3065 = sext i32 %61 to i64
  %3066 = sext i32 %stride_x to i64
  %3067 = insertelement <16 x i32> undef, i32 %output_multiplier, i32 0
  %3068 = shufflevector <16 x i32> %3067, <16 x i32> undef, <4 x i32> zeroinitializer
  %3069 = sub nsw i32 0, %output_shift
  %3070 = insertelement <16 x i32> undef, i32 %3069, i32 0
  %3071 = shufflevector <16 x i32> %3070, <16 x i32> undef, <4 x i32> zeroinitializer
  %3072 = zext i8 %output_zero to i16
  %3073 = insertelement <16 x i16> undef, i16 %3072, i32 0
  %3074 = shufflevector <16 x i16> %3073, <16 x i16> undef, <8 x i32> zeroinitializer
  %3075 = insertelement <16 x i8> undef, i8 %output_max, i32 0
  %3076 = shufflevector <16 x i8> %3075, <16 x i8> undef, <16 x i32> zeroinitializer
  %3077 = insertelement <16 x i8> undef, i8 %output_min, i32 0
  %3078 = shufflevector <16 x i8> %3077, <16 x i8> undef, <16 x i32> zeroinitializer
  %3079 = sext i32 %63 to i64
  %3080 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  %3081 = zext i32 %46 to i64
  %3082 = sext i32 %46 to i64
  %3083 = sext i32 %49 to i64
  %3084 = zext i32 %48 to i64
  %3085 = zext i32 %t2228304 to i64
  %3086 = sext i32 %t2246330 to i64
  %3087 = sext i32 %a87 to i64
  %3088 = sext i32 %t2245329 to i64
  %3089 = sext i32 %b86 to i64
  %3090 = sext i32 %55 to i64
  %3091 = zext i32 %t2227305 to i64
  %3092 = sext i32 %56 to i64
  %3093 = sext i32 %58 to i64
  %zext2137 = zext i32 %57 to i64
  %3094 = or i32 %t2227305, %t2228304
  %3095 = icmp slt i32 %3094, 0
  %3096 = or i32 %t2227305, %t2228304
  %.not2293 = icmp sgt i32 %3096, -1
  br label %"for output.s0.c.co266"

next_bb238:                                       ; preds = %after_bb
  br i1 %77, label %then_bb407, label %next_bb408

"for output.s0.c.co266":                          ; preds = %then_bb237, %"end for output.s0.b.rebased308"
  %.6 = phi i8* [ %.01331, %then_bb237 ], [ %.7, %"end for output.s0.b.rebased308" ]
  %output.s0.c.co268 = phi i32 [ 0, %then_bb237 ], [ %3219, %"end for output.s0.b.rebased308" ]
  %a74 = shl nsw i32 %output.s0.c.co268, 4
  %3097 = icmp slt i32 %a74, %b76
  %output.s0.c.c.base269 = select i1 %3097, i32 %a74, i32 %b76
  %3098 = load i64, i64* %.fca.1.gep, align 8, !tbaa !381
  %cmp.i1164 = icmp ult i64 %3098, %2989
  %3099 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !383
  br i1 %cmp.i1164, label %if.then.i1167, label %pseudostack_alloc.exit1180, !prof !384

if.then.i1167:                                    ; preds = %"for output.s0.c.co266"
  %tobool1.not.i1166 = icmp ne i8* %3099, null
  %3100 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i1169 = icmp ugt i64 %3100, 16384
  %or.cond1396 = and i1 %tobool1.not.i1166, %cmp2.i1169
  br i1 %or.cond1396, label %if.then3.i1171, label %if.end.i1175

if.then3.i1171:                                   ; preds = %if.then.i1167
  call void @halide_free(i8* null, i8* nonnull %3099) #14
  %.pre2146 = load i64, i64* %.fca.2.gep, align 8, !tbaa !385
  br label %if.end.i1175

if.end.i1175:                                     ; preds = %if.then3.i1171, %if.then.i1167
  %3101 = phi i64 [ %.pre2146, %if.then3.i1171 ], [ %3100, %if.then.i1167 ]
  %add.i1173 = add i64 %3101, %2989
  store i64 %add.i1173, i64* %.fca.2.gep, align 8, !tbaa !385
  %cmp7.i1174 = icmp ugt i64 %add.i1173, 16384
  br i1 %cmp7.i1174, label %if.then8.i1177, label %if.end11.i1179

if.then8.i1177:                                   ; preds = %if.end.i1175
  %call.i1176 = call i8* @halide_malloc(i8* null, i64 %2989) #14
  br label %if.end11.i1179

if.end11.i1179:                                   ; preds = %if.then8.i1177, %if.end.i1175
  %storemerge.i1178 = phi i8* [ %call.i1176, %if.then8.i1177 ], [ null, %if.end.i1175 ]
  store i8* %storemerge.i1178, i8** %.fca.0.gep, align 8, !tbaa !383
  store i64 %2989, i64* %.fca.1.gep, align 8, !tbaa !381
  br label %pseudostack_alloc.exit1180

pseudostack_alloc.exit1180:                       ; preds = %"for output.s0.c.co266", %if.end11.i1179
  %3102 = phi i8* [ %storemerge.i1178, %if.end11.i1179 ], [ %3099, %"for output.s0.c.co266" ]
  %3103 = bitcast i8* %3102 to i16*
  %.not841 = icmp eq i8* %3102, null
  br i1 %.not841, label %then_bb271, label %"produce filter_zeroed273", !prof !386

then_bb271:                                       ; preds = %pseudostack_alloc.exit1180
  %3104 = alloca i8*, i64 %2989, align 16
  %3105 = bitcast i8** %3104 to i16*
  store i8** %3104, i8*** %2990, align 8
  br label %"produce filter_zeroed273"

"produce filter_zeroed273":                       ; preds = %pseudostack_alloc.exit1180, %then_bb271
  %filter_zeroed272 = phi i16* [ %3105, %then_bb271 ], [ %3103, %pseudostack_alloc.exit1180 ]
  br i1 %2985, label %"for filter_zeroed.s0.y274.preheader", label %"consume sum_filter293", !prof !387

"for filter_zeroed.s0.y274.preheader":            ; preds = %"produce filter_zeroed273"
  br i1 %2983, label %"for filter_zeroed.s0.y274.us.preheader", label %"consume sum_filter293", !prof !387

"for filter_zeroed.s0.y274.us.preheader":         ; preds = %"for filter_zeroed.s0.y274.preheader"
  %3106 = sext i32 %output.s0.c.c.base269 to i64
  br label %"for filter_zeroed.s0.y274.us"

"for filter_zeroed.s0.y274.us":                   ; preds = %"for filter_zeroed.s0.y274.us.preheader", %"end for filter_zeroed.s0.x280.loopexit.us"
  %indvars.iv2107 = phi i64 [ 0, %"for filter_zeroed.s0.y274.us.preheader" ], [ %indvars.iv.next2108, %"end for filter_zeroed.s0.x280.loopexit.us" ]
  %3107 = mul nsw i64 %indvars.iv2107, %3082
  %3108 = mul nsw i64 %indvars.iv2107, %3083
  %3109 = add nsw i64 %3108, %3106
  br label %"for filter_zeroed.s0.x279.us"

"for filter_zeroed.s0.x279.us":                   ; preds = %"for filter_zeroed.s0.y274.us", %"for filter_zeroed.s0.x279.us"
  %indvars.iv2105 = phi i64 [ 0, %"for filter_zeroed.s0.y274.us" ], [ %indvars.iv.next2106, %"for filter_zeroed.s0.x279.us" ]
  %3110 = mul nsw i64 %indvars.iv2105, %2991
  %3111 = add nsw i64 %3110, %3109
  %3112 = getelementptr inbounds i8, i8* %43, i64 %3111
  %3113 = bitcast i8* %3112 to <8 x i8>*
  %3114 = load <8 x i8>, <8 x i8>* %3113, align 1, !tbaa !388
  %3115 = zext <8 x i8> %3114 to <8 x i16>
  %3116 = sub nsw <8 x i16> %3115, %2994
  %3117 = add nsw i64 %indvars.iv2105, %3107
  %3118 = shl nsw i64 %3117, 4
  %3119 = getelementptr inbounds i16, i16* %filter_zeroed272, i64 %3118
  %3120 = bitcast i16* %3119 to <8 x i16>*
  store <8 x i16> %3116, <8 x i16>* %3120, align 16, !tbaa !391
  %3121 = getelementptr inbounds i8, i8* %3112, i64 8
  %3122 = bitcast i8* %3121 to <8 x i8>*
  %3123 = load <8 x i8>, <8 x i8>* %3122, align 1, !tbaa !388
  %3124 = zext <8 x i8> %3123 to <8 x i16>
  %3125 = sub nsw <8 x i16> %3124, %2994
  %3126 = getelementptr inbounds i16, i16* %3119, i64 8
  %3127 = bitcast i16* %3126 to <8 x i16>*
  store <8 x i16> %3125, <8 x i16>* %3127, align 16, !tbaa !391
  %indvars.iv.next2106 = add nuw nsw i64 %indvars.iv2105, 1
  %.not860.us = icmp eq i64 %indvars.iv.next2106, %3081
  br i1 %.not860.us, label %"end for filter_zeroed.s0.x280.loopexit.us", label %"for filter_zeroed.s0.x279.us"

"end for filter_zeroed.s0.x280.loopexit.us":      ; preds = %"for filter_zeroed.s0.x279.us"
  %indvars.iv.next2108 = add nuw nsw i64 %indvars.iv2107, 1
  %.not859.us = icmp eq i64 %indvars.iv.next2108, %3084
  br i1 %.not859.us, label %"for sum_filter.s1.r19$y286.preheader", label %"for filter_zeroed.s0.y274.us"

"for sum_filter.s1.r19$y286.preheader":           ; preds = %"end for filter_zeroed.s0.x280.loopexit.us"
  br i1 %2983, label %"for sum_filter.s1.r19$y286.us", label %"consume sum_filter293", !prof !387

"for sum_filter.s1.r19$y286.us":                  ; preds = %"for sum_filter.s1.r19$y286.preheader", %"end for sum_filter.s1.r19$x291.loopexit.us"
  %indvars.iv2113 = phi i64 [ %indvars.iv.next2114, %"end for sum_filter.s1.r19$x291.loopexit.us" ], [ 0, %"for sum_filter.s1.r19$y286.preheader" ]
  %convolved791.sroa.120.8.us = phi <4 x i32> [ %3146, %"end for sum_filter.s1.r19$x291.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y286.preheader" ]
  %convolved791.sroa.80.8.us = phi <4 x i32> [ %3145, %"end for sum_filter.s1.r19$x291.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y286.preheader" ]
  %convolved791.sroa.40.8.us = phi <4 x i32> [ %3144, %"end for sum_filter.s1.r19$x291.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y286.preheader" ]
  %convolved791.sroa.0.8.us = phi <4 x i32> [ %3143, %"end for sum_filter.s1.r19$x291.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y286.preheader" ]
  %3128 = mul nsw i64 %indvars.iv2113, %3082
  br label %"for sum_filter.s1.r19$x290.us"

"for sum_filter.s1.r19$x290.us":                  ; preds = %"for sum_filter.s1.r19$y286.us", %"for sum_filter.s1.r19$x290.us"
  %indvars.iv2111 = phi i64 [ 0, %"for sum_filter.s1.r19$y286.us" ], [ %indvars.iv.next2112, %"for sum_filter.s1.r19$x290.us" ]
  %convolved791.sroa.120.9.us = phi <4 x i32> [ %convolved791.sroa.120.8.us, %"for sum_filter.s1.r19$y286.us" ], [ %3146, %"for sum_filter.s1.r19$x290.us" ]
  %convolved791.sroa.80.9.us = phi <4 x i32> [ %convolved791.sroa.80.8.us, %"for sum_filter.s1.r19$y286.us" ], [ %3145, %"for sum_filter.s1.r19$x290.us" ]
  %convolved791.sroa.40.9.us = phi <4 x i32> [ %convolved791.sroa.40.8.us, %"for sum_filter.s1.r19$y286.us" ], [ %3144, %"for sum_filter.s1.r19$x290.us" ]
  %convolved791.sroa.0.9.us = phi <4 x i32> [ %convolved791.sroa.0.8.us, %"for sum_filter.s1.r19$y286.us" ], [ %3143, %"for sum_filter.s1.r19$x290.us" ]
  %3129 = shufflevector <4 x i32> %convolved791.sroa.0.9.us, <4 x i32> %convolved791.sroa.40.9.us, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3130 = shufflevector <4 x i32> %convolved791.sroa.80.9.us, <4 x i32> %convolved791.sroa.120.9.us, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3131 = shufflevector <8 x i32> %3129, <8 x i32> %3130, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3132 = add nsw i64 %indvars.iv2111, %3128
  %3133 = shl nsw i64 %3132, 4
  %3134 = getelementptr inbounds i16, i16* %filter_zeroed272, i64 %3133
  %3135 = bitcast i16* %3134 to <8 x i16>*
  %3136 = load <8 x i16>, <8 x i16>* %3135, align 16, !tbaa !391
  %3137 = getelementptr inbounds i16, i16* %3134, i64 8
  %3138 = bitcast i16* %3137 to <8 x i16>*
  %3139 = load <8 x i16>, <8 x i16>* %3138, align 16, !tbaa !391
  %3140 = shufflevector <8 x i16> %3136, <8 x i16> %3139, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3141 = sext <16 x i16> %3140 to <16 x i32>
  %3142 = add nsw <16 x i32> %3131, %3141
  %3143 = shufflevector <16 x i32> %3142, <16 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3144 = shufflevector <16 x i32> %3142, <16 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3145 = shufflevector <16 x i32> %3142, <16 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3146 = shufflevector <16 x i32> %3142, <16 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %indvars.iv.next2112 = add nuw nsw i64 %indvars.iv2111, 1
  %.not858.us = icmp eq i64 %indvars.iv.next2112, %3081
  br i1 %.not858.us, label %"end for sum_filter.s1.r19$x291.loopexit.us", label %"for sum_filter.s1.r19$x290.us"

"end for sum_filter.s1.r19$x291.loopexit.us":     ; preds = %"for sum_filter.s1.r19$x290.us"
  %indvars.iv.next2114 = add nuw nsw i64 %indvars.iv2113, 1
  %.not857.us = icmp eq i64 %indvars.iv.next2114, %3084
  br i1 %.not857.us, label %"consume sum_filter293", label %"for sum_filter.s1.r19$y286.us"

"consume sum_filter293":                          ; preds = %"end for sum_filter.s1.r19$x291.loopexit.us", %"for filter_zeroed.s0.y274.preheader", %"for sum_filter.s1.r19$y286.preheader", %"produce filter_zeroed273"
  %convolved791.sroa.120.11 = phi <4 x i32> [ zeroinitializer, %"produce filter_zeroed273" ], [ zeroinitializer, %"for sum_filter.s1.r19$y286.preheader" ], [ zeroinitializer, %"for filter_zeroed.s0.y274.preheader" ], [ %3146, %"end for sum_filter.s1.r19$x291.loopexit.us" ]
  %convolved791.sroa.80.11 = phi <4 x i32> [ zeroinitializer, %"produce filter_zeroed273" ], [ zeroinitializer, %"for sum_filter.s1.r19$y286.preheader" ], [ zeroinitializer, %"for filter_zeroed.s0.y274.preheader" ], [ %3145, %"end for sum_filter.s1.r19$x291.loopexit.us" ]
  %convolved791.sroa.40.11 = phi <4 x i32> [ zeroinitializer, %"produce filter_zeroed273" ], [ zeroinitializer, %"for sum_filter.s1.r19$y286.preheader" ], [ zeroinitializer, %"for filter_zeroed.s0.y274.preheader" ], [ %3144, %"end for sum_filter.s1.r19$x291.loopexit.us" ]
  %convolved791.sroa.0.11 = phi <4 x i32> [ zeroinitializer, %"produce filter_zeroed273" ], [ zeroinitializer, %"for sum_filter.s1.r19$y286.preheader" ], [ zeroinitializer, %"for filter_zeroed.s0.y274.preheader" ], [ %3143, %"end for sum_filter.s1.r19$x291.loopexit.us" ]
  %3147 = sext i32 %output.s0.c.c.base269 to i64
  %3148 = getelementptr inbounds i32, i32* %2995, i64 %3147
  %3149 = bitcast i32* %3148 to <4 x i32>*
  %3150 = load <4 x i32>, <4 x i32>* %3149, align 4, !tbaa !393
  %3151 = getelementptr inbounds i32, i32* %3148, i64 4
  %3152 = bitcast i32* %3151 to <4 x i32>*
  %3153 = load <4 x i32>, <4 x i32>* %3152, align 4, !tbaa !393
  %3154 = getelementptr inbounds i32, i32* %3148, i64 8
  %3155 = bitcast i32* %3154 to <4 x i32>*
  %3156 = load <4 x i32>, <4 x i32>* %3155, align 4, !tbaa !393
  %3157 = getelementptr inbounds i32, i32* %3148, i64 12
  %3158 = bitcast i32* %3157 to <4 x i32>*
  %3159 = load <4 x i32>, <4 x i32>* %3158, align 4, !tbaa !393
  %3160 = shufflevector <4 x i32> %3150, <4 x i32> %3153, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3161 = shufflevector <4 x i32> %3156, <4 x i32> %3159, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3162 = shufflevector <8 x i32> %3160, <8 x i32> %3161, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3163 = shufflevector <4 x i32> %convolved791.sroa.0.11, <4 x i32> %convolved791.sroa.40.11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3164 = shufflevector <4 x i32> %convolved791.sroa.80.11, <4 x i32> %convolved791.sroa.120.11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3165 = shufflevector <8 x i32> %3163, <8 x i32> %3164, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3166 = mul nsw <16 x i32> %3165, %2998
  %3167 = sub nsw <16 x i32> %3162, %3166
  %3168 = shufflevector <16 x i32> %3167, <16 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %3168, <4 x i32>* %2999, align 16, !tbaa !395
  %3169 = shufflevector <16 x i32> %3167, <16 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i32> %3169, <4 x i32>* %3001, align 16, !tbaa !406
  %3170 = shufflevector <16 x i32> %3167, <16 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  store <4 x i32> %3170, <4 x i32>* %3003, align 16, !tbaa !408
  %3171 = shufflevector <16 x i32> %3167, <16 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  store <4 x i32> %3171, <4 x i32>* %3005, align 16, !tbaa !411
  br i1 %3014, label %"for output.s0.b.rebased307.preheader", label %"end for output.s0.b.rebased308", !prof !387

"for output.s0.b.rebased307.preheader":           ; preds = %"consume sum_filter293"
  %3172 = insertelement <16 x i32> undef, i32 %output.s0.c.c.base269, i32 0
  %3173 = shufflevector <16 x i32> %3172, <16 x i32> undef, <16 x i32> zeroinitializer
  %3174 = add nsw <16 x i32> %3173, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %.lobit852 = ashr <16 x i32> %3174, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %3175 = sub nsw <16 x i32> %3174, %.lobit852
  %3176 = and <16 x i32> %.lobit852, %3027
  %3177 = sub i32 %output.s0.c.c.base269, %t2195265
  %3178 = bitcast i16* %filter_zeroed272 to <8 x i16>*
  %3179 = getelementptr inbounds i16, i16* %filter_zeroed272, i64 8
  %3180 = bitcast i16* %3179 to <8 x i16>*
  %3181 = getelementptr inbounds i16, i16* %filter_zeroed272, i64 16
  %3182 = bitcast i16* %3181 to <8 x i16>*
  %3183 = getelementptr inbounds i16, i16* %filter_zeroed272, i64 24
  %3184 = bitcast i16* %3183 to <8 x i16>*
  %3185 = getelementptr inbounds i16, i16* %filter_zeroed272, i64 32
  %3186 = bitcast i16* %3185 to <8 x i16>*
  %3187 = getelementptr inbounds i16, i16* %filter_zeroed272, i64 40
  %3188 = bitcast i16* %3187 to <8 x i16>*
  %3189 = getelementptr inbounds i16, i16* %filter_zeroed272, i64 48
  %3190 = bitcast i16* %3189 to <8 x i16>*
  %3191 = getelementptr inbounds i16, i16* %filter_zeroed272, i64 56
  %3192 = bitcast i16* %3191 to <8 x i16>*
  %3193 = getelementptr inbounds i16, i16* %filter_zeroed272, i64 64
  %3194 = bitcast i16* %3193 to <8 x i16>*
  %3195 = getelementptr inbounds i16, i16* %filter_zeroed272, i64 72
  %3196 = bitcast i16* %3195 to <8 x i16>*
  %3197 = getelementptr inbounds i16, i16* %filter_zeroed272, i64 80
  %3198 = bitcast i16* %3197 to <8 x i16>*
  %3199 = getelementptr inbounds i16, i16* %filter_zeroed272, i64 88
  %3200 = bitcast i16* %3199 to <8 x i16>*
  %3201 = getelementptr inbounds i16, i16* %filter_zeroed272, i64 96
  %3202 = bitcast i16* %3201 to <8 x i16>*
  %3203 = getelementptr inbounds i16, i16* %filter_zeroed272, i64 104
  %3204 = bitcast i16* %3203 to <8 x i16>*
  %3205 = getelementptr inbounds i16, i16* %filter_zeroed272, i64 112
  %3206 = bitcast i16* %3205 to <8 x i16>*
  %3207 = getelementptr inbounds i16, i16* %filter_zeroed272, i64 120
  %3208 = bitcast i16* %3207 to <8 x i16>*
  %3209 = getelementptr inbounds i16, i16* %filter_zeroed272, i64 128
  %3210 = bitcast i16* %3209 to <8 x i16>*
  %3211 = getelementptr inbounds i16, i16* %filter_zeroed272, i64 136
  %3212 = bitcast i16* %3211 to <8 x i16>*
  %3213 = sext i32 %3177 to i64
  br label %"for output.s0.b.rebased307"

"for output.s0.b.rebased307":                     ; preds = %"for output.s0.b.rebased307.preheader", %"end for output.s0.y.yo344"
  %indvars.iv2134 = phi i64 [ 0, %"for output.s0.b.rebased307.preheader" ], [ %indvars.iv.next2135, %"end for output.s0.y.yo344" ]
  %3214 = load i64, i64* %.fca.1.gep721, align 8, !tbaa !381
  %cmp.i1182 = icmp ult i64 %3214, %3018
  %3215 = load i8*, i8** %.fca.0.gep720, align 8, !tbaa !383
  br i1 %cmp.i1182, label %if.then.i1185, label %pseudostack_alloc.exit1198, !prof !384

if.then.i1185:                                    ; preds = %"for output.s0.b.rebased307"
  %tobool1.not.i1184 = icmp ne i8* %3215, null
  %3216 = load i64, i64* %.fca.2.gep722, align 8
  %cmp2.i1187 = icmp ugt i64 %3216, 16384
  %or.cond1397 = and i1 %tobool1.not.i1184, %cmp2.i1187
  br i1 %or.cond1397, label %if.then3.i1189, label %if.end.i1193

if.then3.i1189:                                   ; preds = %if.then.i1185
  call void @halide_free(i8* null, i8* nonnull %3215) #14
  %.pre2147 = load i64, i64* %.fca.2.gep722, align 8, !tbaa !385
  br label %if.end.i1193

if.end.i1193:                                     ; preds = %if.then3.i1189, %if.then.i1185
  %3217 = phi i64 [ %.pre2147, %if.then3.i1189 ], [ %3216, %if.then.i1185 ]
  %add.i1191 = add i64 %3217, %3018
  store i64 %add.i1191, i64* %.fca.2.gep722, align 8, !tbaa !385
  %cmp7.i1192 = icmp ugt i64 %add.i1191, 16384
  br i1 %cmp7.i1192, label %if.then8.i1195, label %if.end11.i1197

if.then8.i1195:                                   ; preds = %if.end.i1193
  %call.i1194 = call i8* @halide_malloc(i8* null, i64 %3018) #14
  br label %if.end11.i1197

if.end11.i1197:                                   ; preds = %if.then8.i1195, %if.end.i1193
  %storemerge.i1196 = phi i8* [ %call.i1194, %if.then8.i1195 ], [ null, %if.end.i1193 ]
  store i8* %storemerge.i1196, i8** %.fca.0.gep720, align 8, !tbaa !383
  store i64 %3018, i64* %.fca.1.gep721, align 8, !tbaa !381
  br label %pseudostack_alloc.exit1198

pseudostack_alloc.exit1198:                       ; preds = %"for output.s0.b.rebased307", %if.end11.i1197
  %3218 = phi i8* [ %storemerge.i1196, %if.end11.i1197 ], [ %3215, %"for output.s0.b.rebased307" ]
  %.not845 = icmp eq i8* %3218, null
  br i1 %.not845, label %then_bb311, label %"produce resampled_input313", !prof !386

"end for output.s0.b.rebased308":                 ; preds = %"end for output.s0.y.yo344", %"consume sum_filter293"
  %.7 = phi i8* [ %.6, %"consume sum_filter293" ], [ %3080, %"end for output.s0.y.yo344" ]
  %3219 = add nuw nsw i32 %output.s0.c.co268, 1
  %.not842 = icmp eq i32 %3219, %t2172261
  br i1 %.not842, label %after_bb236.loopexit, label %"for output.s0.c.co266"

then_bb311:                                       ; preds = %pseudostack_alloc.exit1198
  %3220 = alloca i8*, i64 %3018, align 16
  %3221 = bitcast i8** %3220 to i8*
  store i8** %3220, i8*** %3019, align 8
  br label %"produce resampled_input313"

"produce resampled_input313":                     ; preds = %pseudostack_alloc.exit1198, %then_bb311
  %resampled_input312 = phi i8* [ %3221, %then_bb311 ], [ %3218, %pseudostack_alloc.exit1198 ]
  %3222 = add nsw i64 %indvars.iv2134, %3092
  br i1 %t2194258, label %then_bb315, label %next_bb316

then_bb315:                                       ; preds = %"produce resampled_input313"
  %3223 = mul nsw i64 %3222, %3093
  %3224 = add nsw i64 %3223, %3213
  br i1 %.not2293, label %"for resampled_input.s0.y.rebased320.us", label %"consume resampled_input339", !prof !413

"for resampled_input.s0.y.rebased320.us":         ; preds = %then_bb315, %"end for resampled_input.s0.x.rebased326.loopexit.us"
  %indvars.iv2124 = phi i64 [ %indvars.iv.next2125, %"end for resampled_input.s0.x.rebased326.loopexit.us" ], [ 0, %then_bb315 ]
  %3225 = add nsw i64 %indvars.iv2124, %3086
  %3226 = mul nsw i64 %3225, %3087
  %3227 = add nsw i64 %3226, %3088
  %3228 = add nsw i64 %indvars.iv2124, %3089
  %3229 = mul nsw i64 %3228, %3090
  %3230 = add nsw i64 %3224, %3229
  br label %"for resampled_input.s0.x.rebased325.us"

"for resampled_input.s0.x.rebased325.us":         ; preds = %"for resampled_input.s0.y.rebased320.us", %"for resampled_input.s0.x.rebased325.us"
  %indvars.iv2122 = phi i64 [ 0, %"for resampled_input.s0.y.rebased320.us" ], [ %indvars.iv.next2123, %"for resampled_input.s0.x.rebased325.us" ]
  %3231 = add nsw i64 %indvars.iv2122, %3029
  %3232 = mul nsw i64 %3231, %3030
  %3233 = add nsw i64 %3232, %3230
  %3234 = getelementptr inbounds i8, i8* %50, i64 %3233
  %3235 = bitcast i8* %3234 to <16 x i8>*
  %3236 = load <16 x i8>, <16 x i8>* %3235, align 1, !tbaa !414
  %3237 = add nsw i64 %indvars.iv2122, %3227
  %3238 = shl nsw i64 %3237, 4
  %3239 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3238
  %3240 = bitcast i8* %3239 to <16 x i8>*
  store <16 x i8> %3236, <16 x i8>* %3240, align 16, !tbaa !416
  %indvars.iv.next2123 = add nuw nsw i64 %indvars.iv2122, 1
  %.not856.us = icmp eq i64 %indvars.iv2122, %3085
  br i1 %.not856.us, label %"end for resampled_input.s0.x.rebased326.loopexit.us", label %"for resampled_input.s0.x.rebased325.us"

"end for resampled_input.s0.x.rebased326.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased325.us"
  %indvars.iv.next2125 = add nuw nsw i64 %indvars.iv2124, 1
  %.not855.us = icmp eq i64 %indvars.iv2124, %3091
  br i1 %.not855.us, label %"consume resampled_input339", label %"for resampled_input.s0.y.rebased320.us"

next_bb316:                                       ; preds = %"produce resampled_input313"
  %3241 = trunc i64 %3222 to i32
  %3242 = mul i32 %58, %3241
  %t2244328 = sub i32 %3242, %t2195265
  br i1 %3095, label %"consume resampled_input339", label %"for resampled_input.s0.y.rebased331.preheader.split.us", !prof !418

"for resampled_input.s0.y.rebased331.preheader.split.us": ; preds = %next_bb316
  %3243 = sdiv <16 x i32> %3175, %3023
  %3244 = add nsw <16 x i32> %3243, %3176
  %3245 = and <16 x i32> %3244, %3028
  br label %"for resampled_input.s0.y.rebased331.us"

"for resampled_input.s0.y.rebased331.us":         ; preds = %"end for resampled_input.s0.x.rebased337.loopexit.us", %"for resampled_input.s0.y.rebased331.preheader.split.us"
  %indvars.iv2118 = phi i64 [ %indvars.iv.next2119, %"end for resampled_input.s0.x.rebased337.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased331.preheader.split.us" ]
  %3246 = add nsw i64 %indvars.iv2118, %3086
  %3247 = mul nsw i64 %3246, %3087
  %3248 = add nsw i64 %3247, %3088
  %3249 = trunc i64 %indvars.iv2118 to i32
  %3250 = add i32 %b86, %3249
  %3251 = mul i32 %3250, %55
  %3252 = add i32 %3251, %t2244328
  br label %"for resampled_input.s0.x.rebased336.us"

"for resampled_input.s0.x.rebased336.us":         ; preds = %"for resampled_input.s0.y.rebased331.us", %"for resampled_input.s0.x.rebased336.us"
  %indvars.iv2116 = phi i64 [ 0, %"for resampled_input.s0.y.rebased331.us" ], [ %indvars.iv.next2117, %"for resampled_input.s0.x.rebased336.us" ]
  %3253 = trunc i64 %indvars.iv2116 to i32
  %3254 = add nsw i32 %b84, %3253
  %3255 = mul nsw i32 %3254, %53
  %3256 = add nsw i32 %3252, %3255
  %3257 = insertelement <16 x i32> undef, i32 %3256, i32 0
  %3258 = shufflevector <16 x i32> %3257, <16 x i32> undef, <16 x i32> zeroinitializer
  %3259 = add nsw <16 x i32> %3258, %3245
  %3260 = extractelement <16 x i32> %3259, i32 0
  %3261 = sext i32 %3260 to i64
  %3262 = getelementptr inbounds i8, i8* %50, i64 %3261
  %3263 = load i8, i8* %3262, align 1, !tbaa !414
  %3264 = insertelement <16 x i8> undef, i8 %3263, i32 0
  %3265 = extractelement <16 x i32> %3259, i32 1
  %3266 = sext i32 %3265 to i64
  %3267 = getelementptr inbounds i8, i8* %50, i64 %3266
  %3268 = load i8, i8* %3267, align 1, !tbaa !414
  %3269 = insertelement <16 x i8> %3264, i8 %3268, i32 1
  %3270 = extractelement <16 x i32> %3259, i32 2
  %3271 = sext i32 %3270 to i64
  %3272 = getelementptr inbounds i8, i8* %50, i64 %3271
  %3273 = load i8, i8* %3272, align 1, !tbaa !414
  %3274 = insertelement <16 x i8> %3269, i8 %3273, i32 2
  %3275 = extractelement <16 x i32> %3259, i32 3
  %3276 = sext i32 %3275 to i64
  %3277 = getelementptr inbounds i8, i8* %50, i64 %3276
  %3278 = load i8, i8* %3277, align 1, !tbaa !414
  %3279 = insertelement <16 x i8> %3274, i8 %3278, i32 3
  %3280 = extractelement <16 x i32> %3259, i32 4
  %3281 = sext i32 %3280 to i64
  %3282 = getelementptr inbounds i8, i8* %50, i64 %3281
  %3283 = load i8, i8* %3282, align 1, !tbaa !414
  %3284 = insertelement <16 x i8> %3279, i8 %3283, i32 4
  %3285 = extractelement <16 x i32> %3259, i32 5
  %3286 = sext i32 %3285 to i64
  %3287 = getelementptr inbounds i8, i8* %50, i64 %3286
  %3288 = load i8, i8* %3287, align 1, !tbaa !414
  %3289 = insertelement <16 x i8> %3284, i8 %3288, i32 5
  %3290 = extractelement <16 x i32> %3259, i32 6
  %3291 = sext i32 %3290 to i64
  %3292 = getelementptr inbounds i8, i8* %50, i64 %3291
  %3293 = load i8, i8* %3292, align 1, !tbaa !414
  %3294 = insertelement <16 x i8> %3289, i8 %3293, i32 6
  %3295 = extractelement <16 x i32> %3259, i32 7
  %3296 = sext i32 %3295 to i64
  %3297 = getelementptr inbounds i8, i8* %50, i64 %3296
  %3298 = load i8, i8* %3297, align 1, !tbaa !414
  %3299 = insertelement <16 x i8> %3294, i8 %3298, i32 7
  %3300 = extractelement <16 x i32> %3259, i32 8
  %3301 = sext i32 %3300 to i64
  %3302 = getelementptr inbounds i8, i8* %50, i64 %3301
  %3303 = load i8, i8* %3302, align 1, !tbaa !414
  %3304 = insertelement <16 x i8> %3299, i8 %3303, i32 8
  %3305 = extractelement <16 x i32> %3259, i32 9
  %3306 = sext i32 %3305 to i64
  %3307 = getelementptr inbounds i8, i8* %50, i64 %3306
  %3308 = load i8, i8* %3307, align 1, !tbaa !414
  %3309 = insertelement <16 x i8> %3304, i8 %3308, i32 9
  %3310 = extractelement <16 x i32> %3259, i32 10
  %3311 = sext i32 %3310 to i64
  %3312 = getelementptr inbounds i8, i8* %50, i64 %3311
  %3313 = load i8, i8* %3312, align 1, !tbaa !414
  %3314 = insertelement <16 x i8> %3309, i8 %3313, i32 10
  %3315 = extractelement <16 x i32> %3259, i32 11
  %3316 = sext i32 %3315 to i64
  %3317 = getelementptr inbounds i8, i8* %50, i64 %3316
  %3318 = load i8, i8* %3317, align 1, !tbaa !414
  %3319 = insertelement <16 x i8> %3314, i8 %3318, i32 11
  %3320 = extractelement <16 x i32> %3259, i32 12
  %3321 = sext i32 %3320 to i64
  %3322 = getelementptr inbounds i8, i8* %50, i64 %3321
  %3323 = load i8, i8* %3322, align 1, !tbaa !414
  %3324 = insertelement <16 x i8> %3319, i8 %3323, i32 12
  %3325 = extractelement <16 x i32> %3259, i32 13
  %3326 = sext i32 %3325 to i64
  %3327 = getelementptr inbounds i8, i8* %50, i64 %3326
  %3328 = load i8, i8* %3327, align 1, !tbaa !414
  %3329 = insertelement <16 x i8> %3324, i8 %3328, i32 13
  %3330 = extractelement <16 x i32> %3259, i32 14
  %3331 = sext i32 %3330 to i64
  %3332 = getelementptr inbounds i8, i8* %50, i64 %3331
  %3333 = load i8, i8* %3332, align 1, !tbaa !414
  %3334 = insertelement <16 x i8> %3329, i8 %3333, i32 14
  %3335 = extractelement <16 x i32> %3259, i32 15
  %3336 = sext i32 %3335 to i64
  %3337 = getelementptr inbounds i8, i8* %50, i64 %3336
  %3338 = load i8, i8* %3337, align 1, !tbaa !414
  %3339 = insertelement <16 x i8> %3334, i8 %3338, i32 15
  %3340 = add nsw i64 %indvars.iv2116, %3248
  %3341 = shl nsw i64 %3340, 4
  %3342 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3341
  %3343 = bitcast i8* %3342 to <16 x i8>*
  store <16 x i8> %3339, <16 x i8>* %3343, align 16, !tbaa !416
  %indvars.iv.next2117 = add nuw nsw i64 %indvars.iv2116, 1
  %.not854.us = icmp eq i64 %indvars.iv2116, %3085
  br i1 %.not854.us, label %"end for resampled_input.s0.x.rebased337.loopexit.us", label %"for resampled_input.s0.x.rebased336.us"

"end for resampled_input.s0.x.rebased337.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased336.us"
  %indvars.iv.next2119 = add nuw nsw i64 %indvars.iv2118, 1
  %.not851.us = icmp eq i64 %indvars.iv2118, %3091
  br i1 %.not851.us, label %"consume resampled_input339", label %"for resampled_input.s0.y.rebased331.us"

"consume resampled_input339":                     ; preds = %"end for resampled_input.s0.x.rebased337.loopexit.us", %"end for resampled_input.s0.x.rebased326.loopexit.us", %next_bb316, %then_bb315
  %3344 = trunc i64 %3222 to i32
  %3345 = mul i32 %67, %3344
  %t2234306 = add i32 %3345, %output.s0.c.c.base269
  %t2255342 = sub i32 %t2234306, %reass.add1451
  br i1 %3031, label %"for output.s0.y.yo343.preheader", label %"end for output.s0.y.yo344", !prof !387

"for output.s0.y.yo343.preheader":                ; preds = %"consume resampled_input339"
  %3346 = load <4 x i32>, <4 x i32>* %2999, align 16
  %3347 = load <4 x i32>, <4 x i32>* %3001, align 16
  %3348 = load <4 x i32>, <4 x i32>* %3003, align 16
  %3349 = load <4 x i32>, <4 x i32>* %3005, align 16
  br label %"for output.s0.y.yo343"

"for output.s0.y.yo343":                          ; preds = %"for output.s0.y.yo343.preheader", %"end for output.s0.x.xo382"
  %output.s0.y.yo345 = phi i32 [ %3379, %"end for output.s0.x.xo382" ], [ 0, %"for output.s0.y.yo343.preheader" ]
  %a89 = shl nuw nsw i32 %output.s0.y.yo345, 1
  %3350 = icmp slt i32 %a89, %b91
  %output.s0.y.y.base.s346 = select i1 %3350, i32 %a89, i32 %b91
  %t2280347 = add nsw i32 %output.s0.y.y.base.s346, %64
  %t2281348 = add nsw i32 %t2280347, 1
  %t2282349 = mul nsw i32 %t2280347, %stride_y
  %3351 = add nsw i32 %t2282349, %t2254340
  %t2283350 = mul nsw i32 %3351, %a87
  %3352 = add nsw i32 %t2282349, %t2285352
  %t2286353 = mul nsw i32 %3352, %a87
  %t2287354 = mul nsw i32 %t2281348, %stride_y
  %3353 = add nsw i32 %t2287354, %t2254340
  %t2288355 = mul nsw i32 %3353, %a87
  %3354 = add nsw i32 %t2287354, %t2285352
  %t2289356 = mul nsw i32 %3354, %a87
  %t2290357 = sub nsw i32 %t2282349, %t2223301
  %t2291358 = mul nsw i32 %t2290357, %a87
  %t2292359 = sub nsw i32 %t2287354, %t2223301
  %t2293360 = mul nsw i32 %t2292359, %a87
  br i1 %3032, label %"for output.s0.x.xo381.preheader", label %"end for output.s0.x.xo382", !prof !387

"for output.s0.x.xo381.preheader":                ; preds = %"for output.s0.y.yo343"
  %3355 = mul nsw i32 %t2280347, %66
  %t2278380 = add nsw i32 %3355, %t2255342
  %3356 = mul nsw i32 %t2281348, %66
  %t2279379 = add nsw i32 %3356, %t2255342
  %t2274378 = add nsw i32 %t2283350, %t2250341
  %t2272377 = add nsw i32 %t2283350, %t2284351
  %t2267376 = add nsw i32 %t2286353, %t2250341
  %t2265375 = add nsw i32 %t2286353, %t2284351
  %t2275374 = add nsw i32 %t2288355, %t2250341
  %t2273373 = add nsw i32 %t2288355, %t2284351
  %t2268372 = add nsw i32 %t2289356, %t2250341
  %t2266371 = add nsw i32 %t2289356, %t2284351
  %t2260370 = add nsw i32 %t2291358, %t2250341
  %t2258369 = add nsw i32 %t2291358, %t2284351
  %t2261368 = add nsw i32 %t2293360, %t2250341
  %t2259367 = add nsw i32 %t2293360, %t2284351
  %t2270366 = sub nsw i32 %t2283350, %t2225300
  %t2263365 = sub nsw i32 %t2286353, %t2225300
  %t2271364 = sub nsw i32 %t2288355, %t2225300
  %t2264363 = sub nsw i32 %t2289356, %t2225300
  %t2256362 = sub nsw i32 %t2291358, %t2225300
  %t2257361 = sub nsw i32 %t2293360, %t2225300
  %3357 = sext i32 %t2256362 to i64
  %3358 = sext i32 %t2257361 to i64
  %3359 = sext i32 %t2258369 to i64
  %3360 = sext i32 %t2259367 to i64
  %3361 = sext i32 %t2260370 to i64
  %3362 = sext i32 %t2261368 to i64
  %3363 = sext i32 %t2263365 to i64
  %3364 = sext i32 %t2264363 to i64
  %3365 = sext i32 %t2265375 to i64
  %3366 = sext i32 %t2266371 to i64
  %3367 = sext i32 %t2267376 to i64
  %3368 = sext i32 %t2268372 to i64
  %3369 = sext i32 %t2270366 to i64
  %3370 = sext i32 %t2271364 to i64
  %3371 = sext i32 %t2272377 to i64
  %3372 = sext i32 %t2273373 to i64
  %3373 = sext i32 %t2274378 to i64
  %3374 = sext i32 %t2275374 to i64
  %3375 = sext i32 %t2278380 to i64
  %3376 = sext i32 %t2279379 to i64
  br label %"for output.s0.x.xo381"

"end for output.s0.y.yo344":                      ; preds = %"end for output.s0.x.xo382", %"consume resampled_input339"
  %indvars.iv.next2135 = add nuw nsw i64 %indvars.iv2134, 1
  %3377 = icmp eq i64 %indvars.iv.next2135, %zext2137
  br i1 %3377, label %"end for output.s0.b.rebased308", label %"for output.s0.b.rebased307"

"for output.s0.x.xo381":                          ; preds = %"for output.s0.x.xo381.preheader", %"consume convolved406"
  %output.s0.x.xo383 = phi i32 [ %4330, %"consume convolved406" ], [ 0, %"for output.s0.x.xo381.preheader" ]
  %a90 = shl nuw nsw i32 %output.s0.x.xo383, 1
  %3378 = icmp slt i32 %a90, %b92
  %output.s0.x.x.base.s384 = select i1 %3378, i32 %a90, i32 %b92
  br i1 %t2217255, label %then_bb387, label %next_bb388

"end for output.s0.x.xo382.loopexit":             ; preds = %"consume convolved406"
  store <4 x i32> %4224, <4 x i32>* %3033, align 16, !tbaa !419
  store <4 x i32> %4223, <4 x i32>* %3035, align 16, !tbaa !430
  store <4 x i32> %4222, <4 x i32>* %3037, align 16, !tbaa !432
  store <4 x i32> %4221, <4 x i32>* %3039, align 16, !tbaa !435
  store <4 x i32> %4220, <4 x i32>* %3041, align 16, !tbaa !437
  store <4 x i32> %4219, <4 x i32>* %3043, align 16, !tbaa !441
  store <4 x i32> %4218, <4 x i32>* %3045, align 16, !tbaa !443
  store <4 x i32> %4217, <4 x i32>* %3047, align 16, !tbaa !446
  store <4 x i32> %4216, <4 x i32>* %3049, align 16, !tbaa !448
  store <4 x i32> %4215, <4 x i32>* %3051, align 16, !tbaa !453
  store <4 x i32> %4214, <4 x i32>* %3053, align 16, !tbaa !455
  store <4 x i32> %4213, <4 x i32>* %3055, align 16, !tbaa !458
  store <4 x i32> %4212, <4 x i32>* %3057, align 16, !tbaa !460
  store <4 x i32> %4211, <4 x i32>* %3059, align 16, !tbaa !464
  store <4 x i32> %4210, <4 x i32>* %3061, align 16, !tbaa !466
  store <4 x i32> %4209, <4 x i32>* %3063, align 16, !tbaa !469
  br label %"end for output.s0.x.xo382"

"end for output.s0.x.xo382":                      ; preds = %"end for output.s0.x.xo382.loopexit", %"for output.s0.y.yo343"
  %3379 = add nuw nsw i32 %output.s0.y.yo345, 1
  %.not847 = icmp eq i32 %3379, %t2196259
  br i1 %.not847, label %"end for output.s0.y.yo344", label %"for output.s0.y.yo343"

then_bb387:                                       ; preds = %"for output.s0.x.xo381"
  %3380 = load <8 x i16>, <8 x i16>* %3178, align 16, !tbaa !471
  %3381 = load <8 x i16>, <8 x i16>* %3180, align 16, !tbaa !480
  %3382 = shufflevector <8 x i16> %3381, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3383 = sext i32 %output.s0.x.x.base.s384 to i64
  %3384 = add nsw i64 %3383, %3065
  %3385 = mul nsw i64 %3384, %3066
  %3386 = add nsw i64 %3385, %3357
  %3387 = shl nsw i64 %3386, 4
  %3388 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3387
  %3389 = bitcast i8* %3388 to <16 x i8>*
  %3390 = load <16 x i8>, <16 x i8>* %3389, align 16, !tbaa !416
  %3391 = zext <16 x i8> %3390 to <16 x i16>
  %3392 = shufflevector <8 x i16> %3380, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3393 = shufflevector <16 x i16> %3391, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3394 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3392, <4 x i16> %3393)
  %3395 = shufflevector <8 x i16> %3380, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3396 = shufflevector <16 x i16> %3391, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3397 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3395, <4 x i16> %3396)
  %3398 = shufflevector <8 x i16> %3381, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3399 = shufflevector <16 x i16> %3391, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3400 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3398, <4 x i16> %3399)
  %3401 = shufflevector <16 x i16> %3382, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3402 = shufflevector <16 x i16> %3391, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3403 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3401, <4 x i16> %3402)
  %3404 = add nsw <4 x i32> %3394, %3346
  %3405 = add nsw <4 x i32> %3397, %3347
  %3406 = add nsw <4 x i32> %3400, %3348
  %3407 = add nsw <4 x i32> %3403, %3349
  %3408 = add nsw i64 %3384, 1
  %3409 = mul nsw i64 %3408, %3066
  %3410 = add nsw i64 %3409, %3357
  %3411 = shl nsw i64 %3410, 4
  %3412 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3411
  %3413 = bitcast i8* %3412 to <16 x i8>*
  %3414 = load <16 x i8>, <16 x i8>* %3413, align 16, !tbaa !416
  %3415 = zext <16 x i8> %3414 to <16 x i16>
  %3416 = shufflevector <16 x i16> %3415, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3417 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3392, <4 x i16> %3416)
  %3418 = shufflevector <16 x i16> %3415, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3419 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3395, <4 x i16> %3418)
  %3420 = shufflevector <16 x i16> %3415, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3421 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3398, <4 x i16> %3420)
  %3422 = shufflevector <16 x i16> %3415, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3423 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3401, <4 x i16> %3422)
  %3424 = add nsw <4 x i32> %3417, %3346
  %3425 = add nsw <4 x i32> %3419, %3347
  %3426 = add nsw <4 x i32> %3421, %3348
  %3427 = add nsw <4 x i32> %3423, %3349
  %3428 = add nsw i64 %3385, %3358
  %3429 = shl nsw i64 %3428, 4
  %3430 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3429
  %3431 = bitcast i8* %3430 to <16 x i8>*
  %3432 = load <16 x i8>, <16 x i8>* %3431, align 16, !tbaa !416
  %3433 = zext <16 x i8> %3432 to <16 x i16>
  %3434 = shufflevector <16 x i16> %3433, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3435 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3392, <4 x i16> %3434)
  %3436 = shufflevector <16 x i16> %3433, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3437 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3395, <4 x i16> %3436)
  %3438 = shufflevector <16 x i16> %3433, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3439 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3398, <4 x i16> %3438)
  %3440 = shufflevector <16 x i16> %3433, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3441 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3401, <4 x i16> %3440)
  %3442 = add nsw <4 x i32> %3435, %3346
  %3443 = add nsw <4 x i32> %3437, %3347
  %3444 = add nsw <4 x i32> %3439, %3348
  %3445 = add nsw <4 x i32> %3441, %3349
  %3446 = add nsw i64 %3409, %3358
  %3447 = shl nsw i64 %3446, 4
  %3448 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3447
  %3449 = bitcast i8* %3448 to <16 x i8>*
  %3450 = load <16 x i8>, <16 x i8>* %3449, align 16, !tbaa !416
  %3451 = zext <16 x i8> %3450 to <16 x i16>
  %3452 = shufflevector <16 x i16> %3451, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3453 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3392, <4 x i16> %3452)
  %3454 = shufflevector <16 x i16> %3451, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3455 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3395, <4 x i16> %3454)
  %3456 = shufflevector <16 x i16> %3451, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3457 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3398, <4 x i16> %3456)
  %3458 = shufflevector <16 x i16> %3451, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3459 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3401, <4 x i16> %3458)
  %3460 = add nsw <4 x i32> %3453, %3346
  %3461 = add nsw <4 x i32> %3455, %3347
  %3462 = add nsw <4 x i32> %3457, %3348
  %3463 = add nsw <4 x i32> %3459, %3349
  %3464 = load <8 x i16>, <8 x i16>* %3182, align 16, !tbaa !482
  %3465 = load <8 x i16>, <8 x i16>* %3184, align 16, !tbaa !485
  %3466 = shufflevector <8 x i16> %3465, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3467 = add nsw i64 %3385, %3359
  %3468 = shl nsw i64 %3467, 4
  %3469 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3468
  %3470 = bitcast i8* %3469 to <16 x i8>*
  %3471 = load <16 x i8>, <16 x i8>* %3470, align 16, !tbaa !416
  %3472 = zext <16 x i8> %3471 to <16 x i16>
  %3473 = shufflevector <8 x i16> %3464, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3474 = shufflevector <16 x i16> %3472, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3475 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3473, <4 x i16> %3474)
  %3476 = shufflevector <8 x i16> %3464, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3477 = shufflevector <16 x i16> %3472, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3478 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3476, <4 x i16> %3477)
  %3479 = shufflevector <8 x i16> %3465, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3480 = shufflevector <16 x i16> %3472, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3481 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3479, <4 x i16> %3480)
  %3482 = shufflevector <16 x i16> %3466, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3483 = shufflevector <16 x i16> %3472, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3484 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3482, <4 x i16> %3483)
  %3485 = add nsw <4 x i32> %3475, %3404
  %3486 = add nsw <4 x i32> %3478, %3405
  %3487 = add nsw <4 x i32> %3481, %3406
  %3488 = add nsw <4 x i32> %3484, %3407
  %3489 = add nsw i64 %3409, %3359
  %3490 = shl nsw i64 %3489, 4
  %3491 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3490
  %3492 = bitcast i8* %3491 to <16 x i8>*
  %3493 = load <16 x i8>, <16 x i8>* %3492, align 16, !tbaa !416
  %3494 = zext <16 x i8> %3493 to <16 x i16>
  %3495 = shufflevector <16 x i16> %3494, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3496 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3473, <4 x i16> %3495)
  %3497 = shufflevector <16 x i16> %3494, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3498 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3476, <4 x i16> %3497)
  %3499 = shufflevector <16 x i16> %3494, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3500 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3479, <4 x i16> %3499)
  %3501 = shufflevector <16 x i16> %3494, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3502 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3482, <4 x i16> %3501)
  %3503 = add nsw <4 x i32> %3496, %3424
  %3504 = add nsw <4 x i32> %3498, %3425
  %3505 = add nsw <4 x i32> %3500, %3426
  %3506 = add nsw <4 x i32> %3502, %3427
  %3507 = add nsw i64 %3385, %3360
  %3508 = shl nsw i64 %3507, 4
  %3509 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3508
  %3510 = bitcast i8* %3509 to <16 x i8>*
  %3511 = load <16 x i8>, <16 x i8>* %3510, align 16, !tbaa !416
  %3512 = zext <16 x i8> %3511 to <16 x i16>
  %3513 = shufflevector <16 x i16> %3512, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3514 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3473, <4 x i16> %3513)
  %3515 = shufflevector <16 x i16> %3512, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3516 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3476, <4 x i16> %3515)
  %3517 = shufflevector <16 x i16> %3512, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3518 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3479, <4 x i16> %3517)
  %3519 = shufflevector <16 x i16> %3512, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3520 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3482, <4 x i16> %3519)
  %3521 = add nsw <4 x i32> %3514, %3442
  %3522 = add nsw <4 x i32> %3516, %3443
  %3523 = add nsw <4 x i32> %3518, %3444
  %3524 = add nsw <4 x i32> %3520, %3445
  %3525 = add nsw i64 %3409, %3360
  %3526 = shl nsw i64 %3525, 4
  %3527 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3526
  %3528 = bitcast i8* %3527 to <16 x i8>*
  %3529 = load <16 x i8>, <16 x i8>* %3528, align 16, !tbaa !416
  %3530 = zext <16 x i8> %3529 to <16 x i16>
  %3531 = shufflevector <16 x i16> %3530, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3532 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3473, <4 x i16> %3531)
  %3533 = shufflevector <16 x i16> %3530, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3534 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3476, <4 x i16> %3533)
  %3535 = shufflevector <16 x i16> %3530, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3536 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3479, <4 x i16> %3535)
  %3537 = shufflevector <16 x i16> %3530, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3538 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3482, <4 x i16> %3537)
  %3539 = add nsw <4 x i32> %3532, %3460
  %3540 = add nsw <4 x i32> %3534, %3461
  %3541 = add nsw <4 x i32> %3536, %3462
  %3542 = add nsw <4 x i32> %3538, %3463
  %3543 = load <8 x i16>, <8 x i16>* %3186, align 16, !tbaa !487
  %3544 = load <8 x i16>, <8 x i16>* %3188, align 16, !tbaa !491
  %3545 = shufflevector <8 x i16> %3544, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3546 = add nsw i64 %3385, %3361
  %3547 = shl nsw i64 %3546, 4
  %3548 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3547
  %3549 = bitcast i8* %3548 to <16 x i8>*
  %3550 = load <16 x i8>, <16 x i8>* %3549, align 16, !tbaa !416
  %3551 = zext <16 x i8> %3550 to <16 x i16>
  %3552 = shufflevector <8 x i16> %3543, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3553 = shufflevector <16 x i16> %3551, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3554 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3552, <4 x i16> %3553)
  %3555 = shufflevector <8 x i16> %3543, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3556 = shufflevector <16 x i16> %3551, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3557 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3555, <4 x i16> %3556)
  %3558 = shufflevector <8 x i16> %3544, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3559 = shufflevector <16 x i16> %3551, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3560 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3558, <4 x i16> %3559)
  %3561 = shufflevector <16 x i16> %3545, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3562 = shufflevector <16 x i16> %3551, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3563 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3561, <4 x i16> %3562)
  %3564 = add nsw <4 x i32> %3554, %3485
  %3565 = add nsw <4 x i32> %3557, %3486
  %3566 = add nsw <4 x i32> %3560, %3487
  %3567 = add nsw <4 x i32> %3563, %3488
  %3568 = add nsw i64 %3409, %3361
  %3569 = shl nsw i64 %3568, 4
  %3570 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3569
  %3571 = bitcast i8* %3570 to <16 x i8>*
  %3572 = load <16 x i8>, <16 x i8>* %3571, align 16, !tbaa !416
  %3573 = zext <16 x i8> %3572 to <16 x i16>
  %3574 = shufflevector <16 x i16> %3573, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3575 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3552, <4 x i16> %3574)
  %3576 = shufflevector <16 x i16> %3573, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3577 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3555, <4 x i16> %3576)
  %3578 = shufflevector <16 x i16> %3573, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3579 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3558, <4 x i16> %3578)
  %3580 = shufflevector <16 x i16> %3573, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3581 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3561, <4 x i16> %3580)
  %3582 = add nsw <4 x i32> %3575, %3503
  %3583 = add nsw <4 x i32> %3577, %3504
  %3584 = add nsw <4 x i32> %3579, %3505
  %3585 = add nsw <4 x i32> %3581, %3506
  %3586 = add nsw i64 %3385, %3362
  %3587 = shl nsw i64 %3586, 4
  %3588 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3587
  %3589 = bitcast i8* %3588 to <16 x i8>*
  %3590 = load <16 x i8>, <16 x i8>* %3589, align 16, !tbaa !416
  %3591 = zext <16 x i8> %3590 to <16 x i16>
  %3592 = shufflevector <16 x i16> %3591, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3593 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3552, <4 x i16> %3592)
  %3594 = shufflevector <16 x i16> %3591, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3595 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3555, <4 x i16> %3594)
  %3596 = shufflevector <16 x i16> %3591, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3597 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3558, <4 x i16> %3596)
  %3598 = shufflevector <16 x i16> %3591, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3599 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3561, <4 x i16> %3598)
  %3600 = add nsw <4 x i32> %3593, %3521
  %3601 = add nsw <4 x i32> %3595, %3522
  %3602 = add nsw <4 x i32> %3597, %3523
  %3603 = add nsw <4 x i32> %3599, %3524
  %3604 = add nsw i64 %3409, %3362
  %3605 = shl nsw i64 %3604, 4
  %3606 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3605
  %3607 = bitcast i8* %3606 to <16 x i8>*
  %3608 = load <16 x i8>, <16 x i8>* %3607, align 16, !tbaa !416
  %3609 = zext <16 x i8> %3608 to <16 x i16>
  %3610 = shufflevector <16 x i16> %3609, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3611 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3552, <4 x i16> %3610)
  %3612 = shufflevector <16 x i16> %3609, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3613 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3555, <4 x i16> %3612)
  %3614 = shufflevector <16 x i16> %3609, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3615 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3558, <4 x i16> %3614)
  %3616 = shufflevector <16 x i16> %3609, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3617 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3561, <4 x i16> %3616)
  %3618 = add nsw <4 x i32> %3611, %3539
  %3619 = add nsw <4 x i32> %3613, %3540
  %3620 = add nsw <4 x i32> %3615, %3541
  %3621 = add nsw <4 x i32> %3617, %3542
  %3622 = load <8 x i16>, <8 x i16>* %3190, align 16, !tbaa !391
  %3623 = load <8 x i16>, <8 x i16>* %3192, align 16, !tbaa !391
  %3624 = shufflevector <8 x i16> %3623, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3625 = add nsw i64 %3385, %3363
  %3626 = shl nsw i64 %3625, 4
  %3627 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3626
  %3628 = bitcast i8* %3627 to <16 x i8>*
  %3629 = load <16 x i8>, <16 x i8>* %3628, align 16, !tbaa !416
  %3630 = zext <16 x i8> %3629 to <16 x i16>
  %3631 = shufflevector <8 x i16> %3622, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3632 = shufflevector <16 x i16> %3630, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3633 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3631, <4 x i16> %3632)
  %3634 = shufflevector <8 x i16> %3622, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3635 = shufflevector <16 x i16> %3630, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3636 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3634, <4 x i16> %3635)
  %3637 = shufflevector <8 x i16> %3623, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3638 = shufflevector <16 x i16> %3630, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3639 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3637, <4 x i16> %3638)
  %3640 = shufflevector <16 x i16> %3624, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3641 = shufflevector <16 x i16> %3630, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3642 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3640, <4 x i16> %3641)
  %3643 = add nsw <4 x i32> %3633, %3564
  %3644 = add nsw <4 x i32> %3636, %3565
  %3645 = add nsw <4 x i32> %3639, %3566
  %3646 = add nsw <4 x i32> %3642, %3567
  %3647 = add nsw i64 %3409, %3363
  %3648 = shl nsw i64 %3647, 4
  %3649 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3648
  %3650 = bitcast i8* %3649 to <16 x i8>*
  %3651 = load <16 x i8>, <16 x i8>* %3650, align 16, !tbaa !416
  %3652 = zext <16 x i8> %3651 to <16 x i16>
  %3653 = shufflevector <16 x i16> %3652, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3654 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3631, <4 x i16> %3653)
  %3655 = shufflevector <16 x i16> %3652, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3656 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3634, <4 x i16> %3655)
  %3657 = shufflevector <16 x i16> %3652, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3658 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3637, <4 x i16> %3657)
  %3659 = shufflevector <16 x i16> %3652, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3660 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3640, <4 x i16> %3659)
  %3661 = add nsw <4 x i32> %3654, %3582
  %3662 = add nsw <4 x i32> %3656, %3583
  %3663 = add nsw <4 x i32> %3658, %3584
  %3664 = add nsw <4 x i32> %3660, %3585
  %3665 = add nsw i64 %3385, %3364
  %3666 = shl nsw i64 %3665, 4
  %3667 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3666
  %3668 = bitcast i8* %3667 to <16 x i8>*
  %3669 = load <16 x i8>, <16 x i8>* %3668, align 16, !tbaa !416
  %3670 = zext <16 x i8> %3669 to <16 x i16>
  %3671 = shufflevector <16 x i16> %3670, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3672 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3631, <4 x i16> %3671)
  %3673 = shufflevector <16 x i16> %3670, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3674 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3634, <4 x i16> %3673)
  %3675 = shufflevector <16 x i16> %3670, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3676 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3637, <4 x i16> %3675)
  %3677 = shufflevector <16 x i16> %3670, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3678 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3640, <4 x i16> %3677)
  %3679 = add nsw <4 x i32> %3672, %3600
  %3680 = add nsw <4 x i32> %3674, %3601
  %3681 = add nsw <4 x i32> %3676, %3602
  %3682 = add nsw <4 x i32> %3678, %3603
  %3683 = add nsw i64 %3409, %3364
  %3684 = shl nsw i64 %3683, 4
  %3685 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3684
  %3686 = bitcast i8* %3685 to <16 x i8>*
  %3687 = load <16 x i8>, <16 x i8>* %3686, align 16, !tbaa !416
  %3688 = zext <16 x i8> %3687 to <16 x i16>
  %3689 = shufflevector <16 x i16> %3688, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3690 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3631, <4 x i16> %3689)
  %3691 = shufflevector <16 x i16> %3688, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3692 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3634, <4 x i16> %3691)
  %3693 = shufflevector <16 x i16> %3688, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3694 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3637, <4 x i16> %3693)
  %3695 = shufflevector <16 x i16> %3688, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3696 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3640, <4 x i16> %3695)
  %3697 = add nsw <4 x i32> %3690, %3618
  %3698 = add nsw <4 x i32> %3692, %3619
  %3699 = add nsw <4 x i32> %3694, %3620
  %3700 = add nsw <4 x i32> %3696, %3621
  %3701 = load <8 x i16>, <8 x i16>* %3194, align 16, !tbaa !391
  %3702 = load <8 x i16>, <8 x i16>* %3196, align 16, !tbaa !391
  %3703 = shufflevector <8 x i16> %3702, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3704 = add nsw i64 %3385, %3365
  %3705 = shl nsw i64 %3704, 4
  %3706 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3705
  %3707 = bitcast i8* %3706 to <16 x i8>*
  %3708 = load <16 x i8>, <16 x i8>* %3707, align 16, !tbaa !416
  %3709 = zext <16 x i8> %3708 to <16 x i16>
  %3710 = shufflevector <8 x i16> %3701, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3711 = shufflevector <16 x i16> %3709, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3712 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3710, <4 x i16> %3711)
  %3713 = shufflevector <8 x i16> %3701, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3714 = shufflevector <16 x i16> %3709, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3715 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3713, <4 x i16> %3714)
  %3716 = shufflevector <8 x i16> %3702, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3717 = shufflevector <16 x i16> %3709, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3718 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3716, <4 x i16> %3717)
  %3719 = shufflevector <16 x i16> %3703, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3720 = shufflevector <16 x i16> %3709, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3721 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3719, <4 x i16> %3720)
  %3722 = add nsw <4 x i32> %3712, %3643
  %3723 = add nsw <4 x i32> %3715, %3644
  %3724 = add nsw <4 x i32> %3718, %3645
  %3725 = add nsw <4 x i32> %3721, %3646
  %3726 = add nsw i64 %3409, %3365
  %3727 = shl nsw i64 %3726, 4
  %3728 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3727
  %3729 = bitcast i8* %3728 to <16 x i8>*
  %3730 = load <16 x i8>, <16 x i8>* %3729, align 16, !tbaa !416
  %3731 = zext <16 x i8> %3730 to <16 x i16>
  %3732 = shufflevector <16 x i16> %3731, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3733 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3710, <4 x i16> %3732)
  %3734 = shufflevector <16 x i16> %3731, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3735 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3713, <4 x i16> %3734)
  %3736 = shufflevector <16 x i16> %3731, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3737 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3716, <4 x i16> %3736)
  %3738 = shufflevector <16 x i16> %3731, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3739 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3719, <4 x i16> %3738)
  %3740 = add nsw <4 x i32> %3733, %3661
  %3741 = add nsw <4 x i32> %3735, %3662
  %3742 = add nsw <4 x i32> %3737, %3663
  %3743 = add nsw <4 x i32> %3739, %3664
  %3744 = add nsw i64 %3385, %3366
  %3745 = shl nsw i64 %3744, 4
  %3746 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3745
  %3747 = bitcast i8* %3746 to <16 x i8>*
  %3748 = load <16 x i8>, <16 x i8>* %3747, align 16, !tbaa !416
  %3749 = zext <16 x i8> %3748 to <16 x i16>
  %3750 = shufflevector <16 x i16> %3749, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3751 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3710, <4 x i16> %3750)
  %3752 = shufflevector <16 x i16> %3749, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3753 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3713, <4 x i16> %3752)
  %3754 = shufflevector <16 x i16> %3749, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3755 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3716, <4 x i16> %3754)
  %3756 = shufflevector <16 x i16> %3749, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3757 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3719, <4 x i16> %3756)
  %3758 = add nsw <4 x i32> %3751, %3679
  %3759 = add nsw <4 x i32> %3753, %3680
  %3760 = add nsw <4 x i32> %3755, %3681
  %3761 = add nsw <4 x i32> %3757, %3682
  %3762 = add nsw i64 %3409, %3366
  %3763 = shl nsw i64 %3762, 4
  %3764 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3763
  %3765 = bitcast i8* %3764 to <16 x i8>*
  %3766 = load <16 x i8>, <16 x i8>* %3765, align 16, !tbaa !416
  %3767 = zext <16 x i8> %3766 to <16 x i16>
  %3768 = shufflevector <16 x i16> %3767, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3769 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3710, <4 x i16> %3768)
  %3770 = shufflevector <16 x i16> %3767, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3771 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3713, <4 x i16> %3770)
  %3772 = shufflevector <16 x i16> %3767, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3773 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3716, <4 x i16> %3772)
  %3774 = shufflevector <16 x i16> %3767, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3775 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3719, <4 x i16> %3774)
  %3776 = add nsw <4 x i32> %3769, %3697
  %3777 = add nsw <4 x i32> %3771, %3698
  %3778 = add nsw <4 x i32> %3773, %3699
  %3779 = add nsw <4 x i32> %3775, %3700
  %3780 = load <8 x i16>, <8 x i16>* %3198, align 16, !tbaa !391
  %3781 = load <8 x i16>, <8 x i16>* %3200, align 16, !tbaa !391
  %3782 = shufflevector <8 x i16> %3781, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3783 = add nsw i64 %3385, %3367
  %3784 = shl nsw i64 %3783, 4
  %3785 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3784
  %3786 = bitcast i8* %3785 to <16 x i8>*
  %3787 = load <16 x i8>, <16 x i8>* %3786, align 16, !tbaa !416
  %3788 = zext <16 x i8> %3787 to <16 x i16>
  %3789 = shufflevector <8 x i16> %3780, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3790 = shufflevector <16 x i16> %3788, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3791 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3789, <4 x i16> %3790)
  %3792 = shufflevector <8 x i16> %3780, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3793 = shufflevector <16 x i16> %3788, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3794 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3792, <4 x i16> %3793)
  %3795 = shufflevector <8 x i16> %3781, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3796 = shufflevector <16 x i16> %3788, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3797 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3795, <4 x i16> %3796)
  %3798 = shufflevector <16 x i16> %3782, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3799 = shufflevector <16 x i16> %3788, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3800 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3798, <4 x i16> %3799)
  %3801 = add nsw <4 x i32> %3791, %3722
  %3802 = add nsw <4 x i32> %3794, %3723
  %3803 = add nsw <4 x i32> %3797, %3724
  %3804 = add nsw <4 x i32> %3800, %3725
  %3805 = add nsw i64 %3409, %3367
  %3806 = shl nsw i64 %3805, 4
  %3807 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3806
  %3808 = bitcast i8* %3807 to <16 x i8>*
  %3809 = load <16 x i8>, <16 x i8>* %3808, align 16, !tbaa !416
  %3810 = zext <16 x i8> %3809 to <16 x i16>
  %3811 = shufflevector <16 x i16> %3810, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3812 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3789, <4 x i16> %3811)
  %3813 = shufflevector <16 x i16> %3810, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3814 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3792, <4 x i16> %3813)
  %3815 = shufflevector <16 x i16> %3810, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3816 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3795, <4 x i16> %3815)
  %3817 = shufflevector <16 x i16> %3810, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3818 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3798, <4 x i16> %3817)
  %3819 = add nsw <4 x i32> %3812, %3740
  %3820 = add nsw <4 x i32> %3814, %3741
  %3821 = add nsw <4 x i32> %3816, %3742
  %3822 = add nsw <4 x i32> %3818, %3743
  %3823 = add nsw i64 %3385, %3368
  %3824 = shl nsw i64 %3823, 4
  %3825 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3824
  %3826 = bitcast i8* %3825 to <16 x i8>*
  %3827 = load <16 x i8>, <16 x i8>* %3826, align 16, !tbaa !416
  %3828 = zext <16 x i8> %3827 to <16 x i16>
  %3829 = shufflevector <16 x i16> %3828, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3830 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3789, <4 x i16> %3829)
  %3831 = shufflevector <16 x i16> %3828, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3832 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3792, <4 x i16> %3831)
  %3833 = shufflevector <16 x i16> %3828, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3834 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3795, <4 x i16> %3833)
  %3835 = shufflevector <16 x i16> %3828, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3836 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3798, <4 x i16> %3835)
  %3837 = add nsw <4 x i32> %3830, %3758
  %3838 = add nsw <4 x i32> %3832, %3759
  %3839 = add nsw <4 x i32> %3834, %3760
  %3840 = add nsw <4 x i32> %3836, %3761
  %3841 = add nsw i64 %3409, %3368
  %3842 = shl nsw i64 %3841, 4
  %3843 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3842
  %3844 = bitcast i8* %3843 to <16 x i8>*
  %3845 = load <16 x i8>, <16 x i8>* %3844, align 16, !tbaa !416
  %3846 = zext <16 x i8> %3845 to <16 x i16>
  %3847 = shufflevector <16 x i16> %3846, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3848 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3789, <4 x i16> %3847)
  %3849 = shufflevector <16 x i16> %3846, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3850 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3792, <4 x i16> %3849)
  %3851 = shufflevector <16 x i16> %3846, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3852 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3795, <4 x i16> %3851)
  %3853 = shufflevector <16 x i16> %3846, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3854 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3798, <4 x i16> %3853)
  %3855 = add nsw <4 x i32> %3848, %3776
  %3856 = add nsw <4 x i32> %3850, %3777
  %3857 = add nsw <4 x i32> %3852, %3778
  %3858 = add nsw <4 x i32> %3854, %3779
  %3859 = load <8 x i16>, <8 x i16>* %3202, align 16, !tbaa !391
  %3860 = load <8 x i16>, <8 x i16>* %3204, align 16, !tbaa !391
  %3861 = shufflevector <8 x i16> %3860, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3862 = add nsw i64 %3385, %3369
  %3863 = shl nsw i64 %3862, 4
  %3864 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3863
  %3865 = bitcast i8* %3864 to <16 x i8>*
  %3866 = load <16 x i8>, <16 x i8>* %3865, align 16, !tbaa !416
  %3867 = zext <16 x i8> %3866 to <16 x i16>
  %3868 = shufflevector <8 x i16> %3859, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3869 = shufflevector <16 x i16> %3867, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3870 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3868, <4 x i16> %3869)
  %3871 = shufflevector <8 x i16> %3859, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3872 = shufflevector <16 x i16> %3867, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3873 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3871, <4 x i16> %3872)
  %3874 = shufflevector <8 x i16> %3860, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3875 = shufflevector <16 x i16> %3867, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3876 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3874, <4 x i16> %3875)
  %3877 = shufflevector <16 x i16> %3861, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3878 = shufflevector <16 x i16> %3867, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3879 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3877, <4 x i16> %3878)
  %3880 = add nsw <4 x i32> %3870, %3801
  %3881 = add nsw <4 x i32> %3873, %3802
  %3882 = add nsw <4 x i32> %3876, %3803
  %3883 = add nsw <4 x i32> %3879, %3804
  %3884 = add nsw i64 %3409, %3369
  %3885 = shl nsw i64 %3884, 4
  %3886 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3885
  %3887 = bitcast i8* %3886 to <16 x i8>*
  %3888 = load <16 x i8>, <16 x i8>* %3887, align 16, !tbaa !416
  %3889 = zext <16 x i8> %3888 to <16 x i16>
  %3890 = shufflevector <16 x i16> %3889, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3891 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3868, <4 x i16> %3890)
  %3892 = shufflevector <16 x i16> %3889, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3893 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3871, <4 x i16> %3892)
  %3894 = shufflevector <16 x i16> %3889, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3895 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3874, <4 x i16> %3894)
  %3896 = shufflevector <16 x i16> %3889, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3897 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3877, <4 x i16> %3896)
  %3898 = add nsw <4 x i32> %3891, %3819
  %3899 = add nsw <4 x i32> %3893, %3820
  %3900 = add nsw <4 x i32> %3895, %3821
  %3901 = add nsw <4 x i32> %3897, %3822
  %3902 = add nsw i64 %3385, %3370
  %3903 = shl nsw i64 %3902, 4
  %3904 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3903
  %3905 = bitcast i8* %3904 to <16 x i8>*
  %3906 = load <16 x i8>, <16 x i8>* %3905, align 16, !tbaa !416
  %3907 = zext <16 x i8> %3906 to <16 x i16>
  %3908 = shufflevector <16 x i16> %3907, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3909 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3868, <4 x i16> %3908)
  %3910 = shufflevector <16 x i16> %3907, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3911 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3871, <4 x i16> %3910)
  %3912 = shufflevector <16 x i16> %3907, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3913 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3874, <4 x i16> %3912)
  %3914 = shufflevector <16 x i16> %3907, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3915 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3877, <4 x i16> %3914)
  %3916 = add nsw <4 x i32> %3909, %3837
  %3917 = add nsw <4 x i32> %3911, %3838
  %3918 = add nsw <4 x i32> %3913, %3839
  %3919 = add nsw <4 x i32> %3915, %3840
  %3920 = add nsw i64 %3409, %3370
  %3921 = shl nsw i64 %3920, 4
  %3922 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3921
  %3923 = bitcast i8* %3922 to <16 x i8>*
  %3924 = load <16 x i8>, <16 x i8>* %3923, align 16, !tbaa !416
  %3925 = zext <16 x i8> %3924 to <16 x i16>
  %3926 = shufflevector <16 x i16> %3925, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3927 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3868, <4 x i16> %3926)
  %3928 = shufflevector <16 x i16> %3925, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3929 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3871, <4 x i16> %3928)
  %3930 = shufflevector <16 x i16> %3925, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3931 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3874, <4 x i16> %3930)
  %3932 = shufflevector <16 x i16> %3925, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3933 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3877, <4 x i16> %3932)
  %3934 = add nsw <4 x i32> %3927, %3855
  %3935 = add nsw <4 x i32> %3929, %3856
  %3936 = add nsw <4 x i32> %3931, %3857
  %3937 = add nsw <4 x i32> %3933, %3858
  %3938 = load <8 x i16>, <8 x i16>* %3206, align 16, !tbaa !391
  %3939 = load <8 x i16>, <8 x i16>* %3208, align 16, !tbaa !391
  %3940 = shufflevector <8 x i16> %3939, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3941 = add nsw i64 %3385, %3371
  %3942 = shl nsw i64 %3941, 4
  %3943 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3942
  %3944 = bitcast i8* %3943 to <16 x i8>*
  %3945 = load <16 x i8>, <16 x i8>* %3944, align 16, !tbaa !416
  %3946 = zext <16 x i8> %3945 to <16 x i16>
  %3947 = shufflevector <8 x i16> %3938, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3948 = shufflevector <16 x i16> %3946, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3949 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3947, <4 x i16> %3948)
  %3950 = shufflevector <8 x i16> %3938, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3951 = shufflevector <16 x i16> %3946, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3952 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3950, <4 x i16> %3951)
  %3953 = shufflevector <8 x i16> %3939, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3954 = shufflevector <16 x i16> %3946, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3955 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3953, <4 x i16> %3954)
  %3956 = shufflevector <16 x i16> %3940, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3957 = shufflevector <16 x i16> %3946, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3958 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3956, <4 x i16> %3957)
  %3959 = add nsw <4 x i32> %3949, %3880
  %3960 = add nsw <4 x i32> %3952, %3881
  %3961 = add nsw <4 x i32> %3955, %3882
  %3962 = add nsw <4 x i32> %3958, %3883
  %3963 = add nsw i64 %3409, %3371
  %3964 = shl nsw i64 %3963, 4
  %3965 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3964
  %3966 = bitcast i8* %3965 to <16 x i8>*
  %3967 = load <16 x i8>, <16 x i8>* %3966, align 16, !tbaa !416
  %3968 = zext <16 x i8> %3967 to <16 x i16>
  %3969 = shufflevector <16 x i16> %3968, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3970 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3947, <4 x i16> %3969)
  %3971 = shufflevector <16 x i16> %3968, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3972 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3950, <4 x i16> %3971)
  %3973 = shufflevector <16 x i16> %3968, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3974 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3953, <4 x i16> %3973)
  %3975 = shufflevector <16 x i16> %3968, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3976 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3956, <4 x i16> %3975)
  %3977 = add nsw <4 x i32> %3970, %3898
  %3978 = add nsw <4 x i32> %3972, %3899
  %3979 = add nsw <4 x i32> %3974, %3900
  %3980 = add nsw <4 x i32> %3976, %3901
  %3981 = add nsw i64 %3385, %3372
  %3982 = shl nsw i64 %3981, 4
  %3983 = getelementptr inbounds i8, i8* %resampled_input312, i64 %3982
  %3984 = bitcast i8* %3983 to <16 x i8>*
  %3985 = load <16 x i8>, <16 x i8>* %3984, align 16, !tbaa !416
  %3986 = zext <16 x i8> %3985 to <16 x i16>
  %3987 = shufflevector <16 x i16> %3986, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3988 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3947, <4 x i16> %3987)
  %3989 = shufflevector <16 x i16> %3986, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3990 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3950, <4 x i16> %3989)
  %3991 = shufflevector <16 x i16> %3986, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3992 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3953, <4 x i16> %3991)
  %3993 = shufflevector <16 x i16> %3986, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3994 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3956, <4 x i16> %3993)
  %3995 = add nsw <4 x i32> %3988, %3916
  %3996 = add nsw <4 x i32> %3990, %3917
  %3997 = add nsw <4 x i32> %3992, %3918
  %3998 = add nsw <4 x i32> %3994, %3919
  %3999 = add nsw i64 %3409, %3372
  %4000 = shl nsw i64 %3999, 4
  %4001 = getelementptr inbounds i8, i8* %resampled_input312, i64 %4000
  %4002 = bitcast i8* %4001 to <16 x i8>*
  %4003 = load <16 x i8>, <16 x i8>* %4002, align 16, !tbaa !416
  %4004 = zext <16 x i8> %4003 to <16 x i16>
  %4005 = shufflevector <16 x i16> %4004, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4006 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3947, <4 x i16> %4005)
  %4007 = shufflevector <16 x i16> %4004, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4008 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3950, <4 x i16> %4007)
  %4009 = shufflevector <16 x i16> %4004, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4010 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3953, <4 x i16> %4009)
  %4011 = shufflevector <16 x i16> %4004, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4012 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %3956, <4 x i16> %4011)
  %4013 = add nsw <4 x i32> %4006, %3934
  %4014 = add nsw <4 x i32> %4008, %3935
  %4015 = add nsw <4 x i32> %4010, %3936
  %4016 = add nsw <4 x i32> %4012, %3937
  %4017 = load <8 x i16>, <8 x i16>* %3210, align 16, !tbaa !391
  %4018 = load <8 x i16>, <8 x i16>* %3212, align 16, !tbaa !391
  %4019 = shufflevector <8 x i16> %4018, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4020 = add nsw i64 %3385, %3373
  %4021 = shl nsw i64 %4020, 4
  %4022 = getelementptr inbounds i8, i8* %resampled_input312, i64 %4021
  %4023 = bitcast i8* %4022 to <16 x i8>*
  %4024 = load <16 x i8>, <16 x i8>* %4023, align 16, !tbaa !416
  %4025 = zext <16 x i8> %4024 to <16 x i16>
  %4026 = shufflevector <8 x i16> %4017, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4027 = shufflevector <16 x i16> %4025, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4028 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4026, <4 x i16> %4027)
  %4029 = shufflevector <8 x i16> %4017, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4030 = shufflevector <16 x i16> %4025, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4031 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4029, <4 x i16> %4030)
  %4032 = shufflevector <8 x i16> %4018, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4033 = shufflevector <16 x i16> %4025, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4034 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4032, <4 x i16> %4033)
  %4035 = shufflevector <16 x i16> %4019, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4036 = shufflevector <16 x i16> %4025, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4037 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4035, <4 x i16> %4036)
  %4038 = add nsw <4 x i32> %4028, %3959
  %4039 = add nsw <4 x i32> %4031, %3960
  %4040 = add nsw <4 x i32> %4034, %3961
  %4041 = add nsw <4 x i32> %4037, %3962
  %4042 = add nsw i64 %3409, %3373
  %4043 = shl nsw i64 %4042, 4
  %4044 = getelementptr inbounds i8, i8* %resampled_input312, i64 %4043
  %4045 = bitcast i8* %4044 to <16 x i8>*
  %4046 = load <16 x i8>, <16 x i8>* %4045, align 16, !tbaa !416
  %4047 = zext <16 x i8> %4046 to <16 x i16>
  %4048 = shufflevector <16 x i16> %4047, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4049 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4026, <4 x i16> %4048)
  %4050 = shufflevector <16 x i16> %4047, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4051 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4029, <4 x i16> %4050)
  %4052 = shufflevector <16 x i16> %4047, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4053 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4032, <4 x i16> %4052)
  %4054 = shufflevector <16 x i16> %4047, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4055 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4035, <4 x i16> %4054)
  %4056 = add nsw <4 x i32> %4049, %3977
  %4057 = add nsw <4 x i32> %4051, %3978
  %4058 = add nsw <4 x i32> %4053, %3979
  %4059 = add nsw <4 x i32> %4055, %3980
  %4060 = add nsw i64 %3385, %3374
  %4061 = shl nsw i64 %4060, 4
  %4062 = getelementptr inbounds i8, i8* %resampled_input312, i64 %4061
  %4063 = bitcast i8* %4062 to <16 x i8>*
  %4064 = load <16 x i8>, <16 x i8>* %4063, align 16, !tbaa !416
  %4065 = zext <16 x i8> %4064 to <16 x i16>
  %4066 = shufflevector <16 x i16> %4065, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4067 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4026, <4 x i16> %4066)
  %4068 = shufflevector <16 x i16> %4065, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4069 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4029, <4 x i16> %4068)
  %4070 = shufflevector <16 x i16> %4065, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4071 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4032, <4 x i16> %4070)
  %4072 = shufflevector <16 x i16> %4065, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4073 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4035, <4 x i16> %4072)
  %4074 = add nsw <4 x i32> %4067, %3995
  %4075 = add nsw <4 x i32> %4069, %3996
  %4076 = add nsw <4 x i32> %4071, %3997
  %4077 = add nsw <4 x i32> %4073, %3998
  %4078 = add nsw i64 %3409, %3374
  %4079 = shl nsw i64 %4078, 4
  %4080 = getelementptr inbounds i8, i8* %resampled_input312, i64 %4079
  %4081 = bitcast i8* %4080 to <16 x i8>*
  %4082 = load <16 x i8>, <16 x i8>* %4081, align 16, !tbaa !416
  %4083 = zext <16 x i8> %4082 to <16 x i16>
  %4084 = shufflevector <16 x i16> %4083, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4085 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4026, <4 x i16> %4084)
  %4086 = shufflevector <16 x i16> %4083, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4087 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4029, <4 x i16> %4086)
  %4088 = shufflevector <16 x i16> %4083, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4089 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4032, <4 x i16> %4088)
  %4090 = shufflevector <16 x i16> %4083, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4091 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4035, <4 x i16> %4090)
  %4092 = add nsw <4 x i32> %4085, %4013
  %4093 = add nsw <4 x i32> %4087, %4014
  %4094 = add nsw <4 x i32> %4089, %4015
  %4095 = add nsw <4 x i32> %4091, %4016
  br label %"consume convolved406"

next_bb388:                                       ; preds = %"for output.s0.x.xo381"
  %t2296389 = add nsw i32 %output.s0.x.x.base.s384, %61
  %4096 = add nsw i32 %t2296389, 1
  %4097 = mul nsw i32 %4096, %stride_x
  %t2295390 = sub nsw i32 %4097, %t2225300
  %4098 = mul nsw i32 %t2296389, %stride_x
  %t2294391 = sub nsw i32 %4098, %t2225300
  br i1 %2985, label %"for convolved.s1.r19$y392.preheader", label %"consume convolved406", !prof !387

"for convolved.s1.r19$y392.preheader":            ; preds = %next_bb388
  br i1 %2983, label %"for convolved.s1.r19$y392.us", label %"consume convolved406", !prof !387

"for convolved.s1.r19$y392.us":                   ; preds = %"for convolved.s1.r19$y392.preheader", %"end for convolved.s1.r19$x404.loopexit.us"
  %indvars.iv2130 = phi i64 [ %indvars.iv.next2131, %"end for convolved.s1.r19$x404.loopexit.us" ], [ 0, %"for convolved.s1.r19$y392.preheader" ]
  %.lcssa1702.us1735 = phi <4 x i32> [ %4207, %"end for convolved.s1.r19$x404.loopexit.us" ], [ %3349, %"for convolved.s1.r19$y392.preheader" ]
  %.lcssa1700.us1733 = phi <4 x i32> [ %4206, %"end for convolved.s1.r19$x404.loopexit.us" ], [ %3348, %"for convolved.s1.r19$y392.preheader" ]
  %.lcssa1698.us1731 = phi <4 x i32> [ %4205, %"end for convolved.s1.r19$x404.loopexit.us" ], [ %3347, %"for convolved.s1.r19$y392.preheader" ]
  %.lcssa1696.us1729 = phi <4 x i32> [ %4204, %"end for convolved.s1.r19$x404.loopexit.us" ], [ %3346, %"for convolved.s1.r19$y392.preheader" ]
  %.lcssa1694.us1727 = phi <4 x i32> [ %4189, %"end for convolved.s1.r19$x404.loopexit.us" ], [ %3349, %"for convolved.s1.r19$y392.preheader" ]
  %.lcssa1692.us1725 = phi <4 x i32> [ %4188, %"end for convolved.s1.r19$x404.loopexit.us" ], [ %3348, %"for convolved.s1.r19$y392.preheader" ]
  %.lcssa1690.us1723 = phi <4 x i32> [ %4187, %"end for convolved.s1.r19$x404.loopexit.us" ], [ %3347, %"for convolved.s1.r19$y392.preheader" ]
  %.lcssa1688.us1721 = phi <4 x i32> [ %4186, %"end for convolved.s1.r19$x404.loopexit.us" ], [ %3346, %"for convolved.s1.r19$y392.preheader" ]
  %.lcssa1686.us1719 = phi <4 x i32> [ %4171, %"end for convolved.s1.r19$x404.loopexit.us" ], [ %3349, %"for convolved.s1.r19$y392.preheader" ]
  %.lcssa1684.us1717 = phi <4 x i32> [ %4170, %"end for convolved.s1.r19$x404.loopexit.us" ], [ %3348, %"for convolved.s1.r19$y392.preheader" ]
  %.lcssa1682.us1715 = phi <4 x i32> [ %4169, %"end for convolved.s1.r19$x404.loopexit.us" ], [ %3347, %"for convolved.s1.r19$y392.preheader" ]
  %.lcssa1680.us1713 = phi <4 x i32> [ %4168, %"end for convolved.s1.r19$x404.loopexit.us" ], [ %3346, %"for convolved.s1.r19$y392.preheader" ]
  %.lcssa1678.us1711 = phi <4 x i32> [ %4153, %"end for convolved.s1.r19$x404.loopexit.us" ], [ %3349, %"for convolved.s1.r19$y392.preheader" ]
  %.lcssa1676.us1709 = phi <4 x i32> [ %4152, %"end for convolved.s1.r19$x404.loopexit.us" ], [ %3348, %"for convolved.s1.r19$y392.preheader" ]
  %.lcssa1674.us1707 = phi <4 x i32> [ %4151, %"end for convolved.s1.r19$x404.loopexit.us" ], [ %3347, %"for convolved.s1.r19$y392.preheader" ]
  %.lcssa.us17031705 = phi <4 x i32> [ %4150, %"end for convolved.s1.r19$x404.loopexit.us" ], [ %3346, %"for convolved.s1.r19$y392.preheader" ]
  %"convolved.s1.r19$y394.us" = phi i32 [ %4208, %"end for convolved.s1.r19$x404.loopexit.us" ], [ 0, %"for convolved.s1.r19$y392.preheader" ]
  %t2302395.us = mul nsw i32 %"convolved.s1.r19$y394.us", %a120
  %4099 = add nsw i32 %t2302395.us, %t2290357
  %t2303396.us = mul nsw i32 %4099, %a87
  %4100 = add nsw i32 %t2302395.us, %t2292359
  %t2304397.us = mul nsw i32 %4100, %a87
  %4101 = mul nsw i64 %indvars.iv2130, %3082
  %t2301399.us = add nsw i32 %t2304397.us, %t2295390
  %t2300400.us = add nsw i32 %t2304397.us, %t2294391
  %t2299401.us = add nsw i32 %t2303396.us, %t2295390
  %t2298402.us = add nsw i32 %t2303396.us, %t2294391
  %4102 = sext i32 %t2298402.us to i64
  %4103 = sext i32 %t2299401.us to i64
  %4104 = sext i32 %t2300400.us to i64
  %4105 = sext i32 %t2301399.us to i64
  br label %"for convolved.s1.r19$x403.us"

"for convolved.s1.r19$x403.us":                   ; preds = %"for convolved.s1.r19$y392.us", %"for convolved.s1.r19$x403.us"
  %indvars.iv2128 = phi i64 [ 0, %"for convolved.s1.r19$y392.us" ], [ %indvars.iv.next2129, %"for convolved.s1.r19$x403.us" ]
  %4106 = phi <4 x i32> [ %.lcssa1702.us1735, %"for convolved.s1.r19$y392.us" ], [ %4207, %"for convolved.s1.r19$x403.us" ]
  %4107 = phi <4 x i32> [ %.lcssa1700.us1733, %"for convolved.s1.r19$y392.us" ], [ %4206, %"for convolved.s1.r19$x403.us" ]
  %4108 = phi <4 x i32> [ %.lcssa1698.us1731, %"for convolved.s1.r19$y392.us" ], [ %4205, %"for convolved.s1.r19$x403.us" ]
  %4109 = phi <4 x i32> [ %.lcssa1696.us1729, %"for convolved.s1.r19$y392.us" ], [ %4204, %"for convolved.s1.r19$x403.us" ]
  %4110 = phi <4 x i32> [ %.lcssa1694.us1727, %"for convolved.s1.r19$y392.us" ], [ %4189, %"for convolved.s1.r19$x403.us" ]
  %4111 = phi <4 x i32> [ %.lcssa1692.us1725, %"for convolved.s1.r19$y392.us" ], [ %4188, %"for convolved.s1.r19$x403.us" ]
  %4112 = phi <4 x i32> [ %.lcssa1690.us1723, %"for convolved.s1.r19$y392.us" ], [ %4187, %"for convolved.s1.r19$x403.us" ]
  %4113 = phi <4 x i32> [ %.lcssa1688.us1721, %"for convolved.s1.r19$y392.us" ], [ %4186, %"for convolved.s1.r19$x403.us" ]
  %4114 = phi <4 x i32> [ %.lcssa1686.us1719, %"for convolved.s1.r19$y392.us" ], [ %4171, %"for convolved.s1.r19$x403.us" ]
  %4115 = phi <4 x i32> [ %.lcssa1684.us1717, %"for convolved.s1.r19$y392.us" ], [ %4170, %"for convolved.s1.r19$x403.us" ]
  %4116 = phi <4 x i32> [ %.lcssa1682.us1715, %"for convolved.s1.r19$y392.us" ], [ %4169, %"for convolved.s1.r19$x403.us" ]
  %4117 = phi <4 x i32> [ %.lcssa1680.us1713, %"for convolved.s1.r19$y392.us" ], [ %4168, %"for convolved.s1.r19$x403.us" ]
  %4118 = phi <4 x i32> [ %.lcssa1678.us1711, %"for convolved.s1.r19$y392.us" ], [ %4153, %"for convolved.s1.r19$x403.us" ]
  %4119 = phi <4 x i32> [ %.lcssa1676.us1709, %"for convolved.s1.r19$y392.us" ], [ %4152, %"for convolved.s1.r19$x403.us" ]
  %4120 = phi <4 x i32> [ %.lcssa1674.us1707, %"for convolved.s1.r19$y392.us" ], [ %4151, %"for convolved.s1.r19$x403.us" ]
  %4121 = phi <4 x i32> [ %.lcssa.us17031705, %"for convolved.s1.r19$y392.us" ], [ %4150, %"for convolved.s1.r19$x403.us" ]
  %4122 = add nsw i64 %indvars.iv2128, %4101
  %4123 = shl nsw i64 %4122, 4
  %4124 = getelementptr inbounds i16, i16* %filter_zeroed272, i64 %4123
  %4125 = bitcast i16* %4124 to <8 x i16>*
  %4126 = load <8 x i16>, <8 x i16>* %4125, align 16, !tbaa !391
  %4127 = getelementptr inbounds i16, i16* %4124, i64 8
  %4128 = bitcast i16* %4127 to <8 x i16>*
  %4129 = load <8 x i16>, <8 x i16>* %4128, align 16, !tbaa !391
  %4130 = shufflevector <8 x i16> %4129, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4131 = mul nsw i64 %indvars.iv2128, %3064
  %4132 = add nsw i64 %4131, %4102
  %4133 = shl nsw i64 %4132, 4
  %4134 = getelementptr inbounds i8, i8* %resampled_input312, i64 %4133
  %4135 = bitcast i8* %4134 to <16 x i8>*
  %4136 = load <16 x i8>, <16 x i8>* %4135, align 16, !tbaa !416
  %4137 = zext <16 x i8> %4136 to <16 x i16>
  %4138 = shufflevector <8 x i16> %4126, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4139 = shufflevector <16 x i16> %4137, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4140 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4138, <4 x i16> %4139)
  %4141 = shufflevector <8 x i16> %4126, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4142 = shufflevector <16 x i16> %4137, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4143 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4141, <4 x i16> %4142)
  %4144 = shufflevector <8 x i16> %4129, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4145 = shufflevector <16 x i16> %4137, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4146 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4144, <4 x i16> %4145)
  %4147 = shufflevector <16 x i16> %4130, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4148 = shufflevector <16 x i16> %4137, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4149 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4147, <4 x i16> %4148)
  %4150 = add nsw <4 x i32> %4140, %4121
  %4151 = add nsw <4 x i32> %4143, %4120
  %4152 = add nsw <4 x i32> %4146, %4119
  %4153 = add nsw <4 x i32> %4149, %4118
  %4154 = add nsw i64 %4131, %4103
  %4155 = shl nsw i64 %4154, 4
  %4156 = getelementptr inbounds i8, i8* %resampled_input312, i64 %4155
  %4157 = bitcast i8* %4156 to <16 x i8>*
  %4158 = load <16 x i8>, <16 x i8>* %4157, align 16, !tbaa !416
  %4159 = zext <16 x i8> %4158 to <16 x i16>
  %4160 = shufflevector <16 x i16> %4159, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4161 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4138, <4 x i16> %4160)
  %4162 = shufflevector <16 x i16> %4159, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4163 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4141, <4 x i16> %4162)
  %4164 = shufflevector <16 x i16> %4159, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4165 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4144, <4 x i16> %4164)
  %4166 = shufflevector <16 x i16> %4159, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4167 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4147, <4 x i16> %4166)
  %4168 = add nsw <4 x i32> %4161, %4117
  %4169 = add nsw <4 x i32> %4163, %4116
  %4170 = add nsw <4 x i32> %4165, %4115
  %4171 = add nsw <4 x i32> %4167, %4114
  %4172 = add nsw i64 %4131, %4104
  %4173 = shl nsw i64 %4172, 4
  %4174 = getelementptr inbounds i8, i8* %resampled_input312, i64 %4173
  %4175 = bitcast i8* %4174 to <16 x i8>*
  %4176 = load <16 x i8>, <16 x i8>* %4175, align 16, !tbaa !416
  %4177 = zext <16 x i8> %4176 to <16 x i16>
  %4178 = shufflevector <16 x i16> %4177, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4179 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4138, <4 x i16> %4178)
  %4180 = shufflevector <16 x i16> %4177, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4181 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4141, <4 x i16> %4180)
  %4182 = shufflevector <16 x i16> %4177, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4183 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4144, <4 x i16> %4182)
  %4184 = shufflevector <16 x i16> %4177, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4185 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4147, <4 x i16> %4184)
  %4186 = add nsw <4 x i32> %4179, %4113
  %4187 = add nsw <4 x i32> %4181, %4112
  %4188 = add nsw <4 x i32> %4183, %4111
  %4189 = add nsw <4 x i32> %4185, %4110
  %4190 = add nsw i64 %4131, %4105
  %4191 = shl nsw i64 %4190, 4
  %4192 = getelementptr inbounds i8, i8* %resampled_input312, i64 %4191
  %4193 = bitcast i8* %4192 to <16 x i8>*
  %4194 = load <16 x i8>, <16 x i8>* %4193, align 16, !tbaa !416
  %4195 = zext <16 x i8> %4194 to <16 x i16>
  %4196 = shufflevector <16 x i16> %4195, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4197 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4138, <4 x i16> %4196)
  %4198 = shufflevector <16 x i16> %4195, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4199 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4141, <4 x i16> %4198)
  %4200 = shufflevector <16 x i16> %4195, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4201 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4144, <4 x i16> %4200)
  %4202 = shufflevector <16 x i16> %4195, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4203 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4147, <4 x i16> %4202)
  %4204 = add nsw <4 x i32> %4197, %4109
  %4205 = add nsw <4 x i32> %4199, %4108
  %4206 = add nsw <4 x i32> %4201, %4107
  %4207 = add nsw <4 x i32> %4203, %4106
  %indvars.iv.next2129 = add nuw nsw i64 %indvars.iv2128, 1
  %.not850.us = icmp eq i64 %indvars.iv.next2129, %3081
  br i1 %.not850.us, label %"end for convolved.s1.r19$x404.loopexit.us", label %"for convolved.s1.r19$x403.us"

"end for convolved.s1.r19$x404.loopexit.us":      ; preds = %"for convolved.s1.r19$x403.us"
  %indvars.iv.next2131 = add nuw nsw i64 %indvars.iv2130, 1
  %4208 = add nuw nsw i32 %"convolved.s1.r19$y394.us", 1
  %.not849.us = icmp eq i64 %indvars.iv.next2131, %3084
  br i1 %.not849.us, label %"consume convolved406", label %"for convolved.s1.r19$y392.us"

"consume convolved406":                           ; preds = %"end for convolved.s1.r19$x404.loopexit.us", %"for convolved.s1.r19$y392.preheader", %next_bb388, %then_bb387
  %4209 = phi <4 x i32> [ %3349, %next_bb388 ], [ %4095, %then_bb387 ], [ %3349, %"for convolved.s1.r19$y392.preheader" ], [ %4207, %"end for convolved.s1.r19$x404.loopexit.us" ]
  %4210 = phi <4 x i32> [ %3348, %next_bb388 ], [ %4094, %then_bb387 ], [ %3348, %"for convolved.s1.r19$y392.preheader" ], [ %4206, %"end for convolved.s1.r19$x404.loopexit.us" ]
  %4211 = phi <4 x i32> [ %3347, %next_bb388 ], [ %4093, %then_bb387 ], [ %3347, %"for convolved.s1.r19$y392.preheader" ], [ %4205, %"end for convolved.s1.r19$x404.loopexit.us" ]
  %4212 = phi <4 x i32> [ %3346, %next_bb388 ], [ %4092, %then_bb387 ], [ %3346, %"for convolved.s1.r19$y392.preheader" ], [ %4204, %"end for convolved.s1.r19$x404.loopexit.us" ]
  %4213 = phi <4 x i32> [ %3349, %next_bb388 ], [ %4077, %then_bb387 ], [ %3349, %"for convolved.s1.r19$y392.preheader" ], [ %4189, %"end for convolved.s1.r19$x404.loopexit.us" ]
  %4214 = phi <4 x i32> [ %3348, %next_bb388 ], [ %4076, %then_bb387 ], [ %3348, %"for convolved.s1.r19$y392.preheader" ], [ %4188, %"end for convolved.s1.r19$x404.loopexit.us" ]
  %4215 = phi <4 x i32> [ %3347, %next_bb388 ], [ %4075, %then_bb387 ], [ %3347, %"for convolved.s1.r19$y392.preheader" ], [ %4187, %"end for convolved.s1.r19$x404.loopexit.us" ]
  %4216 = phi <4 x i32> [ %3346, %next_bb388 ], [ %4074, %then_bb387 ], [ %3346, %"for convolved.s1.r19$y392.preheader" ], [ %4186, %"end for convolved.s1.r19$x404.loopexit.us" ]
  %4217 = phi <4 x i32> [ %3349, %next_bb388 ], [ %4059, %then_bb387 ], [ %3349, %"for convolved.s1.r19$y392.preheader" ], [ %4171, %"end for convolved.s1.r19$x404.loopexit.us" ]
  %4218 = phi <4 x i32> [ %3348, %next_bb388 ], [ %4058, %then_bb387 ], [ %3348, %"for convolved.s1.r19$y392.preheader" ], [ %4170, %"end for convolved.s1.r19$x404.loopexit.us" ]
  %4219 = phi <4 x i32> [ %3347, %next_bb388 ], [ %4057, %then_bb387 ], [ %3347, %"for convolved.s1.r19$y392.preheader" ], [ %4169, %"end for convolved.s1.r19$x404.loopexit.us" ]
  %4220 = phi <4 x i32> [ %3346, %next_bb388 ], [ %4056, %then_bb387 ], [ %3346, %"for convolved.s1.r19$y392.preheader" ], [ %4168, %"end for convolved.s1.r19$x404.loopexit.us" ]
  %4221 = phi <4 x i32> [ %3349, %next_bb388 ], [ %4041, %then_bb387 ], [ %3349, %"for convolved.s1.r19$y392.preheader" ], [ %4153, %"end for convolved.s1.r19$x404.loopexit.us" ]
  %4222 = phi <4 x i32> [ %3348, %next_bb388 ], [ %4040, %then_bb387 ], [ %3348, %"for convolved.s1.r19$y392.preheader" ], [ %4152, %"end for convolved.s1.r19$x404.loopexit.us" ]
  %4223 = phi <4 x i32> [ %3347, %next_bb388 ], [ %4039, %then_bb387 ], [ %3347, %"for convolved.s1.r19$y392.preheader" ], [ %4151, %"end for convolved.s1.r19$x404.loopexit.us" ]
  %4224 = phi <4 x i32> [ %3346, %next_bb388 ], [ %4038, %then_bb387 ], [ %3346, %"for convolved.s1.r19$y392.preheader" ], [ %4150, %"end for convolved.s1.r19$x404.loopexit.us" ]
  %4225 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %4224, <4 x i32> %3068)
  %4226 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %4223, <4 x i32> %3068)
  %4227 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %4222, <4 x i32> %3068)
  %4228 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %4221, <4 x i32> %3068)
  %4229 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %4225, <4 x i32> %3071)
  %4230 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %4226, <4 x i32> %3071)
  %4231 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %4227, <4 x i32> %3071)
  %4232 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %4228, <4 x i32> %3071)
  %4233 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %4229)
  %4234 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %4230)
  %4235 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %4231)
  %4236 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %4232)
  %4237 = shufflevector <4 x i16> %4233, <4 x i16> %4234, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4238 = shufflevector <4 x i16> %4235, <4 x i16> %4236, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4239 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %4237, <8 x i16> %3074)
  %4240 = shufflevector <16 x i16> %4238, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4241 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %4240, <8 x i16> %3074)
  %4242 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %4239)
  %4243 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %4241)
  %4244 = shufflevector <8 x i8> %4242, <8 x i8> %4243, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4245 = call <16 x i8> @llvm.aarch64.neon.umin.v16i8(<16 x i8> %4244, <16 x i8> %3076)
  %4246 = call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4245, <16 x i8> %3078)
  %4247 = sext i32 %output.s0.x.x.base.s384 to i64
  %4248 = add nsw i64 %4247, %3065
  %4249 = mul nsw i64 %4248, %3079
  %4250 = add nsw i64 %4249, %3375
  %4251 = getelementptr inbounds i8, i8* %59, i64 %4250
  %4252 = bitcast i8* %4251 to <16 x i8>*
  store <16 x i8> %4246, <16 x i8>* %4252, align 1, !tbaa !493
  %4253 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %4220, <4 x i32> %3068)
  %4254 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %4219, <4 x i32> %3068)
  %4255 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %4218, <4 x i32> %3068)
  %4256 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %4217, <4 x i32> %3068)
  %4257 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %4253, <4 x i32> %3071)
  %4258 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %4254, <4 x i32> %3071)
  %4259 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %4255, <4 x i32> %3071)
  %4260 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %4256, <4 x i32> %3071)
  %4261 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %4257)
  %4262 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %4258)
  %4263 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %4259)
  %4264 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %4260)
  %4265 = shufflevector <4 x i16> %4261, <4 x i16> %4262, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4266 = shufflevector <4 x i16> %4263, <4 x i16> %4264, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4267 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %4265, <8 x i16> %3074)
  %4268 = shufflevector <16 x i16> %4266, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4269 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %4268, <8 x i16> %3074)
  %4270 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %4267)
  %4271 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %4269)
  %4272 = shufflevector <8 x i8> %4270, <8 x i8> %4271, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4273 = call <16 x i8> @llvm.aarch64.neon.umin.v16i8(<16 x i8> %4272, <16 x i8> %3076)
  %4274 = call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4273, <16 x i8> %3078)
  %4275 = add nsw i64 %4248, 1
  %4276 = mul nsw i64 %4275, %3079
  %4277 = add nsw i64 %4276, %3375
  %4278 = getelementptr inbounds i8, i8* %59, i64 %4277
  %4279 = bitcast i8* %4278 to <16 x i8>*
  store <16 x i8> %4274, <16 x i8>* %4279, align 1, !tbaa !493
  %4280 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %4216, <4 x i32> %3068)
  %4281 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %4215, <4 x i32> %3068)
  %4282 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %4214, <4 x i32> %3068)
  %4283 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %4213, <4 x i32> %3068)
  %4284 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %4280, <4 x i32> %3071)
  %4285 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %4281, <4 x i32> %3071)
  %4286 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %4282, <4 x i32> %3071)
  %4287 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %4283, <4 x i32> %3071)
  %4288 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %4284)
  %4289 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %4285)
  %4290 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %4286)
  %4291 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %4287)
  %4292 = shufflevector <4 x i16> %4288, <4 x i16> %4289, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4293 = shufflevector <4 x i16> %4290, <4 x i16> %4291, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4294 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %4292, <8 x i16> %3074)
  %4295 = shufflevector <16 x i16> %4293, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4296 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %4295, <8 x i16> %3074)
  %4297 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %4294)
  %4298 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %4296)
  %4299 = shufflevector <8 x i8> %4297, <8 x i8> %4298, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4300 = call <16 x i8> @llvm.aarch64.neon.umin.v16i8(<16 x i8> %4299, <16 x i8> %3076)
  %4301 = call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4300, <16 x i8> %3078)
  %4302 = add nsw i64 %4249, %3376
  %4303 = getelementptr inbounds i8, i8* %59, i64 %4302
  %4304 = bitcast i8* %4303 to <16 x i8>*
  store <16 x i8> %4301, <16 x i8>* %4304, align 1, !tbaa !493
  %4305 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %4212, <4 x i32> %3068)
  %4306 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %4211, <4 x i32> %3068)
  %4307 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %4210, <4 x i32> %3068)
  %4308 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %4209, <4 x i32> %3068)
  %4309 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %4305, <4 x i32> %3071)
  %4310 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %4306, <4 x i32> %3071)
  %4311 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %4307, <4 x i32> %3071)
  %4312 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %4308, <4 x i32> %3071)
  %4313 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %4309)
  %4314 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %4310)
  %4315 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %4311)
  %4316 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %4312)
  %4317 = shufflevector <4 x i16> %4313, <4 x i16> %4314, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4318 = shufflevector <4 x i16> %4315, <4 x i16> %4316, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4319 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %4317, <8 x i16> %3074)
  %4320 = shufflevector <16 x i16> %4318, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4321 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %4320, <8 x i16> %3074)
  %4322 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %4319)
  %4323 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %4321)
  %4324 = shufflevector <8 x i8> %4322, <8 x i8> %4323, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4325 = call <16 x i8> @llvm.aarch64.neon.umin.v16i8(<16 x i8> %4324, <16 x i8> %3076)
  %4326 = call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4325, <16 x i8> %3078)
  %4327 = add nsw i64 %4276, %3376
  %4328 = getelementptr inbounds i8, i8* %59, i64 %4327
  %4329 = bitcast i8* %4328 to <16 x i8>*
  store <16 x i8> %4326, <16 x i8>* %4329, align 1, !tbaa !493
  %4330 = add nuw nsw i32 %output.s0.x.xo383, 1
  %.not848 = icmp eq i32 %4330, %t2197260
  br i1 %.not848, label %"end for output.s0.x.xo382.loopexit", label %"for output.s0.x.xo381"

then_bb407:                                       ; preds = %next_bb238
  %t2330409 = icmp slt i32 %a121, 0
  %4331 = add nsw i32 %46, -1
  %t2331410 = mul nsw i32 %4331, %a121
  %t2332411 = icmp slt i32 %stride_x, 0
  %t2333412 = select i1 %t2330409, i32 %t2331410, i32 0
  %4332 = select i1 %t2332411, i32 %62, i32 1
  %4333 = add i32 %61, -1
  %4334 = add i32 %4333, %4332
  %t2334413 = mul nsw i32 %4334, %stride_x
  %t2335414 = icmp slt i32 %a120, 0
  %4335 = add nsw i32 %48, -1
  %t2336415 = mul nsw i32 %4335, %a120
  %t2337416 = icmp slt i32 %stride_y, 0
  %t2338417 = select i1 %t2335414, i32 %t2336415, i32 0
  %4336 = select i1 %t2337416, i32 %65, i32 1
  %4337 = add i32 %64, -1
  %4338 = add i32 %4337, %4336
  %t2339418 = mul nsw i32 %4338, %stride_y
  %4339 = icmp eq i32 %46, 3
  %4340 = icmp eq i32 %48, 3
  %t2340419 = and i1 %4339, %4340
  %a121.op819 = shl i32 %a121, 1
  %t2341420 = select i1 %t2330409, i32 %a121.op819, i32 0
  %a120.op820 = shl i32 %a120, 1
  %t2342421 = select i1 %t2335414, i32 %a120.op820, i32 0
  %t2325422 = icmp eq i32 %depth_multiplier, 1
  %4341 = add nuw nsw i32 %45, 15
  %t2305423 = ashr i32 %4341, 4
  %4342 = icmp sgt i32 %a120, 0
  %4343 = select i1 %4342, i32 %a120, i32 0
  %t2317424 = shl nuw nsw i32 %4343, 1
  %4344 = icmp sgt i32 %a121, 0
  %4345 = select i1 %4344, i32 %a121, i32 0
  %t2323425 = shl nuw nsw i32 %4345, 1
  %4346 = select i1 %t2340419, i32 %t2342421, i32 %t2338417
  %b105 = add nsw i32 %t2339418, %4346
  %4347 = select i1 %t2340419, i32 %t2341420, i32 %t2333412
  %b104 = add nsw i32 %t2334413, %4347
  %b109 = add nsw i32 %t2339418, %t2338417
  %4348 = select i1 %t2335414, i32 0, i32 %t2336415
  %4349 = add nsw i32 %65, -1
  %4350 = select i1 %t2337416, i32 0, i32 %4349
  %4351 = add nsw i32 %4350, %64
  %4352 = mul nsw i32 %4351, %stride_y
  %b108 = add nsw i32 %4352, %4348
  %b107 = add nsw i32 %t2334413, %t2333412
  %4353 = select i1 %t2330409, i32 0, i32 %t2331410
  %4354 = add nsw i32 %62, -1
  %4355 = select i1 %t2332411, i32 0, i32 %4354
  %4356 = add nsw i32 %4355, %61
  %4357 = mul nsw i32 %4356, %stride_x
  %b106 = add nsw i32 %4357, %4353
  %4358 = mul nsw i32 %55, %54
  %4359 = mul nsw i32 %58, %56
  %4360 = mul nsw i32 %53, %52
  %4361 = add i32 %4358, %4360
  %t2326427 = add i32 %4361, %4359
  %b99 = add nsw i32 %45, -16
  %4362 = icmp sgt i32 %46, 0
  %4363 = select i1 %4362, i32 %46, i32 0
  %t2547 = zext i32 %4363 to i64
  %4364 = icmp sgt i32 %48, 0
  %4365 = select i1 %4364, i32 %48, i32 0
  %t2548 = zext i32 %4365 to i64
  %4366 = shl nuw nsw i64 %t2547, 5
  %4367 = mul i64 %4366, %t2548
  %4368 = or i64 %4367, 6
  %4369 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  %4370 = sext i32 %47 to i64
  %4371 = insertelement <8 x i8> undef, i8 %filter_zero, i32 0
  %4372 = shufflevector <8 x i8> %4371, <8 x i8> undef, <8 x i32> zeroinitializer
  %4373 = zext <8 x i8> %4372 to <8 x i16>
  %4374 = bitcast [64 x i32]* %offset_c559790 to <4 x i32>*
  %4375 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 4
  %4376 = bitcast i32* %4375 to <4 x i32>*
  %4377 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 8
  %4378 = bitcast i32* %4377 to <4 x i32>*
  %4379 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 12
  %4380 = bitcast i32* %4379 to <4 x i32>*
  %4381 = bitcast i8* %42 to i32*
  %4382 = zext i8 %input_zero to i32
  %4383 = insertelement <16 x i32> undef, i32 %4382, i32 0
  %4384 = shufflevector <16 x i32> %4383, <16 x i32> undef, <16 x i32> zeroinitializer
  %4385 = icmp slt i32 %t2333412, %4347
  %t2348457 = select i1 %4385, i32 %b107, i32 %b104
  %4386 = icmp slt i32 %t2338417, %4346
  %t2346458 = select i1 %4386, i32 %b109, i32 %b105
  %4387 = select i1 %t2340419, i32 %t2323425, i32 %4353
  %a104 = add nsw i32 %4357, %4387
  %4388 = icmp sgt i32 %4387, %4353
  %4389 = select i1 %4388, i32 %a104, i32 %b106
  %t2349459 = sub nsw i32 %4389, %t2348457
  %4390 = select i1 %t2340419, i32 %t2317424, i32 %4348
  %a106 = add nsw i32 %4352, %4390
  %4391 = icmp sgt i32 %4390, %4348
  %4392 = select i1 %4391, i32 %a106, i32 %b108
  %t2347460 = sub nsw i32 %4392, %t2346458
  %t2351461 = sub nsw i32 %b106, %b107
  %t2350462 = sub nsw i32 %b108, %b109
  %.neg1439 = mul i32 %66, %64
  %.neg1440 = mul i32 %63, %61
  %.neg1441 = mul i32 %67, %56
  %4393 = icmp sgt i32 %57, 0
  %a111 = add nsw i32 %t2347460, 1
  %a110 = add nsw i32 %t2349459, 1
  %.inv823 = icmp slt i32 %t2349459, 0
  %4394 = select i1 %.inv823, i32 0, i32 %a110
  %t2549 = zext i32 %4394 to i64
  %.inv824 = icmp slt i32 %t2347460, 0
  %4395 = select i1 %.inv824, i32 0, i32 %a111
  %t2550 = zext i32 %4395 to i64
  %t2551 = shl nuw nsw i64 %t2549, 4
  %4396 = mul i64 %t2551, %t2550
  %4397 = or i64 %4396, 3
  %4398 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %t2364486 = sub i32 %b107, %t2348457
  %t2365487 = sub i32 %b109, %t2346458
  %4399 = icmp eq i32 %depth_multiplier, 0
  %t2554 = select i1 %4399, <16 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <16 x i32> zeroinitializer
  %depth_multiplier.lobit = ashr i32 %depth_multiplier, 31
  %4400 = insertelement <16 x i32> undef, i32 %depth_multiplier, i32 0
  %4401 = shufflevector <16 x i32> %4400, <16 x i32> undef, <16 x i32> zeroinitializer
  %4402 = sub nsw <16 x i32> %4401, %t2554
  %4403 = xor i32 %depth_multiplier.lobit, -1
  %4404 = sub nsw i32 %4403, %depth_multiplier.lobit
  %4405 = insertelement <16 x i32> undef, i32 %4404, i32 0
  %4406 = shufflevector <16 x i32> %4405, <16 x i32> undef, <16 x i32> zeroinitializer
  %4407 = xor <16 x i32> %t2554, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %4408 = sext i32 %b107 to i64
  %4409 = sext i32 %53 to i64
  %t2373497 = sub i32 %a120.op820, %t2346458
  %t2369498 = sub nsw i32 %a121.op819, %t2348457
  %4410 = icmp sgt i32 %65, 0
  %t2391506 = sub nsw i32 %a121, %t2348457
  %4411 = sub i32 %a120, %t2346458
  %reass.add1443 = add i32 %.neg1439, %.neg1440
  %reass.add1444 = add i32 %reass.add1443, %.neg1441
  %4412 = icmp sgt i32 %62, 0
  %4413 = bitcast [16 x i32]* %sum_filter792 to <4 x i32>*
  %4414 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter792, i64 0, i64 4
  %4415 = bitcast i32* %4414 to <4 x i32>*
  %4416 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter792, i64 0, i64 8
  %4417 = bitcast i32* %4416 to <4 x i32>*
  %4418 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter792, i64 0, i64 12
  %4419 = bitcast i32* %4418 to <4 x i32>*
  %4420 = sext i32 %a121 to i64
  %4421 = sext i32 %61 to i64
  %4422 = sext i32 %stride_x to i64
  %4423 = insertelement <16 x i32> undef, i32 %output_multiplier, i32 0
  %4424 = shufflevector <16 x i32> %4423, <16 x i32> undef, <4 x i32> zeroinitializer
  %4425 = sub nsw i32 0, %output_shift
  %4426 = insertelement <16 x i32> undef, i32 %4425, i32 0
  %4427 = shufflevector <16 x i32> %4426, <16 x i32> undef, <4 x i32> zeroinitializer
  %4428 = zext i8 %output_zero to i16
  %4429 = insertelement <16 x i16> undef, i16 %4428, i32 0
  %4430 = shufflevector <16 x i16> %4429, <16 x i16> undef, <8 x i32> zeroinitializer
  %4431 = insertelement <16 x i8> undef, i8 %output_max, i32 0
  %4432 = shufflevector <16 x i8> %4431, <16 x i8> undef, <16 x i32> zeroinitializer
  %4433 = insertelement <16 x i8> undef, i8 %output_min, i32 0
  %4434 = shufflevector <16 x i8> %4433, <16 x i8> undef, <16 x i32> zeroinitializer
  %4435 = sext i32 %63 to i64
  %4436 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  %4437 = zext i32 %46 to i64
  %4438 = sext i32 %46 to i64
  %4439 = sext i32 %49 to i64
  %4440 = zext i32 %48 to i64
  %4441 = zext i32 %t2351461 to i64
  %4442 = sext i32 %t2365487 to i64
  %4443 = sext i32 %a110 to i64
  %4444 = sext i32 %t2364486 to i64
  %4445 = sext i32 %b109 to i64
  %4446 = sext i32 %55 to i64
  %4447 = zext i32 %t2350462 to i64
  %4448 = zext i32 %62 to i64
  %4449 = sext i32 %64 to i64
  %4450 = sext i32 %stride_y to i64
  %4451 = sext i32 %t2373497 to i64
  %4452 = sext i32 %t2348457 to i64
  %4453 = sext i32 %4411 to i64
  %4454 = sext i32 %t2346458 to i64
  %4455 = zext i32 %65 to i64
  %4456 = sext i32 %56 to i64
  %4457 = sext i32 %58 to i64
  %4458 = bitcast [64 x i32]* %offset_c559790 to i8*
  %4459 = bitcast [64 x i32]* %offset_c559790 to i8*
  %4460 = bitcast [64 x i32]* %offset_c559790 to i8*
  %zext2104 = zext i32 %57 to i64
  %4461 = or i32 %t2350462, %t2351461
  %4462 = icmp slt i32 %4461, 0
  %4463 = or i32 %t2350462, %t2351461
  %.not2292 = icmp sgt i32 %4463, -1
  br label %"for output.s0.c.co428"

next_bb408:                                       ; preds = %next_bb238
  %4464 = icmp sgt i32 %45, 0
  br i1 %4464, label %then_bb537, label %after_bb236

"for output.s0.c.co428":                          ; preds = %then_bb407, %"end for output.s0.b.rebased465"
  %.8 = phi i8* [ %.01331, %then_bb407 ], [ %.9, %"end for output.s0.b.rebased465" ]
  %output.s0.c.co430 = phi i32 [ 0, %then_bb407 ], [ %4595, %"end for output.s0.b.rebased465" ]
  %a97 = shl nsw i32 %output.s0.c.co430, 4
  %4465 = icmp slt i32 %a97, %b99
  %output.s0.c.c.base431 = select i1 %4465, i32 %a97, i32 %b99
  %4466 = load i64, i64* %.fca.1.gep, align 8, !tbaa !381
  %cmp.i1200 = icmp ult i64 %4466, %4368
  %4467 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !383
  br i1 %cmp.i1200, label %if.then.i1203, label %pseudostack_alloc.exit1216, !prof !384

if.then.i1203:                                    ; preds = %"for output.s0.c.co428"
  %tobool1.not.i1202 = icmp ne i8* %4467, null
  %4468 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i1205 = icmp ugt i64 %4468, 16384
  %or.cond1398 = and i1 %tobool1.not.i1202, %cmp2.i1205
  br i1 %or.cond1398, label %if.then3.i1207, label %if.end.i1211

if.then3.i1207:                                   ; preds = %if.then.i1203
  call void @halide_free(i8* null, i8* nonnull %4467) #14
  %.pre2144 = load i64, i64* %.fca.2.gep, align 8, !tbaa !385
  br label %if.end.i1211

if.end.i1211:                                     ; preds = %if.then3.i1207, %if.then.i1203
  %4469 = phi i64 [ %.pre2144, %if.then3.i1207 ], [ %4468, %if.then.i1203 ]
  %add.i1209 = add i64 %4469, %4368
  store i64 %add.i1209, i64* %.fca.2.gep, align 8, !tbaa !385
  %cmp7.i1210 = icmp ugt i64 %add.i1209, 16384
  br i1 %cmp7.i1210, label %if.then8.i1213, label %if.end11.i1215

if.then8.i1213:                                   ; preds = %if.end.i1211
  %call.i1212 = call i8* @halide_malloc(i8* null, i64 %4368) #14
  br label %if.end11.i1215

if.end11.i1215:                                   ; preds = %if.then8.i1213, %if.end.i1211
  %storemerge.i1214 = phi i8* [ %call.i1212, %if.then8.i1213 ], [ null, %if.end.i1211 ]
  store i8* %storemerge.i1214, i8** %.fca.0.gep, align 8, !tbaa !383
  store i64 %4368, i64* %.fca.1.gep, align 8, !tbaa !381
  br label %pseudostack_alloc.exit1216

pseudostack_alloc.exit1216:                       ; preds = %"for output.s0.c.co428", %if.end11.i1215
  %4470 = phi i8* [ %storemerge.i1214, %if.end11.i1215 ], [ %4467, %"for output.s0.c.co428" ]
  %4471 = bitcast i8* %4470 to i16*
  %.not821 = icmp eq i8* %4470, null
  br i1 %.not821, label %then_bb433, label %"produce filter_zeroed435", !prof !386

then_bb433:                                       ; preds = %pseudostack_alloc.exit1216
  %4472 = alloca i8*, i64 %4368, align 16
  %4473 = bitcast i8** %4472 to i16*
  store i8** %4472, i8*** %4369, align 8
  br label %"produce filter_zeroed435"

"produce filter_zeroed435":                       ; preds = %pseudostack_alloc.exit1216, %then_bb433
  %filter_zeroed434 = phi i16* [ %4473, %then_bb433 ], [ %4471, %pseudostack_alloc.exit1216 ]
  br i1 %4364, label %"for filter_zeroed.s0.y436.preheader", label %"consume sum_filter454.critedge", !prof !387

"for filter_zeroed.s0.y436.preheader":            ; preds = %"produce filter_zeroed435"
  br i1 %4362, label %"for filter_zeroed.s0.y436.us.preheader", label %"for sum_filter.s1.r19$y447.preheader.thread", !prof !387

"for sum_filter.s1.r19$y447.preheader.thread":    ; preds = %"for filter_zeroed.s0.y436.preheader"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(64) %4459, i8 0, i64 64, i1 false)
  br label %"consume sum_filter454"

"for filter_zeroed.s0.y436.us.preheader":         ; preds = %"for filter_zeroed.s0.y436.preheader"
  %4474 = sext i32 %output.s0.c.c.base431 to i64
  br label %"for filter_zeroed.s0.y436.us"

"for filter_zeroed.s0.y436.us":                   ; preds = %"for filter_zeroed.s0.y436.us.preheader", %"end for filter_zeroed.s0.x442.loopexit.us"
  %indvars.iv2056 = phi i64 [ 0, %"for filter_zeroed.s0.y436.us.preheader" ], [ %indvars.iv.next2057, %"end for filter_zeroed.s0.x442.loopexit.us" ]
  %4475 = mul nsw i64 %indvars.iv2056, %4438
  %4476 = mul nsw i64 %indvars.iv2056, %4439
  %4477 = add nsw i64 %4476, %4474
  br label %"for filter_zeroed.s0.x441.us"

"for filter_zeroed.s0.x441.us":                   ; preds = %"for filter_zeroed.s0.y436.us", %"for filter_zeroed.s0.x441.us"
  %indvars.iv2054 = phi i64 [ 0, %"for filter_zeroed.s0.y436.us" ], [ %indvars.iv.next2055, %"for filter_zeroed.s0.x441.us" ]
  %4478 = mul nsw i64 %indvars.iv2054, %4370
  %4479 = add nsw i64 %4478, %4477
  %4480 = getelementptr inbounds i8, i8* %43, i64 %4479
  %4481 = bitcast i8* %4480 to <8 x i8>*
  %4482 = load <8 x i8>, <8 x i8>* %4481, align 1, !tbaa !388
  %4483 = zext <8 x i8> %4482 to <8 x i16>
  %4484 = sub nsw <8 x i16> %4483, %4373
  %4485 = add nsw i64 %indvars.iv2054, %4475
  %4486 = shl nsw i64 %4485, 4
  %4487 = getelementptr inbounds i16, i16* %filter_zeroed434, i64 %4486
  %4488 = bitcast i16* %4487 to <8 x i16>*
  store <8 x i16> %4484, <8 x i16>* %4488, align 16, !tbaa !391
  %4489 = getelementptr inbounds i8, i8* %4480, i64 8
  %4490 = bitcast i8* %4489 to <8 x i8>*
  %4491 = load <8 x i8>, <8 x i8>* %4490, align 1, !tbaa !388
  %4492 = zext <8 x i8> %4491 to <8 x i16>
  %4493 = sub nsw <8 x i16> %4492, %4373
  %4494 = getelementptr inbounds i16, i16* %4487, i64 8
  %4495 = bitcast i16* %4494 to <8 x i16>*
  store <8 x i16> %4493, <8 x i16>* %4495, align 16, !tbaa !391
  %indvars.iv.next2055 = add nuw nsw i64 %indvars.iv2054, 1
  %.not838.us = icmp eq i64 %indvars.iv.next2055, %4437
  br i1 %.not838.us, label %"end for filter_zeroed.s0.x442.loopexit.us", label %"for filter_zeroed.s0.x441.us"

"end for filter_zeroed.s0.x442.loopexit.us":      ; preds = %"for filter_zeroed.s0.x441.us"
  %indvars.iv.next2057 = add nuw nsw i64 %indvars.iv2056, 1
  %.not837.us = icmp eq i64 %indvars.iv.next2057, %4440
  br i1 %.not837.us, label %"for sum_filter.s1.r19$y447.preheader", label %"for filter_zeroed.s0.y436.us"

"for sum_filter.s1.r19$y447.preheader":           ; preds = %"end for filter_zeroed.s0.x442.loopexit.us"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(64) %4460, i8 0, i64 64, i1 false)
  br i1 %4362, label %"for sum_filter.s1.r19$y447.us", label %"consume sum_filter454", !prof !387

"for sum_filter.s1.r19$y447.us":                  ; preds = %"for sum_filter.s1.r19$y447.preheader", %"end for sum_filter.s1.r19$x452.loopexit.us"
  %indvars.iv2062 = phi i64 [ %indvars.iv.next2063, %"end for sum_filter.s1.r19$x452.loopexit.us" ], [ 0, %"for sum_filter.s1.r19$y447.preheader" ]
  %.lcssa1631.us1639 = phi <4 x i32> [ %4518, %"end for sum_filter.s1.r19$x452.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y447.preheader" ]
  %.lcssa1629.us1637 = phi <4 x i32> [ %4517, %"end for sum_filter.s1.r19$x452.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y447.preheader" ]
  %.lcssa1627.us1635 = phi <4 x i32> [ %4516, %"end for sum_filter.s1.r19$x452.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y447.preheader" ]
  %.lcssa1625.us1633 = phi <4 x i32> [ %4515, %"end for sum_filter.s1.r19$x452.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y447.preheader" ]
  %4496 = mul nsw i64 %indvars.iv2062, %4438
  br label %"for sum_filter.s1.r19$x451.us"

"for sum_filter.s1.r19$x451.us":                  ; preds = %"for sum_filter.s1.r19$y447.us", %"for sum_filter.s1.r19$x451.us"
  %indvars.iv2060 = phi i64 [ 0, %"for sum_filter.s1.r19$y447.us" ], [ %indvars.iv.next2061, %"for sum_filter.s1.r19$x451.us" ]
  %4497 = phi <4 x i32> [ %.lcssa1631.us1639, %"for sum_filter.s1.r19$y447.us" ], [ %4518, %"for sum_filter.s1.r19$x451.us" ]
  %4498 = phi <4 x i32> [ %.lcssa1629.us1637, %"for sum_filter.s1.r19$y447.us" ], [ %4517, %"for sum_filter.s1.r19$x451.us" ]
  %4499 = phi <4 x i32> [ %.lcssa1627.us1635, %"for sum_filter.s1.r19$y447.us" ], [ %4516, %"for sum_filter.s1.r19$x451.us" ]
  %4500 = phi <4 x i32> [ %.lcssa1625.us1633, %"for sum_filter.s1.r19$y447.us" ], [ %4515, %"for sum_filter.s1.r19$x451.us" ]
  %4501 = shufflevector <4 x i32> %4500, <4 x i32> %4499, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4502 = shufflevector <4 x i32> %4498, <4 x i32> %4497, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4503 = shufflevector <8 x i32> %4501, <8 x i32> %4502, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4504 = add nsw i64 %indvars.iv2060, %4496
  %4505 = shl nsw i64 %4504, 4
  %4506 = getelementptr inbounds i16, i16* %filter_zeroed434, i64 %4505
  %4507 = bitcast i16* %4506 to <8 x i16>*
  %4508 = load <8 x i16>, <8 x i16>* %4507, align 16, !tbaa !391
  %4509 = getelementptr inbounds i16, i16* %4506, i64 8
  %4510 = bitcast i16* %4509 to <8 x i16>*
  %4511 = load <8 x i16>, <8 x i16>* %4510, align 16, !tbaa !391
  %4512 = shufflevector <8 x i16> %4508, <8 x i16> %4511, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4513 = sext <16 x i16> %4512 to <16 x i32>
  %4514 = add nsw <16 x i32> %4503, %4513
  %4515 = shufflevector <16 x i32> %4514, <16 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4516 = shufflevector <16 x i32> %4514, <16 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4517 = shufflevector <16 x i32> %4514, <16 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4518 = shufflevector <16 x i32> %4514, <16 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %indvars.iv.next2061 = add nuw nsw i64 %indvars.iv2060, 1
  %.not836.us = icmp eq i64 %indvars.iv.next2061, %4437
  br i1 %.not836.us, label %"end for sum_filter.s1.r19$x452.loopexit.us", label %"for sum_filter.s1.r19$x451.us"

"end for sum_filter.s1.r19$x452.loopexit.us":     ; preds = %"for sum_filter.s1.r19$x451.us"
  %indvars.iv.next2063 = add nuw nsw i64 %indvars.iv2062, 1
  %.not835.us = icmp eq i64 %indvars.iv.next2063, %4440
  br i1 %.not835.us, label %"consume sum_filter454.loopexit.split.us", label %"for sum_filter.s1.r19$y447.us"

"consume sum_filter454.loopexit.split.us":        ; preds = %"end for sum_filter.s1.r19$x452.loopexit.us"
  store <4 x i32> %4515, <4 x i32>* %4374, align 16, !tbaa !419
  store <4 x i32> %4516, <4 x i32>* %4376, align 16, !tbaa !430
  store <4 x i32> %4517, <4 x i32>* %4378, align 16, !tbaa !432
  store <4 x i32> %4518, <4 x i32>* %4380, align 16, !tbaa !435
  br label %"consume sum_filter454"

"consume sum_filter454.critedge":                 ; preds = %"produce filter_zeroed435"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(64) %4458, i8 0, i64 64, i1 false)
  br label %"consume sum_filter454"

"consume sum_filter454":                          ; preds = %"for sum_filter.s1.r19$y447.preheader", %"for sum_filter.s1.r19$y447.preheader.thread", %"consume sum_filter454.loopexit.split.us", %"consume sum_filter454.critedge"
  %4519 = phi <4 x i32> [ %4518, %"consume sum_filter454.loopexit.split.us" ], [ zeroinitializer, %"consume sum_filter454.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y447.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y447.preheader" ]
  %4520 = phi <4 x i32> [ %4517, %"consume sum_filter454.loopexit.split.us" ], [ zeroinitializer, %"consume sum_filter454.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y447.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y447.preheader" ]
  %4521 = phi <4 x i32> [ %4516, %"consume sum_filter454.loopexit.split.us" ], [ zeroinitializer, %"consume sum_filter454.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y447.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y447.preheader" ]
  %4522 = phi <4 x i32> [ %4515, %"consume sum_filter454.loopexit.split.us" ], [ zeroinitializer, %"consume sum_filter454.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y447.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y447.preheader" ]
  %4523 = sext i32 %output.s0.c.c.base431 to i64
  %4524 = getelementptr inbounds i32, i32* %4381, i64 %4523
  %4525 = bitcast i32* %4524 to <4 x i32>*
  %4526 = load <4 x i32>, <4 x i32>* %4525, align 4, !tbaa !393
  %4527 = getelementptr inbounds i32, i32* %4524, i64 4
  %4528 = bitcast i32* %4527 to <4 x i32>*
  %4529 = load <4 x i32>, <4 x i32>* %4528, align 4, !tbaa !393
  %4530 = getelementptr inbounds i32, i32* %4524, i64 8
  %4531 = bitcast i32* %4530 to <4 x i32>*
  %4532 = load <4 x i32>, <4 x i32>* %4531, align 4, !tbaa !393
  %4533 = getelementptr inbounds i32, i32* %4524, i64 12
  %4534 = bitcast i32* %4533 to <4 x i32>*
  %4535 = load <4 x i32>, <4 x i32>* %4534, align 4, !tbaa !393
  %4536 = shufflevector <4 x i32> %4526, <4 x i32> %4529, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4537 = shufflevector <4 x i32> %4532, <4 x i32> %4535, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4538 = shufflevector <8 x i32> %4536, <8 x i32> %4537, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4539 = shufflevector <4 x i32> %4522, <4 x i32> %4521, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4540 = shufflevector <4 x i32> %4520, <4 x i32> %4519, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4541 = shufflevector <8 x i32> %4539, <8 x i32> %4540, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4542 = mul nsw <16 x i32> %4541, %4384
  %4543 = sub nsw <16 x i32> %4538, %4542
  %4544 = shufflevector <16 x i32> %4543, <16 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4545 = shufflevector <16 x i32> %4543, <16 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4546 = shufflevector <16 x i32> %4543, <16 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4547 = shufflevector <16 x i32> %4543, <16 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  br i1 %4393, label %"for output.s0.b.rebased464.preheader", label %"end for output.s0.b.rebased465", !prof !387

"for output.s0.b.rebased464.preheader":           ; preds = %"consume sum_filter454"
  %4548 = insertelement <16 x i32> undef, i32 %output.s0.c.c.base431, i32 0
  %4549 = shufflevector <16 x i32> %4548, <16 x i32> undef, <16 x i32> zeroinitializer
  %4550 = add nsw <16 x i32> %4549, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %.lobit = ashr <16 x i32> %4550, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %4551 = sub nsw <16 x i32> %4550, %.lobit
  %4552 = and <16 x i32> %.lobit, %4406
  %4553 = sub i32 %output.s0.c.c.base431, %t2326427
  %4554 = bitcast i16* %filter_zeroed434 to <8 x i16>*
  %4555 = getelementptr inbounds i16, i16* %filter_zeroed434, i64 8
  %4556 = bitcast i16* %4555 to <8 x i16>*
  %4557 = getelementptr inbounds i16, i16* %filter_zeroed434, i64 16
  %4558 = bitcast i16* %4557 to <8 x i16>*
  %4559 = getelementptr inbounds i16, i16* %filter_zeroed434, i64 24
  %4560 = bitcast i16* %4559 to <8 x i16>*
  %4561 = getelementptr inbounds i16, i16* %filter_zeroed434, i64 32
  %4562 = bitcast i16* %4561 to <8 x i16>*
  %4563 = getelementptr inbounds i16, i16* %filter_zeroed434, i64 40
  %4564 = bitcast i16* %4563 to <8 x i16>*
  %4565 = getelementptr inbounds i16, i16* %filter_zeroed434, i64 48
  %4566 = bitcast i16* %4565 to <8 x i16>*
  %4567 = getelementptr inbounds i16, i16* %filter_zeroed434, i64 56
  %4568 = bitcast i16* %4567 to <8 x i16>*
  %4569 = getelementptr inbounds i16, i16* %filter_zeroed434, i64 64
  %4570 = bitcast i16* %4569 to <8 x i16>*
  %4571 = getelementptr inbounds i16, i16* %filter_zeroed434, i64 72
  %4572 = bitcast i16* %4571 to <8 x i16>*
  %4573 = getelementptr inbounds i16, i16* %filter_zeroed434, i64 80
  %4574 = bitcast i16* %4573 to <8 x i16>*
  %4575 = getelementptr inbounds i16, i16* %filter_zeroed434, i64 88
  %4576 = bitcast i16* %4575 to <8 x i16>*
  %4577 = getelementptr inbounds i16, i16* %filter_zeroed434, i64 96
  %4578 = bitcast i16* %4577 to <8 x i16>*
  %4579 = getelementptr inbounds i16, i16* %filter_zeroed434, i64 104
  %4580 = bitcast i16* %4579 to <8 x i16>*
  %4581 = getelementptr inbounds i16, i16* %filter_zeroed434, i64 112
  %4582 = bitcast i16* %4581 to <8 x i16>*
  %4583 = getelementptr inbounds i16, i16* %filter_zeroed434, i64 120
  %4584 = bitcast i16* %4583 to <8 x i16>*
  %4585 = getelementptr inbounds i16, i16* %filter_zeroed434, i64 128
  %4586 = bitcast i16* %4585 to <8 x i16>*
  %4587 = getelementptr inbounds i16, i16* %filter_zeroed434, i64 136
  %4588 = bitcast i16* %4587 to <8 x i16>*
  %4589 = sext i32 %4553 to i64
  br label %"for output.s0.b.rebased464"

"for output.s0.b.rebased464":                     ; preds = %"for output.s0.b.rebased464.preheader", %"end for output.s0.y.yo501"
  %indvars.iv2101 = phi i64 [ 0, %"for output.s0.b.rebased464.preheader" ], [ %indvars.iv.next2102, %"end for output.s0.y.yo501" ]
  %4590 = load i64, i64* %.fca.1.gep721, align 8, !tbaa !381
  %cmp.i1218 = icmp ult i64 %4590, %4397
  %4591 = load i8*, i8** %.fca.0.gep720, align 8, !tbaa !383
  br i1 %cmp.i1218, label %if.then.i1221, label %pseudostack_alloc.exit1234, !prof !384

if.then.i1221:                                    ; preds = %"for output.s0.b.rebased464"
  %tobool1.not.i1220 = icmp ne i8* %4591, null
  %4592 = load i64, i64* %.fca.2.gep722, align 8
  %cmp2.i1223 = icmp ugt i64 %4592, 16384
  %or.cond1399 = and i1 %tobool1.not.i1220, %cmp2.i1223
  br i1 %or.cond1399, label %if.then3.i1225, label %if.end.i1229

if.then3.i1225:                                   ; preds = %if.then.i1221
  call void @halide_free(i8* null, i8* nonnull %4591) #14
  %.pre2145 = load i64, i64* %.fca.2.gep722, align 8, !tbaa !385
  br label %if.end.i1229

if.end.i1229:                                     ; preds = %if.then3.i1225, %if.then.i1221
  %4593 = phi i64 [ %.pre2145, %if.then3.i1225 ], [ %4592, %if.then.i1221 ]
  %add.i1227 = add i64 %4593, %4397
  store i64 %add.i1227, i64* %.fca.2.gep722, align 8, !tbaa !385
  %cmp7.i1228 = icmp ugt i64 %add.i1227, 16384
  br i1 %cmp7.i1228, label %if.then8.i1231, label %if.end11.i1233

if.then8.i1231:                                   ; preds = %if.end.i1229
  %call.i1230 = call i8* @halide_malloc(i8* null, i64 %4397) #14
  br label %if.end11.i1233

if.end11.i1233:                                   ; preds = %if.then8.i1231, %if.end.i1229
  %storemerge.i1232 = phi i8* [ %call.i1230, %if.then8.i1231 ], [ null, %if.end.i1229 ]
  store i8* %storemerge.i1232, i8** %.fca.0.gep720, align 8, !tbaa !383
  store i64 %4397, i64* %.fca.1.gep721, align 8, !tbaa !381
  br label %pseudostack_alloc.exit1234

pseudostack_alloc.exit1234:                       ; preds = %"for output.s0.b.rebased464", %if.end11.i1233
  %4594 = phi i8* [ %storemerge.i1232, %if.end11.i1233 ], [ %4591, %"for output.s0.b.rebased464" ]
  %.not825 = icmp eq i8* %4594, null
  br i1 %.not825, label %then_bb468, label %"produce resampled_input470", !prof !386

"end for output.s0.b.rebased465":                 ; preds = %"end for output.s0.y.yo501", %"consume sum_filter454"
  %.9 = phi i8* [ %.8, %"consume sum_filter454" ], [ %4436, %"end for output.s0.y.yo501" ]
  %4595 = add nuw nsw i32 %output.s0.c.co430, 1
  %.not822 = icmp eq i32 %4595, %t2305423
  br i1 %.not822, label %after_bb236.loopexit1455, label %"for output.s0.c.co428"

then_bb468:                                       ; preds = %pseudostack_alloc.exit1234
  %4596 = alloca i8*, i64 %4397, align 16
  %4597 = bitcast i8** %4596 to i8*
  store i8** %4596, i8*** %4398, align 8
  br label %"produce resampled_input470"

"produce resampled_input470":                     ; preds = %pseudostack_alloc.exit1234, %then_bb468
  %resampled_input469 = phi i8* [ %4597, %then_bb468 ], [ %4594, %pseudostack_alloc.exit1234 ]
  br i1 %t2325422, label %then_bb472, label %next_bb473

then_bb472:                                       ; preds = %"produce resampled_input470"
  %4598 = add nsw i64 %indvars.iv2101, %4456
  %4599 = mul nsw i64 %4598, %4457
  %4600 = add nsw i64 %4599, %4589
  br i1 %.not2292, label %"for resampled_input.s0.y.rebased477.us", label %"consume resampled_input496", !prof !413

"for resampled_input.s0.y.rebased477.us":         ; preds = %then_bb472, %"end for resampled_input.s0.x.rebased483.loopexit.us"
  %indvars.iv2073 = phi i64 [ %indvars.iv.next2074, %"end for resampled_input.s0.x.rebased483.loopexit.us" ], [ 0, %then_bb472 ]
  %4601 = add nsw i64 %indvars.iv2073, %4442
  %4602 = mul nsw i64 %4601, %4443
  %4603 = add nsw i64 %4602, %4444
  %4604 = add nsw i64 %indvars.iv2073, %4445
  %4605 = mul nsw i64 %4604, %4446
  %4606 = add nsw i64 %4600, %4605
  br label %"for resampled_input.s0.x.rebased482.us"

"for resampled_input.s0.x.rebased482.us":         ; preds = %"for resampled_input.s0.y.rebased477.us", %"for resampled_input.s0.x.rebased482.us"
  %indvars.iv2071 = phi i64 [ 0, %"for resampled_input.s0.y.rebased477.us" ], [ %indvars.iv.next2072, %"for resampled_input.s0.x.rebased482.us" ]
  %4607 = add nsw i64 %indvars.iv2071, %4408
  %4608 = mul nsw i64 %4607, %4409
  %4609 = add nsw i64 %4608, %4606
  %4610 = getelementptr inbounds i8, i8* %50, i64 %4609
  %4611 = bitcast i8* %4610 to <16 x i8>*
  %4612 = load <16 x i8>, <16 x i8>* %4611, align 1, !tbaa !414
  %4613 = add nsw i64 %indvars.iv2071, %4603
  %4614 = shl nsw i64 %4613, 4
  %4615 = getelementptr inbounds i8, i8* %resampled_input469, i64 %4614
  %4616 = bitcast i8* %4615 to <16 x i8>*
  store <16 x i8> %4612, <16 x i8>* %4616, align 16, !tbaa !416
  %indvars.iv.next2072 = add nuw nsw i64 %indvars.iv2071, 1
  %.not834.us = icmp eq i64 %indvars.iv2071, %4441
  br i1 %.not834.us, label %"end for resampled_input.s0.x.rebased483.loopexit.us", label %"for resampled_input.s0.x.rebased482.us"

"end for resampled_input.s0.x.rebased483.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased482.us"
  %indvars.iv.next2074 = add nuw nsw i64 %indvars.iv2073, 1
  %.not833.us = icmp eq i64 %indvars.iv2073, %4447
  br i1 %.not833.us, label %"consume resampled_input496", label %"for resampled_input.s0.y.rebased477.us"

next_bb473:                                       ; preds = %"produce resampled_input470"
  %4617 = trunc i64 %indvars.iv2101 to i32
  %4618 = add i32 %56, %4617
  %4619 = mul i32 %4618, %58
  %t2363485 = sub i32 %4619, %t2326427
  br i1 %4462, label %"consume resampled_input496", label %"for resampled_input.s0.y.rebased488.preheader.split.us", !prof !418

"for resampled_input.s0.y.rebased488.preheader.split.us": ; preds = %next_bb473
  %4620 = sdiv <16 x i32> %4551, %4402
  %4621 = add nsw <16 x i32> %4620, %4552
  %4622 = and <16 x i32> %4621, %4407
  br label %"for resampled_input.s0.y.rebased488.us"

"for resampled_input.s0.y.rebased488.us":         ; preds = %"end for resampled_input.s0.x.rebased494.loopexit.us", %"for resampled_input.s0.y.rebased488.preheader.split.us"
  %indvars.iv2067 = phi i64 [ %indvars.iv.next2068, %"end for resampled_input.s0.x.rebased494.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased488.preheader.split.us" ]
  %4623 = add nsw i64 %indvars.iv2067, %4442
  %4624 = mul nsw i64 %4623, %4443
  %4625 = add nsw i64 %4624, %4444
  %4626 = trunc i64 %indvars.iv2067 to i32
  %4627 = add i32 %b109, %4626
  %4628 = mul i32 %4627, %55
  %4629 = add i32 %4628, %t2363485
  br label %"for resampled_input.s0.x.rebased493.us"

"for resampled_input.s0.x.rebased493.us":         ; preds = %"for resampled_input.s0.y.rebased488.us", %"for resampled_input.s0.x.rebased493.us"
  %indvars.iv2065 = phi i64 [ 0, %"for resampled_input.s0.y.rebased488.us" ], [ %indvars.iv.next2066, %"for resampled_input.s0.x.rebased493.us" ]
  %4630 = trunc i64 %indvars.iv2065 to i32
  %4631 = add nsw i32 %b107, %4630
  %4632 = mul nsw i32 %4631, %53
  %4633 = add nsw i32 %4629, %4632
  %4634 = insertelement <16 x i32> undef, i32 %4633, i32 0
  %4635 = shufflevector <16 x i32> %4634, <16 x i32> undef, <16 x i32> zeroinitializer
  %4636 = add nsw <16 x i32> %4635, %4622
  %4637 = extractelement <16 x i32> %4636, i32 0
  %4638 = sext i32 %4637 to i64
  %4639 = getelementptr inbounds i8, i8* %50, i64 %4638
  %4640 = load i8, i8* %4639, align 1, !tbaa !414
  %4641 = insertelement <16 x i8> undef, i8 %4640, i32 0
  %4642 = extractelement <16 x i32> %4636, i32 1
  %4643 = sext i32 %4642 to i64
  %4644 = getelementptr inbounds i8, i8* %50, i64 %4643
  %4645 = load i8, i8* %4644, align 1, !tbaa !414
  %4646 = insertelement <16 x i8> %4641, i8 %4645, i32 1
  %4647 = extractelement <16 x i32> %4636, i32 2
  %4648 = sext i32 %4647 to i64
  %4649 = getelementptr inbounds i8, i8* %50, i64 %4648
  %4650 = load i8, i8* %4649, align 1, !tbaa !414
  %4651 = insertelement <16 x i8> %4646, i8 %4650, i32 2
  %4652 = extractelement <16 x i32> %4636, i32 3
  %4653 = sext i32 %4652 to i64
  %4654 = getelementptr inbounds i8, i8* %50, i64 %4653
  %4655 = load i8, i8* %4654, align 1, !tbaa !414
  %4656 = insertelement <16 x i8> %4651, i8 %4655, i32 3
  %4657 = extractelement <16 x i32> %4636, i32 4
  %4658 = sext i32 %4657 to i64
  %4659 = getelementptr inbounds i8, i8* %50, i64 %4658
  %4660 = load i8, i8* %4659, align 1, !tbaa !414
  %4661 = insertelement <16 x i8> %4656, i8 %4660, i32 4
  %4662 = extractelement <16 x i32> %4636, i32 5
  %4663 = sext i32 %4662 to i64
  %4664 = getelementptr inbounds i8, i8* %50, i64 %4663
  %4665 = load i8, i8* %4664, align 1, !tbaa !414
  %4666 = insertelement <16 x i8> %4661, i8 %4665, i32 5
  %4667 = extractelement <16 x i32> %4636, i32 6
  %4668 = sext i32 %4667 to i64
  %4669 = getelementptr inbounds i8, i8* %50, i64 %4668
  %4670 = load i8, i8* %4669, align 1, !tbaa !414
  %4671 = insertelement <16 x i8> %4666, i8 %4670, i32 6
  %4672 = extractelement <16 x i32> %4636, i32 7
  %4673 = sext i32 %4672 to i64
  %4674 = getelementptr inbounds i8, i8* %50, i64 %4673
  %4675 = load i8, i8* %4674, align 1, !tbaa !414
  %4676 = insertelement <16 x i8> %4671, i8 %4675, i32 7
  %4677 = extractelement <16 x i32> %4636, i32 8
  %4678 = sext i32 %4677 to i64
  %4679 = getelementptr inbounds i8, i8* %50, i64 %4678
  %4680 = load i8, i8* %4679, align 1, !tbaa !414
  %4681 = insertelement <16 x i8> %4676, i8 %4680, i32 8
  %4682 = extractelement <16 x i32> %4636, i32 9
  %4683 = sext i32 %4682 to i64
  %4684 = getelementptr inbounds i8, i8* %50, i64 %4683
  %4685 = load i8, i8* %4684, align 1, !tbaa !414
  %4686 = insertelement <16 x i8> %4681, i8 %4685, i32 9
  %4687 = extractelement <16 x i32> %4636, i32 10
  %4688 = sext i32 %4687 to i64
  %4689 = getelementptr inbounds i8, i8* %50, i64 %4688
  %4690 = load i8, i8* %4689, align 1, !tbaa !414
  %4691 = insertelement <16 x i8> %4686, i8 %4690, i32 10
  %4692 = extractelement <16 x i32> %4636, i32 11
  %4693 = sext i32 %4692 to i64
  %4694 = getelementptr inbounds i8, i8* %50, i64 %4693
  %4695 = load i8, i8* %4694, align 1, !tbaa !414
  %4696 = insertelement <16 x i8> %4691, i8 %4695, i32 11
  %4697 = extractelement <16 x i32> %4636, i32 12
  %4698 = sext i32 %4697 to i64
  %4699 = getelementptr inbounds i8, i8* %50, i64 %4698
  %4700 = load i8, i8* %4699, align 1, !tbaa !414
  %4701 = insertelement <16 x i8> %4696, i8 %4700, i32 12
  %4702 = extractelement <16 x i32> %4636, i32 13
  %4703 = sext i32 %4702 to i64
  %4704 = getelementptr inbounds i8, i8* %50, i64 %4703
  %4705 = load i8, i8* %4704, align 1, !tbaa !414
  %4706 = insertelement <16 x i8> %4701, i8 %4705, i32 13
  %4707 = extractelement <16 x i32> %4636, i32 14
  %4708 = sext i32 %4707 to i64
  %4709 = getelementptr inbounds i8, i8* %50, i64 %4708
  %4710 = load i8, i8* %4709, align 1, !tbaa !414
  %4711 = insertelement <16 x i8> %4706, i8 %4710, i32 14
  %4712 = extractelement <16 x i32> %4636, i32 15
  %4713 = sext i32 %4712 to i64
  %4714 = getelementptr inbounds i8, i8* %50, i64 %4713
  %4715 = load i8, i8* %4714, align 1, !tbaa !414
  %4716 = insertelement <16 x i8> %4711, i8 %4715, i32 15
  %4717 = add nsw i64 %indvars.iv2065, %4625
  %4718 = shl nsw i64 %4717, 4
  %4719 = getelementptr inbounds i8, i8* %resampled_input469, i64 %4718
  %4720 = bitcast i8* %4719 to <16 x i8>*
  store <16 x i8> %4716, <16 x i8>* %4720, align 16, !tbaa !416
  %indvars.iv.next2066 = add nuw nsw i64 %indvars.iv2065, 1
  %.not832.us = icmp eq i64 %indvars.iv2065, %4441
  br i1 %.not832.us, label %"end for resampled_input.s0.x.rebased494.loopexit.us", label %"for resampled_input.s0.x.rebased493.us"

"end for resampled_input.s0.x.rebased494.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased493.us"
  %indvars.iv.next2068 = add nuw nsw i64 %indvars.iv2067, 1
  %.not831.us = icmp eq i64 %indvars.iv2067, %4447
  br i1 %.not831.us, label %"consume resampled_input496", label %"for resampled_input.s0.y.rebased488.us"

"consume resampled_input496":                     ; preds = %"end for resampled_input.s0.x.rebased494.loopexit.us", %"end for resampled_input.s0.x.rebased483.loopexit.us", %next_bb473, %then_bb472
  br i1 %4410, label %"for output.s0.y.yo500.preheader", label %"end for output.s0.y.yo501", !prof !387

"for output.s0.y.yo500.preheader":                ; preds = %"consume resampled_input496"
  %4721 = trunc i64 %indvars.iv2101 to i32
  %4722 = add i32 %56, %4721
  %4723 = mul i32 %4722, %67
  %t2357463 = add i32 %4723, %output.s0.c.c.base431
  br label %"for output.s0.y.yo500"

"for output.s0.y.yo500":                          ; preds = %"for output.s0.y.yo500.preheader", %"end for output.s0.x.xo521"
  %indvars.iv2084 = phi i64 [ 0, %"for output.s0.y.yo500.preheader" ], [ %indvars.iv.next2085, %"end for output.s0.x.xo521" ]
  %output.s0.y.yo502 = phi i32 [ 0, %"for output.s0.y.yo500.preheader" ], [ %4748, %"end for output.s0.x.xo521" ]
  %4724 = add nsw i64 %indvars.iv2084, %4449
  %t2388503 = add nsw i32 %output.s0.y.yo502, %64
  %4725 = mul nsw i64 %4724, %4450
  %t2389504 = mul nsw i32 %t2388503, %stride_y
  %4726 = add nsw i32 %t2373497, %t2389504
  %t2390505 = mul nsw i32 %4726, %a110
  %4727 = add nsw i32 %4411, %t2389504
  %t2392507 = mul nsw i32 %4727, %a110
  %4728 = sub nsw i64 %4725, %4454
  %t2393508 = sub nsw i32 %t2389504, %t2346458
  %t2394509 = mul nsw i32 %t2393508, %a110
  br i1 %4412, label %"for output.s0.x.xo520.preheader", label %"end for output.s0.x.xo521", !prof !387

"for output.s0.x.xo520.preheader":                ; preds = %"for output.s0.y.yo500"
  %4729 = mul nsw i64 %4728, %4443
  %4730 = add nsw i64 %4725, %4453
  %4731 = mul nsw i64 %4730, %4443
  %4732 = add nsw i64 %4725, %4451
  %4733 = mul nsw i64 %4732, %4443
  %4734 = trunc i64 %4724 to i32
  %4735 = mul i32 %66, %4734
  %t2374499 = add i32 %t2357463, %4735
  %t2387519 = sub i32 %t2374499, %reass.add1444
  %t2385518 = add nsw i32 %t2390505, %t2369498
  %t2384517 = add nsw i32 %t2390505, %t2391506
  %t2381516 = add nsw i32 %t2392507, %t2369498
  %t2380515 = add nsw i32 %t2392507, %t2391506
  %t2377514 = add nsw i32 %t2394509, %t2369498
  %t2376513 = add nsw i32 %t2394509, %t2391506
  %4736 = sub nsw i64 %4733, %4452
  %4737 = sub nsw i64 %4731, %4452
  %4738 = sub nsw i64 %4729, %4452
  %4739 = sext i32 %t2376513 to i64
  %4740 = sext i32 %t2377514 to i64
  %4741 = sext i32 %t2380515 to i64
  %4742 = sext i32 %t2381516 to i64
  %4743 = sext i32 %t2384517 to i64
  %4744 = sext i32 %t2385518 to i64
  %4745 = sext i32 %t2387519 to i64
  %4746 = trunc i64 %4728 to i32
  br label %"for output.s0.x.xo520"

"end for output.s0.y.yo501":                      ; preds = %"end for output.s0.x.xo521", %"consume resampled_input496"
  %indvars.iv.next2102 = add nuw nsw i64 %indvars.iv2101, 1
  %4747 = icmp eq i64 %indvars.iv.next2102, %zext2104
  br i1 %4747, label %"end for output.s0.b.rebased465", label %"for output.s0.b.rebased464"

"for output.s0.x.xo520":                          ; preds = %"for output.s0.x.xo520.preheader", %"consume convolved536"
  %indvars.iv2082 = phi i64 [ 0, %"for output.s0.x.xo520.preheader" ], [ %indvars.iv.next2083, %"consume convolved536" ]
  br i1 %t2340419, label %then_bb525, label %next_bb526

"end for output.s0.x.xo521.loopexit":             ; preds = %"consume convolved536"
  store <4 x i32> %.lcssa1641.us.lcssa1657, <4 x i32>* %4413, align 16, !tbaa !395
  store <4 x i32> %.lcssa1643.us.lcssa1660, <4 x i32>* %4415, align 16, !tbaa !406
  store <4 x i32> %.lcssa1645.us.lcssa1663, <4 x i32>* %4417, align 16, !tbaa !408
  store <4 x i32> %.lcssa1647.us.lcssa1666, <4 x i32>* %4419, align 16, !tbaa !411
  br label %"end for output.s0.x.xo521"

"end for output.s0.x.xo521":                      ; preds = %"end for output.s0.x.xo521.loopexit", %"for output.s0.y.yo500"
  %indvars.iv.next2085 = add nuw nsw i64 %indvars.iv2084, 1
  %4748 = add nuw nsw i32 %output.s0.y.yo502, 1
  %.not827 = icmp eq i64 %indvars.iv.next2085, %4455
  br i1 %.not827, label %"end for output.s0.y.yo501", label %"for output.s0.y.yo500"

then_bb525:                                       ; preds = %"for output.s0.x.xo520"
  %4749 = load <8 x i16>, <8 x i16>* %4554, align 16, !tbaa !471
  %4750 = load <8 x i16>, <8 x i16>* %4556, align 16, !tbaa !480
  %4751 = shufflevector <8 x i16> %4750, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4752 = add nsw i64 %indvars.iv2082, %4421
  %4753 = mul nsw i64 %4752, %4422
  %4754 = add nsw i64 %4753, %4738
  %4755 = shl nsw i64 %4754, 4
  %4756 = getelementptr inbounds i8, i8* %resampled_input469, i64 %4755
  %4757 = bitcast i8* %4756 to <16 x i8>*
  %4758 = load <16 x i8>, <16 x i8>* %4757, align 16, !tbaa !416
  %4759 = zext <16 x i8> %4758 to <16 x i16>
  %4760 = shufflevector <8 x i16> %4749, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4761 = shufflevector <16 x i16> %4759, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4762 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4760, <4 x i16> %4761)
  %4763 = shufflevector <8 x i16> %4749, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4764 = shufflevector <16 x i16> %4759, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4765 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4763, <4 x i16> %4764)
  %4766 = shufflevector <8 x i16> %4750, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4767 = shufflevector <16 x i16> %4759, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4768 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4766, <4 x i16> %4767)
  %4769 = shufflevector <16 x i16> %4751, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4770 = shufflevector <16 x i16> %4759, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4771 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4769, <4 x i16> %4770)
  %4772 = add nsw <4 x i32> %4762, %4544
  %4773 = add nsw <4 x i32> %4765, %4545
  %4774 = add nsw <4 x i32> %4768, %4546
  %4775 = add nsw <4 x i32> %4771, %4547
  %4776 = load <8 x i16>, <8 x i16>* %4558, align 16, !tbaa !482
  %4777 = load <8 x i16>, <8 x i16>* %4560, align 16, !tbaa !485
  %4778 = shufflevector <8 x i16> %4777, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4779 = add nsw i64 %4753, %4739
  %4780 = shl nsw i64 %4779, 4
  %4781 = getelementptr inbounds i8, i8* %resampled_input469, i64 %4780
  %4782 = bitcast i8* %4781 to <16 x i8>*
  %4783 = load <16 x i8>, <16 x i8>* %4782, align 16, !tbaa !416
  %4784 = zext <16 x i8> %4783 to <16 x i16>
  %4785 = shufflevector <8 x i16> %4776, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4786 = shufflevector <16 x i16> %4784, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4787 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4785, <4 x i16> %4786)
  %4788 = shufflevector <8 x i16> %4776, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4789 = shufflevector <16 x i16> %4784, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4790 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4788, <4 x i16> %4789)
  %4791 = shufflevector <8 x i16> %4777, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4792 = shufflevector <16 x i16> %4784, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4793 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4791, <4 x i16> %4792)
  %4794 = shufflevector <16 x i16> %4778, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4795 = shufflevector <16 x i16> %4784, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4796 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4794, <4 x i16> %4795)
  %4797 = add nsw <4 x i32> %4787, %4772
  %4798 = add nsw <4 x i32> %4790, %4773
  %4799 = add nsw <4 x i32> %4793, %4774
  %4800 = add nsw <4 x i32> %4796, %4775
  %4801 = load <8 x i16>, <8 x i16>* %4562, align 16, !tbaa !487
  %4802 = load <8 x i16>, <8 x i16>* %4564, align 16, !tbaa !491
  %4803 = shufflevector <8 x i16> %4802, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4804 = add nsw i64 %4753, %4740
  %4805 = shl nsw i64 %4804, 4
  %4806 = getelementptr inbounds i8, i8* %resampled_input469, i64 %4805
  %4807 = bitcast i8* %4806 to <16 x i8>*
  %4808 = load <16 x i8>, <16 x i8>* %4807, align 16, !tbaa !416
  %4809 = zext <16 x i8> %4808 to <16 x i16>
  %4810 = shufflevector <8 x i16> %4801, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4811 = shufflevector <16 x i16> %4809, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4812 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4810, <4 x i16> %4811)
  %4813 = shufflevector <8 x i16> %4801, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4814 = shufflevector <16 x i16> %4809, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4815 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4813, <4 x i16> %4814)
  %4816 = shufflevector <8 x i16> %4802, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4817 = shufflevector <16 x i16> %4809, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4818 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4816, <4 x i16> %4817)
  %4819 = shufflevector <16 x i16> %4803, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4820 = shufflevector <16 x i16> %4809, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4821 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4819, <4 x i16> %4820)
  %4822 = add nsw <4 x i32> %4812, %4797
  %4823 = add nsw <4 x i32> %4815, %4798
  %4824 = add nsw <4 x i32> %4818, %4799
  %4825 = add nsw <4 x i32> %4821, %4800
  %4826 = load <8 x i16>, <8 x i16>* %4566, align 16, !tbaa !391
  %4827 = load <8 x i16>, <8 x i16>* %4568, align 16, !tbaa !391
  %4828 = shufflevector <8 x i16> %4827, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4829 = add nsw i64 %4753, %4737
  %4830 = shl nsw i64 %4829, 4
  %4831 = getelementptr inbounds i8, i8* %resampled_input469, i64 %4830
  %4832 = bitcast i8* %4831 to <16 x i8>*
  %4833 = load <16 x i8>, <16 x i8>* %4832, align 16, !tbaa !416
  %4834 = zext <16 x i8> %4833 to <16 x i16>
  %4835 = shufflevector <8 x i16> %4826, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4836 = shufflevector <16 x i16> %4834, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4837 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4835, <4 x i16> %4836)
  %4838 = shufflevector <8 x i16> %4826, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4839 = shufflevector <16 x i16> %4834, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4840 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4838, <4 x i16> %4839)
  %4841 = shufflevector <8 x i16> %4827, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4842 = shufflevector <16 x i16> %4834, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4843 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4841, <4 x i16> %4842)
  %4844 = shufflevector <16 x i16> %4828, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4845 = shufflevector <16 x i16> %4834, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4846 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4844, <4 x i16> %4845)
  %4847 = add nsw <4 x i32> %4837, %4822
  %4848 = add nsw <4 x i32> %4840, %4823
  %4849 = add nsw <4 x i32> %4843, %4824
  %4850 = add nsw <4 x i32> %4846, %4825
  %4851 = load <8 x i16>, <8 x i16>* %4570, align 16, !tbaa !391
  %4852 = load <8 x i16>, <8 x i16>* %4572, align 16, !tbaa !391
  %4853 = shufflevector <8 x i16> %4852, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4854 = add nsw i64 %4753, %4741
  %4855 = shl nsw i64 %4854, 4
  %4856 = getelementptr inbounds i8, i8* %resampled_input469, i64 %4855
  %4857 = bitcast i8* %4856 to <16 x i8>*
  %4858 = load <16 x i8>, <16 x i8>* %4857, align 16, !tbaa !416
  %4859 = zext <16 x i8> %4858 to <16 x i16>
  %4860 = shufflevector <8 x i16> %4851, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4861 = shufflevector <16 x i16> %4859, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4862 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4860, <4 x i16> %4861)
  %4863 = shufflevector <8 x i16> %4851, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4864 = shufflevector <16 x i16> %4859, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4865 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4863, <4 x i16> %4864)
  %4866 = shufflevector <8 x i16> %4852, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4867 = shufflevector <16 x i16> %4859, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4868 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4866, <4 x i16> %4867)
  %4869 = shufflevector <16 x i16> %4853, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4870 = shufflevector <16 x i16> %4859, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4871 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4869, <4 x i16> %4870)
  %4872 = add nsw <4 x i32> %4862, %4847
  %4873 = add nsw <4 x i32> %4865, %4848
  %4874 = add nsw <4 x i32> %4868, %4849
  %4875 = add nsw <4 x i32> %4871, %4850
  %4876 = load <8 x i16>, <8 x i16>* %4574, align 16, !tbaa !391
  %4877 = load <8 x i16>, <8 x i16>* %4576, align 16, !tbaa !391
  %4878 = shufflevector <8 x i16> %4877, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4879 = add nsw i64 %4753, %4742
  %4880 = shl nsw i64 %4879, 4
  %4881 = getelementptr inbounds i8, i8* %resampled_input469, i64 %4880
  %4882 = bitcast i8* %4881 to <16 x i8>*
  %4883 = load <16 x i8>, <16 x i8>* %4882, align 16, !tbaa !416
  %4884 = zext <16 x i8> %4883 to <16 x i16>
  %4885 = shufflevector <8 x i16> %4876, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4886 = shufflevector <16 x i16> %4884, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4887 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4885, <4 x i16> %4886)
  %4888 = shufflevector <8 x i16> %4876, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4889 = shufflevector <16 x i16> %4884, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4890 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4888, <4 x i16> %4889)
  %4891 = shufflevector <8 x i16> %4877, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4892 = shufflevector <16 x i16> %4884, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4893 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4891, <4 x i16> %4892)
  %4894 = shufflevector <16 x i16> %4878, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4895 = shufflevector <16 x i16> %4884, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4896 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4894, <4 x i16> %4895)
  %4897 = add nsw <4 x i32> %4887, %4872
  %4898 = add nsw <4 x i32> %4890, %4873
  %4899 = add nsw <4 x i32> %4893, %4874
  %4900 = add nsw <4 x i32> %4896, %4875
  %4901 = load <8 x i16>, <8 x i16>* %4578, align 16, !tbaa !391
  %4902 = load <8 x i16>, <8 x i16>* %4580, align 16, !tbaa !391
  %4903 = shufflevector <8 x i16> %4902, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4904 = add nsw i64 %4753, %4736
  %4905 = shl nsw i64 %4904, 4
  %4906 = getelementptr inbounds i8, i8* %resampled_input469, i64 %4905
  %4907 = bitcast i8* %4906 to <16 x i8>*
  %4908 = load <16 x i8>, <16 x i8>* %4907, align 16, !tbaa !416
  %4909 = zext <16 x i8> %4908 to <16 x i16>
  %4910 = shufflevector <8 x i16> %4901, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4911 = shufflevector <16 x i16> %4909, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4912 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4910, <4 x i16> %4911)
  %4913 = shufflevector <8 x i16> %4901, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4914 = shufflevector <16 x i16> %4909, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4915 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4913, <4 x i16> %4914)
  %4916 = shufflevector <8 x i16> %4902, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4917 = shufflevector <16 x i16> %4909, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4918 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4916, <4 x i16> %4917)
  %4919 = shufflevector <16 x i16> %4903, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4920 = shufflevector <16 x i16> %4909, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4921 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4919, <4 x i16> %4920)
  %4922 = add nsw <4 x i32> %4912, %4897
  %4923 = add nsw <4 x i32> %4915, %4898
  %4924 = add nsw <4 x i32> %4918, %4899
  %4925 = add nsw <4 x i32> %4921, %4900
  %4926 = load <8 x i16>, <8 x i16>* %4582, align 16, !tbaa !391
  %4927 = load <8 x i16>, <8 x i16>* %4584, align 16, !tbaa !391
  %4928 = shufflevector <8 x i16> %4927, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4929 = add nsw i64 %4753, %4743
  %4930 = shl nsw i64 %4929, 4
  %4931 = getelementptr inbounds i8, i8* %resampled_input469, i64 %4930
  %4932 = bitcast i8* %4931 to <16 x i8>*
  %4933 = load <16 x i8>, <16 x i8>* %4932, align 16, !tbaa !416
  %4934 = zext <16 x i8> %4933 to <16 x i16>
  %4935 = shufflevector <8 x i16> %4926, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4936 = shufflevector <16 x i16> %4934, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4937 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4935, <4 x i16> %4936)
  %4938 = shufflevector <8 x i16> %4926, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4939 = shufflevector <16 x i16> %4934, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4940 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4938, <4 x i16> %4939)
  %4941 = shufflevector <8 x i16> %4927, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4942 = shufflevector <16 x i16> %4934, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4943 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4941, <4 x i16> %4942)
  %4944 = shufflevector <16 x i16> %4928, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4945 = shufflevector <16 x i16> %4934, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4946 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4944, <4 x i16> %4945)
  %4947 = add nsw <4 x i32> %4937, %4922
  %4948 = add nsw <4 x i32> %4940, %4923
  %4949 = add nsw <4 x i32> %4943, %4924
  %4950 = add nsw <4 x i32> %4946, %4925
  %4951 = load <8 x i16>, <8 x i16>* %4586, align 16, !tbaa !391
  %4952 = load <8 x i16>, <8 x i16>* %4588, align 16, !tbaa !391
  %4953 = shufflevector <8 x i16> %4952, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4954 = add nsw i64 %4753, %4744
  %4955 = shl nsw i64 %4954, 4
  %4956 = getelementptr inbounds i8, i8* %resampled_input469, i64 %4955
  %4957 = bitcast i8* %4956 to <16 x i8>*
  %4958 = load <16 x i8>, <16 x i8>* %4957, align 16, !tbaa !416
  %4959 = zext <16 x i8> %4958 to <16 x i16>
  %4960 = shufflevector <8 x i16> %4951, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4961 = shufflevector <16 x i16> %4959, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4962 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4960, <4 x i16> %4961)
  %4963 = shufflevector <8 x i16> %4951, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4964 = shufflevector <16 x i16> %4959, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4965 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4963, <4 x i16> %4964)
  %4966 = shufflevector <8 x i16> %4952, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4967 = shufflevector <16 x i16> %4959, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4968 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4966, <4 x i16> %4967)
  %4969 = shufflevector <16 x i16> %4953, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4970 = shufflevector <16 x i16> %4959, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4971 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %4969, <4 x i16> %4970)
  %4972 = add nsw <4 x i32> %4962, %4947
  %4973 = add nsw <4 x i32> %4965, %4948
  %4974 = add nsw <4 x i32> %4968, %4949
  %4975 = add nsw <4 x i32> %4971, %4950
  br label %"consume convolved536"

next_bb526:                                       ; preds = %"for output.s0.x.xo520"
  %4976 = trunc i64 %indvars.iv2082 to i32
  %4977 = add nsw i32 %61, %4976
  %4978 = mul nsw i32 %4977, %stride_x
  %t2395527 = sub i32 %4978, %t2348457
  br i1 %4364, label %"for convolved.s1.r19$y528.preheader", label %"consume convolved536", !prof !387

"for convolved.s1.r19$y528.preheader":            ; preds = %next_bb526
  br i1 %4362, label %"for convolved.s1.r19$y528.us", label %"consume convolved536", !prof !387

"for convolved.s1.r19$y528.us":                   ; preds = %"for convolved.s1.r19$y528.preheader", %"end for convolved.s1.r19$x534.loopexit.us"
  %indvars.iv2079 = phi i64 [ %indvars.iv.next2080, %"end for convolved.s1.r19$x534.loopexit.us" ], [ 0, %"for convolved.s1.r19$y528.preheader" ]
  %.lcssa1647.us1655 = phi <4 x i32> [ %5019, %"end for convolved.s1.r19$x534.loopexit.us" ], [ %4547, %"for convolved.s1.r19$y528.preheader" ]
  %.lcssa1645.us1653 = phi <4 x i32> [ %5018, %"end for convolved.s1.r19$x534.loopexit.us" ], [ %4546, %"for convolved.s1.r19$y528.preheader" ]
  %.lcssa1643.us1651 = phi <4 x i32> [ %5017, %"end for convolved.s1.r19$x534.loopexit.us" ], [ %4545, %"for convolved.s1.r19$y528.preheader" ]
  %.lcssa1641.us1649 = phi <4 x i32> [ %5016, %"end for convolved.s1.r19$x534.loopexit.us" ], [ %4544, %"for convolved.s1.r19$y528.preheader" ]
  %"convolved.s1.r19$y530.us" = phi i32 [ %5020, %"end for convolved.s1.r19$x534.loopexit.us" ], [ 0, %"for convolved.s1.r19$y528.preheader" ]
  %4979 = mul nsw i64 %indvars.iv2079, %4438
  %4980 = mul nsw i32 %"convolved.s1.r19$y530.us", %a120
  %4981 = add nsw i32 %4980, %4746
  %4982 = mul nsw i32 %4981, %a110
  %t2397532.us = add nsw i32 %t2395527, %4982
  %4983 = sext i32 %t2397532.us to i64
  br label %"for convolved.s1.r19$x533.us"

"for convolved.s1.r19$x533.us":                   ; preds = %"for convolved.s1.r19$y528.us", %"for convolved.s1.r19$x533.us"
  %indvars.iv2077 = phi i64 [ 0, %"for convolved.s1.r19$y528.us" ], [ %indvars.iv.next2078, %"for convolved.s1.r19$x533.us" ]
  %4984 = phi <4 x i32> [ %.lcssa1647.us1655, %"for convolved.s1.r19$y528.us" ], [ %5019, %"for convolved.s1.r19$x533.us" ]
  %4985 = phi <4 x i32> [ %.lcssa1645.us1653, %"for convolved.s1.r19$y528.us" ], [ %5018, %"for convolved.s1.r19$x533.us" ]
  %4986 = phi <4 x i32> [ %.lcssa1643.us1651, %"for convolved.s1.r19$y528.us" ], [ %5017, %"for convolved.s1.r19$x533.us" ]
  %4987 = phi <4 x i32> [ %.lcssa1641.us1649, %"for convolved.s1.r19$y528.us" ], [ %5016, %"for convolved.s1.r19$x533.us" ]
  %4988 = add nsw i64 %indvars.iv2077, %4979
  %4989 = shl nsw i64 %4988, 4
  %4990 = getelementptr inbounds i16, i16* %filter_zeroed434, i64 %4989
  %4991 = bitcast i16* %4990 to <8 x i16>*
  %4992 = load <8 x i16>, <8 x i16>* %4991, align 16, !tbaa !391
  %4993 = getelementptr inbounds i16, i16* %4990, i64 8
  %4994 = bitcast i16* %4993 to <8 x i16>*
  %4995 = load <8 x i16>, <8 x i16>* %4994, align 16, !tbaa !391
  %4996 = shufflevector <8 x i16> %4995, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4997 = mul nsw i64 %indvars.iv2077, %4420
  %4998 = add nsw i64 %4997, %4983
  %4999 = shl nsw i64 %4998, 4
  %5000 = getelementptr inbounds i8, i8* %resampled_input469, i64 %4999
  %5001 = bitcast i8* %5000 to <16 x i8>*
  %5002 = load <16 x i8>, <16 x i8>* %5001, align 16, !tbaa !416
  %5003 = zext <16 x i8> %5002 to <16 x i16>
  %5004 = shufflevector <8 x i16> %4992, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5005 = shufflevector <16 x i16> %5003, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5006 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5004, <4 x i16> %5005)
  %5007 = shufflevector <8 x i16> %4992, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5008 = shufflevector <16 x i16> %5003, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5009 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5007, <4 x i16> %5008)
  %5010 = shufflevector <8 x i16> %4995, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5011 = shufflevector <16 x i16> %5003, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %5012 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5010, <4 x i16> %5011)
  %5013 = shufflevector <16 x i16> %4996, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5014 = shufflevector <16 x i16> %5003, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5015 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5013, <4 x i16> %5014)
  %5016 = add nsw <4 x i32> %5006, %4987
  %5017 = add nsw <4 x i32> %5009, %4986
  %5018 = add nsw <4 x i32> %5012, %4985
  %5019 = add nsw <4 x i32> %5015, %4984
  %indvars.iv.next2078 = add nuw nsw i64 %indvars.iv2077, 1
  %.not830.us = icmp eq i64 %indvars.iv.next2078, %4437
  br i1 %.not830.us, label %"end for convolved.s1.r19$x534.loopexit.us", label %"for convolved.s1.r19$x533.us"

"end for convolved.s1.r19$x534.loopexit.us":      ; preds = %"for convolved.s1.r19$x533.us"
  %indvars.iv.next2080 = add nuw nsw i64 %indvars.iv2079, 1
  %5020 = add nuw nsw i32 %"convolved.s1.r19$y530.us", 1
  %.not829.us = icmp eq i64 %indvars.iv.next2080, %4440
  br i1 %.not829.us, label %"consume convolved536", label %"for convolved.s1.r19$y528.us"

"consume convolved536":                           ; preds = %"end for convolved.s1.r19$x534.loopexit.us", %"for convolved.s1.r19$y528.preheader", %next_bb526, %then_bb525
  %.lcssa1647.us.lcssa1666 = phi <4 x i32> [ %4547, %next_bb526 ], [ %4975, %then_bb525 ], [ %4547, %"for convolved.s1.r19$y528.preheader" ], [ %5019, %"end for convolved.s1.r19$x534.loopexit.us" ]
  %.lcssa1645.us.lcssa1663 = phi <4 x i32> [ %4546, %next_bb526 ], [ %4974, %then_bb525 ], [ %4546, %"for convolved.s1.r19$y528.preheader" ], [ %5018, %"end for convolved.s1.r19$x534.loopexit.us" ]
  %.lcssa1643.us.lcssa1660 = phi <4 x i32> [ %4545, %next_bb526 ], [ %4973, %then_bb525 ], [ %4545, %"for convolved.s1.r19$y528.preheader" ], [ %5017, %"end for convolved.s1.r19$x534.loopexit.us" ]
  %.lcssa1641.us.lcssa1657 = phi <4 x i32> [ %4544, %next_bb526 ], [ %4972, %then_bb525 ], [ %4544, %"for convolved.s1.r19$y528.preheader" ], [ %5016, %"end for convolved.s1.r19$x534.loopexit.us" ]
  %5021 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %.lcssa1641.us.lcssa1657, <4 x i32> %4424)
  %5022 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %.lcssa1643.us.lcssa1660, <4 x i32> %4424)
  %5023 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %.lcssa1645.us.lcssa1663, <4 x i32> %4424)
  %5024 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %.lcssa1647.us.lcssa1666, <4 x i32> %4424)
  %5025 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %5021, <4 x i32> %4427)
  %5026 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %5022, <4 x i32> %4427)
  %5027 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %5023, <4 x i32> %4427)
  %5028 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %5024, <4 x i32> %4427)
  %5029 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %5025)
  %5030 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %5026)
  %5031 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %5027)
  %5032 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %5028)
  %5033 = shufflevector <4 x i16> %5029, <4 x i16> %5030, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5034 = shufflevector <4 x i16> %5031, <4 x i16> %5032, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5035 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %5033, <8 x i16> %4430)
  %5036 = shufflevector <16 x i16> %5034, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5037 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %5036, <8 x i16> %4430)
  %5038 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %5035)
  %5039 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %5037)
  %5040 = shufflevector <8 x i8> %5038, <8 x i8> %5039, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5041 = call <16 x i8> @llvm.aarch64.neon.umin.v16i8(<16 x i8> %5040, <16 x i8> %4432)
  %5042 = call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5041, <16 x i8> %4434)
  %5043 = add nsw i64 %indvars.iv2082, %4421
  %5044 = mul nsw i64 %5043, %4435
  %5045 = add nsw i64 %5044, %4745
  %5046 = getelementptr inbounds i8, i8* %59, i64 %5045
  %5047 = bitcast i8* %5046 to <16 x i8>*
  store <16 x i8> %5042, <16 x i8>* %5047, align 1, !tbaa !493
  %indvars.iv.next2083 = add nuw nsw i64 %indvars.iv2082, 1
  %.not828 = icmp eq i64 %indvars.iv.next2083, %4448
  br i1 %.not828, label %"end for output.s0.x.xo521.loopexit", label %"for output.s0.x.xo520"

then_bb537:                                       ; preds = %next_bb408
  %5048 = icmp eq i32 %46, 3
  %5049 = icmp eq i32 %48, 3
  %5050 = and i1 %5048, %5049
  %5051 = icmp sgt i32 %46, 0
  %5052 = select i1 %5051, i32 %46, i32 0
  %t2556 = zext i32 %5052 to i64
  %5053 = icmp sgt i32 %48, 0
  %5054 = select i1 %5053, i32 %48, i32 0
  %t2557 = zext i32 %5054 to i64
  %5055 = shl nuw nsw i64 %t2556, 5
  %5056 = mul i64 %5055, %t2557
  %5057 = or i64 %5056, 6
  %5058 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  %5059 = load i64, i64* %.fca.1.gep, align 8, !tbaa !381
  %cmp.i1236 = icmp ult i64 %5059, %5057
  %5060 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !383
  br i1 %cmp.i1236, label %if.then.i1239, label %pseudostack_alloc.exit1252, !prof !384

if.then.i1239:                                    ; preds = %then_bb537
  %tobool1.not.i1238 = icmp ne i8* %5060, null
  %5061 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i1241 = icmp ugt i64 %5061, 16384
  %or.cond1400 = and i1 %tobool1.not.i1238, %cmp2.i1241
  br i1 %or.cond1400, label %if.then3.i1243, label %if.end.i1247

if.then3.i1243:                                   ; preds = %if.then.i1239
  call void @halide_free(i8* null, i8* nonnull %5060) #14
  %.pre2142 = load i64, i64* %.fca.2.gep, align 8, !tbaa !385
  br label %if.end.i1247

if.end.i1247:                                     ; preds = %if.then3.i1243, %if.then.i1239
  %5062 = phi i64 [ %.pre2142, %if.then3.i1243 ], [ %5061, %if.then.i1239 ]
  %add.i1245 = add i64 %5062, %5057
  store i64 %add.i1245, i64* %.fca.2.gep, align 8, !tbaa !385
  %cmp7.i1246 = icmp ugt i64 %add.i1245, 16384
  br i1 %cmp7.i1246, label %if.then8.i1249, label %if.end11.i1251

if.then8.i1249:                                   ; preds = %if.end.i1247
  %call.i1248 = call i8* @halide_malloc(i8* null, i64 %5057) #14
  br label %if.end11.i1251

if.end11.i1251:                                   ; preds = %if.then8.i1249, %if.end.i1247
  %storemerge.i1250 = phi i8* [ %call.i1248, %if.then8.i1249 ], [ null, %if.end.i1247 ]
  store i8* %storemerge.i1250, i8** %.fca.0.gep, align 8, !tbaa !383
  store i64 %5057, i64* %.fca.1.gep, align 8, !tbaa !381
  br label %pseudostack_alloc.exit1252

pseudostack_alloc.exit1252:                       ; preds = %then_bb537, %if.end11.i1251
  %5063 = phi i8* [ %storemerge.i1250, %if.end11.i1251 ], [ %5060, %then_bb537 ]
  %5064 = bitcast i8* %5063 to i16*
  %.not = icmp eq i8* %5063, null
  br i1 %.not, label %then_bb540, label %"produce filter_zeroed542", !prof !386

then_bb540:                                       ; preds = %pseudostack_alloc.exit1252
  %5065 = alloca i8*, i64 %5057, align 16
  %5066 = bitcast i8** %5065 to i16*
  %5067 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  store i8** %5065, i8*** %5067, align 8
  br label %"produce filter_zeroed542"

"produce filter_zeroed542":                       ; preds = %pseudostack_alloc.exit1252, %then_bb540
  %filter_zeroed541 = phi i16* [ %5066, %then_bb540 ], [ %5064, %pseudostack_alloc.exit1252 ]
  %t2399543 = icmp sgt i32 %45, 8
  %t2398544 = icmp sgt i32 %45, 7
  br i1 %5053, label %"for filter_zeroed.s0.y545.preheader", label %"produce sum_filter562", !prof !387

"for filter_zeroed.s0.y545.preheader":            ; preds = %"produce filter_zeroed542"
  %5068 = insertelement <8 x i32> undef, i32 %45, i32 0
  %5069 = shufflevector <8 x i32> %5068, <8 x i32> undef, <8 x i32> zeroinitializer
  %5070 = icmp sgt <8 x i32> %5069, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5071 = sext i32 %47 to i64
  %5072 = insertelement <8 x i8> undef, i8 %filter_zero, i32 0
  %5073 = shufflevector <8 x i8> %5072, <8 x i8> undef, <8 x i32> zeroinitializer
  %5074 = zext <8 x i8> %5073 to <8 x i16>
  %5075 = icmp sgt <8 x i32> %5069, <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br i1 %5051, label %"for filter_zeroed.s0.y545.us.preheader", label %"produce sum_filter562", !prof !387

"for filter_zeroed.s0.y545.us.preheader":         ; preds = %"for filter_zeroed.s0.y545.preheader"
  %5076 = zext i32 %46 to i64
  %5077 = zext i32 %46 to i64
  %5078 = sext i32 %49 to i64
  %5079 = zext i32 %48 to i64
  br label %"for filter_zeroed.s0.y545.us"

"for filter_zeroed.s0.y545.us":                   ; preds = %"for filter_zeroed.s0.y545.us.preheader", %"end for filter_zeroed.s0.x551.loopexit.us"
  %indvars.iv2006 = phi i64 [ 0, %"for filter_zeroed.s0.y545.us.preheader" ], [ %indvars.iv.next2007, %"end for filter_zeroed.s0.x551.loopexit.us" ]
  %5080 = mul nsw i64 %indvars.iv2006, %5077
  %5081 = mul nsw i64 %indvars.iv2006, %5078
  br i1 %t2398544, label %"for filter_zeroed.s0.x550.preheader.split.us.us", label %"for filter_zeroed.s0.x550.us1610"

"for filter_zeroed.s0.x550.us1610":               ; preds = %"for filter_zeroed.s0.y545.us", %"for filter_zeroed.s0.x550.us1610"
  %indvars.iv2000 = phi i64 [ %indvars.iv.next2001, %"for filter_zeroed.s0.x550.us1610" ], [ 0, %"for filter_zeroed.s0.y545.us" ]
  %5082 = mul nsw i64 %indvars.iv2000, %5071
  %5083 = add nsw i64 %5082, %5081
  %5084 = getelementptr inbounds i8, i8* %43, i64 %5083
  %5085 = bitcast i8* %5084 to <8 x i8>*
  %5086 = call <8 x i8> @llvm.masked.load.v8i8.p0v8i8(<8 x i8>* %5085, i32 1, <8 x i1> %5070, <8 x i8> undef), !tbaa !388
  %5087 = zext <8 x i8> %5086 to <8 x i16>
  %5088 = sub nsw <8 x i16> %5087, %5074
  %5089 = add nuw nsw i64 %indvars.iv2000, %5080
  %5090 = shl nsw i64 %5089, 4
  %5091 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 %5090
  %5092 = bitcast i16* %5091 to <8 x i16>*
  call void @llvm.masked.store.v8i16.p0v8i16(<8 x i16> %5088, <8 x i16>* %5092, i32 16, <8 x i1> %5070), !tbaa !391
  %indvars.iv.next2001 = add nuw nsw i64 %indvars.iv2000, 1
  %.not818.us1612 = icmp eq i64 %indvars.iv.next2001, %5076
  br i1 %.not818.us1612, label %"end for filter_zeroed.s0.x551.loopexit.us", label %"for filter_zeroed.s0.x550.us1610"

"end for filter_zeroed.s0.x551.loopexit.us":      ; preds = %"for filter_zeroed.s0.x550.us1610", %"for filter_zeroed.s0.x550.us.us1615", %"for filter_zeroed.s0.x550.us.us.us"
  %indvars.iv.next2007 = add nuw nsw i64 %indvars.iv2006, 1
  %.not817.us = icmp eq i64 %indvars.iv.next2007, %5079
  br i1 %.not817.us, label %"produce sum_filter562", label %"for filter_zeroed.s0.y545.us"

"for filter_zeroed.s0.x550.preheader.split.us.us": ; preds = %"for filter_zeroed.s0.y545.us"
  br i1 %t2399543, label %"for filter_zeroed.s0.x550.us.us.us", label %"for filter_zeroed.s0.x550.us.us1615"

"for filter_zeroed.s0.x550.us.us1615":            ; preds = %"for filter_zeroed.s0.x550.preheader.split.us.us", %"for filter_zeroed.s0.x550.us.us1615"
  %indvars.iv2002 = phi i64 [ %indvars.iv.next2003, %"for filter_zeroed.s0.x550.us.us1615" ], [ 0, %"for filter_zeroed.s0.x550.preheader.split.us.us" ]
  %5093 = mul nsw i64 %indvars.iv2002, %5071
  %5094 = add nsw i64 %5093, %5081
  %5095 = getelementptr inbounds i8, i8* %43, i64 %5094
  %5096 = bitcast i8* %5095 to <8 x i8>*
  %5097 = load <8 x i8>, <8 x i8>* %5096, align 1, !tbaa !388
  %5098 = zext <8 x i8> %5097 to <8 x i16>
  %5099 = sub nsw <8 x i16> %5098, %5074
  %5100 = add nuw nsw i64 %indvars.iv2002, %5080
  %5101 = shl nsw i64 %5100, 4
  %5102 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 %5101
  %5103 = bitcast i16* %5102 to <8 x i16>*
  store <8 x i16> %5099, <8 x i16>* %5103, align 16, !tbaa !391
  %indvars.iv.next2003 = add nuw nsw i64 %indvars.iv2002, 1
  %.not818.us.us1617 = icmp eq i64 %indvars.iv.next2003, %5076
  br i1 %.not818.us.us1617, label %"end for filter_zeroed.s0.x551.loopexit.us", label %"for filter_zeroed.s0.x550.us.us1615"

"for filter_zeroed.s0.x550.us.us.us":             ; preds = %"for filter_zeroed.s0.x550.preheader.split.us.us", %"for filter_zeroed.s0.x550.us.us.us"
  %indvars.iv2004 = phi i64 [ %indvars.iv.next2005, %"for filter_zeroed.s0.x550.us.us.us" ], [ 0, %"for filter_zeroed.s0.x550.preheader.split.us.us" ]
  %5104 = mul nsw i64 %indvars.iv2004, %5071
  %5105 = add nsw i64 %5104, %5081
  %5106 = getelementptr inbounds i8, i8* %43, i64 %5105
  %5107 = bitcast i8* %5106 to <8 x i8>*
  %5108 = load <8 x i8>, <8 x i8>* %5107, align 1, !tbaa !388
  %5109 = zext <8 x i8> %5108 to <8 x i16>
  %5110 = sub nsw <8 x i16> %5109, %5074
  %5111 = add nuw nsw i64 %indvars.iv2004, %5080
  %5112 = shl nsw i64 %5111, 4
  %5113 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 %5112
  %5114 = bitcast i16* %5113 to <8 x i16>*
  store <8 x i16> %5110, <8 x i16>* %5114, align 16, !tbaa !391
  %5115 = getelementptr inbounds i8, i8* %5106, i64 8
  %5116 = bitcast i8* %5115 to <8 x i8>*
  %5117 = call <8 x i8> @llvm.masked.load.v8i8.p0v8i8(<8 x i8>* nonnull %5116, i32 1, <8 x i1> %5075, <8 x i8> undef), !tbaa !388
  %5118 = zext <8 x i8> %5117 to <8 x i16>
  %5119 = sub nsw <8 x i16> %5118, %5074
  %5120 = getelementptr inbounds i16, i16* %5113, i64 8
  %5121 = bitcast i16* %5120 to <8 x i16>*
  call void @llvm.masked.store.v8i16.p0v8i16(<8 x i16> %5119, <8 x i16>* nonnull %5121, i32 16, <8 x i1> %5075), !tbaa !391
  %indvars.iv.next2005 = add nuw nsw i64 %indvars.iv2004, 1
  %.not818.us.us.us = icmp eq i64 %indvars.iv.next2005, %5076
  br i1 %.not818.us.us.us, label %"end for filter_zeroed.s0.x551.loopexit.us", label %"for filter_zeroed.s0.x550.us.us.us"

"produce sum_filter562":                          ; preds = %"end for filter_zeroed.s0.x551.loopexit.us", %"for filter_zeroed.s0.y545.preheader", %"produce filter_zeroed542"
  %5122 = insertelement <16 x i32> undef, i32 %45, i32 0
  %5123 = shufflevector <16 x i32> %5122, <16 x i32> undef, <16 x i32> zeroinitializer
  %5124 = icmp sgt <16 x i32> %5123, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5125 = bitcast [16 x i32]* %sum_filter792 to <4 x i32>*
  %5126 = shufflevector <16 x i1> %5124, <16 x i1> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> zeroinitializer, <4 x i32>* nonnull %5125, i32 16, <4 x i1> %5126), !tbaa !395
  %5127 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter792, i64 0, i64 4
  %5128 = bitcast i32* %5127 to <4 x i32>*
  %5129 = shufflevector <16 x i1> %5124, <16 x i1> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> zeroinitializer, <4 x i32>* nonnull %5128, i32 16, <4 x i1> %5129), !tbaa !406
  %5130 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter792, i64 0, i64 8
  %5131 = bitcast i32* %5130 to <4 x i32>*
  %5132 = shufflevector <16 x i1> %5124, <16 x i1> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> zeroinitializer, <4 x i32>* nonnull %5131, i32 16, <4 x i1> %5132), !tbaa !408
  %5133 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter792, i64 0, i64 12
  %5134 = bitcast i32* %5133 to <4 x i32>*
  %5135 = shufflevector <16 x i1> %5124, <16 x i1> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> zeroinitializer, <4 x i32>* nonnull %5134, i32 16, <4 x i1> %5135), !tbaa !411
  br i1 %5053, label %"for sum_filter.s1.r19$y563.preheader", label %"consume sum_filter571", !prof !387

"for sum_filter.s1.r19$y563.preheader":           ; preds = %"produce sum_filter562"
  %5136 = shufflevector <16 x i1> %5124, <16 x i1> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5137 = shufflevector <16 x i1> %5124, <16 x i1> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br i1 %5051, label %"for sum_filter.s1.r19$y563.us.preheader", label %"consume sum_filter571", !prof !387

"for sum_filter.s1.r19$y563.us.preheader":        ; preds = %"for sum_filter.s1.r19$y563.preheader"
  %5138 = zext i32 %46 to i64
  %5139 = zext i32 %46 to i64
  %5140 = zext i32 %48 to i64
  br label %"for sum_filter.s1.r19$y563.us"

"for sum_filter.s1.r19$y563.us":                  ; preds = %"for sum_filter.s1.r19$y563.us.preheader", %"end for sum_filter.s1.r19$x568.loopexit.us"
  %indvars.iv2012 = phi i64 [ 0, %"for sum_filter.s1.r19$y563.us.preheader" ], [ %indvars.iv.next2013, %"end for sum_filter.s1.r19$x568.loopexit.us" ]
  %5141 = mul nsw i64 %indvars.iv2012, %5139
  br label %"for sum_filter.s1.r19$x567.us"

"for sum_filter.s1.r19$x567.us":                  ; preds = %"for sum_filter.s1.r19$y563.us", %"for sum_filter.s1.r19$x567.us"
  %indvars.iv2010 = phi i64 [ 0, %"for sum_filter.s1.r19$y563.us" ], [ %indvars.iv.next2011, %"for sum_filter.s1.r19$x567.us" ]
  %unmaskedload812.us = load <4 x i32>, <4 x i32>* %5125, align 16
  %5142 = select <4 x i1> %5126, <4 x i32> %unmaskedload812.us, <4 x i32> undef
  %unmaskedload813.us = load <4 x i32>, <4 x i32>* %5128, align 16
  %5143 = select <4 x i1> %5129, <4 x i32> %unmaskedload813.us, <4 x i32> undef
  %unmaskedload814.us = load <4 x i32>, <4 x i32>* %5131, align 16
  %5144 = select <4 x i1> %5132, <4 x i32> %unmaskedload814.us, <4 x i32> undef
  %unmaskedload815.us = load <4 x i32>, <4 x i32>* %5134, align 16
  %5145 = select <4 x i1> %5135, <4 x i32> %unmaskedload815.us, <4 x i32> undef
  %5146 = shufflevector <4 x i32> %5142, <4 x i32> %5143, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5147 = shufflevector <4 x i32> %5144, <4 x i32> %5145, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5148 = shufflevector <8 x i32> %5146, <8 x i32> %5147, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5149 = add nuw nsw i64 %indvars.iv2010, %5141
  %5150 = shl nsw i64 %5149, 4
  %5151 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 %5150
  %5152 = bitcast i16* %5151 to <8 x i16>*
  %5153 = call <8 x i16> @llvm.masked.load.v8i16.p0v8i16(<8 x i16>* %5152, i32 16, <8 x i1> %5136, <8 x i16> undef), !tbaa !391
  %5154 = getelementptr inbounds i16, i16* %5151, i64 8
  %5155 = bitcast i16* %5154 to <8 x i16>*
  %5156 = call <8 x i16> @llvm.masked.load.v8i16.p0v8i16(<8 x i16>* nonnull %5155, i32 16, <8 x i1> %5137, <8 x i16> undef), !tbaa !391
  %5157 = shufflevector <8 x i16> %5153, <8 x i16> %5156, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5158 = sext <16 x i16> %5157 to <16 x i32>
  %5159 = add nsw <16 x i32> %5148, %5158
  %5160 = shufflevector <16 x i32> %5159, <16 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> %5160, <4 x i32>* nonnull %5125, i32 16, <4 x i1> %5126), !tbaa !395
  %5161 = shufflevector <16 x i32> %5159, <16 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> %5161, <4 x i32>* nonnull %5128, i32 16, <4 x i1> %5129), !tbaa !406
  %5162 = shufflevector <16 x i32> %5159, <16 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> %5162, <4 x i32>* nonnull %5131, i32 16, <4 x i1> %5132), !tbaa !408
  %5163 = shufflevector <16 x i32> %5159, <16 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> %5163, <4 x i32>* nonnull %5134, i32 16, <4 x i1> %5135), !tbaa !411
  %indvars.iv.next2011 = add nuw nsw i64 %indvars.iv2010, 1
  %.not816.us = icmp eq i64 %indvars.iv.next2011, %5138
  br i1 %.not816.us, label %"end for sum_filter.s1.r19$x568.loopexit.us", label %"for sum_filter.s1.r19$x567.us"

"end for sum_filter.s1.r19$x568.loopexit.us":     ; preds = %"for sum_filter.s1.r19$x567.us"
  %indvars.iv.next2013 = add nuw nsw i64 %indvars.iv2012, 1
  %.not811.us = icmp eq i64 %indvars.iv.next2013, %5140
  br i1 %.not811.us, label %"consume sum_filter571", label %"for sum_filter.s1.r19$y563.us"

"consume sum_filter571":                          ; preds = %"end for sum_filter.s1.r19$x568.loopexit.us", %"for sum_filter.s1.r19$y563.preheader", %"produce sum_filter562"
  %5164 = bitcast i8* %42 to <4 x i32>*
  %5165 = call <4 x i32> @llvm.masked.load.v4i32.p0v4i32(<4 x i32>* %5164, i32 4, <4 x i1> %5126, <4 x i32> undef), !tbaa !495
  %5166 = getelementptr inbounds i8, i8* %42, i64 16
  %5167 = bitcast i8* %5166 to <4 x i32>*
  %5168 = call <4 x i32> @llvm.masked.load.v4i32.p0v4i32(<4 x i32>* nonnull %5167, i32 4, <4 x i1> %5129, <4 x i32> undef), !tbaa !505
  %5169 = getelementptr inbounds i8, i8* %42, i64 32
  %5170 = bitcast i8* %5169 to <4 x i32>*
  %5171 = call <4 x i32> @llvm.masked.load.v4i32.p0v4i32(<4 x i32>* nonnull %5170, i32 4, <4 x i1> %5132, <4 x i32> undef), !tbaa !507
  %5172 = getelementptr inbounds i8, i8* %42, i64 48
  %5173 = bitcast i8* %5172 to <4 x i32>*
  %5174 = call <4 x i32> @llvm.masked.load.v4i32.p0v4i32(<4 x i32>* nonnull %5173, i32 4, <4 x i1> %5135, <4 x i32> undef), !tbaa !510
  %5175 = shufflevector <4 x i32> %5165, <4 x i32> %5168, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5176 = shufflevector <4 x i32> %5171, <4 x i32> %5174, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5177 = shufflevector <8 x i32> %5175, <8 x i32> %5176, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %unmaskedload = load <4 x i32>, <4 x i32>* %5125, align 16
  %5178 = select <4 x i1> %5126, <4 x i32> %unmaskedload, <4 x i32> undef
  %unmaskedload793 = load <4 x i32>, <4 x i32>* %5128, align 16
  %5179 = select <4 x i1> %5129, <4 x i32> %unmaskedload793, <4 x i32> undef
  %unmaskedload794 = load <4 x i32>, <4 x i32>* %5131, align 16
  %5180 = select <4 x i1> %5132, <4 x i32> %unmaskedload794, <4 x i32> undef
  %unmaskedload795 = load <4 x i32>, <4 x i32>* %5134, align 16
  %5181 = select <4 x i1> %5135, <4 x i32> %unmaskedload795, <4 x i32> undef
  %5182 = shufflevector <4 x i32> %5178, <4 x i32> %5179, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5183 = shufflevector <4 x i32> %5180, <4 x i32> %5181, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5184 = shufflevector <8 x i32> %5182, <8 x i32> %5183, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5185 = zext i8 %input_zero to i32
  %5186 = insertelement <16 x i32> undef, i32 %5185, i32 0
  %5187 = shufflevector <16 x i32> %5186, <16 x i32> undef, <16 x i32> zeroinitializer
  %5188 = mul nsw <16 x i32> %5184, %5187
  %5189 = sub nsw <16 x i32> %5177, %5188
  %5190 = shufflevector <16 x i32> %5189, <16 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5191 = bitcast [64 x i32]* %offset_c559790 to <4 x i32>*
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> %5190, <4 x i32>* nonnull %5191, i32 16, <4 x i1> %5126), !tbaa !419
  %5192 = shufflevector <16 x i32> %5189, <16 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5193 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 4
  %5194 = bitcast i32* %5193 to <4 x i32>*
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> %5192, <4 x i32>* nonnull %5194, i32 16, <4 x i1> %5129), !tbaa !430
  %5195 = shufflevector <16 x i32> %5189, <16 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %5196 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 8
  %5197 = bitcast i32* %5196 to <4 x i32>*
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> %5195, <4 x i32>* nonnull %5197, i32 16, <4 x i1> %5132), !tbaa !432
  %5198 = shufflevector <16 x i32> %5189, <16 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5199 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c559790, i64 0, i64 12
  %5200 = bitcast i32* %5199 to <4 x i32>*
  call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> %5198, <4 x i32>* nonnull %5200, i32 16, <4 x i1> %5135), !tbaa !435
  %t2427575 = icmp slt i32 %a121, 0
  %5201 = add nsw i32 %46, -1
  %t2428576 = mul nsw i32 %5201, %a121
  %t2429577 = icmp slt i32 %stride_x, 0
  %t2430578 = select i1 %t2427575, i32 %t2428576, i32 0
  %5202 = select i1 %t2429577, i32 %62, i32 1
  %5203 = add i32 %61, -1
  %5204 = add i32 %5203, %5202
  %t2431579 = mul nsw i32 %5204, %stride_x
  %t2432580 = icmp slt i32 %a120, 0
  %5205 = add nsw i32 %48, -1
  %t2433581 = mul nsw i32 %5205, %a120
  %t2434582 = icmp slt i32 %stride_y, 0
  %t2435583 = select i1 %t2432580, i32 %t2433581, i32 0
  %5206 = select i1 %t2434582, i32 %65, i32 1
  %5207 = add i32 %64, -1
  %5208 = add i32 %5207, %5206
  %t2436584 = mul nsw i32 %5208, %stride_y
  %a121.op = shl i32 %a121, 1
  %t2438586 = select i1 %t2427575, i32 %a121.op, i32 0
  %a120.op = shl i32 %a120, 1
  %t2439587 = select i1 %t2432580, i32 %a120.op, i32 0
  %t2420588 = icmp eq i32 %depth_multiplier, 1
  %5209 = select i1 %5050, i32 %t2439587, i32 %t2435583
  %5210 = select i1 %5050, i32 %t2438586, i32 %t2430578
  %b126 = add nsw i32 %t2436584, %t2435583
  %5211 = select i1 %t2432580, i32 0, i32 %t2433581
  %5212 = add nsw i32 %65, -1
  %5213 = select i1 %t2434582, i32 0, i32 %5212
  %5214 = add nsw i32 %5213, %64
  %5215 = mul nsw i32 %5214, %stride_y
  %b125 = add nsw i32 %5215, %5211
  %b129 = add nsw i32 %t2431579, %t2430578
  %5216 = select i1 %t2427575, i32 0, i32 %t2428576
  %5217 = add nsw i32 %62, -1
  %5218 = select i1 %t2429577, i32 0, i32 %5217
  %5219 = add nsw i32 %5218, %61
  %5220 = mul nsw i32 %5219, %stride_x
  %b128 = add nsw i32 %5220, %5216
  %5221 = mul nsw i32 %55, %54
  %5222 = mul nsw i32 %58, %56
  %5223 = mul nsw i32 %53, %52
  %5224 = add i32 %5221, %5223
  %t2421592 = add i32 %5224, %5222
  %5225 = icmp sgt i32 %57, 0
  br i1 %5225, label %"for output.s0.b.rebased593.preheader", label %after_bb236, !prof !387

"for output.s0.b.rebased593.preheader":           ; preds = %"consume sum_filter571"
  %b127 = add nsw i32 %t2431579, %5210
  %b124 = add nsw i32 %t2436584, %5209
  %5226 = icmp sgt i32 %a121, 0
  %5227 = select i1 %5226, i32 %a121, i32 0
  %t2418590 = shl nuw nsw i32 %5227, 1
  %5228 = icmp sgt i32 %a120, 0
  %5229 = select i1 %5228, i32 %a120, i32 0
  %t2412589 = shl nuw nsw i32 %5229, 1
  %5230 = icmp slt i32 %t2435583, %5209
  %resampled_input.y.min_realized596 = select i1 %5230, i32 %b126, i32 %b124
  %5231 = select i1 %5050, i32 %t2412589, i32 %5211
  %a123 = add nsw i32 %5215, %5231
  %5232 = icmp sgt i32 %5231, %5211
  %5233 = select i1 %5232, i32 %a123, i32 %b125
  %5234 = sub nsw i32 %5233, %resampled_input.y.min_realized596
  %a131 = add nsw i32 %5234, 1
  %5235 = icmp slt i32 %t2430578, %5210
  %resampled_input.x.min_realized597 = select i1 %5235, i32 %b129, i32 %b127
  %5236 = select i1 %5050, i32 %t2418590, i32 %5216
  %a126 = add nsw i32 %5220, %5236
  %5237 = icmp sgt i32 %5236, %5216
  %5238 = select i1 %5237, i32 %a126, i32 %b128
  %5239 = sub nsw i32 %5238, %resampled_input.x.min_realized597
  %a130 = add nsw i32 %5239, 1
  %.inv = icmp slt i32 %5239, 0
  %5240 = select i1 %.inv, i32 0, i32 %a130
  %t2558 = zext i32 %5240 to i64
  %.inv796 = icmp slt i32 %5234, 0
  %5241 = select i1 %.inv796, i32 0, i32 %a131
  %t2559 = zext i32 %5241 to i64
  %t2560 = shl nuw nsw i64 %t2558, 4
  %5242 = mul i64 %t2560, %t2559
  %5243 = or i64 %5242, 3
  %5244 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %t2450619 = sub i32 %b129, %resampled_input.x.min_realized597
  %t2448620 = sub nsw i32 %b128, %b129
  %t2451621 = sub i32 %b126, %resampled_input.y.min_realized596
  %t2447622 = sub nsw i32 %b125, %b126
  %5245 = sext i32 %b129 to i64
  %5246 = sext i32 %53 to i64
  %5247 = icmp sgt i32 %45, 1
  %5248 = icmp eq i32 %depth_multiplier, 0
  %t2562 = sext i1 %5248 to i32
  %5249 = sub nsw i32 %depth_multiplier, %t2562
  %5250 = add i32 %5249, 1
  %5251 = icmp ult i32 %5250, 3
  %5252 = select i1 %5251, i32 %5249, i32 0
  %5253 = xor i32 %t2562, -1
  %5254 = and i32 %5252, %5253
  %5255 = sext i32 %5254 to i64
  %.not1405 = icmp eq i32 %45, 2
  %5256 = icmp sgt i32 %45, 3
  %.not1406 = icmp eq i32 %45, 4
  %5257 = icmp sgt i32 %45, 5
  %.not1407 = icmp eq i32 %45, 6
  %.not1402 = icmp eq i32 %45, 9
  %5258 = icmp sgt i32 %45, 10
  %.not1403 = icmp eq i32 %45, 11
  %5259 = icmp sgt i32 %45, 12
  %.not1404 = icmp eq i32 %45, 13
  %5260 = icmp sgt i32 %45, 14
  %.neg1432 = mul i32 %66, %64
  %.neg1433 = mul i32 %63, %61
  %.neg1434 = mul i32 %67, %56
  %t2459681 = sub i32 %a120.op, %resampled_input.y.min_realized596
  %t2455682 = sub nsw i32 %a121.op, %resampled_input.x.min_realized597
  %5261 = icmp sgt i32 %65, 0
  %t2477689 = sub nsw i32 %a121, %resampled_input.x.min_realized597
  %5262 = sub i32 %a120, %resampled_input.y.min_realized596
  %reass.add1436 = add i32 %.neg1432, %.neg1433
  %reass.add1437 = add i32 %reass.add1436, %.neg1434
  %5263 = icmp sgt i32 %62, 0
  %5264 = sext i32 %a121 to i64
  %5265 = bitcast i16* %filter_zeroed541 to <8 x i16>*
  %5266 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 8
  %5267 = bitcast i16* %5266 to <8 x i16>*
  %5268 = sext i32 %61 to i64
  %5269 = sext i32 %stride_x to i64
  %5270 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 16
  %5271 = bitcast i16* %5270 to <8 x i16>*
  %5272 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 24
  %5273 = bitcast i16* %5272 to <8 x i16>*
  %5274 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 32
  %5275 = bitcast i16* %5274 to <8 x i16>*
  %5276 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 40
  %5277 = bitcast i16* %5276 to <8 x i16>*
  %5278 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 48
  %5279 = bitcast i16* %5278 to <8 x i16>*
  %5280 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 56
  %5281 = bitcast i16* %5280 to <8 x i16>*
  %5282 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 64
  %5283 = bitcast i16* %5282 to <8 x i16>*
  %5284 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 72
  %5285 = bitcast i16* %5284 to <8 x i16>*
  %5286 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 80
  %5287 = bitcast i16* %5286 to <8 x i16>*
  %5288 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 88
  %5289 = bitcast i16* %5288 to <8 x i16>*
  %5290 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 96
  %5291 = bitcast i16* %5290 to <8 x i16>*
  %5292 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 104
  %5293 = bitcast i16* %5292 to <8 x i16>*
  %5294 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 112
  %5295 = bitcast i16* %5294 to <8 x i16>*
  %5296 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 120
  %5297 = bitcast i16* %5296 to <8 x i16>*
  %5298 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 128
  %5299 = bitcast i16* %5298 to <8 x i16>*
  %5300 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 136
  %5301 = bitcast i16* %5300 to <8 x i16>*
  %5302 = insertelement <16 x i32> undef, i32 %output_multiplier, i32 0
  %5303 = shufflevector <16 x i32> %5302, <16 x i32> undef, <4 x i32> zeroinitializer
  %5304 = sub nsw i32 0, %output_shift
  %5305 = insertelement <16 x i32> undef, i32 %5304, i32 0
  %5306 = shufflevector <16 x i32> %5305, <16 x i32> undef, <4 x i32> zeroinitializer
  %5307 = zext i8 %output_zero to i16
  %5308 = insertelement <16 x i16> undef, i16 %5307, i32 0
  %5309 = shufflevector <16 x i16> %5308, <16 x i16> undef, <8 x i32> zeroinitializer
  %5310 = insertelement <16 x i8> undef, i8 %output_max, i32 0
  %5311 = shufflevector <16 x i8> %5310, <16 x i8> undef, <16 x i32> zeroinitializer
  %5312 = insertelement <16 x i8> undef, i8 %output_min, i32 0
  %5313 = shufflevector <16 x i8> %5312, <16 x i8> undef, <16 x i32> zeroinitializer
  %5314 = sext i32 %63 to i64
  %5315 = zext i32 %t2448620 to i64
  %5316 = sext i32 %t2451621 to i64
  %5317 = sext i32 %a130 to i64
  %5318 = sext i32 %t2450619 to i64
  %5319 = sext i32 %b126 to i64
  %5320 = sext i32 %55 to i64
  %5321 = zext i32 %t2447622 to i64
  %5322 = zext i32 %46 to i64
  %5323 = sext i32 %46 to i64
  %5324 = zext i32 %48 to i64
  %5325 = zext i32 %62 to i64
  %5326 = sext i32 %64 to i64
  %5327 = sext i32 %stride_y to i64
  %5328 = sext i32 %t2459681 to i64
  %5329 = sext i32 %resampled_input.x.min_realized597 to i64
  %5330 = sext i32 %5262 to i64
  %5331 = sext i32 %resampled_input.y.min_realized596 to i64
  %5332 = zext i32 %65 to i64
  %5333 = zext i32 %56 to i64
  %zext2053 = zext i32 %57 to i64
  %5334 = or i32 %t2447622, %t2448620
  %5335 = icmp slt i32 %5334, 0
  %.not2291 = icmp sgt i32 %5334, -1
  br label %"for output.s0.b.rebased593"

"for output.s0.b.rebased593":                     ; preds = %"for output.s0.b.rebased593.preheader", %"end for output.s0.y.yo684"
  %indvars.iv2051 = phi i64 [ 0, %"for output.s0.b.rebased593.preheader" ], [ %indvars.iv.next2052, %"end for output.s0.y.yo684" ]
  %5336 = load i64, i64* %.fca.1.gep721, align 8, !tbaa !381
  %cmp.i1254 = icmp ult i64 %5336, %5243
  %5337 = load i8*, i8** %.fca.0.gep720, align 8, !tbaa !383
  br i1 %cmp.i1254, label %if.then.i1257, label %pseudostack_alloc.exit1270, !prof !384

if.then.i1257:                                    ; preds = %"for output.s0.b.rebased593"
  %tobool1.not.i1256 = icmp ne i8* %5337, null
  %5338 = load i64, i64* %.fca.2.gep722, align 8
  %cmp2.i1259 = icmp ugt i64 %5338, 16384
  %or.cond1401 = and i1 %tobool1.not.i1256, %cmp2.i1259
  br i1 %or.cond1401, label %if.then3.i1261, label %if.end.i1265

if.then3.i1261:                                   ; preds = %if.then.i1257
  call void @halide_free(i8* null, i8* nonnull %5337) #14
  %.pre2143 = load i64, i64* %.fca.2.gep722, align 8, !tbaa !385
  br label %if.end.i1265

if.end.i1265:                                     ; preds = %if.then3.i1261, %if.then.i1257
  %5339 = phi i64 [ %.pre2143, %if.then3.i1261 ], [ %5338, %if.then.i1257 ]
  %add.i1263 = add i64 %5339, %5243
  store i64 %add.i1263, i64* %.fca.2.gep722, align 8, !tbaa !385
  %cmp7.i1264 = icmp ugt i64 %add.i1263, 16384
  br i1 %cmp7.i1264, label %if.then8.i1267, label %if.end11.i1269

if.then8.i1267:                                   ; preds = %if.end.i1265
  %call.i1266 = call i8* @halide_malloc(i8* null, i64 %5243) #14
  br label %if.end11.i1269

if.end11.i1269:                                   ; preds = %if.then8.i1267, %if.end.i1265
  %storemerge.i1268 = phi i8* [ %call.i1266, %if.then8.i1267 ], [ null, %if.end.i1265 ]
  store i8* %storemerge.i1268, i8** %.fca.0.gep720, align 8, !tbaa !383
  store i64 %5243, i64* %.fca.1.gep721, align 8, !tbaa !381
  br label %pseudostack_alloc.exit1270

pseudostack_alloc.exit1270:                       ; preds = %"for output.s0.b.rebased593", %if.end11.i1269
  %5340 = phi i8* [ %storemerge.i1268, %if.end11.i1269 ], [ %5337, %"for output.s0.b.rebased593" ]
  %.not797 = icmp eq i8* %5340, null
  br i1 %.not797, label %then_bb599, label %"produce resampled_input601", !prof !386

then_bb599:                                       ; preds = %pseudostack_alloc.exit1270
  %5341 = alloca i8*, i64 %5243, align 16
  %5342 = bitcast i8** %5341 to i8*
  store i8** %5341, i8*** %5244, align 8
  br label %"produce resampled_input601"

"produce resampled_input601":                     ; preds = %pseudostack_alloc.exit1270, %then_bb599
  %resampled_input600 = phi i8* [ %5342, %then_bb599 ], [ %5340, %pseudostack_alloc.exit1270 ]
  %5343 = add nuw i64 %indvars.iv2051, %5333
  br i1 %t2420588, label %then_bb603, label %next_bb604

then_bb603:                                       ; preds = %"produce resampled_input601"
  br i1 %.not2291, label %"for resampled_input.s0.y.rebased610.us.preheader", label %"consume resampled_input679", !prof !413

"for resampled_input.s0.y.rebased610.us.preheader": ; preds = %then_bb603
  %5344 = trunc i64 %5343 to i32
  %5345 = mul i32 %58, %5344
  %t2442605 = sub i32 %5345, %t2421592
  %5346 = sext i32 %t2442605 to i64
  br label %"for resampled_input.s0.y.rebased610.us"

"for resampled_input.s0.y.rebased610.us":         ; preds = %"for resampled_input.s0.y.rebased610.us.preheader", %"end for resampled_input.s0.x.rebased616.loopexit.us"
  %indvars.iv2023 = phi i64 [ 0, %"for resampled_input.s0.y.rebased610.us.preheader" ], [ %indvars.iv.next2024, %"end for resampled_input.s0.x.rebased616.loopexit.us" ]
  %5347 = add nsw i64 %indvars.iv2023, %5316
  %5348 = mul nsw i64 %5347, %5317
  %5349 = add nsw i64 %5348, %5318
  %5350 = add nsw i64 %indvars.iv2023, %5319
  %5351 = mul nsw i64 %5350, %5320
  %5352 = add nsw i64 %5351, %5346
  br label %"for resampled_input.s0.x.rebased615.us"

"for resampled_input.s0.x.rebased615.us":         ; preds = %"for resampled_input.s0.y.rebased610.us", %"for resampled_input.s0.x.rebased615.us"
  %indvars.iv2021 = phi i64 [ 0, %"for resampled_input.s0.y.rebased610.us" ], [ %indvars.iv.next2022, %"for resampled_input.s0.x.rebased615.us" ]
  %5353 = add nsw i64 %indvars.iv2021, %5245
  %5354 = mul nsw i64 %5353, %5246
  %5355 = add nsw i64 %5354, %5352
  %5356 = getelementptr inbounds i8, i8* %50, i64 %5355
  %5357 = bitcast i8* %5356 to <16 x i8>*
  %5358 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %5357, i32 1, <16 x i1> %5124, <16 x i8> undef), !tbaa !414
  %5359 = add nsw i64 %indvars.iv2021, %5349
  %5360 = shl nsw i64 %5359, 4
  %5361 = getelementptr inbounds i8, i8* %resampled_input600, i64 %5360
  %5362 = bitcast i8* %5361 to <16 x i8>*
  call void @llvm.masked.store.v16i8.p0v16i8(<16 x i8> %5358, <16 x i8>* %5362, i32 16, <16 x i1> %5124), !tbaa !416
  %indvars.iv.next2022 = add nuw nsw i64 %indvars.iv2021, 1
  %.not810.us = icmp eq i64 %indvars.iv2021, %5315
  br i1 %.not810.us, label %"end for resampled_input.s0.x.rebased616.loopexit.us", label %"for resampled_input.s0.x.rebased615.us"

"end for resampled_input.s0.x.rebased616.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased615.us"
  %indvars.iv.next2024 = add nuw nsw i64 %indvars.iv2023, 1
  %.not809.us = icmp eq i64 %indvars.iv2023, %5321
  br i1 %.not809.us, label %"consume resampled_input679", label %"for resampled_input.s0.y.rebased610.us"

next_bb604:                                       ; preds = %"produce resampled_input601"
  br i1 %5335, label %"consume resampled_input679", label %"for resampled_input.s0.y.rebased623.us.preheader", !prof !418

"for resampled_input.s0.y.rebased623.us.preheader": ; preds = %next_bb604
  %5363 = trunc i64 %5343 to i32
  %5364 = mul i32 %58, %5363
  %t2449618 = sub i32 %5364, %t2421592
  %5365 = sext i32 %t2449618 to i64
  br label %"for resampled_input.s0.y.rebased623.us"

"for resampled_input.s0.y.rebased623.us":         ; preds = %"for resampled_input.s0.y.rebased623.us.preheader", %"end for resampled_input.s0.x.rebased629.loopexit.us"
  %indvars.iv2017 = phi i64 [ 0, %"for resampled_input.s0.y.rebased623.us.preheader" ], [ %indvars.iv.next2018, %"end for resampled_input.s0.x.rebased629.loopexit.us" ]
  %5366 = add nsw i64 %indvars.iv2017, %5316
  %5367 = mul nsw i64 %5366, %5317
  %5368 = add nsw i64 %5367, %5318
  %5369 = add nsw i64 %indvars.iv2017, %5319
  %5370 = mul nsw i64 %5369, %5320
  %5371 = add nsw i64 %5370, %5365
  br label %"for resampled_input.s0.x.rebased628.us"

"for resampled_input.s0.x.rebased628.us":         ; preds = %"for resampled_input.s0.y.rebased623.us", %after_bb678.us
  %indvars.iv2015 = phi i64 [ 0, %"for resampled_input.s0.y.rebased623.us" ], [ %indvars.iv.next2016, %after_bb678.us ]
  %5372 = add nsw i64 %indvars.iv2015, %5245
  %5373 = mul nsw i64 %5372, %5246
  %5374 = add nsw i64 %5373, %5371
  %5375 = getelementptr inbounds i8, i8* %50, i64 %5374
  %5376 = load i8, i8* %5375, align 1, !tbaa !414
  br i1 %5247, label %after_bb636.us, label %after_bb651.us

after_bb636.us:                                   ; preds = %"for resampled_input.s0.x.rebased628.us"
  %5377 = add nsw i64 %5374, %5255
  %5378 = getelementptr inbounds i8, i8* %50, i64 %5377
  %5379 = load i8, i8* %5378, align 1, !tbaa !414
  br i1 %.not1405, label %after_bb651.us, label %after_bb639.us

after_bb639.us:                                   ; preds = %after_bb636.us
  %5380 = sdiv i32 2, %5249
  %5381 = and i32 %5380, %5253
  %5382 = sext i32 %5381 to i64
  %5383 = add nsw i64 %5374, %5382
  %5384 = getelementptr inbounds i8, i8* %50, i64 %5383
  %5385 = load i8, i8* %5384, align 1, !tbaa !414
  br i1 %5256, label %after_bb642.us, label %after_bb651.us

after_bb642.us:                                   ; preds = %after_bb639.us
  %5386 = sdiv i32 3, %5249
  %5387 = and i32 %5386, %5253
  %5388 = sext i32 %5387 to i64
  %5389 = add nsw i64 %5374, %5388
  %5390 = getelementptr inbounds i8, i8* %50, i64 %5389
  %5391 = load i8, i8* %5390, align 1, !tbaa !414
  br i1 %.not1406, label %after_bb651.us, label %after_bb645.us

after_bb645.us:                                   ; preds = %after_bb642.us
  %5392 = sdiv i32 4, %5249
  %5393 = and i32 %5392, %5253
  %5394 = sext i32 %5393 to i64
  %5395 = add nsw i64 %5374, %5394
  %5396 = getelementptr inbounds i8, i8* %50, i64 %5395
  %5397 = load i8, i8* %5396, align 1, !tbaa !414
  br i1 %5257, label %after_bb648.us, label %after_bb651.us

after_bb648.us:                                   ; preds = %after_bb645.us
  %5398 = sdiv i32 5, %5249
  %5399 = and i32 %5398, %5253
  %5400 = sext i32 %5399 to i64
  %5401 = add nsw i64 %5374, %5400
  %5402 = getelementptr inbounds i8, i8* %50, i64 %5401
  %5403 = load i8, i8* %5402, align 1, !tbaa !414
  br i1 %.not1407, label %after_bb651.us, label %true_bb649.us

true_bb649.us:                                    ; preds = %after_bb648.us
  %5404 = sdiv i32 6, %5249
  %5405 = and i32 %5404, %5253
  %5406 = sext i32 %5405 to i64
  %5407 = add nsw i64 %5374, %5406
  %5408 = getelementptr inbounds i8, i8* %50, i64 %5407
  %5409 = load i8, i8* %5408, align 1, !tbaa !414
  br label %after_bb651.us

after_bb651.us:                                   ; preds = %true_bb649.us, %after_bb648.us, %after_bb645.us, %after_bb642.us, %after_bb639.us, %after_bb636.us, %"for resampled_input.s0.x.rebased628.us"
  %5410 = phi i8 [ %5403, %true_bb649.us ], [ %5403, %after_bb648.us ], [ 0, %after_bb645.us ], [ 0, %after_bb642.us ], [ 0, %after_bb639.us ], [ 0, %after_bb636.us ], [ 0, %"for resampled_input.s0.x.rebased628.us" ]
  %5411 = phi i8 [ %5391, %true_bb649.us ], [ %5391, %after_bb648.us ], [ %5391, %after_bb645.us ], [ %5391, %after_bb642.us ], [ 0, %after_bb639.us ], [ 0, %after_bb636.us ], [ 0, %"for resampled_input.s0.x.rebased628.us" ]
  %5412 = phi i8 [ %5379, %true_bb649.us ], [ %5379, %after_bb648.us ], [ %5379, %after_bb645.us ], [ %5379, %after_bb642.us ], [ %5379, %after_bb639.us ], [ %5379, %after_bb636.us ], [ 0, %"for resampled_input.s0.x.rebased628.us" ]
  %5413 = phi i8 [ %5385, %true_bb649.us ], [ %5385, %after_bb648.us ], [ %5385, %after_bb645.us ], [ %5385, %after_bb642.us ], [ %5385, %after_bb639.us ], [ 0, %after_bb636.us ], [ 0, %"for resampled_input.s0.x.rebased628.us" ]
  %5414 = phi i8 [ %5397, %true_bb649.us ], [ %5397, %after_bb648.us ], [ %5397, %after_bb645.us ], [ 0, %after_bb642.us ], [ 0, %after_bb639.us ], [ 0, %after_bb636.us ], [ 0, %"for resampled_input.s0.x.rebased628.us" ]
  %5415 = phi i8 [ %5409, %true_bb649.us ], [ 0, %after_bb648.us ], [ 0, %after_bb645.us ], [ 0, %after_bb642.us ], [ 0, %after_bb639.us ], [ 0, %after_bb636.us ], [ 0, %"for resampled_input.s0.x.rebased628.us" ]
  br i1 %t2398544, label %true_bb652.us, label %after_bb654.us

true_bb652.us:                                    ; preds = %after_bb651.us
  %5416 = sdiv i32 7, %5249
  %5417 = and i32 %5416, %5253
  %5418 = sext i32 %5417 to i64
  %5419 = add nsw i64 %5374, %5418
  %5420 = getelementptr inbounds i8, i8* %50, i64 %5419
  %5421 = load i8, i8* %5420, align 1, !tbaa !414
  br label %after_bb654.us

after_bb654.us:                                   ; preds = %true_bb652.us, %after_bb651.us
  %5422 = phi i8 [ %5421, %true_bb652.us ], [ 0, %after_bb651.us ]
  br i1 %t2399543, label %after_bb657.us, label %after_bb678.us

after_bb657.us:                                   ; preds = %after_bb654.us
  %5423 = sdiv i32 8, %5249
  %5424 = and i32 %5423, %5253
  %5425 = sext i32 %5424 to i64
  %5426 = add nsw i64 %5374, %5425
  %5427 = getelementptr inbounds i8, i8* %50, i64 %5426
  %5428 = load i8, i8* %5427, align 1, !tbaa !414
  br i1 %.not1402, label %after_bb678.us, label %after_bb660.us

after_bb660.us:                                   ; preds = %after_bb657.us
  %5429 = sdiv i32 9, %5249
  %5430 = and i32 %5429, %5253
  %5431 = sext i32 %5430 to i64
  %5432 = add nsw i64 %5374, %5431
  %5433 = getelementptr inbounds i8, i8* %50, i64 %5432
  %5434 = load i8, i8* %5433, align 1, !tbaa !414
  br i1 %5258, label %after_bb663.us, label %after_bb678.us

after_bb663.us:                                   ; preds = %after_bb660.us
  %5435 = sdiv i32 10, %5249
  %5436 = and i32 %5435, %5253
  %5437 = sext i32 %5436 to i64
  %5438 = add nsw i64 %5374, %5437
  %5439 = getelementptr inbounds i8, i8* %50, i64 %5438
  %5440 = load i8, i8* %5439, align 1, !tbaa !414
  br i1 %.not1403, label %after_bb678.us, label %after_bb666.us

after_bb666.us:                                   ; preds = %after_bb663.us
  %5441 = sdiv i32 11, %5249
  %5442 = and i32 %5441, %5253
  %5443 = sext i32 %5442 to i64
  %5444 = add nsw i64 %5374, %5443
  %5445 = getelementptr inbounds i8, i8* %50, i64 %5444
  %5446 = load i8, i8* %5445, align 1, !tbaa !414
  br i1 %5259, label %after_bb669.us, label %after_bb678.us

after_bb669.us:                                   ; preds = %after_bb666.us
  %5447 = sdiv i32 12, %5249
  %5448 = and i32 %5447, %5253
  %5449 = sext i32 %5448 to i64
  %5450 = add nsw i64 %5374, %5449
  %5451 = getelementptr inbounds i8, i8* %50, i64 %5450
  %5452 = load i8, i8* %5451, align 1, !tbaa !414
  br i1 %.not1404, label %after_bb678.us, label %after_bb672.us

after_bb672.us:                                   ; preds = %after_bb669.us
  %5453 = sdiv i32 13, %5249
  %5454 = and i32 %5453, %5253
  %5455 = sext i32 %5454 to i64
  %5456 = add nsw i64 %5374, %5455
  %5457 = getelementptr inbounds i8, i8* %50, i64 %5456
  %5458 = load i8, i8* %5457, align 1, !tbaa !414
  br i1 %5260, label %true_bb673.us, label %after_bb678.us

true_bb673.us:                                    ; preds = %after_bb672.us
  %5459 = sdiv i32 14, %5249
  %5460 = and i32 %5459, %5253
  %5461 = sext i32 %5460 to i64
  %5462 = add nsw i64 %5374, %5461
  %5463 = getelementptr inbounds i8, i8* %50, i64 %5462
  %5464 = load i8, i8* %5463, align 1, !tbaa !414
  br label %after_bb678.us

after_bb678.us:                                   ; preds = %true_bb673.us, %after_bb672.us, %after_bb669.us, %after_bb666.us, %after_bb663.us, %after_bb660.us, %after_bb657.us, %after_bb654.us
  %5465 = phi i8 [ %5458, %true_bb673.us ], [ %5458, %after_bb672.us ], [ 0, %after_bb669.us ], [ 0, %after_bb666.us ], [ 0, %after_bb663.us ], [ 0, %after_bb660.us ], [ 0, %after_bb657.us ], [ 0, %after_bb654.us ]
  %5466 = phi i8 [ %5446, %true_bb673.us ], [ %5446, %after_bb672.us ], [ %5446, %after_bb669.us ], [ %5446, %after_bb666.us ], [ 0, %after_bb663.us ], [ 0, %after_bb660.us ], [ 0, %after_bb657.us ], [ 0, %after_bb654.us ]
  %5467 = phi i8 [ %5434, %true_bb673.us ], [ %5434, %after_bb672.us ], [ %5434, %after_bb669.us ], [ %5434, %after_bb666.us ], [ %5434, %after_bb663.us ], [ %5434, %after_bb660.us ], [ 0, %after_bb657.us ], [ 0, %after_bb654.us ]
  %5468 = phi i8 [ %5428, %true_bb673.us ], [ %5428, %after_bb672.us ], [ %5428, %after_bb669.us ], [ %5428, %after_bb666.us ], [ %5428, %after_bb663.us ], [ %5428, %after_bb660.us ], [ %5428, %after_bb657.us ], [ 0, %after_bb654.us ]
  %5469 = phi i8 [ %5440, %true_bb673.us ], [ %5440, %after_bb672.us ], [ %5440, %after_bb669.us ], [ %5440, %after_bb666.us ], [ %5440, %after_bb663.us ], [ 0, %after_bb660.us ], [ 0, %after_bb657.us ], [ 0, %after_bb654.us ]
  %5470 = phi i8 [ %5452, %true_bb673.us ], [ %5452, %after_bb672.us ], [ %5452, %after_bb669.us ], [ 0, %after_bb666.us ], [ 0, %after_bb663.us ], [ 0, %after_bb660.us ], [ 0, %after_bb657.us ], [ 0, %after_bb654.us ]
  %5471 = phi i8 [ %5464, %true_bb673.us ], [ 0, %after_bb672.us ], [ 0, %after_bb669.us ], [ 0, %after_bb666.us ], [ 0, %after_bb663.us ], [ 0, %after_bb660.us ], [ 0, %after_bb657.us ], [ 0, %after_bb654.us ]
  %5472 = insertelement <16 x i8> <i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, i8 %5376, i32 0
  %5473 = insertelement <16 x i8> %5472, i8 %5412, i32 1
  %5474 = insertelement <16 x i8> %5473, i8 %5413, i32 2
  %5475 = insertelement <16 x i8> %5474, i8 %5411, i32 3
  %5476 = insertelement <16 x i8> %5475, i8 %5414, i32 4
  %5477 = insertelement <16 x i8> %5476, i8 %5410, i32 5
  %5478 = insertelement <16 x i8> %5477, i8 %5415, i32 6
  %5479 = insertelement <16 x i8> %5478, i8 %5422, i32 7
  %5480 = insertelement <16 x i8> %5479, i8 %5468, i32 8
  %5481 = insertelement <16 x i8> %5480, i8 %5467, i32 9
  %5482 = insertelement <16 x i8> %5481, i8 %5469, i32 10
  %5483 = insertelement <16 x i8> %5482, i8 %5466, i32 11
  %5484 = insertelement <16 x i8> %5483, i8 %5470, i32 12
  %5485 = insertelement <16 x i8> %5484, i8 %5465, i32 13
  %5486 = insertelement <16 x i8> %5485, i8 %5471, i32 14
  %5487 = add nsw i64 %indvars.iv2015, %5368
  %5488 = shl nsw i64 %5487, 4
  %5489 = getelementptr inbounds i8, i8* %resampled_input600, i64 %5488
  %5490 = bitcast i8* %5489 to <16 x i8>*
  call void @llvm.masked.store.v16i8.p0v16i8(<16 x i8> %5486, <16 x i8>* %5490, i32 16, <16 x i1> %5124), !tbaa !416
  %indvars.iv.next2016 = add nuw nsw i64 %indvars.iv2015, 1
  %.not808.us = icmp eq i64 %indvars.iv2015, %5315
  br i1 %.not808.us, label %"end for resampled_input.s0.x.rebased629.loopexit.us", label %"for resampled_input.s0.x.rebased628.us"

"end for resampled_input.s0.x.rebased629.loopexit.us": ; preds = %after_bb678.us
  %indvars.iv.next2018 = add nuw nsw i64 %indvars.iv2017, 1
  %.not807.us = icmp eq i64 %indvars.iv2017, %5321
  br i1 %.not807.us, label %"consume resampled_input679", label %"for resampled_input.s0.y.rebased623.us"

"consume resampled_input679":                     ; preds = %"end for resampled_input.s0.x.rebased629.loopexit.us", %"end for resampled_input.s0.x.rebased616.loopexit.us", %next_bb604, %then_bb603
  br i1 %5261, label %"for output.s0.y.yo683.preheader", label %"end for output.s0.y.yo684", !prof !387

"for output.s0.y.yo683.preheader":                ; preds = %"consume resampled_input679"
  %5491 = load <4 x i32>, <4 x i32>* %5191, align 16
  %5492 = load <4 x i32>, <4 x i32>* %5194, align 16
  %5493 = load <4 x i32>, <4 x i32>* %5197, align 16
  %5494 = load <4 x i32>, <4 x i32>* %5200, align 16
  %5495 = trunc i64 %5343 to i32
  %5496 = mul i32 %67, %5495
  br label %"for output.s0.y.yo683"

"for output.s0.y.yo683":                          ; preds = %"for output.s0.y.yo683.preheader", %"end for output.s0.x.xo704"
  %indvars.iv2034 = phi i64 [ 0, %"for output.s0.y.yo683.preheader" ], [ %indvars.iv.next2035, %"end for output.s0.x.xo704" ]
  %output.s0.y.yo685 = phi i32 [ 0, %"for output.s0.y.yo683.preheader" ], [ %5521, %"end for output.s0.x.xo704" ]
  %5497 = add nsw i64 %indvars.iv2034, %5326
  %t2474686 = add nsw i32 %output.s0.y.yo685, %64
  %5498 = mul nsw i64 %5497, %5327
  %t2475687 = mul nsw i32 %t2474686, %stride_y
  %5499 = add nsw i32 %t2459681, %t2475687
  %t2476688 = mul nsw i32 %5499, %a130
  %5500 = add nsw i32 %5262, %t2475687
  %t2478690 = mul nsw i32 %5500, %a130
  %5501 = sub nsw i64 %5498, %5331
  %t2479691 = sub nsw i32 %t2475687, %resampled_input.y.min_realized596
  %t2480692 = mul nsw i32 %t2479691, %a130
  br i1 %5263, label %"for output.s0.x.xo703.preheader", label %"end for output.s0.x.xo704", !prof !387

"for output.s0.x.xo703.preheader":                ; preds = %"for output.s0.y.yo683"
  %5502 = mul nsw i64 %5501, %5317
  %5503 = add nsw i64 %5498, %5330
  %5504 = mul nsw i64 %5503, %5317
  %5505 = add nsw i64 %5498, %5328
  %5506 = mul nsw i64 %5505, %5317
  %5507 = trunc i64 %5497 to i32
  %5508 = mul i32 %66, %5507
  %t2460680 = add i32 %5508, %5496
  %t2473702 = sub i32 %t2460680, %reass.add1437
  %t2471701 = add nsw i32 %t2476688, %t2455682
  %t2470700 = add nsw i32 %t2476688, %t2477689
  %t2467699 = add nsw i32 %t2478690, %t2455682
  %t2466698 = add nsw i32 %t2478690, %t2477689
  %t2463697 = add nsw i32 %t2480692, %t2455682
  %t2462696 = add nsw i32 %t2480692, %t2477689
  %5509 = sub nsw i64 %5506, %5329
  %5510 = sub nsw i64 %5504, %5329
  %5511 = sub nsw i64 %5502, %5329
  %5512 = sext i32 %t2462696 to i64
  %5513 = sext i32 %t2463697 to i64
  %5514 = sext i32 %t2466698 to i64
  %5515 = sext i32 %t2467699 to i64
  %5516 = sext i32 %t2470700 to i64
  %5517 = sext i32 %t2471701 to i64
  %5518 = sext i32 %t2473702 to i64
  %5519 = trunc i64 %5501 to i32
  br label %"for output.s0.x.xo703"

"end for output.s0.y.yo684":                      ; preds = %"end for output.s0.x.xo704", %"consume resampled_input679"
  %indvars.iv.next2052 = add nuw nsw i64 %indvars.iv2051, 1
  %5520 = icmp eq i64 %indvars.iv.next2052, %zext2053
  br i1 %5520, label %if.then.i1157.loopexit, label %"for output.s0.b.rebased593"

"for output.s0.x.xo703":                          ; preds = %"for output.s0.x.xo703.preheader", %"consume convolved719"
  %indvars.iv2032 = phi i64 [ 0, %"for output.s0.x.xo703.preheader" ], [ %indvars.iv.next2033, %"consume convolved719" ]
  br i1 %5050, label %then_bb708, label %next_bb709

"end for output.s0.x.xo704":                      ; preds = %"consume convolved719", %"for output.s0.y.yo683"
  %indvars.iv.next2035 = add nuw nsw i64 %indvars.iv2034, 1
  %5521 = add nuw nsw i32 %output.s0.y.yo685, 1
  %.not799 = icmp eq i64 %indvars.iv.next2035, %5332
  br i1 %.not799, label %"end for output.s0.y.yo684", label %"for output.s0.y.yo683"

then_bb708:                                       ; preds = %"for output.s0.x.xo703"
  %5522 = load <8 x i16>, <8 x i16>* %5265, align 16, !tbaa !471
  %5523 = load <8 x i16>, <8 x i16>* %5267, align 16, !tbaa !480
  %5524 = shufflevector <8 x i16> %5523, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %5525 = add nsw i64 %indvars.iv2032, %5268
  %5526 = mul nsw i64 %5525, %5269
  %5527 = add nsw i64 %5526, %5511
  %5528 = shl nsw i64 %5527, 4
  %5529 = getelementptr inbounds i8, i8* %resampled_input600, i64 %5528
  %5530 = bitcast i8* %5529 to <16 x i8>*
  %5531 = load <16 x i8>, <16 x i8>* %5530, align 16, !tbaa !416
  %5532 = zext <16 x i8> %5531 to <16 x i16>
  %5533 = shufflevector <8 x i16> %5522, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5534 = shufflevector <16 x i16> %5532, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5535 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5533, <4 x i16> %5534)
  %5536 = shufflevector <8 x i16> %5522, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5537 = shufflevector <16 x i16> %5532, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5538 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5536, <4 x i16> %5537)
  %5539 = shufflevector <8 x i16> %5523, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5540 = shufflevector <16 x i16> %5532, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %5541 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5539, <4 x i16> %5540)
  %5542 = shufflevector <16 x i16> %5524, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5543 = shufflevector <16 x i16> %5532, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5544 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5542, <4 x i16> %5543)
  %5545 = add nsw <4 x i32> %5535, %5491
  %5546 = add nsw <4 x i32> %5538, %5492
  %5547 = add nsw <4 x i32> %5541, %5493
  %5548 = add nsw <4 x i32> %5544, %5494
  %5549 = load <8 x i16>, <8 x i16>* %5271, align 16, !tbaa !482
  %5550 = load <8 x i16>, <8 x i16>* %5273, align 16, !tbaa !485
  %5551 = shufflevector <8 x i16> %5550, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %5552 = add nsw i64 %5526, %5512
  %5553 = shl nsw i64 %5552, 4
  %5554 = getelementptr inbounds i8, i8* %resampled_input600, i64 %5553
  %5555 = bitcast i8* %5554 to <16 x i8>*
  %5556 = load <16 x i8>, <16 x i8>* %5555, align 16, !tbaa !416
  %5557 = zext <16 x i8> %5556 to <16 x i16>
  %5558 = shufflevector <8 x i16> %5549, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5559 = shufflevector <16 x i16> %5557, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5560 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5558, <4 x i16> %5559)
  %5561 = shufflevector <8 x i16> %5549, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5562 = shufflevector <16 x i16> %5557, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5563 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5561, <4 x i16> %5562)
  %5564 = shufflevector <8 x i16> %5550, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5565 = shufflevector <16 x i16> %5557, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %5566 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5564, <4 x i16> %5565)
  %5567 = shufflevector <16 x i16> %5551, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5568 = shufflevector <16 x i16> %5557, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5569 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5567, <4 x i16> %5568)
  %5570 = add nsw <4 x i32> %5545, %5560
  %5571 = add nsw <4 x i32> %5546, %5563
  %5572 = add nsw <4 x i32> %5547, %5566
  %5573 = add nsw <4 x i32> %5548, %5569
  %5574 = load <8 x i16>, <8 x i16>* %5275, align 16, !tbaa !487
  %5575 = load <8 x i16>, <8 x i16>* %5277, align 16, !tbaa !491
  %5576 = shufflevector <8 x i16> %5575, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %5577 = add nsw i64 %5526, %5513
  %5578 = shl nsw i64 %5577, 4
  %5579 = getelementptr inbounds i8, i8* %resampled_input600, i64 %5578
  %5580 = bitcast i8* %5579 to <16 x i8>*
  %5581 = load <16 x i8>, <16 x i8>* %5580, align 16, !tbaa !416
  %5582 = zext <16 x i8> %5581 to <16 x i16>
  %5583 = shufflevector <8 x i16> %5574, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5584 = shufflevector <16 x i16> %5582, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5585 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5583, <4 x i16> %5584)
  %5586 = shufflevector <8 x i16> %5574, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5587 = shufflevector <16 x i16> %5582, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5588 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5586, <4 x i16> %5587)
  %5589 = shufflevector <8 x i16> %5575, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5590 = shufflevector <16 x i16> %5582, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %5591 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5589, <4 x i16> %5590)
  %5592 = shufflevector <16 x i16> %5576, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5593 = shufflevector <16 x i16> %5582, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5594 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5592, <4 x i16> %5593)
  %5595 = add nsw <4 x i32> %5570, %5585
  %5596 = add nsw <4 x i32> %5571, %5588
  %5597 = add nsw <4 x i32> %5572, %5591
  %5598 = add nsw <4 x i32> %5573, %5594
  %5599 = load <8 x i16>, <8 x i16>* %5279, align 16, !tbaa !391
  %5600 = load <8 x i16>, <8 x i16>* %5281, align 16, !tbaa !391
  %5601 = shufflevector <8 x i16> %5600, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %5602 = add nsw i64 %5526, %5510
  %5603 = shl nsw i64 %5602, 4
  %5604 = getelementptr inbounds i8, i8* %resampled_input600, i64 %5603
  %5605 = bitcast i8* %5604 to <16 x i8>*
  %5606 = load <16 x i8>, <16 x i8>* %5605, align 16, !tbaa !416
  %5607 = zext <16 x i8> %5606 to <16 x i16>
  %5608 = shufflevector <8 x i16> %5599, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5609 = shufflevector <16 x i16> %5607, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5610 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5608, <4 x i16> %5609)
  %5611 = shufflevector <8 x i16> %5599, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5612 = shufflevector <16 x i16> %5607, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5613 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5611, <4 x i16> %5612)
  %5614 = shufflevector <8 x i16> %5600, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5615 = shufflevector <16 x i16> %5607, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %5616 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5614, <4 x i16> %5615)
  %5617 = shufflevector <16 x i16> %5601, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5618 = shufflevector <16 x i16> %5607, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5619 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5617, <4 x i16> %5618)
  %5620 = add nsw <4 x i32> %5595, %5610
  %5621 = add nsw <4 x i32> %5596, %5613
  %5622 = add nsw <4 x i32> %5597, %5616
  %5623 = add nsw <4 x i32> %5598, %5619
  %5624 = load <8 x i16>, <8 x i16>* %5283, align 16, !tbaa !391
  %5625 = load <8 x i16>, <8 x i16>* %5285, align 16, !tbaa !391
  %5626 = shufflevector <8 x i16> %5625, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %5627 = add nsw i64 %5526, %5514
  %5628 = shl nsw i64 %5627, 4
  %5629 = getelementptr inbounds i8, i8* %resampled_input600, i64 %5628
  %5630 = bitcast i8* %5629 to <16 x i8>*
  %5631 = load <16 x i8>, <16 x i8>* %5630, align 16, !tbaa !416
  %5632 = zext <16 x i8> %5631 to <16 x i16>
  %5633 = shufflevector <8 x i16> %5624, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5634 = shufflevector <16 x i16> %5632, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5635 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5633, <4 x i16> %5634)
  %5636 = shufflevector <8 x i16> %5624, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5637 = shufflevector <16 x i16> %5632, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5638 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5636, <4 x i16> %5637)
  %5639 = shufflevector <8 x i16> %5625, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5640 = shufflevector <16 x i16> %5632, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %5641 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5639, <4 x i16> %5640)
  %5642 = shufflevector <16 x i16> %5626, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5643 = shufflevector <16 x i16> %5632, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5644 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5642, <4 x i16> %5643)
  %5645 = add nsw <4 x i32> %5620, %5635
  %5646 = add nsw <4 x i32> %5621, %5638
  %5647 = add nsw <4 x i32> %5622, %5641
  %5648 = add nsw <4 x i32> %5623, %5644
  %5649 = load <8 x i16>, <8 x i16>* %5287, align 16, !tbaa !391
  %5650 = load <8 x i16>, <8 x i16>* %5289, align 16, !tbaa !391
  %5651 = shufflevector <8 x i16> %5650, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %5652 = add nsw i64 %5526, %5515
  %5653 = shl nsw i64 %5652, 4
  %5654 = getelementptr inbounds i8, i8* %resampled_input600, i64 %5653
  %5655 = bitcast i8* %5654 to <16 x i8>*
  %5656 = load <16 x i8>, <16 x i8>* %5655, align 16, !tbaa !416
  %5657 = zext <16 x i8> %5656 to <16 x i16>
  %5658 = shufflevector <8 x i16> %5649, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5659 = shufflevector <16 x i16> %5657, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5660 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5658, <4 x i16> %5659)
  %5661 = shufflevector <8 x i16> %5649, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5662 = shufflevector <16 x i16> %5657, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5663 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5661, <4 x i16> %5662)
  %5664 = shufflevector <8 x i16> %5650, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5665 = shufflevector <16 x i16> %5657, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %5666 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5664, <4 x i16> %5665)
  %5667 = shufflevector <16 x i16> %5651, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5668 = shufflevector <16 x i16> %5657, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5669 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5667, <4 x i16> %5668)
  %5670 = add nsw <4 x i32> %5645, %5660
  %5671 = add nsw <4 x i32> %5646, %5663
  %5672 = add nsw <4 x i32> %5647, %5666
  %5673 = add nsw <4 x i32> %5648, %5669
  %5674 = load <8 x i16>, <8 x i16>* %5291, align 16, !tbaa !391
  %5675 = load <8 x i16>, <8 x i16>* %5293, align 16, !tbaa !391
  %5676 = shufflevector <8 x i16> %5675, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %5677 = add nsw i64 %5526, %5509
  %5678 = shl nsw i64 %5677, 4
  %5679 = getelementptr inbounds i8, i8* %resampled_input600, i64 %5678
  %5680 = bitcast i8* %5679 to <16 x i8>*
  %5681 = load <16 x i8>, <16 x i8>* %5680, align 16, !tbaa !416
  %5682 = zext <16 x i8> %5681 to <16 x i16>
  %5683 = shufflevector <8 x i16> %5674, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5684 = shufflevector <16 x i16> %5682, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5685 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5683, <4 x i16> %5684)
  %5686 = shufflevector <8 x i16> %5674, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5687 = shufflevector <16 x i16> %5682, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5688 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5686, <4 x i16> %5687)
  %5689 = shufflevector <8 x i16> %5675, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5690 = shufflevector <16 x i16> %5682, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %5691 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5689, <4 x i16> %5690)
  %5692 = shufflevector <16 x i16> %5676, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5693 = shufflevector <16 x i16> %5682, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5694 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5692, <4 x i16> %5693)
  %5695 = add nsw <4 x i32> %5670, %5685
  %5696 = add nsw <4 x i32> %5671, %5688
  %5697 = add nsw <4 x i32> %5672, %5691
  %5698 = add nsw <4 x i32> %5673, %5694
  %5699 = load <8 x i16>, <8 x i16>* %5295, align 16, !tbaa !391
  %5700 = load <8 x i16>, <8 x i16>* %5297, align 16, !tbaa !391
  %5701 = shufflevector <8 x i16> %5700, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %5702 = add nsw i64 %5526, %5516
  %5703 = shl nsw i64 %5702, 4
  %5704 = getelementptr inbounds i8, i8* %resampled_input600, i64 %5703
  %5705 = bitcast i8* %5704 to <16 x i8>*
  %5706 = load <16 x i8>, <16 x i8>* %5705, align 16, !tbaa !416
  %5707 = zext <16 x i8> %5706 to <16 x i16>
  %5708 = shufflevector <8 x i16> %5699, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5709 = shufflevector <16 x i16> %5707, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5710 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5708, <4 x i16> %5709)
  %5711 = shufflevector <8 x i16> %5699, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5712 = shufflevector <16 x i16> %5707, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5713 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5711, <4 x i16> %5712)
  %5714 = shufflevector <8 x i16> %5700, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5715 = shufflevector <16 x i16> %5707, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %5716 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5714, <4 x i16> %5715)
  %5717 = shufflevector <16 x i16> %5701, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5718 = shufflevector <16 x i16> %5707, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5719 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5717, <4 x i16> %5718)
  %5720 = add nsw <4 x i32> %5695, %5710
  %5721 = add nsw <4 x i32> %5696, %5713
  %5722 = add nsw <4 x i32> %5697, %5716
  %5723 = add nsw <4 x i32> %5698, %5719
  %5724 = load <8 x i16>, <8 x i16>* %5299, align 16, !tbaa !391
  %5725 = load <8 x i16>, <8 x i16>* %5301, align 16, !tbaa !391
  %5726 = shufflevector <8 x i16> %5725, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %5727 = add nsw i64 %5526, %5517
  %5728 = shl nsw i64 %5727, 4
  %5729 = getelementptr inbounds i8, i8* %resampled_input600, i64 %5728
  %5730 = bitcast i8* %5729 to <16 x i8>*
  %5731 = load <16 x i8>, <16 x i8>* %5730, align 16, !tbaa !416
  %5732 = zext <16 x i8> %5731 to <16 x i16>
  %5733 = shufflevector <8 x i16> %5724, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5734 = shufflevector <16 x i16> %5732, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5735 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5733, <4 x i16> %5734)
  %5736 = shufflevector <8 x i16> %5724, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5737 = shufflevector <16 x i16> %5732, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5738 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5736, <4 x i16> %5737)
  %5739 = shufflevector <8 x i16> %5725, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5740 = shufflevector <16 x i16> %5732, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %5741 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5739, <4 x i16> %5740)
  %5742 = shufflevector <16 x i16> %5726, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5743 = shufflevector <16 x i16> %5732, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5744 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5742, <4 x i16> %5743)
  %5745 = add nsw <4 x i32> %5720, %5735
  %5746 = add nsw <4 x i32> %5721, %5738
  %5747 = add nsw <4 x i32> %5722, %5741
  %5748 = add nsw <4 x i32> %5723, %5744
  br label %"consume convolved719"

next_bb709:                                       ; preds = %"for output.s0.x.xo703"
  %5749 = trunc i64 %indvars.iv2032 to i32
  %5750 = add nsw i32 %61, %5749
  %5751 = mul nsw i32 %5750, %stride_x
  %t2481710 = sub i32 %5751, %resampled_input.x.min_realized597
  br i1 %5053, label %"for convolved.s1.r19$y711.preheader", label %"consume convolved719", !prof !387

"for convolved.s1.r19$y711.preheader":            ; preds = %next_bb709
  br i1 %5051, label %"for convolved.s1.r19$y711.us", label %"consume convolved719", !prof !387

"for convolved.s1.r19$y711.us":                   ; preds = %"for convolved.s1.r19$y711.preheader", %"end for convolved.s1.r19$x717.loopexit.us"
  %indvars.iv2029 = phi i64 [ %indvars.iv.next2030, %"end for convolved.s1.r19$x717.loopexit.us" ], [ 0, %"for convolved.s1.r19$y711.preheader" ]
  %convolved791.sroa.120.12.us = phi <4 x i32> [ %5788, %"end for convolved.s1.r19$x717.loopexit.us" ], [ %5494, %"for convolved.s1.r19$y711.preheader" ]
  %convolved791.sroa.80.12.us = phi <4 x i32> [ %5787, %"end for convolved.s1.r19$x717.loopexit.us" ], [ %5493, %"for convolved.s1.r19$y711.preheader" ]
  %convolved791.sroa.40.12.us = phi <4 x i32> [ %5786, %"end for convolved.s1.r19$x717.loopexit.us" ], [ %5492, %"for convolved.s1.r19$y711.preheader" ]
  %convolved791.sroa.0.12.us = phi <4 x i32> [ %5785, %"end for convolved.s1.r19$x717.loopexit.us" ], [ %5491, %"for convolved.s1.r19$y711.preheader" ]
  %"convolved.s1.r19$y713.us" = phi i32 [ %5789, %"end for convolved.s1.r19$x717.loopexit.us" ], [ 0, %"for convolved.s1.r19$y711.preheader" ]
  %5752 = mul nsw i64 %indvars.iv2029, %5323
  %5753 = mul nsw i32 %"convolved.s1.r19$y713.us", %a120
  %5754 = add nsw i32 %5753, %5519
  %5755 = mul nsw i32 %5754, %a130
  %t2483715.us = add nsw i32 %t2481710, %5755
  %5756 = sext i32 %t2483715.us to i64
  br label %"for convolved.s1.r19$x716.us"

"for convolved.s1.r19$x716.us":                   ; preds = %"for convolved.s1.r19$y711.us", %"for convolved.s1.r19$x716.us"
  %indvars.iv2027 = phi i64 [ 0, %"for convolved.s1.r19$y711.us" ], [ %indvars.iv.next2028, %"for convolved.s1.r19$x716.us" ]
  %convolved791.sroa.120.13.us = phi <4 x i32> [ %convolved791.sroa.120.12.us, %"for convolved.s1.r19$y711.us" ], [ %5788, %"for convolved.s1.r19$x716.us" ]
  %convolved791.sroa.80.13.us = phi <4 x i32> [ %convolved791.sroa.80.12.us, %"for convolved.s1.r19$y711.us" ], [ %5787, %"for convolved.s1.r19$x716.us" ]
  %convolved791.sroa.40.13.us = phi <4 x i32> [ %convolved791.sroa.40.12.us, %"for convolved.s1.r19$y711.us" ], [ %5786, %"for convolved.s1.r19$x716.us" ]
  %convolved791.sroa.0.13.us = phi <4 x i32> [ %convolved791.sroa.0.12.us, %"for convolved.s1.r19$y711.us" ], [ %5785, %"for convolved.s1.r19$x716.us" ]
  %5757 = add nsw i64 %indvars.iv2027, %5752
  %5758 = shl nsw i64 %5757, 4
  %5759 = getelementptr inbounds i16, i16* %filter_zeroed541, i64 %5758
  %5760 = bitcast i16* %5759 to <8 x i16>*
  %5761 = load <8 x i16>, <8 x i16>* %5760, align 16, !tbaa !391
  %5762 = getelementptr inbounds i16, i16* %5759, i64 8
  %5763 = bitcast i16* %5762 to <8 x i16>*
  %5764 = load <8 x i16>, <8 x i16>* %5763, align 16, !tbaa !391
  %5765 = shufflevector <8 x i16> %5764, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %5766 = mul nsw i64 %indvars.iv2027, %5264
  %5767 = add nsw i64 %5766, %5756
  %5768 = shl nsw i64 %5767, 4
  %5769 = getelementptr inbounds i8, i8* %resampled_input600, i64 %5768
  %5770 = bitcast i8* %5769 to <16 x i8>*
  %5771 = load <16 x i8>, <16 x i8>* %5770, align 16, !tbaa !416
  %5772 = zext <16 x i8> %5771 to <16 x i16>
  %5773 = shufflevector <8 x i16> %5761, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5774 = shufflevector <16 x i16> %5772, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5775 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5773, <4 x i16> %5774)
  %5776 = shufflevector <8 x i16> %5761, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5777 = shufflevector <16 x i16> %5772, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5778 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5776, <4 x i16> %5777)
  %5779 = shufflevector <8 x i16> %5764, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5780 = shufflevector <16 x i16> %5772, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %5781 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5779, <4 x i16> %5780)
  %5782 = shufflevector <16 x i16> %5765, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5783 = shufflevector <16 x i16> %5772, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5784 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %5782, <4 x i16> %5783)
  %5785 = add nsw <4 x i32> %5775, %convolved791.sroa.0.13.us
  %5786 = add nsw <4 x i32> %5778, %convolved791.sroa.40.13.us
  %5787 = add nsw <4 x i32> %5781, %convolved791.sroa.80.13.us
  %5788 = add nsw <4 x i32> %5784, %convolved791.sroa.120.13.us
  %indvars.iv.next2028 = add nuw nsw i64 %indvars.iv2027, 1
  %.not806.us = icmp eq i64 %indvars.iv.next2028, %5322
  br i1 %.not806.us, label %"end for convolved.s1.r19$x717.loopexit.us", label %"for convolved.s1.r19$x716.us"

"end for convolved.s1.r19$x717.loopexit.us":      ; preds = %"for convolved.s1.r19$x716.us"
  %indvars.iv.next2030 = add nuw nsw i64 %indvars.iv2029, 1
  %5789 = add nuw nsw i32 %"convolved.s1.r19$y713.us", 1
  %.not805.us = icmp eq i64 %indvars.iv.next2030, %5324
  br i1 %.not805.us, label %"consume convolved719", label %"for convolved.s1.r19$y711.us"

"consume convolved719":                           ; preds = %"end for convolved.s1.r19$x717.loopexit.us", %"for convolved.s1.r19$y711.preheader", %next_bb709, %then_bb708
  %convolved791.sroa.120.15 = phi <4 x i32> [ %5748, %then_bb708 ], [ %5494, %next_bb709 ], [ %5494, %"for convolved.s1.r19$y711.preheader" ], [ %5788, %"end for convolved.s1.r19$x717.loopexit.us" ]
  %convolved791.sroa.80.15 = phi <4 x i32> [ %5747, %then_bb708 ], [ %5493, %next_bb709 ], [ %5493, %"for convolved.s1.r19$y711.preheader" ], [ %5787, %"end for convolved.s1.r19$x717.loopexit.us" ]
  %convolved791.sroa.40.15 = phi <4 x i32> [ %5746, %then_bb708 ], [ %5492, %next_bb709 ], [ %5492, %"for convolved.s1.r19$y711.preheader" ], [ %5786, %"end for convolved.s1.r19$x717.loopexit.us" ]
  %convolved791.sroa.0.15 = phi <4 x i32> [ %5745, %then_bb708 ], [ %5491, %next_bb709 ], [ %5491, %"for convolved.s1.r19$y711.preheader" ], [ %5785, %"end for convolved.s1.r19$x717.loopexit.us" ]
  %5790 = select <4 x i1> %5126, <4 x i32> %convolved791.sroa.0.15, <4 x i32> undef
  %5791 = select <4 x i1> %5129, <4 x i32> %convolved791.sroa.40.15, <4 x i32> undef
  %5792 = select <4 x i1> %5132, <4 x i32> %convolved791.sroa.80.15, <4 x i32> undef
  %5793 = select <4 x i1> %5135, <4 x i32> %convolved791.sroa.120.15, <4 x i32> undef
  %5794 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %5790, <4 x i32> %5303)
  %5795 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %5791, <4 x i32> %5303)
  %5796 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %5792, <4 x i32> %5303)
  %5797 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %5793, <4 x i32> %5303)
  %5798 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %5794, <4 x i32> %5306)
  %5799 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %5795, <4 x i32> %5306)
  %5800 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %5796, <4 x i32> %5306)
  %5801 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %5797, <4 x i32> %5306)
  %5802 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %5798)
  %5803 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %5799)
  %5804 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %5800)
  %5805 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %5801)
  %5806 = shufflevector <4 x i16> %5802, <4 x i16> %5803, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5807 = shufflevector <4 x i16> %5804, <4 x i16> %5805, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5808 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %5806, <8 x i16> %5309)
  %5809 = shufflevector <16 x i16> %5807, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5810 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %5809, <8 x i16> %5309)
  %5811 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %5808)
  %5812 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %5810)
  %5813 = shufflevector <8 x i8> %5811, <8 x i8> %5812, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5814 = call <16 x i8> @llvm.aarch64.neon.umin.v16i8(<16 x i8> %5813, <16 x i8> %5311)
  %5815 = call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5814, <16 x i8> %5313)
  %5816 = add nsw i64 %indvars.iv2032, %5268
  %5817 = mul nsw i64 %5816, %5314
  %5818 = add nsw i64 %5817, %5518
  %5819 = getelementptr inbounds i8, i8* %59, i64 %5818
  %5820 = bitcast i8* %5819 to <16 x i8>*
  call void @llvm.masked.store.v16i8.p0v16i8(<16 x i8> %5815, <16 x i8>* %5820, i32 1, <16 x i1> %5124), !tbaa !493
  %indvars.iv.next2033 = add nuw nsw i64 %indvars.iv2032, 1
  %.not804 = icmp eq i64 %indvars.iv.next2033, %5325
  br i1 %.not804, label %"end for output.s0.x.xo704", label %"for output.s0.x.xo703"
}

; Function Attrs: nounwind
define i32 @depthwise_conv_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 8
  %3 = getelementptr i8*, i8** %0, i64 1
  %4 = load i8*, i8** %3, align 8
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr i8*, i8** %0, i64 2
  %7 = bitcast i8** %6 to %struct.halide_buffer_t**
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %7, align 8
  %9 = getelementptr i8*, i8** %0, i64 3
  %10 = load i8*, i8** %9, align 8
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr i8*, i8** %0, i64 4
  %13 = bitcast i8** %12 to %struct.halide_buffer_t**
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %13, align 8
  %15 = getelementptr i8*, i8** %0, i64 5
  %16 = bitcast i8** %15 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr i8*, i8** %0, i64 6
  %20 = bitcast i8** %19 to i32**
  %21 = load i32*, i32** %20, align 8
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr i8*, i8** %0, i64 7
  %24 = bitcast i8** %23 to i32**
  %25 = load i32*, i32** %24, align 8
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr i8*, i8** %0, i64 8
  %28 = bitcast i8** %27 to i32**
  %29 = load i32*, i32** %28, align 8
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr i8*, i8** %0, i64 9
  %32 = bitcast i8** %31 to i32**
  %33 = load i32*, i32** %32, align 8
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr i8*, i8** %0, i64 10
  %36 = bitcast i8** %35 to i32**
  %37 = load i32*, i32** %36, align 8
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr i8*, i8** %0, i64 11
  %40 = bitcast i8** %39 to i32**
  %41 = load i32*, i32** %40, align 8
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr i8*, i8** %0, i64 12
  %44 = load i8*, i8** %43, align 8
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr i8*, i8** %0, i64 13
  %47 = load i8*, i8** %46, align 8
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr i8*, i8** %0, i64 14
  %50 = load i8*, i8** %49, align 8
  %51 = load i8, i8* %50, align 1
  %52 = getelementptr i8*, i8** %0, i64 15
  %53 = bitcast i8** %52 to %struct.halide_buffer_t**
  %54 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %53, align 8
  %55 = tail call i32 @depthwise_conv(%struct.halide_buffer_t* %2, i8 %5, %struct.halide_buffer_t* %8, i8 %11, %struct.halide_buffer_t* %14, i32 %18, i32 %22, i32 %26, i32 %30, i32 %34, i32 %38, i32 %42, i8 %45, i8 %48, i8 %51, %struct.halide_buffer_t* %54) #16
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @depthwise_conv_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @depthwise_conv_metadata_storage
}

; Function Attrs: argmemonly nofree nosync nounwind readonly willreturn
declare <8 x i8> @llvm.masked.load.v8i8.p0v8i8(<8 x i8>*, i32 immarg, <8 x i1>, <8 x i8>) #13

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v8i16.p0v8i16(<8 x i16>, <8 x i16>*, i32 immarg, <8 x i1>) #5

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v4i32.p0v4i32(<4 x i32>, <4 x i32>*, i32 immarg, <4 x i1>) #5

; Function Attrs: argmemonly nofree nosync nounwind readonly willreturn
declare <4 x i32> @llvm.masked.load.v4i32.p0v4i32(<4 x i32>*, i32 immarg, <4 x i1>, <4 x i32>) #13

; Function Attrs: argmemonly nofree nosync nounwind readonly willreturn
declare <8 x i16> @llvm.masked.load.v8i16.p0v8i16(<8 x i16>*, i32 immarg, <8 x i1>, <8 x i16>) #13

; Function Attrs: argmemonly nofree nosync nounwind readonly willreturn
declare <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>*, i32 immarg, <16 x i1>, <16 x i8>) #13

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v16i8.p0v16i8(<16 x i8>, <16 x i8>*, i32 immarg, <16 x i1>) #5

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i64 @llvm.vector.reduce.add.v2i64(<2 x i64>) #9

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nosync nounwind readnone willreturn }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { argmemonly nofree nosync nounwind readonly willreturn }
attributes #14 = { nobuiltin nounwind "no-builtins" }
attributes #15 = { nobuiltin "no-builtins" }
attributes #16 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"apple-a12"}
!4 = !{i32 2, !"halide_mattrs", !"+sve2,+v8.1a,+dotprod,+fullfp16,+reserve-x18"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!12, !12, i64 0}
!15 = !{!16, !16, i64 0}
!16 = !{!"bool", !12, i64 0}
!17 = !{i8 0, i8 2}
!18 = !{!19, !19, i64 0}
!19 = !{!"long long", !12, i64 0}
!20 = !{!21, !22, i64 0}
!21 = !{!"_ZTS18mach_timebase_info", !22, i64 0, !22, i64 4}
!22 = !{!"int", !12, i64 0}
!23 = !{!21, !22, i64 4}
!24 = !{!25, !11, i64 0}
!25 = !{!"_ZTSN6Halide7Runtime8Internal4workE", !26, i64 0, !11, i64 56, !11, i64 64, !11, i64 72, !22, i64 80, !11, i64 88, !22, i64 96, !11, i64 104, !22, i64 112, !22, i64 116, !22, i64 120, !16, i64 124}
!26 = !{!"_ZTS22halide_parallel_task_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !22, i64 32, !22, i64 36, !22, i64 40, !22, i64 44, !16, i64 48}
!27 = !{!25, !22, i64 36}
!28 = !{!25, !22, i64 40}
!29 = !{!25, !16, i64 48}
!30 = !{!25, !11, i64 24}
!31 = !{!25, !22, i64 32}
!32 = !{!25, !11, i64 8}
!33 = !{!25, !22, i64 44}
!34 = !{!25, !11, i64 16}
!35 = !{!25, !11, i64 56}
!36 = !{!25, !11, i64 104}
!37 = !{!22, !22, i64 0}
!38 = !{!25, !22, i64 120}
!39 = !{!25, !16, i64 124}
!40 = !{!25, !11, i64 72}
!41 = !{!25, !22, i64 80}
!42 = !{!25, !11, i64 88}
!43 = !{!25, !22, i64 116}
!44 = !{!45, !45, i64 0}
!45 = !{!"vtable pointer", !13, i64 0}
!46 = !{!47, !11, i64 8}
!47 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE", !11, i64 8}
!48 = !{!49, !16, i64 2121}
!49 = !{!"_ZTSN6Halide7Runtime8Internal12work_queue_tE", !50, i64 0, !22, i64 8, !22, i64 12, !11, i64 16, !22, i64 24, !22, i64 28, !22, i64 32, !51, i64 40, !51, i64 48, !51, i64 56, !22, i64 64, !22, i64 68, !12, i64 72, !16, i64 2120, !16, i64 2121, !22, i64 2124}
!50 = !{!"_ZTS12halide_mutex", !12, i64 0}
!51 = !{!"_ZTS11halide_cond", !12, i64 0}
!52 = distinct !{!52, !53}
!53 = !{!"llvm.loop.mustprogress"}
!54 = !{!49, !22, i64 8}
!55 = distinct !{!55, !53}
!56 = !{!49, !22, i64 24}
!57 = !{!49, !22, i64 2124}
!58 = !{!49, !22, i64 28}
!59 = distinct !{!59, !53}
!60 = !{!25, !22, i64 112}
!61 = !{!25, !22, i64 96}
!62 = !{!49, !11, i64 16}
!63 = !{!25, !11, i64 64}
!64 = distinct !{!64, !53, !65}
!65 = !{!"llvm.loop.isvectorized", i32 1}
!66 = !{!49, !22, i64 68}
!67 = !{!49, !22, i64 32}
!68 = distinct !{!68, !53, !65}
!69 = !{!49, !16, i64 2120}
!70 = distinct !{!70, !53}
!71 = !{!72, !11, i64 0}
!72 = !{!"_ZTS26halide_semaphore_acquire_t", !11, i64 0, !22, i64 8}
!73 = !{!72, !22, i64 8}
!74 = distinct !{!74, !53}
!75 = !{!49, !22, i64 64}
!76 = distinct !{!76, !53}
!77 = distinct !{!77, !53}
!78 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !37, i64 36, i64 4, !37, i64 40, i64 4, !37, i64 44, i64 4, !37, i64 48, i64 1, !15, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 8, !10, i64 80, i64 4, !37, i64 88, i64 8, !10, i64 96, i64 4, !37, i64 104, i64 8, !10, i64 112, i64 4, !37, i64 116, i64 4, !37, i64 120, i64 4, !37, i64 124, i64 1, !15}
!79 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !37, i64 28, i64 4, !37, i64 32, i64 4, !37, i64 36, i64 4, !37, i64 40, i64 1, !15, i64 48, i64 8, !10, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 4, !37, i64 80, i64 8, !10, i64 88, i64 4, !37, i64 96, i64 8, !10, i64 104, i64 4, !37, i64 108, i64 4, !37, i64 112, i64 4, !37, i64 116, i64 1, !15}
!80 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !37, i64 32, i64 8, !10, i64 40, i64 4, !37, i64 48, i64 8, !10, i64 56, i64 4, !37, i64 60, i64 4, !37, i64 64, i64 4, !37, i64 68, i64 1, !15}
!81 = !{i64 0, i64 8, !10, i64 8, i64 4, !37, i64 12, i64 4, !37, i64 16, i64 4, !37, i64 20, i64 1, !15}
!82 = distinct !{!82, !53}
!83 = distinct !{!83, !53}
!84 = !{!85, !11, i64 144}
!85 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization10queue_dataE", !86, i64 0, !19, i64 136, !11, i64 144, !19, i64 152}
!86 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization13thread_parkerE", !87, i64 0, !88, i64 64, !16, i64 128}
!87 = !{!"_ZTS15pthread_mutex_t", !12, i64 0}
!88 = !{!"_ZTS14pthread_cond_t", !12, i64 0}
!89 = !{!90, !11, i64 16}
!90 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11hash_bucketE", !91, i64 0, !11, i64 8, !11, i64 16}
!91 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization9word_lockE", !19, i64 0}
!92 = distinct !{!92, !53}
!93 = !{!85, !19, i64 152}
!94 = !{!86, !16, i64 128}
!95 = distinct !{!95, !53}
!96 = !{!97, !11, i64 152}
!97 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20word_lock_queue_dataE", !86, i64 0, !11, i64 136, !11, i64 144, !11, i64 152}
!98 = !{!97, !11, i64 136}
!99 = !{!97, !11, i64 144}
!100 = distinct !{!100, !53}
!101 = distinct !{!101, !53}
!102 = distinct !{!102, !53}
!103 = !{!104, !11, i64 8}
!104 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE", !11, i64 8, !11, i64 16}
!105 = !{!104, !11, i64 16}
!106 = !{!107, !11, i64 8}
!107 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE", !11, i64 8, !11, i64 16}
!108 = !{!107, !11, i64 16}
!109 = !{!85, !19, i64 136}
!110 = !{!111, !16, i64 0}
!111 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization15validate_actionE", !16, i64 0, !19, i64 8}
!112 = !{!111, !19, i64 8}
!113 = !{!90, !11, i64 8}
!114 = !{!115, !11, i64 0}
!115 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11bucket_pairE", !11, i64 0, !11, i64 8}
!116 = distinct !{!116, !53}
!117 = !{!115, !11, i64 8}
!118 = !{!119, !11, i64 0}
!119 = !{!"_ZTSN6Halide7Runtime8Internal14spawned_threadE", !11, i64 0, !11, i64 8, !120, i64 16}
!120 = !{!"long", !12, i64 0}
!121 = !{!119, !11, i64 8}
!122 = !{!119, !120, i64 16}
!123 = !{!26, !22, i64 40}
!124 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !37, i64 36, i64 4, !37, i64 40, i64 4, !37, i64 44, i64 4, !37, i64 48, i64 1, !15}
!125 = distinct !{!125, !53}
!126 = distinct !{!126, !53}
!127 = distinct !{!127, !53}
!128 = !{!129, !11, i64 8}
!129 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE", !11, i64 8, !11, i64 16}
!130 = !{!129, !11, i64 16}
!131 = !{!132, !11, i64 0}
!132 = !{!"_ZTS18halide_mutex_array", !11, i64 0}
!133 = distinct !{!133, !53}
!134 = !{!135, !138, i64 34}
!135 = !{!"_ZTS20halide_trace_event_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !136, i64 32, !139, i64 36, !22, i64 40, !22, i64 44, !22, i64 48}
!136 = !{!"_ZTS13halide_type_t", !137, i64 0, !12, i64 1, !138, i64 2}
!137 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!138 = !{!"short", !12, i64 0}
!139 = !{!"_ZTS25halide_trace_event_code_t", !12, i64 0}
!140 = !{!136, !12, i64 1}
!141 = !{!135, !22, i64 48}
!142 = !{!135, !11, i64 0}
!143 = !{!135, !11, i64 24}
!144 = !{!145, !22, i64 0}
!145 = !{!"_ZTSN6Halide7Runtime8Internal23SharedExclusiveSpinLockE", !22, i64 0}
!146 = !{!147, !22, i64 4}
!147 = !{!"_ZTSN6Halide7Runtime8Internal11TraceBufferE", !145, i64 0, !22, i64 4, !22, i64 8, !12, i64 12}
!148 = !{!147, !22, i64 8}
!149 = distinct !{!149, !53}
!150 = !{!151, !22, i64 0}
!151 = !{!"_ZTS21halide_trace_packet_t", !22, i64 0, !22, i64 4, !136, i64 8, !139, i64 12, !22, i64 16, !22, i64 20, !22, i64 24}
!152 = !{!151, !22, i64 4}
!153 = !{!135, !11, i64 16}
!154 = !{!135, !11, i64 8}
!155 = !{!151, !22, i64 24}
!156 = !{!151, !138, i64 10}
!157 = distinct !{!157, !53}
!158 = !{!135, !139, i64 36}
!159 = !{!135, !12, i64 33}
!160 = distinct !{!160, !53}
!161 = !{!135, !22, i64 44}
!162 = distinct !{!162, !53, !163}
!163 = !{!"llvm.loop.peeled.count", i32 1}
!164 = !{!135, !137, i64 32}
!165 = !{!138, !138, i64 0}
!166 = !{!167, !167, i64 0}
!167 = !{!"float", !12, i64 0}
!168 = !{!169, !169, i64 0}
!169 = !{!"double", !12, i64 0}
!170 = distinct !{!170, !53, !163}
!171 = distinct !{!171, !53}
!172 = !{!135, !22, i64 40}
!173 = distinct !{!173, !53}
!174 = distinct !{!174, !53}
!175 = distinct !{!175, !53}
!176 = !{!177, !11, i64 16}
!177 = !{!"_ZTS15halide_buffer_t", !19, i64 0, !11, i64 8, !11, i64 16, !19, i64 24, !136, i64 32, !22, i64 36, !11, i64 40, !11, i64 48}
!178 = !{!177, !19, i64 0}
!179 = !{!177, !22, i64 36}
!180 = !{!177, !11, i64 40}
!181 = !{!182, !22, i64 8}
!182 = !{!"_ZTS18halide_dimension_t", !22, i64 0, !22, i64 4, !22, i64 8, !22, i64 12}
!183 = distinct !{!183, !53, !65}
!184 = !{i64 0, i64 4, !37, i64 4, i64 4, !37, i64 8, i64 4, !37, i64 12, i64 4, !37}
!185 = !{!182, !22, i64 4}
!186 = distinct !{!186, !53}
!187 = distinct !{!187, !53, !65}
!188 = !{!189, !138, i64 0}
!189 = !{!"_ZTSN6Halide7Runtime8Internal18halide_tiff_headerE", !138, i64 0, !138, i64 2, !22, i64 4, !138, i64 8, !12, i64 10, !22, i64 190, !12, i64 194, !12, i64 202}
!190 = !{!189, !138, i64 2}
!191 = !{!189, !22, i64 4}
!192 = !{!189, !138, i64 8}
!193 = !{!194, !138, i64 0}
!194 = !{!"_ZTSN6Halide7Runtime8Internal8tiff_tagE", !138, i64 0, !138, i64 2, !22, i64 4, !12, i64 8}
!195 = !{!194, !138, i64 2}
!196 = !{!194, !22, i64 4}
!197 = distinct !{!197, !53}
!198 = distinct !{!198, !53}
!199 = distinct !{!199, !53}
!200 = distinct !{!200, !53}
!201 = distinct !{!201, !53}
!202 = !{!203}
!203 = distinct !{!203, !204}
!204 = distinct !{!204, !"LVerDomain"}
!205 = !{!206}
!206 = distinct !{!206, !204}
!207 = distinct !{!207, !53, !65}
!208 = distinct !{!208, !53, !65}
!209 = distinct !{!209, !53, !65}
!210 = distinct !{!210, !53, !65}
!211 = distinct !{!211, !53, !212, !65}
!212 = !{!"llvm.loop.unroll.runtime.disable"}
!213 = distinct !{!213, !53, !65}
!214 = distinct !{!214, !53, !65}
!215 = distinct !{!215, !53, !65}
!216 = distinct !{!216, !53, !65}
!217 = !{!182, !22, i64 0}
!218 = distinct !{!218, !53}
!219 = distinct !{!219, !53, !65}
!220 = distinct !{!220, !53, !212, !65}
!221 = distinct !{!221, !53}
!222 = distinct !{!222, !53}
!223 = distinct !{!223, !53}
!224 = distinct !{!224, !53}
!225 = !{!226, !11, i64 0}
!226 = !{!"_ZTSN6Halide7Runtime8Internal10CacheEntryE", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !120, i64 32, !11, i64 40, !22, i64 48, !22, i64 52, !22, i64 56, !22, i64 60, !11, i64 64, !11, i64 72, !19, i64 80, !16, i64 88}
!227 = distinct !{!227, !53}
!228 = !{!226, !22, i64 56}
!229 = !{!226, !11, i64 24}
!230 = !{!226, !11, i64 72}
!231 = distinct !{!231, !53}
!232 = distinct !{!232, !53}
!233 = !{!234, !19, i64 0}
!234 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !19, i64 0, !19, i64 8, !19, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !19, i64 408}
!235 = !{!234, !19, i64 8}
!236 = !{!234, !19, i64 408}
!237 = distinct !{!237, !53}
!238 = !{!234, !19, i64 16}
!239 = distinct !{!239, !53, !65}
!240 = distinct !{!240, !53, !212, !65}
!241 = distinct !{!241, !53}
!242 = distinct !{!242, !53}
!243 = distinct !{!243, !53}
!244 = distinct !{!244, !53}
!245 = !{i64 0, i64 8, !18, i64 8, i64 8, !18, i64 16, i64 8, !18, i64 24, i64 128, !14, i64 152, i64 128, !14, i64 280, i64 128, !14, i64 408, i64 8, !18}
!246 = distinct !{!246, !53}
!247 = !{!182, !22, i64 12}
!248 = !{!226, !11, i64 16}
!249 = !{!226, !120, i64 32}
!250 = !{!226, !22, i64 48}
!251 = !{!226, !22, i64 52}
!252 = !{!226, !22, i64 60}
!253 = !{!226, !11, i64 64}
!254 = !{!226, !11, i64 40}
!255 = distinct !{!255, !53}
!256 = distinct !{!256, !53}
!257 = distinct !{!257, !53}
!258 = !{!226, !16, i64 88}
!259 = !{!226, !19, i64 80}
!260 = !{i64 0, i64 8, !18, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !18, i64 32, i64 1, !261, i64 33, i64 1, !14, i64 34, i64 2, !165, i64 36, i64 4, !37, i64 40, i64 8, !10, i64 48, i64 8, !10}
!261 = !{!137, !137, i64 0}
!262 = distinct !{!262, !53}
!263 = distinct !{!263, !53}
!264 = !{!226, !11, i64 8}
!265 = distinct !{!265, !53}
!266 = distinct !{!266, !53, !65}
!267 = distinct !{!267, !53, !65}
!268 = distinct !{!268, !53, !65}
!269 = distinct !{!269, !53, !65}
!270 = distinct !{!270, !53}
!271 = distinct !{!271, !53}
!272 = distinct !{!272, !53}
!273 = distinct !{!273, !53}
!274 = distinct !{!274, !53}
!275 = distinct !{!275, !53, !65}
!276 = distinct !{!276, !53, !65}
!277 = distinct !{!277, !53, !65}
!278 = distinct !{!278, !53, !65}
!279 = distinct !{!279, !53}
!280 = !{!281, !22, i64 8}
!281 = !{!"_ZTSN6Halide7Runtime8Internal16CacheBlockHeaderE", !11, i64 0, !22, i64 8}
!282 = !{!281, !11, i64 0}
!283 = distinct !{!283, !53}
!284 = distinct !{!284, !53}
!285 = distinct !{!285, !53}
!286 = distinct !{!286, !53}
!287 = distinct !{!287, !53, !65}
!288 = distinct !{!288, !53, !65}
!289 = distinct !{!289, !53, !65}
!290 = distinct !{!290, !53, !65}
!291 = distinct !{!291, !53}
!292 = distinct !{!292, !53}
!293 = distinct !{!293, !53}
!294 = distinct !{!294, !53}
!295 = distinct !{!295, !53}
!296 = distinct !{!296, !53}
!297 = distinct !{!297, !53}
!298 = distinct !{!298, !53}
!299 = distinct !{!299, !53}
!300 = !{!136, !137, i64 0}
!301 = !{!136, !138, i64 2}
!302 = !{!177, !11, i64 8}
!303 = !{!177, !19, i64 24}
!304 = distinct !{!304, !53}
!305 = !{!306, !11, i64 0}
!306 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 8}
!307 = distinct !{!307, !53}
!308 = !{!306, !11, i64 8}
!309 = !{!310, !11, i64 120}
!310 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!311 = !{!312, !11, i64 48}
!312 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!313 = !{!312, !11, i64 40}
!314 = !{!312, !11, i64 56}
!315 = !{!312, !11, i64 0}
!316 = !{!312, !11, i64 16}
!317 = !{!312, !11, i64 8}
!318 = !{!312, !11, i64 32}
!319 = !{!312, !11, i64 24}
!320 = !{!312, !11, i64 64}
!321 = !{!312, !11, i64 72}
!322 = distinct !{!322, !53, !65}
!323 = distinct !{!323, !53, !65}
!324 = distinct !{!324, !53, !65}
!325 = distinct !{!325, !53, !65}
!326 = !{!312, !11, i64 112}
!327 = !{!312, !11, i64 120}
!328 = !{!312, !11, i64 80}
!329 = !{!312, !11, i64 88}
!330 = !{!312, !11, i64 96}
!331 = !{!312, !11, i64 104}
!332 = !{i32 22, i32 33}
!333 = !{!334, !11, i64 40}
!334 = !{!"_ZTS21halide_profiler_state", !50, i64 0, !22, i64 8, !22, i64 12, !22, i64 16, !22, i64 20, !11, i64 24, !11, i64 32, !11, i64 40}
!335 = !{!334, !22, i64 16}
!336 = !{!337, !19, i64 0}
!337 = !{!"_ZTS30halide_profiler_pipeline_stats", !19, i64 0, !19, i64 8, !19, i64 16, !19, i64 24, !19, i64 32, !19, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !22, i64 72, !22, i64 76, !22, i64 80, !22, i64 84, !22, i64 88}
!338 = !{!337, !22, i64 80}
!339 = !{!337, !19, i64 32}
!340 = !{!337, !19, i64 40}
!341 = !{!337, !11, i64 48}
!342 = !{!337, !22, i64 84}
!343 = !{!337, !22, i64 88}
!344 = !{!337, !19, i64 16}
!345 = !{!337, !19, i64 24}
!346 = !{!337, !22, i64 72}
!347 = !{!337, !11, i64 56}
!348 = distinct !{!348, !53}
!349 = !{!350, !19, i64 32}
!350 = !{!"_ZTS26halide_profiler_func_stats", !19, i64 0, !19, i64 8, !19, i64 16, !19, i64 24, !19, i64 32, !19, i64 40, !19, i64 48, !11, i64 56, !22, i64 64}
!351 = !{!350, !19, i64 0}
!352 = !{!350, !11, i64 56}
!353 = distinct !{!353, !53}
!354 = distinct !{!354, !53}
!355 = distinct !{!355, !53}
!356 = !{!350, !19, i64 40}
!357 = !{!350, !19, i64 48}
!358 = distinct !{!358, !53}
!359 = !{!350, !19, i64 16}
!360 = distinct !{!360, !53}
!361 = !{!350, !22, i64 64}
!362 = distinct !{!362, !53}
!363 = !{!350, !19, i64 24}
!364 = distinct !{!364, !53}
!365 = distinct !{!365, !53}
!366 = !{!334, !11, i64 24}
!367 = !{!337, !11, i64 64}
!368 = distinct !{!368, !53}
!369 = !{!334, !22, i64 12}
!370 = distinct !{!370, !53}
!371 = !{!337, !22, i64 76}
!372 = distinct !{!372, !53}
!373 = distinct !{!373, !53}
!374 = !{!334, !11, i64 32}
!375 = !{!334, !22, i64 20}
!376 = !{!334, !22, i64 8}
!377 = distinct !{!377, !53}
!378 = distinct !{!378, !53}
!379 = distinct !{!379, !53}
!380 = distinct !{!380, !53}
!381 = !{!382, !120, i64 8}
!382 = !{!"_ZTS25halide_pseudostack_slot_t", !11, i64 0, !120, i64 8, !120, i64 16}
!383 = !{!382, !11, i64 0}
!384 = !{!"branch_weights", i32 1, i32 2000}
!385 = !{!382, !120, i64 16}
!386 = !{!"branch_weights", i32 0, i32 1073741824}
!387 = !{!"branch_weights", i32 1073741824, i32 0}
!388 = !{!389, !389, i64 0}
!389 = !{!"filter", !390, i64 0}
!390 = !{!"Halide buffer"}
!391 = !{!392, !392, i64 0}
!392 = !{!"filter_zeroed", !390, i64 0}
!393 = !{!394, !394, i64 0}
!394 = !{!"bias", !390, i64 0}
!395 = !{!396, !396, i64 0}
!396 = !{!"offset_c.width4.base0", !397, i64 0}
!397 = !{!"offset_c.width8.base0", !398, i64 0}
!398 = !{!"offset_c.width16.base0", !399, i64 0}
!399 = !{!"offset_c.width32.base0", !400, i64 0}
!400 = !{!"offset_c.width64.base0", !401, i64 0}
!401 = !{!"offset_c.width128.base0", !402, i64 0}
!402 = !{!"offset_c.width256.base0", !403, i64 0}
!403 = !{!"offset_c.width512.base0", !404, i64 0}
!404 = !{!"offset_c.width1024.base0", !405, i64 0}
!405 = !{!"offset_c", !390, i64 0}
!406 = !{!407, !407, i64 0}
!407 = !{!"offset_c.width4.base4", !397, i64 0}
!408 = !{!409, !409, i64 0}
!409 = !{!"offset_c.width4.base8", !410, i64 0}
!410 = !{!"offset_c.width8.base8", !398, i64 0}
!411 = !{!412, !412, i64 0}
!412 = !{!"offset_c.width4.base12", !410, i64 0}
!413 = !{!"branch_weights", i32 -2147483648, i32 0}
!414 = !{!415, !415, i64 0}
!415 = !{!"input", !390, i64 0}
!416 = !{!417, !417, i64 0}
!417 = !{!"resampled_input", !390, i64 0}
!418 = !{!"branch_weights", i32 0, i32 -2147483648}
!419 = !{!420, !420, i64 0}
!420 = !{!"convolved.width4.base0", !421, i64 0}
!421 = !{!"convolved.width8.base0", !422, i64 0}
!422 = !{!"convolved.width16.base0", !423, i64 0}
!423 = !{!"convolved.width32.base0", !424, i64 0}
!424 = !{!"convolved.width64.base0", !425, i64 0}
!425 = !{!"convolved.width128.base0", !426, i64 0}
!426 = !{!"convolved.width256.base0", !427, i64 0}
!427 = !{!"convolved.width512.base0", !428, i64 0}
!428 = !{!"convolved.width1024.base0", !429, i64 0}
!429 = !{!"convolved", !390, i64 0}
!430 = !{!431, !431, i64 0}
!431 = !{!"convolved.width4.base4", !421, i64 0}
!432 = !{!433, !433, i64 0}
!433 = !{!"convolved.width4.base8", !434, i64 0}
!434 = !{!"convolved.width8.base8", !422, i64 0}
!435 = !{!436, !436, i64 0}
!436 = !{!"convolved.width4.base12", !434, i64 0}
!437 = !{!438, !438, i64 0}
!438 = !{!"convolved.width4.base16", !439, i64 0}
!439 = !{!"convolved.width8.base16", !440, i64 0}
!440 = !{!"convolved.width16.base16", !423, i64 0}
!441 = !{!442, !442, i64 0}
!442 = !{!"convolved.width4.base20", !439, i64 0}
!443 = !{!444, !444, i64 0}
!444 = !{!"convolved.width4.base24", !445, i64 0}
!445 = !{!"convolved.width8.base24", !440, i64 0}
!446 = !{!447, !447, i64 0}
!447 = !{!"convolved.width4.base28", !445, i64 0}
!448 = !{!449, !449, i64 0}
!449 = !{!"convolved.width4.base32", !450, i64 0}
!450 = !{!"convolved.width8.base32", !451, i64 0}
!451 = !{!"convolved.width16.base32", !452, i64 0}
!452 = !{!"convolved.width32.base32", !424, i64 0}
!453 = !{!454, !454, i64 0}
!454 = !{!"convolved.width4.base36", !450, i64 0}
!455 = !{!456, !456, i64 0}
!456 = !{!"convolved.width4.base40", !457, i64 0}
!457 = !{!"convolved.width8.base40", !451, i64 0}
!458 = !{!459, !459, i64 0}
!459 = !{!"convolved.width4.base44", !457, i64 0}
!460 = !{!461, !461, i64 0}
!461 = !{!"convolved.width4.base48", !462, i64 0}
!462 = !{!"convolved.width8.base48", !463, i64 0}
!463 = !{!"convolved.width16.base48", !452, i64 0}
!464 = !{!465, !465, i64 0}
!465 = !{!"convolved.width4.base52", !462, i64 0}
!466 = !{!467, !467, i64 0}
!467 = !{!"convolved.width4.base56", !468, i64 0}
!468 = !{!"convolved.width8.base56", !463, i64 0}
!469 = !{!470, !470, i64 0}
!470 = !{!"convolved.width4.base60", !468, i64 0}
!471 = !{!472, !472, i64 0}
!472 = !{!"filter_zeroed.width8.base0", !473, i64 0}
!473 = !{!"filter_zeroed.width16.base0", !474, i64 0}
!474 = !{!"filter_zeroed.width32.base0", !475, i64 0}
!475 = !{!"filter_zeroed.width64.base0", !476, i64 0}
!476 = !{!"filter_zeroed.width128.base0", !477, i64 0}
!477 = !{!"filter_zeroed.width256.base0", !478, i64 0}
!478 = !{!"filter_zeroed.width512.base0", !479, i64 0}
!479 = !{!"filter_zeroed.width1024.base0", !392, i64 0}
!480 = !{!481, !481, i64 0}
!481 = !{!"filter_zeroed.width8.base8", !473, i64 0}
!482 = !{!483, !483, i64 0}
!483 = !{!"filter_zeroed.width8.base16", !484, i64 0}
!484 = !{!"filter_zeroed.width16.base16", !474, i64 0}
!485 = !{!486, !486, i64 0}
!486 = !{!"filter_zeroed.width8.base24", !484, i64 0}
!487 = !{!488, !488, i64 0}
!488 = !{!"filter_zeroed.width8.base32", !489, i64 0}
!489 = !{!"filter_zeroed.width16.base32", !490, i64 0}
!490 = !{!"filter_zeroed.width32.base32", !475, i64 0}
!491 = !{!492, !492, i64 0}
!492 = !{!"filter_zeroed.width8.base40", !489, i64 0}
!493 = !{!494, !494, i64 0}
!494 = !{!"output", !390, i64 0}
!495 = !{!496, !496, i64 0}
!496 = !{!"bias.width4.base0", !497, i64 0}
!497 = !{!"bias.width8.base0", !498, i64 0}
!498 = !{!"bias.width16.base0", !499, i64 0}
!499 = !{!"bias.width32.base0", !500, i64 0}
!500 = !{!"bias.width64.base0", !501, i64 0}
!501 = !{!"bias.width128.base0", !502, i64 0}
!502 = !{!"bias.width256.base0", !503, i64 0}
!503 = !{!"bias.width512.base0", !504, i64 0}
!504 = !{!"bias.width1024.base0", !394, i64 0}
!505 = !{!506, !506, i64 0}
!506 = !{!"bias.width4.base4", !497, i64 0}
!507 = !{!508, !508, i64 0}
!508 = !{!"bias.width4.base8", !509, i64 0}
!509 = !{!"bias.width8.base8", !498, i64 0}
!510 = !{!511, !511, i64 0}
!511 = !{!"bias.width4.base12", !509, i64 0}
