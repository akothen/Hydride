; ModuleID = 'blur7x7'
source_filename = "/home/muchenx2/Hydride/frontends/halide/src/runtime/posix_allocator.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx"

%struct.mach_timebase_info = type { i32, i32 }
%"struct.Halide::Runtime::Internal::Synchronization::hash_table" = type { [1024 x %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"] }
%"struct.Halide::Runtime::Internal::Synchronization::hash_bucket" = type { %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* }
%"class.Halide::Runtime::Internal::Synchronization::word_lock" = type { i64 }
%"struct.Halide::Runtime::Internal::Synchronization::queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", i64, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::thread_parker" = type <{ %struct.pthread_mutex_t, %struct.pthread_mutex_t, i8, [7 x i8] }>
%struct.pthread_mutex_t = type { [8 x i64] }
%"struct.Halide::Runtime::Internal::work_queue_t" = type { %struct.halide_mutex, i32, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i32, i32, [4 x i8], %struct.halide_mutex, %struct.halide_mutex, %struct.halide_mutex, i32, i32, [256 x %struct.halide_thread*], i8, i8, i32 }
%"struct.Halide::Runtime::Internal::work" = type { %struct.halide_parallel_task_t, i32 (i8*, i32, i8*)*, %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"*, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i8*, i32, i32, i32, i8 }
%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8, [7 x i8] }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32, [4 x i8] }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex = type { [1 x i64] }
%struct.halide_thread = type opaque
%"class.Halide::Runtime::Internal::TraceBuffer" = type { %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock", i32, i32, [1048576 x i8] }
%"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" = type { i32 }
%struct.halide_trace_event_t = type <{ i8*, i8*, i32*, i8*, %struct.halide_type_t, i32, i32, i32, i32, [4 x i8] }>
%struct.halide_type_t = type { i8, i8, i16 }
%"struct.Halide::Runtime::Internal::CacheEntry" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, i8*, i64, i8*, i32, i32, i32, i32, %struct.halide_dimension_t*, %struct.halide_buffer_t*, i64, i8, [7 x i8] }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_profiler_state = type { %struct.halide_mutex, i32, i32, i32, i32, %struct.halide_profiler_pipeline_stats*, void (i32*, i32*)*, %struct.halide_thread* }
%struct.halide_profiler_pipeline_stats = type { i64, i64, i64, i64, i64, i64, i8*, %struct.halide_profiler_func_stats*, i8*, i32, i32, i32, i32, i32, [4 x i8] }
%struct.halide_profiler_func_stats = type { i64, i64, i64, i64, i64, i64, i64, i8*, i32, [4 x i8] }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_scalar_value_t = type { %union.anon.28 }
%union.anon.28 = type { double }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64* }
%"struct.Halide::Runtime::Internal::Synchronization::parking_control" = type { i32 (...)** }
%"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* }
%"struct.Halide::Runtime::Internal::Synchronization::validate_action" = type { i8, [7 x i8], i64 }
%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"* }
%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair" = type { %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* }
%"struct.Halide::Runtime::Internal::spawned_thread" = type { void (i8*)*, i8*, i64 }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%"struct.Halide::Runtime::Internal::halide_tiff_header" = type <{ i16, i16, i32, i16, [15 x %"struct.Halide::Runtime::Internal::tiff_tag"], i32, [2 x i32], [2 x i32] }>
%"struct.Halide::Runtime::Internal::tiff_tag" = type { i16, i16, i32, %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" }
%"struct.Halide::Runtime::Internal::CacheBlockHeader" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, i32, [4 x i8] }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }

@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i64)* @halide_default_malloc, align 8
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 8
@_ZN6Halide7Runtime8Internal13error_handlerE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_error, align 8
@.str = private unnamed_addr constant [8 x i8] c"Error: \00", align 1
@_ZN6Halide7Runtime8Internal12custom_printE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_print, align 8
@_ZN6Halide7Runtime8Internal29halide_reference_clock_initedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal22halide_reference_clockE = linkonce local_unnamed_addr global i64 0, align 8
@_ZN6Halide7Runtime8Internal20halide_timebase_infoE = linkonce global %struct.mach_timebase_info zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal15Synchronization5tableE = linkonce global %"struct.Halide::Runtime::Internal::Synchronization::hash_table" zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal10work_queueE = linkonce global %"struct.Halide::Runtime::Internal::work_queue_t" { %struct.halide_mutex zeroinitializer, i32 0, i32 0, %"struct.Halide::Runtime::Internal::work"* null, i32 0, i32 0, i32 0, [4 x i8] undef, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, i32 0, i32 0, [256 x %struct.halide_thread*] zeroinitializer, i8 0, i8 0, i32 0 }, align 8
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 8
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 8
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 8
@_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.5 = private unnamed_addr constant [130 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:386 halide_abort_if_false() failed: next != nullptr\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.5.6 = private unnamed_addr constant [124 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:994 halide_abort_if_false() failed: val & 0x1\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.6 = private unnamed_addr constant [186 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:155 halide_abort_if_false() failed: bytes == limit && \22Logic error in thread pool work queue initialization.\\n\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [263 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:527 halide_abort_if_false() failed: (min_threads <= ((task_parent->task.min_threads * task_parent->active_workers) - task_parent->threads_reserved)) && \22Logic error: thread over commit.\\n\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"HL_NUM_THREADS\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"HL_NUMTHREADS\00", align 1
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 8
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 8
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 8
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 8
@llvm.global_dtors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @halide_thread_pool_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_trace_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_cache_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_profiler_shutdown, i8* null }]
@_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.4 = private unnamed_addr constant [38 x i8] c"halide_set_num_threads: must be >= 0.\00", align 1
@_ZN6Halide7Runtime8Internal17custom_get_symbolE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_get_symbol, align 8
@_ZN6Halide7Runtime8Internal19custom_load_libraryE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_load_library, align 8
@_ZN6Halide7Runtime8Internal25custom_get_library_symbolE = linkonce local_unnamed_addr global i8* (i8*, i8*)* @halide_default_get_library_symbol, align 8
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@_ZN6Halide7Runtime8Internal19halide_trace_bufferE = linkonce local_unnamed_addr global %"class.Halide::Runtime::Internal::TraceBuffer"* null, align 8
@_ZN6Halide7Runtime8Internal17halide_trace_fileE = linkonce local_unnamed_addr global i32 -1, align 4
@_ZN6Halide7Runtime8Internal22halide_trace_file_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE = linkonce local_unnamed_addr global i8* null, align 8
@_ZN6Halide7Runtime8Internal19halide_custom_traceE = linkonce local_unnamed_addr global i32 (i8*, %struct.halide_trace_event_t*)* @halide_default_trace, align 8
@_ZZ20halide_default_traceE3ids = internal global i32 1, align 4
@.str.32 = private unnamed_addr constant [144 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:115 halide_abort_if_false() failed: success && \22Could not write to trace file\22\0A\00", align 1
@.str.31 = private unnamed_addr constant [120 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:87 halide_abort_if_false() failed: size <= buffer_size\0A\00", align 1
@.str.1.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.11 = private unnamed_addr constant [140 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:218 halide_abort_if_false() failed: print_bits <= 64 && \22Tracing bad type\22\0A\00", align 1
@__const.halide_default_trace.event_types = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.17, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0)], align 8
@.str.17 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c">)\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c">, <\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c" = <\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.24 = private unnamed_addr constant [142 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:287 halide_abort_if_false() failed: print_bits >= 16 && \22Tracing a bad type\22\0A\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c" tag = \22\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.3.12 = private unnamed_addr constant [5 x i8] c"Load\00", align 1
@.str.4.13 = private unnamed_addr constant [6 x i8] c"Store\00", align 1
@.str.5.14 = private unnamed_addr constant [18 x i8] c"Begin realization\00", align 1
@.str.6.15 = private unnamed_addr constant [16 x i8] c"End realization\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"Produce\00", align 1
@.str.8.16 = private unnamed_addr constant [12 x i8] c"End produce\00", align 1
@.str.9.17 = private unnamed_addr constant [8 x i8] c"Consume\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"End consume\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Begin pipeline\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"End pipeline\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Tag\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"HL_TRACE_FILE\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.30 = private unnamed_addr constant [139 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:351 halide_abort_if_false() failed: file && \22Failed to open trace file\\n\22\0A\00", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE = linkonce local_unnamed_addr global [10 x i16] [i16 3, i16 3, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2], align 2
@_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\06\09\08\0B\0A\0D\0C\0F\0E", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\09\02\01\04\03\06\05\0D\0C", align 1
@.str.34 = private unnamed_addr constant [51 x i8] c"Bounds query buffer passed to halide_debug_to_file\00", align 1
@.str.1.35 = private unnamed_addr constant [59 x i8] c"Can't debug_to_file a Func with more than four dimensions\0A\00", align 1
@.str.2.36 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.3.37 = private unnamed_addr constant [6 x i8] c".tiff\00", align 1
@.str.4.38 = private unnamed_addr constant [5 x i8] c".tif\00", align 1
@.str.5.39 = private unnamed_addr constant [5 x i8] c".mat\00", align 1
@__const.halide_debug_to_file.header = private unnamed_addr constant [129 x i8] c"MATLAB 5.0 MAT-file, produced by Halide                                                                                     \00\01IM\00", align 1
@.str.6.40 = private unnamed_addr constant [53 x i8] c"Can't debug_to_file to a .mat file greater than 4GB\0A\00", align 1
@_ZN6Halide7Runtime8Internal16memoization_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal13cache_entriesE = linkonce global [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*] zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal18most_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal19least_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal14max_cache_sizeE = linkonce local_unnamed_addr global i64 1048576, align 8
@_ZN6Halide7Runtime8Internal18current_cache_sizeE = linkonce local_unnamed_addr global i64 0, align 8
@.str.2.42 = private unnamed_addr constant [126 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:284 halide_abort_if_false() failed: prev_hash_entry != nullptr\0A\00", align 1
@.str.3.43 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:373 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.4.44 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:377 halide_abort_if_false() failed: least_recently_used == entry\0A\00", align 1
@.str.5.45 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:380 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.9.46 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:472 halide_abort_if_false() failed: no_host_pointers_equal\0A\00", align 1
@.str.12.47 = private unnamed_addr constant [123 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:550 halide_abort_if_false() failed: entry->in_use_count > 0\0A\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.57 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.58 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.59 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.60 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.61 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.62 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.63 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.64 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9.65 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11.67 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12.68 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13.71 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18.72 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17.73 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16.74 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15.75 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14.76 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19.77 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20.78 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21.79 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23.82 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24.83 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 8
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@.str.6.88 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.89 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.90 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.91 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.92 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.93 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.96 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.97 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.98 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.99 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26.100 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27.101 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28.102 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29.103 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30.104 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31.105 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32.106 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33.107 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34.108 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.111 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.112 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.113 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.114 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.115 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.116 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.117 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.118 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.119 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.120 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.121 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.122 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.123 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.124 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.125 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.126 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.127 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.128 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.129 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.130 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.131 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.132 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.133 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.134 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.135 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.136 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.137 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.138 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.139 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.140 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.141 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.142 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.143 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.144 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.145 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.146 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.147 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50.148 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.149 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.150 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.151 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.152 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.153 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.29.163 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.7.164 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8.165 = private unnamed_addr constant [14 x i8] c" total time: \00", align 1
@.str.9.166 = private unnamed_addr constant [4 x i8] c" ms\00", align 1
@.str.10.167 = private unnamed_addr constant [12 x i8] c"  samples: \00", align 1
@.str.11.168 = private unnamed_addr constant [9 x i8] c"  runs: \00", align 1
@.str.12.169 = private unnamed_addr constant [13 x i8] c"  time/run: \00", align 1
@.str.13.170 = private unnamed_addr constant [5 x i8] c" ms\0A\00", align 1
@.str.14.171 = private unnamed_addr constant [24 x i8] c" average threads used: \00", align 1
@.str.15.172 = private unnamed_addr constant [20 x i8] c" heap allocations: \00", align 1
@.str.16.173 = private unnamed_addr constant [20 x i8] c"  peak heap usage: \00", align 1
@.str.17.174 = private unnamed_addr constant [8 x i8] c" bytes\0A\00", align 1
@.str.18.175 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.19.176 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.20.177 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.21.178 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.22.179 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.23.180 = private unnamed_addr constant [3 x i8] c"%)\00", align 1
@.str.24.181 = private unnamed_addr constant [10 x i8] c"threads: \00", align 1
@.str.25.182 = private unnamed_addr constant [8 x i8] c" peak: \00", align 1
@.str.26.183 = private unnamed_addr constant [7 x i8] c" num: \00", align 1
@.str.27.184 = private unnamed_addr constant [7 x i8] c" avg: \00", align 1
@.str.28.185 = private unnamed_addr constant [9 x i8] c" stack: \00", align 1
@_ZZ25halide_profiler_get_stateE1s = internal global %struct.halide_profiler_state { %struct.halide_mutex zeroinitializer, i32 1, i32 0, i32 0, i32 0, %struct.halide_profiler_pipeline_stats* null, void (i32*, i32*)* null, %struct.halide_thread* null }, align 8
@.str.186 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:246 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.1.187 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:273 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.2.188 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:274 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.3.189 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:275 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@.str.4.190 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:309 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.5.191 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:310 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.6.192 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:311 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 8
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.197 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant i64 0
@1 = private constant i64 0
@2 = private constant [4 x i64*] [i64* @0, i64* null, i64* @1, i64* null]
@str = private constant [6 x i8] c"input\00", align 32
@3 = private constant i64 0
@4 = private constant i64 0
@5 = private constant [4 x i64*] [i64* @3, i64* null, i64* @4, i64* null]
@str.200 = private constant [7 x i8] c"blur_y\00", align 32
@6 = private constant [2 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @2, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i32 0, i32 0), i32 2, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @5, i32 0, i32 0) }]
@str.201 = private constant [84 x i8] c"arm-64-osx-arm_dot_prod-arm_fp16-armv7s-armv81a-no_asserts-no_bounds_query-sve-sve2\00", align 32
@str.202 = private constant [8 x i8] c"blur7x7\00", align 32
@blur7x7_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 2, %struct.halide_filter_argument_t* getelementptr inbounds ([2 x %struct.halide_filter_argument_t], [2 x %struct.halide_filter_argument_t]* @6, i32 0, i32 0), i8* getelementptr inbounds ([84 x i8], [84 x i8]* @str.201, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.202, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.76, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15.75, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16.74, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.73, i64 0, i64 0)], align 8

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i64 %x) #0 {
entry:
  %add = add i64 %x, 32
  %call1 = tail call i8* @malloc(i64 %add) #13
  %cmp = icmp eq i8* %call1, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call1 to i64
  %sub = add i64 %0, 39
  %and = and i64 %sub, -32
  %1 = inttoptr i64 %and to i8*
  %2 = inttoptr i64 %and to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 -1
  store i8* %call1, i8** %arrayidx, align 8, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i64 -8
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !10
  tail call void @free(i8* %1) #13
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i64)* @halide_set_custom_malloc(i8* (i8*, i64)* %user_malloc) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  store i8* (i8*, i64)* %user_malloc, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  ret i8* (i8*, i64)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak noalias i8* @halide_malloc(i8* %user_context, i64 %x) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %user_context, i64 %x) #13
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %ptr) #13
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_error(i8* %user_context, i8* %msg) #0 {
entry:
  %buf = alloca [4096 x i8], align 1
  %0 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %0) #11
  %add.ptr = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 4094
  %call = call i8* @halide_string_to_string(i8* nonnull %0, i8* nonnull %add.ptr, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)) #13
  %add.ptr2 = getelementptr inbounds i8, i8* %call, i64 4094
  %call3 = call i8* @halide_string_to_string(i8* %call, i8* nonnull %add.ptr2, i8* %msg) #13
  %arrayidx = getelementptr inbounds i8, i8* %call3, i64 -1
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %cmp.not = icmp eq i8 %1, 10
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8 10, i8* %call3, align 1, !tbaa !14
  %arrayidx5 = getelementptr inbounds i8, i8* %call3, i64 1
  store i8 0, i8* %arrayidx5, align 1, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %dst.0 = phi i8* [ %arrayidx5, %if.then ], [ %call3, %entry ]
  %sub.ptr.lhs.cast = ptrtoint i8* %dst.0 to i64
  %sub.ptr.rhs.cast = ptrtoint [4096 x i8]* %buf to i64
  %sub.ptr.sub = sub i64 1, %sub.ptr.rhs.cast
  %add = add i64 %sub.ptr.sub, %sub.ptr.lhs.cast
  %call9 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 %add) #13
  call void @halide_print(i8* %user_context, i8* nonnull %0) #13
  call void @abort() #13
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @abort() local_unnamed_addr #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak void @halide_error(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #13
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_error_handler(void (i8*, i8*)* %handler) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  store void (i8*, i8*)* %handler, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_print(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #13
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_print(void (i8*, i8*)* %print) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  store void (i8*, i8*)* %print, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_start_clock(i8* %user_context) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_reference_clock_initedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i32 @mach_timebase_info(%struct.mach_timebase_info* nonnull @_ZN6Halide7Runtime8Internal20halide_timebase_infoE) #13
  %call1 = tail call i64 @mach_absolute_time() #13
  store i64 %call1, i64* @_ZN6Halide7Runtime8Internal22halide_reference_clockE, align 8, !tbaa !18
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_reference_clock_initedE, align 1, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

declare i32 @mach_timebase_info(%struct.mach_timebase_info*) local_unnamed_addr #1

declare i64 @mach_absolute_time() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i64 @halide_current_time_ns(i8* %user_context) local_unnamed_addr #0 {
entry:
  %call = tail call i64 @mach_absolute_time() #13
  %0 = load i64, i64* @_ZN6Halide7Runtime8Internal22halide_reference_clockE, align 8, !tbaa !18
  %sub = sub i64 %call, %0
  %1 = load i32, i32* getelementptr inbounds (%struct.mach_timebase_info, %struct.mach_timebase_info* @_ZN6Halide7Runtime8Internal20halide_timebase_infoE, i64 0, i32 0), align 4, !tbaa !20
  %conv = zext i32 %1 to i64
  %mul = mul i64 %sub, %conv
  %2 = load i32, i32* getelementptr inbounds (%struct.mach_timebase_info, %struct.mach_timebase_info* @_ZN6Halide7Runtime8Internal20halide_timebase_infoE, i64 0, i32 1), align 4, !tbaa !23
  %conv1 = zext i32 %2 to i64
  %div = udiv i64 %mul, %conv1
  ret i64 %div
}

; Function Attrs: nounwind mustprogress
define weak void @halide_sleep_ms(i8* %user_context, i32 %ms) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %ms, 1000
  %call = tail call i32 @usleep(i32 %mul) #13
  ret void
}

declare i32 @usleep(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_print(i8* %user_context, i8* %str) #0 {
entry:
  %call = tail call i64 @strlen(i8* %str) #13
  %call1 = tail call i64 @write(i32 1, i8* %str, i64 %call) #13
  ret void
}

declare i64 @strlen(i8*) local_unnamed_addr #1

declare i64 @write(i32, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_host_cpu_count() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @sysconf(i32 58) #13
  %conv = trunc i64 %call to i32
  ret i32 %conv
}

declare i64 @sysconf(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_yield() local_unnamed_addr #0 {
entry:
  %call = tail call i32 @swtch_pri(i32 0) #13
  ret void
}

declare i32 @swtch_pri(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #13
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #13
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %job = alloca %"struct.Halide::Runtime::Internal::work", align 8
  %cmp = icmp slt i32 %size, 1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %"struct.Halide::Runtime::Internal::work"* %job to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %0) #11
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 0
  store i32 (i8*, i32, i32, i8*, i8*)* null, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !24
  %min2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 5
  store i32 %min, i32* %min2, align 4, !tbaa !27
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 6
  store i32 %size, i32* %extent, align 8, !tbaa !28
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 8
  store i8 0, i8* %serial, align 8, !tbaa !29
  %semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 3
  store %struct.halide_semaphore_acquire_t* null, %struct.halide_semaphore_acquire_t** %semaphores, align 8, !tbaa !30
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 4
  store i32 0, i32* %num_semaphores, align 8, !tbaa !31
  %closure8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 1
  store i8* %closure, i8** %closure8, align 8, !tbaa !32
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 7
  store i32 0, i32* %min_threads, align 4, !tbaa !33
  %name = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 2
  store i8* null, i8** %name, align 8, !tbaa !34
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 1
  store i32 (i8*, i32, i8*)* %f, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !35
  %user_context11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 7
  store i8* %user_context, i8** %user_context11, align 8, !tbaa !36
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 9
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 8
  %1 = bitcast i32* %active_workers to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %1, align 8, !tbaa !37
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !38
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !39
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %job, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !40
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 4
  store i32 0, i32* %sibling_count, align 8, !tbaa !41
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 5
  store %"struct.Halide::Runtime::Internal::work"* null, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !42
  call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 1, %"struct.Halide::Runtime::Internal::work"* nonnull %job, %"struct.Halide::Runtime::Internal::work"* null) #14
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %job) #14
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %2 = load i32, i32* %exit_status, align 4, !tbaa !43
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %0) #11
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %2, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = load atomic i64, i64* %state.i monotonic, align 8
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %6 = ptrtoint %struct.halide_mutex* %mutex to i64
  br label %while.cond.outer.i.i

while.cond.outer.i.i:                             ; preds = %while.cond.outer.i.i.backedge, %if.then.i
  %expected.0.ph.i.i = phi i64 [ %2, %if.then.i ], [ %expected.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i = phi i32 [ 40, %if.then.i ], [ %spinner.sroa.0.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %and55.i.i = and i64 %expected.0.ph.i.i, 1
  %tobool.not56.i.i = icmp eq i64 %and55.i.i, 0
  br i1 %tobool.not56.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %while.cond.outer.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %expected.057.i.i = phi i64 [ %9, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i ], [ %expected.0.ph.i.i, %while.cond.outer.i.i ]
  %or.i.i = or i64 %expected.057.i.i, 1
  %7 = cmpxchg weak i64* %state.i, i64 %expected.057.i.i, i64 %or.i.i acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then.i.i
  %9 = extractvalue { i64, i1 } %7, 0
  %and.i.i = and i64 %9, 1
  %tobool.not.i.i = icmp eq i64 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.end4.i.i.loopexit

if.end4.i.i.loopexit:                             ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %10 = extractvalue { i64, i1 } %7, 0
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end4.i.i.loopexit, %while.cond.outer.i.i
  %expected.0.lcssa.i.i = phi i64 [ %expected.0.ph.i.i, %while.cond.outer.i.i ], [ %10, %if.end4.i.i.loopexit ]
  %cmp.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i, 0
  br i1 %cmp.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, label %if.end8.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i: ; preds = %if.end4.i.i
  %cmp4.i.not.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i, 1
  br i1 %cmp4.i.not.i.i, label %if.end8.i.i, label %if.then6.i.i

if.then6.i.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i
  %dec.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i, -1
  call void @halide_thread_yield() #13
  %11 = load atomic i64, i64* %state.i monotonic, align 8
  br label %while.cond.outer.i.i.backedge

if.end8.i.i:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, %if.end4.i.i
  %spinner.sroa.0.152.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i ], [ %spinner.sroa.0.0.ph.i.i, %if.end4.i.i ]
  %and9.i.i = and i64 %expected.0.lcssa.i.i, 2
  %cmp.i.i = icmp eq i64 %and9.i.i, 0
  br i1 %cmp.i.i, label %if.then10.i.i, label %if.end19.i.i

if.then10.i.i:                                    ; preds = %if.end8.i.i
  %or12.i.i = or i64 %expected.0.lcssa.i.i, 2
  %12 = cmpxchg weak i64* %state.i, i64 %expected.0.lcssa.i.i, i64 %or12.i.i monotonic monotonic
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %if.end19.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then10.i.i
  %14 = extractvalue { i64, i1 } %12, 0
  br label %while.cond.outer.i.i.backedge

if.end19.i.i:                                     ; preds = %if.then10.i.i, %if.end8.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !44
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !46
  %call21.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %5, i64 %6) #13
  %cmp22.i.i = icmp eq i64 %call21.i.i, %6
  br i1 %cmp22.i.i, label %cleanup30.critedge.i.i, label %if.end24.i.i

if.end24.i.i:                                     ; preds = %if.end19.i.i
  %15 = load atomic i64, i64* %state.i monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %while.cond.outer.i.i.backedge

while.cond.outer.i.i.backedge:                    ; preds = %if.end24.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i, %if.then6.i.i
  %expected.0.ph.i.i.be = phi i64 [ %14, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ %15, %if.end24.i.i ], [ %11, %if.then6.i.i ]
  %spinner.sroa.0.0.ph.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ 40, %if.end24.i.i ], [ %dec.i.i.i, %if.then6.i.i ]
  br label %while.cond.outer.i.i

cleanup30.critedge.i.i:                           ; preds = %if.end19.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit: ; preds = %if.then.i.i, %cleanup30.critedge.i.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_jobs, %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !48, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %land.rhs.i, label %if.end4

land.rhs.i:                                       ; preds = %entry, %while.body.i
  %bytes.011.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), %entry ]
  %1 = load i8, i8* %bytes.011.i, align 1, !tbaa !14
  %cmp2.i = icmp eq i8 %1, 0
  br i1 %cmp2.i, label %while.body.i, label %do.body.i

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %bytes.011.i, i64 1
  %exitcond.not.i = icmp eq i8* %incdec.ptr.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*)
  br i1 %exitcond.not.i, label %do.body.i, label %land.rhs.i, !llvm.loop !52

do.body.i:                                        ; preds = %while.body.i, %land.rhs.i
  %bytes.0.lcssa.i = phi i8* [ %bytes.011.i, %land.rhs.i ], [ bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*), %while.body.i ]
  %cmp3.i = icmp eq i8* %bytes.0.lcssa.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*)
  br i1 %cmp3.i, label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit, label %if.then.i

if.then.i:                                        ; preds = %do.body.i
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.6, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit

_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit: ; preds = %if.then.i, %do.body.i
  %2 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !54
  %tobool1.not = icmp eq i32 %2, 0
  br i1 %tobool1.not, label %if.then2, label %if.end

if.then2:                                         ; preds = %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #14
  br label %if.end

if.end:                                           ; preds = %if.then2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %3 = phi i32 [ %call, %if.then2 ], [ %2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit ]
  %4 = icmp sgt i32 %3, 1
  %spec.select.i = select i1 %4, i32 %3, i32 1
  %5 = icmp slt i32 %spec.select.i, 256
  %call3176 = select i1 %5, i32 %spec.select.i, i32 256
  store i32 %call3176, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !54
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !48
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %cmp181 = icmp sgt i32 %num_jobs, 0
  br i1 %cmp181, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end4
  %wide.trip.count = zext i32 %num_jobs to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.inc
  %phi.bo = and i8 %stealable_jobs.1, 1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end4
  %workers_to_wake.0.lcssa = phi i32 [ -1, %if.end4 ], [ %workers_to_wake.1, %for.cond.cleanup.loopexit ]
  %stealable_jobs.0.lcssa = phi i8 [ 0, %if.end4 ], [ %phi.bo, %for.cond.cleanup.loopexit ]
  %job_has_acquires.0.lcssa = phi i8 [ 0, %if.end4 ], [ %spec.select, %for.cond.cleanup.loopexit ]
  %job_may_block.0.lcssa = phi i8 [ 0, %if.end4 ], [ %job_may_block.1, %for.cond.cleanup.loopexit ]
  %min_threads.0.lcssa = phi i32 [ 0, %if.end4 ], [ %add, %for.cond.cleanup.loopexit ]
  %cmp31 = icmp eq %"struct.Halide::Runtime::Internal::work"* %task_parent, null
  br i1 %cmp31, label %if.then32, label %do.body61

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %indvars.iv193 = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next194, %for.inc ]
  %min_threads.0187 = phi i32 [ 0, %for.body.preheader ], [ %add, %for.inc ]
  %job_may_block.0185 = phi i8 [ 0, %for.body.preheader ], [ %job_may_block.1, %for.inc ]
  %job_has_acquires.0184 = phi i8 [ 0, %for.body.preheader ], [ %spec.select, %for.inc ]
  %stealable_jobs.0183 = phi i8 [ 0, %for.body.preheader ], [ %stealable_jobs.1, %for.inc ]
  %workers_to_wake.0182 = phi i32 [ -1, %for.body.preheader ], [ %workers_to_wake.1, %for.inc ]
  %min_threads5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 7
  %6 = load i32, i32* %min_threads5, align 4, !tbaa !33
  %cmp6 = icmp eq i32 %6, 0
  %add = add i32 %6, %min_threads.0187
  %stealable_jobs.1 = select i1 %cmp6, i8 1, i8 %stealable_jobs.0183
  %job_may_block.1 = select i1 %cmp6, i8 %job_may_block.0185, i8 1
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 4
  %7 = load i32, i32* %num_semaphores, align 8, !tbaa !31
  %cmp16.not = icmp eq i32 %7, 0
  %spec.select = select i1 %cmp16.not, i8 %job_has_acquires.0184, i8 1
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 8
  %8 = load i8, i8* %serial, align 8, !tbaa !29, !range !17
  %tobool22.not = icmp eq i8 %8, 0
  br i1 %tobool22.not, label %if.else24, label %if.then23

if.then23:                                        ; preds = %for.body
  %inc = add nsw i32 %workers_to_wake.0182, 1
  br label %for.inc

if.else24:                                        ; preds = %for.body
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 6
  %9 = load i32, i32* %extent, align 8, !tbaa !28
  %add28 = add nsw i32 %9, %workers_to_wake.0182
  br label %for.inc

for.inc:                                          ; preds = %if.else24, %if.then23
  %workers_to_wake.1 = phi i32 [ %inc, %if.then23 ], [ %add28, %if.else24 ]
  %indvars.iv.next194 = add nuw nsw i64 %indvars.iv193, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next194, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body, !llvm.loop !55

if.then32:                                        ; preds = %for.cond.cleanup
  %10 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %11 = and i8 %10, 1
  %12 = icmp eq i8 %11, 0
  %not. = xor i1 %12, true
  %add36 = zext i1 %not. to i32
  %min_threads.2 = add nsw i32 %min_threads.0.lcssa, %add36
  %13 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !56
  %cmp38180 = icmp slt i32 %13, 256
  br i1 %cmp38180, label %land.rhs, label %do.end50

land.rhs:                                         ; preds = %if.then32, %while.body
  %14 = phi i32 [ %inc45, %while.body ], [ %13, %if.then32 ]
  %15 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !54
  %sub = add nsw i32 %15, -1
  %cmp39 = icmp slt i32 %14, %sub
  br i1 %cmp39, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %add40 = add nsw i32 %14, 1
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  %sub41 = sub i32 %add40, %16
  %cmp42 = icmp slt i32 %sub41, %min_threads.2
  br i1 %cmp42, label %while.body, label %do.end50

while.body:                                       ; preds = %lor.rhs, %land.rhs
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !58
  %inc43 = add nsw i32 %17, 1
  store i32 %inc43, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !58
  %call44 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal13worker_threadEPv, i8* null) #14
  %18 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !56
  %inc45 = add nsw i32 %18, 1
  store i32 %inc45, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !56
  %idxprom46 = sext i32 %18 to i64
  %arrayidx47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %idxprom46
  store %struct.halide_thread* %call44, %struct.halide_thread** %arrayidx47, align 8, !tbaa !10
  %cmp38 = icmp slt i32 %18, 255
  br i1 %cmp38, label %land.rhs, label %do.end50, !llvm.loop !59

do.end50:                                         ; preds = %while.body, %lor.rhs, %if.then32
  br i1 %12, label %if.end77, label %if.then54

if.then54:                                        ; preds = %do.end50
  %19 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  %inc55 = add nsw i32 %19, 1
  store i32 %inc55, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  br label %if.end77

do.body61:                                        ; preds = %for.cond.cleanup
  %min_threads63 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 0, i32 7
  %20 = load i32, i32* %min_threads63, align 4, !tbaa !33
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 8
  %21 = load i32, i32* %active_workers, align 8, !tbaa !60
  %mul = mul nsw i32 %21, %20
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %22 = load i32, i32* %threads_reserved, align 8, !tbaa !61
  %sub64 = sub nsw i32 %mul, %22
  %cmp65.not = icmp sgt i32 %min_threads.0.lcssa, %sub64
  br i1 %cmp65.not, label %if.then66, label %do.end69

if.then66:                                        ; preds = %do.body61
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([263 x i8], [263 x i8]* @.str.3, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end69

do.end69:                                         ; preds = %if.then66, %do.body61
  %23 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %if.end77, label %if.then73

if.then73:                                        ; preds = %do.end69
  %26 = load i32, i32* %threads_reserved, align 8, !tbaa !61
  %inc75 = add nsw i32 %26, 1
  store i32 %inc75, i32* %threads_reserved, align 8, !tbaa !61
  br label %if.end77

if.end77:                                         ; preds = %if.then73, %do.end69, %if.then54, %do.end50
  br i1 %cmp181, label %for.body83.lr.ph, label %for.cond.cleanup82

for.body83.lr.ph:                                 ; preds = %if.end77
  %.promoted = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !62
  %27 = zext i32 %num_jobs to i64
  %min.iters.check = icmp eq i32 %num_jobs, 1
  br i1 %min.iters.check, label %for.body83.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body83.lr.ph
  %n.vec = and i64 %27, 4294967294
  %ind.end = and i64 %27, 1
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vector.recur = phi %"struct.Halide::Runtime::Internal::work"* [ %.promoted, %vector.ph ], [ %31, %vector.body ]
  %offset.idx = sub i64 %27, %index
  %28 = add nsw i64 %offset.idx, -1
  %29 = add i64 %offset.idx, -2
  %30 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28
  %31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29
  %32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 2
  %33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %vector.recur, %"struct.Halide::Runtime::Internal::work"** %32, align 8, !tbaa !63
  store %"struct.Halide::Runtime::Internal::work"* %30, %"struct.Halide::Runtime::Internal::work"** %33, align 8, !tbaa !63
  %34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 3
  %35 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %34, align 8, !tbaa !40
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %35, align 8, !tbaa !40
  %36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 4
  %37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 4
  store i32 %num_jobs, i32* %36, align 8, !tbaa !41
  store i32 %num_jobs, i32* %37, align 8, !tbaa !41
  %38 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 6
  %39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 6
  store i32 0, i32* %38, align 8, !tbaa !61
  store i32 0, i32* %39, align 8, !tbaa !61
  %index.next = add i64 %index, 2
  %40 = icmp eq i64 %index.next, %n.vec
  br i1 %40, label %middle.block, label %vector.body, !llvm.loop !64

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %27
  br i1 %cmp.n, label %for.cond80.for.cond.cleanup82_crit_edge, label %for.body83.preheader

for.body83.preheader:                             ; preds = %for.body83.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ %ind.end, %middle.block ], [ %27, %for.body83.lr.ph ]
  %scalar.recur.ph = phi %"struct.Halide::Runtime::Internal::work"* [ %31, %middle.block ], [ %.promoted, %for.body83.lr.ph ]
  br label %for.body83

for.cond80.for.cond.cleanup82_crit_edge:          ; preds = %for.body83, %middle.block
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !62
  br label %for.cond.cleanup82

for.cond.cleanup82:                               ; preds = %for.cond80.for.cond.cleanup82_crit_edge, %if.end77
  %41 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !66
  %tobool96 = icmp ne i32 %41, 0
  %42 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8
  %43 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8
  %cmp98 = icmp slt i32 %42, %43
  %44 = or i1 %tobool96, %cmp98
  %cmp102 = icmp sgt i32 %workers_to_wake.0.lcssa, %42
  %or.cond174 = or i1 %cmp102, %44
  %storemerge = select i1 %or.cond174, i32 %43, i32 %workers_to_wake.0.lcssa
  store i32 %storemerge, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !67
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #14
  %45 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !67
  %46 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !58
  %cmp106 = icmp sgt i32 %45, %46
  br i1 %cmp106, label %if.then107, label %if.end111

for.body83:                                       ; preds = %for.body83.preheader, %for.body83
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body83 ], [ %indvars.iv.ph, %for.body83.preheader ]
  %scalar.recur = phi %"struct.Halide::Runtime::Internal::work"* [ %arrayidx85, %for.body83 ], [ %scalar.recur.ph, %for.body83.preheader ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx85 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %scalar.recur, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !63
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !40
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 4
  store i32 %num_jobs, i32* %sibling_count, align 8, !tbaa !41
  %threads_reserved93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 6
  store i32 0, i32* %threads_reserved93, align 8, !tbaa !61
  %cmp81 = icmp sgt i64 %indvars.iv, 1
  br i1 %cmp81, label %for.body83, label %for.cond80.for.cond.cleanup82_crit_edge, !llvm.loop !68

if.then107:                                       ; preds = %for.cond.cleanup82
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #14
  %tobool108.not = icmp eq i8 %stealable_jobs.0.lcssa, 0
  br i1 %tobool108.not, label %if.end111, label %if.then109

if.then109:                                       ; preds = %if.then107
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #14
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.then107, %for.cond.cleanup82
  %47 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %48 = and i8 %47, 1
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %if.end123, label %if.then115

if.then115:                                       ; preds = %if.end111
  br i1 %cmp31, label %if.else120, label %if.then117

if.then117:                                       ; preds = %if.then115
  %threads_reserved118 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %50 = load i32, i32* %threads_reserved118, align 8, !tbaa !61
  %dec119 = add nsw i32 %50, -1
  store i32 %dec119, i32* %threads_reserved118, align 8, !tbaa !61
  br label %if.end123

if.else120:                                       ; preds = %if.then115
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  %dec121 = add nsw i32 %51, -1
  store i32 %dec121, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  br label %if.end123

if.end123:                                        ; preds = %if.else120, %if.then117, %if.end111
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %owned_job) local_unnamed_addr #0 {
entry:
  %active_workers.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 8
  %tobool.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %owned_job, null
  %extent.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 0, i32 6
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 9
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 5
  %siblings56 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 3
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 11
  %next_job10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 2
  br label %while.cond

while.cond:                                       ; preds = %while.cond.backedge, %entry
  %spin_count.0 = phi i32 [ 0, %entry ], [ %spin_count.0.be, %while.cond.backedge ]
  br i1 %tobool.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.cond
  %0 = load i32, i32* %extent.i, align 8, !tbaa !28
  %tobool.not.i = icmp eq i32 %0, 0
  br i1 %tobool.not.i, label %cond.end, label %if.then

cond.false:                                       ; preds = %while.cond
  %1 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !69, !range !17
  %tobool1.not = icmp eq i8 %1, 0
  br i1 %tobool1.not, label %do.end.thread, label %while.end316

cond.end:                                         ; preds = %cond.true
  %2 = load i32, i32* %active_workers.i, align 8, !tbaa !60
  %tobool2.i.not = icmp eq i32 %2, 0
  br i1 %tobool2.i.not, label %while.end316, label %if.then

if.then:                                          ; preds = %cond.end, %cond.true
  %3 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !62
  %4 = load i32, i32* %exit_status, align 4, !tbaa !43
  %cmp.not = icmp eq i32 %4, 0
  br i1 %cmp.not, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %active_workers.i, align 8, !tbaa !60
  %cmp4 = icmp eq i32 %5, 0
  br i1 %cmp4, label %while.cond6.preheader, label %do.end

while.cond6.preheader:                            ; preds = %if.then3
  %cmp7.not524 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, %owned_job
  br i1 %cmp7.not524, label %while.end, label %while.body8

while.body8:                                      ; preds = %while.cond6.preheader, %while.body8
  %job.0525 = phi %"struct.Halide::Runtime::Internal::work"* [ %6, %while.body8 ], [ %3, %while.cond6.preheader ]
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !63
  %cmp7.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %6, %owned_job
  br i1 %cmp7.not, label %while.end.loopexit, label %while.body8, !llvm.loop !70

while.end.loopexit:                               ; preds = %while.body8
  %next_job.le = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond6.preheader
  %prev_ptr.0.lcssa = phi %"struct.Halide::Runtime::Internal::work"** [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %while.cond6.preheader ], [ %next_job.le, %while.end.loopexit ]
  %7 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job10, align 8, !tbaa !63
  store %"struct.Halide::Runtime::Internal::work"* %7, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.0.lcssa, align 8, !tbaa !10
  store i32 0, i32* %extent.i, align 8, !tbaa !28
  br label %while.cond.backedge

if.else:                                          ; preds = %if.then
  %8 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !42
  %tobool11.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %8, null
  br i1 %tobool11.not, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %exit_status13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %8, i64 0, i32 9
  %9 = load i32, i32* %exit_status13, align 4, !tbaa !43
  %cmp14.not = icmp eq i32 %9, 0
  br i1 %cmp14.not, label %do.end, label %if.then15

if.then15:                                        ; preds = %land.lhs.true
  store i32 %9, i32* %exit_status, align 4, !tbaa !43
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #14
  br label %while.cond.backedge

do.end:                                           ; preds = %land.lhs.true, %if.else, %if.then3
  %tobool23.not527 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, null
  br i1 %tobool23.not527, label %if.then105, label %do.end27

do.end.thread:                                    ; preds = %cond.false
  %10 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !62
  %tobool23.not527563 = icmp eq %"struct.Halide::Runtime::Internal::work"* %10, null
  br i1 %tobool23.not527563, label %if.else112, label %do.end27.us

do.end27.us:                                      ; preds = %do.end.thread, %cleanup.us
  %job.1529.us = phi %"struct.Halide::Runtime::Internal::work"* [ %29, %cleanup.us ], [ %10, %do.end.thread ]
  %prev_ptr.1528.us = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95.us, %cleanup.us ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end.thread ]
  %parent_job29.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 5
  %11 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29.us, align 8, !tbaa !42
  %cmp30.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %11, null
  br i1 %cmp30.us, label %if.then31.us, label %if.else32.us

if.else32.us:                                     ; preds = %do.end27.us
  %active_workers33.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 8
  %12 = load i32, i32* %active_workers33.us, align 8, !tbaa !60
  %cmp34.us = icmp eq i32 %12, 0
  %min_threads.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 0, i32 7
  %13 = load i32, i32* %min_threads.us, align 4, !tbaa !33
  br i1 %cmp34.us, label %if.then35.us, label %if.else38.us

if.else38.us:                                     ; preds = %if.else32.us
  %mul.us = mul nsw i32 %13, %12
  %threads_reserved42.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %14 = load i32, i32* %threads_reserved42.us, align 8, !tbaa !61
  %sub43.us = sub nsw i32 %mul.us, %14
  br label %if.end45.us

if.then35.us:                                     ; preds = %if.else32.us
  %threads_reserved.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %15 = load i32, i32* %threads_reserved.us, align 8, !tbaa !61
  %sub37.us = sub nsw i32 %13, %15
  br label %if.end45.us

if.then31.us:                                     ; preds = %do.end27.us
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !56
  %add.us = add nsw i32 %16, 1
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  %sub.us = sub i32 %add.us, %17
  br label %if.end45.us

if.end45.us:                                      ; preds = %if.then31.us, %if.then35.us, %if.else38.us
  %threads_available.0.us = phi i32 [ %sub.us, %if.then31.us ], [ %sub37.us, %if.then35.us ], [ %sub43.us, %if.else38.us ]
  %min_threads47.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 7
  %18 = load i32, i32* %min_threads47.us, align 4, !tbaa !33
  %cmp48.not.us = icmp sge i32 %threads_available.0.us, %18
  %serial.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 8
  %19 = load i8, i8* %serial.us, align 8, !tbaa !29, !range !17
  %tobool69.not.us = icmp eq i8 %19, 0
  br i1 %tobool69.not.us, label %if.end45.us.lor.end73.us_crit_edge, label %lor.rhs70.us

if.end45.us.lor.end73.us_crit_edge:               ; preds = %if.end45.us
  %.0 = and i1 %cmp48.not.us, true
  br label %lor.end73.us

lor.rhs70.us:                                     ; preds = %if.end45.us
  %active_workers71.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 8
  %20 = load i32, i32* %active_workers71.us, align 8, !tbaa !60
  %cmp72.us = icmp eq i32 %20, 0
  %.1 = and i1 %cmp48.not.us, %cmp72.us
  br label %lor.end73.us

lor.end73.us:                                     ; preds = %if.end45.us.lor.end73.us_crit_edge, %lor.rhs70.us
  %.phi = phi i1 [ %.0, %if.end45.us.lor.end73.us_crit_edge ], [ %.1, %lor.rhs70.us ]
  br i1 %.phi, label %if.then86.us, label %cleanup.us

if.then86.us:                                     ; preds = %lor.end73.us
  %next_semaphore.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 10
  %21 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !38
  %num_semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 4
  %22 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !31
  %cmp14.i.us = icmp slt i32 %21, %22
  br i1 %cmp14.i.us, label %for.body.lr.ph.i.us, label %if.else127

for.body.lr.ph.i.us:                              ; preds = %if.then86.us
  %semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 3
  br label %for.body.i.us

for.body.i.us:                                    ; preds = %for.inc.i.us, %for.body.lr.ph.i.us
  %23 = phi i32 [ %21, %for.body.lr.ph.i.us ], [ %inc.i.us, %for.inc.i.us ]
  %24 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i.us, align 8, !tbaa !30
  %idxprom.i.us = sext i32 %23 to i64
  %semaphore.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 0
  %25 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i.us, align 8, !tbaa !71
  %count.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 1
  %26 = load i32, i32* %count.i.us, align 8, !tbaa !73
  %call.i.us = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %25, i32 %26) #13
  br i1 %call.i.us, label %for.inc.i.us, label %cleanup.us

for.inc.i.us:                                     ; preds = %for.body.i.us
  %27 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !38
  %inc.i.us = add nsw i32 %27, 1
  store i32 %inc.i.us, i32* %next_semaphore.i.us, align 8, !tbaa !38
  %28 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !31
  %cmp.i.us = icmp slt i32 %inc.i.us, %28
  br i1 %cmp.i.us, label %for.body.i.us, label %if.else127, !llvm.loop !74

cleanup.us:                                       ; preds = %for.body.i.us, %lor.end73.us
  %next_job95.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 2
  %29 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95.us, align 8, !tbaa !63
  %tobool23.not.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %29, null
  br i1 %tobool23.not.us, label %if.then103, label %do.end27.us

do.end27:                                         ; preds = %do.end, %cleanup
  %job.1529 = phi %"struct.Halide::Runtime::Internal::work"* [ %50, %cleanup ], [ %3, %do.end ]
  %prev_ptr.1528 = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95, %cleanup ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end ]
  %parent_job29 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 5
  %30 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29, align 8, !tbaa !42
  %cmp30 = icmp eq %"struct.Halide::Runtime::Internal::work"* %30, null
  br i1 %cmp30, label %if.then31, label %if.else32

if.then31:                                        ; preds = %do.end27
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !56
  %add = add nsw i32 %31, 1
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  %sub = sub i32 %add, %32
  br label %if.end45

if.else32:                                        ; preds = %do.end27
  %active_workers33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 8
  %33 = load i32, i32* %active_workers33, align 8, !tbaa !60
  %cmp34 = icmp eq i32 %33, 0
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 0, i32 7
  %34 = load i32, i32* %min_threads, align 4, !tbaa !33
  br i1 %cmp34, label %if.then35, label %if.else38

if.then35:                                        ; preds = %if.else32
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !61
  %sub37 = sub nsw i32 %34, %35
  br label %if.end45

if.else38:                                        ; preds = %if.else32
  %mul = mul nsw i32 %34, %33
  %threads_reserved42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %36 = load i32, i32* %threads_reserved42, align 8, !tbaa !61
  %sub43 = sub nsw i32 %mul, %36
  br label %if.end45

if.end45:                                         ; preds = %if.else38, %if.then35, %if.then31
  %threads_available.0 = phi i32 [ %sub, %if.then31 ], [ %sub37, %if.then35 ], [ %sub43, %if.else38 ]
  %min_threads47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 7
  %37 = load i32, i32* %min_threads47, align 4, !tbaa !33
  %cmp48.not = icmp slt i32 %threads_available.0, %37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 3
  %38 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !40
  %39 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings56, align 8, !tbaa !40
  %cmp57 = icmp ne %"struct.Halide::Runtime::Internal::work"* %38, %39
  %cmp60 = icmp ne i32 %37, 0
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 8
  %40 = load i8, i8* %serial, align 8, !tbaa !29, !range !17
  %tobool69.not = icmp eq i8 %40, 0
  br i1 %tobool69.not, label %if.end45.lor.end73_crit_edge, label %lor.rhs70

if.end45.lor.end73_crit_edge:                     ; preds = %if.end45
  %.not472.0 = xor i1 true, true
  br label %lor.end73

lor.rhs70:                                        ; preds = %if.end45
  %active_workers71 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 8
  %41 = load i32, i32* %active_workers71, align 8, !tbaa !60
  %cmp72 = icmp eq i32 %41, 0
  %.not472.1 = xor i1 %cmp72, true
  br label %lor.end73

lor.end73:                                        ; preds = %if.end45.lor.end73_crit_edge, %lor.rhs70
  %.not472.phi = phi i1 [ %.not472.0, %if.end45.lor.end73_crit_edge ], [ %.not472.1, %lor.rhs70 ]
  %.not = and i1 %cmp60, %cmp57
  %brmerge = or i1 %cmp48.not, %.not
  %brmerge473 = or i1 %brmerge, %.not472.phi
  br i1 %brmerge473, label %cleanup, label %if.then86

if.then86:                                        ; preds = %lor.end73
  %next_semaphore.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 10
  %42 = load i32, i32* %next_semaphore.i, align 8, !tbaa !38
  %num_semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 4
  %43 = load i32, i32* %num_semaphores.i, align 8, !tbaa !31
  %cmp14.i = icmp slt i32 %42, %43
  br i1 %cmp14.i, label %for.body.lr.ph.i, label %if.else127

for.body.lr.ph.i:                                 ; preds = %if.then86
  %semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 3
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %44 = phi i32 [ %42, %for.body.lr.ph.i ], [ %inc.i, %for.inc.i ]
  %45 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i, align 8, !tbaa !30
  %idxprom.i = sext i32 %44 to i64
  %semaphore.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 0
  %46 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i, align 8, !tbaa !71
  %count.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 1
  %47 = load i32, i32* %count.i, align 8, !tbaa !73
  %call.i = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %46, i32 %47) #13
  br i1 %call.i, label %for.inc.i, label %cleanup

for.inc.i:                                        ; preds = %for.body.i
  %48 = load i32, i32* %next_semaphore.i, align 8, !tbaa !38
  %inc.i = add nsw i32 %48, 1
  store i32 %inc.i, i32* %next_semaphore.i, align 8, !tbaa !38
  %49 = load i32, i32* %num_semaphores.i, align 8, !tbaa !31
  %cmp.i = icmp slt i32 %inc.i, %49
  br i1 %cmp.i, label %for.body.i, label %if.else127, !llvm.loop !74

cleanup:                                          ; preds = %for.body.i, %lor.end73
  %next_job95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 2
  %50 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95, align 8, !tbaa !63
  %tobool23.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %50, null
  br i1 %tobool23.not, label %if.then103, label %do.end27

if.then103:                                       ; preds = %cleanup, %cleanup.us
  br i1 %tobool.not, label %if.else112, label %if.then105

if.then105:                                       ; preds = %do.end, %if.then103
  %inc = add nsw i32 %spin_count.0, 1
  %cmp106 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp106, label %if.then107, label %if.else108

if.then107:                                       ; preds = %if.then105
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  tail call void @halide_thread_yield() #13
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  br label %while.cond.backedge

if.else108:                                       ; preds = %if.then105
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !66
  %inc109 = add nsw i32 %51, 1
  store i32 %inc109, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !66
  store i8 1, i8* %owner_is_sleeping, align 4, !tbaa !39
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !39
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !66
  %dec = add nsw i32 %52, -1
  store i32 %dec, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !66
  br label %while.cond.backedge

if.else112:                                       ; preds = %if.then103, %do.end.thread
  %53 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !75
  %inc113 = add nsw i32 %53, 1
  store i32 %inc113, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !75
  %54 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !58
  %55 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !67
  %cmp114 = icmp sgt i32 %54, %55
  br i1 %cmp114, label %if.then115, label %if.else118

if.then115:                                       ; preds = %if.else112
  %dec116 = add nsw i32 %54, -1
  store i32 %dec116, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !58
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %56 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !58
  %inc117 = add nsw i32 %56, 1
  store i32 %inc117, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !58
  br label %if.end124

if.else118:                                       ; preds = %if.else112
  %inc119 = add nsw i32 %spin_count.0, 1
  %cmp120 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp120, label %if.then121, label %if.else122

if.then121:                                       ; preds = %if.else118
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  tail call void @halide_thread_yield() #13
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  br label %if.end124

if.else122:                                       ; preds = %if.else118
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  br label %if.end124

if.end124:                                        ; preds = %if.else122, %if.then121, %if.then115
  %spin_count.1 = phi i32 [ %spin_count.0, %if.then115 ], [ %inc119, %if.then121 ], [ %inc119, %if.else122 ]
  %57 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !75
  %dec125 = add nsw i32 %57, -1
  store i32 %dec125, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !75
  br label %while.cond.backedge

if.else127:                                       ; preds = %if.then86, %if.then86.us, %for.inc.i, %for.inc.i.us
  %next_semaphore.i521 = phi i32* [ %next_semaphore.i.us, %for.inc.i.us ], [ %next_semaphore.i, %for.inc.i ], [ %next_semaphore.i.us, %if.then86.us ], [ %next_semaphore.i, %if.then86 ]
  %prev_ptr.1519 = phi %"struct.Halide::Runtime::Internal::work"** [ %prev_ptr.1528.us, %for.inc.i.us ], [ %prev_ptr.1528, %for.inc.i ], [ %prev_ptr.1528.us, %if.then86.us ], [ %prev_ptr.1528, %if.then86 ]
  %job.1515 = phi %"struct.Halide::Runtime::Internal::work"* [ %job.1529.us, %for.inc.i.us ], [ %job.1529, %for.inc.i ], [ %job.1529.us, %if.then86.us ], [ %job.1529, %if.then86 ]
  store i32 0, i32* %next_semaphore.i521, align 8, !tbaa !38
  %active_workers132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 8
  %58 = load i32, i32* %active_workers132, align 8, !tbaa !60
  %inc133 = add nsw i32 %58, 1
  store i32 %inc133, i32* %active_workers132, align 8, !tbaa !60
  %parent_job134 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 5
  %59 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !42
  %cmp135 = icmp eq %"struct.Halide::Runtime::Internal::work"* %59, null
  %min_threads138 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 7
  %60 = load i32, i32* %min_threads138, align 4, !tbaa !33
  br i1 %cmp135, label %if.then136, label %if.else143

if.then136:                                       ; preds = %if.else127
  %61 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  %add139 = add nsw i32 %61, %60
  store i32 %add139, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  br label %if.end152

if.else143:                                       ; preds = %if.else127
  %threads_reserved147 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %59, i64 0, i32 6
  %62 = load i32, i32* %threads_reserved147, align 8, !tbaa !61
  %add148 = add nsw i32 %62, %60
  store i32 %add148, i32* %threads_reserved147, align 8, !tbaa !61
  br label %if.end152

if.end152:                                        ; preds = %if.else143, %if.then136
  %serial154 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 8
  %63 = load i8, i8* %serial154, align 8, !tbaa !29, !range !17
  %tobool155.not = icmp eq i8 %63, 0
  br i1 %tobool155.not, label %if.else198, label %if.then156

if.then156:                                       ; preds = %if.end152
  %next_job157 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %64 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !63
  store %"struct.Halide::Runtime::Internal::work"* %64, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %extent163 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %next_semaphore.i474 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 10
  %num_semaphores.i475 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 4
  %semaphores.i477 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 3
  %user_context = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %min = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %closure = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %65 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  br label %while.cond161.preheader

while.cond161.preheader:                          ; preds = %if.end172, %if.then156
  %iters.0538 = phi i32 [ 1, %if.then156 ], [ 0, %if.end172 ]
  %total_iters.0537 = phi i32 [ 0, %if.then156 ], [ %add178, %if.end172 ]
  %66 = load i32, i32* %extent163, align 8, !tbaa !28
  %sub164531 = sub nsw i32 %66, %total_iters.0537
  %cmp165532 = icmp sgt i32 %sub164531, %iters.0538
  br i1 %cmp165532, label %land.rhs.preheader, label %while.end169

land.rhs.preheader:                               ; preds = %while.cond161.preheader
  %.pre = load i32, i32* %next_semaphore.i474, align 8, !tbaa !38
  %.pre560 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !31
  br label %land.rhs

land.rhs:                                         ; preds = %while.body167, %land.rhs.preheader
  %67 = phi i32 [ %76, %while.body167 ], [ %66, %land.rhs.preheader ]
  %68 = phi i32 [ %77, %while.body167 ], [ %.pre560, %land.rhs.preheader ]
  %69 = phi i32 [ 0, %while.body167 ], [ %.pre, %land.rhs.preheader ]
  %iters.1533 = phi i32 [ %inc168, %while.body167 ], [ %iters.0538, %land.rhs.preheader ]
  %cmp14.i476 = icmp slt i32 %69, %68
  br i1 %cmp14.i476, label %for.body.i483, label %while.body167

for.body.i483:                                    ; preds = %land.rhs, %for.inc.i486
  %70 = phi i32 [ %inc.i484, %for.inc.i486 ], [ %69, %land.rhs ]
  %71 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i477, align 8, !tbaa !30
  %idxprom.i479 = sext i32 %70 to i64
  %semaphore.i480 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 0
  %72 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i480, align 8, !tbaa !71
  %count.i481 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 1
  %73 = load i32, i32* %count.i481, align 8, !tbaa !73
  %call.i482 = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %72, i32 %73) #13
  br i1 %call.i482, label %for.inc.i486, label %while.end169

for.inc.i486:                                     ; preds = %for.body.i483
  %74 = load i32, i32* %next_semaphore.i474, align 8, !tbaa !38
  %inc.i484 = add nsw i32 %74, 1
  store i32 %inc.i484, i32* %next_semaphore.i474, align 8, !tbaa !38
  %75 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !31
  %cmp.i485 = icmp slt i32 %inc.i484, %75
  br i1 %cmp.i485, label %for.body.i483, label %while.body167.loopexit, !llvm.loop !74

while.body167.loopexit:                           ; preds = %for.inc.i486
  %.pre561 = load i32, i32* %extent163, align 8, !tbaa !28
  br label %while.body167

while.body167:                                    ; preds = %while.body167.loopexit, %land.rhs
  %76 = phi i32 [ %.pre561, %while.body167.loopexit ], [ %67, %land.rhs ]
  %77 = phi i32 [ %75, %while.body167.loopexit ], [ %68, %land.rhs ]
  store i32 0, i32* %next_semaphore.i474, align 8, !tbaa !38
  %inc168 = add nuw nsw i32 %iters.1533, 1
  %sub164 = sub nsw i32 %76, %total_iters.0537
  %cmp165 = icmp sgt i32 %sub164, %inc168
  br i1 %cmp165, label %land.rhs, label %if.end172, !llvm.loop !76

while.end169:                                     ; preds = %for.body.i483, %while.cond161.preheader
  %iters.1523 = phi i32 [ %iters.0538, %while.cond161.preheader ], [ %iters.1533, %for.body.i483 ]
  %cmp170 = icmp eq i32 %iters.1523, 0
  br i1 %cmp170, label %while.end179, label %if.end172

if.end172:                                        ; preds = %while.body167, %while.end169
  %iters.1523566 = phi i32 [ %iters.1523, %while.end169 ], [ %inc168, %while.body167 ]
  %78 = load i8*, i8** %user_context, align 8, !tbaa !36
  %79 = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !24
  %80 = load i32, i32* %min, align 4, !tbaa !27
  %add175 = add nsw i32 %80, %total_iters.0537
  %81 = load i8*, i8** %closure, align 8, !tbaa !32
  %call177 = tail call i32 @halide_do_loop_task(i8* %78, i32 (i8*, i32, i32, i8*, i8*)* %79, i32 %add175, i32 %iters.1523566, i8* %81, i8* nonnull %65) #14
  %add178 = add nuw nsw i32 %iters.1523566, %total_iters.0537
  %cmp159 = icmp eq i32 %call177, 0
  br i1 %cmp159, label %while.cond161.preheader, label %while.end179, !llvm.loop !77

while.end179:                                     ; preds = %if.end172, %while.end169
  %cmp170568 = phi i1 [ true, %while.end169 ], [ false, %if.end172 ]
  %result.0.lcssa = phi i32 [ 0, %while.end169 ], [ %call177, %if.end172 ]
  %total_iters.0.lcssa = phi i32 [ %total_iters.0537, %while.end169 ], [ %add178, %if.end172 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %82 = load i32, i32* %min, align 4, !tbaa !27
  %add182 = add nsw i32 %82, %total_iters.0.lcssa
  store i32 %add182, i32* %min, align 4, !tbaa !27
  %83 = load i32, i32* %extent163, align 8, !tbaa !28
  %sub185 = sub nsw i32 %83, %total_iters.0.lcssa
  store i32 %sub185, i32* %extent163, align 8, !tbaa !28
  br i1 %cmp170568, label %if.else190, label %if.end230.thread505

if.end230.thread505:                              ; preds = %while.end179
  store i32 0, i32* %extent163, align 8, !tbaa !28
  br label %if.then238

if.else190:                                       ; preds = %while.end179
  %cmp193 = icmp sgt i32 %sub185, 0
  br i1 %cmp193, label %if.then194, label %if.end271

if.then194:                                       ; preds = %if.else190
  %84 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !62
  store %"struct.Halide::Runtime::Internal::work"* %84, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !63
  store %"struct.Halide::Runtime::Internal::work"* %job.1515, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !62
  br label %if.end271

if.else198:                                       ; preds = %if.end152
  %myjob.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %myjob.sroa.0.0.copyload = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %myjob.sroa.0.0..sroa_idx, align 8, !tbaa.struct !78
  %myjob.sroa.4.0..sroa_idx327 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %myjob.sroa.4.0.copyload = load i8*, i8** %myjob.sroa.4.0..sroa_idx327, align 8, !tbaa.struct !79
  %myjob.sroa.6333.0..sroa_idx334 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %myjob.sroa.6333.0.copyload = load i32, i32* %myjob.sroa.6333.0..sroa_idx334, align 4
  %myjob.sroa.8340.0..sroa_idx341 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 1
  %myjob.sroa.8340.0.copyload = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %myjob.sroa.8340.0..sroa_idx341, align 8, !tbaa.struct !80
  %myjob.sroa.10347.0..sroa_idx348 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %myjob.sroa.10347.0.copyload = load i8*, i8** %myjob.sroa.10347.0..sroa_idx348, align 8, !tbaa.struct !81
  %inc201 = add nsw i32 %myjob.sroa.6333.0.copyload, 1
  store i32 %inc201, i32* %myjob.sroa.6333.0..sroa_idx334, align 4, !tbaa !27
  %extent203 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %85 = load i32, i32* %extent203, align 8, !tbaa !28
  %dec204 = add nsw i32 %85, -1
  store i32 %dec204, i32* %extent203, align 8, !tbaa !28
  %cmp207 = icmp eq i32 %dec204, 0
  br i1 %cmp207, label %if.then208, label %if.end210

if.then208:                                       ; preds = %if.else198
  %next_job209 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %86 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job209, align 8, !tbaa !63
  store %"struct.Halide::Runtime::Internal::work"* %86, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %if.else198
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %tobool211.not = icmp eq i32 (i8*, i32, i8*)* %myjob.sroa.8340.0.copyload, null
  br i1 %tobool211.not, label %if.else220, label %if.then212

if.then212:                                       ; preds = %if.end210
  %call219 = tail call i32 @halide_do_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i8*)* nonnull %myjob.sroa.8340.0.copyload, i32 %myjob.sroa.6333.0.copyload, i8* %myjob.sroa.4.0.copyload) #14
  br label %if.end230

if.else220:                                       ; preds = %if.end210
  %87 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  %call228 = tail call i32 @halide_do_loop_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i32, i8*, i8*)* %myjob.sroa.0.0.copyload, i32 %myjob.sroa.6333.0.copyload, i32 1, i8* %myjob.sroa.4.0.copyload, i8* %87) #14
  br label %if.end230

if.end230:                                        ; preds = %if.else220, %if.then212
  %result.1 = phi i32 [ %call219, %if.then212 ], [ %call228, %if.else220 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %cmp237.not = icmp eq i32 %result.1, 0
  br i1 %cmp237.not, label %if.end271, label %if.then238

if.then238:                                       ; preds = %if.end230, %if.end230.thread505
  %result.2510 = phi i32 [ %result.0.lcssa, %if.end230.thread505 ], [ %result.1, %if.end230 ]
  %exit_status239 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  store i32 %result.2510, i32* %exit_status239, align 4, !tbaa !43
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 4
  %88 = load i32, i32* %sibling_count, align 8, !tbaa !41
  %cmp240540 = icmp sgt i32 %88, 0
  br i1 %cmp240540, label %do.end243.lr.ph, label %if.end271

do.end243.lr.ph:                                  ; preds = %if.then238
  %siblings244 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 3
  %89 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings244, align 8, !tbaa !40
  %wide.trip.count = zext i32 %88 to i64
  br label %do.end243

do.end243:                                        ; preds = %for.inc, %do.end243.lr.ph
  %indvars.iv = phi i64 [ 0, %do.end243.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %wake_owners.0541 = phi i8 [ 0, %do.end243.lr.ph ], [ %wake_owners.1, %for.inc ]
  %exit_status245 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 9
  %90 = load i32, i32* %exit_status245, align 4, !tbaa !43
  %cmp246 = icmp eq i32 %90, 0
  br i1 %cmp246, label %if.then247, label %for.inc

if.then247:                                       ; preds = %do.end243
  store i32 %result.2510, i32* %exit_status245, align 4, !tbaa !43
  %91 = load i32, i32* %active_workers132, align 8, !tbaa !60
  %cmp253 = icmp eq i32 %91, 0
  br i1 %cmp253, label %land.rhs254, label %land.end260

land.rhs254:                                      ; preds = %if.then247
  %owner_is_sleeping258 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 11
  %92 = load i8, i8* %owner_is_sleeping258, align 4, !tbaa !39, !range !17
  br label %land.end260

land.end260:                                      ; preds = %land.rhs254, %if.then247
  %93 = phi i8 [ 0, %if.then247 ], [ %92, %land.rhs254 ]
  %94 = and i8 %wake_owners.0541, 1
  %or = or i8 %93, %94
  br label %for.inc

for.inc:                                          ; preds = %land.end260, %do.end243
  %wake_owners.1 = phi i8 [ %or, %land.end260 ], [ %wake_owners.0541, %do.end243 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %if.end271, label %do.end243, !llvm.loop !82

if.end271:                                        ; preds = %for.inc, %if.then238, %if.end230, %if.then194, %if.else190
  %wake_owners.2 = phi i8 [ 0, %if.end230 ], [ 0, %if.else190 ], [ 0, %if.then194 ], [ 0, %if.then238 ], [ %wake_owners.1, %for.inc ]
  %95 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !42
  %cmp273 = icmp eq %"struct.Halide::Runtime::Internal::work"* %95, null
  %96 = load i32, i32* %min_threads138, align 4, !tbaa !33
  br i1 %cmp273, label %if.then274, label %if.else281

if.then274:                                       ; preds = %if.end271
  %97 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  %sub277 = sub nsw i32 %97, %96
  store i32 %sub277, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  br label %if.end290

if.else281:                                       ; preds = %if.end271
  %threads_reserved285 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %95, i64 0, i32 6
  %98 = load i32, i32* %threads_reserved285, align 8, !tbaa !61
  %sub286 = sub nsw i32 %98, %96
  store i32 %sub286, i32* %threads_reserved285, align 8, !tbaa !61
  br label %if.end290

if.end290:                                        ; preds = %if.else281, %if.then274
  %99 = load i32, i32* %active_workers132, align 8, !tbaa !60
  %dec292 = add nsw i32 %99, -1
  store i32 %dec292, i32* %active_workers132, align 8, !tbaa !60
  %100 = and i8 %wake_owners.2, 1
  %tobool296.not = icmp eq i8 %100, 0
  br i1 %tobool296.not, label %lor.lhs.false297, label %if.then310

lor.lhs.false297:                                 ; preds = %if.end290
  %cmp299 = icmp eq i32 %dec292, 0
  br i1 %cmp299, label %land.lhs.true300, label %while.cond.backedge

land.lhs.true300:                                 ; preds = %lor.lhs.false297
  %extent302 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %101 = load i32, i32* %extent302, align 8, !tbaa !28
  %cmp303 = icmp eq i32 %101, 0
  br i1 %cmp303, label %land.lhs.true307, label %lor.lhs.false304

lor.lhs.false304:                                 ; preds = %land.lhs.true300
  %exit_status305 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  %102 = load i32, i32* %exit_status305, align 4, !tbaa !43
  %cmp306.not = icmp eq i32 %102, 0
  br i1 %cmp306.not, label %while.cond.backedge, label %land.lhs.true307

land.lhs.true307:                                 ; preds = %lor.lhs.false304, %land.lhs.true300
  %owner_is_sleeping308 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 11
  %103 = load i8, i8* %owner_is_sleeping308, align 4, !tbaa !39, !range !17
  %tobool309.not = icmp eq i8 %103, 0
  br i1 %tobool309.not, label %while.cond.backedge, label %if.then310

if.then310:                                       ; preds = %land.lhs.true307, %if.end290
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #14
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then310, %land.lhs.true307, %lor.lhs.false304, %lor.lhs.false297, %if.end124, %if.else108, %if.then107, %if.then15, %while.end
  %spin_count.0.be = phi i32 [ %spin_count.0, %while.end ], [ %spin_count.0, %if.then15 ], [ %inc, %if.then107 ], [ %inc, %if.else108 ], [ %spin_count.1, %if.end124 ], [ 0, %if.then310 ], [ 0, %land.lhs.true307 ], [ 0, %lor.lhs.false304 ], [ 0, %lor.lhs.false297 ]
  br label %while.cond, !llvm.loop !83

while.end316:                                     ; preds = %cond.end, %cond.false
  ret void
}

; Function Attrs: nounwind
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %4 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #11
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !44
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !46
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %7 = ptrtoint %struct.halide_mutex* %mutex to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %6, i64 %7) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #0 align 2 {
entry:
  %call = tail call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #14
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)***
  %state.i60 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  br label %while.cond

while.cond:                                       ; preds = %cleanup, %entry
  %data_location.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %head, %entry ], [ %data_location.1, %cleanup ]
  %prev.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ null, %entry ], [ %prev.1, %cleanup ]
  %data.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %0, %entry ], [ %data.1, %cleanup ]
  %retval.0 = phi i64 [ undef, %entry ], [ %retval.1, %cleanup ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, null
  br i1 %cmp.not, label %while.end22, label %while.body

while.body:                                       ; preds = %while.cond
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 1
  %2 = load atomic i64, i64* %sleep_address monotonic, align 8
  %cmp2 = icmp eq i64 %2, %addr
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 2
  %3 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next3, align 8, !tbaa !84
  br i1 %cmp2, label %if.then, label %cleanup

if.then:                                          ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.0, align 8, !tbaa !10
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !89
  %cmp4 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %4, %data.0
  br i1 %cmp4, label %if.then5, label %while.cond7.preheader

while.cond7.preheader:                            ; preds = %if.then
  %cmp872.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, null
  br i1 %cmp872.not, label %if.end, label %while.body9

if.then5:                                         ; preds = %if.then
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.0, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !89
  br label %if.end

while.body9:                                      ; preds = %while.cond7.preheader, %while.body9
  %data2.073 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %6, %while.body9 ], [ %3, %while.cond7.preheader ]
  %sleep_address10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 1
  %5 = load atomic i64, i64* %sleep_address10 monotonic, align 8
  %cmp11 = icmp eq i64 %5, %addr
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next12, align 8, !tbaa !84
  %cmp8 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, null
  %7 = or i1 %cmp11, %cmp8
  br i1 %7, label %if.end.loopexit, label %while.body9, !llvm.loop !92

if.end.loopexit:                                  ; preds = %while.body9
  %frombool = zext i1 %cmp11 to i8
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit, %if.then5, %while.cond7.preheader
  %more_waiters.1 = phi i8 [ 0, %if.then5 ], [ 0, %while.cond7.preheader ], [ %frombool, %if.end.loopexit ]
  %tobool13 = icmp ne i8 %more_waiters.1, 0
  %vtable = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !44
  %vfn = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable, i64 2
  %8 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn, align 8
  %call14 = tail call i64 %8(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 1, i1 zeroext %tobool13) #13
  %unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 3
  store i64 %call14, i64* %unpark_info, align 8, !tbaa !93
  %mutex.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 0
  %call.i = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i) #13
  %9 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i61 = and i64 %9, 2
  %cmp.i62 = icmp ne i64 %and.i61, 0
  %cmp3.not.i63 = icmp ult i64 %9, 4
  %or.cond.i64 = or i1 %cmp3.not.i63, %cmp.i62
  br i1 %or.cond.i64, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, label %if.then.i65

if.then.i65:                                      ; preds = %if.end
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #13
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66: ; preds = %if.then.i65, %if.end
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !94
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 1
  %call.i67 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #13
  %call.i69 = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i) #13
  %10 = zext i8 %more_waiters.1 to i64
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %next3, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %data.0, %while.body ]
  %data.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %3, %while.body ]
  %retval.1 = phi i64 [ %10, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %retval.0, %while.body ]
  br i1 %cmp2, label %cleanup27, label %while.cond, !llvm.loop !95

while.end22:                                      ; preds = %while.cond
  %vtable23 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !44
  %vfn24 = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable23, i64 2
  %11 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn24, align 8
  %call25 = tail call i64 %11(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 0, i1 zeroext false) #13
  %12 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i = and i64 %12, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %12, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup27, label %if.then.i

if.then.i:                                        ; preds = %while.end22
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #13
  br label %cleanup27

cleanup27:                                        ; preds = %cleanup, %if.then.i, %while.end22
  %retval.2 = phi i64 [ 0, %while.end22 ], [ 0, %if.then.i ], [ %retval.1, %cleanup ]
  ret i64 %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) local_unnamed_addr #0 {
entry:
  %mul.i = mul i64 %addr, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #13
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit: ; preds = %if.then.i, %entry
  ret %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx
}

declare i32 @pthread_mutex_lock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %expected.0 = phi i64 [ %0, %entry ], [ %3, %if.end ]
  %and = and i64 %expected.0, 2
  %tobool.not = icmp ne i64 %and, 0
  %cmp = icmp ult i64 %expected.0, 4
  %or.cond = or i1 %cmp, %tobool.not
  br i1 %or.cond, label %cleanup75, label %if.end

if.end:                                           ; preds = %while.cond
  %or = or i64 %expected.0, 2
  %1 = cmpxchg weak i64* %state, i64 %expected.0, i64 %or acquire monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  br i1 %2, label %while.cond11, label %while.cond

while.cond11:                                     ; preds = %if.end, %cleanup70
  %.pn.pn = phi { i64, i1 } [ %.pn, %cleanup70 ], [ %1, %if.end ]
  %expected.3 = extractvalue { i64, i1 } %.pn.pn, 0
  %and13 = and i64 %expected.3, -4
  %4 = inttoptr i64 %and13 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  %tail14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %4, i64 0, i32 3
  %tail.0143 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !96
  %cmp16144 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0143, null
  br i1 %cmp16144, label %while.body17, label %while.end23

while.body17:                                     ; preds = %while.cond11, %do.end
  %current.0145 = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %5, %do.end ], [ %4, %while.cond11 ]
  %next18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next18, align 8, !tbaa !98
  %cmp19.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, null
  br i1 %cmp19.not, label %if.then20, label %do.end

if.then20:                                        ; preds = %while.body17
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.5, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end

do.end:                                           ; preds = %if.then20, %while.body17
  %prev = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev, align 8, !tbaa !99
  %tail22 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 3
  %tail.0 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail22, align 8, !tbaa !96
  %cmp16 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0, null
  br i1 %cmp16, label %while.body17, label %while.end23, !llvm.loop !100

while.end23:                                      ; preds = %do.end, %while.cond11
  %tail.0.lcssa = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %tail.0143, %while.cond11 ], [ %tail.0, %do.end ]
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !96
  %and25 = and i64 %expected.3, 1
  %tobool26.not = icmp eq i64 %and25, 0
  br i1 %tobool26.not, label %if.end35, label %if.then27

if.then27:                                        ; preds = %while.end23
  %and29 = and i64 %expected.3, -3
  %6 = cmpxchg weak i64* %state, i64 %expected.3, i64 %and29 acq_rel monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %cleanup75, label %cleanup70

if.end35:                                         ; preds = %while.end23
  %prev36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 2
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev36, align 8, !tbaa !99
  %cmp37 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, null
  br i1 %cmp37, label %while.body41, label %if.else62

while.body41:                                     ; preds = %if.end35, %if.end47
  %expected.5146 = phi i64 [ %11, %if.end47 ], [ %expected.3, %if.end35 ]
  %and43 = and i64 %expected.5146, 1
  %9 = cmpxchg weak i64* %state, i64 %expected.5146, i64 %and43 acq_rel monotonic
  %10 = extractvalue { i64, i1 } %9, 1
  br i1 %10, label %if.end66, label %if.end47

if.end47:                                         ; preds = %while.body41
  %11 = extractvalue { i64, i1 } %9, 0
  %cmp49 = icmp ult i64 %11, 4
  br i1 %cmp49, label %while.body41, label %cleanup70, !llvm.loop !101

if.else62:                                        ; preds = %if.end35
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !96
  %12 = atomicrmw and i64* %state, i64 -3 release
  br label %if.end66

if.end66:                                         ; preds = %while.body41, %if.else62
  %mutex.i103 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 0
  %call.i104 = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i103) #13
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !94
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 1
  %call.i101 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #13
  %call.i = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i103) #13
  br label %cleanup75

cleanup70:                                        ; preds = %if.end47, %if.then27
  %.pn = phi { i64, i1 } [ %6, %if.then27 ], [ %9, %if.end47 ]
  fence acquire
  br label %while.cond11

cleanup75:                                        ; preds = %while.cond, %if.then27, %if.end66
  ret void
}

declare i32 @pthread_cond_signal(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_unlock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %node = alloca %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", align 8
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i8*
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 2
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 0
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 1
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 1
  %tail.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 3
  %2 = ptrtoint %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i64
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i to <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>*
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %while.cond.outer.backedge, %entry
  %expected.0.ph = phi i64 [ %0, %entry ], [ %expected.0.ph.be, %while.cond.outer.backedge ]
  %spinner.sroa.0.0.ph = phi i32 [ 40, %entry ], [ %spinner.sroa.0.0.ph.be, %while.cond.outer.backedge ]
  %and46 = and i64 %expected.0.ph, 1
  %tobool.not47 = icmp eq i64 %and46, 0
  br i1 %tobool.not47, label %if.then, label %if.end4

if.then:                                          ; preds = %while.cond.outer, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %expected.048 = phi i64 [ %6, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit ], [ %expected.0.ph, %while.cond.outer ]
  %or = or i64 %expected.048, 1
  %4 = cmpxchg weak i64* %state, i64 %expected.048, i64 %or acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup23, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit: ; preds = %if.then
  %6 = extractvalue { i64, i1 } %4, 0
  %and = and i64 %6, 1
  %tobool.not = icmp eq i64 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end4.loopexit

if.end4.loopexit:                                 ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %7 = extractvalue { i64, i1 } %4, 0
  br label %if.end4

if.end4:                                          ; preds = %if.end4.loopexit, %while.cond.outer
  %expected.0.lcssa = phi i64 [ %expected.0.ph, %while.cond.outer ], [ %7, %if.end4.loopexit ]
  %cmp.not = icmp ugt i64 %expected.0.lcssa, 3
  %cmp.i = icmp sgt i32 %spinner.sroa.0.0.ph, 0
  %or.cond = and i1 %cmp.i, %cmp.not
  br i1 %or.cond, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, label %if.end9

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit: ; preds = %if.end4
  %cmp4.i = icmp sgt i32 %spinner.sroa.0.0.ph, 1
  br i1 %cmp4.i, label %if.then7, label %if.end9

if.then7:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit
  %dec.i = add nsw i32 %spinner.sroa.0.0.ph, -1
  call void @halide_thread_yield() #13
  %8 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond.outer.backedge

if.end9:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, %if.end4
  %spinner.sroa.0.2 = phi i32 [ %spinner.sroa.0.0.ph, %if.end4 ], [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit ]
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1) #11
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !94
  %call.i.i29 = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #13
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #13
  store <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>* %3, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !96
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !94
  %and10 = and i64 %expected.0.lcssa, -4
  %cmp11 = icmp eq i64 %and10, 0
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !96
  br label %if.end13

if.else:                                          ; preds = %if.end9
  %9 = inttoptr i64 %and10 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %9, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i, align 8, !tbaa !98
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  %and15 = and i64 %expected.0.lcssa, 3
  %or16 = or i64 %and15, %2
  %10 = cmpxchg weak i64* %state, i64 %expected.0.lcssa, i64 %or16 release monotonic
  %11 = extractvalue { i64, i1 } %10, 1
  br i1 %11, label %if.then19, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit: ; preds = %if.end13
  %12 = extractvalue { i64, i1 } %10, 0
  br label %if.end22

if.then19:                                        ; preds = %if.end13
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #13
  %13 = load i8, i8* %should_park.i.i, align 8, !tbaa !94, !range !17
  %tobool.not6.i = icmp eq i8 %13, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %if.then19, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #13
  %14 = load i8, i8* %should_park.i.i, align 8, !tbaa !94, !range !17
  %tobool.not.i = icmp eq i8 %14, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !102

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %if.then19
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #13
  %15 = load atomic i64, i64* %state monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit
  %expected.3 = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %12, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %spinner.sroa.0.3 = phi i32 [ 40, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %spinner.sroa.0.2, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %call.i.i = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #13
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #13
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1) #11
  br label %while.cond.outer.backedge

while.cond.outer.backedge:                        ; preds = %if.end22, %if.then7
  %expected.0.ph.be = phi i64 [ %8, %if.then7 ], [ %expected.3, %if.end22 ]
  %spinner.sroa.0.0.ph.be = phi i32 [ %dec.i, %if.then7 ], [ %spinner.sroa.0.3, %if.end22 ]
  br label %while.cond.outer

cleanup23:                                        ; preds = %if.then
  ret void
}

declare i32 @pthread_mutex_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_wait(%struct.pthread_mutex_t*, %struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_cond_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 align 2 {
entry:
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %lock_state, align 8, !tbaa !46
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 3
  ret i1 %cmp
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) unnamed_addr #2 align 2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  %0 = select i1 %more_waiters, i64 2, i64 0
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %1 = load i64*, i64** %lock_state, align 8, !tbaa !46
  store atomic i64 %0, i64* %1 release, align 8
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 align 2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak void @halide_cond_broadcast(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !44
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !103
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !105
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5, i64 %0, i64 0) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = load atomic i32, i32* %value acquire, align 4
  %sub12 = sub nsw i32 %0, %n
  %cmp113 = icmp sgt i32 %sub12, -1
  br i1 %cmp113, label %land.rhs, label %return

land.rhs:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit
  %sub15 = phi i32 [ %sub, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %sub12, %if.end ]
  %expected.014 = phi i32 [ %3, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %0, %if.end ]
  %1 = cmpxchg weak i32* %value, i32 %expected.014, i32 %sub15 acq_rel monotonic
  %2 = extractvalue { i32, i1 } %1, 1
  br i1 %2, label %return.loopexit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit: ; preds = %land.rhs
  %3 = extractvalue { i32, i1 } %1, 0
  %sub = sub nsw i32 %3, %n
  %cmp1 = icmp sgt i32 %sub, -1
  br i1 %cmp1, label %land.rhs, label %return.loopexit

return.loopexit:                                  ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit, %land.rhs
  %4 = extractvalue { i32, i1 } %1, 1
  br label %return

return:                                           ; preds = %return.loopexit, %if.end, %entry
  %retval.0 = phi i1 [ true, %entry ], [ false, %if.end ], [ %4, %return.loopexit ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_cond_wait(%struct.halide_mutex* %cond, %struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #11
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !44
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !106
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  %2 = bitcast %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i to %struct.halide_mutex**
  store %struct.halide_mutex* %mutex, %struct.halide_mutex** %2, align 8, !tbaa !108
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %4 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %3, i64 %4) #13
  %5 = ptrtoint %struct.halide_mutex* %mutex to i64
  %cmp.not.i = icmp eq i64 %call.i, %5
  %6 = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %7 = cmpxchg weak i64* %6, i64 0, i64 1 acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  %9 = load atomic i64, i64* %6 monotonic, align 8
  %10 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i to i8*
  %11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0
  br label %while.cond.outer.i.i.i

while.cond.outer.i.i.i:                           ; preds = %while.cond.outer.i.i.i.backedge, %if.then.i.i
  %expected.0.ph.i.i.i = phi i64 [ %9, %if.then.i.i ], [ %expected.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i.i = phi i32 [ 40, %if.then.i.i ], [ %spinner.sroa.0.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %and55.i.i.i = and i64 %expected.0.ph.i.i.i, 1
  %tobool.not56.i.i.i = icmp eq i64 %and55.i.i.i, 0
  br i1 %tobool.not56.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i

if.then.i.i.i:                                    ; preds = %while.cond.outer.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %expected.057.i.i.i = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i ], [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ]
  %or.i.i.i = or i64 %expected.057.i.i.i, 1
  %13 = cmpxchg weak i64* %6, i64 %expected.057.i.i.i, i64 %or.i.i.i acquire monotonic
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then.i.i.i
  %15 = extractvalue { i64, i1 } %13, 0
  %and.i.i.i = and i64 %15, 1
  %tobool.not.i.i.i = icmp eq i64 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i.loopexit

if.end4.i.i.i.loopexit:                           ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %16 = extractvalue { i64, i1 } %13, 0
  br label %if.end4.i.i.i

if.end4.i.i.i:                                    ; preds = %if.end4.i.i.i.loopexit, %while.cond.outer.i.i.i
  %expected.0.lcssa.i.i.i = phi i64 [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ], [ %16, %if.end4.i.i.i.loopexit ]
  %cmp.i.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, label %if.end8.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i: ; preds = %if.end4.i.i.i
  %cmp4.i.not.i.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i.i, 1
  br i1 %cmp4.i.not.i.i.i, label %if.end8.i.i.i, label %if.then6.i.i.i

if.then6.i.i.i:                                   ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i
  %dec.i.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i.i, -1
  call void @halide_thread_yield() #13
  %17 = load atomic i64, i64* %6 monotonic, align 8
  br label %while.cond.outer.i.i.i.backedge

if.end8.i.i.i:                                    ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, %if.end4.i.i.i
  %spinner.sroa.0.152.i.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i ], [ %spinner.sroa.0.0.ph.i.i.i, %if.end4.i.i.i ]
  %and9.i.i.i = and i64 %expected.0.lcssa.i.i.i, 2
  %cmp.i.i.i = icmp eq i64 %and9.i.i.i, 0
  br i1 %cmp.i.i.i, label %if.then10.i.i.i, label %if.end19.i.i.i

if.then10.i.i.i:                                  ; preds = %if.end8.i.i.i
  %or12.i.i.i = or i64 %expected.0.lcssa.i.i.i, 2
  %18 = cmpxchg weak i64* %6, i64 %expected.0.lcssa.i.i.i, i64 %or12.i.i.i monotonic monotonic
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %if.end19.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then10.i.i.i
  %20 = extractvalue { i64, i1 } %18, 0
  br label %while.cond.outer.i.i.i.backedge

if.end19.i.i.i:                                   ; preds = %if.then10.i.i.i, %if.end8.i.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !44
  store i64* %6, i64** %lock_state2.i.i.i.i, align 8, !tbaa !46
  %call21.i.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %12, i64 %5) #13
  %cmp22.i.i.i = icmp eq i64 %call21.i.i.i, %5
  br i1 %cmp22.i.i.i, label %cleanup30.critedge.i.i.i, label %if.end24.i.i.i

if.end24.i.i.i:                                   ; preds = %if.end19.i.i.i
  %21 = load atomic i64, i64* %6 monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %while.cond.outer.i.i.i.backedge

while.cond.outer.i.i.i.backedge:                  ; preds = %if.end24.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i, %if.then6.i.i.i
  %expected.0.ph.i.i.i.be = phi i64 [ %20, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ %21, %if.end24.i.i.i ], [ %17, %if.then6.i.i.i ]
  %spinner.sroa.0.0.ph.i.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ 40, %if.end24.i.i.i ], [ %dec.i.i.i.i, %if.then6.i.i.i ]
  br label %while.cond.outer.i.i.i

cleanup30.critedge.i.i.i:                         ; preds = %if.end19.i.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.else.i:                                        ; preds = %entry
  %22 = load atomic i64, i64* %6 monotonic, align 8
  %and.i = and i64 %22, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %if.then2.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.then2.i:                                       ; preds = %if.else.i
  call void @halide_print(i8* null, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str.5.6, i64 0, i64 0)) #13
  call void @abort() #13
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit: ; preds = %if.then.i.i.i, %if.then2.i, %if.else.i, %cleanup30.critedge.i.i.i, %if.then.i
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #13
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #13
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #4 align 2 {
entry:
  %queue_data = alloca %"struct.Halide::Runtime::Internal::Synchronization::queue_data", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %0) #11
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !94
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 0
  %call.i.i = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #13
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 1
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #13
  %sleep_address.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 1
  store i64 0, i64* %sleep_address.i, align 8, !tbaa !109
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !84
  %unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 3
  store i64 0, i64* %unpark_info.i, align 8, !tbaa !93
  %call = call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #14
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !110
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !112
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !44
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call2 = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #13
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %4 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %4, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %4, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #13
  br label %cleanup

if.end:                                           ; preds = %entry
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !84
  store i64 %addr, i64* %sleep_address.i, align 8, !tbaa !109
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !94
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !113
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, i64 0, i32 2
  %head.sink = select i1 %cmp.not, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head.sink, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !89
  %state.i23 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %7 = atomicrmw and i64* %state.i23, i64 -2 release
  %and.i24 = and i64 %7, 2
  %cmp.i25 = icmp ne i64 %and.i24, 0
  %cmp3.not.i26 = icmp ult i64 %7, 4
  %or.cond.i27 = or i1 %cmp3.not.i26, %cmp.i25
  br i1 %or.cond.i27, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, label %if.then.i28

if.then.i28:                                      ; preds = %if.end
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #13
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29: ; preds = %if.then.i28, %if.end
  %8 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)***
  %vtable9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*** %8, align 8, !tbaa !44
  %vfn10 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vtable9, i64 1
  %9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vfn10, align 8
  call void %9(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) #13
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #13
  %10 = load i8, i8* %should_park.i.i, align 8, !tbaa !94, !range !17
  %tobool.not6.i = icmp eq i8 %10, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #13
  %11 = load i8, i8* %should_park.i.i, align 8, !tbaa !94, !range !17
  %tobool.not.i = icmp eq i8 %11, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !102

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #13
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %if.then.i, %if.then
  %unpark_info.i.sink = phi i64* [ %unpark_info.i, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %invalid_unpark_info.i, %if.then ], [ %invalid_unpark_info.i, %if.then.i ]
  %12 = load i64, i64* %unpark_info.i.sink, align 8, !tbaa !18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  %call.i.i22 = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #13
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #13
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %0) #11
  ret i64 %12
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !106
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !108
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store atomic i64 %3, i64* %0 monotonic, align 8
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp4.not = icmp eq i64 %1, %3
  br i1 %cmp4.not, label %cleanup, label %if.then5

if.then5:                                         ; preds = %if.else
  %invalid_unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 %3, i64* %invalid_unpark_info, align 8, !tbaa !112
  br label %cleanup

cleanup:                                          ; preds = %if.then5, %if.else, %if.then
  %retval.0 = phi i1 [ false, %if.then5 ], [ true, %if.else ], [ true, %if.then ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this) unnamed_addr #4 align 2 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %0 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !108
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0, i64 0, i32 0
  %1 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  br i1 %2, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %3 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %5 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !44
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !46
  %7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %8 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0 to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %7, i64 %8) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !106
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr_from, i64 %addr_to, i64 %unpark_info) local_unnamed_addr #4 align 2 {
entry:
  %buckets = alloca %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  call void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %buckets, i64 %addr_from, i64 %addr_to) #14
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !110
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !112
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !44
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #13
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #14
  br label %cleanup

if.end:                                           ; preds = %entry
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !114
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %cmp.not92 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  br i1 %cmp.not92, label %if.end38, label %while.body

while.body:                                       ; preds = %if.end, %if.end22
  %wakeup.098 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end22 ], [ null, %if.end ]
  %requeue_tail.097 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.2, %if.end22 ], [ null, %if.end ]
  %requeue.096 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.3, %if.end22 ], [ null, %if.end ]
  %data.095 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %7, %if.end22 ], [ %5, %if.end ]
  %prev.094 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.1, %if.end22 ], [ null, %if.end ]
  %data_location.093 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.1, %if.end22 ], [ %head, %if.end ]
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 1
  %6 = load atomic i64, i64* %sleep_address monotonic, align 8
  %next2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 2
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next2, align 8, !tbaa !84
  %cmp3 = icmp eq i64 %6, %addr_from
  br i1 %cmp3, label %if.then4, label %if.end22

if.then4:                                         ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.093, align 8, !tbaa !10
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !114
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %8, i64 0, i32 2
  %9 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !89
  %cmp6 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %9, %data.095
  br i1 %cmp6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.then4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.094, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !89
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.then4
  %10 = load i8, i8* %1, align 8, !tbaa !110, !range !17
  %tobool = icmp ne i8 %10, 0
  %cmp11 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.098, null
  %or.cond = and i1 %cmp11, %tobool
  br i1 %or.cond, label %if.end22, label %if.else

if.else:                                          ; preds = %if.end10
  %cmp13 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.096, null
  br i1 %cmp13, label %if.end17, label %if.else15

if.else15:                                        ; preds = %if.else
  %next16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.097, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next16, align 8, !tbaa !84
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.else
  %requeue.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.else15 ], [ %data.095, %if.else ]
  store atomic i64 %addr_to, i64* %sleep_address monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.end17, %if.end10, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.093, %if.end10 ], [ %data_location.093, %if.end17 ], [ %next2, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.094, %if.end10 ], [ %prev.094, %if.end17 ], [ %data.095, %while.body ]
  %requeue.3 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.end10 ], [ %requeue.1, %if.end17 ], [ %requeue.096, %while.body ]
  %requeue_tail.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.097, %if.end10 ], [ %data.095, %if.end17 ], [ %requeue_tail.097, %while.body ]
  %wakeup.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.095, %if.end10 ], [ %wakeup.098, %if.end17 ], [ %wakeup.098, %while.body ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !116

while.end:                                        ; preds = %if.end22
  %cmp23.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, null
  br i1 %cmp23.not, label %if.end38, label %if.then24

if.then24:                                        ; preds = %while.end
  %next25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next25, align 8, !tbaa !84
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %11 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !117
  %head26 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 1
  %12 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head26, align 8, !tbaa !113
  %cmp27 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %12, null
  br i1 %cmp27, label %if.end35, label %if.else31

if.else31:                                        ; preds = %if.then24
  %tail33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  %13 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail33, align 8, !tbaa !89
  %next34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %13, i64 0, i32 2
  br label %if.end35

if.end35:                                         ; preds = %if.else31, %if.then24
  %next34.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %next34, %if.else31 ], [ %head26, %if.then24 ]
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next34.sink, align 8, !tbaa !10
  %tail37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail37, align 8, !tbaa !89
  br label %if.end38

if.end38:                                         ; preds = %if.end35, %while.end, %if.end
  %cmp23106 = phi i1 [ true, %if.end35 ], [ false, %while.end ], [ false, %if.end ]
  %wakeup.0.lcssa105 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end35 ], [ %wakeup.2, %while.end ], [ null, %if.end ]
  %cmp39 = icmp ne %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, null
  %14 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)***
  %vtable41 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*** %14, align 8, !tbaa !44
  %vfn42 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vtable41, i64 3
  %15 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vfn42, align 8
  call void %15(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %cmp39, i1 zeroext %cmp23106) #13
  br i1 %cmp39, label %if.then44, label %if.else48

if.then44:                                        ; preds = %if.end38
  %unpark_info45 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 3
  store i64 %unpark_info, i64* %unpark_info45, align 8, !tbaa !93
  %mutex.i89 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 0
  %call.i90 = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i89) #13
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #14
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !94
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 1
  %call.i88 = call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #13
  %call.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i89) #13
  br label %if.end49

if.else48:                                        ; preds = %if.end38
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #14
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.then44
  %16 = load i8, i8* %1, align 8
  %17 = and i8 %16, 1
  %tobool52 = icmp ne i8 %17, 0
  %18 = and i1 %cmp39, %tobool52
  %conv = zext i1 %18 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then
  %retval.0 = phi i32 [ %conv, %if.end49 ], [ 0, %if.then ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* noalias sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %agg.result, i64 %addr_from, i64 %addr_to) local_unnamed_addr #4 {
entry:
  %mul.i = mul i64 %addr_from, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %mul.i37 = mul i64 %addr_to, -7046029254386353131
  %shr.i38 = lshr i64 %mul.i37, 54
  %cmp = icmp eq i64 %shr.i, %shr.i38
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i42, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %cleanup, label %if.then.i43

if.then.i43:                                      ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #13
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp2 = icmp ult i64 %shr.i, %shr.i38
  br i1 %cmp2, label %if.then3, label %if.else9

if.then3:                                         ; preds = %if.else
  %arrayidx5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %state.i52 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0, i32 0
  %2 = cmpxchg weak i64* %state.i52, i64 0, i64 1 acquire monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, label %if.then.i53

if.then.i53:                                      ; preds = %if.then3
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #13
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54: ; preds = %if.then.i53, %if.then3
  %state.i49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0, i32 0
  %4 = cmpxchg weak i64* %state.i49, i64 0, i64 1 acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup, label %if.then.i50

if.then.i50:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #13
  br label %cleanup

if.else9:                                         ; preds = %if.else
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %arrayidx13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0, i32 0
  %6 = cmpxchg weak i64* %state.i39, i64 0, i64 1 acquire monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, label %if.then.i40

if.then.i40:                                      ; preds = %if.else9
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #13
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41: ; preds = %if.then.i40, %if.else9
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0, i32 0
  %8 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41
  %mutex15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex15) #13
  br label %cleanup

cleanup:                                          ; preds = %if.then.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, %if.then.i50, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, %if.then.i43, %if.then
  %arrayidx13.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx5, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx5, %if.then.i50 ], [ %arrayidx13, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx13, %if.then.i ]
  %arrayidx11.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx6, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx6, %if.then.i50 ], [ %arrayidx11, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx11, %if.then.i ]
  %from2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from2.i, align 8, !tbaa !10
  %to3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to3.i, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) local_unnamed_addr #0 {
entry:
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !114
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %1 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !117
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %2 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %2, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %2, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end15, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #13
  br label %if.end15

if.else:                                          ; preds = %entry
  %cmp4 = icmp ugt %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %state.i25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %3 = atomicrmw and i64* %state.i25, i64 -2 release
  %and.i26 = and i64 %3, 2
  %cmp.i27 = icmp ne i64 %and.i26, 0
  %cmp3.not.i28 = icmp ult i64 %3, 4
  %or.cond.i29 = or i1 %cmp3.not.i28, %cmp.i27
  br i1 %or.cond.i29, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, label %if.then.i30

if.then.i30:                                      ; preds = %if.then5
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #13
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31: ; preds = %if.then.i30, %if.then5
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !117
  %state.i32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0, i32 0
  %5 = atomicrmw and i64* %state.i32, i64 -2 release
  %and.i33 = and i64 %5, 2
  %cmp.i34 = icmp ne i64 %and.i33, 0
  %cmp3.not.i35 = icmp ult i64 %5, 4
  %or.cond.i36 = or i1 %cmp3.not.i35, %cmp.i34
  br i1 %or.cond.i36, label %if.end15, label %if.then.i37

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31
  %mutex9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex9) #13
  br label %if.end15

if.else10:                                        ; preds = %if.else
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0, i32 0
  %6 = atomicrmw and i64* %state.i39, i64 -2 release
  %and.i40 = and i64 %6, 2
  %cmp.i41 = icmp ne i64 %and.i40, 0
  %cmp3.not.i42 = icmp ult i64 %6, 4
  %or.cond.i43 = or i1 %cmp3.not.i42, %cmp.i41
  br i1 %or.cond.i43, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, label %if.then.i44

if.then.i44:                                      ; preds = %if.else10
  %mutex12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex12) #13
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45: ; preds = %if.then.i44, %if.else10
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !114
  %state.i46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0, i32 0
  %8 = atomicrmw and i64* %state.i46, i64 -2 release
  %and.i47 = and i64 %8, 2
  %cmp.i48 = icmp ne i64 %and.i47, 0
  %cmp3.not.i49 = icmp ult i64 %8, 4
  %or.cond.i50 = or i1 %cmp3.not.i49, %cmp.i48
  br i1 %or.cond.i50, label %if.end15, label %if.then.i51

if.then.i51:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #13
  br label %if.end15

if.end15:                                         ; preds = %if.then.i51, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, %if.then.i37, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, %if.then.i, %if.then
  ret void
}

; Function Attrs: nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #4 align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !103
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !105
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  %cmp.not = icmp eq i64 %1, %3
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  store atomic i64 0, i64* %0 monotonic, align 8
  %4 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !105
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %4, i64 0, i32 0
  %5 = load atomic i64, i64* %state.i monotonic, align 8
  %and11.i = and i64 %5, 1
  %tobool.not12.i = icmp eq i64 %and11.i, 0
  br i1 %tobool.not12.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i
  %val.013.i = phi i64 [ %8, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ %5, %if.end ]
  %or.i = or i64 %val.013.i, 2
  %6 = cmpxchg weak i64* %state.i, i64 %val.013.i, i64 %or.i monotonic monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i: ; preds = %if.end.i
  %8 = extractvalue { i64, i1 } %6, 0
  %and.i = and i64 %8, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit: ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i, %if.end.i, %if.end
  %tobool.not.lcssa.i = phi i8 [ 1, %if.end ], [ 1, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ 0, %if.end.i ]
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  store i8 %tobool.not.lcssa.i, i8* %unpark_one, align 8, !tbaa !110
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, %entry
  ret i1 %cmp.not
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 align 2 {
entry:
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  %0 = load i8, i8* %unpark_one, align 8, !tbaa !110, !range !17
  %tobool.not = icmp ne i8 %0, 0
  %1 = and i1 %tobool.not, %some_requeued
  br i1 %1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !105
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, i64 0, i32 0
  %3 = atomicrmw or i64* %state.i, i64 2 monotonic
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() local_unnamed_addr #0 {
entry:
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #13
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.end, label %cond.true

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #13
  %tobool2.not = icmp eq i8* %call1, null
  br i1 %tobool2.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end, %entry
  %threads_str.010 = phi i8* [ %call1, %if.end ], [ %call, %entry ]
  %call3 = tail call i32 @atoi(i8* nonnull %threads_str.010) #13
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = tail call i32 @halide_host_cpu_count() #13
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal13worker_threadEPv(i8* %arg) #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %0 = bitcast i8* %arg to %"struct.Halide::Runtime::Internal::work"*
  tail call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %0) #14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @malloc(i64 24) #13
  %f1 = bitcast i8* %call to void (i8*)**
  store void (i8*)* %f, void (i8*)** %f1, align 8, !tbaa !118
  %closure2 = getelementptr inbounds i8, i8* %call, i64 8
  %0 = bitcast i8* %closure2 to i8**
  store i8* %closure, i8** %0, align 8, !tbaa !121
  %handle = getelementptr inbounds i8, i8* %call, i64 16
  %1 = bitcast i8* %handle to i64*
  store i64 0, i64* %1, align 8, !tbaa !122
  %call4 = tail call i32 @pthread_create(i64* nonnull %1, i8* null, i8* (i8*)* nonnull @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv, i8* %call) #13
  %2 = bitcast i8* %call to %struct.halide_thread*
  ret %struct.halide_thread* %2
}

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv(i8* %arg) #0 {
entry:
  %f = bitcast i8* %arg to void (i8*)**
  %0 = load void (i8*)*, void (i8*)** %f, align 8, !tbaa !118
  %closure = getelementptr inbounds i8, i8* %arg, i64 8
  %1 = bitcast i8* %closure to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !121
  tail call void %0(i8* %2) #13
  ret i8* null
}

declare i32 @pthread_create(i64*, i8*, i8* (i8*)*, i8*) local_unnamed_addr #1

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  %conv = sext i32 %num_tasks to i64
  %0 = alloca %"struct.Halide::Runtime::Internal::work", i64 %conv, align 8
  %cmp76 = icmp sgt i32 %num_tasks, 0
  br i1 %cmp76, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %num_tasks.addr.0.lcssa = phi i32 [ %num_tasks, %entry ], [ %num_tasks.addr.1, %for.inc ]
  %cmp17 = icmp eq i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp17, label %cleanup, label %if.end19

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv82 = phi i64 [ %indvars.iv.next83, %for.inc ], [ 0, %entry ]
  %num_tasks.addr.078 = phi i32 [ %num_tasks.addr.1, %for.inc ], [ %num_tasks, %entry ]
  %tasks.addr.077 = phi %struct.halide_parallel_task_t* [ %tasks.addr.1, %for.inc ], [ %tasks, %entry ]
  %extent = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 0, i32 6
  %1 = load i32, i32* %extent, align 8, !tbaa !123
  %cmp1 = icmp slt i32 %1, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %dec = add nsw i32 %num_tasks.addr.078, -1
  br label %for.inc

if.end:                                           ; preds = %for.body
  %incdec.ptr = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 1
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82
  %2 = bitcast %"struct.Halide::Runtime::Internal::work"* %arrayidx to i8*
  %3 = bitcast %struct.halide_parallel_task_t* %tasks.addr.077 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %2, i8* nonnull align 8 dereferenceable(56) %3, i64 56, i1 false), !tbaa.struct !124
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 1
  store i32 (i8*, i32, i8*)* null, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !35
  %user_context6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 7
  store i8* %user_context, i8** %user_context6, align 8, !tbaa !36
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 8
  %4 = bitcast i32* %active_workers to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %4, align 8, !tbaa !37
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !38
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !39
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 5
  %5 = bitcast %"struct.Halide::Runtime::Internal::work"** %parent_job to i8**
  store i8* %task_parent, i8** %5, align 8, !tbaa !42
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %tasks.addr.1 = phi %struct.halide_parallel_task_t* [ %tasks.addr.077, %if.then ], [ %incdec.ptr, %if.end ]
  %num_tasks.addr.1 = phi i32 [ %dec, %if.then ], [ %num_tasks.addr.078, %if.end ]
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %6 = sext i32 %num_tasks.addr.1 to i64
  %cmp = icmp slt i64 %indvars.iv.next83, %6
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !125

if.end19:                                         ; preds = %for.cond.cleanup
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %7 = bitcast i8* %task_parent to %"struct.Halide::Runtime::Internal::work"*
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_tasks.addr.0.lcssa, %"struct.Halide::Runtime::Internal::work"* nonnull %0, %"struct.Halide::Runtime::Internal::work"* %7) #14
  %cmp2373 = icmp sgt i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp2373, label %for.body25.preheader, label %for.cond.cleanup24

for.body25.preheader:                             ; preds = %if.end19
  %wide.trip.count = zext i32 %num_tasks.addr.0.lcssa to i64
  br label %for.body25

for.cond.cleanup24:                               ; preds = %for.body25, %if.end19
  %exit_status20.0.lcssa = phi i32 [ 0, %if.end19 ], [ %spec.select, %for.body25 ]
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  br label %cleanup

for.body25:                                       ; preds = %for.body25, %for.body25.preheader
  %indvars.iv = phi i64 [ 0, %for.body25.preheader ], [ %indvars.iv.next, %for.body25 ]
  %exit_status20.074 = phi i32 [ 0, %for.body25.preheader ], [ %spec.select, %for.body25 ]
  %add.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %add.ptr) #14
  %exit_status28 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 9
  %8 = load i32, i32* %exit_status28, align 4, !tbaa !43
  %cmp29.not = icmp eq i32 %8, 0
  %spec.select = select i1 %cmp29.not, i32 %exit_status20.074, i32 %8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup24, label %for.body25, !llvm.loop !126

cleanup:                                          ; preds = %for.cond.cleanup24, %for.cond.cleanup
  %retval.0 = phi i32 [ %exit_status20.0.lcssa, %for.cond.cleanup24 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #2 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  store atomic i32 %n, i32* %value release, align 4
  ret i32 %n
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = atomicrmw add i32* %value, i32 %n acq_rel
  %cmp = icmp eq i32 %0, 0
  %cmp1 = icmp ne i32 %n, 0
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #14
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %add = add nsw i32 %0, %n
  ret i32 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_pool_cleanup() #0 {
entry:
  tail call void @halide_shutdown_thread_pool() #14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !48, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !69
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #14
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #14
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !56
  %cmp4 = icmp sgt i32 %1, 0
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %call.i = tail call i8* @memset(i8* nonnull bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i32 0, i64 2116) #13
  br label %if.end

for.body:                                         ; preds = %if.then, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %indvars.iv
  %2 = load %struct.halide_thread*, %struct.halide_thread** %arrayidx, align 8, !tbaa !10
  tail call void @halide_join_thread(%struct.halide_thread* %2) #14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %3 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !56
  %4 = sext i32 %3 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %4
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !127

if.end:                                           ; preds = %for.cond.cleanup, %entry
  ret void
}

declare i8* @memset(i8*, i32, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  %ret = alloca i8*, align 8
  %0 = bitcast %struct.halide_thread* %thread_arg to %"struct.Halide::Runtime::Internal::spawned_thread"*
  %1 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #11
  store i8* null, i8** %ret, align 8, !tbaa !10
  %handle = getelementptr inbounds %"struct.Halide::Runtime::Internal::spawned_thread", %"struct.Halide::Runtime::Internal::spawned_thread"* %0, i64 0, i32 2
  %2 = load i64, i64* %handle, align 8, !tbaa !122
  %call = call i32 @pthread_join(i64 %2, i8** nonnull %ret) #13
  %3 = bitcast %struct.halide_thread* %thread_arg to i8*
  call void @free(i8* %3) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #11
  ret void
}

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #1

; Function Attrs: nounwind
define weak void @halide_cond_signal(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !44
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !128
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !130
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 align 2 {
entry:
  ret i1 true
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !128
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_malloc(i8* null, i64 8) #13
  %0 = bitcast i8* %call to %struct.halide_mutex_array*
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %conv = sext i32 %sz to i64
  %mul = shl nsw i64 %conv, 3
  %call1 = tail call i8* @halide_malloc(i8* null, i64 %mul) #13
  %1 = bitcast i8* %call to i8**
  store i8* %call1, i8** %1, align 8, !tbaa !131
  %cmp4 = icmp eq i8* %call1, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  tail call void @halide_free(i8* null, i8* nonnull %call) #13
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %call10 = tail call i8* @memset(i8* nonnull %call1, i32 0, i64 %mul) #13
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then5, %entry
  %retval.0 = phi %struct.halide_mutex_array* [ null, %if.then5 ], [ %0, %if.end6 ], [ null, %entry ]
  ret %struct.halide_mutex_array* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %array to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !131
  tail call void @halide_free(i8* %user_context, i8* %1) #13
  tail call void @halide_free(i8* %user_context, i8* %array) #13
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !131
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_lock(%struct.halide_mutex* %arrayidx) #14
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !131
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %arrayidx) #14
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  br i1 %cmp, label %if.end3.thread, label %if.end

if.end3.thread:                                   ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #13
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %0 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !54
  br label %if.else.i

if.end:                                           ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %cmp1 = icmp eq i32 %n, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #14
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %n.addr.0 = phi i32 [ %call, %if.then2 ], [ %n, %if.end ]
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !54
  %cmp.i = icmp sgt i32 %n.addr.0, 256
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit, label %if.else.i

if.else.i:                                        ; preds = %if.end3, %if.end3.thread
  %2 = phi i32 [ %0, %if.end3.thread ], [ %1, %if.end3 ]
  %n.addr.012 = phi i32 [ %n, %if.end3.thread ], [ %n.addr.0, %if.end3 ]
  %3 = icmp sgt i32 %n.addr.012, 1
  %spec.select.i = select i1 %3, i32 %n.addr.012, i32 1
  br label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit

_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit: ; preds = %if.else.i, %if.end3
  %4 = phi i32 [ %2, %if.else.i ], [ %1, %if.end3 ]
  %call48 = phi i32 [ %spec.select.i, %if.else.i ], [ 256, %if.end3 ]
  store i32 %call48, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !54
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  ret i32 %4
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_set_custom_do_loop_task(i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_custom_parallel_runtime(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release) local_unnamed_addr #2 {
entry:
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  store i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #13
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #13
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #13
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #13
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #13
  ret i1 %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_symbol(i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* nonnull inttoptr (i64 -2 to i8*), i8* %name) #13
  ret i8* %call
}

declare i8* @dlsym(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_load_library(i8* %name) #0 {
entry:
  %call = tail call i8* @dlopen(i8* %name, i32 5) #13
  ret i8* %call
}

declare i8* @dlopen(i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_library_symbol(i8* %lib, i8* %name) #0 {
entry:
  %cmp = icmp eq i8* %lib, null
  %spec.select = select i1 %cmp, i8* inttoptr (i64 -2 to i8*), i8* %lib
  %call = tail call i8* @dlsym(i8* %spec.select, i8* %name) #13
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_get_symbol(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_load_library(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i8*)* @halide_set_custom_get_library_symbol(i8* (i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  store i8* (i8*, i8*)* %f, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  ret i8* (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_symbol(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #13
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_load_library(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #13
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_library_symbol(i8* %lib, i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %lib, i8* %name) #13
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !37
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !133

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !37
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0)) #13
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #13
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !37
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

; Function Attrs: nounwind
define weak i32 @halide_default_trace(i8* %user_context, %struct.halide_trace_event_t* %e) #4 {
entry:
  %0 = atomicrmw add i32* @_ZZ20halide_default_traceE3ids, i32 1 seq_cst
  %call = tail call i32 @halide_get_trace_file(i8* %user_context) #14
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4
  %lanes = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %1 = load i16, i16* %lanes, align 2, !tbaa !134
  %conv = zext i16 %1 to i32
  %bits.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %2 = load i8, i8* %bits.i, align 1, !tbaa !140
  %conv.i = zext i8 %2 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %mul = mul nuw nsw i32 %div.i, %conv
  %dimensions = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %3 = load i32, i32* %dimensions, align 8, !tbaa !141
  %mul3 = shl i32 %3, 2
  %func = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !142
  %call4 = tail call i64 @strlen(i8* %4) #13
  %5 = trunc i64 %call4 to i32
  %conv5 = add i32 %5, 1
  %trace_tag = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %6 = load i8*, i8** %trace_tag, align 8, !tbaa !143
  %tobool.not = icmp eq i8* %6, null
  br i1 %tobool.not, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.then
  %call7 = tail call i64 @strlen(i8* nonnull %6) #13
  %7 = trunc i64 %call7 to i32
  %phi.cast = add i32 %7, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.then
  %cond = phi i32 [ %phi.cast, %cond.true ], [ 1, %if.then ]
  %add11 = add i32 %mul3, 31
  %add12 = add i32 %add11, %mul
  %add13 = add i32 %add12, %conv5
  %add14 = add i32 %add13, %cond
  %and = and i32 %add14, -4
  %8 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 0, i32 0
  %cmp.i.i = icmp ult i32 %and, 1048577
  %cursor.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 1
  %overage.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 2
  %arraydecay.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 0
  br i1 %cmp.i.i, label %while.body.i.i.us.i.preheader, label %while.body.i.i.i.preheader

while.body.i.i.i.preheader:                       ; preds = %cond.end
  %9 = bitcast i32* %cursor.i.i to <2 x i32>*
  br label %while.body.i.i.i

while.body.i.i.us.i.preheader:                    ; preds = %cond.end
  %10 = bitcast i32* %cursor.i.i to <2 x i32>*
  br label %while.body.i.i.us.i

while.body.i.i.us.i:                              ; preds = %while.body.i.i.us.i.backedge, %while.body.i.i.us.i.preheader
  %11 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !144
  %and.i.i.us.i = and i32 %11, 1073741823
  %add.i.i.us.i = add nuw nsw i32 %and.i.i.us.i, 1
  %12 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.us.i, i32 %add.i.i.us.i seq_cst seq_cst
  %13 = extractvalue { i32, i1 } %12, 1
  br i1 %13, label %do.end.i.us.i, label %while.body.i.i.us.i.backedge

do.end.i.us.i:                                    ; preds = %while.body.i.i.us.i
  %14 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.us.i = add i32 %14, %and
  %cmp2.i.us.i = icmp ugt i32 %add.i.us.i, 1048576
  br i1 %cmp2.i.us.i, label %while.body.us.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.us.i:                                  ; preds = %do.end.i.us.i
  %15 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %16 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.us.i

while.body.i.i5.us.i:                             ; preds = %while.body.i.i5.us.i, %while.body.us.i
  %17 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %18 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i, label %while.body.i.i5.us.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i: ; preds = %while.body.i.i5.us.i
  %20 = load i32, i32* %cursor.i.i, align 4, !tbaa !146
  %tobool.not.i.us.i = icmp eq i32 %20, 0
  br i1 %tobool.not.i.us.i, label %do.end.critedge.i.us.i, label %if.then.i9.us.i

if.then.i9.us.i:                                  ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %21 = load i32, i32* %overage.i.i, align 4, !tbaa !148
  %sub.i.us.i = sub i32 %20, %21
  store i32 %sub.i.us.i, i32* %cursor.i.i, align 4, !tbaa !146
  %conv.i.us.i = zext i32 %sub.i.us.i to i64
  %call.i.us.i = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.us.i) #13
  %conv5.i.us.i = trunc i64 %call.i.us.i to i32
  %cmp.i8.us.i = icmp eq i32 %sub.i.us.i, %conv5.i.us.i
  store <2 x i32> zeroinitializer, <2 x i32>* %10, align 4, !tbaa !37
  %22 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.us.i, label %while.body.i.i.us.i.backedge, label %if.then10.i.us.i

if.then10.i.us.i:                                 ; preds = %if.then.i9.us.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %while.body.i.i.us.i.backedge

do.end.critedge.i.us.i:                           ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %23 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.us.i.backedge

while.body.i.i.us.i.backedge:                     ; preds = %do.end.critedge.i.us.i, %if.then10.i.us.i, %if.then.i9.us.i, %while.body.i.i.us.i
  br label %while.body.i.i.us.i, !llvm.loop !149

while.body.i.i.i:                                 ; preds = %while.body.i.i.i.backedge, %while.body.i.i.i.preheader
  %24 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !144
  %and.i.i.i = and i32 %24, 1073741823
  %add.i.i.i = add nuw nsw i32 %and.i.i.i, 1
  %25 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.i, i32 %add.i.i.i seq_cst seq_cst
  %26 = extractvalue { i32, i1 } %25, 1
  br i1 %26, label %if.then.i.i, label %while.body.i.i.i.backedge

if.then.i.i:                                      ; preds = %while.body.i.i.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.31, i64 0, i64 0)) #13
  tail call void @abort() #13
  %27 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.i400 = add i32 %27, %and
  %cmp2.i.i = icmp ugt i32 %add.i.i400, 1048576
  br i1 %cmp2.i.i, label %while.body.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.i:                                     ; preds = %if.then.i.i
  %28 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %29 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.i

while.body.i.i5.i:                                ; preds = %while.body.i.i5.i, %while.body.i
  %30 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %31 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %32 = extractvalue { i32, i1 } %31, 1
  br i1 %32, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i, label %while.body.i.i5.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i: ; preds = %while.body.i.i5.i
  %33 = load i32, i32* %cursor.i.i, align 4, !tbaa !146
  %tobool.not.i.i = icmp eq i32 %33, 0
  br i1 %tobool.not.i.i, label %do.end.critedge.i.i, label %if.then.i9.i

if.then.i9.i:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %34 = load i32, i32* %overage.i.i, align 4, !tbaa !148
  %sub.i.i = sub i32 %33, %34
  store i32 %sub.i.i, i32* %cursor.i.i, align 4, !tbaa !146
  %conv.i.i = zext i32 %sub.i.i to i64
  %call.i.i401 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.i) #13
  %conv5.i.i = trunc i64 %call.i.i401 to i32
  %cmp.i8.i = icmp eq i32 %sub.i.i, %conv5.i.i
  store <2 x i32> zeroinitializer, <2 x i32>* %9, align 4, !tbaa !37
  %35 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.i, label %while.body.i.i.i.backedge, label %if.then10.i.i

if.then10.i.i:                                    ; preds = %if.then.i9.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %while.body.i.i.i.backedge

do.end.critedge.i.i:                              ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %36 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.i.backedge

while.body.i.i.i.backedge:                        ; preds = %do.end.critedge.i.i, %if.then10.i.i, %if.then.i9.i, %while.body.i.i.i
  br label %while.body.i.i.i, !llvm.loop !149

_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit: ; preds = %if.then.i.i, %do.end.i.us.i
  %.lcssa.i = phi i32 [ %14, %do.end.i.us.i ], [ %27, %if.then.i.i ]
  %idx.ext.i.i = zext i32 %.lcssa.i to i64
  %add.ptr.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 %idx.ext.i.i
  %cmp16 = icmp ugt i32 %and, 4096
  br i1 %cmp16, label %if.then17, label %if.end

if.then17:                                        ; preds = %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i404 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i404, label %if.then.i415, label %if.else.i421

if.then.i415:                                     ; preds = %if.then17
  %conv.i4071 = zext i32 %and to i64
  %call.i4082 = tail call i8* @halide_uint64_to_string(i8* null, i8* null, i64 %conv.i4071, i32 1) #13
  %call.i41117 = tail call i8* @halide_string_to_string(i8* %call.i4082, i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #13
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

if.else.i421:                                     ; preds = %if.then17
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %conv.i4073 = zext i32 %and to i64
  %call.i4084 = tail call i8* @halide_uint64_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i64 %conv.i4073, i32 1) #13
  %call.i411 = tail call i8* @halide_string_to_string(i8* %call.i4084, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i.i416 = ptrtoint i8* %call.i411 to i64
  %sub.ptr.rhs.cast.i.i417 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i418 = sub i64 1, %sub.ptr.rhs.cast.i.i417
  %add.i.i419 = add i64 %sub.ptr.sub.i.i418, %sub.ptr.lhs.cast.i.i416
  %call.i.i420 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* null, i8* nonnull %call.i, i64 %add.i.i419) #13
  tail call void @halide_print(i8* null, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit: ; preds = %if.else.i421, %if.then.i415
  tail call void @free(i8* %call.i) #13
  br label %if.end

if.end:                                           ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit, %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %size = bitcast i8* %add.ptr.i.i to i32*
  store i32 %and, i32* %size, align 4, !tbaa !150
  %id = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 4
  %37 = bitcast i8* %id to i32*
  store i32 %0, i32* %37, align 4, !tbaa !152
  %38 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 8
  %39 = bitcast %struct.halide_type_t* %type to i32*
  %40 = bitcast i8* %38 to i32*
  %41 = load i32, i32* %39, align 8
  store i32 %41, i32* %40, align 4
  %event = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %event22 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 12
  %42 = bitcast i32* %event to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4, !tbaa !14
  %dimensions26 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 24
  %44 = bitcast i8* %dimensions26 to i32*
  %45 = bitcast i8* %event22 to <4 x i32>*
  store <4 x i32> %43, <4 x i32>* %45, align 4, !tbaa !14
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %46 = load i32*, i32** %coordinates, align 8, !tbaa !153
  %tobool27.not = icmp eq i32* %46, null
  br i1 %tobool27.not, label %if.end33, label %if.then28

if.then28:                                        ; preds = %if.end
  %47 = bitcast i32* %46 to i8*
  %48 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %conv31 = zext i32 %mul3 to i64
  %call32 = tail call i8* @memcpy(i8* nonnull %48, i8* nonnull %47, i64 %conv31) #13
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.end
  %value = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %49 = load i8*, i8** %value, align 8, !tbaa !154
  %tobool34.not = icmp eq i8* %49, null
  br i1 %tobool34.not, label %if.end40, label %if.then35

if.then35:                                        ; preds = %if.end33
  %50 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %44, align 4, !tbaa !155
  %idx.ext.i = sext i32 %52 to i64
  %add.ptr.i424 = getelementptr inbounds i32, i32* %51, i64 %idx.ext.i
  %53 = bitcast i32* %add.ptr.i424 to i8*
  %conv38 = zext i32 %mul to i64
  %call39 = tail call i8* @memcpy(i8* nonnull %53, i8* nonnull %49, i64 %conv38) #13
  br label %if.end40

if.end40:                                         ; preds = %if.end33, %if.then35
  %54 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %44, align 4, !tbaa !155
  %idx.ext.i.i425 = sext i32 %56 to i64
  %add.ptr.i.i426 = getelementptr inbounds i32, i32* %55, i64 %idx.ext.i.i425
  %57 = bitcast i32* %add.ptr.i.i426 to i8*
  %lanes.i = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 10
  %58 = bitcast i8* %lanes.i to i16*
  %59 = load i16, i16* %58, align 2, !tbaa !156
  %conv.i427 = zext i16 %59 to i32
  %60 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 9
  %61 = load i8, i8* %60, align 1, !tbaa !140
  %conv.i.i428 = zext i8 %61 to i32
  %add.i.i429 = add nuw nsw i32 %conv.i.i428, 7
  %div.i.i = lshr i32 %add.i.i429, 3
  %mul.i = mul nuw nsw i32 %div.i.i, %conv.i427
  %idx.ext.i430 = zext i32 %mul.i to i64
  %add.ptr.i431 = getelementptr inbounds i8, i8* %57, i64 %idx.ext.i430
  %62 = load i8*, i8** %func, align 8, !tbaa !142
  %conv43 = zext i32 %conv5 to i64
  %call44 = tail call i8* @memcpy(i8* nonnull %add.ptr.i431, i8* %62, i64 %conv43) #13
  %63 = load i32, i32* %44, align 4, !tbaa !155
  %idx.ext.i.i.i = sext i32 %63 to i64
  %add.ptr.i.i.i = getelementptr inbounds i32, i32* %55, i64 %idx.ext.i.i.i
  %64 = bitcast i32* %add.ptr.i.i.i to i8*
  %65 = load i16, i16* %58, align 2, !tbaa !156
  %conv.i.i432 = zext i16 %65 to i32
  %66 = load i8, i8* %60, align 1, !tbaa !140
  %conv.i.i.i = zext i8 %66 to i32
  %add.i.i.i433 = add nuw nsw i32 %conv.i.i.i, 7
  %div.i.i.i = lshr i32 %add.i.i.i433, 3
  %mul.i.i = mul nuw nsw i32 %div.i.i.i, %conv.i.i432
  %idx.ext.i.i434 = zext i32 %mul.i.i to i64
  %add.ptr.i.i435 = getelementptr inbounds i8, i8* %64, i64 %idx.ext.i.i434
  br label %while.cond.i437

while.cond.i437:                                  ; preds = %while.cond.i437, %if.end40
  %f.0.i = phi i8* [ %add.ptr.i.i435, %if.end40 ], [ %incdec.ptr.i, %while.cond.i437 ]
  %incdec.ptr.i = getelementptr inbounds i8, i8* %f.0.i, i64 1
  %67 = load i8, i8* %f.0.i, align 1, !tbaa !14
  %tobool.not.i436 = icmp eq i8 %67, 0
  br i1 %tobool.not.i436, label %_ZN21halide_trace_packet_t9trace_tagEv.exit, label %while.cond.i437, !llvm.loop !157

_ZN21halide_trace_packet_t9trace_tagEv.exit:      ; preds = %while.cond.i437
  %68 = load i8*, i8** %trace_tag, align 8, !tbaa !143
  %tobool47.not = icmp eq i8* %68, null
  %spec.select = select i1 %tobool47.not, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.10, i64 0, i64 0), i8* %68
  %conv53 = zext i32 %cond to i64
  %call54 = tail call i8* @memcpy(i8* nonnull %incdec.ptr.i, i8* %spec.select, i64 %conv53) #13
  %69 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  fence seq_cst
  %lock.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %69, i64 0, i32 0, i32 0
  %70 = atomicrmw sub i32* %lock.i.i, i32 1 seq_cst
  %71 = load i32, i32* %event, align 4, !tbaa !158
  %cmp56 = icmp eq i32 %71, 9
  br i1 %cmp56, label %if.then57, label %if.end277

if.then57:                                        ; preds = %_ZN21halide_trace_packet_t9trace_tagEv.exit
  %72 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i438 = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 0, i32 0
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %if.then57
  %73 = atomicrmw or i32* %lock.i.i438, i32 1073741824 seq_cst
  %74 = cmpxchg i32* %lock.i.i438, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %75 = extractvalue { i32, i1 } %74, 1
  br i1 %75, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i, label %while.body.i.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i: ; preds = %while.body.i.i
  %cursor.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 1
  %76 = load i32, i32* %cursor.i, align 4, !tbaa !146
  %tobool.not.i439 = icmp eq i32 %76, 0
  br i1 %tobool.not.i439, label %do.end.critedge.i, label %if.then.i442

if.then.i442:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %overage.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 2
  %77 = load i32, i32* %overage.i, align 4, !tbaa !148
  %sub.i = sub i32 %76, %77
  store i32 %sub.i, i32* %cursor.i, align 4, !tbaa !146
  %arraydecay.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 3, i64 0
  %conv.i440 = zext i32 %sub.i to i64
  %call.i441 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i, i64 %conv.i440) #13
  %conv5.i = trunc i64 %call.i441 to i32
  %cmp.i = icmp eq i32 %sub.i, %conv5.i
  %78 = bitcast i32* %cursor.i to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %78, align 4, !tbaa !37
  %79 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br i1 %cmp.i, label %if.end277, label %if.then10.i

if.then10.i:                                      ; preds = %if.then.i442
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %if.end277

do.end.critedge.i:                                ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %80 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br label %if.end277

if.else:                                          ; preds = %entry
  %call.i445 = tail call i8* @malloc(i64 4096) #13
  %tobool.not.i448 = icmp eq i8* %call.i445, null
  br i1 %tobool.not.i448, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit, label %if.then6.i451

if.then6.i451:                                    ; preds = %if.else
  %add.ptr.i449 = getelementptr inbounds i8, i8* %call.i445, i64 4095
  store i8 0, i8* %add.ptr.i449, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit: ; preds = %if.then6.i451, %if.else
  %ss.sroa.74.0 = phi i8* [ %add.ptr.i449, %if.then6.i451 ], [ null, %if.else ]
  %bits = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %81 = load i8, i8* %bits, align 1, !tbaa !159
  %conv60 = zext i8 %81 to i32
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit
  %print_bits.0 = phi i32 [ 8, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit ], [ %shl, %while.cond ]
  %cmp61 = icmp slt i32 %print_bits.0, %conv60
  %shl = shl i32 %print_bits.0, 1
  br i1 %cmp61, label %while.cond, label %do.body, !llvm.loop !160

do.body:                                          ; preds = %while.cond
  %cmp62 = icmp slt i32 %print_bits.0, 65
  br i1 %cmp62, label %do.end, label %if.then63

if.then63:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2.11, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end

do.end:                                           ; preds = %if.then63, %do.body
  %event65 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %82 = load i32, i32* %event65, align 4, !tbaa !158
  %cmp66 = icmp slt i32 %82, 2
  %idxprom = zext i32 %82 to i64
  %arrayidx = getelementptr inbounds [11 x i8*], [11 x i8*]* @__const.halide_default_trace.event_types, i64 0, i64 %idxprom
  %83 = load i8*, i8** %arrayidx, align 8, !tbaa !10
  %call.i456 = tail call i8* @halide_string_to_string(i8* %call.i445, i8* %ss.sroa.74.0, i8* %83) #13
  %call.i459 = tail call i8* @halide_string_to_string(i8* %call.i456, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #13
  %func70 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %84 = load i8*, i8** %func70, align 8, !tbaa !142
  %call.i462 = tail call i8* @halide_string_to_string(i8* %call.i459, i8* %ss.sroa.74.0, i8* %84) #13
  %call.i465 = tail call i8* @halide_string_to_string(i8* %call.i462, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #13
  %value_index73 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 7
  %85 = load i32, i32* %value_index73, align 4, !tbaa !161
  %conv.i468 = sext i32 %85 to i64
  %call.i469 = tail call i8* @halide_int64_to_string(i8* %call.i465, i8* %ss.sroa.74.0, i64 %conv.i468, i32 1) #13
  %call.i472 = tail call i8* @halide_string_to_string(i8* %call.i469, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #13
  %lanes77 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %86 = load i16, i16* %lanes77, align 2, !tbaa !134
  %cmp79 = icmp ugt i16 %86, 1
  br i1 %cmp79, label %if.then80, label %if.end82

if.then80:                                        ; preds = %do.end
  %call.i475 = tail call i8* @halide_string_to_string(i8* %call.i472, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)) #13
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %do.end
  %ss.sroa.7.0 = phi i8* [ %call.i475, %if.then80 ], [ %call.i472, %do.end ]
  %dimensions83 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %87 = load i32, i32* %dimensions83, align 8, !tbaa !141
  %cmp84660 = icmp sgt i32 %87, 0
  br i1 %cmp84660, label %if.end100.peel, label %for.cond.cleanup

if.end100.peel:                                   ; preds = %if.end82
  %coordinates101 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %.pre = load i32*, i32** %coordinates101, align 8, !tbaa !153
  %.pre673 = load i32, i32* %.pre, align 4, !tbaa !37
  %conv.i484.peel = sext i32 %.pre673 to i64
  %call.i485.peel = tail call i8* @halide_int64_to_string(i8* %ss.sroa.7.0, i8* %ss.sroa.74.0, i64 %conv.i484.peel, i32 1) #13
  %88 = load i32, i32* %dimensions83, align 8, !tbaa !141
  %cmp84.peel = icmp sgt i32 %88, 1
  br i1 %cmp84.peel, label %if.then86, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %if.end100, %if.end100.peel, %if.end82
  %ss.sroa.7.1.lcssa = phi i8* [ %ss.sroa.7.0, %if.end82 ], [ %call.i485.peel, %if.end100.peel ], [ %call.i485, %if.end100 ]
  %89 = load i16, i16* %lanes77, align 2, !tbaa !134
  %cmp108 = icmp ugt i16 %89, 1
  %.sink684 = select i1 %cmp108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)
  %call.i491 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1.lcssa, i8* %ss.sroa.74.0, i8* %.sink684) #13
  br i1 %cmp66, label %if.then115, label %if.end263

if.then86:                                        ; preds = %if.end100.peel, %if.end100
  %indvars.iv670 = phi i64 [ %indvars.iv.next671, %if.end100 ], [ 1, %if.end100.peel ]
  %ss.sroa.7.1661 = phi i8* [ %call.i485, %if.end100 ], [ %call.i485.peel, %if.end100.peel ]
  %90 = load i16, i16* %lanes77, align 2, !tbaa !134
  %cmp90 = icmp ugt i16 %90, 1
  br i1 %cmp90, label %land.lhs.true, label %if.else97.split

land.lhs.true:                                    ; preds = %if.then86
  %conv89 = zext i16 %90 to i32
  %91 = trunc i64 %indvars.iv670 to i32
  %rem = urem i32 %91, %conv89
  %cmp94 = icmp eq i32 %rem, 0
  br i1 %cmp94, label %if.end100, label %if.else97.split

if.else97.split:                                  ; preds = %if.then86, %land.lhs.true
  br label %if.end100

if.end100:                                        ; preds = %land.lhs.true, %if.else97.split
  %.sink = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0), %if.else97.split ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), %land.lhs.true ]
  %call.i4786 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1661, i8* %ss.sroa.74.0, i8* %.sink) #13
  %92 = load i32*, i32** %coordinates101, align 8, !tbaa !153
  %arrayidx103 = getelementptr inbounds i32, i32* %92, i64 %indvars.iv670
  %93 = load i32, i32* %arrayidx103, align 4, !tbaa !37
  %conv.i484 = sext i32 %93 to i64
  %call.i485 = tail call i8* @halide_int64_to_string(i8* %call.i4786, i8* %ss.sroa.74.0, i64 %conv.i484, i32 1) #13
  %indvars.iv.next671 = add nuw nsw i64 %indvars.iv670, 1
  %94 = load i32, i32* %dimensions83, align 8, !tbaa !141
  %95 = sext i32 %94 to i64
  %cmp84 = icmp slt i64 %indvars.iv.next671, %95
  br i1 %cmp84, label %if.then86, label %for.cond.cleanup, !llvm.loop !162

if.then115:                                       ; preds = %for.cond.cleanup
  %96 = load i16, i16* %lanes77, align 2, !tbaa !134
  %cmp119 = icmp ugt i16 %96, 1
  %.sink685 = select i1 %cmp119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0)
  %call.i497 = tail call i8* @halide_string_to_string(i8* %call.i491, i8* %ss.sroa.74.0, i8* %.sink685) #13
  %97 = load i16, i16* %lanes77, align 2, !tbaa !134
  %cmp130655.not = icmp eq i16 %97, 0
  br i1 %cmp130655.not, label %if.end263, label %if.end136.peel

if.end136.peel:                                   ; preds = %if.then115
  %code = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 0
  %value245 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %98 = bitcast i8** %value245 to i8***
  %cmp214 = icmp sgt i32 %print_bits.0, 15
  %99 = bitcast i8** %value245 to i16**
  %100 = bitcast i8** %value245 to float**
  %101 = bitcast i8** %value245 to double**
  %102 = bitcast i8** %value245 to i32**
  %103 = bitcast i8** %value245 to i64**
  %.pre674 = load i8, i8* %code, align 8, !tbaa !164
  switch i8 %.pre674, label %for.inc253.peel [
    i8 0, label %if.then140.peel
    i8 1, label %if.then176.peel
    i8 2, label %do.body213.peel
    i8 3, label %if.then244.peel
  ]

if.then244.peel:                                  ; preds = %if.end136.peel
  %104 = load i8**, i8*** %98, align 8, !tbaa !154
  %105 = load i8*, i8** %104, align 8, !tbaa !10
  %call.i543.peel = tail call i8* @halide_pointer_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i8* %105) #13
  br label %for.inc253.peel

do.body213.peel:                                  ; preds = %if.end136.peel
  br i1 %cmp214, label %do.end218.peel, label %if.then215.peel

if.then215.peel:                                  ; preds = %do.body213.peel
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end218.peel

do.end218.peel:                                   ; preds = %if.then215.peel, %do.body213.peel
  switch i32 %print_bits.0, label %if.else232.peel [
    i32 32, label %if.then220.peel
    i32 16, label %if.then227.peel
  ]

if.then227.peel:                                  ; preds = %do.end218.peel
  %106 = load i16*, i16** %99, align 8, !tbaa !154
  %107 = load i16, i16* %106, align 2, !tbaa !165
  %call.i535.peel = tail call double @halide_float16_bits_to_double(i16 zeroext %107) #13
  %call2.i.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %call.i535.peel, i32 1) #13
  br label %for.inc253.peel

if.then220.peel:                                  ; preds = %do.end218.peel
  %108 = load float*, float** %100, align 8, !tbaa !154
  %109 = load float, float* %108, align 4, !tbaa !166
  %conv.i533.peel = fpext float %109 to double
  %call.i534.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %conv.i533.peel, i32 0) #13
  br label %for.inc253.peel

if.else232.peel:                                  ; preds = %do.end218.peel
  %110 = load double*, double** %101, align 8, !tbaa !154
  %111 = load double, double* %110, align 8, !tbaa !168
  %call.i540.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %111, i32 1) #13
  br label %for.inc253.peel

if.then176.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else199.peel [
    i32 8, label %if.then178.peel
    i32 16, label %if.then186.peel
    i32 32, label %if.then194.peel
  ]

if.then194.peel:                                  ; preds = %if.then176.peel
  %112 = load i32*, i32** %102, align 8, !tbaa !154
  %113 = load i32, i32* %112, align 4, !tbaa !37
  %conv.i526.peel = zext i32 %113 to i64
  %call.i527.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i526.peel, i32 1) #13
  br label %for.inc253.peel

if.then186.peel:                                  ; preds = %if.then176.peel
  %114 = load i16*, i16** %99, align 8, !tbaa !154
  %115 = load i16, i16* %114, align 2, !tbaa !165
  %conv.i522.peel = zext i16 %115 to i64
  %call.i523.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i522.peel, i32 1) #13
  br label %for.inc253.peel

if.then178.peel:                                  ; preds = %if.then176.peel
  %116 = load i8*, i8** %value245, align 8, !tbaa !154
  %117 = load i8, i8* %116, align 1, !tbaa !14
  %conv.i518.peel = zext i8 %117 to i64
  %call.i519.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i518.peel, i32 1) #13
  br label %for.inc253.peel

if.else199.peel:                                  ; preds = %if.then176.peel
  %118 = load i64*, i64** %103, align 8, !tbaa !154
  %119 = load i64, i64* %118, align 8, !tbaa !18
  %call.i530.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %119, i32 1) #13
  br label %for.inc253.peel

if.then140.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else163.peel [
    i32 8, label %if.then142.peel
    i32 16, label %if.then150.peel
    i32 32, label %if.then158.peel
  ]

if.then158.peel:                                  ; preds = %if.then140.peel
  %120 = load i32*, i32** %102, align 8, !tbaa !154
  %121 = load i32, i32* %120, align 4, !tbaa !37
  %conv.i511.peel = sext i32 %121 to i64
  %call.i512.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i511.peel, i32 1) #13
  br label %for.inc253.peel

if.then150.peel:                                  ; preds = %if.then140.peel
  %122 = load i16*, i16** %99, align 8, !tbaa !154
  %123 = load i16, i16* %122, align 2, !tbaa !165
  %conv.i507.peel = sext i16 %123 to i64
  %call.i508.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i507.peel, i32 1) #13
  br label %for.inc253.peel

if.then142.peel:                                  ; preds = %if.then140.peel
  %124 = load i8*, i8** %value245, align 8, !tbaa !154
  %125 = load i8, i8* %124, align 1, !tbaa !14
  %conv.i503.peel = sext i8 %125 to i64
  %call.i504.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i503.peel, i32 1) #13
  br label %for.inc253.peel

if.else163.peel:                                  ; preds = %if.then140.peel
  %126 = load i64*, i64** %103, align 8, !tbaa !154
  %127 = load i64, i64* %126, align 8, !tbaa !18
  %call.i515.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %127, i32 1) #13
  br label %for.inc253.peel

for.inc253.peel:                                  ; preds = %if.else163.peel, %if.then142.peel, %if.then150.peel, %if.then158.peel, %if.else199.peel, %if.then178.peel, %if.then186.peel, %if.then194.peel, %if.else232.peel, %if.then220.peel, %if.then227.peel, %if.then244.peel, %if.end136.peel
  %ss.sroa.7.7.peel = phi i8* [ %call.i497, %if.end136.peel ], [ %call.i543.peel, %if.then244.peel ], [ %call.i540.peel, %if.else232.peel ], [ %call2.i.peel, %if.then227.peel ], [ %call.i534.peel, %if.then220.peel ], [ %call.i530.peel, %if.else199.peel ], [ %call.i527.peel, %if.then194.peel ], [ %call.i523.peel, %if.then186.peel ], [ %call.i519.peel, %if.then178.peel ], [ %call.i515.peel, %if.else163.peel ], [ %call.i512.peel, %if.then158.peel ], [ %call.i508.peel, %if.then150.peel ], [ %call.i504.peel, %if.then142.peel ]
  %128 = load i16, i16* %lanes77, align 2, !tbaa !134
  %cmp130.peel = icmp ugt i16 %128, 1
  br i1 %cmp130.peel, label %if.end136, label %if.end263

for.cond.cleanup131:                              ; preds = %for.inc253
  %cmp259 = icmp ugt i16 %154, 1
  br i1 %cmp259, label %if.then260, label %if.end263

if.end136:                                        ; preds = %for.inc253.peel, %for.inc253
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc253 ], [ 1, %for.inc253.peel ]
  %ss.sroa.7.5656 = phi i8* [ %ss.sroa.7.7, %for.inc253 ], [ %ss.sroa.7.7.peel, %for.inc253.peel ]
  %call.i500 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.5656, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #13
  %129 = load i8, i8* %code, align 8, !tbaa !164
  switch i8 %129, label %for.inc253 [
    i8 0, label %if.then140
    i8 1, label %if.then176
    i8 2, label %do.body213
    i8 3, label %if.then244
  ]

if.then140:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else163 [
    i32 8, label %if.then142
    i32 16, label %if.then150
    i32 32, label %if.then158
  ]

if.then142:                                       ; preds = %if.then140
  %130 = load i8*, i8** %value245, align 8, !tbaa !154
  %arrayidx145 = getelementptr inbounds i8, i8* %130, i64 %indvars.iv
  %131 = load i8, i8* %arrayidx145, align 1, !tbaa !14
  %conv.i503 = sext i8 %131 to i64
  %call.i504 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i503, i32 1) #13
  br label %for.inc253

if.then150:                                       ; preds = %if.then140
  %132 = load i16*, i16** %99, align 8, !tbaa !154
  %arrayidx153 = getelementptr inbounds i16, i16* %132, i64 %indvars.iv
  %133 = load i16, i16* %arrayidx153, align 2, !tbaa !165
  %conv.i507 = sext i16 %133 to i64
  %call.i508 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i507, i32 1) #13
  br label %for.inc253

if.then158:                                       ; preds = %if.then140
  %134 = load i32*, i32** %102, align 8, !tbaa !154
  %arrayidx161 = getelementptr inbounds i32, i32* %134, i64 %indvars.iv
  %135 = load i32, i32* %arrayidx161, align 4, !tbaa !37
  %conv.i511 = sext i32 %135 to i64
  %call.i512 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i511, i32 1) #13
  br label %for.inc253

if.else163:                                       ; preds = %if.then140
  %136 = load i64*, i64** %103, align 8, !tbaa !154
  %arrayidx166 = getelementptr inbounds i64, i64* %136, i64 %indvars.iv
  %137 = load i64, i64* %arrayidx166, align 8, !tbaa !18
  %call.i515 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %137, i32 1) #13
  br label %for.inc253

if.then176:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else199 [
    i32 8, label %if.then178
    i32 16, label %if.then186
    i32 32, label %if.then194
  ]

if.then178:                                       ; preds = %if.then176
  %138 = load i8*, i8** %value245, align 8, !tbaa !154
  %arrayidx181 = getelementptr inbounds i8, i8* %138, i64 %indvars.iv
  %139 = load i8, i8* %arrayidx181, align 1, !tbaa !14
  %conv.i518 = zext i8 %139 to i64
  %call.i519 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i518, i32 1) #13
  br label %for.inc253

if.then186:                                       ; preds = %if.then176
  %140 = load i16*, i16** %99, align 8, !tbaa !154
  %arrayidx189 = getelementptr inbounds i16, i16* %140, i64 %indvars.iv
  %141 = load i16, i16* %arrayidx189, align 2, !tbaa !165
  %conv.i522 = zext i16 %141 to i64
  %call.i523 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i522, i32 1) #13
  br label %for.inc253

if.then194:                                       ; preds = %if.then176
  %142 = load i32*, i32** %102, align 8, !tbaa !154
  %arrayidx197 = getelementptr inbounds i32, i32* %142, i64 %indvars.iv
  %143 = load i32, i32* %arrayidx197, align 4, !tbaa !37
  %conv.i526 = zext i32 %143 to i64
  %call.i527 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i526, i32 1) #13
  br label %for.inc253

if.else199:                                       ; preds = %if.then176
  %144 = load i64*, i64** %103, align 8, !tbaa !154
  %arrayidx202 = getelementptr inbounds i64, i64* %144, i64 %indvars.iv
  %145 = load i64, i64* %arrayidx202, align 8, !tbaa !18
  %call.i530 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %145, i32 1) #13
  br label %for.inc253

do.body213:                                       ; preds = %if.end136
  br i1 %cmp214, label %do.end218, label %if.then215

if.then215:                                       ; preds = %do.body213
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end218

do.end218:                                        ; preds = %if.then215, %do.body213
  switch i32 %print_bits.0, label %if.else232 [
    i32 32, label %if.then220
    i32 16, label %if.then227
  ]

if.then220:                                       ; preds = %do.end218
  %146 = load float*, float** %100, align 8, !tbaa !154
  %arrayidx223 = getelementptr inbounds float, float* %146, i64 %indvars.iv
  %147 = load float, float* %arrayidx223, align 4, !tbaa !166
  %conv.i533 = fpext float %147 to double
  %call.i534 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %conv.i533, i32 0) #13
  br label %for.inc253

if.then227:                                       ; preds = %do.end218
  %148 = load i16*, i16** %99, align 8, !tbaa !154
  %arrayidx230 = getelementptr inbounds i16, i16* %148, i64 %indvars.iv
  %149 = load i16, i16* %arrayidx230, align 2, !tbaa !165
  %call.i535 = tail call double @halide_float16_bits_to_double(i16 zeroext %149) #13
  %call2.i = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %call.i535, i32 1) #13
  br label %for.inc253

if.else232:                                       ; preds = %do.end218
  %150 = load double*, double** %101, align 8, !tbaa !154
  %arrayidx235 = getelementptr inbounds double, double* %150, i64 %indvars.iv
  %151 = load double, double* %arrayidx235, align 8, !tbaa !168
  %call.i540 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %151, i32 1) #13
  br label %for.inc253

if.then244:                                       ; preds = %if.end136
  %152 = load i8**, i8*** %98, align 8, !tbaa !154
  %arrayidx247 = getelementptr inbounds i8*, i8** %152, i64 %indvars.iv
  %153 = load i8*, i8** %arrayidx247, align 8, !tbaa !10
  %call.i543 = tail call i8* @halide_pointer_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i8* %153) #13
  br label %for.inc253

for.inc253:                                       ; preds = %if.then244, %if.else232, %if.then227, %if.then220, %if.else199, %if.then194, %if.then186, %if.then178, %if.else163, %if.then158, %if.then150, %if.then142, %if.end136
  %ss.sroa.7.7 = phi i8* [ %call.i500, %if.end136 ], [ %call.i543, %if.then244 ], [ %call.i540, %if.else232 ], [ %call2.i, %if.then227 ], [ %call.i534, %if.then220 ], [ %call.i530, %if.else199 ], [ %call.i527, %if.then194 ], [ %call.i523, %if.then186 ], [ %call.i519, %if.then178 ], [ %call.i515, %if.else163 ], [ %call.i512, %if.then158 ], [ %call.i508, %if.then150 ], [ %call.i504, %if.then142 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %154 = load i16, i16* %lanes77, align 2, !tbaa !134
  %155 = zext i16 %154 to i64
  %cmp130 = icmp ult i64 %indvars.iv.next, %155
  br i1 %cmp130, label %if.end136, label %for.cond.cleanup131, !llvm.loop !170

if.then260:                                       ; preds = %for.cond.cleanup131
  %call.i546 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.7, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0)) #13
  br label %if.end263

if.end263:                                        ; preds = %if.then260, %for.cond.cleanup131, %for.inc253.peel, %if.then115, %for.cond.cleanup
  %ss.sroa.7.8 = phi i8* [ %call.i546, %if.then260 ], [ %ss.sroa.7.7, %for.cond.cleanup131 ], [ %call.i491, %for.cond.cleanup ], [ %ss.sroa.7.7.peel, %for.inc253.peel ], [ %call.i497, %if.then115 ]
  %trace_tag264 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %156 = load i8*, i8** %trace_tag264, align 8, !tbaa !143
  %tobool265.not = icmp eq i8* %156, null
  br i1 %tobool265.not, label %if.end274, label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end263
  %157 = load i8, i8* %156, align 1, !tbaa !14
  %tobool268.not = icmp eq i8 %157, 0
  br i1 %tobool268.not, label %if.end274, label %if.then269

if.then269:                                       ; preds = %land.lhs.true266
  %call.i549 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.8, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0)) #13
  %158 = load i8*, i8** %trace_tag264, align 8, !tbaa !143
  %call.i552 = tail call i8* @halide_string_to_string(i8* %call.i549, i8* %ss.sroa.74.0, i8* %158) #13
  %call.i555 = tail call i8* @halide_string_to_string(i8* %call.i552, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0)) #13
  br label %if.end274

if.end274:                                        ; preds = %if.then269, %land.lhs.true266, %if.end263
  %ss.sroa.7.9 = phi i8* [ %ss.sroa.7.8, %if.end263 ], [ %ss.sroa.7.8, %land.lhs.true266 ], [ %call.i555, %if.then269 ]
  %call.i558 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.9, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #13
  br label %while.cond.i560

while.cond.i560:                                  ; preds = %while.cond.i560, %if.end274
  %159 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i559 = icmp eq i8 %159, 0
  br i1 %tobool.not.i559, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i560, !llvm.loop !171

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i560
  br i1 %tobool.not.i448, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %sub.ptr.lhs.cast.i.i563 = ptrtoint i8* %call.i558 to i64
  %sub.ptr.rhs.cast.i.i564 = ptrtoint i8* %call.i445 to i64
  %sub.ptr.sub.i.i565 = sub i64 1, %sub.ptr.rhs.cast.i.i564
  %add.i.i566 = add i64 %sub.ptr.sub.i.i565, %sub.ptr.lhs.cast.i.i563
  %call.i.i567 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #13
  tail call void @halide_print(i8* %user_context, i8* nonnull %call.i445) #13
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i445) #13
  br label %if.end277

if.end277:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit, %do.end.critedge.i, %if.then10.i, %if.then.i442, %_ZN21halide_trace_packet_t9trace_tagEv.exit
  ret i32 %0
}

; Function Attrs: nounwind
define weak i32 @halide_get_trace_file(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !171

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !37
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i64 0, i64 0)) #13
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.then
  %call2 = tail call i8* @fopen(i8* nonnull %call, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i64 0, i64 0)) #13
  %tobool3.not = icmp eq i8* %call2, null
  br i1 %tobool3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.then1
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.30, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.then1
  %call5 = tail call i32 @fileno(i8* %call2) #13
  tail call void @halide_set_trace_file(i32 %call5) #14
  store i8* %call2, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %2 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool6.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %2, null
  br i1 %tobool6.not, label %if.then7, label %if.end11

if.then7:                                         ; preds = %do.end
  %call8 = tail call i8* @malloc(i64 1048588) #13
  store i8* %call8, i8** bitcast (%"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE to i8**), align 8, !tbaa !10
  %cursor.i = getelementptr inbounds i8, i8* %call8, i64 4
  %3 = bitcast i8* %cursor.i to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %3, align 4, !tbaa !37
  %lock.i.i = bitcast i8* %call8 to i32*
  store volatile i32 0, i32* %lock.i.i, align 4, !tbaa !144
  br label %if.end11

if.else:                                          ; preds = %if.then
  tail call void @halide_set_trace_file(i32 0) #14
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then7, %do.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %4 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !37
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  ret i32 %4
}

declare i8* @memcpy(i8*, i8*, i64) local_unnamed_addr #1

declare i8* @fopen(i8*, i8*) local_unnamed_addr #1

declare i32 @fileno(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_trace_file(i32 %fd) local_unnamed_addr #2 {
entry:
  store i32 %fd, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !37
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_trace_cleanup() #0 {
entry:
  %call = tail call i32 @halide_shutdown_trace() #14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_shutdown_trace() local_unnamed_addr #0 {
entry:
  %0 = load i8*, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %tobool.not = icmp eq i8* %0, null
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @fclose(i8* nonnull %0) #13
  store i32 0, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !37
  store i8 0, i8* @_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE, align 1, !tbaa !15
  store i8* null, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %1 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool1.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %1, null
  br i1 %tobool1.not, label %return, label %if.then2

if.then2:                                         ; preds = %if.then
  %2 = bitcast %"class.Halide::Runtime::Internal::TraceBuffer"* %1 to i8*
  tail call void @free(i8* nonnull %2) #13
  br label %return

return:                                           ; preds = %if.then2, %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then2 ], [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @fclose(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, %struct.halide_trace_event_t*)* @halide_set_custom_trace(i32 (i8*, %struct.halide_trace_event_t*)* %t) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  store i32 (i8*, %struct.halide_trace_event_t*)* %t, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  ret i32 (i8*, %struct.halide_trace_event_t*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* %e) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, %struct.halide_trace_event_t* %e) #13
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_trace_helper(i8* %user_context, i8* %func, i8* %value, i32* %coords, i32 %type_code, i32 %type_bits, i32 %type_lanes, i32 %code, i32 %parent_id, i32 %value_index, i32 %dimensions, i8* %trace_tag) local_unnamed_addr #4 {
entry:
  %event = alloca %struct.halide_trace_event_t, align 8
  %0 = bitcast %struct.halide_trace_event_t* %event to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %0) #11
  %code.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 0
  %bits.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 1
  %lanes.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 2
  %func1 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 0
  store i8* %func, i8** %func1, align 8, !tbaa !142
  %value2 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 1
  store i8* %value, i8** %value2, align 8, !tbaa !154
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 2
  store i32* %coords, i32** %coordinates, align 8, !tbaa !153
  %trace_tag3 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 3
  store i8* %trace_tag, i8** %trace_tag3, align 8, !tbaa !143
  %conv = trunc i32 %type_code to i8
  store i8 %conv, i8* %code.i.i, align 8, !tbaa !164
  %conv5 = trunc i32 %type_bits to i8
  store i8 %conv5, i8* %bits.i.i, align 1, !tbaa !159
  %conv7 = trunc i32 %type_lanes to i16
  store i16 %conv7, i16* %lanes.i.i, align 2, !tbaa !134
  %event9 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 5
  store i32 %code, i32* %event9, align 4, !tbaa !158
  %parent_id10 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 6
  store i32 %parent_id, i32* %parent_id10, align 8, !tbaa !172
  %value_index11 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 7
  store i32 %value_index, i32* %value_index11, align 4, !tbaa !161
  %dimensions12 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 8
  store i32 %dimensions, i32* %dimensions12, align 8, !tbaa !141
  %call = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 56) #13
  %add = add nsw i32 %type_bits, 7
  %div = sdiv i32 %add, 8
  %mul = mul nsw i32 %div, %type_lanes
  %conv13 = sext i32 %mul to i64
  %call14 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %value, i64 %conv13) #13
  %1 = bitcast i32* %coords to i8*
  %conv15 = sext i32 %dimensions to i64
  %mul16 = shl nsw i64 %conv15, 2
  %call17 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %1, i64 %mul16) #13
  %call18 = call i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* nonnull %event) #13
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %0) #11
  ret i32 %call18
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* %suffix) local_unnamed_addr #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %f.0 = phi i8* [ %filename, %entry ], [ %incdec.ptr, %while.cond ]
  %0 = load i8, i8* %f.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %0, 0
  %incdec.ptr = getelementptr inbounds i8, i8* %f.0, i64 1
  br i1 %tobool.not, label %while.cond1, label %while.cond, !llvm.loop !173

while.cond1:                                      ; preds = %while.cond, %while.cond1
  %s.0 = phi i8* [ %incdec.ptr4, %while.cond1 ], [ %suffix, %while.cond ]
  %1 = load i8, i8* %s.0, align 1, !tbaa !14
  %tobool2.not = icmp eq i8 %1, 0
  %incdec.ptr4 = getelementptr inbounds i8, i8* %s.0, i64 1
  br i1 %tobool2.not, label %while.cond6.preheader, label %while.cond1, !llvm.loop !174

while.cond6.preheader:                            ; preds = %while.cond1
  %cmp34 = icmp ne i8* %s.0, %suffix
  %cmp735 = icmp ne i8* %f.0, %filename
  %2 = and i1 %cmp735, %cmp34
  br i1 %2, label %if.end, label %while.cond6.preheader.while.end13_crit_edge

while.cond6.preheader.while.end13_crit_edge:      ; preds = %while.cond6.preheader
  %cmp16.0 = icmp eq i8 0, 0
  br label %while.end13

if.end:                                           ; preds = %while.cond6.preheader, %if.end.while.body8_crit_edge
  %f.13649 = phi i8* [ %incdec.ptr11, %if.end.while.body8_crit_edge ], [ %f.0, %while.cond6.preheader ]
  %s.13748 = phi i8* [ %incdec.ptr12, %if.end.while.body8_crit_edge ], [ %s.0, %while.cond6.preheader ]
  %incdec.ptr11 = getelementptr inbounds i8, i8* %f.13649, i64 -1
  %incdec.ptr12 = getelementptr inbounds i8, i8* %s.13748, i64 -1
  %cmp = icmp ne i8* %incdec.ptr12, %suffix
  %cmp7 = icmp ne i8* %incdec.ptr11, %filename
  %3 = and i1 %cmp7, %cmp
  %.pre = load i8, i8* %incdec.ptr11, align 1, !tbaa !14
  %.pre45 = load i8, i8* %incdec.ptr12, align 1, !tbaa !14
  br i1 %3, label %if.end.while.body8_crit_edge, label %if.end.while.end13_crit_edge, !llvm.loop !175

if.end.while.end13_crit_edge:                     ; preds = %if.end
  %cmp16.1 = icmp eq i8 %.pre, %.pre45
  br label %while.end13

if.end.while.body8_crit_edge:                     ; preds = %if.end
  %cmp10.not = icmp eq i8 %.pre, %.pre45
  br i1 %cmp10.not, label %if.end, label %cleanup

while.end13:                                      ; preds = %if.end.while.end13_crit_edge, %while.cond6.preheader.while.end13_crit_edge
  %cmp16.phi = phi i1 [ %cmp16.0, %while.cond6.preheader.while.end13_crit_edge ], [ %cmp16.1, %if.end.while.end13_crit_edge ]
  br label %cleanup

cleanup:                                          ; preds = %if.end.while.body8_crit_edge, %while.end13
  %retval.0 = phi i1 [ %cmp16.phi, %while.end13 ], [ false, %if.end.while.body8_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_debug_to_file(i8* %user_context, i8* %filename, i32 %type_code, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %shape = alloca [4 x %struct.halide_dimension_t], align 16
  %header = alloca %"struct.Halide::Runtime::Internal::halide_tiff_header", align 2
  %offset = alloca i32, align 4
  %count = alloca i32, align 4
  %array_name = alloca [256 x i8], align 1
  %array_name43 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  %header198 = alloca [129 x i8], align 1
  %tags = alloca [8 x i32], align 4
  %extents = alloca [4 x i32], align 4
  %name_header = alloca [2 x i32], align 4
  %payload_header = alloca [2 x i32], align 4
  %header289 = alloca [5 x i32], align 4
  %temp = alloca [4096 x i8], align 1
  %idx = alloca [4 x i32], align 4
  %zero = alloca i64, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !176
  %cmp.i = icmp eq i8* %0, null
  br i1 %cmp.i, label %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, label %if.end

_ZNK15halide_buffer_t15is_bounds_queryEv.exit:    ; preds = %entry
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp2.i = icmp eq i64 %1, 0
  br i1 %cmp2.i, label %if.then, label %if.end

if.then:                                          ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.34, i64 0, i64 0)) #13
  br label %return

if.end:                                           ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, %entry
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !179
  %cmp = icmp sgt i32 %2, 4
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1.35, i64 0, i64 0)) #13
  br label %return

if.end2:                                          ; preds = %if.end
  %call3 = tail call i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  %cmp4.not = icmp eq i32 %call3, 0
  br i1 %cmp4.not, label %if.end6, label %return

if.end6:                                          ; preds = %if.end2
  %call.i598 = tail call i8* @fopen(i8* %filename, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.36, i64 0, i64 0)) #13
  %cmp.i601.not = icmp eq i8* %call.i598, null
  br i1 %cmp.i601.not, label %return, label %if.end9

if.end9:                                          ; preds = %if.end6
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #11
  %min.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 0
  %extent.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %4 = bitcast [4 x %struct.halide_dimension_t]* %shape to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %4, align 16, !tbaa !37
  %min.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 0
  %extent.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %5 = bitcast i32* %min.i.1 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %5, align 16, !tbaa !37
  %min.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 0
  %extent.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %6 = bitcast i32* %min.i.2 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %6, align 16, !tbaa !37
  %min.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 0
  %extent.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %7 = bitcast i32* %min.i.3 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %7, align 16, !tbaa !37
  %8 = load i32, i32* %dimensions, align 4, !tbaa !179
  %cmp11875 = icmp sgt i32 %8, 0
  br i1 %cmp11875, label %for.body.lr.ph, label %for.body22.preheader

for.body.lr.ph:                                   ; preds = %if.end9
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !180
  %10 = zext i32 %8 to i64
  %11 = add nsw i64 %10, -1
  %12 = icmp ult i64 %11, 3
  %13 = select i1 %12, i64 %10, i64 4
  br label %for.body

for.cond19.preheader:                             ; preds = %for.body
  %cmp20873 = icmp slt i32 %8, 4
  br i1 %cmp20873, label %for.body22.preheader, label %for.cond.cleanup21

for.body22.preheader:                             ; preds = %for.cond19.preheader, %if.end9
  %elts.0.lcssa907 = phi i64 [ %mul, %for.cond19.preheader ], [ 1, %if.end9 ]
  %14 = sext i32 %8 to i64
  %15 = sub i32 3, %8
  %16 = zext i32 %15 to i64
  %17 = add nuw nsw i64 %16, 1
  %min.iters.check = icmp eq i32 %15, 0
  br i1 %min.iters.check, label %for.body22.preheader162, label %vector.ph

vector.ph:                                        ; preds = %for.body22.preheader
  %n.vec = and i64 %17, 8589934590
  %ind.end = add nsw i64 %n.vec, %14
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %offset.idx = add i64 %index, %14
  %induction36 = add i64 %offset.idx, 1
  %18 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %offset.idx, i32 0
  %19 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %induction36, i32 0
  %20 = bitcast i32* %18 to <2 x i32>*
  store <2 x i32> <i32 0, i32 1>, <2 x i32>* %20, align 16, !tbaa !37
  %21 = bitcast i32* %19 to <2 x i32>*
  store <2 x i32> <i32 0, i32 1>, <2 x i32>* %21, align 16, !tbaa !37
  %22 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %offset.idx, i32 2
  %23 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %induction36, i32 2
  store i32 0, i32* %22, align 8, !tbaa !181
  store i32 0, i32* %23, align 8, !tbaa !181
  %index.next = add i64 %index, 2
  %24 = icmp eq i64 %index.next, %n.vec
  br i1 %24, label %middle.block, label %vector.body, !llvm.loop !183

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %17, %n.vec
  br i1 %cmp.n, label %for.cond.cleanup21, label %for.body22.preheader162

for.body22.preheader162:                          ; preds = %for.body22.preheader, %middle.block
  %indvars.iv.ph = phi i64 [ %14, %for.body22.preheader ], [ %ind.end, %middle.block ]
  br label %for.body22

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv887 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next888, %for.body ]
  %elts.0877 = phi i64 [ 1, %for.body.lr.ph ], [ %mul, %for.body ]
  %arrayidx = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i64 %indvars.iv887
  %arrayidx14 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv887
  %25 = bitcast %struct.halide_dimension_t* %arrayidx14 to i8*
  %26 = bitcast %struct.halide_dimension_t* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 dereferenceable(16) %25, i8* nonnull align 4 dereferenceable(16) %26, i64 16, i1 false), !tbaa.struct !184
  %extent = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv887, i32 1
  %27 = load i32, i32* %extent, align 4, !tbaa !185
  %conv903 = zext i32 %27 to i64
  %mul = mul i64 %elts.0877, %conv903
  %indvars.iv.next888 = add nuw nsw i64 %indvars.iv887, 1
  %exitcond.not17 = icmp eq i64 %indvars.iv.next888, %13
  br i1 %exitcond.not17, label %for.cond19.preheader, label %for.body, !llvm.loop !186

for.cond.cleanup21:                               ; preds = %for.body22, %middle.block, %for.cond19.preheader
  %elts.0.lcssa906 = phi i64 [ %mul, %for.cond19.preheader ], [ %elts.0.lcssa907, %middle.block ], [ %elts.0.lcssa907, %for.body22 ]
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %28 = load i8, i8* %bits.i, align 1, !tbaa !140
  %conv.i = zext i8 %28 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %call34 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.37, i64 0, i64 0)) #14
  br i1 %call34, label %if.then36, label %lor.lhs.false

for.body22:                                       ; preds = %for.body22.preheader162, %for.body22
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body22 ], [ %indvars.iv.ph, %for.body22.preheader162 ]
  %min = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 0
  %29 = bitcast i32* %min to <2 x i32>*
  store <2 x i32> <i32 0, i32 1>, <2 x i32>* %29, align 16, !tbaa !37
  %stride = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 2
  store i32 0, i32* %stride, align 8, !tbaa !181
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond886.not = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond886.not, label %for.cond.cleanup21, label %for.body22, !llvm.loop !187

lor.lhs.false:                                    ; preds = %for.cond.cleanup21
  %call35 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.38, i64 0, i64 0)) #14
  br i1 %call35, label %if.then36, label %if.else164

if.then36:                                        ; preds = %lor.lhs.false, %for.cond.cleanup21
  %30 = load i32, i32* %extent.i, align 4, !tbaa !185
  %31 = load i32, i32* %extent.i.1, align 4, !tbaa !185
  %32 = load i32, i32* %extent.i.3, align 4, !tbaa !185
  %switch = icmp ult i32 %32, 2
  %33 = load i32, i32* %extent.i.2, align 4, !tbaa !185
  %cmp50 = icmp slt i32 %33, 5
  %or.cond = and i1 %switch, %cmp50
  %depth.0 = select i1 %or.cond, i32 1, i32 %33
  %channels.0 = select i1 %or.cond, i32 %33, i32 %32
  %34 = bitcast %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 210, i8* nonnull %34) #11
  %byte_order_marker = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 0
  store i16 18761, i16* %byte_order_marker, align 2, !tbaa !188
  %version = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 1
  store i16 42, i16* %version, align 2, !tbaa !190
  %ifd0_offset = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 2
  store i32 8, i32* %ifd0_offset, align 2, !tbaa !191
  %entry_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 3
  store i16 15, i16* %entry_count, align 2, !tbaa !192
  %tag_code2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 0
  store i16 256, i16* %tag_code2.i, align 2, !tbaa !193
  %type_code.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 1
  store i16 4, i16* %type_code.i, align 2, !tbaa !195
  %count3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 2
  store i32 1, i32* %count3.i, align 2, !tbaa !196
  %i32.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 3, i32 0
  store i32 %30, i32* %i32.i, align 2, !tbaa !14
  %tag_code2.i632 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 0
  store i16 257, i16* %tag_code2.i632, align 2, !tbaa !193
  %type_code.i633 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 1
  store i16 4, i16* %type_code.i633, align 2, !tbaa !195
  %count3.i634 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 2
  store i32 1, i32* %count3.i634, align 2, !tbaa !196
  %i32.i635 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 3, i32 0
  store i32 %31, i32* %i32.i635, align 2, !tbaa !14
  %35 = trunc i32 %add.i to i16
  %conv68 = and i16 %35, 504
  %tag_code2.i643 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 0
  store i16 258, i16* %tag_code2.i643, align 2, !tbaa !193
  %type_code.i644 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 1
  store i16 3, i16* %type_code.i644, align 2, !tbaa !195
  %count3.i645 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 2
  store i32 1, i32* %count3.i645, align 2, !tbaa !196
  %value4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 3
  %i16.i = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i to i16*
  store i16 %conv68, i16* %i16.i, align 2, !tbaa !14
  %tag_code2.i653 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 0
  store i16 259, i16* %tag_code2.i653, align 2, !tbaa !193
  %type_code.i654 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 1
  store i16 3, i16* %type_code.i654, align 2, !tbaa !195
  %count3.i655 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 2
  store i32 1, i32* %count3.i655, align 2, !tbaa !196
  %value4.i656 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 3
  %i16.i657 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i656 to i16*
  store i16 1, i16* %i16.i657, align 2, !tbaa !14
  %cmp71 = icmp sgt i32 %channels.0, 2
  %conv72 = select i1 %cmp71, i16 2, i16 1
  %tag_code2.i665 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 0
  store i16 262, i16* %tag_code2.i665, align 2, !tbaa !193
  %type_code.i666 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 1
  store i16 3, i16* %type_code.i666, align 2, !tbaa !195
  %count3.i667 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 2
  store i32 1, i32* %count3.i667, align 2, !tbaa !196
  %value4.i668 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 3
  %i16.i669 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i668 to i16*
  store i16 %conv72, i16* %i16.i669, align 2, !tbaa !14
  %tag_code2.i677 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 0
  store i16 273, i16* %tag_code2.i677, align 2, !tbaa !193
  %type_code.i678 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 1
  store i16 4, i16* %type_code.i678, align 2, !tbaa !195
  %count3.i679 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 2
  store i32 %channels.0, i32* %count3.i679, align 2, !tbaa !196
  %i32.i680 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 3, i32 0
  store i32 210, i32* %i32.i680, align 2, !tbaa !14
  %conv75 = trunc i32 %channels.0 to i16
  %tag_code2.i688 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 0
  store i16 277, i16* %tag_code2.i688, align 2, !tbaa !193
  %type_code.i689 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 1
  store i16 3, i16* %type_code.i689, align 2, !tbaa !195
  %count3.i690 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 2
  store i32 1, i32* %count3.i690, align 2, !tbaa !196
  %value4.i691 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 3
  %i16.i692 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i691 to i16*
  store i16 %conv75, i16* %i16.i692, align 2, !tbaa !14
  %tag_code2.i706 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 0
  store i16 278, i16* %tag_code2.i706, align 2, !tbaa !193
  %type_code.i707 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 1
  store i16 4, i16* %type_code.i707, align 2, !tbaa !195
  %count3.i708 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 2
  store i32 1, i32* %count3.i708, align 2, !tbaa !196
  %i32.i709 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 3, i32 0
  store i32 %31, i32* %i32.i709, align 2, !tbaa !14
  %cmp80 = icmp eq i32 %channels.0, 1
  %36 = trunc i64 %elts.0.lcssa906 to i32
  %conv86595 = mul i32 %div.i, %36
  %mul84 = shl i32 %channels.0, 2
  %add = add i32 %mul84, 210
  %add.sink = select i1 %cmp80, i32 %conv86595, i32 %add
  %37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 0
  store i16 279, i16* %37, align 2
  %38 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 1
  store i16 4, i16* %38, align 2
  %39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 2
  store i32 %channels.0, i32* %39, align 2
  %40 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 3, i32 0
  store i32 %add.sink, i32* %40, align 2
  %tag_code2.i732 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 0
  store i16 282, i16* %tag_code2.i732, align 2, !tbaa !193
  %type_code3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 1
  store i16 5, i16* %type_code3.i, align 2, !tbaa !195
  %count4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 2
  %41 = bitcast i32* %count4.i to <2 x i32>*
  store <2 x i32> <i32 1, i32 194>, <2 x i32>* %41, align 2, !tbaa !14
  %tag_code2.i741 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 0
  store i16 283, i16* %tag_code2.i741, align 2, !tbaa !193
  %type_code3.i742 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 1
  store i16 5, i16* %type_code3.i742, align 2, !tbaa !195
  %count4.i743 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 2
  %42 = bitcast i32* %count4.i743 to <2 x i32>*
  store <2 x i32> <i32 1, i32 202>, <2 x i32>* %42, align 2, !tbaa !14
  %tag_code2.i759 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 0
  store i16 284, i16* %tag_code2.i759, align 2, !tbaa !193
  %type_code.i760 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 1
  store i16 3, i16* %type_code.i760, align 2, !tbaa !195
  %count3.i761 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 2
  store i32 1, i32* %count3.i761, align 2, !tbaa !196
  %value4.i762 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 3
  %i16.i763 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i762 to i16*
  store i16 2, i16* %i16.i763, align 2, !tbaa !14
  %tag_code2.i754 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 0
  store i16 296, i16* %tag_code2.i754, align 2, !tbaa !193
  %type_code.i755 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 1
  store i16 3, i16* %type_code.i755, align 2, !tbaa !195
  %count3.i756 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 2
  store i32 1, i32* %count3.i756, align 2, !tbaa !196
  %value4.i757 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 3
  %i16.i758 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i757 to i16*
  store i16 1, i16* %i16.i758, align 2, !tbaa !14
  %idxprom92 = sext i32 %type_code to i64
  %arrayidx93 = getelementptr inbounds [10 x i16], [10 x i16]* @_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE, i64 0, i64 %idxprom92
  %43 = load i16, i16* %arrayidx93, align 2, !tbaa !165
  %tag_code2.i749 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 0
  store i16 339, i16* %tag_code2.i749, align 2, !tbaa !193
  %type_code.i750 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 1
  store i16 3, i16* %type_code.i750, align 2, !tbaa !195
  %count3.i751 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 2
  store i32 1, i32* %count3.i751, align 2, !tbaa !196
  %value4.i752 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 3
  %i16.i753 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i752 to i16*
  store i16 %43, i16* %i16.i753, align 2, !tbaa !14
  %tag_code2.i745 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 0
  store i16 -32539, i16* %tag_code2.i745, align 2, !tbaa !193
  %type_code.i746 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 1
  store i16 4, i16* %type_code.i746, align 2, !tbaa !195
  %count3.i747 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 2
  store i32 1, i32* %count3.i747, align 2, !tbaa !196
  %i32.i748 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 3, i32 0
  store i32 %depth.0, i32* %i32.i748, align 2, !tbaa !14
  %ifd0_end = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 5
  %44 = bitcast i32* %ifd0_end to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 1, i32 1>, <4 x i32>* %44, align 2, !tbaa !37
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 7, i64 1
  store i32 1, i32* %arrayidx100, align 2, !tbaa !37
  %call.i736 = call i64 @fwrite(i8* nonnull %34, i64 210, i64 1, i8* nonnull %call.i598) #13
  %cmp.i737.not = icmp eq i64 %call.i736, 0
  br i1 %cmp.i737.not, label %cleanup154, label %if.end103

if.end103:                                        ; preds = %if.then36
  %cmp104 = icmp sgt i32 %channels.0, 1
  br i1 %cmp104, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph, label %cleanup154.thread

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph: ; preds = %if.end103
  %45 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %45) #11
  %mul108 = shl i32 %channels.0, 3
  %add109 = add i32 %mul108, 210
  store i32 %add109, i32* %offset, align 4, !tbaa !37
  %mul123 = mul i32 %depth.0, %div.i
  %46 = load i32, i32* %extent.i, align 4
  %47 = load i32, i32* %extent.i.1, align 4
  %mul124 = mul i32 %mul123, %46
  %mul125 = mul i32 %mul124, %47
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731: ; preds = %if.end118, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph
  %i111.0865 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph ], [ %inc128, %if.end118 ]
  %call.i727 = call i64 @fwrite(i8* nonnull %45, i64 4, i64 1, i8* nonnull %call.i598) #13
  %cmp.i728.not = icmp eq i64 %call.i727, 0
  br i1 %cmp.i728.not, label %cleanup151.thread, label %if.end118

if.end118:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731
  %48 = load i32, i32* %offset, align 4, !tbaa !37
  %add126 = add nsw i32 %mul125, %48
  store i32 %add126, i32* %offset, align 4, !tbaa !37
  %inc128 = add nuw nsw i32 %i111.0865, 1
  %exitcond881.not = icmp eq i32 %inc128, %channels.0
  br i1 %exitcond881.not, label %for.end129, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, !llvm.loop !197

for.end129:                                       ; preds = %if.end118
  %49 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %49) #11
  store i32 %mul125, i32* %count, align 4, !tbaa !37
  %inc146.1 = add nuw nsw i32 0, 1
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

for.cond138:                                      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  %exitcond.not = icmp eq i32 %inc146.phi, %channels.0
  br i1 %exitcond.not, label %cleanup151, label %for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge, !llvm.loop !198

for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge: ; preds = %for.cond138
  %inc146.0 = add nuw nsw i32 %inc146.phi, 1
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720: ; preds = %for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge, %for.end129
  %inc146.phi = phi i32 [ %inc146.0, %for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge ], [ %inc146.1, %for.end129 ]
  %call.i716 = call i64 @fwrite(i8* nonnull %49, i64 4, i64 1, i8* nonnull %call.i598) #13
  %cmp.i717.not = icmp eq i64 %call.i716, 0
  br i1 %cmp.i717.not, label %select.unfold, label %for.cond138

select.unfold:                                    ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #11
  br label %cleanup151.thread

cleanup151.thread:                                ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, %select.unfold
  %retval.2.ph = phi i32 [ -5, %select.unfold ], [ -4, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #11
  br label %cleanup154

cleanup151:                                       ; preds = %for.cond138
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #11
  br label %cleanup154.thread

cleanup154.thread:                                ; preds = %cleanup151, %if.end103
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %34) #11
  br label %if.end311

cleanup154:                                       ; preds = %cleanup151.thread, %if.then36
  %retval.4 = phi i32 [ -3, %if.then36 ], [ %retval.2.ph, %cleanup151.thread ]
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %34) #11
  br label %cleanup433

if.else164:                                       ; preds = %lor.lhs.false
  %call165 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.39, i64 0, i64 0)) #14
  br i1 %call165, label %while.cond, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631

while.cond:                                       ; preds = %if.else164, %while.cond
  %end.0 = phi i8* [ %incdec.ptr167, %while.cond ], [ %filename, %if.else164 ]
  %50 = load i8, i8* %end.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %50, 0
  %incdec.ptr167 = getelementptr inbounds i8, i8* %end.0, i64 1
  br i1 %tobool.not, label %while.body171, label %while.cond, !llvm.loop !199

while.cond174.preheader:                          ; preds = %while.body171
  %end.1872.lcssa883 = ptrtoint i8* %end.1872 to i64
  %51 = ptrtoint i8* %filename to i64
  %52 = sub i64 %51, %end.1872.lcssa883
  br label %while.cond174

while.body171:                                    ; preds = %while.cond, %while.body171
  %end.1872 = phi i8* [ %incdec.ptr172.ptr, %while.body171 ], [ %end.0, %while.cond ]
  %incdec.ptr172.ptr = getelementptr inbounds i8, i8* %end.1872, i64 -1
  %.pr = load i8, i8* %incdec.ptr172.ptr, align 1, !tbaa !14
  %cmp170.not = icmp eq i8 %.pr, 46
  br i1 %cmp170.not, label %while.cond174.preheader, label %while.body171, !llvm.loop !200

while.cond174:                                    ; preds = %land.rhs176, %while.cond174.preheader
  %start.0.idx = phi i64 [ %start.0.add, %land.rhs176 ], [ -1, %while.cond174.preheader ]
  %start.0.ptr.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.idx
  %cmp175.not = icmp eq i8* %start.0.ptr.ptr, %filename
  br i1 %cmp175.not, label %while.end183, label %land.rhs176

land.rhs176:                                      ; preds = %while.cond174
  %start.0.add = add nsw i64 %start.0.idx, -1
  %arrayidx177.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.add
  %53 = load i8, i8* %arrayidx177.ptr, align 1, !tbaa !14
  %cmp179.not = icmp eq i8 %53, 47
  br i1 %cmp179.not, label %while.end183, label %while.cond174, !llvm.loop !201

while.end183:                                     ; preds = %land.rhs176, %while.cond174
  %start.0.idx.lcssa = phi i64 [ %52, %while.cond174 ], [ %start.0.idx, %land.rhs176 ]
  %54 = trunc i64 %start.0.idx.lcssa to i32
  %conv184 = xor i32 %54, -1
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %55) #11
  %cmp186.not868 = icmp eq i64 %start.0.idx.lcssa, -1
  br i1 %cmp186.not868, label %iter.check, label %while.body187.preheader

while.body187.preheader:                          ; preds = %while.end183
  %56 = xor i64 %start.0.idx.lcssa, -1
  %min.iters.check40 = icmp ugt i64 %start.0.idx.lcssa, -33
  br i1 %min.iters.check40, label %while.body187.preheader160, label %vector.memcheck

vector.memcheck:                                  ; preds = %while.body187.preheader
  %57 = xor i64 %start.0.idx.lcssa, -1
  %scevgep44 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %57
  %scevgep45 = getelementptr i8, i8* %end.1872, i64 %start.0.idx.lcssa
  %scevgep46 = getelementptr i8, i8* %end.1872, i64 -1
  %bound0 = icmp ult i8* %array_name43, %scevgep46
  %bound1 = icmp ult i8* %scevgep45, %scevgep44
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %while.body187.preheader160, label %vector.ph42

vector.ph42:                                      ; preds = %vector.memcheck
  %n.vec48 = and i64 %56, -32
  %ind.end52 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %n.vec48
  %ind.end54 = add i64 %start.0.idx.lcssa, %n.vec48
  br label %vector.body39

vector.body39:                                    ; preds = %vector.body39, %vector.ph42
  %index49 = phi i64 [ 0, %vector.ph42 ], [ %index.next50, %vector.body39 ]
  %next.gep = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index49
  %offset.idx57 = add i64 %start.0.idx.lcssa, %index49
  %58 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx57
  %59 = bitcast i8* %58 to <16 x i8>*
  %wide.load = load <16 x i8>, <16 x i8>* %59, align 1, !tbaa !14, !alias.scope !202
  %60 = getelementptr inbounds i8, i8* %58, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %wide.load58 = load <16 x i8>, <16 x i8>* %61, align 1, !tbaa !14, !alias.scope !202
  %62 = bitcast i8* %next.gep to <16 x i8>*
  store <16 x i8> %wide.load, <16 x i8>* %62, align 1, !tbaa !14, !alias.scope !205, !noalias !202
  %63 = getelementptr i8, i8* %next.gep, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  store <16 x i8> %wide.load58, <16 x i8>* %64, align 1, !tbaa !14, !alias.scope !205, !noalias !202
  %index.next50 = add i64 %index49, 32
  %65 = icmp eq i64 %index.next50, %n.vec48
  br i1 %65, label %middle.block37, label %vector.body39, !llvm.loop !207

middle.block37:                                   ; preds = %vector.body39
  %cmp.n55 = icmp eq i64 %n.vec48, %56
  br i1 %cmp.n55, label %while.cond191.preheader, label %while.body187.preheader160

while.body187.preheader160:                       ; preds = %vector.memcheck, %while.body187.preheader, %middle.block37
  %dst.0870.ph = phi i8* [ %55, %vector.memcheck ], [ %55, %while.body187.preheader ], [ %ind.end52, %middle.block37 ]
  %start.1869.idx.ph = phi i64 [ %start.0.idx.lcssa, %vector.memcheck ], [ %start.0.idx.lcssa, %while.body187.preheader ], [ %ind.end54, %middle.block37 ]
  br label %while.body187

while.cond191.preheader:                          ; preds = %while.body187, %middle.block37
  %incdec.ptr189.lcssa = phi i8* [ %ind.end52, %middle.block37 ], [ %incdec.ptr189, %while.body187 ]
  %add.ptr = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 256
  %cmp193866 = icmp ult i8* %incdec.ptr189.lcssa, %add.ptr
  br i1 %cmp193866, label %iter.check, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705

iter.check:                                       ; preds = %while.cond191.preheader, %while.end183
  %dst.0.lcssa911 = phi i8* [ %incdec.ptr189.lcssa, %while.cond191.preheader ], [ %55, %while.end183 ]
  %dst.0.lcssa91162 = ptrtoint i8* %dst.0.lcssa911 to i64
  %scevgep = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 1, i64 0
  %66 = sub i64 0, %dst.0.lcssa91162
  %scevgep63 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %66
  %exitcount.ptrcnt.to.int = ptrtoint i8* %scevgep63 to i64
  %min.iters.check65 = icmp ult i8* %scevgep63, inttoptr (i64 4 to i8*)
  br i1 %min.iters.check65, label %while.body194.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  %min.iters.check67 = icmp ult i8* %scevgep63, inttoptr (i64 32 to i8*)
  br i1 %min.iters.check67, label %vec.epilog.ph, label %vector.ph68

vector.ph68:                                      ; preds = %vector.main.loop.iter.check
  %n.vec70 = and i64 %exitcount.ptrcnt.to.int, -32
  %next.gep74.0 = getelementptr i8, i8* %dst.0.lcssa911, i64 0
  %index.next72.0 = add i64 0, 32
  br label %vector.body61

vector.body61:                                    ; preds = %vector.body61.vector.body61_crit_edge, %vector.ph68
  %index.next72.phi = phi i64 [ %index.next72.0, %vector.ph68 ], [ %index.next72.1, %vector.body61.vector.body61_crit_edge ]
  %next.gep74.phi = phi i8* [ %next.gep74.0, %vector.ph68 ], [ %next.gep74.1, %vector.body61.vector.body61_crit_edge ]
  %67 = bitcast i8* %next.gep74.phi to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %67, align 1, !tbaa !14
  %68 = getelementptr i8, i8* %next.gep74.phi, i64 16
  %69 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %69, align 1, !tbaa !14
  %70 = icmp eq i64 %index.next72.phi, %n.vec70
  br i1 %70, label %middle.block59, label %vector.body61.vector.body61_crit_edge, !llvm.loop !208

vector.body61.vector.body61_crit_edge:            ; preds = %vector.body61
  %next.gep74.1 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next72.phi
  %index.next72.1 = add i64 %index.next72.phi, 32
  br label %vector.body61

middle.block59:                                   ; preds = %vector.body61
  %cmp.n73 = icmp eq i64 %n.vec70, %exitcount.ptrcnt.to.int
  br i1 %cmp.n73, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block59
  %ind.end85 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec70
  %n.vec.remaining = and i64 %exitcount.ptrcnt.to.int, 28
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  br i1 %min.epilog.iters.check, label %while.body194.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %vec.epilog.resume.val = phi i64 [ %n.vec70, %vec.epilog.iter.check ], [ 0, %vector.main.loop.iter.check ]
  %71 = sub i64 0, %dst.0.lcssa91162
  %scevgep76 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %71
  %exitcount.ptrcnt.to.int78 = ptrtoint i8* %scevgep76 to i64
  %n.vec80 = and i64 %exitcount.ptrcnt.to.int78, -4
  %ind.end84 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec80
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index81 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next82, %vec.epilog.vector.body ]
  %next.gep87 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index81
  %72 = bitcast i8* %next.gep87 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %72, align 1, !tbaa !14
  %index.next82 = add i64 %index81, 4
  %73 = icmp eq i64 %index.next82, %n.vec80
  br i1 %73, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !209

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %cmp.n86 = icmp eq i64 %n.vec80, %exitcount.ptrcnt.to.int78
  br i1 %cmp.n86, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194.preheader

while.body194.preheader:                          ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %dst.1867.ph = phi i8* [ %dst.0.lcssa911, %iter.check ], [ %ind.end85, %vec.epilog.iter.check ], [ %ind.end84, %vec.epilog.middle.block ]
  br label %while.body194

while.body187:                                    ; preds = %while.body187.preheader160, %while.body187
  %dst.0870 = phi i8* [ %incdec.ptr189, %while.body187 ], [ %dst.0870.ph, %while.body187.preheader160 ]
  %start.1869.idx = phi i64 [ %start.1869.add, %while.body187 ], [ %start.1869.idx.ph, %while.body187.preheader160 ]
  %start.1869.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx
  %start.1869.add = add nuw nsw i64 %start.1869.idx, 1
  %74 = load i8, i8* %start.1869.ptr, align 1, !tbaa !14
  %incdec.ptr189 = getelementptr inbounds i8, i8* %dst.0870, i64 1
  store i8 %74, i8* %dst.0870, align 1, !tbaa !14
  %cmp186.not = icmp eq i64 %start.1869.add, -1
  br i1 %cmp186.not, label %while.cond191.preheader, label %while.body187, !llvm.loop !210

while.body194:                                    ; preds = %while.body194.preheader, %while.body194
  %dst.1867 = phi i8* [ %incdec.ptr195, %while.body194 ], [ %dst.1867.ph, %while.body194.preheader ]
  %incdec.ptr195 = getelementptr inbounds i8, i8* %dst.1867, i64 1
  store i8 0, i8* %dst.1867, align 1, !tbaa !14
  %exitcond882.not = icmp eq i8* %incdec.ptr195, %scevgep
  br i1 %exitcond882.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194, !llvm.loop !211

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705: ; preds = %while.body194, %middle.block59, %vec.epilog.middle.block, %while.cond191.preheader
  %add197 = sub i32 6, %54
  %and = and i32 %add197, -8
  %75 = getelementptr inbounds [129 x i8], [129 x i8]* %header198, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %75) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(129) %75, i8* nonnull align 1 dereferenceable(129) getelementptr inbounds ([129 x i8], [129 x i8]* @__const.halide_debug_to_file.header, i64 0, i64 0), i64 129, i1 false)
  %call.i701 = call i64 @fwrite(i8* nonnull %75, i64 128, i64 1, i8* nonnull %call.i598) #13
  %76 = load i32, i32* %dimensions, align 4, !tbaa !179
  %cmp19.i.i = icmp sgt i32 %76, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %sub.i694.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %77 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !180
  %wide.trip.count.i.i = zext i32 %76 to i64
  %min.iters.check91 = icmp ult i32 %76, 3
  br i1 %min.iters.check91, label %for.body.i.i.preheader, label %vector.ph92

vector.ph92:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec94 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body90

vector.body90:                                    ; preds = %pred.load.continue103, %vector.ph92
  %index95 = phi i64 [ 0, %vector.ph92 ], [ %index.next96, %pred.load.continue103 ]
  %vec.phi = phi i64 [ 0, %vector.ph92 ], [ %predphi, %pred.load.continue103 ]
  %vec.phi101 = phi i64 [ 0, %vector.ph92 ], [ %predphi104, %pred.load.continue103 ]
  %induction100 = or i64 %index95, 1
  %78 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index95, i32 2
  %79 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction100, i32 2
  %80 = load i32, i32* %78, align 4, !tbaa !181
  %81 = load i32, i32* %79, align 4, !tbaa !181
  %82 = icmp sgt i32 %80, 0
  %83 = icmp sgt i32 %81, 0
  %84 = zext i32 %80 to i64
  %85 = zext i32 %81 to i64
  br i1 %82, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body90
  %86 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index95, i32 1
  %87 = load i32, i32* %86, align 4, !tbaa !185
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body90
  %88 = phi i32 [ poison, %vector.body90 ], [ %87, %pred.load.if ]
  br i1 %83, label %pred.load.if102, label %pred.load.continue103

pred.load.if102:                                  ; preds = %pred.load.continue
  %89 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction100, i32 1
  %90 = load i32, i32* %89, align 4, !tbaa !185
  br label %pred.load.continue103

pred.load.continue103:                            ; preds = %pred.load.if102, %pred.load.continue
  %91 = phi i32 [ poison, %pred.load.continue ], [ %90, %pred.load.if102 ]
  %92 = add nsw i32 %88, -1
  %93 = add nsw i32 %91, -1
  %94 = sext i32 %92 to i64
  %95 = sext i32 %93 to i64
  %96 = mul nsw i64 %94, %84
  %97 = mul nsw i64 %95, %85
  %98 = select i1 %82, i64 %96, i64 0
  %predphi = add i64 %vec.phi, %98
  %99 = select i1 %83, i64 %97, i64 0
  %predphi104 = add i64 %vec.phi101, %99
  %index.next96 = add i64 %index95, 2
  %100 = icmp eq i64 %index.next96, %n.vec94
  br i1 %100, label %middle.block88, label %vector.body90, !llvm.loop !213

middle.block88:                                   ; preds = %pred.load.continue103
  %bin.rdx = add i64 %predphi104, %predphi
  %cmp.n98 = icmp eq i64 %n.vec94, %wide.trip.count.i.i
  br i1 %cmp.n98, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block88
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec94, %middle.block88 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx, %middle.block88 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i.i, i32 2
  %101 = load i32, i32* %stride2.i.i, align 4, !tbaa !181
  %cmp3.i.i = icmp sgt i32 %101, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %101 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i.i, i32 1
  %102 = load i32, i32* %extent.i.i, align 4, !tbaa !185
  %sub.i.i = add nsw i32 %102, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i693 = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i693, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !214

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block88
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx, %middle.block88 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check108 = icmp ult i32 %76, 3
  br i1 %min.iters.check108, label %for.body.i13.i.preheader157, label %vector.ph109

vector.ph109:                                     ; preds = %for.body.i13.i.preheader
  %n.vec111 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body107

vector.body107:                                   ; preds = %pred.load.continue123, %vector.ph109
  %index112 = phi i64 [ 0, %vector.ph109 ], [ %index.next113, %pred.load.continue123 ]
  %vec.phi118 = phi i64 [ 0, %vector.ph109 ], [ %predphi124, %pred.load.continue123 ]
  %vec.phi119 = phi i64 [ 0, %vector.ph109 ], [ %predphi125, %pred.load.continue123 ]
  %induction117 = or i64 %index112, 1
  %103 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index112, i32 2
  %104 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction117, i32 2
  %105 = load i32, i32* %103, align 4, !tbaa !181
  %106 = load i32, i32* %104, align 4, !tbaa !181
  %107 = icmp slt i32 %105, 0
  %108 = icmp slt i32 %106, 0
  %109 = sext i32 %105 to i64
  %110 = sext i32 %106 to i64
  br i1 %107, label %pred.load.if120, label %pred.load.continue121

pred.load.if120:                                  ; preds = %vector.body107
  %111 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index112, i32 1
  %112 = load i32, i32* %111, align 4, !tbaa !185
  br label %pred.load.continue121

pred.load.continue121:                            ; preds = %pred.load.if120, %vector.body107
  %113 = phi i32 [ poison, %vector.body107 ], [ %112, %pred.load.if120 ]
  br i1 %108, label %pred.load.if122, label %pred.load.continue123

pred.load.if122:                                  ; preds = %pred.load.continue121
  %114 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction117, i32 1
  %115 = load i32, i32* %114, align 4, !tbaa !185
  br label %pred.load.continue123

pred.load.continue123:                            ; preds = %pred.load.if122, %pred.load.continue121
  %116 = phi i32 [ poison, %pred.load.continue121 ], [ %115, %pred.load.if122 ]
  %117 = add nsw i32 %113, -1
  %118 = add nsw i32 %116, -1
  %119 = sext i32 %117 to i64
  %120 = sext i32 %118 to i64
  %121 = mul nsw i64 %119, %109
  %122 = mul nsw i64 %120, %110
  %123 = select i1 %107, i64 %121, i64 0
  %predphi124 = add i64 %vec.phi118, %123
  %124 = select i1 %108, i64 %122, i64 0
  %predphi125 = add i64 %vec.phi119, %124
  %index.next113 = add i64 %index112, 2
  %125 = icmp eq i64 %index.next113, %n.vec111
  br i1 %125, label %middle.block105, label %vector.body107, !llvm.loop !215

middle.block105:                                  ; preds = %pred.load.continue123
  %bin.rdx126 = add i64 %predphi125, %predphi124
  %cmp.n115 = icmp eq i64 %n.vec111, %wide.trip.count.i.i
  br i1 %cmp.n115, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader157

for.body.i13.i.preheader157:                      ; preds = %for.body.i13.i.preheader, %middle.block105
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec111, %middle.block105 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx126, %middle.block105 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader157, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader157 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader157 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i10.i, i32 2
  %126 = load i32, i32* %stride2.i11.i, align 4, !tbaa !181
  %cmp3.i12.i = icmp slt i32 %126, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %126 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i10.i, i32 1
  %127 = load i32, i32* %extent.i15.i, align 4, !tbaa !185
  %sub.i16.i = add nsw i32 %127, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !216

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block105
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx126, %middle.block105 ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i694.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i694.phi = phi i64 [ %sub.i694.0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i694.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %128 = load i8, i8* %bits.i, align 1, !tbaa !140
  %conv.i.i696 = zext i8 %128 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i696, 7
  %div.i.i697 = lshr i64 %add.i4.i, 3
  %mul.i698 = mul i64 %div.i.i697, %sub.i694.phi
  %129 = trunc i64 %mul.i698 to i32
  %130 = add i32 %129, 7
  %131 = and i32 %130, 7
  %conv204 = xor i32 %131, 7
  %conv205 = zext i32 %conv204 to i64
  %add206 = add i64 %mul.i698, %conv205
  %tobool207.not = icmp ult i64 %add206, 4294967296
  br i1 %tobool207.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687, label %cleanup278.thread

cleanup278.thread:                                ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6.40, i64 0, i64 0)) #13
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %75) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %55) #11
  br label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687: ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %132 = icmp sgt i32 %76, 2
  %spec.store.select = select i1 %132, i32 %76, i32 2
  %133 = bitcast [8 x i32]* %tags to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %133) #11
  %arrayinit.begin = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 0
  store i32 14, i32* %arrayinit.begin, align 4, !tbaa !37
  %arrayinit.element = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 1
  %add214 = shl i32 %spec.store.select, 2
  %and215 = add i32 %add214, 4
  %mul216 = and i32 %and215, -8
  %add217 = add i32 %and, 40
  %add218 = add i32 %add217, %mul216
  %add220 = add i32 %add218, %129
  %add221 = add i32 %add220, %conv204
  store i32 %add221, i32* %arrayinit.element, align 4, !tbaa !37
  %arrayinit.element222 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 2
  %134 = bitcast i32* %arrayinit.element222 to <2 x i32>*
  store <2 x i32> <i32 6, i32 8>, <2 x i32>* %134, align 4, !tbaa !37
  %arrayinit.element224 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 4
  %idxprom225 = sext i32 %type_code to i64
  %arrayidx226 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE, i64 0, i64 %idxprom225
  %135 = load i8, i8* %arrayidx226, align 1, !tbaa !14
  %conv227 = zext i8 %135 to i32
  store i32 %conv227, i32* %arrayinit.element224, align 4, !tbaa !37
  %arrayinit.element228 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 5
  %136 = bitcast i32* %arrayinit.element228 to <2 x i32>*
  store <2 x i32> <i32 1, i32 5>, <2 x i32>* %136, align 4, !tbaa !37
  %arrayinit.element230 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 7
  store i32 %add214, i32* %arrayinit.element230, align 4, !tbaa !37
  %call.i683 = call i64 @fwrite(i8* nonnull %133, i64 32, i64 1, i8* nonnull %call.i598) #13
  %cmp.i684.not = icmp eq i64 %call.i683, 0
  br i1 %cmp.i684.not, label %cleanup278, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %137 = bitcast [4 x i32]* %extents to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %137) #11
  %arrayinit.begin235 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 0
  %138 = load i32, i32* %extent.i, align 4, !tbaa !185
  store i32 %138, i32* %arrayinit.begin235, align 4, !tbaa !37
  %arrayinit.element238 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 1
  %139 = load i32, i32* %extent.i.1, align 4, !tbaa !185
  store i32 %139, i32* %arrayinit.element238, align 4, !tbaa !37
  %arrayinit.element241 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 2
  %140 = load i32, i32* %extent.i.2, align 4, !tbaa !185
  store i32 %140, i32* %arrayinit.element241, align 4, !tbaa !37
  %arrayinit.element244 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 3
  %141 = load i32, i32* %extent.i.3, align 4, !tbaa !185
  store i32 %141, i32* %arrayinit.element244, align 4, !tbaa !37
  %conv248 = sext i32 %mul216 to i64
  %call.i672 = call i64 @fwrite(i8* nonnull %137, i64 %conv248, i64 1, i8* nonnull %call.i598) #13
  %cmp.i673.not = icmp eq i64 %call.i672, 0
  br i1 %cmp.i673.not, label %cleanup274, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %142 = bitcast [2 x i32]* %name_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %142) #11
  %arrayinit.begin252 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 0
  store i32 1, i32* %arrayinit.begin252, align 4, !tbaa !37
  %arrayinit.element253 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 1
  store i32 %conv184, i32* %arrayinit.element253, align 4, !tbaa !37
  %call.i660 = call i64 @fwrite(i8* nonnull %142, i64 8, i64 1, i8* nonnull %call.i598) #13
  %cmp.i661.not = icmp eq i64 %call.i660, 0
  br i1 %cmp.i661.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %conv258 = zext i32 %and to i64
  %call.i648 = call i64 @fwrite(i8* nonnull %55, i64 %conv258, i64 1, i8* nonnull %call.i598) #13
  %cmp.i649.not = icmp eq i64 %call.i648, 0
  br i1 %cmp.i649.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652
  %143 = bitcast [2 x i32]* %payload_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %143) #11
  %arrayinit.begin262 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 0
  %arrayidx264 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE, i64 0, i64 %idxprom225
  %144 = load i8, i8* %arrayidx264, align 1, !tbaa !14
  %conv265 = zext i8 %144 to i32
  store i32 %conv265, i32* %arrayinit.begin262, align 4, !tbaa !37
  %arrayinit.element266 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 1
  store i32 %129, i32* %arrayinit.element266, align 4, !tbaa !37
  %call.i638 = call i64 @fwrite(i8* nonnull %143, i64 8, i64 1, i8* nonnull %call.i598) #13
  %cmp.i639.not = icmp eq i64 %call.i638, 0
  %cleanup.dest.slot.5 = zext i1 %cmp.i639.not to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %143) #11
  br label %cleanup273

cleanup273:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %cleanup.dest.slot.6 = phi i32 [ %cleanup.dest.slot.5, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  %retval.6 = phi i32 [ -11, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ -9, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ -10, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %142) #11
  br label %cleanup274

cleanup274:                                       ; preds = %cleanup273, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %cleanup.dest.slot.7 = phi i32 [ %cleanup.dest.slot.6, %cleanup273 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  %retval.7 = phi i32 [ %retval.6, %cleanup273 ], [ -8, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %137) #11
  br label %cleanup278

cleanup278:                                       ; preds = %cleanup274, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %cleanup.dest.slot.8 = phi i32 [ %cleanup.dest.slot.7, %cleanup274 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  %retval.8 = phi i32 [ %retval.7, %cleanup274 ], [ -7, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %133) #11
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %75) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %55) #11
  %cond442 = icmp eq i32 %cleanup.dest.slot.8, 0
  br i1 %cond442, label %if.end311, label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631: ; preds = %if.else164
  %145 = bitcast [5 x i32]* %header289 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %145) #11
  %arrayinit.begin290 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 0
  %146 = load i32, i32* %extent.i, align 4, !tbaa !185
  store i32 %146, i32* %arrayinit.begin290, align 4, !tbaa !37
  %arrayinit.element293 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 1
  %147 = load i32, i32* %extent.i.1, align 4, !tbaa !185
  store i32 %147, i32* %arrayinit.element293, align 4, !tbaa !37
  %arrayinit.element296 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 2
  %148 = load i32, i32* %extent.i.2, align 4, !tbaa !185
  store i32 %148, i32* %arrayinit.element296, align 4, !tbaa !37
  %arrayinit.element299 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 3
  %149 = load i32, i32* %extent.i.3, align 4, !tbaa !185
  store i32 %149, i32* %arrayinit.element299, align 4, !tbaa !37
  %arrayinit.element302 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 4
  store i32 %type_code, i32* %arrayinit.element302, align 4, !tbaa !37
  %call.i627 = call i64 @fwrite(i8* nonnull %145, i64 20, i64 1, i8* nonnull %call.i598) #13
  %cmp.i628.not = icmp eq i64 %call.i627, 0
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %145) #11
  br i1 %cmp.i628.not, label %cleanup433, label %if.end311

if.end311:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup154.thread
  %final_padding_bytes.0 = phi i32 [ %conv204, %cleanup278 ], [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ 0, %cleanup154.thread ]
  %150 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %150) #11
  %div = udiv i32 4096, %div.i
  %151 = load i32, i32* %extent.i.3, align 4, !tbaa !185
  %cmp320856 = icmp sgt i32 %151, 0
  br i1 %cmp320856, label %for.body322.lr.ph, label %if.end412

for.body322.lr.ph:                                ; preds = %if.end311
  %152 = load i32, i32* %min.i.3, align 16, !tbaa !217
  %153 = bitcast [4 x i32]* %idx to i8*
  %arrayinit.begin357 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 0
  %arrayinit.element358 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 1
  %arrayinit.element359 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 2
  %arrayinit.element360 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 3
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %conv368 = zext i32 %div.i to i64
  %mul373 = mul nuw nsw i32 %div, %div.i
  %conv374 = zext i32 %mul373 to i64
  %.pre891 = load i32, i32* %min.i.2, align 16, !tbaa !217
  %.pre892 = load i32, i32* %extent.i.2, align 4, !tbaa !185
  %.pre893 = load i32, i32* %min.i.1, align 16
  %.pre894 = load i32, i32* %extent.i.1, align 4
  %.pre = load i32, i32* %extent.i, align 4
  %154 = load i32, i32* %min.i, align 16
  %155 = load i32, i32* %extent.i, align 4
  %156 = load i32, i32* %min.i, align 16
  %add352 = add nsw i32 %156, %155
  %.pre15 = load i32, i32* %extent.i.1, align 4
  %.pre16 = load i32, i32* %min.i.1, align 16
  %.pre896 = load i32, i32* %extent.i.2, align 4
  %.pre897 = load i32, i32* %min.i.2, align 16
  %.pre898 = load i32, i32* %extent.i.3, align 4
  %.pre899 = load i32, i32* %min.i.3, align 16
  br label %for.body322

for.body322:                                      ; preds = %for.inc399, %for.body322.lr.ph
  %157 = phi i32 [ %152, %for.body322.lr.ph ], [ %218, %for.inc399 ]
  %158 = phi i32 [ %151, %for.body322.lr.ph ], [ %219, %for.inc399 ]
  %159 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %220, %for.inc399 ]
  %160 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %221, %for.inc399 ]
  %161 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %222, %for.inc399 ]
  %162 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %223, %for.inc399 ]
  %dim3.0858 = phi i32 [ %152, %for.body322.lr.ph ], [ %inc400, %for.inc399 ]
  %counter.0857 = phi i32 [ 0, %for.body322.lr.ph ], [ %counter.1.lcssa, %for.inc399 ]
  %cmp331848 = icmp sgt i32 %161, 0
  br i1 %cmp331848, label %for.body333, label %for.inc399

for.body333:                                      ; preds = %for.body322, %for.inc394
  %163 = phi i32 [ %212, %for.inc394 ], [ %.pre893, %for.body322 ]
  %164 = phi i32 [ %213, %for.inc394 ], [ %.pre894, %for.body322 ]
  %165 = phi i32 [ %214, %for.inc394 ], [ %159, %for.body322 ]
  %166 = phi i32 [ %215, %for.inc394 ], [ %160, %for.body322 ]
  %167 = phi i32 [ %216, %for.inc394 ], [ %.pre894, %for.body322 ]
  %168 = phi i32 [ %217, %for.inc394 ], [ %.pre893, %for.body322 ]
  %dim2.0850 = phi i32 [ %inc395, %for.inc394 ], [ %162, %for.body322 ]
  %counter.1849 = phi i32 [ %counter.2.lcssa, %for.inc394 ], [ %counter.0857, %for.body322 ]
  %cmp342839 = icmp sgt i32 %167, 0
  br i1 %cmp342839, label %for.body344, label %for.inc394

for.body344:                                      ; preds = %for.body333, %for.inc389
  %169 = phi i32 [ %209, %for.inc389 ], [ %163, %for.body333 ]
  %170 = phi i32 [ %210, %for.inc389 ], [ %164, %for.body333 ]
  %171 = phi i32 [ %211, %for.inc389 ], [ %.pre, %for.body333 ]
  %dim1.0841 = phi i32 [ %inc390, %for.inc389 ], [ %168, %for.body333 ]
  %counter.2840 = phi i32 [ %counter.6797, %for.inc389 ], [ %counter.1849, %for.body333 ]
  %cmp353834 = icmp sgt i32 %171, 0
  br i1 %cmp353834, label %for.body355, label %for.inc389

for.body355:                                      ; preds = %for.body344, %for.inc384
  %dim0.0836 = phi i32 [ %inc385, %for.inc384 ], [ %154, %for.body344 ]
  %counter.3835 = phi i32 [ %counter.4, %for.inc384 ], [ %counter.2840, %for.body344 ]
  %inc356 = add nsw i32 %counter.3835, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %153) #11
  store i32 %dim0.0836, i32* %arrayinit.begin357, align 4, !tbaa !37
  store i32 %dim1.0841, i32* %arrayinit.element358, align 4, !tbaa !37
  store i32 %dim2.0850, i32* %arrayinit.element359, align 4, !tbaa !37
  store i32 %dim3.0858, i32* %arrayinit.element360, align 4, !tbaa !37
  %172 = load i32, i32* %dimensions, align 4, !tbaa !179
  %cmp17.i = icmp sgt i32 %172, 0
  br i1 %cmp17.i, label %for.body.lr.ph.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit

for.body.lr.ph.i:                                 ; preds = %for.body355
  %173 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !180
  %wide.trip.count.i = zext i32 %172 to i64
  %stride.i621920 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 0, i32 2
  %174 = load i32, i32* %stride.i621920, align 4, !tbaa !181
  %conv.i622921 = sext i32 %174 to i64
  %min.i623922 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 0, i32 0
  %175 = load i32, i32* %min.i623922, align 4, !tbaa !217
  %sub.i923 = sub nsw i32 %dim0.0836, %175
  %conv7.i924 = sext i32 %sub.i923 to i64
  %mul.i925 = mul nsw i64 %conv7.i924, %conv.i622921
  %exitcond.not.i927 = icmp eq i32 %172, 1
  br i1 %exitcond.not.i927, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.preheader, !llvm.loop !218

for.body.i.for.body.i_crit_edge.preheader:        ; preds = %for.body.lr.ph.i
  %stride.i62126 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 1, i32 2
  %176 = load i32, i32* %stride.i62126, align 4, !tbaa !181
  %conv.i62227 = sext i32 %176 to i64
  %min.i62328 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 1, i32 0
  %177 = load i32, i32* %min.i62328, align 4, !tbaa !217
  %sub.i29 = sub nsw i32 %dim1.0841, %177
  %conv7.i30 = sext i32 %sub.i29 to i64
  %mul.i31 = mul nsw i64 %conv7.i30, %conv.i62227
  %add.i62432 = add nsw i64 %mul.i31, %mul.i925
  %exitcond.not.i33 = icmp eq i32 %172, 2
  br i1 %exitcond.not.i33, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph, !llvm.loop !218

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph: ; preds = %for.body.i.for.body.i_crit_edge.preheader
  %178 = add nsw i64 %wide.trip.count.i, -2
  %min.iters.check131 = icmp ult i64 %178, 5
  br i1 %min.iters.check131, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, label %vector.ph132

vector.ph132:                                     ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %n.mod.vf133 = and i64 %178, 3
  %179 = icmp eq i64 %n.mod.vf133, 0
  %180 = select i1 %179, i64 4, i64 %n.mod.vf133
  %n.vec134 = sub nsw i64 %178, %180
  %ind.end138 = add nsw i64 %n.vec134, 2
  %181 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %add.i62432, i32 0
  br label %vector.body130

vector.body130:                                   ; preds = %vector.body130, %vector.ph132
  %index135 = phi i64 [ 0, %vector.ph132 ], [ %index.next136, %vector.body130 ]
  %vec.phi141 = phi <2 x i64> [ %181, %vector.ph132 ], [ %201, %vector.body130 ]
  %vec.phi142 = phi <2 x i64> [ zeroinitializer, %vector.ph132 ], [ %202, %vector.body130 ]
  %offset.idx140 = or i64 %index135, 2
  %182 = add i64 %offset.idx140, 2
  %183 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %offset.idx140
  %184 = bitcast i32* %183 to <2 x i32>*
  %wide.load143 = load <2 x i32>, <2 x i32>* %184, align 4, !tbaa !37
  %185 = getelementptr inbounds i32, i32* %183, i64 2
  %186 = bitcast i32* %185 to <2 x i32>*
  %wide.load144 = load <2 x i32>, <2 x i32>* %186, align 4, !tbaa !37
  %187 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %offset.idx140, i32 2
  %188 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %182, i32 2
  %189 = getelementptr inbounds i32, i32* %187, i64 -2
  %190 = bitcast i32* %189 to <8 x i32>*
  %191 = getelementptr inbounds i32, i32* %188, i64 -2
  %192 = bitcast i32* %191 to <8 x i32>*
  %wide.vec = load <8 x i32>, <8 x i32>* %190, align 4, !tbaa !37
  %wide.vec145 = load <8 x i32>, <8 x i32>* %192, align 4, !tbaa !37
  %strided.vec = shufflevector <8 x i32> %wide.vec, <8 x i32> poison, <2 x i32> <i32 0, i32 4>
  %strided.vec146 = shufflevector <8 x i32> %wide.vec145, <8 x i32> poison, <2 x i32> <i32 0, i32 4>
  %strided.vec147 = shufflevector <8 x i32> %wide.vec, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %strided.vec148 = shufflevector <8 x i32> %wide.vec145, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %193 = sext <2 x i32> %strided.vec147 to <2 x i64>
  %194 = sext <2 x i32> %strided.vec148 to <2 x i64>
  %195 = sub nsw <2 x i32> %wide.load143, %strided.vec
  %196 = sub nsw <2 x i32> %wide.load144, %strided.vec146
  %197 = sext <2 x i32> %195 to <2 x i64>
  %198 = sext <2 x i32> %196 to <2 x i64>
  %199 = mul nsw <2 x i64> %197, %193
  %200 = mul nsw <2 x i64> %198, %194
  %201 = add <2 x i64> %199, %vec.phi141
  %202 = add <2 x i64> %200, %vec.phi142
  %index.next136 = add i64 %index135, 4
  %203 = icmp eq i64 %index.next136, %n.vec134
  br i1 %203, label %middle.block128, label %vector.body130, !llvm.loop !219

middle.block128:                                  ; preds = %vector.body130
  %bin.rdx149 = add <2 x i64> %202, %201
  %204 = call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx149)
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader: ; preds = %middle.block128, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %indvars.iv.next.i35.ph = phi i64 [ 2, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %ind.end138, %middle.block128 ]
  %add.i62434.ph = phi i64 [ %add.i62432, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %204, %middle.block128 ]
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge: ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge
  %indvars.iv.next.i35 = phi i64 [ %indvars.iv.next.i, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %indvars.iv.next.i35.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %add.i62434 = phi i64 [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %add.i62434.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %arrayidx3.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %indvars.iv.next.i35
  %.pre895.pre = load i32, i32* %arrayidx3.i.phi.trans.insert.phi.trans.insert, align 4, !tbaa !37
  %stride.i621 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %indvars.iv.next.i35, i32 2
  %205 = load i32, i32* %stride.i621, align 4, !tbaa !181
  %conv.i622 = sext i32 %205 to i64
  %min.i623 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %indvars.iv.next.i35, i32 0
  %206 = load i32, i32* %min.i623, align 4, !tbaa !217
  %sub.i = sub nsw i32 %.pre895.pre, %206
  %conv7.i = sext i32 %sub.i to i64
  %mul.i = mul nsw i64 %conv7.i, %conv.i622
  %add.i624 = add nsw i64 %mul.i, %add.i62434
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i35, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, !llvm.loop !220

_ZNK15halide_buffer_t10address_ofEPKi.exit:       ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, %for.body.i.for.body.i_crit_edge.preheader, %for.body.lr.ph.i, %for.body355
  %index.0.lcssa.i = phi i64 [ 0, %for.body355 ], [ %mul.i925, %for.body.lr.ph.i ], [ %add.i62432, %for.body.i.for.body.i_crit_edge.preheader ], [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ]
  %207 = load i8*, i8** %host.i, align 8, !tbaa !176
  %208 = load i8, i8* %bits.i, align 1, !tbaa !140
  %conv.i.i = zext i8 %208 to i64
  %add.i.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i.i, 3
  %mul9.i = mul nsw i64 %div.i.i, %index.0.lcssa.i
  %add.ptr.i = getelementptr inbounds i8, i8* %207, i64 %mul9.i
  %mul366 = mul nsw i32 %counter.3835, %div.i
  %idx.ext = sext i32 %mul366 to i64
  %add.ptr367 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 %idx.ext
  %call369 = call i8* @memcpy(i8* nonnull %add.ptr367, i8* %add.ptr.i, i64 %conv368) #13
  %cmp370 = icmp eq i32 %inc356, %div
  br i1 %cmp370, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, label %for.inc384

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619: ; preds = %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %call.i615 = call i64 @fwrite(i8* nonnull %150, i64 %conv374, i64 1, i8* nonnull %call.i598) #13
  %cmp.i616.not = icmp eq i64 %call.i615, 0
  br i1 %cmp.i616.not, label %cleanup425.loopexit, label %for.inc384

for.inc384:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %counter.4 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619 ], [ %inc356, %_ZNK15halide_buffer_t10address_ofEPKi.exit ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %153) #11
  %inc385 = add nsw i32 %dim0.0836, 1
  %cmp353 = icmp slt i32 %inc385, %add352
  br i1 %cmp353, label %for.body355, label %for.inc389, !llvm.loop !221

for.inc389:                                       ; preds = %for.inc384, %for.body344
  %209 = phi i32 [ %169, %for.body344 ], [ %.pre16, %for.inc384 ]
  %210 = phi i32 [ %170, %for.body344 ], [ %.pre15, %for.inc384 ]
  %211 = phi i32 [ %171, %for.body344 ], [ %155, %for.inc384 ]
  %counter.6797 = phi i32 [ %counter.2840, %for.body344 ], [ %counter.4, %for.inc384 ]
  %inc390 = add nsw i32 %dim1.0841, 1
  %add341 = add nsw i32 %209, %210
  %cmp342 = icmp slt i32 %inc390, %add341
  br i1 %cmp342, label %for.body344, label %for.inc394, !llvm.loop !222

for.inc394:                                       ; preds = %for.inc389, %for.body333
  %212 = phi i32 [ %163, %for.body333 ], [ %209, %for.inc389 ]
  %213 = phi i32 [ %164, %for.body333 ], [ %210, %for.inc389 ]
  %214 = phi i32 [ %165, %for.body333 ], [ %.pre897, %for.inc389 ]
  %215 = phi i32 [ %166, %for.body333 ], [ %.pre896, %for.inc389 ]
  %216 = phi i32 [ %167, %for.body333 ], [ %210, %for.inc389 ]
  %217 = phi i32 [ %168, %for.body333 ], [ %209, %for.inc389 ]
  %counter.2.lcssa = phi i32 [ %counter.1849, %for.body333 ], [ %counter.6797, %for.inc389 ]
  %inc395 = add nsw i32 %dim2.0850, 1
  %add330 = add nsw i32 %215, %214
  %cmp331 = icmp slt i32 %inc395, %add330
  br i1 %cmp331, label %for.body333, label %for.inc399, !llvm.loop !223

for.inc399:                                       ; preds = %for.inc394, %for.body322
  %218 = phi i32 [ %157, %for.body322 ], [ %.pre899, %for.inc394 ]
  %219 = phi i32 [ %158, %for.body322 ], [ %.pre898, %for.inc394 ]
  %220 = phi i32 [ %159, %for.body322 ], [ %214, %for.inc394 ]
  %221 = phi i32 [ %160, %for.body322 ], [ %215, %for.inc394 ]
  %222 = phi i32 [ %161, %for.body322 ], [ %215, %for.inc394 ]
  %223 = phi i32 [ %162, %for.body322 ], [ %214, %for.inc394 ]
  %counter.1.lcssa = phi i32 [ %counter.0857, %for.body322 ], [ %counter.2.lcssa, %for.inc394 ]
  %inc400 = add nsw i32 %dim3.0858, 1
  %add319 = add nsw i32 %219, %218
  %cmp320 = icmp slt i32 %inc400, %add319
  br i1 %cmp320, label %for.body322, label %for.end403, !llvm.loop !224

for.end403:                                       ; preds = %for.inc399
  %cmp404 = icmp sgt i32 %counter.1.lcssa, 0
  br i1 %cmp404, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, label %if.end412

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612: ; preds = %for.end403
  %mul407 = mul nsw i32 %counter.1.lcssa, %div.i
  %conv408 = sext i32 %mul407 to i64
  %call.i608 = call i64 @fwrite(i8* nonnull %150, i64 %conv408, i64 1, i8* nonnull %call.i598) #13
  %cmp.i609.not = icmp eq i64 %call.i608, 0
  br i1 %cmp.i609.not, label %cleanup425, label %if.end412

if.end412:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, %for.end403, %if.end311
  %224 = bitcast i64* %zero to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %224) #11
  store i64 0, i64* %zero, align 8, !tbaa !18
  %tobool413.not = icmp eq i32 %final_padding_bytes.0, 0
  br i1 %tobool413.not, label %if.end423, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit: ; preds = %if.end412
  %conv415 = zext i32 %final_padding_bytes.0 to i64
  %call.i604 = call i64 @fwrite(i8* nonnull %224, i64 %conv415, i64 1, i8* nonnull %call.i598) #13
  %cmp.i605.not = icmp eq i64 %call.i604, 0
  br i1 %cmp.i605.not, label %cleanup424, label %if.end423

if.end423:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit, %if.end412
  br label %cleanup424

cleanup424:                                       ; preds = %if.end423, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit
  %retval.21 = phi i32 [ 0, %if.end423 ], [ -16, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %224) #11
  br label %cleanup425

cleanup425.loopexit:                              ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %153) #11
  br label %cleanup425

cleanup425:                                       ; preds = %cleanup425.loopexit, %cleanup424, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612
  %retval.22 = phi i32 [ %retval.21, %cleanup424 ], [ -14, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612 ], [ -13, %cleanup425.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %150) #11
  br label %cleanup433

cleanup433:                                       ; preds = %cleanup425, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup278.thread, %cleanup154
  %retval.23 = phi i32 [ %retval.22, %cleanup425 ], [ %retval.4, %cleanup154 ], [ %retval.8, %cleanup278 ], [ -12, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ -6, %cleanup278.thread ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #11
  %call.i = call i32 @fclose(i8* nonnull %call.i598) #13
  br label %return

return:                                           ; preds = %cleanup433, %if.end6, %if.end2, %if.then1, %if.then
  %retval.26 = phi i32 [ -1, %if.then ], [ -1, %if.then1 ], [ %call3, %if.end2 ], [ %retval.23, %cleanup433 ], [ -2, %if.end6 ]
  ret i32 %retval.26
}

declare i64 @fwrite(i8*, i64, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_cache_cleanup() #0 {
entry:
  tail call void @halide_memoization_cache_cleanup() #14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_memoization_cache_cleanup() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %while.end
  store i64 0, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  ret void

for.body:                                         ; preds = %while.end, %entry
  %__begin1.018 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %while.end ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  %cmp2.not16 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not16, label %while.end, label %while.body

while.body:                                       ; preds = %for.body, %while.body
  %entry1.017 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %while.body ], [ %0, %for.body ]
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next3, align 8, !tbaa !225
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.017) #14
  %2 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %2) #13
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp2.not, label %while.end, label %while.body, !llvm.loop !227

while.end:                                        ; preds = %while.body, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this) local_unnamed_addr #0 align 2 {
entry:
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  %0 = load i32, i32* %tuple_count, align 8, !tbaa !228
  %cmp11.not = icmp eq i32 %0, 0
  br i1 %cmp11.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  %1 = load i8*, i8** %metadata_storage, align 8, !tbaa !229
  tail call void @halide_free(i8* null, i8* %1) #13
  ret void

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !230
  %arrayidx = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %2, i64 %indvars.iv
  %call = tail call i32 @halide_device_free(i8* null, %struct.halide_buffer_t* %arrayidx) #13
  %3 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !230
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %3, i64 %indvars.iv, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !176
  %call6 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %4) #14
  %5 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call6 to i8*
  tail call void @halide_free(i8* null, i8* %5) #13
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %6 = load i32, i32* %tuple_count, align 8, !tbaa !228
  %7 = zext i32 %6 to i64
  %cmp = icmp ult i64 %indvars.iv.next, %7
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !231
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) local_unnamed_addr #2 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %host, i64 -32
  %0 = bitcast i8* %add.ptr to %"struct.Halide::Runtime::Internal::CacheBlockHeader"*
  ret %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %0
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp41 = icmp sgt i32 %d, -1
  br i1 %cmp41, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.042 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %idxprom36 = zext i32 %d.addr.042 to i64
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom36
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !18
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.042, -1
  %cmp = icmp sgt i32 %d.addr.042, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !232

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.042, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %idxprom5 = sext i32 %d.addr.0.lcssa to i64
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom5
  %1 = load i64, i64* %arrayidx6, align 8, !tbaa !18
  %cmp737.not = icmp eq i64 %1, 0
  br i1 %cmp737.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 4, i64 %idxprom5
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 5, i64 %idxprom5
  %inc.0 = add nuw i64 0, 1
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !233
  %add = add i64 %2, %src_off
  %3 = inttoptr i64 %add to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !235
  %add3 = add i64 %4, %dst_off
  %5 = inttoptr i64 %add3 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !236
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i64 %6) #13
  br label %if.end

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %inc.phi = phi i64 [ %inc.0, %for.body.lr.ph ], [ %inc.1, %for.body.for.body_crit_edge ]
  %src_off.addr.039 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body.for.body_crit_edge ]
  %dst_off.addr.038 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add13, %for.body.for.body_crit_edge ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.039, i64 %dst_off.addr.038) #14
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !18
  %add10 = add i64 %7, %src_off.addr.039
  %8 = load i64, i64* %arrayidx12, align 8, !tbaa !18
  %add13 = add i64 %8, %dst_off.addr.038
  %9 = load i64, i64* %arrayidx6, align 8, !tbaa !18
  %cmp7 = icmp ult i64 %inc.phi, %9
  br i1 %cmp7, label %for.body.for.body_crit_edge, label %if.end, !llvm.loop !237

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.1 = add nuw i64 %inc.phi, 1
  br label %for.body

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !233
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !235
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !238
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !176
  %2 = ptrtoint i8* %1 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %3 = load i64, i64* %device, align 8, !tbaa !178
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !233
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %4 = load i8*, i8** %host5, align 8, !tbaa !176
  %5 = ptrtoint i8* %4 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %6 = load i64, i64* %device7, align 8, !tbaa !178
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %5, %cond.true4 ], [ %6, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !235
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 4, i32 1
  %7 = load i8, i8* %bits.i, align 1, !tbaa !140
  %conv.i = zext i8 %7 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !236
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 0
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 0
  %arrayidx14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 0
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 1
  %8 = bitcast i64* %arrayidx to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %8, align 8, !tbaa !18
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 1
  %9 = bitcast i64* %arrayidx12 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %9, align 8, !tbaa !18
  %arrayidx14.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 1
  %10 = bitcast i64* %arrayidx14 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %10, align 8, !tbaa !18
  %arrayidx.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 2
  %arrayidx12.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 2
  %arrayidx14.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 2
  %arrayidx.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 3
  %11 = bitcast i64* %arrayidx.2 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %11, align 8, !tbaa !18
  %arrayidx12.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 3
  %12 = bitcast i64* %arrayidx12.2 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %12, align 8, !tbaa !18
  %arrayidx14.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 3
  %13 = bitcast i64* %arrayidx14.2 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %13, align 8, !tbaa !18
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 4
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 4
  %arrayidx14.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 4
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 5
  %14 = bitcast i64* %arrayidx.4 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %14, align 8, !tbaa !18
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 5
  %15 = bitcast i64* %arrayidx12.4 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !18
  %arrayidx14.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 5
  %16 = bitcast i64* %arrayidx14.4 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %16, align 8, !tbaa !18
  %arrayidx.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 6
  %arrayidx12.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 6
  %arrayidx14.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 6
  %arrayidx.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 7
  %17 = bitcast i64* %arrayidx.6 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %17, align 8, !tbaa !18
  %arrayidx12.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 7
  %18 = bitcast i64* %arrayidx12.6 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %18, align 8, !tbaa !18
  %arrayidx14.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 7
  %19 = bitcast i64* %arrayidx14.6 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %19, align 8, !tbaa !18
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 8
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 8
  %arrayidx14.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 8
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 9
  %20 = bitcast i64* %arrayidx.8 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %20, align 8, !tbaa !18
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 9
  %21 = bitcast i64* %arrayidx12.8 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %21, align 8, !tbaa !18
  %arrayidx14.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 9
  %22 = bitcast i64* %arrayidx14.8 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !18
  %arrayidx.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 10
  %arrayidx12.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 10
  %arrayidx14.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 10
  %arrayidx.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 11
  %23 = bitcast i64* %arrayidx.10 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %23, align 8, !tbaa !18
  %arrayidx12.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 11
  %24 = bitcast i64* %arrayidx12.10 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %24, align 8, !tbaa !18
  %arrayidx14.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 11
  %25 = bitcast i64* %arrayidx14.10 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %25, align 8, !tbaa !18
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 12
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 12
  %arrayidx14.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 12
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 13
  %26 = bitcast i64* %arrayidx.12 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %26, align 8, !tbaa !18
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 13
  %27 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %27, align 8, !tbaa !18
  %arrayidx14.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 13
  %28 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %28, align 8, !tbaa !18
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 14
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 14
  %arrayidx14.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 14
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 15
  %29 = bitcast i64* %arrayidx.14 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %29, align 8, !tbaa !18
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 15
  %30 = bitcast i64* %arrayidx12.14 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %30, align 8, !tbaa !18
  %arrayidx14.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 15
  %31 = bitcast i64* %arrayidx14.14 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %31, align 8, !tbaa !18
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %32 = load i32, i32* %dimensions, align 4, !tbaa !179
  %cmp17272 = icmp sgt i32 %32, 0
  br i1 %cmp17272, label %for.body19.lr.ph, label %cond.end8.for.cond.cleanup18_crit_edge

cond.end8.for.cond.cleanup18_crit_edge:           ; preds = %cond.end8
  %mul37.0 = mul i64 %conv, 0
  br label %for.cond.cleanup18

for.body19.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %33 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !180
  %dim23 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %34 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim23, align 8, !tbaa !180
  %wide.trip.count = zext i32 %32 to i64
  %min.iters.check = icmp ult i32 %32, 5
  br i1 %min.iters.check, label %for.body19.preheader, label %vector.ph

for.body19.preheader:                             ; preds = %middle.block, %for.body19.lr.ph
  %indvars.iv284.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %n.vec, %middle.block ]
  %.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %61, %middle.block ]
  br label %for.body19

vector.ph:                                        ; preds = %for.body19.lr.ph
  %n.mod.vf = and i64 %wide.trip.count, 3
  %35 = icmp eq i64 %n.mod.vf, 0
  %36 = select i1 %35, i64 4, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count, %36
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <2 x i64> [ zeroinitializer, %vector.ph ], [ %58, %vector.body ]
  %vec.phi2 = phi <2 x i64> [ zeroinitializer, %vector.ph ], [ %59, %vector.body ]
  %37 = or i64 %index, 2
  %38 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %index, i32 2
  %39 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %37, i32 2
  %40 = getelementptr inbounds i32, i32* %38, i64 -2
  %41 = bitcast i32* %40 to <8 x i32>*
  %42 = getelementptr inbounds i32, i32* %39, i64 -2
  %43 = bitcast i32* %42 to <8 x i32>*
  %wide.vec = load <8 x i32>, <8 x i32>* %41, align 4, !tbaa !37
  %wide.vec3 = load <8 x i32>, <8 x i32>* %43, align 4, !tbaa !37
  %strided.vec5 = shufflevector <8 x i32> %wide.vec, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %strided.vec6 = shufflevector <8 x i32> %wide.vec3, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %44 = sext <2 x i32> %strided.vec5 to <2 x i64>
  %45 = sext <2 x i32> %strided.vec6 to <2 x i64>
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %index, i32 0
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %37, i32 0
  %48 = bitcast i32* %46 to <8 x i32>*
  %49 = bitcast i32* %47 to <8 x i32>*
  %wide.vec7 = load <8 x i32>, <8 x i32>* %48, align 4, !tbaa !217
  %wide.vec8 = load <8 x i32>, <8 x i32>* %49, align 4, !tbaa !217
  %50 = sub nsw <8 x i32> %wide.vec7, %wide.vec
  %51 = shufflevector <8 x i32> %50, <8 x i32> undef, <2 x i32> <i32 0, i32 4>
  %52 = sub nsw <8 x i32> %wide.vec8, %wide.vec3
  %53 = shufflevector <8 x i32> %52, <8 x i32> undef, <2 x i32> <i32 0, i32 4>
  %54 = sext <2 x i32> %51 to <2 x i64>
  %55 = sext <2 x i32> %53 to <2 x i64>
  %56 = mul nsw <2 x i64> %54, %44
  %57 = mul nsw <2 x i64> %55, %45
  %58 = add <2 x i64> %56, %vec.phi
  %59 = add <2 x i64> %57, %vec.phi2
  %index.next = add i64 %index, 4
  %60 = icmp eq i64 %index.next, %n.vec
  br i1 %60, label %middle.block, label %vector.body, !llvm.loop !239

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %59, %58
  %61 = call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br label %for.body19.preheader

for.cond.cleanup18:                               ; preds = %for.body19.for.cond.cleanup18_crit_edge, %cond.end8.for.cond.cleanup18_crit_edge
  %mul37.phi = phi i64 [ %mul37.0, %cond.end8.for.cond.cleanup18_crit_edge ], [ %mul37.1, %for.body19.for.cond.cleanup18_crit_edge ]
  store i64 %mul37.phi, i64* %src_begin, align 8, !tbaa !238
  %dimensions39 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %62 = load i32, i32* %dimensions39, align 4, !tbaa !179
  %cmp40.not = icmp eq i32 %32, %62
  br i1 %cmp40.not, label %lor.lhs.false, label %if.then

for.body19:                                       ; preds = %for.body19.preheader, %for.body19
  %indvars.iv284 = phi i64 [ %indvars.iv.next285, %for.body19 ], [ %indvars.iv284.ph, %for.body19.preheader ]
  %63 = phi i64 [ %add, %for.body19 ], [ %.ph, %for.body19.preheader ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv284, i32 2
  %64 = load i32, i32* %stride, align 4, !tbaa !181
  %conv22 = sext i32 %64 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %indvars.iv284, i32 0
  %65 = load i32, i32* %min, align 4, !tbaa !217
  %min29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv284, i32 0
  %66 = load i32, i32* %min29, align 4, !tbaa !217
  %sub = sub nsw i32 %65, %66
  %conv30 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv30, %conv22
  %add = add i64 %mul, %63
  %indvars.iv.next285 = add nuw nsw i64 %indvars.iv284, 1
  %exitcond286.not = icmp eq i64 %indvars.iv.next285, %wide.trip.count
  br i1 %exitcond286.not, label %for.body19.for.cond.cleanup18_crit_edge, label %for.body19, !llvm.loop !240

for.body19.for.cond.cleanup18_crit_edge:          ; preds = %for.body19
  %mul37.1 = mul i64 %add, %conv
  br label %for.cond.cleanup18

lor.lhs.false:                                    ; preds = %for.cond.cleanup18
  %bits.i253 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 4, i32 1
  %67 = load i8, i8* %bits.i253, align 1, !tbaa !140
  %conv.i254 = zext i8 %67 to i32
  %add.i255 = add nuw nsw i32 %conv.i254, 7
  %div.i256 = lshr i32 %add.i255, 3
  %cmp45.not = icmp ne i32 %div.i, %div.i256
  %cmp48 = icmp sgt i32 %32, 16
  %or.cond261 = or i1 %cmp48, %cmp45.not
  br i1 %or.cond261, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup18
  %68 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %68, i8 0, i64 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp50 = icmp eq i32 %div.i, 0
  br i1 %cmp50, label %if.then51, label %for.cond54.preheader

for.cond54.preheader:                             ; preds = %if.end
  br i1 %cmp17272, label %for.body58.lr.ph, label %while.end

for.body58.lr.ph:                                 ; preds = %for.cond54.preheader
  %dim60 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %69 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim60, align 8, !tbaa !180
  %dim70 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %70 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim70, align 8, !tbaa !180
  %wide.trip.count282 = zext i32 %32 to i64
  br label %for.body58

if.then51:                                        ; preds = %if.end
  %71 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %71, i8 0, i64 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup94
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !236
  %.pre290 = load i64, i64* %arrayidx12, align 8, !tbaa !18
  %cmp139263 = icmp eq i64 %.pre, %.pre290
  br i1 %cmp139263, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre291 = load i64, i64* %arrayidx14, align 8, !tbaa !18
  %72 = bitcast i64* %arrayidx.1 to <2 x i64>*
  %73 = bitcast i64* %arrayidx to <2 x i64>*
  %74 = bitcast i64* %arrayidx12.1 to <2 x i64>*
  %75 = bitcast i64* %arrayidx12 to <2 x i64>*
  %76 = bitcast i64* %arrayidx14.1 to <2 x i64>*
  %77 = bitcast i64* %arrayidx14 to <2 x i64>*
  %78 = bitcast i64* %arrayidx.3 to <2 x i64>*
  %79 = bitcast i64* %arrayidx.2 to <2 x i64>*
  %80 = bitcast i64* %arrayidx12.3 to <2 x i64>*
  %81 = bitcast i64* %arrayidx12.2 to <2 x i64>*
  %82 = bitcast i64* %arrayidx14.3 to <2 x i64>*
  %83 = bitcast i64* %arrayidx14.2 to <2 x i64>*
  %84 = bitcast i64* %arrayidx.5 to <2 x i64>*
  %85 = bitcast i64* %arrayidx.4 to <2 x i64>*
  %86 = bitcast i64* %arrayidx12.5 to <2 x i64>*
  %87 = bitcast i64* %arrayidx12.4 to <2 x i64>*
  %88 = bitcast i64* %arrayidx14.5 to <2 x i64>*
  %89 = bitcast i64* %arrayidx14.4 to <2 x i64>*
  %90 = bitcast i64* %arrayidx.7 to <2 x i64>*
  %91 = bitcast i64* %arrayidx.6 to <2 x i64>*
  %92 = bitcast i64* %arrayidx12.7 to <2 x i64>*
  %93 = bitcast i64* %arrayidx12.6 to <2 x i64>*
  %94 = bitcast i64* %arrayidx14.7 to <2 x i64>*
  %95 = bitcast i64* %arrayidx14.6 to <2 x i64>*
  %96 = bitcast i64* %arrayidx.9 to <2 x i64>*
  %97 = bitcast i64* %arrayidx.8 to <2 x i64>*
  %98 = bitcast i64* %arrayidx12.9 to <2 x i64>*
  %99 = bitcast i64* %arrayidx12.8 to <2 x i64>*
  %100 = bitcast i64* %arrayidx14.9 to <2 x i64>*
  %101 = bitcast i64* %arrayidx14.8 to <2 x i64>*
  %102 = bitcast i64* %arrayidx.11 to <2 x i64>*
  %103 = bitcast i64* %arrayidx.10 to <2 x i64>*
  %104 = bitcast i64* %arrayidx12.11 to <2 x i64>*
  %105 = bitcast i64* %arrayidx12.10 to <2 x i64>*
  %106 = bitcast i64* %arrayidx14.11 to <2 x i64>*
  %107 = bitcast i64* %arrayidx14.10 to <2 x i64>*
  %108 = bitcast i64* %arrayidx.13 to <2 x i64>*
  %109 = bitcast i64* %arrayidx.12 to <2 x i64>*
  %110 = bitcast i64* %arrayidx12.13 to <2 x i64>*
  %111 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  %112 = bitcast i64* %arrayidx14.13 to <2 x i64>*
  %113 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  br label %land.rhs

for.body58:                                       ; preds = %for.cond.cleanup94, %for.body58.lr.ph
  %indvars.iv278 = phi i64 [ 0, %for.body58.lr.ph ], [ %indvars.iv.next279, %for.cond.cleanup94 ]
  %stride63 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %69, i64 %indvars.iv278, i32 2
  %114 = load i32, i32* %stride63, align 4, !tbaa !181
  %conv64 = sext i32 %114 to i64
  %mul68 = mul nsw i64 %conv64, %conv
  %stride73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %70, i64 %indvars.iv278, i32 2
  %115 = load i32, i32* %stride73, align 4, !tbaa !181
  %conv74 = sext i32 %115 to i64
  %mul78 = mul nsw i64 %conv74, %conv
  %cmp80264.not = icmp eq i64 %indvars.iv278, 0
  br i1 %cmp80264.not, label %for.end91, label %for.body81.lr.ph

for.body81.lr.ph:                                 ; preds = %for.body58
  %cmp86.not = icmp eq i64 %mul68, 0
  br i1 %cmp86.not, label %for.body81.preheader, label %for.body81.us

for.body81.preheader:                             ; preds = %for.body81.lr.ph
  %116 = trunc i64 %indvars.iv278 to i32
  br label %for.end91

for.body81.us:                                    ; preds = %for.body81.lr.ph, %for.inc89.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc89.us ], [ 0, %for.body81.lr.ph ]
  %arrayidx84.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv
  %117 = load i64, i64* %arrayidx84.us, align 8, !tbaa !18
  %cmp85.us = icmp ult i64 %mul68, %117
  br i1 %cmp85.us, label %for.end91.loopexit, label %for.inc89.us

for.inc89.us:                                     ; preds = %for.body81.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %indvars.iv278
  br i1 %exitcond.not, label %for.end91.loopexit, label %for.body81.us, !llvm.loop !241

for.end91.loopexit:                               ; preds = %for.inc89.us, %for.body81.us
  %insert.0.lcssa.ph.in = phi i64 [ %indvars.iv278, %for.inc89.us ], [ %indvars.iv, %for.body81.us ]
  %insert.0.lcssa.ph = trunc i64 %insert.0.lcssa.ph.in to i32
  br label %for.end91

for.end91:                                        ; preds = %for.end91.loopexit, %for.body81.preheader, %for.body58
  %insert.0.lcssa = phi i32 [ 0, %for.body58 ], [ %insert.0.lcssa.ph, %for.end91.loopexit ], [ %116, %for.body81.preheader ]
  %118 = zext i32 %insert.0.lcssa to i64
  %cmp93267 = icmp ugt i64 %indvars.iv278, %118
  br i1 %cmp93267, label %for.body95.preheader, label %for.cond.cleanup94

for.body95.preheader:                             ; preds = %for.end91
  %119 = sext i32 %insert.0.lcssa to i64
  br label %for.body95

for.cond.cleanup94:                               ; preds = %for.body95, %for.end91
  %extent122 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %69, i64 %indvars.iv278, i32 1
  %120 = load i32, i32* %extent122, align 4, !tbaa !185
  %conv123 = sext i32 %120 to i64
  %arrayidx126 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %118
  store i64 %conv123, i64* %arrayidx126, align 8, !tbaa !18
  %arrayidx129 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %118
  store i64 %mul68, i64* %arrayidx129, align 8, !tbaa !18
  %arrayidx132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %118
  store i64 %mul78, i64* %arrayidx132, align 8, !tbaa !18
  %indvars.iv.next279 = add nuw nsw i64 %indvars.iv278, 1
  %exitcond283.not = icmp eq i64 %indvars.iv.next279, %wide.trip.count282
  br i1 %exitcond283.not, label %while.cond.preheader, label %for.body58, !llvm.loop !242

for.body95:                                       ; preds = %for.body95, %for.body95.preheader
  %indvars.iv280 = phi i64 [ %indvars.iv278, %for.body95.preheader ], [ %indvars.iv.next281, %for.body95 ]
  %indvars.iv.next281 = add nsw i64 %indvars.iv280, -1
  %arrayidx99 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  %121 = load i64, i64* %arrayidx99, align 8, !tbaa !18
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280
  store i64 %121, i64* %arrayidx102, align 8, !tbaa !18
  %arrayidx106 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  %122 = load i64, i64* %arrayidx106, align 8, !tbaa !18
  %arrayidx109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280
  store i64 %122, i64* %arrayidx109, align 8, !tbaa !18
  %arrayidx113 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  %123 = load i64, i64* %arrayidx113, align 8, !tbaa !18
  %arrayidx116 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280
  store i64 %123, i64* %arrayidx116, align 8, !tbaa !18
  %cmp93 = icmp sgt i64 %indvars.iv.next281, %119
  br i1 %cmp93, label %for.body95, label %for.cond.cleanup94, !llvm.loop !243

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %124 = phi i64 [ %.pre291, %land.rhs.lr.ph ], [ %152, %while.body ]
  %125 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul147, %while.body ]
  %cmp143 = icmp eq i64 %125, %124
  br i1 %cmp143, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %126 = load i64, i64* %arrayidx, align 8, !tbaa !18
  %mul147 = mul i64 %126, %124
  store i64 %mul147, i64* %chunk_size, align 8, !tbaa !236
  %127 = load <2 x i64>, <2 x i64>* %72, align 8, !tbaa !18
  store <2 x i64> %127, <2 x i64>* %73, align 8, !tbaa !18
  %128 = load <2 x i64>, <2 x i64>* %74, align 8, !tbaa !18
  store <2 x i64> %128, <2 x i64>* %75, align 8, !tbaa !18
  %129 = load <2 x i64>, <2 x i64>* %76, align 8, !tbaa !18
  store <2 x i64> %129, <2 x i64>* %77, align 8, !tbaa !18
  %130 = load <2 x i64>, <2 x i64>* %78, align 8, !tbaa !18
  store <2 x i64> %130, <2 x i64>* %79, align 8, !tbaa !18
  %131 = load <2 x i64>, <2 x i64>* %80, align 8, !tbaa !18
  store <2 x i64> %131, <2 x i64>* %81, align 8, !tbaa !18
  %132 = load <2 x i64>, <2 x i64>* %82, align 8, !tbaa !18
  store <2 x i64> %132, <2 x i64>* %83, align 8, !tbaa !18
  %133 = load <2 x i64>, <2 x i64>* %84, align 8, !tbaa !18
  store <2 x i64> %133, <2 x i64>* %85, align 8, !tbaa !18
  %134 = load <2 x i64>, <2 x i64>* %86, align 8, !tbaa !18
  store <2 x i64> %134, <2 x i64>* %87, align 8, !tbaa !18
  %135 = load <2 x i64>, <2 x i64>* %88, align 8, !tbaa !18
  store <2 x i64> %135, <2 x i64>* %89, align 8, !tbaa !18
  %136 = load <2 x i64>, <2 x i64>* %90, align 8, !tbaa !18
  store <2 x i64> %136, <2 x i64>* %91, align 8, !tbaa !18
  %137 = load <2 x i64>, <2 x i64>* %92, align 8, !tbaa !18
  store <2 x i64> %137, <2 x i64>* %93, align 8, !tbaa !18
  %138 = load <2 x i64>, <2 x i64>* %94, align 8, !tbaa !18
  store <2 x i64> %138, <2 x i64>* %95, align 8, !tbaa !18
  %139 = load <2 x i64>, <2 x i64>* %96, align 8, !tbaa !18
  store <2 x i64> %139, <2 x i64>* %97, align 8, !tbaa !18
  %140 = load <2 x i64>, <2 x i64>* %98, align 8, !tbaa !18
  store <2 x i64> %140, <2 x i64>* %99, align 8, !tbaa !18
  %141 = load <2 x i64>, <2 x i64>* %100, align 8, !tbaa !18
  store <2 x i64> %141, <2 x i64>* %101, align 8, !tbaa !18
  %142 = load <2 x i64>, <2 x i64>* %102, align 8, !tbaa !18
  store <2 x i64> %142, <2 x i64>* %103, align 8, !tbaa !18
  %143 = load <2 x i64>, <2 x i64>* %104, align 8, !tbaa !18
  store <2 x i64> %143, <2 x i64>* %105, align 8, !tbaa !18
  %144 = load <2 x i64>, <2 x i64>* %106, align 8, !tbaa !18
  store <2 x i64> %144, <2 x i64>* %107, align 8, !tbaa !18
  %145 = load <2 x i64>, <2 x i64>* %108, align 8, !tbaa !18
  store <2 x i64> %145, <2 x i64>* %109, align 8, !tbaa !18
  %146 = load <2 x i64>, <2 x i64>* %110, align 8, !tbaa !18
  store <2 x i64> %146, <2 x i64>* %111, align 8, !tbaa !18
  %147 = load <2 x i64>, <2 x i64>* %112, align 8, !tbaa !18
  store <2 x i64> %147, <2 x i64>* %113, align 8, !tbaa !18
  %148 = load i64, i64* %arrayidx.15, align 8, !tbaa !18
  store i64 %148, i64* %arrayidx.14, align 8, !tbaa !18
  %149 = load i64, i64* %arrayidx12.15, align 8, !tbaa !18
  store i64 %149, i64* %arrayidx12.14, align 8, !tbaa !18
  %150 = load i64, i64* %arrayidx14.15, align 8, !tbaa !18
  store i64 %150, i64* %arrayidx14.14, align 8, !tbaa !18
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !18
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !18
  store i64 0, i64* %arrayidx14.15, align 8, !tbaa !18
  %151 = extractelement <2 x i64> %128, i32 0
  %cmp139 = icmp eq i64 %mul147, %151
  %152 = extractelement <2 x i64> %129, i32 0
  br i1 %cmp139, label %land.rhs, label %while.end, !llvm.loop !244

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond54.preheader
  %153 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %153, i8* nonnull align 8 dereferenceable(416) %0, i64 416, i1 false), !tbaa.struct !245
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then51, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %key1, i8* %key2, i64 %key_size) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @memcmp(i8* %key1, i8* %key2, i64 %key_size) #13
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

declare i32 @memcmp(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %buf, %struct.halide_dimension_t* %shape) local_unnamed_addr #0 {
entry:
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %0 = load i32, i32* %dimensions, align 4, !tbaa !179
  %cmp9 = icmp sgt i32 %0, 0
  br i1 %cmp9, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !180
  %2 = zext i32 %0 to i64
  br label %for.body

for.cond:                                         ; preds = %_ZNK18halide_dimension_tneERKS_.exit
  %exitcond.not = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond.not, label %return, label %for.body, !llvm.loop !246

for.body:                                         ; preds = %for.cond, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %min.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 0
  %3 = load i32, i32* %min.i.i, align 4, !tbaa !217
  %min2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %min2.i.i, align 4, !tbaa !217
  %cmp.i.i = icmp eq i32 %3, %4
  br i1 %cmp.i.i, label %land.lhs.true.i.i, label %return

land.lhs.true.i.i:                                ; preds = %for.body
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 1
  %5 = load i32, i32* %extent.i.i, align 4, !tbaa !185
  %extent3.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 1
  %6 = load i32, i32* %extent3.i.i, align 4, !tbaa !185
  %cmp4.i.i = icmp eq i32 %5, %6
  br i1 %cmp4.i.i, label %land.lhs.true5.i.i, label %return

land.lhs.true5.i.i:                               ; preds = %land.lhs.true.i.i
  %stride.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 2
  %7 = load i32, i32* %stride.i.i, align 4, !tbaa !181
  %stride6.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 2
  %8 = load i32, i32* %stride6.i.i, align 4, !tbaa !181
  %cmp7.i.i = icmp eq i32 %7, %8
  br i1 %cmp7.i.i, label %_ZNK18halide_dimension_tneERKS_.exit, label %return

_ZNK18halide_dimension_tneERKS_.exit:             ; preds = %land.lhs.true5.i.i
  %flags.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 3
  %9 = load i32, i32* %flags.i.i, align 4, !tbaa !247
  %flags8.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 3
  %10 = load i32, i32* %flags8.i.i, align 4, !tbaa !247
  %cmp9.i.i.not = icmp eq i32 %9, %10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp9.i.i.not, label %for.cond, label %return

return:                                           ; preds = %_ZNK18halide_dimension_tneERKS_.exit, %land.lhs.true5.i.i, %land.lhs.true.i.i, %for.body, %for.cond, %entry
  %cmp.lcssa = phi i1 [ true, %entry ], [ false, %_ZNK18halide_dimension_tneERKS_.exit ], [ true, %for.cond ], [ false, %land.lhs.true5.i.i ], [ false, %land.lhs.true.i.i ], [ false, %for.body ]
  ret i1 %cmp.lcssa
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this, i8* %cache_key, i64 %cache_key_size, i32 %key_hash, %struct.halide_buffer_t* %computed_bounds_buf, i32 %tuples, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key_arg, i64 %eviction_key_arg) local_unnamed_addr #0 align 2 {
entry:
  %frombool = zext i1 %has_eviction_key_arg to i8
  %0 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %this to <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>*
  store <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>* %0, align 8, !tbaa !10
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !248
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 4
  store i64 %cache_key_size, i64* %key_size, align 8, !tbaa !249
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 6
  store i32 %key_hash, i32* %hash, align 8, !tbaa !250
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 7
  store i32 0, i32* %in_use_count, align 4, !tbaa !251
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  store i32 %tuples, i32* %tuple_count, align 8, !tbaa !228
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 5
  %1 = load i32, i32* %dimensions, align 4, !tbaa !179
  %dimensions2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 9
  store i32 %1, i32* %dimensions2, align 4, !tbaa !252
  %conv = zext i32 %tuples to i64
  %mul = mul nuw nsw i64 %conv, 56
  %conv5 = sext i32 %1 to i64
  %add8 = add i32 %tuples, 1
  %conv9 = zext i32 %add8 to i64
  %mul6 = shl nuw nsw i64 %conv9, 4
  %mul10 = mul i64 %mul6, %conv5
  %add11 = add i64 %mul10, %mul
  %add13 = add i64 %add11, %cache_key_size
  %call = tail call i8* @halide_malloc(i8* null, i64 %add13) #13
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  store i8* %call, i8** %metadata_storage, align 8, !tbaa !229
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  %2 = bitcast %struct.halide_buffer_t** %buf to i8**
  store i8* %call, i8** %2, align 8, !tbaa !230
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 %mul
  %computed_bounds = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 10
  %3 = bitcast %struct.halide_dimension_t** %computed_bounds to i8**
  store i8* %add.ptr, i8** %3, align 8, !tbaa !253
  %add.ptr18 = getelementptr inbounds i8, i8* %call, i64 %add11
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 5
  store i8* %add.ptr18, i8** %key, align 8, !tbaa !254
  %4 = load i64, i64* %key_size, align 8, !tbaa !249
  %cmp117.not = icmp eq i64 %4, 0
  br i1 %cmp117.not, label %for.cond23.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %if.end
  %5 = load i8, i8* %cache_key, align 1, !tbaa !14
  store i8 %5, i8* %add.ptr18, align 1, !tbaa !14
  %cmp130.not = icmp eq i64 %4, 1
  br i1 %cmp130.not, label %for.cond23.preheader, label %for.body.for.body_crit_edge.preheader, !llvm.loop !255

for.body.for.body_crit_edge.preheader:            ; preds = %for.body.preheader
  %arrayidx2 = getelementptr inbounds i8, i8* %cache_key, i64 1
  %6 = load i8, i8* %arrayidx2, align 1, !tbaa !14
  %arrayidx213 = getelementptr inbounds i8, i8* %add.ptr18, i64 1
  store i8 %6, i8* %arrayidx213, align 1, !tbaa !14
  %7 = load i64, i64* %key_size, align 8, !tbaa !249
  %cmp4 = icmp ugt i64 %7, 2
  br i1 %cmp4, label %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, label %for.cond23.preheader, !llvm.loop !255

for.cond23.preheader:                             ; preds = %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, %for.body.for.body_crit_edge.preheader, %for.body.preheader, %if.end
  %8 = load i32, i32* %dimensions2, align 4, !tbaa !252
  %cmp25115 = icmp sgt i32 %8, 0
  br i1 %cmp25115, label %for.body27.lr.ph, label %for.cond36.preheader

for.body27.lr.ph:                                 ; preds = %for.cond23.preheader
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 6
  br label %for.body27

for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge: ; preds = %for.body.for.body_crit_edge.preheader, %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge
  %inc5 = phi i64 [ %inc, %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge ], [ 2, %for.body.for.body_crit_edge.preheader ]
  %.pre.pre = load i8*, i8** %key, align 8, !tbaa !254
  %arrayidx = getelementptr inbounds i8, i8* %cache_key, i64 %inc5
  %9 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %arrayidx21 = getelementptr inbounds i8, i8* %.pre.pre, i64 %inc5
  store i8 %9, i8* %arrayidx21, align 1, !tbaa !14
  %inc = add nuw i64 %inc5, 1
  %10 = load i64, i64* %key_size, align 8, !tbaa !249
  %cmp = icmp ult i64 %inc, %10
  br i1 %cmp, label %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, label %for.cond23.preheader, !llvm.loop !255

for.cond36.preheader:                             ; preds = %for.body27, %for.cond23.preheader
  %11 = load i32, i32* %tuple_count, align 8, !tbaa !228
  %cmp38113.not = icmp eq i32 %11, 0
  br i1 %cmp38113.not, label %for.cond.cleanup39, label %for.body40

for.body27:                                       ; preds = %for.body27, %for.body27.lr.ph
  %indvars.iv121 = phi i64 [ 0, %for.body27.lr.ph ], [ %indvars.iv.next122, %for.body27 ]
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !180
  %arrayidx28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 %indvars.iv121
  %13 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !253
  %arrayidx31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i64 %indvars.iv121
  %14 = bitcast %struct.halide_dimension_t* %arrayidx31 to i8*
  %15 = bitcast %struct.halide_dimension_t* %arrayidx28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %14, i8* nonnull align 4 dereferenceable(16) %15, i64 16, i1 false), !tbaa.struct !184
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  %16 = load i32, i32* %dimensions2, align 4, !tbaa !252
  %17 = sext i32 %16 to i64
  %cmp25 = icmp slt i64 %indvars.iv.next122, %17
  br i1 %cmp25, label %for.body27, label %for.cond36.preheader, !llvm.loop !256

for.cond36.loopexit:                              ; preds = %for.body59.for.body59_crit_edge, %for.body59.preheader, %for.body40
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !228
  %19 = zext i32 %18 to i64
  %cmp38 = icmp ult i64 %indvars.iv.next120, %19
  br i1 %cmp38, label %for.body40, label %for.cond.cleanup39, !llvm.loop !257

for.cond.cleanup39:                               ; preds = %for.cond36.loopexit, %for.cond36.preheader
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 13
  store i8 %frombool, i8* %has_eviction_key, align 8, !tbaa !258
  %eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 12
  store i64 %eviction_key_arg, i64* %eviction_key, align 8, !tbaa !259
  br label %cleanup

for.body40:                                       ; preds = %for.cond36.preheader, %for.cond36.loopexit
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %for.cond36.loopexit ], [ 0, %for.cond36.preheader ]
  %arrayidx42 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv119
  %20 = bitcast %struct.halide_buffer_t** %arrayidx42 to i8**
  %21 = load i8*, i8** %20, align 8, !tbaa !10
  %22 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !230
  %arrayidx45 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %22, i64 %indvars.iv119
  %23 = bitcast %struct.halide_buffer_t* %arrayidx45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %23, i8* nonnull align 8 dereferenceable(56) %21, i64 56, i1 false), !tbaa.struct !260
  %24 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !253
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv119, 1
  %25 = load i32, i32* %dimensions2, align 4, !tbaa !252
  %26 = trunc i64 %indvars.iv.next120 to i32
  %mul49 = mul i32 %25, %26
  %idx.ext = zext i32 %mul49 to i64
  %add.ptr50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i64 %idx.ext
  %27 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !230
  %dim54 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %27, i64 %indvars.iv119, i32 6
  store %struct.halide_dimension_t* %add.ptr50, %struct.halide_dimension_t** %dim54, align 8, !tbaa !180
  %cmp57111 = icmp sgt i32 %25, 0
  br i1 %cmp57111, label %for.body59.preheader, label %for.cond36.loopexit

for.body59.preheader:                             ; preds = %for.body40
  %28 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62125 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %28, i64 0, i32 6
  %29 = bitcast %struct.halide_dimension_t** %dim62125 to i8**
  %30 = load i8*, i8** %29, align 8, !tbaa !180
  %31 = bitcast %struct.halide_dimension_t* %add.ptr50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %31, i8* nonnull align 4 dereferenceable(16) %30, i64 16, i1 false), !tbaa.struct !184
  %32 = load i32, i32* %dimensions2, align 4, !tbaa !252
  %cmp57128 = icmp sgt i32 %32, 1
  br i1 %cmp57128, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !262

for.body59.for.body59_crit_edge:                  ; preds = %for.body59.preheader, %for.body59.for.body59_crit_edge
  %indvars.iv.next129 = phi i64 [ %indvars.iv.next, %for.body59.for.body59_crit_edge ], [ 1, %for.body59.preheader ]
  %.pre123 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !230
  %dim68.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %.pre123, i64 %indvars.iv119, i32 6
  %.pre124 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim68.phi.trans.insert, align 8, !tbaa !180
  %33 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %33, i64 0, i32 6
  %34 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim62, align 8, !tbaa !180
  %arrayidx64 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %indvars.iv.next129
  %arrayidx70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre124, i64 %indvars.iv.next129
  %35 = bitcast %struct.halide_dimension_t* %arrayidx70 to i8*
  %36 = bitcast %struct.halide_dimension_t* %arrayidx64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %35, i8* nonnull align 4 dereferenceable(16) %36, i64 16, i1 false), !tbaa.struct !184
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next129, 1
  %37 = load i32, i32* %dimensions2, align 4, !tbaa !252
  %38 = sext i32 %37 to i64
  %cmp57 = icmp slt i64 %indvars.iv.next, %38
  br i1 %cmp57, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !262

cleanup:                                          ; preds = %for.cond.cleanup39, %entry
  %39 = xor i1 %tobool.not, true
  ret i1 %39
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %key, i64 %key_size) local_unnamed_addr #0 {
entry:
  %cmp8.not = icmp eq i64 %key_size, 0
  br i1 %cmp8.not, label %for.cond.cleanup, label %entry.for.body_crit_edge

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw i64 0, 1
  %arrayidx.1 = getelementptr inbounds i8, i8* %key, i64 0
  %add.1 = mul i32 5381, 33
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %h.0.lcssa = phi i32 [ 5381, %entry ], [ %add1, %for.body ]
  ret i32 %h.0.lcssa

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %add.phi = phi i32 [ %add.0, %for.body.for.body_crit_edge ], [ %add.1, %entry.for.body_crit_edge ]
  %arrayidx.phi = phi i8* [ %arrayidx.0, %for.body.for.body_crit_edge ], [ %arrayidx.1, %entry.for.body_crit_edge ]
  %inc.phi = phi i64 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %0 = load i8, i8* %arrayidx.phi, align 1, !tbaa !14
  %conv = zext i8 %0 to i32
  %add1 = add i32 %add.phi, %conv
  %exitcond.not = icmp eq i64 %inc.phi, %key_size
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body.for.body_crit_edge, !llvm.loop !263

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw i64 %inc.phi, 1
  %arrayidx.0 = getelementptr inbounds i8, i8* %key, i64 %inc.phi
  %add.0 = mul i32 %add1, 33
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11prune_cacheEv() local_unnamed_addr #0 {
entry:
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %1 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  %2 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !18
  %cmp84 = icmp sgt i64 %1, %2
  %cmp185 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  %3 = and i1 %cmp185, %cmp84
  br i1 %3, label %while.body, label %while.end42

while.body:                                       ; preds = %entry, %if.end41
  %4 = phi i64 [ %74, %if.end41 ], [ %2, %entry ]
  %5 = phi i64 [ %75, %if.end41 ], [ %1, %entry ]
  %prune_candidate.086 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %6, %if.end41 ], [ %0, %entry ]
  %more_recent2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 1
  %6 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent2, align 8, !tbaa !264
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 7
  %7 = load i32, i32* %in_use_count, align 4, !tbaa !251
  %cmp3 = icmp eq i32 %7, 0
  br i1 %cmp3, label %if.then, label %if.end41

if.then:                                          ; preds = %while.body
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 6
  %8 = load i32, i32* %hash, align 8, !tbaa !250
  %9 = and i32 %8, 255
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %10 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp5 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %10, %prune_candidate.086
  br i1 %cmp5, label %if.then6, label %while.cond9

if.then6:                                         ; preds = %if.then
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %11 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !225
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %11, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  br label %if.end21

while.cond9:                                      ; preds = %if.then, %land.rhs11
  %prev_hash_entry.0 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %12, %land.rhs11 ], [ %10, %if.then ]
  %cmp10.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, null
  br i1 %cmp10.not, label %if.then18, label %land.rhs11

land.rhs11:                                       ; preds = %while.cond9
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  %12 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next12, align 8, !tbaa !225
  %cmp13.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %12, %prune_candidate.086
  br i1 %cmp13.not, label %do.end, label %while.cond9, !llvm.loop !265

if.then18:                                        ; preds = %while.cond9
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.2.42, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end

do.end:                                           ; preds = %land.rhs11, %if.then18
  %next19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %13 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next19, align 8, !tbaa !225
  %next20 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %13, %"struct.Halide::Runtime::Internal::CacheEntry"** %next20, align 8, !tbaa !225
  br label %if.end21

if.end21:                                         ; preds = %do.end, %if.then6
  %14 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp22 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %14, %prune_candidate.086
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %cmp25.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  br i1 %cmp25.not, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end24
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %15 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !248
  %less_recent27 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %15, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent27, align 8, !tbaa !248
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp29 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %16, %prune_candidate.086
  %less_recent31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !248
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end28
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %17, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %cmp34.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp34.not, label %if.end37, label %if.then35

if.then35:                                        ; preds = %if.end32
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !248
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end32
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 8
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !228
  %cmp3882.not = icmp eq i32 %18, 0
  br i1 %cmp3882.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end37
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 11
  %19 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !230
  %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  %wide.trip.count = zext i32 %18 to i64
  br label %for.body

for.cond.for.cond.cleanup_crit_edge:              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %if.end37
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %prune_candidate.086) #14
  %20 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %20) #13
  %.pre92 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  %.pre93 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !18
  br label %if.end41

for.body:                                         ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %sub89 = phi i64 [ %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted, %for.body.lr.ph ], [ %sub, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 5
  %21 = load i32, i32* %dimensions.i.i, align 4, !tbaa !179
  %cmp19.i.i = icmp sgt i32 %21, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body
  %sub.i.neg.0 = add i64 0, -1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !180
  %wide.trip.count.i.i = zext i32 %21 to i64
  %min.iters.check28 = icmp ult i32 %21, 3
  br i1 %min.iters.check28, label %for.body.i.i.preheader, label %vector.ph29

vector.ph29:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec31 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body27

vector.body27:                                    ; preds = %pred.load.continue43, %vector.ph29
  %index32 = phi i64 [ 0, %vector.ph29 ], [ %index.next33, %pred.load.continue43 ]
  %vec.phi38 = phi i64 [ 0, %vector.ph29 ], [ %predphi44, %pred.load.continue43 ]
  %vec.phi39 = phi i64 [ 0, %vector.ph29 ], [ %predphi45, %pred.load.continue43 ]
  %induction37 = or i64 %index32, 1
  %23 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index32, i32 2
  %24 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction37, i32 2
  %25 = load i32, i32* %23, align 4, !tbaa !181
  %26 = load i32, i32* %24, align 4, !tbaa !181
  %27 = icmp sgt i32 %25, 0
  %28 = icmp sgt i32 %26, 0
  %29 = zext i32 %25 to i64
  %30 = zext i32 %26 to i64
  br i1 %27, label %pred.load.if40, label %pred.load.continue41

pred.load.if40:                                   ; preds = %vector.body27
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index32, i32 1
  %32 = load i32, i32* %31, align 4, !tbaa !185
  br label %pred.load.continue41

pred.load.continue41:                             ; preds = %pred.load.if40, %vector.body27
  %33 = phi i32 [ poison, %vector.body27 ], [ %32, %pred.load.if40 ]
  br i1 %28, label %pred.load.if42, label %pred.load.continue43

pred.load.if42:                                   ; preds = %pred.load.continue41
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction37, i32 1
  %35 = load i32, i32* %34, align 4, !tbaa !185
  br label %pred.load.continue43

pred.load.continue43:                             ; preds = %pred.load.if42, %pred.load.continue41
  %36 = phi i32 [ poison, %pred.load.continue41 ], [ %35, %pred.load.if42 ]
  %37 = add nsw i32 %33, -1
  %38 = add nsw i32 %36, -1
  %39 = sext i32 %37 to i64
  %40 = sext i32 %38 to i64
  %41 = mul nsw i64 %39, %29
  %42 = mul nsw i64 %40, %30
  %43 = select i1 %27, i64 %41, i64 0
  %predphi44 = add i64 %vec.phi38, %43
  %44 = select i1 %28, i64 %42, i64 0
  %predphi45 = add i64 %vec.phi39, %44
  %index.next33 = add i64 %index32, 2
  %45 = icmp eq i64 %index.next33, %n.vec31
  br i1 %45, label %middle.block25, label %vector.body27, !llvm.loop !266

middle.block25:                                   ; preds = %pred.load.continue43
  %bin.rdx46 = add i64 %predphi45, %predphi44
  %cmp.n35 = icmp eq i64 %n.vec31, %wide.trip.count.i.i
  br i1 %cmp.n35, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block25
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec31, %middle.block25 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx46, %middle.block25 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 2
  %46 = load i32, i32* %stride2.i.i, align 4, !tbaa !181
  %cmp3.i.i = icmp sgt i32 %46, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %46 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 1
  %47 = load i32, i32* %extent.i.i, align 4, !tbaa !185
  %sub.i.i = add nsw i32 %47, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !267

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block25
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx46, %middle.block25 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check = icmp ult i32 %21, 3
  br i1 %min.iters.check, label %for.body.i13.i.preheader48, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue23, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue23 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue23 ]
  %vec.phi21 = phi i64 [ 0, %vector.ph ], [ %predphi24, %pred.load.continue23 ]
  %induction20 = or i64 %index, 1
  %48 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 2
  %49 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction20, i32 2
  %50 = load i32, i32* %48, align 4, !tbaa !181
  %51 = load i32, i32* %49, align 4, !tbaa !181
  %52 = icmp slt i32 %50, 0
  %53 = icmp slt i32 %51, 0
  %54 = sext i32 %50 to i64
  %55 = sext i32 %51 to i64
  br i1 %52, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %56 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 1
  %57 = load i32, i32* %56, align 4, !tbaa !185
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %58 = phi i32 [ poison, %vector.body ], [ %57, %pred.load.if ]
  br i1 %53, label %pred.load.if22, label %pred.load.continue23

pred.load.if22:                                   ; preds = %pred.load.continue
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction20, i32 1
  %60 = load i32, i32* %59, align 4, !tbaa !185
  br label %pred.load.continue23

pred.load.continue23:                             ; preds = %pred.load.if22, %pred.load.continue
  %61 = phi i32 [ poison, %pred.load.continue ], [ %60, %pred.load.if22 ]
  %62 = add nsw i32 %58, -1
  %63 = add nsw i32 %61, -1
  %64 = sext i32 %62 to i64
  %65 = sext i32 %63 to i64
  %66 = mul nsw i64 %64, %54
  %67 = mul nsw i64 %65, %55
  %68 = select i1 %52, i64 %66, i64 0
  %predphi = add i64 %vec.phi, %68
  %69 = select i1 %53, i64 %67, i64 0
  %predphi24 = add i64 %vec.phi21, %69
  %index.next = add i64 %index, 2
  %70 = icmp eq i64 %index.next, %n.vec
  br i1 %70, label %middle.block, label %vector.body, !llvm.loop !268

middle.block:                                     ; preds = %pred.load.continue23
  %bin.rdx = add i64 %predphi24, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader48

for.body.i13.i.preheader48:                       ; preds = %for.body.i13.i.preheader, %middle.block
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader48, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader48 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader48 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 2
  %71 = load i32, i32* %stride2.i11.i, align 4, !tbaa !181
  %cmp3.i12.i = icmp slt i32 %71, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %71 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 1
  %72 = load i32, i32* %extent.i15.i, align 4, !tbaa !185
  %sub.i16.i = add nsw i32 %72, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !269

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i.neg = xor i64 %index.1.i.i.lcssa, -1
  %sub.i.neg.1 = add i64 %index.1.i21.i.lcssa, %add8.i.i.neg
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.neg.phi = phi i64 [ %sub.i.neg.0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.neg.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 4, i32 1
  %73 = load i8, i8* %bits.i.i, align 1, !tbaa !140
  %conv.i.i = zext i8 %73 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i.neg = mul i64 %div.i.i, %sub.i.neg.phi
  %sub = add i64 %mul.i.neg, %sub89
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.for.cond.cleanup_crit_edge, label %for.body, !llvm.loop !270

if.end41:                                         ; preds = %for.cond.cleanup, %while.body
  %74 = phi i64 [ %.pre93, %for.cond.cleanup ], [ %4, %while.body ]
  %75 = phi i64 [ %.pre92, %for.cond.cleanup ], [ %5, %while.body ]
  %cmp = icmp sgt i64 %75, %74
  %cmp1 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %76 = and i1 %cmp1, %cmp
  br i1 %76, label %while.body, label %while.end42, !llvm.loop !271

while.end42:                                      ; preds = %if.end41, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_set_size(i64 %size) local_unnamed_addr #4 {
entry:
  %cmp = icmp eq i64 %size, 0
  %spec.store.select = select i1 %cmp, i64 1048576, i64 %size
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #13
  store i64 %spec.store.select, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !18
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #13
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_lookup(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers) local_unnamed_addr #4 {
entry:
  %conv = sext i32 %size to i64
  %call = tail call i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %cache_key, i64 %conv) #14
  %0 = and i32 %call, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #13
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry3.0220 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp.not221 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0220, null
  br i1 %cmp.not221, label %for.cond75.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %cmp16215 = icmp sgt i32 %tuple_count, 0
  %1 = sext i32 %tuple_count to i64
  br i1 %cmp16215, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.lr.ph, %if.end73.us
  %entry3.0222.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0.us, %if.end73.us ], [ %entry3.0220, %while.body.lr.ph ]
  %hash.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 6
  %2 = load i32, i32* %hash.us, align 8, !tbaa !250
  %cmp4.us = icmp eq i32 %2, %call
  br i1 %cmp4.us, label %land.lhs.true.us, label %if.end73.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 4
  %3 = load i64, i64* %key_size.us, align 8, !tbaa !249
  %cmp6.us = icmp eq i64 %3, %conv
  br i1 %cmp6.us, label %land.lhs.true7.us, label %if.end73.us

land.lhs.true7.us:                                ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 5
  %4 = load i8*, i8** %key.us, align 8, !tbaa !254
  %call9.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %4, i8* %cache_key, i64 %conv) #14
  br i1 %call9.us, label %land.lhs.true10.us, label %if.end73.us

land.lhs.true10.us:                               ; preds = %land.lhs.true7.us
  %computed_bounds11.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 10
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11.us, align 8, !tbaa !253
  %call12.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %5) #14
  br i1 %call12.us, label %land.lhs.true13.us, label %if.end73.us

land.lhs.true13.us:                               ; preds = %land.lhs.true10.us
  %tuple_count14.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 8
  %6 = load i32, i32* %tuple_count14.us, align 8, !tbaa !228
  %cmp15.us = icmp eq i32 %6, %tuple_count
  br i1 %cmp15.us, label %for.cond.preheader.us, label %if.end73.us

for.cond.preheader.us:                            ; preds = %land.lhs.true13.us
  %buf.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 11
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %for.cond.preheader.us
  %indvars.iv226.us = phi i64 [ 0, %for.cond.preheader.us ], [ %indvars.iv.next227.us, %for.body.us ]
  %arrayidx18.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv226.us
  %7 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx18.us, align 8, !tbaa !10
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf.us, align 8, !tbaa !230
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %8, i64 %indvars.iv226.us, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !180
  %call21.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %7, %struct.halide_dimension_t* %9) #14
  %indvars.iv.next227.us = add nuw nsw i64 %indvars.iv226.us, 1
  %cmp16.us = icmp slt i64 %indvars.iv.next227.us, %1
  %10 = and i1 %cmp16.us, %call21.us
  br i1 %10, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !272

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call21.us, label %if.then23, label %if.end73.us

if.end73.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true13.us, %land.lhs.true10.us, %land.lhs.true7.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 0
  %entry3.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0.us, null
  br i1 %cmp.not.us, label %for.cond75.preheader, label %while.body.us, !llvm.loop !273

for.cond75.preheader:                             ; preds = %if.end73, %if.end73.us, %entry
  %cmp76210 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp76210, label %for.body78.preheader, label %cleanup119

for.body78.preheader:                             ; preds = %for.cond75.preheader
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body78

while.body:                                       ; preds = %while.body.lr.ph, %if.end73
  %entry3.0222 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0, %if.end73 ], [ %entry3.0220, %while.body.lr.ph ]
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 6
  %11 = load i32, i32* %hash, align 8, !tbaa !250
  %cmp4 = icmp eq i32 %11, %call
  br i1 %cmp4, label %land.lhs.true, label %if.end73

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 4
  %12 = load i64, i64* %key_size, align 8, !tbaa !249
  %cmp6 = icmp eq i64 %12, %conv
  br i1 %cmp6, label %land.lhs.true7, label %if.end73

land.lhs.true7:                                   ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 5
  %13 = load i8*, i8** %key, align 8, !tbaa !254
  %call9 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %13, i8* %cache_key, i64 %conv) #14
  br i1 %call9, label %land.lhs.true10, label %if.end73

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %computed_bounds11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 10
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11, align 8, !tbaa !253
  %call12 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %14) #14
  br i1 %call12, label %land.lhs.true13, label %if.end73

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %tuple_count14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 8
  %15 = load i32, i32* %tuple_count14, align 8, !tbaa !228
  %cmp15 = icmp eq i32 %15, %tuple_count
  br i1 %cmp15, label %if.then23, label %if.end73

if.then23:                                        ; preds = %land.lhs.true13, %for.cond.cleanup.us
  %.us-phi = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0222.us, %for.cond.cleanup.us ], [ %entry3.0222, %land.lhs.true13 ]
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp24.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %16
  br i1 %cmp24.not, label %if.end57, label %do.body

do.body:                                          ; preds = %if.then23
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 1
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !264
  %cmp26.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp26.not, label %if.then27, label %do.end

if.then27:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.3.43, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end

do.end:                                           ; preds = %if.then27, %do.body
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 2
  %18 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !248
  %cmp28.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %18, null
  br i1 %cmp28.not, label %do.body33, label %if.then29

if.then29:                                        ; preds = %do.end
  %19 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !264
  %more_recent32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %18, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %19, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent32, align 8, !tbaa !264
  %.pr = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !264
  br label %do.body41

do.body33:                                        ; preds = %do.end
  %20 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp34 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %20, %.us-phi
  br i1 %cmp34, label %do.end38, label %if.then35

if.then35:                                        ; preds = %do.body33
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.44, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end38

do.end38:                                         ; preds = %if.then35, %do.body33
  %21 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !264
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %21, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %do.body41

do.body41:                                        ; preds = %do.end38, %if.then29
  %22 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pr, %if.then29 ], [ %21, %do.end38 ]
  %cmp43.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %22, null
  br i1 %cmp43.not, label %if.then44, label %do.end47

if.then44:                                        ; preds = %do.body41
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.5.45, i64 0, i64 0)) #13
  tail call void @abort() #13
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !264
  br label %do.end47

do.end47:                                         ; preds = %if.then44, %do.body41
  %23 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pre, %if.then44 ], [ %22, %do.body41 ]
  %24 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !248
  %less_recent50 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %23, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %24, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent50, align 8, !tbaa !248
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !264
  %25 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %25, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !248
  %cmp53.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %25, null
  br i1 %cmp53.not, label %if.end56, label %if.then54

if.then54:                                        ; preds = %do.end47
  %more_recent55 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %25, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent55, align 8, !tbaa !264
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %do.end47
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then23
  br i1 %cmp16215, label %for.body62.lr.ph, label %cleanup119.loopexit223

for.body62.lr.ph:                                 ; preds = %if.end57
  %buf66 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 11
  %wide.trip.count230 = zext i32 %tuple_count to i64
  br label %for.body62

for.body62:                                       ; preds = %for.body62, %for.body62.lr.ph
  %indvars.iv228 = phi i64 [ 0, %for.body62.lr.ph ], [ %indvars.iv.next229, %for.body62 ]
  %arrayidx65 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228
  %26 = bitcast %struct.halide_buffer_t** %arrayidx65 to i8**
  %27 = load i8*, i8** %26, align 8, !tbaa !10
  %28 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !230
  %arrayidx68 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %28, i64 %indvars.iv228
  %29 = bitcast %struct.halide_buffer_t* %arrayidx68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %27, i8* nonnull align 8 dereferenceable(56) %29, i64 56, i1 false), !tbaa.struct !260
  %indvars.iv.next229 = add nuw nsw i64 %indvars.iv228, 1
  %exitcond231.not = icmp eq i64 %indvars.iv.next229, %wide.trip.count230
  br i1 %exitcond231.not, label %cleanup119.loopexit223, label %for.body62, !llvm.loop !274

if.end73:                                         ; preds = %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 0
  %entry3.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0, null
  br i1 %cmp.not, label %for.cond75.preheader, label %while.body, !llvm.loop !273

for.body78:                                       ; preds = %for.inc114, %for.body78.preheader
  %indvars.iv = phi i64 [ 0, %for.body78.preheader ], [ %indvars.iv.next, %for.inc114 ]
  %arrayidx81 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %30 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx81, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 5
  %31 = load i32, i32* %dimensions.i.i, align 4, !tbaa !179
  %cmp19.i.i = icmp sgt i32 %31, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body78
  %sub.i.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body78
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 6
  %32 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !180
  %wide.trip.count.i.i = zext i32 %31 to i64
  %min.iters.check38 = icmp ult i32 %31, 3
  br i1 %min.iters.check38, label %for.body.i.i.preheader, label %vector.ph39

vector.ph39:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec41 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body37

vector.body37:                                    ; preds = %pred.load.continue53, %vector.ph39
  %index42 = phi i64 [ 0, %vector.ph39 ], [ %index.next43, %pred.load.continue53 ]
  %vec.phi48 = phi i64 [ 0, %vector.ph39 ], [ %predphi54, %pred.load.continue53 ]
  %vec.phi49 = phi i64 [ 0, %vector.ph39 ], [ %predphi55, %pred.load.continue53 ]
  %induction47 = or i64 %index42, 1
  %33 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index42, i32 2
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction47, i32 2
  %35 = load i32, i32* %33, align 4, !tbaa !181
  %36 = load i32, i32* %34, align 4, !tbaa !181
  %37 = icmp sgt i32 %35, 0
  %38 = icmp sgt i32 %36, 0
  %39 = zext i32 %35 to i64
  %40 = zext i32 %36 to i64
  br i1 %37, label %pred.load.if50, label %pred.load.continue51

pred.load.if50:                                   ; preds = %vector.body37
  %41 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index42, i32 1
  %42 = load i32, i32* %41, align 4, !tbaa !185
  br label %pred.load.continue51

pred.load.continue51:                             ; preds = %pred.load.if50, %vector.body37
  %43 = phi i32 [ poison, %vector.body37 ], [ %42, %pred.load.if50 ]
  br i1 %38, label %pred.load.if52, label %pred.load.continue53

pred.load.if52:                                   ; preds = %pred.load.continue51
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction47, i32 1
  %45 = load i32, i32* %44, align 4, !tbaa !185
  br label %pred.load.continue53

pred.load.continue53:                             ; preds = %pred.load.if52, %pred.load.continue51
  %46 = phi i32 [ poison, %pred.load.continue51 ], [ %45, %pred.load.if52 ]
  %47 = add nsw i32 %43, -1
  %48 = add nsw i32 %46, -1
  %49 = sext i32 %47 to i64
  %50 = sext i32 %48 to i64
  %51 = mul nsw i64 %49, %39
  %52 = mul nsw i64 %50, %40
  %53 = select i1 %37, i64 %51, i64 0
  %predphi54 = add i64 %vec.phi48, %53
  %54 = select i1 %38, i64 %52, i64 0
  %predphi55 = add i64 %vec.phi49, %54
  %index.next43 = add i64 %index42, 2
  %55 = icmp eq i64 %index.next43, %n.vec41
  br i1 %55, label %middle.block35, label %vector.body37, !llvm.loop !275

middle.block35:                                   ; preds = %pred.load.continue53
  %bin.rdx56 = add i64 %predphi55, %predphi54
  %cmp.n45 = icmp eq i64 %n.vec41, %wide.trip.count.i.i
  br i1 %cmp.n45, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block35
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec41, %middle.block35 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx56, %middle.block35 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i.i, i32 2
  %56 = load i32, i32* %stride2.i.i, align 4, !tbaa !181
  %cmp3.i.i = icmp sgt i32 %56, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %56 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i.i, i32 1
  %57 = load i32, i32* %extent.i.i, align 4, !tbaa !185
  %sub.i.i = add nsw i32 %57, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !276

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block35
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx56, %middle.block35 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check = icmp ult i32 %31, 3
  br i1 %min.iters.check, label %for.body.i13.i.preheader58, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue33, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue33 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue33 ]
  %vec.phi31 = phi i64 [ 0, %vector.ph ], [ %predphi34, %pred.load.continue33 ]
  %induction30 = or i64 %index, 1
  %58 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index, i32 2
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction30, i32 2
  %60 = load i32, i32* %58, align 4, !tbaa !181
  %61 = load i32, i32* %59, align 4, !tbaa !181
  %62 = icmp slt i32 %60, 0
  %63 = icmp slt i32 %61, 0
  %64 = sext i32 %60 to i64
  %65 = sext i32 %61 to i64
  br i1 %62, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %66 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index, i32 1
  %67 = load i32, i32* %66, align 4, !tbaa !185
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %68 = phi i32 [ poison, %vector.body ], [ %67, %pred.load.if ]
  br i1 %63, label %pred.load.if32, label %pred.load.continue33

pred.load.if32:                                   ; preds = %pred.load.continue
  %69 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction30, i32 1
  %70 = load i32, i32* %69, align 4, !tbaa !185
  br label %pred.load.continue33

pred.load.continue33:                             ; preds = %pred.load.if32, %pred.load.continue
  %71 = phi i32 [ poison, %pred.load.continue ], [ %70, %pred.load.if32 ]
  %72 = add nsw i32 %68, -1
  %73 = add nsw i32 %71, -1
  %74 = sext i32 %72 to i64
  %75 = sext i32 %73 to i64
  %76 = mul nsw i64 %74, %64
  %77 = mul nsw i64 %75, %65
  %78 = select i1 %62, i64 %76, i64 0
  %predphi = add i64 %vec.phi, %78
  %79 = select i1 %63, i64 %77, i64 0
  %predphi34 = add i64 %vec.phi31, %79
  %index.next = add i64 %index, 2
  %80 = icmp eq i64 %index.next, %n.vec
  br i1 %80, label %middle.block, label %vector.body, !llvm.loop !277

middle.block:                                     ; preds = %pred.load.continue33
  %bin.rdx = add i64 %predphi34, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader58

for.body.i13.i.preheader58:                       ; preds = %for.body.i13.i.preheader, %middle.block
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader58, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader58 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader58 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i10.i, i32 2
  %81 = load i32, i32* %stride2.i11.i, align 4, !tbaa !181
  %cmp3.i12.i = icmp slt i32 %81, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %81 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i10.i, i32 1
  %82 = load i32, i32* %extent.i15.i, align 4, !tbaa !185
  %sub.i16.i = add nsw i32 %82, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !278

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.phi = phi i64 [ %sub.i.0, %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 4, i32 1
  %83 = load i8, i8* %bits.i.i, align 1, !tbaa !140
  %conv.i.i = zext i8 %83 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i.phi
  %add84 = add i64 %mul.i, 32
  %call85 = tail call i8* @halide_malloc(i8* %user_context, i64 %add84) #13
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 2
  store i8* %call85, i8** %host, align 8, !tbaa !176
  %cmp87 = icmp eq i8* %call85, null
  br i1 %cmp87, label %for.cond89.preheader, label %for.inc114

for.cond89.preheader:                             ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %cmp90208.not = icmp eq i64 %indvars.iv, 0
  br i1 %cmp90208.not, label %cleanup119, label %for.body92

for.body92:                                       ; preds = %for.cond89.preheader, %for.body92
  %indvars.iv224 = phi i64 [ %indvars.iv.next225, %for.body92 ], [ %indvars.iv, %for.cond89.preheader ]
  %sub = add nuw nsw i64 %indvars.iv224, 4294967295
  %84 = and i64 %sub, 4294967295
  %arrayidx94 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %84
  %85 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host95 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %85, i64 0, i32 2
  %86 = load i8*, i8** %host95, align 8, !tbaa !176
  %call96 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %86) #14
  %87 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call96 to i8*
  tail call void @halide_free(i8* %user_context, i8* %87) #13
  %88 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host100 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %88, i64 0, i32 2
  store i8* null, i8** %host100, align 8, !tbaa !176
  %89 = icmp sgt i64 %indvars.iv224, 1
  %indvars.iv.next225 = add nsw i64 %indvars.iv224, -1
  br i1 %89, label %for.body92, label %cleanup119, !llvm.loop !279

for.inc114:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %add.ptr = getelementptr inbounds i8, i8* %call85, i64 32
  store i8* %add.ptr, i8** %host, align 8, !tbaa !176
  %call108 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* nonnull %add.ptr) #14
  %hash109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 1
  store i32 %call, i32* %hash109, align 8, !tbaa !280
  %entry110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry110, align 8, !tbaa !282
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %cleanup119, label %for.body78, !llvm.loop !283

cleanup119.loopexit223:                           ; preds = %for.body62, %if.end57
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 7
  %90 = load i32, i32* %in_use_count, align 4, !tbaa !251
  %add = add i32 %90, %tuple_count
  store i32 %add, i32* %in_use_count, align 4, !tbaa !251
  br label %cleanup119

cleanup119:                                       ; preds = %for.inc114, %for.body92, %cleanup119.loopexit223, %for.cond89.preheader, %for.cond75.preheader
  %retval.6 = phi i32 [ 1, %for.cond75.preheader ], [ 0, %cleanup119.loopexit223 ], [ -1, %for.cond89.preheader ], [ -1, %for.body92 ], [ 1, %for.inc114 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #13
  ret i32 %retval.6
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_store(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  %0 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, align 8, !tbaa !10
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %0, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !176
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %1) #14
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 1
  %2 = load i32, i32* %hash, align 8, !tbaa !280
  %3 = and i32 %2, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #13
  %idxprom = zext i32 %3 to i64
  %arrayidx7 = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry6.0228 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %cmp.not229 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0228, null
  br i1 %cmp.not229, label %for.cond61.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %conv10 = sext i32 %size to i64
  %cmp22221 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp22221, label %while.body.us.preheader, label %while.body

while.body.us.preheader:                          ; preds = %while.body.lr.ph
  %4 = zext i32 %tuple_count to i64
  br label %while.body.us

while.body.us:                                    ; preds = %if.end59.us, %while.body.us.preheader
  %entry6.0230.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0.us, %if.end59.us ], [ %entry6.0228, %while.body.us.preheader ]
  %hash8.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 6
  %5 = load i32, i32* %hash8.us, align 8, !tbaa !250
  %cmp9.us = icmp eq i32 %5, %2
  br i1 %cmp9.us, label %land.lhs.true.us, label %if.end59.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 4
  %6 = load i64, i64* %key_size.us, align 8, !tbaa !249
  %cmp11.us = icmp eq i64 %6, %conv10
  br i1 %cmp11.us, label %land.lhs.true12.us, label %if.end59.us

land.lhs.true12.us:                               ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 5
  %7 = load i8*, i8** %key.us, align 8, !tbaa !254
  %call14.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %7, i8* %cache_key, i64 %conv10) #14
  br i1 %call14.us, label %land.lhs.true15.us, label %if.end59.us

land.lhs.true15.us:                               ; preds = %land.lhs.true12.us
  %computed_bounds16.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 10
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16.us, align 8, !tbaa !253
  %call17.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %8) #14
  br i1 %call17.us, label %land.lhs.true18.us, label %if.end59.us

land.lhs.true18.us:                               ; preds = %land.lhs.true15.us
  %tuple_count19.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 8
  %9 = load i32, i32* %tuple_count19.us, align 8, !tbaa !228
  %cmp20.us = icmp eq i32 %9, %tuple_count
  br i1 %cmp20.us, label %for.body.lr.ph.us, label %if.end59.us

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call30.us, label %do.body.us, label %if.end59.us

do.body.us:                                       ; preds = %for.cond.cleanup.us
  %10 = and i8 %spec.select.us, 1
  %tobool41.not.us = icmp eq i8 %10, 0
  br i1 %tobool41.not.us, label %if.then42.us, label %for.body48.us.preheader

for.body48.us.preheader:                          ; preds = %if.then42.us, %do.body.us
  %indvars.iv.next245.1 = add nuw nsw i64 0, 1
  %arrayidx50.us.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 0
  br label %for.body48.us

if.then42.us:                                     ; preds = %do.body.us
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.9.46, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %for.body48.us.preheader

if.end59.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true18.us, %land.lhs.true15.us, %land.lhs.true12.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 0
  %entry6.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0.us, null
  br i1 %cmp.not.us, label %for.cond61.preheader, label %while.body.us, !llvm.loop !284

for.body48.us:                                    ; preds = %for.body48.us.for.body48.us_crit_edge, %for.body48.us.preheader
  %arrayidx50.us.phi = phi %struct.halide_buffer_t** [ %arrayidx50.us.0, %for.body48.us.for.body48.us_crit_edge ], [ %arrayidx50.us.1, %for.body48.us.preheader ]
  %indvars.iv.next245.phi = phi i64 [ %indvars.iv.next245.0, %for.body48.us.for.body48.us_crit_edge ], [ %indvars.iv.next245.1, %for.body48.us.preheader ]
  %11 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx50.us.phi, align 8, !tbaa !10
  %host51.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %11, i64 0, i32 2
  %12 = load i8*, i8** %host51.us, align 8, !tbaa !176
  %call52.us = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %12) #14
  %entry53.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call52.us, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry53.us, align 8, !tbaa !282
  %exitcond247.not = icmp eq i64 %indvars.iv.next245.phi, %4
  br i1 %exitcond247.not, label %cleanup132, label %for.body48.us.for.body48.us_crit_edge, !llvm.loop !285

for.body48.us.for.body48.us_crit_edge:            ; preds = %for.body48.us
  %indvars.iv.next245.0 = add nuw nsw i64 %indvars.iv.next245.phi, 1
  %arrayidx50.us.0 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next245.phi
  br label %for.body48.us

for.body.us:                                      ; preds = %for.body.lr.ph.us, %for.body.us
  %13 = phi %struct.halide_buffer_t* [ %.pre, %for.body.lr.ph.us ], [ %16, %for.body.us ]
  %indvars.iv242 = phi i64 [ 0, %for.body.lr.ph.us ], [ %indvars.iv.next243, %for.body.us ]
  %no_host_pointers_equal.0222.us = phi i8 [ 1, %for.body.lr.ph.us ], [ %spec.select.us, %for.body.us ]
  %arrayidx24.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv242
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx24.us, align 8, !tbaa !10
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %13, i64 %indvars.iv242, i32 6
  %15 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !180
  %call30.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %14, %struct.halide_dimension_t* %15) #14
  %16 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !230
  %host35.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %16, i64 %indvars.iv242, i32 2
  %17 = load i8*, i8** %host35.us, align 8, !tbaa !176
  %host36.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %14, i64 0, i32 2
  %18 = load i8*, i8** %host36.us, align 8, !tbaa !176
  %cmp37.us = icmp eq i8* %17, %18
  %spec.select.us = select i1 %cmp37.us, i8 0, i8 %no_host_pointers_equal.0222.us
  %indvars.iv.next243 = add nuw nsw i64 %indvars.iv242, 1
  %cmp22.us = icmp ult i64 %indvars.iv.next243, %4
  %19 = and i1 %cmp22.us, %call30.us
  br i1 %19, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !286

for.body.lr.ph.us:                                ; preds = %land.lhs.true18.us
  %buf27.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 11
  %.pre = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !230
  br label %for.body.us

for.cond61.preheader:                             ; preds = %if.end59, %if.end59.us, %entry
  %cmp62218 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp62218, label %for.body64.preheader, label %for.cond.cleanup63

for.body64.preheader:                             ; preds = %for.cond61.preheader
  %wide.trip.count240 = zext i32 %tuple_count to i64
  br label %for.body64

while.body:                                       ; preds = %while.body.lr.ph, %if.end59
  %entry6.0230 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0, %if.end59 ], [ %entry6.0228, %while.body.lr.ph ]
  %hash8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 6
  %20 = load i32, i32* %hash8, align 8, !tbaa !250
  %cmp9 = icmp eq i32 %20, %2
  br i1 %cmp9, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 4
  %21 = load i64, i64* %key_size, align 8, !tbaa !249
  %cmp11 = icmp eq i64 %21, %conv10
  br i1 %cmp11, label %land.lhs.true12, label %if.end59

land.lhs.true12:                                  ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 5
  %22 = load i8*, i8** %key, align 8, !tbaa !254
  %call14 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %22, i8* %cache_key, i64 %conv10) #14
  br i1 %call14, label %land.lhs.true15, label %if.end59

land.lhs.true15:                                  ; preds = %land.lhs.true12
  %computed_bounds16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 10
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16, align 8, !tbaa !253
  %call17 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %23) #14
  br i1 %call17, label %land.lhs.true18, label %if.end59

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %tuple_count19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 8
  %24 = load i32, i32* %tuple_count19, align 8, !tbaa !228
  %cmp20 = icmp eq i32 %24, %tuple_count
  br i1 %cmp20, label %cleanup132, label %if.end59

if.end59:                                         ; preds = %land.lhs.true18, %land.lhs.true15, %land.lhs.true12, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 0
  %entry6.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0, null
  br i1 %cmp.not, label %for.cond61.preheader, label %while.body, !llvm.loop !284

for.cond.cleanup63:                               ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.cond61.preheader
  %added_size.0.lcssa = phi i64 [ 0, %for.cond61.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %25 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  %add73 = add i64 %25, %added_size.0.lcssa
  store i64 %add73, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #14
  %call74 = tail call i8* @halide_malloc(i8* null, i64 96) #13
  %tobool75.not = icmp eq i8* %call74, null
  br i1 %tobool75.not, label %if.then83, label %if.then76

for.body64:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body64.preheader
  %indvars.iv238 = phi i64 [ 0, %for.body64.preheader ], [ %indvars.iv.next239, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %added_size.0219 = phi i64 [ 0, %for.body64.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %arrayidx67 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv238
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx67, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 5
  %27 = load i32, i32* %dimensions.i.i, align 4, !tbaa !179
  %cmp19.i.i = icmp sgt i32 %27, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body64
  %sub.i.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body64
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 6
  %28 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !180
  %wide.trip.count.i.i = zext i32 %27 to i64
  %min.iters.check24 = icmp ult i32 %27, 3
  br i1 %min.iters.check24, label %for.body.i.i.preheader, label %vector.ph25

vector.ph25:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec27 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body23

vector.body23:                                    ; preds = %pred.load.continue39, %vector.ph25
  %index28 = phi i64 [ 0, %vector.ph25 ], [ %index.next29, %pred.load.continue39 ]
  %vec.phi34 = phi i64 [ 0, %vector.ph25 ], [ %predphi40, %pred.load.continue39 ]
  %vec.phi35 = phi i64 [ 0, %vector.ph25 ], [ %predphi41, %pred.load.continue39 ]
  %induction33 = or i64 %index28, 1
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index28, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction33, i32 2
  %31 = load i32, i32* %29, align 4, !tbaa !181
  %32 = load i32, i32* %30, align 4, !tbaa !181
  %33 = icmp sgt i32 %31, 0
  %34 = icmp sgt i32 %32, 0
  %35 = zext i32 %31 to i64
  %36 = zext i32 %32 to i64
  br i1 %33, label %pred.load.if36, label %pred.load.continue37

pred.load.if36:                                   ; preds = %vector.body23
  %37 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index28, i32 1
  %38 = load i32, i32* %37, align 4, !tbaa !185
  br label %pred.load.continue37

pred.load.continue37:                             ; preds = %pred.load.if36, %vector.body23
  %39 = phi i32 [ poison, %vector.body23 ], [ %38, %pred.load.if36 ]
  br i1 %34, label %pred.load.if38, label %pred.load.continue39

pred.load.if38:                                   ; preds = %pred.load.continue37
  %40 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction33, i32 1
  %41 = load i32, i32* %40, align 4, !tbaa !185
  br label %pred.load.continue39

pred.load.continue39:                             ; preds = %pred.load.if38, %pred.load.continue37
  %42 = phi i32 [ poison, %pred.load.continue37 ], [ %41, %pred.load.if38 ]
  %43 = add nsw i32 %39, -1
  %44 = add nsw i32 %42, -1
  %45 = sext i32 %43 to i64
  %46 = sext i32 %44 to i64
  %47 = mul nsw i64 %45, %35
  %48 = mul nsw i64 %46, %36
  %49 = select i1 %33, i64 %47, i64 0
  %predphi40 = add i64 %vec.phi34, %49
  %50 = select i1 %34, i64 %48, i64 0
  %predphi41 = add i64 %vec.phi35, %50
  %index.next29 = add i64 %index28, 2
  %51 = icmp eq i64 %index.next29, %n.vec27
  br i1 %51, label %middle.block21, label %vector.body23, !llvm.loop !287

middle.block21:                                   ; preds = %pred.load.continue39
  %bin.rdx42 = add i64 %predphi41, %predphi40
  %cmp.n31 = icmp eq i64 %n.vec27, %wide.trip.count.i.i
  br i1 %cmp.n31, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block21
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec27, %middle.block21 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx42, %middle.block21 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 2
  %52 = load i32, i32* %stride2.i.i, align 4, !tbaa !181
  %cmp3.i.i = icmp sgt i32 %52, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %52 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 1
  %53 = load i32, i32* %extent.i.i, align 4, !tbaa !185
  %sub.i.i = add nsw i32 %53, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !288

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block21
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx42, %middle.block21 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check = icmp ult i32 %27, 3
  br i1 %min.iters.check, label %for.body.i13.i.preheader44, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue19, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue19 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue19 ]
  %vec.phi17 = phi i64 [ 0, %vector.ph ], [ %predphi20, %pred.load.continue19 ]
  %induction16 = or i64 %index, 1
  %54 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 2
  %55 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction16, i32 2
  %56 = load i32, i32* %54, align 4, !tbaa !181
  %57 = load i32, i32* %55, align 4, !tbaa !181
  %58 = icmp slt i32 %56, 0
  %59 = icmp slt i32 %57, 0
  %60 = sext i32 %56 to i64
  %61 = sext i32 %57 to i64
  br i1 %58, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %62 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 1
  %63 = load i32, i32* %62, align 4, !tbaa !185
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %64 = phi i32 [ poison, %vector.body ], [ %63, %pred.load.if ]
  br i1 %59, label %pred.load.if18, label %pred.load.continue19

pred.load.if18:                                   ; preds = %pred.load.continue
  %65 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction16, i32 1
  %66 = load i32, i32* %65, align 4, !tbaa !185
  br label %pred.load.continue19

pred.load.continue19:                             ; preds = %pred.load.if18, %pred.load.continue
  %67 = phi i32 [ poison, %pred.load.continue ], [ %66, %pred.load.if18 ]
  %68 = add nsw i32 %64, -1
  %69 = add nsw i32 %67, -1
  %70 = sext i32 %68 to i64
  %71 = sext i32 %69 to i64
  %72 = mul nsw i64 %70, %60
  %73 = mul nsw i64 %71, %61
  %74 = select i1 %58, i64 %72, i64 0
  %predphi = add i64 %vec.phi, %74
  %75 = select i1 %59, i64 %73, i64 0
  %predphi20 = add i64 %vec.phi17, %75
  %index.next = add i64 %index, 2
  %76 = icmp eq i64 %index.next, %n.vec
  br i1 %76, label %middle.block, label %vector.body, !llvm.loop !289

middle.block:                                     ; preds = %pred.load.continue19
  %bin.rdx = add i64 %predphi20, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader44

for.body.i13.i.preheader44:                       ; preds = %for.body.i13.i.preheader, %middle.block
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader44, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader44 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader44 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 2
  %77 = load i32, i32* %stride2.i11.i, align 4, !tbaa !181
  %cmp3.i12.i = icmp slt i32 %77, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %77 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 1
  %78 = load i32, i32* %extent.i15.i, align 4, !tbaa !185
  %sub.i16.i = add nsw i32 %78, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !290

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.phi = phi i64 [ %sub.i.0, %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 4, i32 1
  %79 = load i8, i8* %bits.i.i, align 1, !tbaa !140
  %conv.i.i = zext i8 %79 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i.phi
  %add = add i64 %mul.i, %added_size.0219
  %indvars.iv.next239 = add nuw nsw i64 %indvars.iv238, 1
  %exitcond241.not = icmp eq i64 %indvars.iv.next239, %wide.trip.count240
  br i1 %exitcond241.not, label %for.cond.cleanup63, label %for.body64, !llvm.loop !291

if.then76:                                        ; preds = %for.cond.cleanup63
  %80 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"*
  %conv77 = sext i32 %size to i64
  %call79 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %80, i8* %cache_key, i64 %conv77, i32 %2, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** nonnull %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) #14
  br i1 %call79, label %if.end101, label %if.then83

if.then83:                                        ; preds = %if.then76, %for.cond.cleanup63
  %81 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  %sub = sub i64 %81, %added_size.0.lcssa
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  br i1 %cmp62218, label %for.body88.preheader, label %for.cond.cleanup87

for.body88.preheader:                             ; preds = %if.then83
  %wide.trip.count = zext i32 %tuple_count to i64
  %indvars.iv.next.0 = add nuw nsw i64 0, 1
  %arrayidx90.0 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 0
  br label %for.body88

for.cond.cleanup87:                               ; preds = %for.body88, %if.then83
  br i1 %tobool75.not, label %cleanup132, label %if.then99

for.body88:                                       ; preds = %for.body88.for.body88_crit_edge, %for.body88.preheader
  %arrayidx90.phi = phi %struct.halide_buffer_t** [ %arrayidx90.0, %for.body88.preheader ], [ %arrayidx90.1, %for.body88.for.body88_crit_edge ]
  %indvars.iv.next.phi = phi i64 [ %indvars.iv.next.0, %for.body88.preheader ], [ %indvars.iv.next.1, %for.body88.for.body88_crit_edge ]
  %82 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx90.phi, align 8, !tbaa !10
  %host91 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %82, i64 0, i32 2
  %83 = load i8*, i8** %host91, align 8, !tbaa !176
  %call92 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %83) #14
  %entry93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call92, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry93, align 8, !tbaa !282
  %exitcond.not = icmp eq i64 %indvars.iv.next.phi, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup87, label %for.body88.for.body88_crit_edge, !llvm.loop !292

for.body88.for.body88_crit_edge:                  ; preds = %for.body88
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.next.phi, 1
  %arrayidx90.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next.phi
  br label %for.body88

if.then99:                                        ; preds = %for.cond.cleanup87
  tail call void @halide_free(i8* %user_context, i8* nonnull %call74) #13
  br label %cleanup132

if.end101:                                        ; preds = %if.then76
  %84 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %next104 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %84, %"struct.Halide::Runtime::Internal::CacheEntry"** %next104, align 8, !tbaa !225
  %85 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %less_recent = getelementptr inbounds i8, i8* %call74, i64 16
  %86 = bitcast i8* %less_recent to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %85, %"struct.Halide::Runtime::Internal::CacheEntry"** %86, align 8, !tbaa !248
  %cmp105.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %85, null
  br i1 %cmp105.not, label %if.end107, label %if.then106

if.then106:                                       ; preds = %if.end101
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %85, i64 0, i32 1
  %87 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent to i8**
  store i8* %call74, i8** %87, align 8, !tbaa !264
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.end101
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE to i8**), align 8, !tbaa !10
  %88 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp108 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %88, null
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.end107
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE to i8**), align 8, !tbaa !10
  br label %if.end110

if.end110:                                        ; preds = %if.then109, %if.end107
  %89 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7 to i8**
  store i8* %call74, i8** %89, align 8, !tbaa !10
  %in_use_count = getelementptr inbounds i8, i8* %call74, i64 52
  %90 = bitcast i8* %in_use_count to i32*
  store i32 %tuple_count, i32* %90, align 4, !tbaa !251
  br i1 %cmp62218, label %for.body117.preheader, label %cleanup132

for.body117.preheader:                            ; preds = %if.end110
  %wide.trip.count236 = zext i32 %tuple_count to i64
  %indvars.iv.next235.0 = add nuw nsw i64 0, 1
  %arrayidx119.0 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 0
  br label %for.body117

for.body117:                                      ; preds = %for.body117.for.body117_crit_edge, %for.body117.preheader
  %arrayidx119.phi = phi %struct.halide_buffer_t** [ %arrayidx119.0, %for.body117.preheader ], [ %arrayidx119.1, %for.body117.for.body117_crit_edge ]
  %indvars.iv.next235.phi = phi i64 [ %indvars.iv.next235.0, %for.body117.preheader ], [ %indvars.iv.next235.1, %for.body117.for.body117_crit_edge ]
  %91 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx119.phi, align 8, !tbaa !10
  %host120 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %91, i64 0, i32 2
  %92 = load i8*, i8** %host120, align 8, !tbaa !176
  %call121 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %92) #14
  %93 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call121 to i8**
  store i8* %call74, i8** %93, align 8, !tbaa !282
  %exitcond237.not = icmp eq i64 %indvars.iv.next235.phi, %wide.trip.count236
  br i1 %exitcond237.not, label %cleanup132, label %for.body117.for.body117_crit_edge, !llvm.loop !293

for.body117.for.body117_crit_edge:                ; preds = %for.body117
  %indvars.iv.next235.1 = add nuw nsw i64 %indvars.iv.next235.phi, 1
  %arrayidx119.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next235.phi
  br label %for.body117

cleanup132:                                       ; preds = %land.lhs.true18, %for.body48.us, %for.body117, %if.end110, %if.then99, %for.cond.cleanup87
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #13
  ret i32 0
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_release(i8* %user_context, i8* %host) local_unnamed_addr #4 {
entry:
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) #14
  %entry2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry2, align 8, !tbaa !282
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call to i8*
  tail call void @halide_free(i8* %user_context, i8* %1) #13
  br label %if.end6

if.else:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #13
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %0, i64 0, i32 7
  %2 = load i32, i32* %in_use_count, align 4, !tbaa !251
  %cmp3.not = icmp eq i32 %2, 0
  br i1 %cmp3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.else
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.12.47, i64 0, i64 0)) #13
  tail call void @abort() #13
  %.pre = load i32, i32* %in_use_count, align 4, !tbaa !251
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.else
  %3 = phi i32 [ %.pre, %if.then4 ], [ %2, %if.else ]
  %dec = add i32 %3, -1
  store i32 %dec, i32* %in_use_count, align 4, !tbaa !251
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #13
  br label %if.end6

if.end6:                                          ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_evict(i8* %user_context, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #13
  br label %for.body

for.cond.cleanup:                                 ; preds = %if.end25
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #13
  ret void

for.body:                                         ; preds = %if.end25, %entry
  %__begin1.059 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %if.end25 ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, align 8, !tbaa !10
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not, label %if.end25, label %while.body

while.body:                                       ; preds = %for.body, %if.end24
  %prev.058 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.1, %if.end24 ], [ %__begin1.059, %for.body ]
  %entry1.056 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %if.end24 ], [ %0, %for.body ]
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next4, align 8, !tbaa !225
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 13
  %2 = load i8, i8* %has_eviction_key, align 8, !tbaa !258, !range !17
  %tobool.not = icmp eq i8 %2, 0
  br i1 %tobool.not, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %eviction_key5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 12
  %3 = load i64, i64* %eviction_key5, align 8, !tbaa !259
  %cmp6 = icmp eq i64 %3, %eviction_key
  br i1 %cmp6, label %if.then7, label %if.end24

if.then7:                                         ; preds = %land.lhs.true
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %1, %"struct.Halide::Runtime::Internal::CacheEntry"** %prev.058, align 8, !tbaa !10
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 1
  %4 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !264
  %cmp8.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %4, null
  %less_recent12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 2
  %5 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !248
  br i1 %cmp8.not, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.then7
  %less_recent11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %4, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent11, align 8, !tbaa !248
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !248
  br label %if.end

if.else:                                          ; preds = %if.then7
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then9
  %6 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %5, %if.else ], [ %.pre, %if.then9 ]
  %cmp14.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %more_recent18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 1
  %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink = select i1 %cmp14.not, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %4, %"struct.Halide::Runtime::Internal::CacheEntry"** %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink, align 8, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.056) #14
  %7 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056 to i8*
  tail call void @halide_free(i8* %user_context, i8* nonnull %7) #13
  br label %if.end24

if.end24:                                         ; preds = %if.end, %land.lhs.true, %while.body
  %prev.1 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.058, %if.end ], [ %next4, %land.lhs.true ], [ %next4, %while.body ]
  %cmp3.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp3.not, label %if.end25, label %while.body, !llvm.loop !294

if.end25:                                         ; preds = %if.end24, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i64 0, i64 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !14
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !14
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !14
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i64 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i64 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !14
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %entry.for.body_crit_edge, label %for.cond.cleanup

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw nsw i32 0, 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i64 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %arg.addr.017 = phi i64 [ %div, %for.body.for.body_crit_edge ], [ %arg, %entry.for.body_crit_edge ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body.for.body_crit_edge ], [ %add.ptr, %entry.for.body_crit_edge ]
  %inc.phi = phi i32 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i64 -1
  %cmp = icmp slt i32 %inc.phi, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body.for.body_crit_edge, label %for.cond.cleanup, !llvm.loop !295

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw nsw i32 %inc.phi, 1
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i64 1
  store i8 45, i8* %dst, align 1, !tbaa !14
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #14
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !168
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !18
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i64 8) #13
  %2 = load i64, i64* %bits, align 8, !tbaa !18
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.57, i64 0, i64 0)) #14
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.58, i64 0, i64 0)) #14
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.59, i64 0, i64 0)) #14
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.60, i64 0, i64 0)) #14
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.61, i64 0, i64 0)) #14
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.62, i64 0, i64 0)) #14
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.63, i64 0, i64 0)) #14
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.64, i64 0, i64 0)) #14
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9.65, i64 0, i64 0)) #14
  %4 = load double, double* %arg.addr, align 8, !tbaa !168
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !168
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !168
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.condthread-pre-split.while.body_crit_edge, label %while.cond40thread-pre-split

while.condthread-pre-split.while.body_crit_edge:  ; preds = %while.condthread-pre-split
  %dec.1 = add nsw i32 0, -1
  br label %while.body

while.body:                                       ; preds = %while.condthread-pre-split.while.body_crit_edge, %while.body.while.body_crit_edge
  %dec.phi = phi i32 [ %dec.0, %while.body.while.body_crit_edge ], [ %dec.1, %while.condthread-pre-split.while.body_crit_edge ]
  %5 = phi double [ %mul, %while.body.while.body_crit_edge ], [ %.pr, %while.condthread-pre-split.while.body_crit_edge ]
  %mul = fmul double %5, 1.000000e+01
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body.while.body_crit_edge, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !296

while.body.while.body_crit_edge:                  ; preds = %while.body
  %dec.0 = add nsw i32 %dec.phi, -1
  br label %while.body

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !168
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr261 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec.phi, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr261, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr261, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !297

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !168
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr261, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #14
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #14
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11.67, i64 0, i64 0)) #14
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.68, i64 0, i64 0)) #14
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59262 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59262, i32 2) #14
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #14
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %integer_part.0 = select i1 %cmp72, i64 0, i64 %shr77
  %sub81 = select i1 %cmp72, i64 0, i64 %shl80
  %f.0.in = sub i64 %add67, %sub81
  %f.0 = uitofp i64 %f.0.in to double
  %conv84258 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84258, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond259 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond259 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select260 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.then71, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.then71 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.then71 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select260, %if.then71 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #14
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader, label %for.cond.cleanup

for.cond111.preheader:                            ; preds = %if.end104, %if.end137
  %i.0270 = phi i32 [ %inc139, %if.end137 ], [ 0, %if.end104 ]
  %int_part_ptr.0268 = phi i8* [ %int_part_ptr.1, %if.end137 ], [ %add.ptr105, %if.end104 ]
  %cmp113.not264 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not264, label %if.end137, label %for.body115

for.cond.cleanup:                                 ; preds = %if.end137, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1, %if.end137 ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #14
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #14
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0266.pn = phi i8* [ %p.0266, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0265 = phi i32 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0266 = getelementptr inbounds i8, i8* %p.0266.pn, i64 -1
  %9 = load i8, i8* %p.0266, align 1, !tbaa !14
  %sub117 = add i8 %9, -48
  %conv119 = sext i8 %sub117 to i32
  %mul120 = shl nsw i32 %conv119, 1
  %add121 = or i32 %mul120, %carry.0265
  %10 = trunc i32 %add121 to i8
  %cmp124 = icmp sgt i8 %10, 9
  %sub127 = add nsw i32 %add121, 246
  %carry.1 = zext i1 %cmp124 to i32
  %new_digit.0.in = select i1 %cmp124, i32 %sub127, i32 %add121
  %11 = trunc i32 %new_digit.0.in to i8
  %conv133 = add i8 %11, 48
  store i8 %conv133, i8* %p.0266, align 1, !tbaa !14
  %cmp113.not = icmp eq i8* %p.0266, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !298

if.then135:                                       ; preds = %for.cond.cleanup114
  %incdec.ptr136 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i64 -1
  store i8 49, i8* %incdec.ptr136, align 1, !tbaa !14
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %incdec.ptr136, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %inc139 = add nuw nsw i32 %i.0270, 1
  %exitcond.not = icmp eq i32 %inc139, %integer_exponent.0
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond111.preheader, !llvm.loop !299

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i64 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 18
  %1 = ptrtoint i8* %arg to i64
  %and = and i64 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !14
  %shr = lshr i64 %1, 4
  %tobool.not = icmp eq i64 %shr, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %and.1 = and i64 %shr, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.1
  %3 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 16
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !14
  %shr.1 = lshr i64 %1, 8
  %tobool.not.1 = icmp eq i64 %shr.1, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.14, %for.cond.13, %for.cond.12, %for.cond.11, %for.cond.10, %for.cond.9, %for.cond.8, %for.cond.7, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ], [ %incdec.ptr.7, %for.cond.7 ], [ %incdec.ptr.8, %for.cond.8 ], [ %incdec.ptr.9, %for.cond.9 ], [ %incdec.ptr.10, %for.cond.10 ], [ %incdec.ptr.11, %for.cond.11 ], [ %incdec.ptr.12, %for.cond.12 ], [ %incdec.ptr.13, %for.cond.13 ], [ %incdec.ptr.14, %for.cond.14 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ], [ %incdec.ptr.8, %for.cond.7 ], [ %incdec.ptr.9, %for.cond.8 ], [ %incdec.ptr.10, %for.cond.9 ], [ %incdec.ptr.11, %for.cond.10 ], [ %incdec.ptr.12, %for.cond.11 ], [ %incdec.ptr.13, %for.cond.12 ], [ %incdec.ptr.14, %for.cond.13 ], [ %incdec.ptr.15, %for.cond.14 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i64 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !14
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !14
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #14
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %and.2 = and i64 %shr.1, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.2
  %4 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 15
  store i8 %4, i8* %incdec.ptr.1, align 1, !tbaa !14
  %shr.2 = lshr i64 %1, 12
  %tobool.not.2 = icmp eq i64 %shr.2, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %and.3 = and i64 %shr.2, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.3
  %5 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 14
  store i8 %5, i8* %incdec.ptr.2, align 1, !tbaa !14
  %shr.3 = lshr i64 %1, 16
  %tobool.not.3 = icmp eq i64 %shr.3, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %and.4 = and i64 %shr.3, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.4
  %6 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 13
  store i8 %6, i8* %incdec.ptr.3, align 1, !tbaa !14
  %shr.4 = lshr i64 %1, 20
  %tobool.not.4 = icmp eq i64 %shr.4, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %and.5 = and i64 %shr.4, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.5
  %7 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 12
  store i8 %7, i8* %incdec.ptr.4, align 1, !tbaa !14
  %shr.5 = lshr i64 %1, 24
  %tobool.not.5 = icmp eq i64 %shr.5, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %and.6 = and i64 %shr.5, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.6
  %8 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 11
  store i8 %8, i8* %incdec.ptr.5, align 1, !tbaa !14
  %shr.6 = lshr i64 %1, 28
  %tobool.not.6 = icmp eq i64 %shr.6, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %and.7 = and i64 %shr.6, 15
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.7
  %9 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 10
  store i8 %9, i8* %incdec.ptr.6, align 1, !tbaa !14
  %shr.7 = lshr i64 %1, 32
  %tobool.not.7 = icmp eq i64 %shr.7, 0
  br i1 %tobool.not.7, label %cleanup, label %for.cond.7

for.cond.7:                                       ; preds = %for.cond.6
  %and.8 = and i64 %shr.7, 15
  %arrayidx.8 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.8
  %10 = load i8, i8* %arrayidx.8, align 1, !tbaa !14
  %incdec.ptr.8 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 9
  store i8 %10, i8* %incdec.ptr.7, align 1, !tbaa !14
  %shr.8 = lshr i64 %1, 36
  %tobool.not.8 = icmp eq i64 %shr.8, 0
  br i1 %tobool.not.8, label %cleanup, label %for.cond.8

for.cond.8:                                       ; preds = %for.cond.7
  %and.9 = and i64 %shr.8, 15
  %arrayidx.9 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.9
  %11 = load i8, i8* %arrayidx.9, align 1, !tbaa !14
  %incdec.ptr.9 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 8
  store i8 %11, i8* %incdec.ptr.8, align 1, !tbaa !14
  %shr.9 = lshr i64 %1, 40
  %tobool.not.9 = icmp eq i64 %shr.9, 0
  br i1 %tobool.not.9, label %cleanup, label %for.cond.9

for.cond.9:                                       ; preds = %for.cond.8
  %and.10 = and i64 %shr.9, 15
  %arrayidx.10 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.10
  %12 = load i8, i8* %arrayidx.10, align 1, !tbaa !14
  %incdec.ptr.10 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 7
  store i8 %12, i8* %incdec.ptr.9, align 1, !tbaa !14
  %shr.10 = lshr i64 %1, 44
  %tobool.not.10 = icmp eq i64 %shr.10, 0
  br i1 %tobool.not.10, label %cleanup, label %for.cond.10

for.cond.10:                                      ; preds = %for.cond.9
  %and.11 = and i64 %shr.10, 15
  %arrayidx.11 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.11
  %13 = load i8, i8* %arrayidx.11, align 1, !tbaa !14
  %incdec.ptr.11 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 6
  store i8 %13, i8* %incdec.ptr.10, align 1, !tbaa !14
  %shr.11 = lshr i64 %1, 48
  %tobool.not.11 = icmp eq i64 %shr.11, 0
  br i1 %tobool.not.11, label %cleanup, label %for.cond.11

for.cond.11:                                      ; preds = %for.cond.10
  %and.12 = and i64 %shr.11, 15
  %arrayidx.12 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.12
  %14 = load i8, i8* %arrayidx.12, align 1, !tbaa !14
  %incdec.ptr.12 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 5
  store i8 %14, i8* %incdec.ptr.11, align 1, !tbaa !14
  %shr.12 = lshr i64 %1, 52
  %tobool.not.12 = icmp eq i64 %shr.12, 0
  br i1 %tobool.not.12, label %cleanup, label %for.cond.12

for.cond.12:                                      ; preds = %for.cond.11
  %and.13 = and i64 %shr.12, 15
  %arrayidx.13 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.13
  %15 = load i8, i8* %arrayidx.13, align 1, !tbaa !14
  %incdec.ptr.13 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 4
  store i8 %15, i8* %incdec.ptr.12, align 1, !tbaa !14
  %shr.13 = lshr i64 %1, 56
  %tobool.not.13 = icmp eq i64 %shr.13, 0
  br i1 %tobool.not.13, label %cleanup, label %for.cond.13

for.cond.13:                                      ; preds = %for.cond.12
  %and.14 = and i64 %shr.13, 15
  %arrayidx.14 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.14
  %16 = load i8, i8* %arrayidx.14, align 1, !tbaa !14
  %incdec.ptr.14 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 3
  store i8 %16, i8* %incdec.ptr.13, align 1, !tbaa !14
  %shr.14 = lshr i64 %1, 60
  %tobool.not.14 = icmp eq i64 %shr.14, 0
  br i1 %tobool.not.14, label %cleanup, label %for.cond.14

for.cond.14:                                      ; preds = %for.cond.13
  %arrayidx.15 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %shr.14
  %17 = load i8, i8* %arrayidx.15, align 1, !tbaa !14
  %incdec.ptr.15 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 2
  store i8 %17, i8* %incdec.ptr.14, align 1, !tbaa !14
  br label %cleanup
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !300
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i64
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i64 0, i64 %2
  %switch.load = load i8*, i8** %switch.gep, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18.72, i64 0, i64 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #14
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !140
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #14
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !301
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19.77, i64 0, i64 0)) #14
  %5 = load i16, i16* %lanes, align 2, !tbaa !301
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #14
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20.78, i64 0, i64 0)) #14
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21.79, i64 0, i64 0)) #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !178
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #14
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !302
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #14
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %3 = load i8*, i8** %host, align 8, !tbaa !176
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #14
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !303
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #14
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #14
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !179
  %cmp1179 = icmp sgt i32 %5, 0
  br i1 %cmp1179, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call26, %for.body ]
  %call27 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #14
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %dst.addr.080 = phi i8* [ %call10, %for.body.lr.ph ], [ %call26, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.080, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.82, i64 0, i64 0)) #14
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !180
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 %indvars.iv, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !217
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #14
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !180
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 %indvars.iv, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !185
  %conv18 = sext i32 %9 to i64
  %call19 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv18, i32 1) #14
  %call20 = tail call i8* @halide_string_to_string(i8* %call19, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !180
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i64 %indvars.iv, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !181
  %conv24 = sext i32 %11 to i64
  %call25 = tail call i8* @halide_int64_to_string(i8* %call20, i8* %end, i64 %conv24, i32 1) #14
  %call26 = tail call i8* @halide_string_to_string(i8* %call25, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24.83, i64 0, i64 0)) #14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !179
  %13 = sext i32 %12 to i64
  %cmp11 = icmp slt i64 %indvars.iv.next, %13
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !304

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call27, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 32
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #13
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #13
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 8, !tbaa !305
  %call = tail call i32 %0(i8* %user_context) #13
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !307

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15, !range !17
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #13
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i64 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !308
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #13
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !303
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 8, !tbaa !311
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !303
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !303
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 8, !tbaa !313
  %call = tail call i32 %1(i8* %user_context) #13
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.88, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.89, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !302
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !178
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !302
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.90, i64 0, i64 0)) #13
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #14
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !303
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 8, !tbaa !314
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !303
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !303
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.91, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !302
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.92, i64 0, i64 0)) #13
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #13
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 8, !tbaa !316
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %10() #13
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.93, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !302
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 8, !tbaa !318
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.96, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !302
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #13
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 8, !tbaa !319
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %10() #13
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !178
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.22.97, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !303
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !303
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.98, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !302
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.99, i64 0, i64 0)) #13
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #13
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 8, !tbaa !320
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %10() #13
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26.100, i64 0, i64 0)) #13
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27.101, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !302
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #13
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 8, !tbaa !321
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %10() #13
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !178
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.28.102, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %12 = load i8*, i8** %host, align 8, !tbaa !176
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #13
  store i8* null, i8** %host, align 8, !tbaa !176
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !303
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !303
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29.103, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !179
  %cmp19.i.i = icmp sgt i32 %4, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %if.end
  %sub.i.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !180
  %wide.trip.count.i.i = zext i32 %4 to i64
  %min.iters.check = icmp ult i32 %4, 3
  br i1 %min.iters.check, label %for.body.i.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body.lr.ph.i.i
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue6, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue6 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue6 ]
  %vec.phi4 = phi i64 [ 0, %vector.ph ], [ %predphi7, %pred.load.continue6 ]
  %induction3 = or i64 %index, 1
  %6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 2
  %7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction3, i32 2
  %8 = load i32, i32* %6, align 4, !tbaa !181
  %9 = load i32, i32* %7, align 4, !tbaa !181
  %10 = icmp sgt i32 %8, 0
  %11 = icmp sgt i32 %9, 0
  %12 = zext i32 %8 to i64
  %13 = zext i32 %9 to i64
  br i1 %10, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %14 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 1
  %15 = load i32, i32* %14, align 4, !tbaa !185
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %16 = phi i32 [ poison, %vector.body ], [ %15, %pred.load.if ]
  br i1 %11, label %pred.load.if5, label %pred.load.continue6

pred.load.if5:                                    ; preds = %pred.load.continue
  %17 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction3, i32 1
  %18 = load i32, i32* %17, align 4, !tbaa !185
  br label %pred.load.continue6

pred.load.continue6:                              ; preds = %pred.load.if5, %pred.load.continue
  %19 = phi i32 [ poison, %pred.load.continue ], [ %18, %pred.load.if5 ]
  %20 = add nsw i32 %16, -1
  %21 = add nsw i32 %19, -1
  %22 = sext i32 %20 to i64
  %23 = sext i32 %21 to i64
  %24 = mul nsw i64 %22, %12
  %25 = mul nsw i64 %23, %13
  %26 = select i1 %10, i64 %24, i64 0
  %predphi = add i64 %vec.phi, %26
  %27 = select i1 %11, i64 %25, i64 0
  %predphi7 = add i64 %vec.phi4, %27
  %index.next = add i64 %index, 2
  %28 = icmp eq i64 %index.next, %n.vec
  br i1 %28, label %middle.block, label %vector.body, !llvm.loop !322

middle.block:                                     ; preds = %pred.load.continue6
  %bin.rdx = add i64 %predphi7, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec, %middle.block ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx, %middle.block ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 2
  %29 = load i32, i32* %stride2.i.i, align 4, !tbaa !181
  %cmp3.i.i = icmp sgt i32 %29, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %29 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 1
  %30 = load i32, i32* %extent.i.i, align 4, !tbaa !185
  %sub.i.i = add nsw i32 %30, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !323

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check11 = icmp ult i32 %4, 3
  br i1 %min.iters.check11, label %for.body.i13.i.preheader31, label %vector.ph12

vector.ph12:                                      ; preds = %for.body.i13.i.preheader
  %n.vec14 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body10

vector.body10:                                    ; preds = %pred.load.continue26, %vector.ph12
  %index15 = phi i64 [ 0, %vector.ph12 ], [ %index.next16, %pred.load.continue26 ]
  %vec.phi21 = phi i64 [ 0, %vector.ph12 ], [ %predphi27, %pred.load.continue26 ]
  %vec.phi22 = phi i64 [ 0, %vector.ph12 ], [ %predphi28, %pred.load.continue26 ]
  %induction20 = or i64 %index15, 1
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index15, i32 2
  %32 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction20, i32 2
  %33 = load i32, i32* %31, align 4, !tbaa !181
  %34 = load i32, i32* %32, align 4, !tbaa !181
  %35 = icmp slt i32 %33, 0
  %36 = icmp slt i32 %34, 0
  %37 = sext i32 %33 to i64
  %38 = sext i32 %34 to i64
  br i1 %35, label %pred.load.if23, label %pred.load.continue24

pred.load.if23:                                   ; preds = %vector.body10
  %39 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index15, i32 1
  %40 = load i32, i32* %39, align 4, !tbaa !185
  br label %pred.load.continue24

pred.load.continue24:                             ; preds = %pred.load.if23, %vector.body10
  %41 = phi i32 [ poison, %vector.body10 ], [ %40, %pred.load.if23 ]
  br i1 %36, label %pred.load.if25, label %pred.load.continue26

pred.load.if25:                                   ; preds = %pred.load.continue24
  %42 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction20, i32 1
  %43 = load i32, i32* %42, align 4, !tbaa !185
  br label %pred.load.continue26

pred.load.continue26:                             ; preds = %pred.load.if25, %pred.load.continue24
  %44 = phi i32 [ poison, %pred.load.continue24 ], [ %43, %pred.load.if25 ]
  %45 = add nsw i32 %41, -1
  %46 = add nsw i32 %44, -1
  %47 = sext i32 %45 to i64
  %48 = sext i32 %46 to i64
  %49 = mul nsw i64 %47, %37
  %50 = mul nsw i64 %48, %38
  %51 = select i1 %35, i64 %49, i64 0
  %predphi27 = add i64 %vec.phi21, %51
  %52 = select i1 %36, i64 %50, i64 0
  %predphi28 = add i64 %vec.phi22, %52
  %index.next16 = add i64 %index15, 2
  %53 = icmp eq i64 %index.next16, %n.vec14
  br i1 %53, label %middle.block8, label %vector.body10, !llvm.loop !324

middle.block8:                                    ; preds = %pred.load.continue26
  %bin.rdx29 = add i64 %predphi28, %predphi27
  %cmp.n18 = icmp eq i64 %n.vec14, %wide.trip.count.i.i
  br i1 %cmp.n18, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader31

for.body.i13.i.preheader31:                       ; preds = %for.body.i13.i.preheader, %middle.block8
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec14, %middle.block8 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx29, %middle.block8 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader31, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader31 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader31 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 2
  %54 = load i32, i32* %stride2.i11.i, align 4, !tbaa !181
  %cmp3.i12.i = icmp slt i32 %54, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %54 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 1
  %55 = load i32, i32* %extent.i15.i, align 4, !tbaa !185
  %sub.i16.i = add nsw i32 %55, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !325

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block8
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx29, %middle.block8 ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.phi = phi i64 [ %sub.i.0, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %56 = load i8, i8* %bits.i.i, align 1, !tbaa !140
  %conv.i.i = zext i8 %56 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i.phi
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i64 %mul.i) #13
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  store i8* %call2, i8** %host, align 8, !tbaa !176
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #14
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %57 = load i8*, i8** %host, align 8, !tbaa !176
  tail call void @halide_free(i8* %user_context, i8* %57) #13
  store i8* null, i8** %host, align 8, !tbaa !176
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30.104, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #14
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !176
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #13
  store i8* null, i8** %host, align 8, !tbaa !176
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !303
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !303
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31.105, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !302
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32.106, i64 0, i64 0)) #13
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #13
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !302
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 8, !tbaa !326
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #13
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %10() #13
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33.107, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !302
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #13
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 8, !tbaa !327
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %10() #13
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !178
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.34.108, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !178
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %3() #13
  store i64 %handle, i64* %device, align 8, !tbaa !178
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !178
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i64 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i64 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %7() #13
  store i64 0, i64* %device, align 8, !tbaa !178
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #14
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i64 0, i64 0)) #13
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !178
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #14
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !178
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 8, !tbaa !176
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !303
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !303
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !302
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %9 = load i8*, i8** %host34, align 8, !tbaa !176
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i64 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 8, !tbaa !328
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #13
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #14
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #14
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !302
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i64 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 8, !tbaa !309
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i64 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 8, !tbaa !328
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #13
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #14
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #14
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !302
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i64 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 8, !tbaa !309
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i64 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 8, !tbaa !328
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #13
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !303
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !303
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #14
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #14
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 8, !tbaa !309
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i64 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 8, !tbaa !328
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #13
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !303
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !303
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !303
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %1() #13
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i64 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 8, !tbaa !309
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i64 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 8, !tbaa !315
  tail call void %4() #13
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #14
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %6() #13
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 8, !tbaa !309
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 8, !tbaa !317
  tail call void %9() #13
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #13
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i64 0, i64 0)) #13
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !178
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !178
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #13
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !179
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !179
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i64 0, i64 0)) #13
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #13
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !309
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 8, !tbaa !329
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #13
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !178
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !178
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #13
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !179
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !179
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i64 0, i64 0)) #13
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #13
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !309
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 8, !tbaa !330
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #13
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !178
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #13
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !178
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 8, !tbaa !331
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  store i64 0, i64* %device, align 8, !tbaa !178
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i64 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %5() #13
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !332
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #14
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #13
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #13
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #13
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #13
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #13
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.115, i64 0, i64 0)) #13
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #13
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.116, i64 0, i64 0)) #13
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #13
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #13
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #13
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.118, i64 0, i64 0)) #13
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #13
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #13
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #13
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !37
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !37
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !300
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !140
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !301
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !300
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !140
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !301
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i64 4) #13
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i64 4) #13
  %call.i = call i8* @malloc(i64 1024) #13
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.120, i64 0, i64 0)) #13
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #13
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.121, i64 0, i64 0)) #13
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #13
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.122, i64 0, i64 0)) #13
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #13
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.123, i64 0, i64 0)) #13
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #13
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.124, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #13
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #13
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.126, i64 0, i64 0)) #13
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #13
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #13
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i64 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !14
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #13
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #13
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.128, i64 0, i64 0)) #13
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #13
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #13
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #13
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i100

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %if.end17.sink.split

if.else.i100:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i64
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i64
  %sub.ptr.sub.i.i97 = sub i64 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i64 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %call.i.i99 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %add.i.i98) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #13
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i100, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i100 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #13
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #13
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #13
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #13
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #13
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #13
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.133, i64 0, i64 0)) #13
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #13
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.134, i64 0, i64 0)) #13
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #13
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #13
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #13
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #13
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #13
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #13
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.137, i64 0, i64 0)) #13
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #13
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #13
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.139, i64 0, i64 0)) #13
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #13
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #13
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #13
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #13
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.140, i64 0, i64 0)) #13
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #13
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #13
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #13
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #13
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #13
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #13
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.144, i64 0, i64 0)) #13
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #13
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #13
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #13
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #13
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #13
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #13
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #13
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #13
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #13
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #13
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #13
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #13
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #13
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #13
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #13
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #13
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #13
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #13
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #13
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #13
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #13
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #13
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #13
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #13
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #13
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #13
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #13
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i64 0, i64 0)) #13
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #13
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #13
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.147, i64 0, i64 0)) #13
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #13
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0)) #13
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #13
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #13
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #13
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #13
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i64 0, i64 0)) #13
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #13
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #13
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #13
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #13
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i64 0, i64 0)) #13
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #13
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #13
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #13
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #13
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #13
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #13
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #13
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #13
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #13
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i64 0, i64 0)) #13
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #13
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #13
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #13
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.149, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i64 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !14
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #13
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #13
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #13
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #13
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #13
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #13
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #13
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #13
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.150, i64 0, i64 0)) #13
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.151, i64 0, i64 0)) #13
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #13
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #13
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i167

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %if.end

if.else.i167:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i64
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i64
  %sub.ptr.sub.i.i164 = sub i64 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i64 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %call.i.i166 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %add.i.i165) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #13
  br label %if.end

if.end:                                           ; preds = %if.else.i167, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i167 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #13
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #13
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #13
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #13
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #13
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #13
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i64 0, i64 0)) #13
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #13
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #13
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #13
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #13
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i64 0, i64 0)) #13
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #13
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #13
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #13
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #13
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #13
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #13
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #13
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #13
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #13
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #13
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #13
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #13
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #13
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i64 0, i64 0)) #13
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #13
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #13
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -41
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_shutdown() #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #14
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !333
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  store i32 -2, i32* %current_func, align 8, !tbaa !335
  tail call void @halide_join_thread(%struct.halide_thread* nonnull %0) #13
  store %struct.halide_thread* null, %struct.halide_thread** %sampling_thread, align 8, !tbaa !333
  store i32 -1, i32* %current_func, align 8, !tbaa !335
  tail call void @halide_profiler_report_unlocked(i8* null, %struct.halide_profiler_state* nonnull %call) #14
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* nonnull %call) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_profiler_state* @halide_profiler_get_state() local_unnamed_addr #2 {
entry:
  ret %struct.halide_profiler_state* @_ZZ25halide_profiler_get_stateE1s
}

; Function Attrs: nounwind
define weak void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %s) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit, label %if.then6.i

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry
  %sstr.sroa.125.0 = phi i8* [ %add.ptr.i, %if.then6.i ], [ null, %entry ]
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.0624 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not625 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0624, null
  br i1 %tobool.not625, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sub.ptr.rhs.cast.i.i348 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i349 = sub i64 1, %sub.ptr.rhs.cast.i.i348
  br label %for.body

for.cond.cleanup:                                 ; preds = %cleanup181, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sstr.sroa.19.0.lcssa = phi i8* [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit ], [ %sstr.sroa.19.15, %cleanup181 ]
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.cond.cleanup
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %for.cond.cleanup
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %sstr.sroa.19.0.lcssa to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret void

for.body:                                         ; preds = %cleanup181, %for.body.lr.ph
  %p.0627 = phi %struct.halide_profiler_pipeline_stats* [ %p.0624, %for.body.lr.ph ], [ %p.0, %cleanup181 ]
  %sstr.sroa.19.0626 = phi i8* [ %call.i, %for.body.lr.ph ], [ %sstr.sroa.19.15, %cleanup181 ]
  %time = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 0
  %0 = load i64, i64* %time, align 8, !tbaa !336
  %conv = uitofp i64 %0 to float
  %div = fdiv float %conv, 1.000000e+06
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !338
  %tobool1.not = icmp eq i32 %1, 0
  br i1 %tobool1.not, label %cleanup181, label %if.end

if.end:                                           ; preds = %for.body
  br i1 %tobool.not.i, label %if.end.split, label %if.then.i278

if.end.split:                                     ; preds = %if.end
  %active_threads_numerator1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %2 = load i64, i64* %active_threads_numerator1, align 8, !tbaa !339
  %active_threads_denominator2 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %3 = load i64, i64* %active_threads_denominator2, align 8, !tbaa !340
  %cmp3 = icmp eq i64 %2, %3
  %name4 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %4 = load i8*, i8** %name4, align 8, !tbaa !341
  %call.i2825 = tail call i8* @halide_string_to_string(i8* null, i8* %sstr.sroa.125.0, i8* %4) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

if.then.i278:                                     ; preds = %if.end
  store i8 0, i8* %call.i, align 1, !tbaa !14
  %active_threads_numerator6 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %5 = load i64, i64* %active_threads_numerator6, align 8, !tbaa !339
  %active_threads_denominator7 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %6 = load i64, i64* %active_threads_denominator7, align 8, !tbaa !340
  %cmp8 = icmp eq i64 %5, %6
  %name9 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %7 = load i8*, i8** %name9, align 8, !tbaa !341
  %call.i28210 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* %sstr.sroa.125.0, i8* %7) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit: ; preds = %if.end.split, %if.then.i278
  %8 = phi i64 [ %2, %if.end.split ], [ %5, %if.then.i278 ]
  %9 = phi i64 [ %3, %if.end.split ], [ %6, %if.then.i278 ]
  %10 = phi i1 [ %cmp3, %if.end.split ], [ %cmp8, %if.then.i278 ]
  %phi.call = phi i8* [ %call.i2825, %if.end.split ], [ %call.i28210, %if.then.i278 ]
  %call.i285 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #13
  %call.i288 = tail call i8* @halide_string_to_string(i8* %call.i285, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8.165, i64 0, i64 0)) #13
  %conv.i = fpext float %div to double
  %call.i291 = tail call i8* @halide_double_to_string(i8* %call.i288, i8* %sstr.sroa.125.0, double %conv.i, i32 0) #13
  %call.i294 = tail call i8* @halide_string_to_string(i8* %call.i291, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.166, i64 0, i64 0)) #13
  %call.i297 = tail call i8* @halide_string_to_string(i8* %call.i294, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.167, i64 0, i64 0)) #13
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 12
  %11 = load i32, i32* %samples, align 4, !tbaa !342
  %conv.i300 = sext i32 %11 to i64
  %call.i301 = tail call i8* @halide_int64_to_string(i8* %call.i297, i8* %sstr.sroa.125.0, i64 %conv.i300, i32 1) #13
  %call.i304 = tail call i8* @halide_string_to_string(i8* %call.i301, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.168, i64 0, i64 0)) #13
  %12 = load i32, i32* %runs, align 8, !tbaa !338
  %conv.i307 = sext i32 %12 to i64
  %call.i308 = tail call i8* @halide_int64_to_string(i8* %call.i304, i8* %sstr.sroa.125.0, i64 %conv.i307, i32 1) #13
  %call.i311 = tail call i8* @halide_string_to_string(i8* %call.i308, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12.169, i64 0, i64 0)) #13
  %13 = load i32, i32* %runs, align 8, !tbaa !338
  %conv19 = sitofp i32 %13 to float
  %div20 = fdiv float %div, %conv19
  %conv.i314 = fpext float %div20 to double
  %call.i315 = tail call i8* @halide_double_to_string(i8* %call.i311, i8* %sstr.sroa.125.0, double %conv.i314, i32 0) #13
  %call.i318 = tail call i8* @halide_string_to_string(i8* %call.i315, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13.170, i64 0, i64 0)) #13
  br i1 %10, label %if.end28, label %if.then24

if.then24:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %conv3 = uitofp i64 %8 to double
  %conv5 = uitofp i64 %9 to double
  %add = fadd double %conv5, 1.000000e-10
  %div6 = fdiv double %conv3, %add
  %conv7 = fptrunc double %div6 to float
  %call.i321 = tail call i8* @halide_string_to_string(i8* %call.i318, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14.171, i64 0, i64 0)) #13
  %conv.i324 = fpext float %conv7 to double
  %call.i325 = tail call i8* @halide_double_to_string(i8* %call.i321, i8* %sstr.sroa.125.0, double %conv.i324, i32 0) #13
  %call.i328 = tail call i8* @halide_string_to_string(i8* %call.i325, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #13
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %sstr.sroa.19.1 = phi i8* [ %call.i318, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit ], [ %call.i328, %if.then24 ]
  %call.i331 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.1, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15.172, i64 0, i64 0)) #13
  %num_allocs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 13
  %14 = load i32, i32* %num_allocs, align 8, !tbaa !343
  %conv.i334 = sext i32 %14 to i64
  %call.i335 = tail call i8* @halide_int64_to_string(i8* %call.i331, i8* %sstr.sroa.125.0, i64 %conv.i334, i32 1) #13
  %call.i338 = tail call i8* @halide_string_to_string(i8* %call.i335, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.173, i64 0, i64 0)) #13
  %memory_peak = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 2
  %15 = load i64, i64* %memory_peak, align 8, !tbaa !344
  %call.i341 = tail call i8* @halide_uint64_to_string(i8* %call.i338, i8* %sstr.sroa.125.0, i64 %15, i32 1) #13
  %call.i344 = tail call i8* @halide_string_to_string(i8* %call.i341, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.174, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit, label %if.then.i352

if.then.i352:                                     ; preds = %if.end28
  %sub.ptr.lhs.cast.i.i347 = ptrtoint i8* %call.i344 to i64
  %add.i.i350 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i347
  %call.i.i351 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i350) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit: ; preds = %if.then.i352, %if.end28
  %retval.0.i = phi i8* [ %call.i, %if.then.i352 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end28 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i) #13
  %16 = load i64, i64* %time, align 8, !tbaa !336
  %tobool36.not = icmp eq i64 %16, 0
  br i1 %tobool36.not, label %lor.end, label %for.cond53.preheader

lor.end:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %memory_total = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 3
  %17 = load i64, i64* %memory_total, align 8, !tbaa !345
  %tobool37.not = icmp eq i64 %17, 0
  br i1 %tobool37.not, label %for.cond41.preheader, label %for.cond53.preheader

for.cond41.preheader:                             ; preds = %lor.end
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %18 = load i32, i32* %num_funcs, align 8, !tbaa !346
  %cmp42589 = icmp sgt i32 %18, 0
  br i1 %cmp42589, label %for.body44.lr.ph, label %cleanup181

for.body44.lr.ph:                                 ; preds = %for.cond41.preheader
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  %19 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !347
  %20 = zext i32 %18 to i64
  br label %for.body44

for.cond41:                                       ; preds = %for.body44
  %exitcond.not = icmp eq i64 %indvars.iv.next, %20
  br i1 %exitcond.not, label %cleanup181, label %for.body44, !llvm.loop !348

for.body44:                                       ; preds = %for.cond41, %for.body44.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body44.lr.ph ], [ %indvars.iv.next, %for.cond41 ]
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %19, i64 %indvars.iv, i32 4
  %21 = load i64, i64* %stack_peak, align 8, !tbaa !349
  %tobool45.not = icmp eq i64 %21, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool45.not, label %for.cond41, label %for.cond53.preheader

for.cond53.preheader:                             ; preds = %for.body44, %lor.end, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %num_funcs54 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %22 = load i32, i32* %num_funcs54, align 8, !tbaa !346
  %cmp55621 = icmp sgt i32 %22, 0
  br i1 %cmp55621, label %for.body57.lr.ph, label %cleanup181

for.body57.lr.ph:                                 ; preds = %for.cond53.preheader
  %funcs59 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  br label %for.body57

for.body57:                                       ; preds = %cleanup172, %for.body57.lr.ph
  %indvars.iv630 = phi i64 [ 0, %for.body57.lr.ph ], [ %indvars.iv.next631, %cleanup172 ]
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358, label %if.then.i356

if.then.i356:                                     ; preds = %for.body57
  store i8 0, i8* %call.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358: ; preds = %if.then.i356, %for.body57
  %23 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs59, align 8, !tbaa !347
  %add.ptr61 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630
  %cmp62 = icmp eq i64 %indvars.iv630, 0
  br i1 %cmp62, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %time63 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %24 = load i64, i64* %time63, align 8, !tbaa !351
  %cmp64 = icmp eq i64 %24, 0
  br i1 %cmp64, label %cleanup172, label %if.end66

if.end66:                                         ; preds = %land.lhs.true, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %call.i361 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.175, i64 0, i64 0)) #13
  %name68 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 7
  %25 = load i8*, i8** %name68, align 8, !tbaa !352
  %call.i364 = tail call i8* @halide_string_to_string(i8* %call.i361, i8* %sstr.sroa.125.0, i8* %25) #13
  %call.i367 = tail call i8* @halide_string_to_string(i8* %call.i364, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19.176, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i591 = ptrtoint i8* %call.i367 to i64
  %sub.ptr.sub.i592 = sub i64 %sub.ptr.lhs.cast.i591, %sub.ptr.rhs.cast.i.i348
  %cmp73593 = icmp ult i64 %sub.ptr.sub.i592, 25
  br i1 %cmp73593, label %while.body, label %while.end

while.body:                                       ; preds = %if.end66, %while.body
  %sstr.sroa.19.3594 = phi i8* [ %call.i384, %while.body ], [ %call.i367, %if.end66 ]
  %call.i384 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.3594, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i = ptrtoint i8* %call.i384 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i.i348
  %cmp73 = icmp ult i64 %sub.ptr.sub.i, 25
  br i1 %cmp73, label %while.body, label %while.end, !llvm.loop !353

while.end:                                        ; preds = %while.body, %if.end66
  %sstr.sroa.19.3.lcssa = phi i8* [ %call.i367, %if.end66 ], [ %call.i384, %while.body ]
  %time75 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %26 = load i64, i64* %time75, align 8, !tbaa !351
  %conv76 = uitofp i64 %26 to float
  %27 = load i32, i32* %runs, align 8, !tbaa !338
  %conv78 = sitofp i32 %27 to float
  %mul = fmul float %conv78, 1.000000e+06
  %div79 = fdiv float %conv76, %mul
  %conv.i387 = fpext float %div79 to double
  %call.i388 = tail call i8* @halide_double_to_string(i8* %sstr.sroa.19.3.lcssa, i8* %sstr.sroa.125.0, double %conv.i387, i32 0) #13
  %tobool.not.i390 = icmp eq i8* %call.i388, null
  br i1 %tobool.not.i390, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, label %if.then.i393

if.then.i393:                                     ; preds = %while.end
  %add.ptr.i391 = getelementptr inbounds i8, i8* %call.i388, i64 -3
  %cmp.i = icmp ult i8* %add.ptr.i391, %call.i
  %spec.store.select.i = select i1 %cmp.i, i8* %call.i, i8* %add.ptr.i391
  store i8 0, i8* %spec.store.select.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit: ; preds = %if.then.i393, %while.end
  %sstr.sroa.19.4 = phi i8* [ null, %while.end ], [ %spec.store.select.i, %if.then.i393 ]
  %call.i399 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.4, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.178, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i400596 = ptrtoint i8* %call.i399 to i64
  %sub.ptr.sub.i402597 = sub i64 %sub.ptr.lhs.cast.i400596, %sub.ptr.rhs.cast.i.i348
  %cmp85598 = icmp ult i64 %sub.ptr.sub.i402597, 35
  br i1 %cmp85598, label %while.body86, label %while.end88

while.body86:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, %while.body86
  %sstr.sroa.19.5599 = phi i8* [ %call.i408, %while.body86 ], [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ]
  %call.i408 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5599, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i400 = ptrtoint i8* %call.i408 to i64
  %sub.ptr.sub.i402 = sub i64 %sub.ptr.lhs.cast.i400, %sub.ptr.rhs.cast.i.i348
  %cmp85 = icmp ult i64 %sub.ptr.sub.i402, 35
  br i1 %cmp85, label %while.body86, label %while.end88, !llvm.loop !354

while.end88:                                      ; preds = %while.body86, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit
  %sstr.sroa.19.5.lcssa = phi i8* [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ], [ %call.i408, %while.body86 ]
  %28 = load i64, i64* %time, align 8, !tbaa !336
  %cmp90.not = icmp eq i64 %28, 0
  br i1 %cmp90.not, label %if.end97, label %if.then91

if.then91:                                        ; preds = %while.end88
  %29 = load i64, i64* %time75, align 8, !tbaa !351
  %mul93 = mul i64 %29, 100
  %div95 = udiv i64 %mul93, %28
  br label %if.end97

if.end97:                                         ; preds = %if.then91, %while.end88
  %percent.0 = phi i64 [ %div95, %if.then91 ], [ 0, %while.end88 ]
  %call.i411 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #13
  %sext = shl i64 %percent.0, 32
  %conv.i414 = ashr exact i64 %sext, 32
  %call.i415 = tail call i8* @halide_int64_to_string(i8* %call.i411, i8* %sstr.sroa.125.0, i64 %conv.i414, i32 1) #13
  %call.i418 = tail call i8* @halide_string_to_string(i8* %call.i415, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23.180, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i419601 = ptrtoint i8* %call.i418 to i64
  %sub.ptr.sub.i421602 = sub i64 %sub.ptr.lhs.cast.i419601, %sub.ptr.rhs.cast.i.i348
  %cmp104603 = icmp ult i64 %sub.ptr.sub.i421602, 43
  br i1 %cmp104603, label %while.body105, label %while.end107

while.body105:                                    ; preds = %if.end97, %while.body105
  %sstr.sroa.19.6604 = phi i8* [ %call.i427, %while.body105 ], [ %call.i418, %if.end97 ]
  %call.i427 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6604, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i419 = ptrtoint i8* %call.i427 to i64
  %sub.ptr.sub.i421 = sub i64 %sub.ptr.lhs.cast.i419, %sub.ptr.rhs.cast.i.i348
  %cmp104 = icmp ult i64 %sub.ptr.sub.i421, 43
  br i1 %cmp104, label %while.body105, label %while.end107, !llvm.loop !355

while.end107:                                     ; preds = %while.body105, %if.end97
  %sstr.sroa.19.6.lcssa = phi i8* [ %call.i418, %if.end97 ], [ %call.i427, %while.body105 ]
  br i1 %10, label %if.end127, label %if.then109

if.then109:                                       ; preds = %while.end107
  %active_threads_numerator111 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 5
  %30 = load i64, i64* %active_threads_numerator111, align 8, !tbaa !356
  %conv112 = uitofp i64 %30 to double
  %active_threads_denominator113 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 6
  %31 = load i64, i64* %active_threads_denominator113, align 8, !tbaa !357
  %conv114 = uitofp i64 %31 to double
  %add115 = fadd double %conv114, 1.000000e-10
  %div116 = fdiv double %conv112, %add115
  %conv117 = fptrunc double %div116 to float
  %call.i430 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.181, i64 0, i64 0)) #13
  %conv.i433 = fpext float %conv117 to double
  %call.i434 = tail call i8* @halide_double_to_string(i8* %call.i430, i8* %sstr.sroa.125.0, double %conv.i433, i32 0) #13
  %tobool.not.i436 = icmp eq i8* %call.i434, null
  br i1 %tobool.not.i436, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, label %if.then.i441

if.then.i441:                                     ; preds = %if.then109
  %add.ptr.i437 = getelementptr inbounds i8, i8* %call.i434, i64 -3
  %cmp.i439 = icmp ult i8* %add.ptr.i437, %call.i
  %spec.store.select.i440 = select i1 %cmp.i439, i8* %call.i, i8* %add.ptr.i437
  store i8 0, i8* %spec.store.select.i440, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442: ; preds = %if.then.i441, %if.then109
  %sstr.sroa.19.7 = phi i8* [ null, %if.then109 ], [ %spec.store.select.i440, %if.then.i441 ]
  %sub.ptr.lhs.cast.i447606 = ptrtoint i8* %sstr.sroa.19.7 to i64
  %sub.ptr.sub.i449607 = sub i64 %sub.ptr.lhs.cast.i447606, %sub.ptr.rhs.cast.i.i348
  %cmp123608 = icmp ult i64 %sub.ptr.sub.i449607, 58
  br i1 %cmp123608, label %while.body124, label %if.end127

while.body124:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.body124
  %sstr.sroa.19.8609 = phi i8* [ %call.i455, %while.body124 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ]
  %call.i455 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.8609, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i447 = ptrtoint i8* %call.i455 to i64
  %sub.ptr.sub.i449 = sub i64 %sub.ptr.lhs.cast.i447, %sub.ptr.rhs.cast.i.i348
  %cmp123 = icmp ult i64 %sub.ptr.sub.i449, 58
  br i1 %cmp123, label %while.body124, label %if.end127, !llvm.loop !358

if.end127:                                        ; preds = %while.body124, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.end107
  %sstr.sroa.19.9 = phi i8* [ %sstr.sroa.19.6.lcssa, %while.end107 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ %call.i455, %while.body124 ]
  %cursor.0 = phi i64 [ 58, %while.end107 ], [ 73, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ 73, %while.body124 ]
  %memory_peak128 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 2
  %32 = load i64, i64* %memory_peak128, align 8, !tbaa !359
  %tobool129.not = icmp eq i64 %32, 0
  br i1 %tobool129.not, label %if.end162, label %if.then130

if.then130:                                       ; preds = %if.end127
  %call.i458 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.9, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25.182, i64 0, i64 0)) #13
  %33 = load i64, i64* %memory_peak128, align 8, !tbaa !359
  %call.i461 = tail call i8* @halide_uint64_to_string(i8* %call.i458, i8* %sstr.sroa.125.0, i64 %33, i32 1) #13
  %sub.ptr.lhs.cast.i462611 = ptrtoint i8* %call.i461 to i64
  %sub.ptr.sub.i464612 = sub i64 %sub.ptr.lhs.cast.i462611, %sub.ptr.rhs.cast.i.i348
  %cmp137613 = icmp ult i64 %sub.ptr.sub.i464612, %cursor.0
  br i1 %cmp137613, label %while.body138, label %while.end140

while.body138:                                    ; preds = %if.then130, %while.body138
  %sstr.sroa.19.10614 = phi i8* [ %call.i470, %while.body138 ], [ %call.i461, %if.then130 ]
  %call.i470 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10614, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i462 = ptrtoint i8* %call.i470 to i64
  %sub.ptr.sub.i464 = sub i64 %sub.ptr.lhs.cast.i462, %sub.ptr.rhs.cast.i.i348
  %cmp137 = icmp ult i64 %sub.ptr.sub.i464, %cursor.0
  br i1 %cmp137, label %while.body138, label %while.end140, !llvm.loop !360

while.end140:                                     ; preds = %while.body138, %if.then130
  %sstr.sroa.19.10.lcssa = phi i8* [ %call.i461, %if.then130 ], [ %call.i470, %while.body138 ]
  %call.i473 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26.183, i64 0, i64 0)) #13
  %num_allocs142 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 8
  %34 = load i32, i32* %num_allocs142, align 8, !tbaa !361
  %conv.i476 = sext i32 %34 to i64
  %call.i477 = tail call i8* @halide_int64_to_string(i8* %call.i473, i8* %sstr.sroa.125.0, i64 %conv.i476, i32 1) #13
  %add144 = add nuw nsw i64 %cursor.0, 15
  %sub.ptr.lhs.cast.i478616 = ptrtoint i8* %call.i477 to i64
  %sub.ptr.sub.i480617 = sub i64 %sub.ptr.lhs.cast.i478616, %sub.ptr.rhs.cast.i.i348
  %cmp147618 = icmp ult i64 %sub.ptr.sub.i480617, %add144
  br i1 %cmp147618, label %while.body148, label %while.end150

while.body148:                                    ; preds = %while.end140, %while.body148
  %sstr.sroa.19.11619 = phi i8* [ %call.i467, %while.body148 ], [ %call.i477, %while.end140 ]
  %call.i467 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11619, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i478 = ptrtoint i8* %call.i467 to i64
  %sub.ptr.sub.i480 = sub i64 %sub.ptr.lhs.cast.i478, %sub.ptr.rhs.cast.i.i348
  %cmp147 = icmp ult i64 %sub.ptr.sub.i480, %add144
  br i1 %cmp147, label %while.body148, label %while.end150, !llvm.loop !362

while.end150:                                     ; preds = %while.body148, %while.end140
  %sstr.sroa.19.11.lcssa = phi i8* [ %call.i477, %while.end140 ], [ %call.i467, %while.body148 ]
  %35 = load i32, i32* %num_allocs142, align 8, !tbaa !361
  %cmp152.not = icmp eq i32 %35, 0
  br i1 %cmp152.not, label %if.end159, label %if.then153

if.then153:                                       ; preds = %while.end150
  %memory_total154 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 3
  %36 = load i64, i64* %memory_total154, align 8, !tbaa !363
  %conv156 = sext i32 %35 to i64
  %div157 = udiv i64 %36, %conv156
  br label %if.end159

if.end159:                                        ; preds = %if.then153, %while.end150
  %alloc_avg.0 = phi i64 [ %div157, %if.then153 ], [ 0, %while.end150 ]
  %call.i452 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27.184, i64 0, i64 0)) #13
  %sext586 = shl i64 %alloc_avg.0, 32
  %conv.i445 = ashr exact i64 %sext586, 32
  %call.i446 = tail call i8* @halide_int64_to_string(i8* %call.i452, i8* %sstr.sroa.125.0, i64 %conv.i445, i32 1) #13
  br label %if.end162

if.end162:                                        ; preds = %if.end159, %if.end127
  %sstr.sroa.19.12 = phi i8* [ %sstr.sroa.19.9, %if.end127 ], [ %call.i446, %if.end159 ]
  %stack_peak163 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 4
  %37 = load i64, i64* %stack_peak163, align 8, !tbaa !349
  %cmp164.not = icmp eq i64 %37, 0
  br i1 %cmp164.not, label %if.end169, label %if.then165

if.then165:                                       ; preds = %if.end162
  %call.i424 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.12, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28.185, i64 0, i64 0)) #13
  %38 = load i64, i64* %stack_peak163, align 8, !tbaa !349
  %call.i405 = tail call i8* @halide_uint64_to_string(i8* %call.i424, i8* %sstr.sroa.125.0, i64 %38, i32 1) #13
  br label %if.end169

if.end169:                                        ; preds = %if.then165, %if.end162
  %sstr.sroa.19.13 = phi i8* [ %sstr.sroa.19.12, %if.end162 ], [ %call.i405, %if.then165 ]
  %call.i396 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.13, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, label %if.then.i379

if.then.i379:                                     ; preds = %if.end169
  %sub.ptr.lhs.cast.i.i374 = ptrtoint i8* %call.i396 to i64
  %add.i.i377 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i374
  %call.i.i378 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i377) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381: ; preds = %if.then.i379, %if.end169
  %retval.0.i380 = phi i8* [ %call.i, %if.then.i379 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end169 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i380) #13
  br label %cleanup172

cleanup172:                                       ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, %land.lhs.true
  %sstr.sroa.19.14 = phi i8* [ %call.i, %land.lhs.true ], [ %call.i396, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381 ]
  %indvars.iv.next631 = add nuw nsw i64 %indvars.iv630, 1
  %39 = load i32, i32* %num_funcs54, align 8, !tbaa !346
  %40 = sext i32 %39 to i64
  %cmp55 = icmp slt i64 %indvars.iv.next631, %40
  br i1 %cmp55, label %for.body57, label %cleanup181, !llvm.loop !364

cleanup181:                                       ; preds = %for.cond41, %cleanup172, %for.cond53.preheader, %for.cond41.preheader, %for.body
  %sstr.sroa.19.15 = phi i8* [ %sstr.sroa.19.0626, %for.body ], [ %call.i344, %for.cond53.preheader ], [ %call.i344, %for.cond41.preheader ], [ %sstr.sroa.19.14, %cleanup172 ], [ %call.i344, %for.cond41 ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 8
  %41 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %41, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.cond.cleanup, label %for.body, !llvm.loop !365
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %s) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !366
  %tobool.not9 = icmp eq %struct.halide_profiler_pipeline_stats* %0, null
  br i1 %tobool.not9, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %1 = phi %struct.halide_profiler_pipeline_stats* [ %7, %while.body ], [ %0, %entry ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %3 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !367
  store %struct.halide_profiler_pipeline_stats* %3, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !366
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 7
  %4 = bitcast %struct.halide_profiler_func_stats** %funcs to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !347
  tail call void @free(i8* %5) #13
  %6 = bitcast %struct.halide_profiler_pipeline_stats* %1 to i8*
  tail call void @free(i8* nonnull %6) #13
  %7 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !366
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %7, null
  br i1 %tobool.not, label %while.end, label %while.body, !llvm.loop !368

while.end:                                        ; preds = %while.body, %entry
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 2
  store i32 0, i32* %first_free_id, align 4, !tbaa !369
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #14
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.0121 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not122 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0121, null
  br i1 %tobool.not122, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.0123 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.0121, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !341
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %num_funcs1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 9
  %1 = load i32, i32* %num_funcs1, align 8, !tbaa !346
  %cmp2 = icmp eq i32 %1, %num_funcs
  br i1 %cmp2, label %cleanup62, label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.end, label %for.body, !llvm.loop !370

for.end:                                          ; preds = %for.inc, %entry
  %call4 = tail call i8* @malloc(i64 96) #13
  %3 = bitcast i8* %call4 to %struct.halide_profiler_pipeline_stats*
  %tobool5.not = icmp eq i8* %call4, null
  br i1 %tobool5.not, label %cleanup62, label %if.end7

if.end7:                                          ; preds = %for.end
  %4 = bitcast %struct.halide_profiler_pipeline_stats** %pipelines to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !366
  %next9 = getelementptr inbounds i8, i8* %call4, i64 64
  %6 = bitcast i8* %next9 to i8**
  store i8* %5, i8** %6, align 8, !tbaa !367
  %name10 = getelementptr inbounds i8, i8* %call4, i64 48
  %7 = bitcast i8* %name10 to i8**
  store i8* %pipeline_name, i8** %7, align 8, !tbaa !341
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 2
  %8 = load i32, i32* %first_free_id, align 4, !tbaa !369
  %first_func_id = getelementptr inbounds i8, i8* %call4, i64 76
  %9 = bitcast i8* %first_func_id to i32*
  store i32 %8, i32* %9, align 4, !tbaa !371
  %num_funcs11 = getelementptr inbounds i8, i8* %call4, i64 72
  %10 = bitcast i8* %num_funcs11 to i32*
  store i32 %num_funcs, i32* %10, align 8, !tbaa !346
  %runs = getelementptr inbounds i8, i8* %call4, i64 80
  %11 = bitcast i8* %runs to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %11, align 8, !tbaa !37
  %12 = bitcast i8* %call4 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %12, align 8, !tbaa !18
  %memory_peak = getelementptr inbounds i8, i8* %call4, i64 16
  %13 = bitcast i8* %memory_peak to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %13, align 8, !tbaa !18
  %num_allocs = getelementptr inbounds i8, i8* %call4, i64 88
  %14 = bitcast i8* %num_allocs to i32*
  store i32 0, i32* %14, align 8, !tbaa !343
  %active_threads_numerator = getelementptr inbounds i8, i8* %call4, i64 32
  %15 = bitcast i8* %active_threads_numerator to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !18
  %conv = sext i32 %num_funcs to i64
  %mul = mul nsw i64 %conv, 72
  %call12 = tail call i8* @malloc(i64 %mul) #13
  %funcs = getelementptr inbounds i8, i8* %call4, i64 56
  %16 = bitcast i8* %funcs to i8**
  store i8* %call12, i8** %16, align 8, !tbaa !347
  %tobool14.not = icmp eq i8* %call12, null
  %17 = bitcast i8* %call12 to %struct.halide_profiler_func_stats*
  br i1 %tobool14.not, label %if.then15, label %for.cond17.preheader

for.cond17.preheader:                             ; preds = %if.end7
  %cmp18119 = icmp sgt i32 %num_funcs, 0
  br i1 %cmp18119, label %for.body20.lr.ph, label %for.cond.cleanup19

for.body20.lr.ph:                                 ; preds = %for.cond17.preheader
  %wide.trip.count = zext i32 %num_funcs to i64
  br label %for.body20

if.then15:                                        ; preds = %if.end7
  tail call void @free(i8* nonnull %call4) #13
  br label %cleanup62

for.cond.cleanup19:                               ; preds = %for.body20, %for.cond17.preheader
  %18 = load i32, i32* %first_free_id, align 4, !tbaa !369
  %add = add nsw i32 %18, %num_funcs
  store i32 %add, i32* %first_free_id, align 4, !tbaa !369
  store i8* %call4, i8** %4, align 8, !tbaa !366
  br label %cleanup62

for.body20:                                       ; preds = %for.body20, %for.body20.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body20.lr.ph ], [ %indvars.iv.next, %for.body20 ]
  %time22 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 0
  store i64 0, i64* %time22, align 8, !tbaa !351
  %arrayidx24 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv
  %19 = load i64, i64* %arrayidx24, align 8, !tbaa !18
  %20 = inttoptr i64 %19 to i8*
  %name28 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 7
  store i8* %20, i8** %name28, align 8, !tbaa !352
  %memory_current32 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 1
  %21 = bitcast i64* %memory_current32 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %21, align 8, !tbaa !18
  %memory_total40 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 3
  %num_allocs44 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 8
  store i32 0, i32* %num_allocs44, align 8, !tbaa !361
  %22 = bitcast i64* %memory_total40 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !18
  %active_threads_numerator51 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 5
  %23 = bitcast i64* %active_threads_numerator51 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %23, align 8, !tbaa !18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup19, label %for.body20, !llvm.loop !372

cleanup62:                                        ; preds = %land.lhs.true, %for.cond.cleanup19, %if.then15, %for.end
  %retval.2 = phi %struct.halide_profiler_pipeline_stats* [ %3, %for.cond.cleanup19 ], [ null, %if.then15 ], [ null, %for.end ], [ %p.0123, %land.lhs.true ]
  ret %struct.halide_profiler_pipeline_stats* %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* %s, i32 %func_id, i64 %time, i32 %active_threads) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.055 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not56 = icmp eq %struct.halide_profiler_pipeline_stats* %p.055, null
  br i1 %tobool.not56, label %cleanup25, label %for.body

for.body:                                         ; preds = %entry, %if.end23
  %p.058 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %if.end23 ], [ %p.055, %entry ]
  %p_prev.057 = phi %struct.halide_profiler_pipeline_stats* [ %p.058, %if.end23 ], [ null, %entry ]
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 10
  %0 = load i32, i32* %first_func_id, align 4, !tbaa !371
  %cmp.not = icmp sgt i32 %0, %func_id
  br i1 %cmp.not, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 9
  %1 = load i32, i32* %num_funcs, align 8, !tbaa !346
  %add = add nsw i32 %1, %0
  %cmp2 = icmp sgt i32 %add, %func_id
  br i1 %cmp2, label %if.then, label %if.end23

if.then:                                          ; preds = %land.lhs.true
  %tobool3.not = icmp eq %struct.halide_profiler_pipeline_stats* %p_prev.057, null
  br i1 %tobool3.not, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %2 = load i8*, i8** %next, align 8, !tbaa !367
  %next5 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p_prev.057, i64 0, i32 8
  store i8* %2, i8** %next5, align 8, !tbaa !367
  %3 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  store %struct.halide_profiler_pipeline_stats* %p.055, %struct.halide_profiler_pipeline_stats** %3, align 8, !tbaa !367
  store %struct.halide_profiler_pipeline_stats* %p.058, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !366
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 7
  %4 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !347
  %idx.ext = sext i32 %func_id to i64
  %add.ptr = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %4, i64 %idx.ext
  %idx.ext10 = sext i32 %0 to i64
  %idx.neg = sub nsw i64 0, %idx.ext10
  %add.ptr11 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr, i64 %idx.neg
  %time12 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 0
  %5 = load i64, i64* %time12, align 8, !tbaa !351
  %add13 = add i64 %5, %time
  store i64 %add13, i64* %time12, align 8, !tbaa !351
  %conv = sext i32 %active_threads to i64
  %active_threads_numerator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 5
  %6 = load i64, i64* %active_threads_numerator, align 8, !tbaa !356
  %add14 = add i64 %6, %conv
  store i64 %add14, i64* %active_threads_numerator, align 8, !tbaa !356
  %active_threads_denominator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 6
  %7 = load i64, i64* %active_threads_denominator, align 8, !tbaa !357
  %add15 = add i64 %7, 1
  store i64 %add15, i64* %active_threads_denominator, align 8, !tbaa !357
  %time16 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 0
  %8 = load i64, i64* %time16, align 8, !tbaa !336
  %add17 = add i64 %8, %time
  store i64 %add17, i64* %time16, align 8, !tbaa !336
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 12
  %9 = load i32, i32* %samples, align 4, !tbaa !342
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %samples, align 4, !tbaa !342
  %active_threads_numerator19 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 4
  %10 = load i64, i64* %active_threads_numerator19, align 8, !tbaa !339
  %add20 = add i64 %10, %conv
  store i64 %add20, i64* %active_threads_numerator19, align 8, !tbaa !339
  %active_threads_denominator21 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 5
  %11 = load i64, i64* %active_threads_denominator21, align 8, !tbaa !340
  %add22 = add i64 %11, 1
  store i64 %add22, i64* %active_threads_denominator21, align 8, !tbaa !340
  ret void

if.end23:                                         ; preds = %land.lhs.true, %for.body
  %next24 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %12 = bitcast i8** %next24 to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %12, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup25, label %for.body, !llvm.loop !373

cleanup25:                                        ; preds = %if.end23, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_profiler_sample(%struct.halide_profiler_state* %s, i64* %prev_t) local_unnamed_addr #0 {
entry:
  %func = alloca i32, align 4
  %active_threads = alloca i32, align 4
  %0 = bitcast i32* %func to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  %1 = bitcast i32* %active_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  %get_remote_profiler_state = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 6
  %2 = load void (i32*, i32*)*, void (i32*, i32*)** %get_remote_profiler_state, align 8, !tbaa !374
  %tobool.not = icmp eq void (i32*, i32*)* %2, null
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void %2(i32* nonnull %func, i32* nonnull %active_threads) #13
  br label %if.end

if.else:                                          ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 3
  %3 = load i32, i32* %current_func, align 8, !tbaa !335
  store i32 %3, i32* %func, align 4, !tbaa !37
  %active_threads2 = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 4
  %4 = load i32, i32* %active_threads2, align 4, !tbaa !375
  store i32 %4, i32* %active_threads, align 4, !tbaa !37
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call = call i64 @halide_current_time_ns(i8* null) #13
  %5 = load i32, i32* %func, align 4, !tbaa !37
  %cmp = icmp eq i32 %5, -2
  br i1 %cmp, label %cleanup, label %if.else4

if.else4:                                         ; preds = %if.end
  %cmp5 = icmp sgt i32 %5, -1
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.else4
  %6 = load i64, i64* %prev_t, align 8, !tbaa !18
  %sub = sub i64 %call, %6
  %7 = load i32, i32* %active_threads, align 4, !tbaa !37
  call void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* nonnull %s, i32 %5, i64 %sub, i32 %7) #14
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.else4
  store i64 %call, i64* %prev_t, align 8, !tbaa !18
  %sleep_time = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 1
  %8 = load i32, i32* %sleep_time, align 8, !tbaa !376
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.end
  %retval.0 = phi i32 [ %8, %if.end8 ], [ -1, %if.end ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv(i8* %0) #4 {
entry:
  %t = alloca i64, align 8
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #14
  %lock = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock) #13
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  %1 = load i32, i32* %current_func, align 8, !tbaa !335
  %cmp.not23 = icmp eq i32 %1, -2
  br i1 %cmp.not23, label %while.end8, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %2 = bitcast i64* %t to i8*
  br label %while.body

while.body:                                       ; preds = %while.end, %while.body.lr.ph
  %call1 = call i64 @halide_current_time_ns(i8* null) #13
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #11
  store i64 %call1, i64* %t, align 8, !tbaa !18
  %call420 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* nonnull %call, i64* nonnull %t) #14
  %cmp521 = icmp slt i32 %call420, 0
  br i1 %cmp521, label %while.end, label %if.end

if.end:                                           ; preds = %while.body, %if.end
  %call422 = phi i32 [ %call4, %if.end ], [ %call420, %while.body ]
  call void @halide_mutex_unlock(%struct.halide_mutex* %lock) #13
  call void @halide_sleep_ms(i8* null, i32 %call422) #13
  call void @halide_mutex_lock(%struct.halide_mutex* %lock) #13
  %call4 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* %call, i64* nonnull %t) #14
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %while.end, label %if.end

while.end:                                        ; preds = %if.end, %while.body
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #11
  %3 = load i32, i32* %current_func, align 8, !tbaa !335
  %cmp.not = icmp eq i32 %3, -2
  br i1 %cmp.not, label %while.end8, label %while.body, !llvm.loop !377

while.end8:                                       ; preds = %while.end, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock) #13
  ret void
}

; Function Attrs: nounwind
define weak %struct.halide_profiler_pipeline_stats* @halide_profiler_get_pipeline_state(i8* %pipeline_name) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #14
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #13
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.013 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not14 = icmp eq %struct.halide_profiler_pipeline_stats* %p.013, null
  br i1 %tobool.not14, label %cleanup, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.015 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.013, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !341
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 8
  %1 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %1, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup, label %for.body, !llvm.loop !378

cleanup:                                          ; preds = %for.inc, %for.body, %entry
  %p.0.lcssa = phi %struct.halide_profiler_pipeline_stats* [ null, %entry ], [ null, %for.inc ], [ %p.015, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #13
  ret %struct.halide_profiler_pipeline_stats* %p.0.lcssa
}

; Function Attrs: nounwind
define weak i32 @halide_profiler_pipeline_start(i8* %user_context, i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #14
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #13
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !333
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @halide_start_clock(i8* %user_context) #13
  %call2 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv, i8* null) #13
  store %struct.halide_thread* %call2, %struct.halide_thread** %sampling_thread, align 8, !tbaa !333
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call4 = tail call %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) #14
  %tobool5.not = icmp eq %struct.halide_profiler_pipeline_stats* %call4, null
  br i1 %tobool5.not, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32 @halide_error_out_of_memory(i8* %user_context) #13
  br label %cleanup

if.end8:                                          ; preds = %if.end
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !338
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %runs, align 8, !tbaa !338
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 10
  %2 = load i32, i32* %first_func_id, align 4, !tbaa !371
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then6
  %retval.0 = phi i32 [ %2, %if.end8 ], [ %call7, %if.then6 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock.i) #13
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_stack_peak_update(i8* %user_context, i8* %pipeline_state, i64* %f_values) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp.not, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.186, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !346
  %cmp118 = icmp sgt i32 %1, 0
  br i1 %cmp118, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %do.end
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %do.end
  ret void

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %3 = phi i32 [ %1, %for.body.lr.ph ], [ %9, %for.inc ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i64, i64* %f_values, i64 %indvars.iv
  %4 = load i64, i64* %arrayidx, align 8, !tbaa !18
  %cmp2.not = icmp eq i64 %4, 0
  br i1 %cmp2.not, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %5 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !347
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %5, i64 %indvars.iv, i32 4
  %6 = load i64, i64* %stack_peak, align 8, !tbaa !18
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then3
  %old_val.0.i = phi i64 [ %6, %if.then3 ], [ %8, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %4
  br i1 %cmp.i, label %while.body.i, label %for.inc.loopexit

while.body.i:                                     ; preds = %while.cond.i
  %7 = cmpxchg i64* %stack_peak, i64 %old_val.0.i, i64 %4 seq_cst seq_cst
  %8 = extractvalue { i64, i1 } %7, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %8
  br i1 %cmp1.i, label %for.inc.loopexit, label %while.cond.i, !llvm.loop !379

for.inc.loopexit:                                 ; preds = %while.body.i, %while.cond.i
  %.pre = load i32, i32* %0, align 8, !tbaa !346
  br label %for.inc

for.inc:                                          ; preds = %for.inc.loopexit, %for.body
  %9 = phi i32 [ %.pre, %for.inc.loopexit ], [ %3, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = sext i32 %9 to i64
  %cmp1 = icmp slt i64 %indvars.iv.next, %10
  br i1 %cmp1, label %for.body, label %for.cond.cleanup, !llvm.loop !380
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_allocate(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %incr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %incr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.1.187, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.2.188, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !346
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.3.189, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !347
  %idxprom = sext i32 %func_id to i64
  %num_allocs = getelementptr inbounds i8, i8* %pipeline_state, i64 88
  %4 = bitcast i8* %num_allocs to i32*
  %5 = atomicrmw add i32* %4, i32 1 seq_cst
  %memory_total = getelementptr inbounds i8, i8* %pipeline_state, i64 24
  %6 = bitcast i8* %memory_total to i64*
  %7 = atomicrmw add i64* %6, i64 %incr seq_cst
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %8 = bitcast i8* %memory_current to i64*
  %9 = atomicrmw add i64* %8, i64 %incr seq_cst
  %10 = add i64 %9, %incr
  %memory_peak = getelementptr inbounds i8, i8* %pipeline_state, i64 16
  %11 = bitcast i8* %memory_peak to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !18
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %do.end15
  %old_val.0.i = phi i64 [ %12, %do.end15 ], [ %14, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %10
  br i1 %cmp.i, label %while.body.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit

while.body.i:                                     ; preds = %while.cond.i
  %13 = cmpxchg i64* %11, i64 %old_val.0.i, i64 %10 seq_cst seq_cst
  %14 = extractvalue { i64, i1 } %13, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %14
  br i1 %cmp1.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit, label %while.cond.i, !llvm.loop !379

_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit: ; preds = %while.body.i, %while.cond.i
  %num_allocs16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 8
  %15 = atomicrmw add i32* %num_allocs16, i32 1 seq_cst
  %memory_total17 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 3
  %16 = atomicrmw add i64* %memory_total17, i64 %incr seq_cst
  %memory_current18 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %17 = atomicrmw add i64* %memory_current18, i64 %incr seq_cst
  %18 = add i64 %17, %incr
  %memory_peak19 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 2
  %19 = load i64, i64* %memory_peak19, align 8, !tbaa !18
  br label %while.cond.i43

while.cond.i43:                                   ; preds = %while.body.i45, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit
  %old_val.0.i41 = phi i64 [ %19, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit ], [ %21, %while.body.i45 ]
  %cmp.i42 = icmp ult i64 %old_val.0.i41, %18
  br i1 %cmp.i42, label %while.body.i45, label %return

while.body.i45:                                   ; preds = %while.cond.i43
  %20 = cmpxchg i64* %memory_peak19, i64 %old_val.0.i41, i64 %18 seq_cst seq_cst
  %21 = extractvalue { i64, i1 } %20, 0
  %cmp1.i44 = icmp eq i64 %old_val.0.i41, %21
  br i1 %cmp1.i44, label %return, label %while.cond.i43, !llvm.loop !379

return:                                           ; preds = %while.body.i45, %while.cond.i43, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_free(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %decr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %decr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.190, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.5.191, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !346
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.6.192, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !347
  %idxprom = sext i32 %func_id to i64
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %4 = bitcast i8* %memory_current to i64*
  %5 = atomicrmw sub i64* %4, i64 %decr seq_cst
  %memory_current16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %6 = atomicrmw sub i64* %memory_current16, i64 %decr seq_cst
  br label %return

return:                                           ; preds = %do.end15, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_report(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #14
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #13
  tail call void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %call) #14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #13
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_reset() local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #14
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #13
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %call) #14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #13
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_profiler_pipeline_end(i8* %user_context, i8* %state) local_unnamed_addr #2 {
entry:
  %current_func = getelementptr inbounds i8, i8* %state, i64 16
  %0 = bitcast i8* %current_func to i32*
  store i32 -1, i32* %0, align 8, !tbaa !335
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #13
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #13
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i64 32) #13
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #13
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.197, i64 0, i64 0)) #13
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !18
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 0), align 8, !tbaa !18
  %and = and i64 %3, %2
  %cmp6.not = icmp eq i64 %and, 0
  br i1 %cmp6.not, label %for.inc.critedge, label %if.then7

if.then7:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 2), align 8, !tbaa !18
  %and10 = and i64 %4, %and
  %cmp11.not = icmp eq i64 %and10, %and
  br i1 %cmp11.not, label %for.inc.critedge, label %cleanup15

for.inc.critedge:                                 ; preds = %if.then7, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i64 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !18
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 1), align 8, !tbaa !18
  %and.1 = and i64 %6, %5
  %cmp6.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp6.not.1, label %for.inc.critedge.1, label %if.then7.1

cleanup15:                                        ; preds = %for.inc.critedge.1, %if.then7.1, %if.then7
  %cmp3.lcssa = phi i32 [ 0, %if.then7 ], [ 0, %if.then7.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then7.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 3), align 8, !tbaa !18
  %and10.1 = and i64 %7, %and.1
  %cmp11.not.1 = icmp eq i64 %and10.1, %and.1
  br i1 %cmp11.not.1, label %for.inc.critedge.1, label %cleanup15

for.inc.critedge.1:                               ; preds = %if.then7.1, %for.inc.critedge
  br label %cleanup15
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #13
  ret i32 %call
}

; Function Attrs: nounwind willreturn
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #8 {
entry:
  %arrayidx3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i64 0, i32 1, i64 0
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %0, align 8, !tbaa !18
  %1 = bitcast i64* %arrayidx3.i to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %1, align 8, !tbaa !18
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16>, <4 x i16>) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16>, <8 x i16>) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32>, <4 x i32>) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32>, <4 x i32>) #9

; Function Attrs: nounwind
define i32 @blur7x7_par_for_blur_y_s0_y_y(i8* %__user_context, i32 %blur_y.s0.y.y, i8* nocapture readonly %closure_arg) #10 {
entry:
  %0 = bitcast i8* %closure_arg to i8**
  %blur_y = load i8*, i8** %0, align 8
  %1 = getelementptr inbounds i8, i8* %closure_arg, i64 8
  %2 = bitcast i8* %1 to i8**
  %input = load i8*, i8** %2, align 8
  %3 = getelementptr inbounds i8, i8* %closure_arg, i64 16
  %4 = bitcast i8* %3 to i32*
  %b14 = load i32, i32* %4, align 4
  %5 = getelementptr inbounds i8, i8* %closure_arg, i64 20
  %6 = bitcast i8* %5 to i32*
  %blur_y.extent.1 = load i32, i32* %6, align 4
  %7 = getelementptr inbounds i8, i8* %closure_arg, i64 24
  %8 = bitcast i8* %7 to i32*
  %blur_y.stride.1 = load i32, i32* %8, align 4
  %9 = getelementptr inbounds i8, i8* %closure_arg, i64 28
  %10 = bitcast i8* %9 to i32*
  %input.extent.0 = load i32, i32* %10, align 4
  %11 = getelementptr inbounds i8, i8* %closure_arg, i64 32
  %12 = bitcast i8* %11 to i32*
  %b13 = load i32, i32* %12, align 4
  %13 = getelementptr inbounds i8, i8* %closure_arg, i64 36
  %14 = bitcast i8* %13 to i32*
  %input.stride.1 = load i32, i32* %14, align 4
  %15 = getelementptr inbounds i8, i8* %closure_arg, i64 40
  %16 = bitcast i8* %15 to i32*
  %t261 = load i32, i32* %16, align 4
  %17 = getelementptr inbounds i8, i8* %closure_arg, i64 44
  %18 = bitcast i8* %17 to i32*
  %t264 = load i32, i32* %18, align 4
  %19 = getelementptr inbounds i8, i8* %closure_arg, i64 48
  %20 = bitcast i8* %19 to i32*
  %t270 = load i32, i32* %20, align 4
  %21 = getelementptr inbounds i8, i8* %closure_arg, i64 52
  %22 = bitcast i8* %21 to i32*
  %t271 = load i32, i32* %22, align 4
  %23 = getelementptr inbounds i8, i8* %closure_arg, i64 56
  %24 = bitcast i8* %23 to i32*
  %a10 = load i32, i32* %24, align 4
  %25 = getelementptr inbounds i8, i8* %closure_arg, i64 60
  %26 = bitcast i8* %25 to i32*
  %t273 = load i32, i32* %26, align 4
  %27 = getelementptr inbounds i8, i8* %closure_arg, i64 64
  %28 = bitcast i8* %27 to i32*
  %t274 = load i32, i32* %28, align 4
  %29 = getelementptr inbounds i8, i8* %closure_arg, i64 68
  %30 = bitcast i8* %29 to i32*
  %t275 = load i32, i32* %30, align 4
  %31 = icmp sgt i32 %t261, %blur_y.s0.y.y
  %a0 = shl nsw i32 %blur_y.s0.y.y, 7
  %b2 = add nsw i32 %blur_y.extent.1, -128
  %32 = icmp slt i32 %a0, %b2
  %blur_y.s0.y.yi.base = select i1 %32, i32 %a0, i32 %b2
  %33 = icmp sgt i32 %a10, 0
  %34 = select i1 %33, i32 %a10, i32 0
  %t290 = zext i32 %34 to i64
  %35 = shl nuw nsw i64 %t290, 4
  %36 = or i64 %35, 6
  %37 = tail call i8* @halide_malloc(i8* %__user_context, i64 %36)
  %blur_x = bitcast i8* %37 to i16*
  br i1 %31, label %then_bb, label %next_bb

after_bb:                                         ; preds = %if.then.i141, %"end for blur_y.s0.y.yi.$n.rebased15", %if.then.i, %"end for blur_y.s0.y.yi.$n.rebased"
  %blur_y30 = load i8*, i8** %0, align 8
  %input31 = load i8*, i8** %2, align 8
  %b29 = load i32, i32* %4, align 4
  %blur_y.extent.132 = load i32, i32* %6, align 4
  %blur_y.stride.133 = load i32, i32* %8, align 4
  %input.extent.034 = load i32, i32* %10, align 4
  %b28 = load i32, i32* %12, align 4
  %input.stride.135 = load i32, i32* %14, align 4
  %t26136 = load i32, i32* %16, align 4
  %t26437 = load i32, i32* %18, align 4
  %t27038 = load i32, i32* %20, align 4
  %t27139 = load i32, i32* %22, align 4
  %a25 = load i32, i32* %24, align 4
  %t27340 = load i32, i32* %26, align 4
  %t27441 = load i32, i32* %28, align 4
  %t27542 = load i32, i32* %30, align 4
  %38 = icmp sgt i32 %t26136, %blur_y.s0.y.y
  %a15 = shl nsw i32 %blur_y.s0.y.y, 7
  %b17 = add nsw i32 %blur_y.extent.132, -128
  %39 = icmp slt i32 %a15, %b17
  %blur_y.s0.y.yi.base46 = select i1 %39, i32 %a15, i32 %b17
  %40 = icmp sgt i32 %a25, 0
  %41 = select i1 %40, i32 %a25, i32 0
  %t292 = zext i32 %41 to i64
  %42 = shl nuw nsw i64 %t292, 4
  %43 = or i64 %42, 6
  %44 = tail call i8* @halide_malloc(i8* %__user_context, i64 %43)
  %blur_x47 = bitcast i8* %44 to i16*
  br i1 %38, label %then_bb44, label %next_bb45

then_bb:                                          ; preds = %entry
  %t278 = sub nsw i32 %t273, %t264
  %45 = icmp sgt i32 %t275, 0
  %46 = add nsw i32 %input.extent.0, -1
  %47 = insertelement <64 x i32> undef, i32 %46, i32 0
  %48 = shufflevector <64 x i32> %47, <64 x i32> undef, <4 x i32> zeroinitializer
  %49 = bitcast i8* %input to i16*
  %50 = sext i32 %a10 to i64
  %51 = sext i32 %t274 to i64
  %t281 = sub nsw i32 %t264, %t275
  %52 = icmp sgt i32 %t281, 0
  %53 = icmp sgt i32 %t278, 0
  %54 = icmp sgt i32 %t271, 0
  %55 = sext i32 %blur_y.stride.1 to i64
  %56 = bitcast i8* %blur_y to i16*
  %57 = icmp sgt i32 %t270, %t271
  %58 = sext i32 %b14 to i64
  %59 = zext i32 %t281 to i64
  %60 = zext i32 %t271 to i64
  %61 = sext i32 %blur_y.s0.y.yi.base to i64
  br label %"for blur_y.s0.y.yi.$n.rebased"

next_bb:                                          ; preds = %entry
  %62 = icmp sgt i32 %t273, 0
  %63 = add nsw i32 %input.extent.0, -1
  %64 = insertelement <64 x i32> undef, i32 %63, i32 0
  %65 = shufflevector <64 x i32> %64, <64 x i32> undef, <4 x i32> zeroinitializer
  %66 = bitcast i8* %input to i16*
  %67 = icmp sgt i32 %t270, 0
  %b16 = add nsw i32 %b14, -64
  %68 = sext i32 %a10 to i64
  %69 = sext i32 %blur_y.stride.1 to i64
  %70 = bitcast i8* %blur_y to i16*
  %71 = sext i32 %blur_y.s0.y.yi.base to i64
  %72 = sext i32 %b13 to i64
  br label %"for blur_y.s0.y.yi.$n.rebased14"

"for blur_y.s0.y.yi.$n.rebased":                  ; preds = %then_bb, %after_bb6
  %indvars.iv175 = phi i64 [ 0, %then_bb ], [ %indvars.iv.next176, %after_bb6 ]
  %73 = add nsw i64 %indvars.iv175, %61
  br i1 %45, label %"for blur_x.s0.x.x.preheader", label %"end for blur_x.s0.x.x", !prof !381

"for blur_x.s0.x.x.preheader":                    ; preds = %"for blur_y.s0.y.yi.$n.rebased"
  %74 = icmp sgt i64 %73, 0
  %75 = select i1 %74, i64 %73, i64 0
  %76 = trunc i64 %75 to i32
  %77 = mul nsw i32 %input.stride.1, %76
  %78 = insertelement <64 x i32> undef, i32 %77, i32 0
  %t248 = shufflevector <64 x i32> %78, <64 x i32> undef, <64 x i32> zeroinitializer
  %79 = and i64 %73, 7
  %80 = mul nsw i64 %79, %50
  %81 = sub nsw i64 %80, %51
  br label %"for blur_x.s0.x.x"

"end for blur_y.s0.y.yi.$n.rebased":              ; preds = %after_bb6
  %tobool.not.i.not = icmp eq i8* %37, null
  br i1 %tobool.not.i.not, label %after_bb, label %if.then.i

if.then.i:                                        ; preds = %"end for blur_y.s0.y.yi.$n.rebased"
  tail call void @halide_free(i8* %__user_context, i8* nonnull %37) #13
  br label %after_bb

"for blur_x.s0.x.x":                              ; preds = %"for blur_x.s0.x.x.preheader", %"for blur_x.s0.x.x"
  %blur_x.s0.x.x = phi i32 [ %2948, %"for blur_x.s0.x.x" ], [ 0, %"for blur_x.s0.x.x.preheader" ]
  %82 = shl nsw i32 %blur_x.s0.x.x, 6
  %a3 = add nsw i32 %82, %t274
  %83 = icmp slt i32 %a3, %b14
  %blur_x.s0.x.v1.base.s = select i1 %83, i32 %a3, i32 %b14
  %84 = add nsw i32 %blur_x.s0.x.v1.base.s, -63
  %85 = insertelement <64 x i32> undef, i32 %84, i32 0
  %86 = shufflevector <64 x i32> %85, <64 x i32> undef, <64 x i32> zeroinitializer
  %87 = add nsw <64 x i32> %86, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %88 = shufflevector <64 x i32> %87, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %89 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %88, <4 x i32> %48)
  %90 = shufflevector <64 x i32> %87, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %91 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %90, <4 x i32> %48)
  %92 = shufflevector <64 x i32> %87, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %93 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %92, <4 x i32> %48)
  %94 = shufflevector <64 x i32> %87, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %95 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %94, <4 x i32> %48)
  %96 = shufflevector <64 x i32> %87, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %97 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %96, <4 x i32> %48)
  %98 = shufflevector <64 x i32> %87, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %99 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %98, <4 x i32> %48)
  %100 = shufflevector <64 x i32> %87, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %101 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %100, <4 x i32> %48)
  %102 = shufflevector <64 x i32> %87, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %103 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %102, <4 x i32> %48)
  %104 = shufflevector <64 x i32> %87, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %105 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %104, <4 x i32> %48)
  %106 = shufflevector <64 x i32> %87, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %107 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %106, <4 x i32> %48)
  %108 = shufflevector <64 x i32> %87, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %109 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %108, <4 x i32> %48)
  %110 = shufflevector <64 x i32> %87, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %111 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %110, <4 x i32> %48)
  %112 = shufflevector <64 x i32> %87, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %113 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %112, <4 x i32> %48)
  %114 = shufflevector <64 x i32> %87, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %115 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %114, <4 x i32> %48)
  %116 = shufflevector <64 x i32> %87, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %117 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %116, <4 x i32> %48)
  %118 = shufflevector <64 x i32> %87, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %119 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %118, <4 x i32> %48)
  %120 = shufflevector <4 x i32> %119, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %121 = shufflevector <8 x i32> %120, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %122 = shufflevector <16 x i32> %121, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %123 = shufflevector <32 x i32> %122, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %124 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %89, <4 x i32> zeroinitializer)
  %125 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %91, <4 x i32> zeroinitializer)
  %126 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %93, <4 x i32> zeroinitializer)
  %127 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %95, <4 x i32> zeroinitializer)
  %128 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %97, <4 x i32> zeroinitializer)
  %129 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %99, <4 x i32> zeroinitializer)
  %130 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %101, <4 x i32> zeroinitializer)
  %131 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %103, <4 x i32> zeroinitializer)
  %132 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %105, <4 x i32> zeroinitializer)
  %133 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %107, <4 x i32> zeroinitializer)
  %134 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %109, <4 x i32> zeroinitializer)
  %135 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %111, <4 x i32> zeroinitializer)
  %136 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %113, <4 x i32> zeroinitializer)
  %137 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %115, <4 x i32> zeroinitializer)
  %138 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %117, <4 x i32> zeroinitializer)
  %139 = shufflevector <64 x i32> %123, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %140 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %139, <4 x i32> zeroinitializer)
  %141 = shufflevector <4 x i32> %124, <4 x i32> %125, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %142 = shufflevector <4 x i32> %126, <4 x i32> %127, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %143 = shufflevector <4 x i32> %128, <4 x i32> %129, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %144 = shufflevector <4 x i32> %130, <4 x i32> %131, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %145 = shufflevector <4 x i32> %132, <4 x i32> %133, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %146 = shufflevector <4 x i32> %134, <4 x i32> %135, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %147 = shufflevector <4 x i32> %136, <4 x i32> %137, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %148 = shufflevector <4 x i32> %138, <4 x i32> %140, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %149 = shufflevector <8 x i32> %141, <8 x i32> %142, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %150 = shufflevector <8 x i32> %143, <8 x i32> %144, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %151 = shufflevector <8 x i32> %145, <8 x i32> %146, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %152 = shufflevector <8 x i32> %147, <8 x i32> %148, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %153 = shufflevector <16 x i32> %149, <16 x i32> %150, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %154 = shufflevector <16 x i32> %151, <16 x i32> %152, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %155 = shufflevector <32 x i32> %153, <32 x i32> %154, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %156 = add nsw <64 x i32> %155, %t248
  %157 = extractelement <64 x i32> %156, i32 0
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds i16, i16* %49, i64 %158
  %160 = load i16, i16* %159, align 2, !tbaa !382
  %161 = insertelement <64 x i16> undef, i16 %160, i32 0
  %162 = extractelement <64 x i32> %156, i32 1
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds i16, i16* %49, i64 %163
  %165 = load i16, i16* %164, align 2, !tbaa !382
  %166 = insertelement <64 x i16> %161, i16 %165, i32 1
  %167 = extractelement <64 x i32> %156, i32 2
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds i16, i16* %49, i64 %168
  %170 = load i16, i16* %169, align 2, !tbaa !382
  %171 = insertelement <64 x i16> %166, i16 %170, i32 2
  %172 = extractelement <64 x i32> %156, i32 3
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds i16, i16* %49, i64 %173
  %175 = load i16, i16* %174, align 2, !tbaa !382
  %176 = insertelement <64 x i16> %171, i16 %175, i32 3
  %177 = extractelement <64 x i32> %156, i32 4
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i16, i16* %49, i64 %178
  %180 = load i16, i16* %179, align 2, !tbaa !382
  %181 = insertelement <64 x i16> %176, i16 %180, i32 4
  %182 = extractelement <64 x i32> %156, i32 5
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds i16, i16* %49, i64 %183
  %185 = load i16, i16* %184, align 2, !tbaa !382
  %186 = insertelement <64 x i16> %181, i16 %185, i32 5
  %187 = extractelement <64 x i32> %156, i32 6
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i16, i16* %49, i64 %188
  %190 = load i16, i16* %189, align 2, !tbaa !382
  %191 = insertelement <64 x i16> %186, i16 %190, i32 6
  %192 = extractelement <64 x i32> %156, i32 7
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds i16, i16* %49, i64 %193
  %195 = load i16, i16* %194, align 2, !tbaa !382
  %196 = insertelement <64 x i16> %191, i16 %195, i32 7
  %197 = extractelement <64 x i32> %156, i32 8
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds i16, i16* %49, i64 %198
  %200 = load i16, i16* %199, align 2, !tbaa !382
  %201 = insertelement <64 x i16> %196, i16 %200, i32 8
  %202 = extractelement <64 x i32> %156, i32 9
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds i16, i16* %49, i64 %203
  %205 = load i16, i16* %204, align 2, !tbaa !382
  %206 = insertelement <64 x i16> %201, i16 %205, i32 9
  %207 = extractelement <64 x i32> %156, i32 10
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds i16, i16* %49, i64 %208
  %210 = load i16, i16* %209, align 2, !tbaa !382
  %211 = insertelement <64 x i16> %206, i16 %210, i32 10
  %212 = extractelement <64 x i32> %156, i32 11
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds i16, i16* %49, i64 %213
  %215 = load i16, i16* %214, align 2, !tbaa !382
  %216 = insertelement <64 x i16> %211, i16 %215, i32 11
  %217 = extractelement <64 x i32> %156, i32 12
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds i16, i16* %49, i64 %218
  %220 = load i16, i16* %219, align 2, !tbaa !382
  %221 = insertelement <64 x i16> %216, i16 %220, i32 12
  %222 = extractelement <64 x i32> %156, i32 13
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds i16, i16* %49, i64 %223
  %225 = load i16, i16* %224, align 2, !tbaa !382
  %226 = insertelement <64 x i16> %221, i16 %225, i32 13
  %227 = extractelement <64 x i32> %156, i32 14
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds i16, i16* %49, i64 %228
  %230 = load i16, i16* %229, align 2, !tbaa !382
  %231 = insertelement <64 x i16> %226, i16 %230, i32 14
  %232 = extractelement <64 x i32> %156, i32 15
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds i16, i16* %49, i64 %233
  %235 = load i16, i16* %234, align 2, !tbaa !382
  %236 = insertelement <64 x i16> %231, i16 %235, i32 15
  %237 = extractelement <64 x i32> %156, i32 16
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds i16, i16* %49, i64 %238
  %240 = load i16, i16* %239, align 2, !tbaa !382
  %241 = insertelement <64 x i16> %236, i16 %240, i32 16
  %242 = extractelement <64 x i32> %156, i32 17
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds i16, i16* %49, i64 %243
  %245 = load i16, i16* %244, align 2, !tbaa !382
  %246 = insertelement <64 x i16> %241, i16 %245, i32 17
  %247 = extractelement <64 x i32> %156, i32 18
  %248 = sext i32 %247 to i64
  %249 = getelementptr inbounds i16, i16* %49, i64 %248
  %250 = load i16, i16* %249, align 2, !tbaa !382
  %251 = insertelement <64 x i16> %246, i16 %250, i32 18
  %252 = extractelement <64 x i32> %156, i32 19
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds i16, i16* %49, i64 %253
  %255 = load i16, i16* %254, align 2, !tbaa !382
  %256 = insertelement <64 x i16> %251, i16 %255, i32 19
  %257 = extractelement <64 x i32> %156, i32 20
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds i16, i16* %49, i64 %258
  %260 = load i16, i16* %259, align 2, !tbaa !382
  %261 = insertelement <64 x i16> %256, i16 %260, i32 20
  %262 = extractelement <64 x i32> %156, i32 21
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds i16, i16* %49, i64 %263
  %265 = load i16, i16* %264, align 2, !tbaa !382
  %266 = insertelement <64 x i16> %261, i16 %265, i32 21
  %267 = extractelement <64 x i32> %156, i32 22
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds i16, i16* %49, i64 %268
  %270 = load i16, i16* %269, align 2, !tbaa !382
  %271 = insertelement <64 x i16> %266, i16 %270, i32 22
  %272 = extractelement <64 x i32> %156, i32 23
  %273 = sext i32 %272 to i64
  %274 = getelementptr inbounds i16, i16* %49, i64 %273
  %275 = load i16, i16* %274, align 2, !tbaa !382
  %276 = insertelement <64 x i16> %271, i16 %275, i32 23
  %277 = extractelement <64 x i32> %156, i32 24
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds i16, i16* %49, i64 %278
  %280 = load i16, i16* %279, align 2, !tbaa !382
  %281 = insertelement <64 x i16> %276, i16 %280, i32 24
  %282 = extractelement <64 x i32> %156, i32 25
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds i16, i16* %49, i64 %283
  %285 = load i16, i16* %284, align 2, !tbaa !382
  %286 = insertelement <64 x i16> %281, i16 %285, i32 25
  %287 = extractelement <64 x i32> %156, i32 26
  %288 = sext i32 %287 to i64
  %289 = getelementptr inbounds i16, i16* %49, i64 %288
  %290 = load i16, i16* %289, align 2, !tbaa !382
  %291 = insertelement <64 x i16> %286, i16 %290, i32 26
  %292 = extractelement <64 x i32> %156, i32 27
  %293 = sext i32 %292 to i64
  %294 = getelementptr inbounds i16, i16* %49, i64 %293
  %295 = load i16, i16* %294, align 2, !tbaa !382
  %296 = insertelement <64 x i16> %291, i16 %295, i32 27
  %297 = extractelement <64 x i32> %156, i32 28
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds i16, i16* %49, i64 %298
  %300 = load i16, i16* %299, align 2, !tbaa !382
  %301 = insertelement <64 x i16> %296, i16 %300, i32 28
  %302 = extractelement <64 x i32> %156, i32 29
  %303 = sext i32 %302 to i64
  %304 = getelementptr inbounds i16, i16* %49, i64 %303
  %305 = load i16, i16* %304, align 2, !tbaa !382
  %306 = insertelement <64 x i16> %301, i16 %305, i32 29
  %307 = extractelement <64 x i32> %156, i32 30
  %308 = sext i32 %307 to i64
  %309 = getelementptr inbounds i16, i16* %49, i64 %308
  %310 = load i16, i16* %309, align 2, !tbaa !382
  %311 = insertelement <64 x i16> %306, i16 %310, i32 30
  %312 = extractelement <64 x i32> %156, i32 31
  %313 = sext i32 %312 to i64
  %314 = getelementptr inbounds i16, i16* %49, i64 %313
  %315 = load i16, i16* %314, align 2, !tbaa !382
  %316 = insertelement <64 x i16> %311, i16 %315, i32 31
  %317 = extractelement <64 x i32> %156, i32 32
  %318 = sext i32 %317 to i64
  %319 = getelementptr inbounds i16, i16* %49, i64 %318
  %320 = load i16, i16* %319, align 2, !tbaa !382
  %321 = insertelement <64 x i16> %316, i16 %320, i32 32
  %322 = extractelement <64 x i32> %156, i32 33
  %323 = sext i32 %322 to i64
  %324 = getelementptr inbounds i16, i16* %49, i64 %323
  %325 = load i16, i16* %324, align 2, !tbaa !382
  %326 = insertelement <64 x i16> %321, i16 %325, i32 33
  %327 = extractelement <64 x i32> %156, i32 34
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds i16, i16* %49, i64 %328
  %330 = load i16, i16* %329, align 2, !tbaa !382
  %331 = insertelement <64 x i16> %326, i16 %330, i32 34
  %332 = extractelement <64 x i32> %156, i32 35
  %333 = sext i32 %332 to i64
  %334 = getelementptr inbounds i16, i16* %49, i64 %333
  %335 = load i16, i16* %334, align 2, !tbaa !382
  %336 = insertelement <64 x i16> %331, i16 %335, i32 35
  %337 = extractelement <64 x i32> %156, i32 36
  %338 = sext i32 %337 to i64
  %339 = getelementptr inbounds i16, i16* %49, i64 %338
  %340 = load i16, i16* %339, align 2, !tbaa !382
  %341 = insertelement <64 x i16> %336, i16 %340, i32 36
  %342 = extractelement <64 x i32> %156, i32 37
  %343 = sext i32 %342 to i64
  %344 = getelementptr inbounds i16, i16* %49, i64 %343
  %345 = load i16, i16* %344, align 2, !tbaa !382
  %346 = insertelement <64 x i16> %341, i16 %345, i32 37
  %347 = extractelement <64 x i32> %156, i32 38
  %348 = sext i32 %347 to i64
  %349 = getelementptr inbounds i16, i16* %49, i64 %348
  %350 = load i16, i16* %349, align 2, !tbaa !382
  %351 = insertelement <64 x i16> %346, i16 %350, i32 38
  %352 = extractelement <64 x i32> %156, i32 39
  %353 = sext i32 %352 to i64
  %354 = getelementptr inbounds i16, i16* %49, i64 %353
  %355 = load i16, i16* %354, align 2, !tbaa !382
  %356 = insertelement <64 x i16> %351, i16 %355, i32 39
  %357 = extractelement <64 x i32> %156, i32 40
  %358 = sext i32 %357 to i64
  %359 = getelementptr inbounds i16, i16* %49, i64 %358
  %360 = load i16, i16* %359, align 2, !tbaa !382
  %361 = insertelement <64 x i16> %356, i16 %360, i32 40
  %362 = extractelement <64 x i32> %156, i32 41
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds i16, i16* %49, i64 %363
  %365 = load i16, i16* %364, align 2, !tbaa !382
  %366 = insertelement <64 x i16> %361, i16 %365, i32 41
  %367 = extractelement <64 x i32> %156, i32 42
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds i16, i16* %49, i64 %368
  %370 = load i16, i16* %369, align 2, !tbaa !382
  %371 = insertelement <64 x i16> %366, i16 %370, i32 42
  %372 = extractelement <64 x i32> %156, i32 43
  %373 = sext i32 %372 to i64
  %374 = getelementptr inbounds i16, i16* %49, i64 %373
  %375 = load i16, i16* %374, align 2, !tbaa !382
  %376 = insertelement <64 x i16> %371, i16 %375, i32 43
  %377 = extractelement <64 x i32> %156, i32 44
  %378 = sext i32 %377 to i64
  %379 = getelementptr inbounds i16, i16* %49, i64 %378
  %380 = load i16, i16* %379, align 2, !tbaa !382
  %381 = insertelement <64 x i16> %376, i16 %380, i32 44
  %382 = extractelement <64 x i32> %156, i32 45
  %383 = sext i32 %382 to i64
  %384 = getelementptr inbounds i16, i16* %49, i64 %383
  %385 = load i16, i16* %384, align 2, !tbaa !382
  %386 = insertelement <64 x i16> %381, i16 %385, i32 45
  %387 = extractelement <64 x i32> %156, i32 46
  %388 = sext i32 %387 to i64
  %389 = getelementptr inbounds i16, i16* %49, i64 %388
  %390 = load i16, i16* %389, align 2, !tbaa !382
  %391 = insertelement <64 x i16> %386, i16 %390, i32 46
  %392 = extractelement <64 x i32> %156, i32 47
  %393 = sext i32 %392 to i64
  %394 = getelementptr inbounds i16, i16* %49, i64 %393
  %395 = load i16, i16* %394, align 2, !tbaa !382
  %396 = insertelement <64 x i16> %391, i16 %395, i32 47
  %397 = extractelement <64 x i32> %156, i32 48
  %398 = sext i32 %397 to i64
  %399 = getelementptr inbounds i16, i16* %49, i64 %398
  %400 = load i16, i16* %399, align 2, !tbaa !382
  %401 = insertelement <64 x i16> %396, i16 %400, i32 48
  %402 = extractelement <64 x i32> %156, i32 49
  %403 = sext i32 %402 to i64
  %404 = getelementptr inbounds i16, i16* %49, i64 %403
  %405 = load i16, i16* %404, align 2, !tbaa !382
  %406 = insertelement <64 x i16> %401, i16 %405, i32 49
  %407 = extractelement <64 x i32> %156, i32 50
  %408 = sext i32 %407 to i64
  %409 = getelementptr inbounds i16, i16* %49, i64 %408
  %410 = load i16, i16* %409, align 2, !tbaa !382
  %411 = insertelement <64 x i16> %406, i16 %410, i32 50
  %412 = extractelement <64 x i32> %156, i32 51
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds i16, i16* %49, i64 %413
  %415 = load i16, i16* %414, align 2, !tbaa !382
  %416 = insertelement <64 x i16> %411, i16 %415, i32 51
  %417 = extractelement <64 x i32> %156, i32 52
  %418 = sext i32 %417 to i64
  %419 = getelementptr inbounds i16, i16* %49, i64 %418
  %420 = load i16, i16* %419, align 2, !tbaa !382
  %421 = insertelement <64 x i16> %416, i16 %420, i32 52
  %422 = extractelement <64 x i32> %156, i32 53
  %423 = sext i32 %422 to i64
  %424 = getelementptr inbounds i16, i16* %49, i64 %423
  %425 = load i16, i16* %424, align 2, !tbaa !382
  %426 = insertelement <64 x i16> %421, i16 %425, i32 53
  %427 = extractelement <64 x i32> %156, i32 54
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds i16, i16* %49, i64 %428
  %430 = load i16, i16* %429, align 2, !tbaa !382
  %431 = insertelement <64 x i16> %426, i16 %430, i32 54
  %432 = extractelement <64 x i32> %156, i32 55
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds i16, i16* %49, i64 %433
  %435 = load i16, i16* %434, align 2, !tbaa !382
  %436 = insertelement <64 x i16> %431, i16 %435, i32 55
  %437 = extractelement <64 x i32> %156, i32 56
  %438 = sext i32 %437 to i64
  %439 = getelementptr inbounds i16, i16* %49, i64 %438
  %440 = load i16, i16* %439, align 2, !tbaa !382
  %441 = insertelement <64 x i16> %436, i16 %440, i32 56
  %442 = extractelement <64 x i32> %156, i32 57
  %443 = sext i32 %442 to i64
  %444 = getelementptr inbounds i16, i16* %49, i64 %443
  %445 = load i16, i16* %444, align 2, !tbaa !382
  %446 = insertelement <64 x i16> %441, i16 %445, i32 57
  %447 = extractelement <64 x i32> %156, i32 58
  %448 = sext i32 %447 to i64
  %449 = getelementptr inbounds i16, i16* %49, i64 %448
  %450 = load i16, i16* %449, align 2, !tbaa !382
  %451 = insertelement <64 x i16> %446, i16 %450, i32 58
  %452 = extractelement <64 x i32> %156, i32 59
  %453 = sext i32 %452 to i64
  %454 = getelementptr inbounds i16, i16* %49, i64 %453
  %455 = load i16, i16* %454, align 2, !tbaa !382
  %456 = insertelement <64 x i16> %451, i16 %455, i32 59
  %457 = extractelement <64 x i32> %156, i32 60
  %458 = sext i32 %457 to i64
  %459 = getelementptr inbounds i16, i16* %49, i64 %458
  %460 = load i16, i16* %459, align 2, !tbaa !382
  %461 = insertelement <64 x i16> %456, i16 %460, i32 60
  %462 = extractelement <64 x i32> %156, i32 61
  %463 = sext i32 %462 to i64
  %464 = getelementptr inbounds i16, i16* %49, i64 %463
  %465 = load i16, i16* %464, align 2, !tbaa !382
  %466 = insertelement <64 x i16> %461, i16 %465, i32 61
  %467 = extractelement <64 x i32> %156, i32 62
  %468 = sext i32 %467 to i64
  %469 = getelementptr inbounds i16, i16* %49, i64 %468
  %470 = load i16, i16* %469, align 2, !tbaa !382
  %471 = insertelement <64 x i16> %466, i16 %470, i32 62
  %472 = extractelement <64 x i32> %156, i32 63
  %473 = sext i32 %472 to i64
  %474 = getelementptr inbounds i16, i16* %49, i64 %473
  %475 = load i16, i16* %474, align 2, !tbaa !382
  %476 = insertelement <64 x i16> %471, i16 %475, i32 63
  %477 = add nsw i32 %blur_x.s0.x.v1.base.s, -64
  %478 = insertelement <64 x i32> undef, i32 %477, i32 0
  %479 = shufflevector <64 x i32> %478, <64 x i32> undef, <64 x i32> zeroinitializer
  %480 = add nsw <64 x i32> %479, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %481 = shufflevector <64 x i32> %480, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %482 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %481, <4 x i32> %48)
  %483 = shufflevector <64 x i32> %480, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %484 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %483, <4 x i32> %48)
  %485 = shufflevector <64 x i32> %480, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %486 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %485, <4 x i32> %48)
  %487 = shufflevector <64 x i32> %480, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %488 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %487, <4 x i32> %48)
  %489 = shufflevector <64 x i32> %480, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %490 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %489, <4 x i32> %48)
  %491 = shufflevector <64 x i32> %480, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %492 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %491, <4 x i32> %48)
  %493 = shufflevector <64 x i32> %480, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %494 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %493, <4 x i32> %48)
  %495 = shufflevector <64 x i32> %480, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %496 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %495, <4 x i32> %48)
  %497 = shufflevector <64 x i32> %480, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %498 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %497, <4 x i32> %48)
  %499 = shufflevector <64 x i32> %480, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %500 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %499, <4 x i32> %48)
  %501 = shufflevector <64 x i32> %480, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %502 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %501, <4 x i32> %48)
  %503 = shufflevector <64 x i32> %480, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %504 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %503, <4 x i32> %48)
  %505 = shufflevector <64 x i32> %480, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %506 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %505, <4 x i32> %48)
  %507 = shufflevector <64 x i32> %480, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %508 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %507, <4 x i32> %48)
  %509 = shufflevector <64 x i32> %480, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %510 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %509, <4 x i32> %48)
  %511 = shufflevector <64 x i32> %480, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %512 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %511, <4 x i32> %48)
  %513 = shufflevector <4 x i32> %512, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %514 = shufflevector <8 x i32> %513, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %515 = shufflevector <16 x i32> %514, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %516 = shufflevector <32 x i32> %515, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %517 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %482, <4 x i32> zeroinitializer)
  %518 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %484, <4 x i32> zeroinitializer)
  %519 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %486, <4 x i32> zeroinitializer)
  %520 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %488, <4 x i32> zeroinitializer)
  %521 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %490, <4 x i32> zeroinitializer)
  %522 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %492, <4 x i32> zeroinitializer)
  %523 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %494, <4 x i32> zeroinitializer)
  %524 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %496, <4 x i32> zeroinitializer)
  %525 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %498, <4 x i32> zeroinitializer)
  %526 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %500, <4 x i32> zeroinitializer)
  %527 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %502, <4 x i32> zeroinitializer)
  %528 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %504, <4 x i32> zeroinitializer)
  %529 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %506, <4 x i32> zeroinitializer)
  %530 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %508, <4 x i32> zeroinitializer)
  %531 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %510, <4 x i32> zeroinitializer)
  %532 = shufflevector <64 x i32> %516, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %533 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %532, <4 x i32> zeroinitializer)
  %534 = shufflevector <4 x i32> %517, <4 x i32> %518, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %535 = shufflevector <4 x i32> %519, <4 x i32> %520, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %536 = shufflevector <4 x i32> %521, <4 x i32> %522, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %537 = shufflevector <4 x i32> %523, <4 x i32> %524, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %538 = shufflevector <4 x i32> %525, <4 x i32> %526, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %539 = shufflevector <4 x i32> %527, <4 x i32> %528, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %540 = shufflevector <4 x i32> %529, <4 x i32> %530, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %541 = shufflevector <4 x i32> %531, <4 x i32> %533, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %542 = shufflevector <8 x i32> %534, <8 x i32> %535, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %543 = shufflevector <8 x i32> %536, <8 x i32> %537, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %544 = shufflevector <8 x i32> %538, <8 x i32> %539, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %545 = shufflevector <8 x i32> %540, <8 x i32> %541, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %546 = shufflevector <16 x i32> %542, <16 x i32> %543, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %547 = shufflevector <16 x i32> %544, <16 x i32> %545, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %548 = shufflevector <32 x i32> %546, <32 x i32> %547, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %549 = add nsw <64 x i32> %548, %t248
  %550 = extractelement <64 x i32> %549, i32 0
  %551 = sext i32 %550 to i64
  %552 = getelementptr inbounds i16, i16* %49, i64 %551
  %553 = load i16, i16* %552, align 2, !tbaa !382
  %554 = insertelement <64 x i16> undef, i16 %553, i32 0
  %555 = extractelement <64 x i32> %549, i32 1
  %556 = sext i32 %555 to i64
  %557 = getelementptr inbounds i16, i16* %49, i64 %556
  %558 = load i16, i16* %557, align 2, !tbaa !382
  %559 = insertelement <64 x i16> %554, i16 %558, i32 1
  %560 = extractelement <64 x i32> %549, i32 2
  %561 = sext i32 %560 to i64
  %562 = getelementptr inbounds i16, i16* %49, i64 %561
  %563 = load i16, i16* %562, align 2, !tbaa !382
  %564 = insertelement <64 x i16> %559, i16 %563, i32 2
  %565 = extractelement <64 x i32> %549, i32 3
  %566 = sext i32 %565 to i64
  %567 = getelementptr inbounds i16, i16* %49, i64 %566
  %568 = load i16, i16* %567, align 2, !tbaa !382
  %569 = insertelement <64 x i16> %564, i16 %568, i32 3
  %570 = extractelement <64 x i32> %549, i32 4
  %571 = sext i32 %570 to i64
  %572 = getelementptr inbounds i16, i16* %49, i64 %571
  %573 = load i16, i16* %572, align 2, !tbaa !382
  %574 = insertelement <64 x i16> %569, i16 %573, i32 4
  %575 = extractelement <64 x i32> %549, i32 5
  %576 = sext i32 %575 to i64
  %577 = getelementptr inbounds i16, i16* %49, i64 %576
  %578 = load i16, i16* %577, align 2, !tbaa !382
  %579 = insertelement <64 x i16> %574, i16 %578, i32 5
  %580 = extractelement <64 x i32> %549, i32 6
  %581 = sext i32 %580 to i64
  %582 = getelementptr inbounds i16, i16* %49, i64 %581
  %583 = load i16, i16* %582, align 2, !tbaa !382
  %584 = insertelement <64 x i16> %579, i16 %583, i32 6
  %585 = extractelement <64 x i32> %549, i32 7
  %586 = sext i32 %585 to i64
  %587 = getelementptr inbounds i16, i16* %49, i64 %586
  %588 = load i16, i16* %587, align 2, !tbaa !382
  %589 = insertelement <64 x i16> %584, i16 %588, i32 7
  %590 = extractelement <64 x i32> %549, i32 8
  %591 = sext i32 %590 to i64
  %592 = getelementptr inbounds i16, i16* %49, i64 %591
  %593 = load i16, i16* %592, align 2, !tbaa !382
  %594 = insertelement <64 x i16> %589, i16 %593, i32 8
  %595 = extractelement <64 x i32> %549, i32 9
  %596 = sext i32 %595 to i64
  %597 = getelementptr inbounds i16, i16* %49, i64 %596
  %598 = load i16, i16* %597, align 2, !tbaa !382
  %599 = insertelement <64 x i16> %594, i16 %598, i32 9
  %600 = extractelement <64 x i32> %549, i32 10
  %601 = sext i32 %600 to i64
  %602 = getelementptr inbounds i16, i16* %49, i64 %601
  %603 = load i16, i16* %602, align 2, !tbaa !382
  %604 = insertelement <64 x i16> %599, i16 %603, i32 10
  %605 = extractelement <64 x i32> %549, i32 11
  %606 = sext i32 %605 to i64
  %607 = getelementptr inbounds i16, i16* %49, i64 %606
  %608 = load i16, i16* %607, align 2, !tbaa !382
  %609 = insertelement <64 x i16> %604, i16 %608, i32 11
  %610 = extractelement <64 x i32> %549, i32 12
  %611 = sext i32 %610 to i64
  %612 = getelementptr inbounds i16, i16* %49, i64 %611
  %613 = load i16, i16* %612, align 2, !tbaa !382
  %614 = insertelement <64 x i16> %609, i16 %613, i32 12
  %615 = extractelement <64 x i32> %549, i32 13
  %616 = sext i32 %615 to i64
  %617 = getelementptr inbounds i16, i16* %49, i64 %616
  %618 = load i16, i16* %617, align 2, !tbaa !382
  %619 = insertelement <64 x i16> %614, i16 %618, i32 13
  %620 = extractelement <64 x i32> %549, i32 14
  %621 = sext i32 %620 to i64
  %622 = getelementptr inbounds i16, i16* %49, i64 %621
  %623 = load i16, i16* %622, align 2, !tbaa !382
  %624 = insertelement <64 x i16> %619, i16 %623, i32 14
  %625 = extractelement <64 x i32> %549, i32 15
  %626 = sext i32 %625 to i64
  %627 = getelementptr inbounds i16, i16* %49, i64 %626
  %628 = load i16, i16* %627, align 2, !tbaa !382
  %629 = insertelement <64 x i16> %624, i16 %628, i32 15
  %630 = extractelement <64 x i32> %549, i32 16
  %631 = sext i32 %630 to i64
  %632 = getelementptr inbounds i16, i16* %49, i64 %631
  %633 = load i16, i16* %632, align 2, !tbaa !382
  %634 = insertelement <64 x i16> %629, i16 %633, i32 16
  %635 = extractelement <64 x i32> %549, i32 17
  %636 = sext i32 %635 to i64
  %637 = getelementptr inbounds i16, i16* %49, i64 %636
  %638 = load i16, i16* %637, align 2, !tbaa !382
  %639 = insertelement <64 x i16> %634, i16 %638, i32 17
  %640 = extractelement <64 x i32> %549, i32 18
  %641 = sext i32 %640 to i64
  %642 = getelementptr inbounds i16, i16* %49, i64 %641
  %643 = load i16, i16* %642, align 2, !tbaa !382
  %644 = insertelement <64 x i16> %639, i16 %643, i32 18
  %645 = extractelement <64 x i32> %549, i32 19
  %646 = sext i32 %645 to i64
  %647 = getelementptr inbounds i16, i16* %49, i64 %646
  %648 = load i16, i16* %647, align 2, !tbaa !382
  %649 = insertelement <64 x i16> %644, i16 %648, i32 19
  %650 = extractelement <64 x i32> %549, i32 20
  %651 = sext i32 %650 to i64
  %652 = getelementptr inbounds i16, i16* %49, i64 %651
  %653 = load i16, i16* %652, align 2, !tbaa !382
  %654 = insertelement <64 x i16> %649, i16 %653, i32 20
  %655 = extractelement <64 x i32> %549, i32 21
  %656 = sext i32 %655 to i64
  %657 = getelementptr inbounds i16, i16* %49, i64 %656
  %658 = load i16, i16* %657, align 2, !tbaa !382
  %659 = insertelement <64 x i16> %654, i16 %658, i32 21
  %660 = extractelement <64 x i32> %549, i32 22
  %661 = sext i32 %660 to i64
  %662 = getelementptr inbounds i16, i16* %49, i64 %661
  %663 = load i16, i16* %662, align 2, !tbaa !382
  %664 = insertelement <64 x i16> %659, i16 %663, i32 22
  %665 = extractelement <64 x i32> %549, i32 23
  %666 = sext i32 %665 to i64
  %667 = getelementptr inbounds i16, i16* %49, i64 %666
  %668 = load i16, i16* %667, align 2, !tbaa !382
  %669 = insertelement <64 x i16> %664, i16 %668, i32 23
  %670 = extractelement <64 x i32> %549, i32 24
  %671 = sext i32 %670 to i64
  %672 = getelementptr inbounds i16, i16* %49, i64 %671
  %673 = load i16, i16* %672, align 2, !tbaa !382
  %674 = insertelement <64 x i16> %669, i16 %673, i32 24
  %675 = extractelement <64 x i32> %549, i32 25
  %676 = sext i32 %675 to i64
  %677 = getelementptr inbounds i16, i16* %49, i64 %676
  %678 = load i16, i16* %677, align 2, !tbaa !382
  %679 = insertelement <64 x i16> %674, i16 %678, i32 25
  %680 = extractelement <64 x i32> %549, i32 26
  %681 = sext i32 %680 to i64
  %682 = getelementptr inbounds i16, i16* %49, i64 %681
  %683 = load i16, i16* %682, align 2, !tbaa !382
  %684 = insertelement <64 x i16> %679, i16 %683, i32 26
  %685 = extractelement <64 x i32> %549, i32 27
  %686 = sext i32 %685 to i64
  %687 = getelementptr inbounds i16, i16* %49, i64 %686
  %688 = load i16, i16* %687, align 2, !tbaa !382
  %689 = insertelement <64 x i16> %684, i16 %688, i32 27
  %690 = extractelement <64 x i32> %549, i32 28
  %691 = sext i32 %690 to i64
  %692 = getelementptr inbounds i16, i16* %49, i64 %691
  %693 = load i16, i16* %692, align 2, !tbaa !382
  %694 = insertelement <64 x i16> %689, i16 %693, i32 28
  %695 = extractelement <64 x i32> %549, i32 29
  %696 = sext i32 %695 to i64
  %697 = getelementptr inbounds i16, i16* %49, i64 %696
  %698 = load i16, i16* %697, align 2, !tbaa !382
  %699 = insertelement <64 x i16> %694, i16 %698, i32 29
  %700 = extractelement <64 x i32> %549, i32 30
  %701 = sext i32 %700 to i64
  %702 = getelementptr inbounds i16, i16* %49, i64 %701
  %703 = load i16, i16* %702, align 2, !tbaa !382
  %704 = insertelement <64 x i16> %699, i16 %703, i32 30
  %705 = extractelement <64 x i32> %549, i32 31
  %706 = sext i32 %705 to i64
  %707 = getelementptr inbounds i16, i16* %49, i64 %706
  %708 = load i16, i16* %707, align 2, !tbaa !382
  %709 = insertelement <64 x i16> %704, i16 %708, i32 31
  %710 = extractelement <64 x i32> %549, i32 32
  %711 = sext i32 %710 to i64
  %712 = getelementptr inbounds i16, i16* %49, i64 %711
  %713 = load i16, i16* %712, align 2, !tbaa !382
  %714 = insertelement <64 x i16> %709, i16 %713, i32 32
  %715 = extractelement <64 x i32> %549, i32 33
  %716 = sext i32 %715 to i64
  %717 = getelementptr inbounds i16, i16* %49, i64 %716
  %718 = load i16, i16* %717, align 2, !tbaa !382
  %719 = insertelement <64 x i16> %714, i16 %718, i32 33
  %720 = extractelement <64 x i32> %549, i32 34
  %721 = sext i32 %720 to i64
  %722 = getelementptr inbounds i16, i16* %49, i64 %721
  %723 = load i16, i16* %722, align 2, !tbaa !382
  %724 = insertelement <64 x i16> %719, i16 %723, i32 34
  %725 = extractelement <64 x i32> %549, i32 35
  %726 = sext i32 %725 to i64
  %727 = getelementptr inbounds i16, i16* %49, i64 %726
  %728 = load i16, i16* %727, align 2, !tbaa !382
  %729 = insertelement <64 x i16> %724, i16 %728, i32 35
  %730 = extractelement <64 x i32> %549, i32 36
  %731 = sext i32 %730 to i64
  %732 = getelementptr inbounds i16, i16* %49, i64 %731
  %733 = load i16, i16* %732, align 2, !tbaa !382
  %734 = insertelement <64 x i16> %729, i16 %733, i32 36
  %735 = extractelement <64 x i32> %549, i32 37
  %736 = sext i32 %735 to i64
  %737 = getelementptr inbounds i16, i16* %49, i64 %736
  %738 = load i16, i16* %737, align 2, !tbaa !382
  %739 = insertelement <64 x i16> %734, i16 %738, i32 37
  %740 = extractelement <64 x i32> %549, i32 38
  %741 = sext i32 %740 to i64
  %742 = getelementptr inbounds i16, i16* %49, i64 %741
  %743 = load i16, i16* %742, align 2, !tbaa !382
  %744 = insertelement <64 x i16> %739, i16 %743, i32 38
  %745 = extractelement <64 x i32> %549, i32 39
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds i16, i16* %49, i64 %746
  %748 = load i16, i16* %747, align 2, !tbaa !382
  %749 = insertelement <64 x i16> %744, i16 %748, i32 39
  %750 = extractelement <64 x i32> %549, i32 40
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds i16, i16* %49, i64 %751
  %753 = load i16, i16* %752, align 2, !tbaa !382
  %754 = insertelement <64 x i16> %749, i16 %753, i32 40
  %755 = extractelement <64 x i32> %549, i32 41
  %756 = sext i32 %755 to i64
  %757 = getelementptr inbounds i16, i16* %49, i64 %756
  %758 = load i16, i16* %757, align 2, !tbaa !382
  %759 = insertelement <64 x i16> %754, i16 %758, i32 41
  %760 = extractelement <64 x i32> %549, i32 42
  %761 = sext i32 %760 to i64
  %762 = getelementptr inbounds i16, i16* %49, i64 %761
  %763 = load i16, i16* %762, align 2, !tbaa !382
  %764 = insertelement <64 x i16> %759, i16 %763, i32 42
  %765 = extractelement <64 x i32> %549, i32 43
  %766 = sext i32 %765 to i64
  %767 = getelementptr inbounds i16, i16* %49, i64 %766
  %768 = load i16, i16* %767, align 2, !tbaa !382
  %769 = insertelement <64 x i16> %764, i16 %768, i32 43
  %770 = extractelement <64 x i32> %549, i32 44
  %771 = sext i32 %770 to i64
  %772 = getelementptr inbounds i16, i16* %49, i64 %771
  %773 = load i16, i16* %772, align 2, !tbaa !382
  %774 = insertelement <64 x i16> %769, i16 %773, i32 44
  %775 = extractelement <64 x i32> %549, i32 45
  %776 = sext i32 %775 to i64
  %777 = getelementptr inbounds i16, i16* %49, i64 %776
  %778 = load i16, i16* %777, align 2, !tbaa !382
  %779 = insertelement <64 x i16> %774, i16 %778, i32 45
  %780 = extractelement <64 x i32> %549, i32 46
  %781 = sext i32 %780 to i64
  %782 = getelementptr inbounds i16, i16* %49, i64 %781
  %783 = load i16, i16* %782, align 2, !tbaa !382
  %784 = insertelement <64 x i16> %779, i16 %783, i32 46
  %785 = extractelement <64 x i32> %549, i32 47
  %786 = sext i32 %785 to i64
  %787 = getelementptr inbounds i16, i16* %49, i64 %786
  %788 = load i16, i16* %787, align 2, !tbaa !382
  %789 = insertelement <64 x i16> %784, i16 %788, i32 47
  %790 = extractelement <64 x i32> %549, i32 48
  %791 = sext i32 %790 to i64
  %792 = getelementptr inbounds i16, i16* %49, i64 %791
  %793 = load i16, i16* %792, align 2, !tbaa !382
  %794 = insertelement <64 x i16> %789, i16 %793, i32 48
  %795 = extractelement <64 x i32> %549, i32 49
  %796 = sext i32 %795 to i64
  %797 = getelementptr inbounds i16, i16* %49, i64 %796
  %798 = load i16, i16* %797, align 2, !tbaa !382
  %799 = insertelement <64 x i16> %794, i16 %798, i32 49
  %800 = extractelement <64 x i32> %549, i32 50
  %801 = sext i32 %800 to i64
  %802 = getelementptr inbounds i16, i16* %49, i64 %801
  %803 = load i16, i16* %802, align 2, !tbaa !382
  %804 = insertelement <64 x i16> %799, i16 %803, i32 50
  %805 = extractelement <64 x i32> %549, i32 51
  %806 = sext i32 %805 to i64
  %807 = getelementptr inbounds i16, i16* %49, i64 %806
  %808 = load i16, i16* %807, align 2, !tbaa !382
  %809 = insertelement <64 x i16> %804, i16 %808, i32 51
  %810 = extractelement <64 x i32> %549, i32 52
  %811 = sext i32 %810 to i64
  %812 = getelementptr inbounds i16, i16* %49, i64 %811
  %813 = load i16, i16* %812, align 2, !tbaa !382
  %814 = insertelement <64 x i16> %809, i16 %813, i32 52
  %815 = extractelement <64 x i32> %549, i32 53
  %816 = sext i32 %815 to i64
  %817 = getelementptr inbounds i16, i16* %49, i64 %816
  %818 = load i16, i16* %817, align 2, !tbaa !382
  %819 = insertelement <64 x i16> %814, i16 %818, i32 53
  %820 = extractelement <64 x i32> %549, i32 54
  %821 = sext i32 %820 to i64
  %822 = getelementptr inbounds i16, i16* %49, i64 %821
  %823 = load i16, i16* %822, align 2, !tbaa !382
  %824 = insertelement <64 x i16> %819, i16 %823, i32 54
  %825 = extractelement <64 x i32> %549, i32 55
  %826 = sext i32 %825 to i64
  %827 = getelementptr inbounds i16, i16* %49, i64 %826
  %828 = load i16, i16* %827, align 2, !tbaa !382
  %829 = insertelement <64 x i16> %824, i16 %828, i32 55
  %830 = extractelement <64 x i32> %549, i32 56
  %831 = sext i32 %830 to i64
  %832 = getelementptr inbounds i16, i16* %49, i64 %831
  %833 = load i16, i16* %832, align 2, !tbaa !382
  %834 = insertelement <64 x i16> %829, i16 %833, i32 56
  %835 = extractelement <64 x i32> %549, i32 57
  %836 = sext i32 %835 to i64
  %837 = getelementptr inbounds i16, i16* %49, i64 %836
  %838 = load i16, i16* %837, align 2, !tbaa !382
  %839 = insertelement <64 x i16> %834, i16 %838, i32 57
  %840 = extractelement <64 x i32> %549, i32 58
  %841 = sext i32 %840 to i64
  %842 = getelementptr inbounds i16, i16* %49, i64 %841
  %843 = load i16, i16* %842, align 2, !tbaa !382
  %844 = insertelement <64 x i16> %839, i16 %843, i32 58
  %845 = extractelement <64 x i32> %549, i32 59
  %846 = sext i32 %845 to i64
  %847 = getelementptr inbounds i16, i16* %49, i64 %846
  %848 = load i16, i16* %847, align 2, !tbaa !382
  %849 = insertelement <64 x i16> %844, i16 %848, i32 59
  %850 = extractelement <64 x i32> %549, i32 60
  %851 = sext i32 %850 to i64
  %852 = getelementptr inbounds i16, i16* %49, i64 %851
  %853 = load i16, i16* %852, align 2, !tbaa !382
  %854 = insertelement <64 x i16> %849, i16 %853, i32 60
  %855 = extractelement <64 x i32> %549, i32 61
  %856 = sext i32 %855 to i64
  %857 = getelementptr inbounds i16, i16* %49, i64 %856
  %858 = load i16, i16* %857, align 2, !tbaa !382
  %859 = insertelement <64 x i16> %854, i16 %858, i32 61
  %860 = extractelement <64 x i32> %549, i32 62
  %861 = sext i32 %860 to i64
  %862 = getelementptr inbounds i16, i16* %49, i64 %861
  %863 = load i16, i16* %862, align 2, !tbaa !382
  %864 = insertelement <64 x i16> %859, i16 %863, i32 62
  %865 = extractelement <64 x i32> %549, i32 63
  %866 = sext i32 %865 to i64
  %867 = getelementptr inbounds i16, i16* %49, i64 %866
  %868 = load i16, i16* %867, align 2, !tbaa !382
  %869 = insertelement <64 x i16> %864, i16 %868, i32 63
  %870 = add nsw i32 %blur_x.s0.x.v1.base.s, -62
  %871 = insertelement <64 x i32> undef, i32 %870, i32 0
  %872 = shufflevector <64 x i32> %871, <64 x i32> undef, <64 x i32> zeroinitializer
  %873 = add nsw <64 x i32> %872, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %874 = shufflevector <64 x i32> %873, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %875 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %874, <4 x i32> %48)
  %876 = shufflevector <64 x i32> %873, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %877 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %876, <4 x i32> %48)
  %878 = shufflevector <64 x i32> %873, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %879 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %878, <4 x i32> %48)
  %880 = shufflevector <64 x i32> %873, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %881 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %880, <4 x i32> %48)
  %882 = shufflevector <64 x i32> %873, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %883 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %882, <4 x i32> %48)
  %884 = shufflevector <64 x i32> %873, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %885 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %884, <4 x i32> %48)
  %886 = shufflevector <64 x i32> %873, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %887 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %886, <4 x i32> %48)
  %888 = shufflevector <64 x i32> %873, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %889 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %888, <4 x i32> %48)
  %890 = shufflevector <64 x i32> %873, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %891 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %890, <4 x i32> %48)
  %892 = shufflevector <64 x i32> %873, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %893 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %892, <4 x i32> %48)
  %894 = shufflevector <64 x i32> %873, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %895 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %894, <4 x i32> %48)
  %896 = shufflevector <64 x i32> %873, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %897 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %896, <4 x i32> %48)
  %898 = shufflevector <64 x i32> %873, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %899 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %898, <4 x i32> %48)
  %900 = shufflevector <64 x i32> %873, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %901 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %900, <4 x i32> %48)
  %902 = shufflevector <64 x i32> %873, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %903 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %902, <4 x i32> %48)
  %904 = shufflevector <64 x i32> %873, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %905 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %904, <4 x i32> %48)
  %906 = shufflevector <4 x i32> %905, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %907 = shufflevector <8 x i32> %906, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %908 = shufflevector <16 x i32> %907, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %909 = shufflevector <32 x i32> %908, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %910 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %875, <4 x i32> zeroinitializer)
  %911 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %877, <4 x i32> zeroinitializer)
  %912 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %879, <4 x i32> zeroinitializer)
  %913 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %881, <4 x i32> zeroinitializer)
  %914 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %883, <4 x i32> zeroinitializer)
  %915 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %885, <4 x i32> zeroinitializer)
  %916 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %887, <4 x i32> zeroinitializer)
  %917 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %889, <4 x i32> zeroinitializer)
  %918 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %891, <4 x i32> zeroinitializer)
  %919 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %893, <4 x i32> zeroinitializer)
  %920 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %895, <4 x i32> zeroinitializer)
  %921 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %897, <4 x i32> zeroinitializer)
  %922 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %899, <4 x i32> zeroinitializer)
  %923 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %901, <4 x i32> zeroinitializer)
  %924 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %903, <4 x i32> zeroinitializer)
  %925 = shufflevector <64 x i32> %909, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %926 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %925, <4 x i32> zeroinitializer)
  %927 = shufflevector <4 x i32> %910, <4 x i32> %911, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %928 = shufflevector <4 x i32> %912, <4 x i32> %913, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %929 = shufflevector <4 x i32> %914, <4 x i32> %915, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %930 = shufflevector <4 x i32> %916, <4 x i32> %917, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %931 = shufflevector <4 x i32> %918, <4 x i32> %919, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %932 = shufflevector <4 x i32> %920, <4 x i32> %921, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %933 = shufflevector <4 x i32> %922, <4 x i32> %923, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %934 = shufflevector <4 x i32> %924, <4 x i32> %926, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %935 = shufflevector <8 x i32> %927, <8 x i32> %928, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %936 = shufflevector <8 x i32> %929, <8 x i32> %930, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %937 = shufflevector <8 x i32> %931, <8 x i32> %932, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %938 = shufflevector <8 x i32> %933, <8 x i32> %934, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %939 = shufflevector <16 x i32> %935, <16 x i32> %936, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %940 = shufflevector <16 x i32> %937, <16 x i32> %938, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %941 = shufflevector <32 x i32> %939, <32 x i32> %940, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %942 = add nsw <64 x i32> %941, %t248
  %943 = extractelement <64 x i32> %942, i32 0
  %944 = sext i32 %943 to i64
  %945 = getelementptr inbounds i16, i16* %49, i64 %944
  %946 = load i16, i16* %945, align 2, !tbaa !382
  %947 = insertelement <64 x i16> undef, i16 %946, i32 0
  %948 = extractelement <64 x i32> %942, i32 1
  %949 = sext i32 %948 to i64
  %950 = getelementptr inbounds i16, i16* %49, i64 %949
  %951 = load i16, i16* %950, align 2, !tbaa !382
  %952 = insertelement <64 x i16> %947, i16 %951, i32 1
  %953 = extractelement <64 x i32> %942, i32 2
  %954 = sext i32 %953 to i64
  %955 = getelementptr inbounds i16, i16* %49, i64 %954
  %956 = load i16, i16* %955, align 2, !tbaa !382
  %957 = insertelement <64 x i16> %952, i16 %956, i32 2
  %958 = extractelement <64 x i32> %942, i32 3
  %959 = sext i32 %958 to i64
  %960 = getelementptr inbounds i16, i16* %49, i64 %959
  %961 = load i16, i16* %960, align 2, !tbaa !382
  %962 = insertelement <64 x i16> %957, i16 %961, i32 3
  %963 = extractelement <64 x i32> %942, i32 4
  %964 = sext i32 %963 to i64
  %965 = getelementptr inbounds i16, i16* %49, i64 %964
  %966 = load i16, i16* %965, align 2, !tbaa !382
  %967 = insertelement <64 x i16> %962, i16 %966, i32 4
  %968 = extractelement <64 x i32> %942, i32 5
  %969 = sext i32 %968 to i64
  %970 = getelementptr inbounds i16, i16* %49, i64 %969
  %971 = load i16, i16* %970, align 2, !tbaa !382
  %972 = insertelement <64 x i16> %967, i16 %971, i32 5
  %973 = extractelement <64 x i32> %942, i32 6
  %974 = sext i32 %973 to i64
  %975 = getelementptr inbounds i16, i16* %49, i64 %974
  %976 = load i16, i16* %975, align 2, !tbaa !382
  %977 = insertelement <64 x i16> %972, i16 %976, i32 6
  %978 = extractelement <64 x i32> %942, i32 7
  %979 = sext i32 %978 to i64
  %980 = getelementptr inbounds i16, i16* %49, i64 %979
  %981 = load i16, i16* %980, align 2, !tbaa !382
  %982 = insertelement <64 x i16> %977, i16 %981, i32 7
  %983 = extractelement <64 x i32> %942, i32 8
  %984 = sext i32 %983 to i64
  %985 = getelementptr inbounds i16, i16* %49, i64 %984
  %986 = load i16, i16* %985, align 2, !tbaa !382
  %987 = insertelement <64 x i16> %982, i16 %986, i32 8
  %988 = extractelement <64 x i32> %942, i32 9
  %989 = sext i32 %988 to i64
  %990 = getelementptr inbounds i16, i16* %49, i64 %989
  %991 = load i16, i16* %990, align 2, !tbaa !382
  %992 = insertelement <64 x i16> %987, i16 %991, i32 9
  %993 = extractelement <64 x i32> %942, i32 10
  %994 = sext i32 %993 to i64
  %995 = getelementptr inbounds i16, i16* %49, i64 %994
  %996 = load i16, i16* %995, align 2, !tbaa !382
  %997 = insertelement <64 x i16> %992, i16 %996, i32 10
  %998 = extractelement <64 x i32> %942, i32 11
  %999 = sext i32 %998 to i64
  %1000 = getelementptr inbounds i16, i16* %49, i64 %999
  %1001 = load i16, i16* %1000, align 2, !tbaa !382
  %1002 = insertelement <64 x i16> %997, i16 %1001, i32 11
  %1003 = extractelement <64 x i32> %942, i32 12
  %1004 = sext i32 %1003 to i64
  %1005 = getelementptr inbounds i16, i16* %49, i64 %1004
  %1006 = load i16, i16* %1005, align 2, !tbaa !382
  %1007 = insertelement <64 x i16> %1002, i16 %1006, i32 12
  %1008 = extractelement <64 x i32> %942, i32 13
  %1009 = sext i32 %1008 to i64
  %1010 = getelementptr inbounds i16, i16* %49, i64 %1009
  %1011 = load i16, i16* %1010, align 2, !tbaa !382
  %1012 = insertelement <64 x i16> %1007, i16 %1011, i32 13
  %1013 = extractelement <64 x i32> %942, i32 14
  %1014 = sext i32 %1013 to i64
  %1015 = getelementptr inbounds i16, i16* %49, i64 %1014
  %1016 = load i16, i16* %1015, align 2, !tbaa !382
  %1017 = insertelement <64 x i16> %1012, i16 %1016, i32 14
  %1018 = extractelement <64 x i32> %942, i32 15
  %1019 = sext i32 %1018 to i64
  %1020 = getelementptr inbounds i16, i16* %49, i64 %1019
  %1021 = load i16, i16* %1020, align 2, !tbaa !382
  %1022 = insertelement <64 x i16> %1017, i16 %1021, i32 15
  %1023 = extractelement <64 x i32> %942, i32 16
  %1024 = sext i32 %1023 to i64
  %1025 = getelementptr inbounds i16, i16* %49, i64 %1024
  %1026 = load i16, i16* %1025, align 2, !tbaa !382
  %1027 = insertelement <64 x i16> %1022, i16 %1026, i32 16
  %1028 = extractelement <64 x i32> %942, i32 17
  %1029 = sext i32 %1028 to i64
  %1030 = getelementptr inbounds i16, i16* %49, i64 %1029
  %1031 = load i16, i16* %1030, align 2, !tbaa !382
  %1032 = insertelement <64 x i16> %1027, i16 %1031, i32 17
  %1033 = extractelement <64 x i32> %942, i32 18
  %1034 = sext i32 %1033 to i64
  %1035 = getelementptr inbounds i16, i16* %49, i64 %1034
  %1036 = load i16, i16* %1035, align 2, !tbaa !382
  %1037 = insertelement <64 x i16> %1032, i16 %1036, i32 18
  %1038 = extractelement <64 x i32> %942, i32 19
  %1039 = sext i32 %1038 to i64
  %1040 = getelementptr inbounds i16, i16* %49, i64 %1039
  %1041 = load i16, i16* %1040, align 2, !tbaa !382
  %1042 = insertelement <64 x i16> %1037, i16 %1041, i32 19
  %1043 = extractelement <64 x i32> %942, i32 20
  %1044 = sext i32 %1043 to i64
  %1045 = getelementptr inbounds i16, i16* %49, i64 %1044
  %1046 = load i16, i16* %1045, align 2, !tbaa !382
  %1047 = insertelement <64 x i16> %1042, i16 %1046, i32 20
  %1048 = extractelement <64 x i32> %942, i32 21
  %1049 = sext i32 %1048 to i64
  %1050 = getelementptr inbounds i16, i16* %49, i64 %1049
  %1051 = load i16, i16* %1050, align 2, !tbaa !382
  %1052 = insertelement <64 x i16> %1047, i16 %1051, i32 21
  %1053 = extractelement <64 x i32> %942, i32 22
  %1054 = sext i32 %1053 to i64
  %1055 = getelementptr inbounds i16, i16* %49, i64 %1054
  %1056 = load i16, i16* %1055, align 2, !tbaa !382
  %1057 = insertelement <64 x i16> %1052, i16 %1056, i32 22
  %1058 = extractelement <64 x i32> %942, i32 23
  %1059 = sext i32 %1058 to i64
  %1060 = getelementptr inbounds i16, i16* %49, i64 %1059
  %1061 = load i16, i16* %1060, align 2, !tbaa !382
  %1062 = insertelement <64 x i16> %1057, i16 %1061, i32 23
  %1063 = extractelement <64 x i32> %942, i32 24
  %1064 = sext i32 %1063 to i64
  %1065 = getelementptr inbounds i16, i16* %49, i64 %1064
  %1066 = load i16, i16* %1065, align 2, !tbaa !382
  %1067 = insertelement <64 x i16> %1062, i16 %1066, i32 24
  %1068 = extractelement <64 x i32> %942, i32 25
  %1069 = sext i32 %1068 to i64
  %1070 = getelementptr inbounds i16, i16* %49, i64 %1069
  %1071 = load i16, i16* %1070, align 2, !tbaa !382
  %1072 = insertelement <64 x i16> %1067, i16 %1071, i32 25
  %1073 = extractelement <64 x i32> %942, i32 26
  %1074 = sext i32 %1073 to i64
  %1075 = getelementptr inbounds i16, i16* %49, i64 %1074
  %1076 = load i16, i16* %1075, align 2, !tbaa !382
  %1077 = insertelement <64 x i16> %1072, i16 %1076, i32 26
  %1078 = extractelement <64 x i32> %942, i32 27
  %1079 = sext i32 %1078 to i64
  %1080 = getelementptr inbounds i16, i16* %49, i64 %1079
  %1081 = load i16, i16* %1080, align 2, !tbaa !382
  %1082 = insertelement <64 x i16> %1077, i16 %1081, i32 27
  %1083 = extractelement <64 x i32> %942, i32 28
  %1084 = sext i32 %1083 to i64
  %1085 = getelementptr inbounds i16, i16* %49, i64 %1084
  %1086 = load i16, i16* %1085, align 2, !tbaa !382
  %1087 = insertelement <64 x i16> %1082, i16 %1086, i32 28
  %1088 = extractelement <64 x i32> %942, i32 29
  %1089 = sext i32 %1088 to i64
  %1090 = getelementptr inbounds i16, i16* %49, i64 %1089
  %1091 = load i16, i16* %1090, align 2, !tbaa !382
  %1092 = insertelement <64 x i16> %1087, i16 %1091, i32 29
  %1093 = extractelement <64 x i32> %942, i32 30
  %1094 = sext i32 %1093 to i64
  %1095 = getelementptr inbounds i16, i16* %49, i64 %1094
  %1096 = load i16, i16* %1095, align 2, !tbaa !382
  %1097 = insertelement <64 x i16> %1092, i16 %1096, i32 30
  %1098 = extractelement <64 x i32> %942, i32 31
  %1099 = sext i32 %1098 to i64
  %1100 = getelementptr inbounds i16, i16* %49, i64 %1099
  %1101 = load i16, i16* %1100, align 2, !tbaa !382
  %1102 = insertelement <64 x i16> %1097, i16 %1101, i32 31
  %1103 = extractelement <64 x i32> %942, i32 32
  %1104 = sext i32 %1103 to i64
  %1105 = getelementptr inbounds i16, i16* %49, i64 %1104
  %1106 = load i16, i16* %1105, align 2, !tbaa !382
  %1107 = insertelement <64 x i16> %1102, i16 %1106, i32 32
  %1108 = extractelement <64 x i32> %942, i32 33
  %1109 = sext i32 %1108 to i64
  %1110 = getelementptr inbounds i16, i16* %49, i64 %1109
  %1111 = load i16, i16* %1110, align 2, !tbaa !382
  %1112 = insertelement <64 x i16> %1107, i16 %1111, i32 33
  %1113 = extractelement <64 x i32> %942, i32 34
  %1114 = sext i32 %1113 to i64
  %1115 = getelementptr inbounds i16, i16* %49, i64 %1114
  %1116 = load i16, i16* %1115, align 2, !tbaa !382
  %1117 = insertelement <64 x i16> %1112, i16 %1116, i32 34
  %1118 = extractelement <64 x i32> %942, i32 35
  %1119 = sext i32 %1118 to i64
  %1120 = getelementptr inbounds i16, i16* %49, i64 %1119
  %1121 = load i16, i16* %1120, align 2, !tbaa !382
  %1122 = insertelement <64 x i16> %1117, i16 %1121, i32 35
  %1123 = extractelement <64 x i32> %942, i32 36
  %1124 = sext i32 %1123 to i64
  %1125 = getelementptr inbounds i16, i16* %49, i64 %1124
  %1126 = load i16, i16* %1125, align 2, !tbaa !382
  %1127 = insertelement <64 x i16> %1122, i16 %1126, i32 36
  %1128 = extractelement <64 x i32> %942, i32 37
  %1129 = sext i32 %1128 to i64
  %1130 = getelementptr inbounds i16, i16* %49, i64 %1129
  %1131 = load i16, i16* %1130, align 2, !tbaa !382
  %1132 = insertelement <64 x i16> %1127, i16 %1131, i32 37
  %1133 = extractelement <64 x i32> %942, i32 38
  %1134 = sext i32 %1133 to i64
  %1135 = getelementptr inbounds i16, i16* %49, i64 %1134
  %1136 = load i16, i16* %1135, align 2, !tbaa !382
  %1137 = insertelement <64 x i16> %1132, i16 %1136, i32 38
  %1138 = extractelement <64 x i32> %942, i32 39
  %1139 = sext i32 %1138 to i64
  %1140 = getelementptr inbounds i16, i16* %49, i64 %1139
  %1141 = load i16, i16* %1140, align 2, !tbaa !382
  %1142 = insertelement <64 x i16> %1137, i16 %1141, i32 39
  %1143 = extractelement <64 x i32> %942, i32 40
  %1144 = sext i32 %1143 to i64
  %1145 = getelementptr inbounds i16, i16* %49, i64 %1144
  %1146 = load i16, i16* %1145, align 2, !tbaa !382
  %1147 = insertelement <64 x i16> %1142, i16 %1146, i32 40
  %1148 = extractelement <64 x i32> %942, i32 41
  %1149 = sext i32 %1148 to i64
  %1150 = getelementptr inbounds i16, i16* %49, i64 %1149
  %1151 = load i16, i16* %1150, align 2, !tbaa !382
  %1152 = insertelement <64 x i16> %1147, i16 %1151, i32 41
  %1153 = extractelement <64 x i32> %942, i32 42
  %1154 = sext i32 %1153 to i64
  %1155 = getelementptr inbounds i16, i16* %49, i64 %1154
  %1156 = load i16, i16* %1155, align 2, !tbaa !382
  %1157 = insertelement <64 x i16> %1152, i16 %1156, i32 42
  %1158 = extractelement <64 x i32> %942, i32 43
  %1159 = sext i32 %1158 to i64
  %1160 = getelementptr inbounds i16, i16* %49, i64 %1159
  %1161 = load i16, i16* %1160, align 2, !tbaa !382
  %1162 = insertelement <64 x i16> %1157, i16 %1161, i32 43
  %1163 = extractelement <64 x i32> %942, i32 44
  %1164 = sext i32 %1163 to i64
  %1165 = getelementptr inbounds i16, i16* %49, i64 %1164
  %1166 = load i16, i16* %1165, align 2, !tbaa !382
  %1167 = insertelement <64 x i16> %1162, i16 %1166, i32 44
  %1168 = extractelement <64 x i32> %942, i32 45
  %1169 = sext i32 %1168 to i64
  %1170 = getelementptr inbounds i16, i16* %49, i64 %1169
  %1171 = load i16, i16* %1170, align 2, !tbaa !382
  %1172 = insertelement <64 x i16> %1167, i16 %1171, i32 45
  %1173 = extractelement <64 x i32> %942, i32 46
  %1174 = sext i32 %1173 to i64
  %1175 = getelementptr inbounds i16, i16* %49, i64 %1174
  %1176 = load i16, i16* %1175, align 2, !tbaa !382
  %1177 = insertelement <64 x i16> %1172, i16 %1176, i32 46
  %1178 = extractelement <64 x i32> %942, i32 47
  %1179 = sext i32 %1178 to i64
  %1180 = getelementptr inbounds i16, i16* %49, i64 %1179
  %1181 = load i16, i16* %1180, align 2, !tbaa !382
  %1182 = insertelement <64 x i16> %1177, i16 %1181, i32 47
  %1183 = extractelement <64 x i32> %942, i32 48
  %1184 = sext i32 %1183 to i64
  %1185 = getelementptr inbounds i16, i16* %49, i64 %1184
  %1186 = load i16, i16* %1185, align 2, !tbaa !382
  %1187 = insertelement <64 x i16> %1182, i16 %1186, i32 48
  %1188 = extractelement <64 x i32> %942, i32 49
  %1189 = sext i32 %1188 to i64
  %1190 = getelementptr inbounds i16, i16* %49, i64 %1189
  %1191 = load i16, i16* %1190, align 2, !tbaa !382
  %1192 = insertelement <64 x i16> %1187, i16 %1191, i32 49
  %1193 = extractelement <64 x i32> %942, i32 50
  %1194 = sext i32 %1193 to i64
  %1195 = getelementptr inbounds i16, i16* %49, i64 %1194
  %1196 = load i16, i16* %1195, align 2, !tbaa !382
  %1197 = insertelement <64 x i16> %1192, i16 %1196, i32 50
  %1198 = extractelement <64 x i32> %942, i32 51
  %1199 = sext i32 %1198 to i64
  %1200 = getelementptr inbounds i16, i16* %49, i64 %1199
  %1201 = load i16, i16* %1200, align 2, !tbaa !382
  %1202 = insertelement <64 x i16> %1197, i16 %1201, i32 51
  %1203 = extractelement <64 x i32> %942, i32 52
  %1204 = sext i32 %1203 to i64
  %1205 = getelementptr inbounds i16, i16* %49, i64 %1204
  %1206 = load i16, i16* %1205, align 2, !tbaa !382
  %1207 = insertelement <64 x i16> %1202, i16 %1206, i32 52
  %1208 = extractelement <64 x i32> %942, i32 53
  %1209 = sext i32 %1208 to i64
  %1210 = getelementptr inbounds i16, i16* %49, i64 %1209
  %1211 = load i16, i16* %1210, align 2, !tbaa !382
  %1212 = insertelement <64 x i16> %1207, i16 %1211, i32 53
  %1213 = extractelement <64 x i32> %942, i32 54
  %1214 = sext i32 %1213 to i64
  %1215 = getelementptr inbounds i16, i16* %49, i64 %1214
  %1216 = load i16, i16* %1215, align 2, !tbaa !382
  %1217 = insertelement <64 x i16> %1212, i16 %1216, i32 54
  %1218 = extractelement <64 x i32> %942, i32 55
  %1219 = sext i32 %1218 to i64
  %1220 = getelementptr inbounds i16, i16* %49, i64 %1219
  %1221 = load i16, i16* %1220, align 2, !tbaa !382
  %1222 = insertelement <64 x i16> %1217, i16 %1221, i32 55
  %1223 = extractelement <64 x i32> %942, i32 56
  %1224 = sext i32 %1223 to i64
  %1225 = getelementptr inbounds i16, i16* %49, i64 %1224
  %1226 = load i16, i16* %1225, align 2, !tbaa !382
  %1227 = insertelement <64 x i16> %1222, i16 %1226, i32 56
  %1228 = extractelement <64 x i32> %942, i32 57
  %1229 = sext i32 %1228 to i64
  %1230 = getelementptr inbounds i16, i16* %49, i64 %1229
  %1231 = load i16, i16* %1230, align 2, !tbaa !382
  %1232 = insertelement <64 x i16> %1227, i16 %1231, i32 57
  %1233 = extractelement <64 x i32> %942, i32 58
  %1234 = sext i32 %1233 to i64
  %1235 = getelementptr inbounds i16, i16* %49, i64 %1234
  %1236 = load i16, i16* %1235, align 2, !tbaa !382
  %1237 = insertelement <64 x i16> %1232, i16 %1236, i32 58
  %1238 = extractelement <64 x i32> %942, i32 59
  %1239 = sext i32 %1238 to i64
  %1240 = getelementptr inbounds i16, i16* %49, i64 %1239
  %1241 = load i16, i16* %1240, align 2, !tbaa !382
  %1242 = insertelement <64 x i16> %1237, i16 %1241, i32 59
  %1243 = extractelement <64 x i32> %942, i32 60
  %1244 = sext i32 %1243 to i64
  %1245 = getelementptr inbounds i16, i16* %49, i64 %1244
  %1246 = load i16, i16* %1245, align 2, !tbaa !382
  %1247 = insertelement <64 x i16> %1242, i16 %1246, i32 60
  %1248 = extractelement <64 x i32> %942, i32 61
  %1249 = sext i32 %1248 to i64
  %1250 = getelementptr inbounds i16, i16* %49, i64 %1249
  %1251 = load i16, i16* %1250, align 2, !tbaa !382
  %1252 = insertelement <64 x i16> %1247, i16 %1251, i32 61
  %1253 = extractelement <64 x i32> %942, i32 62
  %1254 = sext i32 %1253 to i64
  %1255 = getelementptr inbounds i16, i16* %49, i64 %1254
  %1256 = load i16, i16* %1255, align 2, !tbaa !382
  %1257 = insertelement <64 x i16> %1252, i16 %1256, i32 62
  %1258 = extractelement <64 x i32> %942, i32 63
  %1259 = sext i32 %1258 to i64
  %1260 = getelementptr inbounds i16, i16* %49, i64 %1259
  %1261 = load i16, i16* %1260, align 2, !tbaa !382
  %1262 = insertelement <64 x i16> %1257, i16 %1261, i32 63
  %1263 = add nsw i32 %blur_x.s0.x.v1.base.s, -61
  %1264 = insertelement <64 x i32> undef, i32 %1263, i32 0
  %1265 = shufflevector <64 x i32> %1264, <64 x i32> undef, <64 x i32> zeroinitializer
  %1266 = add nsw <64 x i32> %1265, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1267 = shufflevector <64 x i32> %1266, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1268 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1267, <4 x i32> %48)
  %1269 = shufflevector <64 x i32> %1266, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1270 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1269, <4 x i32> %48)
  %1271 = shufflevector <64 x i32> %1266, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1272 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1271, <4 x i32> %48)
  %1273 = shufflevector <64 x i32> %1266, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1274 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1273, <4 x i32> %48)
  %1275 = shufflevector <64 x i32> %1266, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %1276 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1275, <4 x i32> %48)
  %1277 = shufflevector <64 x i32> %1266, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %1278 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1277, <4 x i32> %48)
  %1279 = shufflevector <64 x i32> %1266, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %1280 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1279, <4 x i32> %48)
  %1281 = shufflevector <64 x i32> %1266, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %1282 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1281, <4 x i32> %48)
  %1283 = shufflevector <64 x i32> %1266, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %1284 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1283, <4 x i32> %48)
  %1285 = shufflevector <64 x i32> %1266, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %1286 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1285, <4 x i32> %48)
  %1287 = shufflevector <64 x i32> %1266, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %1288 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1287, <4 x i32> %48)
  %1289 = shufflevector <64 x i32> %1266, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %1290 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1289, <4 x i32> %48)
  %1291 = shufflevector <64 x i32> %1266, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %1292 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1291, <4 x i32> %48)
  %1293 = shufflevector <64 x i32> %1266, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %1294 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1293, <4 x i32> %48)
  %1295 = shufflevector <64 x i32> %1266, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %1296 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1295, <4 x i32> %48)
  %1297 = shufflevector <64 x i32> %1266, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %1298 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1297, <4 x i32> %48)
  %1299 = shufflevector <4 x i32> %1298, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %1300 = shufflevector <8 x i32> %1299, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %1301 = shufflevector <16 x i32> %1300, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %1302 = shufflevector <32 x i32> %1301, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %1303 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1268, <4 x i32> zeroinitializer)
  %1304 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1270, <4 x i32> zeroinitializer)
  %1305 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1272, <4 x i32> zeroinitializer)
  %1306 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1274, <4 x i32> zeroinitializer)
  %1307 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1276, <4 x i32> zeroinitializer)
  %1308 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1278, <4 x i32> zeroinitializer)
  %1309 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1280, <4 x i32> zeroinitializer)
  %1310 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1282, <4 x i32> zeroinitializer)
  %1311 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1284, <4 x i32> zeroinitializer)
  %1312 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1286, <4 x i32> zeroinitializer)
  %1313 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1288, <4 x i32> zeroinitializer)
  %1314 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1290, <4 x i32> zeroinitializer)
  %1315 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1292, <4 x i32> zeroinitializer)
  %1316 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1294, <4 x i32> zeroinitializer)
  %1317 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1296, <4 x i32> zeroinitializer)
  %1318 = shufflevector <64 x i32> %1302, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %1319 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1318, <4 x i32> zeroinitializer)
  %1320 = shufflevector <4 x i32> %1303, <4 x i32> %1304, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1321 = shufflevector <4 x i32> %1305, <4 x i32> %1306, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1322 = shufflevector <4 x i32> %1307, <4 x i32> %1308, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1323 = shufflevector <4 x i32> %1309, <4 x i32> %1310, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1324 = shufflevector <4 x i32> %1311, <4 x i32> %1312, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1325 = shufflevector <4 x i32> %1313, <4 x i32> %1314, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1326 = shufflevector <4 x i32> %1315, <4 x i32> %1316, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1327 = shufflevector <4 x i32> %1317, <4 x i32> %1319, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1328 = shufflevector <8 x i32> %1320, <8 x i32> %1321, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1329 = shufflevector <8 x i32> %1322, <8 x i32> %1323, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1330 = shufflevector <8 x i32> %1324, <8 x i32> %1325, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1331 = shufflevector <8 x i32> %1326, <8 x i32> %1327, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1332 = shufflevector <16 x i32> %1328, <16 x i32> %1329, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1333 = shufflevector <16 x i32> %1330, <16 x i32> %1331, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1334 = shufflevector <32 x i32> %1332, <32 x i32> %1333, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1335 = add nsw <64 x i32> %1334, %t248
  %1336 = extractelement <64 x i32> %1335, i32 0
  %1337 = sext i32 %1336 to i64
  %1338 = getelementptr inbounds i16, i16* %49, i64 %1337
  %1339 = load i16, i16* %1338, align 2, !tbaa !382
  %1340 = insertelement <64 x i16> undef, i16 %1339, i32 0
  %1341 = extractelement <64 x i32> %1335, i32 1
  %1342 = sext i32 %1341 to i64
  %1343 = getelementptr inbounds i16, i16* %49, i64 %1342
  %1344 = load i16, i16* %1343, align 2, !tbaa !382
  %1345 = insertelement <64 x i16> %1340, i16 %1344, i32 1
  %1346 = extractelement <64 x i32> %1335, i32 2
  %1347 = sext i32 %1346 to i64
  %1348 = getelementptr inbounds i16, i16* %49, i64 %1347
  %1349 = load i16, i16* %1348, align 2, !tbaa !382
  %1350 = insertelement <64 x i16> %1345, i16 %1349, i32 2
  %1351 = extractelement <64 x i32> %1335, i32 3
  %1352 = sext i32 %1351 to i64
  %1353 = getelementptr inbounds i16, i16* %49, i64 %1352
  %1354 = load i16, i16* %1353, align 2, !tbaa !382
  %1355 = insertelement <64 x i16> %1350, i16 %1354, i32 3
  %1356 = extractelement <64 x i32> %1335, i32 4
  %1357 = sext i32 %1356 to i64
  %1358 = getelementptr inbounds i16, i16* %49, i64 %1357
  %1359 = load i16, i16* %1358, align 2, !tbaa !382
  %1360 = insertelement <64 x i16> %1355, i16 %1359, i32 4
  %1361 = extractelement <64 x i32> %1335, i32 5
  %1362 = sext i32 %1361 to i64
  %1363 = getelementptr inbounds i16, i16* %49, i64 %1362
  %1364 = load i16, i16* %1363, align 2, !tbaa !382
  %1365 = insertelement <64 x i16> %1360, i16 %1364, i32 5
  %1366 = extractelement <64 x i32> %1335, i32 6
  %1367 = sext i32 %1366 to i64
  %1368 = getelementptr inbounds i16, i16* %49, i64 %1367
  %1369 = load i16, i16* %1368, align 2, !tbaa !382
  %1370 = insertelement <64 x i16> %1365, i16 %1369, i32 6
  %1371 = extractelement <64 x i32> %1335, i32 7
  %1372 = sext i32 %1371 to i64
  %1373 = getelementptr inbounds i16, i16* %49, i64 %1372
  %1374 = load i16, i16* %1373, align 2, !tbaa !382
  %1375 = insertelement <64 x i16> %1370, i16 %1374, i32 7
  %1376 = extractelement <64 x i32> %1335, i32 8
  %1377 = sext i32 %1376 to i64
  %1378 = getelementptr inbounds i16, i16* %49, i64 %1377
  %1379 = load i16, i16* %1378, align 2, !tbaa !382
  %1380 = insertelement <64 x i16> %1375, i16 %1379, i32 8
  %1381 = extractelement <64 x i32> %1335, i32 9
  %1382 = sext i32 %1381 to i64
  %1383 = getelementptr inbounds i16, i16* %49, i64 %1382
  %1384 = load i16, i16* %1383, align 2, !tbaa !382
  %1385 = insertelement <64 x i16> %1380, i16 %1384, i32 9
  %1386 = extractelement <64 x i32> %1335, i32 10
  %1387 = sext i32 %1386 to i64
  %1388 = getelementptr inbounds i16, i16* %49, i64 %1387
  %1389 = load i16, i16* %1388, align 2, !tbaa !382
  %1390 = insertelement <64 x i16> %1385, i16 %1389, i32 10
  %1391 = extractelement <64 x i32> %1335, i32 11
  %1392 = sext i32 %1391 to i64
  %1393 = getelementptr inbounds i16, i16* %49, i64 %1392
  %1394 = load i16, i16* %1393, align 2, !tbaa !382
  %1395 = insertelement <64 x i16> %1390, i16 %1394, i32 11
  %1396 = extractelement <64 x i32> %1335, i32 12
  %1397 = sext i32 %1396 to i64
  %1398 = getelementptr inbounds i16, i16* %49, i64 %1397
  %1399 = load i16, i16* %1398, align 2, !tbaa !382
  %1400 = insertelement <64 x i16> %1395, i16 %1399, i32 12
  %1401 = extractelement <64 x i32> %1335, i32 13
  %1402 = sext i32 %1401 to i64
  %1403 = getelementptr inbounds i16, i16* %49, i64 %1402
  %1404 = load i16, i16* %1403, align 2, !tbaa !382
  %1405 = insertelement <64 x i16> %1400, i16 %1404, i32 13
  %1406 = extractelement <64 x i32> %1335, i32 14
  %1407 = sext i32 %1406 to i64
  %1408 = getelementptr inbounds i16, i16* %49, i64 %1407
  %1409 = load i16, i16* %1408, align 2, !tbaa !382
  %1410 = insertelement <64 x i16> %1405, i16 %1409, i32 14
  %1411 = extractelement <64 x i32> %1335, i32 15
  %1412 = sext i32 %1411 to i64
  %1413 = getelementptr inbounds i16, i16* %49, i64 %1412
  %1414 = load i16, i16* %1413, align 2, !tbaa !382
  %1415 = insertelement <64 x i16> %1410, i16 %1414, i32 15
  %1416 = extractelement <64 x i32> %1335, i32 16
  %1417 = sext i32 %1416 to i64
  %1418 = getelementptr inbounds i16, i16* %49, i64 %1417
  %1419 = load i16, i16* %1418, align 2, !tbaa !382
  %1420 = insertelement <64 x i16> %1415, i16 %1419, i32 16
  %1421 = extractelement <64 x i32> %1335, i32 17
  %1422 = sext i32 %1421 to i64
  %1423 = getelementptr inbounds i16, i16* %49, i64 %1422
  %1424 = load i16, i16* %1423, align 2, !tbaa !382
  %1425 = insertelement <64 x i16> %1420, i16 %1424, i32 17
  %1426 = extractelement <64 x i32> %1335, i32 18
  %1427 = sext i32 %1426 to i64
  %1428 = getelementptr inbounds i16, i16* %49, i64 %1427
  %1429 = load i16, i16* %1428, align 2, !tbaa !382
  %1430 = insertelement <64 x i16> %1425, i16 %1429, i32 18
  %1431 = extractelement <64 x i32> %1335, i32 19
  %1432 = sext i32 %1431 to i64
  %1433 = getelementptr inbounds i16, i16* %49, i64 %1432
  %1434 = load i16, i16* %1433, align 2, !tbaa !382
  %1435 = insertelement <64 x i16> %1430, i16 %1434, i32 19
  %1436 = extractelement <64 x i32> %1335, i32 20
  %1437 = sext i32 %1436 to i64
  %1438 = getelementptr inbounds i16, i16* %49, i64 %1437
  %1439 = load i16, i16* %1438, align 2, !tbaa !382
  %1440 = insertelement <64 x i16> %1435, i16 %1439, i32 20
  %1441 = extractelement <64 x i32> %1335, i32 21
  %1442 = sext i32 %1441 to i64
  %1443 = getelementptr inbounds i16, i16* %49, i64 %1442
  %1444 = load i16, i16* %1443, align 2, !tbaa !382
  %1445 = insertelement <64 x i16> %1440, i16 %1444, i32 21
  %1446 = extractelement <64 x i32> %1335, i32 22
  %1447 = sext i32 %1446 to i64
  %1448 = getelementptr inbounds i16, i16* %49, i64 %1447
  %1449 = load i16, i16* %1448, align 2, !tbaa !382
  %1450 = insertelement <64 x i16> %1445, i16 %1449, i32 22
  %1451 = extractelement <64 x i32> %1335, i32 23
  %1452 = sext i32 %1451 to i64
  %1453 = getelementptr inbounds i16, i16* %49, i64 %1452
  %1454 = load i16, i16* %1453, align 2, !tbaa !382
  %1455 = insertelement <64 x i16> %1450, i16 %1454, i32 23
  %1456 = extractelement <64 x i32> %1335, i32 24
  %1457 = sext i32 %1456 to i64
  %1458 = getelementptr inbounds i16, i16* %49, i64 %1457
  %1459 = load i16, i16* %1458, align 2, !tbaa !382
  %1460 = insertelement <64 x i16> %1455, i16 %1459, i32 24
  %1461 = extractelement <64 x i32> %1335, i32 25
  %1462 = sext i32 %1461 to i64
  %1463 = getelementptr inbounds i16, i16* %49, i64 %1462
  %1464 = load i16, i16* %1463, align 2, !tbaa !382
  %1465 = insertelement <64 x i16> %1460, i16 %1464, i32 25
  %1466 = extractelement <64 x i32> %1335, i32 26
  %1467 = sext i32 %1466 to i64
  %1468 = getelementptr inbounds i16, i16* %49, i64 %1467
  %1469 = load i16, i16* %1468, align 2, !tbaa !382
  %1470 = insertelement <64 x i16> %1465, i16 %1469, i32 26
  %1471 = extractelement <64 x i32> %1335, i32 27
  %1472 = sext i32 %1471 to i64
  %1473 = getelementptr inbounds i16, i16* %49, i64 %1472
  %1474 = load i16, i16* %1473, align 2, !tbaa !382
  %1475 = insertelement <64 x i16> %1470, i16 %1474, i32 27
  %1476 = extractelement <64 x i32> %1335, i32 28
  %1477 = sext i32 %1476 to i64
  %1478 = getelementptr inbounds i16, i16* %49, i64 %1477
  %1479 = load i16, i16* %1478, align 2, !tbaa !382
  %1480 = insertelement <64 x i16> %1475, i16 %1479, i32 28
  %1481 = extractelement <64 x i32> %1335, i32 29
  %1482 = sext i32 %1481 to i64
  %1483 = getelementptr inbounds i16, i16* %49, i64 %1482
  %1484 = load i16, i16* %1483, align 2, !tbaa !382
  %1485 = insertelement <64 x i16> %1480, i16 %1484, i32 29
  %1486 = extractelement <64 x i32> %1335, i32 30
  %1487 = sext i32 %1486 to i64
  %1488 = getelementptr inbounds i16, i16* %49, i64 %1487
  %1489 = load i16, i16* %1488, align 2, !tbaa !382
  %1490 = insertelement <64 x i16> %1485, i16 %1489, i32 30
  %1491 = extractelement <64 x i32> %1335, i32 31
  %1492 = sext i32 %1491 to i64
  %1493 = getelementptr inbounds i16, i16* %49, i64 %1492
  %1494 = load i16, i16* %1493, align 2, !tbaa !382
  %1495 = insertelement <64 x i16> %1490, i16 %1494, i32 31
  %1496 = extractelement <64 x i32> %1335, i32 32
  %1497 = sext i32 %1496 to i64
  %1498 = getelementptr inbounds i16, i16* %49, i64 %1497
  %1499 = load i16, i16* %1498, align 2, !tbaa !382
  %1500 = insertelement <64 x i16> %1495, i16 %1499, i32 32
  %1501 = extractelement <64 x i32> %1335, i32 33
  %1502 = sext i32 %1501 to i64
  %1503 = getelementptr inbounds i16, i16* %49, i64 %1502
  %1504 = load i16, i16* %1503, align 2, !tbaa !382
  %1505 = insertelement <64 x i16> %1500, i16 %1504, i32 33
  %1506 = extractelement <64 x i32> %1335, i32 34
  %1507 = sext i32 %1506 to i64
  %1508 = getelementptr inbounds i16, i16* %49, i64 %1507
  %1509 = load i16, i16* %1508, align 2, !tbaa !382
  %1510 = insertelement <64 x i16> %1505, i16 %1509, i32 34
  %1511 = extractelement <64 x i32> %1335, i32 35
  %1512 = sext i32 %1511 to i64
  %1513 = getelementptr inbounds i16, i16* %49, i64 %1512
  %1514 = load i16, i16* %1513, align 2, !tbaa !382
  %1515 = insertelement <64 x i16> %1510, i16 %1514, i32 35
  %1516 = extractelement <64 x i32> %1335, i32 36
  %1517 = sext i32 %1516 to i64
  %1518 = getelementptr inbounds i16, i16* %49, i64 %1517
  %1519 = load i16, i16* %1518, align 2, !tbaa !382
  %1520 = insertelement <64 x i16> %1515, i16 %1519, i32 36
  %1521 = extractelement <64 x i32> %1335, i32 37
  %1522 = sext i32 %1521 to i64
  %1523 = getelementptr inbounds i16, i16* %49, i64 %1522
  %1524 = load i16, i16* %1523, align 2, !tbaa !382
  %1525 = insertelement <64 x i16> %1520, i16 %1524, i32 37
  %1526 = extractelement <64 x i32> %1335, i32 38
  %1527 = sext i32 %1526 to i64
  %1528 = getelementptr inbounds i16, i16* %49, i64 %1527
  %1529 = load i16, i16* %1528, align 2, !tbaa !382
  %1530 = insertelement <64 x i16> %1525, i16 %1529, i32 38
  %1531 = extractelement <64 x i32> %1335, i32 39
  %1532 = sext i32 %1531 to i64
  %1533 = getelementptr inbounds i16, i16* %49, i64 %1532
  %1534 = load i16, i16* %1533, align 2, !tbaa !382
  %1535 = insertelement <64 x i16> %1530, i16 %1534, i32 39
  %1536 = extractelement <64 x i32> %1335, i32 40
  %1537 = sext i32 %1536 to i64
  %1538 = getelementptr inbounds i16, i16* %49, i64 %1537
  %1539 = load i16, i16* %1538, align 2, !tbaa !382
  %1540 = insertelement <64 x i16> %1535, i16 %1539, i32 40
  %1541 = extractelement <64 x i32> %1335, i32 41
  %1542 = sext i32 %1541 to i64
  %1543 = getelementptr inbounds i16, i16* %49, i64 %1542
  %1544 = load i16, i16* %1543, align 2, !tbaa !382
  %1545 = insertelement <64 x i16> %1540, i16 %1544, i32 41
  %1546 = extractelement <64 x i32> %1335, i32 42
  %1547 = sext i32 %1546 to i64
  %1548 = getelementptr inbounds i16, i16* %49, i64 %1547
  %1549 = load i16, i16* %1548, align 2, !tbaa !382
  %1550 = insertelement <64 x i16> %1545, i16 %1549, i32 42
  %1551 = extractelement <64 x i32> %1335, i32 43
  %1552 = sext i32 %1551 to i64
  %1553 = getelementptr inbounds i16, i16* %49, i64 %1552
  %1554 = load i16, i16* %1553, align 2, !tbaa !382
  %1555 = insertelement <64 x i16> %1550, i16 %1554, i32 43
  %1556 = extractelement <64 x i32> %1335, i32 44
  %1557 = sext i32 %1556 to i64
  %1558 = getelementptr inbounds i16, i16* %49, i64 %1557
  %1559 = load i16, i16* %1558, align 2, !tbaa !382
  %1560 = insertelement <64 x i16> %1555, i16 %1559, i32 44
  %1561 = extractelement <64 x i32> %1335, i32 45
  %1562 = sext i32 %1561 to i64
  %1563 = getelementptr inbounds i16, i16* %49, i64 %1562
  %1564 = load i16, i16* %1563, align 2, !tbaa !382
  %1565 = insertelement <64 x i16> %1560, i16 %1564, i32 45
  %1566 = extractelement <64 x i32> %1335, i32 46
  %1567 = sext i32 %1566 to i64
  %1568 = getelementptr inbounds i16, i16* %49, i64 %1567
  %1569 = load i16, i16* %1568, align 2, !tbaa !382
  %1570 = insertelement <64 x i16> %1565, i16 %1569, i32 46
  %1571 = extractelement <64 x i32> %1335, i32 47
  %1572 = sext i32 %1571 to i64
  %1573 = getelementptr inbounds i16, i16* %49, i64 %1572
  %1574 = load i16, i16* %1573, align 2, !tbaa !382
  %1575 = insertelement <64 x i16> %1570, i16 %1574, i32 47
  %1576 = extractelement <64 x i32> %1335, i32 48
  %1577 = sext i32 %1576 to i64
  %1578 = getelementptr inbounds i16, i16* %49, i64 %1577
  %1579 = load i16, i16* %1578, align 2, !tbaa !382
  %1580 = insertelement <64 x i16> %1575, i16 %1579, i32 48
  %1581 = extractelement <64 x i32> %1335, i32 49
  %1582 = sext i32 %1581 to i64
  %1583 = getelementptr inbounds i16, i16* %49, i64 %1582
  %1584 = load i16, i16* %1583, align 2, !tbaa !382
  %1585 = insertelement <64 x i16> %1580, i16 %1584, i32 49
  %1586 = extractelement <64 x i32> %1335, i32 50
  %1587 = sext i32 %1586 to i64
  %1588 = getelementptr inbounds i16, i16* %49, i64 %1587
  %1589 = load i16, i16* %1588, align 2, !tbaa !382
  %1590 = insertelement <64 x i16> %1585, i16 %1589, i32 50
  %1591 = extractelement <64 x i32> %1335, i32 51
  %1592 = sext i32 %1591 to i64
  %1593 = getelementptr inbounds i16, i16* %49, i64 %1592
  %1594 = load i16, i16* %1593, align 2, !tbaa !382
  %1595 = insertelement <64 x i16> %1590, i16 %1594, i32 51
  %1596 = extractelement <64 x i32> %1335, i32 52
  %1597 = sext i32 %1596 to i64
  %1598 = getelementptr inbounds i16, i16* %49, i64 %1597
  %1599 = load i16, i16* %1598, align 2, !tbaa !382
  %1600 = insertelement <64 x i16> %1595, i16 %1599, i32 52
  %1601 = extractelement <64 x i32> %1335, i32 53
  %1602 = sext i32 %1601 to i64
  %1603 = getelementptr inbounds i16, i16* %49, i64 %1602
  %1604 = load i16, i16* %1603, align 2, !tbaa !382
  %1605 = insertelement <64 x i16> %1600, i16 %1604, i32 53
  %1606 = extractelement <64 x i32> %1335, i32 54
  %1607 = sext i32 %1606 to i64
  %1608 = getelementptr inbounds i16, i16* %49, i64 %1607
  %1609 = load i16, i16* %1608, align 2, !tbaa !382
  %1610 = insertelement <64 x i16> %1605, i16 %1609, i32 54
  %1611 = extractelement <64 x i32> %1335, i32 55
  %1612 = sext i32 %1611 to i64
  %1613 = getelementptr inbounds i16, i16* %49, i64 %1612
  %1614 = load i16, i16* %1613, align 2, !tbaa !382
  %1615 = insertelement <64 x i16> %1610, i16 %1614, i32 55
  %1616 = extractelement <64 x i32> %1335, i32 56
  %1617 = sext i32 %1616 to i64
  %1618 = getelementptr inbounds i16, i16* %49, i64 %1617
  %1619 = load i16, i16* %1618, align 2, !tbaa !382
  %1620 = insertelement <64 x i16> %1615, i16 %1619, i32 56
  %1621 = extractelement <64 x i32> %1335, i32 57
  %1622 = sext i32 %1621 to i64
  %1623 = getelementptr inbounds i16, i16* %49, i64 %1622
  %1624 = load i16, i16* %1623, align 2, !tbaa !382
  %1625 = insertelement <64 x i16> %1620, i16 %1624, i32 57
  %1626 = extractelement <64 x i32> %1335, i32 58
  %1627 = sext i32 %1626 to i64
  %1628 = getelementptr inbounds i16, i16* %49, i64 %1627
  %1629 = load i16, i16* %1628, align 2, !tbaa !382
  %1630 = insertelement <64 x i16> %1625, i16 %1629, i32 58
  %1631 = extractelement <64 x i32> %1335, i32 59
  %1632 = sext i32 %1631 to i64
  %1633 = getelementptr inbounds i16, i16* %49, i64 %1632
  %1634 = load i16, i16* %1633, align 2, !tbaa !382
  %1635 = insertelement <64 x i16> %1630, i16 %1634, i32 59
  %1636 = extractelement <64 x i32> %1335, i32 60
  %1637 = sext i32 %1636 to i64
  %1638 = getelementptr inbounds i16, i16* %49, i64 %1637
  %1639 = load i16, i16* %1638, align 2, !tbaa !382
  %1640 = insertelement <64 x i16> %1635, i16 %1639, i32 60
  %1641 = extractelement <64 x i32> %1335, i32 61
  %1642 = sext i32 %1641 to i64
  %1643 = getelementptr inbounds i16, i16* %49, i64 %1642
  %1644 = load i16, i16* %1643, align 2, !tbaa !382
  %1645 = insertelement <64 x i16> %1640, i16 %1644, i32 61
  %1646 = extractelement <64 x i32> %1335, i32 62
  %1647 = sext i32 %1646 to i64
  %1648 = getelementptr inbounds i16, i16* %49, i64 %1647
  %1649 = load i16, i16* %1648, align 2, !tbaa !382
  %1650 = insertelement <64 x i16> %1645, i16 %1649, i32 62
  %1651 = extractelement <64 x i32> %1335, i32 63
  %1652 = sext i32 %1651 to i64
  %1653 = getelementptr inbounds i16, i16* %49, i64 %1652
  %1654 = load i16, i16* %1653, align 2, !tbaa !382
  %1655 = insertelement <64 x i16> %1650, i16 %1654, i32 63
  %1656 = add nsw i32 %blur_x.s0.x.v1.base.s, -60
  %1657 = insertelement <64 x i32> undef, i32 %1656, i32 0
  %1658 = shufflevector <64 x i32> %1657, <64 x i32> undef, <64 x i32> zeroinitializer
  %1659 = add nsw <64 x i32> %1658, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1660 = shufflevector <64 x i32> %1659, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1661 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1660, <4 x i32> %48)
  %1662 = shufflevector <64 x i32> %1659, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1663 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1662, <4 x i32> %48)
  %1664 = shufflevector <64 x i32> %1659, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1665 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1664, <4 x i32> %48)
  %1666 = shufflevector <64 x i32> %1659, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1667 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1666, <4 x i32> %48)
  %1668 = shufflevector <64 x i32> %1659, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %1669 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1668, <4 x i32> %48)
  %1670 = shufflevector <64 x i32> %1659, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %1671 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1670, <4 x i32> %48)
  %1672 = shufflevector <64 x i32> %1659, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %1673 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1672, <4 x i32> %48)
  %1674 = shufflevector <64 x i32> %1659, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %1675 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1674, <4 x i32> %48)
  %1676 = shufflevector <64 x i32> %1659, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %1677 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1676, <4 x i32> %48)
  %1678 = shufflevector <64 x i32> %1659, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %1679 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1678, <4 x i32> %48)
  %1680 = shufflevector <64 x i32> %1659, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %1681 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1680, <4 x i32> %48)
  %1682 = shufflevector <64 x i32> %1659, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %1683 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1682, <4 x i32> %48)
  %1684 = shufflevector <64 x i32> %1659, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %1685 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1684, <4 x i32> %48)
  %1686 = shufflevector <64 x i32> %1659, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %1687 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1686, <4 x i32> %48)
  %1688 = shufflevector <64 x i32> %1659, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %1689 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1688, <4 x i32> %48)
  %1690 = shufflevector <64 x i32> %1659, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %1691 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1690, <4 x i32> %48)
  %1692 = shufflevector <4 x i32> %1691, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %1693 = shufflevector <8 x i32> %1692, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %1694 = shufflevector <16 x i32> %1693, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %1695 = shufflevector <32 x i32> %1694, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %1696 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1661, <4 x i32> zeroinitializer)
  %1697 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1663, <4 x i32> zeroinitializer)
  %1698 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1665, <4 x i32> zeroinitializer)
  %1699 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1667, <4 x i32> zeroinitializer)
  %1700 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1669, <4 x i32> zeroinitializer)
  %1701 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1671, <4 x i32> zeroinitializer)
  %1702 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1673, <4 x i32> zeroinitializer)
  %1703 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1675, <4 x i32> zeroinitializer)
  %1704 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1677, <4 x i32> zeroinitializer)
  %1705 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1679, <4 x i32> zeroinitializer)
  %1706 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1681, <4 x i32> zeroinitializer)
  %1707 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1683, <4 x i32> zeroinitializer)
  %1708 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1685, <4 x i32> zeroinitializer)
  %1709 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1687, <4 x i32> zeroinitializer)
  %1710 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1689, <4 x i32> zeroinitializer)
  %1711 = shufflevector <64 x i32> %1695, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %1712 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1711, <4 x i32> zeroinitializer)
  %1713 = shufflevector <4 x i32> %1696, <4 x i32> %1697, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1714 = shufflevector <4 x i32> %1698, <4 x i32> %1699, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1715 = shufflevector <4 x i32> %1700, <4 x i32> %1701, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1716 = shufflevector <4 x i32> %1702, <4 x i32> %1703, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1717 = shufflevector <4 x i32> %1704, <4 x i32> %1705, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1718 = shufflevector <4 x i32> %1706, <4 x i32> %1707, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1719 = shufflevector <4 x i32> %1708, <4 x i32> %1709, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1720 = shufflevector <4 x i32> %1710, <4 x i32> %1712, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1721 = shufflevector <8 x i32> %1713, <8 x i32> %1714, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1722 = shufflevector <8 x i32> %1715, <8 x i32> %1716, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1723 = shufflevector <8 x i32> %1717, <8 x i32> %1718, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1724 = shufflevector <8 x i32> %1719, <8 x i32> %1720, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1725 = shufflevector <16 x i32> %1721, <16 x i32> %1722, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1726 = shufflevector <16 x i32> %1723, <16 x i32> %1724, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1727 = shufflevector <32 x i32> %1725, <32 x i32> %1726, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1728 = add nsw <64 x i32> %1727, %t248
  %1729 = extractelement <64 x i32> %1728, i32 0
  %1730 = sext i32 %1729 to i64
  %1731 = getelementptr inbounds i16, i16* %49, i64 %1730
  %1732 = load i16, i16* %1731, align 2, !tbaa !382
  %1733 = insertelement <64 x i16> undef, i16 %1732, i32 0
  %1734 = extractelement <64 x i32> %1728, i32 1
  %1735 = sext i32 %1734 to i64
  %1736 = getelementptr inbounds i16, i16* %49, i64 %1735
  %1737 = load i16, i16* %1736, align 2, !tbaa !382
  %1738 = insertelement <64 x i16> %1733, i16 %1737, i32 1
  %1739 = extractelement <64 x i32> %1728, i32 2
  %1740 = sext i32 %1739 to i64
  %1741 = getelementptr inbounds i16, i16* %49, i64 %1740
  %1742 = load i16, i16* %1741, align 2, !tbaa !382
  %1743 = insertelement <64 x i16> %1738, i16 %1742, i32 2
  %1744 = extractelement <64 x i32> %1728, i32 3
  %1745 = sext i32 %1744 to i64
  %1746 = getelementptr inbounds i16, i16* %49, i64 %1745
  %1747 = load i16, i16* %1746, align 2, !tbaa !382
  %1748 = insertelement <64 x i16> %1743, i16 %1747, i32 3
  %1749 = extractelement <64 x i32> %1728, i32 4
  %1750 = sext i32 %1749 to i64
  %1751 = getelementptr inbounds i16, i16* %49, i64 %1750
  %1752 = load i16, i16* %1751, align 2, !tbaa !382
  %1753 = insertelement <64 x i16> %1748, i16 %1752, i32 4
  %1754 = extractelement <64 x i32> %1728, i32 5
  %1755 = sext i32 %1754 to i64
  %1756 = getelementptr inbounds i16, i16* %49, i64 %1755
  %1757 = load i16, i16* %1756, align 2, !tbaa !382
  %1758 = insertelement <64 x i16> %1753, i16 %1757, i32 5
  %1759 = extractelement <64 x i32> %1728, i32 6
  %1760 = sext i32 %1759 to i64
  %1761 = getelementptr inbounds i16, i16* %49, i64 %1760
  %1762 = load i16, i16* %1761, align 2, !tbaa !382
  %1763 = insertelement <64 x i16> %1758, i16 %1762, i32 6
  %1764 = extractelement <64 x i32> %1728, i32 7
  %1765 = sext i32 %1764 to i64
  %1766 = getelementptr inbounds i16, i16* %49, i64 %1765
  %1767 = load i16, i16* %1766, align 2, !tbaa !382
  %1768 = insertelement <64 x i16> %1763, i16 %1767, i32 7
  %1769 = extractelement <64 x i32> %1728, i32 8
  %1770 = sext i32 %1769 to i64
  %1771 = getelementptr inbounds i16, i16* %49, i64 %1770
  %1772 = load i16, i16* %1771, align 2, !tbaa !382
  %1773 = insertelement <64 x i16> %1768, i16 %1772, i32 8
  %1774 = extractelement <64 x i32> %1728, i32 9
  %1775 = sext i32 %1774 to i64
  %1776 = getelementptr inbounds i16, i16* %49, i64 %1775
  %1777 = load i16, i16* %1776, align 2, !tbaa !382
  %1778 = insertelement <64 x i16> %1773, i16 %1777, i32 9
  %1779 = extractelement <64 x i32> %1728, i32 10
  %1780 = sext i32 %1779 to i64
  %1781 = getelementptr inbounds i16, i16* %49, i64 %1780
  %1782 = load i16, i16* %1781, align 2, !tbaa !382
  %1783 = insertelement <64 x i16> %1778, i16 %1782, i32 10
  %1784 = extractelement <64 x i32> %1728, i32 11
  %1785 = sext i32 %1784 to i64
  %1786 = getelementptr inbounds i16, i16* %49, i64 %1785
  %1787 = load i16, i16* %1786, align 2, !tbaa !382
  %1788 = insertelement <64 x i16> %1783, i16 %1787, i32 11
  %1789 = extractelement <64 x i32> %1728, i32 12
  %1790 = sext i32 %1789 to i64
  %1791 = getelementptr inbounds i16, i16* %49, i64 %1790
  %1792 = load i16, i16* %1791, align 2, !tbaa !382
  %1793 = insertelement <64 x i16> %1788, i16 %1792, i32 12
  %1794 = extractelement <64 x i32> %1728, i32 13
  %1795 = sext i32 %1794 to i64
  %1796 = getelementptr inbounds i16, i16* %49, i64 %1795
  %1797 = load i16, i16* %1796, align 2, !tbaa !382
  %1798 = insertelement <64 x i16> %1793, i16 %1797, i32 13
  %1799 = extractelement <64 x i32> %1728, i32 14
  %1800 = sext i32 %1799 to i64
  %1801 = getelementptr inbounds i16, i16* %49, i64 %1800
  %1802 = load i16, i16* %1801, align 2, !tbaa !382
  %1803 = insertelement <64 x i16> %1798, i16 %1802, i32 14
  %1804 = extractelement <64 x i32> %1728, i32 15
  %1805 = sext i32 %1804 to i64
  %1806 = getelementptr inbounds i16, i16* %49, i64 %1805
  %1807 = load i16, i16* %1806, align 2, !tbaa !382
  %1808 = insertelement <64 x i16> %1803, i16 %1807, i32 15
  %1809 = extractelement <64 x i32> %1728, i32 16
  %1810 = sext i32 %1809 to i64
  %1811 = getelementptr inbounds i16, i16* %49, i64 %1810
  %1812 = load i16, i16* %1811, align 2, !tbaa !382
  %1813 = insertelement <64 x i16> %1808, i16 %1812, i32 16
  %1814 = extractelement <64 x i32> %1728, i32 17
  %1815 = sext i32 %1814 to i64
  %1816 = getelementptr inbounds i16, i16* %49, i64 %1815
  %1817 = load i16, i16* %1816, align 2, !tbaa !382
  %1818 = insertelement <64 x i16> %1813, i16 %1817, i32 17
  %1819 = extractelement <64 x i32> %1728, i32 18
  %1820 = sext i32 %1819 to i64
  %1821 = getelementptr inbounds i16, i16* %49, i64 %1820
  %1822 = load i16, i16* %1821, align 2, !tbaa !382
  %1823 = insertelement <64 x i16> %1818, i16 %1822, i32 18
  %1824 = extractelement <64 x i32> %1728, i32 19
  %1825 = sext i32 %1824 to i64
  %1826 = getelementptr inbounds i16, i16* %49, i64 %1825
  %1827 = load i16, i16* %1826, align 2, !tbaa !382
  %1828 = insertelement <64 x i16> %1823, i16 %1827, i32 19
  %1829 = extractelement <64 x i32> %1728, i32 20
  %1830 = sext i32 %1829 to i64
  %1831 = getelementptr inbounds i16, i16* %49, i64 %1830
  %1832 = load i16, i16* %1831, align 2, !tbaa !382
  %1833 = insertelement <64 x i16> %1828, i16 %1832, i32 20
  %1834 = extractelement <64 x i32> %1728, i32 21
  %1835 = sext i32 %1834 to i64
  %1836 = getelementptr inbounds i16, i16* %49, i64 %1835
  %1837 = load i16, i16* %1836, align 2, !tbaa !382
  %1838 = insertelement <64 x i16> %1833, i16 %1837, i32 21
  %1839 = extractelement <64 x i32> %1728, i32 22
  %1840 = sext i32 %1839 to i64
  %1841 = getelementptr inbounds i16, i16* %49, i64 %1840
  %1842 = load i16, i16* %1841, align 2, !tbaa !382
  %1843 = insertelement <64 x i16> %1838, i16 %1842, i32 22
  %1844 = extractelement <64 x i32> %1728, i32 23
  %1845 = sext i32 %1844 to i64
  %1846 = getelementptr inbounds i16, i16* %49, i64 %1845
  %1847 = load i16, i16* %1846, align 2, !tbaa !382
  %1848 = insertelement <64 x i16> %1843, i16 %1847, i32 23
  %1849 = extractelement <64 x i32> %1728, i32 24
  %1850 = sext i32 %1849 to i64
  %1851 = getelementptr inbounds i16, i16* %49, i64 %1850
  %1852 = load i16, i16* %1851, align 2, !tbaa !382
  %1853 = insertelement <64 x i16> %1848, i16 %1852, i32 24
  %1854 = extractelement <64 x i32> %1728, i32 25
  %1855 = sext i32 %1854 to i64
  %1856 = getelementptr inbounds i16, i16* %49, i64 %1855
  %1857 = load i16, i16* %1856, align 2, !tbaa !382
  %1858 = insertelement <64 x i16> %1853, i16 %1857, i32 25
  %1859 = extractelement <64 x i32> %1728, i32 26
  %1860 = sext i32 %1859 to i64
  %1861 = getelementptr inbounds i16, i16* %49, i64 %1860
  %1862 = load i16, i16* %1861, align 2, !tbaa !382
  %1863 = insertelement <64 x i16> %1858, i16 %1862, i32 26
  %1864 = extractelement <64 x i32> %1728, i32 27
  %1865 = sext i32 %1864 to i64
  %1866 = getelementptr inbounds i16, i16* %49, i64 %1865
  %1867 = load i16, i16* %1866, align 2, !tbaa !382
  %1868 = insertelement <64 x i16> %1863, i16 %1867, i32 27
  %1869 = extractelement <64 x i32> %1728, i32 28
  %1870 = sext i32 %1869 to i64
  %1871 = getelementptr inbounds i16, i16* %49, i64 %1870
  %1872 = load i16, i16* %1871, align 2, !tbaa !382
  %1873 = insertelement <64 x i16> %1868, i16 %1872, i32 28
  %1874 = extractelement <64 x i32> %1728, i32 29
  %1875 = sext i32 %1874 to i64
  %1876 = getelementptr inbounds i16, i16* %49, i64 %1875
  %1877 = load i16, i16* %1876, align 2, !tbaa !382
  %1878 = insertelement <64 x i16> %1873, i16 %1877, i32 29
  %1879 = extractelement <64 x i32> %1728, i32 30
  %1880 = sext i32 %1879 to i64
  %1881 = getelementptr inbounds i16, i16* %49, i64 %1880
  %1882 = load i16, i16* %1881, align 2, !tbaa !382
  %1883 = insertelement <64 x i16> %1878, i16 %1882, i32 30
  %1884 = extractelement <64 x i32> %1728, i32 31
  %1885 = sext i32 %1884 to i64
  %1886 = getelementptr inbounds i16, i16* %49, i64 %1885
  %1887 = load i16, i16* %1886, align 2, !tbaa !382
  %1888 = insertelement <64 x i16> %1883, i16 %1887, i32 31
  %1889 = extractelement <64 x i32> %1728, i32 32
  %1890 = sext i32 %1889 to i64
  %1891 = getelementptr inbounds i16, i16* %49, i64 %1890
  %1892 = load i16, i16* %1891, align 2, !tbaa !382
  %1893 = insertelement <64 x i16> %1888, i16 %1892, i32 32
  %1894 = extractelement <64 x i32> %1728, i32 33
  %1895 = sext i32 %1894 to i64
  %1896 = getelementptr inbounds i16, i16* %49, i64 %1895
  %1897 = load i16, i16* %1896, align 2, !tbaa !382
  %1898 = insertelement <64 x i16> %1893, i16 %1897, i32 33
  %1899 = extractelement <64 x i32> %1728, i32 34
  %1900 = sext i32 %1899 to i64
  %1901 = getelementptr inbounds i16, i16* %49, i64 %1900
  %1902 = load i16, i16* %1901, align 2, !tbaa !382
  %1903 = insertelement <64 x i16> %1898, i16 %1902, i32 34
  %1904 = extractelement <64 x i32> %1728, i32 35
  %1905 = sext i32 %1904 to i64
  %1906 = getelementptr inbounds i16, i16* %49, i64 %1905
  %1907 = load i16, i16* %1906, align 2, !tbaa !382
  %1908 = insertelement <64 x i16> %1903, i16 %1907, i32 35
  %1909 = extractelement <64 x i32> %1728, i32 36
  %1910 = sext i32 %1909 to i64
  %1911 = getelementptr inbounds i16, i16* %49, i64 %1910
  %1912 = load i16, i16* %1911, align 2, !tbaa !382
  %1913 = insertelement <64 x i16> %1908, i16 %1912, i32 36
  %1914 = extractelement <64 x i32> %1728, i32 37
  %1915 = sext i32 %1914 to i64
  %1916 = getelementptr inbounds i16, i16* %49, i64 %1915
  %1917 = load i16, i16* %1916, align 2, !tbaa !382
  %1918 = insertelement <64 x i16> %1913, i16 %1917, i32 37
  %1919 = extractelement <64 x i32> %1728, i32 38
  %1920 = sext i32 %1919 to i64
  %1921 = getelementptr inbounds i16, i16* %49, i64 %1920
  %1922 = load i16, i16* %1921, align 2, !tbaa !382
  %1923 = insertelement <64 x i16> %1918, i16 %1922, i32 38
  %1924 = extractelement <64 x i32> %1728, i32 39
  %1925 = sext i32 %1924 to i64
  %1926 = getelementptr inbounds i16, i16* %49, i64 %1925
  %1927 = load i16, i16* %1926, align 2, !tbaa !382
  %1928 = insertelement <64 x i16> %1923, i16 %1927, i32 39
  %1929 = extractelement <64 x i32> %1728, i32 40
  %1930 = sext i32 %1929 to i64
  %1931 = getelementptr inbounds i16, i16* %49, i64 %1930
  %1932 = load i16, i16* %1931, align 2, !tbaa !382
  %1933 = insertelement <64 x i16> %1928, i16 %1932, i32 40
  %1934 = extractelement <64 x i32> %1728, i32 41
  %1935 = sext i32 %1934 to i64
  %1936 = getelementptr inbounds i16, i16* %49, i64 %1935
  %1937 = load i16, i16* %1936, align 2, !tbaa !382
  %1938 = insertelement <64 x i16> %1933, i16 %1937, i32 41
  %1939 = extractelement <64 x i32> %1728, i32 42
  %1940 = sext i32 %1939 to i64
  %1941 = getelementptr inbounds i16, i16* %49, i64 %1940
  %1942 = load i16, i16* %1941, align 2, !tbaa !382
  %1943 = insertelement <64 x i16> %1938, i16 %1942, i32 42
  %1944 = extractelement <64 x i32> %1728, i32 43
  %1945 = sext i32 %1944 to i64
  %1946 = getelementptr inbounds i16, i16* %49, i64 %1945
  %1947 = load i16, i16* %1946, align 2, !tbaa !382
  %1948 = insertelement <64 x i16> %1943, i16 %1947, i32 43
  %1949 = extractelement <64 x i32> %1728, i32 44
  %1950 = sext i32 %1949 to i64
  %1951 = getelementptr inbounds i16, i16* %49, i64 %1950
  %1952 = load i16, i16* %1951, align 2, !tbaa !382
  %1953 = insertelement <64 x i16> %1948, i16 %1952, i32 44
  %1954 = extractelement <64 x i32> %1728, i32 45
  %1955 = sext i32 %1954 to i64
  %1956 = getelementptr inbounds i16, i16* %49, i64 %1955
  %1957 = load i16, i16* %1956, align 2, !tbaa !382
  %1958 = insertelement <64 x i16> %1953, i16 %1957, i32 45
  %1959 = extractelement <64 x i32> %1728, i32 46
  %1960 = sext i32 %1959 to i64
  %1961 = getelementptr inbounds i16, i16* %49, i64 %1960
  %1962 = load i16, i16* %1961, align 2, !tbaa !382
  %1963 = insertelement <64 x i16> %1958, i16 %1962, i32 46
  %1964 = extractelement <64 x i32> %1728, i32 47
  %1965 = sext i32 %1964 to i64
  %1966 = getelementptr inbounds i16, i16* %49, i64 %1965
  %1967 = load i16, i16* %1966, align 2, !tbaa !382
  %1968 = insertelement <64 x i16> %1963, i16 %1967, i32 47
  %1969 = extractelement <64 x i32> %1728, i32 48
  %1970 = sext i32 %1969 to i64
  %1971 = getelementptr inbounds i16, i16* %49, i64 %1970
  %1972 = load i16, i16* %1971, align 2, !tbaa !382
  %1973 = insertelement <64 x i16> %1968, i16 %1972, i32 48
  %1974 = extractelement <64 x i32> %1728, i32 49
  %1975 = sext i32 %1974 to i64
  %1976 = getelementptr inbounds i16, i16* %49, i64 %1975
  %1977 = load i16, i16* %1976, align 2, !tbaa !382
  %1978 = insertelement <64 x i16> %1973, i16 %1977, i32 49
  %1979 = extractelement <64 x i32> %1728, i32 50
  %1980 = sext i32 %1979 to i64
  %1981 = getelementptr inbounds i16, i16* %49, i64 %1980
  %1982 = load i16, i16* %1981, align 2, !tbaa !382
  %1983 = insertelement <64 x i16> %1978, i16 %1982, i32 50
  %1984 = extractelement <64 x i32> %1728, i32 51
  %1985 = sext i32 %1984 to i64
  %1986 = getelementptr inbounds i16, i16* %49, i64 %1985
  %1987 = load i16, i16* %1986, align 2, !tbaa !382
  %1988 = insertelement <64 x i16> %1983, i16 %1987, i32 51
  %1989 = extractelement <64 x i32> %1728, i32 52
  %1990 = sext i32 %1989 to i64
  %1991 = getelementptr inbounds i16, i16* %49, i64 %1990
  %1992 = load i16, i16* %1991, align 2, !tbaa !382
  %1993 = insertelement <64 x i16> %1988, i16 %1992, i32 52
  %1994 = extractelement <64 x i32> %1728, i32 53
  %1995 = sext i32 %1994 to i64
  %1996 = getelementptr inbounds i16, i16* %49, i64 %1995
  %1997 = load i16, i16* %1996, align 2, !tbaa !382
  %1998 = insertelement <64 x i16> %1993, i16 %1997, i32 53
  %1999 = extractelement <64 x i32> %1728, i32 54
  %2000 = sext i32 %1999 to i64
  %2001 = getelementptr inbounds i16, i16* %49, i64 %2000
  %2002 = load i16, i16* %2001, align 2, !tbaa !382
  %2003 = insertelement <64 x i16> %1998, i16 %2002, i32 54
  %2004 = extractelement <64 x i32> %1728, i32 55
  %2005 = sext i32 %2004 to i64
  %2006 = getelementptr inbounds i16, i16* %49, i64 %2005
  %2007 = load i16, i16* %2006, align 2, !tbaa !382
  %2008 = insertelement <64 x i16> %2003, i16 %2007, i32 55
  %2009 = extractelement <64 x i32> %1728, i32 56
  %2010 = sext i32 %2009 to i64
  %2011 = getelementptr inbounds i16, i16* %49, i64 %2010
  %2012 = load i16, i16* %2011, align 2, !tbaa !382
  %2013 = insertelement <64 x i16> %2008, i16 %2012, i32 56
  %2014 = extractelement <64 x i32> %1728, i32 57
  %2015 = sext i32 %2014 to i64
  %2016 = getelementptr inbounds i16, i16* %49, i64 %2015
  %2017 = load i16, i16* %2016, align 2, !tbaa !382
  %2018 = insertelement <64 x i16> %2013, i16 %2017, i32 57
  %2019 = extractelement <64 x i32> %1728, i32 58
  %2020 = sext i32 %2019 to i64
  %2021 = getelementptr inbounds i16, i16* %49, i64 %2020
  %2022 = load i16, i16* %2021, align 2, !tbaa !382
  %2023 = insertelement <64 x i16> %2018, i16 %2022, i32 58
  %2024 = extractelement <64 x i32> %1728, i32 59
  %2025 = sext i32 %2024 to i64
  %2026 = getelementptr inbounds i16, i16* %49, i64 %2025
  %2027 = load i16, i16* %2026, align 2, !tbaa !382
  %2028 = insertelement <64 x i16> %2023, i16 %2027, i32 59
  %2029 = extractelement <64 x i32> %1728, i32 60
  %2030 = sext i32 %2029 to i64
  %2031 = getelementptr inbounds i16, i16* %49, i64 %2030
  %2032 = load i16, i16* %2031, align 2, !tbaa !382
  %2033 = insertelement <64 x i16> %2028, i16 %2032, i32 60
  %2034 = extractelement <64 x i32> %1728, i32 61
  %2035 = sext i32 %2034 to i64
  %2036 = getelementptr inbounds i16, i16* %49, i64 %2035
  %2037 = load i16, i16* %2036, align 2, !tbaa !382
  %2038 = insertelement <64 x i16> %2033, i16 %2037, i32 61
  %2039 = extractelement <64 x i32> %1728, i32 62
  %2040 = sext i32 %2039 to i64
  %2041 = getelementptr inbounds i16, i16* %49, i64 %2040
  %2042 = load i16, i16* %2041, align 2, !tbaa !382
  %2043 = insertelement <64 x i16> %2038, i16 %2042, i32 62
  %2044 = extractelement <64 x i32> %1728, i32 63
  %2045 = sext i32 %2044 to i64
  %2046 = getelementptr inbounds i16, i16* %49, i64 %2045
  %2047 = load i16, i16* %2046, align 2, !tbaa !382
  %2048 = insertelement <64 x i16> %2043, i16 %2047, i32 63
  %2049 = add nsw i32 %blur_x.s0.x.v1.base.s, -58
  %2050 = insertelement <64 x i32> undef, i32 %2049, i32 0
  %2051 = shufflevector <64 x i32> %2050, <64 x i32> undef, <64 x i32> zeroinitializer
  %2052 = add nsw <64 x i32> %2051, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2053 = shufflevector <64 x i32> %2052, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2054 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2053, <4 x i32> %48)
  %2055 = shufflevector <64 x i32> %2052, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2056 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2055, <4 x i32> %48)
  %2057 = shufflevector <64 x i32> %2052, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2058 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2057, <4 x i32> %48)
  %2059 = shufflevector <64 x i32> %2052, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2060 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2059, <4 x i32> %48)
  %2061 = shufflevector <64 x i32> %2052, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %2062 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2061, <4 x i32> %48)
  %2063 = shufflevector <64 x i32> %2052, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %2064 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2063, <4 x i32> %48)
  %2065 = shufflevector <64 x i32> %2052, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %2066 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2065, <4 x i32> %48)
  %2067 = shufflevector <64 x i32> %2052, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %2068 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2067, <4 x i32> %48)
  %2069 = shufflevector <64 x i32> %2052, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %2070 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2069, <4 x i32> %48)
  %2071 = shufflevector <64 x i32> %2052, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %2072 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2071, <4 x i32> %48)
  %2073 = shufflevector <64 x i32> %2052, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %2074 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2073, <4 x i32> %48)
  %2075 = shufflevector <64 x i32> %2052, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %2076 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2075, <4 x i32> %48)
  %2077 = shufflevector <64 x i32> %2052, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %2078 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2077, <4 x i32> %48)
  %2079 = shufflevector <64 x i32> %2052, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %2080 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2079, <4 x i32> %48)
  %2081 = shufflevector <64 x i32> %2052, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %2082 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2081, <4 x i32> %48)
  %2083 = shufflevector <64 x i32> %2052, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %2084 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2083, <4 x i32> %48)
  %2085 = shufflevector <4 x i32> %2084, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %2086 = shufflevector <8 x i32> %2085, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2087 = shufflevector <16 x i32> %2086, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %2088 = shufflevector <32 x i32> %2087, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %2089 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2054, <4 x i32> zeroinitializer)
  %2090 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2056, <4 x i32> zeroinitializer)
  %2091 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2058, <4 x i32> zeroinitializer)
  %2092 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2060, <4 x i32> zeroinitializer)
  %2093 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2062, <4 x i32> zeroinitializer)
  %2094 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2064, <4 x i32> zeroinitializer)
  %2095 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2066, <4 x i32> zeroinitializer)
  %2096 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2068, <4 x i32> zeroinitializer)
  %2097 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2070, <4 x i32> zeroinitializer)
  %2098 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2072, <4 x i32> zeroinitializer)
  %2099 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2074, <4 x i32> zeroinitializer)
  %2100 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2076, <4 x i32> zeroinitializer)
  %2101 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2078, <4 x i32> zeroinitializer)
  %2102 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2080, <4 x i32> zeroinitializer)
  %2103 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2082, <4 x i32> zeroinitializer)
  %2104 = shufflevector <64 x i32> %2088, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %2105 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2104, <4 x i32> zeroinitializer)
  %2106 = shufflevector <4 x i32> %2089, <4 x i32> %2090, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2107 = shufflevector <4 x i32> %2091, <4 x i32> %2092, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2108 = shufflevector <4 x i32> %2093, <4 x i32> %2094, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2109 = shufflevector <4 x i32> %2095, <4 x i32> %2096, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2110 = shufflevector <4 x i32> %2097, <4 x i32> %2098, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2111 = shufflevector <4 x i32> %2099, <4 x i32> %2100, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2112 = shufflevector <4 x i32> %2101, <4 x i32> %2102, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2113 = shufflevector <4 x i32> %2103, <4 x i32> %2105, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2114 = shufflevector <8 x i32> %2106, <8 x i32> %2107, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2115 = shufflevector <8 x i32> %2108, <8 x i32> %2109, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2116 = shufflevector <8 x i32> %2110, <8 x i32> %2111, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2117 = shufflevector <8 x i32> %2112, <8 x i32> %2113, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2118 = shufflevector <16 x i32> %2114, <16 x i32> %2115, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2119 = shufflevector <16 x i32> %2116, <16 x i32> %2117, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2120 = shufflevector <32 x i32> %2118, <32 x i32> %2119, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2121 = add nsw <64 x i32> %2120, %t248
  %2122 = extractelement <64 x i32> %2121, i32 0
  %2123 = sext i32 %2122 to i64
  %2124 = getelementptr inbounds i16, i16* %49, i64 %2123
  %2125 = load i16, i16* %2124, align 2, !tbaa !382
  %2126 = insertelement <64 x i16> undef, i16 %2125, i32 0
  %2127 = extractelement <64 x i32> %2121, i32 1
  %2128 = sext i32 %2127 to i64
  %2129 = getelementptr inbounds i16, i16* %49, i64 %2128
  %2130 = load i16, i16* %2129, align 2, !tbaa !382
  %2131 = insertelement <64 x i16> %2126, i16 %2130, i32 1
  %2132 = extractelement <64 x i32> %2121, i32 2
  %2133 = sext i32 %2132 to i64
  %2134 = getelementptr inbounds i16, i16* %49, i64 %2133
  %2135 = load i16, i16* %2134, align 2, !tbaa !382
  %2136 = insertelement <64 x i16> %2131, i16 %2135, i32 2
  %2137 = extractelement <64 x i32> %2121, i32 3
  %2138 = sext i32 %2137 to i64
  %2139 = getelementptr inbounds i16, i16* %49, i64 %2138
  %2140 = load i16, i16* %2139, align 2, !tbaa !382
  %2141 = insertelement <64 x i16> %2136, i16 %2140, i32 3
  %2142 = extractelement <64 x i32> %2121, i32 4
  %2143 = sext i32 %2142 to i64
  %2144 = getelementptr inbounds i16, i16* %49, i64 %2143
  %2145 = load i16, i16* %2144, align 2, !tbaa !382
  %2146 = insertelement <64 x i16> %2141, i16 %2145, i32 4
  %2147 = extractelement <64 x i32> %2121, i32 5
  %2148 = sext i32 %2147 to i64
  %2149 = getelementptr inbounds i16, i16* %49, i64 %2148
  %2150 = load i16, i16* %2149, align 2, !tbaa !382
  %2151 = insertelement <64 x i16> %2146, i16 %2150, i32 5
  %2152 = extractelement <64 x i32> %2121, i32 6
  %2153 = sext i32 %2152 to i64
  %2154 = getelementptr inbounds i16, i16* %49, i64 %2153
  %2155 = load i16, i16* %2154, align 2, !tbaa !382
  %2156 = insertelement <64 x i16> %2151, i16 %2155, i32 6
  %2157 = extractelement <64 x i32> %2121, i32 7
  %2158 = sext i32 %2157 to i64
  %2159 = getelementptr inbounds i16, i16* %49, i64 %2158
  %2160 = load i16, i16* %2159, align 2, !tbaa !382
  %2161 = insertelement <64 x i16> %2156, i16 %2160, i32 7
  %2162 = extractelement <64 x i32> %2121, i32 8
  %2163 = sext i32 %2162 to i64
  %2164 = getelementptr inbounds i16, i16* %49, i64 %2163
  %2165 = load i16, i16* %2164, align 2, !tbaa !382
  %2166 = insertelement <64 x i16> %2161, i16 %2165, i32 8
  %2167 = extractelement <64 x i32> %2121, i32 9
  %2168 = sext i32 %2167 to i64
  %2169 = getelementptr inbounds i16, i16* %49, i64 %2168
  %2170 = load i16, i16* %2169, align 2, !tbaa !382
  %2171 = insertelement <64 x i16> %2166, i16 %2170, i32 9
  %2172 = extractelement <64 x i32> %2121, i32 10
  %2173 = sext i32 %2172 to i64
  %2174 = getelementptr inbounds i16, i16* %49, i64 %2173
  %2175 = load i16, i16* %2174, align 2, !tbaa !382
  %2176 = insertelement <64 x i16> %2171, i16 %2175, i32 10
  %2177 = extractelement <64 x i32> %2121, i32 11
  %2178 = sext i32 %2177 to i64
  %2179 = getelementptr inbounds i16, i16* %49, i64 %2178
  %2180 = load i16, i16* %2179, align 2, !tbaa !382
  %2181 = insertelement <64 x i16> %2176, i16 %2180, i32 11
  %2182 = extractelement <64 x i32> %2121, i32 12
  %2183 = sext i32 %2182 to i64
  %2184 = getelementptr inbounds i16, i16* %49, i64 %2183
  %2185 = load i16, i16* %2184, align 2, !tbaa !382
  %2186 = insertelement <64 x i16> %2181, i16 %2185, i32 12
  %2187 = extractelement <64 x i32> %2121, i32 13
  %2188 = sext i32 %2187 to i64
  %2189 = getelementptr inbounds i16, i16* %49, i64 %2188
  %2190 = load i16, i16* %2189, align 2, !tbaa !382
  %2191 = insertelement <64 x i16> %2186, i16 %2190, i32 13
  %2192 = extractelement <64 x i32> %2121, i32 14
  %2193 = sext i32 %2192 to i64
  %2194 = getelementptr inbounds i16, i16* %49, i64 %2193
  %2195 = load i16, i16* %2194, align 2, !tbaa !382
  %2196 = insertelement <64 x i16> %2191, i16 %2195, i32 14
  %2197 = extractelement <64 x i32> %2121, i32 15
  %2198 = sext i32 %2197 to i64
  %2199 = getelementptr inbounds i16, i16* %49, i64 %2198
  %2200 = load i16, i16* %2199, align 2, !tbaa !382
  %2201 = insertelement <64 x i16> %2196, i16 %2200, i32 15
  %2202 = extractelement <64 x i32> %2121, i32 16
  %2203 = sext i32 %2202 to i64
  %2204 = getelementptr inbounds i16, i16* %49, i64 %2203
  %2205 = load i16, i16* %2204, align 2, !tbaa !382
  %2206 = insertelement <64 x i16> %2201, i16 %2205, i32 16
  %2207 = extractelement <64 x i32> %2121, i32 17
  %2208 = sext i32 %2207 to i64
  %2209 = getelementptr inbounds i16, i16* %49, i64 %2208
  %2210 = load i16, i16* %2209, align 2, !tbaa !382
  %2211 = insertelement <64 x i16> %2206, i16 %2210, i32 17
  %2212 = extractelement <64 x i32> %2121, i32 18
  %2213 = sext i32 %2212 to i64
  %2214 = getelementptr inbounds i16, i16* %49, i64 %2213
  %2215 = load i16, i16* %2214, align 2, !tbaa !382
  %2216 = insertelement <64 x i16> %2211, i16 %2215, i32 18
  %2217 = extractelement <64 x i32> %2121, i32 19
  %2218 = sext i32 %2217 to i64
  %2219 = getelementptr inbounds i16, i16* %49, i64 %2218
  %2220 = load i16, i16* %2219, align 2, !tbaa !382
  %2221 = insertelement <64 x i16> %2216, i16 %2220, i32 19
  %2222 = extractelement <64 x i32> %2121, i32 20
  %2223 = sext i32 %2222 to i64
  %2224 = getelementptr inbounds i16, i16* %49, i64 %2223
  %2225 = load i16, i16* %2224, align 2, !tbaa !382
  %2226 = insertelement <64 x i16> %2221, i16 %2225, i32 20
  %2227 = extractelement <64 x i32> %2121, i32 21
  %2228 = sext i32 %2227 to i64
  %2229 = getelementptr inbounds i16, i16* %49, i64 %2228
  %2230 = load i16, i16* %2229, align 2, !tbaa !382
  %2231 = insertelement <64 x i16> %2226, i16 %2230, i32 21
  %2232 = extractelement <64 x i32> %2121, i32 22
  %2233 = sext i32 %2232 to i64
  %2234 = getelementptr inbounds i16, i16* %49, i64 %2233
  %2235 = load i16, i16* %2234, align 2, !tbaa !382
  %2236 = insertelement <64 x i16> %2231, i16 %2235, i32 22
  %2237 = extractelement <64 x i32> %2121, i32 23
  %2238 = sext i32 %2237 to i64
  %2239 = getelementptr inbounds i16, i16* %49, i64 %2238
  %2240 = load i16, i16* %2239, align 2, !tbaa !382
  %2241 = insertelement <64 x i16> %2236, i16 %2240, i32 23
  %2242 = extractelement <64 x i32> %2121, i32 24
  %2243 = sext i32 %2242 to i64
  %2244 = getelementptr inbounds i16, i16* %49, i64 %2243
  %2245 = load i16, i16* %2244, align 2, !tbaa !382
  %2246 = insertelement <64 x i16> %2241, i16 %2245, i32 24
  %2247 = extractelement <64 x i32> %2121, i32 25
  %2248 = sext i32 %2247 to i64
  %2249 = getelementptr inbounds i16, i16* %49, i64 %2248
  %2250 = load i16, i16* %2249, align 2, !tbaa !382
  %2251 = insertelement <64 x i16> %2246, i16 %2250, i32 25
  %2252 = extractelement <64 x i32> %2121, i32 26
  %2253 = sext i32 %2252 to i64
  %2254 = getelementptr inbounds i16, i16* %49, i64 %2253
  %2255 = load i16, i16* %2254, align 2, !tbaa !382
  %2256 = insertelement <64 x i16> %2251, i16 %2255, i32 26
  %2257 = extractelement <64 x i32> %2121, i32 27
  %2258 = sext i32 %2257 to i64
  %2259 = getelementptr inbounds i16, i16* %49, i64 %2258
  %2260 = load i16, i16* %2259, align 2, !tbaa !382
  %2261 = insertelement <64 x i16> %2256, i16 %2260, i32 27
  %2262 = extractelement <64 x i32> %2121, i32 28
  %2263 = sext i32 %2262 to i64
  %2264 = getelementptr inbounds i16, i16* %49, i64 %2263
  %2265 = load i16, i16* %2264, align 2, !tbaa !382
  %2266 = insertelement <64 x i16> %2261, i16 %2265, i32 28
  %2267 = extractelement <64 x i32> %2121, i32 29
  %2268 = sext i32 %2267 to i64
  %2269 = getelementptr inbounds i16, i16* %49, i64 %2268
  %2270 = load i16, i16* %2269, align 2, !tbaa !382
  %2271 = insertelement <64 x i16> %2266, i16 %2270, i32 29
  %2272 = extractelement <64 x i32> %2121, i32 30
  %2273 = sext i32 %2272 to i64
  %2274 = getelementptr inbounds i16, i16* %49, i64 %2273
  %2275 = load i16, i16* %2274, align 2, !tbaa !382
  %2276 = insertelement <64 x i16> %2271, i16 %2275, i32 30
  %2277 = extractelement <64 x i32> %2121, i32 31
  %2278 = sext i32 %2277 to i64
  %2279 = getelementptr inbounds i16, i16* %49, i64 %2278
  %2280 = load i16, i16* %2279, align 2, !tbaa !382
  %2281 = insertelement <64 x i16> %2276, i16 %2280, i32 31
  %2282 = extractelement <64 x i32> %2121, i32 32
  %2283 = sext i32 %2282 to i64
  %2284 = getelementptr inbounds i16, i16* %49, i64 %2283
  %2285 = load i16, i16* %2284, align 2, !tbaa !382
  %2286 = insertelement <64 x i16> %2281, i16 %2285, i32 32
  %2287 = extractelement <64 x i32> %2121, i32 33
  %2288 = sext i32 %2287 to i64
  %2289 = getelementptr inbounds i16, i16* %49, i64 %2288
  %2290 = load i16, i16* %2289, align 2, !tbaa !382
  %2291 = insertelement <64 x i16> %2286, i16 %2290, i32 33
  %2292 = extractelement <64 x i32> %2121, i32 34
  %2293 = sext i32 %2292 to i64
  %2294 = getelementptr inbounds i16, i16* %49, i64 %2293
  %2295 = load i16, i16* %2294, align 2, !tbaa !382
  %2296 = insertelement <64 x i16> %2291, i16 %2295, i32 34
  %2297 = extractelement <64 x i32> %2121, i32 35
  %2298 = sext i32 %2297 to i64
  %2299 = getelementptr inbounds i16, i16* %49, i64 %2298
  %2300 = load i16, i16* %2299, align 2, !tbaa !382
  %2301 = insertelement <64 x i16> %2296, i16 %2300, i32 35
  %2302 = extractelement <64 x i32> %2121, i32 36
  %2303 = sext i32 %2302 to i64
  %2304 = getelementptr inbounds i16, i16* %49, i64 %2303
  %2305 = load i16, i16* %2304, align 2, !tbaa !382
  %2306 = insertelement <64 x i16> %2301, i16 %2305, i32 36
  %2307 = extractelement <64 x i32> %2121, i32 37
  %2308 = sext i32 %2307 to i64
  %2309 = getelementptr inbounds i16, i16* %49, i64 %2308
  %2310 = load i16, i16* %2309, align 2, !tbaa !382
  %2311 = insertelement <64 x i16> %2306, i16 %2310, i32 37
  %2312 = extractelement <64 x i32> %2121, i32 38
  %2313 = sext i32 %2312 to i64
  %2314 = getelementptr inbounds i16, i16* %49, i64 %2313
  %2315 = load i16, i16* %2314, align 2, !tbaa !382
  %2316 = insertelement <64 x i16> %2311, i16 %2315, i32 38
  %2317 = extractelement <64 x i32> %2121, i32 39
  %2318 = sext i32 %2317 to i64
  %2319 = getelementptr inbounds i16, i16* %49, i64 %2318
  %2320 = load i16, i16* %2319, align 2, !tbaa !382
  %2321 = insertelement <64 x i16> %2316, i16 %2320, i32 39
  %2322 = extractelement <64 x i32> %2121, i32 40
  %2323 = sext i32 %2322 to i64
  %2324 = getelementptr inbounds i16, i16* %49, i64 %2323
  %2325 = load i16, i16* %2324, align 2, !tbaa !382
  %2326 = insertelement <64 x i16> %2321, i16 %2325, i32 40
  %2327 = extractelement <64 x i32> %2121, i32 41
  %2328 = sext i32 %2327 to i64
  %2329 = getelementptr inbounds i16, i16* %49, i64 %2328
  %2330 = load i16, i16* %2329, align 2, !tbaa !382
  %2331 = insertelement <64 x i16> %2326, i16 %2330, i32 41
  %2332 = extractelement <64 x i32> %2121, i32 42
  %2333 = sext i32 %2332 to i64
  %2334 = getelementptr inbounds i16, i16* %49, i64 %2333
  %2335 = load i16, i16* %2334, align 2, !tbaa !382
  %2336 = insertelement <64 x i16> %2331, i16 %2335, i32 42
  %2337 = extractelement <64 x i32> %2121, i32 43
  %2338 = sext i32 %2337 to i64
  %2339 = getelementptr inbounds i16, i16* %49, i64 %2338
  %2340 = load i16, i16* %2339, align 2, !tbaa !382
  %2341 = insertelement <64 x i16> %2336, i16 %2340, i32 43
  %2342 = extractelement <64 x i32> %2121, i32 44
  %2343 = sext i32 %2342 to i64
  %2344 = getelementptr inbounds i16, i16* %49, i64 %2343
  %2345 = load i16, i16* %2344, align 2, !tbaa !382
  %2346 = insertelement <64 x i16> %2341, i16 %2345, i32 44
  %2347 = extractelement <64 x i32> %2121, i32 45
  %2348 = sext i32 %2347 to i64
  %2349 = getelementptr inbounds i16, i16* %49, i64 %2348
  %2350 = load i16, i16* %2349, align 2, !tbaa !382
  %2351 = insertelement <64 x i16> %2346, i16 %2350, i32 45
  %2352 = extractelement <64 x i32> %2121, i32 46
  %2353 = sext i32 %2352 to i64
  %2354 = getelementptr inbounds i16, i16* %49, i64 %2353
  %2355 = load i16, i16* %2354, align 2, !tbaa !382
  %2356 = insertelement <64 x i16> %2351, i16 %2355, i32 46
  %2357 = extractelement <64 x i32> %2121, i32 47
  %2358 = sext i32 %2357 to i64
  %2359 = getelementptr inbounds i16, i16* %49, i64 %2358
  %2360 = load i16, i16* %2359, align 2, !tbaa !382
  %2361 = insertelement <64 x i16> %2356, i16 %2360, i32 47
  %2362 = extractelement <64 x i32> %2121, i32 48
  %2363 = sext i32 %2362 to i64
  %2364 = getelementptr inbounds i16, i16* %49, i64 %2363
  %2365 = load i16, i16* %2364, align 2, !tbaa !382
  %2366 = insertelement <64 x i16> %2361, i16 %2365, i32 48
  %2367 = extractelement <64 x i32> %2121, i32 49
  %2368 = sext i32 %2367 to i64
  %2369 = getelementptr inbounds i16, i16* %49, i64 %2368
  %2370 = load i16, i16* %2369, align 2, !tbaa !382
  %2371 = insertelement <64 x i16> %2366, i16 %2370, i32 49
  %2372 = extractelement <64 x i32> %2121, i32 50
  %2373 = sext i32 %2372 to i64
  %2374 = getelementptr inbounds i16, i16* %49, i64 %2373
  %2375 = load i16, i16* %2374, align 2, !tbaa !382
  %2376 = insertelement <64 x i16> %2371, i16 %2375, i32 50
  %2377 = extractelement <64 x i32> %2121, i32 51
  %2378 = sext i32 %2377 to i64
  %2379 = getelementptr inbounds i16, i16* %49, i64 %2378
  %2380 = load i16, i16* %2379, align 2, !tbaa !382
  %2381 = insertelement <64 x i16> %2376, i16 %2380, i32 51
  %2382 = extractelement <64 x i32> %2121, i32 52
  %2383 = sext i32 %2382 to i64
  %2384 = getelementptr inbounds i16, i16* %49, i64 %2383
  %2385 = load i16, i16* %2384, align 2, !tbaa !382
  %2386 = insertelement <64 x i16> %2381, i16 %2385, i32 52
  %2387 = extractelement <64 x i32> %2121, i32 53
  %2388 = sext i32 %2387 to i64
  %2389 = getelementptr inbounds i16, i16* %49, i64 %2388
  %2390 = load i16, i16* %2389, align 2, !tbaa !382
  %2391 = insertelement <64 x i16> %2386, i16 %2390, i32 53
  %2392 = extractelement <64 x i32> %2121, i32 54
  %2393 = sext i32 %2392 to i64
  %2394 = getelementptr inbounds i16, i16* %49, i64 %2393
  %2395 = load i16, i16* %2394, align 2, !tbaa !382
  %2396 = insertelement <64 x i16> %2391, i16 %2395, i32 54
  %2397 = extractelement <64 x i32> %2121, i32 55
  %2398 = sext i32 %2397 to i64
  %2399 = getelementptr inbounds i16, i16* %49, i64 %2398
  %2400 = load i16, i16* %2399, align 2, !tbaa !382
  %2401 = insertelement <64 x i16> %2396, i16 %2400, i32 55
  %2402 = extractelement <64 x i32> %2121, i32 56
  %2403 = sext i32 %2402 to i64
  %2404 = getelementptr inbounds i16, i16* %49, i64 %2403
  %2405 = load i16, i16* %2404, align 2, !tbaa !382
  %2406 = insertelement <64 x i16> %2401, i16 %2405, i32 56
  %2407 = extractelement <64 x i32> %2121, i32 57
  %2408 = sext i32 %2407 to i64
  %2409 = getelementptr inbounds i16, i16* %49, i64 %2408
  %2410 = load i16, i16* %2409, align 2, !tbaa !382
  %2411 = insertelement <64 x i16> %2406, i16 %2410, i32 57
  %2412 = extractelement <64 x i32> %2121, i32 58
  %2413 = sext i32 %2412 to i64
  %2414 = getelementptr inbounds i16, i16* %49, i64 %2413
  %2415 = load i16, i16* %2414, align 2, !tbaa !382
  %2416 = insertelement <64 x i16> %2411, i16 %2415, i32 58
  %2417 = extractelement <64 x i32> %2121, i32 59
  %2418 = sext i32 %2417 to i64
  %2419 = getelementptr inbounds i16, i16* %49, i64 %2418
  %2420 = load i16, i16* %2419, align 2, !tbaa !382
  %2421 = insertelement <64 x i16> %2416, i16 %2420, i32 59
  %2422 = extractelement <64 x i32> %2121, i32 60
  %2423 = sext i32 %2422 to i64
  %2424 = getelementptr inbounds i16, i16* %49, i64 %2423
  %2425 = load i16, i16* %2424, align 2, !tbaa !382
  %2426 = insertelement <64 x i16> %2421, i16 %2425, i32 60
  %2427 = extractelement <64 x i32> %2121, i32 61
  %2428 = sext i32 %2427 to i64
  %2429 = getelementptr inbounds i16, i16* %49, i64 %2428
  %2430 = load i16, i16* %2429, align 2, !tbaa !382
  %2431 = insertelement <64 x i16> %2426, i16 %2430, i32 61
  %2432 = extractelement <64 x i32> %2121, i32 62
  %2433 = sext i32 %2432 to i64
  %2434 = getelementptr inbounds i16, i16* %49, i64 %2433
  %2435 = load i16, i16* %2434, align 2, !tbaa !382
  %2436 = insertelement <64 x i16> %2431, i16 %2435, i32 62
  %2437 = extractelement <64 x i32> %2121, i32 63
  %2438 = sext i32 %2437 to i64
  %2439 = getelementptr inbounds i16, i16* %49, i64 %2438
  %2440 = load i16, i16* %2439, align 2, !tbaa !382
  %2441 = insertelement <64 x i16> %2436, i16 %2440, i32 63
  %2442 = add nsw i32 %blur_x.s0.x.v1.base.s, -59
  %2443 = insertelement <64 x i32> undef, i32 %2442, i32 0
  %2444 = shufflevector <64 x i32> %2443, <64 x i32> undef, <64 x i32> zeroinitializer
  %2445 = add nsw <64 x i32> %2444, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2446 = shufflevector <64 x i32> %2445, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2447 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2446, <4 x i32> %48)
  %2448 = shufflevector <64 x i32> %2445, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2449 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2448, <4 x i32> %48)
  %2450 = shufflevector <64 x i32> %2445, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2451 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2450, <4 x i32> %48)
  %2452 = shufflevector <64 x i32> %2445, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2453 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2452, <4 x i32> %48)
  %2454 = shufflevector <64 x i32> %2445, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %2455 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2454, <4 x i32> %48)
  %2456 = shufflevector <64 x i32> %2445, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %2457 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2456, <4 x i32> %48)
  %2458 = shufflevector <64 x i32> %2445, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %2459 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2458, <4 x i32> %48)
  %2460 = shufflevector <64 x i32> %2445, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %2461 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2460, <4 x i32> %48)
  %2462 = shufflevector <64 x i32> %2445, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %2463 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2462, <4 x i32> %48)
  %2464 = shufflevector <64 x i32> %2445, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %2465 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2464, <4 x i32> %48)
  %2466 = shufflevector <64 x i32> %2445, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %2467 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2466, <4 x i32> %48)
  %2468 = shufflevector <64 x i32> %2445, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %2469 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2468, <4 x i32> %48)
  %2470 = shufflevector <64 x i32> %2445, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %2471 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2470, <4 x i32> %48)
  %2472 = shufflevector <64 x i32> %2445, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %2473 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2472, <4 x i32> %48)
  %2474 = shufflevector <64 x i32> %2445, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %2475 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2474, <4 x i32> %48)
  %2476 = shufflevector <64 x i32> %2445, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %2477 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2476, <4 x i32> %48)
  %2478 = shufflevector <4 x i32> %2477, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %2479 = shufflevector <8 x i32> %2478, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2480 = shufflevector <16 x i32> %2479, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %2481 = shufflevector <32 x i32> %2480, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %2482 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2447, <4 x i32> zeroinitializer)
  %2483 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2449, <4 x i32> zeroinitializer)
  %2484 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2451, <4 x i32> zeroinitializer)
  %2485 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2453, <4 x i32> zeroinitializer)
  %2486 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2455, <4 x i32> zeroinitializer)
  %2487 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2457, <4 x i32> zeroinitializer)
  %2488 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2459, <4 x i32> zeroinitializer)
  %2489 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2461, <4 x i32> zeroinitializer)
  %2490 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2463, <4 x i32> zeroinitializer)
  %2491 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2465, <4 x i32> zeroinitializer)
  %2492 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2467, <4 x i32> zeroinitializer)
  %2493 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2469, <4 x i32> zeroinitializer)
  %2494 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2471, <4 x i32> zeroinitializer)
  %2495 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2473, <4 x i32> zeroinitializer)
  %2496 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2475, <4 x i32> zeroinitializer)
  %2497 = shufflevector <64 x i32> %2481, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %2498 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2497, <4 x i32> zeroinitializer)
  %2499 = shufflevector <4 x i32> %2482, <4 x i32> %2483, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2500 = shufflevector <4 x i32> %2484, <4 x i32> %2485, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2501 = shufflevector <4 x i32> %2486, <4 x i32> %2487, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2502 = shufflevector <4 x i32> %2488, <4 x i32> %2489, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2503 = shufflevector <4 x i32> %2490, <4 x i32> %2491, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2504 = shufflevector <4 x i32> %2492, <4 x i32> %2493, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2505 = shufflevector <4 x i32> %2494, <4 x i32> %2495, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2506 = shufflevector <4 x i32> %2496, <4 x i32> %2498, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2507 = shufflevector <8 x i32> %2499, <8 x i32> %2500, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2508 = shufflevector <8 x i32> %2501, <8 x i32> %2502, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2509 = shufflevector <8 x i32> %2503, <8 x i32> %2504, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2510 = shufflevector <8 x i32> %2505, <8 x i32> %2506, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2511 = shufflevector <16 x i32> %2507, <16 x i32> %2508, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2512 = shufflevector <16 x i32> %2509, <16 x i32> %2510, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2513 = shufflevector <32 x i32> %2511, <32 x i32> %2512, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2514 = add nsw <64 x i32> %2513, %t248
  %2515 = extractelement <64 x i32> %2514, i32 0
  %2516 = sext i32 %2515 to i64
  %2517 = getelementptr inbounds i16, i16* %49, i64 %2516
  %2518 = load i16, i16* %2517, align 2, !tbaa !382
  %2519 = insertelement <64 x i16> undef, i16 %2518, i32 0
  %2520 = extractelement <64 x i32> %2514, i32 1
  %2521 = sext i32 %2520 to i64
  %2522 = getelementptr inbounds i16, i16* %49, i64 %2521
  %2523 = load i16, i16* %2522, align 2, !tbaa !382
  %2524 = insertelement <64 x i16> %2519, i16 %2523, i32 1
  %2525 = extractelement <64 x i32> %2514, i32 2
  %2526 = sext i32 %2525 to i64
  %2527 = getelementptr inbounds i16, i16* %49, i64 %2526
  %2528 = load i16, i16* %2527, align 2, !tbaa !382
  %2529 = insertelement <64 x i16> %2524, i16 %2528, i32 2
  %2530 = extractelement <64 x i32> %2514, i32 3
  %2531 = sext i32 %2530 to i64
  %2532 = getelementptr inbounds i16, i16* %49, i64 %2531
  %2533 = load i16, i16* %2532, align 2, !tbaa !382
  %2534 = insertelement <64 x i16> %2529, i16 %2533, i32 3
  %2535 = extractelement <64 x i32> %2514, i32 4
  %2536 = sext i32 %2535 to i64
  %2537 = getelementptr inbounds i16, i16* %49, i64 %2536
  %2538 = load i16, i16* %2537, align 2, !tbaa !382
  %2539 = insertelement <64 x i16> %2534, i16 %2538, i32 4
  %2540 = extractelement <64 x i32> %2514, i32 5
  %2541 = sext i32 %2540 to i64
  %2542 = getelementptr inbounds i16, i16* %49, i64 %2541
  %2543 = load i16, i16* %2542, align 2, !tbaa !382
  %2544 = insertelement <64 x i16> %2539, i16 %2543, i32 5
  %2545 = extractelement <64 x i32> %2514, i32 6
  %2546 = sext i32 %2545 to i64
  %2547 = getelementptr inbounds i16, i16* %49, i64 %2546
  %2548 = load i16, i16* %2547, align 2, !tbaa !382
  %2549 = insertelement <64 x i16> %2544, i16 %2548, i32 6
  %2550 = extractelement <64 x i32> %2514, i32 7
  %2551 = sext i32 %2550 to i64
  %2552 = getelementptr inbounds i16, i16* %49, i64 %2551
  %2553 = load i16, i16* %2552, align 2, !tbaa !382
  %2554 = insertelement <64 x i16> %2549, i16 %2553, i32 7
  %2555 = extractelement <64 x i32> %2514, i32 8
  %2556 = sext i32 %2555 to i64
  %2557 = getelementptr inbounds i16, i16* %49, i64 %2556
  %2558 = load i16, i16* %2557, align 2, !tbaa !382
  %2559 = insertelement <64 x i16> %2554, i16 %2558, i32 8
  %2560 = extractelement <64 x i32> %2514, i32 9
  %2561 = sext i32 %2560 to i64
  %2562 = getelementptr inbounds i16, i16* %49, i64 %2561
  %2563 = load i16, i16* %2562, align 2, !tbaa !382
  %2564 = insertelement <64 x i16> %2559, i16 %2563, i32 9
  %2565 = extractelement <64 x i32> %2514, i32 10
  %2566 = sext i32 %2565 to i64
  %2567 = getelementptr inbounds i16, i16* %49, i64 %2566
  %2568 = load i16, i16* %2567, align 2, !tbaa !382
  %2569 = insertelement <64 x i16> %2564, i16 %2568, i32 10
  %2570 = extractelement <64 x i32> %2514, i32 11
  %2571 = sext i32 %2570 to i64
  %2572 = getelementptr inbounds i16, i16* %49, i64 %2571
  %2573 = load i16, i16* %2572, align 2, !tbaa !382
  %2574 = insertelement <64 x i16> %2569, i16 %2573, i32 11
  %2575 = extractelement <64 x i32> %2514, i32 12
  %2576 = sext i32 %2575 to i64
  %2577 = getelementptr inbounds i16, i16* %49, i64 %2576
  %2578 = load i16, i16* %2577, align 2, !tbaa !382
  %2579 = insertelement <64 x i16> %2574, i16 %2578, i32 12
  %2580 = extractelement <64 x i32> %2514, i32 13
  %2581 = sext i32 %2580 to i64
  %2582 = getelementptr inbounds i16, i16* %49, i64 %2581
  %2583 = load i16, i16* %2582, align 2, !tbaa !382
  %2584 = insertelement <64 x i16> %2579, i16 %2583, i32 13
  %2585 = extractelement <64 x i32> %2514, i32 14
  %2586 = sext i32 %2585 to i64
  %2587 = getelementptr inbounds i16, i16* %49, i64 %2586
  %2588 = load i16, i16* %2587, align 2, !tbaa !382
  %2589 = insertelement <64 x i16> %2584, i16 %2588, i32 14
  %2590 = extractelement <64 x i32> %2514, i32 15
  %2591 = sext i32 %2590 to i64
  %2592 = getelementptr inbounds i16, i16* %49, i64 %2591
  %2593 = load i16, i16* %2592, align 2, !tbaa !382
  %2594 = insertelement <64 x i16> %2589, i16 %2593, i32 15
  %2595 = extractelement <64 x i32> %2514, i32 16
  %2596 = sext i32 %2595 to i64
  %2597 = getelementptr inbounds i16, i16* %49, i64 %2596
  %2598 = load i16, i16* %2597, align 2, !tbaa !382
  %2599 = insertelement <64 x i16> %2594, i16 %2598, i32 16
  %2600 = extractelement <64 x i32> %2514, i32 17
  %2601 = sext i32 %2600 to i64
  %2602 = getelementptr inbounds i16, i16* %49, i64 %2601
  %2603 = load i16, i16* %2602, align 2, !tbaa !382
  %2604 = insertelement <64 x i16> %2599, i16 %2603, i32 17
  %2605 = extractelement <64 x i32> %2514, i32 18
  %2606 = sext i32 %2605 to i64
  %2607 = getelementptr inbounds i16, i16* %49, i64 %2606
  %2608 = load i16, i16* %2607, align 2, !tbaa !382
  %2609 = insertelement <64 x i16> %2604, i16 %2608, i32 18
  %2610 = extractelement <64 x i32> %2514, i32 19
  %2611 = sext i32 %2610 to i64
  %2612 = getelementptr inbounds i16, i16* %49, i64 %2611
  %2613 = load i16, i16* %2612, align 2, !tbaa !382
  %2614 = insertelement <64 x i16> %2609, i16 %2613, i32 19
  %2615 = extractelement <64 x i32> %2514, i32 20
  %2616 = sext i32 %2615 to i64
  %2617 = getelementptr inbounds i16, i16* %49, i64 %2616
  %2618 = load i16, i16* %2617, align 2, !tbaa !382
  %2619 = insertelement <64 x i16> %2614, i16 %2618, i32 20
  %2620 = extractelement <64 x i32> %2514, i32 21
  %2621 = sext i32 %2620 to i64
  %2622 = getelementptr inbounds i16, i16* %49, i64 %2621
  %2623 = load i16, i16* %2622, align 2, !tbaa !382
  %2624 = insertelement <64 x i16> %2619, i16 %2623, i32 21
  %2625 = extractelement <64 x i32> %2514, i32 22
  %2626 = sext i32 %2625 to i64
  %2627 = getelementptr inbounds i16, i16* %49, i64 %2626
  %2628 = load i16, i16* %2627, align 2, !tbaa !382
  %2629 = insertelement <64 x i16> %2624, i16 %2628, i32 22
  %2630 = extractelement <64 x i32> %2514, i32 23
  %2631 = sext i32 %2630 to i64
  %2632 = getelementptr inbounds i16, i16* %49, i64 %2631
  %2633 = load i16, i16* %2632, align 2, !tbaa !382
  %2634 = insertelement <64 x i16> %2629, i16 %2633, i32 23
  %2635 = extractelement <64 x i32> %2514, i32 24
  %2636 = sext i32 %2635 to i64
  %2637 = getelementptr inbounds i16, i16* %49, i64 %2636
  %2638 = load i16, i16* %2637, align 2, !tbaa !382
  %2639 = insertelement <64 x i16> %2634, i16 %2638, i32 24
  %2640 = extractelement <64 x i32> %2514, i32 25
  %2641 = sext i32 %2640 to i64
  %2642 = getelementptr inbounds i16, i16* %49, i64 %2641
  %2643 = load i16, i16* %2642, align 2, !tbaa !382
  %2644 = insertelement <64 x i16> %2639, i16 %2643, i32 25
  %2645 = extractelement <64 x i32> %2514, i32 26
  %2646 = sext i32 %2645 to i64
  %2647 = getelementptr inbounds i16, i16* %49, i64 %2646
  %2648 = load i16, i16* %2647, align 2, !tbaa !382
  %2649 = insertelement <64 x i16> %2644, i16 %2648, i32 26
  %2650 = extractelement <64 x i32> %2514, i32 27
  %2651 = sext i32 %2650 to i64
  %2652 = getelementptr inbounds i16, i16* %49, i64 %2651
  %2653 = load i16, i16* %2652, align 2, !tbaa !382
  %2654 = insertelement <64 x i16> %2649, i16 %2653, i32 27
  %2655 = extractelement <64 x i32> %2514, i32 28
  %2656 = sext i32 %2655 to i64
  %2657 = getelementptr inbounds i16, i16* %49, i64 %2656
  %2658 = load i16, i16* %2657, align 2, !tbaa !382
  %2659 = insertelement <64 x i16> %2654, i16 %2658, i32 28
  %2660 = extractelement <64 x i32> %2514, i32 29
  %2661 = sext i32 %2660 to i64
  %2662 = getelementptr inbounds i16, i16* %49, i64 %2661
  %2663 = load i16, i16* %2662, align 2, !tbaa !382
  %2664 = insertelement <64 x i16> %2659, i16 %2663, i32 29
  %2665 = extractelement <64 x i32> %2514, i32 30
  %2666 = sext i32 %2665 to i64
  %2667 = getelementptr inbounds i16, i16* %49, i64 %2666
  %2668 = load i16, i16* %2667, align 2, !tbaa !382
  %2669 = insertelement <64 x i16> %2664, i16 %2668, i32 30
  %2670 = extractelement <64 x i32> %2514, i32 31
  %2671 = sext i32 %2670 to i64
  %2672 = getelementptr inbounds i16, i16* %49, i64 %2671
  %2673 = load i16, i16* %2672, align 2, !tbaa !382
  %2674 = insertelement <64 x i16> %2669, i16 %2673, i32 31
  %2675 = extractelement <64 x i32> %2514, i32 32
  %2676 = sext i32 %2675 to i64
  %2677 = getelementptr inbounds i16, i16* %49, i64 %2676
  %2678 = load i16, i16* %2677, align 2, !tbaa !382
  %2679 = insertelement <64 x i16> %2674, i16 %2678, i32 32
  %2680 = extractelement <64 x i32> %2514, i32 33
  %2681 = sext i32 %2680 to i64
  %2682 = getelementptr inbounds i16, i16* %49, i64 %2681
  %2683 = load i16, i16* %2682, align 2, !tbaa !382
  %2684 = insertelement <64 x i16> %2679, i16 %2683, i32 33
  %2685 = extractelement <64 x i32> %2514, i32 34
  %2686 = sext i32 %2685 to i64
  %2687 = getelementptr inbounds i16, i16* %49, i64 %2686
  %2688 = load i16, i16* %2687, align 2, !tbaa !382
  %2689 = insertelement <64 x i16> %2684, i16 %2688, i32 34
  %2690 = extractelement <64 x i32> %2514, i32 35
  %2691 = sext i32 %2690 to i64
  %2692 = getelementptr inbounds i16, i16* %49, i64 %2691
  %2693 = load i16, i16* %2692, align 2, !tbaa !382
  %2694 = insertelement <64 x i16> %2689, i16 %2693, i32 35
  %2695 = extractelement <64 x i32> %2514, i32 36
  %2696 = sext i32 %2695 to i64
  %2697 = getelementptr inbounds i16, i16* %49, i64 %2696
  %2698 = load i16, i16* %2697, align 2, !tbaa !382
  %2699 = insertelement <64 x i16> %2694, i16 %2698, i32 36
  %2700 = extractelement <64 x i32> %2514, i32 37
  %2701 = sext i32 %2700 to i64
  %2702 = getelementptr inbounds i16, i16* %49, i64 %2701
  %2703 = load i16, i16* %2702, align 2, !tbaa !382
  %2704 = insertelement <64 x i16> %2699, i16 %2703, i32 37
  %2705 = extractelement <64 x i32> %2514, i32 38
  %2706 = sext i32 %2705 to i64
  %2707 = getelementptr inbounds i16, i16* %49, i64 %2706
  %2708 = load i16, i16* %2707, align 2, !tbaa !382
  %2709 = insertelement <64 x i16> %2704, i16 %2708, i32 38
  %2710 = extractelement <64 x i32> %2514, i32 39
  %2711 = sext i32 %2710 to i64
  %2712 = getelementptr inbounds i16, i16* %49, i64 %2711
  %2713 = load i16, i16* %2712, align 2, !tbaa !382
  %2714 = insertelement <64 x i16> %2709, i16 %2713, i32 39
  %2715 = extractelement <64 x i32> %2514, i32 40
  %2716 = sext i32 %2715 to i64
  %2717 = getelementptr inbounds i16, i16* %49, i64 %2716
  %2718 = load i16, i16* %2717, align 2, !tbaa !382
  %2719 = insertelement <64 x i16> %2714, i16 %2718, i32 40
  %2720 = extractelement <64 x i32> %2514, i32 41
  %2721 = sext i32 %2720 to i64
  %2722 = getelementptr inbounds i16, i16* %49, i64 %2721
  %2723 = load i16, i16* %2722, align 2, !tbaa !382
  %2724 = insertelement <64 x i16> %2719, i16 %2723, i32 41
  %2725 = extractelement <64 x i32> %2514, i32 42
  %2726 = sext i32 %2725 to i64
  %2727 = getelementptr inbounds i16, i16* %49, i64 %2726
  %2728 = load i16, i16* %2727, align 2, !tbaa !382
  %2729 = insertelement <64 x i16> %2724, i16 %2728, i32 42
  %2730 = extractelement <64 x i32> %2514, i32 43
  %2731 = sext i32 %2730 to i64
  %2732 = getelementptr inbounds i16, i16* %49, i64 %2731
  %2733 = load i16, i16* %2732, align 2, !tbaa !382
  %2734 = insertelement <64 x i16> %2729, i16 %2733, i32 43
  %2735 = extractelement <64 x i32> %2514, i32 44
  %2736 = sext i32 %2735 to i64
  %2737 = getelementptr inbounds i16, i16* %49, i64 %2736
  %2738 = load i16, i16* %2737, align 2, !tbaa !382
  %2739 = insertelement <64 x i16> %2734, i16 %2738, i32 44
  %2740 = extractelement <64 x i32> %2514, i32 45
  %2741 = sext i32 %2740 to i64
  %2742 = getelementptr inbounds i16, i16* %49, i64 %2741
  %2743 = load i16, i16* %2742, align 2, !tbaa !382
  %2744 = insertelement <64 x i16> %2739, i16 %2743, i32 45
  %2745 = extractelement <64 x i32> %2514, i32 46
  %2746 = sext i32 %2745 to i64
  %2747 = getelementptr inbounds i16, i16* %49, i64 %2746
  %2748 = load i16, i16* %2747, align 2, !tbaa !382
  %2749 = insertelement <64 x i16> %2744, i16 %2748, i32 46
  %2750 = extractelement <64 x i32> %2514, i32 47
  %2751 = sext i32 %2750 to i64
  %2752 = getelementptr inbounds i16, i16* %49, i64 %2751
  %2753 = load i16, i16* %2752, align 2, !tbaa !382
  %2754 = insertelement <64 x i16> %2749, i16 %2753, i32 47
  %2755 = extractelement <64 x i32> %2514, i32 48
  %2756 = sext i32 %2755 to i64
  %2757 = getelementptr inbounds i16, i16* %49, i64 %2756
  %2758 = load i16, i16* %2757, align 2, !tbaa !382
  %2759 = insertelement <64 x i16> %2754, i16 %2758, i32 48
  %2760 = extractelement <64 x i32> %2514, i32 49
  %2761 = sext i32 %2760 to i64
  %2762 = getelementptr inbounds i16, i16* %49, i64 %2761
  %2763 = load i16, i16* %2762, align 2, !tbaa !382
  %2764 = insertelement <64 x i16> %2759, i16 %2763, i32 49
  %2765 = extractelement <64 x i32> %2514, i32 50
  %2766 = sext i32 %2765 to i64
  %2767 = getelementptr inbounds i16, i16* %49, i64 %2766
  %2768 = load i16, i16* %2767, align 2, !tbaa !382
  %2769 = insertelement <64 x i16> %2764, i16 %2768, i32 50
  %2770 = extractelement <64 x i32> %2514, i32 51
  %2771 = sext i32 %2770 to i64
  %2772 = getelementptr inbounds i16, i16* %49, i64 %2771
  %2773 = load i16, i16* %2772, align 2, !tbaa !382
  %2774 = insertelement <64 x i16> %2769, i16 %2773, i32 51
  %2775 = extractelement <64 x i32> %2514, i32 52
  %2776 = sext i32 %2775 to i64
  %2777 = getelementptr inbounds i16, i16* %49, i64 %2776
  %2778 = load i16, i16* %2777, align 2, !tbaa !382
  %2779 = insertelement <64 x i16> %2774, i16 %2778, i32 52
  %2780 = extractelement <64 x i32> %2514, i32 53
  %2781 = sext i32 %2780 to i64
  %2782 = getelementptr inbounds i16, i16* %49, i64 %2781
  %2783 = load i16, i16* %2782, align 2, !tbaa !382
  %2784 = insertelement <64 x i16> %2779, i16 %2783, i32 53
  %2785 = extractelement <64 x i32> %2514, i32 54
  %2786 = sext i32 %2785 to i64
  %2787 = getelementptr inbounds i16, i16* %49, i64 %2786
  %2788 = load i16, i16* %2787, align 2, !tbaa !382
  %2789 = insertelement <64 x i16> %2784, i16 %2788, i32 54
  %2790 = extractelement <64 x i32> %2514, i32 55
  %2791 = sext i32 %2790 to i64
  %2792 = getelementptr inbounds i16, i16* %49, i64 %2791
  %2793 = load i16, i16* %2792, align 2, !tbaa !382
  %2794 = insertelement <64 x i16> %2789, i16 %2793, i32 55
  %2795 = extractelement <64 x i32> %2514, i32 56
  %2796 = sext i32 %2795 to i64
  %2797 = getelementptr inbounds i16, i16* %49, i64 %2796
  %2798 = load i16, i16* %2797, align 2, !tbaa !382
  %2799 = insertelement <64 x i16> %2794, i16 %2798, i32 56
  %2800 = extractelement <64 x i32> %2514, i32 57
  %2801 = sext i32 %2800 to i64
  %2802 = getelementptr inbounds i16, i16* %49, i64 %2801
  %2803 = load i16, i16* %2802, align 2, !tbaa !382
  %2804 = insertelement <64 x i16> %2799, i16 %2803, i32 57
  %2805 = extractelement <64 x i32> %2514, i32 58
  %2806 = sext i32 %2805 to i64
  %2807 = getelementptr inbounds i16, i16* %49, i64 %2806
  %2808 = load i16, i16* %2807, align 2, !tbaa !382
  %2809 = insertelement <64 x i16> %2804, i16 %2808, i32 58
  %2810 = extractelement <64 x i32> %2514, i32 59
  %2811 = sext i32 %2810 to i64
  %2812 = getelementptr inbounds i16, i16* %49, i64 %2811
  %2813 = load i16, i16* %2812, align 2, !tbaa !382
  %2814 = insertelement <64 x i16> %2809, i16 %2813, i32 59
  %2815 = extractelement <64 x i32> %2514, i32 60
  %2816 = sext i32 %2815 to i64
  %2817 = getelementptr inbounds i16, i16* %49, i64 %2816
  %2818 = load i16, i16* %2817, align 2, !tbaa !382
  %2819 = insertelement <64 x i16> %2814, i16 %2818, i32 60
  %2820 = extractelement <64 x i32> %2514, i32 61
  %2821 = sext i32 %2820 to i64
  %2822 = getelementptr inbounds i16, i16* %49, i64 %2821
  %2823 = load i16, i16* %2822, align 2, !tbaa !382
  %2824 = insertelement <64 x i16> %2819, i16 %2823, i32 61
  %2825 = extractelement <64 x i32> %2514, i32 62
  %2826 = sext i32 %2825 to i64
  %2827 = getelementptr inbounds i16, i16* %49, i64 %2826
  %2828 = load i16, i16* %2827, align 2, !tbaa !382
  %2829 = insertelement <64 x i16> %2824, i16 %2828, i32 62
  %2830 = extractelement <64 x i32> %2514, i32 63
  %2831 = sext i32 %2830 to i64
  %2832 = getelementptr inbounds i16, i16* %49, i64 %2831
  %2833 = load i16, i16* %2832, align 2, !tbaa !382
  %2834 = insertelement <64 x i16> %2829, i16 %2833, i32 63
  %2835 = add <64 x i16> %869, %476
  %2836 = add <64 x i16> %2835, %1262
  %2837 = add <64 x i16> %2836, %1655
  %2838 = add <64 x i16> %2837, %2048
  %2839 = add <64 x i16> %2838, %2441
  %2840 = add <64 x i16> %2839, %2834
  %2841 = shufflevector <64 x i16> %2840, <64 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2842 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2841, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2843 = shufflevector <64 x i16> %2840, <64 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2844 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2843, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2845 = shufflevector <64 x i16> %2840, <64 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2846 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2845, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2847 = shufflevector <64 x i16> %2840, <64 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2848 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2847, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2849 = shufflevector <64 x i16> %2840, <64 x i16> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %2850 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2849, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2851 = shufflevector <64 x i16> %2840, <64 x i16> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %2852 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2851, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2853 = shufflevector <64 x i16> %2840, <64 x i16> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %2854 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2853, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2855 = shufflevector <64 x i16> %2840, <64 x i16> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %2856 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2855, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2857 = shufflevector <64 x i16> %2840, <64 x i16> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %2858 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2857, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2859 = shufflevector <64 x i16> %2840, <64 x i16> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %2860 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2859, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2861 = shufflevector <64 x i16> %2840, <64 x i16> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %2862 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2861, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2863 = shufflevector <64 x i16> %2840, <64 x i16> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %2864 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2863, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2865 = shufflevector <64 x i16> %2840, <64 x i16> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %2866 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2865, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2867 = shufflevector <64 x i16> %2840, <64 x i16> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %2868 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2867, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2869 = shufflevector <64 x i16> %2840, <64 x i16> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %2870 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2869, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2871 = shufflevector <64 x i16> %2840, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %2872 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2871, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2873 = shufflevector <4 x i32> %2842, <4 x i32> %2844, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2874 = shufflevector <4 x i32> %2846, <4 x i32> %2848, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2875 = shufflevector <4 x i32> %2850, <4 x i32> %2852, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2876 = shufflevector <4 x i32> %2854, <4 x i32> %2856, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2877 = shufflevector <4 x i32> %2858, <4 x i32> %2860, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2878 = shufflevector <4 x i32> %2862, <4 x i32> %2864, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2879 = shufflevector <4 x i32> %2866, <4 x i32> %2868, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2880 = shufflevector <4 x i32> %2870, <4 x i32> %2872, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2881 = shufflevector <8 x i32> %2873, <8 x i32> %2874, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2882 = shufflevector <8 x i32> %2875, <8 x i32> %2876, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2883 = shufflevector <8 x i32> %2877, <8 x i32> %2878, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2884 = shufflevector <8 x i32> %2879, <8 x i32> %2880, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2885 = shufflevector <16 x i32> %2881, <16 x i32> %2882, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2886 = shufflevector <16 x i32> %2883, <16 x i32> %2884, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2887 = shufflevector <32 x i32> %2885, <32 x i32> %2886, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2888 = lshr <64 x i32> %2887, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %2889 = trunc <64 x i32> %2888 to <64 x i16>
  %2890 = shufflevector <64 x i16> %2889, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2891 = shufflevector <64 x i16> %2840, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2892 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %2890, <8 x i16> %2891)
  %2893 = shufflevector <64 x i16> %2889, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2894 = shufflevector <64 x i16> %2840, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2895 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %2893, <8 x i16> %2894)
  %2896 = shufflevector <64 x i16> %2889, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2897 = shufflevector <64 x i16> %2840, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2898 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %2896, <8 x i16> %2897)
  %2899 = shufflevector <64 x i16> %2889, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2900 = shufflevector <64 x i16> %2840, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2901 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %2899, <8 x i16> %2900)
  %2902 = shufflevector <64 x i16> %2889, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2903 = shufflevector <64 x i16> %2840, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2904 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %2902, <8 x i16> %2903)
  %2905 = shufflevector <64 x i16> %2889, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2906 = shufflevector <64 x i16> %2840, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2907 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %2905, <8 x i16> %2906)
  %2908 = shufflevector <64 x i16> %2889, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2909 = shufflevector <64 x i16> %2840, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2910 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %2908, <8 x i16> %2909)
  %2911 = shufflevector <64 x i16> %2889, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2912 = shufflevector <64 x i16> %2840, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2913 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %2911, <8 x i16> %2912)
  %2914 = shufflevector <8 x i16> %2892, <8 x i16> %2895, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2915 = shufflevector <8 x i16> %2898, <8 x i16> %2901, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2916 = shufflevector <8 x i16> %2904, <8 x i16> %2907, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2917 = shufflevector <8 x i16> %2910, <8 x i16> %2913, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2918 = shufflevector <16 x i16> %2914, <16 x i16> %2915, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2919 = shufflevector <16 x i16> %2916, <16 x i16> %2917, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2920 = shufflevector <32 x i16> %2918, <32 x i16> %2919, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2921 = lshr <64 x i16> %2920, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2922 = shufflevector <64 x i16> %2921, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2923 = sext i32 %blur_x.s0.x.v1.base.s to i64
  %2924 = add nsw i64 %81, %2923
  %2925 = getelementptr inbounds i16, i16* %blur_x, i64 %2924
  %2926 = bitcast i16* %2925 to <8 x i16>*
  store <8 x i16> %2922, <8 x i16>* %2926, align 2, !tbaa !385
  %2927 = shufflevector <64 x i16> %2921, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2928 = getelementptr inbounds i16, i16* %2925, i64 8
  %2929 = bitcast i16* %2928 to <8 x i16>*
  store <8 x i16> %2927, <8 x i16>* %2929, align 2, !tbaa !385
  %2930 = shufflevector <64 x i16> %2921, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2931 = getelementptr inbounds i16, i16* %2925, i64 16
  %2932 = bitcast i16* %2931 to <8 x i16>*
  store <8 x i16> %2930, <8 x i16>* %2932, align 2, !tbaa !385
  %2933 = shufflevector <64 x i16> %2921, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2934 = getelementptr inbounds i16, i16* %2925, i64 24
  %2935 = bitcast i16* %2934 to <8 x i16>*
  store <8 x i16> %2933, <8 x i16>* %2935, align 2, !tbaa !385
  %2936 = shufflevector <64 x i16> %2921, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2937 = getelementptr inbounds i16, i16* %2925, i64 32
  %2938 = bitcast i16* %2937 to <8 x i16>*
  store <8 x i16> %2936, <8 x i16>* %2938, align 2, !tbaa !385
  %2939 = shufflevector <64 x i16> %2921, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2940 = getelementptr inbounds i16, i16* %2925, i64 40
  %2941 = bitcast i16* %2940 to <8 x i16>*
  store <8 x i16> %2939, <8 x i16>* %2941, align 2, !tbaa !385
  %2942 = shufflevector <64 x i16> %2921, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2943 = getelementptr inbounds i16, i16* %2925, i64 48
  %2944 = bitcast i16* %2943 to <8 x i16>*
  store <8 x i16> %2942, <8 x i16>* %2944, align 2, !tbaa !385
  %2945 = shufflevector <64 x i16> %2921, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2946 = getelementptr inbounds i16, i16* %2925, i64 56
  %2947 = bitcast i16* %2946 to <8 x i16>*
  store <8 x i16> %2945, <8 x i16>* %2947, align 2, !tbaa !385
  %2948 = add nuw nsw i32 %blur_x.s0.x.x, 1
  %.not138 = icmp eq i32 %2948, %t275
  br i1 %.not138, label %"end for blur_x.s0.x.x", label %"for blur_x.s0.x.x"

"end for blur_x.s0.x.x":                          ; preds = %"for blur_x.s0.x.x", %"for blur_y.s0.y.yi.$n.rebased"
  br i1 %52, label %"for blur_x.s0.x.x.rebased.preheader", label %"end for blur_x.s0.x.x.rebased", !prof !381

"for blur_x.s0.x.x.rebased.preheader":            ; preds = %"end for blur_x.s0.x.x"
  %2949 = icmp sgt i64 %73, 0
  %2950 = select i1 %2949, i64 %73, i64 0
  %2951 = trunc i64 %2950 to i32
  %2952 = mul nsw i32 %input.stride.1, %2951
  %2953 = and i64 %73, 7
  %2954 = mul nsw i64 %2953, %50
  %2955 = sub nsw i64 %2954, %51
  %indvars.iv.next171.0 = add nuw nsw i64 0, 1
  br label %"for blur_x.s0.x.x.rebased"

"for blur_x.s0.x.x.rebased":                      ; preds = %"for blur_x.s0.x.x.rebased.for blur_x.s0.x.x.rebased_crit_edge", %"for blur_x.s0.x.x.rebased.preheader"
  %indvars.iv.next171.phi = phi i64 [ %indvars.iv.next171.0, %"for blur_x.s0.x.x.rebased.preheader" ], [ %indvars.iv.next171.1, %"for blur_x.s0.x.x.rebased.for blur_x.s0.x.x.rebased_crit_edge" ]
  %blur_x.s0.x.x.rebased = phi i32 [ 0, %"for blur_x.s0.x.x.rebased.preheader" ], [ %3279, %"for blur_x.s0.x.x.rebased.for blur_x.s0.x.x.rebased_crit_edge" ]
  %2956 = add nsw i32 %blur_x.s0.x.x.rebased, %t275
  %2957 = shl nsw i32 %2956, 6
  %blur_x.s0.x.v1.base.s1 = add nsw i32 %2957, %t274
  %t250 = add nsw i32 %blur_x.s0.x.v1.base.s1, %2952
  %2958 = sext i32 %t250 to i64
  %2959 = getelementptr inbounds i16, i16* %49, i64 %2958
  %2960 = getelementptr inbounds i16, i16* %2959, i64 -63
  %2961 = bitcast i16* %2960 to <8 x i16>*
  %2962 = load <8 x i16>, <8 x i16>* %2961, align 2, !tbaa !382
  %2963 = getelementptr inbounds i16, i16* %2959, i64 -55
  %2964 = bitcast i16* %2963 to <8 x i16>*
  %2965 = load <8 x i16>, <8 x i16>* %2964, align 2, !tbaa !382
  %2966 = getelementptr inbounds i16, i16* %2959, i64 -47
  %2967 = bitcast i16* %2966 to <8 x i16>*
  %2968 = load <8 x i16>, <8 x i16>* %2967, align 2, !tbaa !382
  %2969 = getelementptr inbounds i16, i16* %2959, i64 -39
  %2970 = bitcast i16* %2969 to <8 x i16>*
  %2971 = load <8 x i16>, <8 x i16>* %2970, align 2, !tbaa !382
  %2972 = getelementptr inbounds i16, i16* %2959, i64 -31
  %2973 = bitcast i16* %2972 to <8 x i16>*
  %2974 = load <8 x i16>, <8 x i16>* %2973, align 2, !tbaa !382
  %2975 = getelementptr inbounds i16, i16* %2959, i64 -23
  %2976 = bitcast i16* %2975 to <8 x i16>*
  %2977 = load <8 x i16>, <8 x i16>* %2976, align 2, !tbaa !382
  %2978 = getelementptr inbounds i16, i16* %2959, i64 -15
  %2979 = bitcast i16* %2978 to <8 x i16>*
  %2980 = load <8 x i16>, <8 x i16>* %2979, align 2, !tbaa !382
  %2981 = getelementptr inbounds i16, i16* %2959, i64 -7
  %2982 = bitcast i16* %2981 to <8 x i16>*
  %2983 = load <8 x i16>, <8 x i16>* %2982, align 2, !tbaa !382
  %2984 = getelementptr inbounds i16, i16* %2959, i64 -64
  %2985 = bitcast i16* %2984 to <8 x i16>*
  %2986 = load <8 x i16>, <8 x i16>* %2985, align 2, !tbaa !382
  %2987 = getelementptr inbounds i16, i16* %2959, i64 -56
  %2988 = bitcast i16* %2987 to <8 x i16>*
  %2989 = load <8 x i16>, <8 x i16>* %2988, align 2, !tbaa !382
  %2990 = getelementptr inbounds i16, i16* %2959, i64 -48
  %2991 = bitcast i16* %2990 to <8 x i16>*
  %2992 = load <8 x i16>, <8 x i16>* %2991, align 2, !tbaa !382
  %2993 = getelementptr inbounds i16, i16* %2959, i64 -40
  %2994 = bitcast i16* %2993 to <8 x i16>*
  %2995 = load <8 x i16>, <8 x i16>* %2994, align 2, !tbaa !382
  %2996 = getelementptr inbounds i16, i16* %2959, i64 -32
  %2997 = bitcast i16* %2996 to <8 x i16>*
  %2998 = load <8 x i16>, <8 x i16>* %2997, align 2, !tbaa !382
  %2999 = getelementptr inbounds i16, i16* %2959, i64 -24
  %3000 = bitcast i16* %2999 to <8 x i16>*
  %3001 = load <8 x i16>, <8 x i16>* %3000, align 2, !tbaa !382
  %3002 = getelementptr inbounds i16, i16* %2959, i64 -16
  %3003 = bitcast i16* %3002 to <8 x i16>*
  %3004 = load <8 x i16>, <8 x i16>* %3003, align 2, !tbaa !382
  %3005 = getelementptr inbounds i16, i16* %2959, i64 -8
  %3006 = bitcast i16* %3005 to <8 x i16>*
  %3007 = load <8 x i16>, <8 x i16>* %3006, align 2, !tbaa !382
  %3008 = getelementptr inbounds i16, i16* %2959, i64 -62
  %3009 = bitcast i16* %3008 to <8 x i16>*
  %3010 = load <8 x i16>, <8 x i16>* %3009, align 2, !tbaa !382
  %3011 = getelementptr inbounds i16, i16* %2959, i64 -54
  %3012 = bitcast i16* %3011 to <8 x i16>*
  %3013 = load <8 x i16>, <8 x i16>* %3012, align 2, !tbaa !382
  %3014 = getelementptr inbounds i16, i16* %2959, i64 -46
  %3015 = bitcast i16* %3014 to <8 x i16>*
  %3016 = load <8 x i16>, <8 x i16>* %3015, align 2, !tbaa !382
  %3017 = getelementptr inbounds i16, i16* %2959, i64 -38
  %3018 = bitcast i16* %3017 to <8 x i16>*
  %3019 = load <8 x i16>, <8 x i16>* %3018, align 2, !tbaa !382
  %3020 = getelementptr inbounds i16, i16* %2959, i64 -30
  %3021 = bitcast i16* %3020 to <8 x i16>*
  %3022 = load <8 x i16>, <8 x i16>* %3021, align 2, !tbaa !382
  %3023 = getelementptr inbounds i16, i16* %2959, i64 -22
  %3024 = bitcast i16* %3023 to <8 x i16>*
  %3025 = load <8 x i16>, <8 x i16>* %3024, align 2, !tbaa !382
  %3026 = getelementptr inbounds i16, i16* %2959, i64 -14
  %3027 = bitcast i16* %3026 to <8 x i16>*
  %3028 = load <8 x i16>, <8 x i16>* %3027, align 2, !tbaa !382
  %3029 = getelementptr inbounds i16, i16* %2959, i64 -6
  %3030 = bitcast i16* %3029 to <8 x i16>*
  %3031 = load <8 x i16>, <8 x i16>* %3030, align 2, !tbaa !382
  %3032 = getelementptr inbounds i16, i16* %2959, i64 -61
  %3033 = bitcast i16* %3032 to <8 x i16>*
  %3034 = load <8 x i16>, <8 x i16>* %3033, align 2, !tbaa !382
  %3035 = getelementptr inbounds i16, i16* %2959, i64 -53
  %3036 = bitcast i16* %3035 to <8 x i16>*
  %3037 = load <8 x i16>, <8 x i16>* %3036, align 2, !tbaa !382
  %3038 = getelementptr inbounds i16, i16* %2959, i64 -45
  %3039 = bitcast i16* %3038 to <8 x i16>*
  %3040 = load <8 x i16>, <8 x i16>* %3039, align 2, !tbaa !382
  %3041 = getelementptr inbounds i16, i16* %2959, i64 -37
  %3042 = bitcast i16* %3041 to <8 x i16>*
  %3043 = load <8 x i16>, <8 x i16>* %3042, align 2, !tbaa !382
  %3044 = getelementptr inbounds i16, i16* %2959, i64 -29
  %3045 = bitcast i16* %3044 to <8 x i16>*
  %3046 = load <8 x i16>, <8 x i16>* %3045, align 2, !tbaa !382
  %3047 = getelementptr inbounds i16, i16* %2959, i64 -21
  %3048 = bitcast i16* %3047 to <8 x i16>*
  %3049 = load <8 x i16>, <8 x i16>* %3048, align 2, !tbaa !382
  %3050 = getelementptr inbounds i16, i16* %2959, i64 -13
  %3051 = bitcast i16* %3050 to <8 x i16>*
  %3052 = load <8 x i16>, <8 x i16>* %3051, align 2, !tbaa !382
  %3053 = getelementptr inbounds i16, i16* %2959, i64 -5
  %3054 = bitcast i16* %3053 to <8 x i16>*
  %3055 = load <8 x i16>, <8 x i16>* %3054, align 2, !tbaa !382
  %3056 = getelementptr inbounds i16, i16* %2959, i64 -60
  %3057 = bitcast i16* %3056 to <8 x i16>*
  %3058 = load <8 x i16>, <8 x i16>* %3057, align 2, !tbaa !382
  %3059 = getelementptr inbounds i16, i16* %2959, i64 -52
  %3060 = bitcast i16* %3059 to <8 x i16>*
  %3061 = load <8 x i16>, <8 x i16>* %3060, align 2, !tbaa !382
  %3062 = getelementptr inbounds i16, i16* %2959, i64 -44
  %3063 = bitcast i16* %3062 to <8 x i16>*
  %3064 = load <8 x i16>, <8 x i16>* %3063, align 2, !tbaa !382
  %3065 = getelementptr inbounds i16, i16* %2959, i64 -36
  %3066 = bitcast i16* %3065 to <8 x i16>*
  %3067 = load <8 x i16>, <8 x i16>* %3066, align 2, !tbaa !382
  %3068 = getelementptr inbounds i16, i16* %2959, i64 -28
  %3069 = bitcast i16* %3068 to <8 x i16>*
  %3070 = load <8 x i16>, <8 x i16>* %3069, align 2, !tbaa !382
  %3071 = getelementptr inbounds i16, i16* %2959, i64 -20
  %3072 = bitcast i16* %3071 to <8 x i16>*
  %3073 = load <8 x i16>, <8 x i16>* %3072, align 2, !tbaa !382
  %3074 = getelementptr inbounds i16, i16* %2959, i64 -12
  %3075 = bitcast i16* %3074 to <8 x i16>*
  %3076 = load <8 x i16>, <8 x i16>* %3075, align 2, !tbaa !382
  %3077 = getelementptr inbounds i16, i16* %2959, i64 -4
  %3078 = bitcast i16* %3077 to <8 x i16>*
  %3079 = load <8 x i16>, <8 x i16>* %3078, align 2, !tbaa !382
  %3080 = getelementptr inbounds i16, i16* %2959, i64 -58
  %3081 = bitcast i16* %3080 to <8 x i16>*
  %3082 = load <8 x i16>, <8 x i16>* %3081, align 2, !tbaa !382
  %3083 = getelementptr inbounds i16, i16* %2959, i64 -50
  %3084 = bitcast i16* %3083 to <8 x i16>*
  %3085 = load <8 x i16>, <8 x i16>* %3084, align 2, !tbaa !382
  %3086 = getelementptr inbounds i16, i16* %2959, i64 -42
  %3087 = bitcast i16* %3086 to <8 x i16>*
  %3088 = load <8 x i16>, <8 x i16>* %3087, align 2, !tbaa !382
  %3089 = getelementptr inbounds i16, i16* %2959, i64 -34
  %3090 = bitcast i16* %3089 to <8 x i16>*
  %3091 = load <8 x i16>, <8 x i16>* %3090, align 2, !tbaa !382
  %3092 = getelementptr inbounds i16, i16* %2959, i64 -26
  %3093 = bitcast i16* %3092 to <8 x i16>*
  %3094 = load <8 x i16>, <8 x i16>* %3093, align 2, !tbaa !382
  %3095 = getelementptr inbounds i16, i16* %2959, i64 -18
  %3096 = bitcast i16* %3095 to <8 x i16>*
  %3097 = load <8 x i16>, <8 x i16>* %3096, align 2, !tbaa !382
  %3098 = getelementptr inbounds i16, i16* %2959, i64 -10
  %3099 = bitcast i16* %3098 to <8 x i16>*
  %3100 = load <8 x i16>, <8 x i16>* %3099, align 2, !tbaa !382
  %3101 = getelementptr inbounds i16, i16* %2959, i64 -2
  %3102 = bitcast i16* %3101 to <8 x i16>*
  %3103 = load <8 x i16>, <8 x i16>* %3102, align 2, !tbaa !382
  %3104 = getelementptr inbounds i16, i16* %2959, i64 -59
  %3105 = bitcast i16* %3104 to <8 x i16>*
  %3106 = load <8 x i16>, <8 x i16>* %3105, align 2, !tbaa !382
  %3107 = getelementptr inbounds i16, i16* %2959, i64 -51
  %3108 = bitcast i16* %3107 to <8 x i16>*
  %3109 = load <8 x i16>, <8 x i16>* %3108, align 2, !tbaa !382
  %3110 = getelementptr inbounds i16, i16* %2959, i64 -43
  %3111 = bitcast i16* %3110 to <8 x i16>*
  %3112 = load <8 x i16>, <8 x i16>* %3111, align 2, !tbaa !382
  %3113 = getelementptr inbounds i16, i16* %2959, i64 -35
  %3114 = bitcast i16* %3113 to <8 x i16>*
  %3115 = load <8 x i16>, <8 x i16>* %3114, align 2, !tbaa !382
  %3116 = getelementptr inbounds i16, i16* %2959, i64 -27
  %3117 = bitcast i16* %3116 to <8 x i16>*
  %3118 = load <8 x i16>, <8 x i16>* %3117, align 2, !tbaa !382
  %3119 = getelementptr inbounds i16, i16* %2959, i64 -19
  %3120 = bitcast i16* %3119 to <8 x i16>*
  %3121 = load <8 x i16>, <8 x i16>* %3120, align 2, !tbaa !382
  %3122 = getelementptr inbounds i16, i16* %2959, i64 -11
  %3123 = bitcast i16* %3122 to <8 x i16>*
  %3124 = load <8 x i16>, <8 x i16>* %3123, align 2, !tbaa !382
  %3125 = getelementptr inbounds i16, i16* %2959, i64 -3
  %3126 = bitcast i16* %3125 to <8 x i16>*
  %3127 = load <8 x i16>, <8 x i16>* %3126, align 2, !tbaa !382
  %3128 = add <8 x i16> %2986, %2962
  %3129 = add <8 x i16> %3128, %3010
  %3130 = add <8 x i16> %3129, %3034
  %3131 = add <8 x i16> %3130, %3058
  %3132 = add <8 x i16> %3131, %3082
  %3133 = add <8 x i16> %3132, %3106
  %3134 = add <8 x i16> %2989, %2965
  %3135 = add <8 x i16> %3134, %3013
  %3136 = add <8 x i16> %3135, %3037
  %3137 = add <8 x i16> %3136, %3061
  %3138 = add <8 x i16> %3137, %3085
  %3139 = add <8 x i16> %3138, %3109
  %3140 = add <8 x i16> %2992, %2968
  %3141 = add <8 x i16> %3140, %3016
  %3142 = add <8 x i16> %3141, %3040
  %3143 = add <8 x i16> %3142, %3064
  %3144 = add <8 x i16> %3143, %3088
  %3145 = add <8 x i16> %3144, %3112
  %3146 = add <8 x i16> %2995, %2971
  %3147 = add <8 x i16> %3146, %3019
  %3148 = add <8 x i16> %3147, %3043
  %3149 = add <8 x i16> %3148, %3067
  %3150 = add <8 x i16> %3149, %3091
  %3151 = add <8 x i16> %3150, %3115
  %3152 = add <8 x i16> %2998, %2974
  %3153 = add <8 x i16> %3152, %3022
  %3154 = add <8 x i16> %3153, %3046
  %3155 = add <8 x i16> %3154, %3070
  %3156 = add <8 x i16> %3155, %3094
  %3157 = add <8 x i16> %3156, %3118
  %3158 = add <8 x i16> %3001, %2977
  %3159 = add <8 x i16> %3158, %3025
  %3160 = add <8 x i16> %3159, %3049
  %3161 = add <8 x i16> %3160, %3073
  %3162 = add <8 x i16> %3161, %3097
  %3163 = add <8 x i16> %3162, %3121
  %3164 = add <8 x i16> %3004, %2980
  %3165 = add <8 x i16> %3164, %3028
  %3166 = add <8 x i16> %3165, %3052
  %3167 = add <8 x i16> %3166, %3076
  %3168 = add <8 x i16> %3167, %3100
  %3169 = add <8 x i16> %3168, %3124
  %3170 = add <8 x i16> %3007, %2983
  %3171 = add <8 x i16> %3170, %3031
  %3172 = add <8 x i16> %3171, %3055
  %3173 = add <8 x i16> %3172, %3079
  %3174 = add <8 x i16> %3173, %3103
  %3175 = add <8 x i16> %3174, %3127
  %3176 = shufflevector <8 x i16> %3175, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3177 = shufflevector <16 x i16> %3176, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3178 = shufflevector <32 x i16> %3177, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3179 = shufflevector <8 x i16> %3133, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3180 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3179, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3181 = shufflevector <8 x i16> %3133, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3182 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3181, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3183 = shufflevector <8 x i16> %3139, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3184 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3183, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3185 = shufflevector <8 x i16> %3139, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3186 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3185, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3187 = shufflevector <8 x i16> %3145, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3188 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3187, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3189 = shufflevector <8 x i16> %3145, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3190 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3189, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3191 = shufflevector <8 x i16> %3151, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3192 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3191, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3193 = shufflevector <8 x i16> %3151, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3194 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3193, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3195 = shufflevector <8 x i16> %3157, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3196 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3195, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3197 = shufflevector <8 x i16> %3157, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3198 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3197, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3199 = shufflevector <8 x i16> %3163, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3200 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3199, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3201 = shufflevector <8 x i16> %3163, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3202 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3201, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3203 = shufflevector <8 x i16> %3169, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3204 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3203, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3205 = shufflevector <8 x i16> %3169, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3206 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3205, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3207 = shufflevector <8 x i16> %3175, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3208 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3207, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3209 = shufflevector <8 x i16> %3175, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3210 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3209, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3211 = shufflevector <4 x i32> %3180, <4 x i32> %3182, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3212 = shufflevector <4 x i32> %3184, <4 x i32> %3186, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3213 = shufflevector <4 x i32> %3188, <4 x i32> %3190, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3214 = shufflevector <4 x i32> %3192, <4 x i32> %3194, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3215 = shufflevector <4 x i32> %3196, <4 x i32> %3198, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3216 = shufflevector <4 x i32> %3200, <4 x i32> %3202, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3217 = shufflevector <4 x i32> %3204, <4 x i32> %3206, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3218 = shufflevector <4 x i32> %3208, <4 x i32> %3210, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3219 = shufflevector <8 x i32> %3211, <8 x i32> %3212, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3220 = shufflevector <8 x i32> %3213, <8 x i32> %3214, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3221 = shufflevector <8 x i32> %3215, <8 x i32> %3216, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3222 = shufflevector <8 x i32> %3217, <8 x i32> %3218, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3223 = shufflevector <16 x i32> %3219, <16 x i32> %3220, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3224 = shufflevector <16 x i32> %3221, <16 x i32> %3222, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3225 = shufflevector <32 x i32> %3223, <32 x i32> %3224, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3226 = lshr <64 x i32> %3225, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %3227 = trunc <64 x i32> %3226 to <64 x i16>
  %3228 = shufflevector <64 x i16> %3227, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3229 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %3228, <8 x i16> %3133)
  %3230 = shufflevector <64 x i16> %3227, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3231 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %3230, <8 x i16> %3139)
  %3232 = shufflevector <64 x i16> %3227, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3233 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %3232, <8 x i16> %3145)
  %3234 = shufflevector <64 x i16> %3227, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3235 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %3234, <8 x i16> %3151)
  %3236 = shufflevector <64 x i16> %3227, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %3237 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %3236, <8 x i16> %3157)
  %3238 = shufflevector <64 x i16> %3227, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %3239 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %3238, <8 x i16> %3163)
  %3240 = shufflevector <64 x i16> %3227, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %3241 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %3240, <8 x i16> %3169)
  %3242 = shufflevector <64 x i16> %3227, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3243 = shufflevector <64 x i16> %3178, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3244 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %3242, <8 x i16> %3243)
  %3245 = shufflevector <8 x i16> %3229, <8 x i16> %3231, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3246 = shufflevector <8 x i16> %3233, <8 x i16> %3235, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3247 = shufflevector <8 x i16> %3237, <8 x i16> %3239, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3248 = shufflevector <8 x i16> %3241, <8 x i16> %3244, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3249 = shufflevector <16 x i16> %3245, <16 x i16> %3246, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3250 = shufflevector <16 x i16> %3247, <16 x i16> %3248, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3251 = shufflevector <32 x i16> %3249, <32 x i16> %3250, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3252 = lshr <64 x i16> %3251, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3253 = shufflevector <64 x i16> %3252, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3254 = sext i32 %blur_x.s0.x.v1.base.s1 to i64
  %3255 = add nsw i64 %2955, %3254
  %3256 = getelementptr inbounds i16, i16* %blur_x, i64 %3255
  %3257 = bitcast i16* %3256 to <8 x i16>*
  store <8 x i16> %3253, <8 x i16>* %3257, align 2, !tbaa !385
  %3258 = shufflevector <64 x i16> %3252, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3259 = getelementptr inbounds i16, i16* %3256, i64 8
  %3260 = bitcast i16* %3259 to <8 x i16>*
  store <8 x i16> %3258, <8 x i16>* %3260, align 2, !tbaa !385
  %3261 = shufflevector <64 x i16> %3252, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3262 = getelementptr inbounds i16, i16* %3256, i64 16
  %3263 = bitcast i16* %3262 to <8 x i16>*
  store <8 x i16> %3261, <8 x i16>* %3263, align 2, !tbaa !385
  %3264 = shufflevector <64 x i16> %3252, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3265 = getelementptr inbounds i16, i16* %3256, i64 24
  %3266 = bitcast i16* %3265 to <8 x i16>*
  store <8 x i16> %3264, <8 x i16>* %3266, align 2, !tbaa !385
  %3267 = shufflevector <64 x i16> %3252, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %3268 = getelementptr inbounds i16, i16* %3256, i64 32
  %3269 = bitcast i16* %3268 to <8 x i16>*
  store <8 x i16> %3267, <8 x i16>* %3269, align 2, !tbaa !385
  %3270 = shufflevector <64 x i16> %3252, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %3271 = getelementptr inbounds i16, i16* %3256, i64 40
  %3272 = bitcast i16* %3271 to <8 x i16>*
  store <8 x i16> %3270, <8 x i16>* %3272, align 2, !tbaa !385
  %3273 = shufflevector <64 x i16> %3252, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %3274 = getelementptr inbounds i16, i16* %3256, i64 48
  %3275 = bitcast i16* %3274 to <8 x i16>*
  store <8 x i16> %3273, <8 x i16>* %3275, align 2, !tbaa !385
  %3276 = shufflevector <64 x i16> %3252, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3277 = getelementptr inbounds i16, i16* %3256, i64 56
  %3278 = bitcast i16* %3277 to <8 x i16>*
  store <8 x i16> %3276, <8 x i16>* %3278, align 2, !tbaa !385
  %3279 = add nuw nsw i32 %blur_x.s0.x.x.rebased, 1
  %.not137 = icmp eq i64 %indvars.iv.next171.phi, %59
  br i1 %.not137, label %"end for blur_x.s0.x.x.rebased", label %"for blur_x.s0.x.x.rebased.for blur_x.s0.x.x.rebased_crit_edge"

"for blur_x.s0.x.x.rebased.for blur_x.s0.x.x.rebased_crit_edge": ; preds = %"for blur_x.s0.x.x.rebased"
  %indvars.iv.next171.1 = add nuw nsw i64 %indvars.iv.next171.phi, 1
  br label %"for blur_x.s0.x.x.rebased"

"end for blur_x.s0.x.x.rebased":                  ; preds = %"for blur_x.s0.x.x.rebased", %"end for blur_x.s0.x.x"
  br i1 %53, label %"for blur_x.s0.x.x.rebased2.preheader", label %"end for blur_x.s0.x.x.rebased3", !prof !381

"for blur_x.s0.x.x.rebased2.preheader":           ; preds = %"end for blur_x.s0.x.x.rebased"
  %3280 = icmp sgt i64 %73, 0
  %3281 = select i1 %3280, i64 %73, i64 0
  %3282 = trunc i64 %3281 to i32
  %3283 = mul nsw i32 %input.stride.1, %3282
  %3284 = insertelement <64 x i32> undef, i32 %3283, i32 0
  %t252 = shufflevector <64 x i32> %3284, <64 x i32> undef, <64 x i32> zeroinitializer
  %3285 = and i64 %73, 7
  %3286 = mul nsw i64 %3285, %50
  %3287 = sub nsw i64 %3286, %51
  br label %"for blur_x.s0.x.x.rebased2"

"for blur_x.s0.x.x.rebased2":                     ; preds = %"for blur_x.s0.x.x.rebased2.preheader", %"for blur_x.s0.x.x.rebased2"
  %blur_x.s0.x.x.rebased4 = phi i32 [ %6155, %"for blur_x.s0.x.x.rebased2" ], [ 0, %"for blur_x.s0.x.x.rebased2.preheader" ]
  %3288 = add nsw i32 %blur_x.s0.x.x.rebased4, %t264
  %3289 = shl nsw i32 %3288, 6
  %a6 = add nsw i32 %3289, %t274
  %3290 = icmp slt i32 %a6, %b14
  %blur_x.s0.x.v1.base.s5 = select i1 %3290, i32 %a6, i32 %b14
  %3291 = add nsw i32 %blur_x.s0.x.v1.base.s5, -63
  %3292 = insertelement <64 x i32> undef, i32 %3291, i32 0
  %3293 = shufflevector <64 x i32> %3292, <64 x i32> undef, <64 x i32> zeroinitializer
  %3294 = add nsw <64 x i32> %3293, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3295 = shufflevector <64 x i32> %3294, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3296 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3295, <4 x i32> %48)
  %3297 = shufflevector <64 x i32> %3294, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3298 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3297, <4 x i32> %48)
  %3299 = shufflevector <64 x i32> %3294, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3300 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3299, <4 x i32> %48)
  %3301 = shufflevector <64 x i32> %3294, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3302 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3301, <4 x i32> %48)
  %3303 = shufflevector <64 x i32> %3294, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %3304 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3303, <4 x i32> %48)
  %3305 = shufflevector <64 x i32> %3294, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %3306 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3305, <4 x i32> %48)
  %3307 = shufflevector <64 x i32> %3294, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %3308 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3307, <4 x i32> %48)
  %3309 = shufflevector <64 x i32> %3294, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %3310 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3309, <4 x i32> %48)
  %3311 = shufflevector <64 x i32> %3294, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %3312 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3311, <4 x i32> %48)
  %3313 = shufflevector <64 x i32> %3294, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %3314 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3313, <4 x i32> %48)
  %3315 = shufflevector <64 x i32> %3294, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %3316 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3315, <4 x i32> %48)
  %3317 = shufflevector <64 x i32> %3294, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %3318 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3317, <4 x i32> %48)
  %3319 = shufflevector <64 x i32> %3294, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %3320 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3319, <4 x i32> %48)
  %3321 = shufflevector <64 x i32> %3294, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %3322 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3321, <4 x i32> %48)
  %3323 = shufflevector <64 x i32> %3294, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %3324 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3323, <4 x i32> %48)
  %3325 = shufflevector <64 x i32> %3294, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3326 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3325, <4 x i32> %48)
  %3327 = shufflevector <4 x i32> %3326, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %3328 = shufflevector <8 x i32> %3327, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3329 = shufflevector <16 x i32> %3328, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %3330 = shufflevector <32 x i32> %3329, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %3331 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3296, <4 x i32> zeroinitializer)
  %3332 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3298, <4 x i32> zeroinitializer)
  %3333 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3300, <4 x i32> zeroinitializer)
  %3334 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3302, <4 x i32> zeroinitializer)
  %3335 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3304, <4 x i32> zeroinitializer)
  %3336 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3306, <4 x i32> zeroinitializer)
  %3337 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3308, <4 x i32> zeroinitializer)
  %3338 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3310, <4 x i32> zeroinitializer)
  %3339 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3312, <4 x i32> zeroinitializer)
  %3340 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3314, <4 x i32> zeroinitializer)
  %3341 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3316, <4 x i32> zeroinitializer)
  %3342 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3318, <4 x i32> zeroinitializer)
  %3343 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3320, <4 x i32> zeroinitializer)
  %3344 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3322, <4 x i32> zeroinitializer)
  %3345 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3324, <4 x i32> zeroinitializer)
  %3346 = shufflevector <64 x i32> %3330, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3347 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3346, <4 x i32> zeroinitializer)
  %3348 = shufflevector <4 x i32> %3331, <4 x i32> %3332, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3349 = shufflevector <4 x i32> %3333, <4 x i32> %3334, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3350 = shufflevector <4 x i32> %3335, <4 x i32> %3336, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3351 = shufflevector <4 x i32> %3337, <4 x i32> %3338, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3352 = shufflevector <4 x i32> %3339, <4 x i32> %3340, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3353 = shufflevector <4 x i32> %3341, <4 x i32> %3342, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3354 = shufflevector <4 x i32> %3343, <4 x i32> %3344, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3355 = shufflevector <4 x i32> %3345, <4 x i32> %3347, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3356 = shufflevector <8 x i32> %3348, <8 x i32> %3349, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3357 = shufflevector <8 x i32> %3350, <8 x i32> %3351, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3358 = shufflevector <8 x i32> %3352, <8 x i32> %3353, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3359 = shufflevector <8 x i32> %3354, <8 x i32> %3355, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3360 = shufflevector <16 x i32> %3356, <16 x i32> %3357, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3361 = shufflevector <16 x i32> %3358, <16 x i32> %3359, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3362 = shufflevector <32 x i32> %3360, <32 x i32> %3361, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3363 = add nsw <64 x i32> %3362, %t252
  %3364 = extractelement <64 x i32> %3363, i32 0
  %3365 = sext i32 %3364 to i64
  %3366 = getelementptr inbounds i16, i16* %49, i64 %3365
  %3367 = load i16, i16* %3366, align 2, !tbaa !382
  %3368 = insertelement <64 x i16> undef, i16 %3367, i32 0
  %3369 = extractelement <64 x i32> %3363, i32 1
  %3370 = sext i32 %3369 to i64
  %3371 = getelementptr inbounds i16, i16* %49, i64 %3370
  %3372 = load i16, i16* %3371, align 2, !tbaa !382
  %3373 = insertelement <64 x i16> %3368, i16 %3372, i32 1
  %3374 = extractelement <64 x i32> %3363, i32 2
  %3375 = sext i32 %3374 to i64
  %3376 = getelementptr inbounds i16, i16* %49, i64 %3375
  %3377 = load i16, i16* %3376, align 2, !tbaa !382
  %3378 = insertelement <64 x i16> %3373, i16 %3377, i32 2
  %3379 = extractelement <64 x i32> %3363, i32 3
  %3380 = sext i32 %3379 to i64
  %3381 = getelementptr inbounds i16, i16* %49, i64 %3380
  %3382 = load i16, i16* %3381, align 2, !tbaa !382
  %3383 = insertelement <64 x i16> %3378, i16 %3382, i32 3
  %3384 = extractelement <64 x i32> %3363, i32 4
  %3385 = sext i32 %3384 to i64
  %3386 = getelementptr inbounds i16, i16* %49, i64 %3385
  %3387 = load i16, i16* %3386, align 2, !tbaa !382
  %3388 = insertelement <64 x i16> %3383, i16 %3387, i32 4
  %3389 = extractelement <64 x i32> %3363, i32 5
  %3390 = sext i32 %3389 to i64
  %3391 = getelementptr inbounds i16, i16* %49, i64 %3390
  %3392 = load i16, i16* %3391, align 2, !tbaa !382
  %3393 = insertelement <64 x i16> %3388, i16 %3392, i32 5
  %3394 = extractelement <64 x i32> %3363, i32 6
  %3395 = sext i32 %3394 to i64
  %3396 = getelementptr inbounds i16, i16* %49, i64 %3395
  %3397 = load i16, i16* %3396, align 2, !tbaa !382
  %3398 = insertelement <64 x i16> %3393, i16 %3397, i32 6
  %3399 = extractelement <64 x i32> %3363, i32 7
  %3400 = sext i32 %3399 to i64
  %3401 = getelementptr inbounds i16, i16* %49, i64 %3400
  %3402 = load i16, i16* %3401, align 2, !tbaa !382
  %3403 = insertelement <64 x i16> %3398, i16 %3402, i32 7
  %3404 = extractelement <64 x i32> %3363, i32 8
  %3405 = sext i32 %3404 to i64
  %3406 = getelementptr inbounds i16, i16* %49, i64 %3405
  %3407 = load i16, i16* %3406, align 2, !tbaa !382
  %3408 = insertelement <64 x i16> %3403, i16 %3407, i32 8
  %3409 = extractelement <64 x i32> %3363, i32 9
  %3410 = sext i32 %3409 to i64
  %3411 = getelementptr inbounds i16, i16* %49, i64 %3410
  %3412 = load i16, i16* %3411, align 2, !tbaa !382
  %3413 = insertelement <64 x i16> %3408, i16 %3412, i32 9
  %3414 = extractelement <64 x i32> %3363, i32 10
  %3415 = sext i32 %3414 to i64
  %3416 = getelementptr inbounds i16, i16* %49, i64 %3415
  %3417 = load i16, i16* %3416, align 2, !tbaa !382
  %3418 = insertelement <64 x i16> %3413, i16 %3417, i32 10
  %3419 = extractelement <64 x i32> %3363, i32 11
  %3420 = sext i32 %3419 to i64
  %3421 = getelementptr inbounds i16, i16* %49, i64 %3420
  %3422 = load i16, i16* %3421, align 2, !tbaa !382
  %3423 = insertelement <64 x i16> %3418, i16 %3422, i32 11
  %3424 = extractelement <64 x i32> %3363, i32 12
  %3425 = sext i32 %3424 to i64
  %3426 = getelementptr inbounds i16, i16* %49, i64 %3425
  %3427 = load i16, i16* %3426, align 2, !tbaa !382
  %3428 = insertelement <64 x i16> %3423, i16 %3427, i32 12
  %3429 = extractelement <64 x i32> %3363, i32 13
  %3430 = sext i32 %3429 to i64
  %3431 = getelementptr inbounds i16, i16* %49, i64 %3430
  %3432 = load i16, i16* %3431, align 2, !tbaa !382
  %3433 = insertelement <64 x i16> %3428, i16 %3432, i32 13
  %3434 = extractelement <64 x i32> %3363, i32 14
  %3435 = sext i32 %3434 to i64
  %3436 = getelementptr inbounds i16, i16* %49, i64 %3435
  %3437 = load i16, i16* %3436, align 2, !tbaa !382
  %3438 = insertelement <64 x i16> %3433, i16 %3437, i32 14
  %3439 = extractelement <64 x i32> %3363, i32 15
  %3440 = sext i32 %3439 to i64
  %3441 = getelementptr inbounds i16, i16* %49, i64 %3440
  %3442 = load i16, i16* %3441, align 2, !tbaa !382
  %3443 = insertelement <64 x i16> %3438, i16 %3442, i32 15
  %3444 = extractelement <64 x i32> %3363, i32 16
  %3445 = sext i32 %3444 to i64
  %3446 = getelementptr inbounds i16, i16* %49, i64 %3445
  %3447 = load i16, i16* %3446, align 2, !tbaa !382
  %3448 = insertelement <64 x i16> %3443, i16 %3447, i32 16
  %3449 = extractelement <64 x i32> %3363, i32 17
  %3450 = sext i32 %3449 to i64
  %3451 = getelementptr inbounds i16, i16* %49, i64 %3450
  %3452 = load i16, i16* %3451, align 2, !tbaa !382
  %3453 = insertelement <64 x i16> %3448, i16 %3452, i32 17
  %3454 = extractelement <64 x i32> %3363, i32 18
  %3455 = sext i32 %3454 to i64
  %3456 = getelementptr inbounds i16, i16* %49, i64 %3455
  %3457 = load i16, i16* %3456, align 2, !tbaa !382
  %3458 = insertelement <64 x i16> %3453, i16 %3457, i32 18
  %3459 = extractelement <64 x i32> %3363, i32 19
  %3460 = sext i32 %3459 to i64
  %3461 = getelementptr inbounds i16, i16* %49, i64 %3460
  %3462 = load i16, i16* %3461, align 2, !tbaa !382
  %3463 = insertelement <64 x i16> %3458, i16 %3462, i32 19
  %3464 = extractelement <64 x i32> %3363, i32 20
  %3465 = sext i32 %3464 to i64
  %3466 = getelementptr inbounds i16, i16* %49, i64 %3465
  %3467 = load i16, i16* %3466, align 2, !tbaa !382
  %3468 = insertelement <64 x i16> %3463, i16 %3467, i32 20
  %3469 = extractelement <64 x i32> %3363, i32 21
  %3470 = sext i32 %3469 to i64
  %3471 = getelementptr inbounds i16, i16* %49, i64 %3470
  %3472 = load i16, i16* %3471, align 2, !tbaa !382
  %3473 = insertelement <64 x i16> %3468, i16 %3472, i32 21
  %3474 = extractelement <64 x i32> %3363, i32 22
  %3475 = sext i32 %3474 to i64
  %3476 = getelementptr inbounds i16, i16* %49, i64 %3475
  %3477 = load i16, i16* %3476, align 2, !tbaa !382
  %3478 = insertelement <64 x i16> %3473, i16 %3477, i32 22
  %3479 = extractelement <64 x i32> %3363, i32 23
  %3480 = sext i32 %3479 to i64
  %3481 = getelementptr inbounds i16, i16* %49, i64 %3480
  %3482 = load i16, i16* %3481, align 2, !tbaa !382
  %3483 = insertelement <64 x i16> %3478, i16 %3482, i32 23
  %3484 = extractelement <64 x i32> %3363, i32 24
  %3485 = sext i32 %3484 to i64
  %3486 = getelementptr inbounds i16, i16* %49, i64 %3485
  %3487 = load i16, i16* %3486, align 2, !tbaa !382
  %3488 = insertelement <64 x i16> %3483, i16 %3487, i32 24
  %3489 = extractelement <64 x i32> %3363, i32 25
  %3490 = sext i32 %3489 to i64
  %3491 = getelementptr inbounds i16, i16* %49, i64 %3490
  %3492 = load i16, i16* %3491, align 2, !tbaa !382
  %3493 = insertelement <64 x i16> %3488, i16 %3492, i32 25
  %3494 = extractelement <64 x i32> %3363, i32 26
  %3495 = sext i32 %3494 to i64
  %3496 = getelementptr inbounds i16, i16* %49, i64 %3495
  %3497 = load i16, i16* %3496, align 2, !tbaa !382
  %3498 = insertelement <64 x i16> %3493, i16 %3497, i32 26
  %3499 = extractelement <64 x i32> %3363, i32 27
  %3500 = sext i32 %3499 to i64
  %3501 = getelementptr inbounds i16, i16* %49, i64 %3500
  %3502 = load i16, i16* %3501, align 2, !tbaa !382
  %3503 = insertelement <64 x i16> %3498, i16 %3502, i32 27
  %3504 = extractelement <64 x i32> %3363, i32 28
  %3505 = sext i32 %3504 to i64
  %3506 = getelementptr inbounds i16, i16* %49, i64 %3505
  %3507 = load i16, i16* %3506, align 2, !tbaa !382
  %3508 = insertelement <64 x i16> %3503, i16 %3507, i32 28
  %3509 = extractelement <64 x i32> %3363, i32 29
  %3510 = sext i32 %3509 to i64
  %3511 = getelementptr inbounds i16, i16* %49, i64 %3510
  %3512 = load i16, i16* %3511, align 2, !tbaa !382
  %3513 = insertelement <64 x i16> %3508, i16 %3512, i32 29
  %3514 = extractelement <64 x i32> %3363, i32 30
  %3515 = sext i32 %3514 to i64
  %3516 = getelementptr inbounds i16, i16* %49, i64 %3515
  %3517 = load i16, i16* %3516, align 2, !tbaa !382
  %3518 = insertelement <64 x i16> %3513, i16 %3517, i32 30
  %3519 = extractelement <64 x i32> %3363, i32 31
  %3520 = sext i32 %3519 to i64
  %3521 = getelementptr inbounds i16, i16* %49, i64 %3520
  %3522 = load i16, i16* %3521, align 2, !tbaa !382
  %3523 = insertelement <64 x i16> %3518, i16 %3522, i32 31
  %3524 = extractelement <64 x i32> %3363, i32 32
  %3525 = sext i32 %3524 to i64
  %3526 = getelementptr inbounds i16, i16* %49, i64 %3525
  %3527 = load i16, i16* %3526, align 2, !tbaa !382
  %3528 = insertelement <64 x i16> %3523, i16 %3527, i32 32
  %3529 = extractelement <64 x i32> %3363, i32 33
  %3530 = sext i32 %3529 to i64
  %3531 = getelementptr inbounds i16, i16* %49, i64 %3530
  %3532 = load i16, i16* %3531, align 2, !tbaa !382
  %3533 = insertelement <64 x i16> %3528, i16 %3532, i32 33
  %3534 = extractelement <64 x i32> %3363, i32 34
  %3535 = sext i32 %3534 to i64
  %3536 = getelementptr inbounds i16, i16* %49, i64 %3535
  %3537 = load i16, i16* %3536, align 2, !tbaa !382
  %3538 = insertelement <64 x i16> %3533, i16 %3537, i32 34
  %3539 = extractelement <64 x i32> %3363, i32 35
  %3540 = sext i32 %3539 to i64
  %3541 = getelementptr inbounds i16, i16* %49, i64 %3540
  %3542 = load i16, i16* %3541, align 2, !tbaa !382
  %3543 = insertelement <64 x i16> %3538, i16 %3542, i32 35
  %3544 = extractelement <64 x i32> %3363, i32 36
  %3545 = sext i32 %3544 to i64
  %3546 = getelementptr inbounds i16, i16* %49, i64 %3545
  %3547 = load i16, i16* %3546, align 2, !tbaa !382
  %3548 = insertelement <64 x i16> %3543, i16 %3547, i32 36
  %3549 = extractelement <64 x i32> %3363, i32 37
  %3550 = sext i32 %3549 to i64
  %3551 = getelementptr inbounds i16, i16* %49, i64 %3550
  %3552 = load i16, i16* %3551, align 2, !tbaa !382
  %3553 = insertelement <64 x i16> %3548, i16 %3552, i32 37
  %3554 = extractelement <64 x i32> %3363, i32 38
  %3555 = sext i32 %3554 to i64
  %3556 = getelementptr inbounds i16, i16* %49, i64 %3555
  %3557 = load i16, i16* %3556, align 2, !tbaa !382
  %3558 = insertelement <64 x i16> %3553, i16 %3557, i32 38
  %3559 = extractelement <64 x i32> %3363, i32 39
  %3560 = sext i32 %3559 to i64
  %3561 = getelementptr inbounds i16, i16* %49, i64 %3560
  %3562 = load i16, i16* %3561, align 2, !tbaa !382
  %3563 = insertelement <64 x i16> %3558, i16 %3562, i32 39
  %3564 = extractelement <64 x i32> %3363, i32 40
  %3565 = sext i32 %3564 to i64
  %3566 = getelementptr inbounds i16, i16* %49, i64 %3565
  %3567 = load i16, i16* %3566, align 2, !tbaa !382
  %3568 = insertelement <64 x i16> %3563, i16 %3567, i32 40
  %3569 = extractelement <64 x i32> %3363, i32 41
  %3570 = sext i32 %3569 to i64
  %3571 = getelementptr inbounds i16, i16* %49, i64 %3570
  %3572 = load i16, i16* %3571, align 2, !tbaa !382
  %3573 = insertelement <64 x i16> %3568, i16 %3572, i32 41
  %3574 = extractelement <64 x i32> %3363, i32 42
  %3575 = sext i32 %3574 to i64
  %3576 = getelementptr inbounds i16, i16* %49, i64 %3575
  %3577 = load i16, i16* %3576, align 2, !tbaa !382
  %3578 = insertelement <64 x i16> %3573, i16 %3577, i32 42
  %3579 = extractelement <64 x i32> %3363, i32 43
  %3580 = sext i32 %3579 to i64
  %3581 = getelementptr inbounds i16, i16* %49, i64 %3580
  %3582 = load i16, i16* %3581, align 2, !tbaa !382
  %3583 = insertelement <64 x i16> %3578, i16 %3582, i32 43
  %3584 = extractelement <64 x i32> %3363, i32 44
  %3585 = sext i32 %3584 to i64
  %3586 = getelementptr inbounds i16, i16* %49, i64 %3585
  %3587 = load i16, i16* %3586, align 2, !tbaa !382
  %3588 = insertelement <64 x i16> %3583, i16 %3587, i32 44
  %3589 = extractelement <64 x i32> %3363, i32 45
  %3590 = sext i32 %3589 to i64
  %3591 = getelementptr inbounds i16, i16* %49, i64 %3590
  %3592 = load i16, i16* %3591, align 2, !tbaa !382
  %3593 = insertelement <64 x i16> %3588, i16 %3592, i32 45
  %3594 = extractelement <64 x i32> %3363, i32 46
  %3595 = sext i32 %3594 to i64
  %3596 = getelementptr inbounds i16, i16* %49, i64 %3595
  %3597 = load i16, i16* %3596, align 2, !tbaa !382
  %3598 = insertelement <64 x i16> %3593, i16 %3597, i32 46
  %3599 = extractelement <64 x i32> %3363, i32 47
  %3600 = sext i32 %3599 to i64
  %3601 = getelementptr inbounds i16, i16* %49, i64 %3600
  %3602 = load i16, i16* %3601, align 2, !tbaa !382
  %3603 = insertelement <64 x i16> %3598, i16 %3602, i32 47
  %3604 = extractelement <64 x i32> %3363, i32 48
  %3605 = sext i32 %3604 to i64
  %3606 = getelementptr inbounds i16, i16* %49, i64 %3605
  %3607 = load i16, i16* %3606, align 2, !tbaa !382
  %3608 = insertelement <64 x i16> %3603, i16 %3607, i32 48
  %3609 = extractelement <64 x i32> %3363, i32 49
  %3610 = sext i32 %3609 to i64
  %3611 = getelementptr inbounds i16, i16* %49, i64 %3610
  %3612 = load i16, i16* %3611, align 2, !tbaa !382
  %3613 = insertelement <64 x i16> %3608, i16 %3612, i32 49
  %3614 = extractelement <64 x i32> %3363, i32 50
  %3615 = sext i32 %3614 to i64
  %3616 = getelementptr inbounds i16, i16* %49, i64 %3615
  %3617 = load i16, i16* %3616, align 2, !tbaa !382
  %3618 = insertelement <64 x i16> %3613, i16 %3617, i32 50
  %3619 = extractelement <64 x i32> %3363, i32 51
  %3620 = sext i32 %3619 to i64
  %3621 = getelementptr inbounds i16, i16* %49, i64 %3620
  %3622 = load i16, i16* %3621, align 2, !tbaa !382
  %3623 = insertelement <64 x i16> %3618, i16 %3622, i32 51
  %3624 = extractelement <64 x i32> %3363, i32 52
  %3625 = sext i32 %3624 to i64
  %3626 = getelementptr inbounds i16, i16* %49, i64 %3625
  %3627 = load i16, i16* %3626, align 2, !tbaa !382
  %3628 = insertelement <64 x i16> %3623, i16 %3627, i32 52
  %3629 = extractelement <64 x i32> %3363, i32 53
  %3630 = sext i32 %3629 to i64
  %3631 = getelementptr inbounds i16, i16* %49, i64 %3630
  %3632 = load i16, i16* %3631, align 2, !tbaa !382
  %3633 = insertelement <64 x i16> %3628, i16 %3632, i32 53
  %3634 = extractelement <64 x i32> %3363, i32 54
  %3635 = sext i32 %3634 to i64
  %3636 = getelementptr inbounds i16, i16* %49, i64 %3635
  %3637 = load i16, i16* %3636, align 2, !tbaa !382
  %3638 = insertelement <64 x i16> %3633, i16 %3637, i32 54
  %3639 = extractelement <64 x i32> %3363, i32 55
  %3640 = sext i32 %3639 to i64
  %3641 = getelementptr inbounds i16, i16* %49, i64 %3640
  %3642 = load i16, i16* %3641, align 2, !tbaa !382
  %3643 = insertelement <64 x i16> %3638, i16 %3642, i32 55
  %3644 = extractelement <64 x i32> %3363, i32 56
  %3645 = sext i32 %3644 to i64
  %3646 = getelementptr inbounds i16, i16* %49, i64 %3645
  %3647 = load i16, i16* %3646, align 2, !tbaa !382
  %3648 = insertelement <64 x i16> %3643, i16 %3647, i32 56
  %3649 = extractelement <64 x i32> %3363, i32 57
  %3650 = sext i32 %3649 to i64
  %3651 = getelementptr inbounds i16, i16* %49, i64 %3650
  %3652 = load i16, i16* %3651, align 2, !tbaa !382
  %3653 = insertelement <64 x i16> %3648, i16 %3652, i32 57
  %3654 = extractelement <64 x i32> %3363, i32 58
  %3655 = sext i32 %3654 to i64
  %3656 = getelementptr inbounds i16, i16* %49, i64 %3655
  %3657 = load i16, i16* %3656, align 2, !tbaa !382
  %3658 = insertelement <64 x i16> %3653, i16 %3657, i32 58
  %3659 = extractelement <64 x i32> %3363, i32 59
  %3660 = sext i32 %3659 to i64
  %3661 = getelementptr inbounds i16, i16* %49, i64 %3660
  %3662 = load i16, i16* %3661, align 2, !tbaa !382
  %3663 = insertelement <64 x i16> %3658, i16 %3662, i32 59
  %3664 = extractelement <64 x i32> %3363, i32 60
  %3665 = sext i32 %3664 to i64
  %3666 = getelementptr inbounds i16, i16* %49, i64 %3665
  %3667 = load i16, i16* %3666, align 2, !tbaa !382
  %3668 = insertelement <64 x i16> %3663, i16 %3667, i32 60
  %3669 = extractelement <64 x i32> %3363, i32 61
  %3670 = sext i32 %3669 to i64
  %3671 = getelementptr inbounds i16, i16* %49, i64 %3670
  %3672 = load i16, i16* %3671, align 2, !tbaa !382
  %3673 = insertelement <64 x i16> %3668, i16 %3672, i32 61
  %3674 = extractelement <64 x i32> %3363, i32 62
  %3675 = sext i32 %3674 to i64
  %3676 = getelementptr inbounds i16, i16* %49, i64 %3675
  %3677 = load i16, i16* %3676, align 2, !tbaa !382
  %3678 = insertelement <64 x i16> %3673, i16 %3677, i32 62
  %3679 = extractelement <64 x i32> %3363, i32 63
  %3680 = sext i32 %3679 to i64
  %3681 = getelementptr inbounds i16, i16* %49, i64 %3680
  %3682 = load i16, i16* %3681, align 2, !tbaa !382
  %3683 = insertelement <64 x i16> %3678, i16 %3682, i32 63
  %3684 = add nsw i32 %blur_x.s0.x.v1.base.s5, -64
  %3685 = insertelement <64 x i32> undef, i32 %3684, i32 0
  %3686 = shufflevector <64 x i32> %3685, <64 x i32> undef, <64 x i32> zeroinitializer
  %3687 = add nsw <64 x i32> %3686, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3688 = shufflevector <64 x i32> %3687, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3689 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3688, <4 x i32> %48)
  %3690 = shufflevector <64 x i32> %3687, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3691 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3690, <4 x i32> %48)
  %3692 = shufflevector <64 x i32> %3687, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3693 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3692, <4 x i32> %48)
  %3694 = shufflevector <64 x i32> %3687, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3695 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3694, <4 x i32> %48)
  %3696 = shufflevector <64 x i32> %3687, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %3697 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3696, <4 x i32> %48)
  %3698 = shufflevector <64 x i32> %3687, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %3699 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3698, <4 x i32> %48)
  %3700 = shufflevector <64 x i32> %3687, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %3701 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3700, <4 x i32> %48)
  %3702 = shufflevector <64 x i32> %3687, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %3703 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3702, <4 x i32> %48)
  %3704 = shufflevector <64 x i32> %3687, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %3705 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3704, <4 x i32> %48)
  %3706 = shufflevector <64 x i32> %3687, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %3707 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3706, <4 x i32> %48)
  %3708 = shufflevector <64 x i32> %3687, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %3709 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3708, <4 x i32> %48)
  %3710 = shufflevector <64 x i32> %3687, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %3711 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3710, <4 x i32> %48)
  %3712 = shufflevector <64 x i32> %3687, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %3713 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3712, <4 x i32> %48)
  %3714 = shufflevector <64 x i32> %3687, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %3715 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3714, <4 x i32> %48)
  %3716 = shufflevector <64 x i32> %3687, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %3717 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3716, <4 x i32> %48)
  %3718 = shufflevector <64 x i32> %3687, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3719 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3718, <4 x i32> %48)
  %3720 = shufflevector <4 x i32> %3719, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %3721 = shufflevector <8 x i32> %3720, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3722 = shufflevector <16 x i32> %3721, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %3723 = shufflevector <32 x i32> %3722, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %3724 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3689, <4 x i32> zeroinitializer)
  %3725 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3691, <4 x i32> zeroinitializer)
  %3726 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3693, <4 x i32> zeroinitializer)
  %3727 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3695, <4 x i32> zeroinitializer)
  %3728 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3697, <4 x i32> zeroinitializer)
  %3729 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3699, <4 x i32> zeroinitializer)
  %3730 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3701, <4 x i32> zeroinitializer)
  %3731 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3703, <4 x i32> zeroinitializer)
  %3732 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3705, <4 x i32> zeroinitializer)
  %3733 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3707, <4 x i32> zeroinitializer)
  %3734 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3709, <4 x i32> zeroinitializer)
  %3735 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3711, <4 x i32> zeroinitializer)
  %3736 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3713, <4 x i32> zeroinitializer)
  %3737 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3715, <4 x i32> zeroinitializer)
  %3738 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3717, <4 x i32> zeroinitializer)
  %3739 = shufflevector <64 x i32> %3723, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3740 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3739, <4 x i32> zeroinitializer)
  %3741 = shufflevector <4 x i32> %3724, <4 x i32> %3725, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3742 = shufflevector <4 x i32> %3726, <4 x i32> %3727, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3743 = shufflevector <4 x i32> %3728, <4 x i32> %3729, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3744 = shufflevector <4 x i32> %3730, <4 x i32> %3731, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3745 = shufflevector <4 x i32> %3732, <4 x i32> %3733, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3746 = shufflevector <4 x i32> %3734, <4 x i32> %3735, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3747 = shufflevector <4 x i32> %3736, <4 x i32> %3737, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3748 = shufflevector <4 x i32> %3738, <4 x i32> %3740, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3749 = shufflevector <8 x i32> %3741, <8 x i32> %3742, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3750 = shufflevector <8 x i32> %3743, <8 x i32> %3744, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3751 = shufflevector <8 x i32> %3745, <8 x i32> %3746, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3752 = shufflevector <8 x i32> %3747, <8 x i32> %3748, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3753 = shufflevector <16 x i32> %3749, <16 x i32> %3750, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3754 = shufflevector <16 x i32> %3751, <16 x i32> %3752, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3755 = shufflevector <32 x i32> %3753, <32 x i32> %3754, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3756 = add nsw <64 x i32> %3755, %t252
  %3757 = extractelement <64 x i32> %3756, i32 0
  %3758 = sext i32 %3757 to i64
  %3759 = getelementptr inbounds i16, i16* %49, i64 %3758
  %3760 = load i16, i16* %3759, align 2, !tbaa !382
  %3761 = insertelement <64 x i16> undef, i16 %3760, i32 0
  %3762 = extractelement <64 x i32> %3756, i32 1
  %3763 = sext i32 %3762 to i64
  %3764 = getelementptr inbounds i16, i16* %49, i64 %3763
  %3765 = load i16, i16* %3764, align 2, !tbaa !382
  %3766 = insertelement <64 x i16> %3761, i16 %3765, i32 1
  %3767 = extractelement <64 x i32> %3756, i32 2
  %3768 = sext i32 %3767 to i64
  %3769 = getelementptr inbounds i16, i16* %49, i64 %3768
  %3770 = load i16, i16* %3769, align 2, !tbaa !382
  %3771 = insertelement <64 x i16> %3766, i16 %3770, i32 2
  %3772 = extractelement <64 x i32> %3756, i32 3
  %3773 = sext i32 %3772 to i64
  %3774 = getelementptr inbounds i16, i16* %49, i64 %3773
  %3775 = load i16, i16* %3774, align 2, !tbaa !382
  %3776 = insertelement <64 x i16> %3771, i16 %3775, i32 3
  %3777 = extractelement <64 x i32> %3756, i32 4
  %3778 = sext i32 %3777 to i64
  %3779 = getelementptr inbounds i16, i16* %49, i64 %3778
  %3780 = load i16, i16* %3779, align 2, !tbaa !382
  %3781 = insertelement <64 x i16> %3776, i16 %3780, i32 4
  %3782 = extractelement <64 x i32> %3756, i32 5
  %3783 = sext i32 %3782 to i64
  %3784 = getelementptr inbounds i16, i16* %49, i64 %3783
  %3785 = load i16, i16* %3784, align 2, !tbaa !382
  %3786 = insertelement <64 x i16> %3781, i16 %3785, i32 5
  %3787 = extractelement <64 x i32> %3756, i32 6
  %3788 = sext i32 %3787 to i64
  %3789 = getelementptr inbounds i16, i16* %49, i64 %3788
  %3790 = load i16, i16* %3789, align 2, !tbaa !382
  %3791 = insertelement <64 x i16> %3786, i16 %3790, i32 6
  %3792 = extractelement <64 x i32> %3756, i32 7
  %3793 = sext i32 %3792 to i64
  %3794 = getelementptr inbounds i16, i16* %49, i64 %3793
  %3795 = load i16, i16* %3794, align 2, !tbaa !382
  %3796 = insertelement <64 x i16> %3791, i16 %3795, i32 7
  %3797 = extractelement <64 x i32> %3756, i32 8
  %3798 = sext i32 %3797 to i64
  %3799 = getelementptr inbounds i16, i16* %49, i64 %3798
  %3800 = load i16, i16* %3799, align 2, !tbaa !382
  %3801 = insertelement <64 x i16> %3796, i16 %3800, i32 8
  %3802 = extractelement <64 x i32> %3756, i32 9
  %3803 = sext i32 %3802 to i64
  %3804 = getelementptr inbounds i16, i16* %49, i64 %3803
  %3805 = load i16, i16* %3804, align 2, !tbaa !382
  %3806 = insertelement <64 x i16> %3801, i16 %3805, i32 9
  %3807 = extractelement <64 x i32> %3756, i32 10
  %3808 = sext i32 %3807 to i64
  %3809 = getelementptr inbounds i16, i16* %49, i64 %3808
  %3810 = load i16, i16* %3809, align 2, !tbaa !382
  %3811 = insertelement <64 x i16> %3806, i16 %3810, i32 10
  %3812 = extractelement <64 x i32> %3756, i32 11
  %3813 = sext i32 %3812 to i64
  %3814 = getelementptr inbounds i16, i16* %49, i64 %3813
  %3815 = load i16, i16* %3814, align 2, !tbaa !382
  %3816 = insertelement <64 x i16> %3811, i16 %3815, i32 11
  %3817 = extractelement <64 x i32> %3756, i32 12
  %3818 = sext i32 %3817 to i64
  %3819 = getelementptr inbounds i16, i16* %49, i64 %3818
  %3820 = load i16, i16* %3819, align 2, !tbaa !382
  %3821 = insertelement <64 x i16> %3816, i16 %3820, i32 12
  %3822 = extractelement <64 x i32> %3756, i32 13
  %3823 = sext i32 %3822 to i64
  %3824 = getelementptr inbounds i16, i16* %49, i64 %3823
  %3825 = load i16, i16* %3824, align 2, !tbaa !382
  %3826 = insertelement <64 x i16> %3821, i16 %3825, i32 13
  %3827 = extractelement <64 x i32> %3756, i32 14
  %3828 = sext i32 %3827 to i64
  %3829 = getelementptr inbounds i16, i16* %49, i64 %3828
  %3830 = load i16, i16* %3829, align 2, !tbaa !382
  %3831 = insertelement <64 x i16> %3826, i16 %3830, i32 14
  %3832 = extractelement <64 x i32> %3756, i32 15
  %3833 = sext i32 %3832 to i64
  %3834 = getelementptr inbounds i16, i16* %49, i64 %3833
  %3835 = load i16, i16* %3834, align 2, !tbaa !382
  %3836 = insertelement <64 x i16> %3831, i16 %3835, i32 15
  %3837 = extractelement <64 x i32> %3756, i32 16
  %3838 = sext i32 %3837 to i64
  %3839 = getelementptr inbounds i16, i16* %49, i64 %3838
  %3840 = load i16, i16* %3839, align 2, !tbaa !382
  %3841 = insertelement <64 x i16> %3836, i16 %3840, i32 16
  %3842 = extractelement <64 x i32> %3756, i32 17
  %3843 = sext i32 %3842 to i64
  %3844 = getelementptr inbounds i16, i16* %49, i64 %3843
  %3845 = load i16, i16* %3844, align 2, !tbaa !382
  %3846 = insertelement <64 x i16> %3841, i16 %3845, i32 17
  %3847 = extractelement <64 x i32> %3756, i32 18
  %3848 = sext i32 %3847 to i64
  %3849 = getelementptr inbounds i16, i16* %49, i64 %3848
  %3850 = load i16, i16* %3849, align 2, !tbaa !382
  %3851 = insertelement <64 x i16> %3846, i16 %3850, i32 18
  %3852 = extractelement <64 x i32> %3756, i32 19
  %3853 = sext i32 %3852 to i64
  %3854 = getelementptr inbounds i16, i16* %49, i64 %3853
  %3855 = load i16, i16* %3854, align 2, !tbaa !382
  %3856 = insertelement <64 x i16> %3851, i16 %3855, i32 19
  %3857 = extractelement <64 x i32> %3756, i32 20
  %3858 = sext i32 %3857 to i64
  %3859 = getelementptr inbounds i16, i16* %49, i64 %3858
  %3860 = load i16, i16* %3859, align 2, !tbaa !382
  %3861 = insertelement <64 x i16> %3856, i16 %3860, i32 20
  %3862 = extractelement <64 x i32> %3756, i32 21
  %3863 = sext i32 %3862 to i64
  %3864 = getelementptr inbounds i16, i16* %49, i64 %3863
  %3865 = load i16, i16* %3864, align 2, !tbaa !382
  %3866 = insertelement <64 x i16> %3861, i16 %3865, i32 21
  %3867 = extractelement <64 x i32> %3756, i32 22
  %3868 = sext i32 %3867 to i64
  %3869 = getelementptr inbounds i16, i16* %49, i64 %3868
  %3870 = load i16, i16* %3869, align 2, !tbaa !382
  %3871 = insertelement <64 x i16> %3866, i16 %3870, i32 22
  %3872 = extractelement <64 x i32> %3756, i32 23
  %3873 = sext i32 %3872 to i64
  %3874 = getelementptr inbounds i16, i16* %49, i64 %3873
  %3875 = load i16, i16* %3874, align 2, !tbaa !382
  %3876 = insertelement <64 x i16> %3871, i16 %3875, i32 23
  %3877 = extractelement <64 x i32> %3756, i32 24
  %3878 = sext i32 %3877 to i64
  %3879 = getelementptr inbounds i16, i16* %49, i64 %3878
  %3880 = load i16, i16* %3879, align 2, !tbaa !382
  %3881 = insertelement <64 x i16> %3876, i16 %3880, i32 24
  %3882 = extractelement <64 x i32> %3756, i32 25
  %3883 = sext i32 %3882 to i64
  %3884 = getelementptr inbounds i16, i16* %49, i64 %3883
  %3885 = load i16, i16* %3884, align 2, !tbaa !382
  %3886 = insertelement <64 x i16> %3881, i16 %3885, i32 25
  %3887 = extractelement <64 x i32> %3756, i32 26
  %3888 = sext i32 %3887 to i64
  %3889 = getelementptr inbounds i16, i16* %49, i64 %3888
  %3890 = load i16, i16* %3889, align 2, !tbaa !382
  %3891 = insertelement <64 x i16> %3886, i16 %3890, i32 26
  %3892 = extractelement <64 x i32> %3756, i32 27
  %3893 = sext i32 %3892 to i64
  %3894 = getelementptr inbounds i16, i16* %49, i64 %3893
  %3895 = load i16, i16* %3894, align 2, !tbaa !382
  %3896 = insertelement <64 x i16> %3891, i16 %3895, i32 27
  %3897 = extractelement <64 x i32> %3756, i32 28
  %3898 = sext i32 %3897 to i64
  %3899 = getelementptr inbounds i16, i16* %49, i64 %3898
  %3900 = load i16, i16* %3899, align 2, !tbaa !382
  %3901 = insertelement <64 x i16> %3896, i16 %3900, i32 28
  %3902 = extractelement <64 x i32> %3756, i32 29
  %3903 = sext i32 %3902 to i64
  %3904 = getelementptr inbounds i16, i16* %49, i64 %3903
  %3905 = load i16, i16* %3904, align 2, !tbaa !382
  %3906 = insertelement <64 x i16> %3901, i16 %3905, i32 29
  %3907 = extractelement <64 x i32> %3756, i32 30
  %3908 = sext i32 %3907 to i64
  %3909 = getelementptr inbounds i16, i16* %49, i64 %3908
  %3910 = load i16, i16* %3909, align 2, !tbaa !382
  %3911 = insertelement <64 x i16> %3906, i16 %3910, i32 30
  %3912 = extractelement <64 x i32> %3756, i32 31
  %3913 = sext i32 %3912 to i64
  %3914 = getelementptr inbounds i16, i16* %49, i64 %3913
  %3915 = load i16, i16* %3914, align 2, !tbaa !382
  %3916 = insertelement <64 x i16> %3911, i16 %3915, i32 31
  %3917 = extractelement <64 x i32> %3756, i32 32
  %3918 = sext i32 %3917 to i64
  %3919 = getelementptr inbounds i16, i16* %49, i64 %3918
  %3920 = load i16, i16* %3919, align 2, !tbaa !382
  %3921 = insertelement <64 x i16> %3916, i16 %3920, i32 32
  %3922 = extractelement <64 x i32> %3756, i32 33
  %3923 = sext i32 %3922 to i64
  %3924 = getelementptr inbounds i16, i16* %49, i64 %3923
  %3925 = load i16, i16* %3924, align 2, !tbaa !382
  %3926 = insertelement <64 x i16> %3921, i16 %3925, i32 33
  %3927 = extractelement <64 x i32> %3756, i32 34
  %3928 = sext i32 %3927 to i64
  %3929 = getelementptr inbounds i16, i16* %49, i64 %3928
  %3930 = load i16, i16* %3929, align 2, !tbaa !382
  %3931 = insertelement <64 x i16> %3926, i16 %3930, i32 34
  %3932 = extractelement <64 x i32> %3756, i32 35
  %3933 = sext i32 %3932 to i64
  %3934 = getelementptr inbounds i16, i16* %49, i64 %3933
  %3935 = load i16, i16* %3934, align 2, !tbaa !382
  %3936 = insertelement <64 x i16> %3931, i16 %3935, i32 35
  %3937 = extractelement <64 x i32> %3756, i32 36
  %3938 = sext i32 %3937 to i64
  %3939 = getelementptr inbounds i16, i16* %49, i64 %3938
  %3940 = load i16, i16* %3939, align 2, !tbaa !382
  %3941 = insertelement <64 x i16> %3936, i16 %3940, i32 36
  %3942 = extractelement <64 x i32> %3756, i32 37
  %3943 = sext i32 %3942 to i64
  %3944 = getelementptr inbounds i16, i16* %49, i64 %3943
  %3945 = load i16, i16* %3944, align 2, !tbaa !382
  %3946 = insertelement <64 x i16> %3941, i16 %3945, i32 37
  %3947 = extractelement <64 x i32> %3756, i32 38
  %3948 = sext i32 %3947 to i64
  %3949 = getelementptr inbounds i16, i16* %49, i64 %3948
  %3950 = load i16, i16* %3949, align 2, !tbaa !382
  %3951 = insertelement <64 x i16> %3946, i16 %3950, i32 38
  %3952 = extractelement <64 x i32> %3756, i32 39
  %3953 = sext i32 %3952 to i64
  %3954 = getelementptr inbounds i16, i16* %49, i64 %3953
  %3955 = load i16, i16* %3954, align 2, !tbaa !382
  %3956 = insertelement <64 x i16> %3951, i16 %3955, i32 39
  %3957 = extractelement <64 x i32> %3756, i32 40
  %3958 = sext i32 %3957 to i64
  %3959 = getelementptr inbounds i16, i16* %49, i64 %3958
  %3960 = load i16, i16* %3959, align 2, !tbaa !382
  %3961 = insertelement <64 x i16> %3956, i16 %3960, i32 40
  %3962 = extractelement <64 x i32> %3756, i32 41
  %3963 = sext i32 %3962 to i64
  %3964 = getelementptr inbounds i16, i16* %49, i64 %3963
  %3965 = load i16, i16* %3964, align 2, !tbaa !382
  %3966 = insertelement <64 x i16> %3961, i16 %3965, i32 41
  %3967 = extractelement <64 x i32> %3756, i32 42
  %3968 = sext i32 %3967 to i64
  %3969 = getelementptr inbounds i16, i16* %49, i64 %3968
  %3970 = load i16, i16* %3969, align 2, !tbaa !382
  %3971 = insertelement <64 x i16> %3966, i16 %3970, i32 42
  %3972 = extractelement <64 x i32> %3756, i32 43
  %3973 = sext i32 %3972 to i64
  %3974 = getelementptr inbounds i16, i16* %49, i64 %3973
  %3975 = load i16, i16* %3974, align 2, !tbaa !382
  %3976 = insertelement <64 x i16> %3971, i16 %3975, i32 43
  %3977 = extractelement <64 x i32> %3756, i32 44
  %3978 = sext i32 %3977 to i64
  %3979 = getelementptr inbounds i16, i16* %49, i64 %3978
  %3980 = load i16, i16* %3979, align 2, !tbaa !382
  %3981 = insertelement <64 x i16> %3976, i16 %3980, i32 44
  %3982 = extractelement <64 x i32> %3756, i32 45
  %3983 = sext i32 %3982 to i64
  %3984 = getelementptr inbounds i16, i16* %49, i64 %3983
  %3985 = load i16, i16* %3984, align 2, !tbaa !382
  %3986 = insertelement <64 x i16> %3981, i16 %3985, i32 45
  %3987 = extractelement <64 x i32> %3756, i32 46
  %3988 = sext i32 %3987 to i64
  %3989 = getelementptr inbounds i16, i16* %49, i64 %3988
  %3990 = load i16, i16* %3989, align 2, !tbaa !382
  %3991 = insertelement <64 x i16> %3986, i16 %3990, i32 46
  %3992 = extractelement <64 x i32> %3756, i32 47
  %3993 = sext i32 %3992 to i64
  %3994 = getelementptr inbounds i16, i16* %49, i64 %3993
  %3995 = load i16, i16* %3994, align 2, !tbaa !382
  %3996 = insertelement <64 x i16> %3991, i16 %3995, i32 47
  %3997 = extractelement <64 x i32> %3756, i32 48
  %3998 = sext i32 %3997 to i64
  %3999 = getelementptr inbounds i16, i16* %49, i64 %3998
  %4000 = load i16, i16* %3999, align 2, !tbaa !382
  %4001 = insertelement <64 x i16> %3996, i16 %4000, i32 48
  %4002 = extractelement <64 x i32> %3756, i32 49
  %4003 = sext i32 %4002 to i64
  %4004 = getelementptr inbounds i16, i16* %49, i64 %4003
  %4005 = load i16, i16* %4004, align 2, !tbaa !382
  %4006 = insertelement <64 x i16> %4001, i16 %4005, i32 49
  %4007 = extractelement <64 x i32> %3756, i32 50
  %4008 = sext i32 %4007 to i64
  %4009 = getelementptr inbounds i16, i16* %49, i64 %4008
  %4010 = load i16, i16* %4009, align 2, !tbaa !382
  %4011 = insertelement <64 x i16> %4006, i16 %4010, i32 50
  %4012 = extractelement <64 x i32> %3756, i32 51
  %4013 = sext i32 %4012 to i64
  %4014 = getelementptr inbounds i16, i16* %49, i64 %4013
  %4015 = load i16, i16* %4014, align 2, !tbaa !382
  %4016 = insertelement <64 x i16> %4011, i16 %4015, i32 51
  %4017 = extractelement <64 x i32> %3756, i32 52
  %4018 = sext i32 %4017 to i64
  %4019 = getelementptr inbounds i16, i16* %49, i64 %4018
  %4020 = load i16, i16* %4019, align 2, !tbaa !382
  %4021 = insertelement <64 x i16> %4016, i16 %4020, i32 52
  %4022 = extractelement <64 x i32> %3756, i32 53
  %4023 = sext i32 %4022 to i64
  %4024 = getelementptr inbounds i16, i16* %49, i64 %4023
  %4025 = load i16, i16* %4024, align 2, !tbaa !382
  %4026 = insertelement <64 x i16> %4021, i16 %4025, i32 53
  %4027 = extractelement <64 x i32> %3756, i32 54
  %4028 = sext i32 %4027 to i64
  %4029 = getelementptr inbounds i16, i16* %49, i64 %4028
  %4030 = load i16, i16* %4029, align 2, !tbaa !382
  %4031 = insertelement <64 x i16> %4026, i16 %4030, i32 54
  %4032 = extractelement <64 x i32> %3756, i32 55
  %4033 = sext i32 %4032 to i64
  %4034 = getelementptr inbounds i16, i16* %49, i64 %4033
  %4035 = load i16, i16* %4034, align 2, !tbaa !382
  %4036 = insertelement <64 x i16> %4031, i16 %4035, i32 55
  %4037 = extractelement <64 x i32> %3756, i32 56
  %4038 = sext i32 %4037 to i64
  %4039 = getelementptr inbounds i16, i16* %49, i64 %4038
  %4040 = load i16, i16* %4039, align 2, !tbaa !382
  %4041 = insertelement <64 x i16> %4036, i16 %4040, i32 56
  %4042 = extractelement <64 x i32> %3756, i32 57
  %4043 = sext i32 %4042 to i64
  %4044 = getelementptr inbounds i16, i16* %49, i64 %4043
  %4045 = load i16, i16* %4044, align 2, !tbaa !382
  %4046 = insertelement <64 x i16> %4041, i16 %4045, i32 57
  %4047 = extractelement <64 x i32> %3756, i32 58
  %4048 = sext i32 %4047 to i64
  %4049 = getelementptr inbounds i16, i16* %49, i64 %4048
  %4050 = load i16, i16* %4049, align 2, !tbaa !382
  %4051 = insertelement <64 x i16> %4046, i16 %4050, i32 58
  %4052 = extractelement <64 x i32> %3756, i32 59
  %4053 = sext i32 %4052 to i64
  %4054 = getelementptr inbounds i16, i16* %49, i64 %4053
  %4055 = load i16, i16* %4054, align 2, !tbaa !382
  %4056 = insertelement <64 x i16> %4051, i16 %4055, i32 59
  %4057 = extractelement <64 x i32> %3756, i32 60
  %4058 = sext i32 %4057 to i64
  %4059 = getelementptr inbounds i16, i16* %49, i64 %4058
  %4060 = load i16, i16* %4059, align 2, !tbaa !382
  %4061 = insertelement <64 x i16> %4056, i16 %4060, i32 60
  %4062 = extractelement <64 x i32> %3756, i32 61
  %4063 = sext i32 %4062 to i64
  %4064 = getelementptr inbounds i16, i16* %49, i64 %4063
  %4065 = load i16, i16* %4064, align 2, !tbaa !382
  %4066 = insertelement <64 x i16> %4061, i16 %4065, i32 61
  %4067 = extractelement <64 x i32> %3756, i32 62
  %4068 = sext i32 %4067 to i64
  %4069 = getelementptr inbounds i16, i16* %49, i64 %4068
  %4070 = load i16, i16* %4069, align 2, !tbaa !382
  %4071 = insertelement <64 x i16> %4066, i16 %4070, i32 62
  %4072 = extractelement <64 x i32> %3756, i32 63
  %4073 = sext i32 %4072 to i64
  %4074 = getelementptr inbounds i16, i16* %49, i64 %4073
  %4075 = load i16, i16* %4074, align 2, !tbaa !382
  %4076 = insertelement <64 x i16> %4071, i16 %4075, i32 63
  %4077 = add nsw i32 %blur_x.s0.x.v1.base.s5, -62
  %4078 = insertelement <64 x i32> undef, i32 %4077, i32 0
  %4079 = shufflevector <64 x i32> %4078, <64 x i32> undef, <64 x i32> zeroinitializer
  %4080 = add nsw <64 x i32> %4079, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4081 = shufflevector <64 x i32> %4080, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4082 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4081, <4 x i32> %48)
  %4083 = shufflevector <64 x i32> %4080, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4084 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4083, <4 x i32> %48)
  %4085 = shufflevector <64 x i32> %4080, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4086 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4085, <4 x i32> %48)
  %4087 = shufflevector <64 x i32> %4080, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4088 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4087, <4 x i32> %48)
  %4089 = shufflevector <64 x i32> %4080, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %4090 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4089, <4 x i32> %48)
  %4091 = shufflevector <64 x i32> %4080, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %4092 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4091, <4 x i32> %48)
  %4093 = shufflevector <64 x i32> %4080, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %4094 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4093, <4 x i32> %48)
  %4095 = shufflevector <64 x i32> %4080, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %4096 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4095, <4 x i32> %48)
  %4097 = shufflevector <64 x i32> %4080, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %4098 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4097, <4 x i32> %48)
  %4099 = shufflevector <64 x i32> %4080, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %4100 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4099, <4 x i32> %48)
  %4101 = shufflevector <64 x i32> %4080, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %4102 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4101, <4 x i32> %48)
  %4103 = shufflevector <64 x i32> %4080, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %4104 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4103, <4 x i32> %48)
  %4105 = shufflevector <64 x i32> %4080, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %4106 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4105, <4 x i32> %48)
  %4107 = shufflevector <64 x i32> %4080, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %4108 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4107, <4 x i32> %48)
  %4109 = shufflevector <64 x i32> %4080, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %4110 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4109, <4 x i32> %48)
  %4111 = shufflevector <64 x i32> %4080, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4112 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4111, <4 x i32> %48)
  %4113 = shufflevector <4 x i32> %4112, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %4114 = shufflevector <8 x i32> %4113, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4115 = shufflevector <16 x i32> %4114, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %4116 = shufflevector <32 x i32> %4115, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %4117 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4082, <4 x i32> zeroinitializer)
  %4118 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4084, <4 x i32> zeroinitializer)
  %4119 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4086, <4 x i32> zeroinitializer)
  %4120 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4088, <4 x i32> zeroinitializer)
  %4121 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4090, <4 x i32> zeroinitializer)
  %4122 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4092, <4 x i32> zeroinitializer)
  %4123 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4094, <4 x i32> zeroinitializer)
  %4124 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4096, <4 x i32> zeroinitializer)
  %4125 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4098, <4 x i32> zeroinitializer)
  %4126 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4100, <4 x i32> zeroinitializer)
  %4127 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4102, <4 x i32> zeroinitializer)
  %4128 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4104, <4 x i32> zeroinitializer)
  %4129 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4106, <4 x i32> zeroinitializer)
  %4130 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4108, <4 x i32> zeroinitializer)
  %4131 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4110, <4 x i32> zeroinitializer)
  %4132 = shufflevector <64 x i32> %4116, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4133 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4132, <4 x i32> zeroinitializer)
  %4134 = shufflevector <4 x i32> %4117, <4 x i32> %4118, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4135 = shufflevector <4 x i32> %4119, <4 x i32> %4120, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4136 = shufflevector <4 x i32> %4121, <4 x i32> %4122, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4137 = shufflevector <4 x i32> %4123, <4 x i32> %4124, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4138 = shufflevector <4 x i32> %4125, <4 x i32> %4126, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4139 = shufflevector <4 x i32> %4127, <4 x i32> %4128, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4140 = shufflevector <4 x i32> %4129, <4 x i32> %4130, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4141 = shufflevector <4 x i32> %4131, <4 x i32> %4133, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4142 = shufflevector <8 x i32> %4134, <8 x i32> %4135, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4143 = shufflevector <8 x i32> %4136, <8 x i32> %4137, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4144 = shufflevector <8 x i32> %4138, <8 x i32> %4139, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4145 = shufflevector <8 x i32> %4140, <8 x i32> %4141, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4146 = shufflevector <16 x i32> %4142, <16 x i32> %4143, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4147 = shufflevector <16 x i32> %4144, <16 x i32> %4145, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4148 = shufflevector <32 x i32> %4146, <32 x i32> %4147, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4149 = add nsw <64 x i32> %4148, %t252
  %4150 = extractelement <64 x i32> %4149, i32 0
  %4151 = sext i32 %4150 to i64
  %4152 = getelementptr inbounds i16, i16* %49, i64 %4151
  %4153 = load i16, i16* %4152, align 2, !tbaa !382
  %4154 = insertelement <64 x i16> undef, i16 %4153, i32 0
  %4155 = extractelement <64 x i32> %4149, i32 1
  %4156 = sext i32 %4155 to i64
  %4157 = getelementptr inbounds i16, i16* %49, i64 %4156
  %4158 = load i16, i16* %4157, align 2, !tbaa !382
  %4159 = insertelement <64 x i16> %4154, i16 %4158, i32 1
  %4160 = extractelement <64 x i32> %4149, i32 2
  %4161 = sext i32 %4160 to i64
  %4162 = getelementptr inbounds i16, i16* %49, i64 %4161
  %4163 = load i16, i16* %4162, align 2, !tbaa !382
  %4164 = insertelement <64 x i16> %4159, i16 %4163, i32 2
  %4165 = extractelement <64 x i32> %4149, i32 3
  %4166 = sext i32 %4165 to i64
  %4167 = getelementptr inbounds i16, i16* %49, i64 %4166
  %4168 = load i16, i16* %4167, align 2, !tbaa !382
  %4169 = insertelement <64 x i16> %4164, i16 %4168, i32 3
  %4170 = extractelement <64 x i32> %4149, i32 4
  %4171 = sext i32 %4170 to i64
  %4172 = getelementptr inbounds i16, i16* %49, i64 %4171
  %4173 = load i16, i16* %4172, align 2, !tbaa !382
  %4174 = insertelement <64 x i16> %4169, i16 %4173, i32 4
  %4175 = extractelement <64 x i32> %4149, i32 5
  %4176 = sext i32 %4175 to i64
  %4177 = getelementptr inbounds i16, i16* %49, i64 %4176
  %4178 = load i16, i16* %4177, align 2, !tbaa !382
  %4179 = insertelement <64 x i16> %4174, i16 %4178, i32 5
  %4180 = extractelement <64 x i32> %4149, i32 6
  %4181 = sext i32 %4180 to i64
  %4182 = getelementptr inbounds i16, i16* %49, i64 %4181
  %4183 = load i16, i16* %4182, align 2, !tbaa !382
  %4184 = insertelement <64 x i16> %4179, i16 %4183, i32 6
  %4185 = extractelement <64 x i32> %4149, i32 7
  %4186 = sext i32 %4185 to i64
  %4187 = getelementptr inbounds i16, i16* %49, i64 %4186
  %4188 = load i16, i16* %4187, align 2, !tbaa !382
  %4189 = insertelement <64 x i16> %4184, i16 %4188, i32 7
  %4190 = extractelement <64 x i32> %4149, i32 8
  %4191 = sext i32 %4190 to i64
  %4192 = getelementptr inbounds i16, i16* %49, i64 %4191
  %4193 = load i16, i16* %4192, align 2, !tbaa !382
  %4194 = insertelement <64 x i16> %4189, i16 %4193, i32 8
  %4195 = extractelement <64 x i32> %4149, i32 9
  %4196 = sext i32 %4195 to i64
  %4197 = getelementptr inbounds i16, i16* %49, i64 %4196
  %4198 = load i16, i16* %4197, align 2, !tbaa !382
  %4199 = insertelement <64 x i16> %4194, i16 %4198, i32 9
  %4200 = extractelement <64 x i32> %4149, i32 10
  %4201 = sext i32 %4200 to i64
  %4202 = getelementptr inbounds i16, i16* %49, i64 %4201
  %4203 = load i16, i16* %4202, align 2, !tbaa !382
  %4204 = insertelement <64 x i16> %4199, i16 %4203, i32 10
  %4205 = extractelement <64 x i32> %4149, i32 11
  %4206 = sext i32 %4205 to i64
  %4207 = getelementptr inbounds i16, i16* %49, i64 %4206
  %4208 = load i16, i16* %4207, align 2, !tbaa !382
  %4209 = insertelement <64 x i16> %4204, i16 %4208, i32 11
  %4210 = extractelement <64 x i32> %4149, i32 12
  %4211 = sext i32 %4210 to i64
  %4212 = getelementptr inbounds i16, i16* %49, i64 %4211
  %4213 = load i16, i16* %4212, align 2, !tbaa !382
  %4214 = insertelement <64 x i16> %4209, i16 %4213, i32 12
  %4215 = extractelement <64 x i32> %4149, i32 13
  %4216 = sext i32 %4215 to i64
  %4217 = getelementptr inbounds i16, i16* %49, i64 %4216
  %4218 = load i16, i16* %4217, align 2, !tbaa !382
  %4219 = insertelement <64 x i16> %4214, i16 %4218, i32 13
  %4220 = extractelement <64 x i32> %4149, i32 14
  %4221 = sext i32 %4220 to i64
  %4222 = getelementptr inbounds i16, i16* %49, i64 %4221
  %4223 = load i16, i16* %4222, align 2, !tbaa !382
  %4224 = insertelement <64 x i16> %4219, i16 %4223, i32 14
  %4225 = extractelement <64 x i32> %4149, i32 15
  %4226 = sext i32 %4225 to i64
  %4227 = getelementptr inbounds i16, i16* %49, i64 %4226
  %4228 = load i16, i16* %4227, align 2, !tbaa !382
  %4229 = insertelement <64 x i16> %4224, i16 %4228, i32 15
  %4230 = extractelement <64 x i32> %4149, i32 16
  %4231 = sext i32 %4230 to i64
  %4232 = getelementptr inbounds i16, i16* %49, i64 %4231
  %4233 = load i16, i16* %4232, align 2, !tbaa !382
  %4234 = insertelement <64 x i16> %4229, i16 %4233, i32 16
  %4235 = extractelement <64 x i32> %4149, i32 17
  %4236 = sext i32 %4235 to i64
  %4237 = getelementptr inbounds i16, i16* %49, i64 %4236
  %4238 = load i16, i16* %4237, align 2, !tbaa !382
  %4239 = insertelement <64 x i16> %4234, i16 %4238, i32 17
  %4240 = extractelement <64 x i32> %4149, i32 18
  %4241 = sext i32 %4240 to i64
  %4242 = getelementptr inbounds i16, i16* %49, i64 %4241
  %4243 = load i16, i16* %4242, align 2, !tbaa !382
  %4244 = insertelement <64 x i16> %4239, i16 %4243, i32 18
  %4245 = extractelement <64 x i32> %4149, i32 19
  %4246 = sext i32 %4245 to i64
  %4247 = getelementptr inbounds i16, i16* %49, i64 %4246
  %4248 = load i16, i16* %4247, align 2, !tbaa !382
  %4249 = insertelement <64 x i16> %4244, i16 %4248, i32 19
  %4250 = extractelement <64 x i32> %4149, i32 20
  %4251 = sext i32 %4250 to i64
  %4252 = getelementptr inbounds i16, i16* %49, i64 %4251
  %4253 = load i16, i16* %4252, align 2, !tbaa !382
  %4254 = insertelement <64 x i16> %4249, i16 %4253, i32 20
  %4255 = extractelement <64 x i32> %4149, i32 21
  %4256 = sext i32 %4255 to i64
  %4257 = getelementptr inbounds i16, i16* %49, i64 %4256
  %4258 = load i16, i16* %4257, align 2, !tbaa !382
  %4259 = insertelement <64 x i16> %4254, i16 %4258, i32 21
  %4260 = extractelement <64 x i32> %4149, i32 22
  %4261 = sext i32 %4260 to i64
  %4262 = getelementptr inbounds i16, i16* %49, i64 %4261
  %4263 = load i16, i16* %4262, align 2, !tbaa !382
  %4264 = insertelement <64 x i16> %4259, i16 %4263, i32 22
  %4265 = extractelement <64 x i32> %4149, i32 23
  %4266 = sext i32 %4265 to i64
  %4267 = getelementptr inbounds i16, i16* %49, i64 %4266
  %4268 = load i16, i16* %4267, align 2, !tbaa !382
  %4269 = insertelement <64 x i16> %4264, i16 %4268, i32 23
  %4270 = extractelement <64 x i32> %4149, i32 24
  %4271 = sext i32 %4270 to i64
  %4272 = getelementptr inbounds i16, i16* %49, i64 %4271
  %4273 = load i16, i16* %4272, align 2, !tbaa !382
  %4274 = insertelement <64 x i16> %4269, i16 %4273, i32 24
  %4275 = extractelement <64 x i32> %4149, i32 25
  %4276 = sext i32 %4275 to i64
  %4277 = getelementptr inbounds i16, i16* %49, i64 %4276
  %4278 = load i16, i16* %4277, align 2, !tbaa !382
  %4279 = insertelement <64 x i16> %4274, i16 %4278, i32 25
  %4280 = extractelement <64 x i32> %4149, i32 26
  %4281 = sext i32 %4280 to i64
  %4282 = getelementptr inbounds i16, i16* %49, i64 %4281
  %4283 = load i16, i16* %4282, align 2, !tbaa !382
  %4284 = insertelement <64 x i16> %4279, i16 %4283, i32 26
  %4285 = extractelement <64 x i32> %4149, i32 27
  %4286 = sext i32 %4285 to i64
  %4287 = getelementptr inbounds i16, i16* %49, i64 %4286
  %4288 = load i16, i16* %4287, align 2, !tbaa !382
  %4289 = insertelement <64 x i16> %4284, i16 %4288, i32 27
  %4290 = extractelement <64 x i32> %4149, i32 28
  %4291 = sext i32 %4290 to i64
  %4292 = getelementptr inbounds i16, i16* %49, i64 %4291
  %4293 = load i16, i16* %4292, align 2, !tbaa !382
  %4294 = insertelement <64 x i16> %4289, i16 %4293, i32 28
  %4295 = extractelement <64 x i32> %4149, i32 29
  %4296 = sext i32 %4295 to i64
  %4297 = getelementptr inbounds i16, i16* %49, i64 %4296
  %4298 = load i16, i16* %4297, align 2, !tbaa !382
  %4299 = insertelement <64 x i16> %4294, i16 %4298, i32 29
  %4300 = extractelement <64 x i32> %4149, i32 30
  %4301 = sext i32 %4300 to i64
  %4302 = getelementptr inbounds i16, i16* %49, i64 %4301
  %4303 = load i16, i16* %4302, align 2, !tbaa !382
  %4304 = insertelement <64 x i16> %4299, i16 %4303, i32 30
  %4305 = extractelement <64 x i32> %4149, i32 31
  %4306 = sext i32 %4305 to i64
  %4307 = getelementptr inbounds i16, i16* %49, i64 %4306
  %4308 = load i16, i16* %4307, align 2, !tbaa !382
  %4309 = insertelement <64 x i16> %4304, i16 %4308, i32 31
  %4310 = extractelement <64 x i32> %4149, i32 32
  %4311 = sext i32 %4310 to i64
  %4312 = getelementptr inbounds i16, i16* %49, i64 %4311
  %4313 = load i16, i16* %4312, align 2, !tbaa !382
  %4314 = insertelement <64 x i16> %4309, i16 %4313, i32 32
  %4315 = extractelement <64 x i32> %4149, i32 33
  %4316 = sext i32 %4315 to i64
  %4317 = getelementptr inbounds i16, i16* %49, i64 %4316
  %4318 = load i16, i16* %4317, align 2, !tbaa !382
  %4319 = insertelement <64 x i16> %4314, i16 %4318, i32 33
  %4320 = extractelement <64 x i32> %4149, i32 34
  %4321 = sext i32 %4320 to i64
  %4322 = getelementptr inbounds i16, i16* %49, i64 %4321
  %4323 = load i16, i16* %4322, align 2, !tbaa !382
  %4324 = insertelement <64 x i16> %4319, i16 %4323, i32 34
  %4325 = extractelement <64 x i32> %4149, i32 35
  %4326 = sext i32 %4325 to i64
  %4327 = getelementptr inbounds i16, i16* %49, i64 %4326
  %4328 = load i16, i16* %4327, align 2, !tbaa !382
  %4329 = insertelement <64 x i16> %4324, i16 %4328, i32 35
  %4330 = extractelement <64 x i32> %4149, i32 36
  %4331 = sext i32 %4330 to i64
  %4332 = getelementptr inbounds i16, i16* %49, i64 %4331
  %4333 = load i16, i16* %4332, align 2, !tbaa !382
  %4334 = insertelement <64 x i16> %4329, i16 %4333, i32 36
  %4335 = extractelement <64 x i32> %4149, i32 37
  %4336 = sext i32 %4335 to i64
  %4337 = getelementptr inbounds i16, i16* %49, i64 %4336
  %4338 = load i16, i16* %4337, align 2, !tbaa !382
  %4339 = insertelement <64 x i16> %4334, i16 %4338, i32 37
  %4340 = extractelement <64 x i32> %4149, i32 38
  %4341 = sext i32 %4340 to i64
  %4342 = getelementptr inbounds i16, i16* %49, i64 %4341
  %4343 = load i16, i16* %4342, align 2, !tbaa !382
  %4344 = insertelement <64 x i16> %4339, i16 %4343, i32 38
  %4345 = extractelement <64 x i32> %4149, i32 39
  %4346 = sext i32 %4345 to i64
  %4347 = getelementptr inbounds i16, i16* %49, i64 %4346
  %4348 = load i16, i16* %4347, align 2, !tbaa !382
  %4349 = insertelement <64 x i16> %4344, i16 %4348, i32 39
  %4350 = extractelement <64 x i32> %4149, i32 40
  %4351 = sext i32 %4350 to i64
  %4352 = getelementptr inbounds i16, i16* %49, i64 %4351
  %4353 = load i16, i16* %4352, align 2, !tbaa !382
  %4354 = insertelement <64 x i16> %4349, i16 %4353, i32 40
  %4355 = extractelement <64 x i32> %4149, i32 41
  %4356 = sext i32 %4355 to i64
  %4357 = getelementptr inbounds i16, i16* %49, i64 %4356
  %4358 = load i16, i16* %4357, align 2, !tbaa !382
  %4359 = insertelement <64 x i16> %4354, i16 %4358, i32 41
  %4360 = extractelement <64 x i32> %4149, i32 42
  %4361 = sext i32 %4360 to i64
  %4362 = getelementptr inbounds i16, i16* %49, i64 %4361
  %4363 = load i16, i16* %4362, align 2, !tbaa !382
  %4364 = insertelement <64 x i16> %4359, i16 %4363, i32 42
  %4365 = extractelement <64 x i32> %4149, i32 43
  %4366 = sext i32 %4365 to i64
  %4367 = getelementptr inbounds i16, i16* %49, i64 %4366
  %4368 = load i16, i16* %4367, align 2, !tbaa !382
  %4369 = insertelement <64 x i16> %4364, i16 %4368, i32 43
  %4370 = extractelement <64 x i32> %4149, i32 44
  %4371 = sext i32 %4370 to i64
  %4372 = getelementptr inbounds i16, i16* %49, i64 %4371
  %4373 = load i16, i16* %4372, align 2, !tbaa !382
  %4374 = insertelement <64 x i16> %4369, i16 %4373, i32 44
  %4375 = extractelement <64 x i32> %4149, i32 45
  %4376 = sext i32 %4375 to i64
  %4377 = getelementptr inbounds i16, i16* %49, i64 %4376
  %4378 = load i16, i16* %4377, align 2, !tbaa !382
  %4379 = insertelement <64 x i16> %4374, i16 %4378, i32 45
  %4380 = extractelement <64 x i32> %4149, i32 46
  %4381 = sext i32 %4380 to i64
  %4382 = getelementptr inbounds i16, i16* %49, i64 %4381
  %4383 = load i16, i16* %4382, align 2, !tbaa !382
  %4384 = insertelement <64 x i16> %4379, i16 %4383, i32 46
  %4385 = extractelement <64 x i32> %4149, i32 47
  %4386 = sext i32 %4385 to i64
  %4387 = getelementptr inbounds i16, i16* %49, i64 %4386
  %4388 = load i16, i16* %4387, align 2, !tbaa !382
  %4389 = insertelement <64 x i16> %4384, i16 %4388, i32 47
  %4390 = extractelement <64 x i32> %4149, i32 48
  %4391 = sext i32 %4390 to i64
  %4392 = getelementptr inbounds i16, i16* %49, i64 %4391
  %4393 = load i16, i16* %4392, align 2, !tbaa !382
  %4394 = insertelement <64 x i16> %4389, i16 %4393, i32 48
  %4395 = extractelement <64 x i32> %4149, i32 49
  %4396 = sext i32 %4395 to i64
  %4397 = getelementptr inbounds i16, i16* %49, i64 %4396
  %4398 = load i16, i16* %4397, align 2, !tbaa !382
  %4399 = insertelement <64 x i16> %4394, i16 %4398, i32 49
  %4400 = extractelement <64 x i32> %4149, i32 50
  %4401 = sext i32 %4400 to i64
  %4402 = getelementptr inbounds i16, i16* %49, i64 %4401
  %4403 = load i16, i16* %4402, align 2, !tbaa !382
  %4404 = insertelement <64 x i16> %4399, i16 %4403, i32 50
  %4405 = extractelement <64 x i32> %4149, i32 51
  %4406 = sext i32 %4405 to i64
  %4407 = getelementptr inbounds i16, i16* %49, i64 %4406
  %4408 = load i16, i16* %4407, align 2, !tbaa !382
  %4409 = insertelement <64 x i16> %4404, i16 %4408, i32 51
  %4410 = extractelement <64 x i32> %4149, i32 52
  %4411 = sext i32 %4410 to i64
  %4412 = getelementptr inbounds i16, i16* %49, i64 %4411
  %4413 = load i16, i16* %4412, align 2, !tbaa !382
  %4414 = insertelement <64 x i16> %4409, i16 %4413, i32 52
  %4415 = extractelement <64 x i32> %4149, i32 53
  %4416 = sext i32 %4415 to i64
  %4417 = getelementptr inbounds i16, i16* %49, i64 %4416
  %4418 = load i16, i16* %4417, align 2, !tbaa !382
  %4419 = insertelement <64 x i16> %4414, i16 %4418, i32 53
  %4420 = extractelement <64 x i32> %4149, i32 54
  %4421 = sext i32 %4420 to i64
  %4422 = getelementptr inbounds i16, i16* %49, i64 %4421
  %4423 = load i16, i16* %4422, align 2, !tbaa !382
  %4424 = insertelement <64 x i16> %4419, i16 %4423, i32 54
  %4425 = extractelement <64 x i32> %4149, i32 55
  %4426 = sext i32 %4425 to i64
  %4427 = getelementptr inbounds i16, i16* %49, i64 %4426
  %4428 = load i16, i16* %4427, align 2, !tbaa !382
  %4429 = insertelement <64 x i16> %4424, i16 %4428, i32 55
  %4430 = extractelement <64 x i32> %4149, i32 56
  %4431 = sext i32 %4430 to i64
  %4432 = getelementptr inbounds i16, i16* %49, i64 %4431
  %4433 = load i16, i16* %4432, align 2, !tbaa !382
  %4434 = insertelement <64 x i16> %4429, i16 %4433, i32 56
  %4435 = extractelement <64 x i32> %4149, i32 57
  %4436 = sext i32 %4435 to i64
  %4437 = getelementptr inbounds i16, i16* %49, i64 %4436
  %4438 = load i16, i16* %4437, align 2, !tbaa !382
  %4439 = insertelement <64 x i16> %4434, i16 %4438, i32 57
  %4440 = extractelement <64 x i32> %4149, i32 58
  %4441 = sext i32 %4440 to i64
  %4442 = getelementptr inbounds i16, i16* %49, i64 %4441
  %4443 = load i16, i16* %4442, align 2, !tbaa !382
  %4444 = insertelement <64 x i16> %4439, i16 %4443, i32 58
  %4445 = extractelement <64 x i32> %4149, i32 59
  %4446 = sext i32 %4445 to i64
  %4447 = getelementptr inbounds i16, i16* %49, i64 %4446
  %4448 = load i16, i16* %4447, align 2, !tbaa !382
  %4449 = insertelement <64 x i16> %4444, i16 %4448, i32 59
  %4450 = extractelement <64 x i32> %4149, i32 60
  %4451 = sext i32 %4450 to i64
  %4452 = getelementptr inbounds i16, i16* %49, i64 %4451
  %4453 = load i16, i16* %4452, align 2, !tbaa !382
  %4454 = insertelement <64 x i16> %4449, i16 %4453, i32 60
  %4455 = extractelement <64 x i32> %4149, i32 61
  %4456 = sext i32 %4455 to i64
  %4457 = getelementptr inbounds i16, i16* %49, i64 %4456
  %4458 = load i16, i16* %4457, align 2, !tbaa !382
  %4459 = insertelement <64 x i16> %4454, i16 %4458, i32 61
  %4460 = extractelement <64 x i32> %4149, i32 62
  %4461 = sext i32 %4460 to i64
  %4462 = getelementptr inbounds i16, i16* %49, i64 %4461
  %4463 = load i16, i16* %4462, align 2, !tbaa !382
  %4464 = insertelement <64 x i16> %4459, i16 %4463, i32 62
  %4465 = extractelement <64 x i32> %4149, i32 63
  %4466 = sext i32 %4465 to i64
  %4467 = getelementptr inbounds i16, i16* %49, i64 %4466
  %4468 = load i16, i16* %4467, align 2, !tbaa !382
  %4469 = insertelement <64 x i16> %4464, i16 %4468, i32 63
  %4470 = add nsw i32 %blur_x.s0.x.v1.base.s5, -61
  %4471 = insertelement <64 x i32> undef, i32 %4470, i32 0
  %4472 = shufflevector <64 x i32> %4471, <64 x i32> undef, <64 x i32> zeroinitializer
  %4473 = add nsw <64 x i32> %4472, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4474 = shufflevector <64 x i32> %4473, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4475 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4474, <4 x i32> %48)
  %4476 = shufflevector <64 x i32> %4473, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4477 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4476, <4 x i32> %48)
  %4478 = shufflevector <64 x i32> %4473, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4479 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4478, <4 x i32> %48)
  %4480 = shufflevector <64 x i32> %4473, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4481 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4480, <4 x i32> %48)
  %4482 = shufflevector <64 x i32> %4473, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %4483 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4482, <4 x i32> %48)
  %4484 = shufflevector <64 x i32> %4473, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %4485 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4484, <4 x i32> %48)
  %4486 = shufflevector <64 x i32> %4473, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %4487 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4486, <4 x i32> %48)
  %4488 = shufflevector <64 x i32> %4473, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %4489 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4488, <4 x i32> %48)
  %4490 = shufflevector <64 x i32> %4473, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %4491 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4490, <4 x i32> %48)
  %4492 = shufflevector <64 x i32> %4473, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %4493 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4492, <4 x i32> %48)
  %4494 = shufflevector <64 x i32> %4473, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %4495 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4494, <4 x i32> %48)
  %4496 = shufflevector <64 x i32> %4473, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %4497 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4496, <4 x i32> %48)
  %4498 = shufflevector <64 x i32> %4473, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %4499 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4498, <4 x i32> %48)
  %4500 = shufflevector <64 x i32> %4473, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %4501 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4500, <4 x i32> %48)
  %4502 = shufflevector <64 x i32> %4473, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %4503 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4502, <4 x i32> %48)
  %4504 = shufflevector <64 x i32> %4473, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4505 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4504, <4 x i32> %48)
  %4506 = shufflevector <4 x i32> %4505, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %4507 = shufflevector <8 x i32> %4506, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4508 = shufflevector <16 x i32> %4507, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %4509 = shufflevector <32 x i32> %4508, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %4510 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4475, <4 x i32> zeroinitializer)
  %4511 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4477, <4 x i32> zeroinitializer)
  %4512 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4479, <4 x i32> zeroinitializer)
  %4513 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4481, <4 x i32> zeroinitializer)
  %4514 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4483, <4 x i32> zeroinitializer)
  %4515 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4485, <4 x i32> zeroinitializer)
  %4516 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4487, <4 x i32> zeroinitializer)
  %4517 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4489, <4 x i32> zeroinitializer)
  %4518 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4491, <4 x i32> zeroinitializer)
  %4519 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4493, <4 x i32> zeroinitializer)
  %4520 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4495, <4 x i32> zeroinitializer)
  %4521 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4497, <4 x i32> zeroinitializer)
  %4522 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4499, <4 x i32> zeroinitializer)
  %4523 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4501, <4 x i32> zeroinitializer)
  %4524 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4503, <4 x i32> zeroinitializer)
  %4525 = shufflevector <64 x i32> %4509, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4526 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4525, <4 x i32> zeroinitializer)
  %4527 = shufflevector <4 x i32> %4510, <4 x i32> %4511, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4528 = shufflevector <4 x i32> %4512, <4 x i32> %4513, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4529 = shufflevector <4 x i32> %4514, <4 x i32> %4515, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4530 = shufflevector <4 x i32> %4516, <4 x i32> %4517, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4531 = shufflevector <4 x i32> %4518, <4 x i32> %4519, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4532 = shufflevector <4 x i32> %4520, <4 x i32> %4521, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4533 = shufflevector <4 x i32> %4522, <4 x i32> %4523, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4534 = shufflevector <4 x i32> %4524, <4 x i32> %4526, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4535 = shufflevector <8 x i32> %4527, <8 x i32> %4528, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4536 = shufflevector <8 x i32> %4529, <8 x i32> %4530, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4537 = shufflevector <8 x i32> %4531, <8 x i32> %4532, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4538 = shufflevector <8 x i32> %4533, <8 x i32> %4534, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4539 = shufflevector <16 x i32> %4535, <16 x i32> %4536, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4540 = shufflevector <16 x i32> %4537, <16 x i32> %4538, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4541 = shufflevector <32 x i32> %4539, <32 x i32> %4540, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4542 = add nsw <64 x i32> %4541, %t252
  %4543 = extractelement <64 x i32> %4542, i32 0
  %4544 = sext i32 %4543 to i64
  %4545 = getelementptr inbounds i16, i16* %49, i64 %4544
  %4546 = load i16, i16* %4545, align 2, !tbaa !382
  %4547 = insertelement <64 x i16> undef, i16 %4546, i32 0
  %4548 = extractelement <64 x i32> %4542, i32 1
  %4549 = sext i32 %4548 to i64
  %4550 = getelementptr inbounds i16, i16* %49, i64 %4549
  %4551 = load i16, i16* %4550, align 2, !tbaa !382
  %4552 = insertelement <64 x i16> %4547, i16 %4551, i32 1
  %4553 = extractelement <64 x i32> %4542, i32 2
  %4554 = sext i32 %4553 to i64
  %4555 = getelementptr inbounds i16, i16* %49, i64 %4554
  %4556 = load i16, i16* %4555, align 2, !tbaa !382
  %4557 = insertelement <64 x i16> %4552, i16 %4556, i32 2
  %4558 = extractelement <64 x i32> %4542, i32 3
  %4559 = sext i32 %4558 to i64
  %4560 = getelementptr inbounds i16, i16* %49, i64 %4559
  %4561 = load i16, i16* %4560, align 2, !tbaa !382
  %4562 = insertelement <64 x i16> %4557, i16 %4561, i32 3
  %4563 = extractelement <64 x i32> %4542, i32 4
  %4564 = sext i32 %4563 to i64
  %4565 = getelementptr inbounds i16, i16* %49, i64 %4564
  %4566 = load i16, i16* %4565, align 2, !tbaa !382
  %4567 = insertelement <64 x i16> %4562, i16 %4566, i32 4
  %4568 = extractelement <64 x i32> %4542, i32 5
  %4569 = sext i32 %4568 to i64
  %4570 = getelementptr inbounds i16, i16* %49, i64 %4569
  %4571 = load i16, i16* %4570, align 2, !tbaa !382
  %4572 = insertelement <64 x i16> %4567, i16 %4571, i32 5
  %4573 = extractelement <64 x i32> %4542, i32 6
  %4574 = sext i32 %4573 to i64
  %4575 = getelementptr inbounds i16, i16* %49, i64 %4574
  %4576 = load i16, i16* %4575, align 2, !tbaa !382
  %4577 = insertelement <64 x i16> %4572, i16 %4576, i32 6
  %4578 = extractelement <64 x i32> %4542, i32 7
  %4579 = sext i32 %4578 to i64
  %4580 = getelementptr inbounds i16, i16* %49, i64 %4579
  %4581 = load i16, i16* %4580, align 2, !tbaa !382
  %4582 = insertelement <64 x i16> %4577, i16 %4581, i32 7
  %4583 = extractelement <64 x i32> %4542, i32 8
  %4584 = sext i32 %4583 to i64
  %4585 = getelementptr inbounds i16, i16* %49, i64 %4584
  %4586 = load i16, i16* %4585, align 2, !tbaa !382
  %4587 = insertelement <64 x i16> %4582, i16 %4586, i32 8
  %4588 = extractelement <64 x i32> %4542, i32 9
  %4589 = sext i32 %4588 to i64
  %4590 = getelementptr inbounds i16, i16* %49, i64 %4589
  %4591 = load i16, i16* %4590, align 2, !tbaa !382
  %4592 = insertelement <64 x i16> %4587, i16 %4591, i32 9
  %4593 = extractelement <64 x i32> %4542, i32 10
  %4594 = sext i32 %4593 to i64
  %4595 = getelementptr inbounds i16, i16* %49, i64 %4594
  %4596 = load i16, i16* %4595, align 2, !tbaa !382
  %4597 = insertelement <64 x i16> %4592, i16 %4596, i32 10
  %4598 = extractelement <64 x i32> %4542, i32 11
  %4599 = sext i32 %4598 to i64
  %4600 = getelementptr inbounds i16, i16* %49, i64 %4599
  %4601 = load i16, i16* %4600, align 2, !tbaa !382
  %4602 = insertelement <64 x i16> %4597, i16 %4601, i32 11
  %4603 = extractelement <64 x i32> %4542, i32 12
  %4604 = sext i32 %4603 to i64
  %4605 = getelementptr inbounds i16, i16* %49, i64 %4604
  %4606 = load i16, i16* %4605, align 2, !tbaa !382
  %4607 = insertelement <64 x i16> %4602, i16 %4606, i32 12
  %4608 = extractelement <64 x i32> %4542, i32 13
  %4609 = sext i32 %4608 to i64
  %4610 = getelementptr inbounds i16, i16* %49, i64 %4609
  %4611 = load i16, i16* %4610, align 2, !tbaa !382
  %4612 = insertelement <64 x i16> %4607, i16 %4611, i32 13
  %4613 = extractelement <64 x i32> %4542, i32 14
  %4614 = sext i32 %4613 to i64
  %4615 = getelementptr inbounds i16, i16* %49, i64 %4614
  %4616 = load i16, i16* %4615, align 2, !tbaa !382
  %4617 = insertelement <64 x i16> %4612, i16 %4616, i32 14
  %4618 = extractelement <64 x i32> %4542, i32 15
  %4619 = sext i32 %4618 to i64
  %4620 = getelementptr inbounds i16, i16* %49, i64 %4619
  %4621 = load i16, i16* %4620, align 2, !tbaa !382
  %4622 = insertelement <64 x i16> %4617, i16 %4621, i32 15
  %4623 = extractelement <64 x i32> %4542, i32 16
  %4624 = sext i32 %4623 to i64
  %4625 = getelementptr inbounds i16, i16* %49, i64 %4624
  %4626 = load i16, i16* %4625, align 2, !tbaa !382
  %4627 = insertelement <64 x i16> %4622, i16 %4626, i32 16
  %4628 = extractelement <64 x i32> %4542, i32 17
  %4629 = sext i32 %4628 to i64
  %4630 = getelementptr inbounds i16, i16* %49, i64 %4629
  %4631 = load i16, i16* %4630, align 2, !tbaa !382
  %4632 = insertelement <64 x i16> %4627, i16 %4631, i32 17
  %4633 = extractelement <64 x i32> %4542, i32 18
  %4634 = sext i32 %4633 to i64
  %4635 = getelementptr inbounds i16, i16* %49, i64 %4634
  %4636 = load i16, i16* %4635, align 2, !tbaa !382
  %4637 = insertelement <64 x i16> %4632, i16 %4636, i32 18
  %4638 = extractelement <64 x i32> %4542, i32 19
  %4639 = sext i32 %4638 to i64
  %4640 = getelementptr inbounds i16, i16* %49, i64 %4639
  %4641 = load i16, i16* %4640, align 2, !tbaa !382
  %4642 = insertelement <64 x i16> %4637, i16 %4641, i32 19
  %4643 = extractelement <64 x i32> %4542, i32 20
  %4644 = sext i32 %4643 to i64
  %4645 = getelementptr inbounds i16, i16* %49, i64 %4644
  %4646 = load i16, i16* %4645, align 2, !tbaa !382
  %4647 = insertelement <64 x i16> %4642, i16 %4646, i32 20
  %4648 = extractelement <64 x i32> %4542, i32 21
  %4649 = sext i32 %4648 to i64
  %4650 = getelementptr inbounds i16, i16* %49, i64 %4649
  %4651 = load i16, i16* %4650, align 2, !tbaa !382
  %4652 = insertelement <64 x i16> %4647, i16 %4651, i32 21
  %4653 = extractelement <64 x i32> %4542, i32 22
  %4654 = sext i32 %4653 to i64
  %4655 = getelementptr inbounds i16, i16* %49, i64 %4654
  %4656 = load i16, i16* %4655, align 2, !tbaa !382
  %4657 = insertelement <64 x i16> %4652, i16 %4656, i32 22
  %4658 = extractelement <64 x i32> %4542, i32 23
  %4659 = sext i32 %4658 to i64
  %4660 = getelementptr inbounds i16, i16* %49, i64 %4659
  %4661 = load i16, i16* %4660, align 2, !tbaa !382
  %4662 = insertelement <64 x i16> %4657, i16 %4661, i32 23
  %4663 = extractelement <64 x i32> %4542, i32 24
  %4664 = sext i32 %4663 to i64
  %4665 = getelementptr inbounds i16, i16* %49, i64 %4664
  %4666 = load i16, i16* %4665, align 2, !tbaa !382
  %4667 = insertelement <64 x i16> %4662, i16 %4666, i32 24
  %4668 = extractelement <64 x i32> %4542, i32 25
  %4669 = sext i32 %4668 to i64
  %4670 = getelementptr inbounds i16, i16* %49, i64 %4669
  %4671 = load i16, i16* %4670, align 2, !tbaa !382
  %4672 = insertelement <64 x i16> %4667, i16 %4671, i32 25
  %4673 = extractelement <64 x i32> %4542, i32 26
  %4674 = sext i32 %4673 to i64
  %4675 = getelementptr inbounds i16, i16* %49, i64 %4674
  %4676 = load i16, i16* %4675, align 2, !tbaa !382
  %4677 = insertelement <64 x i16> %4672, i16 %4676, i32 26
  %4678 = extractelement <64 x i32> %4542, i32 27
  %4679 = sext i32 %4678 to i64
  %4680 = getelementptr inbounds i16, i16* %49, i64 %4679
  %4681 = load i16, i16* %4680, align 2, !tbaa !382
  %4682 = insertelement <64 x i16> %4677, i16 %4681, i32 27
  %4683 = extractelement <64 x i32> %4542, i32 28
  %4684 = sext i32 %4683 to i64
  %4685 = getelementptr inbounds i16, i16* %49, i64 %4684
  %4686 = load i16, i16* %4685, align 2, !tbaa !382
  %4687 = insertelement <64 x i16> %4682, i16 %4686, i32 28
  %4688 = extractelement <64 x i32> %4542, i32 29
  %4689 = sext i32 %4688 to i64
  %4690 = getelementptr inbounds i16, i16* %49, i64 %4689
  %4691 = load i16, i16* %4690, align 2, !tbaa !382
  %4692 = insertelement <64 x i16> %4687, i16 %4691, i32 29
  %4693 = extractelement <64 x i32> %4542, i32 30
  %4694 = sext i32 %4693 to i64
  %4695 = getelementptr inbounds i16, i16* %49, i64 %4694
  %4696 = load i16, i16* %4695, align 2, !tbaa !382
  %4697 = insertelement <64 x i16> %4692, i16 %4696, i32 30
  %4698 = extractelement <64 x i32> %4542, i32 31
  %4699 = sext i32 %4698 to i64
  %4700 = getelementptr inbounds i16, i16* %49, i64 %4699
  %4701 = load i16, i16* %4700, align 2, !tbaa !382
  %4702 = insertelement <64 x i16> %4697, i16 %4701, i32 31
  %4703 = extractelement <64 x i32> %4542, i32 32
  %4704 = sext i32 %4703 to i64
  %4705 = getelementptr inbounds i16, i16* %49, i64 %4704
  %4706 = load i16, i16* %4705, align 2, !tbaa !382
  %4707 = insertelement <64 x i16> %4702, i16 %4706, i32 32
  %4708 = extractelement <64 x i32> %4542, i32 33
  %4709 = sext i32 %4708 to i64
  %4710 = getelementptr inbounds i16, i16* %49, i64 %4709
  %4711 = load i16, i16* %4710, align 2, !tbaa !382
  %4712 = insertelement <64 x i16> %4707, i16 %4711, i32 33
  %4713 = extractelement <64 x i32> %4542, i32 34
  %4714 = sext i32 %4713 to i64
  %4715 = getelementptr inbounds i16, i16* %49, i64 %4714
  %4716 = load i16, i16* %4715, align 2, !tbaa !382
  %4717 = insertelement <64 x i16> %4712, i16 %4716, i32 34
  %4718 = extractelement <64 x i32> %4542, i32 35
  %4719 = sext i32 %4718 to i64
  %4720 = getelementptr inbounds i16, i16* %49, i64 %4719
  %4721 = load i16, i16* %4720, align 2, !tbaa !382
  %4722 = insertelement <64 x i16> %4717, i16 %4721, i32 35
  %4723 = extractelement <64 x i32> %4542, i32 36
  %4724 = sext i32 %4723 to i64
  %4725 = getelementptr inbounds i16, i16* %49, i64 %4724
  %4726 = load i16, i16* %4725, align 2, !tbaa !382
  %4727 = insertelement <64 x i16> %4722, i16 %4726, i32 36
  %4728 = extractelement <64 x i32> %4542, i32 37
  %4729 = sext i32 %4728 to i64
  %4730 = getelementptr inbounds i16, i16* %49, i64 %4729
  %4731 = load i16, i16* %4730, align 2, !tbaa !382
  %4732 = insertelement <64 x i16> %4727, i16 %4731, i32 37
  %4733 = extractelement <64 x i32> %4542, i32 38
  %4734 = sext i32 %4733 to i64
  %4735 = getelementptr inbounds i16, i16* %49, i64 %4734
  %4736 = load i16, i16* %4735, align 2, !tbaa !382
  %4737 = insertelement <64 x i16> %4732, i16 %4736, i32 38
  %4738 = extractelement <64 x i32> %4542, i32 39
  %4739 = sext i32 %4738 to i64
  %4740 = getelementptr inbounds i16, i16* %49, i64 %4739
  %4741 = load i16, i16* %4740, align 2, !tbaa !382
  %4742 = insertelement <64 x i16> %4737, i16 %4741, i32 39
  %4743 = extractelement <64 x i32> %4542, i32 40
  %4744 = sext i32 %4743 to i64
  %4745 = getelementptr inbounds i16, i16* %49, i64 %4744
  %4746 = load i16, i16* %4745, align 2, !tbaa !382
  %4747 = insertelement <64 x i16> %4742, i16 %4746, i32 40
  %4748 = extractelement <64 x i32> %4542, i32 41
  %4749 = sext i32 %4748 to i64
  %4750 = getelementptr inbounds i16, i16* %49, i64 %4749
  %4751 = load i16, i16* %4750, align 2, !tbaa !382
  %4752 = insertelement <64 x i16> %4747, i16 %4751, i32 41
  %4753 = extractelement <64 x i32> %4542, i32 42
  %4754 = sext i32 %4753 to i64
  %4755 = getelementptr inbounds i16, i16* %49, i64 %4754
  %4756 = load i16, i16* %4755, align 2, !tbaa !382
  %4757 = insertelement <64 x i16> %4752, i16 %4756, i32 42
  %4758 = extractelement <64 x i32> %4542, i32 43
  %4759 = sext i32 %4758 to i64
  %4760 = getelementptr inbounds i16, i16* %49, i64 %4759
  %4761 = load i16, i16* %4760, align 2, !tbaa !382
  %4762 = insertelement <64 x i16> %4757, i16 %4761, i32 43
  %4763 = extractelement <64 x i32> %4542, i32 44
  %4764 = sext i32 %4763 to i64
  %4765 = getelementptr inbounds i16, i16* %49, i64 %4764
  %4766 = load i16, i16* %4765, align 2, !tbaa !382
  %4767 = insertelement <64 x i16> %4762, i16 %4766, i32 44
  %4768 = extractelement <64 x i32> %4542, i32 45
  %4769 = sext i32 %4768 to i64
  %4770 = getelementptr inbounds i16, i16* %49, i64 %4769
  %4771 = load i16, i16* %4770, align 2, !tbaa !382
  %4772 = insertelement <64 x i16> %4767, i16 %4771, i32 45
  %4773 = extractelement <64 x i32> %4542, i32 46
  %4774 = sext i32 %4773 to i64
  %4775 = getelementptr inbounds i16, i16* %49, i64 %4774
  %4776 = load i16, i16* %4775, align 2, !tbaa !382
  %4777 = insertelement <64 x i16> %4772, i16 %4776, i32 46
  %4778 = extractelement <64 x i32> %4542, i32 47
  %4779 = sext i32 %4778 to i64
  %4780 = getelementptr inbounds i16, i16* %49, i64 %4779
  %4781 = load i16, i16* %4780, align 2, !tbaa !382
  %4782 = insertelement <64 x i16> %4777, i16 %4781, i32 47
  %4783 = extractelement <64 x i32> %4542, i32 48
  %4784 = sext i32 %4783 to i64
  %4785 = getelementptr inbounds i16, i16* %49, i64 %4784
  %4786 = load i16, i16* %4785, align 2, !tbaa !382
  %4787 = insertelement <64 x i16> %4782, i16 %4786, i32 48
  %4788 = extractelement <64 x i32> %4542, i32 49
  %4789 = sext i32 %4788 to i64
  %4790 = getelementptr inbounds i16, i16* %49, i64 %4789
  %4791 = load i16, i16* %4790, align 2, !tbaa !382
  %4792 = insertelement <64 x i16> %4787, i16 %4791, i32 49
  %4793 = extractelement <64 x i32> %4542, i32 50
  %4794 = sext i32 %4793 to i64
  %4795 = getelementptr inbounds i16, i16* %49, i64 %4794
  %4796 = load i16, i16* %4795, align 2, !tbaa !382
  %4797 = insertelement <64 x i16> %4792, i16 %4796, i32 50
  %4798 = extractelement <64 x i32> %4542, i32 51
  %4799 = sext i32 %4798 to i64
  %4800 = getelementptr inbounds i16, i16* %49, i64 %4799
  %4801 = load i16, i16* %4800, align 2, !tbaa !382
  %4802 = insertelement <64 x i16> %4797, i16 %4801, i32 51
  %4803 = extractelement <64 x i32> %4542, i32 52
  %4804 = sext i32 %4803 to i64
  %4805 = getelementptr inbounds i16, i16* %49, i64 %4804
  %4806 = load i16, i16* %4805, align 2, !tbaa !382
  %4807 = insertelement <64 x i16> %4802, i16 %4806, i32 52
  %4808 = extractelement <64 x i32> %4542, i32 53
  %4809 = sext i32 %4808 to i64
  %4810 = getelementptr inbounds i16, i16* %49, i64 %4809
  %4811 = load i16, i16* %4810, align 2, !tbaa !382
  %4812 = insertelement <64 x i16> %4807, i16 %4811, i32 53
  %4813 = extractelement <64 x i32> %4542, i32 54
  %4814 = sext i32 %4813 to i64
  %4815 = getelementptr inbounds i16, i16* %49, i64 %4814
  %4816 = load i16, i16* %4815, align 2, !tbaa !382
  %4817 = insertelement <64 x i16> %4812, i16 %4816, i32 54
  %4818 = extractelement <64 x i32> %4542, i32 55
  %4819 = sext i32 %4818 to i64
  %4820 = getelementptr inbounds i16, i16* %49, i64 %4819
  %4821 = load i16, i16* %4820, align 2, !tbaa !382
  %4822 = insertelement <64 x i16> %4817, i16 %4821, i32 55
  %4823 = extractelement <64 x i32> %4542, i32 56
  %4824 = sext i32 %4823 to i64
  %4825 = getelementptr inbounds i16, i16* %49, i64 %4824
  %4826 = load i16, i16* %4825, align 2, !tbaa !382
  %4827 = insertelement <64 x i16> %4822, i16 %4826, i32 56
  %4828 = extractelement <64 x i32> %4542, i32 57
  %4829 = sext i32 %4828 to i64
  %4830 = getelementptr inbounds i16, i16* %49, i64 %4829
  %4831 = load i16, i16* %4830, align 2, !tbaa !382
  %4832 = insertelement <64 x i16> %4827, i16 %4831, i32 57
  %4833 = extractelement <64 x i32> %4542, i32 58
  %4834 = sext i32 %4833 to i64
  %4835 = getelementptr inbounds i16, i16* %49, i64 %4834
  %4836 = load i16, i16* %4835, align 2, !tbaa !382
  %4837 = insertelement <64 x i16> %4832, i16 %4836, i32 58
  %4838 = extractelement <64 x i32> %4542, i32 59
  %4839 = sext i32 %4838 to i64
  %4840 = getelementptr inbounds i16, i16* %49, i64 %4839
  %4841 = load i16, i16* %4840, align 2, !tbaa !382
  %4842 = insertelement <64 x i16> %4837, i16 %4841, i32 59
  %4843 = extractelement <64 x i32> %4542, i32 60
  %4844 = sext i32 %4843 to i64
  %4845 = getelementptr inbounds i16, i16* %49, i64 %4844
  %4846 = load i16, i16* %4845, align 2, !tbaa !382
  %4847 = insertelement <64 x i16> %4842, i16 %4846, i32 60
  %4848 = extractelement <64 x i32> %4542, i32 61
  %4849 = sext i32 %4848 to i64
  %4850 = getelementptr inbounds i16, i16* %49, i64 %4849
  %4851 = load i16, i16* %4850, align 2, !tbaa !382
  %4852 = insertelement <64 x i16> %4847, i16 %4851, i32 61
  %4853 = extractelement <64 x i32> %4542, i32 62
  %4854 = sext i32 %4853 to i64
  %4855 = getelementptr inbounds i16, i16* %49, i64 %4854
  %4856 = load i16, i16* %4855, align 2, !tbaa !382
  %4857 = insertelement <64 x i16> %4852, i16 %4856, i32 62
  %4858 = extractelement <64 x i32> %4542, i32 63
  %4859 = sext i32 %4858 to i64
  %4860 = getelementptr inbounds i16, i16* %49, i64 %4859
  %4861 = load i16, i16* %4860, align 2, !tbaa !382
  %4862 = insertelement <64 x i16> %4857, i16 %4861, i32 63
  %4863 = add nsw i32 %blur_x.s0.x.v1.base.s5, -60
  %4864 = insertelement <64 x i32> undef, i32 %4863, i32 0
  %4865 = shufflevector <64 x i32> %4864, <64 x i32> undef, <64 x i32> zeroinitializer
  %4866 = add nsw <64 x i32> %4865, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4867 = shufflevector <64 x i32> %4866, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4868 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4867, <4 x i32> %48)
  %4869 = shufflevector <64 x i32> %4866, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4870 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4869, <4 x i32> %48)
  %4871 = shufflevector <64 x i32> %4866, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4872 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4871, <4 x i32> %48)
  %4873 = shufflevector <64 x i32> %4866, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4874 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4873, <4 x i32> %48)
  %4875 = shufflevector <64 x i32> %4866, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %4876 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4875, <4 x i32> %48)
  %4877 = shufflevector <64 x i32> %4866, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %4878 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4877, <4 x i32> %48)
  %4879 = shufflevector <64 x i32> %4866, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %4880 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4879, <4 x i32> %48)
  %4881 = shufflevector <64 x i32> %4866, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %4882 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4881, <4 x i32> %48)
  %4883 = shufflevector <64 x i32> %4866, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %4884 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4883, <4 x i32> %48)
  %4885 = shufflevector <64 x i32> %4866, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %4886 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4885, <4 x i32> %48)
  %4887 = shufflevector <64 x i32> %4866, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %4888 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4887, <4 x i32> %48)
  %4889 = shufflevector <64 x i32> %4866, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %4890 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4889, <4 x i32> %48)
  %4891 = shufflevector <64 x i32> %4866, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %4892 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4891, <4 x i32> %48)
  %4893 = shufflevector <64 x i32> %4866, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %4894 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4893, <4 x i32> %48)
  %4895 = shufflevector <64 x i32> %4866, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %4896 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4895, <4 x i32> %48)
  %4897 = shufflevector <64 x i32> %4866, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4898 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4897, <4 x i32> %48)
  %4899 = shufflevector <4 x i32> %4898, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %4900 = shufflevector <8 x i32> %4899, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4901 = shufflevector <16 x i32> %4900, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %4902 = shufflevector <32 x i32> %4901, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %4903 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4868, <4 x i32> zeroinitializer)
  %4904 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4870, <4 x i32> zeroinitializer)
  %4905 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4872, <4 x i32> zeroinitializer)
  %4906 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4874, <4 x i32> zeroinitializer)
  %4907 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4876, <4 x i32> zeroinitializer)
  %4908 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4878, <4 x i32> zeroinitializer)
  %4909 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4880, <4 x i32> zeroinitializer)
  %4910 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4882, <4 x i32> zeroinitializer)
  %4911 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4884, <4 x i32> zeroinitializer)
  %4912 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4886, <4 x i32> zeroinitializer)
  %4913 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4888, <4 x i32> zeroinitializer)
  %4914 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4890, <4 x i32> zeroinitializer)
  %4915 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4892, <4 x i32> zeroinitializer)
  %4916 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4894, <4 x i32> zeroinitializer)
  %4917 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4896, <4 x i32> zeroinitializer)
  %4918 = shufflevector <64 x i32> %4902, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4919 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4918, <4 x i32> zeroinitializer)
  %4920 = shufflevector <4 x i32> %4903, <4 x i32> %4904, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4921 = shufflevector <4 x i32> %4905, <4 x i32> %4906, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4922 = shufflevector <4 x i32> %4907, <4 x i32> %4908, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4923 = shufflevector <4 x i32> %4909, <4 x i32> %4910, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4924 = shufflevector <4 x i32> %4911, <4 x i32> %4912, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4925 = shufflevector <4 x i32> %4913, <4 x i32> %4914, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4926 = shufflevector <4 x i32> %4915, <4 x i32> %4916, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4927 = shufflevector <4 x i32> %4917, <4 x i32> %4919, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4928 = shufflevector <8 x i32> %4920, <8 x i32> %4921, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4929 = shufflevector <8 x i32> %4922, <8 x i32> %4923, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4930 = shufflevector <8 x i32> %4924, <8 x i32> %4925, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4931 = shufflevector <8 x i32> %4926, <8 x i32> %4927, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4932 = shufflevector <16 x i32> %4928, <16 x i32> %4929, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4933 = shufflevector <16 x i32> %4930, <16 x i32> %4931, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4934 = shufflevector <32 x i32> %4932, <32 x i32> %4933, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4935 = add nsw <64 x i32> %4934, %t252
  %4936 = extractelement <64 x i32> %4935, i32 0
  %4937 = sext i32 %4936 to i64
  %4938 = getelementptr inbounds i16, i16* %49, i64 %4937
  %4939 = load i16, i16* %4938, align 2, !tbaa !382
  %4940 = insertelement <64 x i16> undef, i16 %4939, i32 0
  %4941 = extractelement <64 x i32> %4935, i32 1
  %4942 = sext i32 %4941 to i64
  %4943 = getelementptr inbounds i16, i16* %49, i64 %4942
  %4944 = load i16, i16* %4943, align 2, !tbaa !382
  %4945 = insertelement <64 x i16> %4940, i16 %4944, i32 1
  %4946 = extractelement <64 x i32> %4935, i32 2
  %4947 = sext i32 %4946 to i64
  %4948 = getelementptr inbounds i16, i16* %49, i64 %4947
  %4949 = load i16, i16* %4948, align 2, !tbaa !382
  %4950 = insertelement <64 x i16> %4945, i16 %4949, i32 2
  %4951 = extractelement <64 x i32> %4935, i32 3
  %4952 = sext i32 %4951 to i64
  %4953 = getelementptr inbounds i16, i16* %49, i64 %4952
  %4954 = load i16, i16* %4953, align 2, !tbaa !382
  %4955 = insertelement <64 x i16> %4950, i16 %4954, i32 3
  %4956 = extractelement <64 x i32> %4935, i32 4
  %4957 = sext i32 %4956 to i64
  %4958 = getelementptr inbounds i16, i16* %49, i64 %4957
  %4959 = load i16, i16* %4958, align 2, !tbaa !382
  %4960 = insertelement <64 x i16> %4955, i16 %4959, i32 4
  %4961 = extractelement <64 x i32> %4935, i32 5
  %4962 = sext i32 %4961 to i64
  %4963 = getelementptr inbounds i16, i16* %49, i64 %4962
  %4964 = load i16, i16* %4963, align 2, !tbaa !382
  %4965 = insertelement <64 x i16> %4960, i16 %4964, i32 5
  %4966 = extractelement <64 x i32> %4935, i32 6
  %4967 = sext i32 %4966 to i64
  %4968 = getelementptr inbounds i16, i16* %49, i64 %4967
  %4969 = load i16, i16* %4968, align 2, !tbaa !382
  %4970 = insertelement <64 x i16> %4965, i16 %4969, i32 6
  %4971 = extractelement <64 x i32> %4935, i32 7
  %4972 = sext i32 %4971 to i64
  %4973 = getelementptr inbounds i16, i16* %49, i64 %4972
  %4974 = load i16, i16* %4973, align 2, !tbaa !382
  %4975 = insertelement <64 x i16> %4970, i16 %4974, i32 7
  %4976 = extractelement <64 x i32> %4935, i32 8
  %4977 = sext i32 %4976 to i64
  %4978 = getelementptr inbounds i16, i16* %49, i64 %4977
  %4979 = load i16, i16* %4978, align 2, !tbaa !382
  %4980 = insertelement <64 x i16> %4975, i16 %4979, i32 8
  %4981 = extractelement <64 x i32> %4935, i32 9
  %4982 = sext i32 %4981 to i64
  %4983 = getelementptr inbounds i16, i16* %49, i64 %4982
  %4984 = load i16, i16* %4983, align 2, !tbaa !382
  %4985 = insertelement <64 x i16> %4980, i16 %4984, i32 9
  %4986 = extractelement <64 x i32> %4935, i32 10
  %4987 = sext i32 %4986 to i64
  %4988 = getelementptr inbounds i16, i16* %49, i64 %4987
  %4989 = load i16, i16* %4988, align 2, !tbaa !382
  %4990 = insertelement <64 x i16> %4985, i16 %4989, i32 10
  %4991 = extractelement <64 x i32> %4935, i32 11
  %4992 = sext i32 %4991 to i64
  %4993 = getelementptr inbounds i16, i16* %49, i64 %4992
  %4994 = load i16, i16* %4993, align 2, !tbaa !382
  %4995 = insertelement <64 x i16> %4990, i16 %4994, i32 11
  %4996 = extractelement <64 x i32> %4935, i32 12
  %4997 = sext i32 %4996 to i64
  %4998 = getelementptr inbounds i16, i16* %49, i64 %4997
  %4999 = load i16, i16* %4998, align 2, !tbaa !382
  %5000 = insertelement <64 x i16> %4995, i16 %4999, i32 12
  %5001 = extractelement <64 x i32> %4935, i32 13
  %5002 = sext i32 %5001 to i64
  %5003 = getelementptr inbounds i16, i16* %49, i64 %5002
  %5004 = load i16, i16* %5003, align 2, !tbaa !382
  %5005 = insertelement <64 x i16> %5000, i16 %5004, i32 13
  %5006 = extractelement <64 x i32> %4935, i32 14
  %5007 = sext i32 %5006 to i64
  %5008 = getelementptr inbounds i16, i16* %49, i64 %5007
  %5009 = load i16, i16* %5008, align 2, !tbaa !382
  %5010 = insertelement <64 x i16> %5005, i16 %5009, i32 14
  %5011 = extractelement <64 x i32> %4935, i32 15
  %5012 = sext i32 %5011 to i64
  %5013 = getelementptr inbounds i16, i16* %49, i64 %5012
  %5014 = load i16, i16* %5013, align 2, !tbaa !382
  %5015 = insertelement <64 x i16> %5010, i16 %5014, i32 15
  %5016 = extractelement <64 x i32> %4935, i32 16
  %5017 = sext i32 %5016 to i64
  %5018 = getelementptr inbounds i16, i16* %49, i64 %5017
  %5019 = load i16, i16* %5018, align 2, !tbaa !382
  %5020 = insertelement <64 x i16> %5015, i16 %5019, i32 16
  %5021 = extractelement <64 x i32> %4935, i32 17
  %5022 = sext i32 %5021 to i64
  %5023 = getelementptr inbounds i16, i16* %49, i64 %5022
  %5024 = load i16, i16* %5023, align 2, !tbaa !382
  %5025 = insertelement <64 x i16> %5020, i16 %5024, i32 17
  %5026 = extractelement <64 x i32> %4935, i32 18
  %5027 = sext i32 %5026 to i64
  %5028 = getelementptr inbounds i16, i16* %49, i64 %5027
  %5029 = load i16, i16* %5028, align 2, !tbaa !382
  %5030 = insertelement <64 x i16> %5025, i16 %5029, i32 18
  %5031 = extractelement <64 x i32> %4935, i32 19
  %5032 = sext i32 %5031 to i64
  %5033 = getelementptr inbounds i16, i16* %49, i64 %5032
  %5034 = load i16, i16* %5033, align 2, !tbaa !382
  %5035 = insertelement <64 x i16> %5030, i16 %5034, i32 19
  %5036 = extractelement <64 x i32> %4935, i32 20
  %5037 = sext i32 %5036 to i64
  %5038 = getelementptr inbounds i16, i16* %49, i64 %5037
  %5039 = load i16, i16* %5038, align 2, !tbaa !382
  %5040 = insertelement <64 x i16> %5035, i16 %5039, i32 20
  %5041 = extractelement <64 x i32> %4935, i32 21
  %5042 = sext i32 %5041 to i64
  %5043 = getelementptr inbounds i16, i16* %49, i64 %5042
  %5044 = load i16, i16* %5043, align 2, !tbaa !382
  %5045 = insertelement <64 x i16> %5040, i16 %5044, i32 21
  %5046 = extractelement <64 x i32> %4935, i32 22
  %5047 = sext i32 %5046 to i64
  %5048 = getelementptr inbounds i16, i16* %49, i64 %5047
  %5049 = load i16, i16* %5048, align 2, !tbaa !382
  %5050 = insertelement <64 x i16> %5045, i16 %5049, i32 22
  %5051 = extractelement <64 x i32> %4935, i32 23
  %5052 = sext i32 %5051 to i64
  %5053 = getelementptr inbounds i16, i16* %49, i64 %5052
  %5054 = load i16, i16* %5053, align 2, !tbaa !382
  %5055 = insertelement <64 x i16> %5050, i16 %5054, i32 23
  %5056 = extractelement <64 x i32> %4935, i32 24
  %5057 = sext i32 %5056 to i64
  %5058 = getelementptr inbounds i16, i16* %49, i64 %5057
  %5059 = load i16, i16* %5058, align 2, !tbaa !382
  %5060 = insertelement <64 x i16> %5055, i16 %5059, i32 24
  %5061 = extractelement <64 x i32> %4935, i32 25
  %5062 = sext i32 %5061 to i64
  %5063 = getelementptr inbounds i16, i16* %49, i64 %5062
  %5064 = load i16, i16* %5063, align 2, !tbaa !382
  %5065 = insertelement <64 x i16> %5060, i16 %5064, i32 25
  %5066 = extractelement <64 x i32> %4935, i32 26
  %5067 = sext i32 %5066 to i64
  %5068 = getelementptr inbounds i16, i16* %49, i64 %5067
  %5069 = load i16, i16* %5068, align 2, !tbaa !382
  %5070 = insertelement <64 x i16> %5065, i16 %5069, i32 26
  %5071 = extractelement <64 x i32> %4935, i32 27
  %5072 = sext i32 %5071 to i64
  %5073 = getelementptr inbounds i16, i16* %49, i64 %5072
  %5074 = load i16, i16* %5073, align 2, !tbaa !382
  %5075 = insertelement <64 x i16> %5070, i16 %5074, i32 27
  %5076 = extractelement <64 x i32> %4935, i32 28
  %5077 = sext i32 %5076 to i64
  %5078 = getelementptr inbounds i16, i16* %49, i64 %5077
  %5079 = load i16, i16* %5078, align 2, !tbaa !382
  %5080 = insertelement <64 x i16> %5075, i16 %5079, i32 28
  %5081 = extractelement <64 x i32> %4935, i32 29
  %5082 = sext i32 %5081 to i64
  %5083 = getelementptr inbounds i16, i16* %49, i64 %5082
  %5084 = load i16, i16* %5083, align 2, !tbaa !382
  %5085 = insertelement <64 x i16> %5080, i16 %5084, i32 29
  %5086 = extractelement <64 x i32> %4935, i32 30
  %5087 = sext i32 %5086 to i64
  %5088 = getelementptr inbounds i16, i16* %49, i64 %5087
  %5089 = load i16, i16* %5088, align 2, !tbaa !382
  %5090 = insertelement <64 x i16> %5085, i16 %5089, i32 30
  %5091 = extractelement <64 x i32> %4935, i32 31
  %5092 = sext i32 %5091 to i64
  %5093 = getelementptr inbounds i16, i16* %49, i64 %5092
  %5094 = load i16, i16* %5093, align 2, !tbaa !382
  %5095 = insertelement <64 x i16> %5090, i16 %5094, i32 31
  %5096 = extractelement <64 x i32> %4935, i32 32
  %5097 = sext i32 %5096 to i64
  %5098 = getelementptr inbounds i16, i16* %49, i64 %5097
  %5099 = load i16, i16* %5098, align 2, !tbaa !382
  %5100 = insertelement <64 x i16> %5095, i16 %5099, i32 32
  %5101 = extractelement <64 x i32> %4935, i32 33
  %5102 = sext i32 %5101 to i64
  %5103 = getelementptr inbounds i16, i16* %49, i64 %5102
  %5104 = load i16, i16* %5103, align 2, !tbaa !382
  %5105 = insertelement <64 x i16> %5100, i16 %5104, i32 33
  %5106 = extractelement <64 x i32> %4935, i32 34
  %5107 = sext i32 %5106 to i64
  %5108 = getelementptr inbounds i16, i16* %49, i64 %5107
  %5109 = load i16, i16* %5108, align 2, !tbaa !382
  %5110 = insertelement <64 x i16> %5105, i16 %5109, i32 34
  %5111 = extractelement <64 x i32> %4935, i32 35
  %5112 = sext i32 %5111 to i64
  %5113 = getelementptr inbounds i16, i16* %49, i64 %5112
  %5114 = load i16, i16* %5113, align 2, !tbaa !382
  %5115 = insertelement <64 x i16> %5110, i16 %5114, i32 35
  %5116 = extractelement <64 x i32> %4935, i32 36
  %5117 = sext i32 %5116 to i64
  %5118 = getelementptr inbounds i16, i16* %49, i64 %5117
  %5119 = load i16, i16* %5118, align 2, !tbaa !382
  %5120 = insertelement <64 x i16> %5115, i16 %5119, i32 36
  %5121 = extractelement <64 x i32> %4935, i32 37
  %5122 = sext i32 %5121 to i64
  %5123 = getelementptr inbounds i16, i16* %49, i64 %5122
  %5124 = load i16, i16* %5123, align 2, !tbaa !382
  %5125 = insertelement <64 x i16> %5120, i16 %5124, i32 37
  %5126 = extractelement <64 x i32> %4935, i32 38
  %5127 = sext i32 %5126 to i64
  %5128 = getelementptr inbounds i16, i16* %49, i64 %5127
  %5129 = load i16, i16* %5128, align 2, !tbaa !382
  %5130 = insertelement <64 x i16> %5125, i16 %5129, i32 38
  %5131 = extractelement <64 x i32> %4935, i32 39
  %5132 = sext i32 %5131 to i64
  %5133 = getelementptr inbounds i16, i16* %49, i64 %5132
  %5134 = load i16, i16* %5133, align 2, !tbaa !382
  %5135 = insertelement <64 x i16> %5130, i16 %5134, i32 39
  %5136 = extractelement <64 x i32> %4935, i32 40
  %5137 = sext i32 %5136 to i64
  %5138 = getelementptr inbounds i16, i16* %49, i64 %5137
  %5139 = load i16, i16* %5138, align 2, !tbaa !382
  %5140 = insertelement <64 x i16> %5135, i16 %5139, i32 40
  %5141 = extractelement <64 x i32> %4935, i32 41
  %5142 = sext i32 %5141 to i64
  %5143 = getelementptr inbounds i16, i16* %49, i64 %5142
  %5144 = load i16, i16* %5143, align 2, !tbaa !382
  %5145 = insertelement <64 x i16> %5140, i16 %5144, i32 41
  %5146 = extractelement <64 x i32> %4935, i32 42
  %5147 = sext i32 %5146 to i64
  %5148 = getelementptr inbounds i16, i16* %49, i64 %5147
  %5149 = load i16, i16* %5148, align 2, !tbaa !382
  %5150 = insertelement <64 x i16> %5145, i16 %5149, i32 42
  %5151 = extractelement <64 x i32> %4935, i32 43
  %5152 = sext i32 %5151 to i64
  %5153 = getelementptr inbounds i16, i16* %49, i64 %5152
  %5154 = load i16, i16* %5153, align 2, !tbaa !382
  %5155 = insertelement <64 x i16> %5150, i16 %5154, i32 43
  %5156 = extractelement <64 x i32> %4935, i32 44
  %5157 = sext i32 %5156 to i64
  %5158 = getelementptr inbounds i16, i16* %49, i64 %5157
  %5159 = load i16, i16* %5158, align 2, !tbaa !382
  %5160 = insertelement <64 x i16> %5155, i16 %5159, i32 44
  %5161 = extractelement <64 x i32> %4935, i32 45
  %5162 = sext i32 %5161 to i64
  %5163 = getelementptr inbounds i16, i16* %49, i64 %5162
  %5164 = load i16, i16* %5163, align 2, !tbaa !382
  %5165 = insertelement <64 x i16> %5160, i16 %5164, i32 45
  %5166 = extractelement <64 x i32> %4935, i32 46
  %5167 = sext i32 %5166 to i64
  %5168 = getelementptr inbounds i16, i16* %49, i64 %5167
  %5169 = load i16, i16* %5168, align 2, !tbaa !382
  %5170 = insertelement <64 x i16> %5165, i16 %5169, i32 46
  %5171 = extractelement <64 x i32> %4935, i32 47
  %5172 = sext i32 %5171 to i64
  %5173 = getelementptr inbounds i16, i16* %49, i64 %5172
  %5174 = load i16, i16* %5173, align 2, !tbaa !382
  %5175 = insertelement <64 x i16> %5170, i16 %5174, i32 47
  %5176 = extractelement <64 x i32> %4935, i32 48
  %5177 = sext i32 %5176 to i64
  %5178 = getelementptr inbounds i16, i16* %49, i64 %5177
  %5179 = load i16, i16* %5178, align 2, !tbaa !382
  %5180 = insertelement <64 x i16> %5175, i16 %5179, i32 48
  %5181 = extractelement <64 x i32> %4935, i32 49
  %5182 = sext i32 %5181 to i64
  %5183 = getelementptr inbounds i16, i16* %49, i64 %5182
  %5184 = load i16, i16* %5183, align 2, !tbaa !382
  %5185 = insertelement <64 x i16> %5180, i16 %5184, i32 49
  %5186 = extractelement <64 x i32> %4935, i32 50
  %5187 = sext i32 %5186 to i64
  %5188 = getelementptr inbounds i16, i16* %49, i64 %5187
  %5189 = load i16, i16* %5188, align 2, !tbaa !382
  %5190 = insertelement <64 x i16> %5185, i16 %5189, i32 50
  %5191 = extractelement <64 x i32> %4935, i32 51
  %5192 = sext i32 %5191 to i64
  %5193 = getelementptr inbounds i16, i16* %49, i64 %5192
  %5194 = load i16, i16* %5193, align 2, !tbaa !382
  %5195 = insertelement <64 x i16> %5190, i16 %5194, i32 51
  %5196 = extractelement <64 x i32> %4935, i32 52
  %5197 = sext i32 %5196 to i64
  %5198 = getelementptr inbounds i16, i16* %49, i64 %5197
  %5199 = load i16, i16* %5198, align 2, !tbaa !382
  %5200 = insertelement <64 x i16> %5195, i16 %5199, i32 52
  %5201 = extractelement <64 x i32> %4935, i32 53
  %5202 = sext i32 %5201 to i64
  %5203 = getelementptr inbounds i16, i16* %49, i64 %5202
  %5204 = load i16, i16* %5203, align 2, !tbaa !382
  %5205 = insertelement <64 x i16> %5200, i16 %5204, i32 53
  %5206 = extractelement <64 x i32> %4935, i32 54
  %5207 = sext i32 %5206 to i64
  %5208 = getelementptr inbounds i16, i16* %49, i64 %5207
  %5209 = load i16, i16* %5208, align 2, !tbaa !382
  %5210 = insertelement <64 x i16> %5205, i16 %5209, i32 54
  %5211 = extractelement <64 x i32> %4935, i32 55
  %5212 = sext i32 %5211 to i64
  %5213 = getelementptr inbounds i16, i16* %49, i64 %5212
  %5214 = load i16, i16* %5213, align 2, !tbaa !382
  %5215 = insertelement <64 x i16> %5210, i16 %5214, i32 55
  %5216 = extractelement <64 x i32> %4935, i32 56
  %5217 = sext i32 %5216 to i64
  %5218 = getelementptr inbounds i16, i16* %49, i64 %5217
  %5219 = load i16, i16* %5218, align 2, !tbaa !382
  %5220 = insertelement <64 x i16> %5215, i16 %5219, i32 56
  %5221 = extractelement <64 x i32> %4935, i32 57
  %5222 = sext i32 %5221 to i64
  %5223 = getelementptr inbounds i16, i16* %49, i64 %5222
  %5224 = load i16, i16* %5223, align 2, !tbaa !382
  %5225 = insertelement <64 x i16> %5220, i16 %5224, i32 57
  %5226 = extractelement <64 x i32> %4935, i32 58
  %5227 = sext i32 %5226 to i64
  %5228 = getelementptr inbounds i16, i16* %49, i64 %5227
  %5229 = load i16, i16* %5228, align 2, !tbaa !382
  %5230 = insertelement <64 x i16> %5225, i16 %5229, i32 58
  %5231 = extractelement <64 x i32> %4935, i32 59
  %5232 = sext i32 %5231 to i64
  %5233 = getelementptr inbounds i16, i16* %49, i64 %5232
  %5234 = load i16, i16* %5233, align 2, !tbaa !382
  %5235 = insertelement <64 x i16> %5230, i16 %5234, i32 59
  %5236 = extractelement <64 x i32> %4935, i32 60
  %5237 = sext i32 %5236 to i64
  %5238 = getelementptr inbounds i16, i16* %49, i64 %5237
  %5239 = load i16, i16* %5238, align 2, !tbaa !382
  %5240 = insertelement <64 x i16> %5235, i16 %5239, i32 60
  %5241 = extractelement <64 x i32> %4935, i32 61
  %5242 = sext i32 %5241 to i64
  %5243 = getelementptr inbounds i16, i16* %49, i64 %5242
  %5244 = load i16, i16* %5243, align 2, !tbaa !382
  %5245 = insertelement <64 x i16> %5240, i16 %5244, i32 61
  %5246 = extractelement <64 x i32> %4935, i32 62
  %5247 = sext i32 %5246 to i64
  %5248 = getelementptr inbounds i16, i16* %49, i64 %5247
  %5249 = load i16, i16* %5248, align 2, !tbaa !382
  %5250 = insertelement <64 x i16> %5245, i16 %5249, i32 62
  %5251 = extractelement <64 x i32> %4935, i32 63
  %5252 = sext i32 %5251 to i64
  %5253 = getelementptr inbounds i16, i16* %49, i64 %5252
  %5254 = load i16, i16* %5253, align 2, !tbaa !382
  %5255 = insertelement <64 x i16> %5250, i16 %5254, i32 63
  %5256 = add nsw i32 %blur_x.s0.x.v1.base.s5, -58
  %5257 = insertelement <64 x i32> undef, i32 %5256, i32 0
  %5258 = shufflevector <64 x i32> %5257, <64 x i32> undef, <64 x i32> zeroinitializer
  %5259 = add nsw <64 x i32> %5258, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5260 = shufflevector <64 x i32> %5259, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5261 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5260, <4 x i32> %48)
  %5262 = shufflevector <64 x i32> %5259, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5263 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5262, <4 x i32> %48)
  %5264 = shufflevector <64 x i32> %5259, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %5265 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5264, <4 x i32> %48)
  %5266 = shufflevector <64 x i32> %5259, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5267 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5266, <4 x i32> %48)
  %5268 = shufflevector <64 x i32> %5259, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %5269 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5268, <4 x i32> %48)
  %5270 = shufflevector <64 x i32> %5259, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %5271 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5270, <4 x i32> %48)
  %5272 = shufflevector <64 x i32> %5259, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %5273 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5272, <4 x i32> %48)
  %5274 = shufflevector <64 x i32> %5259, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %5275 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5274, <4 x i32> %48)
  %5276 = shufflevector <64 x i32> %5259, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %5277 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5276, <4 x i32> %48)
  %5278 = shufflevector <64 x i32> %5259, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %5279 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5278, <4 x i32> %48)
  %5280 = shufflevector <64 x i32> %5259, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %5281 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5280, <4 x i32> %48)
  %5282 = shufflevector <64 x i32> %5259, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %5283 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5282, <4 x i32> %48)
  %5284 = shufflevector <64 x i32> %5259, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %5285 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5284, <4 x i32> %48)
  %5286 = shufflevector <64 x i32> %5259, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %5287 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5286, <4 x i32> %48)
  %5288 = shufflevector <64 x i32> %5259, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %5289 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5288, <4 x i32> %48)
  %5290 = shufflevector <64 x i32> %5259, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %5291 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5290, <4 x i32> %48)
  %5292 = shufflevector <4 x i32> %5291, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %5293 = shufflevector <8 x i32> %5292, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %5294 = shufflevector <16 x i32> %5293, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %5295 = shufflevector <32 x i32> %5294, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %5296 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5261, <4 x i32> zeroinitializer)
  %5297 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5263, <4 x i32> zeroinitializer)
  %5298 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5265, <4 x i32> zeroinitializer)
  %5299 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5267, <4 x i32> zeroinitializer)
  %5300 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5269, <4 x i32> zeroinitializer)
  %5301 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5271, <4 x i32> zeroinitializer)
  %5302 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5273, <4 x i32> zeroinitializer)
  %5303 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5275, <4 x i32> zeroinitializer)
  %5304 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5277, <4 x i32> zeroinitializer)
  %5305 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5279, <4 x i32> zeroinitializer)
  %5306 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5281, <4 x i32> zeroinitializer)
  %5307 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5283, <4 x i32> zeroinitializer)
  %5308 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5285, <4 x i32> zeroinitializer)
  %5309 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5287, <4 x i32> zeroinitializer)
  %5310 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5289, <4 x i32> zeroinitializer)
  %5311 = shufflevector <64 x i32> %5295, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %5312 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5311, <4 x i32> zeroinitializer)
  %5313 = shufflevector <4 x i32> %5296, <4 x i32> %5297, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5314 = shufflevector <4 x i32> %5298, <4 x i32> %5299, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5315 = shufflevector <4 x i32> %5300, <4 x i32> %5301, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5316 = shufflevector <4 x i32> %5302, <4 x i32> %5303, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5317 = shufflevector <4 x i32> %5304, <4 x i32> %5305, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5318 = shufflevector <4 x i32> %5306, <4 x i32> %5307, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5319 = shufflevector <4 x i32> %5308, <4 x i32> %5309, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5320 = shufflevector <4 x i32> %5310, <4 x i32> %5312, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5321 = shufflevector <8 x i32> %5313, <8 x i32> %5314, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5322 = shufflevector <8 x i32> %5315, <8 x i32> %5316, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5323 = shufflevector <8 x i32> %5317, <8 x i32> %5318, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5324 = shufflevector <8 x i32> %5319, <8 x i32> %5320, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5325 = shufflevector <16 x i32> %5321, <16 x i32> %5322, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5326 = shufflevector <16 x i32> %5323, <16 x i32> %5324, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5327 = shufflevector <32 x i32> %5325, <32 x i32> %5326, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5328 = add nsw <64 x i32> %5327, %t252
  %5329 = extractelement <64 x i32> %5328, i32 0
  %5330 = sext i32 %5329 to i64
  %5331 = getelementptr inbounds i16, i16* %49, i64 %5330
  %5332 = load i16, i16* %5331, align 2, !tbaa !382
  %5333 = insertelement <64 x i16> undef, i16 %5332, i32 0
  %5334 = extractelement <64 x i32> %5328, i32 1
  %5335 = sext i32 %5334 to i64
  %5336 = getelementptr inbounds i16, i16* %49, i64 %5335
  %5337 = load i16, i16* %5336, align 2, !tbaa !382
  %5338 = insertelement <64 x i16> %5333, i16 %5337, i32 1
  %5339 = extractelement <64 x i32> %5328, i32 2
  %5340 = sext i32 %5339 to i64
  %5341 = getelementptr inbounds i16, i16* %49, i64 %5340
  %5342 = load i16, i16* %5341, align 2, !tbaa !382
  %5343 = insertelement <64 x i16> %5338, i16 %5342, i32 2
  %5344 = extractelement <64 x i32> %5328, i32 3
  %5345 = sext i32 %5344 to i64
  %5346 = getelementptr inbounds i16, i16* %49, i64 %5345
  %5347 = load i16, i16* %5346, align 2, !tbaa !382
  %5348 = insertelement <64 x i16> %5343, i16 %5347, i32 3
  %5349 = extractelement <64 x i32> %5328, i32 4
  %5350 = sext i32 %5349 to i64
  %5351 = getelementptr inbounds i16, i16* %49, i64 %5350
  %5352 = load i16, i16* %5351, align 2, !tbaa !382
  %5353 = insertelement <64 x i16> %5348, i16 %5352, i32 4
  %5354 = extractelement <64 x i32> %5328, i32 5
  %5355 = sext i32 %5354 to i64
  %5356 = getelementptr inbounds i16, i16* %49, i64 %5355
  %5357 = load i16, i16* %5356, align 2, !tbaa !382
  %5358 = insertelement <64 x i16> %5353, i16 %5357, i32 5
  %5359 = extractelement <64 x i32> %5328, i32 6
  %5360 = sext i32 %5359 to i64
  %5361 = getelementptr inbounds i16, i16* %49, i64 %5360
  %5362 = load i16, i16* %5361, align 2, !tbaa !382
  %5363 = insertelement <64 x i16> %5358, i16 %5362, i32 6
  %5364 = extractelement <64 x i32> %5328, i32 7
  %5365 = sext i32 %5364 to i64
  %5366 = getelementptr inbounds i16, i16* %49, i64 %5365
  %5367 = load i16, i16* %5366, align 2, !tbaa !382
  %5368 = insertelement <64 x i16> %5363, i16 %5367, i32 7
  %5369 = extractelement <64 x i32> %5328, i32 8
  %5370 = sext i32 %5369 to i64
  %5371 = getelementptr inbounds i16, i16* %49, i64 %5370
  %5372 = load i16, i16* %5371, align 2, !tbaa !382
  %5373 = insertelement <64 x i16> %5368, i16 %5372, i32 8
  %5374 = extractelement <64 x i32> %5328, i32 9
  %5375 = sext i32 %5374 to i64
  %5376 = getelementptr inbounds i16, i16* %49, i64 %5375
  %5377 = load i16, i16* %5376, align 2, !tbaa !382
  %5378 = insertelement <64 x i16> %5373, i16 %5377, i32 9
  %5379 = extractelement <64 x i32> %5328, i32 10
  %5380 = sext i32 %5379 to i64
  %5381 = getelementptr inbounds i16, i16* %49, i64 %5380
  %5382 = load i16, i16* %5381, align 2, !tbaa !382
  %5383 = insertelement <64 x i16> %5378, i16 %5382, i32 10
  %5384 = extractelement <64 x i32> %5328, i32 11
  %5385 = sext i32 %5384 to i64
  %5386 = getelementptr inbounds i16, i16* %49, i64 %5385
  %5387 = load i16, i16* %5386, align 2, !tbaa !382
  %5388 = insertelement <64 x i16> %5383, i16 %5387, i32 11
  %5389 = extractelement <64 x i32> %5328, i32 12
  %5390 = sext i32 %5389 to i64
  %5391 = getelementptr inbounds i16, i16* %49, i64 %5390
  %5392 = load i16, i16* %5391, align 2, !tbaa !382
  %5393 = insertelement <64 x i16> %5388, i16 %5392, i32 12
  %5394 = extractelement <64 x i32> %5328, i32 13
  %5395 = sext i32 %5394 to i64
  %5396 = getelementptr inbounds i16, i16* %49, i64 %5395
  %5397 = load i16, i16* %5396, align 2, !tbaa !382
  %5398 = insertelement <64 x i16> %5393, i16 %5397, i32 13
  %5399 = extractelement <64 x i32> %5328, i32 14
  %5400 = sext i32 %5399 to i64
  %5401 = getelementptr inbounds i16, i16* %49, i64 %5400
  %5402 = load i16, i16* %5401, align 2, !tbaa !382
  %5403 = insertelement <64 x i16> %5398, i16 %5402, i32 14
  %5404 = extractelement <64 x i32> %5328, i32 15
  %5405 = sext i32 %5404 to i64
  %5406 = getelementptr inbounds i16, i16* %49, i64 %5405
  %5407 = load i16, i16* %5406, align 2, !tbaa !382
  %5408 = insertelement <64 x i16> %5403, i16 %5407, i32 15
  %5409 = extractelement <64 x i32> %5328, i32 16
  %5410 = sext i32 %5409 to i64
  %5411 = getelementptr inbounds i16, i16* %49, i64 %5410
  %5412 = load i16, i16* %5411, align 2, !tbaa !382
  %5413 = insertelement <64 x i16> %5408, i16 %5412, i32 16
  %5414 = extractelement <64 x i32> %5328, i32 17
  %5415 = sext i32 %5414 to i64
  %5416 = getelementptr inbounds i16, i16* %49, i64 %5415
  %5417 = load i16, i16* %5416, align 2, !tbaa !382
  %5418 = insertelement <64 x i16> %5413, i16 %5417, i32 17
  %5419 = extractelement <64 x i32> %5328, i32 18
  %5420 = sext i32 %5419 to i64
  %5421 = getelementptr inbounds i16, i16* %49, i64 %5420
  %5422 = load i16, i16* %5421, align 2, !tbaa !382
  %5423 = insertelement <64 x i16> %5418, i16 %5422, i32 18
  %5424 = extractelement <64 x i32> %5328, i32 19
  %5425 = sext i32 %5424 to i64
  %5426 = getelementptr inbounds i16, i16* %49, i64 %5425
  %5427 = load i16, i16* %5426, align 2, !tbaa !382
  %5428 = insertelement <64 x i16> %5423, i16 %5427, i32 19
  %5429 = extractelement <64 x i32> %5328, i32 20
  %5430 = sext i32 %5429 to i64
  %5431 = getelementptr inbounds i16, i16* %49, i64 %5430
  %5432 = load i16, i16* %5431, align 2, !tbaa !382
  %5433 = insertelement <64 x i16> %5428, i16 %5432, i32 20
  %5434 = extractelement <64 x i32> %5328, i32 21
  %5435 = sext i32 %5434 to i64
  %5436 = getelementptr inbounds i16, i16* %49, i64 %5435
  %5437 = load i16, i16* %5436, align 2, !tbaa !382
  %5438 = insertelement <64 x i16> %5433, i16 %5437, i32 21
  %5439 = extractelement <64 x i32> %5328, i32 22
  %5440 = sext i32 %5439 to i64
  %5441 = getelementptr inbounds i16, i16* %49, i64 %5440
  %5442 = load i16, i16* %5441, align 2, !tbaa !382
  %5443 = insertelement <64 x i16> %5438, i16 %5442, i32 22
  %5444 = extractelement <64 x i32> %5328, i32 23
  %5445 = sext i32 %5444 to i64
  %5446 = getelementptr inbounds i16, i16* %49, i64 %5445
  %5447 = load i16, i16* %5446, align 2, !tbaa !382
  %5448 = insertelement <64 x i16> %5443, i16 %5447, i32 23
  %5449 = extractelement <64 x i32> %5328, i32 24
  %5450 = sext i32 %5449 to i64
  %5451 = getelementptr inbounds i16, i16* %49, i64 %5450
  %5452 = load i16, i16* %5451, align 2, !tbaa !382
  %5453 = insertelement <64 x i16> %5448, i16 %5452, i32 24
  %5454 = extractelement <64 x i32> %5328, i32 25
  %5455 = sext i32 %5454 to i64
  %5456 = getelementptr inbounds i16, i16* %49, i64 %5455
  %5457 = load i16, i16* %5456, align 2, !tbaa !382
  %5458 = insertelement <64 x i16> %5453, i16 %5457, i32 25
  %5459 = extractelement <64 x i32> %5328, i32 26
  %5460 = sext i32 %5459 to i64
  %5461 = getelementptr inbounds i16, i16* %49, i64 %5460
  %5462 = load i16, i16* %5461, align 2, !tbaa !382
  %5463 = insertelement <64 x i16> %5458, i16 %5462, i32 26
  %5464 = extractelement <64 x i32> %5328, i32 27
  %5465 = sext i32 %5464 to i64
  %5466 = getelementptr inbounds i16, i16* %49, i64 %5465
  %5467 = load i16, i16* %5466, align 2, !tbaa !382
  %5468 = insertelement <64 x i16> %5463, i16 %5467, i32 27
  %5469 = extractelement <64 x i32> %5328, i32 28
  %5470 = sext i32 %5469 to i64
  %5471 = getelementptr inbounds i16, i16* %49, i64 %5470
  %5472 = load i16, i16* %5471, align 2, !tbaa !382
  %5473 = insertelement <64 x i16> %5468, i16 %5472, i32 28
  %5474 = extractelement <64 x i32> %5328, i32 29
  %5475 = sext i32 %5474 to i64
  %5476 = getelementptr inbounds i16, i16* %49, i64 %5475
  %5477 = load i16, i16* %5476, align 2, !tbaa !382
  %5478 = insertelement <64 x i16> %5473, i16 %5477, i32 29
  %5479 = extractelement <64 x i32> %5328, i32 30
  %5480 = sext i32 %5479 to i64
  %5481 = getelementptr inbounds i16, i16* %49, i64 %5480
  %5482 = load i16, i16* %5481, align 2, !tbaa !382
  %5483 = insertelement <64 x i16> %5478, i16 %5482, i32 30
  %5484 = extractelement <64 x i32> %5328, i32 31
  %5485 = sext i32 %5484 to i64
  %5486 = getelementptr inbounds i16, i16* %49, i64 %5485
  %5487 = load i16, i16* %5486, align 2, !tbaa !382
  %5488 = insertelement <64 x i16> %5483, i16 %5487, i32 31
  %5489 = extractelement <64 x i32> %5328, i32 32
  %5490 = sext i32 %5489 to i64
  %5491 = getelementptr inbounds i16, i16* %49, i64 %5490
  %5492 = load i16, i16* %5491, align 2, !tbaa !382
  %5493 = insertelement <64 x i16> %5488, i16 %5492, i32 32
  %5494 = extractelement <64 x i32> %5328, i32 33
  %5495 = sext i32 %5494 to i64
  %5496 = getelementptr inbounds i16, i16* %49, i64 %5495
  %5497 = load i16, i16* %5496, align 2, !tbaa !382
  %5498 = insertelement <64 x i16> %5493, i16 %5497, i32 33
  %5499 = extractelement <64 x i32> %5328, i32 34
  %5500 = sext i32 %5499 to i64
  %5501 = getelementptr inbounds i16, i16* %49, i64 %5500
  %5502 = load i16, i16* %5501, align 2, !tbaa !382
  %5503 = insertelement <64 x i16> %5498, i16 %5502, i32 34
  %5504 = extractelement <64 x i32> %5328, i32 35
  %5505 = sext i32 %5504 to i64
  %5506 = getelementptr inbounds i16, i16* %49, i64 %5505
  %5507 = load i16, i16* %5506, align 2, !tbaa !382
  %5508 = insertelement <64 x i16> %5503, i16 %5507, i32 35
  %5509 = extractelement <64 x i32> %5328, i32 36
  %5510 = sext i32 %5509 to i64
  %5511 = getelementptr inbounds i16, i16* %49, i64 %5510
  %5512 = load i16, i16* %5511, align 2, !tbaa !382
  %5513 = insertelement <64 x i16> %5508, i16 %5512, i32 36
  %5514 = extractelement <64 x i32> %5328, i32 37
  %5515 = sext i32 %5514 to i64
  %5516 = getelementptr inbounds i16, i16* %49, i64 %5515
  %5517 = load i16, i16* %5516, align 2, !tbaa !382
  %5518 = insertelement <64 x i16> %5513, i16 %5517, i32 37
  %5519 = extractelement <64 x i32> %5328, i32 38
  %5520 = sext i32 %5519 to i64
  %5521 = getelementptr inbounds i16, i16* %49, i64 %5520
  %5522 = load i16, i16* %5521, align 2, !tbaa !382
  %5523 = insertelement <64 x i16> %5518, i16 %5522, i32 38
  %5524 = extractelement <64 x i32> %5328, i32 39
  %5525 = sext i32 %5524 to i64
  %5526 = getelementptr inbounds i16, i16* %49, i64 %5525
  %5527 = load i16, i16* %5526, align 2, !tbaa !382
  %5528 = insertelement <64 x i16> %5523, i16 %5527, i32 39
  %5529 = extractelement <64 x i32> %5328, i32 40
  %5530 = sext i32 %5529 to i64
  %5531 = getelementptr inbounds i16, i16* %49, i64 %5530
  %5532 = load i16, i16* %5531, align 2, !tbaa !382
  %5533 = insertelement <64 x i16> %5528, i16 %5532, i32 40
  %5534 = extractelement <64 x i32> %5328, i32 41
  %5535 = sext i32 %5534 to i64
  %5536 = getelementptr inbounds i16, i16* %49, i64 %5535
  %5537 = load i16, i16* %5536, align 2, !tbaa !382
  %5538 = insertelement <64 x i16> %5533, i16 %5537, i32 41
  %5539 = extractelement <64 x i32> %5328, i32 42
  %5540 = sext i32 %5539 to i64
  %5541 = getelementptr inbounds i16, i16* %49, i64 %5540
  %5542 = load i16, i16* %5541, align 2, !tbaa !382
  %5543 = insertelement <64 x i16> %5538, i16 %5542, i32 42
  %5544 = extractelement <64 x i32> %5328, i32 43
  %5545 = sext i32 %5544 to i64
  %5546 = getelementptr inbounds i16, i16* %49, i64 %5545
  %5547 = load i16, i16* %5546, align 2, !tbaa !382
  %5548 = insertelement <64 x i16> %5543, i16 %5547, i32 43
  %5549 = extractelement <64 x i32> %5328, i32 44
  %5550 = sext i32 %5549 to i64
  %5551 = getelementptr inbounds i16, i16* %49, i64 %5550
  %5552 = load i16, i16* %5551, align 2, !tbaa !382
  %5553 = insertelement <64 x i16> %5548, i16 %5552, i32 44
  %5554 = extractelement <64 x i32> %5328, i32 45
  %5555 = sext i32 %5554 to i64
  %5556 = getelementptr inbounds i16, i16* %49, i64 %5555
  %5557 = load i16, i16* %5556, align 2, !tbaa !382
  %5558 = insertelement <64 x i16> %5553, i16 %5557, i32 45
  %5559 = extractelement <64 x i32> %5328, i32 46
  %5560 = sext i32 %5559 to i64
  %5561 = getelementptr inbounds i16, i16* %49, i64 %5560
  %5562 = load i16, i16* %5561, align 2, !tbaa !382
  %5563 = insertelement <64 x i16> %5558, i16 %5562, i32 46
  %5564 = extractelement <64 x i32> %5328, i32 47
  %5565 = sext i32 %5564 to i64
  %5566 = getelementptr inbounds i16, i16* %49, i64 %5565
  %5567 = load i16, i16* %5566, align 2, !tbaa !382
  %5568 = insertelement <64 x i16> %5563, i16 %5567, i32 47
  %5569 = extractelement <64 x i32> %5328, i32 48
  %5570 = sext i32 %5569 to i64
  %5571 = getelementptr inbounds i16, i16* %49, i64 %5570
  %5572 = load i16, i16* %5571, align 2, !tbaa !382
  %5573 = insertelement <64 x i16> %5568, i16 %5572, i32 48
  %5574 = extractelement <64 x i32> %5328, i32 49
  %5575 = sext i32 %5574 to i64
  %5576 = getelementptr inbounds i16, i16* %49, i64 %5575
  %5577 = load i16, i16* %5576, align 2, !tbaa !382
  %5578 = insertelement <64 x i16> %5573, i16 %5577, i32 49
  %5579 = extractelement <64 x i32> %5328, i32 50
  %5580 = sext i32 %5579 to i64
  %5581 = getelementptr inbounds i16, i16* %49, i64 %5580
  %5582 = load i16, i16* %5581, align 2, !tbaa !382
  %5583 = insertelement <64 x i16> %5578, i16 %5582, i32 50
  %5584 = extractelement <64 x i32> %5328, i32 51
  %5585 = sext i32 %5584 to i64
  %5586 = getelementptr inbounds i16, i16* %49, i64 %5585
  %5587 = load i16, i16* %5586, align 2, !tbaa !382
  %5588 = insertelement <64 x i16> %5583, i16 %5587, i32 51
  %5589 = extractelement <64 x i32> %5328, i32 52
  %5590 = sext i32 %5589 to i64
  %5591 = getelementptr inbounds i16, i16* %49, i64 %5590
  %5592 = load i16, i16* %5591, align 2, !tbaa !382
  %5593 = insertelement <64 x i16> %5588, i16 %5592, i32 52
  %5594 = extractelement <64 x i32> %5328, i32 53
  %5595 = sext i32 %5594 to i64
  %5596 = getelementptr inbounds i16, i16* %49, i64 %5595
  %5597 = load i16, i16* %5596, align 2, !tbaa !382
  %5598 = insertelement <64 x i16> %5593, i16 %5597, i32 53
  %5599 = extractelement <64 x i32> %5328, i32 54
  %5600 = sext i32 %5599 to i64
  %5601 = getelementptr inbounds i16, i16* %49, i64 %5600
  %5602 = load i16, i16* %5601, align 2, !tbaa !382
  %5603 = insertelement <64 x i16> %5598, i16 %5602, i32 54
  %5604 = extractelement <64 x i32> %5328, i32 55
  %5605 = sext i32 %5604 to i64
  %5606 = getelementptr inbounds i16, i16* %49, i64 %5605
  %5607 = load i16, i16* %5606, align 2, !tbaa !382
  %5608 = insertelement <64 x i16> %5603, i16 %5607, i32 55
  %5609 = extractelement <64 x i32> %5328, i32 56
  %5610 = sext i32 %5609 to i64
  %5611 = getelementptr inbounds i16, i16* %49, i64 %5610
  %5612 = load i16, i16* %5611, align 2, !tbaa !382
  %5613 = insertelement <64 x i16> %5608, i16 %5612, i32 56
  %5614 = extractelement <64 x i32> %5328, i32 57
  %5615 = sext i32 %5614 to i64
  %5616 = getelementptr inbounds i16, i16* %49, i64 %5615
  %5617 = load i16, i16* %5616, align 2, !tbaa !382
  %5618 = insertelement <64 x i16> %5613, i16 %5617, i32 57
  %5619 = extractelement <64 x i32> %5328, i32 58
  %5620 = sext i32 %5619 to i64
  %5621 = getelementptr inbounds i16, i16* %49, i64 %5620
  %5622 = load i16, i16* %5621, align 2, !tbaa !382
  %5623 = insertelement <64 x i16> %5618, i16 %5622, i32 58
  %5624 = extractelement <64 x i32> %5328, i32 59
  %5625 = sext i32 %5624 to i64
  %5626 = getelementptr inbounds i16, i16* %49, i64 %5625
  %5627 = load i16, i16* %5626, align 2, !tbaa !382
  %5628 = insertelement <64 x i16> %5623, i16 %5627, i32 59
  %5629 = extractelement <64 x i32> %5328, i32 60
  %5630 = sext i32 %5629 to i64
  %5631 = getelementptr inbounds i16, i16* %49, i64 %5630
  %5632 = load i16, i16* %5631, align 2, !tbaa !382
  %5633 = insertelement <64 x i16> %5628, i16 %5632, i32 60
  %5634 = extractelement <64 x i32> %5328, i32 61
  %5635 = sext i32 %5634 to i64
  %5636 = getelementptr inbounds i16, i16* %49, i64 %5635
  %5637 = load i16, i16* %5636, align 2, !tbaa !382
  %5638 = insertelement <64 x i16> %5633, i16 %5637, i32 61
  %5639 = extractelement <64 x i32> %5328, i32 62
  %5640 = sext i32 %5639 to i64
  %5641 = getelementptr inbounds i16, i16* %49, i64 %5640
  %5642 = load i16, i16* %5641, align 2, !tbaa !382
  %5643 = insertelement <64 x i16> %5638, i16 %5642, i32 62
  %5644 = extractelement <64 x i32> %5328, i32 63
  %5645 = sext i32 %5644 to i64
  %5646 = getelementptr inbounds i16, i16* %49, i64 %5645
  %5647 = load i16, i16* %5646, align 2, !tbaa !382
  %5648 = insertelement <64 x i16> %5643, i16 %5647, i32 63
  %5649 = add nsw i32 %blur_x.s0.x.v1.base.s5, -59
  %5650 = insertelement <64 x i32> undef, i32 %5649, i32 0
  %5651 = shufflevector <64 x i32> %5650, <64 x i32> undef, <64 x i32> zeroinitializer
  %5652 = add nsw <64 x i32> %5651, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5653 = shufflevector <64 x i32> %5652, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5654 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5653, <4 x i32> %48)
  %5655 = shufflevector <64 x i32> %5652, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5656 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5655, <4 x i32> %48)
  %5657 = shufflevector <64 x i32> %5652, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %5658 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5657, <4 x i32> %48)
  %5659 = shufflevector <64 x i32> %5652, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5660 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5659, <4 x i32> %48)
  %5661 = shufflevector <64 x i32> %5652, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %5662 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5661, <4 x i32> %48)
  %5663 = shufflevector <64 x i32> %5652, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %5664 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5663, <4 x i32> %48)
  %5665 = shufflevector <64 x i32> %5652, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %5666 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5665, <4 x i32> %48)
  %5667 = shufflevector <64 x i32> %5652, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %5668 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5667, <4 x i32> %48)
  %5669 = shufflevector <64 x i32> %5652, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %5670 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5669, <4 x i32> %48)
  %5671 = shufflevector <64 x i32> %5652, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %5672 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5671, <4 x i32> %48)
  %5673 = shufflevector <64 x i32> %5652, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %5674 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5673, <4 x i32> %48)
  %5675 = shufflevector <64 x i32> %5652, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %5676 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5675, <4 x i32> %48)
  %5677 = shufflevector <64 x i32> %5652, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %5678 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5677, <4 x i32> %48)
  %5679 = shufflevector <64 x i32> %5652, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %5680 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5679, <4 x i32> %48)
  %5681 = shufflevector <64 x i32> %5652, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %5682 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5681, <4 x i32> %48)
  %5683 = shufflevector <64 x i32> %5652, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %5684 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5683, <4 x i32> %48)
  %5685 = shufflevector <4 x i32> %5684, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %5686 = shufflevector <8 x i32> %5685, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %5687 = shufflevector <16 x i32> %5686, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %5688 = shufflevector <32 x i32> %5687, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %5689 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5654, <4 x i32> zeroinitializer)
  %5690 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5656, <4 x i32> zeroinitializer)
  %5691 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5658, <4 x i32> zeroinitializer)
  %5692 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5660, <4 x i32> zeroinitializer)
  %5693 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5662, <4 x i32> zeroinitializer)
  %5694 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5664, <4 x i32> zeroinitializer)
  %5695 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5666, <4 x i32> zeroinitializer)
  %5696 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5668, <4 x i32> zeroinitializer)
  %5697 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5670, <4 x i32> zeroinitializer)
  %5698 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5672, <4 x i32> zeroinitializer)
  %5699 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5674, <4 x i32> zeroinitializer)
  %5700 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5676, <4 x i32> zeroinitializer)
  %5701 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5678, <4 x i32> zeroinitializer)
  %5702 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5680, <4 x i32> zeroinitializer)
  %5703 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5682, <4 x i32> zeroinitializer)
  %5704 = shufflevector <64 x i32> %5688, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %5705 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5704, <4 x i32> zeroinitializer)
  %5706 = shufflevector <4 x i32> %5689, <4 x i32> %5690, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5707 = shufflevector <4 x i32> %5691, <4 x i32> %5692, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5708 = shufflevector <4 x i32> %5693, <4 x i32> %5694, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5709 = shufflevector <4 x i32> %5695, <4 x i32> %5696, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5710 = shufflevector <4 x i32> %5697, <4 x i32> %5698, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5711 = shufflevector <4 x i32> %5699, <4 x i32> %5700, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5712 = shufflevector <4 x i32> %5701, <4 x i32> %5702, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5713 = shufflevector <4 x i32> %5703, <4 x i32> %5705, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5714 = shufflevector <8 x i32> %5706, <8 x i32> %5707, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5715 = shufflevector <8 x i32> %5708, <8 x i32> %5709, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5716 = shufflevector <8 x i32> %5710, <8 x i32> %5711, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5717 = shufflevector <8 x i32> %5712, <8 x i32> %5713, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5718 = shufflevector <16 x i32> %5714, <16 x i32> %5715, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5719 = shufflevector <16 x i32> %5716, <16 x i32> %5717, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5720 = shufflevector <32 x i32> %5718, <32 x i32> %5719, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5721 = add nsw <64 x i32> %5720, %t252
  %5722 = extractelement <64 x i32> %5721, i32 0
  %5723 = sext i32 %5722 to i64
  %5724 = getelementptr inbounds i16, i16* %49, i64 %5723
  %5725 = load i16, i16* %5724, align 2, !tbaa !382
  %5726 = insertelement <64 x i16> undef, i16 %5725, i32 0
  %5727 = extractelement <64 x i32> %5721, i32 1
  %5728 = sext i32 %5727 to i64
  %5729 = getelementptr inbounds i16, i16* %49, i64 %5728
  %5730 = load i16, i16* %5729, align 2, !tbaa !382
  %5731 = insertelement <64 x i16> %5726, i16 %5730, i32 1
  %5732 = extractelement <64 x i32> %5721, i32 2
  %5733 = sext i32 %5732 to i64
  %5734 = getelementptr inbounds i16, i16* %49, i64 %5733
  %5735 = load i16, i16* %5734, align 2, !tbaa !382
  %5736 = insertelement <64 x i16> %5731, i16 %5735, i32 2
  %5737 = extractelement <64 x i32> %5721, i32 3
  %5738 = sext i32 %5737 to i64
  %5739 = getelementptr inbounds i16, i16* %49, i64 %5738
  %5740 = load i16, i16* %5739, align 2, !tbaa !382
  %5741 = insertelement <64 x i16> %5736, i16 %5740, i32 3
  %5742 = extractelement <64 x i32> %5721, i32 4
  %5743 = sext i32 %5742 to i64
  %5744 = getelementptr inbounds i16, i16* %49, i64 %5743
  %5745 = load i16, i16* %5744, align 2, !tbaa !382
  %5746 = insertelement <64 x i16> %5741, i16 %5745, i32 4
  %5747 = extractelement <64 x i32> %5721, i32 5
  %5748 = sext i32 %5747 to i64
  %5749 = getelementptr inbounds i16, i16* %49, i64 %5748
  %5750 = load i16, i16* %5749, align 2, !tbaa !382
  %5751 = insertelement <64 x i16> %5746, i16 %5750, i32 5
  %5752 = extractelement <64 x i32> %5721, i32 6
  %5753 = sext i32 %5752 to i64
  %5754 = getelementptr inbounds i16, i16* %49, i64 %5753
  %5755 = load i16, i16* %5754, align 2, !tbaa !382
  %5756 = insertelement <64 x i16> %5751, i16 %5755, i32 6
  %5757 = extractelement <64 x i32> %5721, i32 7
  %5758 = sext i32 %5757 to i64
  %5759 = getelementptr inbounds i16, i16* %49, i64 %5758
  %5760 = load i16, i16* %5759, align 2, !tbaa !382
  %5761 = insertelement <64 x i16> %5756, i16 %5760, i32 7
  %5762 = extractelement <64 x i32> %5721, i32 8
  %5763 = sext i32 %5762 to i64
  %5764 = getelementptr inbounds i16, i16* %49, i64 %5763
  %5765 = load i16, i16* %5764, align 2, !tbaa !382
  %5766 = insertelement <64 x i16> %5761, i16 %5765, i32 8
  %5767 = extractelement <64 x i32> %5721, i32 9
  %5768 = sext i32 %5767 to i64
  %5769 = getelementptr inbounds i16, i16* %49, i64 %5768
  %5770 = load i16, i16* %5769, align 2, !tbaa !382
  %5771 = insertelement <64 x i16> %5766, i16 %5770, i32 9
  %5772 = extractelement <64 x i32> %5721, i32 10
  %5773 = sext i32 %5772 to i64
  %5774 = getelementptr inbounds i16, i16* %49, i64 %5773
  %5775 = load i16, i16* %5774, align 2, !tbaa !382
  %5776 = insertelement <64 x i16> %5771, i16 %5775, i32 10
  %5777 = extractelement <64 x i32> %5721, i32 11
  %5778 = sext i32 %5777 to i64
  %5779 = getelementptr inbounds i16, i16* %49, i64 %5778
  %5780 = load i16, i16* %5779, align 2, !tbaa !382
  %5781 = insertelement <64 x i16> %5776, i16 %5780, i32 11
  %5782 = extractelement <64 x i32> %5721, i32 12
  %5783 = sext i32 %5782 to i64
  %5784 = getelementptr inbounds i16, i16* %49, i64 %5783
  %5785 = load i16, i16* %5784, align 2, !tbaa !382
  %5786 = insertelement <64 x i16> %5781, i16 %5785, i32 12
  %5787 = extractelement <64 x i32> %5721, i32 13
  %5788 = sext i32 %5787 to i64
  %5789 = getelementptr inbounds i16, i16* %49, i64 %5788
  %5790 = load i16, i16* %5789, align 2, !tbaa !382
  %5791 = insertelement <64 x i16> %5786, i16 %5790, i32 13
  %5792 = extractelement <64 x i32> %5721, i32 14
  %5793 = sext i32 %5792 to i64
  %5794 = getelementptr inbounds i16, i16* %49, i64 %5793
  %5795 = load i16, i16* %5794, align 2, !tbaa !382
  %5796 = insertelement <64 x i16> %5791, i16 %5795, i32 14
  %5797 = extractelement <64 x i32> %5721, i32 15
  %5798 = sext i32 %5797 to i64
  %5799 = getelementptr inbounds i16, i16* %49, i64 %5798
  %5800 = load i16, i16* %5799, align 2, !tbaa !382
  %5801 = insertelement <64 x i16> %5796, i16 %5800, i32 15
  %5802 = extractelement <64 x i32> %5721, i32 16
  %5803 = sext i32 %5802 to i64
  %5804 = getelementptr inbounds i16, i16* %49, i64 %5803
  %5805 = load i16, i16* %5804, align 2, !tbaa !382
  %5806 = insertelement <64 x i16> %5801, i16 %5805, i32 16
  %5807 = extractelement <64 x i32> %5721, i32 17
  %5808 = sext i32 %5807 to i64
  %5809 = getelementptr inbounds i16, i16* %49, i64 %5808
  %5810 = load i16, i16* %5809, align 2, !tbaa !382
  %5811 = insertelement <64 x i16> %5806, i16 %5810, i32 17
  %5812 = extractelement <64 x i32> %5721, i32 18
  %5813 = sext i32 %5812 to i64
  %5814 = getelementptr inbounds i16, i16* %49, i64 %5813
  %5815 = load i16, i16* %5814, align 2, !tbaa !382
  %5816 = insertelement <64 x i16> %5811, i16 %5815, i32 18
  %5817 = extractelement <64 x i32> %5721, i32 19
  %5818 = sext i32 %5817 to i64
  %5819 = getelementptr inbounds i16, i16* %49, i64 %5818
  %5820 = load i16, i16* %5819, align 2, !tbaa !382
  %5821 = insertelement <64 x i16> %5816, i16 %5820, i32 19
  %5822 = extractelement <64 x i32> %5721, i32 20
  %5823 = sext i32 %5822 to i64
  %5824 = getelementptr inbounds i16, i16* %49, i64 %5823
  %5825 = load i16, i16* %5824, align 2, !tbaa !382
  %5826 = insertelement <64 x i16> %5821, i16 %5825, i32 20
  %5827 = extractelement <64 x i32> %5721, i32 21
  %5828 = sext i32 %5827 to i64
  %5829 = getelementptr inbounds i16, i16* %49, i64 %5828
  %5830 = load i16, i16* %5829, align 2, !tbaa !382
  %5831 = insertelement <64 x i16> %5826, i16 %5830, i32 21
  %5832 = extractelement <64 x i32> %5721, i32 22
  %5833 = sext i32 %5832 to i64
  %5834 = getelementptr inbounds i16, i16* %49, i64 %5833
  %5835 = load i16, i16* %5834, align 2, !tbaa !382
  %5836 = insertelement <64 x i16> %5831, i16 %5835, i32 22
  %5837 = extractelement <64 x i32> %5721, i32 23
  %5838 = sext i32 %5837 to i64
  %5839 = getelementptr inbounds i16, i16* %49, i64 %5838
  %5840 = load i16, i16* %5839, align 2, !tbaa !382
  %5841 = insertelement <64 x i16> %5836, i16 %5840, i32 23
  %5842 = extractelement <64 x i32> %5721, i32 24
  %5843 = sext i32 %5842 to i64
  %5844 = getelementptr inbounds i16, i16* %49, i64 %5843
  %5845 = load i16, i16* %5844, align 2, !tbaa !382
  %5846 = insertelement <64 x i16> %5841, i16 %5845, i32 24
  %5847 = extractelement <64 x i32> %5721, i32 25
  %5848 = sext i32 %5847 to i64
  %5849 = getelementptr inbounds i16, i16* %49, i64 %5848
  %5850 = load i16, i16* %5849, align 2, !tbaa !382
  %5851 = insertelement <64 x i16> %5846, i16 %5850, i32 25
  %5852 = extractelement <64 x i32> %5721, i32 26
  %5853 = sext i32 %5852 to i64
  %5854 = getelementptr inbounds i16, i16* %49, i64 %5853
  %5855 = load i16, i16* %5854, align 2, !tbaa !382
  %5856 = insertelement <64 x i16> %5851, i16 %5855, i32 26
  %5857 = extractelement <64 x i32> %5721, i32 27
  %5858 = sext i32 %5857 to i64
  %5859 = getelementptr inbounds i16, i16* %49, i64 %5858
  %5860 = load i16, i16* %5859, align 2, !tbaa !382
  %5861 = insertelement <64 x i16> %5856, i16 %5860, i32 27
  %5862 = extractelement <64 x i32> %5721, i32 28
  %5863 = sext i32 %5862 to i64
  %5864 = getelementptr inbounds i16, i16* %49, i64 %5863
  %5865 = load i16, i16* %5864, align 2, !tbaa !382
  %5866 = insertelement <64 x i16> %5861, i16 %5865, i32 28
  %5867 = extractelement <64 x i32> %5721, i32 29
  %5868 = sext i32 %5867 to i64
  %5869 = getelementptr inbounds i16, i16* %49, i64 %5868
  %5870 = load i16, i16* %5869, align 2, !tbaa !382
  %5871 = insertelement <64 x i16> %5866, i16 %5870, i32 29
  %5872 = extractelement <64 x i32> %5721, i32 30
  %5873 = sext i32 %5872 to i64
  %5874 = getelementptr inbounds i16, i16* %49, i64 %5873
  %5875 = load i16, i16* %5874, align 2, !tbaa !382
  %5876 = insertelement <64 x i16> %5871, i16 %5875, i32 30
  %5877 = extractelement <64 x i32> %5721, i32 31
  %5878 = sext i32 %5877 to i64
  %5879 = getelementptr inbounds i16, i16* %49, i64 %5878
  %5880 = load i16, i16* %5879, align 2, !tbaa !382
  %5881 = insertelement <64 x i16> %5876, i16 %5880, i32 31
  %5882 = extractelement <64 x i32> %5721, i32 32
  %5883 = sext i32 %5882 to i64
  %5884 = getelementptr inbounds i16, i16* %49, i64 %5883
  %5885 = load i16, i16* %5884, align 2, !tbaa !382
  %5886 = insertelement <64 x i16> %5881, i16 %5885, i32 32
  %5887 = extractelement <64 x i32> %5721, i32 33
  %5888 = sext i32 %5887 to i64
  %5889 = getelementptr inbounds i16, i16* %49, i64 %5888
  %5890 = load i16, i16* %5889, align 2, !tbaa !382
  %5891 = insertelement <64 x i16> %5886, i16 %5890, i32 33
  %5892 = extractelement <64 x i32> %5721, i32 34
  %5893 = sext i32 %5892 to i64
  %5894 = getelementptr inbounds i16, i16* %49, i64 %5893
  %5895 = load i16, i16* %5894, align 2, !tbaa !382
  %5896 = insertelement <64 x i16> %5891, i16 %5895, i32 34
  %5897 = extractelement <64 x i32> %5721, i32 35
  %5898 = sext i32 %5897 to i64
  %5899 = getelementptr inbounds i16, i16* %49, i64 %5898
  %5900 = load i16, i16* %5899, align 2, !tbaa !382
  %5901 = insertelement <64 x i16> %5896, i16 %5900, i32 35
  %5902 = extractelement <64 x i32> %5721, i32 36
  %5903 = sext i32 %5902 to i64
  %5904 = getelementptr inbounds i16, i16* %49, i64 %5903
  %5905 = load i16, i16* %5904, align 2, !tbaa !382
  %5906 = insertelement <64 x i16> %5901, i16 %5905, i32 36
  %5907 = extractelement <64 x i32> %5721, i32 37
  %5908 = sext i32 %5907 to i64
  %5909 = getelementptr inbounds i16, i16* %49, i64 %5908
  %5910 = load i16, i16* %5909, align 2, !tbaa !382
  %5911 = insertelement <64 x i16> %5906, i16 %5910, i32 37
  %5912 = extractelement <64 x i32> %5721, i32 38
  %5913 = sext i32 %5912 to i64
  %5914 = getelementptr inbounds i16, i16* %49, i64 %5913
  %5915 = load i16, i16* %5914, align 2, !tbaa !382
  %5916 = insertelement <64 x i16> %5911, i16 %5915, i32 38
  %5917 = extractelement <64 x i32> %5721, i32 39
  %5918 = sext i32 %5917 to i64
  %5919 = getelementptr inbounds i16, i16* %49, i64 %5918
  %5920 = load i16, i16* %5919, align 2, !tbaa !382
  %5921 = insertelement <64 x i16> %5916, i16 %5920, i32 39
  %5922 = extractelement <64 x i32> %5721, i32 40
  %5923 = sext i32 %5922 to i64
  %5924 = getelementptr inbounds i16, i16* %49, i64 %5923
  %5925 = load i16, i16* %5924, align 2, !tbaa !382
  %5926 = insertelement <64 x i16> %5921, i16 %5925, i32 40
  %5927 = extractelement <64 x i32> %5721, i32 41
  %5928 = sext i32 %5927 to i64
  %5929 = getelementptr inbounds i16, i16* %49, i64 %5928
  %5930 = load i16, i16* %5929, align 2, !tbaa !382
  %5931 = insertelement <64 x i16> %5926, i16 %5930, i32 41
  %5932 = extractelement <64 x i32> %5721, i32 42
  %5933 = sext i32 %5932 to i64
  %5934 = getelementptr inbounds i16, i16* %49, i64 %5933
  %5935 = load i16, i16* %5934, align 2, !tbaa !382
  %5936 = insertelement <64 x i16> %5931, i16 %5935, i32 42
  %5937 = extractelement <64 x i32> %5721, i32 43
  %5938 = sext i32 %5937 to i64
  %5939 = getelementptr inbounds i16, i16* %49, i64 %5938
  %5940 = load i16, i16* %5939, align 2, !tbaa !382
  %5941 = insertelement <64 x i16> %5936, i16 %5940, i32 43
  %5942 = extractelement <64 x i32> %5721, i32 44
  %5943 = sext i32 %5942 to i64
  %5944 = getelementptr inbounds i16, i16* %49, i64 %5943
  %5945 = load i16, i16* %5944, align 2, !tbaa !382
  %5946 = insertelement <64 x i16> %5941, i16 %5945, i32 44
  %5947 = extractelement <64 x i32> %5721, i32 45
  %5948 = sext i32 %5947 to i64
  %5949 = getelementptr inbounds i16, i16* %49, i64 %5948
  %5950 = load i16, i16* %5949, align 2, !tbaa !382
  %5951 = insertelement <64 x i16> %5946, i16 %5950, i32 45
  %5952 = extractelement <64 x i32> %5721, i32 46
  %5953 = sext i32 %5952 to i64
  %5954 = getelementptr inbounds i16, i16* %49, i64 %5953
  %5955 = load i16, i16* %5954, align 2, !tbaa !382
  %5956 = insertelement <64 x i16> %5951, i16 %5955, i32 46
  %5957 = extractelement <64 x i32> %5721, i32 47
  %5958 = sext i32 %5957 to i64
  %5959 = getelementptr inbounds i16, i16* %49, i64 %5958
  %5960 = load i16, i16* %5959, align 2, !tbaa !382
  %5961 = insertelement <64 x i16> %5956, i16 %5960, i32 47
  %5962 = extractelement <64 x i32> %5721, i32 48
  %5963 = sext i32 %5962 to i64
  %5964 = getelementptr inbounds i16, i16* %49, i64 %5963
  %5965 = load i16, i16* %5964, align 2, !tbaa !382
  %5966 = insertelement <64 x i16> %5961, i16 %5965, i32 48
  %5967 = extractelement <64 x i32> %5721, i32 49
  %5968 = sext i32 %5967 to i64
  %5969 = getelementptr inbounds i16, i16* %49, i64 %5968
  %5970 = load i16, i16* %5969, align 2, !tbaa !382
  %5971 = insertelement <64 x i16> %5966, i16 %5970, i32 49
  %5972 = extractelement <64 x i32> %5721, i32 50
  %5973 = sext i32 %5972 to i64
  %5974 = getelementptr inbounds i16, i16* %49, i64 %5973
  %5975 = load i16, i16* %5974, align 2, !tbaa !382
  %5976 = insertelement <64 x i16> %5971, i16 %5975, i32 50
  %5977 = extractelement <64 x i32> %5721, i32 51
  %5978 = sext i32 %5977 to i64
  %5979 = getelementptr inbounds i16, i16* %49, i64 %5978
  %5980 = load i16, i16* %5979, align 2, !tbaa !382
  %5981 = insertelement <64 x i16> %5976, i16 %5980, i32 51
  %5982 = extractelement <64 x i32> %5721, i32 52
  %5983 = sext i32 %5982 to i64
  %5984 = getelementptr inbounds i16, i16* %49, i64 %5983
  %5985 = load i16, i16* %5984, align 2, !tbaa !382
  %5986 = insertelement <64 x i16> %5981, i16 %5985, i32 52
  %5987 = extractelement <64 x i32> %5721, i32 53
  %5988 = sext i32 %5987 to i64
  %5989 = getelementptr inbounds i16, i16* %49, i64 %5988
  %5990 = load i16, i16* %5989, align 2, !tbaa !382
  %5991 = insertelement <64 x i16> %5986, i16 %5990, i32 53
  %5992 = extractelement <64 x i32> %5721, i32 54
  %5993 = sext i32 %5992 to i64
  %5994 = getelementptr inbounds i16, i16* %49, i64 %5993
  %5995 = load i16, i16* %5994, align 2, !tbaa !382
  %5996 = insertelement <64 x i16> %5991, i16 %5995, i32 54
  %5997 = extractelement <64 x i32> %5721, i32 55
  %5998 = sext i32 %5997 to i64
  %5999 = getelementptr inbounds i16, i16* %49, i64 %5998
  %6000 = load i16, i16* %5999, align 2, !tbaa !382
  %6001 = insertelement <64 x i16> %5996, i16 %6000, i32 55
  %6002 = extractelement <64 x i32> %5721, i32 56
  %6003 = sext i32 %6002 to i64
  %6004 = getelementptr inbounds i16, i16* %49, i64 %6003
  %6005 = load i16, i16* %6004, align 2, !tbaa !382
  %6006 = insertelement <64 x i16> %6001, i16 %6005, i32 56
  %6007 = extractelement <64 x i32> %5721, i32 57
  %6008 = sext i32 %6007 to i64
  %6009 = getelementptr inbounds i16, i16* %49, i64 %6008
  %6010 = load i16, i16* %6009, align 2, !tbaa !382
  %6011 = insertelement <64 x i16> %6006, i16 %6010, i32 57
  %6012 = extractelement <64 x i32> %5721, i32 58
  %6013 = sext i32 %6012 to i64
  %6014 = getelementptr inbounds i16, i16* %49, i64 %6013
  %6015 = load i16, i16* %6014, align 2, !tbaa !382
  %6016 = insertelement <64 x i16> %6011, i16 %6015, i32 58
  %6017 = extractelement <64 x i32> %5721, i32 59
  %6018 = sext i32 %6017 to i64
  %6019 = getelementptr inbounds i16, i16* %49, i64 %6018
  %6020 = load i16, i16* %6019, align 2, !tbaa !382
  %6021 = insertelement <64 x i16> %6016, i16 %6020, i32 59
  %6022 = extractelement <64 x i32> %5721, i32 60
  %6023 = sext i32 %6022 to i64
  %6024 = getelementptr inbounds i16, i16* %49, i64 %6023
  %6025 = load i16, i16* %6024, align 2, !tbaa !382
  %6026 = insertelement <64 x i16> %6021, i16 %6025, i32 60
  %6027 = extractelement <64 x i32> %5721, i32 61
  %6028 = sext i32 %6027 to i64
  %6029 = getelementptr inbounds i16, i16* %49, i64 %6028
  %6030 = load i16, i16* %6029, align 2, !tbaa !382
  %6031 = insertelement <64 x i16> %6026, i16 %6030, i32 61
  %6032 = extractelement <64 x i32> %5721, i32 62
  %6033 = sext i32 %6032 to i64
  %6034 = getelementptr inbounds i16, i16* %49, i64 %6033
  %6035 = load i16, i16* %6034, align 2, !tbaa !382
  %6036 = insertelement <64 x i16> %6031, i16 %6035, i32 62
  %6037 = extractelement <64 x i32> %5721, i32 63
  %6038 = sext i32 %6037 to i64
  %6039 = getelementptr inbounds i16, i16* %49, i64 %6038
  %6040 = load i16, i16* %6039, align 2, !tbaa !382
  %6041 = insertelement <64 x i16> %6036, i16 %6040, i32 63
  %6042 = add <64 x i16> %4076, %3683
  %6043 = add <64 x i16> %6042, %4469
  %6044 = add <64 x i16> %6043, %4862
  %6045 = add <64 x i16> %6044, %5255
  %6046 = add <64 x i16> %6045, %5648
  %6047 = add <64 x i16> %6046, %6041
  %6048 = shufflevector <64 x i16> %6047, <64 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6049 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6048, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6050 = shufflevector <64 x i16> %6047, <64 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6051 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6050, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6052 = shufflevector <64 x i16> %6047, <64 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6053 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6052, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6054 = shufflevector <64 x i16> %6047, <64 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %6055 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6054, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6056 = shufflevector <64 x i16> %6047, <64 x i16> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %6057 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6056, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6058 = shufflevector <64 x i16> %6047, <64 x i16> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %6059 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6058, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6060 = shufflevector <64 x i16> %6047, <64 x i16> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %6061 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6060, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6062 = shufflevector <64 x i16> %6047, <64 x i16> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %6063 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6062, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6064 = shufflevector <64 x i16> %6047, <64 x i16> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %6065 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6064, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6066 = shufflevector <64 x i16> %6047, <64 x i16> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %6067 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6066, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6068 = shufflevector <64 x i16> %6047, <64 x i16> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %6069 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6068, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6070 = shufflevector <64 x i16> %6047, <64 x i16> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %6071 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6070, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6072 = shufflevector <64 x i16> %6047, <64 x i16> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %6073 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6072, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6074 = shufflevector <64 x i16> %6047, <64 x i16> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %6075 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6074, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6076 = shufflevector <64 x i16> %6047, <64 x i16> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %6077 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6076, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6078 = shufflevector <64 x i16> %6047, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %6079 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6078, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6080 = shufflevector <4 x i32> %6049, <4 x i32> %6051, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6081 = shufflevector <4 x i32> %6053, <4 x i32> %6055, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6082 = shufflevector <4 x i32> %6057, <4 x i32> %6059, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6083 = shufflevector <4 x i32> %6061, <4 x i32> %6063, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6084 = shufflevector <4 x i32> %6065, <4 x i32> %6067, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6085 = shufflevector <4 x i32> %6069, <4 x i32> %6071, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6086 = shufflevector <4 x i32> %6073, <4 x i32> %6075, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6087 = shufflevector <4 x i32> %6077, <4 x i32> %6079, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6088 = shufflevector <8 x i32> %6080, <8 x i32> %6081, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6089 = shufflevector <8 x i32> %6082, <8 x i32> %6083, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6090 = shufflevector <8 x i32> %6084, <8 x i32> %6085, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6091 = shufflevector <8 x i32> %6086, <8 x i32> %6087, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6092 = shufflevector <16 x i32> %6088, <16 x i32> %6089, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6093 = shufflevector <16 x i32> %6090, <16 x i32> %6091, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6094 = shufflevector <32 x i32> %6092, <32 x i32> %6093, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6095 = lshr <64 x i32> %6094, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %6096 = trunc <64 x i32> %6095 to <64 x i16>
  %6097 = shufflevector <64 x i16> %6096, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6098 = shufflevector <64 x i16> %6047, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6099 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6097, <8 x i16> %6098)
  %6100 = shufflevector <64 x i16> %6096, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6101 = shufflevector <64 x i16> %6047, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6102 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6100, <8 x i16> %6101)
  %6103 = shufflevector <64 x i16> %6096, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6104 = shufflevector <64 x i16> %6047, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6105 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6103, <8 x i16> %6104)
  %6106 = shufflevector <64 x i16> %6096, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6107 = shufflevector <64 x i16> %6047, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6108 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6106, <8 x i16> %6107)
  %6109 = shufflevector <64 x i16> %6096, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %6110 = shufflevector <64 x i16> %6047, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %6111 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6109, <8 x i16> %6110)
  %6112 = shufflevector <64 x i16> %6096, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %6113 = shufflevector <64 x i16> %6047, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %6114 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6112, <8 x i16> %6113)
  %6115 = shufflevector <64 x i16> %6096, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %6116 = shufflevector <64 x i16> %6047, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %6117 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6115, <8 x i16> %6116)
  %6118 = shufflevector <64 x i16> %6096, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6119 = shufflevector <64 x i16> %6047, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6120 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6118, <8 x i16> %6119)
  %6121 = shufflevector <8 x i16> %6099, <8 x i16> %6102, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6122 = shufflevector <8 x i16> %6105, <8 x i16> %6108, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6123 = shufflevector <8 x i16> %6111, <8 x i16> %6114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6124 = shufflevector <8 x i16> %6117, <8 x i16> %6120, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6125 = shufflevector <16 x i16> %6121, <16 x i16> %6122, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6126 = shufflevector <16 x i16> %6123, <16 x i16> %6124, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6127 = shufflevector <32 x i16> %6125, <32 x i16> %6126, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6128 = lshr <64 x i16> %6127, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6129 = shufflevector <64 x i16> %6128, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6130 = sext i32 %blur_x.s0.x.v1.base.s5 to i64
  %6131 = add nsw i64 %3287, %6130
  %6132 = getelementptr inbounds i16, i16* %blur_x, i64 %6131
  %6133 = bitcast i16* %6132 to <8 x i16>*
  store <8 x i16> %6129, <8 x i16>* %6133, align 2, !tbaa !385
  %6134 = shufflevector <64 x i16> %6128, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6135 = getelementptr inbounds i16, i16* %6132, i64 8
  %6136 = bitcast i16* %6135 to <8 x i16>*
  store <8 x i16> %6134, <8 x i16>* %6136, align 2, !tbaa !385
  %6137 = shufflevector <64 x i16> %6128, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6138 = getelementptr inbounds i16, i16* %6132, i64 16
  %6139 = bitcast i16* %6138 to <8 x i16>*
  store <8 x i16> %6137, <8 x i16>* %6139, align 2, !tbaa !385
  %6140 = shufflevector <64 x i16> %6128, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6141 = getelementptr inbounds i16, i16* %6132, i64 24
  %6142 = bitcast i16* %6141 to <8 x i16>*
  store <8 x i16> %6140, <8 x i16>* %6142, align 2, !tbaa !385
  %6143 = shufflevector <64 x i16> %6128, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %6144 = getelementptr inbounds i16, i16* %6132, i64 32
  %6145 = bitcast i16* %6144 to <8 x i16>*
  store <8 x i16> %6143, <8 x i16>* %6145, align 2, !tbaa !385
  %6146 = shufflevector <64 x i16> %6128, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %6147 = getelementptr inbounds i16, i16* %6132, i64 40
  %6148 = bitcast i16* %6147 to <8 x i16>*
  store <8 x i16> %6146, <8 x i16>* %6148, align 2, !tbaa !385
  %6149 = shufflevector <64 x i16> %6128, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %6150 = getelementptr inbounds i16, i16* %6132, i64 48
  %6151 = bitcast i16* %6150 to <8 x i16>*
  store <8 x i16> %6149, <8 x i16>* %6151, align 2, !tbaa !385
  %6152 = shufflevector <64 x i16> %6128, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6153 = getelementptr inbounds i16, i16* %6132, i64 56
  %6154 = bitcast i16* %6153 to <8 x i16>*
  store <8 x i16> %6152, <8 x i16>* %6154, align 2, !tbaa !385
  %6155 = add nuw nsw i32 %blur_x.s0.x.x.rebased4, 1
  %.not136 = icmp eq i32 %6155, %t278
  br i1 %.not136, label %"end for blur_x.s0.x.x.rebased3", label %"for blur_x.s0.x.x.rebased2"

"end for blur_x.s0.x.x.rebased3":                 ; preds = %"for blur_x.s0.x.x.rebased2", %"end for blur_x.s0.x.x.rebased"
  %6156 = icmp ugt i64 %indvars.iv175, 5
  br i1 %6156, label %"consume blur_x", label %after_bb6

after_bb6:                                        ; preds = %"for blur_y.s0.x.x9.preheader", %"end for blur_y.s0.x.x", %"end for blur_x.s0.x.x.rebased3"
  %indvars.iv.next176 = add nuw nsw i64 %indvars.iv175, 1
  %.not126 = icmp eq i64 %indvars.iv.next176, 134
  br i1 %.not126, label %"end for blur_y.s0.y.yi.$n.rebased", label %"for blur_y.s0.y.yi.$n.rebased"

"consume blur_x":                                 ; preds = %"end for blur_x.s0.x.x.rebased3"
  br i1 %54, label %"for blur_y.s0.x.x.preheader", label %"end for blur_y.s0.x.x", !prof !381

"for blur_y.s0.x.x.preheader":                    ; preds = %"consume blur_x"
  %6157 = add i64 %73, 3
  %6158 = and i64 %6157, 7
  %6159 = mul nsw i64 %6158, %50
  %6160 = add i64 %73, 2
  %6161 = and i64 %6160, 7
  %6162 = mul nsw i64 %6161, %50
  %6163 = add i64 %73, 4
  %6164 = and i64 %6163, 7
  %6165 = mul nsw i64 %6164, %50
  %6166 = add i64 %73, 5
  %6167 = and i64 %6166, 7
  %6168 = mul nsw i64 %6167, %50
  %6169 = add i64 %73, 6
  %6170 = and i64 %6169, 7
  %6171 = mul nsw i64 %6170, %50
  %6172 = and i64 %73, 7
  %6173 = mul nsw i64 %6172, %50
  %6174 = add i64 %73, 7
  %6175 = and i64 %6174, 7
  %6176 = mul nsw i64 %6175, %50
  %6177 = add nsw i64 %73, -6
  %6178 = mul nsw i64 %6177, %55
  br label %"for blur_y.s0.x.x"

"for blur_y.s0.x.x":                              ; preds = %"for blur_y.s0.x.x.preheader", %"for blur_y.s0.x.x"
  %indvars.iv172 = phi i64 [ 0, %"for blur_y.s0.x.x.preheader" ], [ %indvars.iv.next173, %"for blur_y.s0.x.x" ]
  %6179 = shl nsw i64 %indvars.iv172, 6
  %6180 = sub nsw i64 %6179, %51
  %6181 = add nsw i64 %6159, %6180
  %6182 = getelementptr inbounds i16, i16* %blur_x, i64 %6181
  %6183 = getelementptr inbounds i16, i16* %6182, i64 64
  %6184 = bitcast i16* %6183 to <8 x i16>*
  %6185 = load <8 x i16>, <8 x i16>* %6184, align 2, !tbaa !385
  %6186 = getelementptr inbounds i16, i16* %6182, i64 72
  %6187 = bitcast i16* %6186 to <8 x i16>*
  %6188 = load <8 x i16>, <8 x i16>* %6187, align 2, !tbaa !385
  %6189 = getelementptr inbounds i16, i16* %6182, i64 80
  %6190 = bitcast i16* %6189 to <8 x i16>*
  %6191 = load <8 x i16>, <8 x i16>* %6190, align 2, !tbaa !385
  %6192 = getelementptr inbounds i16, i16* %6182, i64 88
  %6193 = bitcast i16* %6192 to <8 x i16>*
  %6194 = load <8 x i16>, <8 x i16>* %6193, align 2, !tbaa !385
  %6195 = getelementptr inbounds i16, i16* %6182, i64 96
  %6196 = bitcast i16* %6195 to <8 x i16>*
  %6197 = load <8 x i16>, <8 x i16>* %6196, align 2, !tbaa !385
  %6198 = getelementptr inbounds i16, i16* %6182, i64 104
  %6199 = bitcast i16* %6198 to <8 x i16>*
  %6200 = load <8 x i16>, <8 x i16>* %6199, align 2, !tbaa !385
  %6201 = getelementptr inbounds i16, i16* %6182, i64 112
  %6202 = bitcast i16* %6201 to <8 x i16>*
  %6203 = load <8 x i16>, <8 x i16>* %6202, align 2, !tbaa !385
  %6204 = getelementptr inbounds i16, i16* %6182, i64 120
  %6205 = bitcast i16* %6204 to <8 x i16>*
  %6206 = load <8 x i16>, <8 x i16>* %6205, align 2, !tbaa !385
  %6207 = add nsw i64 %6162, %6180
  %6208 = getelementptr inbounds i16, i16* %blur_x, i64 %6207
  %6209 = getelementptr inbounds i16, i16* %6208, i64 64
  %6210 = bitcast i16* %6209 to <8 x i16>*
  %6211 = load <8 x i16>, <8 x i16>* %6210, align 2, !tbaa !385
  %6212 = getelementptr inbounds i16, i16* %6208, i64 72
  %6213 = bitcast i16* %6212 to <8 x i16>*
  %6214 = load <8 x i16>, <8 x i16>* %6213, align 2, !tbaa !385
  %6215 = getelementptr inbounds i16, i16* %6208, i64 80
  %6216 = bitcast i16* %6215 to <8 x i16>*
  %6217 = load <8 x i16>, <8 x i16>* %6216, align 2, !tbaa !385
  %6218 = getelementptr inbounds i16, i16* %6208, i64 88
  %6219 = bitcast i16* %6218 to <8 x i16>*
  %6220 = load <8 x i16>, <8 x i16>* %6219, align 2, !tbaa !385
  %6221 = getelementptr inbounds i16, i16* %6208, i64 96
  %6222 = bitcast i16* %6221 to <8 x i16>*
  %6223 = load <8 x i16>, <8 x i16>* %6222, align 2, !tbaa !385
  %6224 = getelementptr inbounds i16, i16* %6208, i64 104
  %6225 = bitcast i16* %6224 to <8 x i16>*
  %6226 = load <8 x i16>, <8 x i16>* %6225, align 2, !tbaa !385
  %6227 = getelementptr inbounds i16, i16* %6208, i64 112
  %6228 = bitcast i16* %6227 to <8 x i16>*
  %6229 = load <8 x i16>, <8 x i16>* %6228, align 2, !tbaa !385
  %6230 = getelementptr inbounds i16, i16* %6208, i64 120
  %6231 = bitcast i16* %6230 to <8 x i16>*
  %6232 = load <8 x i16>, <8 x i16>* %6231, align 2, !tbaa !385
  %6233 = add nsw i64 %6165, %6180
  %6234 = getelementptr inbounds i16, i16* %blur_x, i64 %6233
  %6235 = getelementptr inbounds i16, i16* %6234, i64 64
  %6236 = bitcast i16* %6235 to <8 x i16>*
  %6237 = load <8 x i16>, <8 x i16>* %6236, align 2, !tbaa !385
  %6238 = getelementptr inbounds i16, i16* %6234, i64 72
  %6239 = bitcast i16* %6238 to <8 x i16>*
  %6240 = load <8 x i16>, <8 x i16>* %6239, align 2, !tbaa !385
  %6241 = getelementptr inbounds i16, i16* %6234, i64 80
  %6242 = bitcast i16* %6241 to <8 x i16>*
  %6243 = load <8 x i16>, <8 x i16>* %6242, align 2, !tbaa !385
  %6244 = getelementptr inbounds i16, i16* %6234, i64 88
  %6245 = bitcast i16* %6244 to <8 x i16>*
  %6246 = load <8 x i16>, <8 x i16>* %6245, align 2, !tbaa !385
  %6247 = getelementptr inbounds i16, i16* %6234, i64 96
  %6248 = bitcast i16* %6247 to <8 x i16>*
  %6249 = load <8 x i16>, <8 x i16>* %6248, align 2, !tbaa !385
  %6250 = getelementptr inbounds i16, i16* %6234, i64 104
  %6251 = bitcast i16* %6250 to <8 x i16>*
  %6252 = load <8 x i16>, <8 x i16>* %6251, align 2, !tbaa !385
  %6253 = getelementptr inbounds i16, i16* %6234, i64 112
  %6254 = bitcast i16* %6253 to <8 x i16>*
  %6255 = load <8 x i16>, <8 x i16>* %6254, align 2, !tbaa !385
  %6256 = getelementptr inbounds i16, i16* %6234, i64 120
  %6257 = bitcast i16* %6256 to <8 x i16>*
  %6258 = load <8 x i16>, <8 x i16>* %6257, align 2, !tbaa !385
  %6259 = add nsw i64 %6168, %6180
  %6260 = getelementptr inbounds i16, i16* %blur_x, i64 %6259
  %6261 = getelementptr inbounds i16, i16* %6260, i64 64
  %6262 = bitcast i16* %6261 to <8 x i16>*
  %6263 = load <8 x i16>, <8 x i16>* %6262, align 2, !tbaa !385
  %6264 = getelementptr inbounds i16, i16* %6260, i64 72
  %6265 = bitcast i16* %6264 to <8 x i16>*
  %6266 = load <8 x i16>, <8 x i16>* %6265, align 2, !tbaa !385
  %6267 = getelementptr inbounds i16, i16* %6260, i64 80
  %6268 = bitcast i16* %6267 to <8 x i16>*
  %6269 = load <8 x i16>, <8 x i16>* %6268, align 2, !tbaa !385
  %6270 = getelementptr inbounds i16, i16* %6260, i64 88
  %6271 = bitcast i16* %6270 to <8 x i16>*
  %6272 = load <8 x i16>, <8 x i16>* %6271, align 2, !tbaa !385
  %6273 = getelementptr inbounds i16, i16* %6260, i64 96
  %6274 = bitcast i16* %6273 to <8 x i16>*
  %6275 = load <8 x i16>, <8 x i16>* %6274, align 2, !tbaa !385
  %6276 = getelementptr inbounds i16, i16* %6260, i64 104
  %6277 = bitcast i16* %6276 to <8 x i16>*
  %6278 = load <8 x i16>, <8 x i16>* %6277, align 2, !tbaa !385
  %6279 = getelementptr inbounds i16, i16* %6260, i64 112
  %6280 = bitcast i16* %6279 to <8 x i16>*
  %6281 = load <8 x i16>, <8 x i16>* %6280, align 2, !tbaa !385
  %6282 = getelementptr inbounds i16, i16* %6260, i64 120
  %6283 = bitcast i16* %6282 to <8 x i16>*
  %6284 = load <8 x i16>, <8 x i16>* %6283, align 2, !tbaa !385
  %6285 = add nsw i64 %6171, %6180
  %6286 = getelementptr inbounds i16, i16* %blur_x, i64 %6285
  %6287 = getelementptr inbounds i16, i16* %6286, i64 64
  %6288 = bitcast i16* %6287 to <8 x i16>*
  %6289 = load <8 x i16>, <8 x i16>* %6288, align 2, !tbaa !385
  %6290 = getelementptr inbounds i16, i16* %6286, i64 72
  %6291 = bitcast i16* %6290 to <8 x i16>*
  %6292 = load <8 x i16>, <8 x i16>* %6291, align 2, !tbaa !385
  %6293 = getelementptr inbounds i16, i16* %6286, i64 80
  %6294 = bitcast i16* %6293 to <8 x i16>*
  %6295 = load <8 x i16>, <8 x i16>* %6294, align 2, !tbaa !385
  %6296 = getelementptr inbounds i16, i16* %6286, i64 88
  %6297 = bitcast i16* %6296 to <8 x i16>*
  %6298 = load <8 x i16>, <8 x i16>* %6297, align 2, !tbaa !385
  %6299 = getelementptr inbounds i16, i16* %6286, i64 96
  %6300 = bitcast i16* %6299 to <8 x i16>*
  %6301 = load <8 x i16>, <8 x i16>* %6300, align 2, !tbaa !385
  %6302 = getelementptr inbounds i16, i16* %6286, i64 104
  %6303 = bitcast i16* %6302 to <8 x i16>*
  %6304 = load <8 x i16>, <8 x i16>* %6303, align 2, !tbaa !385
  %6305 = getelementptr inbounds i16, i16* %6286, i64 112
  %6306 = bitcast i16* %6305 to <8 x i16>*
  %6307 = load <8 x i16>, <8 x i16>* %6306, align 2, !tbaa !385
  %6308 = getelementptr inbounds i16, i16* %6286, i64 120
  %6309 = bitcast i16* %6308 to <8 x i16>*
  %6310 = load <8 x i16>, <8 x i16>* %6309, align 2, !tbaa !385
  %6311 = add nsw i64 %6173, %6180
  %6312 = getelementptr inbounds i16, i16* %blur_x, i64 %6311
  %6313 = getelementptr inbounds i16, i16* %6312, i64 64
  %6314 = bitcast i16* %6313 to <8 x i16>*
  %6315 = load <8 x i16>, <8 x i16>* %6314, align 2, !tbaa !385
  %6316 = getelementptr inbounds i16, i16* %6312, i64 72
  %6317 = bitcast i16* %6316 to <8 x i16>*
  %6318 = load <8 x i16>, <8 x i16>* %6317, align 2, !tbaa !385
  %6319 = getelementptr inbounds i16, i16* %6312, i64 80
  %6320 = bitcast i16* %6319 to <8 x i16>*
  %6321 = load <8 x i16>, <8 x i16>* %6320, align 2, !tbaa !385
  %6322 = getelementptr inbounds i16, i16* %6312, i64 88
  %6323 = bitcast i16* %6322 to <8 x i16>*
  %6324 = load <8 x i16>, <8 x i16>* %6323, align 2, !tbaa !385
  %6325 = getelementptr inbounds i16, i16* %6312, i64 96
  %6326 = bitcast i16* %6325 to <8 x i16>*
  %6327 = load <8 x i16>, <8 x i16>* %6326, align 2, !tbaa !385
  %6328 = getelementptr inbounds i16, i16* %6312, i64 104
  %6329 = bitcast i16* %6328 to <8 x i16>*
  %6330 = load <8 x i16>, <8 x i16>* %6329, align 2, !tbaa !385
  %6331 = getelementptr inbounds i16, i16* %6312, i64 112
  %6332 = bitcast i16* %6331 to <8 x i16>*
  %6333 = load <8 x i16>, <8 x i16>* %6332, align 2, !tbaa !385
  %6334 = getelementptr inbounds i16, i16* %6312, i64 120
  %6335 = bitcast i16* %6334 to <8 x i16>*
  %6336 = load <8 x i16>, <8 x i16>* %6335, align 2, !tbaa !385
  %6337 = add nsw i64 %6176, %6180
  %6338 = getelementptr inbounds i16, i16* %blur_x, i64 %6337
  %6339 = getelementptr inbounds i16, i16* %6338, i64 64
  %6340 = bitcast i16* %6339 to <8 x i16>*
  %6341 = load <8 x i16>, <8 x i16>* %6340, align 2, !tbaa !385
  %6342 = getelementptr inbounds i16, i16* %6338, i64 72
  %6343 = bitcast i16* %6342 to <8 x i16>*
  %6344 = load <8 x i16>, <8 x i16>* %6343, align 2, !tbaa !385
  %6345 = getelementptr inbounds i16, i16* %6338, i64 80
  %6346 = bitcast i16* %6345 to <8 x i16>*
  %6347 = load <8 x i16>, <8 x i16>* %6346, align 2, !tbaa !385
  %6348 = getelementptr inbounds i16, i16* %6338, i64 88
  %6349 = bitcast i16* %6348 to <8 x i16>*
  %6350 = load <8 x i16>, <8 x i16>* %6349, align 2, !tbaa !385
  %6351 = getelementptr inbounds i16, i16* %6338, i64 96
  %6352 = bitcast i16* %6351 to <8 x i16>*
  %6353 = load <8 x i16>, <8 x i16>* %6352, align 2, !tbaa !385
  %6354 = getelementptr inbounds i16, i16* %6338, i64 104
  %6355 = bitcast i16* %6354 to <8 x i16>*
  %6356 = load <8 x i16>, <8 x i16>* %6355, align 2, !tbaa !385
  %6357 = getelementptr inbounds i16, i16* %6338, i64 112
  %6358 = bitcast i16* %6357 to <8 x i16>*
  %6359 = load <8 x i16>, <8 x i16>* %6358, align 2, !tbaa !385
  %6360 = getelementptr inbounds i16, i16* %6338, i64 120
  %6361 = bitcast i16* %6360 to <8 x i16>*
  %6362 = load <8 x i16>, <8 x i16>* %6361, align 2, !tbaa !385
  %6363 = add <8 x i16> %6211, %6185
  %6364 = add <8 x i16> %6363, %6237
  %6365 = add <8 x i16> %6364, %6263
  %6366 = add <8 x i16> %6365, %6289
  %6367 = add <8 x i16> %6366, %6315
  %6368 = add <8 x i16> %6367, %6341
  %6369 = add <8 x i16> %6214, %6188
  %6370 = add <8 x i16> %6369, %6240
  %6371 = add <8 x i16> %6370, %6266
  %6372 = add <8 x i16> %6371, %6292
  %6373 = add <8 x i16> %6372, %6318
  %6374 = add <8 x i16> %6373, %6344
  %6375 = add <8 x i16> %6217, %6191
  %6376 = add <8 x i16> %6375, %6243
  %6377 = add <8 x i16> %6376, %6269
  %6378 = add <8 x i16> %6377, %6295
  %6379 = add <8 x i16> %6378, %6321
  %6380 = add <8 x i16> %6379, %6347
  %6381 = add <8 x i16> %6220, %6194
  %6382 = add <8 x i16> %6381, %6246
  %6383 = add <8 x i16> %6382, %6272
  %6384 = add <8 x i16> %6383, %6298
  %6385 = add <8 x i16> %6384, %6324
  %6386 = add <8 x i16> %6385, %6350
  %6387 = add <8 x i16> %6223, %6197
  %6388 = add <8 x i16> %6387, %6249
  %6389 = add <8 x i16> %6388, %6275
  %6390 = add <8 x i16> %6389, %6301
  %6391 = add <8 x i16> %6390, %6327
  %6392 = add <8 x i16> %6391, %6353
  %6393 = add <8 x i16> %6226, %6200
  %6394 = add <8 x i16> %6393, %6252
  %6395 = add <8 x i16> %6394, %6278
  %6396 = add <8 x i16> %6395, %6304
  %6397 = add <8 x i16> %6396, %6330
  %6398 = add <8 x i16> %6397, %6356
  %6399 = add <8 x i16> %6229, %6203
  %6400 = add <8 x i16> %6399, %6255
  %6401 = add <8 x i16> %6400, %6281
  %6402 = add <8 x i16> %6401, %6307
  %6403 = add <8 x i16> %6402, %6333
  %6404 = add <8 x i16> %6403, %6359
  %6405 = add <8 x i16> %6232, %6206
  %6406 = add <8 x i16> %6405, %6258
  %6407 = add <8 x i16> %6406, %6284
  %6408 = add <8 x i16> %6407, %6310
  %6409 = add <8 x i16> %6408, %6336
  %6410 = add <8 x i16> %6409, %6362
  %6411 = shufflevector <8 x i16> %6410, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6412 = shufflevector <16 x i16> %6411, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6413 = shufflevector <32 x i16> %6412, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6414 = shufflevector <8 x i16> %6368, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6415 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6414, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6416 = shufflevector <8 x i16> %6368, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6417 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6416, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6418 = shufflevector <8 x i16> %6374, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6419 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6418, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6420 = shufflevector <8 x i16> %6374, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6421 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6420, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6422 = shufflevector <8 x i16> %6380, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6423 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6422, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6424 = shufflevector <8 x i16> %6380, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6425 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6424, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6426 = shufflevector <8 x i16> %6386, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6427 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6426, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6428 = shufflevector <8 x i16> %6386, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6429 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6428, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6430 = shufflevector <8 x i16> %6392, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6431 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6430, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6432 = shufflevector <8 x i16> %6392, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6433 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6432, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6434 = shufflevector <8 x i16> %6398, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6435 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6434, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6436 = shufflevector <8 x i16> %6398, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6437 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6436, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6438 = shufflevector <8 x i16> %6404, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6439 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6438, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6440 = shufflevector <8 x i16> %6404, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6441 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6440, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6442 = shufflevector <8 x i16> %6410, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6443 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6442, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6444 = shufflevector <8 x i16> %6410, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6445 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6444, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6446 = shufflevector <4 x i32> %6415, <4 x i32> %6417, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6447 = shufflevector <4 x i32> %6419, <4 x i32> %6421, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6448 = shufflevector <4 x i32> %6423, <4 x i32> %6425, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6449 = shufflevector <4 x i32> %6427, <4 x i32> %6429, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6450 = shufflevector <4 x i32> %6431, <4 x i32> %6433, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6451 = shufflevector <4 x i32> %6435, <4 x i32> %6437, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6452 = shufflevector <4 x i32> %6439, <4 x i32> %6441, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6453 = shufflevector <4 x i32> %6443, <4 x i32> %6445, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6454 = shufflevector <8 x i32> %6446, <8 x i32> %6447, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6455 = shufflevector <8 x i32> %6448, <8 x i32> %6449, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6456 = shufflevector <8 x i32> %6450, <8 x i32> %6451, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6457 = shufflevector <8 x i32> %6452, <8 x i32> %6453, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6458 = shufflevector <16 x i32> %6454, <16 x i32> %6455, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6459 = shufflevector <16 x i32> %6456, <16 x i32> %6457, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6460 = shufflevector <32 x i32> %6458, <32 x i32> %6459, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6461 = lshr <64 x i32> %6460, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %6462 = trunc <64 x i32> %6461 to <64 x i16>
  %6463 = shufflevector <64 x i16> %6462, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6464 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6463, <8 x i16> %6368)
  %6465 = shufflevector <64 x i16> %6462, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6466 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6465, <8 x i16> %6374)
  %6467 = shufflevector <64 x i16> %6462, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6468 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6467, <8 x i16> %6380)
  %6469 = shufflevector <64 x i16> %6462, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6470 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6469, <8 x i16> %6386)
  %6471 = shufflevector <64 x i16> %6462, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %6472 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6471, <8 x i16> %6392)
  %6473 = shufflevector <64 x i16> %6462, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %6474 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6473, <8 x i16> %6398)
  %6475 = shufflevector <64 x i16> %6462, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %6476 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6475, <8 x i16> %6404)
  %6477 = shufflevector <64 x i16> %6462, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6478 = shufflevector <64 x i16> %6413, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6479 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6477, <8 x i16> %6478)
  %6480 = shufflevector <8 x i16> %6464, <8 x i16> %6466, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6481 = shufflevector <8 x i16> %6468, <8 x i16> %6470, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6482 = shufflevector <8 x i16> %6472, <8 x i16> %6474, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6483 = shufflevector <8 x i16> %6476, <8 x i16> %6479, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6484 = shufflevector <16 x i16> %6480, <16 x i16> %6481, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6485 = shufflevector <16 x i16> %6482, <16 x i16> %6483, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6486 = shufflevector <32 x i16> %6484, <32 x i16> %6485, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6487 = lshr <64 x i16> %6486, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6488 = shufflevector <64 x i16> %6487, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6489 = add nsw i64 %6179, %6178
  %6490 = getelementptr inbounds i16, i16* %56, i64 %6489
  %6491 = bitcast i16* %6490 to <8 x i16>*
  store <8 x i16> %6488, <8 x i16>* %6491, align 2, !tbaa !387
  %6492 = shufflevector <64 x i16> %6487, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6493 = getelementptr inbounds i16, i16* %6490, i64 8
  %6494 = bitcast i16* %6493 to <8 x i16>*
  store <8 x i16> %6492, <8 x i16>* %6494, align 2, !tbaa !387
  %6495 = shufflevector <64 x i16> %6487, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6496 = getelementptr inbounds i16, i16* %6490, i64 16
  %6497 = bitcast i16* %6496 to <8 x i16>*
  store <8 x i16> %6495, <8 x i16>* %6497, align 2, !tbaa !387
  %6498 = shufflevector <64 x i16> %6487, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6499 = getelementptr inbounds i16, i16* %6490, i64 24
  %6500 = bitcast i16* %6499 to <8 x i16>*
  store <8 x i16> %6498, <8 x i16>* %6500, align 2, !tbaa !387
  %6501 = shufflevector <64 x i16> %6487, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %6502 = getelementptr inbounds i16, i16* %6490, i64 32
  %6503 = bitcast i16* %6502 to <8 x i16>*
  store <8 x i16> %6501, <8 x i16>* %6503, align 2, !tbaa !387
  %6504 = shufflevector <64 x i16> %6487, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %6505 = getelementptr inbounds i16, i16* %6490, i64 40
  %6506 = bitcast i16* %6505 to <8 x i16>*
  store <8 x i16> %6504, <8 x i16>* %6506, align 2, !tbaa !387
  %6507 = shufflevector <64 x i16> %6487, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %6508 = getelementptr inbounds i16, i16* %6490, i64 48
  %6509 = bitcast i16* %6508 to <8 x i16>*
  store <8 x i16> %6507, <8 x i16>* %6509, align 2, !tbaa !387
  %6510 = shufflevector <64 x i16> %6487, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6511 = getelementptr inbounds i16, i16* %6490, i64 56
  %6512 = bitcast i16* %6511 to <8 x i16>*
  store <8 x i16> %6510, <8 x i16>* %6512, align 2, !tbaa !387
  %indvars.iv.next173 = add nuw nsw i64 %indvars.iv172, 1
  %.not135 = icmp eq i64 %indvars.iv.next173, %60
  br i1 %.not135, label %"end for blur_y.s0.x.x", label %"for blur_y.s0.x.x"

"end for blur_y.s0.x.x":                          ; preds = %"for blur_y.s0.x.x", %"consume blur_x"
  br i1 %57, label %"for blur_y.s0.x.x9.preheader", label %after_bb6, !prof !381

"for blur_y.s0.x.x9.preheader":                   ; preds = %"end for blur_y.s0.x.x"
  %6513 = add i64 %73, 3
  %6514 = and i64 %6513, 7
  %narrow127 = add nuw nsw i64 %6514, 1
  %6515 = mul nsw i64 %narrow127, %50
  %6516 = getelementptr inbounds i16, i16* %blur_x, i64 %6515
  %6517 = getelementptr inbounds i16, i16* %6516, i64 -64
  %6518 = bitcast i16* %6517 to <8 x i16>*
  %6519 = load <8 x i16>, <8 x i16>* %6518, align 2, !tbaa !385
  %6520 = getelementptr inbounds i16, i16* %6516, i64 -56
  %6521 = bitcast i16* %6520 to <8 x i16>*
  %6522 = load <8 x i16>, <8 x i16>* %6521, align 2, !tbaa !385
  %6523 = getelementptr inbounds i16, i16* %6516, i64 -48
  %6524 = bitcast i16* %6523 to <8 x i16>*
  %6525 = load <8 x i16>, <8 x i16>* %6524, align 2, !tbaa !385
  %6526 = getelementptr inbounds i16, i16* %6516, i64 -40
  %6527 = bitcast i16* %6526 to <8 x i16>*
  %6528 = load <8 x i16>, <8 x i16>* %6527, align 2, !tbaa !385
  %6529 = getelementptr inbounds i16, i16* %6516, i64 -32
  %6530 = bitcast i16* %6529 to <8 x i16>*
  %6531 = load <8 x i16>, <8 x i16>* %6530, align 2, !tbaa !385
  %6532 = getelementptr inbounds i16, i16* %6516, i64 -24
  %6533 = bitcast i16* %6532 to <8 x i16>*
  %6534 = load <8 x i16>, <8 x i16>* %6533, align 2, !tbaa !385
  %6535 = getelementptr inbounds i16, i16* %6516, i64 -16
  %6536 = bitcast i16* %6535 to <8 x i16>*
  %6537 = load <8 x i16>, <8 x i16>* %6536, align 2, !tbaa !385
  %6538 = getelementptr inbounds i16, i16* %6516, i64 -8
  %6539 = bitcast i16* %6538 to <8 x i16>*
  %6540 = load <8 x i16>, <8 x i16>* %6539, align 2, !tbaa !385
  %6541 = add i64 %73, 2
  %6542 = and i64 %6541, 7
  %narrow128 = add nuw nsw i64 %6542, 1
  %6543 = mul nsw i64 %narrow128, %50
  %6544 = getelementptr inbounds i16, i16* %blur_x, i64 %6543
  %6545 = getelementptr inbounds i16, i16* %6544, i64 -64
  %6546 = bitcast i16* %6545 to <8 x i16>*
  %6547 = load <8 x i16>, <8 x i16>* %6546, align 2, !tbaa !385
  %6548 = getelementptr inbounds i16, i16* %6544, i64 -56
  %6549 = bitcast i16* %6548 to <8 x i16>*
  %6550 = load <8 x i16>, <8 x i16>* %6549, align 2, !tbaa !385
  %6551 = getelementptr inbounds i16, i16* %6544, i64 -48
  %6552 = bitcast i16* %6551 to <8 x i16>*
  %6553 = load <8 x i16>, <8 x i16>* %6552, align 2, !tbaa !385
  %6554 = getelementptr inbounds i16, i16* %6544, i64 -40
  %6555 = bitcast i16* %6554 to <8 x i16>*
  %6556 = load <8 x i16>, <8 x i16>* %6555, align 2, !tbaa !385
  %6557 = getelementptr inbounds i16, i16* %6544, i64 -32
  %6558 = bitcast i16* %6557 to <8 x i16>*
  %6559 = load <8 x i16>, <8 x i16>* %6558, align 2, !tbaa !385
  %6560 = getelementptr inbounds i16, i16* %6544, i64 -24
  %6561 = bitcast i16* %6560 to <8 x i16>*
  %6562 = load <8 x i16>, <8 x i16>* %6561, align 2, !tbaa !385
  %6563 = getelementptr inbounds i16, i16* %6544, i64 -16
  %6564 = bitcast i16* %6563 to <8 x i16>*
  %6565 = load <8 x i16>, <8 x i16>* %6564, align 2, !tbaa !385
  %6566 = getelementptr inbounds i16, i16* %6544, i64 -8
  %6567 = bitcast i16* %6566 to <8 x i16>*
  %6568 = load <8 x i16>, <8 x i16>* %6567, align 2, !tbaa !385
  %6569 = add i64 %73, 4
  %6570 = and i64 %6569, 7
  %narrow129 = add nuw nsw i64 %6570, 1
  %6571 = mul nsw i64 %narrow129, %50
  %6572 = getelementptr inbounds i16, i16* %blur_x, i64 %6571
  %6573 = getelementptr inbounds i16, i16* %6572, i64 -64
  %6574 = bitcast i16* %6573 to <8 x i16>*
  %6575 = load <8 x i16>, <8 x i16>* %6574, align 2, !tbaa !385
  %6576 = getelementptr inbounds i16, i16* %6572, i64 -56
  %6577 = bitcast i16* %6576 to <8 x i16>*
  %6578 = load <8 x i16>, <8 x i16>* %6577, align 2, !tbaa !385
  %6579 = getelementptr inbounds i16, i16* %6572, i64 -48
  %6580 = bitcast i16* %6579 to <8 x i16>*
  %6581 = load <8 x i16>, <8 x i16>* %6580, align 2, !tbaa !385
  %6582 = getelementptr inbounds i16, i16* %6572, i64 -40
  %6583 = bitcast i16* %6582 to <8 x i16>*
  %6584 = load <8 x i16>, <8 x i16>* %6583, align 2, !tbaa !385
  %6585 = getelementptr inbounds i16, i16* %6572, i64 -32
  %6586 = bitcast i16* %6585 to <8 x i16>*
  %6587 = load <8 x i16>, <8 x i16>* %6586, align 2, !tbaa !385
  %6588 = getelementptr inbounds i16, i16* %6572, i64 -24
  %6589 = bitcast i16* %6588 to <8 x i16>*
  %6590 = load <8 x i16>, <8 x i16>* %6589, align 2, !tbaa !385
  %6591 = getelementptr inbounds i16, i16* %6572, i64 -16
  %6592 = bitcast i16* %6591 to <8 x i16>*
  %6593 = load <8 x i16>, <8 x i16>* %6592, align 2, !tbaa !385
  %6594 = getelementptr inbounds i16, i16* %6572, i64 -8
  %6595 = bitcast i16* %6594 to <8 x i16>*
  %6596 = load <8 x i16>, <8 x i16>* %6595, align 2, !tbaa !385
  %6597 = add i64 %73, 5
  %6598 = and i64 %6597, 7
  %narrow130 = add nuw nsw i64 %6598, 1
  %6599 = mul nsw i64 %narrow130, %50
  %6600 = getelementptr inbounds i16, i16* %blur_x, i64 %6599
  %6601 = getelementptr inbounds i16, i16* %6600, i64 -64
  %6602 = bitcast i16* %6601 to <8 x i16>*
  %6603 = load <8 x i16>, <8 x i16>* %6602, align 2, !tbaa !385
  %6604 = getelementptr inbounds i16, i16* %6600, i64 -56
  %6605 = bitcast i16* %6604 to <8 x i16>*
  %6606 = load <8 x i16>, <8 x i16>* %6605, align 2, !tbaa !385
  %6607 = getelementptr inbounds i16, i16* %6600, i64 -48
  %6608 = bitcast i16* %6607 to <8 x i16>*
  %6609 = load <8 x i16>, <8 x i16>* %6608, align 2, !tbaa !385
  %6610 = getelementptr inbounds i16, i16* %6600, i64 -40
  %6611 = bitcast i16* %6610 to <8 x i16>*
  %6612 = load <8 x i16>, <8 x i16>* %6611, align 2, !tbaa !385
  %6613 = getelementptr inbounds i16, i16* %6600, i64 -32
  %6614 = bitcast i16* %6613 to <8 x i16>*
  %6615 = load <8 x i16>, <8 x i16>* %6614, align 2, !tbaa !385
  %6616 = getelementptr inbounds i16, i16* %6600, i64 -24
  %6617 = bitcast i16* %6616 to <8 x i16>*
  %6618 = load <8 x i16>, <8 x i16>* %6617, align 2, !tbaa !385
  %6619 = getelementptr inbounds i16, i16* %6600, i64 -16
  %6620 = bitcast i16* %6619 to <8 x i16>*
  %6621 = load <8 x i16>, <8 x i16>* %6620, align 2, !tbaa !385
  %6622 = getelementptr inbounds i16, i16* %6600, i64 -8
  %6623 = bitcast i16* %6622 to <8 x i16>*
  %6624 = load <8 x i16>, <8 x i16>* %6623, align 2, !tbaa !385
  %6625 = add i64 %73, 6
  %6626 = and i64 %6625, 7
  %narrow131 = add nuw nsw i64 %6626, 1
  %6627 = mul nsw i64 %narrow131, %50
  %6628 = getelementptr inbounds i16, i16* %blur_x, i64 %6627
  %6629 = getelementptr inbounds i16, i16* %6628, i64 -64
  %6630 = bitcast i16* %6629 to <8 x i16>*
  %6631 = load <8 x i16>, <8 x i16>* %6630, align 2, !tbaa !385
  %6632 = getelementptr inbounds i16, i16* %6628, i64 -56
  %6633 = bitcast i16* %6632 to <8 x i16>*
  %6634 = load <8 x i16>, <8 x i16>* %6633, align 2, !tbaa !385
  %6635 = getelementptr inbounds i16, i16* %6628, i64 -48
  %6636 = bitcast i16* %6635 to <8 x i16>*
  %6637 = load <8 x i16>, <8 x i16>* %6636, align 2, !tbaa !385
  %6638 = getelementptr inbounds i16, i16* %6628, i64 -40
  %6639 = bitcast i16* %6638 to <8 x i16>*
  %6640 = load <8 x i16>, <8 x i16>* %6639, align 2, !tbaa !385
  %6641 = getelementptr inbounds i16, i16* %6628, i64 -32
  %6642 = bitcast i16* %6641 to <8 x i16>*
  %6643 = load <8 x i16>, <8 x i16>* %6642, align 2, !tbaa !385
  %6644 = getelementptr inbounds i16, i16* %6628, i64 -24
  %6645 = bitcast i16* %6644 to <8 x i16>*
  %6646 = load <8 x i16>, <8 x i16>* %6645, align 2, !tbaa !385
  %6647 = getelementptr inbounds i16, i16* %6628, i64 -16
  %6648 = bitcast i16* %6647 to <8 x i16>*
  %6649 = load <8 x i16>, <8 x i16>* %6648, align 2, !tbaa !385
  %6650 = getelementptr inbounds i16, i16* %6628, i64 -8
  %6651 = bitcast i16* %6650 to <8 x i16>*
  %6652 = load <8 x i16>, <8 x i16>* %6651, align 2, !tbaa !385
  %6653 = and i64 %73, 7
  %narrow132 = add nuw nsw i64 %6653, 1
  %6654 = mul nsw i64 %narrow132, %50
  %6655 = getelementptr inbounds i16, i16* %blur_x, i64 %6654
  %6656 = getelementptr inbounds i16, i16* %6655, i64 -64
  %6657 = bitcast i16* %6656 to <8 x i16>*
  %6658 = load <8 x i16>, <8 x i16>* %6657, align 2, !tbaa !385
  %6659 = getelementptr inbounds i16, i16* %6655, i64 -56
  %6660 = bitcast i16* %6659 to <8 x i16>*
  %6661 = load <8 x i16>, <8 x i16>* %6660, align 2, !tbaa !385
  %6662 = getelementptr inbounds i16, i16* %6655, i64 -48
  %6663 = bitcast i16* %6662 to <8 x i16>*
  %6664 = load <8 x i16>, <8 x i16>* %6663, align 2, !tbaa !385
  %6665 = getelementptr inbounds i16, i16* %6655, i64 -40
  %6666 = bitcast i16* %6665 to <8 x i16>*
  %6667 = load <8 x i16>, <8 x i16>* %6666, align 2, !tbaa !385
  %6668 = getelementptr inbounds i16, i16* %6655, i64 -32
  %6669 = bitcast i16* %6668 to <8 x i16>*
  %6670 = load <8 x i16>, <8 x i16>* %6669, align 2, !tbaa !385
  %6671 = getelementptr inbounds i16, i16* %6655, i64 -24
  %6672 = bitcast i16* %6671 to <8 x i16>*
  %6673 = load <8 x i16>, <8 x i16>* %6672, align 2, !tbaa !385
  %6674 = getelementptr inbounds i16, i16* %6655, i64 -16
  %6675 = bitcast i16* %6674 to <8 x i16>*
  %6676 = load <8 x i16>, <8 x i16>* %6675, align 2, !tbaa !385
  %6677 = getelementptr inbounds i16, i16* %6655, i64 -8
  %6678 = bitcast i16* %6677 to <8 x i16>*
  %6679 = load <8 x i16>, <8 x i16>* %6678, align 2, !tbaa !385
  %6680 = add i64 %73, 7
  %6681 = and i64 %6680, 7
  %narrow133 = add nuw nsw i64 %6681, 1
  %6682 = mul nsw i64 %narrow133, %50
  %6683 = getelementptr inbounds i16, i16* %blur_x, i64 %6682
  %6684 = getelementptr inbounds i16, i16* %6683, i64 -64
  %6685 = bitcast i16* %6684 to <8 x i16>*
  %6686 = load <8 x i16>, <8 x i16>* %6685, align 2, !tbaa !385
  %6687 = getelementptr inbounds i16, i16* %6683, i64 -56
  %6688 = bitcast i16* %6687 to <8 x i16>*
  %6689 = load <8 x i16>, <8 x i16>* %6688, align 2, !tbaa !385
  %6690 = getelementptr inbounds i16, i16* %6683, i64 -48
  %6691 = bitcast i16* %6690 to <8 x i16>*
  %6692 = load <8 x i16>, <8 x i16>* %6691, align 2, !tbaa !385
  %6693 = getelementptr inbounds i16, i16* %6683, i64 -40
  %6694 = bitcast i16* %6693 to <8 x i16>*
  %6695 = load <8 x i16>, <8 x i16>* %6694, align 2, !tbaa !385
  %6696 = getelementptr inbounds i16, i16* %6683, i64 -32
  %6697 = bitcast i16* %6696 to <8 x i16>*
  %6698 = load <8 x i16>, <8 x i16>* %6697, align 2, !tbaa !385
  %6699 = getelementptr inbounds i16, i16* %6683, i64 -24
  %6700 = bitcast i16* %6699 to <8 x i16>*
  %6701 = load <8 x i16>, <8 x i16>* %6700, align 2, !tbaa !385
  %6702 = getelementptr inbounds i16, i16* %6683, i64 -16
  %6703 = bitcast i16* %6702 to <8 x i16>*
  %6704 = load <8 x i16>, <8 x i16>* %6703, align 2, !tbaa !385
  %6705 = getelementptr inbounds i16, i16* %6683, i64 -8
  %6706 = bitcast i16* %6705 to <8 x i16>*
  %6707 = load <8 x i16>, <8 x i16>* %6706, align 2, !tbaa !385
  %6708 = add <8 x i16> %6547, %6519
  %6709 = add <8 x i16> %6708, %6575
  %6710 = add <8 x i16> %6709, %6603
  %6711 = add <8 x i16> %6710, %6631
  %6712 = add <8 x i16> %6711, %6658
  %6713 = add <8 x i16> %6712, %6686
  %6714 = add <8 x i16> %6550, %6522
  %6715 = add <8 x i16> %6714, %6578
  %6716 = add <8 x i16> %6715, %6606
  %6717 = add <8 x i16> %6716, %6634
  %6718 = add <8 x i16> %6717, %6661
  %6719 = add <8 x i16> %6718, %6689
  %6720 = add <8 x i16> %6553, %6525
  %6721 = add <8 x i16> %6720, %6581
  %6722 = add <8 x i16> %6721, %6609
  %6723 = add <8 x i16> %6722, %6637
  %6724 = add <8 x i16> %6723, %6664
  %6725 = add <8 x i16> %6724, %6692
  %6726 = add <8 x i16> %6556, %6528
  %6727 = add <8 x i16> %6726, %6584
  %6728 = add <8 x i16> %6727, %6612
  %6729 = add <8 x i16> %6728, %6640
  %6730 = add <8 x i16> %6729, %6667
  %6731 = add <8 x i16> %6730, %6695
  %6732 = add <8 x i16> %6559, %6531
  %6733 = add <8 x i16> %6732, %6587
  %6734 = add <8 x i16> %6733, %6615
  %6735 = add <8 x i16> %6734, %6643
  %6736 = add <8 x i16> %6735, %6670
  %6737 = add <8 x i16> %6736, %6698
  %6738 = add <8 x i16> %6562, %6534
  %6739 = add <8 x i16> %6738, %6590
  %6740 = add <8 x i16> %6739, %6618
  %6741 = add <8 x i16> %6740, %6646
  %6742 = add <8 x i16> %6741, %6673
  %6743 = add <8 x i16> %6742, %6701
  %6744 = add <8 x i16> %6565, %6537
  %6745 = add <8 x i16> %6744, %6593
  %6746 = add <8 x i16> %6745, %6621
  %6747 = add <8 x i16> %6746, %6649
  %6748 = add <8 x i16> %6747, %6676
  %6749 = add <8 x i16> %6748, %6704
  %6750 = add <8 x i16> %6568, %6540
  %6751 = add <8 x i16> %6750, %6596
  %6752 = add <8 x i16> %6751, %6624
  %6753 = add <8 x i16> %6752, %6652
  %6754 = add <8 x i16> %6753, %6679
  %6755 = add <8 x i16> %6754, %6707
  %6756 = shufflevector <8 x i16> %6755, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6757 = shufflevector <16 x i16> %6756, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6758 = shufflevector <32 x i16> %6757, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6759 = shufflevector <8 x i16> %6713, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6760 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6759, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6761 = shufflevector <8 x i16> %6713, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6762 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6761, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6763 = shufflevector <8 x i16> %6719, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6764 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6763, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6765 = shufflevector <8 x i16> %6719, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6766 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6765, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6767 = shufflevector <8 x i16> %6725, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6768 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6767, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6769 = shufflevector <8 x i16> %6725, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6770 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6769, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6771 = shufflevector <8 x i16> %6731, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6772 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6771, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6773 = shufflevector <8 x i16> %6731, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6774 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6773, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6775 = shufflevector <8 x i16> %6737, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6776 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6775, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6777 = shufflevector <8 x i16> %6737, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6778 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6777, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6779 = shufflevector <8 x i16> %6743, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6780 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6779, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6781 = shufflevector <8 x i16> %6743, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6782 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6781, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6783 = shufflevector <8 x i16> %6749, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6784 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6783, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6785 = shufflevector <8 x i16> %6749, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6786 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6785, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6787 = shufflevector <8 x i16> %6755, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6788 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6787, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6789 = shufflevector <8 x i16> %6755, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6790 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6789, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6791 = shufflevector <4 x i32> %6760, <4 x i32> %6762, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6792 = shufflevector <4 x i32> %6764, <4 x i32> %6766, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6793 = shufflevector <4 x i32> %6768, <4 x i32> %6770, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6794 = shufflevector <4 x i32> %6772, <4 x i32> %6774, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6795 = shufflevector <4 x i32> %6776, <4 x i32> %6778, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6796 = shufflevector <4 x i32> %6780, <4 x i32> %6782, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6797 = shufflevector <4 x i32> %6784, <4 x i32> %6786, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6798 = shufflevector <4 x i32> %6788, <4 x i32> %6790, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6799 = shufflevector <8 x i32> %6791, <8 x i32> %6792, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6800 = shufflevector <8 x i32> %6793, <8 x i32> %6794, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6801 = shufflevector <8 x i32> %6795, <8 x i32> %6796, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6802 = shufflevector <8 x i32> %6797, <8 x i32> %6798, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6803 = shufflevector <16 x i32> %6799, <16 x i32> %6800, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6804 = shufflevector <16 x i32> %6801, <16 x i32> %6802, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6805 = shufflevector <32 x i32> %6803, <32 x i32> %6804, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6806 = lshr <64 x i32> %6805, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %6807 = trunc <64 x i32> %6806 to <64 x i16>
  %6808 = shufflevector <64 x i16> %6807, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6809 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6808, <8 x i16> %6713)
  %6810 = shufflevector <64 x i16> %6807, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6811 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6810, <8 x i16> %6719)
  %6812 = shufflevector <64 x i16> %6807, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6813 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6812, <8 x i16> %6725)
  %6814 = shufflevector <64 x i16> %6807, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6815 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6814, <8 x i16> %6731)
  %6816 = shufflevector <64 x i16> %6807, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %6817 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6816, <8 x i16> %6737)
  %6818 = shufflevector <64 x i16> %6807, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %6819 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6818, <8 x i16> %6743)
  %6820 = shufflevector <64 x i16> %6807, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %6821 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6820, <8 x i16> %6749)
  %6822 = shufflevector <64 x i16> %6807, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6823 = shufflevector <64 x i16> %6758, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6824 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6822, <8 x i16> %6823)
  %6825 = shufflevector <8 x i16> %6809, <8 x i16> %6811, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6826 = shufflevector <8 x i16> %6813, <8 x i16> %6815, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6827 = shufflevector <8 x i16> %6817, <8 x i16> %6819, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6828 = shufflevector <8 x i16> %6821, <8 x i16> %6824, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6829 = shufflevector <16 x i16> %6825, <16 x i16> %6826, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6830 = shufflevector <16 x i16> %6827, <16 x i16> %6828, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6831 = shufflevector <32 x i16> %6829, <32 x i16> %6830, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6832 = lshr <64 x i16> %6831, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6833 = add nsw i64 %73, -6
  %6834 = mul nsw i64 %6833, %55
  %6835 = add nsw i64 %6834, %58
  %6836 = getelementptr inbounds i16, i16* %56, i64 %6835
  %6837 = getelementptr inbounds i16, i16* %6836, i64 -64
  %6838 = bitcast i16* %6837 to <8 x i16>*
  %6839 = getelementptr inbounds i16, i16* %6836, i64 -56
  %6840 = bitcast i16* %6839 to <8 x i16>*
  %6841 = getelementptr inbounds i16, i16* %6836, i64 -48
  %6842 = bitcast i16* %6841 to <8 x i16>*
  %6843 = getelementptr inbounds i16, i16* %6836, i64 -40
  %6844 = bitcast i16* %6843 to <8 x i16>*
  %6845 = getelementptr inbounds i16, i16* %6836, i64 -32
  %6846 = bitcast i16* %6845 to <8 x i16>*
  %6847 = getelementptr inbounds i16, i16* %6836, i64 -24
  %6848 = bitcast i16* %6847 to <8 x i16>*
  %6849 = getelementptr inbounds i16, i16* %6836, i64 -16
  %6850 = bitcast i16* %6849 to <8 x i16>*
  %6851 = getelementptr inbounds i16, i16* %6836, i64 -8
  %6852 = shufflevector <64 x i16> %6832, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6853 = shufflevector <64 x i16> %6832, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6854 = shufflevector <64 x i16> %6832, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6855 = shufflevector <64 x i16> %6832, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6856 = shufflevector <64 x i16> %6832, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %6857 = shufflevector <64 x i16> %6832, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %6858 = shufflevector <64 x i16> %6832, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %6859 = shufflevector <64 x i16> %6832, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6860 = bitcast i16* %6851 to <8 x i16>*
  store <8 x i16> %6852, <8 x i16>* %6838, align 2, !tbaa !387
  store <8 x i16> %6853, <8 x i16>* %6840, align 2, !tbaa !387
  store <8 x i16> %6854, <8 x i16>* %6842, align 2, !tbaa !387
  store <8 x i16> %6855, <8 x i16>* %6844, align 2, !tbaa !387
  store <8 x i16> %6856, <8 x i16>* %6846, align 2, !tbaa !387
  store <8 x i16> %6857, <8 x i16>* %6848, align 2, !tbaa !387
  store <8 x i16> %6858, <8 x i16>* %6850, align 2, !tbaa !387
  store <8 x i16> %6859, <8 x i16>* %6860, align 2, !tbaa !387
  br label %after_bb6

"for blur_y.s0.y.yi.$n.rebased14":                ; preds = %next_bb, %after_bb22
  %indvars.iv = phi i64 [ 0, %next_bb ], [ %indvars.iv.next, %after_bb22 ]
  %6861 = add nsw i64 %indvars.iv, %71
  %6862 = add nsw i64 %6861, 1
  %6863 = icmp slt i64 %6862, %72
  %6864 = trunc i64 %6862 to i32
  %a13 = select i1 %6863, i32 %6864, i32 %b13
  %6865 = trunc i64 %6861 to i32
  %6866 = and i32 %6865, 7
  br i1 %62, label %"for blur_x.s0.x.x18.preheader", label %"end for blur_x.s0.x.x19", !prof !381

"for blur_x.s0.x.x18.preheader":                  ; preds = %"for blur_y.s0.y.yi.$n.rebased14"
  %6867 = mul nsw i32 %6866, %a10
  %t287 = sub nsw i32 %6867, %t274
  %6868 = icmp sgt i32 %a13, 1
  %6869 = select i1 %6868, i32 %a13, i32 1
  %6870 = add nsw i32 %6869, -1
  %6871 = mul nsw i32 %6870, %input.stride.1
  %6872 = insertelement <64 x i32> undef, i32 %6871, i32 0
  %t257 = shufflevector <64 x i32> %6872, <64 x i32> undef, <64 x i32> zeroinitializer
  %6873 = sext i32 %t287 to i64
  br label %"for blur_x.s0.x.x18"

"end for blur_y.s0.y.yi.$n.rebased15":            ; preds = %after_bb22
  %tobool.not.i140.not = icmp eq i8* %37, null
  br i1 %tobool.not.i140.not, label %after_bb, label %if.then.i141

if.then.i141:                                     ; preds = %"end for blur_y.s0.y.yi.$n.rebased15"
  tail call void @halide_free(i8* %__user_context, i8* nonnull %37) #13
  br label %after_bb

"for blur_x.s0.x.x18":                            ; preds = %"for blur_x.s0.x.x18.preheader", %"for blur_x.s0.x.x18"
  %blur_x.s0.x.x20 = phi i32 [ %9740, %"for blur_x.s0.x.x18" ], [ 0, %"for blur_x.s0.x.x18.preheader" ]
  %6874 = shl nsw i32 %blur_x.s0.x.x20, 6
  %a12 = add nsw i32 %6874, %t274
  %6875 = icmp slt i32 %a12, %b14
  %blur_x.s0.x.v1.base.s21 = select i1 %6875, i32 %a12, i32 %b14
  %6876 = add nsw i32 %blur_x.s0.x.v1.base.s21, -63
  %6877 = insertelement <64 x i32> undef, i32 %6876, i32 0
  %6878 = shufflevector <64 x i32> %6877, <64 x i32> undef, <64 x i32> zeroinitializer
  %6879 = add nsw <64 x i32> %6878, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6880 = shufflevector <64 x i32> %6879, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6881 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6880, <4 x i32> %65)
  %6882 = shufflevector <64 x i32> %6879, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6883 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6882, <4 x i32> %65)
  %6884 = shufflevector <64 x i32> %6879, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6885 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6884, <4 x i32> %65)
  %6886 = shufflevector <64 x i32> %6879, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %6887 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6886, <4 x i32> %65)
  %6888 = shufflevector <64 x i32> %6879, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %6889 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6888, <4 x i32> %65)
  %6890 = shufflevector <64 x i32> %6879, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %6891 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6890, <4 x i32> %65)
  %6892 = shufflevector <64 x i32> %6879, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %6893 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6892, <4 x i32> %65)
  %6894 = shufflevector <64 x i32> %6879, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %6895 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6894, <4 x i32> %65)
  %6896 = shufflevector <64 x i32> %6879, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %6897 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6896, <4 x i32> %65)
  %6898 = shufflevector <64 x i32> %6879, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %6899 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6898, <4 x i32> %65)
  %6900 = shufflevector <64 x i32> %6879, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %6901 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6900, <4 x i32> %65)
  %6902 = shufflevector <64 x i32> %6879, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %6903 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6902, <4 x i32> %65)
  %6904 = shufflevector <64 x i32> %6879, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %6905 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6904, <4 x i32> %65)
  %6906 = shufflevector <64 x i32> %6879, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %6907 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6906, <4 x i32> %65)
  %6908 = shufflevector <64 x i32> %6879, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %6909 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6908, <4 x i32> %65)
  %6910 = shufflevector <64 x i32> %6879, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %6911 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6910, <4 x i32> %65)
  %6912 = shufflevector <4 x i32> %6911, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %6913 = shufflevector <8 x i32> %6912, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %6914 = shufflevector <16 x i32> %6913, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %6915 = shufflevector <32 x i32> %6914, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %6916 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6881, <4 x i32> zeroinitializer)
  %6917 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6883, <4 x i32> zeroinitializer)
  %6918 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6885, <4 x i32> zeroinitializer)
  %6919 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6887, <4 x i32> zeroinitializer)
  %6920 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6889, <4 x i32> zeroinitializer)
  %6921 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6891, <4 x i32> zeroinitializer)
  %6922 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6893, <4 x i32> zeroinitializer)
  %6923 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6895, <4 x i32> zeroinitializer)
  %6924 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6897, <4 x i32> zeroinitializer)
  %6925 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6899, <4 x i32> zeroinitializer)
  %6926 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6901, <4 x i32> zeroinitializer)
  %6927 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6903, <4 x i32> zeroinitializer)
  %6928 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6905, <4 x i32> zeroinitializer)
  %6929 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6907, <4 x i32> zeroinitializer)
  %6930 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6909, <4 x i32> zeroinitializer)
  %6931 = shufflevector <64 x i32> %6915, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %6932 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6931, <4 x i32> zeroinitializer)
  %6933 = shufflevector <4 x i32> %6916, <4 x i32> %6917, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6934 = shufflevector <4 x i32> %6918, <4 x i32> %6919, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6935 = shufflevector <4 x i32> %6920, <4 x i32> %6921, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6936 = shufflevector <4 x i32> %6922, <4 x i32> %6923, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6937 = shufflevector <4 x i32> %6924, <4 x i32> %6925, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6938 = shufflevector <4 x i32> %6926, <4 x i32> %6927, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6939 = shufflevector <4 x i32> %6928, <4 x i32> %6929, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6940 = shufflevector <4 x i32> %6930, <4 x i32> %6932, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6941 = shufflevector <8 x i32> %6933, <8 x i32> %6934, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6942 = shufflevector <8 x i32> %6935, <8 x i32> %6936, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6943 = shufflevector <8 x i32> %6937, <8 x i32> %6938, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6944 = shufflevector <8 x i32> %6939, <8 x i32> %6940, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6945 = shufflevector <16 x i32> %6941, <16 x i32> %6942, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6946 = shufflevector <16 x i32> %6943, <16 x i32> %6944, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6947 = shufflevector <32 x i32> %6945, <32 x i32> %6946, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6948 = add nsw <64 x i32> %6947, %t257
  %6949 = extractelement <64 x i32> %6948, i32 0
  %6950 = sext i32 %6949 to i64
  %6951 = getelementptr inbounds i16, i16* %66, i64 %6950
  %6952 = load i16, i16* %6951, align 2, !tbaa !382
  %6953 = insertelement <64 x i16> undef, i16 %6952, i32 0
  %6954 = extractelement <64 x i32> %6948, i32 1
  %6955 = sext i32 %6954 to i64
  %6956 = getelementptr inbounds i16, i16* %66, i64 %6955
  %6957 = load i16, i16* %6956, align 2, !tbaa !382
  %6958 = insertelement <64 x i16> %6953, i16 %6957, i32 1
  %6959 = extractelement <64 x i32> %6948, i32 2
  %6960 = sext i32 %6959 to i64
  %6961 = getelementptr inbounds i16, i16* %66, i64 %6960
  %6962 = load i16, i16* %6961, align 2, !tbaa !382
  %6963 = insertelement <64 x i16> %6958, i16 %6962, i32 2
  %6964 = extractelement <64 x i32> %6948, i32 3
  %6965 = sext i32 %6964 to i64
  %6966 = getelementptr inbounds i16, i16* %66, i64 %6965
  %6967 = load i16, i16* %6966, align 2, !tbaa !382
  %6968 = insertelement <64 x i16> %6963, i16 %6967, i32 3
  %6969 = extractelement <64 x i32> %6948, i32 4
  %6970 = sext i32 %6969 to i64
  %6971 = getelementptr inbounds i16, i16* %66, i64 %6970
  %6972 = load i16, i16* %6971, align 2, !tbaa !382
  %6973 = insertelement <64 x i16> %6968, i16 %6972, i32 4
  %6974 = extractelement <64 x i32> %6948, i32 5
  %6975 = sext i32 %6974 to i64
  %6976 = getelementptr inbounds i16, i16* %66, i64 %6975
  %6977 = load i16, i16* %6976, align 2, !tbaa !382
  %6978 = insertelement <64 x i16> %6973, i16 %6977, i32 5
  %6979 = extractelement <64 x i32> %6948, i32 6
  %6980 = sext i32 %6979 to i64
  %6981 = getelementptr inbounds i16, i16* %66, i64 %6980
  %6982 = load i16, i16* %6981, align 2, !tbaa !382
  %6983 = insertelement <64 x i16> %6978, i16 %6982, i32 6
  %6984 = extractelement <64 x i32> %6948, i32 7
  %6985 = sext i32 %6984 to i64
  %6986 = getelementptr inbounds i16, i16* %66, i64 %6985
  %6987 = load i16, i16* %6986, align 2, !tbaa !382
  %6988 = insertelement <64 x i16> %6983, i16 %6987, i32 7
  %6989 = extractelement <64 x i32> %6948, i32 8
  %6990 = sext i32 %6989 to i64
  %6991 = getelementptr inbounds i16, i16* %66, i64 %6990
  %6992 = load i16, i16* %6991, align 2, !tbaa !382
  %6993 = insertelement <64 x i16> %6988, i16 %6992, i32 8
  %6994 = extractelement <64 x i32> %6948, i32 9
  %6995 = sext i32 %6994 to i64
  %6996 = getelementptr inbounds i16, i16* %66, i64 %6995
  %6997 = load i16, i16* %6996, align 2, !tbaa !382
  %6998 = insertelement <64 x i16> %6993, i16 %6997, i32 9
  %6999 = extractelement <64 x i32> %6948, i32 10
  %7000 = sext i32 %6999 to i64
  %7001 = getelementptr inbounds i16, i16* %66, i64 %7000
  %7002 = load i16, i16* %7001, align 2, !tbaa !382
  %7003 = insertelement <64 x i16> %6998, i16 %7002, i32 10
  %7004 = extractelement <64 x i32> %6948, i32 11
  %7005 = sext i32 %7004 to i64
  %7006 = getelementptr inbounds i16, i16* %66, i64 %7005
  %7007 = load i16, i16* %7006, align 2, !tbaa !382
  %7008 = insertelement <64 x i16> %7003, i16 %7007, i32 11
  %7009 = extractelement <64 x i32> %6948, i32 12
  %7010 = sext i32 %7009 to i64
  %7011 = getelementptr inbounds i16, i16* %66, i64 %7010
  %7012 = load i16, i16* %7011, align 2, !tbaa !382
  %7013 = insertelement <64 x i16> %7008, i16 %7012, i32 12
  %7014 = extractelement <64 x i32> %6948, i32 13
  %7015 = sext i32 %7014 to i64
  %7016 = getelementptr inbounds i16, i16* %66, i64 %7015
  %7017 = load i16, i16* %7016, align 2, !tbaa !382
  %7018 = insertelement <64 x i16> %7013, i16 %7017, i32 13
  %7019 = extractelement <64 x i32> %6948, i32 14
  %7020 = sext i32 %7019 to i64
  %7021 = getelementptr inbounds i16, i16* %66, i64 %7020
  %7022 = load i16, i16* %7021, align 2, !tbaa !382
  %7023 = insertelement <64 x i16> %7018, i16 %7022, i32 14
  %7024 = extractelement <64 x i32> %6948, i32 15
  %7025 = sext i32 %7024 to i64
  %7026 = getelementptr inbounds i16, i16* %66, i64 %7025
  %7027 = load i16, i16* %7026, align 2, !tbaa !382
  %7028 = insertelement <64 x i16> %7023, i16 %7027, i32 15
  %7029 = extractelement <64 x i32> %6948, i32 16
  %7030 = sext i32 %7029 to i64
  %7031 = getelementptr inbounds i16, i16* %66, i64 %7030
  %7032 = load i16, i16* %7031, align 2, !tbaa !382
  %7033 = insertelement <64 x i16> %7028, i16 %7032, i32 16
  %7034 = extractelement <64 x i32> %6948, i32 17
  %7035 = sext i32 %7034 to i64
  %7036 = getelementptr inbounds i16, i16* %66, i64 %7035
  %7037 = load i16, i16* %7036, align 2, !tbaa !382
  %7038 = insertelement <64 x i16> %7033, i16 %7037, i32 17
  %7039 = extractelement <64 x i32> %6948, i32 18
  %7040 = sext i32 %7039 to i64
  %7041 = getelementptr inbounds i16, i16* %66, i64 %7040
  %7042 = load i16, i16* %7041, align 2, !tbaa !382
  %7043 = insertelement <64 x i16> %7038, i16 %7042, i32 18
  %7044 = extractelement <64 x i32> %6948, i32 19
  %7045 = sext i32 %7044 to i64
  %7046 = getelementptr inbounds i16, i16* %66, i64 %7045
  %7047 = load i16, i16* %7046, align 2, !tbaa !382
  %7048 = insertelement <64 x i16> %7043, i16 %7047, i32 19
  %7049 = extractelement <64 x i32> %6948, i32 20
  %7050 = sext i32 %7049 to i64
  %7051 = getelementptr inbounds i16, i16* %66, i64 %7050
  %7052 = load i16, i16* %7051, align 2, !tbaa !382
  %7053 = insertelement <64 x i16> %7048, i16 %7052, i32 20
  %7054 = extractelement <64 x i32> %6948, i32 21
  %7055 = sext i32 %7054 to i64
  %7056 = getelementptr inbounds i16, i16* %66, i64 %7055
  %7057 = load i16, i16* %7056, align 2, !tbaa !382
  %7058 = insertelement <64 x i16> %7053, i16 %7057, i32 21
  %7059 = extractelement <64 x i32> %6948, i32 22
  %7060 = sext i32 %7059 to i64
  %7061 = getelementptr inbounds i16, i16* %66, i64 %7060
  %7062 = load i16, i16* %7061, align 2, !tbaa !382
  %7063 = insertelement <64 x i16> %7058, i16 %7062, i32 22
  %7064 = extractelement <64 x i32> %6948, i32 23
  %7065 = sext i32 %7064 to i64
  %7066 = getelementptr inbounds i16, i16* %66, i64 %7065
  %7067 = load i16, i16* %7066, align 2, !tbaa !382
  %7068 = insertelement <64 x i16> %7063, i16 %7067, i32 23
  %7069 = extractelement <64 x i32> %6948, i32 24
  %7070 = sext i32 %7069 to i64
  %7071 = getelementptr inbounds i16, i16* %66, i64 %7070
  %7072 = load i16, i16* %7071, align 2, !tbaa !382
  %7073 = insertelement <64 x i16> %7068, i16 %7072, i32 24
  %7074 = extractelement <64 x i32> %6948, i32 25
  %7075 = sext i32 %7074 to i64
  %7076 = getelementptr inbounds i16, i16* %66, i64 %7075
  %7077 = load i16, i16* %7076, align 2, !tbaa !382
  %7078 = insertelement <64 x i16> %7073, i16 %7077, i32 25
  %7079 = extractelement <64 x i32> %6948, i32 26
  %7080 = sext i32 %7079 to i64
  %7081 = getelementptr inbounds i16, i16* %66, i64 %7080
  %7082 = load i16, i16* %7081, align 2, !tbaa !382
  %7083 = insertelement <64 x i16> %7078, i16 %7082, i32 26
  %7084 = extractelement <64 x i32> %6948, i32 27
  %7085 = sext i32 %7084 to i64
  %7086 = getelementptr inbounds i16, i16* %66, i64 %7085
  %7087 = load i16, i16* %7086, align 2, !tbaa !382
  %7088 = insertelement <64 x i16> %7083, i16 %7087, i32 27
  %7089 = extractelement <64 x i32> %6948, i32 28
  %7090 = sext i32 %7089 to i64
  %7091 = getelementptr inbounds i16, i16* %66, i64 %7090
  %7092 = load i16, i16* %7091, align 2, !tbaa !382
  %7093 = insertelement <64 x i16> %7088, i16 %7092, i32 28
  %7094 = extractelement <64 x i32> %6948, i32 29
  %7095 = sext i32 %7094 to i64
  %7096 = getelementptr inbounds i16, i16* %66, i64 %7095
  %7097 = load i16, i16* %7096, align 2, !tbaa !382
  %7098 = insertelement <64 x i16> %7093, i16 %7097, i32 29
  %7099 = extractelement <64 x i32> %6948, i32 30
  %7100 = sext i32 %7099 to i64
  %7101 = getelementptr inbounds i16, i16* %66, i64 %7100
  %7102 = load i16, i16* %7101, align 2, !tbaa !382
  %7103 = insertelement <64 x i16> %7098, i16 %7102, i32 30
  %7104 = extractelement <64 x i32> %6948, i32 31
  %7105 = sext i32 %7104 to i64
  %7106 = getelementptr inbounds i16, i16* %66, i64 %7105
  %7107 = load i16, i16* %7106, align 2, !tbaa !382
  %7108 = insertelement <64 x i16> %7103, i16 %7107, i32 31
  %7109 = extractelement <64 x i32> %6948, i32 32
  %7110 = sext i32 %7109 to i64
  %7111 = getelementptr inbounds i16, i16* %66, i64 %7110
  %7112 = load i16, i16* %7111, align 2, !tbaa !382
  %7113 = insertelement <64 x i16> %7108, i16 %7112, i32 32
  %7114 = extractelement <64 x i32> %6948, i32 33
  %7115 = sext i32 %7114 to i64
  %7116 = getelementptr inbounds i16, i16* %66, i64 %7115
  %7117 = load i16, i16* %7116, align 2, !tbaa !382
  %7118 = insertelement <64 x i16> %7113, i16 %7117, i32 33
  %7119 = extractelement <64 x i32> %6948, i32 34
  %7120 = sext i32 %7119 to i64
  %7121 = getelementptr inbounds i16, i16* %66, i64 %7120
  %7122 = load i16, i16* %7121, align 2, !tbaa !382
  %7123 = insertelement <64 x i16> %7118, i16 %7122, i32 34
  %7124 = extractelement <64 x i32> %6948, i32 35
  %7125 = sext i32 %7124 to i64
  %7126 = getelementptr inbounds i16, i16* %66, i64 %7125
  %7127 = load i16, i16* %7126, align 2, !tbaa !382
  %7128 = insertelement <64 x i16> %7123, i16 %7127, i32 35
  %7129 = extractelement <64 x i32> %6948, i32 36
  %7130 = sext i32 %7129 to i64
  %7131 = getelementptr inbounds i16, i16* %66, i64 %7130
  %7132 = load i16, i16* %7131, align 2, !tbaa !382
  %7133 = insertelement <64 x i16> %7128, i16 %7132, i32 36
  %7134 = extractelement <64 x i32> %6948, i32 37
  %7135 = sext i32 %7134 to i64
  %7136 = getelementptr inbounds i16, i16* %66, i64 %7135
  %7137 = load i16, i16* %7136, align 2, !tbaa !382
  %7138 = insertelement <64 x i16> %7133, i16 %7137, i32 37
  %7139 = extractelement <64 x i32> %6948, i32 38
  %7140 = sext i32 %7139 to i64
  %7141 = getelementptr inbounds i16, i16* %66, i64 %7140
  %7142 = load i16, i16* %7141, align 2, !tbaa !382
  %7143 = insertelement <64 x i16> %7138, i16 %7142, i32 38
  %7144 = extractelement <64 x i32> %6948, i32 39
  %7145 = sext i32 %7144 to i64
  %7146 = getelementptr inbounds i16, i16* %66, i64 %7145
  %7147 = load i16, i16* %7146, align 2, !tbaa !382
  %7148 = insertelement <64 x i16> %7143, i16 %7147, i32 39
  %7149 = extractelement <64 x i32> %6948, i32 40
  %7150 = sext i32 %7149 to i64
  %7151 = getelementptr inbounds i16, i16* %66, i64 %7150
  %7152 = load i16, i16* %7151, align 2, !tbaa !382
  %7153 = insertelement <64 x i16> %7148, i16 %7152, i32 40
  %7154 = extractelement <64 x i32> %6948, i32 41
  %7155 = sext i32 %7154 to i64
  %7156 = getelementptr inbounds i16, i16* %66, i64 %7155
  %7157 = load i16, i16* %7156, align 2, !tbaa !382
  %7158 = insertelement <64 x i16> %7153, i16 %7157, i32 41
  %7159 = extractelement <64 x i32> %6948, i32 42
  %7160 = sext i32 %7159 to i64
  %7161 = getelementptr inbounds i16, i16* %66, i64 %7160
  %7162 = load i16, i16* %7161, align 2, !tbaa !382
  %7163 = insertelement <64 x i16> %7158, i16 %7162, i32 42
  %7164 = extractelement <64 x i32> %6948, i32 43
  %7165 = sext i32 %7164 to i64
  %7166 = getelementptr inbounds i16, i16* %66, i64 %7165
  %7167 = load i16, i16* %7166, align 2, !tbaa !382
  %7168 = insertelement <64 x i16> %7163, i16 %7167, i32 43
  %7169 = extractelement <64 x i32> %6948, i32 44
  %7170 = sext i32 %7169 to i64
  %7171 = getelementptr inbounds i16, i16* %66, i64 %7170
  %7172 = load i16, i16* %7171, align 2, !tbaa !382
  %7173 = insertelement <64 x i16> %7168, i16 %7172, i32 44
  %7174 = extractelement <64 x i32> %6948, i32 45
  %7175 = sext i32 %7174 to i64
  %7176 = getelementptr inbounds i16, i16* %66, i64 %7175
  %7177 = load i16, i16* %7176, align 2, !tbaa !382
  %7178 = insertelement <64 x i16> %7173, i16 %7177, i32 45
  %7179 = extractelement <64 x i32> %6948, i32 46
  %7180 = sext i32 %7179 to i64
  %7181 = getelementptr inbounds i16, i16* %66, i64 %7180
  %7182 = load i16, i16* %7181, align 2, !tbaa !382
  %7183 = insertelement <64 x i16> %7178, i16 %7182, i32 46
  %7184 = extractelement <64 x i32> %6948, i32 47
  %7185 = sext i32 %7184 to i64
  %7186 = getelementptr inbounds i16, i16* %66, i64 %7185
  %7187 = load i16, i16* %7186, align 2, !tbaa !382
  %7188 = insertelement <64 x i16> %7183, i16 %7187, i32 47
  %7189 = extractelement <64 x i32> %6948, i32 48
  %7190 = sext i32 %7189 to i64
  %7191 = getelementptr inbounds i16, i16* %66, i64 %7190
  %7192 = load i16, i16* %7191, align 2, !tbaa !382
  %7193 = insertelement <64 x i16> %7188, i16 %7192, i32 48
  %7194 = extractelement <64 x i32> %6948, i32 49
  %7195 = sext i32 %7194 to i64
  %7196 = getelementptr inbounds i16, i16* %66, i64 %7195
  %7197 = load i16, i16* %7196, align 2, !tbaa !382
  %7198 = insertelement <64 x i16> %7193, i16 %7197, i32 49
  %7199 = extractelement <64 x i32> %6948, i32 50
  %7200 = sext i32 %7199 to i64
  %7201 = getelementptr inbounds i16, i16* %66, i64 %7200
  %7202 = load i16, i16* %7201, align 2, !tbaa !382
  %7203 = insertelement <64 x i16> %7198, i16 %7202, i32 50
  %7204 = extractelement <64 x i32> %6948, i32 51
  %7205 = sext i32 %7204 to i64
  %7206 = getelementptr inbounds i16, i16* %66, i64 %7205
  %7207 = load i16, i16* %7206, align 2, !tbaa !382
  %7208 = insertelement <64 x i16> %7203, i16 %7207, i32 51
  %7209 = extractelement <64 x i32> %6948, i32 52
  %7210 = sext i32 %7209 to i64
  %7211 = getelementptr inbounds i16, i16* %66, i64 %7210
  %7212 = load i16, i16* %7211, align 2, !tbaa !382
  %7213 = insertelement <64 x i16> %7208, i16 %7212, i32 52
  %7214 = extractelement <64 x i32> %6948, i32 53
  %7215 = sext i32 %7214 to i64
  %7216 = getelementptr inbounds i16, i16* %66, i64 %7215
  %7217 = load i16, i16* %7216, align 2, !tbaa !382
  %7218 = insertelement <64 x i16> %7213, i16 %7217, i32 53
  %7219 = extractelement <64 x i32> %6948, i32 54
  %7220 = sext i32 %7219 to i64
  %7221 = getelementptr inbounds i16, i16* %66, i64 %7220
  %7222 = load i16, i16* %7221, align 2, !tbaa !382
  %7223 = insertelement <64 x i16> %7218, i16 %7222, i32 54
  %7224 = extractelement <64 x i32> %6948, i32 55
  %7225 = sext i32 %7224 to i64
  %7226 = getelementptr inbounds i16, i16* %66, i64 %7225
  %7227 = load i16, i16* %7226, align 2, !tbaa !382
  %7228 = insertelement <64 x i16> %7223, i16 %7227, i32 55
  %7229 = extractelement <64 x i32> %6948, i32 56
  %7230 = sext i32 %7229 to i64
  %7231 = getelementptr inbounds i16, i16* %66, i64 %7230
  %7232 = load i16, i16* %7231, align 2, !tbaa !382
  %7233 = insertelement <64 x i16> %7228, i16 %7232, i32 56
  %7234 = extractelement <64 x i32> %6948, i32 57
  %7235 = sext i32 %7234 to i64
  %7236 = getelementptr inbounds i16, i16* %66, i64 %7235
  %7237 = load i16, i16* %7236, align 2, !tbaa !382
  %7238 = insertelement <64 x i16> %7233, i16 %7237, i32 57
  %7239 = extractelement <64 x i32> %6948, i32 58
  %7240 = sext i32 %7239 to i64
  %7241 = getelementptr inbounds i16, i16* %66, i64 %7240
  %7242 = load i16, i16* %7241, align 2, !tbaa !382
  %7243 = insertelement <64 x i16> %7238, i16 %7242, i32 58
  %7244 = extractelement <64 x i32> %6948, i32 59
  %7245 = sext i32 %7244 to i64
  %7246 = getelementptr inbounds i16, i16* %66, i64 %7245
  %7247 = load i16, i16* %7246, align 2, !tbaa !382
  %7248 = insertelement <64 x i16> %7243, i16 %7247, i32 59
  %7249 = extractelement <64 x i32> %6948, i32 60
  %7250 = sext i32 %7249 to i64
  %7251 = getelementptr inbounds i16, i16* %66, i64 %7250
  %7252 = load i16, i16* %7251, align 2, !tbaa !382
  %7253 = insertelement <64 x i16> %7248, i16 %7252, i32 60
  %7254 = extractelement <64 x i32> %6948, i32 61
  %7255 = sext i32 %7254 to i64
  %7256 = getelementptr inbounds i16, i16* %66, i64 %7255
  %7257 = load i16, i16* %7256, align 2, !tbaa !382
  %7258 = insertelement <64 x i16> %7253, i16 %7257, i32 61
  %7259 = extractelement <64 x i32> %6948, i32 62
  %7260 = sext i32 %7259 to i64
  %7261 = getelementptr inbounds i16, i16* %66, i64 %7260
  %7262 = load i16, i16* %7261, align 2, !tbaa !382
  %7263 = insertelement <64 x i16> %7258, i16 %7262, i32 62
  %7264 = extractelement <64 x i32> %6948, i32 63
  %7265 = sext i32 %7264 to i64
  %7266 = getelementptr inbounds i16, i16* %66, i64 %7265
  %7267 = load i16, i16* %7266, align 2, !tbaa !382
  %7268 = insertelement <64 x i16> %7263, i16 %7267, i32 63
  %7269 = add nsw i32 %blur_x.s0.x.v1.base.s21, -64
  %7270 = insertelement <64 x i32> undef, i32 %7269, i32 0
  %7271 = shufflevector <64 x i32> %7270, <64 x i32> undef, <64 x i32> zeroinitializer
  %7272 = add nsw <64 x i32> %7271, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7273 = shufflevector <64 x i32> %7272, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7274 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7273, <4 x i32> %65)
  %7275 = shufflevector <64 x i32> %7272, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7276 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7275, <4 x i32> %65)
  %7277 = shufflevector <64 x i32> %7272, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %7278 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7277, <4 x i32> %65)
  %7279 = shufflevector <64 x i32> %7272, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %7280 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7279, <4 x i32> %65)
  %7281 = shufflevector <64 x i32> %7272, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %7282 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7281, <4 x i32> %65)
  %7283 = shufflevector <64 x i32> %7272, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %7284 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7283, <4 x i32> %65)
  %7285 = shufflevector <64 x i32> %7272, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %7286 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7285, <4 x i32> %65)
  %7287 = shufflevector <64 x i32> %7272, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %7288 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7287, <4 x i32> %65)
  %7289 = shufflevector <64 x i32> %7272, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %7290 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7289, <4 x i32> %65)
  %7291 = shufflevector <64 x i32> %7272, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %7292 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7291, <4 x i32> %65)
  %7293 = shufflevector <64 x i32> %7272, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %7294 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7293, <4 x i32> %65)
  %7295 = shufflevector <64 x i32> %7272, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %7296 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7295, <4 x i32> %65)
  %7297 = shufflevector <64 x i32> %7272, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %7298 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7297, <4 x i32> %65)
  %7299 = shufflevector <64 x i32> %7272, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %7300 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7299, <4 x i32> %65)
  %7301 = shufflevector <64 x i32> %7272, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %7302 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7301, <4 x i32> %65)
  %7303 = shufflevector <64 x i32> %7272, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7304 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7303, <4 x i32> %65)
  %7305 = shufflevector <4 x i32> %7304, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %7306 = shufflevector <8 x i32> %7305, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %7307 = shufflevector <16 x i32> %7306, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %7308 = shufflevector <32 x i32> %7307, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %7309 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7274, <4 x i32> zeroinitializer)
  %7310 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7276, <4 x i32> zeroinitializer)
  %7311 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7278, <4 x i32> zeroinitializer)
  %7312 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7280, <4 x i32> zeroinitializer)
  %7313 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7282, <4 x i32> zeroinitializer)
  %7314 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7284, <4 x i32> zeroinitializer)
  %7315 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7286, <4 x i32> zeroinitializer)
  %7316 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7288, <4 x i32> zeroinitializer)
  %7317 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7290, <4 x i32> zeroinitializer)
  %7318 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7292, <4 x i32> zeroinitializer)
  %7319 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7294, <4 x i32> zeroinitializer)
  %7320 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7296, <4 x i32> zeroinitializer)
  %7321 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7298, <4 x i32> zeroinitializer)
  %7322 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7300, <4 x i32> zeroinitializer)
  %7323 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7302, <4 x i32> zeroinitializer)
  %7324 = shufflevector <64 x i32> %7308, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7325 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7324, <4 x i32> zeroinitializer)
  %7326 = shufflevector <4 x i32> %7309, <4 x i32> %7310, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7327 = shufflevector <4 x i32> %7311, <4 x i32> %7312, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7328 = shufflevector <4 x i32> %7313, <4 x i32> %7314, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7329 = shufflevector <4 x i32> %7315, <4 x i32> %7316, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7330 = shufflevector <4 x i32> %7317, <4 x i32> %7318, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7331 = shufflevector <4 x i32> %7319, <4 x i32> %7320, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7332 = shufflevector <4 x i32> %7321, <4 x i32> %7322, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7333 = shufflevector <4 x i32> %7323, <4 x i32> %7325, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7334 = shufflevector <8 x i32> %7326, <8 x i32> %7327, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7335 = shufflevector <8 x i32> %7328, <8 x i32> %7329, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7336 = shufflevector <8 x i32> %7330, <8 x i32> %7331, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7337 = shufflevector <8 x i32> %7332, <8 x i32> %7333, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7338 = shufflevector <16 x i32> %7334, <16 x i32> %7335, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7339 = shufflevector <16 x i32> %7336, <16 x i32> %7337, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7340 = shufflevector <32 x i32> %7338, <32 x i32> %7339, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7341 = add nsw <64 x i32> %7340, %t257
  %7342 = extractelement <64 x i32> %7341, i32 0
  %7343 = sext i32 %7342 to i64
  %7344 = getelementptr inbounds i16, i16* %66, i64 %7343
  %7345 = load i16, i16* %7344, align 2, !tbaa !382
  %7346 = insertelement <64 x i16> undef, i16 %7345, i32 0
  %7347 = extractelement <64 x i32> %7341, i32 1
  %7348 = sext i32 %7347 to i64
  %7349 = getelementptr inbounds i16, i16* %66, i64 %7348
  %7350 = load i16, i16* %7349, align 2, !tbaa !382
  %7351 = insertelement <64 x i16> %7346, i16 %7350, i32 1
  %7352 = extractelement <64 x i32> %7341, i32 2
  %7353 = sext i32 %7352 to i64
  %7354 = getelementptr inbounds i16, i16* %66, i64 %7353
  %7355 = load i16, i16* %7354, align 2, !tbaa !382
  %7356 = insertelement <64 x i16> %7351, i16 %7355, i32 2
  %7357 = extractelement <64 x i32> %7341, i32 3
  %7358 = sext i32 %7357 to i64
  %7359 = getelementptr inbounds i16, i16* %66, i64 %7358
  %7360 = load i16, i16* %7359, align 2, !tbaa !382
  %7361 = insertelement <64 x i16> %7356, i16 %7360, i32 3
  %7362 = extractelement <64 x i32> %7341, i32 4
  %7363 = sext i32 %7362 to i64
  %7364 = getelementptr inbounds i16, i16* %66, i64 %7363
  %7365 = load i16, i16* %7364, align 2, !tbaa !382
  %7366 = insertelement <64 x i16> %7361, i16 %7365, i32 4
  %7367 = extractelement <64 x i32> %7341, i32 5
  %7368 = sext i32 %7367 to i64
  %7369 = getelementptr inbounds i16, i16* %66, i64 %7368
  %7370 = load i16, i16* %7369, align 2, !tbaa !382
  %7371 = insertelement <64 x i16> %7366, i16 %7370, i32 5
  %7372 = extractelement <64 x i32> %7341, i32 6
  %7373 = sext i32 %7372 to i64
  %7374 = getelementptr inbounds i16, i16* %66, i64 %7373
  %7375 = load i16, i16* %7374, align 2, !tbaa !382
  %7376 = insertelement <64 x i16> %7371, i16 %7375, i32 6
  %7377 = extractelement <64 x i32> %7341, i32 7
  %7378 = sext i32 %7377 to i64
  %7379 = getelementptr inbounds i16, i16* %66, i64 %7378
  %7380 = load i16, i16* %7379, align 2, !tbaa !382
  %7381 = insertelement <64 x i16> %7376, i16 %7380, i32 7
  %7382 = extractelement <64 x i32> %7341, i32 8
  %7383 = sext i32 %7382 to i64
  %7384 = getelementptr inbounds i16, i16* %66, i64 %7383
  %7385 = load i16, i16* %7384, align 2, !tbaa !382
  %7386 = insertelement <64 x i16> %7381, i16 %7385, i32 8
  %7387 = extractelement <64 x i32> %7341, i32 9
  %7388 = sext i32 %7387 to i64
  %7389 = getelementptr inbounds i16, i16* %66, i64 %7388
  %7390 = load i16, i16* %7389, align 2, !tbaa !382
  %7391 = insertelement <64 x i16> %7386, i16 %7390, i32 9
  %7392 = extractelement <64 x i32> %7341, i32 10
  %7393 = sext i32 %7392 to i64
  %7394 = getelementptr inbounds i16, i16* %66, i64 %7393
  %7395 = load i16, i16* %7394, align 2, !tbaa !382
  %7396 = insertelement <64 x i16> %7391, i16 %7395, i32 10
  %7397 = extractelement <64 x i32> %7341, i32 11
  %7398 = sext i32 %7397 to i64
  %7399 = getelementptr inbounds i16, i16* %66, i64 %7398
  %7400 = load i16, i16* %7399, align 2, !tbaa !382
  %7401 = insertelement <64 x i16> %7396, i16 %7400, i32 11
  %7402 = extractelement <64 x i32> %7341, i32 12
  %7403 = sext i32 %7402 to i64
  %7404 = getelementptr inbounds i16, i16* %66, i64 %7403
  %7405 = load i16, i16* %7404, align 2, !tbaa !382
  %7406 = insertelement <64 x i16> %7401, i16 %7405, i32 12
  %7407 = extractelement <64 x i32> %7341, i32 13
  %7408 = sext i32 %7407 to i64
  %7409 = getelementptr inbounds i16, i16* %66, i64 %7408
  %7410 = load i16, i16* %7409, align 2, !tbaa !382
  %7411 = insertelement <64 x i16> %7406, i16 %7410, i32 13
  %7412 = extractelement <64 x i32> %7341, i32 14
  %7413 = sext i32 %7412 to i64
  %7414 = getelementptr inbounds i16, i16* %66, i64 %7413
  %7415 = load i16, i16* %7414, align 2, !tbaa !382
  %7416 = insertelement <64 x i16> %7411, i16 %7415, i32 14
  %7417 = extractelement <64 x i32> %7341, i32 15
  %7418 = sext i32 %7417 to i64
  %7419 = getelementptr inbounds i16, i16* %66, i64 %7418
  %7420 = load i16, i16* %7419, align 2, !tbaa !382
  %7421 = insertelement <64 x i16> %7416, i16 %7420, i32 15
  %7422 = extractelement <64 x i32> %7341, i32 16
  %7423 = sext i32 %7422 to i64
  %7424 = getelementptr inbounds i16, i16* %66, i64 %7423
  %7425 = load i16, i16* %7424, align 2, !tbaa !382
  %7426 = insertelement <64 x i16> %7421, i16 %7425, i32 16
  %7427 = extractelement <64 x i32> %7341, i32 17
  %7428 = sext i32 %7427 to i64
  %7429 = getelementptr inbounds i16, i16* %66, i64 %7428
  %7430 = load i16, i16* %7429, align 2, !tbaa !382
  %7431 = insertelement <64 x i16> %7426, i16 %7430, i32 17
  %7432 = extractelement <64 x i32> %7341, i32 18
  %7433 = sext i32 %7432 to i64
  %7434 = getelementptr inbounds i16, i16* %66, i64 %7433
  %7435 = load i16, i16* %7434, align 2, !tbaa !382
  %7436 = insertelement <64 x i16> %7431, i16 %7435, i32 18
  %7437 = extractelement <64 x i32> %7341, i32 19
  %7438 = sext i32 %7437 to i64
  %7439 = getelementptr inbounds i16, i16* %66, i64 %7438
  %7440 = load i16, i16* %7439, align 2, !tbaa !382
  %7441 = insertelement <64 x i16> %7436, i16 %7440, i32 19
  %7442 = extractelement <64 x i32> %7341, i32 20
  %7443 = sext i32 %7442 to i64
  %7444 = getelementptr inbounds i16, i16* %66, i64 %7443
  %7445 = load i16, i16* %7444, align 2, !tbaa !382
  %7446 = insertelement <64 x i16> %7441, i16 %7445, i32 20
  %7447 = extractelement <64 x i32> %7341, i32 21
  %7448 = sext i32 %7447 to i64
  %7449 = getelementptr inbounds i16, i16* %66, i64 %7448
  %7450 = load i16, i16* %7449, align 2, !tbaa !382
  %7451 = insertelement <64 x i16> %7446, i16 %7450, i32 21
  %7452 = extractelement <64 x i32> %7341, i32 22
  %7453 = sext i32 %7452 to i64
  %7454 = getelementptr inbounds i16, i16* %66, i64 %7453
  %7455 = load i16, i16* %7454, align 2, !tbaa !382
  %7456 = insertelement <64 x i16> %7451, i16 %7455, i32 22
  %7457 = extractelement <64 x i32> %7341, i32 23
  %7458 = sext i32 %7457 to i64
  %7459 = getelementptr inbounds i16, i16* %66, i64 %7458
  %7460 = load i16, i16* %7459, align 2, !tbaa !382
  %7461 = insertelement <64 x i16> %7456, i16 %7460, i32 23
  %7462 = extractelement <64 x i32> %7341, i32 24
  %7463 = sext i32 %7462 to i64
  %7464 = getelementptr inbounds i16, i16* %66, i64 %7463
  %7465 = load i16, i16* %7464, align 2, !tbaa !382
  %7466 = insertelement <64 x i16> %7461, i16 %7465, i32 24
  %7467 = extractelement <64 x i32> %7341, i32 25
  %7468 = sext i32 %7467 to i64
  %7469 = getelementptr inbounds i16, i16* %66, i64 %7468
  %7470 = load i16, i16* %7469, align 2, !tbaa !382
  %7471 = insertelement <64 x i16> %7466, i16 %7470, i32 25
  %7472 = extractelement <64 x i32> %7341, i32 26
  %7473 = sext i32 %7472 to i64
  %7474 = getelementptr inbounds i16, i16* %66, i64 %7473
  %7475 = load i16, i16* %7474, align 2, !tbaa !382
  %7476 = insertelement <64 x i16> %7471, i16 %7475, i32 26
  %7477 = extractelement <64 x i32> %7341, i32 27
  %7478 = sext i32 %7477 to i64
  %7479 = getelementptr inbounds i16, i16* %66, i64 %7478
  %7480 = load i16, i16* %7479, align 2, !tbaa !382
  %7481 = insertelement <64 x i16> %7476, i16 %7480, i32 27
  %7482 = extractelement <64 x i32> %7341, i32 28
  %7483 = sext i32 %7482 to i64
  %7484 = getelementptr inbounds i16, i16* %66, i64 %7483
  %7485 = load i16, i16* %7484, align 2, !tbaa !382
  %7486 = insertelement <64 x i16> %7481, i16 %7485, i32 28
  %7487 = extractelement <64 x i32> %7341, i32 29
  %7488 = sext i32 %7487 to i64
  %7489 = getelementptr inbounds i16, i16* %66, i64 %7488
  %7490 = load i16, i16* %7489, align 2, !tbaa !382
  %7491 = insertelement <64 x i16> %7486, i16 %7490, i32 29
  %7492 = extractelement <64 x i32> %7341, i32 30
  %7493 = sext i32 %7492 to i64
  %7494 = getelementptr inbounds i16, i16* %66, i64 %7493
  %7495 = load i16, i16* %7494, align 2, !tbaa !382
  %7496 = insertelement <64 x i16> %7491, i16 %7495, i32 30
  %7497 = extractelement <64 x i32> %7341, i32 31
  %7498 = sext i32 %7497 to i64
  %7499 = getelementptr inbounds i16, i16* %66, i64 %7498
  %7500 = load i16, i16* %7499, align 2, !tbaa !382
  %7501 = insertelement <64 x i16> %7496, i16 %7500, i32 31
  %7502 = extractelement <64 x i32> %7341, i32 32
  %7503 = sext i32 %7502 to i64
  %7504 = getelementptr inbounds i16, i16* %66, i64 %7503
  %7505 = load i16, i16* %7504, align 2, !tbaa !382
  %7506 = insertelement <64 x i16> %7501, i16 %7505, i32 32
  %7507 = extractelement <64 x i32> %7341, i32 33
  %7508 = sext i32 %7507 to i64
  %7509 = getelementptr inbounds i16, i16* %66, i64 %7508
  %7510 = load i16, i16* %7509, align 2, !tbaa !382
  %7511 = insertelement <64 x i16> %7506, i16 %7510, i32 33
  %7512 = extractelement <64 x i32> %7341, i32 34
  %7513 = sext i32 %7512 to i64
  %7514 = getelementptr inbounds i16, i16* %66, i64 %7513
  %7515 = load i16, i16* %7514, align 2, !tbaa !382
  %7516 = insertelement <64 x i16> %7511, i16 %7515, i32 34
  %7517 = extractelement <64 x i32> %7341, i32 35
  %7518 = sext i32 %7517 to i64
  %7519 = getelementptr inbounds i16, i16* %66, i64 %7518
  %7520 = load i16, i16* %7519, align 2, !tbaa !382
  %7521 = insertelement <64 x i16> %7516, i16 %7520, i32 35
  %7522 = extractelement <64 x i32> %7341, i32 36
  %7523 = sext i32 %7522 to i64
  %7524 = getelementptr inbounds i16, i16* %66, i64 %7523
  %7525 = load i16, i16* %7524, align 2, !tbaa !382
  %7526 = insertelement <64 x i16> %7521, i16 %7525, i32 36
  %7527 = extractelement <64 x i32> %7341, i32 37
  %7528 = sext i32 %7527 to i64
  %7529 = getelementptr inbounds i16, i16* %66, i64 %7528
  %7530 = load i16, i16* %7529, align 2, !tbaa !382
  %7531 = insertelement <64 x i16> %7526, i16 %7530, i32 37
  %7532 = extractelement <64 x i32> %7341, i32 38
  %7533 = sext i32 %7532 to i64
  %7534 = getelementptr inbounds i16, i16* %66, i64 %7533
  %7535 = load i16, i16* %7534, align 2, !tbaa !382
  %7536 = insertelement <64 x i16> %7531, i16 %7535, i32 38
  %7537 = extractelement <64 x i32> %7341, i32 39
  %7538 = sext i32 %7537 to i64
  %7539 = getelementptr inbounds i16, i16* %66, i64 %7538
  %7540 = load i16, i16* %7539, align 2, !tbaa !382
  %7541 = insertelement <64 x i16> %7536, i16 %7540, i32 39
  %7542 = extractelement <64 x i32> %7341, i32 40
  %7543 = sext i32 %7542 to i64
  %7544 = getelementptr inbounds i16, i16* %66, i64 %7543
  %7545 = load i16, i16* %7544, align 2, !tbaa !382
  %7546 = insertelement <64 x i16> %7541, i16 %7545, i32 40
  %7547 = extractelement <64 x i32> %7341, i32 41
  %7548 = sext i32 %7547 to i64
  %7549 = getelementptr inbounds i16, i16* %66, i64 %7548
  %7550 = load i16, i16* %7549, align 2, !tbaa !382
  %7551 = insertelement <64 x i16> %7546, i16 %7550, i32 41
  %7552 = extractelement <64 x i32> %7341, i32 42
  %7553 = sext i32 %7552 to i64
  %7554 = getelementptr inbounds i16, i16* %66, i64 %7553
  %7555 = load i16, i16* %7554, align 2, !tbaa !382
  %7556 = insertelement <64 x i16> %7551, i16 %7555, i32 42
  %7557 = extractelement <64 x i32> %7341, i32 43
  %7558 = sext i32 %7557 to i64
  %7559 = getelementptr inbounds i16, i16* %66, i64 %7558
  %7560 = load i16, i16* %7559, align 2, !tbaa !382
  %7561 = insertelement <64 x i16> %7556, i16 %7560, i32 43
  %7562 = extractelement <64 x i32> %7341, i32 44
  %7563 = sext i32 %7562 to i64
  %7564 = getelementptr inbounds i16, i16* %66, i64 %7563
  %7565 = load i16, i16* %7564, align 2, !tbaa !382
  %7566 = insertelement <64 x i16> %7561, i16 %7565, i32 44
  %7567 = extractelement <64 x i32> %7341, i32 45
  %7568 = sext i32 %7567 to i64
  %7569 = getelementptr inbounds i16, i16* %66, i64 %7568
  %7570 = load i16, i16* %7569, align 2, !tbaa !382
  %7571 = insertelement <64 x i16> %7566, i16 %7570, i32 45
  %7572 = extractelement <64 x i32> %7341, i32 46
  %7573 = sext i32 %7572 to i64
  %7574 = getelementptr inbounds i16, i16* %66, i64 %7573
  %7575 = load i16, i16* %7574, align 2, !tbaa !382
  %7576 = insertelement <64 x i16> %7571, i16 %7575, i32 46
  %7577 = extractelement <64 x i32> %7341, i32 47
  %7578 = sext i32 %7577 to i64
  %7579 = getelementptr inbounds i16, i16* %66, i64 %7578
  %7580 = load i16, i16* %7579, align 2, !tbaa !382
  %7581 = insertelement <64 x i16> %7576, i16 %7580, i32 47
  %7582 = extractelement <64 x i32> %7341, i32 48
  %7583 = sext i32 %7582 to i64
  %7584 = getelementptr inbounds i16, i16* %66, i64 %7583
  %7585 = load i16, i16* %7584, align 2, !tbaa !382
  %7586 = insertelement <64 x i16> %7581, i16 %7585, i32 48
  %7587 = extractelement <64 x i32> %7341, i32 49
  %7588 = sext i32 %7587 to i64
  %7589 = getelementptr inbounds i16, i16* %66, i64 %7588
  %7590 = load i16, i16* %7589, align 2, !tbaa !382
  %7591 = insertelement <64 x i16> %7586, i16 %7590, i32 49
  %7592 = extractelement <64 x i32> %7341, i32 50
  %7593 = sext i32 %7592 to i64
  %7594 = getelementptr inbounds i16, i16* %66, i64 %7593
  %7595 = load i16, i16* %7594, align 2, !tbaa !382
  %7596 = insertelement <64 x i16> %7591, i16 %7595, i32 50
  %7597 = extractelement <64 x i32> %7341, i32 51
  %7598 = sext i32 %7597 to i64
  %7599 = getelementptr inbounds i16, i16* %66, i64 %7598
  %7600 = load i16, i16* %7599, align 2, !tbaa !382
  %7601 = insertelement <64 x i16> %7596, i16 %7600, i32 51
  %7602 = extractelement <64 x i32> %7341, i32 52
  %7603 = sext i32 %7602 to i64
  %7604 = getelementptr inbounds i16, i16* %66, i64 %7603
  %7605 = load i16, i16* %7604, align 2, !tbaa !382
  %7606 = insertelement <64 x i16> %7601, i16 %7605, i32 52
  %7607 = extractelement <64 x i32> %7341, i32 53
  %7608 = sext i32 %7607 to i64
  %7609 = getelementptr inbounds i16, i16* %66, i64 %7608
  %7610 = load i16, i16* %7609, align 2, !tbaa !382
  %7611 = insertelement <64 x i16> %7606, i16 %7610, i32 53
  %7612 = extractelement <64 x i32> %7341, i32 54
  %7613 = sext i32 %7612 to i64
  %7614 = getelementptr inbounds i16, i16* %66, i64 %7613
  %7615 = load i16, i16* %7614, align 2, !tbaa !382
  %7616 = insertelement <64 x i16> %7611, i16 %7615, i32 54
  %7617 = extractelement <64 x i32> %7341, i32 55
  %7618 = sext i32 %7617 to i64
  %7619 = getelementptr inbounds i16, i16* %66, i64 %7618
  %7620 = load i16, i16* %7619, align 2, !tbaa !382
  %7621 = insertelement <64 x i16> %7616, i16 %7620, i32 55
  %7622 = extractelement <64 x i32> %7341, i32 56
  %7623 = sext i32 %7622 to i64
  %7624 = getelementptr inbounds i16, i16* %66, i64 %7623
  %7625 = load i16, i16* %7624, align 2, !tbaa !382
  %7626 = insertelement <64 x i16> %7621, i16 %7625, i32 56
  %7627 = extractelement <64 x i32> %7341, i32 57
  %7628 = sext i32 %7627 to i64
  %7629 = getelementptr inbounds i16, i16* %66, i64 %7628
  %7630 = load i16, i16* %7629, align 2, !tbaa !382
  %7631 = insertelement <64 x i16> %7626, i16 %7630, i32 57
  %7632 = extractelement <64 x i32> %7341, i32 58
  %7633 = sext i32 %7632 to i64
  %7634 = getelementptr inbounds i16, i16* %66, i64 %7633
  %7635 = load i16, i16* %7634, align 2, !tbaa !382
  %7636 = insertelement <64 x i16> %7631, i16 %7635, i32 58
  %7637 = extractelement <64 x i32> %7341, i32 59
  %7638 = sext i32 %7637 to i64
  %7639 = getelementptr inbounds i16, i16* %66, i64 %7638
  %7640 = load i16, i16* %7639, align 2, !tbaa !382
  %7641 = insertelement <64 x i16> %7636, i16 %7640, i32 59
  %7642 = extractelement <64 x i32> %7341, i32 60
  %7643 = sext i32 %7642 to i64
  %7644 = getelementptr inbounds i16, i16* %66, i64 %7643
  %7645 = load i16, i16* %7644, align 2, !tbaa !382
  %7646 = insertelement <64 x i16> %7641, i16 %7645, i32 60
  %7647 = extractelement <64 x i32> %7341, i32 61
  %7648 = sext i32 %7647 to i64
  %7649 = getelementptr inbounds i16, i16* %66, i64 %7648
  %7650 = load i16, i16* %7649, align 2, !tbaa !382
  %7651 = insertelement <64 x i16> %7646, i16 %7650, i32 61
  %7652 = extractelement <64 x i32> %7341, i32 62
  %7653 = sext i32 %7652 to i64
  %7654 = getelementptr inbounds i16, i16* %66, i64 %7653
  %7655 = load i16, i16* %7654, align 2, !tbaa !382
  %7656 = insertelement <64 x i16> %7651, i16 %7655, i32 62
  %7657 = extractelement <64 x i32> %7341, i32 63
  %7658 = sext i32 %7657 to i64
  %7659 = getelementptr inbounds i16, i16* %66, i64 %7658
  %7660 = load i16, i16* %7659, align 2, !tbaa !382
  %7661 = insertelement <64 x i16> %7656, i16 %7660, i32 63
  %7662 = add nsw i32 %blur_x.s0.x.v1.base.s21, -62
  %7663 = insertelement <64 x i32> undef, i32 %7662, i32 0
  %7664 = shufflevector <64 x i32> %7663, <64 x i32> undef, <64 x i32> zeroinitializer
  %7665 = add nsw <64 x i32> %7664, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7666 = shufflevector <64 x i32> %7665, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7667 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7666, <4 x i32> %65)
  %7668 = shufflevector <64 x i32> %7665, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7669 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7668, <4 x i32> %65)
  %7670 = shufflevector <64 x i32> %7665, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %7671 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7670, <4 x i32> %65)
  %7672 = shufflevector <64 x i32> %7665, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %7673 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7672, <4 x i32> %65)
  %7674 = shufflevector <64 x i32> %7665, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %7675 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7674, <4 x i32> %65)
  %7676 = shufflevector <64 x i32> %7665, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %7677 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7676, <4 x i32> %65)
  %7678 = shufflevector <64 x i32> %7665, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %7679 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7678, <4 x i32> %65)
  %7680 = shufflevector <64 x i32> %7665, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %7681 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7680, <4 x i32> %65)
  %7682 = shufflevector <64 x i32> %7665, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %7683 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7682, <4 x i32> %65)
  %7684 = shufflevector <64 x i32> %7665, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %7685 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7684, <4 x i32> %65)
  %7686 = shufflevector <64 x i32> %7665, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %7687 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7686, <4 x i32> %65)
  %7688 = shufflevector <64 x i32> %7665, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %7689 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7688, <4 x i32> %65)
  %7690 = shufflevector <64 x i32> %7665, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %7691 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7690, <4 x i32> %65)
  %7692 = shufflevector <64 x i32> %7665, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %7693 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7692, <4 x i32> %65)
  %7694 = shufflevector <64 x i32> %7665, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %7695 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7694, <4 x i32> %65)
  %7696 = shufflevector <64 x i32> %7665, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7697 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7696, <4 x i32> %65)
  %7698 = shufflevector <4 x i32> %7697, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %7699 = shufflevector <8 x i32> %7698, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %7700 = shufflevector <16 x i32> %7699, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %7701 = shufflevector <32 x i32> %7700, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %7702 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7667, <4 x i32> zeroinitializer)
  %7703 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7669, <4 x i32> zeroinitializer)
  %7704 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7671, <4 x i32> zeroinitializer)
  %7705 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7673, <4 x i32> zeroinitializer)
  %7706 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7675, <4 x i32> zeroinitializer)
  %7707 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7677, <4 x i32> zeroinitializer)
  %7708 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7679, <4 x i32> zeroinitializer)
  %7709 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7681, <4 x i32> zeroinitializer)
  %7710 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7683, <4 x i32> zeroinitializer)
  %7711 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7685, <4 x i32> zeroinitializer)
  %7712 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7687, <4 x i32> zeroinitializer)
  %7713 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7689, <4 x i32> zeroinitializer)
  %7714 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7691, <4 x i32> zeroinitializer)
  %7715 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7693, <4 x i32> zeroinitializer)
  %7716 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7695, <4 x i32> zeroinitializer)
  %7717 = shufflevector <64 x i32> %7701, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7718 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7717, <4 x i32> zeroinitializer)
  %7719 = shufflevector <4 x i32> %7702, <4 x i32> %7703, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7720 = shufflevector <4 x i32> %7704, <4 x i32> %7705, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7721 = shufflevector <4 x i32> %7706, <4 x i32> %7707, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7722 = shufflevector <4 x i32> %7708, <4 x i32> %7709, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7723 = shufflevector <4 x i32> %7710, <4 x i32> %7711, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7724 = shufflevector <4 x i32> %7712, <4 x i32> %7713, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7725 = shufflevector <4 x i32> %7714, <4 x i32> %7715, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7726 = shufflevector <4 x i32> %7716, <4 x i32> %7718, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7727 = shufflevector <8 x i32> %7719, <8 x i32> %7720, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7728 = shufflevector <8 x i32> %7721, <8 x i32> %7722, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7729 = shufflevector <8 x i32> %7723, <8 x i32> %7724, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7730 = shufflevector <8 x i32> %7725, <8 x i32> %7726, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7731 = shufflevector <16 x i32> %7727, <16 x i32> %7728, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7732 = shufflevector <16 x i32> %7729, <16 x i32> %7730, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7733 = shufflevector <32 x i32> %7731, <32 x i32> %7732, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7734 = add nsw <64 x i32> %7733, %t257
  %7735 = extractelement <64 x i32> %7734, i32 0
  %7736 = sext i32 %7735 to i64
  %7737 = getelementptr inbounds i16, i16* %66, i64 %7736
  %7738 = load i16, i16* %7737, align 2, !tbaa !382
  %7739 = insertelement <64 x i16> undef, i16 %7738, i32 0
  %7740 = extractelement <64 x i32> %7734, i32 1
  %7741 = sext i32 %7740 to i64
  %7742 = getelementptr inbounds i16, i16* %66, i64 %7741
  %7743 = load i16, i16* %7742, align 2, !tbaa !382
  %7744 = insertelement <64 x i16> %7739, i16 %7743, i32 1
  %7745 = extractelement <64 x i32> %7734, i32 2
  %7746 = sext i32 %7745 to i64
  %7747 = getelementptr inbounds i16, i16* %66, i64 %7746
  %7748 = load i16, i16* %7747, align 2, !tbaa !382
  %7749 = insertelement <64 x i16> %7744, i16 %7748, i32 2
  %7750 = extractelement <64 x i32> %7734, i32 3
  %7751 = sext i32 %7750 to i64
  %7752 = getelementptr inbounds i16, i16* %66, i64 %7751
  %7753 = load i16, i16* %7752, align 2, !tbaa !382
  %7754 = insertelement <64 x i16> %7749, i16 %7753, i32 3
  %7755 = extractelement <64 x i32> %7734, i32 4
  %7756 = sext i32 %7755 to i64
  %7757 = getelementptr inbounds i16, i16* %66, i64 %7756
  %7758 = load i16, i16* %7757, align 2, !tbaa !382
  %7759 = insertelement <64 x i16> %7754, i16 %7758, i32 4
  %7760 = extractelement <64 x i32> %7734, i32 5
  %7761 = sext i32 %7760 to i64
  %7762 = getelementptr inbounds i16, i16* %66, i64 %7761
  %7763 = load i16, i16* %7762, align 2, !tbaa !382
  %7764 = insertelement <64 x i16> %7759, i16 %7763, i32 5
  %7765 = extractelement <64 x i32> %7734, i32 6
  %7766 = sext i32 %7765 to i64
  %7767 = getelementptr inbounds i16, i16* %66, i64 %7766
  %7768 = load i16, i16* %7767, align 2, !tbaa !382
  %7769 = insertelement <64 x i16> %7764, i16 %7768, i32 6
  %7770 = extractelement <64 x i32> %7734, i32 7
  %7771 = sext i32 %7770 to i64
  %7772 = getelementptr inbounds i16, i16* %66, i64 %7771
  %7773 = load i16, i16* %7772, align 2, !tbaa !382
  %7774 = insertelement <64 x i16> %7769, i16 %7773, i32 7
  %7775 = extractelement <64 x i32> %7734, i32 8
  %7776 = sext i32 %7775 to i64
  %7777 = getelementptr inbounds i16, i16* %66, i64 %7776
  %7778 = load i16, i16* %7777, align 2, !tbaa !382
  %7779 = insertelement <64 x i16> %7774, i16 %7778, i32 8
  %7780 = extractelement <64 x i32> %7734, i32 9
  %7781 = sext i32 %7780 to i64
  %7782 = getelementptr inbounds i16, i16* %66, i64 %7781
  %7783 = load i16, i16* %7782, align 2, !tbaa !382
  %7784 = insertelement <64 x i16> %7779, i16 %7783, i32 9
  %7785 = extractelement <64 x i32> %7734, i32 10
  %7786 = sext i32 %7785 to i64
  %7787 = getelementptr inbounds i16, i16* %66, i64 %7786
  %7788 = load i16, i16* %7787, align 2, !tbaa !382
  %7789 = insertelement <64 x i16> %7784, i16 %7788, i32 10
  %7790 = extractelement <64 x i32> %7734, i32 11
  %7791 = sext i32 %7790 to i64
  %7792 = getelementptr inbounds i16, i16* %66, i64 %7791
  %7793 = load i16, i16* %7792, align 2, !tbaa !382
  %7794 = insertelement <64 x i16> %7789, i16 %7793, i32 11
  %7795 = extractelement <64 x i32> %7734, i32 12
  %7796 = sext i32 %7795 to i64
  %7797 = getelementptr inbounds i16, i16* %66, i64 %7796
  %7798 = load i16, i16* %7797, align 2, !tbaa !382
  %7799 = insertelement <64 x i16> %7794, i16 %7798, i32 12
  %7800 = extractelement <64 x i32> %7734, i32 13
  %7801 = sext i32 %7800 to i64
  %7802 = getelementptr inbounds i16, i16* %66, i64 %7801
  %7803 = load i16, i16* %7802, align 2, !tbaa !382
  %7804 = insertelement <64 x i16> %7799, i16 %7803, i32 13
  %7805 = extractelement <64 x i32> %7734, i32 14
  %7806 = sext i32 %7805 to i64
  %7807 = getelementptr inbounds i16, i16* %66, i64 %7806
  %7808 = load i16, i16* %7807, align 2, !tbaa !382
  %7809 = insertelement <64 x i16> %7804, i16 %7808, i32 14
  %7810 = extractelement <64 x i32> %7734, i32 15
  %7811 = sext i32 %7810 to i64
  %7812 = getelementptr inbounds i16, i16* %66, i64 %7811
  %7813 = load i16, i16* %7812, align 2, !tbaa !382
  %7814 = insertelement <64 x i16> %7809, i16 %7813, i32 15
  %7815 = extractelement <64 x i32> %7734, i32 16
  %7816 = sext i32 %7815 to i64
  %7817 = getelementptr inbounds i16, i16* %66, i64 %7816
  %7818 = load i16, i16* %7817, align 2, !tbaa !382
  %7819 = insertelement <64 x i16> %7814, i16 %7818, i32 16
  %7820 = extractelement <64 x i32> %7734, i32 17
  %7821 = sext i32 %7820 to i64
  %7822 = getelementptr inbounds i16, i16* %66, i64 %7821
  %7823 = load i16, i16* %7822, align 2, !tbaa !382
  %7824 = insertelement <64 x i16> %7819, i16 %7823, i32 17
  %7825 = extractelement <64 x i32> %7734, i32 18
  %7826 = sext i32 %7825 to i64
  %7827 = getelementptr inbounds i16, i16* %66, i64 %7826
  %7828 = load i16, i16* %7827, align 2, !tbaa !382
  %7829 = insertelement <64 x i16> %7824, i16 %7828, i32 18
  %7830 = extractelement <64 x i32> %7734, i32 19
  %7831 = sext i32 %7830 to i64
  %7832 = getelementptr inbounds i16, i16* %66, i64 %7831
  %7833 = load i16, i16* %7832, align 2, !tbaa !382
  %7834 = insertelement <64 x i16> %7829, i16 %7833, i32 19
  %7835 = extractelement <64 x i32> %7734, i32 20
  %7836 = sext i32 %7835 to i64
  %7837 = getelementptr inbounds i16, i16* %66, i64 %7836
  %7838 = load i16, i16* %7837, align 2, !tbaa !382
  %7839 = insertelement <64 x i16> %7834, i16 %7838, i32 20
  %7840 = extractelement <64 x i32> %7734, i32 21
  %7841 = sext i32 %7840 to i64
  %7842 = getelementptr inbounds i16, i16* %66, i64 %7841
  %7843 = load i16, i16* %7842, align 2, !tbaa !382
  %7844 = insertelement <64 x i16> %7839, i16 %7843, i32 21
  %7845 = extractelement <64 x i32> %7734, i32 22
  %7846 = sext i32 %7845 to i64
  %7847 = getelementptr inbounds i16, i16* %66, i64 %7846
  %7848 = load i16, i16* %7847, align 2, !tbaa !382
  %7849 = insertelement <64 x i16> %7844, i16 %7848, i32 22
  %7850 = extractelement <64 x i32> %7734, i32 23
  %7851 = sext i32 %7850 to i64
  %7852 = getelementptr inbounds i16, i16* %66, i64 %7851
  %7853 = load i16, i16* %7852, align 2, !tbaa !382
  %7854 = insertelement <64 x i16> %7849, i16 %7853, i32 23
  %7855 = extractelement <64 x i32> %7734, i32 24
  %7856 = sext i32 %7855 to i64
  %7857 = getelementptr inbounds i16, i16* %66, i64 %7856
  %7858 = load i16, i16* %7857, align 2, !tbaa !382
  %7859 = insertelement <64 x i16> %7854, i16 %7858, i32 24
  %7860 = extractelement <64 x i32> %7734, i32 25
  %7861 = sext i32 %7860 to i64
  %7862 = getelementptr inbounds i16, i16* %66, i64 %7861
  %7863 = load i16, i16* %7862, align 2, !tbaa !382
  %7864 = insertelement <64 x i16> %7859, i16 %7863, i32 25
  %7865 = extractelement <64 x i32> %7734, i32 26
  %7866 = sext i32 %7865 to i64
  %7867 = getelementptr inbounds i16, i16* %66, i64 %7866
  %7868 = load i16, i16* %7867, align 2, !tbaa !382
  %7869 = insertelement <64 x i16> %7864, i16 %7868, i32 26
  %7870 = extractelement <64 x i32> %7734, i32 27
  %7871 = sext i32 %7870 to i64
  %7872 = getelementptr inbounds i16, i16* %66, i64 %7871
  %7873 = load i16, i16* %7872, align 2, !tbaa !382
  %7874 = insertelement <64 x i16> %7869, i16 %7873, i32 27
  %7875 = extractelement <64 x i32> %7734, i32 28
  %7876 = sext i32 %7875 to i64
  %7877 = getelementptr inbounds i16, i16* %66, i64 %7876
  %7878 = load i16, i16* %7877, align 2, !tbaa !382
  %7879 = insertelement <64 x i16> %7874, i16 %7878, i32 28
  %7880 = extractelement <64 x i32> %7734, i32 29
  %7881 = sext i32 %7880 to i64
  %7882 = getelementptr inbounds i16, i16* %66, i64 %7881
  %7883 = load i16, i16* %7882, align 2, !tbaa !382
  %7884 = insertelement <64 x i16> %7879, i16 %7883, i32 29
  %7885 = extractelement <64 x i32> %7734, i32 30
  %7886 = sext i32 %7885 to i64
  %7887 = getelementptr inbounds i16, i16* %66, i64 %7886
  %7888 = load i16, i16* %7887, align 2, !tbaa !382
  %7889 = insertelement <64 x i16> %7884, i16 %7888, i32 30
  %7890 = extractelement <64 x i32> %7734, i32 31
  %7891 = sext i32 %7890 to i64
  %7892 = getelementptr inbounds i16, i16* %66, i64 %7891
  %7893 = load i16, i16* %7892, align 2, !tbaa !382
  %7894 = insertelement <64 x i16> %7889, i16 %7893, i32 31
  %7895 = extractelement <64 x i32> %7734, i32 32
  %7896 = sext i32 %7895 to i64
  %7897 = getelementptr inbounds i16, i16* %66, i64 %7896
  %7898 = load i16, i16* %7897, align 2, !tbaa !382
  %7899 = insertelement <64 x i16> %7894, i16 %7898, i32 32
  %7900 = extractelement <64 x i32> %7734, i32 33
  %7901 = sext i32 %7900 to i64
  %7902 = getelementptr inbounds i16, i16* %66, i64 %7901
  %7903 = load i16, i16* %7902, align 2, !tbaa !382
  %7904 = insertelement <64 x i16> %7899, i16 %7903, i32 33
  %7905 = extractelement <64 x i32> %7734, i32 34
  %7906 = sext i32 %7905 to i64
  %7907 = getelementptr inbounds i16, i16* %66, i64 %7906
  %7908 = load i16, i16* %7907, align 2, !tbaa !382
  %7909 = insertelement <64 x i16> %7904, i16 %7908, i32 34
  %7910 = extractelement <64 x i32> %7734, i32 35
  %7911 = sext i32 %7910 to i64
  %7912 = getelementptr inbounds i16, i16* %66, i64 %7911
  %7913 = load i16, i16* %7912, align 2, !tbaa !382
  %7914 = insertelement <64 x i16> %7909, i16 %7913, i32 35
  %7915 = extractelement <64 x i32> %7734, i32 36
  %7916 = sext i32 %7915 to i64
  %7917 = getelementptr inbounds i16, i16* %66, i64 %7916
  %7918 = load i16, i16* %7917, align 2, !tbaa !382
  %7919 = insertelement <64 x i16> %7914, i16 %7918, i32 36
  %7920 = extractelement <64 x i32> %7734, i32 37
  %7921 = sext i32 %7920 to i64
  %7922 = getelementptr inbounds i16, i16* %66, i64 %7921
  %7923 = load i16, i16* %7922, align 2, !tbaa !382
  %7924 = insertelement <64 x i16> %7919, i16 %7923, i32 37
  %7925 = extractelement <64 x i32> %7734, i32 38
  %7926 = sext i32 %7925 to i64
  %7927 = getelementptr inbounds i16, i16* %66, i64 %7926
  %7928 = load i16, i16* %7927, align 2, !tbaa !382
  %7929 = insertelement <64 x i16> %7924, i16 %7928, i32 38
  %7930 = extractelement <64 x i32> %7734, i32 39
  %7931 = sext i32 %7930 to i64
  %7932 = getelementptr inbounds i16, i16* %66, i64 %7931
  %7933 = load i16, i16* %7932, align 2, !tbaa !382
  %7934 = insertelement <64 x i16> %7929, i16 %7933, i32 39
  %7935 = extractelement <64 x i32> %7734, i32 40
  %7936 = sext i32 %7935 to i64
  %7937 = getelementptr inbounds i16, i16* %66, i64 %7936
  %7938 = load i16, i16* %7937, align 2, !tbaa !382
  %7939 = insertelement <64 x i16> %7934, i16 %7938, i32 40
  %7940 = extractelement <64 x i32> %7734, i32 41
  %7941 = sext i32 %7940 to i64
  %7942 = getelementptr inbounds i16, i16* %66, i64 %7941
  %7943 = load i16, i16* %7942, align 2, !tbaa !382
  %7944 = insertelement <64 x i16> %7939, i16 %7943, i32 41
  %7945 = extractelement <64 x i32> %7734, i32 42
  %7946 = sext i32 %7945 to i64
  %7947 = getelementptr inbounds i16, i16* %66, i64 %7946
  %7948 = load i16, i16* %7947, align 2, !tbaa !382
  %7949 = insertelement <64 x i16> %7944, i16 %7948, i32 42
  %7950 = extractelement <64 x i32> %7734, i32 43
  %7951 = sext i32 %7950 to i64
  %7952 = getelementptr inbounds i16, i16* %66, i64 %7951
  %7953 = load i16, i16* %7952, align 2, !tbaa !382
  %7954 = insertelement <64 x i16> %7949, i16 %7953, i32 43
  %7955 = extractelement <64 x i32> %7734, i32 44
  %7956 = sext i32 %7955 to i64
  %7957 = getelementptr inbounds i16, i16* %66, i64 %7956
  %7958 = load i16, i16* %7957, align 2, !tbaa !382
  %7959 = insertelement <64 x i16> %7954, i16 %7958, i32 44
  %7960 = extractelement <64 x i32> %7734, i32 45
  %7961 = sext i32 %7960 to i64
  %7962 = getelementptr inbounds i16, i16* %66, i64 %7961
  %7963 = load i16, i16* %7962, align 2, !tbaa !382
  %7964 = insertelement <64 x i16> %7959, i16 %7963, i32 45
  %7965 = extractelement <64 x i32> %7734, i32 46
  %7966 = sext i32 %7965 to i64
  %7967 = getelementptr inbounds i16, i16* %66, i64 %7966
  %7968 = load i16, i16* %7967, align 2, !tbaa !382
  %7969 = insertelement <64 x i16> %7964, i16 %7968, i32 46
  %7970 = extractelement <64 x i32> %7734, i32 47
  %7971 = sext i32 %7970 to i64
  %7972 = getelementptr inbounds i16, i16* %66, i64 %7971
  %7973 = load i16, i16* %7972, align 2, !tbaa !382
  %7974 = insertelement <64 x i16> %7969, i16 %7973, i32 47
  %7975 = extractelement <64 x i32> %7734, i32 48
  %7976 = sext i32 %7975 to i64
  %7977 = getelementptr inbounds i16, i16* %66, i64 %7976
  %7978 = load i16, i16* %7977, align 2, !tbaa !382
  %7979 = insertelement <64 x i16> %7974, i16 %7978, i32 48
  %7980 = extractelement <64 x i32> %7734, i32 49
  %7981 = sext i32 %7980 to i64
  %7982 = getelementptr inbounds i16, i16* %66, i64 %7981
  %7983 = load i16, i16* %7982, align 2, !tbaa !382
  %7984 = insertelement <64 x i16> %7979, i16 %7983, i32 49
  %7985 = extractelement <64 x i32> %7734, i32 50
  %7986 = sext i32 %7985 to i64
  %7987 = getelementptr inbounds i16, i16* %66, i64 %7986
  %7988 = load i16, i16* %7987, align 2, !tbaa !382
  %7989 = insertelement <64 x i16> %7984, i16 %7988, i32 50
  %7990 = extractelement <64 x i32> %7734, i32 51
  %7991 = sext i32 %7990 to i64
  %7992 = getelementptr inbounds i16, i16* %66, i64 %7991
  %7993 = load i16, i16* %7992, align 2, !tbaa !382
  %7994 = insertelement <64 x i16> %7989, i16 %7993, i32 51
  %7995 = extractelement <64 x i32> %7734, i32 52
  %7996 = sext i32 %7995 to i64
  %7997 = getelementptr inbounds i16, i16* %66, i64 %7996
  %7998 = load i16, i16* %7997, align 2, !tbaa !382
  %7999 = insertelement <64 x i16> %7994, i16 %7998, i32 52
  %8000 = extractelement <64 x i32> %7734, i32 53
  %8001 = sext i32 %8000 to i64
  %8002 = getelementptr inbounds i16, i16* %66, i64 %8001
  %8003 = load i16, i16* %8002, align 2, !tbaa !382
  %8004 = insertelement <64 x i16> %7999, i16 %8003, i32 53
  %8005 = extractelement <64 x i32> %7734, i32 54
  %8006 = sext i32 %8005 to i64
  %8007 = getelementptr inbounds i16, i16* %66, i64 %8006
  %8008 = load i16, i16* %8007, align 2, !tbaa !382
  %8009 = insertelement <64 x i16> %8004, i16 %8008, i32 54
  %8010 = extractelement <64 x i32> %7734, i32 55
  %8011 = sext i32 %8010 to i64
  %8012 = getelementptr inbounds i16, i16* %66, i64 %8011
  %8013 = load i16, i16* %8012, align 2, !tbaa !382
  %8014 = insertelement <64 x i16> %8009, i16 %8013, i32 55
  %8015 = extractelement <64 x i32> %7734, i32 56
  %8016 = sext i32 %8015 to i64
  %8017 = getelementptr inbounds i16, i16* %66, i64 %8016
  %8018 = load i16, i16* %8017, align 2, !tbaa !382
  %8019 = insertelement <64 x i16> %8014, i16 %8018, i32 56
  %8020 = extractelement <64 x i32> %7734, i32 57
  %8021 = sext i32 %8020 to i64
  %8022 = getelementptr inbounds i16, i16* %66, i64 %8021
  %8023 = load i16, i16* %8022, align 2, !tbaa !382
  %8024 = insertelement <64 x i16> %8019, i16 %8023, i32 57
  %8025 = extractelement <64 x i32> %7734, i32 58
  %8026 = sext i32 %8025 to i64
  %8027 = getelementptr inbounds i16, i16* %66, i64 %8026
  %8028 = load i16, i16* %8027, align 2, !tbaa !382
  %8029 = insertelement <64 x i16> %8024, i16 %8028, i32 58
  %8030 = extractelement <64 x i32> %7734, i32 59
  %8031 = sext i32 %8030 to i64
  %8032 = getelementptr inbounds i16, i16* %66, i64 %8031
  %8033 = load i16, i16* %8032, align 2, !tbaa !382
  %8034 = insertelement <64 x i16> %8029, i16 %8033, i32 59
  %8035 = extractelement <64 x i32> %7734, i32 60
  %8036 = sext i32 %8035 to i64
  %8037 = getelementptr inbounds i16, i16* %66, i64 %8036
  %8038 = load i16, i16* %8037, align 2, !tbaa !382
  %8039 = insertelement <64 x i16> %8034, i16 %8038, i32 60
  %8040 = extractelement <64 x i32> %7734, i32 61
  %8041 = sext i32 %8040 to i64
  %8042 = getelementptr inbounds i16, i16* %66, i64 %8041
  %8043 = load i16, i16* %8042, align 2, !tbaa !382
  %8044 = insertelement <64 x i16> %8039, i16 %8043, i32 61
  %8045 = extractelement <64 x i32> %7734, i32 62
  %8046 = sext i32 %8045 to i64
  %8047 = getelementptr inbounds i16, i16* %66, i64 %8046
  %8048 = load i16, i16* %8047, align 2, !tbaa !382
  %8049 = insertelement <64 x i16> %8044, i16 %8048, i32 62
  %8050 = extractelement <64 x i32> %7734, i32 63
  %8051 = sext i32 %8050 to i64
  %8052 = getelementptr inbounds i16, i16* %66, i64 %8051
  %8053 = load i16, i16* %8052, align 2, !tbaa !382
  %8054 = insertelement <64 x i16> %8049, i16 %8053, i32 63
  %8055 = add nsw i32 %blur_x.s0.x.v1.base.s21, -61
  %8056 = insertelement <64 x i32> undef, i32 %8055, i32 0
  %8057 = shufflevector <64 x i32> %8056, <64 x i32> undef, <64 x i32> zeroinitializer
  %8058 = add nsw <64 x i32> %8057, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8059 = shufflevector <64 x i32> %8058, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8060 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8059, <4 x i32> %65)
  %8061 = shufflevector <64 x i32> %8058, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8062 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8061, <4 x i32> %65)
  %8063 = shufflevector <64 x i32> %8058, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8064 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8063, <4 x i32> %65)
  %8065 = shufflevector <64 x i32> %8058, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %8066 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8065, <4 x i32> %65)
  %8067 = shufflevector <64 x i32> %8058, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %8068 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8067, <4 x i32> %65)
  %8069 = shufflevector <64 x i32> %8058, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %8070 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8069, <4 x i32> %65)
  %8071 = shufflevector <64 x i32> %8058, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %8072 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8071, <4 x i32> %65)
  %8073 = shufflevector <64 x i32> %8058, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %8074 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8073, <4 x i32> %65)
  %8075 = shufflevector <64 x i32> %8058, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %8076 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8075, <4 x i32> %65)
  %8077 = shufflevector <64 x i32> %8058, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %8078 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8077, <4 x i32> %65)
  %8079 = shufflevector <64 x i32> %8058, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %8080 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8079, <4 x i32> %65)
  %8081 = shufflevector <64 x i32> %8058, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %8082 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8081, <4 x i32> %65)
  %8083 = shufflevector <64 x i32> %8058, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %8084 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8083, <4 x i32> %65)
  %8085 = shufflevector <64 x i32> %8058, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %8086 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8085, <4 x i32> %65)
  %8087 = shufflevector <64 x i32> %8058, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %8088 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8087, <4 x i32> %65)
  %8089 = shufflevector <64 x i32> %8058, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %8090 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8089, <4 x i32> %65)
  %8091 = shufflevector <4 x i32> %8090, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %8092 = shufflevector <8 x i32> %8091, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %8093 = shufflevector <16 x i32> %8092, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %8094 = shufflevector <32 x i32> %8093, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %8095 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8060, <4 x i32> zeroinitializer)
  %8096 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8062, <4 x i32> zeroinitializer)
  %8097 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8064, <4 x i32> zeroinitializer)
  %8098 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8066, <4 x i32> zeroinitializer)
  %8099 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8068, <4 x i32> zeroinitializer)
  %8100 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8070, <4 x i32> zeroinitializer)
  %8101 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8072, <4 x i32> zeroinitializer)
  %8102 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8074, <4 x i32> zeroinitializer)
  %8103 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8076, <4 x i32> zeroinitializer)
  %8104 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8078, <4 x i32> zeroinitializer)
  %8105 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8080, <4 x i32> zeroinitializer)
  %8106 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8082, <4 x i32> zeroinitializer)
  %8107 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8084, <4 x i32> zeroinitializer)
  %8108 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8086, <4 x i32> zeroinitializer)
  %8109 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8088, <4 x i32> zeroinitializer)
  %8110 = shufflevector <64 x i32> %8094, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %8111 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8110, <4 x i32> zeroinitializer)
  %8112 = shufflevector <4 x i32> %8095, <4 x i32> %8096, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8113 = shufflevector <4 x i32> %8097, <4 x i32> %8098, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8114 = shufflevector <4 x i32> %8099, <4 x i32> %8100, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8115 = shufflevector <4 x i32> %8101, <4 x i32> %8102, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8116 = shufflevector <4 x i32> %8103, <4 x i32> %8104, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8117 = shufflevector <4 x i32> %8105, <4 x i32> %8106, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8118 = shufflevector <4 x i32> %8107, <4 x i32> %8108, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8119 = shufflevector <4 x i32> %8109, <4 x i32> %8111, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8120 = shufflevector <8 x i32> %8112, <8 x i32> %8113, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8121 = shufflevector <8 x i32> %8114, <8 x i32> %8115, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8122 = shufflevector <8 x i32> %8116, <8 x i32> %8117, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8123 = shufflevector <8 x i32> %8118, <8 x i32> %8119, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8124 = shufflevector <16 x i32> %8120, <16 x i32> %8121, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8125 = shufflevector <16 x i32> %8122, <16 x i32> %8123, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8126 = shufflevector <32 x i32> %8124, <32 x i32> %8125, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8127 = add nsw <64 x i32> %8126, %t257
  %8128 = extractelement <64 x i32> %8127, i32 0
  %8129 = sext i32 %8128 to i64
  %8130 = getelementptr inbounds i16, i16* %66, i64 %8129
  %8131 = load i16, i16* %8130, align 2, !tbaa !382
  %8132 = insertelement <64 x i16> undef, i16 %8131, i32 0
  %8133 = extractelement <64 x i32> %8127, i32 1
  %8134 = sext i32 %8133 to i64
  %8135 = getelementptr inbounds i16, i16* %66, i64 %8134
  %8136 = load i16, i16* %8135, align 2, !tbaa !382
  %8137 = insertelement <64 x i16> %8132, i16 %8136, i32 1
  %8138 = extractelement <64 x i32> %8127, i32 2
  %8139 = sext i32 %8138 to i64
  %8140 = getelementptr inbounds i16, i16* %66, i64 %8139
  %8141 = load i16, i16* %8140, align 2, !tbaa !382
  %8142 = insertelement <64 x i16> %8137, i16 %8141, i32 2
  %8143 = extractelement <64 x i32> %8127, i32 3
  %8144 = sext i32 %8143 to i64
  %8145 = getelementptr inbounds i16, i16* %66, i64 %8144
  %8146 = load i16, i16* %8145, align 2, !tbaa !382
  %8147 = insertelement <64 x i16> %8142, i16 %8146, i32 3
  %8148 = extractelement <64 x i32> %8127, i32 4
  %8149 = sext i32 %8148 to i64
  %8150 = getelementptr inbounds i16, i16* %66, i64 %8149
  %8151 = load i16, i16* %8150, align 2, !tbaa !382
  %8152 = insertelement <64 x i16> %8147, i16 %8151, i32 4
  %8153 = extractelement <64 x i32> %8127, i32 5
  %8154 = sext i32 %8153 to i64
  %8155 = getelementptr inbounds i16, i16* %66, i64 %8154
  %8156 = load i16, i16* %8155, align 2, !tbaa !382
  %8157 = insertelement <64 x i16> %8152, i16 %8156, i32 5
  %8158 = extractelement <64 x i32> %8127, i32 6
  %8159 = sext i32 %8158 to i64
  %8160 = getelementptr inbounds i16, i16* %66, i64 %8159
  %8161 = load i16, i16* %8160, align 2, !tbaa !382
  %8162 = insertelement <64 x i16> %8157, i16 %8161, i32 6
  %8163 = extractelement <64 x i32> %8127, i32 7
  %8164 = sext i32 %8163 to i64
  %8165 = getelementptr inbounds i16, i16* %66, i64 %8164
  %8166 = load i16, i16* %8165, align 2, !tbaa !382
  %8167 = insertelement <64 x i16> %8162, i16 %8166, i32 7
  %8168 = extractelement <64 x i32> %8127, i32 8
  %8169 = sext i32 %8168 to i64
  %8170 = getelementptr inbounds i16, i16* %66, i64 %8169
  %8171 = load i16, i16* %8170, align 2, !tbaa !382
  %8172 = insertelement <64 x i16> %8167, i16 %8171, i32 8
  %8173 = extractelement <64 x i32> %8127, i32 9
  %8174 = sext i32 %8173 to i64
  %8175 = getelementptr inbounds i16, i16* %66, i64 %8174
  %8176 = load i16, i16* %8175, align 2, !tbaa !382
  %8177 = insertelement <64 x i16> %8172, i16 %8176, i32 9
  %8178 = extractelement <64 x i32> %8127, i32 10
  %8179 = sext i32 %8178 to i64
  %8180 = getelementptr inbounds i16, i16* %66, i64 %8179
  %8181 = load i16, i16* %8180, align 2, !tbaa !382
  %8182 = insertelement <64 x i16> %8177, i16 %8181, i32 10
  %8183 = extractelement <64 x i32> %8127, i32 11
  %8184 = sext i32 %8183 to i64
  %8185 = getelementptr inbounds i16, i16* %66, i64 %8184
  %8186 = load i16, i16* %8185, align 2, !tbaa !382
  %8187 = insertelement <64 x i16> %8182, i16 %8186, i32 11
  %8188 = extractelement <64 x i32> %8127, i32 12
  %8189 = sext i32 %8188 to i64
  %8190 = getelementptr inbounds i16, i16* %66, i64 %8189
  %8191 = load i16, i16* %8190, align 2, !tbaa !382
  %8192 = insertelement <64 x i16> %8187, i16 %8191, i32 12
  %8193 = extractelement <64 x i32> %8127, i32 13
  %8194 = sext i32 %8193 to i64
  %8195 = getelementptr inbounds i16, i16* %66, i64 %8194
  %8196 = load i16, i16* %8195, align 2, !tbaa !382
  %8197 = insertelement <64 x i16> %8192, i16 %8196, i32 13
  %8198 = extractelement <64 x i32> %8127, i32 14
  %8199 = sext i32 %8198 to i64
  %8200 = getelementptr inbounds i16, i16* %66, i64 %8199
  %8201 = load i16, i16* %8200, align 2, !tbaa !382
  %8202 = insertelement <64 x i16> %8197, i16 %8201, i32 14
  %8203 = extractelement <64 x i32> %8127, i32 15
  %8204 = sext i32 %8203 to i64
  %8205 = getelementptr inbounds i16, i16* %66, i64 %8204
  %8206 = load i16, i16* %8205, align 2, !tbaa !382
  %8207 = insertelement <64 x i16> %8202, i16 %8206, i32 15
  %8208 = extractelement <64 x i32> %8127, i32 16
  %8209 = sext i32 %8208 to i64
  %8210 = getelementptr inbounds i16, i16* %66, i64 %8209
  %8211 = load i16, i16* %8210, align 2, !tbaa !382
  %8212 = insertelement <64 x i16> %8207, i16 %8211, i32 16
  %8213 = extractelement <64 x i32> %8127, i32 17
  %8214 = sext i32 %8213 to i64
  %8215 = getelementptr inbounds i16, i16* %66, i64 %8214
  %8216 = load i16, i16* %8215, align 2, !tbaa !382
  %8217 = insertelement <64 x i16> %8212, i16 %8216, i32 17
  %8218 = extractelement <64 x i32> %8127, i32 18
  %8219 = sext i32 %8218 to i64
  %8220 = getelementptr inbounds i16, i16* %66, i64 %8219
  %8221 = load i16, i16* %8220, align 2, !tbaa !382
  %8222 = insertelement <64 x i16> %8217, i16 %8221, i32 18
  %8223 = extractelement <64 x i32> %8127, i32 19
  %8224 = sext i32 %8223 to i64
  %8225 = getelementptr inbounds i16, i16* %66, i64 %8224
  %8226 = load i16, i16* %8225, align 2, !tbaa !382
  %8227 = insertelement <64 x i16> %8222, i16 %8226, i32 19
  %8228 = extractelement <64 x i32> %8127, i32 20
  %8229 = sext i32 %8228 to i64
  %8230 = getelementptr inbounds i16, i16* %66, i64 %8229
  %8231 = load i16, i16* %8230, align 2, !tbaa !382
  %8232 = insertelement <64 x i16> %8227, i16 %8231, i32 20
  %8233 = extractelement <64 x i32> %8127, i32 21
  %8234 = sext i32 %8233 to i64
  %8235 = getelementptr inbounds i16, i16* %66, i64 %8234
  %8236 = load i16, i16* %8235, align 2, !tbaa !382
  %8237 = insertelement <64 x i16> %8232, i16 %8236, i32 21
  %8238 = extractelement <64 x i32> %8127, i32 22
  %8239 = sext i32 %8238 to i64
  %8240 = getelementptr inbounds i16, i16* %66, i64 %8239
  %8241 = load i16, i16* %8240, align 2, !tbaa !382
  %8242 = insertelement <64 x i16> %8237, i16 %8241, i32 22
  %8243 = extractelement <64 x i32> %8127, i32 23
  %8244 = sext i32 %8243 to i64
  %8245 = getelementptr inbounds i16, i16* %66, i64 %8244
  %8246 = load i16, i16* %8245, align 2, !tbaa !382
  %8247 = insertelement <64 x i16> %8242, i16 %8246, i32 23
  %8248 = extractelement <64 x i32> %8127, i32 24
  %8249 = sext i32 %8248 to i64
  %8250 = getelementptr inbounds i16, i16* %66, i64 %8249
  %8251 = load i16, i16* %8250, align 2, !tbaa !382
  %8252 = insertelement <64 x i16> %8247, i16 %8251, i32 24
  %8253 = extractelement <64 x i32> %8127, i32 25
  %8254 = sext i32 %8253 to i64
  %8255 = getelementptr inbounds i16, i16* %66, i64 %8254
  %8256 = load i16, i16* %8255, align 2, !tbaa !382
  %8257 = insertelement <64 x i16> %8252, i16 %8256, i32 25
  %8258 = extractelement <64 x i32> %8127, i32 26
  %8259 = sext i32 %8258 to i64
  %8260 = getelementptr inbounds i16, i16* %66, i64 %8259
  %8261 = load i16, i16* %8260, align 2, !tbaa !382
  %8262 = insertelement <64 x i16> %8257, i16 %8261, i32 26
  %8263 = extractelement <64 x i32> %8127, i32 27
  %8264 = sext i32 %8263 to i64
  %8265 = getelementptr inbounds i16, i16* %66, i64 %8264
  %8266 = load i16, i16* %8265, align 2, !tbaa !382
  %8267 = insertelement <64 x i16> %8262, i16 %8266, i32 27
  %8268 = extractelement <64 x i32> %8127, i32 28
  %8269 = sext i32 %8268 to i64
  %8270 = getelementptr inbounds i16, i16* %66, i64 %8269
  %8271 = load i16, i16* %8270, align 2, !tbaa !382
  %8272 = insertelement <64 x i16> %8267, i16 %8271, i32 28
  %8273 = extractelement <64 x i32> %8127, i32 29
  %8274 = sext i32 %8273 to i64
  %8275 = getelementptr inbounds i16, i16* %66, i64 %8274
  %8276 = load i16, i16* %8275, align 2, !tbaa !382
  %8277 = insertelement <64 x i16> %8272, i16 %8276, i32 29
  %8278 = extractelement <64 x i32> %8127, i32 30
  %8279 = sext i32 %8278 to i64
  %8280 = getelementptr inbounds i16, i16* %66, i64 %8279
  %8281 = load i16, i16* %8280, align 2, !tbaa !382
  %8282 = insertelement <64 x i16> %8277, i16 %8281, i32 30
  %8283 = extractelement <64 x i32> %8127, i32 31
  %8284 = sext i32 %8283 to i64
  %8285 = getelementptr inbounds i16, i16* %66, i64 %8284
  %8286 = load i16, i16* %8285, align 2, !tbaa !382
  %8287 = insertelement <64 x i16> %8282, i16 %8286, i32 31
  %8288 = extractelement <64 x i32> %8127, i32 32
  %8289 = sext i32 %8288 to i64
  %8290 = getelementptr inbounds i16, i16* %66, i64 %8289
  %8291 = load i16, i16* %8290, align 2, !tbaa !382
  %8292 = insertelement <64 x i16> %8287, i16 %8291, i32 32
  %8293 = extractelement <64 x i32> %8127, i32 33
  %8294 = sext i32 %8293 to i64
  %8295 = getelementptr inbounds i16, i16* %66, i64 %8294
  %8296 = load i16, i16* %8295, align 2, !tbaa !382
  %8297 = insertelement <64 x i16> %8292, i16 %8296, i32 33
  %8298 = extractelement <64 x i32> %8127, i32 34
  %8299 = sext i32 %8298 to i64
  %8300 = getelementptr inbounds i16, i16* %66, i64 %8299
  %8301 = load i16, i16* %8300, align 2, !tbaa !382
  %8302 = insertelement <64 x i16> %8297, i16 %8301, i32 34
  %8303 = extractelement <64 x i32> %8127, i32 35
  %8304 = sext i32 %8303 to i64
  %8305 = getelementptr inbounds i16, i16* %66, i64 %8304
  %8306 = load i16, i16* %8305, align 2, !tbaa !382
  %8307 = insertelement <64 x i16> %8302, i16 %8306, i32 35
  %8308 = extractelement <64 x i32> %8127, i32 36
  %8309 = sext i32 %8308 to i64
  %8310 = getelementptr inbounds i16, i16* %66, i64 %8309
  %8311 = load i16, i16* %8310, align 2, !tbaa !382
  %8312 = insertelement <64 x i16> %8307, i16 %8311, i32 36
  %8313 = extractelement <64 x i32> %8127, i32 37
  %8314 = sext i32 %8313 to i64
  %8315 = getelementptr inbounds i16, i16* %66, i64 %8314
  %8316 = load i16, i16* %8315, align 2, !tbaa !382
  %8317 = insertelement <64 x i16> %8312, i16 %8316, i32 37
  %8318 = extractelement <64 x i32> %8127, i32 38
  %8319 = sext i32 %8318 to i64
  %8320 = getelementptr inbounds i16, i16* %66, i64 %8319
  %8321 = load i16, i16* %8320, align 2, !tbaa !382
  %8322 = insertelement <64 x i16> %8317, i16 %8321, i32 38
  %8323 = extractelement <64 x i32> %8127, i32 39
  %8324 = sext i32 %8323 to i64
  %8325 = getelementptr inbounds i16, i16* %66, i64 %8324
  %8326 = load i16, i16* %8325, align 2, !tbaa !382
  %8327 = insertelement <64 x i16> %8322, i16 %8326, i32 39
  %8328 = extractelement <64 x i32> %8127, i32 40
  %8329 = sext i32 %8328 to i64
  %8330 = getelementptr inbounds i16, i16* %66, i64 %8329
  %8331 = load i16, i16* %8330, align 2, !tbaa !382
  %8332 = insertelement <64 x i16> %8327, i16 %8331, i32 40
  %8333 = extractelement <64 x i32> %8127, i32 41
  %8334 = sext i32 %8333 to i64
  %8335 = getelementptr inbounds i16, i16* %66, i64 %8334
  %8336 = load i16, i16* %8335, align 2, !tbaa !382
  %8337 = insertelement <64 x i16> %8332, i16 %8336, i32 41
  %8338 = extractelement <64 x i32> %8127, i32 42
  %8339 = sext i32 %8338 to i64
  %8340 = getelementptr inbounds i16, i16* %66, i64 %8339
  %8341 = load i16, i16* %8340, align 2, !tbaa !382
  %8342 = insertelement <64 x i16> %8337, i16 %8341, i32 42
  %8343 = extractelement <64 x i32> %8127, i32 43
  %8344 = sext i32 %8343 to i64
  %8345 = getelementptr inbounds i16, i16* %66, i64 %8344
  %8346 = load i16, i16* %8345, align 2, !tbaa !382
  %8347 = insertelement <64 x i16> %8342, i16 %8346, i32 43
  %8348 = extractelement <64 x i32> %8127, i32 44
  %8349 = sext i32 %8348 to i64
  %8350 = getelementptr inbounds i16, i16* %66, i64 %8349
  %8351 = load i16, i16* %8350, align 2, !tbaa !382
  %8352 = insertelement <64 x i16> %8347, i16 %8351, i32 44
  %8353 = extractelement <64 x i32> %8127, i32 45
  %8354 = sext i32 %8353 to i64
  %8355 = getelementptr inbounds i16, i16* %66, i64 %8354
  %8356 = load i16, i16* %8355, align 2, !tbaa !382
  %8357 = insertelement <64 x i16> %8352, i16 %8356, i32 45
  %8358 = extractelement <64 x i32> %8127, i32 46
  %8359 = sext i32 %8358 to i64
  %8360 = getelementptr inbounds i16, i16* %66, i64 %8359
  %8361 = load i16, i16* %8360, align 2, !tbaa !382
  %8362 = insertelement <64 x i16> %8357, i16 %8361, i32 46
  %8363 = extractelement <64 x i32> %8127, i32 47
  %8364 = sext i32 %8363 to i64
  %8365 = getelementptr inbounds i16, i16* %66, i64 %8364
  %8366 = load i16, i16* %8365, align 2, !tbaa !382
  %8367 = insertelement <64 x i16> %8362, i16 %8366, i32 47
  %8368 = extractelement <64 x i32> %8127, i32 48
  %8369 = sext i32 %8368 to i64
  %8370 = getelementptr inbounds i16, i16* %66, i64 %8369
  %8371 = load i16, i16* %8370, align 2, !tbaa !382
  %8372 = insertelement <64 x i16> %8367, i16 %8371, i32 48
  %8373 = extractelement <64 x i32> %8127, i32 49
  %8374 = sext i32 %8373 to i64
  %8375 = getelementptr inbounds i16, i16* %66, i64 %8374
  %8376 = load i16, i16* %8375, align 2, !tbaa !382
  %8377 = insertelement <64 x i16> %8372, i16 %8376, i32 49
  %8378 = extractelement <64 x i32> %8127, i32 50
  %8379 = sext i32 %8378 to i64
  %8380 = getelementptr inbounds i16, i16* %66, i64 %8379
  %8381 = load i16, i16* %8380, align 2, !tbaa !382
  %8382 = insertelement <64 x i16> %8377, i16 %8381, i32 50
  %8383 = extractelement <64 x i32> %8127, i32 51
  %8384 = sext i32 %8383 to i64
  %8385 = getelementptr inbounds i16, i16* %66, i64 %8384
  %8386 = load i16, i16* %8385, align 2, !tbaa !382
  %8387 = insertelement <64 x i16> %8382, i16 %8386, i32 51
  %8388 = extractelement <64 x i32> %8127, i32 52
  %8389 = sext i32 %8388 to i64
  %8390 = getelementptr inbounds i16, i16* %66, i64 %8389
  %8391 = load i16, i16* %8390, align 2, !tbaa !382
  %8392 = insertelement <64 x i16> %8387, i16 %8391, i32 52
  %8393 = extractelement <64 x i32> %8127, i32 53
  %8394 = sext i32 %8393 to i64
  %8395 = getelementptr inbounds i16, i16* %66, i64 %8394
  %8396 = load i16, i16* %8395, align 2, !tbaa !382
  %8397 = insertelement <64 x i16> %8392, i16 %8396, i32 53
  %8398 = extractelement <64 x i32> %8127, i32 54
  %8399 = sext i32 %8398 to i64
  %8400 = getelementptr inbounds i16, i16* %66, i64 %8399
  %8401 = load i16, i16* %8400, align 2, !tbaa !382
  %8402 = insertelement <64 x i16> %8397, i16 %8401, i32 54
  %8403 = extractelement <64 x i32> %8127, i32 55
  %8404 = sext i32 %8403 to i64
  %8405 = getelementptr inbounds i16, i16* %66, i64 %8404
  %8406 = load i16, i16* %8405, align 2, !tbaa !382
  %8407 = insertelement <64 x i16> %8402, i16 %8406, i32 55
  %8408 = extractelement <64 x i32> %8127, i32 56
  %8409 = sext i32 %8408 to i64
  %8410 = getelementptr inbounds i16, i16* %66, i64 %8409
  %8411 = load i16, i16* %8410, align 2, !tbaa !382
  %8412 = insertelement <64 x i16> %8407, i16 %8411, i32 56
  %8413 = extractelement <64 x i32> %8127, i32 57
  %8414 = sext i32 %8413 to i64
  %8415 = getelementptr inbounds i16, i16* %66, i64 %8414
  %8416 = load i16, i16* %8415, align 2, !tbaa !382
  %8417 = insertelement <64 x i16> %8412, i16 %8416, i32 57
  %8418 = extractelement <64 x i32> %8127, i32 58
  %8419 = sext i32 %8418 to i64
  %8420 = getelementptr inbounds i16, i16* %66, i64 %8419
  %8421 = load i16, i16* %8420, align 2, !tbaa !382
  %8422 = insertelement <64 x i16> %8417, i16 %8421, i32 58
  %8423 = extractelement <64 x i32> %8127, i32 59
  %8424 = sext i32 %8423 to i64
  %8425 = getelementptr inbounds i16, i16* %66, i64 %8424
  %8426 = load i16, i16* %8425, align 2, !tbaa !382
  %8427 = insertelement <64 x i16> %8422, i16 %8426, i32 59
  %8428 = extractelement <64 x i32> %8127, i32 60
  %8429 = sext i32 %8428 to i64
  %8430 = getelementptr inbounds i16, i16* %66, i64 %8429
  %8431 = load i16, i16* %8430, align 2, !tbaa !382
  %8432 = insertelement <64 x i16> %8427, i16 %8431, i32 60
  %8433 = extractelement <64 x i32> %8127, i32 61
  %8434 = sext i32 %8433 to i64
  %8435 = getelementptr inbounds i16, i16* %66, i64 %8434
  %8436 = load i16, i16* %8435, align 2, !tbaa !382
  %8437 = insertelement <64 x i16> %8432, i16 %8436, i32 61
  %8438 = extractelement <64 x i32> %8127, i32 62
  %8439 = sext i32 %8438 to i64
  %8440 = getelementptr inbounds i16, i16* %66, i64 %8439
  %8441 = load i16, i16* %8440, align 2, !tbaa !382
  %8442 = insertelement <64 x i16> %8437, i16 %8441, i32 62
  %8443 = extractelement <64 x i32> %8127, i32 63
  %8444 = sext i32 %8443 to i64
  %8445 = getelementptr inbounds i16, i16* %66, i64 %8444
  %8446 = load i16, i16* %8445, align 2, !tbaa !382
  %8447 = insertelement <64 x i16> %8442, i16 %8446, i32 63
  %8448 = add nsw i32 %blur_x.s0.x.v1.base.s21, -60
  %8449 = insertelement <64 x i32> undef, i32 %8448, i32 0
  %8450 = shufflevector <64 x i32> %8449, <64 x i32> undef, <64 x i32> zeroinitializer
  %8451 = add nsw <64 x i32> %8450, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8452 = shufflevector <64 x i32> %8451, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8453 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8452, <4 x i32> %65)
  %8454 = shufflevector <64 x i32> %8451, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8455 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8454, <4 x i32> %65)
  %8456 = shufflevector <64 x i32> %8451, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8457 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8456, <4 x i32> %65)
  %8458 = shufflevector <64 x i32> %8451, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %8459 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8458, <4 x i32> %65)
  %8460 = shufflevector <64 x i32> %8451, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %8461 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8460, <4 x i32> %65)
  %8462 = shufflevector <64 x i32> %8451, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %8463 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8462, <4 x i32> %65)
  %8464 = shufflevector <64 x i32> %8451, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %8465 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8464, <4 x i32> %65)
  %8466 = shufflevector <64 x i32> %8451, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %8467 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8466, <4 x i32> %65)
  %8468 = shufflevector <64 x i32> %8451, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %8469 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8468, <4 x i32> %65)
  %8470 = shufflevector <64 x i32> %8451, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %8471 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8470, <4 x i32> %65)
  %8472 = shufflevector <64 x i32> %8451, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %8473 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8472, <4 x i32> %65)
  %8474 = shufflevector <64 x i32> %8451, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %8475 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8474, <4 x i32> %65)
  %8476 = shufflevector <64 x i32> %8451, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %8477 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8476, <4 x i32> %65)
  %8478 = shufflevector <64 x i32> %8451, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %8479 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8478, <4 x i32> %65)
  %8480 = shufflevector <64 x i32> %8451, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %8481 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8480, <4 x i32> %65)
  %8482 = shufflevector <64 x i32> %8451, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %8483 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8482, <4 x i32> %65)
  %8484 = shufflevector <4 x i32> %8483, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %8485 = shufflevector <8 x i32> %8484, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %8486 = shufflevector <16 x i32> %8485, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %8487 = shufflevector <32 x i32> %8486, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %8488 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8453, <4 x i32> zeroinitializer)
  %8489 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8455, <4 x i32> zeroinitializer)
  %8490 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8457, <4 x i32> zeroinitializer)
  %8491 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8459, <4 x i32> zeroinitializer)
  %8492 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8461, <4 x i32> zeroinitializer)
  %8493 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8463, <4 x i32> zeroinitializer)
  %8494 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8465, <4 x i32> zeroinitializer)
  %8495 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8467, <4 x i32> zeroinitializer)
  %8496 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8469, <4 x i32> zeroinitializer)
  %8497 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8471, <4 x i32> zeroinitializer)
  %8498 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8473, <4 x i32> zeroinitializer)
  %8499 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8475, <4 x i32> zeroinitializer)
  %8500 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8477, <4 x i32> zeroinitializer)
  %8501 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8479, <4 x i32> zeroinitializer)
  %8502 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8481, <4 x i32> zeroinitializer)
  %8503 = shufflevector <64 x i32> %8487, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %8504 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8503, <4 x i32> zeroinitializer)
  %8505 = shufflevector <4 x i32> %8488, <4 x i32> %8489, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8506 = shufflevector <4 x i32> %8490, <4 x i32> %8491, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8507 = shufflevector <4 x i32> %8492, <4 x i32> %8493, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8508 = shufflevector <4 x i32> %8494, <4 x i32> %8495, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8509 = shufflevector <4 x i32> %8496, <4 x i32> %8497, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8510 = shufflevector <4 x i32> %8498, <4 x i32> %8499, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8511 = shufflevector <4 x i32> %8500, <4 x i32> %8501, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8512 = shufflevector <4 x i32> %8502, <4 x i32> %8504, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8513 = shufflevector <8 x i32> %8505, <8 x i32> %8506, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8514 = shufflevector <8 x i32> %8507, <8 x i32> %8508, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8515 = shufflevector <8 x i32> %8509, <8 x i32> %8510, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8516 = shufflevector <8 x i32> %8511, <8 x i32> %8512, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8517 = shufflevector <16 x i32> %8513, <16 x i32> %8514, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8518 = shufflevector <16 x i32> %8515, <16 x i32> %8516, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8519 = shufflevector <32 x i32> %8517, <32 x i32> %8518, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8520 = add nsw <64 x i32> %8519, %t257
  %8521 = extractelement <64 x i32> %8520, i32 0
  %8522 = sext i32 %8521 to i64
  %8523 = getelementptr inbounds i16, i16* %66, i64 %8522
  %8524 = load i16, i16* %8523, align 2, !tbaa !382
  %8525 = insertelement <64 x i16> undef, i16 %8524, i32 0
  %8526 = extractelement <64 x i32> %8520, i32 1
  %8527 = sext i32 %8526 to i64
  %8528 = getelementptr inbounds i16, i16* %66, i64 %8527
  %8529 = load i16, i16* %8528, align 2, !tbaa !382
  %8530 = insertelement <64 x i16> %8525, i16 %8529, i32 1
  %8531 = extractelement <64 x i32> %8520, i32 2
  %8532 = sext i32 %8531 to i64
  %8533 = getelementptr inbounds i16, i16* %66, i64 %8532
  %8534 = load i16, i16* %8533, align 2, !tbaa !382
  %8535 = insertelement <64 x i16> %8530, i16 %8534, i32 2
  %8536 = extractelement <64 x i32> %8520, i32 3
  %8537 = sext i32 %8536 to i64
  %8538 = getelementptr inbounds i16, i16* %66, i64 %8537
  %8539 = load i16, i16* %8538, align 2, !tbaa !382
  %8540 = insertelement <64 x i16> %8535, i16 %8539, i32 3
  %8541 = extractelement <64 x i32> %8520, i32 4
  %8542 = sext i32 %8541 to i64
  %8543 = getelementptr inbounds i16, i16* %66, i64 %8542
  %8544 = load i16, i16* %8543, align 2, !tbaa !382
  %8545 = insertelement <64 x i16> %8540, i16 %8544, i32 4
  %8546 = extractelement <64 x i32> %8520, i32 5
  %8547 = sext i32 %8546 to i64
  %8548 = getelementptr inbounds i16, i16* %66, i64 %8547
  %8549 = load i16, i16* %8548, align 2, !tbaa !382
  %8550 = insertelement <64 x i16> %8545, i16 %8549, i32 5
  %8551 = extractelement <64 x i32> %8520, i32 6
  %8552 = sext i32 %8551 to i64
  %8553 = getelementptr inbounds i16, i16* %66, i64 %8552
  %8554 = load i16, i16* %8553, align 2, !tbaa !382
  %8555 = insertelement <64 x i16> %8550, i16 %8554, i32 6
  %8556 = extractelement <64 x i32> %8520, i32 7
  %8557 = sext i32 %8556 to i64
  %8558 = getelementptr inbounds i16, i16* %66, i64 %8557
  %8559 = load i16, i16* %8558, align 2, !tbaa !382
  %8560 = insertelement <64 x i16> %8555, i16 %8559, i32 7
  %8561 = extractelement <64 x i32> %8520, i32 8
  %8562 = sext i32 %8561 to i64
  %8563 = getelementptr inbounds i16, i16* %66, i64 %8562
  %8564 = load i16, i16* %8563, align 2, !tbaa !382
  %8565 = insertelement <64 x i16> %8560, i16 %8564, i32 8
  %8566 = extractelement <64 x i32> %8520, i32 9
  %8567 = sext i32 %8566 to i64
  %8568 = getelementptr inbounds i16, i16* %66, i64 %8567
  %8569 = load i16, i16* %8568, align 2, !tbaa !382
  %8570 = insertelement <64 x i16> %8565, i16 %8569, i32 9
  %8571 = extractelement <64 x i32> %8520, i32 10
  %8572 = sext i32 %8571 to i64
  %8573 = getelementptr inbounds i16, i16* %66, i64 %8572
  %8574 = load i16, i16* %8573, align 2, !tbaa !382
  %8575 = insertelement <64 x i16> %8570, i16 %8574, i32 10
  %8576 = extractelement <64 x i32> %8520, i32 11
  %8577 = sext i32 %8576 to i64
  %8578 = getelementptr inbounds i16, i16* %66, i64 %8577
  %8579 = load i16, i16* %8578, align 2, !tbaa !382
  %8580 = insertelement <64 x i16> %8575, i16 %8579, i32 11
  %8581 = extractelement <64 x i32> %8520, i32 12
  %8582 = sext i32 %8581 to i64
  %8583 = getelementptr inbounds i16, i16* %66, i64 %8582
  %8584 = load i16, i16* %8583, align 2, !tbaa !382
  %8585 = insertelement <64 x i16> %8580, i16 %8584, i32 12
  %8586 = extractelement <64 x i32> %8520, i32 13
  %8587 = sext i32 %8586 to i64
  %8588 = getelementptr inbounds i16, i16* %66, i64 %8587
  %8589 = load i16, i16* %8588, align 2, !tbaa !382
  %8590 = insertelement <64 x i16> %8585, i16 %8589, i32 13
  %8591 = extractelement <64 x i32> %8520, i32 14
  %8592 = sext i32 %8591 to i64
  %8593 = getelementptr inbounds i16, i16* %66, i64 %8592
  %8594 = load i16, i16* %8593, align 2, !tbaa !382
  %8595 = insertelement <64 x i16> %8590, i16 %8594, i32 14
  %8596 = extractelement <64 x i32> %8520, i32 15
  %8597 = sext i32 %8596 to i64
  %8598 = getelementptr inbounds i16, i16* %66, i64 %8597
  %8599 = load i16, i16* %8598, align 2, !tbaa !382
  %8600 = insertelement <64 x i16> %8595, i16 %8599, i32 15
  %8601 = extractelement <64 x i32> %8520, i32 16
  %8602 = sext i32 %8601 to i64
  %8603 = getelementptr inbounds i16, i16* %66, i64 %8602
  %8604 = load i16, i16* %8603, align 2, !tbaa !382
  %8605 = insertelement <64 x i16> %8600, i16 %8604, i32 16
  %8606 = extractelement <64 x i32> %8520, i32 17
  %8607 = sext i32 %8606 to i64
  %8608 = getelementptr inbounds i16, i16* %66, i64 %8607
  %8609 = load i16, i16* %8608, align 2, !tbaa !382
  %8610 = insertelement <64 x i16> %8605, i16 %8609, i32 17
  %8611 = extractelement <64 x i32> %8520, i32 18
  %8612 = sext i32 %8611 to i64
  %8613 = getelementptr inbounds i16, i16* %66, i64 %8612
  %8614 = load i16, i16* %8613, align 2, !tbaa !382
  %8615 = insertelement <64 x i16> %8610, i16 %8614, i32 18
  %8616 = extractelement <64 x i32> %8520, i32 19
  %8617 = sext i32 %8616 to i64
  %8618 = getelementptr inbounds i16, i16* %66, i64 %8617
  %8619 = load i16, i16* %8618, align 2, !tbaa !382
  %8620 = insertelement <64 x i16> %8615, i16 %8619, i32 19
  %8621 = extractelement <64 x i32> %8520, i32 20
  %8622 = sext i32 %8621 to i64
  %8623 = getelementptr inbounds i16, i16* %66, i64 %8622
  %8624 = load i16, i16* %8623, align 2, !tbaa !382
  %8625 = insertelement <64 x i16> %8620, i16 %8624, i32 20
  %8626 = extractelement <64 x i32> %8520, i32 21
  %8627 = sext i32 %8626 to i64
  %8628 = getelementptr inbounds i16, i16* %66, i64 %8627
  %8629 = load i16, i16* %8628, align 2, !tbaa !382
  %8630 = insertelement <64 x i16> %8625, i16 %8629, i32 21
  %8631 = extractelement <64 x i32> %8520, i32 22
  %8632 = sext i32 %8631 to i64
  %8633 = getelementptr inbounds i16, i16* %66, i64 %8632
  %8634 = load i16, i16* %8633, align 2, !tbaa !382
  %8635 = insertelement <64 x i16> %8630, i16 %8634, i32 22
  %8636 = extractelement <64 x i32> %8520, i32 23
  %8637 = sext i32 %8636 to i64
  %8638 = getelementptr inbounds i16, i16* %66, i64 %8637
  %8639 = load i16, i16* %8638, align 2, !tbaa !382
  %8640 = insertelement <64 x i16> %8635, i16 %8639, i32 23
  %8641 = extractelement <64 x i32> %8520, i32 24
  %8642 = sext i32 %8641 to i64
  %8643 = getelementptr inbounds i16, i16* %66, i64 %8642
  %8644 = load i16, i16* %8643, align 2, !tbaa !382
  %8645 = insertelement <64 x i16> %8640, i16 %8644, i32 24
  %8646 = extractelement <64 x i32> %8520, i32 25
  %8647 = sext i32 %8646 to i64
  %8648 = getelementptr inbounds i16, i16* %66, i64 %8647
  %8649 = load i16, i16* %8648, align 2, !tbaa !382
  %8650 = insertelement <64 x i16> %8645, i16 %8649, i32 25
  %8651 = extractelement <64 x i32> %8520, i32 26
  %8652 = sext i32 %8651 to i64
  %8653 = getelementptr inbounds i16, i16* %66, i64 %8652
  %8654 = load i16, i16* %8653, align 2, !tbaa !382
  %8655 = insertelement <64 x i16> %8650, i16 %8654, i32 26
  %8656 = extractelement <64 x i32> %8520, i32 27
  %8657 = sext i32 %8656 to i64
  %8658 = getelementptr inbounds i16, i16* %66, i64 %8657
  %8659 = load i16, i16* %8658, align 2, !tbaa !382
  %8660 = insertelement <64 x i16> %8655, i16 %8659, i32 27
  %8661 = extractelement <64 x i32> %8520, i32 28
  %8662 = sext i32 %8661 to i64
  %8663 = getelementptr inbounds i16, i16* %66, i64 %8662
  %8664 = load i16, i16* %8663, align 2, !tbaa !382
  %8665 = insertelement <64 x i16> %8660, i16 %8664, i32 28
  %8666 = extractelement <64 x i32> %8520, i32 29
  %8667 = sext i32 %8666 to i64
  %8668 = getelementptr inbounds i16, i16* %66, i64 %8667
  %8669 = load i16, i16* %8668, align 2, !tbaa !382
  %8670 = insertelement <64 x i16> %8665, i16 %8669, i32 29
  %8671 = extractelement <64 x i32> %8520, i32 30
  %8672 = sext i32 %8671 to i64
  %8673 = getelementptr inbounds i16, i16* %66, i64 %8672
  %8674 = load i16, i16* %8673, align 2, !tbaa !382
  %8675 = insertelement <64 x i16> %8670, i16 %8674, i32 30
  %8676 = extractelement <64 x i32> %8520, i32 31
  %8677 = sext i32 %8676 to i64
  %8678 = getelementptr inbounds i16, i16* %66, i64 %8677
  %8679 = load i16, i16* %8678, align 2, !tbaa !382
  %8680 = insertelement <64 x i16> %8675, i16 %8679, i32 31
  %8681 = extractelement <64 x i32> %8520, i32 32
  %8682 = sext i32 %8681 to i64
  %8683 = getelementptr inbounds i16, i16* %66, i64 %8682
  %8684 = load i16, i16* %8683, align 2, !tbaa !382
  %8685 = insertelement <64 x i16> %8680, i16 %8684, i32 32
  %8686 = extractelement <64 x i32> %8520, i32 33
  %8687 = sext i32 %8686 to i64
  %8688 = getelementptr inbounds i16, i16* %66, i64 %8687
  %8689 = load i16, i16* %8688, align 2, !tbaa !382
  %8690 = insertelement <64 x i16> %8685, i16 %8689, i32 33
  %8691 = extractelement <64 x i32> %8520, i32 34
  %8692 = sext i32 %8691 to i64
  %8693 = getelementptr inbounds i16, i16* %66, i64 %8692
  %8694 = load i16, i16* %8693, align 2, !tbaa !382
  %8695 = insertelement <64 x i16> %8690, i16 %8694, i32 34
  %8696 = extractelement <64 x i32> %8520, i32 35
  %8697 = sext i32 %8696 to i64
  %8698 = getelementptr inbounds i16, i16* %66, i64 %8697
  %8699 = load i16, i16* %8698, align 2, !tbaa !382
  %8700 = insertelement <64 x i16> %8695, i16 %8699, i32 35
  %8701 = extractelement <64 x i32> %8520, i32 36
  %8702 = sext i32 %8701 to i64
  %8703 = getelementptr inbounds i16, i16* %66, i64 %8702
  %8704 = load i16, i16* %8703, align 2, !tbaa !382
  %8705 = insertelement <64 x i16> %8700, i16 %8704, i32 36
  %8706 = extractelement <64 x i32> %8520, i32 37
  %8707 = sext i32 %8706 to i64
  %8708 = getelementptr inbounds i16, i16* %66, i64 %8707
  %8709 = load i16, i16* %8708, align 2, !tbaa !382
  %8710 = insertelement <64 x i16> %8705, i16 %8709, i32 37
  %8711 = extractelement <64 x i32> %8520, i32 38
  %8712 = sext i32 %8711 to i64
  %8713 = getelementptr inbounds i16, i16* %66, i64 %8712
  %8714 = load i16, i16* %8713, align 2, !tbaa !382
  %8715 = insertelement <64 x i16> %8710, i16 %8714, i32 38
  %8716 = extractelement <64 x i32> %8520, i32 39
  %8717 = sext i32 %8716 to i64
  %8718 = getelementptr inbounds i16, i16* %66, i64 %8717
  %8719 = load i16, i16* %8718, align 2, !tbaa !382
  %8720 = insertelement <64 x i16> %8715, i16 %8719, i32 39
  %8721 = extractelement <64 x i32> %8520, i32 40
  %8722 = sext i32 %8721 to i64
  %8723 = getelementptr inbounds i16, i16* %66, i64 %8722
  %8724 = load i16, i16* %8723, align 2, !tbaa !382
  %8725 = insertelement <64 x i16> %8720, i16 %8724, i32 40
  %8726 = extractelement <64 x i32> %8520, i32 41
  %8727 = sext i32 %8726 to i64
  %8728 = getelementptr inbounds i16, i16* %66, i64 %8727
  %8729 = load i16, i16* %8728, align 2, !tbaa !382
  %8730 = insertelement <64 x i16> %8725, i16 %8729, i32 41
  %8731 = extractelement <64 x i32> %8520, i32 42
  %8732 = sext i32 %8731 to i64
  %8733 = getelementptr inbounds i16, i16* %66, i64 %8732
  %8734 = load i16, i16* %8733, align 2, !tbaa !382
  %8735 = insertelement <64 x i16> %8730, i16 %8734, i32 42
  %8736 = extractelement <64 x i32> %8520, i32 43
  %8737 = sext i32 %8736 to i64
  %8738 = getelementptr inbounds i16, i16* %66, i64 %8737
  %8739 = load i16, i16* %8738, align 2, !tbaa !382
  %8740 = insertelement <64 x i16> %8735, i16 %8739, i32 43
  %8741 = extractelement <64 x i32> %8520, i32 44
  %8742 = sext i32 %8741 to i64
  %8743 = getelementptr inbounds i16, i16* %66, i64 %8742
  %8744 = load i16, i16* %8743, align 2, !tbaa !382
  %8745 = insertelement <64 x i16> %8740, i16 %8744, i32 44
  %8746 = extractelement <64 x i32> %8520, i32 45
  %8747 = sext i32 %8746 to i64
  %8748 = getelementptr inbounds i16, i16* %66, i64 %8747
  %8749 = load i16, i16* %8748, align 2, !tbaa !382
  %8750 = insertelement <64 x i16> %8745, i16 %8749, i32 45
  %8751 = extractelement <64 x i32> %8520, i32 46
  %8752 = sext i32 %8751 to i64
  %8753 = getelementptr inbounds i16, i16* %66, i64 %8752
  %8754 = load i16, i16* %8753, align 2, !tbaa !382
  %8755 = insertelement <64 x i16> %8750, i16 %8754, i32 46
  %8756 = extractelement <64 x i32> %8520, i32 47
  %8757 = sext i32 %8756 to i64
  %8758 = getelementptr inbounds i16, i16* %66, i64 %8757
  %8759 = load i16, i16* %8758, align 2, !tbaa !382
  %8760 = insertelement <64 x i16> %8755, i16 %8759, i32 47
  %8761 = extractelement <64 x i32> %8520, i32 48
  %8762 = sext i32 %8761 to i64
  %8763 = getelementptr inbounds i16, i16* %66, i64 %8762
  %8764 = load i16, i16* %8763, align 2, !tbaa !382
  %8765 = insertelement <64 x i16> %8760, i16 %8764, i32 48
  %8766 = extractelement <64 x i32> %8520, i32 49
  %8767 = sext i32 %8766 to i64
  %8768 = getelementptr inbounds i16, i16* %66, i64 %8767
  %8769 = load i16, i16* %8768, align 2, !tbaa !382
  %8770 = insertelement <64 x i16> %8765, i16 %8769, i32 49
  %8771 = extractelement <64 x i32> %8520, i32 50
  %8772 = sext i32 %8771 to i64
  %8773 = getelementptr inbounds i16, i16* %66, i64 %8772
  %8774 = load i16, i16* %8773, align 2, !tbaa !382
  %8775 = insertelement <64 x i16> %8770, i16 %8774, i32 50
  %8776 = extractelement <64 x i32> %8520, i32 51
  %8777 = sext i32 %8776 to i64
  %8778 = getelementptr inbounds i16, i16* %66, i64 %8777
  %8779 = load i16, i16* %8778, align 2, !tbaa !382
  %8780 = insertelement <64 x i16> %8775, i16 %8779, i32 51
  %8781 = extractelement <64 x i32> %8520, i32 52
  %8782 = sext i32 %8781 to i64
  %8783 = getelementptr inbounds i16, i16* %66, i64 %8782
  %8784 = load i16, i16* %8783, align 2, !tbaa !382
  %8785 = insertelement <64 x i16> %8780, i16 %8784, i32 52
  %8786 = extractelement <64 x i32> %8520, i32 53
  %8787 = sext i32 %8786 to i64
  %8788 = getelementptr inbounds i16, i16* %66, i64 %8787
  %8789 = load i16, i16* %8788, align 2, !tbaa !382
  %8790 = insertelement <64 x i16> %8785, i16 %8789, i32 53
  %8791 = extractelement <64 x i32> %8520, i32 54
  %8792 = sext i32 %8791 to i64
  %8793 = getelementptr inbounds i16, i16* %66, i64 %8792
  %8794 = load i16, i16* %8793, align 2, !tbaa !382
  %8795 = insertelement <64 x i16> %8790, i16 %8794, i32 54
  %8796 = extractelement <64 x i32> %8520, i32 55
  %8797 = sext i32 %8796 to i64
  %8798 = getelementptr inbounds i16, i16* %66, i64 %8797
  %8799 = load i16, i16* %8798, align 2, !tbaa !382
  %8800 = insertelement <64 x i16> %8795, i16 %8799, i32 55
  %8801 = extractelement <64 x i32> %8520, i32 56
  %8802 = sext i32 %8801 to i64
  %8803 = getelementptr inbounds i16, i16* %66, i64 %8802
  %8804 = load i16, i16* %8803, align 2, !tbaa !382
  %8805 = insertelement <64 x i16> %8800, i16 %8804, i32 56
  %8806 = extractelement <64 x i32> %8520, i32 57
  %8807 = sext i32 %8806 to i64
  %8808 = getelementptr inbounds i16, i16* %66, i64 %8807
  %8809 = load i16, i16* %8808, align 2, !tbaa !382
  %8810 = insertelement <64 x i16> %8805, i16 %8809, i32 57
  %8811 = extractelement <64 x i32> %8520, i32 58
  %8812 = sext i32 %8811 to i64
  %8813 = getelementptr inbounds i16, i16* %66, i64 %8812
  %8814 = load i16, i16* %8813, align 2, !tbaa !382
  %8815 = insertelement <64 x i16> %8810, i16 %8814, i32 58
  %8816 = extractelement <64 x i32> %8520, i32 59
  %8817 = sext i32 %8816 to i64
  %8818 = getelementptr inbounds i16, i16* %66, i64 %8817
  %8819 = load i16, i16* %8818, align 2, !tbaa !382
  %8820 = insertelement <64 x i16> %8815, i16 %8819, i32 59
  %8821 = extractelement <64 x i32> %8520, i32 60
  %8822 = sext i32 %8821 to i64
  %8823 = getelementptr inbounds i16, i16* %66, i64 %8822
  %8824 = load i16, i16* %8823, align 2, !tbaa !382
  %8825 = insertelement <64 x i16> %8820, i16 %8824, i32 60
  %8826 = extractelement <64 x i32> %8520, i32 61
  %8827 = sext i32 %8826 to i64
  %8828 = getelementptr inbounds i16, i16* %66, i64 %8827
  %8829 = load i16, i16* %8828, align 2, !tbaa !382
  %8830 = insertelement <64 x i16> %8825, i16 %8829, i32 61
  %8831 = extractelement <64 x i32> %8520, i32 62
  %8832 = sext i32 %8831 to i64
  %8833 = getelementptr inbounds i16, i16* %66, i64 %8832
  %8834 = load i16, i16* %8833, align 2, !tbaa !382
  %8835 = insertelement <64 x i16> %8830, i16 %8834, i32 62
  %8836 = extractelement <64 x i32> %8520, i32 63
  %8837 = sext i32 %8836 to i64
  %8838 = getelementptr inbounds i16, i16* %66, i64 %8837
  %8839 = load i16, i16* %8838, align 2, !tbaa !382
  %8840 = insertelement <64 x i16> %8835, i16 %8839, i32 63
  %8841 = add nsw i32 %blur_x.s0.x.v1.base.s21, -58
  %8842 = insertelement <64 x i32> undef, i32 %8841, i32 0
  %8843 = shufflevector <64 x i32> %8842, <64 x i32> undef, <64 x i32> zeroinitializer
  %8844 = add nsw <64 x i32> %8843, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8845 = shufflevector <64 x i32> %8844, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8846 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8845, <4 x i32> %65)
  %8847 = shufflevector <64 x i32> %8844, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8848 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8847, <4 x i32> %65)
  %8849 = shufflevector <64 x i32> %8844, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8850 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8849, <4 x i32> %65)
  %8851 = shufflevector <64 x i32> %8844, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %8852 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8851, <4 x i32> %65)
  %8853 = shufflevector <64 x i32> %8844, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %8854 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8853, <4 x i32> %65)
  %8855 = shufflevector <64 x i32> %8844, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %8856 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8855, <4 x i32> %65)
  %8857 = shufflevector <64 x i32> %8844, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %8858 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8857, <4 x i32> %65)
  %8859 = shufflevector <64 x i32> %8844, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %8860 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8859, <4 x i32> %65)
  %8861 = shufflevector <64 x i32> %8844, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %8862 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8861, <4 x i32> %65)
  %8863 = shufflevector <64 x i32> %8844, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %8864 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8863, <4 x i32> %65)
  %8865 = shufflevector <64 x i32> %8844, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %8866 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8865, <4 x i32> %65)
  %8867 = shufflevector <64 x i32> %8844, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %8868 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8867, <4 x i32> %65)
  %8869 = shufflevector <64 x i32> %8844, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %8870 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8869, <4 x i32> %65)
  %8871 = shufflevector <64 x i32> %8844, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %8872 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8871, <4 x i32> %65)
  %8873 = shufflevector <64 x i32> %8844, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %8874 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8873, <4 x i32> %65)
  %8875 = shufflevector <64 x i32> %8844, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %8876 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8875, <4 x i32> %65)
  %8877 = shufflevector <4 x i32> %8876, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %8878 = shufflevector <8 x i32> %8877, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %8879 = shufflevector <16 x i32> %8878, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %8880 = shufflevector <32 x i32> %8879, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %8881 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8846, <4 x i32> zeroinitializer)
  %8882 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8848, <4 x i32> zeroinitializer)
  %8883 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8850, <4 x i32> zeroinitializer)
  %8884 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8852, <4 x i32> zeroinitializer)
  %8885 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8854, <4 x i32> zeroinitializer)
  %8886 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8856, <4 x i32> zeroinitializer)
  %8887 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8858, <4 x i32> zeroinitializer)
  %8888 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8860, <4 x i32> zeroinitializer)
  %8889 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8862, <4 x i32> zeroinitializer)
  %8890 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8864, <4 x i32> zeroinitializer)
  %8891 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8866, <4 x i32> zeroinitializer)
  %8892 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8868, <4 x i32> zeroinitializer)
  %8893 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8870, <4 x i32> zeroinitializer)
  %8894 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8872, <4 x i32> zeroinitializer)
  %8895 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8874, <4 x i32> zeroinitializer)
  %8896 = shufflevector <64 x i32> %8880, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %8897 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8896, <4 x i32> zeroinitializer)
  %8898 = shufflevector <4 x i32> %8881, <4 x i32> %8882, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8899 = shufflevector <4 x i32> %8883, <4 x i32> %8884, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8900 = shufflevector <4 x i32> %8885, <4 x i32> %8886, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8901 = shufflevector <4 x i32> %8887, <4 x i32> %8888, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8902 = shufflevector <4 x i32> %8889, <4 x i32> %8890, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8903 = shufflevector <4 x i32> %8891, <4 x i32> %8892, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8904 = shufflevector <4 x i32> %8893, <4 x i32> %8894, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8905 = shufflevector <4 x i32> %8895, <4 x i32> %8897, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8906 = shufflevector <8 x i32> %8898, <8 x i32> %8899, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8907 = shufflevector <8 x i32> %8900, <8 x i32> %8901, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8908 = shufflevector <8 x i32> %8902, <8 x i32> %8903, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8909 = shufflevector <8 x i32> %8904, <8 x i32> %8905, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8910 = shufflevector <16 x i32> %8906, <16 x i32> %8907, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8911 = shufflevector <16 x i32> %8908, <16 x i32> %8909, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8912 = shufflevector <32 x i32> %8910, <32 x i32> %8911, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8913 = add nsw <64 x i32> %8912, %t257
  %8914 = extractelement <64 x i32> %8913, i32 0
  %8915 = sext i32 %8914 to i64
  %8916 = getelementptr inbounds i16, i16* %66, i64 %8915
  %8917 = load i16, i16* %8916, align 2, !tbaa !382
  %8918 = insertelement <64 x i16> undef, i16 %8917, i32 0
  %8919 = extractelement <64 x i32> %8913, i32 1
  %8920 = sext i32 %8919 to i64
  %8921 = getelementptr inbounds i16, i16* %66, i64 %8920
  %8922 = load i16, i16* %8921, align 2, !tbaa !382
  %8923 = insertelement <64 x i16> %8918, i16 %8922, i32 1
  %8924 = extractelement <64 x i32> %8913, i32 2
  %8925 = sext i32 %8924 to i64
  %8926 = getelementptr inbounds i16, i16* %66, i64 %8925
  %8927 = load i16, i16* %8926, align 2, !tbaa !382
  %8928 = insertelement <64 x i16> %8923, i16 %8927, i32 2
  %8929 = extractelement <64 x i32> %8913, i32 3
  %8930 = sext i32 %8929 to i64
  %8931 = getelementptr inbounds i16, i16* %66, i64 %8930
  %8932 = load i16, i16* %8931, align 2, !tbaa !382
  %8933 = insertelement <64 x i16> %8928, i16 %8932, i32 3
  %8934 = extractelement <64 x i32> %8913, i32 4
  %8935 = sext i32 %8934 to i64
  %8936 = getelementptr inbounds i16, i16* %66, i64 %8935
  %8937 = load i16, i16* %8936, align 2, !tbaa !382
  %8938 = insertelement <64 x i16> %8933, i16 %8937, i32 4
  %8939 = extractelement <64 x i32> %8913, i32 5
  %8940 = sext i32 %8939 to i64
  %8941 = getelementptr inbounds i16, i16* %66, i64 %8940
  %8942 = load i16, i16* %8941, align 2, !tbaa !382
  %8943 = insertelement <64 x i16> %8938, i16 %8942, i32 5
  %8944 = extractelement <64 x i32> %8913, i32 6
  %8945 = sext i32 %8944 to i64
  %8946 = getelementptr inbounds i16, i16* %66, i64 %8945
  %8947 = load i16, i16* %8946, align 2, !tbaa !382
  %8948 = insertelement <64 x i16> %8943, i16 %8947, i32 6
  %8949 = extractelement <64 x i32> %8913, i32 7
  %8950 = sext i32 %8949 to i64
  %8951 = getelementptr inbounds i16, i16* %66, i64 %8950
  %8952 = load i16, i16* %8951, align 2, !tbaa !382
  %8953 = insertelement <64 x i16> %8948, i16 %8952, i32 7
  %8954 = extractelement <64 x i32> %8913, i32 8
  %8955 = sext i32 %8954 to i64
  %8956 = getelementptr inbounds i16, i16* %66, i64 %8955
  %8957 = load i16, i16* %8956, align 2, !tbaa !382
  %8958 = insertelement <64 x i16> %8953, i16 %8957, i32 8
  %8959 = extractelement <64 x i32> %8913, i32 9
  %8960 = sext i32 %8959 to i64
  %8961 = getelementptr inbounds i16, i16* %66, i64 %8960
  %8962 = load i16, i16* %8961, align 2, !tbaa !382
  %8963 = insertelement <64 x i16> %8958, i16 %8962, i32 9
  %8964 = extractelement <64 x i32> %8913, i32 10
  %8965 = sext i32 %8964 to i64
  %8966 = getelementptr inbounds i16, i16* %66, i64 %8965
  %8967 = load i16, i16* %8966, align 2, !tbaa !382
  %8968 = insertelement <64 x i16> %8963, i16 %8967, i32 10
  %8969 = extractelement <64 x i32> %8913, i32 11
  %8970 = sext i32 %8969 to i64
  %8971 = getelementptr inbounds i16, i16* %66, i64 %8970
  %8972 = load i16, i16* %8971, align 2, !tbaa !382
  %8973 = insertelement <64 x i16> %8968, i16 %8972, i32 11
  %8974 = extractelement <64 x i32> %8913, i32 12
  %8975 = sext i32 %8974 to i64
  %8976 = getelementptr inbounds i16, i16* %66, i64 %8975
  %8977 = load i16, i16* %8976, align 2, !tbaa !382
  %8978 = insertelement <64 x i16> %8973, i16 %8977, i32 12
  %8979 = extractelement <64 x i32> %8913, i32 13
  %8980 = sext i32 %8979 to i64
  %8981 = getelementptr inbounds i16, i16* %66, i64 %8980
  %8982 = load i16, i16* %8981, align 2, !tbaa !382
  %8983 = insertelement <64 x i16> %8978, i16 %8982, i32 13
  %8984 = extractelement <64 x i32> %8913, i32 14
  %8985 = sext i32 %8984 to i64
  %8986 = getelementptr inbounds i16, i16* %66, i64 %8985
  %8987 = load i16, i16* %8986, align 2, !tbaa !382
  %8988 = insertelement <64 x i16> %8983, i16 %8987, i32 14
  %8989 = extractelement <64 x i32> %8913, i32 15
  %8990 = sext i32 %8989 to i64
  %8991 = getelementptr inbounds i16, i16* %66, i64 %8990
  %8992 = load i16, i16* %8991, align 2, !tbaa !382
  %8993 = insertelement <64 x i16> %8988, i16 %8992, i32 15
  %8994 = extractelement <64 x i32> %8913, i32 16
  %8995 = sext i32 %8994 to i64
  %8996 = getelementptr inbounds i16, i16* %66, i64 %8995
  %8997 = load i16, i16* %8996, align 2, !tbaa !382
  %8998 = insertelement <64 x i16> %8993, i16 %8997, i32 16
  %8999 = extractelement <64 x i32> %8913, i32 17
  %9000 = sext i32 %8999 to i64
  %9001 = getelementptr inbounds i16, i16* %66, i64 %9000
  %9002 = load i16, i16* %9001, align 2, !tbaa !382
  %9003 = insertelement <64 x i16> %8998, i16 %9002, i32 17
  %9004 = extractelement <64 x i32> %8913, i32 18
  %9005 = sext i32 %9004 to i64
  %9006 = getelementptr inbounds i16, i16* %66, i64 %9005
  %9007 = load i16, i16* %9006, align 2, !tbaa !382
  %9008 = insertelement <64 x i16> %9003, i16 %9007, i32 18
  %9009 = extractelement <64 x i32> %8913, i32 19
  %9010 = sext i32 %9009 to i64
  %9011 = getelementptr inbounds i16, i16* %66, i64 %9010
  %9012 = load i16, i16* %9011, align 2, !tbaa !382
  %9013 = insertelement <64 x i16> %9008, i16 %9012, i32 19
  %9014 = extractelement <64 x i32> %8913, i32 20
  %9015 = sext i32 %9014 to i64
  %9016 = getelementptr inbounds i16, i16* %66, i64 %9015
  %9017 = load i16, i16* %9016, align 2, !tbaa !382
  %9018 = insertelement <64 x i16> %9013, i16 %9017, i32 20
  %9019 = extractelement <64 x i32> %8913, i32 21
  %9020 = sext i32 %9019 to i64
  %9021 = getelementptr inbounds i16, i16* %66, i64 %9020
  %9022 = load i16, i16* %9021, align 2, !tbaa !382
  %9023 = insertelement <64 x i16> %9018, i16 %9022, i32 21
  %9024 = extractelement <64 x i32> %8913, i32 22
  %9025 = sext i32 %9024 to i64
  %9026 = getelementptr inbounds i16, i16* %66, i64 %9025
  %9027 = load i16, i16* %9026, align 2, !tbaa !382
  %9028 = insertelement <64 x i16> %9023, i16 %9027, i32 22
  %9029 = extractelement <64 x i32> %8913, i32 23
  %9030 = sext i32 %9029 to i64
  %9031 = getelementptr inbounds i16, i16* %66, i64 %9030
  %9032 = load i16, i16* %9031, align 2, !tbaa !382
  %9033 = insertelement <64 x i16> %9028, i16 %9032, i32 23
  %9034 = extractelement <64 x i32> %8913, i32 24
  %9035 = sext i32 %9034 to i64
  %9036 = getelementptr inbounds i16, i16* %66, i64 %9035
  %9037 = load i16, i16* %9036, align 2, !tbaa !382
  %9038 = insertelement <64 x i16> %9033, i16 %9037, i32 24
  %9039 = extractelement <64 x i32> %8913, i32 25
  %9040 = sext i32 %9039 to i64
  %9041 = getelementptr inbounds i16, i16* %66, i64 %9040
  %9042 = load i16, i16* %9041, align 2, !tbaa !382
  %9043 = insertelement <64 x i16> %9038, i16 %9042, i32 25
  %9044 = extractelement <64 x i32> %8913, i32 26
  %9045 = sext i32 %9044 to i64
  %9046 = getelementptr inbounds i16, i16* %66, i64 %9045
  %9047 = load i16, i16* %9046, align 2, !tbaa !382
  %9048 = insertelement <64 x i16> %9043, i16 %9047, i32 26
  %9049 = extractelement <64 x i32> %8913, i32 27
  %9050 = sext i32 %9049 to i64
  %9051 = getelementptr inbounds i16, i16* %66, i64 %9050
  %9052 = load i16, i16* %9051, align 2, !tbaa !382
  %9053 = insertelement <64 x i16> %9048, i16 %9052, i32 27
  %9054 = extractelement <64 x i32> %8913, i32 28
  %9055 = sext i32 %9054 to i64
  %9056 = getelementptr inbounds i16, i16* %66, i64 %9055
  %9057 = load i16, i16* %9056, align 2, !tbaa !382
  %9058 = insertelement <64 x i16> %9053, i16 %9057, i32 28
  %9059 = extractelement <64 x i32> %8913, i32 29
  %9060 = sext i32 %9059 to i64
  %9061 = getelementptr inbounds i16, i16* %66, i64 %9060
  %9062 = load i16, i16* %9061, align 2, !tbaa !382
  %9063 = insertelement <64 x i16> %9058, i16 %9062, i32 29
  %9064 = extractelement <64 x i32> %8913, i32 30
  %9065 = sext i32 %9064 to i64
  %9066 = getelementptr inbounds i16, i16* %66, i64 %9065
  %9067 = load i16, i16* %9066, align 2, !tbaa !382
  %9068 = insertelement <64 x i16> %9063, i16 %9067, i32 30
  %9069 = extractelement <64 x i32> %8913, i32 31
  %9070 = sext i32 %9069 to i64
  %9071 = getelementptr inbounds i16, i16* %66, i64 %9070
  %9072 = load i16, i16* %9071, align 2, !tbaa !382
  %9073 = insertelement <64 x i16> %9068, i16 %9072, i32 31
  %9074 = extractelement <64 x i32> %8913, i32 32
  %9075 = sext i32 %9074 to i64
  %9076 = getelementptr inbounds i16, i16* %66, i64 %9075
  %9077 = load i16, i16* %9076, align 2, !tbaa !382
  %9078 = insertelement <64 x i16> %9073, i16 %9077, i32 32
  %9079 = extractelement <64 x i32> %8913, i32 33
  %9080 = sext i32 %9079 to i64
  %9081 = getelementptr inbounds i16, i16* %66, i64 %9080
  %9082 = load i16, i16* %9081, align 2, !tbaa !382
  %9083 = insertelement <64 x i16> %9078, i16 %9082, i32 33
  %9084 = extractelement <64 x i32> %8913, i32 34
  %9085 = sext i32 %9084 to i64
  %9086 = getelementptr inbounds i16, i16* %66, i64 %9085
  %9087 = load i16, i16* %9086, align 2, !tbaa !382
  %9088 = insertelement <64 x i16> %9083, i16 %9087, i32 34
  %9089 = extractelement <64 x i32> %8913, i32 35
  %9090 = sext i32 %9089 to i64
  %9091 = getelementptr inbounds i16, i16* %66, i64 %9090
  %9092 = load i16, i16* %9091, align 2, !tbaa !382
  %9093 = insertelement <64 x i16> %9088, i16 %9092, i32 35
  %9094 = extractelement <64 x i32> %8913, i32 36
  %9095 = sext i32 %9094 to i64
  %9096 = getelementptr inbounds i16, i16* %66, i64 %9095
  %9097 = load i16, i16* %9096, align 2, !tbaa !382
  %9098 = insertelement <64 x i16> %9093, i16 %9097, i32 36
  %9099 = extractelement <64 x i32> %8913, i32 37
  %9100 = sext i32 %9099 to i64
  %9101 = getelementptr inbounds i16, i16* %66, i64 %9100
  %9102 = load i16, i16* %9101, align 2, !tbaa !382
  %9103 = insertelement <64 x i16> %9098, i16 %9102, i32 37
  %9104 = extractelement <64 x i32> %8913, i32 38
  %9105 = sext i32 %9104 to i64
  %9106 = getelementptr inbounds i16, i16* %66, i64 %9105
  %9107 = load i16, i16* %9106, align 2, !tbaa !382
  %9108 = insertelement <64 x i16> %9103, i16 %9107, i32 38
  %9109 = extractelement <64 x i32> %8913, i32 39
  %9110 = sext i32 %9109 to i64
  %9111 = getelementptr inbounds i16, i16* %66, i64 %9110
  %9112 = load i16, i16* %9111, align 2, !tbaa !382
  %9113 = insertelement <64 x i16> %9108, i16 %9112, i32 39
  %9114 = extractelement <64 x i32> %8913, i32 40
  %9115 = sext i32 %9114 to i64
  %9116 = getelementptr inbounds i16, i16* %66, i64 %9115
  %9117 = load i16, i16* %9116, align 2, !tbaa !382
  %9118 = insertelement <64 x i16> %9113, i16 %9117, i32 40
  %9119 = extractelement <64 x i32> %8913, i32 41
  %9120 = sext i32 %9119 to i64
  %9121 = getelementptr inbounds i16, i16* %66, i64 %9120
  %9122 = load i16, i16* %9121, align 2, !tbaa !382
  %9123 = insertelement <64 x i16> %9118, i16 %9122, i32 41
  %9124 = extractelement <64 x i32> %8913, i32 42
  %9125 = sext i32 %9124 to i64
  %9126 = getelementptr inbounds i16, i16* %66, i64 %9125
  %9127 = load i16, i16* %9126, align 2, !tbaa !382
  %9128 = insertelement <64 x i16> %9123, i16 %9127, i32 42
  %9129 = extractelement <64 x i32> %8913, i32 43
  %9130 = sext i32 %9129 to i64
  %9131 = getelementptr inbounds i16, i16* %66, i64 %9130
  %9132 = load i16, i16* %9131, align 2, !tbaa !382
  %9133 = insertelement <64 x i16> %9128, i16 %9132, i32 43
  %9134 = extractelement <64 x i32> %8913, i32 44
  %9135 = sext i32 %9134 to i64
  %9136 = getelementptr inbounds i16, i16* %66, i64 %9135
  %9137 = load i16, i16* %9136, align 2, !tbaa !382
  %9138 = insertelement <64 x i16> %9133, i16 %9137, i32 44
  %9139 = extractelement <64 x i32> %8913, i32 45
  %9140 = sext i32 %9139 to i64
  %9141 = getelementptr inbounds i16, i16* %66, i64 %9140
  %9142 = load i16, i16* %9141, align 2, !tbaa !382
  %9143 = insertelement <64 x i16> %9138, i16 %9142, i32 45
  %9144 = extractelement <64 x i32> %8913, i32 46
  %9145 = sext i32 %9144 to i64
  %9146 = getelementptr inbounds i16, i16* %66, i64 %9145
  %9147 = load i16, i16* %9146, align 2, !tbaa !382
  %9148 = insertelement <64 x i16> %9143, i16 %9147, i32 46
  %9149 = extractelement <64 x i32> %8913, i32 47
  %9150 = sext i32 %9149 to i64
  %9151 = getelementptr inbounds i16, i16* %66, i64 %9150
  %9152 = load i16, i16* %9151, align 2, !tbaa !382
  %9153 = insertelement <64 x i16> %9148, i16 %9152, i32 47
  %9154 = extractelement <64 x i32> %8913, i32 48
  %9155 = sext i32 %9154 to i64
  %9156 = getelementptr inbounds i16, i16* %66, i64 %9155
  %9157 = load i16, i16* %9156, align 2, !tbaa !382
  %9158 = insertelement <64 x i16> %9153, i16 %9157, i32 48
  %9159 = extractelement <64 x i32> %8913, i32 49
  %9160 = sext i32 %9159 to i64
  %9161 = getelementptr inbounds i16, i16* %66, i64 %9160
  %9162 = load i16, i16* %9161, align 2, !tbaa !382
  %9163 = insertelement <64 x i16> %9158, i16 %9162, i32 49
  %9164 = extractelement <64 x i32> %8913, i32 50
  %9165 = sext i32 %9164 to i64
  %9166 = getelementptr inbounds i16, i16* %66, i64 %9165
  %9167 = load i16, i16* %9166, align 2, !tbaa !382
  %9168 = insertelement <64 x i16> %9163, i16 %9167, i32 50
  %9169 = extractelement <64 x i32> %8913, i32 51
  %9170 = sext i32 %9169 to i64
  %9171 = getelementptr inbounds i16, i16* %66, i64 %9170
  %9172 = load i16, i16* %9171, align 2, !tbaa !382
  %9173 = insertelement <64 x i16> %9168, i16 %9172, i32 51
  %9174 = extractelement <64 x i32> %8913, i32 52
  %9175 = sext i32 %9174 to i64
  %9176 = getelementptr inbounds i16, i16* %66, i64 %9175
  %9177 = load i16, i16* %9176, align 2, !tbaa !382
  %9178 = insertelement <64 x i16> %9173, i16 %9177, i32 52
  %9179 = extractelement <64 x i32> %8913, i32 53
  %9180 = sext i32 %9179 to i64
  %9181 = getelementptr inbounds i16, i16* %66, i64 %9180
  %9182 = load i16, i16* %9181, align 2, !tbaa !382
  %9183 = insertelement <64 x i16> %9178, i16 %9182, i32 53
  %9184 = extractelement <64 x i32> %8913, i32 54
  %9185 = sext i32 %9184 to i64
  %9186 = getelementptr inbounds i16, i16* %66, i64 %9185
  %9187 = load i16, i16* %9186, align 2, !tbaa !382
  %9188 = insertelement <64 x i16> %9183, i16 %9187, i32 54
  %9189 = extractelement <64 x i32> %8913, i32 55
  %9190 = sext i32 %9189 to i64
  %9191 = getelementptr inbounds i16, i16* %66, i64 %9190
  %9192 = load i16, i16* %9191, align 2, !tbaa !382
  %9193 = insertelement <64 x i16> %9188, i16 %9192, i32 55
  %9194 = extractelement <64 x i32> %8913, i32 56
  %9195 = sext i32 %9194 to i64
  %9196 = getelementptr inbounds i16, i16* %66, i64 %9195
  %9197 = load i16, i16* %9196, align 2, !tbaa !382
  %9198 = insertelement <64 x i16> %9193, i16 %9197, i32 56
  %9199 = extractelement <64 x i32> %8913, i32 57
  %9200 = sext i32 %9199 to i64
  %9201 = getelementptr inbounds i16, i16* %66, i64 %9200
  %9202 = load i16, i16* %9201, align 2, !tbaa !382
  %9203 = insertelement <64 x i16> %9198, i16 %9202, i32 57
  %9204 = extractelement <64 x i32> %8913, i32 58
  %9205 = sext i32 %9204 to i64
  %9206 = getelementptr inbounds i16, i16* %66, i64 %9205
  %9207 = load i16, i16* %9206, align 2, !tbaa !382
  %9208 = insertelement <64 x i16> %9203, i16 %9207, i32 58
  %9209 = extractelement <64 x i32> %8913, i32 59
  %9210 = sext i32 %9209 to i64
  %9211 = getelementptr inbounds i16, i16* %66, i64 %9210
  %9212 = load i16, i16* %9211, align 2, !tbaa !382
  %9213 = insertelement <64 x i16> %9208, i16 %9212, i32 59
  %9214 = extractelement <64 x i32> %8913, i32 60
  %9215 = sext i32 %9214 to i64
  %9216 = getelementptr inbounds i16, i16* %66, i64 %9215
  %9217 = load i16, i16* %9216, align 2, !tbaa !382
  %9218 = insertelement <64 x i16> %9213, i16 %9217, i32 60
  %9219 = extractelement <64 x i32> %8913, i32 61
  %9220 = sext i32 %9219 to i64
  %9221 = getelementptr inbounds i16, i16* %66, i64 %9220
  %9222 = load i16, i16* %9221, align 2, !tbaa !382
  %9223 = insertelement <64 x i16> %9218, i16 %9222, i32 61
  %9224 = extractelement <64 x i32> %8913, i32 62
  %9225 = sext i32 %9224 to i64
  %9226 = getelementptr inbounds i16, i16* %66, i64 %9225
  %9227 = load i16, i16* %9226, align 2, !tbaa !382
  %9228 = insertelement <64 x i16> %9223, i16 %9227, i32 62
  %9229 = extractelement <64 x i32> %8913, i32 63
  %9230 = sext i32 %9229 to i64
  %9231 = getelementptr inbounds i16, i16* %66, i64 %9230
  %9232 = load i16, i16* %9231, align 2, !tbaa !382
  %9233 = insertelement <64 x i16> %9228, i16 %9232, i32 63
  %9234 = add nsw i32 %blur_x.s0.x.v1.base.s21, -59
  %9235 = insertelement <64 x i32> undef, i32 %9234, i32 0
  %9236 = shufflevector <64 x i32> %9235, <64 x i32> undef, <64 x i32> zeroinitializer
  %9237 = add nsw <64 x i32> %9236, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9238 = shufflevector <64 x i32> %9237, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9239 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9238, <4 x i32> %65)
  %9240 = shufflevector <64 x i32> %9237, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9241 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9240, <4 x i32> %65)
  %9242 = shufflevector <64 x i32> %9237, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9243 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9242, <4 x i32> %65)
  %9244 = shufflevector <64 x i32> %9237, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %9245 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9244, <4 x i32> %65)
  %9246 = shufflevector <64 x i32> %9237, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %9247 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9246, <4 x i32> %65)
  %9248 = shufflevector <64 x i32> %9237, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %9249 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9248, <4 x i32> %65)
  %9250 = shufflevector <64 x i32> %9237, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %9251 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9250, <4 x i32> %65)
  %9252 = shufflevector <64 x i32> %9237, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %9253 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9252, <4 x i32> %65)
  %9254 = shufflevector <64 x i32> %9237, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %9255 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9254, <4 x i32> %65)
  %9256 = shufflevector <64 x i32> %9237, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %9257 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9256, <4 x i32> %65)
  %9258 = shufflevector <64 x i32> %9237, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %9259 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9258, <4 x i32> %65)
  %9260 = shufflevector <64 x i32> %9237, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %9261 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9260, <4 x i32> %65)
  %9262 = shufflevector <64 x i32> %9237, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %9263 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9262, <4 x i32> %65)
  %9264 = shufflevector <64 x i32> %9237, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %9265 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9264, <4 x i32> %65)
  %9266 = shufflevector <64 x i32> %9237, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %9267 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9266, <4 x i32> %65)
  %9268 = shufflevector <64 x i32> %9237, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %9269 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9268, <4 x i32> %65)
  %9270 = shufflevector <4 x i32> %9269, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %9271 = shufflevector <8 x i32> %9270, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %9272 = shufflevector <16 x i32> %9271, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %9273 = shufflevector <32 x i32> %9272, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %9274 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9239, <4 x i32> zeroinitializer)
  %9275 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9241, <4 x i32> zeroinitializer)
  %9276 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9243, <4 x i32> zeroinitializer)
  %9277 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9245, <4 x i32> zeroinitializer)
  %9278 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9247, <4 x i32> zeroinitializer)
  %9279 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9249, <4 x i32> zeroinitializer)
  %9280 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9251, <4 x i32> zeroinitializer)
  %9281 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9253, <4 x i32> zeroinitializer)
  %9282 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9255, <4 x i32> zeroinitializer)
  %9283 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9257, <4 x i32> zeroinitializer)
  %9284 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9259, <4 x i32> zeroinitializer)
  %9285 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9261, <4 x i32> zeroinitializer)
  %9286 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9263, <4 x i32> zeroinitializer)
  %9287 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9265, <4 x i32> zeroinitializer)
  %9288 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9267, <4 x i32> zeroinitializer)
  %9289 = shufflevector <64 x i32> %9273, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %9290 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9289, <4 x i32> zeroinitializer)
  %9291 = shufflevector <4 x i32> %9274, <4 x i32> %9275, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9292 = shufflevector <4 x i32> %9276, <4 x i32> %9277, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9293 = shufflevector <4 x i32> %9278, <4 x i32> %9279, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9294 = shufflevector <4 x i32> %9280, <4 x i32> %9281, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9295 = shufflevector <4 x i32> %9282, <4 x i32> %9283, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9296 = shufflevector <4 x i32> %9284, <4 x i32> %9285, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9297 = shufflevector <4 x i32> %9286, <4 x i32> %9287, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9298 = shufflevector <4 x i32> %9288, <4 x i32> %9290, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9299 = shufflevector <8 x i32> %9291, <8 x i32> %9292, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9300 = shufflevector <8 x i32> %9293, <8 x i32> %9294, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9301 = shufflevector <8 x i32> %9295, <8 x i32> %9296, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9302 = shufflevector <8 x i32> %9297, <8 x i32> %9298, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9303 = shufflevector <16 x i32> %9299, <16 x i32> %9300, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9304 = shufflevector <16 x i32> %9301, <16 x i32> %9302, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9305 = shufflevector <32 x i32> %9303, <32 x i32> %9304, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9306 = add nsw <64 x i32> %9305, %t257
  %9307 = extractelement <64 x i32> %9306, i32 0
  %9308 = sext i32 %9307 to i64
  %9309 = getelementptr inbounds i16, i16* %66, i64 %9308
  %9310 = load i16, i16* %9309, align 2, !tbaa !382
  %9311 = insertelement <64 x i16> undef, i16 %9310, i32 0
  %9312 = extractelement <64 x i32> %9306, i32 1
  %9313 = sext i32 %9312 to i64
  %9314 = getelementptr inbounds i16, i16* %66, i64 %9313
  %9315 = load i16, i16* %9314, align 2, !tbaa !382
  %9316 = insertelement <64 x i16> %9311, i16 %9315, i32 1
  %9317 = extractelement <64 x i32> %9306, i32 2
  %9318 = sext i32 %9317 to i64
  %9319 = getelementptr inbounds i16, i16* %66, i64 %9318
  %9320 = load i16, i16* %9319, align 2, !tbaa !382
  %9321 = insertelement <64 x i16> %9316, i16 %9320, i32 2
  %9322 = extractelement <64 x i32> %9306, i32 3
  %9323 = sext i32 %9322 to i64
  %9324 = getelementptr inbounds i16, i16* %66, i64 %9323
  %9325 = load i16, i16* %9324, align 2, !tbaa !382
  %9326 = insertelement <64 x i16> %9321, i16 %9325, i32 3
  %9327 = extractelement <64 x i32> %9306, i32 4
  %9328 = sext i32 %9327 to i64
  %9329 = getelementptr inbounds i16, i16* %66, i64 %9328
  %9330 = load i16, i16* %9329, align 2, !tbaa !382
  %9331 = insertelement <64 x i16> %9326, i16 %9330, i32 4
  %9332 = extractelement <64 x i32> %9306, i32 5
  %9333 = sext i32 %9332 to i64
  %9334 = getelementptr inbounds i16, i16* %66, i64 %9333
  %9335 = load i16, i16* %9334, align 2, !tbaa !382
  %9336 = insertelement <64 x i16> %9331, i16 %9335, i32 5
  %9337 = extractelement <64 x i32> %9306, i32 6
  %9338 = sext i32 %9337 to i64
  %9339 = getelementptr inbounds i16, i16* %66, i64 %9338
  %9340 = load i16, i16* %9339, align 2, !tbaa !382
  %9341 = insertelement <64 x i16> %9336, i16 %9340, i32 6
  %9342 = extractelement <64 x i32> %9306, i32 7
  %9343 = sext i32 %9342 to i64
  %9344 = getelementptr inbounds i16, i16* %66, i64 %9343
  %9345 = load i16, i16* %9344, align 2, !tbaa !382
  %9346 = insertelement <64 x i16> %9341, i16 %9345, i32 7
  %9347 = extractelement <64 x i32> %9306, i32 8
  %9348 = sext i32 %9347 to i64
  %9349 = getelementptr inbounds i16, i16* %66, i64 %9348
  %9350 = load i16, i16* %9349, align 2, !tbaa !382
  %9351 = insertelement <64 x i16> %9346, i16 %9350, i32 8
  %9352 = extractelement <64 x i32> %9306, i32 9
  %9353 = sext i32 %9352 to i64
  %9354 = getelementptr inbounds i16, i16* %66, i64 %9353
  %9355 = load i16, i16* %9354, align 2, !tbaa !382
  %9356 = insertelement <64 x i16> %9351, i16 %9355, i32 9
  %9357 = extractelement <64 x i32> %9306, i32 10
  %9358 = sext i32 %9357 to i64
  %9359 = getelementptr inbounds i16, i16* %66, i64 %9358
  %9360 = load i16, i16* %9359, align 2, !tbaa !382
  %9361 = insertelement <64 x i16> %9356, i16 %9360, i32 10
  %9362 = extractelement <64 x i32> %9306, i32 11
  %9363 = sext i32 %9362 to i64
  %9364 = getelementptr inbounds i16, i16* %66, i64 %9363
  %9365 = load i16, i16* %9364, align 2, !tbaa !382
  %9366 = insertelement <64 x i16> %9361, i16 %9365, i32 11
  %9367 = extractelement <64 x i32> %9306, i32 12
  %9368 = sext i32 %9367 to i64
  %9369 = getelementptr inbounds i16, i16* %66, i64 %9368
  %9370 = load i16, i16* %9369, align 2, !tbaa !382
  %9371 = insertelement <64 x i16> %9366, i16 %9370, i32 12
  %9372 = extractelement <64 x i32> %9306, i32 13
  %9373 = sext i32 %9372 to i64
  %9374 = getelementptr inbounds i16, i16* %66, i64 %9373
  %9375 = load i16, i16* %9374, align 2, !tbaa !382
  %9376 = insertelement <64 x i16> %9371, i16 %9375, i32 13
  %9377 = extractelement <64 x i32> %9306, i32 14
  %9378 = sext i32 %9377 to i64
  %9379 = getelementptr inbounds i16, i16* %66, i64 %9378
  %9380 = load i16, i16* %9379, align 2, !tbaa !382
  %9381 = insertelement <64 x i16> %9376, i16 %9380, i32 14
  %9382 = extractelement <64 x i32> %9306, i32 15
  %9383 = sext i32 %9382 to i64
  %9384 = getelementptr inbounds i16, i16* %66, i64 %9383
  %9385 = load i16, i16* %9384, align 2, !tbaa !382
  %9386 = insertelement <64 x i16> %9381, i16 %9385, i32 15
  %9387 = extractelement <64 x i32> %9306, i32 16
  %9388 = sext i32 %9387 to i64
  %9389 = getelementptr inbounds i16, i16* %66, i64 %9388
  %9390 = load i16, i16* %9389, align 2, !tbaa !382
  %9391 = insertelement <64 x i16> %9386, i16 %9390, i32 16
  %9392 = extractelement <64 x i32> %9306, i32 17
  %9393 = sext i32 %9392 to i64
  %9394 = getelementptr inbounds i16, i16* %66, i64 %9393
  %9395 = load i16, i16* %9394, align 2, !tbaa !382
  %9396 = insertelement <64 x i16> %9391, i16 %9395, i32 17
  %9397 = extractelement <64 x i32> %9306, i32 18
  %9398 = sext i32 %9397 to i64
  %9399 = getelementptr inbounds i16, i16* %66, i64 %9398
  %9400 = load i16, i16* %9399, align 2, !tbaa !382
  %9401 = insertelement <64 x i16> %9396, i16 %9400, i32 18
  %9402 = extractelement <64 x i32> %9306, i32 19
  %9403 = sext i32 %9402 to i64
  %9404 = getelementptr inbounds i16, i16* %66, i64 %9403
  %9405 = load i16, i16* %9404, align 2, !tbaa !382
  %9406 = insertelement <64 x i16> %9401, i16 %9405, i32 19
  %9407 = extractelement <64 x i32> %9306, i32 20
  %9408 = sext i32 %9407 to i64
  %9409 = getelementptr inbounds i16, i16* %66, i64 %9408
  %9410 = load i16, i16* %9409, align 2, !tbaa !382
  %9411 = insertelement <64 x i16> %9406, i16 %9410, i32 20
  %9412 = extractelement <64 x i32> %9306, i32 21
  %9413 = sext i32 %9412 to i64
  %9414 = getelementptr inbounds i16, i16* %66, i64 %9413
  %9415 = load i16, i16* %9414, align 2, !tbaa !382
  %9416 = insertelement <64 x i16> %9411, i16 %9415, i32 21
  %9417 = extractelement <64 x i32> %9306, i32 22
  %9418 = sext i32 %9417 to i64
  %9419 = getelementptr inbounds i16, i16* %66, i64 %9418
  %9420 = load i16, i16* %9419, align 2, !tbaa !382
  %9421 = insertelement <64 x i16> %9416, i16 %9420, i32 22
  %9422 = extractelement <64 x i32> %9306, i32 23
  %9423 = sext i32 %9422 to i64
  %9424 = getelementptr inbounds i16, i16* %66, i64 %9423
  %9425 = load i16, i16* %9424, align 2, !tbaa !382
  %9426 = insertelement <64 x i16> %9421, i16 %9425, i32 23
  %9427 = extractelement <64 x i32> %9306, i32 24
  %9428 = sext i32 %9427 to i64
  %9429 = getelementptr inbounds i16, i16* %66, i64 %9428
  %9430 = load i16, i16* %9429, align 2, !tbaa !382
  %9431 = insertelement <64 x i16> %9426, i16 %9430, i32 24
  %9432 = extractelement <64 x i32> %9306, i32 25
  %9433 = sext i32 %9432 to i64
  %9434 = getelementptr inbounds i16, i16* %66, i64 %9433
  %9435 = load i16, i16* %9434, align 2, !tbaa !382
  %9436 = insertelement <64 x i16> %9431, i16 %9435, i32 25
  %9437 = extractelement <64 x i32> %9306, i32 26
  %9438 = sext i32 %9437 to i64
  %9439 = getelementptr inbounds i16, i16* %66, i64 %9438
  %9440 = load i16, i16* %9439, align 2, !tbaa !382
  %9441 = insertelement <64 x i16> %9436, i16 %9440, i32 26
  %9442 = extractelement <64 x i32> %9306, i32 27
  %9443 = sext i32 %9442 to i64
  %9444 = getelementptr inbounds i16, i16* %66, i64 %9443
  %9445 = load i16, i16* %9444, align 2, !tbaa !382
  %9446 = insertelement <64 x i16> %9441, i16 %9445, i32 27
  %9447 = extractelement <64 x i32> %9306, i32 28
  %9448 = sext i32 %9447 to i64
  %9449 = getelementptr inbounds i16, i16* %66, i64 %9448
  %9450 = load i16, i16* %9449, align 2, !tbaa !382
  %9451 = insertelement <64 x i16> %9446, i16 %9450, i32 28
  %9452 = extractelement <64 x i32> %9306, i32 29
  %9453 = sext i32 %9452 to i64
  %9454 = getelementptr inbounds i16, i16* %66, i64 %9453
  %9455 = load i16, i16* %9454, align 2, !tbaa !382
  %9456 = insertelement <64 x i16> %9451, i16 %9455, i32 29
  %9457 = extractelement <64 x i32> %9306, i32 30
  %9458 = sext i32 %9457 to i64
  %9459 = getelementptr inbounds i16, i16* %66, i64 %9458
  %9460 = load i16, i16* %9459, align 2, !tbaa !382
  %9461 = insertelement <64 x i16> %9456, i16 %9460, i32 30
  %9462 = extractelement <64 x i32> %9306, i32 31
  %9463 = sext i32 %9462 to i64
  %9464 = getelementptr inbounds i16, i16* %66, i64 %9463
  %9465 = load i16, i16* %9464, align 2, !tbaa !382
  %9466 = insertelement <64 x i16> %9461, i16 %9465, i32 31
  %9467 = extractelement <64 x i32> %9306, i32 32
  %9468 = sext i32 %9467 to i64
  %9469 = getelementptr inbounds i16, i16* %66, i64 %9468
  %9470 = load i16, i16* %9469, align 2, !tbaa !382
  %9471 = insertelement <64 x i16> %9466, i16 %9470, i32 32
  %9472 = extractelement <64 x i32> %9306, i32 33
  %9473 = sext i32 %9472 to i64
  %9474 = getelementptr inbounds i16, i16* %66, i64 %9473
  %9475 = load i16, i16* %9474, align 2, !tbaa !382
  %9476 = insertelement <64 x i16> %9471, i16 %9475, i32 33
  %9477 = extractelement <64 x i32> %9306, i32 34
  %9478 = sext i32 %9477 to i64
  %9479 = getelementptr inbounds i16, i16* %66, i64 %9478
  %9480 = load i16, i16* %9479, align 2, !tbaa !382
  %9481 = insertelement <64 x i16> %9476, i16 %9480, i32 34
  %9482 = extractelement <64 x i32> %9306, i32 35
  %9483 = sext i32 %9482 to i64
  %9484 = getelementptr inbounds i16, i16* %66, i64 %9483
  %9485 = load i16, i16* %9484, align 2, !tbaa !382
  %9486 = insertelement <64 x i16> %9481, i16 %9485, i32 35
  %9487 = extractelement <64 x i32> %9306, i32 36
  %9488 = sext i32 %9487 to i64
  %9489 = getelementptr inbounds i16, i16* %66, i64 %9488
  %9490 = load i16, i16* %9489, align 2, !tbaa !382
  %9491 = insertelement <64 x i16> %9486, i16 %9490, i32 36
  %9492 = extractelement <64 x i32> %9306, i32 37
  %9493 = sext i32 %9492 to i64
  %9494 = getelementptr inbounds i16, i16* %66, i64 %9493
  %9495 = load i16, i16* %9494, align 2, !tbaa !382
  %9496 = insertelement <64 x i16> %9491, i16 %9495, i32 37
  %9497 = extractelement <64 x i32> %9306, i32 38
  %9498 = sext i32 %9497 to i64
  %9499 = getelementptr inbounds i16, i16* %66, i64 %9498
  %9500 = load i16, i16* %9499, align 2, !tbaa !382
  %9501 = insertelement <64 x i16> %9496, i16 %9500, i32 38
  %9502 = extractelement <64 x i32> %9306, i32 39
  %9503 = sext i32 %9502 to i64
  %9504 = getelementptr inbounds i16, i16* %66, i64 %9503
  %9505 = load i16, i16* %9504, align 2, !tbaa !382
  %9506 = insertelement <64 x i16> %9501, i16 %9505, i32 39
  %9507 = extractelement <64 x i32> %9306, i32 40
  %9508 = sext i32 %9507 to i64
  %9509 = getelementptr inbounds i16, i16* %66, i64 %9508
  %9510 = load i16, i16* %9509, align 2, !tbaa !382
  %9511 = insertelement <64 x i16> %9506, i16 %9510, i32 40
  %9512 = extractelement <64 x i32> %9306, i32 41
  %9513 = sext i32 %9512 to i64
  %9514 = getelementptr inbounds i16, i16* %66, i64 %9513
  %9515 = load i16, i16* %9514, align 2, !tbaa !382
  %9516 = insertelement <64 x i16> %9511, i16 %9515, i32 41
  %9517 = extractelement <64 x i32> %9306, i32 42
  %9518 = sext i32 %9517 to i64
  %9519 = getelementptr inbounds i16, i16* %66, i64 %9518
  %9520 = load i16, i16* %9519, align 2, !tbaa !382
  %9521 = insertelement <64 x i16> %9516, i16 %9520, i32 42
  %9522 = extractelement <64 x i32> %9306, i32 43
  %9523 = sext i32 %9522 to i64
  %9524 = getelementptr inbounds i16, i16* %66, i64 %9523
  %9525 = load i16, i16* %9524, align 2, !tbaa !382
  %9526 = insertelement <64 x i16> %9521, i16 %9525, i32 43
  %9527 = extractelement <64 x i32> %9306, i32 44
  %9528 = sext i32 %9527 to i64
  %9529 = getelementptr inbounds i16, i16* %66, i64 %9528
  %9530 = load i16, i16* %9529, align 2, !tbaa !382
  %9531 = insertelement <64 x i16> %9526, i16 %9530, i32 44
  %9532 = extractelement <64 x i32> %9306, i32 45
  %9533 = sext i32 %9532 to i64
  %9534 = getelementptr inbounds i16, i16* %66, i64 %9533
  %9535 = load i16, i16* %9534, align 2, !tbaa !382
  %9536 = insertelement <64 x i16> %9531, i16 %9535, i32 45
  %9537 = extractelement <64 x i32> %9306, i32 46
  %9538 = sext i32 %9537 to i64
  %9539 = getelementptr inbounds i16, i16* %66, i64 %9538
  %9540 = load i16, i16* %9539, align 2, !tbaa !382
  %9541 = insertelement <64 x i16> %9536, i16 %9540, i32 46
  %9542 = extractelement <64 x i32> %9306, i32 47
  %9543 = sext i32 %9542 to i64
  %9544 = getelementptr inbounds i16, i16* %66, i64 %9543
  %9545 = load i16, i16* %9544, align 2, !tbaa !382
  %9546 = insertelement <64 x i16> %9541, i16 %9545, i32 47
  %9547 = extractelement <64 x i32> %9306, i32 48
  %9548 = sext i32 %9547 to i64
  %9549 = getelementptr inbounds i16, i16* %66, i64 %9548
  %9550 = load i16, i16* %9549, align 2, !tbaa !382
  %9551 = insertelement <64 x i16> %9546, i16 %9550, i32 48
  %9552 = extractelement <64 x i32> %9306, i32 49
  %9553 = sext i32 %9552 to i64
  %9554 = getelementptr inbounds i16, i16* %66, i64 %9553
  %9555 = load i16, i16* %9554, align 2, !tbaa !382
  %9556 = insertelement <64 x i16> %9551, i16 %9555, i32 49
  %9557 = extractelement <64 x i32> %9306, i32 50
  %9558 = sext i32 %9557 to i64
  %9559 = getelementptr inbounds i16, i16* %66, i64 %9558
  %9560 = load i16, i16* %9559, align 2, !tbaa !382
  %9561 = insertelement <64 x i16> %9556, i16 %9560, i32 50
  %9562 = extractelement <64 x i32> %9306, i32 51
  %9563 = sext i32 %9562 to i64
  %9564 = getelementptr inbounds i16, i16* %66, i64 %9563
  %9565 = load i16, i16* %9564, align 2, !tbaa !382
  %9566 = insertelement <64 x i16> %9561, i16 %9565, i32 51
  %9567 = extractelement <64 x i32> %9306, i32 52
  %9568 = sext i32 %9567 to i64
  %9569 = getelementptr inbounds i16, i16* %66, i64 %9568
  %9570 = load i16, i16* %9569, align 2, !tbaa !382
  %9571 = insertelement <64 x i16> %9566, i16 %9570, i32 52
  %9572 = extractelement <64 x i32> %9306, i32 53
  %9573 = sext i32 %9572 to i64
  %9574 = getelementptr inbounds i16, i16* %66, i64 %9573
  %9575 = load i16, i16* %9574, align 2, !tbaa !382
  %9576 = insertelement <64 x i16> %9571, i16 %9575, i32 53
  %9577 = extractelement <64 x i32> %9306, i32 54
  %9578 = sext i32 %9577 to i64
  %9579 = getelementptr inbounds i16, i16* %66, i64 %9578
  %9580 = load i16, i16* %9579, align 2, !tbaa !382
  %9581 = insertelement <64 x i16> %9576, i16 %9580, i32 54
  %9582 = extractelement <64 x i32> %9306, i32 55
  %9583 = sext i32 %9582 to i64
  %9584 = getelementptr inbounds i16, i16* %66, i64 %9583
  %9585 = load i16, i16* %9584, align 2, !tbaa !382
  %9586 = insertelement <64 x i16> %9581, i16 %9585, i32 55
  %9587 = extractelement <64 x i32> %9306, i32 56
  %9588 = sext i32 %9587 to i64
  %9589 = getelementptr inbounds i16, i16* %66, i64 %9588
  %9590 = load i16, i16* %9589, align 2, !tbaa !382
  %9591 = insertelement <64 x i16> %9586, i16 %9590, i32 56
  %9592 = extractelement <64 x i32> %9306, i32 57
  %9593 = sext i32 %9592 to i64
  %9594 = getelementptr inbounds i16, i16* %66, i64 %9593
  %9595 = load i16, i16* %9594, align 2, !tbaa !382
  %9596 = insertelement <64 x i16> %9591, i16 %9595, i32 57
  %9597 = extractelement <64 x i32> %9306, i32 58
  %9598 = sext i32 %9597 to i64
  %9599 = getelementptr inbounds i16, i16* %66, i64 %9598
  %9600 = load i16, i16* %9599, align 2, !tbaa !382
  %9601 = insertelement <64 x i16> %9596, i16 %9600, i32 58
  %9602 = extractelement <64 x i32> %9306, i32 59
  %9603 = sext i32 %9602 to i64
  %9604 = getelementptr inbounds i16, i16* %66, i64 %9603
  %9605 = load i16, i16* %9604, align 2, !tbaa !382
  %9606 = insertelement <64 x i16> %9601, i16 %9605, i32 59
  %9607 = extractelement <64 x i32> %9306, i32 60
  %9608 = sext i32 %9607 to i64
  %9609 = getelementptr inbounds i16, i16* %66, i64 %9608
  %9610 = load i16, i16* %9609, align 2, !tbaa !382
  %9611 = insertelement <64 x i16> %9606, i16 %9610, i32 60
  %9612 = extractelement <64 x i32> %9306, i32 61
  %9613 = sext i32 %9612 to i64
  %9614 = getelementptr inbounds i16, i16* %66, i64 %9613
  %9615 = load i16, i16* %9614, align 2, !tbaa !382
  %9616 = insertelement <64 x i16> %9611, i16 %9615, i32 61
  %9617 = extractelement <64 x i32> %9306, i32 62
  %9618 = sext i32 %9617 to i64
  %9619 = getelementptr inbounds i16, i16* %66, i64 %9618
  %9620 = load i16, i16* %9619, align 2, !tbaa !382
  %9621 = insertelement <64 x i16> %9616, i16 %9620, i32 62
  %9622 = extractelement <64 x i32> %9306, i32 63
  %9623 = sext i32 %9622 to i64
  %9624 = getelementptr inbounds i16, i16* %66, i64 %9623
  %9625 = load i16, i16* %9624, align 2, !tbaa !382
  %9626 = insertelement <64 x i16> %9621, i16 %9625, i32 63
  %9627 = add <64 x i16> %7661, %7268
  %9628 = add <64 x i16> %9627, %8054
  %9629 = add <64 x i16> %9628, %8447
  %9630 = add <64 x i16> %9629, %8840
  %9631 = add <64 x i16> %9630, %9233
  %9632 = add <64 x i16> %9631, %9626
  %9633 = shufflevector <64 x i16> %9632, <64 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9634 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9633, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9635 = shufflevector <64 x i16> %9632, <64 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9636 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9635, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9637 = shufflevector <64 x i16> %9632, <64 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9638 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9637, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9639 = shufflevector <64 x i16> %9632, <64 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %9640 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9639, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9641 = shufflevector <64 x i16> %9632, <64 x i16> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %9642 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9641, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9643 = shufflevector <64 x i16> %9632, <64 x i16> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %9644 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9643, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9645 = shufflevector <64 x i16> %9632, <64 x i16> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %9646 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9645, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9647 = shufflevector <64 x i16> %9632, <64 x i16> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %9648 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9647, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9649 = shufflevector <64 x i16> %9632, <64 x i16> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %9650 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9649, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9651 = shufflevector <64 x i16> %9632, <64 x i16> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %9652 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9651, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9653 = shufflevector <64 x i16> %9632, <64 x i16> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %9654 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9653, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9655 = shufflevector <64 x i16> %9632, <64 x i16> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %9656 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9655, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9657 = shufflevector <64 x i16> %9632, <64 x i16> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %9658 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9657, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9659 = shufflevector <64 x i16> %9632, <64 x i16> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %9660 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9659, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9661 = shufflevector <64 x i16> %9632, <64 x i16> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %9662 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9661, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9663 = shufflevector <64 x i16> %9632, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %9664 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9663, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9665 = shufflevector <4 x i32> %9634, <4 x i32> %9636, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9666 = shufflevector <4 x i32> %9638, <4 x i32> %9640, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9667 = shufflevector <4 x i32> %9642, <4 x i32> %9644, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9668 = shufflevector <4 x i32> %9646, <4 x i32> %9648, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9669 = shufflevector <4 x i32> %9650, <4 x i32> %9652, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9670 = shufflevector <4 x i32> %9654, <4 x i32> %9656, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9671 = shufflevector <4 x i32> %9658, <4 x i32> %9660, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9672 = shufflevector <4 x i32> %9662, <4 x i32> %9664, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9673 = shufflevector <8 x i32> %9665, <8 x i32> %9666, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9674 = shufflevector <8 x i32> %9667, <8 x i32> %9668, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9675 = shufflevector <8 x i32> %9669, <8 x i32> %9670, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9676 = shufflevector <8 x i32> %9671, <8 x i32> %9672, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9677 = shufflevector <16 x i32> %9673, <16 x i32> %9674, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9678 = shufflevector <16 x i32> %9675, <16 x i32> %9676, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9679 = shufflevector <32 x i32> %9677, <32 x i32> %9678, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9680 = lshr <64 x i32> %9679, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %9681 = trunc <64 x i32> %9680 to <64 x i16>
  %9682 = shufflevector <64 x i16> %9681, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9683 = shufflevector <64 x i16> %9632, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9684 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %9682, <8 x i16> %9683)
  %9685 = shufflevector <64 x i16> %9681, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9686 = shufflevector <64 x i16> %9632, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9687 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %9685, <8 x i16> %9686)
  %9688 = shufflevector <64 x i16> %9681, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %9689 = shufflevector <64 x i16> %9632, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %9690 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %9688, <8 x i16> %9689)
  %9691 = shufflevector <64 x i16> %9681, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9692 = shufflevector <64 x i16> %9632, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9693 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %9691, <8 x i16> %9692)
  %9694 = shufflevector <64 x i16> %9681, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %9695 = shufflevector <64 x i16> %9632, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %9696 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %9694, <8 x i16> %9695)
  %9697 = shufflevector <64 x i16> %9681, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %9698 = shufflevector <64 x i16> %9632, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %9699 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %9697, <8 x i16> %9698)
  %9700 = shufflevector <64 x i16> %9681, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %9701 = shufflevector <64 x i16> %9632, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %9702 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %9700, <8 x i16> %9701)
  %9703 = shufflevector <64 x i16> %9681, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9704 = shufflevector <64 x i16> %9632, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9705 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %9703, <8 x i16> %9704)
  %9706 = shufflevector <8 x i16> %9684, <8 x i16> %9687, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9707 = shufflevector <8 x i16> %9690, <8 x i16> %9693, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9708 = shufflevector <8 x i16> %9696, <8 x i16> %9699, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9709 = shufflevector <8 x i16> %9702, <8 x i16> %9705, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9710 = shufflevector <16 x i16> %9706, <16 x i16> %9707, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9711 = shufflevector <16 x i16> %9708, <16 x i16> %9709, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9712 = shufflevector <32 x i16> %9710, <32 x i16> %9711, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9713 = lshr <64 x i16> %9712, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9714 = shufflevector <64 x i16> %9713, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9715 = sext i32 %blur_x.s0.x.v1.base.s21 to i64
  %9716 = add nsw i64 %9715, %6873
  %9717 = getelementptr inbounds i16, i16* %blur_x, i64 %9716
  %9718 = bitcast i16* %9717 to <8 x i16>*
  store <8 x i16> %9714, <8 x i16>* %9718, align 2, !tbaa !385
  %9719 = shufflevector <64 x i16> %9713, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9720 = getelementptr inbounds i16, i16* %9717, i64 8
  %9721 = bitcast i16* %9720 to <8 x i16>*
  store <8 x i16> %9719, <8 x i16>* %9721, align 2, !tbaa !385
  %9722 = shufflevector <64 x i16> %9713, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %9723 = getelementptr inbounds i16, i16* %9717, i64 16
  %9724 = bitcast i16* %9723 to <8 x i16>*
  store <8 x i16> %9722, <8 x i16>* %9724, align 2, !tbaa !385
  %9725 = shufflevector <64 x i16> %9713, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9726 = getelementptr inbounds i16, i16* %9717, i64 24
  %9727 = bitcast i16* %9726 to <8 x i16>*
  store <8 x i16> %9725, <8 x i16>* %9727, align 2, !tbaa !385
  %9728 = shufflevector <64 x i16> %9713, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %9729 = getelementptr inbounds i16, i16* %9717, i64 32
  %9730 = bitcast i16* %9729 to <8 x i16>*
  store <8 x i16> %9728, <8 x i16>* %9730, align 2, !tbaa !385
  %9731 = shufflevector <64 x i16> %9713, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %9732 = getelementptr inbounds i16, i16* %9717, i64 40
  %9733 = bitcast i16* %9732 to <8 x i16>*
  store <8 x i16> %9731, <8 x i16>* %9733, align 2, !tbaa !385
  %9734 = shufflevector <64 x i16> %9713, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %9735 = getelementptr inbounds i16, i16* %9717, i64 48
  %9736 = bitcast i16* %9735 to <8 x i16>*
  store <8 x i16> %9734, <8 x i16>* %9736, align 2, !tbaa !385
  %9737 = shufflevector <64 x i16> %9713, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9738 = getelementptr inbounds i16, i16* %9717, i64 56
  %9739 = bitcast i16* %9738 to <8 x i16>*
  store <8 x i16> %9737, <8 x i16>* %9739, align 2, !tbaa !385
  %9740 = add nuw nsw i32 %blur_x.s0.x.x20, 1
  %.not125 = icmp eq i32 %9740, %t273
  br i1 %.not125, label %"end for blur_x.s0.x.x19", label %"for blur_x.s0.x.x18"

"end for blur_x.s0.x.x19":                        ; preds = %"for blur_x.s0.x.x18", %"for blur_y.s0.y.yi.$n.rebased14"
  %9741 = icmp ugt i64 %indvars.iv, 5
  %or.cond = and i1 %67, %9741
  br i1 %or.cond, label %"for blur_y.s0.x.x26.preheader", label %after_bb22, !prof !389

"for blur_y.s0.x.x26.preheader":                  ; preds = %"end for blur_x.s0.x.x19"
  %9742 = add i64 %6861, 3
  %9743 = and i64 %9742, 7
  %9744 = mul nsw i64 %9743, %68
  %9745 = add i64 %6861, 2
  %9746 = and i64 %9745, 7
  %9747 = mul nsw i64 %9746, %68
  %9748 = add i64 %6861, 4
  %9749 = and i64 %9748, 7
  %9750 = mul nsw i64 %9749, %68
  %9751 = add i64 %6861, 5
  %9752 = and i64 %9751, 7
  %9753 = mul nsw i64 %9752, %68
  %9754 = add i64 %6861, 6
  %9755 = and i64 %9754, 7
  %9756 = mul nsw i64 %9755, %68
  %9757 = zext i32 %6866 to i64
  %9758 = mul nsw i64 %9757, %68
  %9759 = add i64 %6861, 7
  %9760 = and i64 %9759, 7
  %9761 = mul nsw i64 %9760, %68
  %9762 = add nsw i64 %6861, -6
  %9763 = mul nsw i64 %9762, %69
  br label %"for blur_y.s0.x.x26"

after_bb22:                                       ; preds = %"for blur_y.s0.x.x26", %"end for blur_x.s0.x.x19"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %.not = icmp eq i64 %indvars.iv.next, 134
  br i1 %.not, label %"end for blur_y.s0.y.yi.$n.rebased15", label %"for blur_y.s0.y.yi.$n.rebased14"

"for blur_y.s0.x.x26":                            ; preds = %"for blur_y.s0.x.x26.preheader", %"for blur_y.s0.x.x26"
  %blur_y.s0.x.x28 = phi i32 [ %10099, %"for blur_y.s0.x.x26" ], [ 0, %"for blur_y.s0.x.x26.preheader" ]
  %a14 = shl nsw i32 %blur_y.s0.x.x28, 6
  %9764 = icmp slt i32 %a14, %b16
  %blur_y.s0.x.v0.base = select i1 %9764, i32 %a14, i32 %b16
  %t221 = sub nsw i32 %blur_y.s0.x.v0.base, %t274
  %9765 = sext i32 %t221 to i64
  %9766 = add nsw i64 %9744, %9765
  %9767 = getelementptr inbounds i16, i16* %blur_x, i64 %9766
  %9768 = getelementptr inbounds i16, i16* %9767, i64 64
  %9769 = bitcast i16* %9768 to <8 x i16>*
  %9770 = load <8 x i16>, <8 x i16>* %9769, align 2, !tbaa !385
  %9771 = getelementptr inbounds i16, i16* %9767, i64 72
  %9772 = bitcast i16* %9771 to <8 x i16>*
  %9773 = load <8 x i16>, <8 x i16>* %9772, align 2, !tbaa !385
  %9774 = getelementptr inbounds i16, i16* %9767, i64 80
  %9775 = bitcast i16* %9774 to <8 x i16>*
  %9776 = load <8 x i16>, <8 x i16>* %9775, align 2, !tbaa !385
  %9777 = getelementptr inbounds i16, i16* %9767, i64 88
  %9778 = bitcast i16* %9777 to <8 x i16>*
  %9779 = load <8 x i16>, <8 x i16>* %9778, align 2, !tbaa !385
  %9780 = getelementptr inbounds i16, i16* %9767, i64 96
  %9781 = bitcast i16* %9780 to <8 x i16>*
  %9782 = load <8 x i16>, <8 x i16>* %9781, align 2, !tbaa !385
  %9783 = getelementptr inbounds i16, i16* %9767, i64 104
  %9784 = bitcast i16* %9783 to <8 x i16>*
  %9785 = load <8 x i16>, <8 x i16>* %9784, align 2, !tbaa !385
  %9786 = getelementptr inbounds i16, i16* %9767, i64 112
  %9787 = bitcast i16* %9786 to <8 x i16>*
  %9788 = load <8 x i16>, <8 x i16>* %9787, align 2, !tbaa !385
  %9789 = getelementptr inbounds i16, i16* %9767, i64 120
  %9790 = bitcast i16* %9789 to <8 x i16>*
  %9791 = load <8 x i16>, <8 x i16>* %9790, align 2, !tbaa !385
  %9792 = add nsw i64 %9747, %9765
  %9793 = getelementptr inbounds i16, i16* %blur_x, i64 %9792
  %9794 = getelementptr inbounds i16, i16* %9793, i64 64
  %9795 = bitcast i16* %9794 to <8 x i16>*
  %9796 = load <8 x i16>, <8 x i16>* %9795, align 2, !tbaa !385
  %9797 = getelementptr inbounds i16, i16* %9793, i64 72
  %9798 = bitcast i16* %9797 to <8 x i16>*
  %9799 = load <8 x i16>, <8 x i16>* %9798, align 2, !tbaa !385
  %9800 = getelementptr inbounds i16, i16* %9793, i64 80
  %9801 = bitcast i16* %9800 to <8 x i16>*
  %9802 = load <8 x i16>, <8 x i16>* %9801, align 2, !tbaa !385
  %9803 = getelementptr inbounds i16, i16* %9793, i64 88
  %9804 = bitcast i16* %9803 to <8 x i16>*
  %9805 = load <8 x i16>, <8 x i16>* %9804, align 2, !tbaa !385
  %9806 = getelementptr inbounds i16, i16* %9793, i64 96
  %9807 = bitcast i16* %9806 to <8 x i16>*
  %9808 = load <8 x i16>, <8 x i16>* %9807, align 2, !tbaa !385
  %9809 = getelementptr inbounds i16, i16* %9793, i64 104
  %9810 = bitcast i16* %9809 to <8 x i16>*
  %9811 = load <8 x i16>, <8 x i16>* %9810, align 2, !tbaa !385
  %9812 = getelementptr inbounds i16, i16* %9793, i64 112
  %9813 = bitcast i16* %9812 to <8 x i16>*
  %9814 = load <8 x i16>, <8 x i16>* %9813, align 2, !tbaa !385
  %9815 = getelementptr inbounds i16, i16* %9793, i64 120
  %9816 = bitcast i16* %9815 to <8 x i16>*
  %9817 = load <8 x i16>, <8 x i16>* %9816, align 2, !tbaa !385
  %9818 = add nsw i64 %9750, %9765
  %9819 = getelementptr inbounds i16, i16* %blur_x, i64 %9818
  %9820 = getelementptr inbounds i16, i16* %9819, i64 64
  %9821 = bitcast i16* %9820 to <8 x i16>*
  %9822 = load <8 x i16>, <8 x i16>* %9821, align 2, !tbaa !385
  %9823 = getelementptr inbounds i16, i16* %9819, i64 72
  %9824 = bitcast i16* %9823 to <8 x i16>*
  %9825 = load <8 x i16>, <8 x i16>* %9824, align 2, !tbaa !385
  %9826 = getelementptr inbounds i16, i16* %9819, i64 80
  %9827 = bitcast i16* %9826 to <8 x i16>*
  %9828 = load <8 x i16>, <8 x i16>* %9827, align 2, !tbaa !385
  %9829 = getelementptr inbounds i16, i16* %9819, i64 88
  %9830 = bitcast i16* %9829 to <8 x i16>*
  %9831 = load <8 x i16>, <8 x i16>* %9830, align 2, !tbaa !385
  %9832 = getelementptr inbounds i16, i16* %9819, i64 96
  %9833 = bitcast i16* %9832 to <8 x i16>*
  %9834 = load <8 x i16>, <8 x i16>* %9833, align 2, !tbaa !385
  %9835 = getelementptr inbounds i16, i16* %9819, i64 104
  %9836 = bitcast i16* %9835 to <8 x i16>*
  %9837 = load <8 x i16>, <8 x i16>* %9836, align 2, !tbaa !385
  %9838 = getelementptr inbounds i16, i16* %9819, i64 112
  %9839 = bitcast i16* %9838 to <8 x i16>*
  %9840 = load <8 x i16>, <8 x i16>* %9839, align 2, !tbaa !385
  %9841 = getelementptr inbounds i16, i16* %9819, i64 120
  %9842 = bitcast i16* %9841 to <8 x i16>*
  %9843 = load <8 x i16>, <8 x i16>* %9842, align 2, !tbaa !385
  %9844 = add nsw i64 %9753, %9765
  %9845 = getelementptr inbounds i16, i16* %blur_x, i64 %9844
  %9846 = getelementptr inbounds i16, i16* %9845, i64 64
  %9847 = bitcast i16* %9846 to <8 x i16>*
  %9848 = load <8 x i16>, <8 x i16>* %9847, align 2, !tbaa !385
  %9849 = getelementptr inbounds i16, i16* %9845, i64 72
  %9850 = bitcast i16* %9849 to <8 x i16>*
  %9851 = load <8 x i16>, <8 x i16>* %9850, align 2, !tbaa !385
  %9852 = getelementptr inbounds i16, i16* %9845, i64 80
  %9853 = bitcast i16* %9852 to <8 x i16>*
  %9854 = load <8 x i16>, <8 x i16>* %9853, align 2, !tbaa !385
  %9855 = getelementptr inbounds i16, i16* %9845, i64 88
  %9856 = bitcast i16* %9855 to <8 x i16>*
  %9857 = load <8 x i16>, <8 x i16>* %9856, align 2, !tbaa !385
  %9858 = getelementptr inbounds i16, i16* %9845, i64 96
  %9859 = bitcast i16* %9858 to <8 x i16>*
  %9860 = load <8 x i16>, <8 x i16>* %9859, align 2, !tbaa !385
  %9861 = getelementptr inbounds i16, i16* %9845, i64 104
  %9862 = bitcast i16* %9861 to <8 x i16>*
  %9863 = load <8 x i16>, <8 x i16>* %9862, align 2, !tbaa !385
  %9864 = getelementptr inbounds i16, i16* %9845, i64 112
  %9865 = bitcast i16* %9864 to <8 x i16>*
  %9866 = load <8 x i16>, <8 x i16>* %9865, align 2, !tbaa !385
  %9867 = getelementptr inbounds i16, i16* %9845, i64 120
  %9868 = bitcast i16* %9867 to <8 x i16>*
  %9869 = load <8 x i16>, <8 x i16>* %9868, align 2, !tbaa !385
  %9870 = add nsw i64 %9756, %9765
  %9871 = getelementptr inbounds i16, i16* %blur_x, i64 %9870
  %9872 = getelementptr inbounds i16, i16* %9871, i64 64
  %9873 = bitcast i16* %9872 to <8 x i16>*
  %9874 = load <8 x i16>, <8 x i16>* %9873, align 2, !tbaa !385
  %9875 = getelementptr inbounds i16, i16* %9871, i64 72
  %9876 = bitcast i16* %9875 to <8 x i16>*
  %9877 = load <8 x i16>, <8 x i16>* %9876, align 2, !tbaa !385
  %9878 = getelementptr inbounds i16, i16* %9871, i64 80
  %9879 = bitcast i16* %9878 to <8 x i16>*
  %9880 = load <8 x i16>, <8 x i16>* %9879, align 2, !tbaa !385
  %9881 = getelementptr inbounds i16, i16* %9871, i64 88
  %9882 = bitcast i16* %9881 to <8 x i16>*
  %9883 = load <8 x i16>, <8 x i16>* %9882, align 2, !tbaa !385
  %9884 = getelementptr inbounds i16, i16* %9871, i64 96
  %9885 = bitcast i16* %9884 to <8 x i16>*
  %9886 = load <8 x i16>, <8 x i16>* %9885, align 2, !tbaa !385
  %9887 = getelementptr inbounds i16, i16* %9871, i64 104
  %9888 = bitcast i16* %9887 to <8 x i16>*
  %9889 = load <8 x i16>, <8 x i16>* %9888, align 2, !tbaa !385
  %9890 = getelementptr inbounds i16, i16* %9871, i64 112
  %9891 = bitcast i16* %9890 to <8 x i16>*
  %9892 = load <8 x i16>, <8 x i16>* %9891, align 2, !tbaa !385
  %9893 = getelementptr inbounds i16, i16* %9871, i64 120
  %9894 = bitcast i16* %9893 to <8 x i16>*
  %9895 = load <8 x i16>, <8 x i16>* %9894, align 2, !tbaa !385
  %9896 = add nsw i64 %9758, %9765
  %9897 = getelementptr inbounds i16, i16* %blur_x, i64 %9896
  %9898 = getelementptr inbounds i16, i16* %9897, i64 64
  %9899 = bitcast i16* %9898 to <8 x i16>*
  %9900 = load <8 x i16>, <8 x i16>* %9899, align 2, !tbaa !385
  %9901 = getelementptr inbounds i16, i16* %9897, i64 72
  %9902 = bitcast i16* %9901 to <8 x i16>*
  %9903 = load <8 x i16>, <8 x i16>* %9902, align 2, !tbaa !385
  %9904 = getelementptr inbounds i16, i16* %9897, i64 80
  %9905 = bitcast i16* %9904 to <8 x i16>*
  %9906 = load <8 x i16>, <8 x i16>* %9905, align 2, !tbaa !385
  %9907 = getelementptr inbounds i16, i16* %9897, i64 88
  %9908 = bitcast i16* %9907 to <8 x i16>*
  %9909 = load <8 x i16>, <8 x i16>* %9908, align 2, !tbaa !385
  %9910 = getelementptr inbounds i16, i16* %9897, i64 96
  %9911 = bitcast i16* %9910 to <8 x i16>*
  %9912 = load <8 x i16>, <8 x i16>* %9911, align 2, !tbaa !385
  %9913 = getelementptr inbounds i16, i16* %9897, i64 104
  %9914 = bitcast i16* %9913 to <8 x i16>*
  %9915 = load <8 x i16>, <8 x i16>* %9914, align 2, !tbaa !385
  %9916 = getelementptr inbounds i16, i16* %9897, i64 112
  %9917 = bitcast i16* %9916 to <8 x i16>*
  %9918 = load <8 x i16>, <8 x i16>* %9917, align 2, !tbaa !385
  %9919 = getelementptr inbounds i16, i16* %9897, i64 120
  %9920 = bitcast i16* %9919 to <8 x i16>*
  %9921 = load <8 x i16>, <8 x i16>* %9920, align 2, !tbaa !385
  %9922 = add nsw i64 %9761, %9765
  %9923 = getelementptr inbounds i16, i16* %blur_x, i64 %9922
  %9924 = getelementptr inbounds i16, i16* %9923, i64 64
  %9925 = bitcast i16* %9924 to <8 x i16>*
  %9926 = load <8 x i16>, <8 x i16>* %9925, align 2, !tbaa !385
  %9927 = getelementptr inbounds i16, i16* %9923, i64 72
  %9928 = bitcast i16* %9927 to <8 x i16>*
  %9929 = load <8 x i16>, <8 x i16>* %9928, align 2, !tbaa !385
  %9930 = getelementptr inbounds i16, i16* %9923, i64 80
  %9931 = bitcast i16* %9930 to <8 x i16>*
  %9932 = load <8 x i16>, <8 x i16>* %9931, align 2, !tbaa !385
  %9933 = getelementptr inbounds i16, i16* %9923, i64 88
  %9934 = bitcast i16* %9933 to <8 x i16>*
  %9935 = load <8 x i16>, <8 x i16>* %9934, align 2, !tbaa !385
  %9936 = getelementptr inbounds i16, i16* %9923, i64 96
  %9937 = bitcast i16* %9936 to <8 x i16>*
  %9938 = load <8 x i16>, <8 x i16>* %9937, align 2, !tbaa !385
  %9939 = getelementptr inbounds i16, i16* %9923, i64 104
  %9940 = bitcast i16* %9939 to <8 x i16>*
  %9941 = load <8 x i16>, <8 x i16>* %9940, align 2, !tbaa !385
  %9942 = getelementptr inbounds i16, i16* %9923, i64 112
  %9943 = bitcast i16* %9942 to <8 x i16>*
  %9944 = load <8 x i16>, <8 x i16>* %9943, align 2, !tbaa !385
  %9945 = getelementptr inbounds i16, i16* %9923, i64 120
  %9946 = bitcast i16* %9945 to <8 x i16>*
  %9947 = load <8 x i16>, <8 x i16>* %9946, align 2, !tbaa !385
  %9948 = add <8 x i16> %9796, %9770
  %9949 = add <8 x i16> %9948, %9822
  %9950 = add <8 x i16> %9949, %9848
  %9951 = add <8 x i16> %9950, %9874
  %9952 = add <8 x i16> %9951, %9900
  %9953 = add <8 x i16> %9952, %9926
  %9954 = add <8 x i16> %9799, %9773
  %9955 = add <8 x i16> %9954, %9825
  %9956 = add <8 x i16> %9955, %9851
  %9957 = add <8 x i16> %9956, %9877
  %9958 = add <8 x i16> %9957, %9903
  %9959 = add <8 x i16> %9958, %9929
  %9960 = add <8 x i16> %9802, %9776
  %9961 = add <8 x i16> %9960, %9828
  %9962 = add <8 x i16> %9961, %9854
  %9963 = add <8 x i16> %9962, %9880
  %9964 = add <8 x i16> %9963, %9906
  %9965 = add <8 x i16> %9964, %9932
  %9966 = add <8 x i16> %9805, %9779
  %9967 = add <8 x i16> %9966, %9831
  %9968 = add <8 x i16> %9967, %9857
  %9969 = add <8 x i16> %9968, %9883
  %9970 = add <8 x i16> %9969, %9909
  %9971 = add <8 x i16> %9970, %9935
  %9972 = add <8 x i16> %9808, %9782
  %9973 = add <8 x i16> %9972, %9834
  %9974 = add <8 x i16> %9973, %9860
  %9975 = add <8 x i16> %9974, %9886
  %9976 = add <8 x i16> %9975, %9912
  %9977 = add <8 x i16> %9976, %9938
  %9978 = add <8 x i16> %9811, %9785
  %9979 = add <8 x i16> %9978, %9837
  %9980 = add <8 x i16> %9979, %9863
  %9981 = add <8 x i16> %9980, %9889
  %9982 = add <8 x i16> %9981, %9915
  %9983 = add <8 x i16> %9982, %9941
  %9984 = add <8 x i16> %9814, %9788
  %9985 = add <8 x i16> %9984, %9840
  %9986 = add <8 x i16> %9985, %9866
  %9987 = add <8 x i16> %9986, %9892
  %9988 = add <8 x i16> %9987, %9918
  %9989 = add <8 x i16> %9988, %9944
  %9990 = add <8 x i16> %9817, %9791
  %9991 = add <8 x i16> %9990, %9843
  %9992 = add <8 x i16> %9991, %9869
  %9993 = add <8 x i16> %9992, %9895
  %9994 = add <8 x i16> %9993, %9921
  %9995 = add <8 x i16> %9994, %9947
  %9996 = shufflevector <8 x i16> %9995, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9997 = shufflevector <16 x i16> %9996, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9998 = shufflevector <32 x i16> %9997, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9999 = shufflevector <8 x i16> %9953, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10000 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9999, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10001 = shufflevector <8 x i16> %9953, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10002 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10001, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10003 = shufflevector <8 x i16> %9959, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10004 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10003, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10005 = shufflevector <8 x i16> %9959, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10006 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10005, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10007 = shufflevector <8 x i16> %9965, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10008 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10007, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10009 = shufflevector <8 x i16> %9965, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10010 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10009, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10011 = shufflevector <8 x i16> %9971, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10012 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10011, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10013 = shufflevector <8 x i16> %9971, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10014 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10013, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10015 = shufflevector <8 x i16> %9977, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10016 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10015, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10017 = shufflevector <8 x i16> %9977, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10018 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10017, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10019 = shufflevector <8 x i16> %9983, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10020 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10019, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10021 = shufflevector <8 x i16> %9983, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10022 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10021, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10023 = shufflevector <8 x i16> %9989, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10024 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10023, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10025 = shufflevector <8 x i16> %9989, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10026 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10025, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10027 = shufflevector <8 x i16> %9995, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10028 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10027, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10029 = shufflevector <8 x i16> %9995, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10030 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10029, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10031 = shufflevector <4 x i32> %10000, <4 x i32> %10002, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10032 = shufflevector <4 x i32> %10004, <4 x i32> %10006, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10033 = shufflevector <4 x i32> %10008, <4 x i32> %10010, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10034 = shufflevector <4 x i32> %10012, <4 x i32> %10014, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10035 = shufflevector <4 x i32> %10016, <4 x i32> %10018, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10036 = shufflevector <4 x i32> %10020, <4 x i32> %10022, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10037 = shufflevector <4 x i32> %10024, <4 x i32> %10026, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10038 = shufflevector <4 x i32> %10028, <4 x i32> %10030, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10039 = shufflevector <8 x i32> %10031, <8 x i32> %10032, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10040 = shufflevector <8 x i32> %10033, <8 x i32> %10034, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10041 = shufflevector <8 x i32> %10035, <8 x i32> %10036, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10042 = shufflevector <8 x i32> %10037, <8 x i32> %10038, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10043 = shufflevector <16 x i32> %10039, <16 x i32> %10040, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10044 = shufflevector <16 x i32> %10041, <16 x i32> %10042, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10045 = shufflevector <32 x i32> %10043, <32 x i32> %10044, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10046 = lshr <64 x i32> %10045, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %10047 = trunc <64 x i32> %10046 to <64 x i16>
  %10048 = shufflevector <64 x i16> %10047, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10049 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %10048, <8 x i16> %9953)
  %10050 = shufflevector <64 x i16> %10047, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10051 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %10050, <8 x i16> %9959)
  %10052 = shufflevector <64 x i16> %10047, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %10053 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %10052, <8 x i16> %9965)
  %10054 = shufflevector <64 x i16> %10047, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10055 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %10054, <8 x i16> %9971)
  %10056 = shufflevector <64 x i16> %10047, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %10057 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %10056, <8 x i16> %9977)
  %10058 = shufflevector <64 x i16> %10047, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %10059 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %10058, <8 x i16> %9983)
  %10060 = shufflevector <64 x i16> %10047, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %10061 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %10060, <8 x i16> %9989)
  %10062 = shufflevector <64 x i16> %10047, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10063 = shufflevector <64 x i16> %9998, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10064 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %10062, <8 x i16> %10063)
  %10065 = shufflevector <8 x i16> %10049, <8 x i16> %10051, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10066 = shufflevector <8 x i16> %10053, <8 x i16> %10055, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10067 = shufflevector <8 x i16> %10057, <8 x i16> %10059, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10068 = shufflevector <8 x i16> %10061, <8 x i16> %10064, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10069 = shufflevector <16 x i16> %10065, <16 x i16> %10066, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10070 = shufflevector <16 x i16> %10067, <16 x i16> %10068, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10071 = shufflevector <32 x i16> %10069, <32 x i16> %10070, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10072 = lshr <64 x i16> %10071, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10073 = shufflevector <64 x i16> %10072, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10074 = sext i32 %blur_y.s0.x.v0.base to i64
  %10075 = add nsw i64 %9763, %10074
  %10076 = getelementptr inbounds i16, i16* %70, i64 %10075
  %10077 = bitcast i16* %10076 to <8 x i16>*
  store <8 x i16> %10073, <8 x i16>* %10077, align 2, !tbaa !387
  %10078 = shufflevector <64 x i16> %10072, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10079 = getelementptr inbounds i16, i16* %10076, i64 8
  %10080 = bitcast i16* %10079 to <8 x i16>*
  store <8 x i16> %10078, <8 x i16>* %10080, align 2, !tbaa !387
  %10081 = shufflevector <64 x i16> %10072, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %10082 = getelementptr inbounds i16, i16* %10076, i64 16
  %10083 = bitcast i16* %10082 to <8 x i16>*
  store <8 x i16> %10081, <8 x i16>* %10083, align 2, !tbaa !387
  %10084 = shufflevector <64 x i16> %10072, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10085 = getelementptr inbounds i16, i16* %10076, i64 24
  %10086 = bitcast i16* %10085 to <8 x i16>*
  store <8 x i16> %10084, <8 x i16>* %10086, align 2, !tbaa !387
  %10087 = shufflevector <64 x i16> %10072, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %10088 = getelementptr inbounds i16, i16* %10076, i64 32
  %10089 = bitcast i16* %10088 to <8 x i16>*
  store <8 x i16> %10087, <8 x i16>* %10089, align 2, !tbaa !387
  %10090 = shufflevector <64 x i16> %10072, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %10091 = getelementptr inbounds i16, i16* %10076, i64 40
  %10092 = bitcast i16* %10091 to <8 x i16>*
  store <8 x i16> %10090, <8 x i16>* %10092, align 2, !tbaa !387
  %10093 = shufflevector <64 x i16> %10072, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %10094 = getelementptr inbounds i16, i16* %10076, i64 48
  %10095 = bitcast i16* %10094 to <8 x i16>*
  store <8 x i16> %10093, <8 x i16>* %10095, align 2, !tbaa !387
  %10096 = shufflevector <64 x i16> %10072, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10097 = getelementptr inbounds i16, i16* %10076, i64 56
  %10098 = bitcast i16* %10097 to <8 x i16>*
  store <8 x i16> %10096, <8 x i16>* %10098, align 2, !tbaa !387
  %10099 = add nuw nsw i32 %blur_y.s0.x.x28, 1
  %.not124 = icmp eq i32 %10099, %t270
  br i1 %.not124, label %after_bb22, label %"for blur_y.s0.x.x26"

after_bb43:                                       ; preds = %if.then.i151, %"end for blur_y.s0.y.yi.$n.rebased86", %if.then.i148, %"end for blur_y.s0.y.yi.$n.rebased51"
  ret i32 0

then_bb44:                                        ; preds = %after_bb
  %t27848 = sub nsw i32 %t27340, %t26437
  %10100 = icmp sgt i32 %t27542, 0
  %10101 = add nsw i32 %input.extent.034, -1
  %10102 = insertelement <64 x i32> undef, i32 %10101, i32 0
  %10103 = shufflevector <64 x i32> %10102, <64 x i32> undef, <4 x i32> zeroinitializer
  %10104 = bitcast i8* %input31 to i16*
  %10105 = sext i32 %a25 to i64
  %10106 = sext i32 %t27441 to i64
  %t28159 = sub nsw i32 %t26437, %t27542
  %10107 = icmp sgt i32 %t28159, 0
  %10108 = icmp sgt i32 %t27848, 0
  %10109 = icmp sgt i32 %t27139, 0
  %10110 = sext i32 %blur_y.stride.133 to i64
  %10111 = bitcast i8* %blur_y30 to i16*
  %10112 = icmp sgt i32 %t27038, %t27139
  %10113 = sext i32 %b29 to i64
  %10114 = zext i32 %t28159 to i64
  %10115 = zext i32 %t27139 to i64
  %10116 = sext i32 %blur_y.s0.y.yi.base46 to i64
  br label %"for blur_y.s0.y.yi.$n.rebased50"

next_bb45:                                        ; preds = %after_bb
  %10117 = icmp sgt i32 %t27340, 0
  %10118 = add nsw i32 %input.extent.034, -1
  %10119 = insertelement <64 x i32> undef, i32 %10118, i32 0
  %10120 = shufflevector <64 x i32> %10119, <64 x i32> undef, <4 x i32> zeroinitializer
  %10121 = bitcast i8* %input31 to i16*
  %10122 = icmp sgt i32 %t27038, 0
  %b31 = add nsw i32 %b29, -64
  %10123 = sext i32 %a25 to i64
  %10124 = sext i32 %blur_y.stride.133 to i64
  %10125 = bitcast i8* %blur_y30 to i16*
  %10126 = sext i32 %blur_y.s0.y.yi.base46 to i64
  %10127 = sext i32 %b28 to i64
  br label %"for blur_y.s0.y.yi.$n.rebased85"

"for blur_y.s0.y.yi.$n.rebased50":                ; preds = %then_bb44, %after_bb70
  %indvars.iv187 = phi i64 [ 0, %then_bb44 ], [ %indvars.iv.next188, %after_bb70 ]
  %10128 = add nsw i64 %indvars.iv187, %10116
  br i1 %10100, label %"for blur_x.s0.x.x54.preheader", label %"end for blur_x.s0.x.x55", !prof !381

"for blur_x.s0.x.x54.preheader":                  ; preds = %"for blur_y.s0.y.yi.$n.rebased50"
  %10129 = icmp sgt i64 %10128, 0
  %10130 = select i1 %10129, i64 %10128, i64 0
  %10131 = trunc i64 %10130 to i32
  %10132 = mul nsw i32 %input.stride.135, %10131
  %10133 = insertelement <64 x i32> undef, i32 %10132, i32 0
  %t24858 = shufflevector <64 x i32> %10133, <64 x i32> undef, <64 x i32> zeroinitializer
  %10134 = and i64 %10128, 7
  %10135 = mul nsw i64 %10134, %10105
  %10136 = sub nsw i64 %10135, %10106
  br label %"for blur_x.s0.x.x54"

"end for blur_y.s0.y.yi.$n.rebased51":            ; preds = %after_bb70
  %tobool.not.i147.not = icmp eq i8* %44, null
  br i1 %tobool.not.i147.not, label %after_bb43, label %if.then.i148

if.then.i148:                                     ; preds = %"end for blur_y.s0.y.yi.$n.rebased51"
  tail call void @halide_free(i8* %__user_context, i8* nonnull %44) #13
  br label %after_bb43

"for blur_x.s0.x.x54":                            ; preds = %"for blur_x.s0.x.x54.preheader", %"for blur_x.s0.x.x54"
  %blur_x.s0.x.x56 = phi i32 [ %13003, %"for blur_x.s0.x.x54" ], [ 0, %"for blur_x.s0.x.x54.preheader" ]
  %10137 = shl nsw i32 %blur_x.s0.x.x56, 6
  %a18 = add nsw i32 %10137, %t27441
  %10138 = icmp slt i32 %a18, %b29
  %blur_x.s0.x.v1.base.s57 = select i1 %10138, i32 %a18, i32 %b29
  %10139 = add nsw i32 %blur_x.s0.x.v1.base.s57, -63
  %10140 = insertelement <64 x i32> undef, i32 %10139, i32 0
  %10141 = shufflevector <64 x i32> %10140, <64 x i32> undef, <64 x i32> zeroinitializer
  %10142 = add nsw <64 x i32> %10141, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10143 = shufflevector <64 x i32> %10142, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10144 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10143, <4 x i32> %10103)
  %10145 = shufflevector <64 x i32> %10142, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10146 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10145, <4 x i32> %10103)
  %10147 = shufflevector <64 x i32> %10142, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %10148 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10147, <4 x i32> %10103)
  %10149 = shufflevector <64 x i32> %10142, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %10150 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10149, <4 x i32> %10103)
  %10151 = shufflevector <64 x i32> %10142, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %10152 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10151, <4 x i32> %10103)
  %10153 = shufflevector <64 x i32> %10142, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %10154 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10153, <4 x i32> %10103)
  %10155 = shufflevector <64 x i32> %10142, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %10156 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10155, <4 x i32> %10103)
  %10157 = shufflevector <64 x i32> %10142, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %10158 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10157, <4 x i32> %10103)
  %10159 = shufflevector <64 x i32> %10142, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %10160 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10159, <4 x i32> %10103)
  %10161 = shufflevector <64 x i32> %10142, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %10162 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10161, <4 x i32> %10103)
  %10163 = shufflevector <64 x i32> %10142, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %10164 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10163, <4 x i32> %10103)
  %10165 = shufflevector <64 x i32> %10142, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %10166 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10165, <4 x i32> %10103)
  %10167 = shufflevector <64 x i32> %10142, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %10168 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10167, <4 x i32> %10103)
  %10169 = shufflevector <64 x i32> %10142, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %10170 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10169, <4 x i32> %10103)
  %10171 = shufflevector <64 x i32> %10142, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %10172 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10171, <4 x i32> %10103)
  %10173 = shufflevector <64 x i32> %10142, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %10174 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10173, <4 x i32> %10103)
  %10175 = shufflevector <4 x i32> %10174, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %10176 = shufflevector <8 x i32> %10175, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %10177 = shufflevector <16 x i32> %10176, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %10178 = shufflevector <32 x i32> %10177, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %10179 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10144, <4 x i32> zeroinitializer)
  %10180 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10146, <4 x i32> zeroinitializer)
  %10181 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10148, <4 x i32> zeroinitializer)
  %10182 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10150, <4 x i32> zeroinitializer)
  %10183 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10152, <4 x i32> zeroinitializer)
  %10184 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10154, <4 x i32> zeroinitializer)
  %10185 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10156, <4 x i32> zeroinitializer)
  %10186 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10158, <4 x i32> zeroinitializer)
  %10187 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10160, <4 x i32> zeroinitializer)
  %10188 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10162, <4 x i32> zeroinitializer)
  %10189 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10164, <4 x i32> zeroinitializer)
  %10190 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10166, <4 x i32> zeroinitializer)
  %10191 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10168, <4 x i32> zeroinitializer)
  %10192 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10170, <4 x i32> zeroinitializer)
  %10193 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10172, <4 x i32> zeroinitializer)
  %10194 = shufflevector <64 x i32> %10178, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %10195 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10194, <4 x i32> zeroinitializer)
  %10196 = shufflevector <4 x i32> %10179, <4 x i32> %10180, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10197 = shufflevector <4 x i32> %10181, <4 x i32> %10182, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10198 = shufflevector <4 x i32> %10183, <4 x i32> %10184, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10199 = shufflevector <4 x i32> %10185, <4 x i32> %10186, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10200 = shufflevector <4 x i32> %10187, <4 x i32> %10188, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10201 = shufflevector <4 x i32> %10189, <4 x i32> %10190, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10202 = shufflevector <4 x i32> %10191, <4 x i32> %10192, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10203 = shufflevector <4 x i32> %10193, <4 x i32> %10195, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10204 = shufflevector <8 x i32> %10196, <8 x i32> %10197, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10205 = shufflevector <8 x i32> %10198, <8 x i32> %10199, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10206 = shufflevector <8 x i32> %10200, <8 x i32> %10201, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10207 = shufflevector <8 x i32> %10202, <8 x i32> %10203, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10208 = shufflevector <16 x i32> %10204, <16 x i32> %10205, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10209 = shufflevector <16 x i32> %10206, <16 x i32> %10207, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10210 = shufflevector <32 x i32> %10208, <32 x i32> %10209, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10211 = add nsw <64 x i32> %10210, %t24858
  %10212 = extractelement <64 x i32> %10211, i32 0
  %10213 = sext i32 %10212 to i64
  %10214 = getelementptr inbounds i16, i16* %10104, i64 %10213
  %10215 = load i16, i16* %10214, align 2, !tbaa !382
  %10216 = insertelement <64 x i16> undef, i16 %10215, i32 0
  %10217 = extractelement <64 x i32> %10211, i32 1
  %10218 = sext i32 %10217 to i64
  %10219 = getelementptr inbounds i16, i16* %10104, i64 %10218
  %10220 = load i16, i16* %10219, align 2, !tbaa !382
  %10221 = insertelement <64 x i16> %10216, i16 %10220, i32 1
  %10222 = extractelement <64 x i32> %10211, i32 2
  %10223 = sext i32 %10222 to i64
  %10224 = getelementptr inbounds i16, i16* %10104, i64 %10223
  %10225 = load i16, i16* %10224, align 2, !tbaa !382
  %10226 = insertelement <64 x i16> %10221, i16 %10225, i32 2
  %10227 = extractelement <64 x i32> %10211, i32 3
  %10228 = sext i32 %10227 to i64
  %10229 = getelementptr inbounds i16, i16* %10104, i64 %10228
  %10230 = load i16, i16* %10229, align 2, !tbaa !382
  %10231 = insertelement <64 x i16> %10226, i16 %10230, i32 3
  %10232 = extractelement <64 x i32> %10211, i32 4
  %10233 = sext i32 %10232 to i64
  %10234 = getelementptr inbounds i16, i16* %10104, i64 %10233
  %10235 = load i16, i16* %10234, align 2, !tbaa !382
  %10236 = insertelement <64 x i16> %10231, i16 %10235, i32 4
  %10237 = extractelement <64 x i32> %10211, i32 5
  %10238 = sext i32 %10237 to i64
  %10239 = getelementptr inbounds i16, i16* %10104, i64 %10238
  %10240 = load i16, i16* %10239, align 2, !tbaa !382
  %10241 = insertelement <64 x i16> %10236, i16 %10240, i32 5
  %10242 = extractelement <64 x i32> %10211, i32 6
  %10243 = sext i32 %10242 to i64
  %10244 = getelementptr inbounds i16, i16* %10104, i64 %10243
  %10245 = load i16, i16* %10244, align 2, !tbaa !382
  %10246 = insertelement <64 x i16> %10241, i16 %10245, i32 6
  %10247 = extractelement <64 x i32> %10211, i32 7
  %10248 = sext i32 %10247 to i64
  %10249 = getelementptr inbounds i16, i16* %10104, i64 %10248
  %10250 = load i16, i16* %10249, align 2, !tbaa !382
  %10251 = insertelement <64 x i16> %10246, i16 %10250, i32 7
  %10252 = extractelement <64 x i32> %10211, i32 8
  %10253 = sext i32 %10252 to i64
  %10254 = getelementptr inbounds i16, i16* %10104, i64 %10253
  %10255 = load i16, i16* %10254, align 2, !tbaa !382
  %10256 = insertelement <64 x i16> %10251, i16 %10255, i32 8
  %10257 = extractelement <64 x i32> %10211, i32 9
  %10258 = sext i32 %10257 to i64
  %10259 = getelementptr inbounds i16, i16* %10104, i64 %10258
  %10260 = load i16, i16* %10259, align 2, !tbaa !382
  %10261 = insertelement <64 x i16> %10256, i16 %10260, i32 9
  %10262 = extractelement <64 x i32> %10211, i32 10
  %10263 = sext i32 %10262 to i64
  %10264 = getelementptr inbounds i16, i16* %10104, i64 %10263
  %10265 = load i16, i16* %10264, align 2, !tbaa !382
  %10266 = insertelement <64 x i16> %10261, i16 %10265, i32 10
  %10267 = extractelement <64 x i32> %10211, i32 11
  %10268 = sext i32 %10267 to i64
  %10269 = getelementptr inbounds i16, i16* %10104, i64 %10268
  %10270 = load i16, i16* %10269, align 2, !tbaa !382
  %10271 = insertelement <64 x i16> %10266, i16 %10270, i32 11
  %10272 = extractelement <64 x i32> %10211, i32 12
  %10273 = sext i32 %10272 to i64
  %10274 = getelementptr inbounds i16, i16* %10104, i64 %10273
  %10275 = load i16, i16* %10274, align 2, !tbaa !382
  %10276 = insertelement <64 x i16> %10271, i16 %10275, i32 12
  %10277 = extractelement <64 x i32> %10211, i32 13
  %10278 = sext i32 %10277 to i64
  %10279 = getelementptr inbounds i16, i16* %10104, i64 %10278
  %10280 = load i16, i16* %10279, align 2, !tbaa !382
  %10281 = insertelement <64 x i16> %10276, i16 %10280, i32 13
  %10282 = extractelement <64 x i32> %10211, i32 14
  %10283 = sext i32 %10282 to i64
  %10284 = getelementptr inbounds i16, i16* %10104, i64 %10283
  %10285 = load i16, i16* %10284, align 2, !tbaa !382
  %10286 = insertelement <64 x i16> %10281, i16 %10285, i32 14
  %10287 = extractelement <64 x i32> %10211, i32 15
  %10288 = sext i32 %10287 to i64
  %10289 = getelementptr inbounds i16, i16* %10104, i64 %10288
  %10290 = load i16, i16* %10289, align 2, !tbaa !382
  %10291 = insertelement <64 x i16> %10286, i16 %10290, i32 15
  %10292 = extractelement <64 x i32> %10211, i32 16
  %10293 = sext i32 %10292 to i64
  %10294 = getelementptr inbounds i16, i16* %10104, i64 %10293
  %10295 = load i16, i16* %10294, align 2, !tbaa !382
  %10296 = insertelement <64 x i16> %10291, i16 %10295, i32 16
  %10297 = extractelement <64 x i32> %10211, i32 17
  %10298 = sext i32 %10297 to i64
  %10299 = getelementptr inbounds i16, i16* %10104, i64 %10298
  %10300 = load i16, i16* %10299, align 2, !tbaa !382
  %10301 = insertelement <64 x i16> %10296, i16 %10300, i32 17
  %10302 = extractelement <64 x i32> %10211, i32 18
  %10303 = sext i32 %10302 to i64
  %10304 = getelementptr inbounds i16, i16* %10104, i64 %10303
  %10305 = load i16, i16* %10304, align 2, !tbaa !382
  %10306 = insertelement <64 x i16> %10301, i16 %10305, i32 18
  %10307 = extractelement <64 x i32> %10211, i32 19
  %10308 = sext i32 %10307 to i64
  %10309 = getelementptr inbounds i16, i16* %10104, i64 %10308
  %10310 = load i16, i16* %10309, align 2, !tbaa !382
  %10311 = insertelement <64 x i16> %10306, i16 %10310, i32 19
  %10312 = extractelement <64 x i32> %10211, i32 20
  %10313 = sext i32 %10312 to i64
  %10314 = getelementptr inbounds i16, i16* %10104, i64 %10313
  %10315 = load i16, i16* %10314, align 2, !tbaa !382
  %10316 = insertelement <64 x i16> %10311, i16 %10315, i32 20
  %10317 = extractelement <64 x i32> %10211, i32 21
  %10318 = sext i32 %10317 to i64
  %10319 = getelementptr inbounds i16, i16* %10104, i64 %10318
  %10320 = load i16, i16* %10319, align 2, !tbaa !382
  %10321 = insertelement <64 x i16> %10316, i16 %10320, i32 21
  %10322 = extractelement <64 x i32> %10211, i32 22
  %10323 = sext i32 %10322 to i64
  %10324 = getelementptr inbounds i16, i16* %10104, i64 %10323
  %10325 = load i16, i16* %10324, align 2, !tbaa !382
  %10326 = insertelement <64 x i16> %10321, i16 %10325, i32 22
  %10327 = extractelement <64 x i32> %10211, i32 23
  %10328 = sext i32 %10327 to i64
  %10329 = getelementptr inbounds i16, i16* %10104, i64 %10328
  %10330 = load i16, i16* %10329, align 2, !tbaa !382
  %10331 = insertelement <64 x i16> %10326, i16 %10330, i32 23
  %10332 = extractelement <64 x i32> %10211, i32 24
  %10333 = sext i32 %10332 to i64
  %10334 = getelementptr inbounds i16, i16* %10104, i64 %10333
  %10335 = load i16, i16* %10334, align 2, !tbaa !382
  %10336 = insertelement <64 x i16> %10331, i16 %10335, i32 24
  %10337 = extractelement <64 x i32> %10211, i32 25
  %10338 = sext i32 %10337 to i64
  %10339 = getelementptr inbounds i16, i16* %10104, i64 %10338
  %10340 = load i16, i16* %10339, align 2, !tbaa !382
  %10341 = insertelement <64 x i16> %10336, i16 %10340, i32 25
  %10342 = extractelement <64 x i32> %10211, i32 26
  %10343 = sext i32 %10342 to i64
  %10344 = getelementptr inbounds i16, i16* %10104, i64 %10343
  %10345 = load i16, i16* %10344, align 2, !tbaa !382
  %10346 = insertelement <64 x i16> %10341, i16 %10345, i32 26
  %10347 = extractelement <64 x i32> %10211, i32 27
  %10348 = sext i32 %10347 to i64
  %10349 = getelementptr inbounds i16, i16* %10104, i64 %10348
  %10350 = load i16, i16* %10349, align 2, !tbaa !382
  %10351 = insertelement <64 x i16> %10346, i16 %10350, i32 27
  %10352 = extractelement <64 x i32> %10211, i32 28
  %10353 = sext i32 %10352 to i64
  %10354 = getelementptr inbounds i16, i16* %10104, i64 %10353
  %10355 = load i16, i16* %10354, align 2, !tbaa !382
  %10356 = insertelement <64 x i16> %10351, i16 %10355, i32 28
  %10357 = extractelement <64 x i32> %10211, i32 29
  %10358 = sext i32 %10357 to i64
  %10359 = getelementptr inbounds i16, i16* %10104, i64 %10358
  %10360 = load i16, i16* %10359, align 2, !tbaa !382
  %10361 = insertelement <64 x i16> %10356, i16 %10360, i32 29
  %10362 = extractelement <64 x i32> %10211, i32 30
  %10363 = sext i32 %10362 to i64
  %10364 = getelementptr inbounds i16, i16* %10104, i64 %10363
  %10365 = load i16, i16* %10364, align 2, !tbaa !382
  %10366 = insertelement <64 x i16> %10361, i16 %10365, i32 30
  %10367 = extractelement <64 x i32> %10211, i32 31
  %10368 = sext i32 %10367 to i64
  %10369 = getelementptr inbounds i16, i16* %10104, i64 %10368
  %10370 = load i16, i16* %10369, align 2, !tbaa !382
  %10371 = insertelement <64 x i16> %10366, i16 %10370, i32 31
  %10372 = extractelement <64 x i32> %10211, i32 32
  %10373 = sext i32 %10372 to i64
  %10374 = getelementptr inbounds i16, i16* %10104, i64 %10373
  %10375 = load i16, i16* %10374, align 2, !tbaa !382
  %10376 = insertelement <64 x i16> %10371, i16 %10375, i32 32
  %10377 = extractelement <64 x i32> %10211, i32 33
  %10378 = sext i32 %10377 to i64
  %10379 = getelementptr inbounds i16, i16* %10104, i64 %10378
  %10380 = load i16, i16* %10379, align 2, !tbaa !382
  %10381 = insertelement <64 x i16> %10376, i16 %10380, i32 33
  %10382 = extractelement <64 x i32> %10211, i32 34
  %10383 = sext i32 %10382 to i64
  %10384 = getelementptr inbounds i16, i16* %10104, i64 %10383
  %10385 = load i16, i16* %10384, align 2, !tbaa !382
  %10386 = insertelement <64 x i16> %10381, i16 %10385, i32 34
  %10387 = extractelement <64 x i32> %10211, i32 35
  %10388 = sext i32 %10387 to i64
  %10389 = getelementptr inbounds i16, i16* %10104, i64 %10388
  %10390 = load i16, i16* %10389, align 2, !tbaa !382
  %10391 = insertelement <64 x i16> %10386, i16 %10390, i32 35
  %10392 = extractelement <64 x i32> %10211, i32 36
  %10393 = sext i32 %10392 to i64
  %10394 = getelementptr inbounds i16, i16* %10104, i64 %10393
  %10395 = load i16, i16* %10394, align 2, !tbaa !382
  %10396 = insertelement <64 x i16> %10391, i16 %10395, i32 36
  %10397 = extractelement <64 x i32> %10211, i32 37
  %10398 = sext i32 %10397 to i64
  %10399 = getelementptr inbounds i16, i16* %10104, i64 %10398
  %10400 = load i16, i16* %10399, align 2, !tbaa !382
  %10401 = insertelement <64 x i16> %10396, i16 %10400, i32 37
  %10402 = extractelement <64 x i32> %10211, i32 38
  %10403 = sext i32 %10402 to i64
  %10404 = getelementptr inbounds i16, i16* %10104, i64 %10403
  %10405 = load i16, i16* %10404, align 2, !tbaa !382
  %10406 = insertelement <64 x i16> %10401, i16 %10405, i32 38
  %10407 = extractelement <64 x i32> %10211, i32 39
  %10408 = sext i32 %10407 to i64
  %10409 = getelementptr inbounds i16, i16* %10104, i64 %10408
  %10410 = load i16, i16* %10409, align 2, !tbaa !382
  %10411 = insertelement <64 x i16> %10406, i16 %10410, i32 39
  %10412 = extractelement <64 x i32> %10211, i32 40
  %10413 = sext i32 %10412 to i64
  %10414 = getelementptr inbounds i16, i16* %10104, i64 %10413
  %10415 = load i16, i16* %10414, align 2, !tbaa !382
  %10416 = insertelement <64 x i16> %10411, i16 %10415, i32 40
  %10417 = extractelement <64 x i32> %10211, i32 41
  %10418 = sext i32 %10417 to i64
  %10419 = getelementptr inbounds i16, i16* %10104, i64 %10418
  %10420 = load i16, i16* %10419, align 2, !tbaa !382
  %10421 = insertelement <64 x i16> %10416, i16 %10420, i32 41
  %10422 = extractelement <64 x i32> %10211, i32 42
  %10423 = sext i32 %10422 to i64
  %10424 = getelementptr inbounds i16, i16* %10104, i64 %10423
  %10425 = load i16, i16* %10424, align 2, !tbaa !382
  %10426 = insertelement <64 x i16> %10421, i16 %10425, i32 42
  %10427 = extractelement <64 x i32> %10211, i32 43
  %10428 = sext i32 %10427 to i64
  %10429 = getelementptr inbounds i16, i16* %10104, i64 %10428
  %10430 = load i16, i16* %10429, align 2, !tbaa !382
  %10431 = insertelement <64 x i16> %10426, i16 %10430, i32 43
  %10432 = extractelement <64 x i32> %10211, i32 44
  %10433 = sext i32 %10432 to i64
  %10434 = getelementptr inbounds i16, i16* %10104, i64 %10433
  %10435 = load i16, i16* %10434, align 2, !tbaa !382
  %10436 = insertelement <64 x i16> %10431, i16 %10435, i32 44
  %10437 = extractelement <64 x i32> %10211, i32 45
  %10438 = sext i32 %10437 to i64
  %10439 = getelementptr inbounds i16, i16* %10104, i64 %10438
  %10440 = load i16, i16* %10439, align 2, !tbaa !382
  %10441 = insertelement <64 x i16> %10436, i16 %10440, i32 45
  %10442 = extractelement <64 x i32> %10211, i32 46
  %10443 = sext i32 %10442 to i64
  %10444 = getelementptr inbounds i16, i16* %10104, i64 %10443
  %10445 = load i16, i16* %10444, align 2, !tbaa !382
  %10446 = insertelement <64 x i16> %10441, i16 %10445, i32 46
  %10447 = extractelement <64 x i32> %10211, i32 47
  %10448 = sext i32 %10447 to i64
  %10449 = getelementptr inbounds i16, i16* %10104, i64 %10448
  %10450 = load i16, i16* %10449, align 2, !tbaa !382
  %10451 = insertelement <64 x i16> %10446, i16 %10450, i32 47
  %10452 = extractelement <64 x i32> %10211, i32 48
  %10453 = sext i32 %10452 to i64
  %10454 = getelementptr inbounds i16, i16* %10104, i64 %10453
  %10455 = load i16, i16* %10454, align 2, !tbaa !382
  %10456 = insertelement <64 x i16> %10451, i16 %10455, i32 48
  %10457 = extractelement <64 x i32> %10211, i32 49
  %10458 = sext i32 %10457 to i64
  %10459 = getelementptr inbounds i16, i16* %10104, i64 %10458
  %10460 = load i16, i16* %10459, align 2, !tbaa !382
  %10461 = insertelement <64 x i16> %10456, i16 %10460, i32 49
  %10462 = extractelement <64 x i32> %10211, i32 50
  %10463 = sext i32 %10462 to i64
  %10464 = getelementptr inbounds i16, i16* %10104, i64 %10463
  %10465 = load i16, i16* %10464, align 2, !tbaa !382
  %10466 = insertelement <64 x i16> %10461, i16 %10465, i32 50
  %10467 = extractelement <64 x i32> %10211, i32 51
  %10468 = sext i32 %10467 to i64
  %10469 = getelementptr inbounds i16, i16* %10104, i64 %10468
  %10470 = load i16, i16* %10469, align 2, !tbaa !382
  %10471 = insertelement <64 x i16> %10466, i16 %10470, i32 51
  %10472 = extractelement <64 x i32> %10211, i32 52
  %10473 = sext i32 %10472 to i64
  %10474 = getelementptr inbounds i16, i16* %10104, i64 %10473
  %10475 = load i16, i16* %10474, align 2, !tbaa !382
  %10476 = insertelement <64 x i16> %10471, i16 %10475, i32 52
  %10477 = extractelement <64 x i32> %10211, i32 53
  %10478 = sext i32 %10477 to i64
  %10479 = getelementptr inbounds i16, i16* %10104, i64 %10478
  %10480 = load i16, i16* %10479, align 2, !tbaa !382
  %10481 = insertelement <64 x i16> %10476, i16 %10480, i32 53
  %10482 = extractelement <64 x i32> %10211, i32 54
  %10483 = sext i32 %10482 to i64
  %10484 = getelementptr inbounds i16, i16* %10104, i64 %10483
  %10485 = load i16, i16* %10484, align 2, !tbaa !382
  %10486 = insertelement <64 x i16> %10481, i16 %10485, i32 54
  %10487 = extractelement <64 x i32> %10211, i32 55
  %10488 = sext i32 %10487 to i64
  %10489 = getelementptr inbounds i16, i16* %10104, i64 %10488
  %10490 = load i16, i16* %10489, align 2, !tbaa !382
  %10491 = insertelement <64 x i16> %10486, i16 %10490, i32 55
  %10492 = extractelement <64 x i32> %10211, i32 56
  %10493 = sext i32 %10492 to i64
  %10494 = getelementptr inbounds i16, i16* %10104, i64 %10493
  %10495 = load i16, i16* %10494, align 2, !tbaa !382
  %10496 = insertelement <64 x i16> %10491, i16 %10495, i32 56
  %10497 = extractelement <64 x i32> %10211, i32 57
  %10498 = sext i32 %10497 to i64
  %10499 = getelementptr inbounds i16, i16* %10104, i64 %10498
  %10500 = load i16, i16* %10499, align 2, !tbaa !382
  %10501 = insertelement <64 x i16> %10496, i16 %10500, i32 57
  %10502 = extractelement <64 x i32> %10211, i32 58
  %10503 = sext i32 %10502 to i64
  %10504 = getelementptr inbounds i16, i16* %10104, i64 %10503
  %10505 = load i16, i16* %10504, align 2, !tbaa !382
  %10506 = insertelement <64 x i16> %10501, i16 %10505, i32 58
  %10507 = extractelement <64 x i32> %10211, i32 59
  %10508 = sext i32 %10507 to i64
  %10509 = getelementptr inbounds i16, i16* %10104, i64 %10508
  %10510 = load i16, i16* %10509, align 2, !tbaa !382
  %10511 = insertelement <64 x i16> %10506, i16 %10510, i32 59
  %10512 = extractelement <64 x i32> %10211, i32 60
  %10513 = sext i32 %10512 to i64
  %10514 = getelementptr inbounds i16, i16* %10104, i64 %10513
  %10515 = load i16, i16* %10514, align 2, !tbaa !382
  %10516 = insertelement <64 x i16> %10511, i16 %10515, i32 60
  %10517 = extractelement <64 x i32> %10211, i32 61
  %10518 = sext i32 %10517 to i64
  %10519 = getelementptr inbounds i16, i16* %10104, i64 %10518
  %10520 = load i16, i16* %10519, align 2, !tbaa !382
  %10521 = insertelement <64 x i16> %10516, i16 %10520, i32 61
  %10522 = extractelement <64 x i32> %10211, i32 62
  %10523 = sext i32 %10522 to i64
  %10524 = getelementptr inbounds i16, i16* %10104, i64 %10523
  %10525 = load i16, i16* %10524, align 2, !tbaa !382
  %10526 = insertelement <64 x i16> %10521, i16 %10525, i32 62
  %10527 = extractelement <64 x i32> %10211, i32 63
  %10528 = sext i32 %10527 to i64
  %10529 = getelementptr inbounds i16, i16* %10104, i64 %10528
  %10530 = load i16, i16* %10529, align 2, !tbaa !382
  %10531 = insertelement <64 x i16> %10526, i16 %10530, i32 63
  %10532 = add nsw i32 %blur_x.s0.x.v1.base.s57, -64
  %10533 = insertelement <64 x i32> undef, i32 %10532, i32 0
  %10534 = shufflevector <64 x i32> %10533, <64 x i32> undef, <64 x i32> zeroinitializer
  %10535 = add nsw <64 x i32> %10534, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10536 = shufflevector <64 x i32> %10535, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10537 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10536, <4 x i32> %10103)
  %10538 = shufflevector <64 x i32> %10535, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10539 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10538, <4 x i32> %10103)
  %10540 = shufflevector <64 x i32> %10535, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %10541 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10540, <4 x i32> %10103)
  %10542 = shufflevector <64 x i32> %10535, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %10543 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10542, <4 x i32> %10103)
  %10544 = shufflevector <64 x i32> %10535, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %10545 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10544, <4 x i32> %10103)
  %10546 = shufflevector <64 x i32> %10535, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %10547 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10546, <4 x i32> %10103)
  %10548 = shufflevector <64 x i32> %10535, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %10549 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10548, <4 x i32> %10103)
  %10550 = shufflevector <64 x i32> %10535, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %10551 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10550, <4 x i32> %10103)
  %10552 = shufflevector <64 x i32> %10535, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %10553 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10552, <4 x i32> %10103)
  %10554 = shufflevector <64 x i32> %10535, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %10555 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10554, <4 x i32> %10103)
  %10556 = shufflevector <64 x i32> %10535, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %10557 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10556, <4 x i32> %10103)
  %10558 = shufflevector <64 x i32> %10535, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %10559 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10558, <4 x i32> %10103)
  %10560 = shufflevector <64 x i32> %10535, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %10561 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10560, <4 x i32> %10103)
  %10562 = shufflevector <64 x i32> %10535, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %10563 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10562, <4 x i32> %10103)
  %10564 = shufflevector <64 x i32> %10535, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %10565 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10564, <4 x i32> %10103)
  %10566 = shufflevector <64 x i32> %10535, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %10567 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10566, <4 x i32> %10103)
  %10568 = shufflevector <4 x i32> %10567, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %10569 = shufflevector <8 x i32> %10568, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %10570 = shufflevector <16 x i32> %10569, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %10571 = shufflevector <32 x i32> %10570, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %10572 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10537, <4 x i32> zeroinitializer)
  %10573 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10539, <4 x i32> zeroinitializer)
  %10574 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10541, <4 x i32> zeroinitializer)
  %10575 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10543, <4 x i32> zeroinitializer)
  %10576 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10545, <4 x i32> zeroinitializer)
  %10577 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10547, <4 x i32> zeroinitializer)
  %10578 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10549, <4 x i32> zeroinitializer)
  %10579 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10551, <4 x i32> zeroinitializer)
  %10580 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10553, <4 x i32> zeroinitializer)
  %10581 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10555, <4 x i32> zeroinitializer)
  %10582 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10557, <4 x i32> zeroinitializer)
  %10583 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10559, <4 x i32> zeroinitializer)
  %10584 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10561, <4 x i32> zeroinitializer)
  %10585 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10563, <4 x i32> zeroinitializer)
  %10586 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10565, <4 x i32> zeroinitializer)
  %10587 = shufflevector <64 x i32> %10571, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %10588 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10587, <4 x i32> zeroinitializer)
  %10589 = shufflevector <4 x i32> %10572, <4 x i32> %10573, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10590 = shufflevector <4 x i32> %10574, <4 x i32> %10575, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10591 = shufflevector <4 x i32> %10576, <4 x i32> %10577, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10592 = shufflevector <4 x i32> %10578, <4 x i32> %10579, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10593 = shufflevector <4 x i32> %10580, <4 x i32> %10581, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10594 = shufflevector <4 x i32> %10582, <4 x i32> %10583, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10595 = shufflevector <4 x i32> %10584, <4 x i32> %10585, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10596 = shufflevector <4 x i32> %10586, <4 x i32> %10588, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10597 = shufflevector <8 x i32> %10589, <8 x i32> %10590, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10598 = shufflevector <8 x i32> %10591, <8 x i32> %10592, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10599 = shufflevector <8 x i32> %10593, <8 x i32> %10594, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10600 = shufflevector <8 x i32> %10595, <8 x i32> %10596, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10601 = shufflevector <16 x i32> %10597, <16 x i32> %10598, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10602 = shufflevector <16 x i32> %10599, <16 x i32> %10600, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10603 = shufflevector <32 x i32> %10601, <32 x i32> %10602, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10604 = add nsw <64 x i32> %10603, %t24858
  %10605 = extractelement <64 x i32> %10604, i32 0
  %10606 = sext i32 %10605 to i64
  %10607 = getelementptr inbounds i16, i16* %10104, i64 %10606
  %10608 = load i16, i16* %10607, align 2, !tbaa !382
  %10609 = insertelement <64 x i16> undef, i16 %10608, i32 0
  %10610 = extractelement <64 x i32> %10604, i32 1
  %10611 = sext i32 %10610 to i64
  %10612 = getelementptr inbounds i16, i16* %10104, i64 %10611
  %10613 = load i16, i16* %10612, align 2, !tbaa !382
  %10614 = insertelement <64 x i16> %10609, i16 %10613, i32 1
  %10615 = extractelement <64 x i32> %10604, i32 2
  %10616 = sext i32 %10615 to i64
  %10617 = getelementptr inbounds i16, i16* %10104, i64 %10616
  %10618 = load i16, i16* %10617, align 2, !tbaa !382
  %10619 = insertelement <64 x i16> %10614, i16 %10618, i32 2
  %10620 = extractelement <64 x i32> %10604, i32 3
  %10621 = sext i32 %10620 to i64
  %10622 = getelementptr inbounds i16, i16* %10104, i64 %10621
  %10623 = load i16, i16* %10622, align 2, !tbaa !382
  %10624 = insertelement <64 x i16> %10619, i16 %10623, i32 3
  %10625 = extractelement <64 x i32> %10604, i32 4
  %10626 = sext i32 %10625 to i64
  %10627 = getelementptr inbounds i16, i16* %10104, i64 %10626
  %10628 = load i16, i16* %10627, align 2, !tbaa !382
  %10629 = insertelement <64 x i16> %10624, i16 %10628, i32 4
  %10630 = extractelement <64 x i32> %10604, i32 5
  %10631 = sext i32 %10630 to i64
  %10632 = getelementptr inbounds i16, i16* %10104, i64 %10631
  %10633 = load i16, i16* %10632, align 2, !tbaa !382
  %10634 = insertelement <64 x i16> %10629, i16 %10633, i32 5
  %10635 = extractelement <64 x i32> %10604, i32 6
  %10636 = sext i32 %10635 to i64
  %10637 = getelementptr inbounds i16, i16* %10104, i64 %10636
  %10638 = load i16, i16* %10637, align 2, !tbaa !382
  %10639 = insertelement <64 x i16> %10634, i16 %10638, i32 6
  %10640 = extractelement <64 x i32> %10604, i32 7
  %10641 = sext i32 %10640 to i64
  %10642 = getelementptr inbounds i16, i16* %10104, i64 %10641
  %10643 = load i16, i16* %10642, align 2, !tbaa !382
  %10644 = insertelement <64 x i16> %10639, i16 %10643, i32 7
  %10645 = extractelement <64 x i32> %10604, i32 8
  %10646 = sext i32 %10645 to i64
  %10647 = getelementptr inbounds i16, i16* %10104, i64 %10646
  %10648 = load i16, i16* %10647, align 2, !tbaa !382
  %10649 = insertelement <64 x i16> %10644, i16 %10648, i32 8
  %10650 = extractelement <64 x i32> %10604, i32 9
  %10651 = sext i32 %10650 to i64
  %10652 = getelementptr inbounds i16, i16* %10104, i64 %10651
  %10653 = load i16, i16* %10652, align 2, !tbaa !382
  %10654 = insertelement <64 x i16> %10649, i16 %10653, i32 9
  %10655 = extractelement <64 x i32> %10604, i32 10
  %10656 = sext i32 %10655 to i64
  %10657 = getelementptr inbounds i16, i16* %10104, i64 %10656
  %10658 = load i16, i16* %10657, align 2, !tbaa !382
  %10659 = insertelement <64 x i16> %10654, i16 %10658, i32 10
  %10660 = extractelement <64 x i32> %10604, i32 11
  %10661 = sext i32 %10660 to i64
  %10662 = getelementptr inbounds i16, i16* %10104, i64 %10661
  %10663 = load i16, i16* %10662, align 2, !tbaa !382
  %10664 = insertelement <64 x i16> %10659, i16 %10663, i32 11
  %10665 = extractelement <64 x i32> %10604, i32 12
  %10666 = sext i32 %10665 to i64
  %10667 = getelementptr inbounds i16, i16* %10104, i64 %10666
  %10668 = load i16, i16* %10667, align 2, !tbaa !382
  %10669 = insertelement <64 x i16> %10664, i16 %10668, i32 12
  %10670 = extractelement <64 x i32> %10604, i32 13
  %10671 = sext i32 %10670 to i64
  %10672 = getelementptr inbounds i16, i16* %10104, i64 %10671
  %10673 = load i16, i16* %10672, align 2, !tbaa !382
  %10674 = insertelement <64 x i16> %10669, i16 %10673, i32 13
  %10675 = extractelement <64 x i32> %10604, i32 14
  %10676 = sext i32 %10675 to i64
  %10677 = getelementptr inbounds i16, i16* %10104, i64 %10676
  %10678 = load i16, i16* %10677, align 2, !tbaa !382
  %10679 = insertelement <64 x i16> %10674, i16 %10678, i32 14
  %10680 = extractelement <64 x i32> %10604, i32 15
  %10681 = sext i32 %10680 to i64
  %10682 = getelementptr inbounds i16, i16* %10104, i64 %10681
  %10683 = load i16, i16* %10682, align 2, !tbaa !382
  %10684 = insertelement <64 x i16> %10679, i16 %10683, i32 15
  %10685 = extractelement <64 x i32> %10604, i32 16
  %10686 = sext i32 %10685 to i64
  %10687 = getelementptr inbounds i16, i16* %10104, i64 %10686
  %10688 = load i16, i16* %10687, align 2, !tbaa !382
  %10689 = insertelement <64 x i16> %10684, i16 %10688, i32 16
  %10690 = extractelement <64 x i32> %10604, i32 17
  %10691 = sext i32 %10690 to i64
  %10692 = getelementptr inbounds i16, i16* %10104, i64 %10691
  %10693 = load i16, i16* %10692, align 2, !tbaa !382
  %10694 = insertelement <64 x i16> %10689, i16 %10693, i32 17
  %10695 = extractelement <64 x i32> %10604, i32 18
  %10696 = sext i32 %10695 to i64
  %10697 = getelementptr inbounds i16, i16* %10104, i64 %10696
  %10698 = load i16, i16* %10697, align 2, !tbaa !382
  %10699 = insertelement <64 x i16> %10694, i16 %10698, i32 18
  %10700 = extractelement <64 x i32> %10604, i32 19
  %10701 = sext i32 %10700 to i64
  %10702 = getelementptr inbounds i16, i16* %10104, i64 %10701
  %10703 = load i16, i16* %10702, align 2, !tbaa !382
  %10704 = insertelement <64 x i16> %10699, i16 %10703, i32 19
  %10705 = extractelement <64 x i32> %10604, i32 20
  %10706 = sext i32 %10705 to i64
  %10707 = getelementptr inbounds i16, i16* %10104, i64 %10706
  %10708 = load i16, i16* %10707, align 2, !tbaa !382
  %10709 = insertelement <64 x i16> %10704, i16 %10708, i32 20
  %10710 = extractelement <64 x i32> %10604, i32 21
  %10711 = sext i32 %10710 to i64
  %10712 = getelementptr inbounds i16, i16* %10104, i64 %10711
  %10713 = load i16, i16* %10712, align 2, !tbaa !382
  %10714 = insertelement <64 x i16> %10709, i16 %10713, i32 21
  %10715 = extractelement <64 x i32> %10604, i32 22
  %10716 = sext i32 %10715 to i64
  %10717 = getelementptr inbounds i16, i16* %10104, i64 %10716
  %10718 = load i16, i16* %10717, align 2, !tbaa !382
  %10719 = insertelement <64 x i16> %10714, i16 %10718, i32 22
  %10720 = extractelement <64 x i32> %10604, i32 23
  %10721 = sext i32 %10720 to i64
  %10722 = getelementptr inbounds i16, i16* %10104, i64 %10721
  %10723 = load i16, i16* %10722, align 2, !tbaa !382
  %10724 = insertelement <64 x i16> %10719, i16 %10723, i32 23
  %10725 = extractelement <64 x i32> %10604, i32 24
  %10726 = sext i32 %10725 to i64
  %10727 = getelementptr inbounds i16, i16* %10104, i64 %10726
  %10728 = load i16, i16* %10727, align 2, !tbaa !382
  %10729 = insertelement <64 x i16> %10724, i16 %10728, i32 24
  %10730 = extractelement <64 x i32> %10604, i32 25
  %10731 = sext i32 %10730 to i64
  %10732 = getelementptr inbounds i16, i16* %10104, i64 %10731
  %10733 = load i16, i16* %10732, align 2, !tbaa !382
  %10734 = insertelement <64 x i16> %10729, i16 %10733, i32 25
  %10735 = extractelement <64 x i32> %10604, i32 26
  %10736 = sext i32 %10735 to i64
  %10737 = getelementptr inbounds i16, i16* %10104, i64 %10736
  %10738 = load i16, i16* %10737, align 2, !tbaa !382
  %10739 = insertelement <64 x i16> %10734, i16 %10738, i32 26
  %10740 = extractelement <64 x i32> %10604, i32 27
  %10741 = sext i32 %10740 to i64
  %10742 = getelementptr inbounds i16, i16* %10104, i64 %10741
  %10743 = load i16, i16* %10742, align 2, !tbaa !382
  %10744 = insertelement <64 x i16> %10739, i16 %10743, i32 27
  %10745 = extractelement <64 x i32> %10604, i32 28
  %10746 = sext i32 %10745 to i64
  %10747 = getelementptr inbounds i16, i16* %10104, i64 %10746
  %10748 = load i16, i16* %10747, align 2, !tbaa !382
  %10749 = insertelement <64 x i16> %10744, i16 %10748, i32 28
  %10750 = extractelement <64 x i32> %10604, i32 29
  %10751 = sext i32 %10750 to i64
  %10752 = getelementptr inbounds i16, i16* %10104, i64 %10751
  %10753 = load i16, i16* %10752, align 2, !tbaa !382
  %10754 = insertelement <64 x i16> %10749, i16 %10753, i32 29
  %10755 = extractelement <64 x i32> %10604, i32 30
  %10756 = sext i32 %10755 to i64
  %10757 = getelementptr inbounds i16, i16* %10104, i64 %10756
  %10758 = load i16, i16* %10757, align 2, !tbaa !382
  %10759 = insertelement <64 x i16> %10754, i16 %10758, i32 30
  %10760 = extractelement <64 x i32> %10604, i32 31
  %10761 = sext i32 %10760 to i64
  %10762 = getelementptr inbounds i16, i16* %10104, i64 %10761
  %10763 = load i16, i16* %10762, align 2, !tbaa !382
  %10764 = insertelement <64 x i16> %10759, i16 %10763, i32 31
  %10765 = extractelement <64 x i32> %10604, i32 32
  %10766 = sext i32 %10765 to i64
  %10767 = getelementptr inbounds i16, i16* %10104, i64 %10766
  %10768 = load i16, i16* %10767, align 2, !tbaa !382
  %10769 = insertelement <64 x i16> %10764, i16 %10768, i32 32
  %10770 = extractelement <64 x i32> %10604, i32 33
  %10771 = sext i32 %10770 to i64
  %10772 = getelementptr inbounds i16, i16* %10104, i64 %10771
  %10773 = load i16, i16* %10772, align 2, !tbaa !382
  %10774 = insertelement <64 x i16> %10769, i16 %10773, i32 33
  %10775 = extractelement <64 x i32> %10604, i32 34
  %10776 = sext i32 %10775 to i64
  %10777 = getelementptr inbounds i16, i16* %10104, i64 %10776
  %10778 = load i16, i16* %10777, align 2, !tbaa !382
  %10779 = insertelement <64 x i16> %10774, i16 %10778, i32 34
  %10780 = extractelement <64 x i32> %10604, i32 35
  %10781 = sext i32 %10780 to i64
  %10782 = getelementptr inbounds i16, i16* %10104, i64 %10781
  %10783 = load i16, i16* %10782, align 2, !tbaa !382
  %10784 = insertelement <64 x i16> %10779, i16 %10783, i32 35
  %10785 = extractelement <64 x i32> %10604, i32 36
  %10786 = sext i32 %10785 to i64
  %10787 = getelementptr inbounds i16, i16* %10104, i64 %10786
  %10788 = load i16, i16* %10787, align 2, !tbaa !382
  %10789 = insertelement <64 x i16> %10784, i16 %10788, i32 36
  %10790 = extractelement <64 x i32> %10604, i32 37
  %10791 = sext i32 %10790 to i64
  %10792 = getelementptr inbounds i16, i16* %10104, i64 %10791
  %10793 = load i16, i16* %10792, align 2, !tbaa !382
  %10794 = insertelement <64 x i16> %10789, i16 %10793, i32 37
  %10795 = extractelement <64 x i32> %10604, i32 38
  %10796 = sext i32 %10795 to i64
  %10797 = getelementptr inbounds i16, i16* %10104, i64 %10796
  %10798 = load i16, i16* %10797, align 2, !tbaa !382
  %10799 = insertelement <64 x i16> %10794, i16 %10798, i32 38
  %10800 = extractelement <64 x i32> %10604, i32 39
  %10801 = sext i32 %10800 to i64
  %10802 = getelementptr inbounds i16, i16* %10104, i64 %10801
  %10803 = load i16, i16* %10802, align 2, !tbaa !382
  %10804 = insertelement <64 x i16> %10799, i16 %10803, i32 39
  %10805 = extractelement <64 x i32> %10604, i32 40
  %10806 = sext i32 %10805 to i64
  %10807 = getelementptr inbounds i16, i16* %10104, i64 %10806
  %10808 = load i16, i16* %10807, align 2, !tbaa !382
  %10809 = insertelement <64 x i16> %10804, i16 %10808, i32 40
  %10810 = extractelement <64 x i32> %10604, i32 41
  %10811 = sext i32 %10810 to i64
  %10812 = getelementptr inbounds i16, i16* %10104, i64 %10811
  %10813 = load i16, i16* %10812, align 2, !tbaa !382
  %10814 = insertelement <64 x i16> %10809, i16 %10813, i32 41
  %10815 = extractelement <64 x i32> %10604, i32 42
  %10816 = sext i32 %10815 to i64
  %10817 = getelementptr inbounds i16, i16* %10104, i64 %10816
  %10818 = load i16, i16* %10817, align 2, !tbaa !382
  %10819 = insertelement <64 x i16> %10814, i16 %10818, i32 42
  %10820 = extractelement <64 x i32> %10604, i32 43
  %10821 = sext i32 %10820 to i64
  %10822 = getelementptr inbounds i16, i16* %10104, i64 %10821
  %10823 = load i16, i16* %10822, align 2, !tbaa !382
  %10824 = insertelement <64 x i16> %10819, i16 %10823, i32 43
  %10825 = extractelement <64 x i32> %10604, i32 44
  %10826 = sext i32 %10825 to i64
  %10827 = getelementptr inbounds i16, i16* %10104, i64 %10826
  %10828 = load i16, i16* %10827, align 2, !tbaa !382
  %10829 = insertelement <64 x i16> %10824, i16 %10828, i32 44
  %10830 = extractelement <64 x i32> %10604, i32 45
  %10831 = sext i32 %10830 to i64
  %10832 = getelementptr inbounds i16, i16* %10104, i64 %10831
  %10833 = load i16, i16* %10832, align 2, !tbaa !382
  %10834 = insertelement <64 x i16> %10829, i16 %10833, i32 45
  %10835 = extractelement <64 x i32> %10604, i32 46
  %10836 = sext i32 %10835 to i64
  %10837 = getelementptr inbounds i16, i16* %10104, i64 %10836
  %10838 = load i16, i16* %10837, align 2, !tbaa !382
  %10839 = insertelement <64 x i16> %10834, i16 %10838, i32 46
  %10840 = extractelement <64 x i32> %10604, i32 47
  %10841 = sext i32 %10840 to i64
  %10842 = getelementptr inbounds i16, i16* %10104, i64 %10841
  %10843 = load i16, i16* %10842, align 2, !tbaa !382
  %10844 = insertelement <64 x i16> %10839, i16 %10843, i32 47
  %10845 = extractelement <64 x i32> %10604, i32 48
  %10846 = sext i32 %10845 to i64
  %10847 = getelementptr inbounds i16, i16* %10104, i64 %10846
  %10848 = load i16, i16* %10847, align 2, !tbaa !382
  %10849 = insertelement <64 x i16> %10844, i16 %10848, i32 48
  %10850 = extractelement <64 x i32> %10604, i32 49
  %10851 = sext i32 %10850 to i64
  %10852 = getelementptr inbounds i16, i16* %10104, i64 %10851
  %10853 = load i16, i16* %10852, align 2, !tbaa !382
  %10854 = insertelement <64 x i16> %10849, i16 %10853, i32 49
  %10855 = extractelement <64 x i32> %10604, i32 50
  %10856 = sext i32 %10855 to i64
  %10857 = getelementptr inbounds i16, i16* %10104, i64 %10856
  %10858 = load i16, i16* %10857, align 2, !tbaa !382
  %10859 = insertelement <64 x i16> %10854, i16 %10858, i32 50
  %10860 = extractelement <64 x i32> %10604, i32 51
  %10861 = sext i32 %10860 to i64
  %10862 = getelementptr inbounds i16, i16* %10104, i64 %10861
  %10863 = load i16, i16* %10862, align 2, !tbaa !382
  %10864 = insertelement <64 x i16> %10859, i16 %10863, i32 51
  %10865 = extractelement <64 x i32> %10604, i32 52
  %10866 = sext i32 %10865 to i64
  %10867 = getelementptr inbounds i16, i16* %10104, i64 %10866
  %10868 = load i16, i16* %10867, align 2, !tbaa !382
  %10869 = insertelement <64 x i16> %10864, i16 %10868, i32 52
  %10870 = extractelement <64 x i32> %10604, i32 53
  %10871 = sext i32 %10870 to i64
  %10872 = getelementptr inbounds i16, i16* %10104, i64 %10871
  %10873 = load i16, i16* %10872, align 2, !tbaa !382
  %10874 = insertelement <64 x i16> %10869, i16 %10873, i32 53
  %10875 = extractelement <64 x i32> %10604, i32 54
  %10876 = sext i32 %10875 to i64
  %10877 = getelementptr inbounds i16, i16* %10104, i64 %10876
  %10878 = load i16, i16* %10877, align 2, !tbaa !382
  %10879 = insertelement <64 x i16> %10874, i16 %10878, i32 54
  %10880 = extractelement <64 x i32> %10604, i32 55
  %10881 = sext i32 %10880 to i64
  %10882 = getelementptr inbounds i16, i16* %10104, i64 %10881
  %10883 = load i16, i16* %10882, align 2, !tbaa !382
  %10884 = insertelement <64 x i16> %10879, i16 %10883, i32 55
  %10885 = extractelement <64 x i32> %10604, i32 56
  %10886 = sext i32 %10885 to i64
  %10887 = getelementptr inbounds i16, i16* %10104, i64 %10886
  %10888 = load i16, i16* %10887, align 2, !tbaa !382
  %10889 = insertelement <64 x i16> %10884, i16 %10888, i32 56
  %10890 = extractelement <64 x i32> %10604, i32 57
  %10891 = sext i32 %10890 to i64
  %10892 = getelementptr inbounds i16, i16* %10104, i64 %10891
  %10893 = load i16, i16* %10892, align 2, !tbaa !382
  %10894 = insertelement <64 x i16> %10889, i16 %10893, i32 57
  %10895 = extractelement <64 x i32> %10604, i32 58
  %10896 = sext i32 %10895 to i64
  %10897 = getelementptr inbounds i16, i16* %10104, i64 %10896
  %10898 = load i16, i16* %10897, align 2, !tbaa !382
  %10899 = insertelement <64 x i16> %10894, i16 %10898, i32 58
  %10900 = extractelement <64 x i32> %10604, i32 59
  %10901 = sext i32 %10900 to i64
  %10902 = getelementptr inbounds i16, i16* %10104, i64 %10901
  %10903 = load i16, i16* %10902, align 2, !tbaa !382
  %10904 = insertelement <64 x i16> %10899, i16 %10903, i32 59
  %10905 = extractelement <64 x i32> %10604, i32 60
  %10906 = sext i32 %10905 to i64
  %10907 = getelementptr inbounds i16, i16* %10104, i64 %10906
  %10908 = load i16, i16* %10907, align 2, !tbaa !382
  %10909 = insertelement <64 x i16> %10904, i16 %10908, i32 60
  %10910 = extractelement <64 x i32> %10604, i32 61
  %10911 = sext i32 %10910 to i64
  %10912 = getelementptr inbounds i16, i16* %10104, i64 %10911
  %10913 = load i16, i16* %10912, align 2, !tbaa !382
  %10914 = insertelement <64 x i16> %10909, i16 %10913, i32 61
  %10915 = extractelement <64 x i32> %10604, i32 62
  %10916 = sext i32 %10915 to i64
  %10917 = getelementptr inbounds i16, i16* %10104, i64 %10916
  %10918 = load i16, i16* %10917, align 2, !tbaa !382
  %10919 = insertelement <64 x i16> %10914, i16 %10918, i32 62
  %10920 = extractelement <64 x i32> %10604, i32 63
  %10921 = sext i32 %10920 to i64
  %10922 = getelementptr inbounds i16, i16* %10104, i64 %10921
  %10923 = load i16, i16* %10922, align 2, !tbaa !382
  %10924 = insertelement <64 x i16> %10919, i16 %10923, i32 63
  %10925 = add nsw i32 %blur_x.s0.x.v1.base.s57, -62
  %10926 = insertelement <64 x i32> undef, i32 %10925, i32 0
  %10927 = shufflevector <64 x i32> %10926, <64 x i32> undef, <64 x i32> zeroinitializer
  %10928 = add nsw <64 x i32> %10927, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10929 = shufflevector <64 x i32> %10928, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10930 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10929, <4 x i32> %10103)
  %10931 = shufflevector <64 x i32> %10928, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10932 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10931, <4 x i32> %10103)
  %10933 = shufflevector <64 x i32> %10928, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %10934 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10933, <4 x i32> %10103)
  %10935 = shufflevector <64 x i32> %10928, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %10936 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10935, <4 x i32> %10103)
  %10937 = shufflevector <64 x i32> %10928, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %10938 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10937, <4 x i32> %10103)
  %10939 = shufflevector <64 x i32> %10928, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %10940 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10939, <4 x i32> %10103)
  %10941 = shufflevector <64 x i32> %10928, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %10942 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10941, <4 x i32> %10103)
  %10943 = shufflevector <64 x i32> %10928, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %10944 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10943, <4 x i32> %10103)
  %10945 = shufflevector <64 x i32> %10928, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %10946 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10945, <4 x i32> %10103)
  %10947 = shufflevector <64 x i32> %10928, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %10948 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10947, <4 x i32> %10103)
  %10949 = shufflevector <64 x i32> %10928, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %10950 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10949, <4 x i32> %10103)
  %10951 = shufflevector <64 x i32> %10928, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %10952 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10951, <4 x i32> %10103)
  %10953 = shufflevector <64 x i32> %10928, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %10954 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10953, <4 x i32> %10103)
  %10955 = shufflevector <64 x i32> %10928, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %10956 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10955, <4 x i32> %10103)
  %10957 = shufflevector <64 x i32> %10928, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %10958 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10957, <4 x i32> %10103)
  %10959 = shufflevector <64 x i32> %10928, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %10960 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10959, <4 x i32> %10103)
  %10961 = shufflevector <4 x i32> %10960, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %10962 = shufflevector <8 x i32> %10961, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %10963 = shufflevector <16 x i32> %10962, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %10964 = shufflevector <32 x i32> %10963, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %10965 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10930, <4 x i32> zeroinitializer)
  %10966 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10932, <4 x i32> zeroinitializer)
  %10967 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10934, <4 x i32> zeroinitializer)
  %10968 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10936, <4 x i32> zeroinitializer)
  %10969 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10938, <4 x i32> zeroinitializer)
  %10970 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10940, <4 x i32> zeroinitializer)
  %10971 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10942, <4 x i32> zeroinitializer)
  %10972 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10944, <4 x i32> zeroinitializer)
  %10973 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10946, <4 x i32> zeroinitializer)
  %10974 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10948, <4 x i32> zeroinitializer)
  %10975 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10950, <4 x i32> zeroinitializer)
  %10976 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10952, <4 x i32> zeroinitializer)
  %10977 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10954, <4 x i32> zeroinitializer)
  %10978 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10956, <4 x i32> zeroinitializer)
  %10979 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10958, <4 x i32> zeroinitializer)
  %10980 = shufflevector <64 x i32> %10964, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %10981 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10980, <4 x i32> zeroinitializer)
  %10982 = shufflevector <4 x i32> %10965, <4 x i32> %10966, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10983 = shufflevector <4 x i32> %10967, <4 x i32> %10968, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10984 = shufflevector <4 x i32> %10969, <4 x i32> %10970, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10985 = shufflevector <4 x i32> %10971, <4 x i32> %10972, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10986 = shufflevector <4 x i32> %10973, <4 x i32> %10974, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10987 = shufflevector <4 x i32> %10975, <4 x i32> %10976, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10988 = shufflevector <4 x i32> %10977, <4 x i32> %10978, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10989 = shufflevector <4 x i32> %10979, <4 x i32> %10981, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10990 = shufflevector <8 x i32> %10982, <8 x i32> %10983, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10991 = shufflevector <8 x i32> %10984, <8 x i32> %10985, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10992 = shufflevector <8 x i32> %10986, <8 x i32> %10987, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10993 = shufflevector <8 x i32> %10988, <8 x i32> %10989, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10994 = shufflevector <16 x i32> %10990, <16 x i32> %10991, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10995 = shufflevector <16 x i32> %10992, <16 x i32> %10993, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10996 = shufflevector <32 x i32> %10994, <32 x i32> %10995, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10997 = add nsw <64 x i32> %10996, %t24858
  %10998 = extractelement <64 x i32> %10997, i32 0
  %10999 = sext i32 %10998 to i64
  %11000 = getelementptr inbounds i16, i16* %10104, i64 %10999
  %11001 = load i16, i16* %11000, align 2, !tbaa !382
  %11002 = insertelement <64 x i16> undef, i16 %11001, i32 0
  %11003 = extractelement <64 x i32> %10997, i32 1
  %11004 = sext i32 %11003 to i64
  %11005 = getelementptr inbounds i16, i16* %10104, i64 %11004
  %11006 = load i16, i16* %11005, align 2, !tbaa !382
  %11007 = insertelement <64 x i16> %11002, i16 %11006, i32 1
  %11008 = extractelement <64 x i32> %10997, i32 2
  %11009 = sext i32 %11008 to i64
  %11010 = getelementptr inbounds i16, i16* %10104, i64 %11009
  %11011 = load i16, i16* %11010, align 2, !tbaa !382
  %11012 = insertelement <64 x i16> %11007, i16 %11011, i32 2
  %11013 = extractelement <64 x i32> %10997, i32 3
  %11014 = sext i32 %11013 to i64
  %11015 = getelementptr inbounds i16, i16* %10104, i64 %11014
  %11016 = load i16, i16* %11015, align 2, !tbaa !382
  %11017 = insertelement <64 x i16> %11012, i16 %11016, i32 3
  %11018 = extractelement <64 x i32> %10997, i32 4
  %11019 = sext i32 %11018 to i64
  %11020 = getelementptr inbounds i16, i16* %10104, i64 %11019
  %11021 = load i16, i16* %11020, align 2, !tbaa !382
  %11022 = insertelement <64 x i16> %11017, i16 %11021, i32 4
  %11023 = extractelement <64 x i32> %10997, i32 5
  %11024 = sext i32 %11023 to i64
  %11025 = getelementptr inbounds i16, i16* %10104, i64 %11024
  %11026 = load i16, i16* %11025, align 2, !tbaa !382
  %11027 = insertelement <64 x i16> %11022, i16 %11026, i32 5
  %11028 = extractelement <64 x i32> %10997, i32 6
  %11029 = sext i32 %11028 to i64
  %11030 = getelementptr inbounds i16, i16* %10104, i64 %11029
  %11031 = load i16, i16* %11030, align 2, !tbaa !382
  %11032 = insertelement <64 x i16> %11027, i16 %11031, i32 6
  %11033 = extractelement <64 x i32> %10997, i32 7
  %11034 = sext i32 %11033 to i64
  %11035 = getelementptr inbounds i16, i16* %10104, i64 %11034
  %11036 = load i16, i16* %11035, align 2, !tbaa !382
  %11037 = insertelement <64 x i16> %11032, i16 %11036, i32 7
  %11038 = extractelement <64 x i32> %10997, i32 8
  %11039 = sext i32 %11038 to i64
  %11040 = getelementptr inbounds i16, i16* %10104, i64 %11039
  %11041 = load i16, i16* %11040, align 2, !tbaa !382
  %11042 = insertelement <64 x i16> %11037, i16 %11041, i32 8
  %11043 = extractelement <64 x i32> %10997, i32 9
  %11044 = sext i32 %11043 to i64
  %11045 = getelementptr inbounds i16, i16* %10104, i64 %11044
  %11046 = load i16, i16* %11045, align 2, !tbaa !382
  %11047 = insertelement <64 x i16> %11042, i16 %11046, i32 9
  %11048 = extractelement <64 x i32> %10997, i32 10
  %11049 = sext i32 %11048 to i64
  %11050 = getelementptr inbounds i16, i16* %10104, i64 %11049
  %11051 = load i16, i16* %11050, align 2, !tbaa !382
  %11052 = insertelement <64 x i16> %11047, i16 %11051, i32 10
  %11053 = extractelement <64 x i32> %10997, i32 11
  %11054 = sext i32 %11053 to i64
  %11055 = getelementptr inbounds i16, i16* %10104, i64 %11054
  %11056 = load i16, i16* %11055, align 2, !tbaa !382
  %11057 = insertelement <64 x i16> %11052, i16 %11056, i32 11
  %11058 = extractelement <64 x i32> %10997, i32 12
  %11059 = sext i32 %11058 to i64
  %11060 = getelementptr inbounds i16, i16* %10104, i64 %11059
  %11061 = load i16, i16* %11060, align 2, !tbaa !382
  %11062 = insertelement <64 x i16> %11057, i16 %11061, i32 12
  %11063 = extractelement <64 x i32> %10997, i32 13
  %11064 = sext i32 %11063 to i64
  %11065 = getelementptr inbounds i16, i16* %10104, i64 %11064
  %11066 = load i16, i16* %11065, align 2, !tbaa !382
  %11067 = insertelement <64 x i16> %11062, i16 %11066, i32 13
  %11068 = extractelement <64 x i32> %10997, i32 14
  %11069 = sext i32 %11068 to i64
  %11070 = getelementptr inbounds i16, i16* %10104, i64 %11069
  %11071 = load i16, i16* %11070, align 2, !tbaa !382
  %11072 = insertelement <64 x i16> %11067, i16 %11071, i32 14
  %11073 = extractelement <64 x i32> %10997, i32 15
  %11074 = sext i32 %11073 to i64
  %11075 = getelementptr inbounds i16, i16* %10104, i64 %11074
  %11076 = load i16, i16* %11075, align 2, !tbaa !382
  %11077 = insertelement <64 x i16> %11072, i16 %11076, i32 15
  %11078 = extractelement <64 x i32> %10997, i32 16
  %11079 = sext i32 %11078 to i64
  %11080 = getelementptr inbounds i16, i16* %10104, i64 %11079
  %11081 = load i16, i16* %11080, align 2, !tbaa !382
  %11082 = insertelement <64 x i16> %11077, i16 %11081, i32 16
  %11083 = extractelement <64 x i32> %10997, i32 17
  %11084 = sext i32 %11083 to i64
  %11085 = getelementptr inbounds i16, i16* %10104, i64 %11084
  %11086 = load i16, i16* %11085, align 2, !tbaa !382
  %11087 = insertelement <64 x i16> %11082, i16 %11086, i32 17
  %11088 = extractelement <64 x i32> %10997, i32 18
  %11089 = sext i32 %11088 to i64
  %11090 = getelementptr inbounds i16, i16* %10104, i64 %11089
  %11091 = load i16, i16* %11090, align 2, !tbaa !382
  %11092 = insertelement <64 x i16> %11087, i16 %11091, i32 18
  %11093 = extractelement <64 x i32> %10997, i32 19
  %11094 = sext i32 %11093 to i64
  %11095 = getelementptr inbounds i16, i16* %10104, i64 %11094
  %11096 = load i16, i16* %11095, align 2, !tbaa !382
  %11097 = insertelement <64 x i16> %11092, i16 %11096, i32 19
  %11098 = extractelement <64 x i32> %10997, i32 20
  %11099 = sext i32 %11098 to i64
  %11100 = getelementptr inbounds i16, i16* %10104, i64 %11099
  %11101 = load i16, i16* %11100, align 2, !tbaa !382
  %11102 = insertelement <64 x i16> %11097, i16 %11101, i32 20
  %11103 = extractelement <64 x i32> %10997, i32 21
  %11104 = sext i32 %11103 to i64
  %11105 = getelementptr inbounds i16, i16* %10104, i64 %11104
  %11106 = load i16, i16* %11105, align 2, !tbaa !382
  %11107 = insertelement <64 x i16> %11102, i16 %11106, i32 21
  %11108 = extractelement <64 x i32> %10997, i32 22
  %11109 = sext i32 %11108 to i64
  %11110 = getelementptr inbounds i16, i16* %10104, i64 %11109
  %11111 = load i16, i16* %11110, align 2, !tbaa !382
  %11112 = insertelement <64 x i16> %11107, i16 %11111, i32 22
  %11113 = extractelement <64 x i32> %10997, i32 23
  %11114 = sext i32 %11113 to i64
  %11115 = getelementptr inbounds i16, i16* %10104, i64 %11114
  %11116 = load i16, i16* %11115, align 2, !tbaa !382
  %11117 = insertelement <64 x i16> %11112, i16 %11116, i32 23
  %11118 = extractelement <64 x i32> %10997, i32 24
  %11119 = sext i32 %11118 to i64
  %11120 = getelementptr inbounds i16, i16* %10104, i64 %11119
  %11121 = load i16, i16* %11120, align 2, !tbaa !382
  %11122 = insertelement <64 x i16> %11117, i16 %11121, i32 24
  %11123 = extractelement <64 x i32> %10997, i32 25
  %11124 = sext i32 %11123 to i64
  %11125 = getelementptr inbounds i16, i16* %10104, i64 %11124
  %11126 = load i16, i16* %11125, align 2, !tbaa !382
  %11127 = insertelement <64 x i16> %11122, i16 %11126, i32 25
  %11128 = extractelement <64 x i32> %10997, i32 26
  %11129 = sext i32 %11128 to i64
  %11130 = getelementptr inbounds i16, i16* %10104, i64 %11129
  %11131 = load i16, i16* %11130, align 2, !tbaa !382
  %11132 = insertelement <64 x i16> %11127, i16 %11131, i32 26
  %11133 = extractelement <64 x i32> %10997, i32 27
  %11134 = sext i32 %11133 to i64
  %11135 = getelementptr inbounds i16, i16* %10104, i64 %11134
  %11136 = load i16, i16* %11135, align 2, !tbaa !382
  %11137 = insertelement <64 x i16> %11132, i16 %11136, i32 27
  %11138 = extractelement <64 x i32> %10997, i32 28
  %11139 = sext i32 %11138 to i64
  %11140 = getelementptr inbounds i16, i16* %10104, i64 %11139
  %11141 = load i16, i16* %11140, align 2, !tbaa !382
  %11142 = insertelement <64 x i16> %11137, i16 %11141, i32 28
  %11143 = extractelement <64 x i32> %10997, i32 29
  %11144 = sext i32 %11143 to i64
  %11145 = getelementptr inbounds i16, i16* %10104, i64 %11144
  %11146 = load i16, i16* %11145, align 2, !tbaa !382
  %11147 = insertelement <64 x i16> %11142, i16 %11146, i32 29
  %11148 = extractelement <64 x i32> %10997, i32 30
  %11149 = sext i32 %11148 to i64
  %11150 = getelementptr inbounds i16, i16* %10104, i64 %11149
  %11151 = load i16, i16* %11150, align 2, !tbaa !382
  %11152 = insertelement <64 x i16> %11147, i16 %11151, i32 30
  %11153 = extractelement <64 x i32> %10997, i32 31
  %11154 = sext i32 %11153 to i64
  %11155 = getelementptr inbounds i16, i16* %10104, i64 %11154
  %11156 = load i16, i16* %11155, align 2, !tbaa !382
  %11157 = insertelement <64 x i16> %11152, i16 %11156, i32 31
  %11158 = extractelement <64 x i32> %10997, i32 32
  %11159 = sext i32 %11158 to i64
  %11160 = getelementptr inbounds i16, i16* %10104, i64 %11159
  %11161 = load i16, i16* %11160, align 2, !tbaa !382
  %11162 = insertelement <64 x i16> %11157, i16 %11161, i32 32
  %11163 = extractelement <64 x i32> %10997, i32 33
  %11164 = sext i32 %11163 to i64
  %11165 = getelementptr inbounds i16, i16* %10104, i64 %11164
  %11166 = load i16, i16* %11165, align 2, !tbaa !382
  %11167 = insertelement <64 x i16> %11162, i16 %11166, i32 33
  %11168 = extractelement <64 x i32> %10997, i32 34
  %11169 = sext i32 %11168 to i64
  %11170 = getelementptr inbounds i16, i16* %10104, i64 %11169
  %11171 = load i16, i16* %11170, align 2, !tbaa !382
  %11172 = insertelement <64 x i16> %11167, i16 %11171, i32 34
  %11173 = extractelement <64 x i32> %10997, i32 35
  %11174 = sext i32 %11173 to i64
  %11175 = getelementptr inbounds i16, i16* %10104, i64 %11174
  %11176 = load i16, i16* %11175, align 2, !tbaa !382
  %11177 = insertelement <64 x i16> %11172, i16 %11176, i32 35
  %11178 = extractelement <64 x i32> %10997, i32 36
  %11179 = sext i32 %11178 to i64
  %11180 = getelementptr inbounds i16, i16* %10104, i64 %11179
  %11181 = load i16, i16* %11180, align 2, !tbaa !382
  %11182 = insertelement <64 x i16> %11177, i16 %11181, i32 36
  %11183 = extractelement <64 x i32> %10997, i32 37
  %11184 = sext i32 %11183 to i64
  %11185 = getelementptr inbounds i16, i16* %10104, i64 %11184
  %11186 = load i16, i16* %11185, align 2, !tbaa !382
  %11187 = insertelement <64 x i16> %11182, i16 %11186, i32 37
  %11188 = extractelement <64 x i32> %10997, i32 38
  %11189 = sext i32 %11188 to i64
  %11190 = getelementptr inbounds i16, i16* %10104, i64 %11189
  %11191 = load i16, i16* %11190, align 2, !tbaa !382
  %11192 = insertelement <64 x i16> %11187, i16 %11191, i32 38
  %11193 = extractelement <64 x i32> %10997, i32 39
  %11194 = sext i32 %11193 to i64
  %11195 = getelementptr inbounds i16, i16* %10104, i64 %11194
  %11196 = load i16, i16* %11195, align 2, !tbaa !382
  %11197 = insertelement <64 x i16> %11192, i16 %11196, i32 39
  %11198 = extractelement <64 x i32> %10997, i32 40
  %11199 = sext i32 %11198 to i64
  %11200 = getelementptr inbounds i16, i16* %10104, i64 %11199
  %11201 = load i16, i16* %11200, align 2, !tbaa !382
  %11202 = insertelement <64 x i16> %11197, i16 %11201, i32 40
  %11203 = extractelement <64 x i32> %10997, i32 41
  %11204 = sext i32 %11203 to i64
  %11205 = getelementptr inbounds i16, i16* %10104, i64 %11204
  %11206 = load i16, i16* %11205, align 2, !tbaa !382
  %11207 = insertelement <64 x i16> %11202, i16 %11206, i32 41
  %11208 = extractelement <64 x i32> %10997, i32 42
  %11209 = sext i32 %11208 to i64
  %11210 = getelementptr inbounds i16, i16* %10104, i64 %11209
  %11211 = load i16, i16* %11210, align 2, !tbaa !382
  %11212 = insertelement <64 x i16> %11207, i16 %11211, i32 42
  %11213 = extractelement <64 x i32> %10997, i32 43
  %11214 = sext i32 %11213 to i64
  %11215 = getelementptr inbounds i16, i16* %10104, i64 %11214
  %11216 = load i16, i16* %11215, align 2, !tbaa !382
  %11217 = insertelement <64 x i16> %11212, i16 %11216, i32 43
  %11218 = extractelement <64 x i32> %10997, i32 44
  %11219 = sext i32 %11218 to i64
  %11220 = getelementptr inbounds i16, i16* %10104, i64 %11219
  %11221 = load i16, i16* %11220, align 2, !tbaa !382
  %11222 = insertelement <64 x i16> %11217, i16 %11221, i32 44
  %11223 = extractelement <64 x i32> %10997, i32 45
  %11224 = sext i32 %11223 to i64
  %11225 = getelementptr inbounds i16, i16* %10104, i64 %11224
  %11226 = load i16, i16* %11225, align 2, !tbaa !382
  %11227 = insertelement <64 x i16> %11222, i16 %11226, i32 45
  %11228 = extractelement <64 x i32> %10997, i32 46
  %11229 = sext i32 %11228 to i64
  %11230 = getelementptr inbounds i16, i16* %10104, i64 %11229
  %11231 = load i16, i16* %11230, align 2, !tbaa !382
  %11232 = insertelement <64 x i16> %11227, i16 %11231, i32 46
  %11233 = extractelement <64 x i32> %10997, i32 47
  %11234 = sext i32 %11233 to i64
  %11235 = getelementptr inbounds i16, i16* %10104, i64 %11234
  %11236 = load i16, i16* %11235, align 2, !tbaa !382
  %11237 = insertelement <64 x i16> %11232, i16 %11236, i32 47
  %11238 = extractelement <64 x i32> %10997, i32 48
  %11239 = sext i32 %11238 to i64
  %11240 = getelementptr inbounds i16, i16* %10104, i64 %11239
  %11241 = load i16, i16* %11240, align 2, !tbaa !382
  %11242 = insertelement <64 x i16> %11237, i16 %11241, i32 48
  %11243 = extractelement <64 x i32> %10997, i32 49
  %11244 = sext i32 %11243 to i64
  %11245 = getelementptr inbounds i16, i16* %10104, i64 %11244
  %11246 = load i16, i16* %11245, align 2, !tbaa !382
  %11247 = insertelement <64 x i16> %11242, i16 %11246, i32 49
  %11248 = extractelement <64 x i32> %10997, i32 50
  %11249 = sext i32 %11248 to i64
  %11250 = getelementptr inbounds i16, i16* %10104, i64 %11249
  %11251 = load i16, i16* %11250, align 2, !tbaa !382
  %11252 = insertelement <64 x i16> %11247, i16 %11251, i32 50
  %11253 = extractelement <64 x i32> %10997, i32 51
  %11254 = sext i32 %11253 to i64
  %11255 = getelementptr inbounds i16, i16* %10104, i64 %11254
  %11256 = load i16, i16* %11255, align 2, !tbaa !382
  %11257 = insertelement <64 x i16> %11252, i16 %11256, i32 51
  %11258 = extractelement <64 x i32> %10997, i32 52
  %11259 = sext i32 %11258 to i64
  %11260 = getelementptr inbounds i16, i16* %10104, i64 %11259
  %11261 = load i16, i16* %11260, align 2, !tbaa !382
  %11262 = insertelement <64 x i16> %11257, i16 %11261, i32 52
  %11263 = extractelement <64 x i32> %10997, i32 53
  %11264 = sext i32 %11263 to i64
  %11265 = getelementptr inbounds i16, i16* %10104, i64 %11264
  %11266 = load i16, i16* %11265, align 2, !tbaa !382
  %11267 = insertelement <64 x i16> %11262, i16 %11266, i32 53
  %11268 = extractelement <64 x i32> %10997, i32 54
  %11269 = sext i32 %11268 to i64
  %11270 = getelementptr inbounds i16, i16* %10104, i64 %11269
  %11271 = load i16, i16* %11270, align 2, !tbaa !382
  %11272 = insertelement <64 x i16> %11267, i16 %11271, i32 54
  %11273 = extractelement <64 x i32> %10997, i32 55
  %11274 = sext i32 %11273 to i64
  %11275 = getelementptr inbounds i16, i16* %10104, i64 %11274
  %11276 = load i16, i16* %11275, align 2, !tbaa !382
  %11277 = insertelement <64 x i16> %11272, i16 %11276, i32 55
  %11278 = extractelement <64 x i32> %10997, i32 56
  %11279 = sext i32 %11278 to i64
  %11280 = getelementptr inbounds i16, i16* %10104, i64 %11279
  %11281 = load i16, i16* %11280, align 2, !tbaa !382
  %11282 = insertelement <64 x i16> %11277, i16 %11281, i32 56
  %11283 = extractelement <64 x i32> %10997, i32 57
  %11284 = sext i32 %11283 to i64
  %11285 = getelementptr inbounds i16, i16* %10104, i64 %11284
  %11286 = load i16, i16* %11285, align 2, !tbaa !382
  %11287 = insertelement <64 x i16> %11282, i16 %11286, i32 57
  %11288 = extractelement <64 x i32> %10997, i32 58
  %11289 = sext i32 %11288 to i64
  %11290 = getelementptr inbounds i16, i16* %10104, i64 %11289
  %11291 = load i16, i16* %11290, align 2, !tbaa !382
  %11292 = insertelement <64 x i16> %11287, i16 %11291, i32 58
  %11293 = extractelement <64 x i32> %10997, i32 59
  %11294 = sext i32 %11293 to i64
  %11295 = getelementptr inbounds i16, i16* %10104, i64 %11294
  %11296 = load i16, i16* %11295, align 2, !tbaa !382
  %11297 = insertelement <64 x i16> %11292, i16 %11296, i32 59
  %11298 = extractelement <64 x i32> %10997, i32 60
  %11299 = sext i32 %11298 to i64
  %11300 = getelementptr inbounds i16, i16* %10104, i64 %11299
  %11301 = load i16, i16* %11300, align 2, !tbaa !382
  %11302 = insertelement <64 x i16> %11297, i16 %11301, i32 60
  %11303 = extractelement <64 x i32> %10997, i32 61
  %11304 = sext i32 %11303 to i64
  %11305 = getelementptr inbounds i16, i16* %10104, i64 %11304
  %11306 = load i16, i16* %11305, align 2, !tbaa !382
  %11307 = insertelement <64 x i16> %11302, i16 %11306, i32 61
  %11308 = extractelement <64 x i32> %10997, i32 62
  %11309 = sext i32 %11308 to i64
  %11310 = getelementptr inbounds i16, i16* %10104, i64 %11309
  %11311 = load i16, i16* %11310, align 2, !tbaa !382
  %11312 = insertelement <64 x i16> %11307, i16 %11311, i32 62
  %11313 = extractelement <64 x i32> %10997, i32 63
  %11314 = sext i32 %11313 to i64
  %11315 = getelementptr inbounds i16, i16* %10104, i64 %11314
  %11316 = load i16, i16* %11315, align 2, !tbaa !382
  %11317 = insertelement <64 x i16> %11312, i16 %11316, i32 63
  %11318 = add nsw i32 %blur_x.s0.x.v1.base.s57, -61
  %11319 = insertelement <64 x i32> undef, i32 %11318, i32 0
  %11320 = shufflevector <64 x i32> %11319, <64 x i32> undef, <64 x i32> zeroinitializer
  %11321 = add nsw <64 x i32> %11320, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %11322 = shufflevector <64 x i32> %11321, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11323 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11322, <4 x i32> %10103)
  %11324 = shufflevector <64 x i32> %11321, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11325 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11324, <4 x i32> %10103)
  %11326 = shufflevector <64 x i32> %11321, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %11327 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11326, <4 x i32> %10103)
  %11328 = shufflevector <64 x i32> %11321, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %11329 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11328, <4 x i32> %10103)
  %11330 = shufflevector <64 x i32> %11321, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %11331 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11330, <4 x i32> %10103)
  %11332 = shufflevector <64 x i32> %11321, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %11333 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11332, <4 x i32> %10103)
  %11334 = shufflevector <64 x i32> %11321, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %11335 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11334, <4 x i32> %10103)
  %11336 = shufflevector <64 x i32> %11321, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %11337 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11336, <4 x i32> %10103)
  %11338 = shufflevector <64 x i32> %11321, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %11339 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11338, <4 x i32> %10103)
  %11340 = shufflevector <64 x i32> %11321, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %11341 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11340, <4 x i32> %10103)
  %11342 = shufflevector <64 x i32> %11321, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %11343 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11342, <4 x i32> %10103)
  %11344 = shufflevector <64 x i32> %11321, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %11345 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11344, <4 x i32> %10103)
  %11346 = shufflevector <64 x i32> %11321, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %11347 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11346, <4 x i32> %10103)
  %11348 = shufflevector <64 x i32> %11321, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %11349 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11348, <4 x i32> %10103)
  %11350 = shufflevector <64 x i32> %11321, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %11351 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11350, <4 x i32> %10103)
  %11352 = shufflevector <64 x i32> %11321, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %11353 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11352, <4 x i32> %10103)
  %11354 = shufflevector <4 x i32> %11353, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %11355 = shufflevector <8 x i32> %11354, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %11356 = shufflevector <16 x i32> %11355, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %11357 = shufflevector <32 x i32> %11356, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %11358 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11323, <4 x i32> zeroinitializer)
  %11359 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11325, <4 x i32> zeroinitializer)
  %11360 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11327, <4 x i32> zeroinitializer)
  %11361 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11329, <4 x i32> zeroinitializer)
  %11362 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11331, <4 x i32> zeroinitializer)
  %11363 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11333, <4 x i32> zeroinitializer)
  %11364 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11335, <4 x i32> zeroinitializer)
  %11365 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11337, <4 x i32> zeroinitializer)
  %11366 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11339, <4 x i32> zeroinitializer)
  %11367 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11341, <4 x i32> zeroinitializer)
  %11368 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11343, <4 x i32> zeroinitializer)
  %11369 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11345, <4 x i32> zeroinitializer)
  %11370 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11347, <4 x i32> zeroinitializer)
  %11371 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11349, <4 x i32> zeroinitializer)
  %11372 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11351, <4 x i32> zeroinitializer)
  %11373 = shufflevector <64 x i32> %11357, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %11374 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11373, <4 x i32> zeroinitializer)
  %11375 = shufflevector <4 x i32> %11358, <4 x i32> %11359, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11376 = shufflevector <4 x i32> %11360, <4 x i32> %11361, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11377 = shufflevector <4 x i32> %11362, <4 x i32> %11363, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11378 = shufflevector <4 x i32> %11364, <4 x i32> %11365, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11379 = shufflevector <4 x i32> %11366, <4 x i32> %11367, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11380 = shufflevector <4 x i32> %11368, <4 x i32> %11369, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11381 = shufflevector <4 x i32> %11370, <4 x i32> %11371, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11382 = shufflevector <4 x i32> %11372, <4 x i32> %11374, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11383 = shufflevector <8 x i32> %11375, <8 x i32> %11376, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11384 = shufflevector <8 x i32> %11377, <8 x i32> %11378, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11385 = shufflevector <8 x i32> %11379, <8 x i32> %11380, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11386 = shufflevector <8 x i32> %11381, <8 x i32> %11382, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11387 = shufflevector <16 x i32> %11383, <16 x i32> %11384, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11388 = shufflevector <16 x i32> %11385, <16 x i32> %11386, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11389 = shufflevector <32 x i32> %11387, <32 x i32> %11388, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %11390 = add nsw <64 x i32> %11389, %t24858
  %11391 = extractelement <64 x i32> %11390, i32 0
  %11392 = sext i32 %11391 to i64
  %11393 = getelementptr inbounds i16, i16* %10104, i64 %11392
  %11394 = load i16, i16* %11393, align 2, !tbaa !382
  %11395 = insertelement <64 x i16> undef, i16 %11394, i32 0
  %11396 = extractelement <64 x i32> %11390, i32 1
  %11397 = sext i32 %11396 to i64
  %11398 = getelementptr inbounds i16, i16* %10104, i64 %11397
  %11399 = load i16, i16* %11398, align 2, !tbaa !382
  %11400 = insertelement <64 x i16> %11395, i16 %11399, i32 1
  %11401 = extractelement <64 x i32> %11390, i32 2
  %11402 = sext i32 %11401 to i64
  %11403 = getelementptr inbounds i16, i16* %10104, i64 %11402
  %11404 = load i16, i16* %11403, align 2, !tbaa !382
  %11405 = insertelement <64 x i16> %11400, i16 %11404, i32 2
  %11406 = extractelement <64 x i32> %11390, i32 3
  %11407 = sext i32 %11406 to i64
  %11408 = getelementptr inbounds i16, i16* %10104, i64 %11407
  %11409 = load i16, i16* %11408, align 2, !tbaa !382
  %11410 = insertelement <64 x i16> %11405, i16 %11409, i32 3
  %11411 = extractelement <64 x i32> %11390, i32 4
  %11412 = sext i32 %11411 to i64
  %11413 = getelementptr inbounds i16, i16* %10104, i64 %11412
  %11414 = load i16, i16* %11413, align 2, !tbaa !382
  %11415 = insertelement <64 x i16> %11410, i16 %11414, i32 4
  %11416 = extractelement <64 x i32> %11390, i32 5
  %11417 = sext i32 %11416 to i64
  %11418 = getelementptr inbounds i16, i16* %10104, i64 %11417
  %11419 = load i16, i16* %11418, align 2, !tbaa !382
  %11420 = insertelement <64 x i16> %11415, i16 %11419, i32 5
  %11421 = extractelement <64 x i32> %11390, i32 6
  %11422 = sext i32 %11421 to i64
  %11423 = getelementptr inbounds i16, i16* %10104, i64 %11422
  %11424 = load i16, i16* %11423, align 2, !tbaa !382
  %11425 = insertelement <64 x i16> %11420, i16 %11424, i32 6
  %11426 = extractelement <64 x i32> %11390, i32 7
  %11427 = sext i32 %11426 to i64
  %11428 = getelementptr inbounds i16, i16* %10104, i64 %11427
  %11429 = load i16, i16* %11428, align 2, !tbaa !382
  %11430 = insertelement <64 x i16> %11425, i16 %11429, i32 7
  %11431 = extractelement <64 x i32> %11390, i32 8
  %11432 = sext i32 %11431 to i64
  %11433 = getelementptr inbounds i16, i16* %10104, i64 %11432
  %11434 = load i16, i16* %11433, align 2, !tbaa !382
  %11435 = insertelement <64 x i16> %11430, i16 %11434, i32 8
  %11436 = extractelement <64 x i32> %11390, i32 9
  %11437 = sext i32 %11436 to i64
  %11438 = getelementptr inbounds i16, i16* %10104, i64 %11437
  %11439 = load i16, i16* %11438, align 2, !tbaa !382
  %11440 = insertelement <64 x i16> %11435, i16 %11439, i32 9
  %11441 = extractelement <64 x i32> %11390, i32 10
  %11442 = sext i32 %11441 to i64
  %11443 = getelementptr inbounds i16, i16* %10104, i64 %11442
  %11444 = load i16, i16* %11443, align 2, !tbaa !382
  %11445 = insertelement <64 x i16> %11440, i16 %11444, i32 10
  %11446 = extractelement <64 x i32> %11390, i32 11
  %11447 = sext i32 %11446 to i64
  %11448 = getelementptr inbounds i16, i16* %10104, i64 %11447
  %11449 = load i16, i16* %11448, align 2, !tbaa !382
  %11450 = insertelement <64 x i16> %11445, i16 %11449, i32 11
  %11451 = extractelement <64 x i32> %11390, i32 12
  %11452 = sext i32 %11451 to i64
  %11453 = getelementptr inbounds i16, i16* %10104, i64 %11452
  %11454 = load i16, i16* %11453, align 2, !tbaa !382
  %11455 = insertelement <64 x i16> %11450, i16 %11454, i32 12
  %11456 = extractelement <64 x i32> %11390, i32 13
  %11457 = sext i32 %11456 to i64
  %11458 = getelementptr inbounds i16, i16* %10104, i64 %11457
  %11459 = load i16, i16* %11458, align 2, !tbaa !382
  %11460 = insertelement <64 x i16> %11455, i16 %11459, i32 13
  %11461 = extractelement <64 x i32> %11390, i32 14
  %11462 = sext i32 %11461 to i64
  %11463 = getelementptr inbounds i16, i16* %10104, i64 %11462
  %11464 = load i16, i16* %11463, align 2, !tbaa !382
  %11465 = insertelement <64 x i16> %11460, i16 %11464, i32 14
  %11466 = extractelement <64 x i32> %11390, i32 15
  %11467 = sext i32 %11466 to i64
  %11468 = getelementptr inbounds i16, i16* %10104, i64 %11467
  %11469 = load i16, i16* %11468, align 2, !tbaa !382
  %11470 = insertelement <64 x i16> %11465, i16 %11469, i32 15
  %11471 = extractelement <64 x i32> %11390, i32 16
  %11472 = sext i32 %11471 to i64
  %11473 = getelementptr inbounds i16, i16* %10104, i64 %11472
  %11474 = load i16, i16* %11473, align 2, !tbaa !382
  %11475 = insertelement <64 x i16> %11470, i16 %11474, i32 16
  %11476 = extractelement <64 x i32> %11390, i32 17
  %11477 = sext i32 %11476 to i64
  %11478 = getelementptr inbounds i16, i16* %10104, i64 %11477
  %11479 = load i16, i16* %11478, align 2, !tbaa !382
  %11480 = insertelement <64 x i16> %11475, i16 %11479, i32 17
  %11481 = extractelement <64 x i32> %11390, i32 18
  %11482 = sext i32 %11481 to i64
  %11483 = getelementptr inbounds i16, i16* %10104, i64 %11482
  %11484 = load i16, i16* %11483, align 2, !tbaa !382
  %11485 = insertelement <64 x i16> %11480, i16 %11484, i32 18
  %11486 = extractelement <64 x i32> %11390, i32 19
  %11487 = sext i32 %11486 to i64
  %11488 = getelementptr inbounds i16, i16* %10104, i64 %11487
  %11489 = load i16, i16* %11488, align 2, !tbaa !382
  %11490 = insertelement <64 x i16> %11485, i16 %11489, i32 19
  %11491 = extractelement <64 x i32> %11390, i32 20
  %11492 = sext i32 %11491 to i64
  %11493 = getelementptr inbounds i16, i16* %10104, i64 %11492
  %11494 = load i16, i16* %11493, align 2, !tbaa !382
  %11495 = insertelement <64 x i16> %11490, i16 %11494, i32 20
  %11496 = extractelement <64 x i32> %11390, i32 21
  %11497 = sext i32 %11496 to i64
  %11498 = getelementptr inbounds i16, i16* %10104, i64 %11497
  %11499 = load i16, i16* %11498, align 2, !tbaa !382
  %11500 = insertelement <64 x i16> %11495, i16 %11499, i32 21
  %11501 = extractelement <64 x i32> %11390, i32 22
  %11502 = sext i32 %11501 to i64
  %11503 = getelementptr inbounds i16, i16* %10104, i64 %11502
  %11504 = load i16, i16* %11503, align 2, !tbaa !382
  %11505 = insertelement <64 x i16> %11500, i16 %11504, i32 22
  %11506 = extractelement <64 x i32> %11390, i32 23
  %11507 = sext i32 %11506 to i64
  %11508 = getelementptr inbounds i16, i16* %10104, i64 %11507
  %11509 = load i16, i16* %11508, align 2, !tbaa !382
  %11510 = insertelement <64 x i16> %11505, i16 %11509, i32 23
  %11511 = extractelement <64 x i32> %11390, i32 24
  %11512 = sext i32 %11511 to i64
  %11513 = getelementptr inbounds i16, i16* %10104, i64 %11512
  %11514 = load i16, i16* %11513, align 2, !tbaa !382
  %11515 = insertelement <64 x i16> %11510, i16 %11514, i32 24
  %11516 = extractelement <64 x i32> %11390, i32 25
  %11517 = sext i32 %11516 to i64
  %11518 = getelementptr inbounds i16, i16* %10104, i64 %11517
  %11519 = load i16, i16* %11518, align 2, !tbaa !382
  %11520 = insertelement <64 x i16> %11515, i16 %11519, i32 25
  %11521 = extractelement <64 x i32> %11390, i32 26
  %11522 = sext i32 %11521 to i64
  %11523 = getelementptr inbounds i16, i16* %10104, i64 %11522
  %11524 = load i16, i16* %11523, align 2, !tbaa !382
  %11525 = insertelement <64 x i16> %11520, i16 %11524, i32 26
  %11526 = extractelement <64 x i32> %11390, i32 27
  %11527 = sext i32 %11526 to i64
  %11528 = getelementptr inbounds i16, i16* %10104, i64 %11527
  %11529 = load i16, i16* %11528, align 2, !tbaa !382
  %11530 = insertelement <64 x i16> %11525, i16 %11529, i32 27
  %11531 = extractelement <64 x i32> %11390, i32 28
  %11532 = sext i32 %11531 to i64
  %11533 = getelementptr inbounds i16, i16* %10104, i64 %11532
  %11534 = load i16, i16* %11533, align 2, !tbaa !382
  %11535 = insertelement <64 x i16> %11530, i16 %11534, i32 28
  %11536 = extractelement <64 x i32> %11390, i32 29
  %11537 = sext i32 %11536 to i64
  %11538 = getelementptr inbounds i16, i16* %10104, i64 %11537
  %11539 = load i16, i16* %11538, align 2, !tbaa !382
  %11540 = insertelement <64 x i16> %11535, i16 %11539, i32 29
  %11541 = extractelement <64 x i32> %11390, i32 30
  %11542 = sext i32 %11541 to i64
  %11543 = getelementptr inbounds i16, i16* %10104, i64 %11542
  %11544 = load i16, i16* %11543, align 2, !tbaa !382
  %11545 = insertelement <64 x i16> %11540, i16 %11544, i32 30
  %11546 = extractelement <64 x i32> %11390, i32 31
  %11547 = sext i32 %11546 to i64
  %11548 = getelementptr inbounds i16, i16* %10104, i64 %11547
  %11549 = load i16, i16* %11548, align 2, !tbaa !382
  %11550 = insertelement <64 x i16> %11545, i16 %11549, i32 31
  %11551 = extractelement <64 x i32> %11390, i32 32
  %11552 = sext i32 %11551 to i64
  %11553 = getelementptr inbounds i16, i16* %10104, i64 %11552
  %11554 = load i16, i16* %11553, align 2, !tbaa !382
  %11555 = insertelement <64 x i16> %11550, i16 %11554, i32 32
  %11556 = extractelement <64 x i32> %11390, i32 33
  %11557 = sext i32 %11556 to i64
  %11558 = getelementptr inbounds i16, i16* %10104, i64 %11557
  %11559 = load i16, i16* %11558, align 2, !tbaa !382
  %11560 = insertelement <64 x i16> %11555, i16 %11559, i32 33
  %11561 = extractelement <64 x i32> %11390, i32 34
  %11562 = sext i32 %11561 to i64
  %11563 = getelementptr inbounds i16, i16* %10104, i64 %11562
  %11564 = load i16, i16* %11563, align 2, !tbaa !382
  %11565 = insertelement <64 x i16> %11560, i16 %11564, i32 34
  %11566 = extractelement <64 x i32> %11390, i32 35
  %11567 = sext i32 %11566 to i64
  %11568 = getelementptr inbounds i16, i16* %10104, i64 %11567
  %11569 = load i16, i16* %11568, align 2, !tbaa !382
  %11570 = insertelement <64 x i16> %11565, i16 %11569, i32 35
  %11571 = extractelement <64 x i32> %11390, i32 36
  %11572 = sext i32 %11571 to i64
  %11573 = getelementptr inbounds i16, i16* %10104, i64 %11572
  %11574 = load i16, i16* %11573, align 2, !tbaa !382
  %11575 = insertelement <64 x i16> %11570, i16 %11574, i32 36
  %11576 = extractelement <64 x i32> %11390, i32 37
  %11577 = sext i32 %11576 to i64
  %11578 = getelementptr inbounds i16, i16* %10104, i64 %11577
  %11579 = load i16, i16* %11578, align 2, !tbaa !382
  %11580 = insertelement <64 x i16> %11575, i16 %11579, i32 37
  %11581 = extractelement <64 x i32> %11390, i32 38
  %11582 = sext i32 %11581 to i64
  %11583 = getelementptr inbounds i16, i16* %10104, i64 %11582
  %11584 = load i16, i16* %11583, align 2, !tbaa !382
  %11585 = insertelement <64 x i16> %11580, i16 %11584, i32 38
  %11586 = extractelement <64 x i32> %11390, i32 39
  %11587 = sext i32 %11586 to i64
  %11588 = getelementptr inbounds i16, i16* %10104, i64 %11587
  %11589 = load i16, i16* %11588, align 2, !tbaa !382
  %11590 = insertelement <64 x i16> %11585, i16 %11589, i32 39
  %11591 = extractelement <64 x i32> %11390, i32 40
  %11592 = sext i32 %11591 to i64
  %11593 = getelementptr inbounds i16, i16* %10104, i64 %11592
  %11594 = load i16, i16* %11593, align 2, !tbaa !382
  %11595 = insertelement <64 x i16> %11590, i16 %11594, i32 40
  %11596 = extractelement <64 x i32> %11390, i32 41
  %11597 = sext i32 %11596 to i64
  %11598 = getelementptr inbounds i16, i16* %10104, i64 %11597
  %11599 = load i16, i16* %11598, align 2, !tbaa !382
  %11600 = insertelement <64 x i16> %11595, i16 %11599, i32 41
  %11601 = extractelement <64 x i32> %11390, i32 42
  %11602 = sext i32 %11601 to i64
  %11603 = getelementptr inbounds i16, i16* %10104, i64 %11602
  %11604 = load i16, i16* %11603, align 2, !tbaa !382
  %11605 = insertelement <64 x i16> %11600, i16 %11604, i32 42
  %11606 = extractelement <64 x i32> %11390, i32 43
  %11607 = sext i32 %11606 to i64
  %11608 = getelementptr inbounds i16, i16* %10104, i64 %11607
  %11609 = load i16, i16* %11608, align 2, !tbaa !382
  %11610 = insertelement <64 x i16> %11605, i16 %11609, i32 43
  %11611 = extractelement <64 x i32> %11390, i32 44
  %11612 = sext i32 %11611 to i64
  %11613 = getelementptr inbounds i16, i16* %10104, i64 %11612
  %11614 = load i16, i16* %11613, align 2, !tbaa !382
  %11615 = insertelement <64 x i16> %11610, i16 %11614, i32 44
  %11616 = extractelement <64 x i32> %11390, i32 45
  %11617 = sext i32 %11616 to i64
  %11618 = getelementptr inbounds i16, i16* %10104, i64 %11617
  %11619 = load i16, i16* %11618, align 2, !tbaa !382
  %11620 = insertelement <64 x i16> %11615, i16 %11619, i32 45
  %11621 = extractelement <64 x i32> %11390, i32 46
  %11622 = sext i32 %11621 to i64
  %11623 = getelementptr inbounds i16, i16* %10104, i64 %11622
  %11624 = load i16, i16* %11623, align 2, !tbaa !382
  %11625 = insertelement <64 x i16> %11620, i16 %11624, i32 46
  %11626 = extractelement <64 x i32> %11390, i32 47
  %11627 = sext i32 %11626 to i64
  %11628 = getelementptr inbounds i16, i16* %10104, i64 %11627
  %11629 = load i16, i16* %11628, align 2, !tbaa !382
  %11630 = insertelement <64 x i16> %11625, i16 %11629, i32 47
  %11631 = extractelement <64 x i32> %11390, i32 48
  %11632 = sext i32 %11631 to i64
  %11633 = getelementptr inbounds i16, i16* %10104, i64 %11632
  %11634 = load i16, i16* %11633, align 2, !tbaa !382
  %11635 = insertelement <64 x i16> %11630, i16 %11634, i32 48
  %11636 = extractelement <64 x i32> %11390, i32 49
  %11637 = sext i32 %11636 to i64
  %11638 = getelementptr inbounds i16, i16* %10104, i64 %11637
  %11639 = load i16, i16* %11638, align 2, !tbaa !382
  %11640 = insertelement <64 x i16> %11635, i16 %11639, i32 49
  %11641 = extractelement <64 x i32> %11390, i32 50
  %11642 = sext i32 %11641 to i64
  %11643 = getelementptr inbounds i16, i16* %10104, i64 %11642
  %11644 = load i16, i16* %11643, align 2, !tbaa !382
  %11645 = insertelement <64 x i16> %11640, i16 %11644, i32 50
  %11646 = extractelement <64 x i32> %11390, i32 51
  %11647 = sext i32 %11646 to i64
  %11648 = getelementptr inbounds i16, i16* %10104, i64 %11647
  %11649 = load i16, i16* %11648, align 2, !tbaa !382
  %11650 = insertelement <64 x i16> %11645, i16 %11649, i32 51
  %11651 = extractelement <64 x i32> %11390, i32 52
  %11652 = sext i32 %11651 to i64
  %11653 = getelementptr inbounds i16, i16* %10104, i64 %11652
  %11654 = load i16, i16* %11653, align 2, !tbaa !382
  %11655 = insertelement <64 x i16> %11650, i16 %11654, i32 52
  %11656 = extractelement <64 x i32> %11390, i32 53
  %11657 = sext i32 %11656 to i64
  %11658 = getelementptr inbounds i16, i16* %10104, i64 %11657
  %11659 = load i16, i16* %11658, align 2, !tbaa !382
  %11660 = insertelement <64 x i16> %11655, i16 %11659, i32 53
  %11661 = extractelement <64 x i32> %11390, i32 54
  %11662 = sext i32 %11661 to i64
  %11663 = getelementptr inbounds i16, i16* %10104, i64 %11662
  %11664 = load i16, i16* %11663, align 2, !tbaa !382
  %11665 = insertelement <64 x i16> %11660, i16 %11664, i32 54
  %11666 = extractelement <64 x i32> %11390, i32 55
  %11667 = sext i32 %11666 to i64
  %11668 = getelementptr inbounds i16, i16* %10104, i64 %11667
  %11669 = load i16, i16* %11668, align 2, !tbaa !382
  %11670 = insertelement <64 x i16> %11665, i16 %11669, i32 55
  %11671 = extractelement <64 x i32> %11390, i32 56
  %11672 = sext i32 %11671 to i64
  %11673 = getelementptr inbounds i16, i16* %10104, i64 %11672
  %11674 = load i16, i16* %11673, align 2, !tbaa !382
  %11675 = insertelement <64 x i16> %11670, i16 %11674, i32 56
  %11676 = extractelement <64 x i32> %11390, i32 57
  %11677 = sext i32 %11676 to i64
  %11678 = getelementptr inbounds i16, i16* %10104, i64 %11677
  %11679 = load i16, i16* %11678, align 2, !tbaa !382
  %11680 = insertelement <64 x i16> %11675, i16 %11679, i32 57
  %11681 = extractelement <64 x i32> %11390, i32 58
  %11682 = sext i32 %11681 to i64
  %11683 = getelementptr inbounds i16, i16* %10104, i64 %11682
  %11684 = load i16, i16* %11683, align 2, !tbaa !382
  %11685 = insertelement <64 x i16> %11680, i16 %11684, i32 58
  %11686 = extractelement <64 x i32> %11390, i32 59
  %11687 = sext i32 %11686 to i64
  %11688 = getelementptr inbounds i16, i16* %10104, i64 %11687
  %11689 = load i16, i16* %11688, align 2, !tbaa !382
  %11690 = insertelement <64 x i16> %11685, i16 %11689, i32 59
  %11691 = extractelement <64 x i32> %11390, i32 60
  %11692 = sext i32 %11691 to i64
  %11693 = getelementptr inbounds i16, i16* %10104, i64 %11692
  %11694 = load i16, i16* %11693, align 2, !tbaa !382
  %11695 = insertelement <64 x i16> %11690, i16 %11694, i32 60
  %11696 = extractelement <64 x i32> %11390, i32 61
  %11697 = sext i32 %11696 to i64
  %11698 = getelementptr inbounds i16, i16* %10104, i64 %11697
  %11699 = load i16, i16* %11698, align 2, !tbaa !382
  %11700 = insertelement <64 x i16> %11695, i16 %11699, i32 61
  %11701 = extractelement <64 x i32> %11390, i32 62
  %11702 = sext i32 %11701 to i64
  %11703 = getelementptr inbounds i16, i16* %10104, i64 %11702
  %11704 = load i16, i16* %11703, align 2, !tbaa !382
  %11705 = insertelement <64 x i16> %11700, i16 %11704, i32 62
  %11706 = extractelement <64 x i32> %11390, i32 63
  %11707 = sext i32 %11706 to i64
  %11708 = getelementptr inbounds i16, i16* %10104, i64 %11707
  %11709 = load i16, i16* %11708, align 2, !tbaa !382
  %11710 = insertelement <64 x i16> %11705, i16 %11709, i32 63
  %11711 = add nsw i32 %blur_x.s0.x.v1.base.s57, -60
  %11712 = insertelement <64 x i32> undef, i32 %11711, i32 0
  %11713 = shufflevector <64 x i32> %11712, <64 x i32> undef, <64 x i32> zeroinitializer
  %11714 = add nsw <64 x i32> %11713, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %11715 = shufflevector <64 x i32> %11714, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11716 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11715, <4 x i32> %10103)
  %11717 = shufflevector <64 x i32> %11714, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11718 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11717, <4 x i32> %10103)
  %11719 = shufflevector <64 x i32> %11714, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %11720 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11719, <4 x i32> %10103)
  %11721 = shufflevector <64 x i32> %11714, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %11722 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11721, <4 x i32> %10103)
  %11723 = shufflevector <64 x i32> %11714, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %11724 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11723, <4 x i32> %10103)
  %11725 = shufflevector <64 x i32> %11714, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %11726 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11725, <4 x i32> %10103)
  %11727 = shufflevector <64 x i32> %11714, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %11728 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11727, <4 x i32> %10103)
  %11729 = shufflevector <64 x i32> %11714, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %11730 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11729, <4 x i32> %10103)
  %11731 = shufflevector <64 x i32> %11714, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %11732 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11731, <4 x i32> %10103)
  %11733 = shufflevector <64 x i32> %11714, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %11734 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11733, <4 x i32> %10103)
  %11735 = shufflevector <64 x i32> %11714, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %11736 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11735, <4 x i32> %10103)
  %11737 = shufflevector <64 x i32> %11714, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %11738 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11737, <4 x i32> %10103)
  %11739 = shufflevector <64 x i32> %11714, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %11740 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11739, <4 x i32> %10103)
  %11741 = shufflevector <64 x i32> %11714, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %11742 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11741, <4 x i32> %10103)
  %11743 = shufflevector <64 x i32> %11714, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %11744 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11743, <4 x i32> %10103)
  %11745 = shufflevector <64 x i32> %11714, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %11746 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11745, <4 x i32> %10103)
  %11747 = shufflevector <4 x i32> %11746, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %11748 = shufflevector <8 x i32> %11747, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %11749 = shufflevector <16 x i32> %11748, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %11750 = shufflevector <32 x i32> %11749, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %11751 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11716, <4 x i32> zeroinitializer)
  %11752 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11718, <4 x i32> zeroinitializer)
  %11753 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11720, <4 x i32> zeroinitializer)
  %11754 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11722, <4 x i32> zeroinitializer)
  %11755 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11724, <4 x i32> zeroinitializer)
  %11756 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11726, <4 x i32> zeroinitializer)
  %11757 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11728, <4 x i32> zeroinitializer)
  %11758 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11730, <4 x i32> zeroinitializer)
  %11759 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11732, <4 x i32> zeroinitializer)
  %11760 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11734, <4 x i32> zeroinitializer)
  %11761 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11736, <4 x i32> zeroinitializer)
  %11762 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11738, <4 x i32> zeroinitializer)
  %11763 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11740, <4 x i32> zeroinitializer)
  %11764 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11742, <4 x i32> zeroinitializer)
  %11765 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11744, <4 x i32> zeroinitializer)
  %11766 = shufflevector <64 x i32> %11750, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %11767 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11766, <4 x i32> zeroinitializer)
  %11768 = shufflevector <4 x i32> %11751, <4 x i32> %11752, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11769 = shufflevector <4 x i32> %11753, <4 x i32> %11754, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11770 = shufflevector <4 x i32> %11755, <4 x i32> %11756, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11771 = shufflevector <4 x i32> %11757, <4 x i32> %11758, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11772 = shufflevector <4 x i32> %11759, <4 x i32> %11760, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11773 = shufflevector <4 x i32> %11761, <4 x i32> %11762, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11774 = shufflevector <4 x i32> %11763, <4 x i32> %11764, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11775 = shufflevector <4 x i32> %11765, <4 x i32> %11767, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11776 = shufflevector <8 x i32> %11768, <8 x i32> %11769, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11777 = shufflevector <8 x i32> %11770, <8 x i32> %11771, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11778 = shufflevector <8 x i32> %11772, <8 x i32> %11773, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11779 = shufflevector <8 x i32> %11774, <8 x i32> %11775, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11780 = shufflevector <16 x i32> %11776, <16 x i32> %11777, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11781 = shufflevector <16 x i32> %11778, <16 x i32> %11779, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11782 = shufflevector <32 x i32> %11780, <32 x i32> %11781, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %11783 = add nsw <64 x i32> %11782, %t24858
  %11784 = extractelement <64 x i32> %11783, i32 0
  %11785 = sext i32 %11784 to i64
  %11786 = getelementptr inbounds i16, i16* %10104, i64 %11785
  %11787 = load i16, i16* %11786, align 2, !tbaa !382
  %11788 = insertelement <64 x i16> undef, i16 %11787, i32 0
  %11789 = extractelement <64 x i32> %11783, i32 1
  %11790 = sext i32 %11789 to i64
  %11791 = getelementptr inbounds i16, i16* %10104, i64 %11790
  %11792 = load i16, i16* %11791, align 2, !tbaa !382
  %11793 = insertelement <64 x i16> %11788, i16 %11792, i32 1
  %11794 = extractelement <64 x i32> %11783, i32 2
  %11795 = sext i32 %11794 to i64
  %11796 = getelementptr inbounds i16, i16* %10104, i64 %11795
  %11797 = load i16, i16* %11796, align 2, !tbaa !382
  %11798 = insertelement <64 x i16> %11793, i16 %11797, i32 2
  %11799 = extractelement <64 x i32> %11783, i32 3
  %11800 = sext i32 %11799 to i64
  %11801 = getelementptr inbounds i16, i16* %10104, i64 %11800
  %11802 = load i16, i16* %11801, align 2, !tbaa !382
  %11803 = insertelement <64 x i16> %11798, i16 %11802, i32 3
  %11804 = extractelement <64 x i32> %11783, i32 4
  %11805 = sext i32 %11804 to i64
  %11806 = getelementptr inbounds i16, i16* %10104, i64 %11805
  %11807 = load i16, i16* %11806, align 2, !tbaa !382
  %11808 = insertelement <64 x i16> %11803, i16 %11807, i32 4
  %11809 = extractelement <64 x i32> %11783, i32 5
  %11810 = sext i32 %11809 to i64
  %11811 = getelementptr inbounds i16, i16* %10104, i64 %11810
  %11812 = load i16, i16* %11811, align 2, !tbaa !382
  %11813 = insertelement <64 x i16> %11808, i16 %11812, i32 5
  %11814 = extractelement <64 x i32> %11783, i32 6
  %11815 = sext i32 %11814 to i64
  %11816 = getelementptr inbounds i16, i16* %10104, i64 %11815
  %11817 = load i16, i16* %11816, align 2, !tbaa !382
  %11818 = insertelement <64 x i16> %11813, i16 %11817, i32 6
  %11819 = extractelement <64 x i32> %11783, i32 7
  %11820 = sext i32 %11819 to i64
  %11821 = getelementptr inbounds i16, i16* %10104, i64 %11820
  %11822 = load i16, i16* %11821, align 2, !tbaa !382
  %11823 = insertelement <64 x i16> %11818, i16 %11822, i32 7
  %11824 = extractelement <64 x i32> %11783, i32 8
  %11825 = sext i32 %11824 to i64
  %11826 = getelementptr inbounds i16, i16* %10104, i64 %11825
  %11827 = load i16, i16* %11826, align 2, !tbaa !382
  %11828 = insertelement <64 x i16> %11823, i16 %11827, i32 8
  %11829 = extractelement <64 x i32> %11783, i32 9
  %11830 = sext i32 %11829 to i64
  %11831 = getelementptr inbounds i16, i16* %10104, i64 %11830
  %11832 = load i16, i16* %11831, align 2, !tbaa !382
  %11833 = insertelement <64 x i16> %11828, i16 %11832, i32 9
  %11834 = extractelement <64 x i32> %11783, i32 10
  %11835 = sext i32 %11834 to i64
  %11836 = getelementptr inbounds i16, i16* %10104, i64 %11835
  %11837 = load i16, i16* %11836, align 2, !tbaa !382
  %11838 = insertelement <64 x i16> %11833, i16 %11837, i32 10
  %11839 = extractelement <64 x i32> %11783, i32 11
  %11840 = sext i32 %11839 to i64
  %11841 = getelementptr inbounds i16, i16* %10104, i64 %11840
  %11842 = load i16, i16* %11841, align 2, !tbaa !382
  %11843 = insertelement <64 x i16> %11838, i16 %11842, i32 11
  %11844 = extractelement <64 x i32> %11783, i32 12
  %11845 = sext i32 %11844 to i64
  %11846 = getelementptr inbounds i16, i16* %10104, i64 %11845
  %11847 = load i16, i16* %11846, align 2, !tbaa !382
  %11848 = insertelement <64 x i16> %11843, i16 %11847, i32 12
  %11849 = extractelement <64 x i32> %11783, i32 13
  %11850 = sext i32 %11849 to i64
  %11851 = getelementptr inbounds i16, i16* %10104, i64 %11850
  %11852 = load i16, i16* %11851, align 2, !tbaa !382
  %11853 = insertelement <64 x i16> %11848, i16 %11852, i32 13
  %11854 = extractelement <64 x i32> %11783, i32 14
  %11855 = sext i32 %11854 to i64
  %11856 = getelementptr inbounds i16, i16* %10104, i64 %11855
  %11857 = load i16, i16* %11856, align 2, !tbaa !382
  %11858 = insertelement <64 x i16> %11853, i16 %11857, i32 14
  %11859 = extractelement <64 x i32> %11783, i32 15
  %11860 = sext i32 %11859 to i64
  %11861 = getelementptr inbounds i16, i16* %10104, i64 %11860
  %11862 = load i16, i16* %11861, align 2, !tbaa !382
  %11863 = insertelement <64 x i16> %11858, i16 %11862, i32 15
  %11864 = extractelement <64 x i32> %11783, i32 16
  %11865 = sext i32 %11864 to i64
  %11866 = getelementptr inbounds i16, i16* %10104, i64 %11865
  %11867 = load i16, i16* %11866, align 2, !tbaa !382
  %11868 = insertelement <64 x i16> %11863, i16 %11867, i32 16
  %11869 = extractelement <64 x i32> %11783, i32 17
  %11870 = sext i32 %11869 to i64
  %11871 = getelementptr inbounds i16, i16* %10104, i64 %11870
  %11872 = load i16, i16* %11871, align 2, !tbaa !382
  %11873 = insertelement <64 x i16> %11868, i16 %11872, i32 17
  %11874 = extractelement <64 x i32> %11783, i32 18
  %11875 = sext i32 %11874 to i64
  %11876 = getelementptr inbounds i16, i16* %10104, i64 %11875
  %11877 = load i16, i16* %11876, align 2, !tbaa !382
  %11878 = insertelement <64 x i16> %11873, i16 %11877, i32 18
  %11879 = extractelement <64 x i32> %11783, i32 19
  %11880 = sext i32 %11879 to i64
  %11881 = getelementptr inbounds i16, i16* %10104, i64 %11880
  %11882 = load i16, i16* %11881, align 2, !tbaa !382
  %11883 = insertelement <64 x i16> %11878, i16 %11882, i32 19
  %11884 = extractelement <64 x i32> %11783, i32 20
  %11885 = sext i32 %11884 to i64
  %11886 = getelementptr inbounds i16, i16* %10104, i64 %11885
  %11887 = load i16, i16* %11886, align 2, !tbaa !382
  %11888 = insertelement <64 x i16> %11883, i16 %11887, i32 20
  %11889 = extractelement <64 x i32> %11783, i32 21
  %11890 = sext i32 %11889 to i64
  %11891 = getelementptr inbounds i16, i16* %10104, i64 %11890
  %11892 = load i16, i16* %11891, align 2, !tbaa !382
  %11893 = insertelement <64 x i16> %11888, i16 %11892, i32 21
  %11894 = extractelement <64 x i32> %11783, i32 22
  %11895 = sext i32 %11894 to i64
  %11896 = getelementptr inbounds i16, i16* %10104, i64 %11895
  %11897 = load i16, i16* %11896, align 2, !tbaa !382
  %11898 = insertelement <64 x i16> %11893, i16 %11897, i32 22
  %11899 = extractelement <64 x i32> %11783, i32 23
  %11900 = sext i32 %11899 to i64
  %11901 = getelementptr inbounds i16, i16* %10104, i64 %11900
  %11902 = load i16, i16* %11901, align 2, !tbaa !382
  %11903 = insertelement <64 x i16> %11898, i16 %11902, i32 23
  %11904 = extractelement <64 x i32> %11783, i32 24
  %11905 = sext i32 %11904 to i64
  %11906 = getelementptr inbounds i16, i16* %10104, i64 %11905
  %11907 = load i16, i16* %11906, align 2, !tbaa !382
  %11908 = insertelement <64 x i16> %11903, i16 %11907, i32 24
  %11909 = extractelement <64 x i32> %11783, i32 25
  %11910 = sext i32 %11909 to i64
  %11911 = getelementptr inbounds i16, i16* %10104, i64 %11910
  %11912 = load i16, i16* %11911, align 2, !tbaa !382
  %11913 = insertelement <64 x i16> %11908, i16 %11912, i32 25
  %11914 = extractelement <64 x i32> %11783, i32 26
  %11915 = sext i32 %11914 to i64
  %11916 = getelementptr inbounds i16, i16* %10104, i64 %11915
  %11917 = load i16, i16* %11916, align 2, !tbaa !382
  %11918 = insertelement <64 x i16> %11913, i16 %11917, i32 26
  %11919 = extractelement <64 x i32> %11783, i32 27
  %11920 = sext i32 %11919 to i64
  %11921 = getelementptr inbounds i16, i16* %10104, i64 %11920
  %11922 = load i16, i16* %11921, align 2, !tbaa !382
  %11923 = insertelement <64 x i16> %11918, i16 %11922, i32 27
  %11924 = extractelement <64 x i32> %11783, i32 28
  %11925 = sext i32 %11924 to i64
  %11926 = getelementptr inbounds i16, i16* %10104, i64 %11925
  %11927 = load i16, i16* %11926, align 2, !tbaa !382
  %11928 = insertelement <64 x i16> %11923, i16 %11927, i32 28
  %11929 = extractelement <64 x i32> %11783, i32 29
  %11930 = sext i32 %11929 to i64
  %11931 = getelementptr inbounds i16, i16* %10104, i64 %11930
  %11932 = load i16, i16* %11931, align 2, !tbaa !382
  %11933 = insertelement <64 x i16> %11928, i16 %11932, i32 29
  %11934 = extractelement <64 x i32> %11783, i32 30
  %11935 = sext i32 %11934 to i64
  %11936 = getelementptr inbounds i16, i16* %10104, i64 %11935
  %11937 = load i16, i16* %11936, align 2, !tbaa !382
  %11938 = insertelement <64 x i16> %11933, i16 %11937, i32 30
  %11939 = extractelement <64 x i32> %11783, i32 31
  %11940 = sext i32 %11939 to i64
  %11941 = getelementptr inbounds i16, i16* %10104, i64 %11940
  %11942 = load i16, i16* %11941, align 2, !tbaa !382
  %11943 = insertelement <64 x i16> %11938, i16 %11942, i32 31
  %11944 = extractelement <64 x i32> %11783, i32 32
  %11945 = sext i32 %11944 to i64
  %11946 = getelementptr inbounds i16, i16* %10104, i64 %11945
  %11947 = load i16, i16* %11946, align 2, !tbaa !382
  %11948 = insertelement <64 x i16> %11943, i16 %11947, i32 32
  %11949 = extractelement <64 x i32> %11783, i32 33
  %11950 = sext i32 %11949 to i64
  %11951 = getelementptr inbounds i16, i16* %10104, i64 %11950
  %11952 = load i16, i16* %11951, align 2, !tbaa !382
  %11953 = insertelement <64 x i16> %11948, i16 %11952, i32 33
  %11954 = extractelement <64 x i32> %11783, i32 34
  %11955 = sext i32 %11954 to i64
  %11956 = getelementptr inbounds i16, i16* %10104, i64 %11955
  %11957 = load i16, i16* %11956, align 2, !tbaa !382
  %11958 = insertelement <64 x i16> %11953, i16 %11957, i32 34
  %11959 = extractelement <64 x i32> %11783, i32 35
  %11960 = sext i32 %11959 to i64
  %11961 = getelementptr inbounds i16, i16* %10104, i64 %11960
  %11962 = load i16, i16* %11961, align 2, !tbaa !382
  %11963 = insertelement <64 x i16> %11958, i16 %11962, i32 35
  %11964 = extractelement <64 x i32> %11783, i32 36
  %11965 = sext i32 %11964 to i64
  %11966 = getelementptr inbounds i16, i16* %10104, i64 %11965
  %11967 = load i16, i16* %11966, align 2, !tbaa !382
  %11968 = insertelement <64 x i16> %11963, i16 %11967, i32 36
  %11969 = extractelement <64 x i32> %11783, i32 37
  %11970 = sext i32 %11969 to i64
  %11971 = getelementptr inbounds i16, i16* %10104, i64 %11970
  %11972 = load i16, i16* %11971, align 2, !tbaa !382
  %11973 = insertelement <64 x i16> %11968, i16 %11972, i32 37
  %11974 = extractelement <64 x i32> %11783, i32 38
  %11975 = sext i32 %11974 to i64
  %11976 = getelementptr inbounds i16, i16* %10104, i64 %11975
  %11977 = load i16, i16* %11976, align 2, !tbaa !382
  %11978 = insertelement <64 x i16> %11973, i16 %11977, i32 38
  %11979 = extractelement <64 x i32> %11783, i32 39
  %11980 = sext i32 %11979 to i64
  %11981 = getelementptr inbounds i16, i16* %10104, i64 %11980
  %11982 = load i16, i16* %11981, align 2, !tbaa !382
  %11983 = insertelement <64 x i16> %11978, i16 %11982, i32 39
  %11984 = extractelement <64 x i32> %11783, i32 40
  %11985 = sext i32 %11984 to i64
  %11986 = getelementptr inbounds i16, i16* %10104, i64 %11985
  %11987 = load i16, i16* %11986, align 2, !tbaa !382
  %11988 = insertelement <64 x i16> %11983, i16 %11987, i32 40
  %11989 = extractelement <64 x i32> %11783, i32 41
  %11990 = sext i32 %11989 to i64
  %11991 = getelementptr inbounds i16, i16* %10104, i64 %11990
  %11992 = load i16, i16* %11991, align 2, !tbaa !382
  %11993 = insertelement <64 x i16> %11988, i16 %11992, i32 41
  %11994 = extractelement <64 x i32> %11783, i32 42
  %11995 = sext i32 %11994 to i64
  %11996 = getelementptr inbounds i16, i16* %10104, i64 %11995
  %11997 = load i16, i16* %11996, align 2, !tbaa !382
  %11998 = insertelement <64 x i16> %11993, i16 %11997, i32 42
  %11999 = extractelement <64 x i32> %11783, i32 43
  %12000 = sext i32 %11999 to i64
  %12001 = getelementptr inbounds i16, i16* %10104, i64 %12000
  %12002 = load i16, i16* %12001, align 2, !tbaa !382
  %12003 = insertelement <64 x i16> %11998, i16 %12002, i32 43
  %12004 = extractelement <64 x i32> %11783, i32 44
  %12005 = sext i32 %12004 to i64
  %12006 = getelementptr inbounds i16, i16* %10104, i64 %12005
  %12007 = load i16, i16* %12006, align 2, !tbaa !382
  %12008 = insertelement <64 x i16> %12003, i16 %12007, i32 44
  %12009 = extractelement <64 x i32> %11783, i32 45
  %12010 = sext i32 %12009 to i64
  %12011 = getelementptr inbounds i16, i16* %10104, i64 %12010
  %12012 = load i16, i16* %12011, align 2, !tbaa !382
  %12013 = insertelement <64 x i16> %12008, i16 %12012, i32 45
  %12014 = extractelement <64 x i32> %11783, i32 46
  %12015 = sext i32 %12014 to i64
  %12016 = getelementptr inbounds i16, i16* %10104, i64 %12015
  %12017 = load i16, i16* %12016, align 2, !tbaa !382
  %12018 = insertelement <64 x i16> %12013, i16 %12017, i32 46
  %12019 = extractelement <64 x i32> %11783, i32 47
  %12020 = sext i32 %12019 to i64
  %12021 = getelementptr inbounds i16, i16* %10104, i64 %12020
  %12022 = load i16, i16* %12021, align 2, !tbaa !382
  %12023 = insertelement <64 x i16> %12018, i16 %12022, i32 47
  %12024 = extractelement <64 x i32> %11783, i32 48
  %12025 = sext i32 %12024 to i64
  %12026 = getelementptr inbounds i16, i16* %10104, i64 %12025
  %12027 = load i16, i16* %12026, align 2, !tbaa !382
  %12028 = insertelement <64 x i16> %12023, i16 %12027, i32 48
  %12029 = extractelement <64 x i32> %11783, i32 49
  %12030 = sext i32 %12029 to i64
  %12031 = getelementptr inbounds i16, i16* %10104, i64 %12030
  %12032 = load i16, i16* %12031, align 2, !tbaa !382
  %12033 = insertelement <64 x i16> %12028, i16 %12032, i32 49
  %12034 = extractelement <64 x i32> %11783, i32 50
  %12035 = sext i32 %12034 to i64
  %12036 = getelementptr inbounds i16, i16* %10104, i64 %12035
  %12037 = load i16, i16* %12036, align 2, !tbaa !382
  %12038 = insertelement <64 x i16> %12033, i16 %12037, i32 50
  %12039 = extractelement <64 x i32> %11783, i32 51
  %12040 = sext i32 %12039 to i64
  %12041 = getelementptr inbounds i16, i16* %10104, i64 %12040
  %12042 = load i16, i16* %12041, align 2, !tbaa !382
  %12043 = insertelement <64 x i16> %12038, i16 %12042, i32 51
  %12044 = extractelement <64 x i32> %11783, i32 52
  %12045 = sext i32 %12044 to i64
  %12046 = getelementptr inbounds i16, i16* %10104, i64 %12045
  %12047 = load i16, i16* %12046, align 2, !tbaa !382
  %12048 = insertelement <64 x i16> %12043, i16 %12047, i32 52
  %12049 = extractelement <64 x i32> %11783, i32 53
  %12050 = sext i32 %12049 to i64
  %12051 = getelementptr inbounds i16, i16* %10104, i64 %12050
  %12052 = load i16, i16* %12051, align 2, !tbaa !382
  %12053 = insertelement <64 x i16> %12048, i16 %12052, i32 53
  %12054 = extractelement <64 x i32> %11783, i32 54
  %12055 = sext i32 %12054 to i64
  %12056 = getelementptr inbounds i16, i16* %10104, i64 %12055
  %12057 = load i16, i16* %12056, align 2, !tbaa !382
  %12058 = insertelement <64 x i16> %12053, i16 %12057, i32 54
  %12059 = extractelement <64 x i32> %11783, i32 55
  %12060 = sext i32 %12059 to i64
  %12061 = getelementptr inbounds i16, i16* %10104, i64 %12060
  %12062 = load i16, i16* %12061, align 2, !tbaa !382
  %12063 = insertelement <64 x i16> %12058, i16 %12062, i32 55
  %12064 = extractelement <64 x i32> %11783, i32 56
  %12065 = sext i32 %12064 to i64
  %12066 = getelementptr inbounds i16, i16* %10104, i64 %12065
  %12067 = load i16, i16* %12066, align 2, !tbaa !382
  %12068 = insertelement <64 x i16> %12063, i16 %12067, i32 56
  %12069 = extractelement <64 x i32> %11783, i32 57
  %12070 = sext i32 %12069 to i64
  %12071 = getelementptr inbounds i16, i16* %10104, i64 %12070
  %12072 = load i16, i16* %12071, align 2, !tbaa !382
  %12073 = insertelement <64 x i16> %12068, i16 %12072, i32 57
  %12074 = extractelement <64 x i32> %11783, i32 58
  %12075 = sext i32 %12074 to i64
  %12076 = getelementptr inbounds i16, i16* %10104, i64 %12075
  %12077 = load i16, i16* %12076, align 2, !tbaa !382
  %12078 = insertelement <64 x i16> %12073, i16 %12077, i32 58
  %12079 = extractelement <64 x i32> %11783, i32 59
  %12080 = sext i32 %12079 to i64
  %12081 = getelementptr inbounds i16, i16* %10104, i64 %12080
  %12082 = load i16, i16* %12081, align 2, !tbaa !382
  %12083 = insertelement <64 x i16> %12078, i16 %12082, i32 59
  %12084 = extractelement <64 x i32> %11783, i32 60
  %12085 = sext i32 %12084 to i64
  %12086 = getelementptr inbounds i16, i16* %10104, i64 %12085
  %12087 = load i16, i16* %12086, align 2, !tbaa !382
  %12088 = insertelement <64 x i16> %12083, i16 %12087, i32 60
  %12089 = extractelement <64 x i32> %11783, i32 61
  %12090 = sext i32 %12089 to i64
  %12091 = getelementptr inbounds i16, i16* %10104, i64 %12090
  %12092 = load i16, i16* %12091, align 2, !tbaa !382
  %12093 = insertelement <64 x i16> %12088, i16 %12092, i32 61
  %12094 = extractelement <64 x i32> %11783, i32 62
  %12095 = sext i32 %12094 to i64
  %12096 = getelementptr inbounds i16, i16* %10104, i64 %12095
  %12097 = load i16, i16* %12096, align 2, !tbaa !382
  %12098 = insertelement <64 x i16> %12093, i16 %12097, i32 62
  %12099 = extractelement <64 x i32> %11783, i32 63
  %12100 = sext i32 %12099 to i64
  %12101 = getelementptr inbounds i16, i16* %10104, i64 %12100
  %12102 = load i16, i16* %12101, align 2, !tbaa !382
  %12103 = insertelement <64 x i16> %12098, i16 %12102, i32 63
  %12104 = add nsw i32 %blur_x.s0.x.v1.base.s57, -58
  %12105 = insertelement <64 x i32> undef, i32 %12104, i32 0
  %12106 = shufflevector <64 x i32> %12105, <64 x i32> undef, <64 x i32> zeroinitializer
  %12107 = add nsw <64 x i32> %12106, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %12108 = shufflevector <64 x i32> %12107, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12109 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12108, <4 x i32> %10103)
  %12110 = shufflevector <64 x i32> %12107, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12111 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12110, <4 x i32> %10103)
  %12112 = shufflevector <64 x i32> %12107, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %12113 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12112, <4 x i32> %10103)
  %12114 = shufflevector <64 x i32> %12107, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %12115 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12114, <4 x i32> %10103)
  %12116 = shufflevector <64 x i32> %12107, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %12117 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12116, <4 x i32> %10103)
  %12118 = shufflevector <64 x i32> %12107, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %12119 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12118, <4 x i32> %10103)
  %12120 = shufflevector <64 x i32> %12107, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %12121 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12120, <4 x i32> %10103)
  %12122 = shufflevector <64 x i32> %12107, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %12123 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12122, <4 x i32> %10103)
  %12124 = shufflevector <64 x i32> %12107, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %12125 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12124, <4 x i32> %10103)
  %12126 = shufflevector <64 x i32> %12107, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %12127 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12126, <4 x i32> %10103)
  %12128 = shufflevector <64 x i32> %12107, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %12129 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12128, <4 x i32> %10103)
  %12130 = shufflevector <64 x i32> %12107, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %12131 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12130, <4 x i32> %10103)
  %12132 = shufflevector <64 x i32> %12107, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %12133 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12132, <4 x i32> %10103)
  %12134 = shufflevector <64 x i32> %12107, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %12135 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12134, <4 x i32> %10103)
  %12136 = shufflevector <64 x i32> %12107, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %12137 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12136, <4 x i32> %10103)
  %12138 = shufflevector <64 x i32> %12107, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %12139 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12138, <4 x i32> %10103)
  %12140 = shufflevector <4 x i32> %12139, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %12141 = shufflevector <8 x i32> %12140, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %12142 = shufflevector <16 x i32> %12141, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %12143 = shufflevector <32 x i32> %12142, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %12144 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12109, <4 x i32> zeroinitializer)
  %12145 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12111, <4 x i32> zeroinitializer)
  %12146 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12113, <4 x i32> zeroinitializer)
  %12147 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12115, <4 x i32> zeroinitializer)
  %12148 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12117, <4 x i32> zeroinitializer)
  %12149 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12119, <4 x i32> zeroinitializer)
  %12150 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12121, <4 x i32> zeroinitializer)
  %12151 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12123, <4 x i32> zeroinitializer)
  %12152 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12125, <4 x i32> zeroinitializer)
  %12153 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12127, <4 x i32> zeroinitializer)
  %12154 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12129, <4 x i32> zeroinitializer)
  %12155 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12131, <4 x i32> zeroinitializer)
  %12156 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12133, <4 x i32> zeroinitializer)
  %12157 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12135, <4 x i32> zeroinitializer)
  %12158 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12137, <4 x i32> zeroinitializer)
  %12159 = shufflevector <64 x i32> %12143, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %12160 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12159, <4 x i32> zeroinitializer)
  %12161 = shufflevector <4 x i32> %12144, <4 x i32> %12145, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12162 = shufflevector <4 x i32> %12146, <4 x i32> %12147, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12163 = shufflevector <4 x i32> %12148, <4 x i32> %12149, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12164 = shufflevector <4 x i32> %12150, <4 x i32> %12151, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12165 = shufflevector <4 x i32> %12152, <4 x i32> %12153, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12166 = shufflevector <4 x i32> %12154, <4 x i32> %12155, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12167 = shufflevector <4 x i32> %12156, <4 x i32> %12157, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12168 = shufflevector <4 x i32> %12158, <4 x i32> %12160, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12169 = shufflevector <8 x i32> %12161, <8 x i32> %12162, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12170 = shufflevector <8 x i32> %12163, <8 x i32> %12164, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12171 = shufflevector <8 x i32> %12165, <8 x i32> %12166, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12172 = shufflevector <8 x i32> %12167, <8 x i32> %12168, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12173 = shufflevector <16 x i32> %12169, <16 x i32> %12170, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12174 = shufflevector <16 x i32> %12171, <16 x i32> %12172, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12175 = shufflevector <32 x i32> %12173, <32 x i32> %12174, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %12176 = add nsw <64 x i32> %12175, %t24858
  %12177 = extractelement <64 x i32> %12176, i32 0
  %12178 = sext i32 %12177 to i64
  %12179 = getelementptr inbounds i16, i16* %10104, i64 %12178
  %12180 = load i16, i16* %12179, align 2, !tbaa !382
  %12181 = insertelement <64 x i16> undef, i16 %12180, i32 0
  %12182 = extractelement <64 x i32> %12176, i32 1
  %12183 = sext i32 %12182 to i64
  %12184 = getelementptr inbounds i16, i16* %10104, i64 %12183
  %12185 = load i16, i16* %12184, align 2, !tbaa !382
  %12186 = insertelement <64 x i16> %12181, i16 %12185, i32 1
  %12187 = extractelement <64 x i32> %12176, i32 2
  %12188 = sext i32 %12187 to i64
  %12189 = getelementptr inbounds i16, i16* %10104, i64 %12188
  %12190 = load i16, i16* %12189, align 2, !tbaa !382
  %12191 = insertelement <64 x i16> %12186, i16 %12190, i32 2
  %12192 = extractelement <64 x i32> %12176, i32 3
  %12193 = sext i32 %12192 to i64
  %12194 = getelementptr inbounds i16, i16* %10104, i64 %12193
  %12195 = load i16, i16* %12194, align 2, !tbaa !382
  %12196 = insertelement <64 x i16> %12191, i16 %12195, i32 3
  %12197 = extractelement <64 x i32> %12176, i32 4
  %12198 = sext i32 %12197 to i64
  %12199 = getelementptr inbounds i16, i16* %10104, i64 %12198
  %12200 = load i16, i16* %12199, align 2, !tbaa !382
  %12201 = insertelement <64 x i16> %12196, i16 %12200, i32 4
  %12202 = extractelement <64 x i32> %12176, i32 5
  %12203 = sext i32 %12202 to i64
  %12204 = getelementptr inbounds i16, i16* %10104, i64 %12203
  %12205 = load i16, i16* %12204, align 2, !tbaa !382
  %12206 = insertelement <64 x i16> %12201, i16 %12205, i32 5
  %12207 = extractelement <64 x i32> %12176, i32 6
  %12208 = sext i32 %12207 to i64
  %12209 = getelementptr inbounds i16, i16* %10104, i64 %12208
  %12210 = load i16, i16* %12209, align 2, !tbaa !382
  %12211 = insertelement <64 x i16> %12206, i16 %12210, i32 6
  %12212 = extractelement <64 x i32> %12176, i32 7
  %12213 = sext i32 %12212 to i64
  %12214 = getelementptr inbounds i16, i16* %10104, i64 %12213
  %12215 = load i16, i16* %12214, align 2, !tbaa !382
  %12216 = insertelement <64 x i16> %12211, i16 %12215, i32 7
  %12217 = extractelement <64 x i32> %12176, i32 8
  %12218 = sext i32 %12217 to i64
  %12219 = getelementptr inbounds i16, i16* %10104, i64 %12218
  %12220 = load i16, i16* %12219, align 2, !tbaa !382
  %12221 = insertelement <64 x i16> %12216, i16 %12220, i32 8
  %12222 = extractelement <64 x i32> %12176, i32 9
  %12223 = sext i32 %12222 to i64
  %12224 = getelementptr inbounds i16, i16* %10104, i64 %12223
  %12225 = load i16, i16* %12224, align 2, !tbaa !382
  %12226 = insertelement <64 x i16> %12221, i16 %12225, i32 9
  %12227 = extractelement <64 x i32> %12176, i32 10
  %12228 = sext i32 %12227 to i64
  %12229 = getelementptr inbounds i16, i16* %10104, i64 %12228
  %12230 = load i16, i16* %12229, align 2, !tbaa !382
  %12231 = insertelement <64 x i16> %12226, i16 %12230, i32 10
  %12232 = extractelement <64 x i32> %12176, i32 11
  %12233 = sext i32 %12232 to i64
  %12234 = getelementptr inbounds i16, i16* %10104, i64 %12233
  %12235 = load i16, i16* %12234, align 2, !tbaa !382
  %12236 = insertelement <64 x i16> %12231, i16 %12235, i32 11
  %12237 = extractelement <64 x i32> %12176, i32 12
  %12238 = sext i32 %12237 to i64
  %12239 = getelementptr inbounds i16, i16* %10104, i64 %12238
  %12240 = load i16, i16* %12239, align 2, !tbaa !382
  %12241 = insertelement <64 x i16> %12236, i16 %12240, i32 12
  %12242 = extractelement <64 x i32> %12176, i32 13
  %12243 = sext i32 %12242 to i64
  %12244 = getelementptr inbounds i16, i16* %10104, i64 %12243
  %12245 = load i16, i16* %12244, align 2, !tbaa !382
  %12246 = insertelement <64 x i16> %12241, i16 %12245, i32 13
  %12247 = extractelement <64 x i32> %12176, i32 14
  %12248 = sext i32 %12247 to i64
  %12249 = getelementptr inbounds i16, i16* %10104, i64 %12248
  %12250 = load i16, i16* %12249, align 2, !tbaa !382
  %12251 = insertelement <64 x i16> %12246, i16 %12250, i32 14
  %12252 = extractelement <64 x i32> %12176, i32 15
  %12253 = sext i32 %12252 to i64
  %12254 = getelementptr inbounds i16, i16* %10104, i64 %12253
  %12255 = load i16, i16* %12254, align 2, !tbaa !382
  %12256 = insertelement <64 x i16> %12251, i16 %12255, i32 15
  %12257 = extractelement <64 x i32> %12176, i32 16
  %12258 = sext i32 %12257 to i64
  %12259 = getelementptr inbounds i16, i16* %10104, i64 %12258
  %12260 = load i16, i16* %12259, align 2, !tbaa !382
  %12261 = insertelement <64 x i16> %12256, i16 %12260, i32 16
  %12262 = extractelement <64 x i32> %12176, i32 17
  %12263 = sext i32 %12262 to i64
  %12264 = getelementptr inbounds i16, i16* %10104, i64 %12263
  %12265 = load i16, i16* %12264, align 2, !tbaa !382
  %12266 = insertelement <64 x i16> %12261, i16 %12265, i32 17
  %12267 = extractelement <64 x i32> %12176, i32 18
  %12268 = sext i32 %12267 to i64
  %12269 = getelementptr inbounds i16, i16* %10104, i64 %12268
  %12270 = load i16, i16* %12269, align 2, !tbaa !382
  %12271 = insertelement <64 x i16> %12266, i16 %12270, i32 18
  %12272 = extractelement <64 x i32> %12176, i32 19
  %12273 = sext i32 %12272 to i64
  %12274 = getelementptr inbounds i16, i16* %10104, i64 %12273
  %12275 = load i16, i16* %12274, align 2, !tbaa !382
  %12276 = insertelement <64 x i16> %12271, i16 %12275, i32 19
  %12277 = extractelement <64 x i32> %12176, i32 20
  %12278 = sext i32 %12277 to i64
  %12279 = getelementptr inbounds i16, i16* %10104, i64 %12278
  %12280 = load i16, i16* %12279, align 2, !tbaa !382
  %12281 = insertelement <64 x i16> %12276, i16 %12280, i32 20
  %12282 = extractelement <64 x i32> %12176, i32 21
  %12283 = sext i32 %12282 to i64
  %12284 = getelementptr inbounds i16, i16* %10104, i64 %12283
  %12285 = load i16, i16* %12284, align 2, !tbaa !382
  %12286 = insertelement <64 x i16> %12281, i16 %12285, i32 21
  %12287 = extractelement <64 x i32> %12176, i32 22
  %12288 = sext i32 %12287 to i64
  %12289 = getelementptr inbounds i16, i16* %10104, i64 %12288
  %12290 = load i16, i16* %12289, align 2, !tbaa !382
  %12291 = insertelement <64 x i16> %12286, i16 %12290, i32 22
  %12292 = extractelement <64 x i32> %12176, i32 23
  %12293 = sext i32 %12292 to i64
  %12294 = getelementptr inbounds i16, i16* %10104, i64 %12293
  %12295 = load i16, i16* %12294, align 2, !tbaa !382
  %12296 = insertelement <64 x i16> %12291, i16 %12295, i32 23
  %12297 = extractelement <64 x i32> %12176, i32 24
  %12298 = sext i32 %12297 to i64
  %12299 = getelementptr inbounds i16, i16* %10104, i64 %12298
  %12300 = load i16, i16* %12299, align 2, !tbaa !382
  %12301 = insertelement <64 x i16> %12296, i16 %12300, i32 24
  %12302 = extractelement <64 x i32> %12176, i32 25
  %12303 = sext i32 %12302 to i64
  %12304 = getelementptr inbounds i16, i16* %10104, i64 %12303
  %12305 = load i16, i16* %12304, align 2, !tbaa !382
  %12306 = insertelement <64 x i16> %12301, i16 %12305, i32 25
  %12307 = extractelement <64 x i32> %12176, i32 26
  %12308 = sext i32 %12307 to i64
  %12309 = getelementptr inbounds i16, i16* %10104, i64 %12308
  %12310 = load i16, i16* %12309, align 2, !tbaa !382
  %12311 = insertelement <64 x i16> %12306, i16 %12310, i32 26
  %12312 = extractelement <64 x i32> %12176, i32 27
  %12313 = sext i32 %12312 to i64
  %12314 = getelementptr inbounds i16, i16* %10104, i64 %12313
  %12315 = load i16, i16* %12314, align 2, !tbaa !382
  %12316 = insertelement <64 x i16> %12311, i16 %12315, i32 27
  %12317 = extractelement <64 x i32> %12176, i32 28
  %12318 = sext i32 %12317 to i64
  %12319 = getelementptr inbounds i16, i16* %10104, i64 %12318
  %12320 = load i16, i16* %12319, align 2, !tbaa !382
  %12321 = insertelement <64 x i16> %12316, i16 %12320, i32 28
  %12322 = extractelement <64 x i32> %12176, i32 29
  %12323 = sext i32 %12322 to i64
  %12324 = getelementptr inbounds i16, i16* %10104, i64 %12323
  %12325 = load i16, i16* %12324, align 2, !tbaa !382
  %12326 = insertelement <64 x i16> %12321, i16 %12325, i32 29
  %12327 = extractelement <64 x i32> %12176, i32 30
  %12328 = sext i32 %12327 to i64
  %12329 = getelementptr inbounds i16, i16* %10104, i64 %12328
  %12330 = load i16, i16* %12329, align 2, !tbaa !382
  %12331 = insertelement <64 x i16> %12326, i16 %12330, i32 30
  %12332 = extractelement <64 x i32> %12176, i32 31
  %12333 = sext i32 %12332 to i64
  %12334 = getelementptr inbounds i16, i16* %10104, i64 %12333
  %12335 = load i16, i16* %12334, align 2, !tbaa !382
  %12336 = insertelement <64 x i16> %12331, i16 %12335, i32 31
  %12337 = extractelement <64 x i32> %12176, i32 32
  %12338 = sext i32 %12337 to i64
  %12339 = getelementptr inbounds i16, i16* %10104, i64 %12338
  %12340 = load i16, i16* %12339, align 2, !tbaa !382
  %12341 = insertelement <64 x i16> %12336, i16 %12340, i32 32
  %12342 = extractelement <64 x i32> %12176, i32 33
  %12343 = sext i32 %12342 to i64
  %12344 = getelementptr inbounds i16, i16* %10104, i64 %12343
  %12345 = load i16, i16* %12344, align 2, !tbaa !382
  %12346 = insertelement <64 x i16> %12341, i16 %12345, i32 33
  %12347 = extractelement <64 x i32> %12176, i32 34
  %12348 = sext i32 %12347 to i64
  %12349 = getelementptr inbounds i16, i16* %10104, i64 %12348
  %12350 = load i16, i16* %12349, align 2, !tbaa !382
  %12351 = insertelement <64 x i16> %12346, i16 %12350, i32 34
  %12352 = extractelement <64 x i32> %12176, i32 35
  %12353 = sext i32 %12352 to i64
  %12354 = getelementptr inbounds i16, i16* %10104, i64 %12353
  %12355 = load i16, i16* %12354, align 2, !tbaa !382
  %12356 = insertelement <64 x i16> %12351, i16 %12355, i32 35
  %12357 = extractelement <64 x i32> %12176, i32 36
  %12358 = sext i32 %12357 to i64
  %12359 = getelementptr inbounds i16, i16* %10104, i64 %12358
  %12360 = load i16, i16* %12359, align 2, !tbaa !382
  %12361 = insertelement <64 x i16> %12356, i16 %12360, i32 36
  %12362 = extractelement <64 x i32> %12176, i32 37
  %12363 = sext i32 %12362 to i64
  %12364 = getelementptr inbounds i16, i16* %10104, i64 %12363
  %12365 = load i16, i16* %12364, align 2, !tbaa !382
  %12366 = insertelement <64 x i16> %12361, i16 %12365, i32 37
  %12367 = extractelement <64 x i32> %12176, i32 38
  %12368 = sext i32 %12367 to i64
  %12369 = getelementptr inbounds i16, i16* %10104, i64 %12368
  %12370 = load i16, i16* %12369, align 2, !tbaa !382
  %12371 = insertelement <64 x i16> %12366, i16 %12370, i32 38
  %12372 = extractelement <64 x i32> %12176, i32 39
  %12373 = sext i32 %12372 to i64
  %12374 = getelementptr inbounds i16, i16* %10104, i64 %12373
  %12375 = load i16, i16* %12374, align 2, !tbaa !382
  %12376 = insertelement <64 x i16> %12371, i16 %12375, i32 39
  %12377 = extractelement <64 x i32> %12176, i32 40
  %12378 = sext i32 %12377 to i64
  %12379 = getelementptr inbounds i16, i16* %10104, i64 %12378
  %12380 = load i16, i16* %12379, align 2, !tbaa !382
  %12381 = insertelement <64 x i16> %12376, i16 %12380, i32 40
  %12382 = extractelement <64 x i32> %12176, i32 41
  %12383 = sext i32 %12382 to i64
  %12384 = getelementptr inbounds i16, i16* %10104, i64 %12383
  %12385 = load i16, i16* %12384, align 2, !tbaa !382
  %12386 = insertelement <64 x i16> %12381, i16 %12385, i32 41
  %12387 = extractelement <64 x i32> %12176, i32 42
  %12388 = sext i32 %12387 to i64
  %12389 = getelementptr inbounds i16, i16* %10104, i64 %12388
  %12390 = load i16, i16* %12389, align 2, !tbaa !382
  %12391 = insertelement <64 x i16> %12386, i16 %12390, i32 42
  %12392 = extractelement <64 x i32> %12176, i32 43
  %12393 = sext i32 %12392 to i64
  %12394 = getelementptr inbounds i16, i16* %10104, i64 %12393
  %12395 = load i16, i16* %12394, align 2, !tbaa !382
  %12396 = insertelement <64 x i16> %12391, i16 %12395, i32 43
  %12397 = extractelement <64 x i32> %12176, i32 44
  %12398 = sext i32 %12397 to i64
  %12399 = getelementptr inbounds i16, i16* %10104, i64 %12398
  %12400 = load i16, i16* %12399, align 2, !tbaa !382
  %12401 = insertelement <64 x i16> %12396, i16 %12400, i32 44
  %12402 = extractelement <64 x i32> %12176, i32 45
  %12403 = sext i32 %12402 to i64
  %12404 = getelementptr inbounds i16, i16* %10104, i64 %12403
  %12405 = load i16, i16* %12404, align 2, !tbaa !382
  %12406 = insertelement <64 x i16> %12401, i16 %12405, i32 45
  %12407 = extractelement <64 x i32> %12176, i32 46
  %12408 = sext i32 %12407 to i64
  %12409 = getelementptr inbounds i16, i16* %10104, i64 %12408
  %12410 = load i16, i16* %12409, align 2, !tbaa !382
  %12411 = insertelement <64 x i16> %12406, i16 %12410, i32 46
  %12412 = extractelement <64 x i32> %12176, i32 47
  %12413 = sext i32 %12412 to i64
  %12414 = getelementptr inbounds i16, i16* %10104, i64 %12413
  %12415 = load i16, i16* %12414, align 2, !tbaa !382
  %12416 = insertelement <64 x i16> %12411, i16 %12415, i32 47
  %12417 = extractelement <64 x i32> %12176, i32 48
  %12418 = sext i32 %12417 to i64
  %12419 = getelementptr inbounds i16, i16* %10104, i64 %12418
  %12420 = load i16, i16* %12419, align 2, !tbaa !382
  %12421 = insertelement <64 x i16> %12416, i16 %12420, i32 48
  %12422 = extractelement <64 x i32> %12176, i32 49
  %12423 = sext i32 %12422 to i64
  %12424 = getelementptr inbounds i16, i16* %10104, i64 %12423
  %12425 = load i16, i16* %12424, align 2, !tbaa !382
  %12426 = insertelement <64 x i16> %12421, i16 %12425, i32 49
  %12427 = extractelement <64 x i32> %12176, i32 50
  %12428 = sext i32 %12427 to i64
  %12429 = getelementptr inbounds i16, i16* %10104, i64 %12428
  %12430 = load i16, i16* %12429, align 2, !tbaa !382
  %12431 = insertelement <64 x i16> %12426, i16 %12430, i32 50
  %12432 = extractelement <64 x i32> %12176, i32 51
  %12433 = sext i32 %12432 to i64
  %12434 = getelementptr inbounds i16, i16* %10104, i64 %12433
  %12435 = load i16, i16* %12434, align 2, !tbaa !382
  %12436 = insertelement <64 x i16> %12431, i16 %12435, i32 51
  %12437 = extractelement <64 x i32> %12176, i32 52
  %12438 = sext i32 %12437 to i64
  %12439 = getelementptr inbounds i16, i16* %10104, i64 %12438
  %12440 = load i16, i16* %12439, align 2, !tbaa !382
  %12441 = insertelement <64 x i16> %12436, i16 %12440, i32 52
  %12442 = extractelement <64 x i32> %12176, i32 53
  %12443 = sext i32 %12442 to i64
  %12444 = getelementptr inbounds i16, i16* %10104, i64 %12443
  %12445 = load i16, i16* %12444, align 2, !tbaa !382
  %12446 = insertelement <64 x i16> %12441, i16 %12445, i32 53
  %12447 = extractelement <64 x i32> %12176, i32 54
  %12448 = sext i32 %12447 to i64
  %12449 = getelementptr inbounds i16, i16* %10104, i64 %12448
  %12450 = load i16, i16* %12449, align 2, !tbaa !382
  %12451 = insertelement <64 x i16> %12446, i16 %12450, i32 54
  %12452 = extractelement <64 x i32> %12176, i32 55
  %12453 = sext i32 %12452 to i64
  %12454 = getelementptr inbounds i16, i16* %10104, i64 %12453
  %12455 = load i16, i16* %12454, align 2, !tbaa !382
  %12456 = insertelement <64 x i16> %12451, i16 %12455, i32 55
  %12457 = extractelement <64 x i32> %12176, i32 56
  %12458 = sext i32 %12457 to i64
  %12459 = getelementptr inbounds i16, i16* %10104, i64 %12458
  %12460 = load i16, i16* %12459, align 2, !tbaa !382
  %12461 = insertelement <64 x i16> %12456, i16 %12460, i32 56
  %12462 = extractelement <64 x i32> %12176, i32 57
  %12463 = sext i32 %12462 to i64
  %12464 = getelementptr inbounds i16, i16* %10104, i64 %12463
  %12465 = load i16, i16* %12464, align 2, !tbaa !382
  %12466 = insertelement <64 x i16> %12461, i16 %12465, i32 57
  %12467 = extractelement <64 x i32> %12176, i32 58
  %12468 = sext i32 %12467 to i64
  %12469 = getelementptr inbounds i16, i16* %10104, i64 %12468
  %12470 = load i16, i16* %12469, align 2, !tbaa !382
  %12471 = insertelement <64 x i16> %12466, i16 %12470, i32 58
  %12472 = extractelement <64 x i32> %12176, i32 59
  %12473 = sext i32 %12472 to i64
  %12474 = getelementptr inbounds i16, i16* %10104, i64 %12473
  %12475 = load i16, i16* %12474, align 2, !tbaa !382
  %12476 = insertelement <64 x i16> %12471, i16 %12475, i32 59
  %12477 = extractelement <64 x i32> %12176, i32 60
  %12478 = sext i32 %12477 to i64
  %12479 = getelementptr inbounds i16, i16* %10104, i64 %12478
  %12480 = load i16, i16* %12479, align 2, !tbaa !382
  %12481 = insertelement <64 x i16> %12476, i16 %12480, i32 60
  %12482 = extractelement <64 x i32> %12176, i32 61
  %12483 = sext i32 %12482 to i64
  %12484 = getelementptr inbounds i16, i16* %10104, i64 %12483
  %12485 = load i16, i16* %12484, align 2, !tbaa !382
  %12486 = insertelement <64 x i16> %12481, i16 %12485, i32 61
  %12487 = extractelement <64 x i32> %12176, i32 62
  %12488 = sext i32 %12487 to i64
  %12489 = getelementptr inbounds i16, i16* %10104, i64 %12488
  %12490 = load i16, i16* %12489, align 2, !tbaa !382
  %12491 = insertelement <64 x i16> %12486, i16 %12490, i32 62
  %12492 = extractelement <64 x i32> %12176, i32 63
  %12493 = sext i32 %12492 to i64
  %12494 = getelementptr inbounds i16, i16* %10104, i64 %12493
  %12495 = load i16, i16* %12494, align 2, !tbaa !382
  %12496 = insertelement <64 x i16> %12491, i16 %12495, i32 63
  %12497 = add nsw i32 %blur_x.s0.x.v1.base.s57, -59
  %12498 = insertelement <64 x i32> undef, i32 %12497, i32 0
  %12499 = shufflevector <64 x i32> %12498, <64 x i32> undef, <64 x i32> zeroinitializer
  %12500 = add nsw <64 x i32> %12499, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %12501 = shufflevector <64 x i32> %12500, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12502 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12501, <4 x i32> %10103)
  %12503 = shufflevector <64 x i32> %12500, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12504 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12503, <4 x i32> %10103)
  %12505 = shufflevector <64 x i32> %12500, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %12506 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12505, <4 x i32> %10103)
  %12507 = shufflevector <64 x i32> %12500, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %12508 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12507, <4 x i32> %10103)
  %12509 = shufflevector <64 x i32> %12500, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %12510 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12509, <4 x i32> %10103)
  %12511 = shufflevector <64 x i32> %12500, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %12512 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12511, <4 x i32> %10103)
  %12513 = shufflevector <64 x i32> %12500, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %12514 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12513, <4 x i32> %10103)
  %12515 = shufflevector <64 x i32> %12500, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %12516 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12515, <4 x i32> %10103)
  %12517 = shufflevector <64 x i32> %12500, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %12518 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12517, <4 x i32> %10103)
  %12519 = shufflevector <64 x i32> %12500, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %12520 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12519, <4 x i32> %10103)
  %12521 = shufflevector <64 x i32> %12500, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %12522 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12521, <4 x i32> %10103)
  %12523 = shufflevector <64 x i32> %12500, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %12524 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12523, <4 x i32> %10103)
  %12525 = shufflevector <64 x i32> %12500, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %12526 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12525, <4 x i32> %10103)
  %12527 = shufflevector <64 x i32> %12500, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %12528 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12527, <4 x i32> %10103)
  %12529 = shufflevector <64 x i32> %12500, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %12530 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12529, <4 x i32> %10103)
  %12531 = shufflevector <64 x i32> %12500, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %12532 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12531, <4 x i32> %10103)
  %12533 = shufflevector <4 x i32> %12532, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %12534 = shufflevector <8 x i32> %12533, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %12535 = shufflevector <16 x i32> %12534, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %12536 = shufflevector <32 x i32> %12535, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %12537 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12502, <4 x i32> zeroinitializer)
  %12538 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12504, <4 x i32> zeroinitializer)
  %12539 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12506, <4 x i32> zeroinitializer)
  %12540 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12508, <4 x i32> zeroinitializer)
  %12541 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12510, <4 x i32> zeroinitializer)
  %12542 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12512, <4 x i32> zeroinitializer)
  %12543 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12514, <4 x i32> zeroinitializer)
  %12544 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12516, <4 x i32> zeroinitializer)
  %12545 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12518, <4 x i32> zeroinitializer)
  %12546 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12520, <4 x i32> zeroinitializer)
  %12547 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12522, <4 x i32> zeroinitializer)
  %12548 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12524, <4 x i32> zeroinitializer)
  %12549 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12526, <4 x i32> zeroinitializer)
  %12550 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12528, <4 x i32> zeroinitializer)
  %12551 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12530, <4 x i32> zeroinitializer)
  %12552 = shufflevector <64 x i32> %12536, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %12553 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12552, <4 x i32> zeroinitializer)
  %12554 = shufflevector <4 x i32> %12537, <4 x i32> %12538, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12555 = shufflevector <4 x i32> %12539, <4 x i32> %12540, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12556 = shufflevector <4 x i32> %12541, <4 x i32> %12542, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12557 = shufflevector <4 x i32> %12543, <4 x i32> %12544, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12558 = shufflevector <4 x i32> %12545, <4 x i32> %12546, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12559 = shufflevector <4 x i32> %12547, <4 x i32> %12548, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12560 = shufflevector <4 x i32> %12549, <4 x i32> %12550, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12561 = shufflevector <4 x i32> %12551, <4 x i32> %12553, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12562 = shufflevector <8 x i32> %12554, <8 x i32> %12555, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12563 = shufflevector <8 x i32> %12556, <8 x i32> %12557, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12564 = shufflevector <8 x i32> %12558, <8 x i32> %12559, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12565 = shufflevector <8 x i32> %12560, <8 x i32> %12561, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12566 = shufflevector <16 x i32> %12562, <16 x i32> %12563, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12567 = shufflevector <16 x i32> %12564, <16 x i32> %12565, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12568 = shufflevector <32 x i32> %12566, <32 x i32> %12567, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %12569 = add nsw <64 x i32> %12568, %t24858
  %12570 = extractelement <64 x i32> %12569, i32 0
  %12571 = sext i32 %12570 to i64
  %12572 = getelementptr inbounds i16, i16* %10104, i64 %12571
  %12573 = load i16, i16* %12572, align 2, !tbaa !382
  %12574 = insertelement <64 x i16> undef, i16 %12573, i32 0
  %12575 = extractelement <64 x i32> %12569, i32 1
  %12576 = sext i32 %12575 to i64
  %12577 = getelementptr inbounds i16, i16* %10104, i64 %12576
  %12578 = load i16, i16* %12577, align 2, !tbaa !382
  %12579 = insertelement <64 x i16> %12574, i16 %12578, i32 1
  %12580 = extractelement <64 x i32> %12569, i32 2
  %12581 = sext i32 %12580 to i64
  %12582 = getelementptr inbounds i16, i16* %10104, i64 %12581
  %12583 = load i16, i16* %12582, align 2, !tbaa !382
  %12584 = insertelement <64 x i16> %12579, i16 %12583, i32 2
  %12585 = extractelement <64 x i32> %12569, i32 3
  %12586 = sext i32 %12585 to i64
  %12587 = getelementptr inbounds i16, i16* %10104, i64 %12586
  %12588 = load i16, i16* %12587, align 2, !tbaa !382
  %12589 = insertelement <64 x i16> %12584, i16 %12588, i32 3
  %12590 = extractelement <64 x i32> %12569, i32 4
  %12591 = sext i32 %12590 to i64
  %12592 = getelementptr inbounds i16, i16* %10104, i64 %12591
  %12593 = load i16, i16* %12592, align 2, !tbaa !382
  %12594 = insertelement <64 x i16> %12589, i16 %12593, i32 4
  %12595 = extractelement <64 x i32> %12569, i32 5
  %12596 = sext i32 %12595 to i64
  %12597 = getelementptr inbounds i16, i16* %10104, i64 %12596
  %12598 = load i16, i16* %12597, align 2, !tbaa !382
  %12599 = insertelement <64 x i16> %12594, i16 %12598, i32 5
  %12600 = extractelement <64 x i32> %12569, i32 6
  %12601 = sext i32 %12600 to i64
  %12602 = getelementptr inbounds i16, i16* %10104, i64 %12601
  %12603 = load i16, i16* %12602, align 2, !tbaa !382
  %12604 = insertelement <64 x i16> %12599, i16 %12603, i32 6
  %12605 = extractelement <64 x i32> %12569, i32 7
  %12606 = sext i32 %12605 to i64
  %12607 = getelementptr inbounds i16, i16* %10104, i64 %12606
  %12608 = load i16, i16* %12607, align 2, !tbaa !382
  %12609 = insertelement <64 x i16> %12604, i16 %12608, i32 7
  %12610 = extractelement <64 x i32> %12569, i32 8
  %12611 = sext i32 %12610 to i64
  %12612 = getelementptr inbounds i16, i16* %10104, i64 %12611
  %12613 = load i16, i16* %12612, align 2, !tbaa !382
  %12614 = insertelement <64 x i16> %12609, i16 %12613, i32 8
  %12615 = extractelement <64 x i32> %12569, i32 9
  %12616 = sext i32 %12615 to i64
  %12617 = getelementptr inbounds i16, i16* %10104, i64 %12616
  %12618 = load i16, i16* %12617, align 2, !tbaa !382
  %12619 = insertelement <64 x i16> %12614, i16 %12618, i32 9
  %12620 = extractelement <64 x i32> %12569, i32 10
  %12621 = sext i32 %12620 to i64
  %12622 = getelementptr inbounds i16, i16* %10104, i64 %12621
  %12623 = load i16, i16* %12622, align 2, !tbaa !382
  %12624 = insertelement <64 x i16> %12619, i16 %12623, i32 10
  %12625 = extractelement <64 x i32> %12569, i32 11
  %12626 = sext i32 %12625 to i64
  %12627 = getelementptr inbounds i16, i16* %10104, i64 %12626
  %12628 = load i16, i16* %12627, align 2, !tbaa !382
  %12629 = insertelement <64 x i16> %12624, i16 %12628, i32 11
  %12630 = extractelement <64 x i32> %12569, i32 12
  %12631 = sext i32 %12630 to i64
  %12632 = getelementptr inbounds i16, i16* %10104, i64 %12631
  %12633 = load i16, i16* %12632, align 2, !tbaa !382
  %12634 = insertelement <64 x i16> %12629, i16 %12633, i32 12
  %12635 = extractelement <64 x i32> %12569, i32 13
  %12636 = sext i32 %12635 to i64
  %12637 = getelementptr inbounds i16, i16* %10104, i64 %12636
  %12638 = load i16, i16* %12637, align 2, !tbaa !382
  %12639 = insertelement <64 x i16> %12634, i16 %12638, i32 13
  %12640 = extractelement <64 x i32> %12569, i32 14
  %12641 = sext i32 %12640 to i64
  %12642 = getelementptr inbounds i16, i16* %10104, i64 %12641
  %12643 = load i16, i16* %12642, align 2, !tbaa !382
  %12644 = insertelement <64 x i16> %12639, i16 %12643, i32 14
  %12645 = extractelement <64 x i32> %12569, i32 15
  %12646 = sext i32 %12645 to i64
  %12647 = getelementptr inbounds i16, i16* %10104, i64 %12646
  %12648 = load i16, i16* %12647, align 2, !tbaa !382
  %12649 = insertelement <64 x i16> %12644, i16 %12648, i32 15
  %12650 = extractelement <64 x i32> %12569, i32 16
  %12651 = sext i32 %12650 to i64
  %12652 = getelementptr inbounds i16, i16* %10104, i64 %12651
  %12653 = load i16, i16* %12652, align 2, !tbaa !382
  %12654 = insertelement <64 x i16> %12649, i16 %12653, i32 16
  %12655 = extractelement <64 x i32> %12569, i32 17
  %12656 = sext i32 %12655 to i64
  %12657 = getelementptr inbounds i16, i16* %10104, i64 %12656
  %12658 = load i16, i16* %12657, align 2, !tbaa !382
  %12659 = insertelement <64 x i16> %12654, i16 %12658, i32 17
  %12660 = extractelement <64 x i32> %12569, i32 18
  %12661 = sext i32 %12660 to i64
  %12662 = getelementptr inbounds i16, i16* %10104, i64 %12661
  %12663 = load i16, i16* %12662, align 2, !tbaa !382
  %12664 = insertelement <64 x i16> %12659, i16 %12663, i32 18
  %12665 = extractelement <64 x i32> %12569, i32 19
  %12666 = sext i32 %12665 to i64
  %12667 = getelementptr inbounds i16, i16* %10104, i64 %12666
  %12668 = load i16, i16* %12667, align 2, !tbaa !382
  %12669 = insertelement <64 x i16> %12664, i16 %12668, i32 19
  %12670 = extractelement <64 x i32> %12569, i32 20
  %12671 = sext i32 %12670 to i64
  %12672 = getelementptr inbounds i16, i16* %10104, i64 %12671
  %12673 = load i16, i16* %12672, align 2, !tbaa !382
  %12674 = insertelement <64 x i16> %12669, i16 %12673, i32 20
  %12675 = extractelement <64 x i32> %12569, i32 21
  %12676 = sext i32 %12675 to i64
  %12677 = getelementptr inbounds i16, i16* %10104, i64 %12676
  %12678 = load i16, i16* %12677, align 2, !tbaa !382
  %12679 = insertelement <64 x i16> %12674, i16 %12678, i32 21
  %12680 = extractelement <64 x i32> %12569, i32 22
  %12681 = sext i32 %12680 to i64
  %12682 = getelementptr inbounds i16, i16* %10104, i64 %12681
  %12683 = load i16, i16* %12682, align 2, !tbaa !382
  %12684 = insertelement <64 x i16> %12679, i16 %12683, i32 22
  %12685 = extractelement <64 x i32> %12569, i32 23
  %12686 = sext i32 %12685 to i64
  %12687 = getelementptr inbounds i16, i16* %10104, i64 %12686
  %12688 = load i16, i16* %12687, align 2, !tbaa !382
  %12689 = insertelement <64 x i16> %12684, i16 %12688, i32 23
  %12690 = extractelement <64 x i32> %12569, i32 24
  %12691 = sext i32 %12690 to i64
  %12692 = getelementptr inbounds i16, i16* %10104, i64 %12691
  %12693 = load i16, i16* %12692, align 2, !tbaa !382
  %12694 = insertelement <64 x i16> %12689, i16 %12693, i32 24
  %12695 = extractelement <64 x i32> %12569, i32 25
  %12696 = sext i32 %12695 to i64
  %12697 = getelementptr inbounds i16, i16* %10104, i64 %12696
  %12698 = load i16, i16* %12697, align 2, !tbaa !382
  %12699 = insertelement <64 x i16> %12694, i16 %12698, i32 25
  %12700 = extractelement <64 x i32> %12569, i32 26
  %12701 = sext i32 %12700 to i64
  %12702 = getelementptr inbounds i16, i16* %10104, i64 %12701
  %12703 = load i16, i16* %12702, align 2, !tbaa !382
  %12704 = insertelement <64 x i16> %12699, i16 %12703, i32 26
  %12705 = extractelement <64 x i32> %12569, i32 27
  %12706 = sext i32 %12705 to i64
  %12707 = getelementptr inbounds i16, i16* %10104, i64 %12706
  %12708 = load i16, i16* %12707, align 2, !tbaa !382
  %12709 = insertelement <64 x i16> %12704, i16 %12708, i32 27
  %12710 = extractelement <64 x i32> %12569, i32 28
  %12711 = sext i32 %12710 to i64
  %12712 = getelementptr inbounds i16, i16* %10104, i64 %12711
  %12713 = load i16, i16* %12712, align 2, !tbaa !382
  %12714 = insertelement <64 x i16> %12709, i16 %12713, i32 28
  %12715 = extractelement <64 x i32> %12569, i32 29
  %12716 = sext i32 %12715 to i64
  %12717 = getelementptr inbounds i16, i16* %10104, i64 %12716
  %12718 = load i16, i16* %12717, align 2, !tbaa !382
  %12719 = insertelement <64 x i16> %12714, i16 %12718, i32 29
  %12720 = extractelement <64 x i32> %12569, i32 30
  %12721 = sext i32 %12720 to i64
  %12722 = getelementptr inbounds i16, i16* %10104, i64 %12721
  %12723 = load i16, i16* %12722, align 2, !tbaa !382
  %12724 = insertelement <64 x i16> %12719, i16 %12723, i32 30
  %12725 = extractelement <64 x i32> %12569, i32 31
  %12726 = sext i32 %12725 to i64
  %12727 = getelementptr inbounds i16, i16* %10104, i64 %12726
  %12728 = load i16, i16* %12727, align 2, !tbaa !382
  %12729 = insertelement <64 x i16> %12724, i16 %12728, i32 31
  %12730 = extractelement <64 x i32> %12569, i32 32
  %12731 = sext i32 %12730 to i64
  %12732 = getelementptr inbounds i16, i16* %10104, i64 %12731
  %12733 = load i16, i16* %12732, align 2, !tbaa !382
  %12734 = insertelement <64 x i16> %12729, i16 %12733, i32 32
  %12735 = extractelement <64 x i32> %12569, i32 33
  %12736 = sext i32 %12735 to i64
  %12737 = getelementptr inbounds i16, i16* %10104, i64 %12736
  %12738 = load i16, i16* %12737, align 2, !tbaa !382
  %12739 = insertelement <64 x i16> %12734, i16 %12738, i32 33
  %12740 = extractelement <64 x i32> %12569, i32 34
  %12741 = sext i32 %12740 to i64
  %12742 = getelementptr inbounds i16, i16* %10104, i64 %12741
  %12743 = load i16, i16* %12742, align 2, !tbaa !382
  %12744 = insertelement <64 x i16> %12739, i16 %12743, i32 34
  %12745 = extractelement <64 x i32> %12569, i32 35
  %12746 = sext i32 %12745 to i64
  %12747 = getelementptr inbounds i16, i16* %10104, i64 %12746
  %12748 = load i16, i16* %12747, align 2, !tbaa !382
  %12749 = insertelement <64 x i16> %12744, i16 %12748, i32 35
  %12750 = extractelement <64 x i32> %12569, i32 36
  %12751 = sext i32 %12750 to i64
  %12752 = getelementptr inbounds i16, i16* %10104, i64 %12751
  %12753 = load i16, i16* %12752, align 2, !tbaa !382
  %12754 = insertelement <64 x i16> %12749, i16 %12753, i32 36
  %12755 = extractelement <64 x i32> %12569, i32 37
  %12756 = sext i32 %12755 to i64
  %12757 = getelementptr inbounds i16, i16* %10104, i64 %12756
  %12758 = load i16, i16* %12757, align 2, !tbaa !382
  %12759 = insertelement <64 x i16> %12754, i16 %12758, i32 37
  %12760 = extractelement <64 x i32> %12569, i32 38
  %12761 = sext i32 %12760 to i64
  %12762 = getelementptr inbounds i16, i16* %10104, i64 %12761
  %12763 = load i16, i16* %12762, align 2, !tbaa !382
  %12764 = insertelement <64 x i16> %12759, i16 %12763, i32 38
  %12765 = extractelement <64 x i32> %12569, i32 39
  %12766 = sext i32 %12765 to i64
  %12767 = getelementptr inbounds i16, i16* %10104, i64 %12766
  %12768 = load i16, i16* %12767, align 2, !tbaa !382
  %12769 = insertelement <64 x i16> %12764, i16 %12768, i32 39
  %12770 = extractelement <64 x i32> %12569, i32 40
  %12771 = sext i32 %12770 to i64
  %12772 = getelementptr inbounds i16, i16* %10104, i64 %12771
  %12773 = load i16, i16* %12772, align 2, !tbaa !382
  %12774 = insertelement <64 x i16> %12769, i16 %12773, i32 40
  %12775 = extractelement <64 x i32> %12569, i32 41
  %12776 = sext i32 %12775 to i64
  %12777 = getelementptr inbounds i16, i16* %10104, i64 %12776
  %12778 = load i16, i16* %12777, align 2, !tbaa !382
  %12779 = insertelement <64 x i16> %12774, i16 %12778, i32 41
  %12780 = extractelement <64 x i32> %12569, i32 42
  %12781 = sext i32 %12780 to i64
  %12782 = getelementptr inbounds i16, i16* %10104, i64 %12781
  %12783 = load i16, i16* %12782, align 2, !tbaa !382
  %12784 = insertelement <64 x i16> %12779, i16 %12783, i32 42
  %12785 = extractelement <64 x i32> %12569, i32 43
  %12786 = sext i32 %12785 to i64
  %12787 = getelementptr inbounds i16, i16* %10104, i64 %12786
  %12788 = load i16, i16* %12787, align 2, !tbaa !382
  %12789 = insertelement <64 x i16> %12784, i16 %12788, i32 43
  %12790 = extractelement <64 x i32> %12569, i32 44
  %12791 = sext i32 %12790 to i64
  %12792 = getelementptr inbounds i16, i16* %10104, i64 %12791
  %12793 = load i16, i16* %12792, align 2, !tbaa !382
  %12794 = insertelement <64 x i16> %12789, i16 %12793, i32 44
  %12795 = extractelement <64 x i32> %12569, i32 45
  %12796 = sext i32 %12795 to i64
  %12797 = getelementptr inbounds i16, i16* %10104, i64 %12796
  %12798 = load i16, i16* %12797, align 2, !tbaa !382
  %12799 = insertelement <64 x i16> %12794, i16 %12798, i32 45
  %12800 = extractelement <64 x i32> %12569, i32 46
  %12801 = sext i32 %12800 to i64
  %12802 = getelementptr inbounds i16, i16* %10104, i64 %12801
  %12803 = load i16, i16* %12802, align 2, !tbaa !382
  %12804 = insertelement <64 x i16> %12799, i16 %12803, i32 46
  %12805 = extractelement <64 x i32> %12569, i32 47
  %12806 = sext i32 %12805 to i64
  %12807 = getelementptr inbounds i16, i16* %10104, i64 %12806
  %12808 = load i16, i16* %12807, align 2, !tbaa !382
  %12809 = insertelement <64 x i16> %12804, i16 %12808, i32 47
  %12810 = extractelement <64 x i32> %12569, i32 48
  %12811 = sext i32 %12810 to i64
  %12812 = getelementptr inbounds i16, i16* %10104, i64 %12811
  %12813 = load i16, i16* %12812, align 2, !tbaa !382
  %12814 = insertelement <64 x i16> %12809, i16 %12813, i32 48
  %12815 = extractelement <64 x i32> %12569, i32 49
  %12816 = sext i32 %12815 to i64
  %12817 = getelementptr inbounds i16, i16* %10104, i64 %12816
  %12818 = load i16, i16* %12817, align 2, !tbaa !382
  %12819 = insertelement <64 x i16> %12814, i16 %12818, i32 49
  %12820 = extractelement <64 x i32> %12569, i32 50
  %12821 = sext i32 %12820 to i64
  %12822 = getelementptr inbounds i16, i16* %10104, i64 %12821
  %12823 = load i16, i16* %12822, align 2, !tbaa !382
  %12824 = insertelement <64 x i16> %12819, i16 %12823, i32 50
  %12825 = extractelement <64 x i32> %12569, i32 51
  %12826 = sext i32 %12825 to i64
  %12827 = getelementptr inbounds i16, i16* %10104, i64 %12826
  %12828 = load i16, i16* %12827, align 2, !tbaa !382
  %12829 = insertelement <64 x i16> %12824, i16 %12828, i32 51
  %12830 = extractelement <64 x i32> %12569, i32 52
  %12831 = sext i32 %12830 to i64
  %12832 = getelementptr inbounds i16, i16* %10104, i64 %12831
  %12833 = load i16, i16* %12832, align 2, !tbaa !382
  %12834 = insertelement <64 x i16> %12829, i16 %12833, i32 52
  %12835 = extractelement <64 x i32> %12569, i32 53
  %12836 = sext i32 %12835 to i64
  %12837 = getelementptr inbounds i16, i16* %10104, i64 %12836
  %12838 = load i16, i16* %12837, align 2, !tbaa !382
  %12839 = insertelement <64 x i16> %12834, i16 %12838, i32 53
  %12840 = extractelement <64 x i32> %12569, i32 54
  %12841 = sext i32 %12840 to i64
  %12842 = getelementptr inbounds i16, i16* %10104, i64 %12841
  %12843 = load i16, i16* %12842, align 2, !tbaa !382
  %12844 = insertelement <64 x i16> %12839, i16 %12843, i32 54
  %12845 = extractelement <64 x i32> %12569, i32 55
  %12846 = sext i32 %12845 to i64
  %12847 = getelementptr inbounds i16, i16* %10104, i64 %12846
  %12848 = load i16, i16* %12847, align 2, !tbaa !382
  %12849 = insertelement <64 x i16> %12844, i16 %12848, i32 55
  %12850 = extractelement <64 x i32> %12569, i32 56
  %12851 = sext i32 %12850 to i64
  %12852 = getelementptr inbounds i16, i16* %10104, i64 %12851
  %12853 = load i16, i16* %12852, align 2, !tbaa !382
  %12854 = insertelement <64 x i16> %12849, i16 %12853, i32 56
  %12855 = extractelement <64 x i32> %12569, i32 57
  %12856 = sext i32 %12855 to i64
  %12857 = getelementptr inbounds i16, i16* %10104, i64 %12856
  %12858 = load i16, i16* %12857, align 2, !tbaa !382
  %12859 = insertelement <64 x i16> %12854, i16 %12858, i32 57
  %12860 = extractelement <64 x i32> %12569, i32 58
  %12861 = sext i32 %12860 to i64
  %12862 = getelementptr inbounds i16, i16* %10104, i64 %12861
  %12863 = load i16, i16* %12862, align 2, !tbaa !382
  %12864 = insertelement <64 x i16> %12859, i16 %12863, i32 58
  %12865 = extractelement <64 x i32> %12569, i32 59
  %12866 = sext i32 %12865 to i64
  %12867 = getelementptr inbounds i16, i16* %10104, i64 %12866
  %12868 = load i16, i16* %12867, align 2, !tbaa !382
  %12869 = insertelement <64 x i16> %12864, i16 %12868, i32 59
  %12870 = extractelement <64 x i32> %12569, i32 60
  %12871 = sext i32 %12870 to i64
  %12872 = getelementptr inbounds i16, i16* %10104, i64 %12871
  %12873 = load i16, i16* %12872, align 2, !tbaa !382
  %12874 = insertelement <64 x i16> %12869, i16 %12873, i32 60
  %12875 = extractelement <64 x i32> %12569, i32 61
  %12876 = sext i32 %12875 to i64
  %12877 = getelementptr inbounds i16, i16* %10104, i64 %12876
  %12878 = load i16, i16* %12877, align 2, !tbaa !382
  %12879 = insertelement <64 x i16> %12874, i16 %12878, i32 61
  %12880 = extractelement <64 x i32> %12569, i32 62
  %12881 = sext i32 %12880 to i64
  %12882 = getelementptr inbounds i16, i16* %10104, i64 %12881
  %12883 = load i16, i16* %12882, align 2, !tbaa !382
  %12884 = insertelement <64 x i16> %12879, i16 %12883, i32 62
  %12885 = extractelement <64 x i32> %12569, i32 63
  %12886 = sext i32 %12885 to i64
  %12887 = getelementptr inbounds i16, i16* %10104, i64 %12886
  %12888 = load i16, i16* %12887, align 2, !tbaa !382
  %12889 = insertelement <64 x i16> %12884, i16 %12888, i32 63
  %12890 = add <64 x i16> %10924, %10531
  %12891 = add <64 x i16> %12890, %11317
  %12892 = add <64 x i16> %12891, %11710
  %12893 = add <64 x i16> %12892, %12103
  %12894 = add <64 x i16> %12893, %12496
  %12895 = add <64 x i16> %12894, %12889
  %12896 = shufflevector <64 x i16> %12895, <64 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12897 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12896, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %12898 = shufflevector <64 x i16> %12895, <64 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12899 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12898, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %12900 = shufflevector <64 x i16> %12895, <64 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %12901 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12900, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %12902 = shufflevector <64 x i16> %12895, <64 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %12903 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12902, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %12904 = shufflevector <64 x i16> %12895, <64 x i16> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %12905 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12904, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %12906 = shufflevector <64 x i16> %12895, <64 x i16> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %12907 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12906, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %12908 = shufflevector <64 x i16> %12895, <64 x i16> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %12909 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12908, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %12910 = shufflevector <64 x i16> %12895, <64 x i16> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %12911 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12910, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %12912 = shufflevector <64 x i16> %12895, <64 x i16> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %12913 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12912, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %12914 = shufflevector <64 x i16> %12895, <64 x i16> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %12915 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12914, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %12916 = shufflevector <64 x i16> %12895, <64 x i16> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %12917 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12916, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %12918 = shufflevector <64 x i16> %12895, <64 x i16> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %12919 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12918, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %12920 = shufflevector <64 x i16> %12895, <64 x i16> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %12921 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12920, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %12922 = shufflevector <64 x i16> %12895, <64 x i16> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %12923 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12922, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %12924 = shufflevector <64 x i16> %12895, <64 x i16> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %12925 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12924, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %12926 = shufflevector <64 x i16> %12895, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %12927 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12926, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %12928 = shufflevector <4 x i32> %12897, <4 x i32> %12899, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12929 = shufflevector <4 x i32> %12901, <4 x i32> %12903, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12930 = shufflevector <4 x i32> %12905, <4 x i32> %12907, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12931 = shufflevector <4 x i32> %12909, <4 x i32> %12911, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12932 = shufflevector <4 x i32> %12913, <4 x i32> %12915, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12933 = shufflevector <4 x i32> %12917, <4 x i32> %12919, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12934 = shufflevector <4 x i32> %12921, <4 x i32> %12923, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12935 = shufflevector <4 x i32> %12925, <4 x i32> %12927, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12936 = shufflevector <8 x i32> %12928, <8 x i32> %12929, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12937 = shufflevector <8 x i32> %12930, <8 x i32> %12931, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12938 = shufflevector <8 x i32> %12932, <8 x i32> %12933, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12939 = shufflevector <8 x i32> %12934, <8 x i32> %12935, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12940 = shufflevector <16 x i32> %12936, <16 x i32> %12937, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12941 = shufflevector <16 x i32> %12938, <16 x i32> %12939, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12942 = shufflevector <32 x i32> %12940, <32 x i32> %12941, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %12943 = lshr <64 x i32> %12942, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %12944 = trunc <64 x i32> %12943 to <64 x i16>
  %12945 = shufflevector <64 x i16> %12944, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12946 = shufflevector <64 x i16> %12895, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12947 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %12945, <8 x i16> %12946)
  %12948 = shufflevector <64 x i16> %12944, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12949 = shufflevector <64 x i16> %12895, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12950 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %12948, <8 x i16> %12949)
  %12951 = shufflevector <64 x i16> %12944, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %12952 = shufflevector <64 x i16> %12895, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %12953 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %12951, <8 x i16> %12952)
  %12954 = shufflevector <64 x i16> %12944, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12955 = shufflevector <64 x i16> %12895, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12956 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %12954, <8 x i16> %12955)
  %12957 = shufflevector <64 x i16> %12944, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %12958 = shufflevector <64 x i16> %12895, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %12959 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %12957, <8 x i16> %12958)
  %12960 = shufflevector <64 x i16> %12944, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %12961 = shufflevector <64 x i16> %12895, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %12962 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %12960, <8 x i16> %12961)
  %12963 = shufflevector <64 x i16> %12944, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %12964 = shufflevector <64 x i16> %12895, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %12965 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %12963, <8 x i16> %12964)
  %12966 = shufflevector <64 x i16> %12944, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %12967 = shufflevector <64 x i16> %12895, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %12968 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %12966, <8 x i16> %12967)
  %12969 = shufflevector <8 x i16> %12947, <8 x i16> %12950, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12970 = shufflevector <8 x i16> %12953, <8 x i16> %12956, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12971 = shufflevector <8 x i16> %12959, <8 x i16> %12962, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12972 = shufflevector <8 x i16> %12965, <8 x i16> %12968, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12973 = shufflevector <16 x i16> %12969, <16 x i16> %12970, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12974 = shufflevector <16 x i16> %12971, <16 x i16> %12972, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12975 = shufflevector <32 x i16> %12973, <32 x i16> %12974, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %12976 = lshr <64 x i16> %12975, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12977 = shufflevector <64 x i16> %12976, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12978 = sext i32 %blur_x.s0.x.v1.base.s57 to i64
  %12979 = add nsw i64 %10136, %12978
  %12980 = getelementptr inbounds i16, i16* %blur_x47, i64 %12979
  %12981 = bitcast i16* %12980 to <8 x i16>*
  store <8 x i16> %12977, <8 x i16>* %12981, align 2, !tbaa !385
  %12982 = shufflevector <64 x i16> %12976, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12983 = getelementptr inbounds i16, i16* %12980, i64 8
  %12984 = bitcast i16* %12983 to <8 x i16>*
  store <8 x i16> %12982, <8 x i16>* %12984, align 2, !tbaa !385
  %12985 = shufflevector <64 x i16> %12976, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %12986 = getelementptr inbounds i16, i16* %12980, i64 16
  %12987 = bitcast i16* %12986 to <8 x i16>*
  store <8 x i16> %12985, <8 x i16>* %12987, align 2, !tbaa !385
  %12988 = shufflevector <64 x i16> %12976, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12989 = getelementptr inbounds i16, i16* %12980, i64 24
  %12990 = bitcast i16* %12989 to <8 x i16>*
  store <8 x i16> %12988, <8 x i16>* %12990, align 2, !tbaa !385
  %12991 = shufflevector <64 x i16> %12976, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %12992 = getelementptr inbounds i16, i16* %12980, i64 32
  %12993 = bitcast i16* %12992 to <8 x i16>*
  store <8 x i16> %12991, <8 x i16>* %12993, align 2, !tbaa !385
  %12994 = shufflevector <64 x i16> %12976, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %12995 = getelementptr inbounds i16, i16* %12980, i64 40
  %12996 = bitcast i16* %12995 to <8 x i16>*
  store <8 x i16> %12994, <8 x i16>* %12996, align 2, !tbaa !385
  %12997 = shufflevector <64 x i16> %12976, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %12998 = getelementptr inbounds i16, i16* %12980, i64 48
  %12999 = bitcast i16* %12998 to <8 x i16>*
  store <8 x i16> %12997, <8 x i16>* %12999, align 2, !tbaa !385
  %13000 = shufflevector <64 x i16> %12976, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %13001 = getelementptr inbounds i16, i16* %12980, i64 56
  %13002 = bitcast i16* %13001 to <8 x i16>*
  store <8 x i16> %13000, <8 x i16>* %13002, align 2, !tbaa !385
  %13003 = add nuw nsw i32 %blur_x.s0.x.x56, 1
  %.not123 = icmp eq i32 %13003, %t27542
  br i1 %.not123, label %"end for blur_x.s0.x.x55", label %"for blur_x.s0.x.x54"

"end for blur_x.s0.x.x55":                        ; preds = %"for blur_x.s0.x.x54", %"for blur_y.s0.y.yi.$n.rebased50"
  br i1 %10107, label %"for blur_x.s0.x.x.rebased60.preheader", label %"end for blur_x.s0.x.x.rebased61", !prof !381

"for blur_x.s0.x.x.rebased60.preheader":          ; preds = %"end for blur_x.s0.x.x55"
  %13004 = icmp sgt i64 %10128, 0
  %13005 = select i1 %13004, i64 %10128, i64 0
  %13006 = trunc i64 %13005 to i32
  %13007 = mul nsw i32 %input.stride.135, %13006
  %13008 = and i64 %10128, 7
  %13009 = mul nsw i64 %13008, %10105
  %13010 = sub nsw i64 %13009, %10106
  %indvars.iv.next183.0 = add nuw nsw i64 0, 1
  br label %"for blur_x.s0.x.x.rebased60"

"for blur_x.s0.x.x.rebased60":                    ; preds = %"for blur_x.s0.x.x.rebased60.for blur_x.s0.x.x.rebased60_crit_edge", %"for blur_x.s0.x.x.rebased60.preheader"
  %indvars.iv.next183.phi = phi i64 [ %indvars.iv.next183.0, %"for blur_x.s0.x.x.rebased60.preheader" ], [ %indvars.iv.next183.1, %"for blur_x.s0.x.x.rebased60.for blur_x.s0.x.x.rebased60_crit_edge" ]
  %blur_x.s0.x.x.rebased62 = phi i32 [ 0, %"for blur_x.s0.x.x.rebased60.preheader" ], [ %13334, %"for blur_x.s0.x.x.rebased60.for blur_x.s0.x.x.rebased60_crit_edge" ]
  %13011 = add nsw i32 %blur_x.s0.x.x.rebased62, %t27542
  %13012 = shl nsw i32 %13011, 6
  %blur_x.s0.x.v1.base.s63 = add nsw i32 %13012, %t27441
  %t25064 = add nsw i32 %blur_x.s0.x.v1.base.s63, %13007
  %13013 = sext i32 %t25064 to i64
  %13014 = getelementptr inbounds i16, i16* %10104, i64 %13013
  %13015 = getelementptr inbounds i16, i16* %13014, i64 -63
  %13016 = bitcast i16* %13015 to <8 x i16>*
  %13017 = load <8 x i16>, <8 x i16>* %13016, align 2, !tbaa !382
  %13018 = getelementptr inbounds i16, i16* %13014, i64 -55
  %13019 = bitcast i16* %13018 to <8 x i16>*
  %13020 = load <8 x i16>, <8 x i16>* %13019, align 2, !tbaa !382
  %13021 = getelementptr inbounds i16, i16* %13014, i64 -47
  %13022 = bitcast i16* %13021 to <8 x i16>*
  %13023 = load <8 x i16>, <8 x i16>* %13022, align 2, !tbaa !382
  %13024 = getelementptr inbounds i16, i16* %13014, i64 -39
  %13025 = bitcast i16* %13024 to <8 x i16>*
  %13026 = load <8 x i16>, <8 x i16>* %13025, align 2, !tbaa !382
  %13027 = getelementptr inbounds i16, i16* %13014, i64 -31
  %13028 = bitcast i16* %13027 to <8 x i16>*
  %13029 = load <8 x i16>, <8 x i16>* %13028, align 2, !tbaa !382
  %13030 = getelementptr inbounds i16, i16* %13014, i64 -23
  %13031 = bitcast i16* %13030 to <8 x i16>*
  %13032 = load <8 x i16>, <8 x i16>* %13031, align 2, !tbaa !382
  %13033 = getelementptr inbounds i16, i16* %13014, i64 -15
  %13034 = bitcast i16* %13033 to <8 x i16>*
  %13035 = load <8 x i16>, <8 x i16>* %13034, align 2, !tbaa !382
  %13036 = getelementptr inbounds i16, i16* %13014, i64 -7
  %13037 = bitcast i16* %13036 to <8 x i16>*
  %13038 = load <8 x i16>, <8 x i16>* %13037, align 2, !tbaa !382
  %13039 = getelementptr inbounds i16, i16* %13014, i64 -64
  %13040 = bitcast i16* %13039 to <8 x i16>*
  %13041 = load <8 x i16>, <8 x i16>* %13040, align 2, !tbaa !382
  %13042 = getelementptr inbounds i16, i16* %13014, i64 -56
  %13043 = bitcast i16* %13042 to <8 x i16>*
  %13044 = load <8 x i16>, <8 x i16>* %13043, align 2, !tbaa !382
  %13045 = getelementptr inbounds i16, i16* %13014, i64 -48
  %13046 = bitcast i16* %13045 to <8 x i16>*
  %13047 = load <8 x i16>, <8 x i16>* %13046, align 2, !tbaa !382
  %13048 = getelementptr inbounds i16, i16* %13014, i64 -40
  %13049 = bitcast i16* %13048 to <8 x i16>*
  %13050 = load <8 x i16>, <8 x i16>* %13049, align 2, !tbaa !382
  %13051 = getelementptr inbounds i16, i16* %13014, i64 -32
  %13052 = bitcast i16* %13051 to <8 x i16>*
  %13053 = load <8 x i16>, <8 x i16>* %13052, align 2, !tbaa !382
  %13054 = getelementptr inbounds i16, i16* %13014, i64 -24
  %13055 = bitcast i16* %13054 to <8 x i16>*
  %13056 = load <8 x i16>, <8 x i16>* %13055, align 2, !tbaa !382
  %13057 = getelementptr inbounds i16, i16* %13014, i64 -16
  %13058 = bitcast i16* %13057 to <8 x i16>*
  %13059 = load <8 x i16>, <8 x i16>* %13058, align 2, !tbaa !382
  %13060 = getelementptr inbounds i16, i16* %13014, i64 -8
  %13061 = bitcast i16* %13060 to <8 x i16>*
  %13062 = load <8 x i16>, <8 x i16>* %13061, align 2, !tbaa !382
  %13063 = getelementptr inbounds i16, i16* %13014, i64 -62
  %13064 = bitcast i16* %13063 to <8 x i16>*
  %13065 = load <8 x i16>, <8 x i16>* %13064, align 2, !tbaa !382
  %13066 = getelementptr inbounds i16, i16* %13014, i64 -54
  %13067 = bitcast i16* %13066 to <8 x i16>*
  %13068 = load <8 x i16>, <8 x i16>* %13067, align 2, !tbaa !382
  %13069 = getelementptr inbounds i16, i16* %13014, i64 -46
  %13070 = bitcast i16* %13069 to <8 x i16>*
  %13071 = load <8 x i16>, <8 x i16>* %13070, align 2, !tbaa !382
  %13072 = getelementptr inbounds i16, i16* %13014, i64 -38
  %13073 = bitcast i16* %13072 to <8 x i16>*
  %13074 = load <8 x i16>, <8 x i16>* %13073, align 2, !tbaa !382
  %13075 = getelementptr inbounds i16, i16* %13014, i64 -30
  %13076 = bitcast i16* %13075 to <8 x i16>*
  %13077 = load <8 x i16>, <8 x i16>* %13076, align 2, !tbaa !382
  %13078 = getelementptr inbounds i16, i16* %13014, i64 -22
  %13079 = bitcast i16* %13078 to <8 x i16>*
  %13080 = load <8 x i16>, <8 x i16>* %13079, align 2, !tbaa !382
  %13081 = getelementptr inbounds i16, i16* %13014, i64 -14
  %13082 = bitcast i16* %13081 to <8 x i16>*
  %13083 = load <8 x i16>, <8 x i16>* %13082, align 2, !tbaa !382
  %13084 = getelementptr inbounds i16, i16* %13014, i64 -6
  %13085 = bitcast i16* %13084 to <8 x i16>*
  %13086 = load <8 x i16>, <8 x i16>* %13085, align 2, !tbaa !382
  %13087 = getelementptr inbounds i16, i16* %13014, i64 -61
  %13088 = bitcast i16* %13087 to <8 x i16>*
  %13089 = load <8 x i16>, <8 x i16>* %13088, align 2, !tbaa !382
  %13090 = getelementptr inbounds i16, i16* %13014, i64 -53
  %13091 = bitcast i16* %13090 to <8 x i16>*
  %13092 = load <8 x i16>, <8 x i16>* %13091, align 2, !tbaa !382
  %13093 = getelementptr inbounds i16, i16* %13014, i64 -45
  %13094 = bitcast i16* %13093 to <8 x i16>*
  %13095 = load <8 x i16>, <8 x i16>* %13094, align 2, !tbaa !382
  %13096 = getelementptr inbounds i16, i16* %13014, i64 -37
  %13097 = bitcast i16* %13096 to <8 x i16>*
  %13098 = load <8 x i16>, <8 x i16>* %13097, align 2, !tbaa !382
  %13099 = getelementptr inbounds i16, i16* %13014, i64 -29
  %13100 = bitcast i16* %13099 to <8 x i16>*
  %13101 = load <8 x i16>, <8 x i16>* %13100, align 2, !tbaa !382
  %13102 = getelementptr inbounds i16, i16* %13014, i64 -21
  %13103 = bitcast i16* %13102 to <8 x i16>*
  %13104 = load <8 x i16>, <8 x i16>* %13103, align 2, !tbaa !382
  %13105 = getelementptr inbounds i16, i16* %13014, i64 -13
  %13106 = bitcast i16* %13105 to <8 x i16>*
  %13107 = load <8 x i16>, <8 x i16>* %13106, align 2, !tbaa !382
  %13108 = getelementptr inbounds i16, i16* %13014, i64 -5
  %13109 = bitcast i16* %13108 to <8 x i16>*
  %13110 = load <8 x i16>, <8 x i16>* %13109, align 2, !tbaa !382
  %13111 = getelementptr inbounds i16, i16* %13014, i64 -60
  %13112 = bitcast i16* %13111 to <8 x i16>*
  %13113 = load <8 x i16>, <8 x i16>* %13112, align 2, !tbaa !382
  %13114 = getelementptr inbounds i16, i16* %13014, i64 -52
  %13115 = bitcast i16* %13114 to <8 x i16>*
  %13116 = load <8 x i16>, <8 x i16>* %13115, align 2, !tbaa !382
  %13117 = getelementptr inbounds i16, i16* %13014, i64 -44
  %13118 = bitcast i16* %13117 to <8 x i16>*
  %13119 = load <8 x i16>, <8 x i16>* %13118, align 2, !tbaa !382
  %13120 = getelementptr inbounds i16, i16* %13014, i64 -36
  %13121 = bitcast i16* %13120 to <8 x i16>*
  %13122 = load <8 x i16>, <8 x i16>* %13121, align 2, !tbaa !382
  %13123 = getelementptr inbounds i16, i16* %13014, i64 -28
  %13124 = bitcast i16* %13123 to <8 x i16>*
  %13125 = load <8 x i16>, <8 x i16>* %13124, align 2, !tbaa !382
  %13126 = getelementptr inbounds i16, i16* %13014, i64 -20
  %13127 = bitcast i16* %13126 to <8 x i16>*
  %13128 = load <8 x i16>, <8 x i16>* %13127, align 2, !tbaa !382
  %13129 = getelementptr inbounds i16, i16* %13014, i64 -12
  %13130 = bitcast i16* %13129 to <8 x i16>*
  %13131 = load <8 x i16>, <8 x i16>* %13130, align 2, !tbaa !382
  %13132 = getelementptr inbounds i16, i16* %13014, i64 -4
  %13133 = bitcast i16* %13132 to <8 x i16>*
  %13134 = load <8 x i16>, <8 x i16>* %13133, align 2, !tbaa !382
  %13135 = getelementptr inbounds i16, i16* %13014, i64 -58
  %13136 = bitcast i16* %13135 to <8 x i16>*
  %13137 = load <8 x i16>, <8 x i16>* %13136, align 2, !tbaa !382
  %13138 = getelementptr inbounds i16, i16* %13014, i64 -50
  %13139 = bitcast i16* %13138 to <8 x i16>*
  %13140 = load <8 x i16>, <8 x i16>* %13139, align 2, !tbaa !382
  %13141 = getelementptr inbounds i16, i16* %13014, i64 -42
  %13142 = bitcast i16* %13141 to <8 x i16>*
  %13143 = load <8 x i16>, <8 x i16>* %13142, align 2, !tbaa !382
  %13144 = getelementptr inbounds i16, i16* %13014, i64 -34
  %13145 = bitcast i16* %13144 to <8 x i16>*
  %13146 = load <8 x i16>, <8 x i16>* %13145, align 2, !tbaa !382
  %13147 = getelementptr inbounds i16, i16* %13014, i64 -26
  %13148 = bitcast i16* %13147 to <8 x i16>*
  %13149 = load <8 x i16>, <8 x i16>* %13148, align 2, !tbaa !382
  %13150 = getelementptr inbounds i16, i16* %13014, i64 -18
  %13151 = bitcast i16* %13150 to <8 x i16>*
  %13152 = load <8 x i16>, <8 x i16>* %13151, align 2, !tbaa !382
  %13153 = getelementptr inbounds i16, i16* %13014, i64 -10
  %13154 = bitcast i16* %13153 to <8 x i16>*
  %13155 = load <8 x i16>, <8 x i16>* %13154, align 2, !tbaa !382
  %13156 = getelementptr inbounds i16, i16* %13014, i64 -2
  %13157 = bitcast i16* %13156 to <8 x i16>*
  %13158 = load <8 x i16>, <8 x i16>* %13157, align 2, !tbaa !382
  %13159 = getelementptr inbounds i16, i16* %13014, i64 -59
  %13160 = bitcast i16* %13159 to <8 x i16>*
  %13161 = load <8 x i16>, <8 x i16>* %13160, align 2, !tbaa !382
  %13162 = getelementptr inbounds i16, i16* %13014, i64 -51
  %13163 = bitcast i16* %13162 to <8 x i16>*
  %13164 = load <8 x i16>, <8 x i16>* %13163, align 2, !tbaa !382
  %13165 = getelementptr inbounds i16, i16* %13014, i64 -43
  %13166 = bitcast i16* %13165 to <8 x i16>*
  %13167 = load <8 x i16>, <8 x i16>* %13166, align 2, !tbaa !382
  %13168 = getelementptr inbounds i16, i16* %13014, i64 -35
  %13169 = bitcast i16* %13168 to <8 x i16>*
  %13170 = load <8 x i16>, <8 x i16>* %13169, align 2, !tbaa !382
  %13171 = getelementptr inbounds i16, i16* %13014, i64 -27
  %13172 = bitcast i16* %13171 to <8 x i16>*
  %13173 = load <8 x i16>, <8 x i16>* %13172, align 2, !tbaa !382
  %13174 = getelementptr inbounds i16, i16* %13014, i64 -19
  %13175 = bitcast i16* %13174 to <8 x i16>*
  %13176 = load <8 x i16>, <8 x i16>* %13175, align 2, !tbaa !382
  %13177 = getelementptr inbounds i16, i16* %13014, i64 -11
  %13178 = bitcast i16* %13177 to <8 x i16>*
  %13179 = load <8 x i16>, <8 x i16>* %13178, align 2, !tbaa !382
  %13180 = getelementptr inbounds i16, i16* %13014, i64 -3
  %13181 = bitcast i16* %13180 to <8 x i16>*
  %13182 = load <8 x i16>, <8 x i16>* %13181, align 2, !tbaa !382
  %13183 = add <8 x i16> %13041, %13017
  %13184 = add <8 x i16> %13183, %13065
  %13185 = add <8 x i16> %13184, %13089
  %13186 = add <8 x i16> %13185, %13113
  %13187 = add <8 x i16> %13186, %13137
  %13188 = add <8 x i16> %13187, %13161
  %13189 = add <8 x i16> %13044, %13020
  %13190 = add <8 x i16> %13189, %13068
  %13191 = add <8 x i16> %13190, %13092
  %13192 = add <8 x i16> %13191, %13116
  %13193 = add <8 x i16> %13192, %13140
  %13194 = add <8 x i16> %13193, %13164
  %13195 = add <8 x i16> %13047, %13023
  %13196 = add <8 x i16> %13195, %13071
  %13197 = add <8 x i16> %13196, %13095
  %13198 = add <8 x i16> %13197, %13119
  %13199 = add <8 x i16> %13198, %13143
  %13200 = add <8 x i16> %13199, %13167
  %13201 = add <8 x i16> %13050, %13026
  %13202 = add <8 x i16> %13201, %13074
  %13203 = add <8 x i16> %13202, %13098
  %13204 = add <8 x i16> %13203, %13122
  %13205 = add <8 x i16> %13204, %13146
  %13206 = add <8 x i16> %13205, %13170
  %13207 = add <8 x i16> %13053, %13029
  %13208 = add <8 x i16> %13207, %13077
  %13209 = add <8 x i16> %13208, %13101
  %13210 = add <8 x i16> %13209, %13125
  %13211 = add <8 x i16> %13210, %13149
  %13212 = add <8 x i16> %13211, %13173
  %13213 = add <8 x i16> %13056, %13032
  %13214 = add <8 x i16> %13213, %13080
  %13215 = add <8 x i16> %13214, %13104
  %13216 = add <8 x i16> %13215, %13128
  %13217 = add <8 x i16> %13216, %13152
  %13218 = add <8 x i16> %13217, %13176
  %13219 = add <8 x i16> %13059, %13035
  %13220 = add <8 x i16> %13219, %13083
  %13221 = add <8 x i16> %13220, %13107
  %13222 = add <8 x i16> %13221, %13131
  %13223 = add <8 x i16> %13222, %13155
  %13224 = add <8 x i16> %13223, %13179
  %13225 = add <8 x i16> %13062, %13038
  %13226 = add <8 x i16> %13225, %13086
  %13227 = add <8 x i16> %13226, %13110
  %13228 = add <8 x i16> %13227, %13134
  %13229 = add <8 x i16> %13228, %13158
  %13230 = add <8 x i16> %13229, %13182
  %13231 = shufflevector <8 x i16> %13230, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13232 = shufflevector <16 x i16> %13231, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13233 = shufflevector <32 x i16> %13232, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13234 = shufflevector <8 x i16> %13188, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %13235 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %13234, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %13236 = shufflevector <8 x i16> %13188, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %13237 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %13236, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %13238 = shufflevector <8 x i16> %13194, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %13239 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %13238, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %13240 = shufflevector <8 x i16> %13194, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %13241 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %13240, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %13242 = shufflevector <8 x i16> %13200, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %13243 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %13242, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %13244 = shufflevector <8 x i16> %13200, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %13245 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %13244, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %13246 = shufflevector <8 x i16> %13206, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %13247 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %13246, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %13248 = shufflevector <8 x i16> %13206, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %13249 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %13248, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %13250 = shufflevector <8 x i16> %13212, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %13251 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %13250, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %13252 = shufflevector <8 x i16> %13212, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %13253 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %13252, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %13254 = shufflevector <8 x i16> %13218, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %13255 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %13254, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %13256 = shufflevector <8 x i16> %13218, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %13257 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %13256, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %13258 = shufflevector <8 x i16> %13224, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %13259 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %13258, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %13260 = shufflevector <8 x i16> %13224, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %13261 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %13260, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %13262 = shufflevector <8 x i16> %13230, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %13263 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %13262, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %13264 = shufflevector <8 x i16> %13230, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %13265 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %13264, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %13266 = shufflevector <4 x i32> %13235, <4 x i32> %13237, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13267 = shufflevector <4 x i32> %13239, <4 x i32> %13241, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13268 = shufflevector <4 x i32> %13243, <4 x i32> %13245, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13269 = shufflevector <4 x i32> %13247, <4 x i32> %13249, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13270 = shufflevector <4 x i32> %13251, <4 x i32> %13253, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13271 = shufflevector <4 x i32> %13255, <4 x i32> %13257, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13272 = shufflevector <4 x i32> %13259, <4 x i32> %13261, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13273 = shufflevector <4 x i32> %13263, <4 x i32> %13265, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13274 = shufflevector <8 x i32> %13266, <8 x i32> %13267, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13275 = shufflevector <8 x i32> %13268, <8 x i32> %13269, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13276 = shufflevector <8 x i32> %13270, <8 x i32> %13271, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13277 = shufflevector <8 x i32> %13272, <8 x i32> %13273, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13278 = shufflevector <16 x i32> %13274, <16 x i32> %13275, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13279 = shufflevector <16 x i32> %13276, <16 x i32> %13277, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13280 = shufflevector <32 x i32> %13278, <32 x i32> %13279, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %13281 = lshr <64 x i32> %13280, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %13282 = trunc <64 x i32> %13281 to <64 x i16>
  %13283 = shufflevector <64 x i16> %13282, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13284 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %13283, <8 x i16> %13188)
  %13285 = shufflevector <64 x i16> %13282, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13286 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %13285, <8 x i16> %13194)
  %13287 = shufflevector <64 x i16> %13282, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %13288 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %13287, <8 x i16> %13200)
  %13289 = shufflevector <64 x i16> %13282, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13290 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %13289, <8 x i16> %13206)
  %13291 = shufflevector <64 x i16> %13282, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %13292 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %13291, <8 x i16> %13212)
  %13293 = shufflevector <64 x i16> %13282, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %13294 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %13293, <8 x i16> %13218)
  %13295 = shufflevector <64 x i16> %13282, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %13296 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %13295, <8 x i16> %13224)
  %13297 = shufflevector <64 x i16> %13282, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %13298 = shufflevector <64 x i16> %13233, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %13299 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %13297, <8 x i16> %13298)
  %13300 = shufflevector <8 x i16> %13284, <8 x i16> %13286, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13301 = shufflevector <8 x i16> %13288, <8 x i16> %13290, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13302 = shufflevector <8 x i16> %13292, <8 x i16> %13294, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13303 = shufflevector <8 x i16> %13296, <8 x i16> %13299, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13304 = shufflevector <16 x i16> %13300, <16 x i16> %13301, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13305 = shufflevector <16 x i16> %13302, <16 x i16> %13303, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13306 = shufflevector <32 x i16> %13304, <32 x i16> %13305, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %13307 = lshr <64 x i16> %13306, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13308 = shufflevector <64 x i16> %13307, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13309 = sext i32 %blur_x.s0.x.v1.base.s63 to i64
  %13310 = add nsw i64 %13010, %13309
  %13311 = getelementptr inbounds i16, i16* %blur_x47, i64 %13310
  %13312 = bitcast i16* %13311 to <8 x i16>*
  store <8 x i16> %13308, <8 x i16>* %13312, align 2, !tbaa !385
  %13313 = shufflevector <64 x i16> %13307, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13314 = getelementptr inbounds i16, i16* %13311, i64 8
  %13315 = bitcast i16* %13314 to <8 x i16>*
  store <8 x i16> %13313, <8 x i16>* %13315, align 2, !tbaa !385
  %13316 = shufflevector <64 x i16> %13307, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %13317 = getelementptr inbounds i16, i16* %13311, i64 16
  %13318 = bitcast i16* %13317 to <8 x i16>*
  store <8 x i16> %13316, <8 x i16>* %13318, align 2, !tbaa !385
  %13319 = shufflevector <64 x i16> %13307, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13320 = getelementptr inbounds i16, i16* %13311, i64 24
  %13321 = bitcast i16* %13320 to <8 x i16>*
  store <8 x i16> %13319, <8 x i16>* %13321, align 2, !tbaa !385
  %13322 = shufflevector <64 x i16> %13307, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %13323 = getelementptr inbounds i16, i16* %13311, i64 32
  %13324 = bitcast i16* %13323 to <8 x i16>*
  store <8 x i16> %13322, <8 x i16>* %13324, align 2, !tbaa !385
  %13325 = shufflevector <64 x i16> %13307, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %13326 = getelementptr inbounds i16, i16* %13311, i64 40
  %13327 = bitcast i16* %13326 to <8 x i16>*
  store <8 x i16> %13325, <8 x i16>* %13327, align 2, !tbaa !385
  %13328 = shufflevector <64 x i16> %13307, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %13329 = getelementptr inbounds i16, i16* %13311, i64 48
  %13330 = bitcast i16* %13329 to <8 x i16>*
  store <8 x i16> %13328, <8 x i16>* %13330, align 2, !tbaa !385
  %13331 = shufflevector <64 x i16> %13307, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %13332 = getelementptr inbounds i16, i16* %13311, i64 56
  %13333 = bitcast i16* %13332 to <8 x i16>*
  store <8 x i16> %13331, <8 x i16>* %13333, align 2, !tbaa !385
  %13334 = add nuw nsw i32 %blur_x.s0.x.x.rebased62, 1
  %.not122 = icmp eq i64 %indvars.iv.next183.phi, %10114
  br i1 %.not122, label %"end for blur_x.s0.x.x.rebased61", label %"for blur_x.s0.x.x.rebased60.for blur_x.s0.x.x.rebased60_crit_edge"

"for blur_x.s0.x.x.rebased60.for blur_x.s0.x.x.rebased60_crit_edge": ; preds = %"for blur_x.s0.x.x.rebased60"
  %indvars.iv.next183.1 = add nuw nsw i64 %indvars.iv.next183.phi, 1
  br label %"for blur_x.s0.x.x.rebased60"

"end for blur_x.s0.x.x.rebased61":                ; preds = %"for blur_x.s0.x.x.rebased60", %"end for blur_x.s0.x.x55"
  br i1 %10108, label %"for blur_x.s0.x.x.rebased65.preheader", label %"end for blur_x.s0.x.x.rebased66", !prof !381

"for blur_x.s0.x.x.rebased65.preheader":          ; preds = %"end for blur_x.s0.x.x.rebased61"
  %13335 = icmp sgt i64 %10128, 0
  %13336 = select i1 %13335, i64 %10128, i64 0
  %13337 = trunc i64 %13336 to i32
  %13338 = mul nsw i32 %input.stride.135, %13337
  %13339 = insertelement <64 x i32> undef, i32 %13338, i32 0
  %t25269 = shufflevector <64 x i32> %13339, <64 x i32> undef, <64 x i32> zeroinitializer
  %13340 = and i64 %10128, 7
  %13341 = mul nsw i64 %13340, %10105
  %13342 = sub nsw i64 %13341, %10106
  br label %"for blur_x.s0.x.x.rebased65"

"for blur_x.s0.x.x.rebased65":                    ; preds = %"for blur_x.s0.x.x.rebased65.preheader", %"for blur_x.s0.x.x.rebased65"
  %blur_x.s0.x.x.rebased67 = phi i32 [ %16210, %"for blur_x.s0.x.x.rebased65" ], [ 0, %"for blur_x.s0.x.x.rebased65.preheader" ]
  %13343 = add nsw i32 %blur_x.s0.x.x.rebased67, %t26437
  %13344 = shl nsw i32 %13343, 6
  %a21 = add nsw i32 %13344, %t27441
  %13345 = icmp slt i32 %a21, %b29
  %blur_x.s0.x.v1.base.s68 = select i1 %13345, i32 %a21, i32 %b29
  %13346 = add nsw i32 %blur_x.s0.x.v1.base.s68, -63
  %13347 = insertelement <64 x i32> undef, i32 %13346, i32 0
  %13348 = shufflevector <64 x i32> %13347, <64 x i32> undef, <64 x i32> zeroinitializer
  %13349 = add nsw <64 x i32> %13348, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %13350 = shufflevector <64 x i32> %13349, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %13351 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13350, <4 x i32> %10103)
  %13352 = shufflevector <64 x i32> %13349, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %13353 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13352, <4 x i32> %10103)
  %13354 = shufflevector <64 x i32> %13349, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %13355 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13354, <4 x i32> %10103)
  %13356 = shufflevector <64 x i32> %13349, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13357 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13356, <4 x i32> %10103)
  %13358 = shufflevector <64 x i32> %13349, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %13359 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13358, <4 x i32> %10103)
  %13360 = shufflevector <64 x i32> %13349, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %13361 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13360, <4 x i32> %10103)
  %13362 = shufflevector <64 x i32> %13349, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %13363 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13362, <4 x i32> %10103)
  %13364 = shufflevector <64 x i32> %13349, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %13365 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13364, <4 x i32> %10103)
  %13366 = shufflevector <64 x i32> %13349, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %13367 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13366, <4 x i32> %10103)
  %13368 = shufflevector <64 x i32> %13349, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %13369 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13368, <4 x i32> %10103)
  %13370 = shufflevector <64 x i32> %13349, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %13371 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13370, <4 x i32> %10103)
  %13372 = shufflevector <64 x i32> %13349, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %13373 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13372, <4 x i32> %10103)
  %13374 = shufflevector <64 x i32> %13349, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %13375 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13374, <4 x i32> %10103)
  %13376 = shufflevector <64 x i32> %13349, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %13377 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13376, <4 x i32> %10103)
  %13378 = shufflevector <64 x i32> %13349, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %13379 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13378, <4 x i32> %10103)
  %13380 = shufflevector <64 x i32> %13349, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %13381 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13380, <4 x i32> %10103)
  %13382 = shufflevector <4 x i32> %13381, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %13383 = shufflevector <8 x i32> %13382, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %13384 = shufflevector <16 x i32> %13383, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %13385 = shufflevector <32 x i32> %13384, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %13386 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13351, <4 x i32> zeroinitializer)
  %13387 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13353, <4 x i32> zeroinitializer)
  %13388 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13355, <4 x i32> zeroinitializer)
  %13389 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13357, <4 x i32> zeroinitializer)
  %13390 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13359, <4 x i32> zeroinitializer)
  %13391 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13361, <4 x i32> zeroinitializer)
  %13392 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13363, <4 x i32> zeroinitializer)
  %13393 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13365, <4 x i32> zeroinitializer)
  %13394 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13367, <4 x i32> zeroinitializer)
  %13395 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13369, <4 x i32> zeroinitializer)
  %13396 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13371, <4 x i32> zeroinitializer)
  %13397 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13373, <4 x i32> zeroinitializer)
  %13398 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13375, <4 x i32> zeroinitializer)
  %13399 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13377, <4 x i32> zeroinitializer)
  %13400 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13379, <4 x i32> zeroinitializer)
  %13401 = shufflevector <64 x i32> %13385, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %13402 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13401, <4 x i32> zeroinitializer)
  %13403 = shufflevector <4 x i32> %13386, <4 x i32> %13387, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13404 = shufflevector <4 x i32> %13388, <4 x i32> %13389, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13405 = shufflevector <4 x i32> %13390, <4 x i32> %13391, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13406 = shufflevector <4 x i32> %13392, <4 x i32> %13393, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13407 = shufflevector <4 x i32> %13394, <4 x i32> %13395, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13408 = shufflevector <4 x i32> %13396, <4 x i32> %13397, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13409 = shufflevector <4 x i32> %13398, <4 x i32> %13399, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13410 = shufflevector <4 x i32> %13400, <4 x i32> %13402, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13411 = shufflevector <8 x i32> %13403, <8 x i32> %13404, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13412 = shufflevector <8 x i32> %13405, <8 x i32> %13406, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13413 = shufflevector <8 x i32> %13407, <8 x i32> %13408, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13414 = shufflevector <8 x i32> %13409, <8 x i32> %13410, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13415 = shufflevector <16 x i32> %13411, <16 x i32> %13412, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13416 = shufflevector <16 x i32> %13413, <16 x i32> %13414, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13417 = shufflevector <32 x i32> %13415, <32 x i32> %13416, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %13418 = add nsw <64 x i32> %13417, %t25269
  %13419 = extractelement <64 x i32> %13418, i32 0
  %13420 = sext i32 %13419 to i64
  %13421 = getelementptr inbounds i16, i16* %10104, i64 %13420
  %13422 = load i16, i16* %13421, align 2, !tbaa !382
  %13423 = insertelement <64 x i16> undef, i16 %13422, i32 0
  %13424 = extractelement <64 x i32> %13418, i32 1
  %13425 = sext i32 %13424 to i64
  %13426 = getelementptr inbounds i16, i16* %10104, i64 %13425
  %13427 = load i16, i16* %13426, align 2, !tbaa !382
  %13428 = insertelement <64 x i16> %13423, i16 %13427, i32 1
  %13429 = extractelement <64 x i32> %13418, i32 2
  %13430 = sext i32 %13429 to i64
  %13431 = getelementptr inbounds i16, i16* %10104, i64 %13430
  %13432 = load i16, i16* %13431, align 2, !tbaa !382
  %13433 = insertelement <64 x i16> %13428, i16 %13432, i32 2
  %13434 = extractelement <64 x i32> %13418, i32 3
  %13435 = sext i32 %13434 to i64
  %13436 = getelementptr inbounds i16, i16* %10104, i64 %13435
  %13437 = load i16, i16* %13436, align 2, !tbaa !382
  %13438 = insertelement <64 x i16> %13433, i16 %13437, i32 3
  %13439 = extractelement <64 x i32> %13418, i32 4
  %13440 = sext i32 %13439 to i64
  %13441 = getelementptr inbounds i16, i16* %10104, i64 %13440
  %13442 = load i16, i16* %13441, align 2, !tbaa !382
  %13443 = insertelement <64 x i16> %13438, i16 %13442, i32 4
  %13444 = extractelement <64 x i32> %13418, i32 5
  %13445 = sext i32 %13444 to i64
  %13446 = getelementptr inbounds i16, i16* %10104, i64 %13445
  %13447 = load i16, i16* %13446, align 2, !tbaa !382
  %13448 = insertelement <64 x i16> %13443, i16 %13447, i32 5
  %13449 = extractelement <64 x i32> %13418, i32 6
  %13450 = sext i32 %13449 to i64
  %13451 = getelementptr inbounds i16, i16* %10104, i64 %13450
  %13452 = load i16, i16* %13451, align 2, !tbaa !382
  %13453 = insertelement <64 x i16> %13448, i16 %13452, i32 6
  %13454 = extractelement <64 x i32> %13418, i32 7
  %13455 = sext i32 %13454 to i64
  %13456 = getelementptr inbounds i16, i16* %10104, i64 %13455
  %13457 = load i16, i16* %13456, align 2, !tbaa !382
  %13458 = insertelement <64 x i16> %13453, i16 %13457, i32 7
  %13459 = extractelement <64 x i32> %13418, i32 8
  %13460 = sext i32 %13459 to i64
  %13461 = getelementptr inbounds i16, i16* %10104, i64 %13460
  %13462 = load i16, i16* %13461, align 2, !tbaa !382
  %13463 = insertelement <64 x i16> %13458, i16 %13462, i32 8
  %13464 = extractelement <64 x i32> %13418, i32 9
  %13465 = sext i32 %13464 to i64
  %13466 = getelementptr inbounds i16, i16* %10104, i64 %13465
  %13467 = load i16, i16* %13466, align 2, !tbaa !382
  %13468 = insertelement <64 x i16> %13463, i16 %13467, i32 9
  %13469 = extractelement <64 x i32> %13418, i32 10
  %13470 = sext i32 %13469 to i64
  %13471 = getelementptr inbounds i16, i16* %10104, i64 %13470
  %13472 = load i16, i16* %13471, align 2, !tbaa !382
  %13473 = insertelement <64 x i16> %13468, i16 %13472, i32 10
  %13474 = extractelement <64 x i32> %13418, i32 11
  %13475 = sext i32 %13474 to i64
  %13476 = getelementptr inbounds i16, i16* %10104, i64 %13475
  %13477 = load i16, i16* %13476, align 2, !tbaa !382
  %13478 = insertelement <64 x i16> %13473, i16 %13477, i32 11
  %13479 = extractelement <64 x i32> %13418, i32 12
  %13480 = sext i32 %13479 to i64
  %13481 = getelementptr inbounds i16, i16* %10104, i64 %13480
  %13482 = load i16, i16* %13481, align 2, !tbaa !382
  %13483 = insertelement <64 x i16> %13478, i16 %13482, i32 12
  %13484 = extractelement <64 x i32> %13418, i32 13
  %13485 = sext i32 %13484 to i64
  %13486 = getelementptr inbounds i16, i16* %10104, i64 %13485
  %13487 = load i16, i16* %13486, align 2, !tbaa !382
  %13488 = insertelement <64 x i16> %13483, i16 %13487, i32 13
  %13489 = extractelement <64 x i32> %13418, i32 14
  %13490 = sext i32 %13489 to i64
  %13491 = getelementptr inbounds i16, i16* %10104, i64 %13490
  %13492 = load i16, i16* %13491, align 2, !tbaa !382
  %13493 = insertelement <64 x i16> %13488, i16 %13492, i32 14
  %13494 = extractelement <64 x i32> %13418, i32 15
  %13495 = sext i32 %13494 to i64
  %13496 = getelementptr inbounds i16, i16* %10104, i64 %13495
  %13497 = load i16, i16* %13496, align 2, !tbaa !382
  %13498 = insertelement <64 x i16> %13493, i16 %13497, i32 15
  %13499 = extractelement <64 x i32> %13418, i32 16
  %13500 = sext i32 %13499 to i64
  %13501 = getelementptr inbounds i16, i16* %10104, i64 %13500
  %13502 = load i16, i16* %13501, align 2, !tbaa !382
  %13503 = insertelement <64 x i16> %13498, i16 %13502, i32 16
  %13504 = extractelement <64 x i32> %13418, i32 17
  %13505 = sext i32 %13504 to i64
  %13506 = getelementptr inbounds i16, i16* %10104, i64 %13505
  %13507 = load i16, i16* %13506, align 2, !tbaa !382
  %13508 = insertelement <64 x i16> %13503, i16 %13507, i32 17
  %13509 = extractelement <64 x i32> %13418, i32 18
  %13510 = sext i32 %13509 to i64
  %13511 = getelementptr inbounds i16, i16* %10104, i64 %13510
  %13512 = load i16, i16* %13511, align 2, !tbaa !382
  %13513 = insertelement <64 x i16> %13508, i16 %13512, i32 18
  %13514 = extractelement <64 x i32> %13418, i32 19
  %13515 = sext i32 %13514 to i64
  %13516 = getelementptr inbounds i16, i16* %10104, i64 %13515
  %13517 = load i16, i16* %13516, align 2, !tbaa !382
  %13518 = insertelement <64 x i16> %13513, i16 %13517, i32 19
  %13519 = extractelement <64 x i32> %13418, i32 20
  %13520 = sext i32 %13519 to i64
  %13521 = getelementptr inbounds i16, i16* %10104, i64 %13520
  %13522 = load i16, i16* %13521, align 2, !tbaa !382
  %13523 = insertelement <64 x i16> %13518, i16 %13522, i32 20
  %13524 = extractelement <64 x i32> %13418, i32 21
  %13525 = sext i32 %13524 to i64
  %13526 = getelementptr inbounds i16, i16* %10104, i64 %13525
  %13527 = load i16, i16* %13526, align 2, !tbaa !382
  %13528 = insertelement <64 x i16> %13523, i16 %13527, i32 21
  %13529 = extractelement <64 x i32> %13418, i32 22
  %13530 = sext i32 %13529 to i64
  %13531 = getelementptr inbounds i16, i16* %10104, i64 %13530
  %13532 = load i16, i16* %13531, align 2, !tbaa !382
  %13533 = insertelement <64 x i16> %13528, i16 %13532, i32 22
  %13534 = extractelement <64 x i32> %13418, i32 23
  %13535 = sext i32 %13534 to i64
  %13536 = getelementptr inbounds i16, i16* %10104, i64 %13535
  %13537 = load i16, i16* %13536, align 2, !tbaa !382
  %13538 = insertelement <64 x i16> %13533, i16 %13537, i32 23
  %13539 = extractelement <64 x i32> %13418, i32 24
  %13540 = sext i32 %13539 to i64
  %13541 = getelementptr inbounds i16, i16* %10104, i64 %13540
  %13542 = load i16, i16* %13541, align 2, !tbaa !382
  %13543 = insertelement <64 x i16> %13538, i16 %13542, i32 24
  %13544 = extractelement <64 x i32> %13418, i32 25
  %13545 = sext i32 %13544 to i64
  %13546 = getelementptr inbounds i16, i16* %10104, i64 %13545
  %13547 = load i16, i16* %13546, align 2, !tbaa !382
  %13548 = insertelement <64 x i16> %13543, i16 %13547, i32 25
  %13549 = extractelement <64 x i32> %13418, i32 26
  %13550 = sext i32 %13549 to i64
  %13551 = getelementptr inbounds i16, i16* %10104, i64 %13550
  %13552 = load i16, i16* %13551, align 2, !tbaa !382
  %13553 = insertelement <64 x i16> %13548, i16 %13552, i32 26
  %13554 = extractelement <64 x i32> %13418, i32 27
  %13555 = sext i32 %13554 to i64
  %13556 = getelementptr inbounds i16, i16* %10104, i64 %13555
  %13557 = load i16, i16* %13556, align 2, !tbaa !382
  %13558 = insertelement <64 x i16> %13553, i16 %13557, i32 27
  %13559 = extractelement <64 x i32> %13418, i32 28
  %13560 = sext i32 %13559 to i64
  %13561 = getelementptr inbounds i16, i16* %10104, i64 %13560
  %13562 = load i16, i16* %13561, align 2, !tbaa !382
  %13563 = insertelement <64 x i16> %13558, i16 %13562, i32 28
  %13564 = extractelement <64 x i32> %13418, i32 29
  %13565 = sext i32 %13564 to i64
  %13566 = getelementptr inbounds i16, i16* %10104, i64 %13565
  %13567 = load i16, i16* %13566, align 2, !tbaa !382
  %13568 = insertelement <64 x i16> %13563, i16 %13567, i32 29
  %13569 = extractelement <64 x i32> %13418, i32 30
  %13570 = sext i32 %13569 to i64
  %13571 = getelementptr inbounds i16, i16* %10104, i64 %13570
  %13572 = load i16, i16* %13571, align 2, !tbaa !382
  %13573 = insertelement <64 x i16> %13568, i16 %13572, i32 30
  %13574 = extractelement <64 x i32> %13418, i32 31
  %13575 = sext i32 %13574 to i64
  %13576 = getelementptr inbounds i16, i16* %10104, i64 %13575
  %13577 = load i16, i16* %13576, align 2, !tbaa !382
  %13578 = insertelement <64 x i16> %13573, i16 %13577, i32 31
  %13579 = extractelement <64 x i32> %13418, i32 32
  %13580 = sext i32 %13579 to i64
  %13581 = getelementptr inbounds i16, i16* %10104, i64 %13580
  %13582 = load i16, i16* %13581, align 2, !tbaa !382
  %13583 = insertelement <64 x i16> %13578, i16 %13582, i32 32
  %13584 = extractelement <64 x i32> %13418, i32 33
  %13585 = sext i32 %13584 to i64
  %13586 = getelementptr inbounds i16, i16* %10104, i64 %13585
  %13587 = load i16, i16* %13586, align 2, !tbaa !382
  %13588 = insertelement <64 x i16> %13583, i16 %13587, i32 33
  %13589 = extractelement <64 x i32> %13418, i32 34
  %13590 = sext i32 %13589 to i64
  %13591 = getelementptr inbounds i16, i16* %10104, i64 %13590
  %13592 = load i16, i16* %13591, align 2, !tbaa !382
  %13593 = insertelement <64 x i16> %13588, i16 %13592, i32 34
  %13594 = extractelement <64 x i32> %13418, i32 35
  %13595 = sext i32 %13594 to i64
  %13596 = getelementptr inbounds i16, i16* %10104, i64 %13595
  %13597 = load i16, i16* %13596, align 2, !tbaa !382
  %13598 = insertelement <64 x i16> %13593, i16 %13597, i32 35
  %13599 = extractelement <64 x i32> %13418, i32 36
  %13600 = sext i32 %13599 to i64
  %13601 = getelementptr inbounds i16, i16* %10104, i64 %13600
  %13602 = load i16, i16* %13601, align 2, !tbaa !382
  %13603 = insertelement <64 x i16> %13598, i16 %13602, i32 36
  %13604 = extractelement <64 x i32> %13418, i32 37
  %13605 = sext i32 %13604 to i64
  %13606 = getelementptr inbounds i16, i16* %10104, i64 %13605
  %13607 = load i16, i16* %13606, align 2, !tbaa !382
  %13608 = insertelement <64 x i16> %13603, i16 %13607, i32 37
  %13609 = extractelement <64 x i32> %13418, i32 38
  %13610 = sext i32 %13609 to i64
  %13611 = getelementptr inbounds i16, i16* %10104, i64 %13610
  %13612 = load i16, i16* %13611, align 2, !tbaa !382
  %13613 = insertelement <64 x i16> %13608, i16 %13612, i32 38
  %13614 = extractelement <64 x i32> %13418, i32 39
  %13615 = sext i32 %13614 to i64
  %13616 = getelementptr inbounds i16, i16* %10104, i64 %13615
  %13617 = load i16, i16* %13616, align 2, !tbaa !382
  %13618 = insertelement <64 x i16> %13613, i16 %13617, i32 39
  %13619 = extractelement <64 x i32> %13418, i32 40
  %13620 = sext i32 %13619 to i64
  %13621 = getelementptr inbounds i16, i16* %10104, i64 %13620
  %13622 = load i16, i16* %13621, align 2, !tbaa !382
  %13623 = insertelement <64 x i16> %13618, i16 %13622, i32 40
  %13624 = extractelement <64 x i32> %13418, i32 41
  %13625 = sext i32 %13624 to i64
  %13626 = getelementptr inbounds i16, i16* %10104, i64 %13625
  %13627 = load i16, i16* %13626, align 2, !tbaa !382
  %13628 = insertelement <64 x i16> %13623, i16 %13627, i32 41
  %13629 = extractelement <64 x i32> %13418, i32 42
  %13630 = sext i32 %13629 to i64
  %13631 = getelementptr inbounds i16, i16* %10104, i64 %13630
  %13632 = load i16, i16* %13631, align 2, !tbaa !382
  %13633 = insertelement <64 x i16> %13628, i16 %13632, i32 42
  %13634 = extractelement <64 x i32> %13418, i32 43
  %13635 = sext i32 %13634 to i64
  %13636 = getelementptr inbounds i16, i16* %10104, i64 %13635
  %13637 = load i16, i16* %13636, align 2, !tbaa !382
  %13638 = insertelement <64 x i16> %13633, i16 %13637, i32 43
  %13639 = extractelement <64 x i32> %13418, i32 44
  %13640 = sext i32 %13639 to i64
  %13641 = getelementptr inbounds i16, i16* %10104, i64 %13640
  %13642 = load i16, i16* %13641, align 2, !tbaa !382
  %13643 = insertelement <64 x i16> %13638, i16 %13642, i32 44
  %13644 = extractelement <64 x i32> %13418, i32 45
  %13645 = sext i32 %13644 to i64
  %13646 = getelementptr inbounds i16, i16* %10104, i64 %13645
  %13647 = load i16, i16* %13646, align 2, !tbaa !382
  %13648 = insertelement <64 x i16> %13643, i16 %13647, i32 45
  %13649 = extractelement <64 x i32> %13418, i32 46
  %13650 = sext i32 %13649 to i64
  %13651 = getelementptr inbounds i16, i16* %10104, i64 %13650
  %13652 = load i16, i16* %13651, align 2, !tbaa !382
  %13653 = insertelement <64 x i16> %13648, i16 %13652, i32 46
  %13654 = extractelement <64 x i32> %13418, i32 47
  %13655 = sext i32 %13654 to i64
  %13656 = getelementptr inbounds i16, i16* %10104, i64 %13655
  %13657 = load i16, i16* %13656, align 2, !tbaa !382
  %13658 = insertelement <64 x i16> %13653, i16 %13657, i32 47
  %13659 = extractelement <64 x i32> %13418, i32 48
  %13660 = sext i32 %13659 to i64
  %13661 = getelementptr inbounds i16, i16* %10104, i64 %13660
  %13662 = load i16, i16* %13661, align 2, !tbaa !382
  %13663 = insertelement <64 x i16> %13658, i16 %13662, i32 48
  %13664 = extractelement <64 x i32> %13418, i32 49
  %13665 = sext i32 %13664 to i64
  %13666 = getelementptr inbounds i16, i16* %10104, i64 %13665
  %13667 = load i16, i16* %13666, align 2, !tbaa !382
  %13668 = insertelement <64 x i16> %13663, i16 %13667, i32 49
  %13669 = extractelement <64 x i32> %13418, i32 50
  %13670 = sext i32 %13669 to i64
  %13671 = getelementptr inbounds i16, i16* %10104, i64 %13670
  %13672 = load i16, i16* %13671, align 2, !tbaa !382
  %13673 = insertelement <64 x i16> %13668, i16 %13672, i32 50
  %13674 = extractelement <64 x i32> %13418, i32 51
  %13675 = sext i32 %13674 to i64
  %13676 = getelementptr inbounds i16, i16* %10104, i64 %13675
  %13677 = load i16, i16* %13676, align 2, !tbaa !382
  %13678 = insertelement <64 x i16> %13673, i16 %13677, i32 51
  %13679 = extractelement <64 x i32> %13418, i32 52
  %13680 = sext i32 %13679 to i64
  %13681 = getelementptr inbounds i16, i16* %10104, i64 %13680
  %13682 = load i16, i16* %13681, align 2, !tbaa !382
  %13683 = insertelement <64 x i16> %13678, i16 %13682, i32 52
  %13684 = extractelement <64 x i32> %13418, i32 53
  %13685 = sext i32 %13684 to i64
  %13686 = getelementptr inbounds i16, i16* %10104, i64 %13685
  %13687 = load i16, i16* %13686, align 2, !tbaa !382
  %13688 = insertelement <64 x i16> %13683, i16 %13687, i32 53
  %13689 = extractelement <64 x i32> %13418, i32 54
  %13690 = sext i32 %13689 to i64
  %13691 = getelementptr inbounds i16, i16* %10104, i64 %13690
  %13692 = load i16, i16* %13691, align 2, !tbaa !382
  %13693 = insertelement <64 x i16> %13688, i16 %13692, i32 54
  %13694 = extractelement <64 x i32> %13418, i32 55
  %13695 = sext i32 %13694 to i64
  %13696 = getelementptr inbounds i16, i16* %10104, i64 %13695
  %13697 = load i16, i16* %13696, align 2, !tbaa !382
  %13698 = insertelement <64 x i16> %13693, i16 %13697, i32 55
  %13699 = extractelement <64 x i32> %13418, i32 56
  %13700 = sext i32 %13699 to i64
  %13701 = getelementptr inbounds i16, i16* %10104, i64 %13700
  %13702 = load i16, i16* %13701, align 2, !tbaa !382
  %13703 = insertelement <64 x i16> %13698, i16 %13702, i32 56
  %13704 = extractelement <64 x i32> %13418, i32 57
  %13705 = sext i32 %13704 to i64
  %13706 = getelementptr inbounds i16, i16* %10104, i64 %13705
  %13707 = load i16, i16* %13706, align 2, !tbaa !382
  %13708 = insertelement <64 x i16> %13703, i16 %13707, i32 57
  %13709 = extractelement <64 x i32> %13418, i32 58
  %13710 = sext i32 %13709 to i64
  %13711 = getelementptr inbounds i16, i16* %10104, i64 %13710
  %13712 = load i16, i16* %13711, align 2, !tbaa !382
  %13713 = insertelement <64 x i16> %13708, i16 %13712, i32 58
  %13714 = extractelement <64 x i32> %13418, i32 59
  %13715 = sext i32 %13714 to i64
  %13716 = getelementptr inbounds i16, i16* %10104, i64 %13715
  %13717 = load i16, i16* %13716, align 2, !tbaa !382
  %13718 = insertelement <64 x i16> %13713, i16 %13717, i32 59
  %13719 = extractelement <64 x i32> %13418, i32 60
  %13720 = sext i32 %13719 to i64
  %13721 = getelementptr inbounds i16, i16* %10104, i64 %13720
  %13722 = load i16, i16* %13721, align 2, !tbaa !382
  %13723 = insertelement <64 x i16> %13718, i16 %13722, i32 60
  %13724 = extractelement <64 x i32> %13418, i32 61
  %13725 = sext i32 %13724 to i64
  %13726 = getelementptr inbounds i16, i16* %10104, i64 %13725
  %13727 = load i16, i16* %13726, align 2, !tbaa !382
  %13728 = insertelement <64 x i16> %13723, i16 %13727, i32 61
  %13729 = extractelement <64 x i32> %13418, i32 62
  %13730 = sext i32 %13729 to i64
  %13731 = getelementptr inbounds i16, i16* %10104, i64 %13730
  %13732 = load i16, i16* %13731, align 2, !tbaa !382
  %13733 = insertelement <64 x i16> %13728, i16 %13732, i32 62
  %13734 = extractelement <64 x i32> %13418, i32 63
  %13735 = sext i32 %13734 to i64
  %13736 = getelementptr inbounds i16, i16* %10104, i64 %13735
  %13737 = load i16, i16* %13736, align 2, !tbaa !382
  %13738 = insertelement <64 x i16> %13733, i16 %13737, i32 63
  %13739 = add nsw i32 %blur_x.s0.x.v1.base.s68, -64
  %13740 = insertelement <64 x i32> undef, i32 %13739, i32 0
  %13741 = shufflevector <64 x i32> %13740, <64 x i32> undef, <64 x i32> zeroinitializer
  %13742 = add nsw <64 x i32> %13741, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %13743 = shufflevector <64 x i32> %13742, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %13744 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13743, <4 x i32> %10103)
  %13745 = shufflevector <64 x i32> %13742, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %13746 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13745, <4 x i32> %10103)
  %13747 = shufflevector <64 x i32> %13742, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %13748 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13747, <4 x i32> %10103)
  %13749 = shufflevector <64 x i32> %13742, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13750 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13749, <4 x i32> %10103)
  %13751 = shufflevector <64 x i32> %13742, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %13752 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13751, <4 x i32> %10103)
  %13753 = shufflevector <64 x i32> %13742, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %13754 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13753, <4 x i32> %10103)
  %13755 = shufflevector <64 x i32> %13742, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %13756 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13755, <4 x i32> %10103)
  %13757 = shufflevector <64 x i32> %13742, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %13758 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13757, <4 x i32> %10103)
  %13759 = shufflevector <64 x i32> %13742, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %13760 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13759, <4 x i32> %10103)
  %13761 = shufflevector <64 x i32> %13742, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %13762 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13761, <4 x i32> %10103)
  %13763 = shufflevector <64 x i32> %13742, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %13764 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13763, <4 x i32> %10103)
  %13765 = shufflevector <64 x i32> %13742, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %13766 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13765, <4 x i32> %10103)
  %13767 = shufflevector <64 x i32> %13742, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %13768 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13767, <4 x i32> %10103)
  %13769 = shufflevector <64 x i32> %13742, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %13770 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13769, <4 x i32> %10103)
  %13771 = shufflevector <64 x i32> %13742, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %13772 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13771, <4 x i32> %10103)
  %13773 = shufflevector <64 x i32> %13742, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %13774 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13773, <4 x i32> %10103)
  %13775 = shufflevector <4 x i32> %13774, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %13776 = shufflevector <8 x i32> %13775, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %13777 = shufflevector <16 x i32> %13776, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %13778 = shufflevector <32 x i32> %13777, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %13779 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13744, <4 x i32> zeroinitializer)
  %13780 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13746, <4 x i32> zeroinitializer)
  %13781 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13748, <4 x i32> zeroinitializer)
  %13782 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13750, <4 x i32> zeroinitializer)
  %13783 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13752, <4 x i32> zeroinitializer)
  %13784 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13754, <4 x i32> zeroinitializer)
  %13785 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13756, <4 x i32> zeroinitializer)
  %13786 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13758, <4 x i32> zeroinitializer)
  %13787 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13760, <4 x i32> zeroinitializer)
  %13788 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13762, <4 x i32> zeroinitializer)
  %13789 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13764, <4 x i32> zeroinitializer)
  %13790 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13766, <4 x i32> zeroinitializer)
  %13791 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13768, <4 x i32> zeroinitializer)
  %13792 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13770, <4 x i32> zeroinitializer)
  %13793 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13772, <4 x i32> zeroinitializer)
  %13794 = shufflevector <64 x i32> %13778, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %13795 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13794, <4 x i32> zeroinitializer)
  %13796 = shufflevector <4 x i32> %13779, <4 x i32> %13780, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13797 = shufflevector <4 x i32> %13781, <4 x i32> %13782, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13798 = shufflevector <4 x i32> %13783, <4 x i32> %13784, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13799 = shufflevector <4 x i32> %13785, <4 x i32> %13786, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13800 = shufflevector <4 x i32> %13787, <4 x i32> %13788, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13801 = shufflevector <4 x i32> %13789, <4 x i32> %13790, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13802 = shufflevector <4 x i32> %13791, <4 x i32> %13792, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13803 = shufflevector <4 x i32> %13793, <4 x i32> %13795, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13804 = shufflevector <8 x i32> %13796, <8 x i32> %13797, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13805 = shufflevector <8 x i32> %13798, <8 x i32> %13799, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13806 = shufflevector <8 x i32> %13800, <8 x i32> %13801, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13807 = shufflevector <8 x i32> %13802, <8 x i32> %13803, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13808 = shufflevector <16 x i32> %13804, <16 x i32> %13805, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13809 = shufflevector <16 x i32> %13806, <16 x i32> %13807, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13810 = shufflevector <32 x i32> %13808, <32 x i32> %13809, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %13811 = add nsw <64 x i32> %13810, %t25269
  %13812 = extractelement <64 x i32> %13811, i32 0
  %13813 = sext i32 %13812 to i64
  %13814 = getelementptr inbounds i16, i16* %10104, i64 %13813
  %13815 = load i16, i16* %13814, align 2, !tbaa !382
  %13816 = insertelement <64 x i16> undef, i16 %13815, i32 0
  %13817 = extractelement <64 x i32> %13811, i32 1
  %13818 = sext i32 %13817 to i64
  %13819 = getelementptr inbounds i16, i16* %10104, i64 %13818
  %13820 = load i16, i16* %13819, align 2, !tbaa !382
  %13821 = insertelement <64 x i16> %13816, i16 %13820, i32 1
  %13822 = extractelement <64 x i32> %13811, i32 2
  %13823 = sext i32 %13822 to i64
  %13824 = getelementptr inbounds i16, i16* %10104, i64 %13823
  %13825 = load i16, i16* %13824, align 2, !tbaa !382
  %13826 = insertelement <64 x i16> %13821, i16 %13825, i32 2
  %13827 = extractelement <64 x i32> %13811, i32 3
  %13828 = sext i32 %13827 to i64
  %13829 = getelementptr inbounds i16, i16* %10104, i64 %13828
  %13830 = load i16, i16* %13829, align 2, !tbaa !382
  %13831 = insertelement <64 x i16> %13826, i16 %13830, i32 3
  %13832 = extractelement <64 x i32> %13811, i32 4
  %13833 = sext i32 %13832 to i64
  %13834 = getelementptr inbounds i16, i16* %10104, i64 %13833
  %13835 = load i16, i16* %13834, align 2, !tbaa !382
  %13836 = insertelement <64 x i16> %13831, i16 %13835, i32 4
  %13837 = extractelement <64 x i32> %13811, i32 5
  %13838 = sext i32 %13837 to i64
  %13839 = getelementptr inbounds i16, i16* %10104, i64 %13838
  %13840 = load i16, i16* %13839, align 2, !tbaa !382
  %13841 = insertelement <64 x i16> %13836, i16 %13840, i32 5
  %13842 = extractelement <64 x i32> %13811, i32 6
  %13843 = sext i32 %13842 to i64
  %13844 = getelementptr inbounds i16, i16* %10104, i64 %13843
  %13845 = load i16, i16* %13844, align 2, !tbaa !382
  %13846 = insertelement <64 x i16> %13841, i16 %13845, i32 6
  %13847 = extractelement <64 x i32> %13811, i32 7
  %13848 = sext i32 %13847 to i64
  %13849 = getelementptr inbounds i16, i16* %10104, i64 %13848
  %13850 = load i16, i16* %13849, align 2, !tbaa !382
  %13851 = insertelement <64 x i16> %13846, i16 %13850, i32 7
  %13852 = extractelement <64 x i32> %13811, i32 8
  %13853 = sext i32 %13852 to i64
  %13854 = getelementptr inbounds i16, i16* %10104, i64 %13853
  %13855 = load i16, i16* %13854, align 2, !tbaa !382
  %13856 = insertelement <64 x i16> %13851, i16 %13855, i32 8
  %13857 = extractelement <64 x i32> %13811, i32 9
  %13858 = sext i32 %13857 to i64
  %13859 = getelementptr inbounds i16, i16* %10104, i64 %13858
  %13860 = load i16, i16* %13859, align 2, !tbaa !382
  %13861 = insertelement <64 x i16> %13856, i16 %13860, i32 9
  %13862 = extractelement <64 x i32> %13811, i32 10
  %13863 = sext i32 %13862 to i64
  %13864 = getelementptr inbounds i16, i16* %10104, i64 %13863
  %13865 = load i16, i16* %13864, align 2, !tbaa !382
  %13866 = insertelement <64 x i16> %13861, i16 %13865, i32 10
  %13867 = extractelement <64 x i32> %13811, i32 11
  %13868 = sext i32 %13867 to i64
  %13869 = getelementptr inbounds i16, i16* %10104, i64 %13868
  %13870 = load i16, i16* %13869, align 2, !tbaa !382
  %13871 = insertelement <64 x i16> %13866, i16 %13870, i32 11
  %13872 = extractelement <64 x i32> %13811, i32 12
  %13873 = sext i32 %13872 to i64
  %13874 = getelementptr inbounds i16, i16* %10104, i64 %13873
  %13875 = load i16, i16* %13874, align 2, !tbaa !382
  %13876 = insertelement <64 x i16> %13871, i16 %13875, i32 12
  %13877 = extractelement <64 x i32> %13811, i32 13
  %13878 = sext i32 %13877 to i64
  %13879 = getelementptr inbounds i16, i16* %10104, i64 %13878
  %13880 = load i16, i16* %13879, align 2, !tbaa !382
  %13881 = insertelement <64 x i16> %13876, i16 %13880, i32 13
  %13882 = extractelement <64 x i32> %13811, i32 14
  %13883 = sext i32 %13882 to i64
  %13884 = getelementptr inbounds i16, i16* %10104, i64 %13883
  %13885 = load i16, i16* %13884, align 2, !tbaa !382
  %13886 = insertelement <64 x i16> %13881, i16 %13885, i32 14
  %13887 = extractelement <64 x i32> %13811, i32 15
  %13888 = sext i32 %13887 to i64
  %13889 = getelementptr inbounds i16, i16* %10104, i64 %13888
  %13890 = load i16, i16* %13889, align 2, !tbaa !382
  %13891 = insertelement <64 x i16> %13886, i16 %13890, i32 15
  %13892 = extractelement <64 x i32> %13811, i32 16
  %13893 = sext i32 %13892 to i64
  %13894 = getelementptr inbounds i16, i16* %10104, i64 %13893
  %13895 = load i16, i16* %13894, align 2, !tbaa !382
  %13896 = insertelement <64 x i16> %13891, i16 %13895, i32 16
  %13897 = extractelement <64 x i32> %13811, i32 17
  %13898 = sext i32 %13897 to i64
  %13899 = getelementptr inbounds i16, i16* %10104, i64 %13898
  %13900 = load i16, i16* %13899, align 2, !tbaa !382
  %13901 = insertelement <64 x i16> %13896, i16 %13900, i32 17
  %13902 = extractelement <64 x i32> %13811, i32 18
  %13903 = sext i32 %13902 to i64
  %13904 = getelementptr inbounds i16, i16* %10104, i64 %13903
  %13905 = load i16, i16* %13904, align 2, !tbaa !382
  %13906 = insertelement <64 x i16> %13901, i16 %13905, i32 18
  %13907 = extractelement <64 x i32> %13811, i32 19
  %13908 = sext i32 %13907 to i64
  %13909 = getelementptr inbounds i16, i16* %10104, i64 %13908
  %13910 = load i16, i16* %13909, align 2, !tbaa !382
  %13911 = insertelement <64 x i16> %13906, i16 %13910, i32 19
  %13912 = extractelement <64 x i32> %13811, i32 20
  %13913 = sext i32 %13912 to i64
  %13914 = getelementptr inbounds i16, i16* %10104, i64 %13913
  %13915 = load i16, i16* %13914, align 2, !tbaa !382
  %13916 = insertelement <64 x i16> %13911, i16 %13915, i32 20
  %13917 = extractelement <64 x i32> %13811, i32 21
  %13918 = sext i32 %13917 to i64
  %13919 = getelementptr inbounds i16, i16* %10104, i64 %13918
  %13920 = load i16, i16* %13919, align 2, !tbaa !382
  %13921 = insertelement <64 x i16> %13916, i16 %13920, i32 21
  %13922 = extractelement <64 x i32> %13811, i32 22
  %13923 = sext i32 %13922 to i64
  %13924 = getelementptr inbounds i16, i16* %10104, i64 %13923
  %13925 = load i16, i16* %13924, align 2, !tbaa !382
  %13926 = insertelement <64 x i16> %13921, i16 %13925, i32 22
  %13927 = extractelement <64 x i32> %13811, i32 23
  %13928 = sext i32 %13927 to i64
  %13929 = getelementptr inbounds i16, i16* %10104, i64 %13928
  %13930 = load i16, i16* %13929, align 2, !tbaa !382
  %13931 = insertelement <64 x i16> %13926, i16 %13930, i32 23
  %13932 = extractelement <64 x i32> %13811, i32 24
  %13933 = sext i32 %13932 to i64
  %13934 = getelementptr inbounds i16, i16* %10104, i64 %13933
  %13935 = load i16, i16* %13934, align 2, !tbaa !382
  %13936 = insertelement <64 x i16> %13931, i16 %13935, i32 24
  %13937 = extractelement <64 x i32> %13811, i32 25
  %13938 = sext i32 %13937 to i64
  %13939 = getelementptr inbounds i16, i16* %10104, i64 %13938
  %13940 = load i16, i16* %13939, align 2, !tbaa !382
  %13941 = insertelement <64 x i16> %13936, i16 %13940, i32 25
  %13942 = extractelement <64 x i32> %13811, i32 26
  %13943 = sext i32 %13942 to i64
  %13944 = getelementptr inbounds i16, i16* %10104, i64 %13943
  %13945 = load i16, i16* %13944, align 2, !tbaa !382
  %13946 = insertelement <64 x i16> %13941, i16 %13945, i32 26
  %13947 = extractelement <64 x i32> %13811, i32 27
  %13948 = sext i32 %13947 to i64
  %13949 = getelementptr inbounds i16, i16* %10104, i64 %13948
  %13950 = load i16, i16* %13949, align 2, !tbaa !382
  %13951 = insertelement <64 x i16> %13946, i16 %13950, i32 27
  %13952 = extractelement <64 x i32> %13811, i32 28
  %13953 = sext i32 %13952 to i64
  %13954 = getelementptr inbounds i16, i16* %10104, i64 %13953
  %13955 = load i16, i16* %13954, align 2, !tbaa !382
  %13956 = insertelement <64 x i16> %13951, i16 %13955, i32 28
  %13957 = extractelement <64 x i32> %13811, i32 29
  %13958 = sext i32 %13957 to i64
  %13959 = getelementptr inbounds i16, i16* %10104, i64 %13958
  %13960 = load i16, i16* %13959, align 2, !tbaa !382
  %13961 = insertelement <64 x i16> %13956, i16 %13960, i32 29
  %13962 = extractelement <64 x i32> %13811, i32 30
  %13963 = sext i32 %13962 to i64
  %13964 = getelementptr inbounds i16, i16* %10104, i64 %13963
  %13965 = load i16, i16* %13964, align 2, !tbaa !382
  %13966 = insertelement <64 x i16> %13961, i16 %13965, i32 30
  %13967 = extractelement <64 x i32> %13811, i32 31
  %13968 = sext i32 %13967 to i64
  %13969 = getelementptr inbounds i16, i16* %10104, i64 %13968
  %13970 = load i16, i16* %13969, align 2, !tbaa !382
  %13971 = insertelement <64 x i16> %13966, i16 %13970, i32 31
  %13972 = extractelement <64 x i32> %13811, i32 32
  %13973 = sext i32 %13972 to i64
  %13974 = getelementptr inbounds i16, i16* %10104, i64 %13973
  %13975 = load i16, i16* %13974, align 2, !tbaa !382
  %13976 = insertelement <64 x i16> %13971, i16 %13975, i32 32
  %13977 = extractelement <64 x i32> %13811, i32 33
  %13978 = sext i32 %13977 to i64
  %13979 = getelementptr inbounds i16, i16* %10104, i64 %13978
  %13980 = load i16, i16* %13979, align 2, !tbaa !382
  %13981 = insertelement <64 x i16> %13976, i16 %13980, i32 33
  %13982 = extractelement <64 x i32> %13811, i32 34
  %13983 = sext i32 %13982 to i64
  %13984 = getelementptr inbounds i16, i16* %10104, i64 %13983
  %13985 = load i16, i16* %13984, align 2, !tbaa !382
  %13986 = insertelement <64 x i16> %13981, i16 %13985, i32 34
  %13987 = extractelement <64 x i32> %13811, i32 35
  %13988 = sext i32 %13987 to i64
  %13989 = getelementptr inbounds i16, i16* %10104, i64 %13988
  %13990 = load i16, i16* %13989, align 2, !tbaa !382
  %13991 = insertelement <64 x i16> %13986, i16 %13990, i32 35
  %13992 = extractelement <64 x i32> %13811, i32 36
  %13993 = sext i32 %13992 to i64
  %13994 = getelementptr inbounds i16, i16* %10104, i64 %13993
  %13995 = load i16, i16* %13994, align 2, !tbaa !382
  %13996 = insertelement <64 x i16> %13991, i16 %13995, i32 36
  %13997 = extractelement <64 x i32> %13811, i32 37
  %13998 = sext i32 %13997 to i64
  %13999 = getelementptr inbounds i16, i16* %10104, i64 %13998
  %14000 = load i16, i16* %13999, align 2, !tbaa !382
  %14001 = insertelement <64 x i16> %13996, i16 %14000, i32 37
  %14002 = extractelement <64 x i32> %13811, i32 38
  %14003 = sext i32 %14002 to i64
  %14004 = getelementptr inbounds i16, i16* %10104, i64 %14003
  %14005 = load i16, i16* %14004, align 2, !tbaa !382
  %14006 = insertelement <64 x i16> %14001, i16 %14005, i32 38
  %14007 = extractelement <64 x i32> %13811, i32 39
  %14008 = sext i32 %14007 to i64
  %14009 = getelementptr inbounds i16, i16* %10104, i64 %14008
  %14010 = load i16, i16* %14009, align 2, !tbaa !382
  %14011 = insertelement <64 x i16> %14006, i16 %14010, i32 39
  %14012 = extractelement <64 x i32> %13811, i32 40
  %14013 = sext i32 %14012 to i64
  %14014 = getelementptr inbounds i16, i16* %10104, i64 %14013
  %14015 = load i16, i16* %14014, align 2, !tbaa !382
  %14016 = insertelement <64 x i16> %14011, i16 %14015, i32 40
  %14017 = extractelement <64 x i32> %13811, i32 41
  %14018 = sext i32 %14017 to i64
  %14019 = getelementptr inbounds i16, i16* %10104, i64 %14018
  %14020 = load i16, i16* %14019, align 2, !tbaa !382
  %14021 = insertelement <64 x i16> %14016, i16 %14020, i32 41
  %14022 = extractelement <64 x i32> %13811, i32 42
  %14023 = sext i32 %14022 to i64
  %14024 = getelementptr inbounds i16, i16* %10104, i64 %14023
  %14025 = load i16, i16* %14024, align 2, !tbaa !382
  %14026 = insertelement <64 x i16> %14021, i16 %14025, i32 42
  %14027 = extractelement <64 x i32> %13811, i32 43
  %14028 = sext i32 %14027 to i64
  %14029 = getelementptr inbounds i16, i16* %10104, i64 %14028
  %14030 = load i16, i16* %14029, align 2, !tbaa !382
  %14031 = insertelement <64 x i16> %14026, i16 %14030, i32 43
  %14032 = extractelement <64 x i32> %13811, i32 44
  %14033 = sext i32 %14032 to i64
  %14034 = getelementptr inbounds i16, i16* %10104, i64 %14033
  %14035 = load i16, i16* %14034, align 2, !tbaa !382
  %14036 = insertelement <64 x i16> %14031, i16 %14035, i32 44
  %14037 = extractelement <64 x i32> %13811, i32 45
  %14038 = sext i32 %14037 to i64
  %14039 = getelementptr inbounds i16, i16* %10104, i64 %14038
  %14040 = load i16, i16* %14039, align 2, !tbaa !382
  %14041 = insertelement <64 x i16> %14036, i16 %14040, i32 45
  %14042 = extractelement <64 x i32> %13811, i32 46
  %14043 = sext i32 %14042 to i64
  %14044 = getelementptr inbounds i16, i16* %10104, i64 %14043
  %14045 = load i16, i16* %14044, align 2, !tbaa !382
  %14046 = insertelement <64 x i16> %14041, i16 %14045, i32 46
  %14047 = extractelement <64 x i32> %13811, i32 47
  %14048 = sext i32 %14047 to i64
  %14049 = getelementptr inbounds i16, i16* %10104, i64 %14048
  %14050 = load i16, i16* %14049, align 2, !tbaa !382
  %14051 = insertelement <64 x i16> %14046, i16 %14050, i32 47
  %14052 = extractelement <64 x i32> %13811, i32 48
  %14053 = sext i32 %14052 to i64
  %14054 = getelementptr inbounds i16, i16* %10104, i64 %14053
  %14055 = load i16, i16* %14054, align 2, !tbaa !382
  %14056 = insertelement <64 x i16> %14051, i16 %14055, i32 48
  %14057 = extractelement <64 x i32> %13811, i32 49
  %14058 = sext i32 %14057 to i64
  %14059 = getelementptr inbounds i16, i16* %10104, i64 %14058
  %14060 = load i16, i16* %14059, align 2, !tbaa !382
  %14061 = insertelement <64 x i16> %14056, i16 %14060, i32 49
  %14062 = extractelement <64 x i32> %13811, i32 50
  %14063 = sext i32 %14062 to i64
  %14064 = getelementptr inbounds i16, i16* %10104, i64 %14063
  %14065 = load i16, i16* %14064, align 2, !tbaa !382
  %14066 = insertelement <64 x i16> %14061, i16 %14065, i32 50
  %14067 = extractelement <64 x i32> %13811, i32 51
  %14068 = sext i32 %14067 to i64
  %14069 = getelementptr inbounds i16, i16* %10104, i64 %14068
  %14070 = load i16, i16* %14069, align 2, !tbaa !382
  %14071 = insertelement <64 x i16> %14066, i16 %14070, i32 51
  %14072 = extractelement <64 x i32> %13811, i32 52
  %14073 = sext i32 %14072 to i64
  %14074 = getelementptr inbounds i16, i16* %10104, i64 %14073
  %14075 = load i16, i16* %14074, align 2, !tbaa !382
  %14076 = insertelement <64 x i16> %14071, i16 %14075, i32 52
  %14077 = extractelement <64 x i32> %13811, i32 53
  %14078 = sext i32 %14077 to i64
  %14079 = getelementptr inbounds i16, i16* %10104, i64 %14078
  %14080 = load i16, i16* %14079, align 2, !tbaa !382
  %14081 = insertelement <64 x i16> %14076, i16 %14080, i32 53
  %14082 = extractelement <64 x i32> %13811, i32 54
  %14083 = sext i32 %14082 to i64
  %14084 = getelementptr inbounds i16, i16* %10104, i64 %14083
  %14085 = load i16, i16* %14084, align 2, !tbaa !382
  %14086 = insertelement <64 x i16> %14081, i16 %14085, i32 54
  %14087 = extractelement <64 x i32> %13811, i32 55
  %14088 = sext i32 %14087 to i64
  %14089 = getelementptr inbounds i16, i16* %10104, i64 %14088
  %14090 = load i16, i16* %14089, align 2, !tbaa !382
  %14091 = insertelement <64 x i16> %14086, i16 %14090, i32 55
  %14092 = extractelement <64 x i32> %13811, i32 56
  %14093 = sext i32 %14092 to i64
  %14094 = getelementptr inbounds i16, i16* %10104, i64 %14093
  %14095 = load i16, i16* %14094, align 2, !tbaa !382
  %14096 = insertelement <64 x i16> %14091, i16 %14095, i32 56
  %14097 = extractelement <64 x i32> %13811, i32 57
  %14098 = sext i32 %14097 to i64
  %14099 = getelementptr inbounds i16, i16* %10104, i64 %14098
  %14100 = load i16, i16* %14099, align 2, !tbaa !382
  %14101 = insertelement <64 x i16> %14096, i16 %14100, i32 57
  %14102 = extractelement <64 x i32> %13811, i32 58
  %14103 = sext i32 %14102 to i64
  %14104 = getelementptr inbounds i16, i16* %10104, i64 %14103
  %14105 = load i16, i16* %14104, align 2, !tbaa !382
  %14106 = insertelement <64 x i16> %14101, i16 %14105, i32 58
  %14107 = extractelement <64 x i32> %13811, i32 59
  %14108 = sext i32 %14107 to i64
  %14109 = getelementptr inbounds i16, i16* %10104, i64 %14108
  %14110 = load i16, i16* %14109, align 2, !tbaa !382
  %14111 = insertelement <64 x i16> %14106, i16 %14110, i32 59
  %14112 = extractelement <64 x i32> %13811, i32 60
  %14113 = sext i32 %14112 to i64
  %14114 = getelementptr inbounds i16, i16* %10104, i64 %14113
  %14115 = load i16, i16* %14114, align 2, !tbaa !382
  %14116 = insertelement <64 x i16> %14111, i16 %14115, i32 60
  %14117 = extractelement <64 x i32> %13811, i32 61
  %14118 = sext i32 %14117 to i64
  %14119 = getelementptr inbounds i16, i16* %10104, i64 %14118
  %14120 = load i16, i16* %14119, align 2, !tbaa !382
  %14121 = insertelement <64 x i16> %14116, i16 %14120, i32 61
  %14122 = extractelement <64 x i32> %13811, i32 62
  %14123 = sext i32 %14122 to i64
  %14124 = getelementptr inbounds i16, i16* %10104, i64 %14123
  %14125 = load i16, i16* %14124, align 2, !tbaa !382
  %14126 = insertelement <64 x i16> %14121, i16 %14125, i32 62
  %14127 = extractelement <64 x i32> %13811, i32 63
  %14128 = sext i32 %14127 to i64
  %14129 = getelementptr inbounds i16, i16* %10104, i64 %14128
  %14130 = load i16, i16* %14129, align 2, !tbaa !382
  %14131 = insertelement <64 x i16> %14126, i16 %14130, i32 63
  %14132 = add nsw i32 %blur_x.s0.x.v1.base.s68, -62
  %14133 = insertelement <64 x i32> undef, i32 %14132, i32 0
  %14134 = shufflevector <64 x i32> %14133, <64 x i32> undef, <64 x i32> zeroinitializer
  %14135 = add nsw <64 x i32> %14134, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %14136 = shufflevector <64 x i32> %14135, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14137 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14136, <4 x i32> %10103)
  %14138 = shufflevector <64 x i32> %14135, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14139 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14138, <4 x i32> %10103)
  %14140 = shufflevector <64 x i32> %14135, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %14141 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14140, <4 x i32> %10103)
  %14142 = shufflevector <64 x i32> %14135, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14143 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14142, <4 x i32> %10103)
  %14144 = shufflevector <64 x i32> %14135, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %14145 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14144, <4 x i32> %10103)
  %14146 = shufflevector <64 x i32> %14135, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %14147 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14146, <4 x i32> %10103)
  %14148 = shufflevector <64 x i32> %14135, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %14149 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14148, <4 x i32> %10103)
  %14150 = shufflevector <64 x i32> %14135, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %14151 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14150, <4 x i32> %10103)
  %14152 = shufflevector <64 x i32> %14135, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %14153 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14152, <4 x i32> %10103)
  %14154 = shufflevector <64 x i32> %14135, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %14155 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14154, <4 x i32> %10103)
  %14156 = shufflevector <64 x i32> %14135, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %14157 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14156, <4 x i32> %10103)
  %14158 = shufflevector <64 x i32> %14135, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %14159 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14158, <4 x i32> %10103)
  %14160 = shufflevector <64 x i32> %14135, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %14161 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14160, <4 x i32> %10103)
  %14162 = shufflevector <64 x i32> %14135, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %14163 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14162, <4 x i32> %10103)
  %14164 = shufflevector <64 x i32> %14135, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %14165 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14164, <4 x i32> %10103)
  %14166 = shufflevector <64 x i32> %14135, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %14167 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14166, <4 x i32> %10103)
  %14168 = shufflevector <4 x i32> %14167, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %14169 = shufflevector <8 x i32> %14168, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %14170 = shufflevector <16 x i32> %14169, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %14171 = shufflevector <32 x i32> %14170, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %14172 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14137, <4 x i32> zeroinitializer)
  %14173 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14139, <4 x i32> zeroinitializer)
  %14174 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14141, <4 x i32> zeroinitializer)
  %14175 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14143, <4 x i32> zeroinitializer)
  %14176 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14145, <4 x i32> zeroinitializer)
  %14177 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14147, <4 x i32> zeroinitializer)
  %14178 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14149, <4 x i32> zeroinitializer)
  %14179 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14151, <4 x i32> zeroinitializer)
  %14180 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14153, <4 x i32> zeroinitializer)
  %14181 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14155, <4 x i32> zeroinitializer)
  %14182 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14157, <4 x i32> zeroinitializer)
  %14183 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14159, <4 x i32> zeroinitializer)
  %14184 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14161, <4 x i32> zeroinitializer)
  %14185 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14163, <4 x i32> zeroinitializer)
  %14186 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14165, <4 x i32> zeroinitializer)
  %14187 = shufflevector <64 x i32> %14171, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %14188 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14187, <4 x i32> zeroinitializer)
  %14189 = shufflevector <4 x i32> %14172, <4 x i32> %14173, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14190 = shufflevector <4 x i32> %14174, <4 x i32> %14175, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14191 = shufflevector <4 x i32> %14176, <4 x i32> %14177, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14192 = shufflevector <4 x i32> %14178, <4 x i32> %14179, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14193 = shufflevector <4 x i32> %14180, <4 x i32> %14181, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14194 = shufflevector <4 x i32> %14182, <4 x i32> %14183, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14195 = shufflevector <4 x i32> %14184, <4 x i32> %14185, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14196 = shufflevector <4 x i32> %14186, <4 x i32> %14188, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14197 = shufflevector <8 x i32> %14189, <8 x i32> %14190, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14198 = shufflevector <8 x i32> %14191, <8 x i32> %14192, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14199 = shufflevector <8 x i32> %14193, <8 x i32> %14194, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14200 = shufflevector <8 x i32> %14195, <8 x i32> %14196, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14201 = shufflevector <16 x i32> %14197, <16 x i32> %14198, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14202 = shufflevector <16 x i32> %14199, <16 x i32> %14200, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14203 = shufflevector <32 x i32> %14201, <32 x i32> %14202, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %14204 = add nsw <64 x i32> %14203, %t25269
  %14205 = extractelement <64 x i32> %14204, i32 0
  %14206 = sext i32 %14205 to i64
  %14207 = getelementptr inbounds i16, i16* %10104, i64 %14206
  %14208 = load i16, i16* %14207, align 2, !tbaa !382
  %14209 = insertelement <64 x i16> undef, i16 %14208, i32 0
  %14210 = extractelement <64 x i32> %14204, i32 1
  %14211 = sext i32 %14210 to i64
  %14212 = getelementptr inbounds i16, i16* %10104, i64 %14211
  %14213 = load i16, i16* %14212, align 2, !tbaa !382
  %14214 = insertelement <64 x i16> %14209, i16 %14213, i32 1
  %14215 = extractelement <64 x i32> %14204, i32 2
  %14216 = sext i32 %14215 to i64
  %14217 = getelementptr inbounds i16, i16* %10104, i64 %14216
  %14218 = load i16, i16* %14217, align 2, !tbaa !382
  %14219 = insertelement <64 x i16> %14214, i16 %14218, i32 2
  %14220 = extractelement <64 x i32> %14204, i32 3
  %14221 = sext i32 %14220 to i64
  %14222 = getelementptr inbounds i16, i16* %10104, i64 %14221
  %14223 = load i16, i16* %14222, align 2, !tbaa !382
  %14224 = insertelement <64 x i16> %14219, i16 %14223, i32 3
  %14225 = extractelement <64 x i32> %14204, i32 4
  %14226 = sext i32 %14225 to i64
  %14227 = getelementptr inbounds i16, i16* %10104, i64 %14226
  %14228 = load i16, i16* %14227, align 2, !tbaa !382
  %14229 = insertelement <64 x i16> %14224, i16 %14228, i32 4
  %14230 = extractelement <64 x i32> %14204, i32 5
  %14231 = sext i32 %14230 to i64
  %14232 = getelementptr inbounds i16, i16* %10104, i64 %14231
  %14233 = load i16, i16* %14232, align 2, !tbaa !382
  %14234 = insertelement <64 x i16> %14229, i16 %14233, i32 5
  %14235 = extractelement <64 x i32> %14204, i32 6
  %14236 = sext i32 %14235 to i64
  %14237 = getelementptr inbounds i16, i16* %10104, i64 %14236
  %14238 = load i16, i16* %14237, align 2, !tbaa !382
  %14239 = insertelement <64 x i16> %14234, i16 %14238, i32 6
  %14240 = extractelement <64 x i32> %14204, i32 7
  %14241 = sext i32 %14240 to i64
  %14242 = getelementptr inbounds i16, i16* %10104, i64 %14241
  %14243 = load i16, i16* %14242, align 2, !tbaa !382
  %14244 = insertelement <64 x i16> %14239, i16 %14243, i32 7
  %14245 = extractelement <64 x i32> %14204, i32 8
  %14246 = sext i32 %14245 to i64
  %14247 = getelementptr inbounds i16, i16* %10104, i64 %14246
  %14248 = load i16, i16* %14247, align 2, !tbaa !382
  %14249 = insertelement <64 x i16> %14244, i16 %14248, i32 8
  %14250 = extractelement <64 x i32> %14204, i32 9
  %14251 = sext i32 %14250 to i64
  %14252 = getelementptr inbounds i16, i16* %10104, i64 %14251
  %14253 = load i16, i16* %14252, align 2, !tbaa !382
  %14254 = insertelement <64 x i16> %14249, i16 %14253, i32 9
  %14255 = extractelement <64 x i32> %14204, i32 10
  %14256 = sext i32 %14255 to i64
  %14257 = getelementptr inbounds i16, i16* %10104, i64 %14256
  %14258 = load i16, i16* %14257, align 2, !tbaa !382
  %14259 = insertelement <64 x i16> %14254, i16 %14258, i32 10
  %14260 = extractelement <64 x i32> %14204, i32 11
  %14261 = sext i32 %14260 to i64
  %14262 = getelementptr inbounds i16, i16* %10104, i64 %14261
  %14263 = load i16, i16* %14262, align 2, !tbaa !382
  %14264 = insertelement <64 x i16> %14259, i16 %14263, i32 11
  %14265 = extractelement <64 x i32> %14204, i32 12
  %14266 = sext i32 %14265 to i64
  %14267 = getelementptr inbounds i16, i16* %10104, i64 %14266
  %14268 = load i16, i16* %14267, align 2, !tbaa !382
  %14269 = insertelement <64 x i16> %14264, i16 %14268, i32 12
  %14270 = extractelement <64 x i32> %14204, i32 13
  %14271 = sext i32 %14270 to i64
  %14272 = getelementptr inbounds i16, i16* %10104, i64 %14271
  %14273 = load i16, i16* %14272, align 2, !tbaa !382
  %14274 = insertelement <64 x i16> %14269, i16 %14273, i32 13
  %14275 = extractelement <64 x i32> %14204, i32 14
  %14276 = sext i32 %14275 to i64
  %14277 = getelementptr inbounds i16, i16* %10104, i64 %14276
  %14278 = load i16, i16* %14277, align 2, !tbaa !382
  %14279 = insertelement <64 x i16> %14274, i16 %14278, i32 14
  %14280 = extractelement <64 x i32> %14204, i32 15
  %14281 = sext i32 %14280 to i64
  %14282 = getelementptr inbounds i16, i16* %10104, i64 %14281
  %14283 = load i16, i16* %14282, align 2, !tbaa !382
  %14284 = insertelement <64 x i16> %14279, i16 %14283, i32 15
  %14285 = extractelement <64 x i32> %14204, i32 16
  %14286 = sext i32 %14285 to i64
  %14287 = getelementptr inbounds i16, i16* %10104, i64 %14286
  %14288 = load i16, i16* %14287, align 2, !tbaa !382
  %14289 = insertelement <64 x i16> %14284, i16 %14288, i32 16
  %14290 = extractelement <64 x i32> %14204, i32 17
  %14291 = sext i32 %14290 to i64
  %14292 = getelementptr inbounds i16, i16* %10104, i64 %14291
  %14293 = load i16, i16* %14292, align 2, !tbaa !382
  %14294 = insertelement <64 x i16> %14289, i16 %14293, i32 17
  %14295 = extractelement <64 x i32> %14204, i32 18
  %14296 = sext i32 %14295 to i64
  %14297 = getelementptr inbounds i16, i16* %10104, i64 %14296
  %14298 = load i16, i16* %14297, align 2, !tbaa !382
  %14299 = insertelement <64 x i16> %14294, i16 %14298, i32 18
  %14300 = extractelement <64 x i32> %14204, i32 19
  %14301 = sext i32 %14300 to i64
  %14302 = getelementptr inbounds i16, i16* %10104, i64 %14301
  %14303 = load i16, i16* %14302, align 2, !tbaa !382
  %14304 = insertelement <64 x i16> %14299, i16 %14303, i32 19
  %14305 = extractelement <64 x i32> %14204, i32 20
  %14306 = sext i32 %14305 to i64
  %14307 = getelementptr inbounds i16, i16* %10104, i64 %14306
  %14308 = load i16, i16* %14307, align 2, !tbaa !382
  %14309 = insertelement <64 x i16> %14304, i16 %14308, i32 20
  %14310 = extractelement <64 x i32> %14204, i32 21
  %14311 = sext i32 %14310 to i64
  %14312 = getelementptr inbounds i16, i16* %10104, i64 %14311
  %14313 = load i16, i16* %14312, align 2, !tbaa !382
  %14314 = insertelement <64 x i16> %14309, i16 %14313, i32 21
  %14315 = extractelement <64 x i32> %14204, i32 22
  %14316 = sext i32 %14315 to i64
  %14317 = getelementptr inbounds i16, i16* %10104, i64 %14316
  %14318 = load i16, i16* %14317, align 2, !tbaa !382
  %14319 = insertelement <64 x i16> %14314, i16 %14318, i32 22
  %14320 = extractelement <64 x i32> %14204, i32 23
  %14321 = sext i32 %14320 to i64
  %14322 = getelementptr inbounds i16, i16* %10104, i64 %14321
  %14323 = load i16, i16* %14322, align 2, !tbaa !382
  %14324 = insertelement <64 x i16> %14319, i16 %14323, i32 23
  %14325 = extractelement <64 x i32> %14204, i32 24
  %14326 = sext i32 %14325 to i64
  %14327 = getelementptr inbounds i16, i16* %10104, i64 %14326
  %14328 = load i16, i16* %14327, align 2, !tbaa !382
  %14329 = insertelement <64 x i16> %14324, i16 %14328, i32 24
  %14330 = extractelement <64 x i32> %14204, i32 25
  %14331 = sext i32 %14330 to i64
  %14332 = getelementptr inbounds i16, i16* %10104, i64 %14331
  %14333 = load i16, i16* %14332, align 2, !tbaa !382
  %14334 = insertelement <64 x i16> %14329, i16 %14333, i32 25
  %14335 = extractelement <64 x i32> %14204, i32 26
  %14336 = sext i32 %14335 to i64
  %14337 = getelementptr inbounds i16, i16* %10104, i64 %14336
  %14338 = load i16, i16* %14337, align 2, !tbaa !382
  %14339 = insertelement <64 x i16> %14334, i16 %14338, i32 26
  %14340 = extractelement <64 x i32> %14204, i32 27
  %14341 = sext i32 %14340 to i64
  %14342 = getelementptr inbounds i16, i16* %10104, i64 %14341
  %14343 = load i16, i16* %14342, align 2, !tbaa !382
  %14344 = insertelement <64 x i16> %14339, i16 %14343, i32 27
  %14345 = extractelement <64 x i32> %14204, i32 28
  %14346 = sext i32 %14345 to i64
  %14347 = getelementptr inbounds i16, i16* %10104, i64 %14346
  %14348 = load i16, i16* %14347, align 2, !tbaa !382
  %14349 = insertelement <64 x i16> %14344, i16 %14348, i32 28
  %14350 = extractelement <64 x i32> %14204, i32 29
  %14351 = sext i32 %14350 to i64
  %14352 = getelementptr inbounds i16, i16* %10104, i64 %14351
  %14353 = load i16, i16* %14352, align 2, !tbaa !382
  %14354 = insertelement <64 x i16> %14349, i16 %14353, i32 29
  %14355 = extractelement <64 x i32> %14204, i32 30
  %14356 = sext i32 %14355 to i64
  %14357 = getelementptr inbounds i16, i16* %10104, i64 %14356
  %14358 = load i16, i16* %14357, align 2, !tbaa !382
  %14359 = insertelement <64 x i16> %14354, i16 %14358, i32 30
  %14360 = extractelement <64 x i32> %14204, i32 31
  %14361 = sext i32 %14360 to i64
  %14362 = getelementptr inbounds i16, i16* %10104, i64 %14361
  %14363 = load i16, i16* %14362, align 2, !tbaa !382
  %14364 = insertelement <64 x i16> %14359, i16 %14363, i32 31
  %14365 = extractelement <64 x i32> %14204, i32 32
  %14366 = sext i32 %14365 to i64
  %14367 = getelementptr inbounds i16, i16* %10104, i64 %14366
  %14368 = load i16, i16* %14367, align 2, !tbaa !382
  %14369 = insertelement <64 x i16> %14364, i16 %14368, i32 32
  %14370 = extractelement <64 x i32> %14204, i32 33
  %14371 = sext i32 %14370 to i64
  %14372 = getelementptr inbounds i16, i16* %10104, i64 %14371
  %14373 = load i16, i16* %14372, align 2, !tbaa !382
  %14374 = insertelement <64 x i16> %14369, i16 %14373, i32 33
  %14375 = extractelement <64 x i32> %14204, i32 34
  %14376 = sext i32 %14375 to i64
  %14377 = getelementptr inbounds i16, i16* %10104, i64 %14376
  %14378 = load i16, i16* %14377, align 2, !tbaa !382
  %14379 = insertelement <64 x i16> %14374, i16 %14378, i32 34
  %14380 = extractelement <64 x i32> %14204, i32 35
  %14381 = sext i32 %14380 to i64
  %14382 = getelementptr inbounds i16, i16* %10104, i64 %14381
  %14383 = load i16, i16* %14382, align 2, !tbaa !382
  %14384 = insertelement <64 x i16> %14379, i16 %14383, i32 35
  %14385 = extractelement <64 x i32> %14204, i32 36
  %14386 = sext i32 %14385 to i64
  %14387 = getelementptr inbounds i16, i16* %10104, i64 %14386
  %14388 = load i16, i16* %14387, align 2, !tbaa !382
  %14389 = insertelement <64 x i16> %14384, i16 %14388, i32 36
  %14390 = extractelement <64 x i32> %14204, i32 37
  %14391 = sext i32 %14390 to i64
  %14392 = getelementptr inbounds i16, i16* %10104, i64 %14391
  %14393 = load i16, i16* %14392, align 2, !tbaa !382
  %14394 = insertelement <64 x i16> %14389, i16 %14393, i32 37
  %14395 = extractelement <64 x i32> %14204, i32 38
  %14396 = sext i32 %14395 to i64
  %14397 = getelementptr inbounds i16, i16* %10104, i64 %14396
  %14398 = load i16, i16* %14397, align 2, !tbaa !382
  %14399 = insertelement <64 x i16> %14394, i16 %14398, i32 38
  %14400 = extractelement <64 x i32> %14204, i32 39
  %14401 = sext i32 %14400 to i64
  %14402 = getelementptr inbounds i16, i16* %10104, i64 %14401
  %14403 = load i16, i16* %14402, align 2, !tbaa !382
  %14404 = insertelement <64 x i16> %14399, i16 %14403, i32 39
  %14405 = extractelement <64 x i32> %14204, i32 40
  %14406 = sext i32 %14405 to i64
  %14407 = getelementptr inbounds i16, i16* %10104, i64 %14406
  %14408 = load i16, i16* %14407, align 2, !tbaa !382
  %14409 = insertelement <64 x i16> %14404, i16 %14408, i32 40
  %14410 = extractelement <64 x i32> %14204, i32 41
  %14411 = sext i32 %14410 to i64
  %14412 = getelementptr inbounds i16, i16* %10104, i64 %14411
  %14413 = load i16, i16* %14412, align 2, !tbaa !382
  %14414 = insertelement <64 x i16> %14409, i16 %14413, i32 41
  %14415 = extractelement <64 x i32> %14204, i32 42
  %14416 = sext i32 %14415 to i64
  %14417 = getelementptr inbounds i16, i16* %10104, i64 %14416
  %14418 = load i16, i16* %14417, align 2, !tbaa !382
  %14419 = insertelement <64 x i16> %14414, i16 %14418, i32 42
  %14420 = extractelement <64 x i32> %14204, i32 43
  %14421 = sext i32 %14420 to i64
  %14422 = getelementptr inbounds i16, i16* %10104, i64 %14421
  %14423 = load i16, i16* %14422, align 2, !tbaa !382
  %14424 = insertelement <64 x i16> %14419, i16 %14423, i32 43
  %14425 = extractelement <64 x i32> %14204, i32 44
  %14426 = sext i32 %14425 to i64
  %14427 = getelementptr inbounds i16, i16* %10104, i64 %14426
  %14428 = load i16, i16* %14427, align 2, !tbaa !382
  %14429 = insertelement <64 x i16> %14424, i16 %14428, i32 44
  %14430 = extractelement <64 x i32> %14204, i32 45
  %14431 = sext i32 %14430 to i64
  %14432 = getelementptr inbounds i16, i16* %10104, i64 %14431
  %14433 = load i16, i16* %14432, align 2, !tbaa !382
  %14434 = insertelement <64 x i16> %14429, i16 %14433, i32 45
  %14435 = extractelement <64 x i32> %14204, i32 46
  %14436 = sext i32 %14435 to i64
  %14437 = getelementptr inbounds i16, i16* %10104, i64 %14436
  %14438 = load i16, i16* %14437, align 2, !tbaa !382
  %14439 = insertelement <64 x i16> %14434, i16 %14438, i32 46
  %14440 = extractelement <64 x i32> %14204, i32 47
  %14441 = sext i32 %14440 to i64
  %14442 = getelementptr inbounds i16, i16* %10104, i64 %14441
  %14443 = load i16, i16* %14442, align 2, !tbaa !382
  %14444 = insertelement <64 x i16> %14439, i16 %14443, i32 47
  %14445 = extractelement <64 x i32> %14204, i32 48
  %14446 = sext i32 %14445 to i64
  %14447 = getelementptr inbounds i16, i16* %10104, i64 %14446
  %14448 = load i16, i16* %14447, align 2, !tbaa !382
  %14449 = insertelement <64 x i16> %14444, i16 %14448, i32 48
  %14450 = extractelement <64 x i32> %14204, i32 49
  %14451 = sext i32 %14450 to i64
  %14452 = getelementptr inbounds i16, i16* %10104, i64 %14451
  %14453 = load i16, i16* %14452, align 2, !tbaa !382
  %14454 = insertelement <64 x i16> %14449, i16 %14453, i32 49
  %14455 = extractelement <64 x i32> %14204, i32 50
  %14456 = sext i32 %14455 to i64
  %14457 = getelementptr inbounds i16, i16* %10104, i64 %14456
  %14458 = load i16, i16* %14457, align 2, !tbaa !382
  %14459 = insertelement <64 x i16> %14454, i16 %14458, i32 50
  %14460 = extractelement <64 x i32> %14204, i32 51
  %14461 = sext i32 %14460 to i64
  %14462 = getelementptr inbounds i16, i16* %10104, i64 %14461
  %14463 = load i16, i16* %14462, align 2, !tbaa !382
  %14464 = insertelement <64 x i16> %14459, i16 %14463, i32 51
  %14465 = extractelement <64 x i32> %14204, i32 52
  %14466 = sext i32 %14465 to i64
  %14467 = getelementptr inbounds i16, i16* %10104, i64 %14466
  %14468 = load i16, i16* %14467, align 2, !tbaa !382
  %14469 = insertelement <64 x i16> %14464, i16 %14468, i32 52
  %14470 = extractelement <64 x i32> %14204, i32 53
  %14471 = sext i32 %14470 to i64
  %14472 = getelementptr inbounds i16, i16* %10104, i64 %14471
  %14473 = load i16, i16* %14472, align 2, !tbaa !382
  %14474 = insertelement <64 x i16> %14469, i16 %14473, i32 53
  %14475 = extractelement <64 x i32> %14204, i32 54
  %14476 = sext i32 %14475 to i64
  %14477 = getelementptr inbounds i16, i16* %10104, i64 %14476
  %14478 = load i16, i16* %14477, align 2, !tbaa !382
  %14479 = insertelement <64 x i16> %14474, i16 %14478, i32 54
  %14480 = extractelement <64 x i32> %14204, i32 55
  %14481 = sext i32 %14480 to i64
  %14482 = getelementptr inbounds i16, i16* %10104, i64 %14481
  %14483 = load i16, i16* %14482, align 2, !tbaa !382
  %14484 = insertelement <64 x i16> %14479, i16 %14483, i32 55
  %14485 = extractelement <64 x i32> %14204, i32 56
  %14486 = sext i32 %14485 to i64
  %14487 = getelementptr inbounds i16, i16* %10104, i64 %14486
  %14488 = load i16, i16* %14487, align 2, !tbaa !382
  %14489 = insertelement <64 x i16> %14484, i16 %14488, i32 56
  %14490 = extractelement <64 x i32> %14204, i32 57
  %14491 = sext i32 %14490 to i64
  %14492 = getelementptr inbounds i16, i16* %10104, i64 %14491
  %14493 = load i16, i16* %14492, align 2, !tbaa !382
  %14494 = insertelement <64 x i16> %14489, i16 %14493, i32 57
  %14495 = extractelement <64 x i32> %14204, i32 58
  %14496 = sext i32 %14495 to i64
  %14497 = getelementptr inbounds i16, i16* %10104, i64 %14496
  %14498 = load i16, i16* %14497, align 2, !tbaa !382
  %14499 = insertelement <64 x i16> %14494, i16 %14498, i32 58
  %14500 = extractelement <64 x i32> %14204, i32 59
  %14501 = sext i32 %14500 to i64
  %14502 = getelementptr inbounds i16, i16* %10104, i64 %14501
  %14503 = load i16, i16* %14502, align 2, !tbaa !382
  %14504 = insertelement <64 x i16> %14499, i16 %14503, i32 59
  %14505 = extractelement <64 x i32> %14204, i32 60
  %14506 = sext i32 %14505 to i64
  %14507 = getelementptr inbounds i16, i16* %10104, i64 %14506
  %14508 = load i16, i16* %14507, align 2, !tbaa !382
  %14509 = insertelement <64 x i16> %14504, i16 %14508, i32 60
  %14510 = extractelement <64 x i32> %14204, i32 61
  %14511 = sext i32 %14510 to i64
  %14512 = getelementptr inbounds i16, i16* %10104, i64 %14511
  %14513 = load i16, i16* %14512, align 2, !tbaa !382
  %14514 = insertelement <64 x i16> %14509, i16 %14513, i32 61
  %14515 = extractelement <64 x i32> %14204, i32 62
  %14516 = sext i32 %14515 to i64
  %14517 = getelementptr inbounds i16, i16* %10104, i64 %14516
  %14518 = load i16, i16* %14517, align 2, !tbaa !382
  %14519 = insertelement <64 x i16> %14514, i16 %14518, i32 62
  %14520 = extractelement <64 x i32> %14204, i32 63
  %14521 = sext i32 %14520 to i64
  %14522 = getelementptr inbounds i16, i16* %10104, i64 %14521
  %14523 = load i16, i16* %14522, align 2, !tbaa !382
  %14524 = insertelement <64 x i16> %14519, i16 %14523, i32 63
  %14525 = add nsw i32 %blur_x.s0.x.v1.base.s68, -61
  %14526 = insertelement <64 x i32> undef, i32 %14525, i32 0
  %14527 = shufflevector <64 x i32> %14526, <64 x i32> undef, <64 x i32> zeroinitializer
  %14528 = add nsw <64 x i32> %14527, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %14529 = shufflevector <64 x i32> %14528, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14530 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14529, <4 x i32> %10103)
  %14531 = shufflevector <64 x i32> %14528, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14532 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14531, <4 x i32> %10103)
  %14533 = shufflevector <64 x i32> %14528, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %14534 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14533, <4 x i32> %10103)
  %14535 = shufflevector <64 x i32> %14528, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14536 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14535, <4 x i32> %10103)
  %14537 = shufflevector <64 x i32> %14528, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %14538 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14537, <4 x i32> %10103)
  %14539 = shufflevector <64 x i32> %14528, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %14540 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14539, <4 x i32> %10103)
  %14541 = shufflevector <64 x i32> %14528, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %14542 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14541, <4 x i32> %10103)
  %14543 = shufflevector <64 x i32> %14528, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %14544 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14543, <4 x i32> %10103)
  %14545 = shufflevector <64 x i32> %14528, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %14546 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14545, <4 x i32> %10103)
  %14547 = shufflevector <64 x i32> %14528, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %14548 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14547, <4 x i32> %10103)
  %14549 = shufflevector <64 x i32> %14528, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %14550 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14549, <4 x i32> %10103)
  %14551 = shufflevector <64 x i32> %14528, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %14552 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14551, <4 x i32> %10103)
  %14553 = shufflevector <64 x i32> %14528, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %14554 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14553, <4 x i32> %10103)
  %14555 = shufflevector <64 x i32> %14528, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %14556 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14555, <4 x i32> %10103)
  %14557 = shufflevector <64 x i32> %14528, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %14558 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14557, <4 x i32> %10103)
  %14559 = shufflevector <64 x i32> %14528, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %14560 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14559, <4 x i32> %10103)
  %14561 = shufflevector <4 x i32> %14560, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %14562 = shufflevector <8 x i32> %14561, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %14563 = shufflevector <16 x i32> %14562, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %14564 = shufflevector <32 x i32> %14563, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %14565 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14530, <4 x i32> zeroinitializer)
  %14566 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14532, <4 x i32> zeroinitializer)
  %14567 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14534, <4 x i32> zeroinitializer)
  %14568 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14536, <4 x i32> zeroinitializer)
  %14569 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14538, <4 x i32> zeroinitializer)
  %14570 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14540, <4 x i32> zeroinitializer)
  %14571 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14542, <4 x i32> zeroinitializer)
  %14572 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14544, <4 x i32> zeroinitializer)
  %14573 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14546, <4 x i32> zeroinitializer)
  %14574 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14548, <4 x i32> zeroinitializer)
  %14575 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14550, <4 x i32> zeroinitializer)
  %14576 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14552, <4 x i32> zeroinitializer)
  %14577 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14554, <4 x i32> zeroinitializer)
  %14578 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14556, <4 x i32> zeroinitializer)
  %14579 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14558, <4 x i32> zeroinitializer)
  %14580 = shufflevector <64 x i32> %14564, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %14581 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14580, <4 x i32> zeroinitializer)
  %14582 = shufflevector <4 x i32> %14565, <4 x i32> %14566, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14583 = shufflevector <4 x i32> %14567, <4 x i32> %14568, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14584 = shufflevector <4 x i32> %14569, <4 x i32> %14570, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14585 = shufflevector <4 x i32> %14571, <4 x i32> %14572, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14586 = shufflevector <4 x i32> %14573, <4 x i32> %14574, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14587 = shufflevector <4 x i32> %14575, <4 x i32> %14576, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14588 = shufflevector <4 x i32> %14577, <4 x i32> %14578, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14589 = shufflevector <4 x i32> %14579, <4 x i32> %14581, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14590 = shufflevector <8 x i32> %14582, <8 x i32> %14583, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14591 = shufflevector <8 x i32> %14584, <8 x i32> %14585, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14592 = shufflevector <8 x i32> %14586, <8 x i32> %14587, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14593 = shufflevector <8 x i32> %14588, <8 x i32> %14589, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14594 = shufflevector <16 x i32> %14590, <16 x i32> %14591, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14595 = shufflevector <16 x i32> %14592, <16 x i32> %14593, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14596 = shufflevector <32 x i32> %14594, <32 x i32> %14595, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %14597 = add nsw <64 x i32> %14596, %t25269
  %14598 = extractelement <64 x i32> %14597, i32 0
  %14599 = sext i32 %14598 to i64
  %14600 = getelementptr inbounds i16, i16* %10104, i64 %14599
  %14601 = load i16, i16* %14600, align 2, !tbaa !382
  %14602 = insertelement <64 x i16> undef, i16 %14601, i32 0
  %14603 = extractelement <64 x i32> %14597, i32 1
  %14604 = sext i32 %14603 to i64
  %14605 = getelementptr inbounds i16, i16* %10104, i64 %14604
  %14606 = load i16, i16* %14605, align 2, !tbaa !382
  %14607 = insertelement <64 x i16> %14602, i16 %14606, i32 1
  %14608 = extractelement <64 x i32> %14597, i32 2
  %14609 = sext i32 %14608 to i64
  %14610 = getelementptr inbounds i16, i16* %10104, i64 %14609
  %14611 = load i16, i16* %14610, align 2, !tbaa !382
  %14612 = insertelement <64 x i16> %14607, i16 %14611, i32 2
  %14613 = extractelement <64 x i32> %14597, i32 3
  %14614 = sext i32 %14613 to i64
  %14615 = getelementptr inbounds i16, i16* %10104, i64 %14614
  %14616 = load i16, i16* %14615, align 2, !tbaa !382
  %14617 = insertelement <64 x i16> %14612, i16 %14616, i32 3
  %14618 = extractelement <64 x i32> %14597, i32 4
  %14619 = sext i32 %14618 to i64
  %14620 = getelementptr inbounds i16, i16* %10104, i64 %14619
  %14621 = load i16, i16* %14620, align 2, !tbaa !382
  %14622 = insertelement <64 x i16> %14617, i16 %14621, i32 4
  %14623 = extractelement <64 x i32> %14597, i32 5
  %14624 = sext i32 %14623 to i64
  %14625 = getelementptr inbounds i16, i16* %10104, i64 %14624
  %14626 = load i16, i16* %14625, align 2, !tbaa !382
  %14627 = insertelement <64 x i16> %14622, i16 %14626, i32 5
  %14628 = extractelement <64 x i32> %14597, i32 6
  %14629 = sext i32 %14628 to i64
  %14630 = getelementptr inbounds i16, i16* %10104, i64 %14629
  %14631 = load i16, i16* %14630, align 2, !tbaa !382
  %14632 = insertelement <64 x i16> %14627, i16 %14631, i32 6
  %14633 = extractelement <64 x i32> %14597, i32 7
  %14634 = sext i32 %14633 to i64
  %14635 = getelementptr inbounds i16, i16* %10104, i64 %14634
  %14636 = load i16, i16* %14635, align 2, !tbaa !382
  %14637 = insertelement <64 x i16> %14632, i16 %14636, i32 7
  %14638 = extractelement <64 x i32> %14597, i32 8
  %14639 = sext i32 %14638 to i64
  %14640 = getelementptr inbounds i16, i16* %10104, i64 %14639
  %14641 = load i16, i16* %14640, align 2, !tbaa !382
  %14642 = insertelement <64 x i16> %14637, i16 %14641, i32 8
  %14643 = extractelement <64 x i32> %14597, i32 9
  %14644 = sext i32 %14643 to i64
  %14645 = getelementptr inbounds i16, i16* %10104, i64 %14644
  %14646 = load i16, i16* %14645, align 2, !tbaa !382
  %14647 = insertelement <64 x i16> %14642, i16 %14646, i32 9
  %14648 = extractelement <64 x i32> %14597, i32 10
  %14649 = sext i32 %14648 to i64
  %14650 = getelementptr inbounds i16, i16* %10104, i64 %14649
  %14651 = load i16, i16* %14650, align 2, !tbaa !382
  %14652 = insertelement <64 x i16> %14647, i16 %14651, i32 10
  %14653 = extractelement <64 x i32> %14597, i32 11
  %14654 = sext i32 %14653 to i64
  %14655 = getelementptr inbounds i16, i16* %10104, i64 %14654
  %14656 = load i16, i16* %14655, align 2, !tbaa !382
  %14657 = insertelement <64 x i16> %14652, i16 %14656, i32 11
  %14658 = extractelement <64 x i32> %14597, i32 12
  %14659 = sext i32 %14658 to i64
  %14660 = getelementptr inbounds i16, i16* %10104, i64 %14659
  %14661 = load i16, i16* %14660, align 2, !tbaa !382
  %14662 = insertelement <64 x i16> %14657, i16 %14661, i32 12
  %14663 = extractelement <64 x i32> %14597, i32 13
  %14664 = sext i32 %14663 to i64
  %14665 = getelementptr inbounds i16, i16* %10104, i64 %14664
  %14666 = load i16, i16* %14665, align 2, !tbaa !382
  %14667 = insertelement <64 x i16> %14662, i16 %14666, i32 13
  %14668 = extractelement <64 x i32> %14597, i32 14
  %14669 = sext i32 %14668 to i64
  %14670 = getelementptr inbounds i16, i16* %10104, i64 %14669
  %14671 = load i16, i16* %14670, align 2, !tbaa !382
  %14672 = insertelement <64 x i16> %14667, i16 %14671, i32 14
  %14673 = extractelement <64 x i32> %14597, i32 15
  %14674 = sext i32 %14673 to i64
  %14675 = getelementptr inbounds i16, i16* %10104, i64 %14674
  %14676 = load i16, i16* %14675, align 2, !tbaa !382
  %14677 = insertelement <64 x i16> %14672, i16 %14676, i32 15
  %14678 = extractelement <64 x i32> %14597, i32 16
  %14679 = sext i32 %14678 to i64
  %14680 = getelementptr inbounds i16, i16* %10104, i64 %14679
  %14681 = load i16, i16* %14680, align 2, !tbaa !382
  %14682 = insertelement <64 x i16> %14677, i16 %14681, i32 16
  %14683 = extractelement <64 x i32> %14597, i32 17
  %14684 = sext i32 %14683 to i64
  %14685 = getelementptr inbounds i16, i16* %10104, i64 %14684
  %14686 = load i16, i16* %14685, align 2, !tbaa !382
  %14687 = insertelement <64 x i16> %14682, i16 %14686, i32 17
  %14688 = extractelement <64 x i32> %14597, i32 18
  %14689 = sext i32 %14688 to i64
  %14690 = getelementptr inbounds i16, i16* %10104, i64 %14689
  %14691 = load i16, i16* %14690, align 2, !tbaa !382
  %14692 = insertelement <64 x i16> %14687, i16 %14691, i32 18
  %14693 = extractelement <64 x i32> %14597, i32 19
  %14694 = sext i32 %14693 to i64
  %14695 = getelementptr inbounds i16, i16* %10104, i64 %14694
  %14696 = load i16, i16* %14695, align 2, !tbaa !382
  %14697 = insertelement <64 x i16> %14692, i16 %14696, i32 19
  %14698 = extractelement <64 x i32> %14597, i32 20
  %14699 = sext i32 %14698 to i64
  %14700 = getelementptr inbounds i16, i16* %10104, i64 %14699
  %14701 = load i16, i16* %14700, align 2, !tbaa !382
  %14702 = insertelement <64 x i16> %14697, i16 %14701, i32 20
  %14703 = extractelement <64 x i32> %14597, i32 21
  %14704 = sext i32 %14703 to i64
  %14705 = getelementptr inbounds i16, i16* %10104, i64 %14704
  %14706 = load i16, i16* %14705, align 2, !tbaa !382
  %14707 = insertelement <64 x i16> %14702, i16 %14706, i32 21
  %14708 = extractelement <64 x i32> %14597, i32 22
  %14709 = sext i32 %14708 to i64
  %14710 = getelementptr inbounds i16, i16* %10104, i64 %14709
  %14711 = load i16, i16* %14710, align 2, !tbaa !382
  %14712 = insertelement <64 x i16> %14707, i16 %14711, i32 22
  %14713 = extractelement <64 x i32> %14597, i32 23
  %14714 = sext i32 %14713 to i64
  %14715 = getelementptr inbounds i16, i16* %10104, i64 %14714
  %14716 = load i16, i16* %14715, align 2, !tbaa !382
  %14717 = insertelement <64 x i16> %14712, i16 %14716, i32 23
  %14718 = extractelement <64 x i32> %14597, i32 24
  %14719 = sext i32 %14718 to i64
  %14720 = getelementptr inbounds i16, i16* %10104, i64 %14719
  %14721 = load i16, i16* %14720, align 2, !tbaa !382
  %14722 = insertelement <64 x i16> %14717, i16 %14721, i32 24
  %14723 = extractelement <64 x i32> %14597, i32 25
  %14724 = sext i32 %14723 to i64
  %14725 = getelementptr inbounds i16, i16* %10104, i64 %14724
  %14726 = load i16, i16* %14725, align 2, !tbaa !382
  %14727 = insertelement <64 x i16> %14722, i16 %14726, i32 25
  %14728 = extractelement <64 x i32> %14597, i32 26
  %14729 = sext i32 %14728 to i64
  %14730 = getelementptr inbounds i16, i16* %10104, i64 %14729
  %14731 = load i16, i16* %14730, align 2, !tbaa !382
  %14732 = insertelement <64 x i16> %14727, i16 %14731, i32 26
  %14733 = extractelement <64 x i32> %14597, i32 27
  %14734 = sext i32 %14733 to i64
  %14735 = getelementptr inbounds i16, i16* %10104, i64 %14734
  %14736 = load i16, i16* %14735, align 2, !tbaa !382
  %14737 = insertelement <64 x i16> %14732, i16 %14736, i32 27
  %14738 = extractelement <64 x i32> %14597, i32 28
  %14739 = sext i32 %14738 to i64
  %14740 = getelementptr inbounds i16, i16* %10104, i64 %14739
  %14741 = load i16, i16* %14740, align 2, !tbaa !382
  %14742 = insertelement <64 x i16> %14737, i16 %14741, i32 28
  %14743 = extractelement <64 x i32> %14597, i32 29
  %14744 = sext i32 %14743 to i64
  %14745 = getelementptr inbounds i16, i16* %10104, i64 %14744
  %14746 = load i16, i16* %14745, align 2, !tbaa !382
  %14747 = insertelement <64 x i16> %14742, i16 %14746, i32 29
  %14748 = extractelement <64 x i32> %14597, i32 30
  %14749 = sext i32 %14748 to i64
  %14750 = getelementptr inbounds i16, i16* %10104, i64 %14749
  %14751 = load i16, i16* %14750, align 2, !tbaa !382
  %14752 = insertelement <64 x i16> %14747, i16 %14751, i32 30
  %14753 = extractelement <64 x i32> %14597, i32 31
  %14754 = sext i32 %14753 to i64
  %14755 = getelementptr inbounds i16, i16* %10104, i64 %14754
  %14756 = load i16, i16* %14755, align 2, !tbaa !382
  %14757 = insertelement <64 x i16> %14752, i16 %14756, i32 31
  %14758 = extractelement <64 x i32> %14597, i32 32
  %14759 = sext i32 %14758 to i64
  %14760 = getelementptr inbounds i16, i16* %10104, i64 %14759
  %14761 = load i16, i16* %14760, align 2, !tbaa !382
  %14762 = insertelement <64 x i16> %14757, i16 %14761, i32 32
  %14763 = extractelement <64 x i32> %14597, i32 33
  %14764 = sext i32 %14763 to i64
  %14765 = getelementptr inbounds i16, i16* %10104, i64 %14764
  %14766 = load i16, i16* %14765, align 2, !tbaa !382
  %14767 = insertelement <64 x i16> %14762, i16 %14766, i32 33
  %14768 = extractelement <64 x i32> %14597, i32 34
  %14769 = sext i32 %14768 to i64
  %14770 = getelementptr inbounds i16, i16* %10104, i64 %14769
  %14771 = load i16, i16* %14770, align 2, !tbaa !382
  %14772 = insertelement <64 x i16> %14767, i16 %14771, i32 34
  %14773 = extractelement <64 x i32> %14597, i32 35
  %14774 = sext i32 %14773 to i64
  %14775 = getelementptr inbounds i16, i16* %10104, i64 %14774
  %14776 = load i16, i16* %14775, align 2, !tbaa !382
  %14777 = insertelement <64 x i16> %14772, i16 %14776, i32 35
  %14778 = extractelement <64 x i32> %14597, i32 36
  %14779 = sext i32 %14778 to i64
  %14780 = getelementptr inbounds i16, i16* %10104, i64 %14779
  %14781 = load i16, i16* %14780, align 2, !tbaa !382
  %14782 = insertelement <64 x i16> %14777, i16 %14781, i32 36
  %14783 = extractelement <64 x i32> %14597, i32 37
  %14784 = sext i32 %14783 to i64
  %14785 = getelementptr inbounds i16, i16* %10104, i64 %14784
  %14786 = load i16, i16* %14785, align 2, !tbaa !382
  %14787 = insertelement <64 x i16> %14782, i16 %14786, i32 37
  %14788 = extractelement <64 x i32> %14597, i32 38
  %14789 = sext i32 %14788 to i64
  %14790 = getelementptr inbounds i16, i16* %10104, i64 %14789
  %14791 = load i16, i16* %14790, align 2, !tbaa !382
  %14792 = insertelement <64 x i16> %14787, i16 %14791, i32 38
  %14793 = extractelement <64 x i32> %14597, i32 39
  %14794 = sext i32 %14793 to i64
  %14795 = getelementptr inbounds i16, i16* %10104, i64 %14794
  %14796 = load i16, i16* %14795, align 2, !tbaa !382
  %14797 = insertelement <64 x i16> %14792, i16 %14796, i32 39
  %14798 = extractelement <64 x i32> %14597, i32 40
  %14799 = sext i32 %14798 to i64
  %14800 = getelementptr inbounds i16, i16* %10104, i64 %14799
  %14801 = load i16, i16* %14800, align 2, !tbaa !382
  %14802 = insertelement <64 x i16> %14797, i16 %14801, i32 40
  %14803 = extractelement <64 x i32> %14597, i32 41
  %14804 = sext i32 %14803 to i64
  %14805 = getelementptr inbounds i16, i16* %10104, i64 %14804
  %14806 = load i16, i16* %14805, align 2, !tbaa !382
  %14807 = insertelement <64 x i16> %14802, i16 %14806, i32 41
  %14808 = extractelement <64 x i32> %14597, i32 42
  %14809 = sext i32 %14808 to i64
  %14810 = getelementptr inbounds i16, i16* %10104, i64 %14809
  %14811 = load i16, i16* %14810, align 2, !tbaa !382
  %14812 = insertelement <64 x i16> %14807, i16 %14811, i32 42
  %14813 = extractelement <64 x i32> %14597, i32 43
  %14814 = sext i32 %14813 to i64
  %14815 = getelementptr inbounds i16, i16* %10104, i64 %14814
  %14816 = load i16, i16* %14815, align 2, !tbaa !382
  %14817 = insertelement <64 x i16> %14812, i16 %14816, i32 43
  %14818 = extractelement <64 x i32> %14597, i32 44
  %14819 = sext i32 %14818 to i64
  %14820 = getelementptr inbounds i16, i16* %10104, i64 %14819
  %14821 = load i16, i16* %14820, align 2, !tbaa !382
  %14822 = insertelement <64 x i16> %14817, i16 %14821, i32 44
  %14823 = extractelement <64 x i32> %14597, i32 45
  %14824 = sext i32 %14823 to i64
  %14825 = getelementptr inbounds i16, i16* %10104, i64 %14824
  %14826 = load i16, i16* %14825, align 2, !tbaa !382
  %14827 = insertelement <64 x i16> %14822, i16 %14826, i32 45
  %14828 = extractelement <64 x i32> %14597, i32 46
  %14829 = sext i32 %14828 to i64
  %14830 = getelementptr inbounds i16, i16* %10104, i64 %14829
  %14831 = load i16, i16* %14830, align 2, !tbaa !382
  %14832 = insertelement <64 x i16> %14827, i16 %14831, i32 46
  %14833 = extractelement <64 x i32> %14597, i32 47
  %14834 = sext i32 %14833 to i64
  %14835 = getelementptr inbounds i16, i16* %10104, i64 %14834
  %14836 = load i16, i16* %14835, align 2, !tbaa !382
  %14837 = insertelement <64 x i16> %14832, i16 %14836, i32 47
  %14838 = extractelement <64 x i32> %14597, i32 48
  %14839 = sext i32 %14838 to i64
  %14840 = getelementptr inbounds i16, i16* %10104, i64 %14839
  %14841 = load i16, i16* %14840, align 2, !tbaa !382
  %14842 = insertelement <64 x i16> %14837, i16 %14841, i32 48
  %14843 = extractelement <64 x i32> %14597, i32 49
  %14844 = sext i32 %14843 to i64
  %14845 = getelementptr inbounds i16, i16* %10104, i64 %14844
  %14846 = load i16, i16* %14845, align 2, !tbaa !382
  %14847 = insertelement <64 x i16> %14842, i16 %14846, i32 49
  %14848 = extractelement <64 x i32> %14597, i32 50
  %14849 = sext i32 %14848 to i64
  %14850 = getelementptr inbounds i16, i16* %10104, i64 %14849
  %14851 = load i16, i16* %14850, align 2, !tbaa !382
  %14852 = insertelement <64 x i16> %14847, i16 %14851, i32 50
  %14853 = extractelement <64 x i32> %14597, i32 51
  %14854 = sext i32 %14853 to i64
  %14855 = getelementptr inbounds i16, i16* %10104, i64 %14854
  %14856 = load i16, i16* %14855, align 2, !tbaa !382
  %14857 = insertelement <64 x i16> %14852, i16 %14856, i32 51
  %14858 = extractelement <64 x i32> %14597, i32 52
  %14859 = sext i32 %14858 to i64
  %14860 = getelementptr inbounds i16, i16* %10104, i64 %14859
  %14861 = load i16, i16* %14860, align 2, !tbaa !382
  %14862 = insertelement <64 x i16> %14857, i16 %14861, i32 52
  %14863 = extractelement <64 x i32> %14597, i32 53
  %14864 = sext i32 %14863 to i64
  %14865 = getelementptr inbounds i16, i16* %10104, i64 %14864
  %14866 = load i16, i16* %14865, align 2, !tbaa !382
  %14867 = insertelement <64 x i16> %14862, i16 %14866, i32 53
  %14868 = extractelement <64 x i32> %14597, i32 54
  %14869 = sext i32 %14868 to i64
  %14870 = getelementptr inbounds i16, i16* %10104, i64 %14869
  %14871 = load i16, i16* %14870, align 2, !tbaa !382
  %14872 = insertelement <64 x i16> %14867, i16 %14871, i32 54
  %14873 = extractelement <64 x i32> %14597, i32 55
  %14874 = sext i32 %14873 to i64
  %14875 = getelementptr inbounds i16, i16* %10104, i64 %14874
  %14876 = load i16, i16* %14875, align 2, !tbaa !382
  %14877 = insertelement <64 x i16> %14872, i16 %14876, i32 55
  %14878 = extractelement <64 x i32> %14597, i32 56
  %14879 = sext i32 %14878 to i64
  %14880 = getelementptr inbounds i16, i16* %10104, i64 %14879
  %14881 = load i16, i16* %14880, align 2, !tbaa !382
  %14882 = insertelement <64 x i16> %14877, i16 %14881, i32 56
  %14883 = extractelement <64 x i32> %14597, i32 57
  %14884 = sext i32 %14883 to i64
  %14885 = getelementptr inbounds i16, i16* %10104, i64 %14884
  %14886 = load i16, i16* %14885, align 2, !tbaa !382
  %14887 = insertelement <64 x i16> %14882, i16 %14886, i32 57
  %14888 = extractelement <64 x i32> %14597, i32 58
  %14889 = sext i32 %14888 to i64
  %14890 = getelementptr inbounds i16, i16* %10104, i64 %14889
  %14891 = load i16, i16* %14890, align 2, !tbaa !382
  %14892 = insertelement <64 x i16> %14887, i16 %14891, i32 58
  %14893 = extractelement <64 x i32> %14597, i32 59
  %14894 = sext i32 %14893 to i64
  %14895 = getelementptr inbounds i16, i16* %10104, i64 %14894
  %14896 = load i16, i16* %14895, align 2, !tbaa !382
  %14897 = insertelement <64 x i16> %14892, i16 %14896, i32 59
  %14898 = extractelement <64 x i32> %14597, i32 60
  %14899 = sext i32 %14898 to i64
  %14900 = getelementptr inbounds i16, i16* %10104, i64 %14899
  %14901 = load i16, i16* %14900, align 2, !tbaa !382
  %14902 = insertelement <64 x i16> %14897, i16 %14901, i32 60
  %14903 = extractelement <64 x i32> %14597, i32 61
  %14904 = sext i32 %14903 to i64
  %14905 = getelementptr inbounds i16, i16* %10104, i64 %14904
  %14906 = load i16, i16* %14905, align 2, !tbaa !382
  %14907 = insertelement <64 x i16> %14902, i16 %14906, i32 61
  %14908 = extractelement <64 x i32> %14597, i32 62
  %14909 = sext i32 %14908 to i64
  %14910 = getelementptr inbounds i16, i16* %10104, i64 %14909
  %14911 = load i16, i16* %14910, align 2, !tbaa !382
  %14912 = insertelement <64 x i16> %14907, i16 %14911, i32 62
  %14913 = extractelement <64 x i32> %14597, i32 63
  %14914 = sext i32 %14913 to i64
  %14915 = getelementptr inbounds i16, i16* %10104, i64 %14914
  %14916 = load i16, i16* %14915, align 2, !tbaa !382
  %14917 = insertelement <64 x i16> %14912, i16 %14916, i32 63
  %14918 = add nsw i32 %blur_x.s0.x.v1.base.s68, -60
  %14919 = insertelement <64 x i32> undef, i32 %14918, i32 0
  %14920 = shufflevector <64 x i32> %14919, <64 x i32> undef, <64 x i32> zeroinitializer
  %14921 = add nsw <64 x i32> %14920, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %14922 = shufflevector <64 x i32> %14921, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14923 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14922, <4 x i32> %10103)
  %14924 = shufflevector <64 x i32> %14921, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14925 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14924, <4 x i32> %10103)
  %14926 = shufflevector <64 x i32> %14921, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %14927 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14926, <4 x i32> %10103)
  %14928 = shufflevector <64 x i32> %14921, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14929 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14928, <4 x i32> %10103)
  %14930 = shufflevector <64 x i32> %14921, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %14931 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14930, <4 x i32> %10103)
  %14932 = shufflevector <64 x i32> %14921, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %14933 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14932, <4 x i32> %10103)
  %14934 = shufflevector <64 x i32> %14921, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %14935 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14934, <4 x i32> %10103)
  %14936 = shufflevector <64 x i32> %14921, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %14937 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14936, <4 x i32> %10103)
  %14938 = shufflevector <64 x i32> %14921, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %14939 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14938, <4 x i32> %10103)
  %14940 = shufflevector <64 x i32> %14921, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %14941 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14940, <4 x i32> %10103)
  %14942 = shufflevector <64 x i32> %14921, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %14943 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14942, <4 x i32> %10103)
  %14944 = shufflevector <64 x i32> %14921, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %14945 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14944, <4 x i32> %10103)
  %14946 = shufflevector <64 x i32> %14921, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %14947 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14946, <4 x i32> %10103)
  %14948 = shufflevector <64 x i32> %14921, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %14949 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14948, <4 x i32> %10103)
  %14950 = shufflevector <64 x i32> %14921, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %14951 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14950, <4 x i32> %10103)
  %14952 = shufflevector <64 x i32> %14921, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %14953 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14952, <4 x i32> %10103)
  %14954 = shufflevector <4 x i32> %14953, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %14955 = shufflevector <8 x i32> %14954, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %14956 = shufflevector <16 x i32> %14955, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %14957 = shufflevector <32 x i32> %14956, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %14958 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14923, <4 x i32> zeroinitializer)
  %14959 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14925, <4 x i32> zeroinitializer)
  %14960 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14927, <4 x i32> zeroinitializer)
  %14961 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14929, <4 x i32> zeroinitializer)
  %14962 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14931, <4 x i32> zeroinitializer)
  %14963 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14933, <4 x i32> zeroinitializer)
  %14964 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14935, <4 x i32> zeroinitializer)
  %14965 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14937, <4 x i32> zeroinitializer)
  %14966 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14939, <4 x i32> zeroinitializer)
  %14967 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14941, <4 x i32> zeroinitializer)
  %14968 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14943, <4 x i32> zeroinitializer)
  %14969 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14945, <4 x i32> zeroinitializer)
  %14970 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14947, <4 x i32> zeroinitializer)
  %14971 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14949, <4 x i32> zeroinitializer)
  %14972 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14951, <4 x i32> zeroinitializer)
  %14973 = shufflevector <64 x i32> %14957, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %14974 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14973, <4 x i32> zeroinitializer)
  %14975 = shufflevector <4 x i32> %14958, <4 x i32> %14959, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14976 = shufflevector <4 x i32> %14960, <4 x i32> %14961, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14977 = shufflevector <4 x i32> %14962, <4 x i32> %14963, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14978 = shufflevector <4 x i32> %14964, <4 x i32> %14965, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14979 = shufflevector <4 x i32> %14966, <4 x i32> %14967, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14980 = shufflevector <4 x i32> %14968, <4 x i32> %14969, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14981 = shufflevector <4 x i32> %14970, <4 x i32> %14971, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14982 = shufflevector <4 x i32> %14972, <4 x i32> %14974, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14983 = shufflevector <8 x i32> %14975, <8 x i32> %14976, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14984 = shufflevector <8 x i32> %14977, <8 x i32> %14978, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14985 = shufflevector <8 x i32> %14979, <8 x i32> %14980, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14986 = shufflevector <8 x i32> %14981, <8 x i32> %14982, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14987 = shufflevector <16 x i32> %14983, <16 x i32> %14984, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14988 = shufflevector <16 x i32> %14985, <16 x i32> %14986, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14989 = shufflevector <32 x i32> %14987, <32 x i32> %14988, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %14990 = add nsw <64 x i32> %14989, %t25269
  %14991 = extractelement <64 x i32> %14990, i32 0
  %14992 = sext i32 %14991 to i64
  %14993 = getelementptr inbounds i16, i16* %10104, i64 %14992
  %14994 = load i16, i16* %14993, align 2, !tbaa !382
  %14995 = insertelement <64 x i16> undef, i16 %14994, i32 0
  %14996 = extractelement <64 x i32> %14990, i32 1
  %14997 = sext i32 %14996 to i64
  %14998 = getelementptr inbounds i16, i16* %10104, i64 %14997
  %14999 = load i16, i16* %14998, align 2, !tbaa !382
  %15000 = insertelement <64 x i16> %14995, i16 %14999, i32 1
  %15001 = extractelement <64 x i32> %14990, i32 2
  %15002 = sext i32 %15001 to i64
  %15003 = getelementptr inbounds i16, i16* %10104, i64 %15002
  %15004 = load i16, i16* %15003, align 2, !tbaa !382
  %15005 = insertelement <64 x i16> %15000, i16 %15004, i32 2
  %15006 = extractelement <64 x i32> %14990, i32 3
  %15007 = sext i32 %15006 to i64
  %15008 = getelementptr inbounds i16, i16* %10104, i64 %15007
  %15009 = load i16, i16* %15008, align 2, !tbaa !382
  %15010 = insertelement <64 x i16> %15005, i16 %15009, i32 3
  %15011 = extractelement <64 x i32> %14990, i32 4
  %15012 = sext i32 %15011 to i64
  %15013 = getelementptr inbounds i16, i16* %10104, i64 %15012
  %15014 = load i16, i16* %15013, align 2, !tbaa !382
  %15015 = insertelement <64 x i16> %15010, i16 %15014, i32 4
  %15016 = extractelement <64 x i32> %14990, i32 5
  %15017 = sext i32 %15016 to i64
  %15018 = getelementptr inbounds i16, i16* %10104, i64 %15017
  %15019 = load i16, i16* %15018, align 2, !tbaa !382
  %15020 = insertelement <64 x i16> %15015, i16 %15019, i32 5
  %15021 = extractelement <64 x i32> %14990, i32 6
  %15022 = sext i32 %15021 to i64
  %15023 = getelementptr inbounds i16, i16* %10104, i64 %15022
  %15024 = load i16, i16* %15023, align 2, !tbaa !382
  %15025 = insertelement <64 x i16> %15020, i16 %15024, i32 6
  %15026 = extractelement <64 x i32> %14990, i32 7
  %15027 = sext i32 %15026 to i64
  %15028 = getelementptr inbounds i16, i16* %10104, i64 %15027
  %15029 = load i16, i16* %15028, align 2, !tbaa !382
  %15030 = insertelement <64 x i16> %15025, i16 %15029, i32 7
  %15031 = extractelement <64 x i32> %14990, i32 8
  %15032 = sext i32 %15031 to i64
  %15033 = getelementptr inbounds i16, i16* %10104, i64 %15032
  %15034 = load i16, i16* %15033, align 2, !tbaa !382
  %15035 = insertelement <64 x i16> %15030, i16 %15034, i32 8
  %15036 = extractelement <64 x i32> %14990, i32 9
  %15037 = sext i32 %15036 to i64
  %15038 = getelementptr inbounds i16, i16* %10104, i64 %15037
  %15039 = load i16, i16* %15038, align 2, !tbaa !382
  %15040 = insertelement <64 x i16> %15035, i16 %15039, i32 9
  %15041 = extractelement <64 x i32> %14990, i32 10
  %15042 = sext i32 %15041 to i64
  %15043 = getelementptr inbounds i16, i16* %10104, i64 %15042
  %15044 = load i16, i16* %15043, align 2, !tbaa !382
  %15045 = insertelement <64 x i16> %15040, i16 %15044, i32 10
  %15046 = extractelement <64 x i32> %14990, i32 11
  %15047 = sext i32 %15046 to i64
  %15048 = getelementptr inbounds i16, i16* %10104, i64 %15047
  %15049 = load i16, i16* %15048, align 2, !tbaa !382
  %15050 = insertelement <64 x i16> %15045, i16 %15049, i32 11
  %15051 = extractelement <64 x i32> %14990, i32 12
  %15052 = sext i32 %15051 to i64
  %15053 = getelementptr inbounds i16, i16* %10104, i64 %15052
  %15054 = load i16, i16* %15053, align 2, !tbaa !382
  %15055 = insertelement <64 x i16> %15050, i16 %15054, i32 12
  %15056 = extractelement <64 x i32> %14990, i32 13
  %15057 = sext i32 %15056 to i64
  %15058 = getelementptr inbounds i16, i16* %10104, i64 %15057
  %15059 = load i16, i16* %15058, align 2, !tbaa !382
  %15060 = insertelement <64 x i16> %15055, i16 %15059, i32 13
  %15061 = extractelement <64 x i32> %14990, i32 14
  %15062 = sext i32 %15061 to i64
  %15063 = getelementptr inbounds i16, i16* %10104, i64 %15062
  %15064 = load i16, i16* %15063, align 2, !tbaa !382
  %15065 = insertelement <64 x i16> %15060, i16 %15064, i32 14
  %15066 = extractelement <64 x i32> %14990, i32 15
  %15067 = sext i32 %15066 to i64
  %15068 = getelementptr inbounds i16, i16* %10104, i64 %15067
  %15069 = load i16, i16* %15068, align 2, !tbaa !382
  %15070 = insertelement <64 x i16> %15065, i16 %15069, i32 15
  %15071 = extractelement <64 x i32> %14990, i32 16
  %15072 = sext i32 %15071 to i64
  %15073 = getelementptr inbounds i16, i16* %10104, i64 %15072
  %15074 = load i16, i16* %15073, align 2, !tbaa !382
  %15075 = insertelement <64 x i16> %15070, i16 %15074, i32 16
  %15076 = extractelement <64 x i32> %14990, i32 17
  %15077 = sext i32 %15076 to i64
  %15078 = getelementptr inbounds i16, i16* %10104, i64 %15077
  %15079 = load i16, i16* %15078, align 2, !tbaa !382
  %15080 = insertelement <64 x i16> %15075, i16 %15079, i32 17
  %15081 = extractelement <64 x i32> %14990, i32 18
  %15082 = sext i32 %15081 to i64
  %15083 = getelementptr inbounds i16, i16* %10104, i64 %15082
  %15084 = load i16, i16* %15083, align 2, !tbaa !382
  %15085 = insertelement <64 x i16> %15080, i16 %15084, i32 18
  %15086 = extractelement <64 x i32> %14990, i32 19
  %15087 = sext i32 %15086 to i64
  %15088 = getelementptr inbounds i16, i16* %10104, i64 %15087
  %15089 = load i16, i16* %15088, align 2, !tbaa !382
  %15090 = insertelement <64 x i16> %15085, i16 %15089, i32 19
  %15091 = extractelement <64 x i32> %14990, i32 20
  %15092 = sext i32 %15091 to i64
  %15093 = getelementptr inbounds i16, i16* %10104, i64 %15092
  %15094 = load i16, i16* %15093, align 2, !tbaa !382
  %15095 = insertelement <64 x i16> %15090, i16 %15094, i32 20
  %15096 = extractelement <64 x i32> %14990, i32 21
  %15097 = sext i32 %15096 to i64
  %15098 = getelementptr inbounds i16, i16* %10104, i64 %15097
  %15099 = load i16, i16* %15098, align 2, !tbaa !382
  %15100 = insertelement <64 x i16> %15095, i16 %15099, i32 21
  %15101 = extractelement <64 x i32> %14990, i32 22
  %15102 = sext i32 %15101 to i64
  %15103 = getelementptr inbounds i16, i16* %10104, i64 %15102
  %15104 = load i16, i16* %15103, align 2, !tbaa !382
  %15105 = insertelement <64 x i16> %15100, i16 %15104, i32 22
  %15106 = extractelement <64 x i32> %14990, i32 23
  %15107 = sext i32 %15106 to i64
  %15108 = getelementptr inbounds i16, i16* %10104, i64 %15107
  %15109 = load i16, i16* %15108, align 2, !tbaa !382
  %15110 = insertelement <64 x i16> %15105, i16 %15109, i32 23
  %15111 = extractelement <64 x i32> %14990, i32 24
  %15112 = sext i32 %15111 to i64
  %15113 = getelementptr inbounds i16, i16* %10104, i64 %15112
  %15114 = load i16, i16* %15113, align 2, !tbaa !382
  %15115 = insertelement <64 x i16> %15110, i16 %15114, i32 24
  %15116 = extractelement <64 x i32> %14990, i32 25
  %15117 = sext i32 %15116 to i64
  %15118 = getelementptr inbounds i16, i16* %10104, i64 %15117
  %15119 = load i16, i16* %15118, align 2, !tbaa !382
  %15120 = insertelement <64 x i16> %15115, i16 %15119, i32 25
  %15121 = extractelement <64 x i32> %14990, i32 26
  %15122 = sext i32 %15121 to i64
  %15123 = getelementptr inbounds i16, i16* %10104, i64 %15122
  %15124 = load i16, i16* %15123, align 2, !tbaa !382
  %15125 = insertelement <64 x i16> %15120, i16 %15124, i32 26
  %15126 = extractelement <64 x i32> %14990, i32 27
  %15127 = sext i32 %15126 to i64
  %15128 = getelementptr inbounds i16, i16* %10104, i64 %15127
  %15129 = load i16, i16* %15128, align 2, !tbaa !382
  %15130 = insertelement <64 x i16> %15125, i16 %15129, i32 27
  %15131 = extractelement <64 x i32> %14990, i32 28
  %15132 = sext i32 %15131 to i64
  %15133 = getelementptr inbounds i16, i16* %10104, i64 %15132
  %15134 = load i16, i16* %15133, align 2, !tbaa !382
  %15135 = insertelement <64 x i16> %15130, i16 %15134, i32 28
  %15136 = extractelement <64 x i32> %14990, i32 29
  %15137 = sext i32 %15136 to i64
  %15138 = getelementptr inbounds i16, i16* %10104, i64 %15137
  %15139 = load i16, i16* %15138, align 2, !tbaa !382
  %15140 = insertelement <64 x i16> %15135, i16 %15139, i32 29
  %15141 = extractelement <64 x i32> %14990, i32 30
  %15142 = sext i32 %15141 to i64
  %15143 = getelementptr inbounds i16, i16* %10104, i64 %15142
  %15144 = load i16, i16* %15143, align 2, !tbaa !382
  %15145 = insertelement <64 x i16> %15140, i16 %15144, i32 30
  %15146 = extractelement <64 x i32> %14990, i32 31
  %15147 = sext i32 %15146 to i64
  %15148 = getelementptr inbounds i16, i16* %10104, i64 %15147
  %15149 = load i16, i16* %15148, align 2, !tbaa !382
  %15150 = insertelement <64 x i16> %15145, i16 %15149, i32 31
  %15151 = extractelement <64 x i32> %14990, i32 32
  %15152 = sext i32 %15151 to i64
  %15153 = getelementptr inbounds i16, i16* %10104, i64 %15152
  %15154 = load i16, i16* %15153, align 2, !tbaa !382
  %15155 = insertelement <64 x i16> %15150, i16 %15154, i32 32
  %15156 = extractelement <64 x i32> %14990, i32 33
  %15157 = sext i32 %15156 to i64
  %15158 = getelementptr inbounds i16, i16* %10104, i64 %15157
  %15159 = load i16, i16* %15158, align 2, !tbaa !382
  %15160 = insertelement <64 x i16> %15155, i16 %15159, i32 33
  %15161 = extractelement <64 x i32> %14990, i32 34
  %15162 = sext i32 %15161 to i64
  %15163 = getelementptr inbounds i16, i16* %10104, i64 %15162
  %15164 = load i16, i16* %15163, align 2, !tbaa !382
  %15165 = insertelement <64 x i16> %15160, i16 %15164, i32 34
  %15166 = extractelement <64 x i32> %14990, i32 35
  %15167 = sext i32 %15166 to i64
  %15168 = getelementptr inbounds i16, i16* %10104, i64 %15167
  %15169 = load i16, i16* %15168, align 2, !tbaa !382
  %15170 = insertelement <64 x i16> %15165, i16 %15169, i32 35
  %15171 = extractelement <64 x i32> %14990, i32 36
  %15172 = sext i32 %15171 to i64
  %15173 = getelementptr inbounds i16, i16* %10104, i64 %15172
  %15174 = load i16, i16* %15173, align 2, !tbaa !382
  %15175 = insertelement <64 x i16> %15170, i16 %15174, i32 36
  %15176 = extractelement <64 x i32> %14990, i32 37
  %15177 = sext i32 %15176 to i64
  %15178 = getelementptr inbounds i16, i16* %10104, i64 %15177
  %15179 = load i16, i16* %15178, align 2, !tbaa !382
  %15180 = insertelement <64 x i16> %15175, i16 %15179, i32 37
  %15181 = extractelement <64 x i32> %14990, i32 38
  %15182 = sext i32 %15181 to i64
  %15183 = getelementptr inbounds i16, i16* %10104, i64 %15182
  %15184 = load i16, i16* %15183, align 2, !tbaa !382
  %15185 = insertelement <64 x i16> %15180, i16 %15184, i32 38
  %15186 = extractelement <64 x i32> %14990, i32 39
  %15187 = sext i32 %15186 to i64
  %15188 = getelementptr inbounds i16, i16* %10104, i64 %15187
  %15189 = load i16, i16* %15188, align 2, !tbaa !382
  %15190 = insertelement <64 x i16> %15185, i16 %15189, i32 39
  %15191 = extractelement <64 x i32> %14990, i32 40
  %15192 = sext i32 %15191 to i64
  %15193 = getelementptr inbounds i16, i16* %10104, i64 %15192
  %15194 = load i16, i16* %15193, align 2, !tbaa !382
  %15195 = insertelement <64 x i16> %15190, i16 %15194, i32 40
  %15196 = extractelement <64 x i32> %14990, i32 41
  %15197 = sext i32 %15196 to i64
  %15198 = getelementptr inbounds i16, i16* %10104, i64 %15197
  %15199 = load i16, i16* %15198, align 2, !tbaa !382
  %15200 = insertelement <64 x i16> %15195, i16 %15199, i32 41
  %15201 = extractelement <64 x i32> %14990, i32 42
  %15202 = sext i32 %15201 to i64
  %15203 = getelementptr inbounds i16, i16* %10104, i64 %15202
  %15204 = load i16, i16* %15203, align 2, !tbaa !382
  %15205 = insertelement <64 x i16> %15200, i16 %15204, i32 42
  %15206 = extractelement <64 x i32> %14990, i32 43
  %15207 = sext i32 %15206 to i64
  %15208 = getelementptr inbounds i16, i16* %10104, i64 %15207
  %15209 = load i16, i16* %15208, align 2, !tbaa !382
  %15210 = insertelement <64 x i16> %15205, i16 %15209, i32 43
  %15211 = extractelement <64 x i32> %14990, i32 44
  %15212 = sext i32 %15211 to i64
  %15213 = getelementptr inbounds i16, i16* %10104, i64 %15212
  %15214 = load i16, i16* %15213, align 2, !tbaa !382
  %15215 = insertelement <64 x i16> %15210, i16 %15214, i32 44
  %15216 = extractelement <64 x i32> %14990, i32 45
  %15217 = sext i32 %15216 to i64
  %15218 = getelementptr inbounds i16, i16* %10104, i64 %15217
  %15219 = load i16, i16* %15218, align 2, !tbaa !382
  %15220 = insertelement <64 x i16> %15215, i16 %15219, i32 45
  %15221 = extractelement <64 x i32> %14990, i32 46
  %15222 = sext i32 %15221 to i64
  %15223 = getelementptr inbounds i16, i16* %10104, i64 %15222
  %15224 = load i16, i16* %15223, align 2, !tbaa !382
  %15225 = insertelement <64 x i16> %15220, i16 %15224, i32 46
  %15226 = extractelement <64 x i32> %14990, i32 47
  %15227 = sext i32 %15226 to i64
  %15228 = getelementptr inbounds i16, i16* %10104, i64 %15227
  %15229 = load i16, i16* %15228, align 2, !tbaa !382
  %15230 = insertelement <64 x i16> %15225, i16 %15229, i32 47
  %15231 = extractelement <64 x i32> %14990, i32 48
  %15232 = sext i32 %15231 to i64
  %15233 = getelementptr inbounds i16, i16* %10104, i64 %15232
  %15234 = load i16, i16* %15233, align 2, !tbaa !382
  %15235 = insertelement <64 x i16> %15230, i16 %15234, i32 48
  %15236 = extractelement <64 x i32> %14990, i32 49
  %15237 = sext i32 %15236 to i64
  %15238 = getelementptr inbounds i16, i16* %10104, i64 %15237
  %15239 = load i16, i16* %15238, align 2, !tbaa !382
  %15240 = insertelement <64 x i16> %15235, i16 %15239, i32 49
  %15241 = extractelement <64 x i32> %14990, i32 50
  %15242 = sext i32 %15241 to i64
  %15243 = getelementptr inbounds i16, i16* %10104, i64 %15242
  %15244 = load i16, i16* %15243, align 2, !tbaa !382
  %15245 = insertelement <64 x i16> %15240, i16 %15244, i32 50
  %15246 = extractelement <64 x i32> %14990, i32 51
  %15247 = sext i32 %15246 to i64
  %15248 = getelementptr inbounds i16, i16* %10104, i64 %15247
  %15249 = load i16, i16* %15248, align 2, !tbaa !382
  %15250 = insertelement <64 x i16> %15245, i16 %15249, i32 51
  %15251 = extractelement <64 x i32> %14990, i32 52
  %15252 = sext i32 %15251 to i64
  %15253 = getelementptr inbounds i16, i16* %10104, i64 %15252
  %15254 = load i16, i16* %15253, align 2, !tbaa !382
  %15255 = insertelement <64 x i16> %15250, i16 %15254, i32 52
  %15256 = extractelement <64 x i32> %14990, i32 53
  %15257 = sext i32 %15256 to i64
  %15258 = getelementptr inbounds i16, i16* %10104, i64 %15257
  %15259 = load i16, i16* %15258, align 2, !tbaa !382
  %15260 = insertelement <64 x i16> %15255, i16 %15259, i32 53
  %15261 = extractelement <64 x i32> %14990, i32 54
  %15262 = sext i32 %15261 to i64
  %15263 = getelementptr inbounds i16, i16* %10104, i64 %15262
  %15264 = load i16, i16* %15263, align 2, !tbaa !382
  %15265 = insertelement <64 x i16> %15260, i16 %15264, i32 54
  %15266 = extractelement <64 x i32> %14990, i32 55
  %15267 = sext i32 %15266 to i64
  %15268 = getelementptr inbounds i16, i16* %10104, i64 %15267
  %15269 = load i16, i16* %15268, align 2, !tbaa !382
  %15270 = insertelement <64 x i16> %15265, i16 %15269, i32 55
  %15271 = extractelement <64 x i32> %14990, i32 56
  %15272 = sext i32 %15271 to i64
  %15273 = getelementptr inbounds i16, i16* %10104, i64 %15272
  %15274 = load i16, i16* %15273, align 2, !tbaa !382
  %15275 = insertelement <64 x i16> %15270, i16 %15274, i32 56
  %15276 = extractelement <64 x i32> %14990, i32 57
  %15277 = sext i32 %15276 to i64
  %15278 = getelementptr inbounds i16, i16* %10104, i64 %15277
  %15279 = load i16, i16* %15278, align 2, !tbaa !382
  %15280 = insertelement <64 x i16> %15275, i16 %15279, i32 57
  %15281 = extractelement <64 x i32> %14990, i32 58
  %15282 = sext i32 %15281 to i64
  %15283 = getelementptr inbounds i16, i16* %10104, i64 %15282
  %15284 = load i16, i16* %15283, align 2, !tbaa !382
  %15285 = insertelement <64 x i16> %15280, i16 %15284, i32 58
  %15286 = extractelement <64 x i32> %14990, i32 59
  %15287 = sext i32 %15286 to i64
  %15288 = getelementptr inbounds i16, i16* %10104, i64 %15287
  %15289 = load i16, i16* %15288, align 2, !tbaa !382
  %15290 = insertelement <64 x i16> %15285, i16 %15289, i32 59
  %15291 = extractelement <64 x i32> %14990, i32 60
  %15292 = sext i32 %15291 to i64
  %15293 = getelementptr inbounds i16, i16* %10104, i64 %15292
  %15294 = load i16, i16* %15293, align 2, !tbaa !382
  %15295 = insertelement <64 x i16> %15290, i16 %15294, i32 60
  %15296 = extractelement <64 x i32> %14990, i32 61
  %15297 = sext i32 %15296 to i64
  %15298 = getelementptr inbounds i16, i16* %10104, i64 %15297
  %15299 = load i16, i16* %15298, align 2, !tbaa !382
  %15300 = insertelement <64 x i16> %15295, i16 %15299, i32 61
  %15301 = extractelement <64 x i32> %14990, i32 62
  %15302 = sext i32 %15301 to i64
  %15303 = getelementptr inbounds i16, i16* %10104, i64 %15302
  %15304 = load i16, i16* %15303, align 2, !tbaa !382
  %15305 = insertelement <64 x i16> %15300, i16 %15304, i32 62
  %15306 = extractelement <64 x i32> %14990, i32 63
  %15307 = sext i32 %15306 to i64
  %15308 = getelementptr inbounds i16, i16* %10104, i64 %15307
  %15309 = load i16, i16* %15308, align 2, !tbaa !382
  %15310 = insertelement <64 x i16> %15305, i16 %15309, i32 63
  %15311 = add nsw i32 %blur_x.s0.x.v1.base.s68, -58
  %15312 = insertelement <64 x i32> undef, i32 %15311, i32 0
  %15313 = shufflevector <64 x i32> %15312, <64 x i32> undef, <64 x i32> zeroinitializer
  %15314 = add nsw <64 x i32> %15313, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %15315 = shufflevector <64 x i32> %15314, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %15316 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15315, <4 x i32> %10103)
  %15317 = shufflevector <64 x i32> %15314, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %15318 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15317, <4 x i32> %10103)
  %15319 = shufflevector <64 x i32> %15314, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %15320 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15319, <4 x i32> %10103)
  %15321 = shufflevector <64 x i32> %15314, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %15322 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15321, <4 x i32> %10103)
  %15323 = shufflevector <64 x i32> %15314, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %15324 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15323, <4 x i32> %10103)
  %15325 = shufflevector <64 x i32> %15314, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %15326 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15325, <4 x i32> %10103)
  %15327 = shufflevector <64 x i32> %15314, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %15328 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15327, <4 x i32> %10103)
  %15329 = shufflevector <64 x i32> %15314, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %15330 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15329, <4 x i32> %10103)
  %15331 = shufflevector <64 x i32> %15314, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %15332 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15331, <4 x i32> %10103)
  %15333 = shufflevector <64 x i32> %15314, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %15334 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15333, <4 x i32> %10103)
  %15335 = shufflevector <64 x i32> %15314, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %15336 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15335, <4 x i32> %10103)
  %15337 = shufflevector <64 x i32> %15314, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %15338 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15337, <4 x i32> %10103)
  %15339 = shufflevector <64 x i32> %15314, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %15340 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15339, <4 x i32> %10103)
  %15341 = shufflevector <64 x i32> %15314, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %15342 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15341, <4 x i32> %10103)
  %15343 = shufflevector <64 x i32> %15314, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %15344 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15343, <4 x i32> %10103)
  %15345 = shufflevector <64 x i32> %15314, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %15346 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15345, <4 x i32> %10103)
  %15347 = shufflevector <4 x i32> %15346, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %15348 = shufflevector <8 x i32> %15347, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %15349 = shufflevector <16 x i32> %15348, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %15350 = shufflevector <32 x i32> %15349, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %15351 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15316, <4 x i32> zeroinitializer)
  %15352 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15318, <4 x i32> zeroinitializer)
  %15353 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15320, <4 x i32> zeroinitializer)
  %15354 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15322, <4 x i32> zeroinitializer)
  %15355 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15324, <4 x i32> zeroinitializer)
  %15356 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15326, <4 x i32> zeroinitializer)
  %15357 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15328, <4 x i32> zeroinitializer)
  %15358 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15330, <4 x i32> zeroinitializer)
  %15359 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15332, <4 x i32> zeroinitializer)
  %15360 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15334, <4 x i32> zeroinitializer)
  %15361 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15336, <4 x i32> zeroinitializer)
  %15362 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15338, <4 x i32> zeroinitializer)
  %15363 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15340, <4 x i32> zeroinitializer)
  %15364 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15342, <4 x i32> zeroinitializer)
  %15365 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15344, <4 x i32> zeroinitializer)
  %15366 = shufflevector <64 x i32> %15350, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %15367 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15366, <4 x i32> zeroinitializer)
  %15368 = shufflevector <4 x i32> %15351, <4 x i32> %15352, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15369 = shufflevector <4 x i32> %15353, <4 x i32> %15354, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15370 = shufflevector <4 x i32> %15355, <4 x i32> %15356, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15371 = shufflevector <4 x i32> %15357, <4 x i32> %15358, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15372 = shufflevector <4 x i32> %15359, <4 x i32> %15360, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15373 = shufflevector <4 x i32> %15361, <4 x i32> %15362, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15374 = shufflevector <4 x i32> %15363, <4 x i32> %15364, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15375 = shufflevector <4 x i32> %15365, <4 x i32> %15367, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15376 = shufflevector <8 x i32> %15368, <8 x i32> %15369, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15377 = shufflevector <8 x i32> %15370, <8 x i32> %15371, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15378 = shufflevector <8 x i32> %15372, <8 x i32> %15373, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15379 = shufflevector <8 x i32> %15374, <8 x i32> %15375, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15380 = shufflevector <16 x i32> %15376, <16 x i32> %15377, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15381 = shufflevector <16 x i32> %15378, <16 x i32> %15379, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15382 = shufflevector <32 x i32> %15380, <32 x i32> %15381, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %15383 = add nsw <64 x i32> %15382, %t25269
  %15384 = extractelement <64 x i32> %15383, i32 0
  %15385 = sext i32 %15384 to i64
  %15386 = getelementptr inbounds i16, i16* %10104, i64 %15385
  %15387 = load i16, i16* %15386, align 2, !tbaa !382
  %15388 = insertelement <64 x i16> undef, i16 %15387, i32 0
  %15389 = extractelement <64 x i32> %15383, i32 1
  %15390 = sext i32 %15389 to i64
  %15391 = getelementptr inbounds i16, i16* %10104, i64 %15390
  %15392 = load i16, i16* %15391, align 2, !tbaa !382
  %15393 = insertelement <64 x i16> %15388, i16 %15392, i32 1
  %15394 = extractelement <64 x i32> %15383, i32 2
  %15395 = sext i32 %15394 to i64
  %15396 = getelementptr inbounds i16, i16* %10104, i64 %15395
  %15397 = load i16, i16* %15396, align 2, !tbaa !382
  %15398 = insertelement <64 x i16> %15393, i16 %15397, i32 2
  %15399 = extractelement <64 x i32> %15383, i32 3
  %15400 = sext i32 %15399 to i64
  %15401 = getelementptr inbounds i16, i16* %10104, i64 %15400
  %15402 = load i16, i16* %15401, align 2, !tbaa !382
  %15403 = insertelement <64 x i16> %15398, i16 %15402, i32 3
  %15404 = extractelement <64 x i32> %15383, i32 4
  %15405 = sext i32 %15404 to i64
  %15406 = getelementptr inbounds i16, i16* %10104, i64 %15405
  %15407 = load i16, i16* %15406, align 2, !tbaa !382
  %15408 = insertelement <64 x i16> %15403, i16 %15407, i32 4
  %15409 = extractelement <64 x i32> %15383, i32 5
  %15410 = sext i32 %15409 to i64
  %15411 = getelementptr inbounds i16, i16* %10104, i64 %15410
  %15412 = load i16, i16* %15411, align 2, !tbaa !382
  %15413 = insertelement <64 x i16> %15408, i16 %15412, i32 5
  %15414 = extractelement <64 x i32> %15383, i32 6
  %15415 = sext i32 %15414 to i64
  %15416 = getelementptr inbounds i16, i16* %10104, i64 %15415
  %15417 = load i16, i16* %15416, align 2, !tbaa !382
  %15418 = insertelement <64 x i16> %15413, i16 %15417, i32 6
  %15419 = extractelement <64 x i32> %15383, i32 7
  %15420 = sext i32 %15419 to i64
  %15421 = getelementptr inbounds i16, i16* %10104, i64 %15420
  %15422 = load i16, i16* %15421, align 2, !tbaa !382
  %15423 = insertelement <64 x i16> %15418, i16 %15422, i32 7
  %15424 = extractelement <64 x i32> %15383, i32 8
  %15425 = sext i32 %15424 to i64
  %15426 = getelementptr inbounds i16, i16* %10104, i64 %15425
  %15427 = load i16, i16* %15426, align 2, !tbaa !382
  %15428 = insertelement <64 x i16> %15423, i16 %15427, i32 8
  %15429 = extractelement <64 x i32> %15383, i32 9
  %15430 = sext i32 %15429 to i64
  %15431 = getelementptr inbounds i16, i16* %10104, i64 %15430
  %15432 = load i16, i16* %15431, align 2, !tbaa !382
  %15433 = insertelement <64 x i16> %15428, i16 %15432, i32 9
  %15434 = extractelement <64 x i32> %15383, i32 10
  %15435 = sext i32 %15434 to i64
  %15436 = getelementptr inbounds i16, i16* %10104, i64 %15435
  %15437 = load i16, i16* %15436, align 2, !tbaa !382
  %15438 = insertelement <64 x i16> %15433, i16 %15437, i32 10
  %15439 = extractelement <64 x i32> %15383, i32 11
  %15440 = sext i32 %15439 to i64
  %15441 = getelementptr inbounds i16, i16* %10104, i64 %15440
  %15442 = load i16, i16* %15441, align 2, !tbaa !382
  %15443 = insertelement <64 x i16> %15438, i16 %15442, i32 11
  %15444 = extractelement <64 x i32> %15383, i32 12
  %15445 = sext i32 %15444 to i64
  %15446 = getelementptr inbounds i16, i16* %10104, i64 %15445
  %15447 = load i16, i16* %15446, align 2, !tbaa !382
  %15448 = insertelement <64 x i16> %15443, i16 %15447, i32 12
  %15449 = extractelement <64 x i32> %15383, i32 13
  %15450 = sext i32 %15449 to i64
  %15451 = getelementptr inbounds i16, i16* %10104, i64 %15450
  %15452 = load i16, i16* %15451, align 2, !tbaa !382
  %15453 = insertelement <64 x i16> %15448, i16 %15452, i32 13
  %15454 = extractelement <64 x i32> %15383, i32 14
  %15455 = sext i32 %15454 to i64
  %15456 = getelementptr inbounds i16, i16* %10104, i64 %15455
  %15457 = load i16, i16* %15456, align 2, !tbaa !382
  %15458 = insertelement <64 x i16> %15453, i16 %15457, i32 14
  %15459 = extractelement <64 x i32> %15383, i32 15
  %15460 = sext i32 %15459 to i64
  %15461 = getelementptr inbounds i16, i16* %10104, i64 %15460
  %15462 = load i16, i16* %15461, align 2, !tbaa !382
  %15463 = insertelement <64 x i16> %15458, i16 %15462, i32 15
  %15464 = extractelement <64 x i32> %15383, i32 16
  %15465 = sext i32 %15464 to i64
  %15466 = getelementptr inbounds i16, i16* %10104, i64 %15465
  %15467 = load i16, i16* %15466, align 2, !tbaa !382
  %15468 = insertelement <64 x i16> %15463, i16 %15467, i32 16
  %15469 = extractelement <64 x i32> %15383, i32 17
  %15470 = sext i32 %15469 to i64
  %15471 = getelementptr inbounds i16, i16* %10104, i64 %15470
  %15472 = load i16, i16* %15471, align 2, !tbaa !382
  %15473 = insertelement <64 x i16> %15468, i16 %15472, i32 17
  %15474 = extractelement <64 x i32> %15383, i32 18
  %15475 = sext i32 %15474 to i64
  %15476 = getelementptr inbounds i16, i16* %10104, i64 %15475
  %15477 = load i16, i16* %15476, align 2, !tbaa !382
  %15478 = insertelement <64 x i16> %15473, i16 %15477, i32 18
  %15479 = extractelement <64 x i32> %15383, i32 19
  %15480 = sext i32 %15479 to i64
  %15481 = getelementptr inbounds i16, i16* %10104, i64 %15480
  %15482 = load i16, i16* %15481, align 2, !tbaa !382
  %15483 = insertelement <64 x i16> %15478, i16 %15482, i32 19
  %15484 = extractelement <64 x i32> %15383, i32 20
  %15485 = sext i32 %15484 to i64
  %15486 = getelementptr inbounds i16, i16* %10104, i64 %15485
  %15487 = load i16, i16* %15486, align 2, !tbaa !382
  %15488 = insertelement <64 x i16> %15483, i16 %15487, i32 20
  %15489 = extractelement <64 x i32> %15383, i32 21
  %15490 = sext i32 %15489 to i64
  %15491 = getelementptr inbounds i16, i16* %10104, i64 %15490
  %15492 = load i16, i16* %15491, align 2, !tbaa !382
  %15493 = insertelement <64 x i16> %15488, i16 %15492, i32 21
  %15494 = extractelement <64 x i32> %15383, i32 22
  %15495 = sext i32 %15494 to i64
  %15496 = getelementptr inbounds i16, i16* %10104, i64 %15495
  %15497 = load i16, i16* %15496, align 2, !tbaa !382
  %15498 = insertelement <64 x i16> %15493, i16 %15497, i32 22
  %15499 = extractelement <64 x i32> %15383, i32 23
  %15500 = sext i32 %15499 to i64
  %15501 = getelementptr inbounds i16, i16* %10104, i64 %15500
  %15502 = load i16, i16* %15501, align 2, !tbaa !382
  %15503 = insertelement <64 x i16> %15498, i16 %15502, i32 23
  %15504 = extractelement <64 x i32> %15383, i32 24
  %15505 = sext i32 %15504 to i64
  %15506 = getelementptr inbounds i16, i16* %10104, i64 %15505
  %15507 = load i16, i16* %15506, align 2, !tbaa !382
  %15508 = insertelement <64 x i16> %15503, i16 %15507, i32 24
  %15509 = extractelement <64 x i32> %15383, i32 25
  %15510 = sext i32 %15509 to i64
  %15511 = getelementptr inbounds i16, i16* %10104, i64 %15510
  %15512 = load i16, i16* %15511, align 2, !tbaa !382
  %15513 = insertelement <64 x i16> %15508, i16 %15512, i32 25
  %15514 = extractelement <64 x i32> %15383, i32 26
  %15515 = sext i32 %15514 to i64
  %15516 = getelementptr inbounds i16, i16* %10104, i64 %15515
  %15517 = load i16, i16* %15516, align 2, !tbaa !382
  %15518 = insertelement <64 x i16> %15513, i16 %15517, i32 26
  %15519 = extractelement <64 x i32> %15383, i32 27
  %15520 = sext i32 %15519 to i64
  %15521 = getelementptr inbounds i16, i16* %10104, i64 %15520
  %15522 = load i16, i16* %15521, align 2, !tbaa !382
  %15523 = insertelement <64 x i16> %15518, i16 %15522, i32 27
  %15524 = extractelement <64 x i32> %15383, i32 28
  %15525 = sext i32 %15524 to i64
  %15526 = getelementptr inbounds i16, i16* %10104, i64 %15525
  %15527 = load i16, i16* %15526, align 2, !tbaa !382
  %15528 = insertelement <64 x i16> %15523, i16 %15527, i32 28
  %15529 = extractelement <64 x i32> %15383, i32 29
  %15530 = sext i32 %15529 to i64
  %15531 = getelementptr inbounds i16, i16* %10104, i64 %15530
  %15532 = load i16, i16* %15531, align 2, !tbaa !382
  %15533 = insertelement <64 x i16> %15528, i16 %15532, i32 29
  %15534 = extractelement <64 x i32> %15383, i32 30
  %15535 = sext i32 %15534 to i64
  %15536 = getelementptr inbounds i16, i16* %10104, i64 %15535
  %15537 = load i16, i16* %15536, align 2, !tbaa !382
  %15538 = insertelement <64 x i16> %15533, i16 %15537, i32 30
  %15539 = extractelement <64 x i32> %15383, i32 31
  %15540 = sext i32 %15539 to i64
  %15541 = getelementptr inbounds i16, i16* %10104, i64 %15540
  %15542 = load i16, i16* %15541, align 2, !tbaa !382
  %15543 = insertelement <64 x i16> %15538, i16 %15542, i32 31
  %15544 = extractelement <64 x i32> %15383, i32 32
  %15545 = sext i32 %15544 to i64
  %15546 = getelementptr inbounds i16, i16* %10104, i64 %15545
  %15547 = load i16, i16* %15546, align 2, !tbaa !382
  %15548 = insertelement <64 x i16> %15543, i16 %15547, i32 32
  %15549 = extractelement <64 x i32> %15383, i32 33
  %15550 = sext i32 %15549 to i64
  %15551 = getelementptr inbounds i16, i16* %10104, i64 %15550
  %15552 = load i16, i16* %15551, align 2, !tbaa !382
  %15553 = insertelement <64 x i16> %15548, i16 %15552, i32 33
  %15554 = extractelement <64 x i32> %15383, i32 34
  %15555 = sext i32 %15554 to i64
  %15556 = getelementptr inbounds i16, i16* %10104, i64 %15555
  %15557 = load i16, i16* %15556, align 2, !tbaa !382
  %15558 = insertelement <64 x i16> %15553, i16 %15557, i32 34
  %15559 = extractelement <64 x i32> %15383, i32 35
  %15560 = sext i32 %15559 to i64
  %15561 = getelementptr inbounds i16, i16* %10104, i64 %15560
  %15562 = load i16, i16* %15561, align 2, !tbaa !382
  %15563 = insertelement <64 x i16> %15558, i16 %15562, i32 35
  %15564 = extractelement <64 x i32> %15383, i32 36
  %15565 = sext i32 %15564 to i64
  %15566 = getelementptr inbounds i16, i16* %10104, i64 %15565
  %15567 = load i16, i16* %15566, align 2, !tbaa !382
  %15568 = insertelement <64 x i16> %15563, i16 %15567, i32 36
  %15569 = extractelement <64 x i32> %15383, i32 37
  %15570 = sext i32 %15569 to i64
  %15571 = getelementptr inbounds i16, i16* %10104, i64 %15570
  %15572 = load i16, i16* %15571, align 2, !tbaa !382
  %15573 = insertelement <64 x i16> %15568, i16 %15572, i32 37
  %15574 = extractelement <64 x i32> %15383, i32 38
  %15575 = sext i32 %15574 to i64
  %15576 = getelementptr inbounds i16, i16* %10104, i64 %15575
  %15577 = load i16, i16* %15576, align 2, !tbaa !382
  %15578 = insertelement <64 x i16> %15573, i16 %15577, i32 38
  %15579 = extractelement <64 x i32> %15383, i32 39
  %15580 = sext i32 %15579 to i64
  %15581 = getelementptr inbounds i16, i16* %10104, i64 %15580
  %15582 = load i16, i16* %15581, align 2, !tbaa !382
  %15583 = insertelement <64 x i16> %15578, i16 %15582, i32 39
  %15584 = extractelement <64 x i32> %15383, i32 40
  %15585 = sext i32 %15584 to i64
  %15586 = getelementptr inbounds i16, i16* %10104, i64 %15585
  %15587 = load i16, i16* %15586, align 2, !tbaa !382
  %15588 = insertelement <64 x i16> %15583, i16 %15587, i32 40
  %15589 = extractelement <64 x i32> %15383, i32 41
  %15590 = sext i32 %15589 to i64
  %15591 = getelementptr inbounds i16, i16* %10104, i64 %15590
  %15592 = load i16, i16* %15591, align 2, !tbaa !382
  %15593 = insertelement <64 x i16> %15588, i16 %15592, i32 41
  %15594 = extractelement <64 x i32> %15383, i32 42
  %15595 = sext i32 %15594 to i64
  %15596 = getelementptr inbounds i16, i16* %10104, i64 %15595
  %15597 = load i16, i16* %15596, align 2, !tbaa !382
  %15598 = insertelement <64 x i16> %15593, i16 %15597, i32 42
  %15599 = extractelement <64 x i32> %15383, i32 43
  %15600 = sext i32 %15599 to i64
  %15601 = getelementptr inbounds i16, i16* %10104, i64 %15600
  %15602 = load i16, i16* %15601, align 2, !tbaa !382
  %15603 = insertelement <64 x i16> %15598, i16 %15602, i32 43
  %15604 = extractelement <64 x i32> %15383, i32 44
  %15605 = sext i32 %15604 to i64
  %15606 = getelementptr inbounds i16, i16* %10104, i64 %15605
  %15607 = load i16, i16* %15606, align 2, !tbaa !382
  %15608 = insertelement <64 x i16> %15603, i16 %15607, i32 44
  %15609 = extractelement <64 x i32> %15383, i32 45
  %15610 = sext i32 %15609 to i64
  %15611 = getelementptr inbounds i16, i16* %10104, i64 %15610
  %15612 = load i16, i16* %15611, align 2, !tbaa !382
  %15613 = insertelement <64 x i16> %15608, i16 %15612, i32 45
  %15614 = extractelement <64 x i32> %15383, i32 46
  %15615 = sext i32 %15614 to i64
  %15616 = getelementptr inbounds i16, i16* %10104, i64 %15615
  %15617 = load i16, i16* %15616, align 2, !tbaa !382
  %15618 = insertelement <64 x i16> %15613, i16 %15617, i32 46
  %15619 = extractelement <64 x i32> %15383, i32 47
  %15620 = sext i32 %15619 to i64
  %15621 = getelementptr inbounds i16, i16* %10104, i64 %15620
  %15622 = load i16, i16* %15621, align 2, !tbaa !382
  %15623 = insertelement <64 x i16> %15618, i16 %15622, i32 47
  %15624 = extractelement <64 x i32> %15383, i32 48
  %15625 = sext i32 %15624 to i64
  %15626 = getelementptr inbounds i16, i16* %10104, i64 %15625
  %15627 = load i16, i16* %15626, align 2, !tbaa !382
  %15628 = insertelement <64 x i16> %15623, i16 %15627, i32 48
  %15629 = extractelement <64 x i32> %15383, i32 49
  %15630 = sext i32 %15629 to i64
  %15631 = getelementptr inbounds i16, i16* %10104, i64 %15630
  %15632 = load i16, i16* %15631, align 2, !tbaa !382
  %15633 = insertelement <64 x i16> %15628, i16 %15632, i32 49
  %15634 = extractelement <64 x i32> %15383, i32 50
  %15635 = sext i32 %15634 to i64
  %15636 = getelementptr inbounds i16, i16* %10104, i64 %15635
  %15637 = load i16, i16* %15636, align 2, !tbaa !382
  %15638 = insertelement <64 x i16> %15633, i16 %15637, i32 50
  %15639 = extractelement <64 x i32> %15383, i32 51
  %15640 = sext i32 %15639 to i64
  %15641 = getelementptr inbounds i16, i16* %10104, i64 %15640
  %15642 = load i16, i16* %15641, align 2, !tbaa !382
  %15643 = insertelement <64 x i16> %15638, i16 %15642, i32 51
  %15644 = extractelement <64 x i32> %15383, i32 52
  %15645 = sext i32 %15644 to i64
  %15646 = getelementptr inbounds i16, i16* %10104, i64 %15645
  %15647 = load i16, i16* %15646, align 2, !tbaa !382
  %15648 = insertelement <64 x i16> %15643, i16 %15647, i32 52
  %15649 = extractelement <64 x i32> %15383, i32 53
  %15650 = sext i32 %15649 to i64
  %15651 = getelementptr inbounds i16, i16* %10104, i64 %15650
  %15652 = load i16, i16* %15651, align 2, !tbaa !382
  %15653 = insertelement <64 x i16> %15648, i16 %15652, i32 53
  %15654 = extractelement <64 x i32> %15383, i32 54
  %15655 = sext i32 %15654 to i64
  %15656 = getelementptr inbounds i16, i16* %10104, i64 %15655
  %15657 = load i16, i16* %15656, align 2, !tbaa !382
  %15658 = insertelement <64 x i16> %15653, i16 %15657, i32 54
  %15659 = extractelement <64 x i32> %15383, i32 55
  %15660 = sext i32 %15659 to i64
  %15661 = getelementptr inbounds i16, i16* %10104, i64 %15660
  %15662 = load i16, i16* %15661, align 2, !tbaa !382
  %15663 = insertelement <64 x i16> %15658, i16 %15662, i32 55
  %15664 = extractelement <64 x i32> %15383, i32 56
  %15665 = sext i32 %15664 to i64
  %15666 = getelementptr inbounds i16, i16* %10104, i64 %15665
  %15667 = load i16, i16* %15666, align 2, !tbaa !382
  %15668 = insertelement <64 x i16> %15663, i16 %15667, i32 56
  %15669 = extractelement <64 x i32> %15383, i32 57
  %15670 = sext i32 %15669 to i64
  %15671 = getelementptr inbounds i16, i16* %10104, i64 %15670
  %15672 = load i16, i16* %15671, align 2, !tbaa !382
  %15673 = insertelement <64 x i16> %15668, i16 %15672, i32 57
  %15674 = extractelement <64 x i32> %15383, i32 58
  %15675 = sext i32 %15674 to i64
  %15676 = getelementptr inbounds i16, i16* %10104, i64 %15675
  %15677 = load i16, i16* %15676, align 2, !tbaa !382
  %15678 = insertelement <64 x i16> %15673, i16 %15677, i32 58
  %15679 = extractelement <64 x i32> %15383, i32 59
  %15680 = sext i32 %15679 to i64
  %15681 = getelementptr inbounds i16, i16* %10104, i64 %15680
  %15682 = load i16, i16* %15681, align 2, !tbaa !382
  %15683 = insertelement <64 x i16> %15678, i16 %15682, i32 59
  %15684 = extractelement <64 x i32> %15383, i32 60
  %15685 = sext i32 %15684 to i64
  %15686 = getelementptr inbounds i16, i16* %10104, i64 %15685
  %15687 = load i16, i16* %15686, align 2, !tbaa !382
  %15688 = insertelement <64 x i16> %15683, i16 %15687, i32 60
  %15689 = extractelement <64 x i32> %15383, i32 61
  %15690 = sext i32 %15689 to i64
  %15691 = getelementptr inbounds i16, i16* %10104, i64 %15690
  %15692 = load i16, i16* %15691, align 2, !tbaa !382
  %15693 = insertelement <64 x i16> %15688, i16 %15692, i32 61
  %15694 = extractelement <64 x i32> %15383, i32 62
  %15695 = sext i32 %15694 to i64
  %15696 = getelementptr inbounds i16, i16* %10104, i64 %15695
  %15697 = load i16, i16* %15696, align 2, !tbaa !382
  %15698 = insertelement <64 x i16> %15693, i16 %15697, i32 62
  %15699 = extractelement <64 x i32> %15383, i32 63
  %15700 = sext i32 %15699 to i64
  %15701 = getelementptr inbounds i16, i16* %10104, i64 %15700
  %15702 = load i16, i16* %15701, align 2, !tbaa !382
  %15703 = insertelement <64 x i16> %15698, i16 %15702, i32 63
  %15704 = add nsw i32 %blur_x.s0.x.v1.base.s68, -59
  %15705 = insertelement <64 x i32> undef, i32 %15704, i32 0
  %15706 = shufflevector <64 x i32> %15705, <64 x i32> undef, <64 x i32> zeroinitializer
  %15707 = add nsw <64 x i32> %15706, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %15708 = shufflevector <64 x i32> %15707, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %15709 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15708, <4 x i32> %10103)
  %15710 = shufflevector <64 x i32> %15707, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %15711 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15710, <4 x i32> %10103)
  %15712 = shufflevector <64 x i32> %15707, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %15713 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15712, <4 x i32> %10103)
  %15714 = shufflevector <64 x i32> %15707, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %15715 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15714, <4 x i32> %10103)
  %15716 = shufflevector <64 x i32> %15707, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %15717 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15716, <4 x i32> %10103)
  %15718 = shufflevector <64 x i32> %15707, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %15719 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15718, <4 x i32> %10103)
  %15720 = shufflevector <64 x i32> %15707, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %15721 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15720, <4 x i32> %10103)
  %15722 = shufflevector <64 x i32> %15707, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %15723 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15722, <4 x i32> %10103)
  %15724 = shufflevector <64 x i32> %15707, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %15725 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15724, <4 x i32> %10103)
  %15726 = shufflevector <64 x i32> %15707, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %15727 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15726, <4 x i32> %10103)
  %15728 = shufflevector <64 x i32> %15707, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %15729 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15728, <4 x i32> %10103)
  %15730 = shufflevector <64 x i32> %15707, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %15731 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15730, <4 x i32> %10103)
  %15732 = shufflevector <64 x i32> %15707, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %15733 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15732, <4 x i32> %10103)
  %15734 = shufflevector <64 x i32> %15707, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %15735 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15734, <4 x i32> %10103)
  %15736 = shufflevector <64 x i32> %15707, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %15737 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15736, <4 x i32> %10103)
  %15738 = shufflevector <64 x i32> %15707, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %15739 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15738, <4 x i32> %10103)
  %15740 = shufflevector <4 x i32> %15739, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %15741 = shufflevector <8 x i32> %15740, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %15742 = shufflevector <16 x i32> %15741, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %15743 = shufflevector <32 x i32> %15742, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %15744 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15709, <4 x i32> zeroinitializer)
  %15745 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15711, <4 x i32> zeroinitializer)
  %15746 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15713, <4 x i32> zeroinitializer)
  %15747 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15715, <4 x i32> zeroinitializer)
  %15748 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15717, <4 x i32> zeroinitializer)
  %15749 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15719, <4 x i32> zeroinitializer)
  %15750 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15721, <4 x i32> zeroinitializer)
  %15751 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15723, <4 x i32> zeroinitializer)
  %15752 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15725, <4 x i32> zeroinitializer)
  %15753 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15727, <4 x i32> zeroinitializer)
  %15754 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15729, <4 x i32> zeroinitializer)
  %15755 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15731, <4 x i32> zeroinitializer)
  %15756 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15733, <4 x i32> zeroinitializer)
  %15757 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15735, <4 x i32> zeroinitializer)
  %15758 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15737, <4 x i32> zeroinitializer)
  %15759 = shufflevector <64 x i32> %15743, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %15760 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15759, <4 x i32> zeroinitializer)
  %15761 = shufflevector <4 x i32> %15744, <4 x i32> %15745, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15762 = shufflevector <4 x i32> %15746, <4 x i32> %15747, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15763 = shufflevector <4 x i32> %15748, <4 x i32> %15749, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15764 = shufflevector <4 x i32> %15750, <4 x i32> %15751, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15765 = shufflevector <4 x i32> %15752, <4 x i32> %15753, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15766 = shufflevector <4 x i32> %15754, <4 x i32> %15755, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15767 = shufflevector <4 x i32> %15756, <4 x i32> %15757, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15768 = shufflevector <4 x i32> %15758, <4 x i32> %15760, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15769 = shufflevector <8 x i32> %15761, <8 x i32> %15762, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15770 = shufflevector <8 x i32> %15763, <8 x i32> %15764, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15771 = shufflevector <8 x i32> %15765, <8 x i32> %15766, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15772 = shufflevector <8 x i32> %15767, <8 x i32> %15768, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15773 = shufflevector <16 x i32> %15769, <16 x i32> %15770, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15774 = shufflevector <16 x i32> %15771, <16 x i32> %15772, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15775 = shufflevector <32 x i32> %15773, <32 x i32> %15774, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %15776 = add nsw <64 x i32> %15775, %t25269
  %15777 = extractelement <64 x i32> %15776, i32 0
  %15778 = sext i32 %15777 to i64
  %15779 = getelementptr inbounds i16, i16* %10104, i64 %15778
  %15780 = load i16, i16* %15779, align 2, !tbaa !382
  %15781 = insertelement <64 x i16> undef, i16 %15780, i32 0
  %15782 = extractelement <64 x i32> %15776, i32 1
  %15783 = sext i32 %15782 to i64
  %15784 = getelementptr inbounds i16, i16* %10104, i64 %15783
  %15785 = load i16, i16* %15784, align 2, !tbaa !382
  %15786 = insertelement <64 x i16> %15781, i16 %15785, i32 1
  %15787 = extractelement <64 x i32> %15776, i32 2
  %15788 = sext i32 %15787 to i64
  %15789 = getelementptr inbounds i16, i16* %10104, i64 %15788
  %15790 = load i16, i16* %15789, align 2, !tbaa !382
  %15791 = insertelement <64 x i16> %15786, i16 %15790, i32 2
  %15792 = extractelement <64 x i32> %15776, i32 3
  %15793 = sext i32 %15792 to i64
  %15794 = getelementptr inbounds i16, i16* %10104, i64 %15793
  %15795 = load i16, i16* %15794, align 2, !tbaa !382
  %15796 = insertelement <64 x i16> %15791, i16 %15795, i32 3
  %15797 = extractelement <64 x i32> %15776, i32 4
  %15798 = sext i32 %15797 to i64
  %15799 = getelementptr inbounds i16, i16* %10104, i64 %15798
  %15800 = load i16, i16* %15799, align 2, !tbaa !382
  %15801 = insertelement <64 x i16> %15796, i16 %15800, i32 4
  %15802 = extractelement <64 x i32> %15776, i32 5
  %15803 = sext i32 %15802 to i64
  %15804 = getelementptr inbounds i16, i16* %10104, i64 %15803
  %15805 = load i16, i16* %15804, align 2, !tbaa !382
  %15806 = insertelement <64 x i16> %15801, i16 %15805, i32 5
  %15807 = extractelement <64 x i32> %15776, i32 6
  %15808 = sext i32 %15807 to i64
  %15809 = getelementptr inbounds i16, i16* %10104, i64 %15808
  %15810 = load i16, i16* %15809, align 2, !tbaa !382
  %15811 = insertelement <64 x i16> %15806, i16 %15810, i32 6
  %15812 = extractelement <64 x i32> %15776, i32 7
  %15813 = sext i32 %15812 to i64
  %15814 = getelementptr inbounds i16, i16* %10104, i64 %15813
  %15815 = load i16, i16* %15814, align 2, !tbaa !382
  %15816 = insertelement <64 x i16> %15811, i16 %15815, i32 7
  %15817 = extractelement <64 x i32> %15776, i32 8
  %15818 = sext i32 %15817 to i64
  %15819 = getelementptr inbounds i16, i16* %10104, i64 %15818
  %15820 = load i16, i16* %15819, align 2, !tbaa !382
  %15821 = insertelement <64 x i16> %15816, i16 %15820, i32 8
  %15822 = extractelement <64 x i32> %15776, i32 9
  %15823 = sext i32 %15822 to i64
  %15824 = getelementptr inbounds i16, i16* %10104, i64 %15823
  %15825 = load i16, i16* %15824, align 2, !tbaa !382
  %15826 = insertelement <64 x i16> %15821, i16 %15825, i32 9
  %15827 = extractelement <64 x i32> %15776, i32 10
  %15828 = sext i32 %15827 to i64
  %15829 = getelementptr inbounds i16, i16* %10104, i64 %15828
  %15830 = load i16, i16* %15829, align 2, !tbaa !382
  %15831 = insertelement <64 x i16> %15826, i16 %15830, i32 10
  %15832 = extractelement <64 x i32> %15776, i32 11
  %15833 = sext i32 %15832 to i64
  %15834 = getelementptr inbounds i16, i16* %10104, i64 %15833
  %15835 = load i16, i16* %15834, align 2, !tbaa !382
  %15836 = insertelement <64 x i16> %15831, i16 %15835, i32 11
  %15837 = extractelement <64 x i32> %15776, i32 12
  %15838 = sext i32 %15837 to i64
  %15839 = getelementptr inbounds i16, i16* %10104, i64 %15838
  %15840 = load i16, i16* %15839, align 2, !tbaa !382
  %15841 = insertelement <64 x i16> %15836, i16 %15840, i32 12
  %15842 = extractelement <64 x i32> %15776, i32 13
  %15843 = sext i32 %15842 to i64
  %15844 = getelementptr inbounds i16, i16* %10104, i64 %15843
  %15845 = load i16, i16* %15844, align 2, !tbaa !382
  %15846 = insertelement <64 x i16> %15841, i16 %15845, i32 13
  %15847 = extractelement <64 x i32> %15776, i32 14
  %15848 = sext i32 %15847 to i64
  %15849 = getelementptr inbounds i16, i16* %10104, i64 %15848
  %15850 = load i16, i16* %15849, align 2, !tbaa !382
  %15851 = insertelement <64 x i16> %15846, i16 %15850, i32 14
  %15852 = extractelement <64 x i32> %15776, i32 15
  %15853 = sext i32 %15852 to i64
  %15854 = getelementptr inbounds i16, i16* %10104, i64 %15853
  %15855 = load i16, i16* %15854, align 2, !tbaa !382
  %15856 = insertelement <64 x i16> %15851, i16 %15855, i32 15
  %15857 = extractelement <64 x i32> %15776, i32 16
  %15858 = sext i32 %15857 to i64
  %15859 = getelementptr inbounds i16, i16* %10104, i64 %15858
  %15860 = load i16, i16* %15859, align 2, !tbaa !382
  %15861 = insertelement <64 x i16> %15856, i16 %15860, i32 16
  %15862 = extractelement <64 x i32> %15776, i32 17
  %15863 = sext i32 %15862 to i64
  %15864 = getelementptr inbounds i16, i16* %10104, i64 %15863
  %15865 = load i16, i16* %15864, align 2, !tbaa !382
  %15866 = insertelement <64 x i16> %15861, i16 %15865, i32 17
  %15867 = extractelement <64 x i32> %15776, i32 18
  %15868 = sext i32 %15867 to i64
  %15869 = getelementptr inbounds i16, i16* %10104, i64 %15868
  %15870 = load i16, i16* %15869, align 2, !tbaa !382
  %15871 = insertelement <64 x i16> %15866, i16 %15870, i32 18
  %15872 = extractelement <64 x i32> %15776, i32 19
  %15873 = sext i32 %15872 to i64
  %15874 = getelementptr inbounds i16, i16* %10104, i64 %15873
  %15875 = load i16, i16* %15874, align 2, !tbaa !382
  %15876 = insertelement <64 x i16> %15871, i16 %15875, i32 19
  %15877 = extractelement <64 x i32> %15776, i32 20
  %15878 = sext i32 %15877 to i64
  %15879 = getelementptr inbounds i16, i16* %10104, i64 %15878
  %15880 = load i16, i16* %15879, align 2, !tbaa !382
  %15881 = insertelement <64 x i16> %15876, i16 %15880, i32 20
  %15882 = extractelement <64 x i32> %15776, i32 21
  %15883 = sext i32 %15882 to i64
  %15884 = getelementptr inbounds i16, i16* %10104, i64 %15883
  %15885 = load i16, i16* %15884, align 2, !tbaa !382
  %15886 = insertelement <64 x i16> %15881, i16 %15885, i32 21
  %15887 = extractelement <64 x i32> %15776, i32 22
  %15888 = sext i32 %15887 to i64
  %15889 = getelementptr inbounds i16, i16* %10104, i64 %15888
  %15890 = load i16, i16* %15889, align 2, !tbaa !382
  %15891 = insertelement <64 x i16> %15886, i16 %15890, i32 22
  %15892 = extractelement <64 x i32> %15776, i32 23
  %15893 = sext i32 %15892 to i64
  %15894 = getelementptr inbounds i16, i16* %10104, i64 %15893
  %15895 = load i16, i16* %15894, align 2, !tbaa !382
  %15896 = insertelement <64 x i16> %15891, i16 %15895, i32 23
  %15897 = extractelement <64 x i32> %15776, i32 24
  %15898 = sext i32 %15897 to i64
  %15899 = getelementptr inbounds i16, i16* %10104, i64 %15898
  %15900 = load i16, i16* %15899, align 2, !tbaa !382
  %15901 = insertelement <64 x i16> %15896, i16 %15900, i32 24
  %15902 = extractelement <64 x i32> %15776, i32 25
  %15903 = sext i32 %15902 to i64
  %15904 = getelementptr inbounds i16, i16* %10104, i64 %15903
  %15905 = load i16, i16* %15904, align 2, !tbaa !382
  %15906 = insertelement <64 x i16> %15901, i16 %15905, i32 25
  %15907 = extractelement <64 x i32> %15776, i32 26
  %15908 = sext i32 %15907 to i64
  %15909 = getelementptr inbounds i16, i16* %10104, i64 %15908
  %15910 = load i16, i16* %15909, align 2, !tbaa !382
  %15911 = insertelement <64 x i16> %15906, i16 %15910, i32 26
  %15912 = extractelement <64 x i32> %15776, i32 27
  %15913 = sext i32 %15912 to i64
  %15914 = getelementptr inbounds i16, i16* %10104, i64 %15913
  %15915 = load i16, i16* %15914, align 2, !tbaa !382
  %15916 = insertelement <64 x i16> %15911, i16 %15915, i32 27
  %15917 = extractelement <64 x i32> %15776, i32 28
  %15918 = sext i32 %15917 to i64
  %15919 = getelementptr inbounds i16, i16* %10104, i64 %15918
  %15920 = load i16, i16* %15919, align 2, !tbaa !382
  %15921 = insertelement <64 x i16> %15916, i16 %15920, i32 28
  %15922 = extractelement <64 x i32> %15776, i32 29
  %15923 = sext i32 %15922 to i64
  %15924 = getelementptr inbounds i16, i16* %10104, i64 %15923
  %15925 = load i16, i16* %15924, align 2, !tbaa !382
  %15926 = insertelement <64 x i16> %15921, i16 %15925, i32 29
  %15927 = extractelement <64 x i32> %15776, i32 30
  %15928 = sext i32 %15927 to i64
  %15929 = getelementptr inbounds i16, i16* %10104, i64 %15928
  %15930 = load i16, i16* %15929, align 2, !tbaa !382
  %15931 = insertelement <64 x i16> %15926, i16 %15930, i32 30
  %15932 = extractelement <64 x i32> %15776, i32 31
  %15933 = sext i32 %15932 to i64
  %15934 = getelementptr inbounds i16, i16* %10104, i64 %15933
  %15935 = load i16, i16* %15934, align 2, !tbaa !382
  %15936 = insertelement <64 x i16> %15931, i16 %15935, i32 31
  %15937 = extractelement <64 x i32> %15776, i32 32
  %15938 = sext i32 %15937 to i64
  %15939 = getelementptr inbounds i16, i16* %10104, i64 %15938
  %15940 = load i16, i16* %15939, align 2, !tbaa !382
  %15941 = insertelement <64 x i16> %15936, i16 %15940, i32 32
  %15942 = extractelement <64 x i32> %15776, i32 33
  %15943 = sext i32 %15942 to i64
  %15944 = getelementptr inbounds i16, i16* %10104, i64 %15943
  %15945 = load i16, i16* %15944, align 2, !tbaa !382
  %15946 = insertelement <64 x i16> %15941, i16 %15945, i32 33
  %15947 = extractelement <64 x i32> %15776, i32 34
  %15948 = sext i32 %15947 to i64
  %15949 = getelementptr inbounds i16, i16* %10104, i64 %15948
  %15950 = load i16, i16* %15949, align 2, !tbaa !382
  %15951 = insertelement <64 x i16> %15946, i16 %15950, i32 34
  %15952 = extractelement <64 x i32> %15776, i32 35
  %15953 = sext i32 %15952 to i64
  %15954 = getelementptr inbounds i16, i16* %10104, i64 %15953
  %15955 = load i16, i16* %15954, align 2, !tbaa !382
  %15956 = insertelement <64 x i16> %15951, i16 %15955, i32 35
  %15957 = extractelement <64 x i32> %15776, i32 36
  %15958 = sext i32 %15957 to i64
  %15959 = getelementptr inbounds i16, i16* %10104, i64 %15958
  %15960 = load i16, i16* %15959, align 2, !tbaa !382
  %15961 = insertelement <64 x i16> %15956, i16 %15960, i32 36
  %15962 = extractelement <64 x i32> %15776, i32 37
  %15963 = sext i32 %15962 to i64
  %15964 = getelementptr inbounds i16, i16* %10104, i64 %15963
  %15965 = load i16, i16* %15964, align 2, !tbaa !382
  %15966 = insertelement <64 x i16> %15961, i16 %15965, i32 37
  %15967 = extractelement <64 x i32> %15776, i32 38
  %15968 = sext i32 %15967 to i64
  %15969 = getelementptr inbounds i16, i16* %10104, i64 %15968
  %15970 = load i16, i16* %15969, align 2, !tbaa !382
  %15971 = insertelement <64 x i16> %15966, i16 %15970, i32 38
  %15972 = extractelement <64 x i32> %15776, i32 39
  %15973 = sext i32 %15972 to i64
  %15974 = getelementptr inbounds i16, i16* %10104, i64 %15973
  %15975 = load i16, i16* %15974, align 2, !tbaa !382
  %15976 = insertelement <64 x i16> %15971, i16 %15975, i32 39
  %15977 = extractelement <64 x i32> %15776, i32 40
  %15978 = sext i32 %15977 to i64
  %15979 = getelementptr inbounds i16, i16* %10104, i64 %15978
  %15980 = load i16, i16* %15979, align 2, !tbaa !382
  %15981 = insertelement <64 x i16> %15976, i16 %15980, i32 40
  %15982 = extractelement <64 x i32> %15776, i32 41
  %15983 = sext i32 %15982 to i64
  %15984 = getelementptr inbounds i16, i16* %10104, i64 %15983
  %15985 = load i16, i16* %15984, align 2, !tbaa !382
  %15986 = insertelement <64 x i16> %15981, i16 %15985, i32 41
  %15987 = extractelement <64 x i32> %15776, i32 42
  %15988 = sext i32 %15987 to i64
  %15989 = getelementptr inbounds i16, i16* %10104, i64 %15988
  %15990 = load i16, i16* %15989, align 2, !tbaa !382
  %15991 = insertelement <64 x i16> %15986, i16 %15990, i32 42
  %15992 = extractelement <64 x i32> %15776, i32 43
  %15993 = sext i32 %15992 to i64
  %15994 = getelementptr inbounds i16, i16* %10104, i64 %15993
  %15995 = load i16, i16* %15994, align 2, !tbaa !382
  %15996 = insertelement <64 x i16> %15991, i16 %15995, i32 43
  %15997 = extractelement <64 x i32> %15776, i32 44
  %15998 = sext i32 %15997 to i64
  %15999 = getelementptr inbounds i16, i16* %10104, i64 %15998
  %16000 = load i16, i16* %15999, align 2, !tbaa !382
  %16001 = insertelement <64 x i16> %15996, i16 %16000, i32 44
  %16002 = extractelement <64 x i32> %15776, i32 45
  %16003 = sext i32 %16002 to i64
  %16004 = getelementptr inbounds i16, i16* %10104, i64 %16003
  %16005 = load i16, i16* %16004, align 2, !tbaa !382
  %16006 = insertelement <64 x i16> %16001, i16 %16005, i32 45
  %16007 = extractelement <64 x i32> %15776, i32 46
  %16008 = sext i32 %16007 to i64
  %16009 = getelementptr inbounds i16, i16* %10104, i64 %16008
  %16010 = load i16, i16* %16009, align 2, !tbaa !382
  %16011 = insertelement <64 x i16> %16006, i16 %16010, i32 46
  %16012 = extractelement <64 x i32> %15776, i32 47
  %16013 = sext i32 %16012 to i64
  %16014 = getelementptr inbounds i16, i16* %10104, i64 %16013
  %16015 = load i16, i16* %16014, align 2, !tbaa !382
  %16016 = insertelement <64 x i16> %16011, i16 %16015, i32 47
  %16017 = extractelement <64 x i32> %15776, i32 48
  %16018 = sext i32 %16017 to i64
  %16019 = getelementptr inbounds i16, i16* %10104, i64 %16018
  %16020 = load i16, i16* %16019, align 2, !tbaa !382
  %16021 = insertelement <64 x i16> %16016, i16 %16020, i32 48
  %16022 = extractelement <64 x i32> %15776, i32 49
  %16023 = sext i32 %16022 to i64
  %16024 = getelementptr inbounds i16, i16* %10104, i64 %16023
  %16025 = load i16, i16* %16024, align 2, !tbaa !382
  %16026 = insertelement <64 x i16> %16021, i16 %16025, i32 49
  %16027 = extractelement <64 x i32> %15776, i32 50
  %16028 = sext i32 %16027 to i64
  %16029 = getelementptr inbounds i16, i16* %10104, i64 %16028
  %16030 = load i16, i16* %16029, align 2, !tbaa !382
  %16031 = insertelement <64 x i16> %16026, i16 %16030, i32 50
  %16032 = extractelement <64 x i32> %15776, i32 51
  %16033 = sext i32 %16032 to i64
  %16034 = getelementptr inbounds i16, i16* %10104, i64 %16033
  %16035 = load i16, i16* %16034, align 2, !tbaa !382
  %16036 = insertelement <64 x i16> %16031, i16 %16035, i32 51
  %16037 = extractelement <64 x i32> %15776, i32 52
  %16038 = sext i32 %16037 to i64
  %16039 = getelementptr inbounds i16, i16* %10104, i64 %16038
  %16040 = load i16, i16* %16039, align 2, !tbaa !382
  %16041 = insertelement <64 x i16> %16036, i16 %16040, i32 52
  %16042 = extractelement <64 x i32> %15776, i32 53
  %16043 = sext i32 %16042 to i64
  %16044 = getelementptr inbounds i16, i16* %10104, i64 %16043
  %16045 = load i16, i16* %16044, align 2, !tbaa !382
  %16046 = insertelement <64 x i16> %16041, i16 %16045, i32 53
  %16047 = extractelement <64 x i32> %15776, i32 54
  %16048 = sext i32 %16047 to i64
  %16049 = getelementptr inbounds i16, i16* %10104, i64 %16048
  %16050 = load i16, i16* %16049, align 2, !tbaa !382
  %16051 = insertelement <64 x i16> %16046, i16 %16050, i32 54
  %16052 = extractelement <64 x i32> %15776, i32 55
  %16053 = sext i32 %16052 to i64
  %16054 = getelementptr inbounds i16, i16* %10104, i64 %16053
  %16055 = load i16, i16* %16054, align 2, !tbaa !382
  %16056 = insertelement <64 x i16> %16051, i16 %16055, i32 55
  %16057 = extractelement <64 x i32> %15776, i32 56
  %16058 = sext i32 %16057 to i64
  %16059 = getelementptr inbounds i16, i16* %10104, i64 %16058
  %16060 = load i16, i16* %16059, align 2, !tbaa !382
  %16061 = insertelement <64 x i16> %16056, i16 %16060, i32 56
  %16062 = extractelement <64 x i32> %15776, i32 57
  %16063 = sext i32 %16062 to i64
  %16064 = getelementptr inbounds i16, i16* %10104, i64 %16063
  %16065 = load i16, i16* %16064, align 2, !tbaa !382
  %16066 = insertelement <64 x i16> %16061, i16 %16065, i32 57
  %16067 = extractelement <64 x i32> %15776, i32 58
  %16068 = sext i32 %16067 to i64
  %16069 = getelementptr inbounds i16, i16* %10104, i64 %16068
  %16070 = load i16, i16* %16069, align 2, !tbaa !382
  %16071 = insertelement <64 x i16> %16066, i16 %16070, i32 58
  %16072 = extractelement <64 x i32> %15776, i32 59
  %16073 = sext i32 %16072 to i64
  %16074 = getelementptr inbounds i16, i16* %10104, i64 %16073
  %16075 = load i16, i16* %16074, align 2, !tbaa !382
  %16076 = insertelement <64 x i16> %16071, i16 %16075, i32 59
  %16077 = extractelement <64 x i32> %15776, i32 60
  %16078 = sext i32 %16077 to i64
  %16079 = getelementptr inbounds i16, i16* %10104, i64 %16078
  %16080 = load i16, i16* %16079, align 2, !tbaa !382
  %16081 = insertelement <64 x i16> %16076, i16 %16080, i32 60
  %16082 = extractelement <64 x i32> %15776, i32 61
  %16083 = sext i32 %16082 to i64
  %16084 = getelementptr inbounds i16, i16* %10104, i64 %16083
  %16085 = load i16, i16* %16084, align 2, !tbaa !382
  %16086 = insertelement <64 x i16> %16081, i16 %16085, i32 61
  %16087 = extractelement <64 x i32> %15776, i32 62
  %16088 = sext i32 %16087 to i64
  %16089 = getelementptr inbounds i16, i16* %10104, i64 %16088
  %16090 = load i16, i16* %16089, align 2, !tbaa !382
  %16091 = insertelement <64 x i16> %16086, i16 %16090, i32 62
  %16092 = extractelement <64 x i32> %15776, i32 63
  %16093 = sext i32 %16092 to i64
  %16094 = getelementptr inbounds i16, i16* %10104, i64 %16093
  %16095 = load i16, i16* %16094, align 2, !tbaa !382
  %16096 = insertelement <64 x i16> %16091, i16 %16095, i32 63
  %16097 = add <64 x i16> %14131, %13738
  %16098 = add <64 x i16> %16097, %14524
  %16099 = add <64 x i16> %16098, %14917
  %16100 = add <64 x i16> %16099, %15310
  %16101 = add <64 x i16> %16100, %15703
  %16102 = add <64 x i16> %16101, %16096
  %16103 = shufflevector <64 x i16> %16102, <64 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16104 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16103, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16105 = shufflevector <64 x i16> %16102, <64 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16106 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16105, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16107 = shufflevector <64 x i16> %16102, <64 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %16108 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16107, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16109 = shufflevector <64 x i16> %16102, <64 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %16110 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16109, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16111 = shufflevector <64 x i16> %16102, <64 x i16> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %16112 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16111, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16113 = shufflevector <64 x i16> %16102, <64 x i16> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %16114 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16113, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16115 = shufflevector <64 x i16> %16102, <64 x i16> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %16116 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16115, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16117 = shufflevector <64 x i16> %16102, <64 x i16> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %16118 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16117, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16119 = shufflevector <64 x i16> %16102, <64 x i16> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %16120 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16119, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16121 = shufflevector <64 x i16> %16102, <64 x i16> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %16122 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16121, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16123 = shufflevector <64 x i16> %16102, <64 x i16> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %16124 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16123, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16125 = shufflevector <64 x i16> %16102, <64 x i16> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %16126 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16125, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16127 = shufflevector <64 x i16> %16102, <64 x i16> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %16128 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16127, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16129 = shufflevector <64 x i16> %16102, <64 x i16> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %16130 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16129, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16131 = shufflevector <64 x i16> %16102, <64 x i16> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %16132 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16131, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16133 = shufflevector <64 x i16> %16102, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %16134 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16133, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16135 = shufflevector <4 x i32> %16104, <4 x i32> %16106, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16136 = shufflevector <4 x i32> %16108, <4 x i32> %16110, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16137 = shufflevector <4 x i32> %16112, <4 x i32> %16114, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16138 = shufflevector <4 x i32> %16116, <4 x i32> %16118, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16139 = shufflevector <4 x i32> %16120, <4 x i32> %16122, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16140 = shufflevector <4 x i32> %16124, <4 x i32> %16126, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16141 = shufflevector <4 x i32> %16128, <4 x i32> %16130, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16142 = shufflevector <4 x i32> %16132, <4 x i32> %16134, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16143 = shufflevector <8 x i32> %16135, <8 x i32> %16136, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16144 = shufflevector <8 x i32> %16137, <8 x i32> %16138, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16145 = shufflevector <8 x i32> %16139, <8 x i32> %16140, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16146 = shufflevector <8 x i32> %16141, <8 x i32> %16142, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16147 = shufflevector <16 x i32> %16143, <16 x i32> %16144, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16148 = shufflevector <16 x i32> %16145, <16 x i32> %16146, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16149 = shufflevector <32 x i32> %16147, <32 x i32> %16148, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %16150 = lshr <64 x i32> %16149, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %16151 = trunc <64 x i32> %16150 to <64 x i16>
  %16152 = shufflevector <64 x i16> %16151, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16153 = shufflevector <64 x i16> %16102, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16154 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16152, <8 x i16> %16153)
  %16155 = shufflevector <64 x i16> %16151, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16156 = shufflevector <64 x i16> %16102, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16157 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16155, <8 x i16> %16156)
  %16158 = shufflevector <64 x i16> %16151, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %16159 = shufflevector <64 x i16> %16102, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %16160 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16158, <8 x i16> %16159)
  %16161 = shufflevector <64 x i16> %16151, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16162 = shufflevector <64 x i16> %16102, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16163 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16161, <8 x i16> %16162)
  %16164 = shufflevector <64 x i16> %16151, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %16165 = shufflevector <64 x i16> %16102, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %16166 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16164, <8 x i16> %16165)
  %16167 = shufflevector <64 x i16> %16151, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %16168 = shufflevector <64 x i16> %16102, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %16169 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16167, <8 x i16> %16168)
  %16170 = shufflevector <64 x i16> %16151, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %16171 = shufflevector <64 x i16> %16102, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %16172 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16170, <8 x i16> %16171)
  %16173 = shufflevector <64 x i16> %16151, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %16174 = shufflevector <64 x i16> %16102, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %16175 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16173, <8 x i16> %16174)
  %16176 = shufflevector <8 x i16> %16154, <8 x i16> %16157, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16177 = shufflevector <8 x i16> %16160, <8 x i16> %16163, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16178 = shufflevector <8 x i16> %16166, <8 x i16> %16169, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16179 = shufflevector <8 x i16> %16172, <8 x i16> %16175, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16180 = shufflevector <16 x i16> %16176, <16 x i16> %16177, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16181 = shufflevector <16 x i16> %16178, <16 x i16> %16179, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16182 = shufflevector <32 x i16> %16180, <32 x i16> %16181, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %16183 = lshr <64 x i16> %16182, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16184 = shufflevector <64 x i16> %16183, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16185 = sext i32 %blur_x.s0.x.v1.base.s68 to i64
  %16186 = add nsw i64 %13342, %16185
  %16187 = getelementptr inbounds i16, i16* %blur_x47, i64 %16186
  %16188 = bitcast i16* %16187 to <8 x i16>*
  store <8 x i16> %16184, <8 x i16>* %16188, align 2, !tbaa !385
  %16189 = shufflevector <64 x i16> %16183, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16190 = getelementptr inbounds i16, i16* %16187, i64 8
  %16191 = bitcast i16* %16190 to <8 x i16>*
  store <8 x i16> %16189, <8 x i16>* %16191, align 2, !tbaa !385
  %16192 = shufflevector <64 x i16> %16183, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %16193 = getelementptr inbounds i16, i16* %16187, i64 16
  %16194 = bitcast i16* %16193 to <8 x i16>*
  store <8 x i16> %16192, <8 x i16>* %16194, align 2, !tbaa !385
  %16195 = shufflevector <64 x i16> %16183, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16196 = getelementptr inbounds i16, i16* %16187, i64 24
  %16197 = bitcast i16* %16196 to <8 x i16>*
  store <8 x i16> %16195, <8 x i16>* %16197, align 2, !tbaa !385
  %16198 = shufflevector <64 x i16> %16183, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %16199 = getelementptr inbounds i16, i16* %16187, i64 32
  %16200 = bitcast i16* %16199 to <8 x i16>*
  store <8 x i16> %16198, <8 x i16>* %16200, align 2, !tbaa !385
  %16201 = shufflevector <64 x i16> %16183, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %16202 = getelementptr inbounds i16, i16* %16187, i64 40
  %16203 = bitcast i16* %16202 to <8 x i16>*
  store <8 x i16> %16201, <8 x i16>* %16203, align 2, !tbaa !385
  %16204 = shufflevector <64 x i16> %16183, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %16205 = getelementptr inbounds i16, i16* %16187, i64 48
  %16206 = bitcast i16* %16205 to <8 x i16>*
  store <8 x i16> %16204, <8 x i16>* %16206, align 2, !tbaa !385
  %16207 = shufflevector <64 x i16> %16183, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %16208 = getelementptr inbounds i16, i16* %16187, i64 56
  %16209 = bitcast i16* %16208 to <8 x i16>*
  store <8 x i16> %16207, <8 x i16>* %16209, align 2, !tbaa !385
  %16210 = add nuw nsw i32 %blur_x.s0.x.x.rebased67, 1
  %.not121 = icmp eq i32 %16210, %t27848
  br i1 %.not121, label %"end for blur_x.s0.x.x.rebased66", label %"for blur_x.s0.x.x.rebased65"

"end for blur_x.s0.x.x.rebased66":                ; preds = %"for blur_x.s0.x.x.rebased65", %"end for blur_x.s0.x.x.rebased61"
  %16211 = icmp ugt i64 %indvars.iv187, 5
  br i1 %16211, label %"consume blur_x73", label %after_bb70

after_bb70:                                       ; preds = %"for blur_y.s0.x.x80.preheader", %"end for blur_y.s0.x.x76", %"end for blur_x.s0.x.x.rebased66"
  %indvars.iv.next188 = add nuw nsw i64 %indvars.iv187, 1
  %.not112 = icmp eq i64 %indvars.iv.next188, 134
  br i1 %.not112, label %"end for blur_y.s0.y.yi.$n.rebased51", label %"for blur_y.s0.y.yi.$n.rebased50"

"consume blur_x73":                               ; preds = %"end for blur_x.s0.x.x.rebased66"
  br i1 %10109, label %"for blur_y.s0.x.x75.preheader", label %"end for blur_y.s0.x.x76", !prof !381

"for blur_y.s0.x.x75.preheader":                  ; preds = %"consume blur_x73"
  %16212 = add i64 %10128, 3
  %16213 = and i64 %16212, 7
  %16214 = mul nsw i64 %16213, %10105
  %16215 = add i64 %10128, 2
  %16216 = and i64 %16215, 7
  %16217 = mul nsw i64 %16216, %10105
  %16218 = add i64 %10128, 4
  %16219 = and i64 %16218, 7
  %16220 = mul nsw i64 %16219, %10105
  %16221 = add i64 %10128, 5
  %16222 = and i64 %16221, 7
  %16223 = mul nsw i64 %16222, %10105
  %16224 = add i64 %10128, 6
  %16225 = and i64 %16224, 7
  %16226 = mul nsw i64 %16225, %10105
  %16227 = and i64 %10128, 7
  %16228 = mul nsw i64 %16227, %10105
  %16229 = add i64 %10128, 7
  %16230 = and i64 %16229, 7
  %16231 = mul nsw i64 %16230, %10105
  %16232 = add nsw i64 %10128, -6
  %16233 = mul nsw i64 %16232, %10110
  br label %"for blur_y.s0.x.x75"

"for blur_y.s0.x.x75":                            ; preds = %"for blur_y.s0.x.x75.preheader", %"for blur_y.s0.x.x75"
  %indvars.iv184 = phi i64 [ 0, %"for blur_y.s0.x.x75.preheader" ], [ %indvars.iv.next185, %"for blur_y.s0.x.x75" ]
  %16234 = shl nsw i64 %indvars.iv184, 6
  %16235 = sub nsw i64 %16234, %10106
  %16236 = add nsw i64 %16214, %16235
  %16237 = getelementptr inbounds i16, i16* %blur_x47, i64 %16236
  %16238 = getelementptr inbounds i16, i16* %16237, i64 64
  %16239 = bitcast i16* %16238 to <8 x i16>*
  %16240 = load <8 x i16>, <8 x i16>* %16239, align 2, !tbaa !385
  %16241 = getelementptr inbounds i16, i16* %16237, i64 72
  %16242 = bitcast i16* %16241 to <8 x i16>*
  %16243 = load <8 x i16>, <8 x i16>* %16242, align 2, !tbaa !385
  %16244 = getelementptr inbounds i16, i16* %16237, i64 80
  %16245 = bitcast i16* %16244 to <8 x i16>*
  %16246 = load <8 x i16>, <8 x i16>* %16245, align 2, !tbaa !385
  %16247 = getelementptr inbounds i16, i16* %16237, i64 88
  %16248 = bitcast i16* %16247 to <8 x i16>*
  %16249 = load <8 x i16>, <8 x i16>* %16248, align 2, !tbaa !385
  %16250 = getelementptr inbounds i16, i16* %16237, i64 96
  %16251 = bitcast i16* %16250 to <8 x i16>*
  %16252 = load <8 x i16>, <8 x i16>* %16251, align 2, !tbaa !385
  %16253 = getelementptr inbounds i16, i16* %16237, i64 104
  %16254 = bitcast i16* %16253 to <8 x i16>*
  %16255 = load <8 x i16>, <8 x i16>* %16254, align 2, !tbaa !385
  %16256 = getelementptr inbounds i16, i16* %16237, i64 112
  %16257 = bitcast i16* %16256 to <8 x i16>*
  %16258 = load <8 x i16>, <8 x i16>* %16257, align 2, !tbaa !385
  %16259 = getelementptr inbounds i16, i16* %16237, i64 120
  %16260 = bitcast i16* %16259 to <8 x i16>*
  %16261 = load <8 x i16>, <8 x i16>* %16260, align 2, !tbaa !385
  %16262 = add nsw i64 %16217, %16235
  %16263 = getelementptr inbounds i16, i16* %blur_x47, i64 %16262
  %16264 = getelementptr inbounds i16, i16* %16263, i64 64
  %16265 = bitcast i16* %16264 to <8 x i16>*
  %16266 = load <8 x i16>, <8 x i16>* %16265, align 2, !tbaa !385
  %16267 = getelementptr inbounds i16, i16* %16263, i64 72
  %16268 = bitcast i16* %16267 to <8 x i16>*
  %16269 = load <8 x i16>, <8 x i16>* %16268, align 2, !tbaa !385
  %16270 = getelementptr inbounds i16, i16* %16263, i64 80
  %16271 = bitcast i16* %16270 to <8 x i16>*
  %16272 = load <8 x i16>, <8 x i16>* %16271, align 2, !tbaa !385
  %16273 = getelementptr inbounds i16, i16* %16263, i64 88
  %16274 = bitcast i16* %16273 to <8 x i16>*
  %16275 = load <8 x i16>, <8 x i16>* %16274, align 2, !tbaa !385
  %16276 = getelementptr inbounds i16, i16* %16263, i64 96
  %16277 = bitcast i16* %16276 to <8 x i16>*
  %16278 = load <8 x i16>, <8 x i16>* %16277, align 2, !tbaa !385
  %16279 = getelementptr inbounds i16, i16* %16263, i64 104
  %16280 = bitcast i16* %16279 to <8 x i16>*
  %16281 = load <8 x i16>, <8 x i16>* %16280, align 2, !tbaa !385
  %16282 = getelementptr inbounds i16, i16* %16263, i64 112
  %16283 = bitcast i16* %16282 to <8 x i16>*
  %16284 = load <8 x i16>, <8 x i16>* %16283, align 2, !tbaa !385
  %16285 = getelementptr inbounds i16, i16* %16263, i64 120
  %16286 = bitcast i16* %16285 to <8 x i16>*
  %16287 = load <8 x i16>, <8 x i16>* %16286, align 2, !tbaa !385
  %16288 = add nsw i64 %16220, %16235
  %16289 = getelementptr inbounds i16, i16* %blur_x47, i64 %16288
  %16290 = getelementptr inbounds i16, i16* %16289, i64 64
  %16291 = bitcast i16* %16290 to <8 x i16>*
  %16292 = load <8 x i16>, <8 x i16>* %16291, align 2, !tbaa !385
  %16293 = getelementptr inbounds i16, i16* %16289, i64 72
  %16294 = bitcast i16* %16293 to <8 x i16>*
  %16295 = load <8 x i16>, <8 x i16>* %16294, align 2, !tbaa !385
  %16296 = getelementptr inbounds i16, i16* %16289, i64 80
  %16297 = bitcast i16* %16296 to <8 x i16>*
  %16298 = load <8 x i16>, <8 x i16>* %16297, align 2, !tbaa !385
  %16299 = getelementptr inbounds i16, i16* %16289, i64 88
  %16300 = bitcast i16* %16299 to <8 x i16>*
  %16301 = load <8 x i16>, <8 x i16>* %16300, align 2, !tbaa !385
  %16302 = getelementptr inbounds i16, i16* %16289, i64 96
  %16303 = bitcast i16* %16302 to <8 x i16>*
  %16304 = load <8 x i16>, <8 x i16>* %16303, align 2, !tbaa !385
  %16305 = getelementptr inbounds i16, i16* %16289, i64 104
  %16306 = bitcast i16* %16305 to <8 x i16>*
  %16307 = load <8 x i16>, <8 x i16>* %16306, align 2, !tbaa !385
  %16308 = getelementptr inbounds i16, i16* %16289, i64 112
  %16309 = bitcast i16* %16308 to <8 x i16>*
  %16310 = load <8 x i16>, <8 x i16>* %16309, align 2, !tbaa !385
  %16311 = getelementptr inbounds i16, i16* %16289, i64 120
  %16312 = bitcast i16* %16311 to <8 x i16>*
  %16313 = load <8 x i16>, <8 x i16>* %16312, align 2, !tbaa !385
  %16314 = add nsw i64 %16223, %16235
  %16315 = getelementptr inbounds i16, i16* %blur_x47, i64 %16314
  %16316 = getelementptr inbounds i16, i16* %16315, i64 64
  %16317 = bitcast i16* %16316 to <8 x i16>*
  %16318 = load <8 x i16>, <8 x i16>* %16317, align 2, !tbaa !385
  %16319 = getelementptr inbounds i16, i16* %16315, i64 72
  %16320 = bitcast i16* %16319 to <8 x i16>*
  %16321 = load <8 x i16>, <8 x i16>* %16320, align 2, !tbaa !385
  %16322 = getelementptr inbounds i16, i16* %16315, i64 80
  %16323 = bitcast i16* %16322 to <8 x i16>*
  %16324 = load <8 x i16>, <8 x i16>* %16323, align 2, !tbaa !385
  %16325 = getelementptr inbounds i16, i16* %16315, i64 88
  %16326 = bitcast i16* %16325 to <8 x i16>*
  %16327 = load <8 x i16>, <8 x i16>* %16326, align 2, !tbaa !385
  %16328 = getelementptr inbounds i16, i16* %16315, i64 96
  %16329 = bitcast i16* %16328 to <8 x i16>*
  %16330 = load <8 x i16>, <8 x i16>* %16329, align 2, !tbaa !385
  %16331 = getelementptr inbounds i16, i16* %16315, i64 104
  %16332 = bitcast i16* %16331 to <8 x i16>*
  %16333 = load <8 x i16>, <8 x i16>* %16332, align 2, !tbaa !385
  %16334 = getelementptr inbounds i16, i16* %16315, i64 112
  %16335 = bitcast i16* %16334 to <8 x i16>*
  %16336 = load <8 x i16>, <8 x i16>* %16335, align 2, !tbaa !385
  %16337 = getelementptr inbounds i16, i16* %16315, i64 120
  %16338 = bitcast i16* %16337 to <8 x i16>*
  %16339 = load <8 x i16>, <8 x i16>* %16338, align 2, !tbaa !385
  %16340 = add nsw i64 %16226, %16235
  %16341 = getelementptr inbounds i16, i16* %blur_x47, i64 %16340
  %16342 = getelementptr inbounds i16, i16* %16341, i64 64
  %16343 = bitcast i16* %16342 to <8 x i16>*
  %16344 = load <8 x i16>, <8 x i16>* %16343, align 2, !tbaa !385
  %16345 = getelementptr inbounds i16, i16* %16341, i64 72
  %16346 = bitcast i16* %16345 to <8 x i16>*
  %16347 = load <8 x i16>, <8 x i16>* %16346, align 2, !tbaa !385
  %16348 = getelementptr inbounds i16, i16* %16341, i64 80
  %16349 = bitcast i16* %16348 to <8 x i16>*
  %16350 = load <8 x i16>, <8 x i16>* %16349, align 2, !tbaa !385
  %16351 = getelementptr inbounds i16, i16* %16341, i64 88
  %16352 = bitcast i16* %16351 to <8 x i16>*
  %16353 = load <8 x i16>, <8 x i16>* %16352, align 2, !tbaa !385
  %16354 = getelementptr inbounds i16, i16* %16341, i64 96
  %16355 = bitcast i16* %16354 to <8 x i16>*
  %16356 = load <8 x i16>, <8 x i16>* %16355, align 2, !tbaa !385
  %16357 = getelementptr inbounds i16, i16* %16341, i64 104
  %16358 = bitcast i16* %16357 to <8 x i16>*
  %16359 = load <8 x i16>, <8 x i16>* %16358, align 2, !tbaa !385
  %16360 = getelementptr inbounds i16, i16* %16341, i64 112
  %16361 = bitcast i16* %16360 to <8 x i16>*
  %16362 = load <8 x i16>, <8 x i16>* %16361, align 2, !tbaa !385
  %16363 = getelementptr inbounds i16, i16* %16341, i64 120
  %16364 = bitcast i16* %16363 to <8 x i16>*
  %16365 = load <8 x i16>, <8 x i16>* %16364, align 2, !tbaa !385
  %16366 = add nsw i64 %16228, %16235
  %16367 = getelementptr inbounds i16, i16* %blur_x47, i64 %16366
  %16368 = getelementptr inbounds i16, i16* %16367, i64 64
  %16369 = bitcast i16* %16368 to <8 x i16>*
  %16370 = load <8 x i16>, <8 x i16>* %16369, align 2, !tbaa !385
  %16371 = getelementptr inbounds i16, i16* %16367, i64 72
  %16372 = bitcast i16* %16371 to <8 x i16>*
  %16373 = load <8 x i16>, <8 x i16>* %16372, align 2, !tbaa !385
  %16374 = getelementptr inbounds i16, i16* %16367, i64 80
  %16375 = bitcast i16* %16374 to <8 x i16>*
  %16376 = load <8 x i16>, <8 x i16>* %16375, align 2, !tbaa !385
  %16377 = getelementptr inbounds i16, i16* %16367, i64 88
  %16378 = bitcast i16* %16377 to <8 x i16>*
  %16379 = load <8 x i16>, <8 x i16>* %16378, align 2, !tbaa !385
  %16380 = getelementptr inbounds i16, i16* %16367, i64 96
  %16381 = bitcast i16* %16380 to <8 x i16>*
  %16382 = load <8 x i16>, <8 x i16>* %16381, align 2, !tbaa !385
  %16383 = getelementptr inbounds i16, i16* %16367, i64 104
  %16384 = bitcast i16* %16383 to <8 x i16>*
  %16385 = load <8 x i16>, <8 x i16>* %16384, align 2, !tbaa !385
  %16386 = getelementptr inbounds i16, i16* %16367, i64 112
  %16387 = bitcast i16* %16386 to <8 x i16>*
  %16388 = load <8 x i16>, <8 x i16>* %16387, align 2, !tbaa !385
  %16389 = getelementptr inbounds i16, i16* %16367, i64 120
  %16390 = bitcast i16* %16389 to <8 x i16>*
  %16391 = load <8 x i16>, <8 x i16>* %16390, align 2, !tbaa !385
  %16392 = add nsw i64 %16231, %16235
  %16393 = getelementptr inbounds i16, i16* %blur_x47, i64 %16392
  %16394 = getelementptr inbounds i16, i16* %16393, i64 64
  %16395 = bitcast i16* %16394 to <8 x i16>*
  %16396 = load <8 x i16>, <8 x i16>* %16395, align 2, !tbaa !385
  %16397 = getelementptr inbounds i16, i16* %16393, i64 72
  %16398 = bitcast i16* %16397 to <8 x i16>*
  %16399 = load <8 x i16>, <8 x i16>* %16398, align 2, !tbaa !385
  %16400 = getelementptr inbounds i16, i16* %16393, i64 80
  %16401 = bitcast i16* %16400 to <8 x i16>*
  %16402 = load <8 x i16>, <8 x i16>* %16401, align 2, !tbaa !385
  %16403 = getelementptr inbounds i16, i16* %16393, i64 88
  %16404 = bitcast i16* %16403 to <8 x i16>*
  %16405 = load <8 x i16>, <8 x i16>* %16404, align 2, !tbaa !385
  %16406 = getelementptr inbounds i16, i16* %16393, i64 96
  %16407 = bitcast i16* %16406 to <8 x i16>*
  %16408 = load <8 x i16>, <8 x i16>* %16407, align 2, !tbaa !385
  %16409 = getelementptr inbounds i16, i16* %16393, i64 104
  %16410 = bitcast i16* %16409 to <8 x i16>*
  %16411 = load <8 x i16>, <8 x i16>* %16410, align 2, !tbaa !385
  %16412 = getelementptr inbounds i16, i16* %16393, i64 112
  %16413 = bitcast i16* %16412 to <8 x i16>*
  %16414 = load <8 x i16>, <8 x i16>* %16413, align 2, !tbaa !385
  %16415 = getelementptr inbounds i16, i16* %16393, i64 120
  %16416 = bitcast i16* %16415 to <8 x i16>*
  %16417 = load <8 x i16>, <8 x i16>* %16416, align 2, !tbaa !385
  %16418 = add <8 x i16> %16266, %16240
  %16419 = add <8 x i16> %16418, %16292
  %16420 = add <8 x i16> %16419, %16318
  %16421 = add <8 x i16> %16420, %16344
  %16422 = add <8 x i16> %16421, %16370
  %16423 = add <8 x i16> %16422, %16396
  %16424 = add <8 x i16> %16269, %16243
  %16425 = add <8 x i16> %16424, %16295
  %16426 = add <8 x i16> %16425, %16321
  %16427 = add <8 x i16> %16426, %16347
  %16428 = add <8 x i16> %16427, %16373
  %16429 = add <8 x i16> %16428, %16399
  %16430 = add <8 x i16> %16272, %16246
  %16431 = add <8 x i16> %16430, %16298
  %16432 = add <8 x i16> %16431, %16324
  %16433 = add <8 x i16> %16432, %16350
  %16434 = add <8 x i16> %16433, %16376
  %16435 = add <8 x i16> %16434, %16402
  %16436 = add <8 x i16> %16275, %16249
  %16437 = add <8 x i16> %16436, %16301
  %16438 = add <8 x i16> %16437, %16327
  %16439 = add <8 x i16> %16438, %16353
  %16440 = add <8 x i16> %16439, %16379
  %16441 = add <8 x i16> %16440, %16405
  %16442 = add <8 x i16> %16278, %16252
  %16443 = add <8 x i16> %16442, %16304
  %16444 = add <8 x i16> %16443, %16330
  %16445 = add <8 x i16> %16444, %16356
  %16446 = add <8 x i16> %16445, %16382
  %16447 = add <8 x i16> %16446, %16408
  %16448 = add <8 x i16> %16281, %16255
  %16449 = add <8 x i16> %16448, %16307
  %16450 = add <8 x i16> %16449, %16333
  %16451 = add <8 x i16> %16450, %16359
  %16452 = add <8 x i16> %16451, %16385
  %16453 = add <8 x i16> %16452, %16411
  %16454 = add <8 x i16> %16284, %16258
  %16455 = add <8 x i16> %16454, %16310
  %16456 = add <8 x i16> %16455, %16336
  %16457 = add <8 x i16> %16456, %16362
  %16458 = add <8 x i16> %16457, %16388
  %16459 = add <8 x i16> %16458, %16414
  %16460 = add <8 x i16> %16287, %16261
  %16461 = add <8 x i16> %16460, %16313
  %16462 = add <8 x i16> %16461, %16339
  %16463 = add <8 x i16> %16462, %16365
  %16464 = add <8 x i16> %16463, %16391
  %16465 = add <8 x i16> %16464, %16417
  %16466 = shufflevector <8 x i16> %16465, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16467 = shufflevector <16 x i16> %16466, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16468 = shufflevector <32 x i16> %16467, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16469 = shufflevector <8 x i16> %16423, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16470 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16469, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16471 = shufflevector <8 x i16> %16423, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16472 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16471, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16473 = shufflevector <8 x i16> %16429, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16474 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16473, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16475 = shufflevector <8 x i16> %16429, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16476 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16475, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16477 = shufflevector <8 x i16> %16435, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16478 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16477, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16479 = shufflevector <8 x i16> %16435, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16480 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16479, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16481 = shufflevector <8 x i16> %16441, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16482 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16481, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16483 = shufflevector <8 x i16> %16441, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16484 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16483, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16485 = shufflevector <8 x i16> %16447, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16486 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16485, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16487 = shufflevector <8 x i16> %16447, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16488 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16487, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16489 = shufflevector <8 x i16> %16453, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16490 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16489, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16491 = shufflevector <8 x i16> %16453, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16492 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16491, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16493 = shufflevector <8 x i16> %16459, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16494 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16493, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16495 = shufflevector <8 x i16> %16459, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16496 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16495, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16497 = shufflevector <8 x i16> %16465, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16498 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16497, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16499 = shufflevector <8 x i16> %16465, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16500 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16499, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16501 = shufflevector <4 x i32> %16470, <4 x i32> %16472, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16502 = shufflevector <4 x i32> %16474, <4 x i32> %16476, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16503 = shufflevector <4 x i32> %16478, <4 x i32> %16480, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16504 = shufflevector <4 x i32> %16482, <4 x i32> %16484, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16505 = shufflevector <4 x i32> %16486, <4 x i32> %16488, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16506 = shufflevector <4 x i32> %16490, <4 x i32> %16492, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16507 = shufflevector <4 x i32> %16494, <4 x i32> %16496, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16508 = shufflevector <4 x i32> %16498, <4 x i32> %16500, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16509 = shufflevector <8 x i32> %16501, <8 x i32> %16502, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16510 = shufflevector <8 x i32> %16503, <8 x i32> %16504, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16511 = shufflevector <8 x i32> %16505, <8 x i32> %16506, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16512 = shufflevector <8 x i32> %16507, <8 x i32> %16508, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16513 = shufflevector <16 x i32> %16509, <16 x i32> %16510, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16514 = shufflevector <16 x i32> %16511, <16 x i32> %16512, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16515 = shufflevector <32 x i32> %16513, <32 x i32> %16514, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %16516 = lshr <64 x i32> %16515, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %16517 = trunc <64 x i32> %16516 to <64 x i16>
  %16518 = shufflevector <64 x i16> %16517, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16519 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16518, <8 x i16> %16423)
  %16520 = shufflevector <64 x i16> %16517, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16521 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16520, <8 x i16> %16429)
  %16522 = shufflevector <64 x i16> %16517, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %16523 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16522, <8 x i16> %16435)
  %16524 = shufflevector <64 x i16> %16517, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16525 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16524, <8 x i16> %16441)
  %16526 = shufflevector <64 x i16> %16517, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %16527 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16526, <8 x i16> %16447)
  %16528 = shufflevector <64 x i16> %16517, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %16529 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16528, <8 x i16> %16453)
  %16530 = shufflevector <64 x i16> %16517, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %16531 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16530, <8 x i16> %16459)
  %16532 = shufflevector <64 x i16> %16517, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %16533 = shufflevector <64 x i16> %16468, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %16534 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16532, <8 x i16> %16533)
  %16535 = shufflevector <8 x i16> %16519, <8 x i16> %16521, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16536 = shufflevector <8 x i16> %16523, <8 x i16> %16525, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16537 = shufflevector <8 x i16> %16527, <8 x i16> %16529, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16538 = shufflevector <8 x i16> %16531, <8 x i16> %16534, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16539 = shufflevector <16 x i16> %16535, <16 x i16> %16536, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16540 = shufflevector <16 x i16> %16537, <16 x i16> %16538, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16541 = shufflevector <32 x i16> %16539, <32 x i16> %16540, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %16542 = lshr <64 x i16> %16541, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16543 = shufflevector <64 x i16> %16542, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16544 = add nsw i64 %16234, %16233
  %16545 = getelementptr inbounds i16, i16* %10111, i64 %16544
  %16546 = bitcast i16* %16545 to <8 x i16>*
  store <8 x i16> %16543, <8 x i16>* %16546, align 2, !tbaa !387
  %16547 = shufflevector <64 x i16> %16542, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16548 = getelementptr inbounds i16, i16* %16545, i64 8
  %16549 = bitcast i16* %16548 to <8 x i16>*
  store <8 x i16> %16547, <8 x i16>* %16549, align 2, !tbaa !387
  %16550 = shufflevector <64 x i16> %16542, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %16551 = getelementptr inbounds i16, i16* %16545, i64 16
  %16552 = bitcast i16* %16551 to <8 x i16>*
  store <8 x i16> %16550, <8 x i16>* %16552, align 2, !tbaa !387
  %16553 = shufflevector <64 x i16> %16542, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16554 = getelementptr inbounds i16, i16* %16545, i64 24
  %16555 = bitcast i16* %16554 to <8 x i16>*
  store <8 x i16> %16553, <8 x i16>* %16555, align 2, !tbaa !387
  %16556 = shufflevector <64 x i16> %16542, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %16557 = getelementptr inbounds i16, i16* %16545, i64 32
  %16558 = bitcast i16* %16557 to <8 x i16>*
  store <8 x i16> %16556, <8 x i16>* %16558, align 2, !tbaa !387
  %16559 = shufflevector <64 x i16> %16542, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %16560 = getelementptr inbounds i16, i16* %16545, i64 40
  %16561 = bitcast i16* %16560 to <8 x i16>*
  store <8 x i16> %16559, <8 x i16>* %16561, align 2, !tbaa !387
  %16562 = shufflevector <64 x i16> %16542, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %16563 = getelementptr inbounds i16, i16* %16545, i64 48
  %16564 = bitcast i16* %16563 to <8 x i16>*
  store <8 x i16> %16562, <8 x i16>* %16564, align 2, !tbaa !387
  %16565 = shufflevector <64 x i16> %16542, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %16566 = getelementptr inbounds i16, i16* %16545, i64 56
  %16567 = bitcast i16* %16566 to <8 x i16>*
  store <8 x i16> %16565, <8 x i16>* %16567, align 2, !tbaa !387
  %indvars.iv.next185 = add nuw nsw i64 %indvars.iv184, 1
  %.not120 = icmp eq i64 %indvars.iv.next185, %10115
  br i1 %.not120, label %"end for blur_y.s0.x.x76", label %"for blur_y.s0.x.x75"

"end for blur_y.s0.x.x76":                        ; preds = %"for blur_y.s0.x.x75", %"consume blur_x73"
  br i1 %10112, label %"for blur_y.s0.x.x80.preheader", label %after_bb70, !prof !381

"for blur_y.s0.x.x80.preheader":                  ; preds = %"end for blur_y.s0.x.x76"
  %16568 = add i64 %10128, 3
  %16569 = and i64 %16568, 7
  %narrow = add nuw nsw i64 %16569, 1
  %16570 = mul nsw i64 %narrow, %10105
  %16571 = getelementptr inbounds i16, i16* %blur_x47, i64 %16570
  %16572 = getelementptr inbounds i16, i16* %16571, i64 -64
  %16573 = bitcast i16* %16572 to <8 x i16>*
  %16574 = load <8 x i16>, <8 x i16>* %16573, align 2, !tbaa !385
  %16575 = getelementptr inbounds i16, i16* %16571, i64 -56
  %16576 = bitcast i16* %16575 to <8 x i16>*
  %16577 = load <8 x i16>, <8 x i16>* %16576, align 2, !tbaa !385
  %16578 = getelementptr inbounds i16, i16* %16571, i64 -48
  %16579 = bitcast i16* %16578 to <8 x i16>*
  %16580 = load <8 x i16>, <8 x i16>* %16579, align 2, !tbaa !385
  %16581 = getelementptr inbounds i16, i16* %16571, i64 -40
  %16582 = bitcast i16* %16581 to <8 x i16>*
  %16583 = load <8 x i16>, <8 x i16>* %16582, align 2, !tbaa !385
  %16584 = getelementptr inbounds i16, i16* %16571, i64 -32
  %16585 = bitcast i16* %16584 to <8 x i16>*
  %16586 = load <8 x i16>, <8 x i16>* %16585, align 2, !tbaa !385
  %16587 = getelementptr inbounds i16, i16* %16571, i64 -24
  %16588 = bitcast i16* %16587 to <8 x i16>*
  %16589 = load <8 x i16>, <8 x i16>* %16588, align 2, !tbaa !385
  %16590 = getelementptr inbounds i16, i16* %16571, i64 -16
  %16591 = bitcast i16* %16590 to <8 x i16>*
  %16592 = load <8 x i16>, <8 x i16>* %16591, align 2, !tbaa !385
  %16593 = getelementptr inbounds i16, i16* %16571, i64 -8
  %16594 = bitcast i16* %16593 to <8 x i16>*
  %16595 = load <8 x i16>, <8 x i16>* %16594, align 2, !tbaa !385
  %16596 = add i64 %10128, 2
  %16597 = and i64 %16596, 7
  %narrow113 = add nuw nsw i64 %16597, 1
  %16598 = mul nsw i64 %narrow113, %10105
  %16599 = getelementptr inbounds i16, i16* %blur_x47, i64 %16598
  %16600 = getelementptr inbounds i16, i16* %16599, i64 -64
  %16601 = bitcast i16* %16600 to <8 x i16>*
  %16602 = load <8 x i16>, <8 x i16>* %16601, align 2, !tbaa !385
  %16603 = getelementptr inbounds i16, i16* %16599, i64 -56
  %16604 = bitcast i16* %16603 to <8 x i16>*
  %16605 = load <8 x i16>, <8 x i16>* %16604, align 2, !tbaa !385
  %16606 = getelementptr inbounds i16, i16* %16599, i64 -48
  %16607 = bitcast i16* %16606 to <8 x i16>*
  %16608 = load <8 x i16>, <8 x i16>* %16607, align 2, !tbaa !385
  %16609 = getelementptr inbounds i16, i16* %16599, i64 -40
  %16610 = bitcast i16* %16609 to <8 x i16>*
  %16611 = load <8 x i16>, <8 x i16>* %16610, align 2, !tbaa !385
  %16612 = getelementptr inbounds i16, i16* %16599, i64 -32
  %16613 = bitcast i16* %16612 to <8 x i16>*
  %16614 = load <8 x i16>, <8 x i16>* %16613, align 2, !tbaa !385
  %16615 = getelementptr inbounds i16, i16* %16599, i64 -24
  %16616 = bitcast i16* %16615 to <8 x i16>*
  %16617 = load <8 x i16>, <8 x i16>* %16616, align 2, !tbaa !385
  %16618 = getelementptr inbounds i16, i16* %16599, i64 -16
  %16619 = bitcast i16* %16618 to <8 x i16>*
  %16620 = load <8 x i16>, <8 x i16>* %16619, align 2, !tbaa !385
  %16621 = getelementptr inbounds i16, i16* %16599, i64 -8
  %16622 = bitcast i16* %16621 to <8 x i16>*
  %16623 = load <8 x i16>, <8 x i16>* %16622, align 2, !tbaa !385
  %16624 = add i64 %10128, 4
  %16625 = and i64 %16624, 7
  %narrow114 = add nuw nsw i64 %16625, 1
  %16626 = mul nsw i64 %narrow114, %10105
  %16627 = getelementptr inbounds i16, i16* %blur_x47, i64 %16626
  %16628 = getelementptr inbounds i16, i16* %16627, i64 -64
  %16629 = bitcast i16* %16628 to <8 x i16>*
  %16630 = load <8 x i16>, <8 x i16>* %16629, align 2, !tbaa !385
  %16631 = getelementptr inbounds i16, i16* %16627, i64 -56
  %16632 = bitcast i16* %16631 to <8 x i16>*
  %16633 = load <8 x i16>, <8 x i16>* %16632, align 2, !tbaa !385
  %16634 = getelementptr inbounds i16, i16* %16627, i64 -48
  %16635 = bitcast i16* %16634 to <8 x i16>*
  %16636 = load <8 x i16>, <8 x i16>* %16635, align 2, !tbaa !385
  %16637 = getelementptr inbounds i16, i16* %16627, i64 -40
  %16638 = bitcast i16* %16637 to <8 x i16>*
  %16639 = load <8 x i16>, <8 x i16>* %16638, align 2, !tbaa !385
  %16640 = getelementptr inbounds i16, i16* %16627, i64 -32
  %16641 = bitcast i16* %16640 to <8 x i16>*
  %16642 = load <8 x i16>, <8 x i16>* %16641, align 2, !tbaa !385
  %16643 = getelementptr inbounds i16, i16* %16627, i64 -24
  %16644 = bitcast i16* %16643 to <8 x i16>*
  %16645 = load <8 x i16>, <8 x i16>* %16644, align 2, !tbaa !385
  %16646 = getelementptr inbounds i16, i16* %16627, i64 -16
  %16647 = bitcast i16* %16646 to <8 x i16>*
  %16648 = load <8 x i16>, <8 x i16>* %16647, align 2, !tbaa !385
  %16649 = getelementptr inbounds i16, i16* %16627, i64 -8
  %16650 = bitcast i16* %16649 to <8 x i16>*
  %16651 = load <8 x i16>, <8 x i16>* %16650, align 2, !tbaa !385
  %16652 = add i64 %10128, 5
  %16653 = and i64 %16652, 7
  %narrow115 = add nuw nsw i64 %16653, 1
  %16654 = mul nsw i64 %narrow115, %10105
  %16655 = getelementptr inbounds i16, i16* %blur_x47, i64 %16654
  %16656 = getelementptr inbounds i16, i16* %16655, i64 -64
  %16657 = bitcast i16* %16656 to <8 x i16>*
  %16658 = load <8 x i16>, <8 x i16>* %16657, align 2, !tbaa !385
  %16659 = getelementptr inbounds i16, i16* %16655, i64 -56
  %16660 = bitcast i16* %16659 to <8 x i16>*
  %16661 = load <8 x i16>, <8 x i16>* %16660, align 2, !tbaa !385
  %16662 = getelementptr inbounds i16, i16* %16655, i64 -48
  %16663 = bitcast i16* %16662 to <8 x i16>*
  %16664 = load <8 x i16>, <8 x i16>* %16663, align 2, !tbaa !385
  %16665 = getelementptr inbounds i16, i16* %16655, i64 -40
  %16666 = bitcast i16* %16665 to <8 x i16>*
  %16667 = load <8 x i16>, <8 x i16>* %16666, align 2, !tbaa !385
  %16668 = getelementptr inbounds i16, i16* %16655, i64 -32
  %16669 = bitcast i16* %16668 to <8 x i16>*
  %16670 = load <8 x i16>, <8 x i16>* %16669, align 2, !tbaa !385
  %16671 = getelementptr inbounds i16, i16* %16655, i64 -24
  %16672 = bitcast i16* %16671 to <8 x i16>*
  %16673 = load <8 x i16>, <8 x i16>* %16672, align 2, !tbaa !385
  %16674 = getelementptr inbounds i16, i16* %16655, i64 -16
  %16675 = bitcast i16* %16674 to <8 x i16>*
  %16676 = load <8 x i16>, <8 x i16>* %16675, align 2, !tbaa !385
  %16677 = getelementptr inbounds i16, i16* %16655, i64 -8
  %16678 = bitcast i16* %16677 to <8 x i16>*
  %16679 = load <8 x i16>, <8 x i16>* %16678, align 2, !tbaa !385
  %16680 = add i64 %10128, 6
  %16681 = and i64 %16680, 7
  %narrow116 = add nuw nsw i64 %16681, 1
  %16682 = mul nsw i64 %narrow116, %10105
  %16683 = getelementptr inbounds i16, i16* %blur_x47, i64 %16682
  %16684 = getelementptr inbounds i16, i16* %16683, i64 -64
  %16685 = bitcast i16* %16684 to <8 x i16>*
  %16686 = load <8 x i16>, <8 x i16>* %16685, align 2, !tbaa !385
  %16687 = getelementptr inbounds i16, i16* %16683, i64 -56
  %16688 = bitcast i16* %16687 to <8 x i16>*
  %16689 = load <8 x i16>, <8 x i16>* %16688, align 2, !tbaa !385
  %16690 = getelementptr inbounds i16, i16* %16683, i64 -48
  %16691 = bitcast i16* %16690 to <8 x i16>*
  %16692 = load <8 x i16>, <8 x i16>* %16691, align 2, !tbaa !385
  %16693 = getelementptr inbounds i16, i16* %16683, i64 -40
  %16694 = bitcast i16* %16693 to <8 x i16>*
  %16695 = load <8 x i16>, <8 x i16>* %16694, align 2, !tbaa !385
  %16696 = getelementptr inbounds i16, i16* %16683, i64 -32
  %16697 = bitcast i16* %16696 to <8 x i16>*
  %16698 = load <8 x i16>, <8 x i16>* %16697, align 2, !tbaa !385
  %16699 = getelementptr inbounds i16, i16* %16683, i64 -24
  %16700 = bitcast i16* %16699 to <8 x i16>*
  %16701 = load <8 x i16>, <8 x i16>* %16700, align 2, !tbaa !385
  %16702 = getelementptr inbounds i16, i16* %16683, i64 -16
  %16703 = bitcast i16* %16702 to <8 x i16>*
  %16704 = load <8 x i16>, <8 x i16>* %16703, align 2, !tbaa !385
  %16705 = getelementptr inbounds i16, i16* %16683, i64 -8
  %16706 = bitcast i16* %16705 to <8 x i16>*
  %16707 = load <8 x i16>, <8 x i16>* %16706, align 2, !tbaa !385
  %16708 = and i64 %10128, 7
  %narrow117 = add nuw nsw i64 %16708, 1
  %16709 = mul nsw i64 %narrow117, %10105
  %16710 = getelementptr inbounds i16, i16* %blur_x47, i64 %16709
  %16711 = getelementptr inbounds i16, i16* %16710, i64 -64
  %16712 = bitcast i16* %16711 to <8 x i16>*
  %16713 = load <8 x i16>, <8 x i16>* %16712, align 2, !tbaa !385
  %16714 = getelementptr inbounds i16, i16* %16710, i64 -56
  %16715 = bitcast i16* %16714 to <8 x i16>*
  %16716 = load <8 x i16>, <8 x i16>* %16715, align 2, !tbaa !385
  %16717 = getelementptr inbounds i16, i16* %16710, i64 -48
  %16718 = bitcast i16* %16717 to <8 x i16>*
  %16719 = load <8 x i16>, <8 x i16>* %16718, align 2, !tbaa !385
  %16720 = getelementptr inbounds i16, i16* %16710, i64 -40
  %16721 = bitcast i16* %16720 to <8 x i16>*
  %16722 = load <8 x i16>, <8 x i16>* %16721, align 2, !tbaa !385
  %16723 = getelementptr inbounds i16, i16* %16710, i64 -32
  %16724 = bitcast i16* %16723 to <8 x i16>*
  %16725 = load <8 x i16>, <8 x i16>* %16724, align 2, !tbaa !385
  %16726 = getelementptr inbounds i16, i16* %16710, i64 -24
  %16727 = bitcast i16* %16726 to <8 x i16>*
  %16728 = load <8 x i16>, <8 x i16>* %16727, align 2, !tbaa !385
  %16729 = getelementptr inbounds i16, i16* %16710, i64 -16
  %16730 = bitcast i16* %16729 to <8 x i16>*
  %16731 = load <8 x i16>, <8 x i16>* %16730, align 2, !tbaa !385
  %16732 = getelementptr inbounds i16, i16* %16710, i64 -8
  %16733 = bitcast i16* %16732 to <8 x i16>*
  %16734 = load <8 x i16>, <8 x i16>* %16733, align 2, !tbaa !385
  %16735 = add i64 %10128, 7
  %16736 = and i64 %16735, 7
  %narrow118 = add nuw nsw i64 %16736, 1
  %16737 = mul nsw i64 %narrow118, %10105
  %16738 = getelementptr inbounds i16, i16* %blur_x47, i64 %16737
  %16739 = getelementptr inbounds i16, i16* %16738, i64 -64
  %16740 = bitcast i16* %16739 to <8 x i16>*
  %16741 = load <8 x i16>, <8 x i16>* %16740, align 2, !tbaa !385
  %16742 = getelementptr inbounds i16, i16* %16738, i64 -56
  %16743 = bitcast i16* %16742 to <8 x i16>*
  %16744 = load <8 x i16>, <8 x i16>* %16743, align 2, !tbaa !385
  %16745 = getelementptr inbounds i16, i16* %16738, i64 -48
  %16746 = bitcast i16* %16745 to <8 x i16>*
  %16747 = load <8 x i16>, <8 x i16>* %16746, align 2, !tbaa !385
  %16748 = getelementptr inbounds i16, i16* %16738, i64 -40
  %16749 = bitcast i16* %16748 to <8 x i16>*
  %16750 = load <8 x i16>, <8 x i16>* %16749, align 2, !tbaa !385
  %16751 = getelementptr inbounds i16, i16* %16738, i64 -32
  %16752 = bitcast i16* %16751 to <8 x i16>*
  %16753 = load <8 x i16>, <8 x i16>* %16752, align 2, !tbaa !385
  %16754 = getelementptr inbounds i16, i16* %16738, i64 -24
  %16755 = bitcast i16* %16754 to <8 x i16>*
  %16756 = load <8 x i16>, <8 x i16>* %16755, align 2, !tbaa !385
  %16757 = getelementptr inbounds i16, i16* %16738, i64 -16
  %16758 = bitcast i16* %16757 to <8 x i16>*
  %16759 = load <8 x i16>, <8 x i16>* %16758, align 2, !tbaa !385
  %16760 = getelementptr inbounds i16, i16* %16738, i64 -8
  %16761 = bitcast i16* %16760 to <8 x i16>*
  %16762 = load <8 x i16>, <8 x i16>* %16761, align 2, !tbaa !385
  %16763 = add <8 x i16> %16602, %16574
  %16764 = add <8 x i16> %16763, %16630
  %16765 = add <8 x i16> %16764, %16658
  %16766 = add <8 x i16> %16765, %16686
  %16767 = add <8 x i16> %16766, %16713
  %16768 = add <8 x i16> %16767, %16741
  %16769 = add <8 x i16> %16605, %16577
  %16770 = add <8 x i16> %16769, %16633
  %16771 = add <8 x i16> %16770, %16661
  %16772 = add <8 x i16> %16771, %16689
  %16773 = add <8 x i16> %16772, %16716
  %16774 = add <8 x i16> %16773, %16744
  %16775 = add <8 x i16> %16608, %16580
  %16776 = add <8 x i16> %16775, %16636
  %16777 = add <8 x i16> %16776, %16664
  %16778 = add <8 x i16> %16777, %16692
  %16779 = add <8 x i16> %16778, %16719
  %16780 = add <8 x i16> %16779, %16747
  %16781 = add <8 x i16> %16611, %16583
  %16782 = add <8 x i16> %16781, %16639
  %16783 = add <8 x i16> %16782, %16667
  %16784 = add <8 x i16> %16783, %16695
  %16785 = add <8 x i16> %16784, %16722
  %16786 = add <8 x i16> %16785, %16750
  %16787 = add <8 x i16> %16614, %16586
  %16788 = add <8 x i16> %16787, %16642
  %16789 = add <8 x i16> %16788, %16670
  %16790 = add <8 x i16> %16789, %16698
  %16791 = add <8 x i16> %16790, %16725
  %16792 = add <8 x i16> %16791, %16753
  %16793 = add <8 x i16> %16617, %16589
  %16794 = add <8 x i16> %16793, %16645
  %16795 = add <8 x i16> %16794, %16673
  %16796 = add <8 x i16> %16795, %16701
  %16797 = add <8 x i16> %16796, %16728
  %16798 = add <8 x i16> %16797, %16756
  %16799 = add <8 x i16> %16620, %16592
  %16800 = add <8 x i16> %16799, %16648
  %16801 = add <8 x i16> %16800, %16676
  %16802 = add <8 x i16> %16801, %16704
  %16803 = add <8 x i16> %16802, %16731
  %16804 = add <8 x i16> %16803, %16759
  %16805 = add <8 x i16> %16623, %16595
  %16806 = add <8 x i16> %16805, %16651
  %16807 = add <8 x i16> %16806, %16679
  %16808 = add <8 x i16> %16807, %16707
  %16809 = add <8 x i16> %16808, %16734
  %16810 = add <8 x i16> %16809, %16762
  %16811 = shufflevector <8 x i16> %16810, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16812 = shufflevector <16 x i16> %16811, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16813 = shufflevector <32 x i16> %16812, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16814 = shufflevector <8 x i16> %16768, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16815 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16814, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16816 = shufflevector <8 x i16> %16768, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16817 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16816, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16818 = shufflevector <8 x i16> %16774, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16819 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16818, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16820 = shufflevector <8 x i16> %16774, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16821 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16820, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16822 = shufflevector <8 x i16> %16780, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16823 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16822, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16824 = shufflevector <8 x i16> %16780, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16825 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16824, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16826 = shufflevector <8 x i16> %16786, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16827 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16826, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16828 = shufflevector <8 x i16> %16786, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16829 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16828, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16830 = shufflevector <8 x i16> %16792, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16831 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16830, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16832 = shufflevector <8 x i16> %16792, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16833 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16832, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16834 = shufflevector <8 x i16> %16798, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16835 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16834, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16836 = shufflevector <8 x i16> %16798, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16837 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16836, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16838 = shufflevector <8 x i16> %16804, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16839 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16838, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16840 = shufflevector <8 x i16> %16804, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16841 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16840, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16842 = shufflevector <8 x i16> %16810, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16843 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16842, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16844 = shufflevector <8 x i16> %16810, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16845 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %16844, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %16846 = shufflevector <4 x i32> %16815, <4 x i32> %16817, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16847 = shufflevector <4 x i32> %16819, <4 x i32> %16821, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16848 = shufflevector <4 x i32> %16823, <4 x i32> %16825, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16849 = shufflevector <4 x i32> %16827, <4 x i32> %16829, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16850 = shufflevector <4 x i32> %16831, <4 x i32> %16833, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16851 = shufflevector <4 x i32> %16835, <4 x i32> %16837, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16852 = shufflevector <4 x i32> %16839, <4 x i32> %16841, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16853 = shufflevector <4 x i32> %16843, <4 x i32> %16845, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16854 = shufflevector <8 x i32> %16846, <8 x i32> %16847, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16855 = shufflevector <8 x i32> %16848, <8 x i32> %16849, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16856 = shufflevector <8 x i32> %16850, <8 x i32> %16851, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16857 = shufflevector <8 x i32> %16852, <8 x i32> %16853, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16858 = shufflevector <16 x i32> %16854, <16 x i32> %16855, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16859 = shufflevector <16 x i32> %16856, <16 x i32> %16857, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16860 = shufflevector <32 x i32> %16858, <32 x i32> %16859, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %16861 = lshr <64 x i32> %16860, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %16862 = trunc <64 x i32> %16861 to <64 x i16>
  %16863 = shufflevector <64 x i16> %16862, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16864 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16863, <8 x i16> %16768)
  %16865 = shufflevector <64 x i16> %16862, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16866 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16865, <8 x i16> %16774)
  %16867 = shufflevector <64 x i16> %16862, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %16868 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16867, <8 x i16> %16780)
  %16869 = shufflevector <64 x i16> %16862, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16870 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16869, <8 x i16> %16786)
  %16871 = shufflevector <64 x i16> %16862, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %16872 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16871, <8 x i16> %16792)
  %16873 = shufflevector <64 x i16> %16862, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %16874 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16873, <8 x i16> %16798)
  %16875 = shufflevector <64 x i16> %16862, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %16876 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16875, <8 x i16> %16804)
  %16877 = shufflevector <64 x i16> %16862, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %16878 = shufflevector <64 x i16> %16813, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %16879 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16877, <8 x i16> %16878)
  %16880 = shufflevector <8 x i16> %16864, <8 x i16> %16866, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16881 = shufflevector <8 x i16> %16868, <8 x i16> %16870, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16882 = shufflevector <8 x i16> %16872, <8 x i16> %16874, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16883 = shufflevector <8 x i16> %16876, <8 x i16> %16879, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16884 = shufflevector <16 x i16> %16880, <16 x i16> %16881, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16885 = shufflevector <16 x i16> %16882, <16 x i16> %16883, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16886 = shufflevector <32 x i16> %16884, <32 x i16> %16885, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %16887 = lshr <64 x i16> %16886, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16888 = add nsw i64 %10128, -6
  %16889 = mul nsw i64 %16888, %10110
  %16890 = add nsw i64 %16889, %10113
  %16891 = getelementptr inbounds i16, i16* %10111, i64 %16890
  %16892 = getelementptr inbounds i16, i16* %16891, i64 -64
  %16893 = bitcast i16* %16892 to <8 x i16>*
  %16894 = getelementptr inbounds i16, i16* %16891, i64 -56
  %16895 = bitcast i16* %16894 to <8 x i16>*
  %16896 = getelementptr inbounds i16, i16* %16891, i64 -48
  %16897 = bitcast i16* %16896 to <8 x i16>*
  %16898 = getelementptr inbounds i16, i16* %16891, i64 -40
  %16899 = bitcast i16* %16898 to <8 x i16>*
  %16900 = getelementptr inbounds i16, i16* %16891, i64 -32
  %16901 = bitcast i16* %16900 to <8 x i16>*
  %16902 = getelementptr inbounds i16, i16* %16891, i64 -24
  %16903 = bitcast i16* %16902 to <8 x i16>*
  %16904 = getelementptr inbounds i16, i16* %16891, i64 -16
  %16905 = bitcast i16* %16904 to <8 x i16>*
  %16906 = getelementptr inbounds i16, i16* %16891, i64 -8
  %16907 = shufflevector <64 x i16> %16887, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16908 = shufflevector <64 x i16> %16887, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16909 = shufflevector <64 x i16> %16887, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %16910 = shufflevector <64 x i16> %16887, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16911 = shufflevector <64 x i16> %16887, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %16912 = shufflevector <64 x i16> %16887, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %16913 = shufflevector <64 x i16> %16887, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %16914 = shufflevector <64 x i16> %16887, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %16915 = bitcast i16* %16906 to <8 x i16>*
  store <8 x i16> %16907, <8 x i16>* %16893, align 2, !tbaa !387
  store <8 x i16> %16908, <8 x i16>* %16895, align 2, !tbaa !387
  store <8 x i16> %16909, <8 x i16>* %16897, align 2, !tbaa !387
  store <8 x i16> %16910, <8 x i16>* %16899, align 2, !tbaa !387
  store <8 x i16> %16911, <8 x i16>* %16901, align 2, !tbaa !387
  store <8 x i16> %16912, <8 x i16>* %16903, align 2, !tbaa !387
  store <8 x i16> %16913, <8 x i16>* %16905, align 2, !tbaa !387
  store <8 x i16> %16914, <8 x i16>* %16915, align 2, !tbaa !387
  br label %after_bb70

"for blur_y.s0.y.yi.$n.rebased85":                ; preds = %next_bb45, %after_bb96
  %indvars.iv178 = phi i64 [ 0, %next_bb45 ], [ %indvars.iv.next179, %after_bb96 ]
  %16916 = add nsw i64 %indvars.iv178, %10126
  %16917 = add nsw i64 %16916, 1
  %16918 = icmp slt i64 %16917, %10127
  %16919 = trunc i64 %16917 to i32
  %a28 = select i1 %16918, i32 %16919, i32 %b28
  %16920 = trunc i64 %16916 to i32
  %16921 = and i32 %16920, 7
  br i1 %10117, label %"for blur_x.s0.x.x91.preheader", label %"end for blur_x.s0.x.x92", !prof !381

"for blur_x.s0.x.x91.preheader":                  ; preds = %"for blur_y.s0.y.yi.$n.rebased85"
  %16922 = mul nsw i32 %16921, %a25
  %t28790 = sub nsw i32 %16922, %t27441
  %16923 = icmp sgt i32 %a28, 1
  %16924 = select i1 %16923, i32 %a28, i32 1
  %16925 = add nsw i32 %16924, -1
  %16926 = mul nsw i32 %16925, %input.stride.135
  %16927 = insertelement <64 x i32> undef, i32 %16926, i32 0
  %t25795 = shufflevector <64 x i32> %16927, <64 x i32> undef, <64 x i32> zeroinitializer
  %16928 = sext i32 %t28790 to i64
  br label %"for blur_x.s0.x.x91"

"end for blur_y.s0.y.yi.$n.rebased86":            ; preds = %after_bb96
  %tobool.not.i150.not = icmp eq i8* %44, null
  br i1 %tobool.not.i150.not, label %after_bb43, label %if.then.i151

if.then.i151:                                     ; preds = %"end for blur_y.s0.y.yi.$n.rebased86"
  tail call void @halide_free(i8* %__user_context, i8* nonnull %44) #13
  br label %after_bb43

"for blur_x.s0.x.x91":                            ; preds = %"for blur_x.s0.x.x91.preheader", %"for blur_x.s0.x.x91"
  %blur_x.s0.x.x93 = phi i32 [ %19795, %"for blur_x.s0.x.x91" ], [ 0, %"for blur_x.s0.x.x91.preheader" ]
  %16929 = shl nsw i32 %blur_x.s0.x.x93, 6
  %a27 = add nsw i32 %16929, %t27441
  %16930 = icmp slt i32 %a27, %b29
  %blur_x.s0.x.v1.base.s94 = select i1 %16930, i32 %a27, i32 %b29
  %16931 = add nsw i32 %blur_x.s0.x.v1.base.s94, -63
  %16932 = insertelement <64 x i32> undef, i32 %16931, i32 0
  %16933 = shufflevector <64 x i32> %16932, <64 x i32> undef, <64 x i32> zeroinitializer
  %16934 = add nsw <64 x i32> %16933, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %16935 = shufflevector <64 x i32> %16934, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16936 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16935, <4 x i32> %10120)
  %16937 = shufflevector <64 x i32> %16934, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16938 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16937, <4 x i32> %10120)
  %16939 = shufflevector <64 x i32> %16934, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %16940 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16939, <4 x i32> %10120)
  %16941 = shufflevector <64 x i32> %16934, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %16942 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16941, <4 x i32> %10120)
  %16943 = shufflevector <64 x i32> %16934, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %16944 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16943, <4 x i32> %10120)
  %16945 = shufflevector <64 x i32> %16934, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %16946 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16945, <4 x i32> %10120)
  %16947 = shufflevector <64 x i32> %16934, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %16948 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16947, <4 x i32> %10120)
  %16949 = shufflevector <64 x i32> %16934, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %16950 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16949, <4 x i32> %10120)
  %16951 = shufflevector <64 x i32> %16934, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %16952 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16951, <4 x i32> %10120)
  %16953 = shufflevector <64 x i32> %16934, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %16954 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16953, <4 x i32> %10120)
  %16955 = shufflevector <64 x i32> %16934, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %16956 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16955, <4 x i32> %10120)
  %16957 = shufflevector <64 x i32> %16934, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %16958 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16957, <4 x i32> %10120)
  %16959 = shufflevector <64 x i32> %16934, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %16960 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16959, <4 x i32> %10120)
  %16961 = shufflevector <64 x i32> %16934, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %16962 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16961, <4 x i32> %10120)
  %16963 = shufflevector <64 x i32> %16934, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %16964 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16963, <4 x i32> %10120)
  %16965 = shufflevector <64 x i32> %16934, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %16966 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16965, <4 x i32> %10120)
  %16967 = shufflevector <4 x i32> %16966, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %16968 = shufflevector <8 x i32> %16967, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %16969 = shufflevector <16 x i32> %16968, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %16970 = shufflevector <32 x i32> %16969, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %16971 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16936, <4 x i32> zeroinitializer)
  %16972 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16938, <4 x i32> zeroinitializer)
  %16973 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16940, <4 x i32> zeroinitializer)
  %16974 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16942, <4 x i32> zeroinitializer)
  %16975 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16944, <4 x i32> zeroinitializer)
  %16976 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16946, <4 x i32> zeroinitializer)
  %16977 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16948, <4 x i32> zeroinitializer)
  %16978 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16950, <4 x i32> zeroinitializer)
  %16979 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16952, <4 x i32> zeroinitializer)
  %16980 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16954, <4 x i32> zeroinitializer)
  %16981 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16956, <4 x i32> zeroinitializer)
  %16982 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16958, <4 x i32> zeroinitializer)
  %16983 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16960, <4 x i32> zeroinitializer)
  %16984 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16962, <4 x i32> zeroinitializer)
  %16985 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16964, <4 x i32> zeroinitializer)
  %16986 = shufflevector <64 x i32> %16970, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %16987 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16986, <4 x i32> zeroinitializer)
  %16988 = shufflevector <4 x i32> %16971, <4 x i32> %16972, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16989 = shufflevector <4 x i32> %16973, <4 x i32> %16974, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16990 = shufflevector <4 x i32> %16975, <4 x i32> %16976, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16991 = shufflevector <4 x i32> %16977, <4 x i32> %16978, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16992 = shufflevector <4 x i32> %16979, <4 x i32> %16980, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16993 = shufflevector <4 x i32> %16981, <4 x i32> %16982, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16994 = shufflevector <4 x i32> %16983, <4 x i32> %16984, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16995 = shufflevector <4 x i32> %16985, <4 x i32> %16987, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16996 = shufflevector <8 x i32> %16988, <8 x i32> %16989, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16997 = shufflevector <8 x i32> %16990, <8 x i32> %16991, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16998 = shufflevector <8 x i32> %16992, <8 x i32> %16993, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16999 = shufflevector <8 x i32> %16994, <8 x i32> %16995, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17000 = shufflevector <16 x i32> %16996, <16 x i32> %16997, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17001 = shufflevector <16 x i32> %16998, <16 x i32> %16999, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17002 = shufflevector <32 x i32> %17000, <32 x i32> %17001, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %17003 = add nsw <64 x i32> %17002, %t25795
  %17004 = extractelement <64 x i32> %17003, i32 0
  %17005 = sext i32 %17004 to i64
  %17006 = getelementptr inbounds i16, i16* %10121, i64 %17005
  %17007 = load i16, i16* %17006, align 2, !tbaa !382
  %17008 = insertelement <64 x i16> undef, i16 %17007, i32 0
  %17009 = extractelement <64 x i32> %17003, i32 1
  %17010 = sext i32 %17009 to i64
  %17011 = getelementptr inbounds i16, i16* %10121, i64 %17010
  %17012 = load i16, i16* %17011, align 2, !tbaa !382
  %17013 = insertelement <64 x i16> %17008, i16 %17012, i32 1
  %17014 = extractelement <64 x i32> %17003, i32 2
  %17015 = sext i32 %17014 to i64
  %17016 = getelementptr inbounds i16, i16* %10121, i64 %17015
  %17017 = load i16, i16* %17016, align 2, !tbaa !382
  %17018 = insertelement <64 x i16> %17013, i16 %17017, i32 2
  %17019 = extractelement <64 x i32> %17003, i32 3
  %17020 = sext i32 %17019 to i64
  %17021 = getelementptr inbounds i16, i16* %10121, i64 %17020
  %17022 = load i16, i16* %17021, align 2, !tbaa !382
  %17023 = insertelement <64 x i16> %17018, i16 %17022, i32 3
  %17024 = extractelement <64 x i32> %17003, i32 4
  %17025 = sext i32 %17024 to i64
  %17026 = getelementptr inbounds i16, i16* %10121, i64 %17025
  %17027 = load i16, i16* %17026, align 2, !tbaa !382
  %17028 = insertelement <64 x i16> %17023, i16 %17027, i32 4
  %17029 = extractelement <64 x i32> %17003, i32 5
  %17030 = sext i32 %17029 to i64
  %17031 = getelementptr inbounds i16, i16* %10121, i64 %17030
  %17032 = load i16, i16* %17031, align 2, !tbaa !382
  %17033 = insertelement <64 x i16> %17028, i16 %17032, i32 5
  %17034 = extractelement <64 x i32> %17003, i32 6
  %17035 = sext i32 %17034 to i64
  %17036 = getelementptr inbounds i16, i16* %10121, i64 %17035
  %17037 = load i16, i16* %17036, align 2, !tbaa !382
  %17038 = insertelement <64 x i16> %17033, i16 %17037, i32 6
  %17039 = extractelement <64 x i32> %17003, i32 7
  %17040 = sext i32 %17039 to i64
  %17041 = getelementptr inbounds i16, i16* %10121, i64 %17040
  %17042 = load i16, i16* %17041, align 2, !tbaa !382
  %17043 = insertelement <64 x i16> %17038, i16 %17042, i32 7
  %17044 = extractelement <64 x i32> %17003, i32 8
  %17045 = sext i32 %17044 to i64
  %17046 = getelementptr inbounds i16, i16* %10121, i64 %17045
  %17047 = load i16, i16* %17046, align 2, !tbaa !382
  %17048 = insertelement <64 x i16> %17043, i16 %17047, i32 8
  %17049 = extractelement <64 x i32> %17003, i32 9
  %17050 = sext i32 %17049 to i64
  %17051 = getelementptr inbounds i16, i16* %10121, i64 %17050
  %17052 = load i16, i16* %17051, align 2, !tbaa !382
  %17053 = insertelement <64 x i16> %17048, i16 %17052, i32 9
  %17054 = extractelement <64 x i32> %17003, i32 10
  %17055 = sext i32 %17054 to i64
  %17056 = getelementptr inbounds i16, i16* %10121, i64 %17055
  %17057 = load i16, i16* %17056, align 2, !tbaa !382
  %17058 = insertelement <64 x i16> %17053, i16 %17057, i32 10
  %17059 = extractelement <64 x i32> %17003, i32 11
  %17060 = sext i32 %17059 to i64
  %17061 = getelementptr inbounds i16, i16* %10121, i64 %17060
  %17062 = load i16, i16* %17061, align 2, !tbaa !382
  %17063 = insertelement <64 x i16> %17058, i16 %17062, i32 11
  %17064 = extractelement <64 x i32> %17003, i32 12
  %17065 = sext i32 %17064 to i64
  %17066 = getelementptr inbounds i16, i16* %10121, i64 %17065
  %17067 = load i16, i16* %17066, align 2, !tbaa !382
  %17068 = insertelement <64 x i16> %17063, i16 %17067, i32 12
  %17069 = extractelement <64 x i32> %17003, i32 13
  %17070 = sext i32 %17069 to i64
  %17071 = getelementptr inbounds i16, i16* %10121, i64 %17070
  %17072 = load i16, i16* %17071, align 2, !tbaa !382
  %17073 = insertelement <64 x i16> %17068, i16 %17072, i32 13
  %17074 = extractelement <64 x i32> %17003, i32 14
  %17075 = sext i32 %17074 to i64
  %17076 = getelementptr inbounds i16, i16* %10121, i64 %17075
  %17077 = load i16, i16* %17076, align 2, !tbaa !382
  %17078 = insertelement <64 x i16> %17073, i16 %17077, i32 14
  %17079 = extractelement <64 x i32> %17003, i32 15
  %17080 = sext i32 %17079 to i64
  %17081 = getelementptr inbounds i16, i16* %10121, i64 %17080
  %17082 = load i16, i16* %17081, align 2, !tbaa !382
  %17083 = insertelement <64 x i16> %17078, i16 %17082, i32 15
  %17084 = extractelement <64 x i32> %17003, i32 16
  %17085 = sext i32 %17084 to i64
  %17086 = getelementptr inbounds i16, i16* %10121, i64 %17085
  %17087 = load i16, i16* %17086, align 2, !tbaa !382
  %17088 = insertelement <64 x i16> %17083, i16 %17087, i32 16
  %17089 = extractelement <64 x i32> %17003, i32 17
  %17090 = sext i32 %17089 to i64
  %17091 = getelementptr inbounds i16, i16* %10121, i64 %17090
  %17092 = load i16, i16* %17091, align 2, !tbaa !382
  %17093 = insertelement <64 x i16> %17088, i16 %17092, i32 17
  %17094 = extractelement <64 x i32> %17003, i32 18
  %17095 = sext i32 %17094 to i64
  %17096 = getelementptr inbounds i16, i16* %10121, i64 %17095
  %17097 = load i16, i16* %17096, align 2, !tbaa !382
  %17098 = insertelement <64 x i16> %17093, i16 %17097, i32 18
  %17099 = extractelement <64 x i32> %17003, i32 19
  %17100 = sext i32 %17099 to i64
  %17101 = getelementptr inbounds i16, i16* %10121, i64 %17100
  %17102 = load i16, i16* %17101, align 2, !tbaa !382
  %17103 = insertelement <64 x i16> %17098, i16 %17102, i32 19
  %17104 = extractelement <64 x i32> %17003, i32 20
  %17105 = sext i32 %17104 to i64
  %17106 = getelementptr inbounds i16, i16* %10121, i64 %17105
  %17107 = load i16, i16* %17106, align 2, !tbaa !382
  %17108 = insertelement <64 x i16> %17103, i16 %17107, i32 20
  %17109 = extractelement <64 x i32> %17003, i32 21
  %17110 = sext i32 %17109 to i64
  %17111 = getelementptr inbounds i16, i16* %10121, i64 %17110
  %17112 = load i16, i16* %17111, align 2, !tbaa !382
  %17113 = insertelement <64 x i16> %17108, i16 %17112, i32 21
  %17114 = extractelement <64 x i32> %17003, i32 22
  %17115 = sext i32 %17114 to i64
  %17116 = getelementptr inbounds i16, i16* %10121, i64 %17115
  %17117 = load i16, i16* %17116, align 2, !tbaa !382
  %17118 = insertelement <64 x i16> %17113, i16 %17117, i32 22
  %17119 = extractelement <64 x i32> %17003, i32 23
  %17120 = sext i32 %17119 to i64
  %17121 = getelementptr inbounds i16, i16* %10121, i64 %17120
  %17122 = load i16, i16* %17121, align 2, !tbaa !382
  %17123 = insertelement <64 x i16> %17118, i16 %17122, i32 23
  %17124 = extractelement <64 x i32> %17003, i32 24
  %17125 = sext i32 %17124 to i64
  %17126 = getelementptr inbounds i16, i16* %10121, i64 %17125
  %17127 = load i16, i16* %17126, align 2, !tbaa !382
  %17128 = insertelement <64 x i16> %17123, i16 %17127, i32 24
  %17129 = extractelement <64 x i32> %17003, i32 25
  %17130 = sext i32 %17129 to i64
  %17131 = getelementptr inbounds i16, i16* %10121, i64 %17130
  %17132 = load i16, i16* %17131, align 2, !tbaa !382
  %17133 = insertelement <64 x i16> %17128, i16 %17132, i32 25
  %17134 = extractelement <64 x i32> %17003, i32 26
  %17135 = sext i32 %17134 to i64
  %17136 = getelementptr inbounds i16, i16* %10121, i64 %17135
  %17137 = load i16, i16* %17136, align 2, !tbaa !382
  %17138 = insertelement <64 x i16> %17133, i16 %17137, i32 26
  %17139 = extractelement <64 x i32> %17003, i32 27
  %17140 = sext i32 %17139 to i64
  %17141 = getelementptr inbounds i16, i16* %10121, i64 %17140
  %17142 = load i16, i16* %17141, align 2, !tbaa !382
  %17143 = insertelement <64 x i16> %17138, i16 %17142, i32 27
  %17144 = extractelement <64 x i32> %17003, i32 28
  %17145 = sext i32 %17144 to i64
  %17146 = getelementptr inbounds i16, i16* %10121, i64 %17145
  %17147 = load i16, i16* %17146, align 2, !tbaa !382
  %17148 = insertelement <64 x i16> %17143, i16 %17147, i32 28
  %17149 = extractelement <64 x i32> %17003, i32 29
  %17150 = sext i32 %17149 to i64
  %17151 = getelementptr inbounds i16, i16* %10121, i64 %17150
  %17152 = load i16, i16* %17151, align 2, !tbaa !382
  %17153 = insertelement <64 x i16> %17148, i16 %17152, i32 29
  %17154 = extractelement <64 x i32> %17003, i32 30
  %17155 = sext i32 %17154 to i64
  %17156 = getelementptr inbounds i16, i16* %10121, i64 %17155
  %17157 = load i16, i16* %17156, align 2, !tbaa !382
  %17158 = insertelement <64 x i16> %17153, i16 %17157, i32 30
  %17159 = extractelement <64 x i32> %17003, i32 31
  %17160 = sext i32 %17159 to i64
  %17161 = getelementptr inbounds i16, i16* %10121, i64 %17160
  %17162 = load i16, i16* %17161, align 2, !tbaa !382
  %17163 = insertelement <64 x i16> %17158, i16 %17162, i32 31
  %17164 = extractelement <64 x i32> %17003, i32 32
  %17165 = sext i32 %17164 to i64
  %17166 = getelementptr inbounds i16, i16* %10121, i64 %17165
  %17167 = load i16, i16* %17166, align 2, !tbaa !382
  %17168 = insertelement <64 x i16> %17163, i16 %17167, i32 32
  %17169 = extractelement <64 x i32> %17003, i32 33
  %17170 = sext i32 %17169 to i64
  %17171 = getelementptr inbounds i16, i16* %10121, i64 %17170
  %17172 = load i16, i16* %17171, align 2, !tbaa !382
  %17173 = insertelement <64 x i16> %17168, i16 %17172, i32 33
  %17174 = extractelement <64 x i32> %17003, i32 34
  %17175 = sext i32 %17174 to i64
  %17176 = getelementptr inbounds i16, i16* %10121, i64 %17175
  %17177 = load i16, i16* %17176, align 2, !tbaa !382
  %17178 = insertelement <64 x i16> %17173, i16 %17177, i32 34
  %17179 = extractelement <64 x i32> %17003, i32 35
  %17180 = sext i32 %17179 to i64
  %17181 = getelementptr inbounds i16, i16* %10121, i64 %17180
  %17182 = load i16, i16* %17181, align 2, !tbaa !382
  %17183 = insertelement <64 x i16> %17178, i16 %17182, i32 35
  %17184 = extractelement <64 x i32> %17003, i32 36
  %17185 = sext i32 %17184 to i64
  %17186 = getelementptr inbounds i16, i16* %10121, i64 %17185
  %17187 = load i16, i16* %17186, align 2, !tbaa !382
  %17188 = insertelement <64 x i16> %17183, i16 %17187, i32 36
  %17189 = extractelement <64 x i32> %17003, i32 37
  %17190 = sext i32 %17189 to i64
  %17191 = getelementptr inbounds i16, i16* %10121, i64 %17190
  %17192 = load i16, i16* %17191, align 2, !tbaa !382
  %17193 = insertelement <64 x i16> %17188, i16 %17192, i32 37
  %17194 = extractelement <64 x i32> %17003, i32 38
  %17195 = sext i32 %17194 to i64
  %17196 = getelementptr inbounds i16, i16* %10121, i64 %17195
  %17197 = load i16, i16* %17196, align 2, !tbaa !382
  %17198 = insertelement <64 x i16> %17193, i16 %17197, i32 38
  %17199 = extractelement <64 x i32> %17003, i32 39
  %17200 = sext i32 %17199 to i64
  %17201 = getelementptr inbounds i16, i16* %10121, i64 %17200
  %17202 = load i16, i16* %17201, align 2, !tbaa !382
  %17203 = insertelement <64 x i16> %17198, i16 %17202, i32 39
  %17204 = extractelement <64 x i32> %17003, i32 40
  %17205 = sext i32 %17204 to i64
  %17206 = getelementptr inbounds i16, i16* %10121, i64 %17205
  %17207 = load i16, i16* %17206, align 2, !tbaa !382
  %17208 = insertelement <64 x i16> %17203, i16 %17207, i32 40
  %17209 = extractelement <64 x i32> %17003, i32 41
  %17210 = sext i32 %17209 to i64
  %17211 = getelementptr inbounds i16, i16* %10121, i64 %17210
  %17212 = load i16, i16* %17211, align 2, !tbaa !382
  %17213 = insertelement <64 x i16> %17208, i16 %17212, i32 41
  %17214 = extractelement <64 x i32> %17003, i32 42
  %17215 = sext i32 %17214 to i64
  %17216 = getelementptr inbounds i16, i16* %10121, i64 %17215
  %17217 = load i16, i16* %17216, align 2, !tbaa !382
  %17218 = insertelement <64 x i16> %17213, i16 %17217, i32 42
  %17219 = extractelement <64 x i32> %17003, i32 43
  %17220 = sext i32 %17219 to i64
  %17221 = getelementptr inbounds i16, i16* %10121, i64 %17220
  %17222 = load i16, i16* %17221, align 2, !tbaa !382
  %17223 = insertelement <64 x i16> %17218, i16 %17222, i32 43
  %17224 = extractelement <64 x i32> %17003, i32 44
  %17225 = sext i32 %17224 to i64
  %17226 = getelementptr inbounds i16, i16* %10121, i64 %17225
  %17227 = load i16, i16* %17226, align 2, !tbaa !382
  %17228 = insertelement <64 x i16> %17223, i16 %17227, i32 44
  %17229 = extractelement <64 x i32> %17003, i32 45
  %17230 = sext i32 %17229 to i64
  %17231 = getelementptr inbounds i16, i16* %10121, i64 %17230
  %17232 = load i16, i16* %17231, align 2, !tbaa !382
  %17233 = insertelement <64 x i16> %17228, i16 %17232, i32 45
  %17234 = extractelement <64 x i32> %17003, i32 46
  %17235 = sext i32 %17234 to i64
  %17236 = getelementptr inbounds i16, i16* %10121, i64 %17235
  %17237 = load i16, i16* %17236, align 2, !tbaa !382
  %17238 = insertelement <64 x i16> %17233, i16 %17237, i32 46
  %17239 = extractelement <64 x i32> %17003, i32 47
  %17240 = sext i32 %17239 to i64
  %17241 = getelementptr inbounds i16, i16* %10121, i64 %17240
  %17242 = load i16, i16* %17241, align 2, !tbaa !382
  %17243 = insertelement <64 x i16> %17238, i16 %17242, i32 47
  %17244 = extractelement <64 x i32> %17003, i32 48
  %17245 = sext i32 %17244 to i64
  %17246 = getelementptr inbounds i16, i16* %10121, i64 %17245
  %17247 = load i16, i16* %17246, align 2, !tbaa !382
  %17248 = insertelement <64 x i16> %17243, i16 %17247, i32 48
  %17249 = extractelement <64 x i32> %17003, i32 49
  %17250 = sext i32 %17249 to i64
  %17251 = getelementptr inbounds i16, i16* %10121, i64 %17250
  %17252 = load i16, i16* %17251, align 2, !tbaa !382
  %17253 = insertelement <64 x i16> %17248, i16 %17252, i32 49
  %17254 = extractelement <64 x i32> %17003, i32 50
  %17255 = sext i32 %17254 to i64
  %17256 = getelementptr inbounds i16, i16* %10121, i64 %17255
  %17257 = load i16, i16* %17256, align 2, !tbaa !382
  %17258 = insertelement <64 x i16> %17253, i16 %17257, i32 50
  %17259 = extractelement <64 x i32> %17003, i32 51
  %17260 = sext i32 %17259 to i64
  %17261 = getelementptr inbounds i16, i16* %10121, i64 %17260
  %17262 = load i16, i16* %17261, align 2, !tbaa !382
  %17263 = insertelement <64 x i16> %17258, i16 %17262, i32 51
  %17264 = extractelement <64 x i32> %17003, i32 52
  %17265 = sext i32 %17264 to i64
  %17266 = getelementptr inbounds i16, i16* %10121, i64 %17265
  %17267 = load i16, i16* %17266, align 2, !tbaa !382
  %17268 = insertelement <64 x i16> %17263, i16 %17267, i32 52
  %17269 = extractelement <64 x i32> %17003, i32 53
  %17270 = sext i32 %17269 to i64
  %17271 = getelementptr inbounds i16, i16* %10121, i64 %17270
  %17272 = load i16, i16* %17271, align 2, !tbaa !382
  %17273 = insertelement <64 x i16> %17268, i16 %17272, i32 53
  %17274 = extractelement <64 x i32> %17003, i32 54
  %17275 = sext i32 %17274 to i64
  %17276 = getelementptr inbounds i16, i16* %10121, i64 %17275
  %17277 = load i16, i16* %17276, align 2, !tbaa !382
  %17278 = insertelement <64 x i16> %17273, i16 %17277, i32 54
  %17279 = extractelement <64 x i32> %17003, i32 55
  %17280 = sext i32 %17279 to i64
  %17281 = getelementptr inbounds i16, i16* %10121, i64 %17280
  %17282 = load i16, i16* %17281, align 2, !tbaa !382
  %17283 = insertelement <64 x i16> %17278, i16 %17282, i32 55
  %17284 = extractelement <64 x i32> %17003, i32 56
  %17285 = sext i32 %17284 to i64
  %17286 = getelementptr inbounds i16, i16* %10121, i64 %17285
  %17287 = load i16, i16* %17286, align 2, !tbaa !382
  %17288 = insertelement <64 x i16> %17283, i16 %17287, i32 56
  %17289 = extractelement <64 x i32> %17003, i32 57
  %17290 = sext i32 %17289 to i64
  %17291 = getelementptr inbounds i16, i16* %10121, i64 %17290
  %17292 = load i16, i16* %17291, align 2, !tbaa !382
  %17293 = insertelement <64 x i16> %17288, i16 %17292, i32 57
  %17294 = extractelement <64 x i32> %17003, i32 58
  %17295 = sext i32 %17294 to i64
  %17296 = getelementptr inbounds i16, i16* %10121, i64 %17295
  %17297 = load i16, i16* %17296, align 2, !tbaa !382
  %17298 = insertelement <64 x i16> %17293, i16 %17297, i32 58
  %17299 = extractelement <64 x i32> %17003, i32 59
  %17300 = sext i32 %17299 to i64
  %17301 = getelementptr inbounds i16, i16* %10121, i64 %17300
  %17302 = load i16, i16* %17301, align 2, !tbaa !382
  %17303 = insertelement <64 x i16> %17298, i16 %17302, i32 59
  %17304 = extractelement <64 x i32> %17003, i32 60
  %17305 = sext i32 %17304 to i64
  %17306 = getelementptr inbounds i16, i16* %10121, i64 %17305
  %17307 = load i16, i16* %17306, align 2, !tbaa !382
  %17308 = insertelement <64 x i16> %17303, i16 %17307, i32 60
  %17309 = extractelement <64 x i32> %17003, i32 61
  %17310 = sext i32 %17309 to i64
  %17311 = getelementptr inbounds i16, i16* %10121, i64 %17310
  %17312 = load i16, i16* %17311, align 2, !tbaa !382
  %17313 = insertelement <64 x i16> %17308, i16 %17312, i32 61
  %17314 = extractelement <64 x i32> %17003, i32 62
  %17315 = sext i32 %17314 to i64
  %17316 = getelementptr inbounds i16, i16* %10121, i64 %17315
  %17317 = load i16, i16* %17316, align 2, !tbaa !382
  %17318 = insertelement <64 x i16> %17313, i16 %17317, i32 62
  %17319 = extractelement <64 x i32> %17003, i32 63
  %17320 = sext i32 %17319 to i64
  %17321 = getelementptr inbounds i16, i16* %10121, i64 %17320
  %17322 = load i16, i16* %17321, align 2, !tbaa !382
  %17323 = insertelement <64 x i16> %17318, i16 %17322, i32 63
  %17324 = add nsw i32 %blur_x.s0.x.v1.base.s94, -64
  %17325 = insertelement <64 x i32> undef, i32 %17324, i32 0
  %17326 = shufflevector <64 x i32> %17325, <64 x i32> undef, <64 x i32> zeroinitializer
  %17327 = add nsw <64 x i32> %17326, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %17328 = shufflevector <64 x i32> %17327, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17329 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17328, <4 x i32> %10120)
  %17330 = shufflevector <64 x i32> %17327, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %17331 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17330, <4 x i32> %10120)
  %17332 = shufflevector <64 x i32> %17327, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %17333 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17332, <4 x i32> %10120)
  %17334 = shufflevector <64 x i32> %17327, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %17335 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17334, <4 x i32> %10120)
  %17336 = shufflevector <64 x i32> %17327, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %17337 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17336, <4 x i32> %10120)
  %17338 = shufflevector <64 x i32> %17327, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %17339 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17338, <4 x i32> %10120)
  %17340 = shufflevector <64 x i32> %17327, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %17341 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17340, <4 x i32> %10120)
  %17342 = shufflevector <64 x i32> %17327, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %17343 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17342, <4 x i32> %10120)
  %17344 = shufflevector <64 x i32> %17327, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %17345 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17344, <4 x i32> %10120)
  %17346 = shufflevector <64 x i32> %17327, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %17347 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17346, <4 x i32> %10120)
  %17348 = shufflevector <64 x i32> %17327, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %17349 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17348, <4 x i32> %10120)
  %17350 = shufflevector <64 x i32> %17327, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %17351 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17350, <4 x i32> %10120)
  %17352 = shufflevector <64 x i32> %17327, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %17353 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17352, <4 x i32> %10120)
  %17354 = shufflevector <64 x i32> %17327, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %17355 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17354, <4 x i32> %10120)
  %17356 = shufflevector <64 x i32> %17327, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %17357 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17356, <4 x i32> %10120)
  %17358 = shufflevector <64 x i32> %17327, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %17359 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17358, <4 x i32> %10120)
  %17360 = shufflevector <4 x i32> %17359, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17361 = shufflevector <8 x i32> %17360, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %17362 = shufflevector <16 x i32> %17361, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %17363 = shufflevector <32 x i32> %17362, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %17364 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17329, <4 x i32> zeroinitializer)
  %17365 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17331, <4 x i32> zeroinitializer)
  %17366 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17333, <4 x i32> zeroinitializer)
  %17367 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17335, <4 x i32> zeroinitializer)
  %17368 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17337, <4 x i32> zeroinitializer)
  %17369 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17339, <4 x i32> zeroinitializer)
  %17370 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17341, <4 x i32> zeroinitializer)
  %17371 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17343, <4 x i32> zeroinitializer)
  %17372 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17345, <4 x i32> zeroinitializer)
  %17373 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17347, <4 x i32> zeroinitializer)
  %17374 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17349, <4 x i32> zeroinitializer)
  %17375 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17351, <4 x i32> zeroinitializer)
  %17376 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17353, <4 x i32> zeroinitializer)
  %17377 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17355, <4 x i32> zeroinitializer)
  %17378 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17357, <4 x i32> zeroinitializer)
  %17379 = shufflevector <64 x i32> %17363, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %17380 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17379, <4 x i32> zeroinitializer)
  %17381 = shufflevector <4 x i32> %17364, <4 x i32> %17365, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17382 = shufflevector <4 x i32> %17366, <4 x i32> %17367, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17383 = shufflevector <4 x i32> %17368, <4 x i32> %17369, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17384 = shufflevector <4 x i32> %17370, <4 x i32> %17371, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17385 = shufflevector <4 x i32> %17372, <4 x i32> %17373, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17386 = shufflevector <4 x i32> %17374, <4 x i32> %17375, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17387 = shufflevector <4 x i32> %17376, <4 x i32> %17377, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17388 = shufflevector <4 x i32> %17378, <4 x i32> %17380, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17389 = shufflevector <8 x i32> %17381, <8 x i32> %17382, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17390 = shufflevector <8 x i32> %17383, <8 x i32> %17384, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17391 = shufflevector <8 x i32> %17385, <8 x i32> %17386, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17392 = shufflevector <8 x i32> %17387, <8 x i32> %17388, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17393 = shufflevector <16 x i32> %17389, <16 x i32> %17390, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17394 = shufflevector <16 x i32> %17391, <16 x i32> %17392, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17395 = shufflevector <32 x i32> %17393, <32 x i32> %17394, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %17396 = add nsw <64 x i32> %17395, %t25795
  %17397 = extractelement <64 x i32> %17396, i32 0
  %17398 = sext i32 %17397 to i64
  %17399 = getelementptr inbounds i16, i16* %10121, i64 %17398
  %17400 = load i16, i16* %17399, align 2, !tbaa !382
  %17401 = insertelement <64 x i16> undef, i16 %17400, i32 0
  %17402 = extractelement <64 x i32> %17396, i32 1
  %17403 = sext i32 %17402 to i64
  %17404 = getelementptr inbounds i16, i16* %10121, i64 %17403
  %17405 = load i16, i16* %17404, align 2, !tbaa !382
  %17406 = insertelement <64 x i16> %17401, i16 %17405, i32 1
  %17407 = extractelement <64 x i32> %17396, i32 2
  %17408 = sext i32 %17407 to i64
  %17409 = getelementptr inbounds i16, i16* %10121, i64 %17408
  %17410 = load i16, i16* %17409, align 2, !tbaa !382
  %17411 = insertelement <64 x i16> %17406, i16 %17410, i32 2
  %17412 = extractelement <64 x i32> %17396, i32 3
  %17413 = sext i32 %17412 to i64
  %17414 = getelementptr inbounds i16, i16* %10121, i64 %17413
  %17415 = load i16, i16* %17414, align 2, !tbaa !382
  %17416 = insertelement <64 x i16> %17411, i16 %17415, i32 3
  %17417 = extractelement <64 x i32> %17396, i32 4
  %17418 = sext i32 %17417 to i64
  %17419 = getelementptr inbounds i16, i16* %10121, i64 %17418
  %17420 = load i16, i16* %17419, align 2, !tbaa !382
  %17421 = insertelement <64 x i16> %17416, i16 %17420, i32 4
  %17422 = extractelement <64 x i32> %17396, i32 5
  %17423 = sext i32 %17422 to i64
  %17424 = getelementptr inbounds i16, i16* %10121, i64 %17423
  %17425 = load i16, i16* %17424, align 2, !tbaa !382
  %17426 = insertelement <64 x i16> %17421, i16 %17425, i32 5
  %17427 = extractelement <64 x i32> %17396, i32 6
  %17428 = sext i32 %17427 to i64
  %17429 = getelementptr inbounds i16, i16* %10121, i64 %17428
  %17430 = load i16, i16* %17429, align 2, !tbaa !382
  %17431 = insertelement <64 x i16> %17426, i16 %17430, i32 6
  %17432 = extractelement <64 x i32> %17396, i32 7
  %17433 = sext i32 %17432 to i64
  %17434 = getelementptr inbounds i16, i16* %10121, i64 %17433
  %17435 = load i16, i16* %17434, align 2, !tbaa !382
  %17436 = insertelement <64 x i16> %17431, i16 %17435, i32 7
  %17437 = extractelement <64 x i32> %17396, i32 8
  %17438 = sext i32 %17437 to i64
  %17439 = getelementptr inbounds i16, i16* %10121, i64 %17438
  %17440 = load i16, i16* %17439, align 2, !tbaa !382
  %17441 = insertelement <64 x i16> %17436, i16 %17440, i32 8
  %17442 = extractelement <64 x i32> %17396, i32 9
  %17443 = sext i32 %17442 to i64
  %17444 = getelementptr inbounds i16, i16* %10121, i64 %17443
  %17445 = load i16, i16* %17444, align 2, !tbaa !382
  %17446 = insertelement <64 x i16> %17441, i16 %17445, i32 9
  %17447 = extractelement <64 x i32> %17396, i32 10
  %17448 = sext i32 %17447 to i64
  %17449 = getelementptr inbounds i16, i16* %10121, i64 %17448
  %17450 = load i16, i16* %17449, align 2, !tbaa !382
  %17451 = insertelement <64 x i16> %17446, i16 %17450, i32 10
  %17452 = extractelement <64 x i32> %17396, i32 11
  %17453 = sext i32 %17452 to i64
  %17454 = getelementptr inbounds i16, i16* %10121, i64 %17453
  %17455 = load i16, i16* %17454, align 2, !tbaa !382
  %17456 = insertelement <64 x i16> %17451, i16 %17455, i32 11
  %17457 = extractelement <64 x i32> %17396, i32 12
  %17458 = sext i32 %17457 to i64
  %17459 = getelementptr inbounds i16, i16* %10121, i64 %17458
  %17460 = load i16, i16* %17459, align 2, !tbaa !382
  %17461 = insertelement <64 x i16> %17456, i16 %17460, i32 12
  %17462 = extractelement <64 x i32> %17396, i32 13
  %17463 = sext i32 %17462 to i64
  %17464 = getelementptr inbounds i16, i16* %10121, i64 %17463
  %17465 = load i16, i16* %17464, align 2, !tbaa !382
  %17466 = insertelement <64 x i16> %17461, i16 %17465, i32 13
  %17467 = extractelement <64 x i32> %17396, i32 14
  %17468 = sext i32 %17467 to i64
  %17469 = getelementptr inbounds i16, i16* %10121, i64 %17468
  %17470 = load i16, i16* %17469, align 2, !tbaa !382
  %17471 = insertelement <64 x i16> %17466, i16 %17470, i32 14
  %17472 = extractelement <64 x i32> %17396, i32 15
  %17473 = sext i32 %17472 to i64
  %17474 = getelementptr inbounds i16, i16* %10121, i64 %17473
  %17475 = load i16, i16* %17474, align 2, !tbaa !382
  %17476 = insertelement <64 x i16> %17471, i16 %17475, i32 15
  %17477 = extractelement <64 x i32> %17396, i32 16
  %17478 = sext i32 %17477 to i64
  %17479 = getelementptr inbounds i16, i16* %10121, i64 %17478
  %17480 = load i16, i16* %17479, align 2, !tbaa !382
  %17481 = insertelement <64 x i16> %17476, i16 %17480, i32 16
  %17482 = extractelement <64 x i32> %17396, i32 17
  %17483 = sext i32 %17482 to i64
  %17484 = getelementptr inbounds i16, i16* %10121, i64 %17483
  %17485 = load i16, i16* %17484, align 2, !tbaa !382
  %17486 = insertelement <64 x i16> %17481, i16 %17485, i32 17
  %17487 = extractelement <64 x i32> %17396, i32 18
  %17488 = sext i32 %17487 to i64
  %17489 = getelementptr inbounds i16, i16* %10121, i64 %17488
  %17490 = load i16, i16* %17489, align 2, !tbaa !382
  %17491 = insertelement <64 x i16> %17486, i16 %17490, i32 18
  %17492 = extractelement <64 x i32> %17396, i32 19
  %17493 = sext i32 %17492 to i64
  %17494 = getelementptr inbounds i16, i16* %10121, i64 %17493
  %17495 = load i16, i16* %17494, align 2, !tbaa !382
  %17496 = insertelement <64 x i16> %17491, i16 %17495, i32 19
  %17497 = extractelement <64 x i32> %17396, i32 20
  %17498 = sext i32 %17497 to i64
  %17499 = getelementptr inbounds i16, i16* %10121, i64 %17498
  %17500 = load i16, i16* %17499, align 2, !tbaa !382
  %17501 = insertelement <64 x i16> %17496, i16 %17500, i32 20
  %17502 = extractelement <64 x i32> %17396, i32 21
  %17503 = sext i32 %17502 to i64
  %17504 = getelementptr inbounds i16, i16* %10121, i64 %17503
  %17505 = load i16, i16* %17504, align 2, !tbaa !382
  %17506 = insertelement <64 x i16> %17501, i16 %17505, i32 21
  %17507 = extractelement <64 x i32> %17396, i32 22
  %17508 = sext i32 %17507 to i64
  %17509 = getelementptr inbounds i16, i16* %10121, i64 %17508
  %17510 = load i16, i16* %17509, align 2, !tbaa !382
  %17511 = insertelement <64 x i16> %17506, i16 %17510, i32 22
  %17512 = extractelement <64 x i32> %17396, i32 23
  %17513 = sext i32 %17512 to i64
  %17514 = getelementptr inbounds i16, i16* %10121, i64 %17513
  %17515 = load i16, i16* %17514, align 2, !tbaa !382
  %17516 = insertelement <64 x i16> %17511, i16 %17515, i32 23
  %17517 = extractelement <64 x i32> %17396, i32 24
  %17518 = sext i32 %17517 to i64
  %17519 = getelementptr inbounds i16, i16* %10121, i64 %17518
  %17520 = load i16, i16* %17519, align 2, !tbaa !382
  %17521 = insertelement <64 x i16> %17516, i16 %17520, i32 24
  %17522 = extractelement <64 x i32> %17396, i32 25
  %17523 = sext i32 %17522 to i64
  %17524 = getelementptr inbounds i16, i16* %10121, i64 %17523
  %17525 = load i16, i16* %17524, align 2, !tbaa !382
  %17526 = insertelement <64 x i16> %17521, i16 %17525, i32 25
  %17527 = extractelement <64 x i32> %17396, i32 26
  %17528 = sext i32 %17527 to i64
  %17529 = getelementptr inbounds i16, i16* %10121, i64 %17528
  %17530 = load i16, i16* %17529, align 2, !tbaa !382
  %17531 = insertelement <64 x i16> %17526, i16 %17530, i32 26
  %17532 = extractelement <64 x i32> %17396, i32 27
  %17533 = sext i32 %17532 to i64
  %17534 = getelementptr inbounds i16, i16* %10121, i64 %17533
  %17535 = load i16, i16* %17534, align 2, !tbaa !382
  %17536 = insertelement <64 x i16> %17531, i16 %17535, i32 27
  %17537 = extractelement <64 x i32> %17396, i32 28
  %17538 = sext i32 %17537 to i64
  %17539 = getelementptr inbounds i16, i16* %10121, i64 %17538
  %17540 = load i16, i16* %17539, align 2, !tbaa !382
  %17541 = insertelement <64 x i16> %17536, i16 %17540, i32 28
  %17542 = extractelement <64 x i32> %17396, i32 29
  %17543 = sext i32 %17542 to i64
  %17544 = getelementptr inbounds i16, i16* %10121, i64 %17543
  %17545 = load i16, i16* %17544, align 2, !tbaa !382
  %17546 = insertelement <64 x i16> %17541, i16 %17545, i32 29
  %17547 = extractelement <64 x i32> %17396, i32 30
  %17548 = sext i32 %17547 to i64
  %17549 = getelementptr inbounds i16, i16* %10121, i64 %17548
  %17550 = load i16, i16* %17549, align 2, !tbaa !382
  %17551 = insertelement <64 x i16> %17546, i16 %17550, i32 30
  %17552 = extractelement <64 x i32> %17396, i32 31
  %17553 = sext i32 %17552 to i64
  %17554 = getelementptr inbounds i16, i16* %10121, i64 %17553
  %17555 = load i16, i16* %17554, align 2, !tbaa !382
  %17556 = insertelement <64 x i16> %17551, i16 %17555, i32 31
  %17557 = extractelement <64 x i32> %17396, i32 32
  %17558 = sext i32 %17557 to i64
  %17559 = getelementptr inbounds i16, i16* %10121, i64 %17558
  %17560 = load i16, i16* %17559, align 2, !tbaa !382
  %17561 = insertelement <64 x i16> %17556, i16 %17560, i32 32
  %17562 = extractelement <64 x i32> %17396, i32 33
  %17563 = sext i32 %17562 to i64
  %17564 = getelementptr inbounds i16, i16* %10121, i64 %17563
  %17565 = load i16, i16* %17564, align 2, !tbaa !382
  %17566 = insertelement <64 x i16> %17561, i16 %17565, i32 33
  %17567 = extractelement <64 x i32> %17396, i32 34
  %17568 = sext i32 %17567 to i64
  %17569 = getelementptr inbounds i16, i16* %10121, i64 %17568
  %17570 = load i16, i16* %17569, align 2, !tbaa !382
  %17571 = insertelement <64 x i16> %17566, i16 %17570, i32 34
  %17572 = extractelement <64 x i32> %17396, i32 35
  %17573 = sext i32 %17572 to i64
  %17574 = getelementptr inbounds i16, i16* %10121, i64 %17573
  %17575 = load i16, i16* %17574, align 2, !tbaa !382
  %17576 = insertelement <64 x i16> %17571, i16 %17575, i32 35
  %17577 = extractelement <64 x i32> %17396, i32 36
  %17578 = sext i32 %17577 to i64
  %17579 = getelementptr inbounds i16, i16* %10121, i64 %17578
  %17580 = load i16, i16* %17579, align 2, !tbaa !382
  %17581 = insertelement <64 x i16> %17576, i16 %17580, i32 36
  %17582 = extractelement <64 x i32> %17396, i32 37
  %17583 = sext i32 %17582 to i64
  %17584 = getelementptr inbounds i16, i16* %10121, i64 %17583
  %17585 = load i16, i16* %17584, align 2, !tbaa !382
  %17586 = insertelement <64 x i16> %17581, i16 %17585, i32 37
  %17587 = extractelement <64 x i32> %17396, i32 38
  %17588 = sext i32 %17587 to i64
  %17589 = getelementptr inbounds i16, i16* %10121, i64 %17588
  %17590 = load i16, i16* %17589, align 2, !tbaa !382
  %17591 = insertelement <64 x i16> %17586, i16 %17590, i32 38
  %17592 = extractelement <64 x i32> %17396, i32 39
  %17593 = sext i32 %17592 to i64
  %17594 = getelementptr inbounds i16, i16* %10121, i64 %17593
  %17595 = load i16, i16* %17594, align 2, !tbaa !382
  %17596 = insertelement <64 x i16> %17591, i16 %17595, i32 39
  %17597 = extractelement <64 x i32> %17396, i32 40
  %17598 = sext i32 %17597 to i64
  %17599 = getelementptr inbounds i16, i16* %10121, i64 %17598
  %17600 = load i16, i16* %17599, align 2, !tbaa !382
  %17601 = insertelement <64 x i16> %17596, i16 %17600, i32 40
  %17602 = extractelement <64 x i32> %17396, i32 41
  %17603 = sext i32 %17602 to i64
  %17604 = getelementptr inbounds i16, i16* %10121, i64 %17603
  %17605 = load i16, i16* %17604, align 2, !tbaa !382
  %17606 = insertelement <64 x i16> %17601, i16 %17605, i32 41
  %17607 = extractelement <64 x i32> %17396, i32 42
  %17608 = sext i32 %17607 to i64
  %17609 = getelementptr inbounds i16, i16* %10121, i64 %17608
  %17610 = load i16, i16* %17609, align 2, !tbaa !382
  %17611 = insertelement <64 x i16> %17606, i16 %17610, i32 42
  %17612 = extractelement <64 x i32> %17396, i32 43
  %17613 = sext i32 %17612 to i64
  %17614 = getelementptr inbounds i16, i16* %10121, i64 %17613
  %17615 = load i16, i16* %17614, align 2, !tbaa !382
  %17616 = insertelement <64 x i16> %17611, i16 %17615, i32 43
  %17617 = extractelement <64 x i32> %17396, i32 44
  %17618 = sext i32 %17617 to i64
  %17619 = getelementptr inbounds i16, i16* %10121, i64 %17618
  %17620 = load i16, i16* %17619, align 2, !tbaa !382
  %17621 = insertelement <64 x i16> %17616, i16 %17620, i32 44
  %17622 = extractelement <64 x i32> %17396, i32 45
  %17623 = sext i32 %17622 to i64
  %17624 = getelementptr inbounds i16, i16* %10121, i64 %17623
  %17625 = load i16, i16* %17624, align 2, !tbaa !382
  %17626 = insertelement <64 x i16> %17621, i16 %17625, i32 45
  %17627 = extractelement <64 x i32> %17396, i32 46
  %17628 = sext i32 %17627 to i64
  %17629 = getelementptr inbounds i16, i16* %10121, i64 %17628
  %17630 = load i16, i16* %17629, align 2, !tbaa !382
  %17631 = insertelement <64 x i16> %17626, i16 %17630, i32 46
  %17632 = extractelement <64 x i32> %17396, i32 47
  %17633 = sext i32 %17632 to i64
  %17634 = getelementptr inbounds i16, i16* %10121, i64 %17633
  %17635 = load i16, i16* %17634, align 2, !tbaa !382
  %17636 = insertelement <64 x i16> %17631, i16 %17635, i32 47
  %17637 = extractelement <64 x i32> %17396, i32 48
  %17638 = sext i32 %17637 to i64
  %17639 = getelementptr inbounds i16, i16* %10121, i64 %17638
  %17640 = load i16, i16* %17639, align 2, !tbaa !382
  %17641 = insertelement <64 x i16> %17636, i16 %17640, i32 48
  %17642 = extractelement <64 x i32> %17396, i32 49
  %17643 = sext i32 %17642 to i64
  %17644 = getelementptr inbounds i16, i16* %10121, i64 %17643
  %17645 = load i16, i16* %17644, align 2, !tbaa !382
  %17646 = insertelement <64 x i16> %17641, i16 %17645, i32 49
  %17647 = extractelement <64 x i32> %17396, i32 50
  %17648 = sext i32 %17647 to i64
  %17649 = getelementptr inbounds i16, i16* %10121, i64 %17648
  %17650 = load i16, i16* %17649, align 2, !tbaa !382
  %17651 = insertelement <64 x i16> %17646, i16 %17650, i32 50
  %17652 = extractelement <64 x i32> %17396, i32 51
  %17653 = sext i32 %17652 to i64
  %17654 = getelementptr inbounds i16, i16* %10121, i64 %17653
  %17655 = load i16, i16* %17654, align 2, !tbaa !382
  %17656 = insertelement <64 x i16> %17651, i16 %17655, i32 51
  %17657 = extractelement <64 x i32> %17396, i32 52
  %17658 = sext i32 %17657 to i64
  %17659 = getelementptr inbounds i16, i16* %10121, i64 %17658
  %17660 = load i16, i16* %17659, align 2, !tbaa !382
  %17661 = insertelement <64 x i16> %17656, i16 %17660, i32 52
  %17662 = extractelement <64 x i32> %17396, i32 53
  %17663 = sext i32 %17662 to i64
  %17664 = getelementptr inbounds i16, i16* %10121, i64 %17663
  %17665 = load i16, i16* %17664, align 2, !tbaa !382
  %17666 = insertelement <64 x i16> %17661, i16 %17665, i32 53
  %17667 = extractelement <64 x i32> %17396, i32 54
  %17668 = sext i32 %17667 to i64
  %17669 = getelementptr inbounds i16, i16* %10121, i64 %17668
  %17670 = load i16, i16* %17669, align 2, !tbaa !382
  %17671 = insertelement <64 x i16> %17666, i16 %17670, i32 54
  %17672 = extractelement <64 x i32> %17396, i32 55
  %17673 = sext i32 %17672 to i64
  %17674 = getelementptr inbounds i16, i16* %10121, i64 %17673
  %17675 = load i16, i16* %17674, align 2, !tbaa !382
  %17676 = insertelement <64 x i16> %17671, i16 %17675, i32 55
  %17677 = extractelement <64 x i32> %17396, i32 56
  %17678 = sext i32 %17677 to i64
  %17679 = getelementptr inbounds i16, i16* %10121, i64 %17678
  %17680 = load i16, i16* %17679, align 2, !tbaa !382
  %17681 = insertelement <64 x i16> %17676, i16 %17680, i32 56
  %17682 = extractelement <64 x i32> %17396, i32 57
  %17683 = sext i32 %17682 to i64
  %17684 = getelementptr inbounds i16, i16* %10121, i64 %17683
  %17685 = load i16, i16* %17684, align 2, !tbaa !382
  %17686 = insertelement <64 x i16> %17681, i16 %17685, i32 57
  %17687 = extractelement <64 x i32> %17396, i32 58
  %17688 = sext i32 %17687 to i64
  %17689 = getelementptr inbounds i16, i16* %10121, i64 %17688
  %17690 = load i16, i16* %17689, align 2, !tbaa !382
  %17691 = insertelement <64 x i16> %17686, i16 %17690, i32 58
  %17692 = extractelement <64 x i32> %17396, i32 59
  %17693 = sext i32 %17692 to i64
  %17694 = getelementptr inbounds i16, i16* %10121, i64 %17693
  %17695 = load i16, i16* %17694, align 2, !tbaa !382
  %17696 = insertelement <64 x i16> %17691, i16 %17695, i32 59
  %17697 = extractelement <64 x i32> %17396, i32 60
  %17698 = sext i32 %17697 to i64
  %17699 = getelementptr inbounds i16, i16* %10121, i64 %17698
  %17700 = load i16, i16* %17699, align 2, !tbaa !382
  %17701 = insertelement <64 x i16> %17696, i16 %17700, i32 60
  %17702 = extractelement <64 x i32> %17396, i32 61
  %17703 = sext i32 %17702 to i64
  %17704 = getelementptr inbounds i16, i16* %10121, i64 %17703
  %17705 = load i16, i16* %17704, align 2, !tbaa !382
  %17706 = insertelement <64 x i16> %17701, i16 %17705, i32 61
  %17707 = extractelement <64 x i32> %17396, i32 62
  %17708 = sext i32 %17707 to i64
  %17709 = getelementptr inbounds i16, i16* %10121, i64 %17708
  %17710 = load i16, i16* %17709, align 2, !tbaa !382
  %17711 = insertelement <64 x i16> %17706, i16 %17710, i32 62
  %17712 = extractelement <64 x i32> %17396, i32 63
  %17713 = sext i32 %17712 to i64
  %17714 = getelementptr inbounds i16, i16* %10121, i64 %17713
  %17715 = load i16, i16* %17714, align 2, !tbaa !382
  %17716 = insertelement <64 x i16> %17711, i16 %17715, i32 63
  %17717 = add nsw i32 %blur_x.s0.x.v1.base.s94, -62
  %17718 = insertelement <64 x i32> undef, i32 %17717, i32 0
  %17719 = shufflevector <64 x i32> %17718, <64 x i32> undef, <64 x i32> zeroinitializer
  %17720 = add nsw <64 x i32> %17719, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %17721 = shufflevector <64 x i32> %17720, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17722 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17721, <4 x i32> %10120)
  %17723 = shufflevector <64 x i32> %17720, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %17724 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17723, <4 x i32> %10120)
  %17725 = shufflevector <64 x i32> %17720, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %17726 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17725, <4 x i32> %10120)
  %17727 = shufflevector <64 x i32> %17720, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %17728 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17727, <4 x i32> %10120)
  %17729 = shufflevector <64 x i32> %17720, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %17730 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17729, <4 x i32> %10120)
  %17731 = shufflevector <64 x i32> %17720, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %17732 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17731, <4 x i32> %10120)
  %17733 = shufflevector <64 x i32> %17720, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %17734 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17733, <4 x i32> %10120)
  %17735 = shufflevector <64 x i32> %17720, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %17736 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17735, <4 x i32> %10120)
  %17737 = shufflevector <64 x i32> %17720, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %17738 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17737, <4 x i32> %10120)
  %17739 = shufflevector <64 x i32> %17720, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %17740 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17739, <4 x i32> %10120)
  %17741 = shufflevector <64 x i32> %17720, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %17742 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17741, <4 x i32> %10120)
  %17743 = shufflevector <64 x i32> %17720, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %17744 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17743, <4 x i32> %10120)
  %17745 = shufflevector <64 x i32> %17720, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %17746 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17745, <4 x i32> %10120)
  %17747 = shufflevector <64 x i32> %17720, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %17748 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17747, <4 x i32> %10120)
  %17749 = shufflevector <64 x i32> %17720, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %17750 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17749, <4 x i32> %10120)
  %17751 = shufflevector <64 x i32> %17720, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %17752 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17751, <4 x i32> %10120)
  %17753 = shufflevector <4 x i32> %17752, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17754 = shufflevector <8 x i32> %17753, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %17755 = shufflevector <16 x i32> %17754, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %17756 = shufflevector <32 x i32> %17755, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %17757 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17722, <4 x i32> zeroinitializer)
  %17758 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17724, <4 x i32> zeroinitializer)
  %17759 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17726, <4 x i32> zeroinitializer)
  %17760 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17728, <4 x i32> zeroinitializer)
  %17761 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17730, <4 x i32> zeroinitializer)
  %17762 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17732, <4 x i32> zeroinitializer)
  %17763 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17734, <4 x i32> zeroinitializer)
  %17764 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17736, <4 x i32> zeroinitializer)
  %17765 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17738, <4 x i32> zeroinitializer)
  %17766 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17740, <4 x i32> zeroinitializer)
  %17767 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17742, <4 x i32> zeroinitializer)
  %17768 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17744, <4 x i32> zeroinitializer)
  %17769 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17746, <4 x i32> zeroinitializer)
  %17770 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17748, <4 x i32> zeroinitializer)
  %17771 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17750, <4 x i32> zeroinitializer)
  %17772 = shufflevector <64 x i32> %17756, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %17773 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17772, <4 x i32> zeroinitializer)
  %17774 = shufflevector <4 x i32> %17757, <4 x i32> %17758, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17775 = shufflevector <4 x i32> %17759, <4 x i32> %17760, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17776 = shufflevector <4 x i32> %17761, <4 x i32> %17762, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17777 = shufflevector <4 x i32> %17763, <4 x i32> %17764, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17778 = shufflevector <4 x i32> %17765, <4 x i32> %17766, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17779 = shufflevector <4 x i32> %17767, <4 x i32> %17768, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17780 = shufflevector <4 x i32> %17769, <4 x i32> %17770, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17781 = shufflevector <4 x i32> %17771, <4 x i32> %17773, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17782 = shufflevector <8 x i32> %17774, <8 x i32> %17775, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17783 = shufflevector <8 x i32> %17776, <8 x i32> %17777, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17784 = shufflevector <8 x i32> %17778, <8 x i32> %17779, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17785 = shufflevector <8 x i32> %17780, <8 x i32> %17781, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17786 = shufflevector <16 x i32> %17782, <16 x i32> %17783, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17787 = shufflevector <16 x i32> %17784, <16 x i32> %17785, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17788 = shufflevector <32 x i32> %17786, <32 x i32> %17787, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %17789 = add nsw <64 x i32> %17788, %t25795
  %17790 = extractelement <64 x i32> %17789, i32 0
  %17791 = sext i32 %17790 to i64
  %17792 = getelementptr inbounds i16, i16* %10121, i64 %17791
  %17793 = load i16, i16* %17792, align 2, !tbaa !382
  %17794 = insertelement <64 x i16> undef, i16 %17793, i32 0
  %17795 = extractelement <64 x i32> %17789, i32 1
  %17796 = sext i32 %17795 to i64
  %17797 = getelementptr inbounds i16, i16* %10121, i64 %17796
  %17798 = load i16, i16* %17797, align 2, !tbaa !382
  %17799 = insertelement <64 x i16> %17794, i16 %17798, i32 1
  %17800 = extractelement <64 x i32> %17789, i32 2
  %17801 = sext i32 %17800 to i64
  %17802 = getelementptr inbounds i16, i16* %10121, i64 %17801
  %17803 = load i16, i16* %17802, align 2, !tbaa !382
  %17804 = insertelement <64 x i16> %17799, i16 %17803, i32 2
  %17805 = extractelement <64 x i32> %17789, i32 3
  %17806 = sext i32 %17805 to i64
  %17807 = getelementptr inbounds i16, i16* %10121, i64 %17806
  %17808 = load i16, i16* %17807, align 2, !tbaa !382
  %17809 = insertelement <64 x i16> %17804, i16 %17808, i32 3
  %17810 = extractelement <64 x i32> %17789, i32 4
  %17811 = sext i32 %17810 to i64
  %17812 = getelementptr inbounds i16, i16* %10121, i64 %17811
  %17813 = load i16, i16* %17812, align 2, !tbaa !382
  %17814 = insertelement <64 x i16> %17809, i16 %17813, i32 4
  %17815 = extractelement <64 x i32> %17789, i32 5
  %17816 = sext i32 %17815 to i64
  %17817 = getelementptr inbounds i16, i16* %10121, i64 %17816
  %17818 = load i16, i16* %17817, align 2, !tbaa !382
  %17819 = insertelement <64 x i16> %17814, i16 %17818, i32 5
  %17820 = extractelement <64 x i32> %17789, i32 6
  %17821 = sext i32 %17820 to i64
  %17822 = getelementptr inbounds i16, i16* %10121, i64 %17821
  %17823 = load i16, i16* %17822, align 2, !tbaa !382
  %17824 = insertelement <64 x i16> %17819, i16 %17823, i32 6
  %17825 = extractelement <64 x i32> %17789, i32 7
  %17826 = sext i32 %17825 to i64
  %17827 = getelementptr inbounds i16, i16* %10121, i64 %17826
  %17828 = load i16, i16* %17827, align 2, !tbaa !382
  %17829 = insertelement <64 x i16> %17824, i16 %17828, i32 7
  %17830 = extractelement <64 x i32> %17789, i32 8
  %17831 = sext i32 %17830 to i64
  %17832 = getelementptr inbounds i16, i16* %10121, i64 %17831
  %17833 = load i16, i16* %17832, align 2, !tbaa !382
  %17834 = insertelement <64 x i16> %17829, i16 %17833, i32 8
  %17835 = extractelement <64 x i32> %17789, i32 9
  %17836 = sext i32 %17835 to i64
  %17837 = getelementptr inbounds i16, i16* %10121, i64 %17836
  %17838 = load i16, i16* %17837, align 2, !tbaa !382
  %17839 = insertelement <64 x i16> %17834, i16 %17838, i32 9
  %17840 = extractelement <64 x i32> %17789, i32 10
  %17841 = sext i32 %17840 to i64
  %17842 = getelementptr inbounds i16, i16* %10121, i64 %17841
  %17843 = load i16, i16* %17842, align 2, !tbaa !382
  %17844 = insertelement <64 x i16> %17839, i16 %17843, i32 10
  %17845 = extractelement <64 x i32> %17789, i32 11
  %17846 = sext i32 %17845 to i64
  %17847 = getelementptr inbounds i16, i16* %10121, i64 %17846
  %17848 = load i16, i16* %17847, align 2, !tbaa !382
  %17849 = insertelement <64 x i16> %17844, i16 %17848, i32 11
  %17850 = extractelement <64 x i32> %17789, i32 12
  %17851 = sext i32 %17850 to i64
  %17852 = getelementptr inbounds i16, i16* %10121, i64 %17851
  %17853 = load i16, i16* %17852, align 2, !tbaa !382
  %17854 = insertelement <64 x i16> %17849, i16 %17853, i32 12
  %17855 = extractelement <64 x i32> %17789, i32 13
  %17856 = sext i32 %17855 to i64
  %17857 = getelementptr inbounds i16, i16* %10121, i64 %17856
  %17858 = load i16, i16* %17857, align 2, !tbaa !382
  %17859 = insertelement <64 x i16> %17854, i16 %17858, i32 13
  %17860 = extractelement <64 x i32> %17789, i32 14
  %17861 = sext i32 %17860 to i64
  %17862 = getelementptr inbounds i16, i16* %10121, i64 %17861
  %17863 = load i16, i16* %17862, align 2, !tbaa !382
  %17864 = insertelement <64 x i16> %17859, i16 %17863, i32 14
  %17865 = extractelement <64 x i32> %17789, i32 15
  %17866 = sext i32 %17865 to i64
  %17867 = getelementptr inbounds i16, i16* %10121, i64 %17866
  %17868 = load i16, i16* %17867, align 2, !tbaa !382
  %17869 = insertelement <64 x i16> %17864, i16 %17868, i32 15
  %17870 = extractelement <64 x i32> %17789, i32 16
  %17871 = sext i32 %17870 to i64
  %17872 = getelementptr inbounds i16, i16* %10121, i64 %17871
  %17873 = load i16, i16* %17872, align 2, !tbaa !382
  %17874 = insertelement <64 x i16> %17869, i16 %17873, i32 16
  %17875 = extractelement <64 x i32> %17789, i32 17
  %17876 = sext i32 %17875 to i64
  %17877 = getelementptr inbounds i16, i16* %10121, i64 %17876
  %17878 = load i16, i16* %17877, align 2, !tbaa !382
  %17879 = insertelement <64 x i16> %17874, i16 %17878, i32 17
  %17880 = extractelement <64 x i32> %17789, i32 18
  %17881 = sext i32 %17880 to i64
  %17882 = getelementptr inbounds i16, i16* %10121, i64 %17881
  %17883 = load i16, i16* %17882, align 2, !tbaa !382
  %17884 = insertelement <64 x i16> %17879, i16 %17883, i32 18
  %17885 = extractelement <64 x i32> %17789, i32 19
  %17886 = sext i32 %17885 to i64
  %17887 = getelementptr inbounds i16, i16* %10121, i64 %17886
  %17888 = load i16, i16* %17887, align 2, !tbaa !382
  %17889 = insertelement <64 x i16> %17884, i16 %17888, i32 19
  %17890 = extractelement <64 x i32> %17789, i32 20
  %17891 = sext i32 %17890 to i64
  %17892 = getelementptr inbounds i16, i16* %10121, i64 %17891
  %17893 = load i16, i16* %17892, align 2, !tbaa !382
  %17894 = insertelement <64 x i16> %17889, i16 %17893, i32 20
  %17895 = extractelement <64 x i32> %17789, i32 21
  %17896 = sext i32 %17895 to i64
  %17897 = getelementptr inbounds i16, i16* %10121, i64 %17896
  %17898 = load i16, i16* %17897, align 2, !tbaa !382
  %17899 = insertelement <64 x i16> %17894, i16 %17898, i32 21
  %17900 = extractelement <64 x i32> %17789, i32 22
  %17901 = sext i32 %17900 to i64
  %17902 = getelementptr inbounds i16, i16* %10121, i64 %17901
  %17903 = load i16, i16* %17902, align 2, !tbaa !382
  %17904 = insertelement <64 x i16> %17899, i16 %17903, i32 22
  %17905 = extractelement <64 x i32> %17789, i32 23
  %17906 = sext i32 %17905 to i64
  %17907 = getelementptr inbounds i16, i16* %10121, i64 %17906
  %17908 = load i16, i16* %17907, align 2, !tbaa !382
  %17909 = insertelement <64 x i16> %17904, i16 %17908, i32 23
  %17910 = extractelement <64 x i32> %17789, i32 24
  %17911 = sext i32 %17910 to i64
  %17912 = getelementptr inbounds i16, i16* %10121, i64 %17911
  %17913 = load i16, i16* %17912, align 2, !tbaa !382
  %17914 = insertelement <64 x i16> %17909, i16 %17913, i32 24
  %17915 = extractelement <64 x i32> %17789, i32 25
  %17916 = sext i32 %17915 to i64
  %17917 = getelementptr inbounds i16, i16* %10121, i64 %17916
  %17918 = load i16, i16* %17917, align 2, !tbaa !382
  %17919 = insertelement <64 x i16> %17914, i16 %17918, i32 25
  %17920 = extractelement <64 x i32> %17789, i32 26
  %17921 = sext i32 %17920 to i64
  %17922 = getelementptr inbounds i16, i16* %10121, i64 %17921
  %17923 = load i16, i16* %17922, align 2, !tbaa !382
  %17924 = insertelement <64 x i16> %17919, i16 %17923, i32 26
  %17925 = extractelement <64 x i32> %17789, i32 27
  %17926 = sext i32 %17925 to i64
  %17927 = getelementptr inbounds i16, i16* %10121, i64 %17926
  %17928 = load i16, i16* %17927, align 2, !tbaa !382
  %17929 = insertelement <64 x i16> %17924, i16 %17928, i32 27
  %17930 = extractelement <64 x i32> %17789, i32 28
  %17931 = sext i32 %17930 to i64
  %17932 = getelementptr inbounds i16, i16* %10121, i64 %17931
  %17933 = load i16, i16* %17932, align 2, !tbaa !382
  %17934 = insertelement <64 x i16> %17929, i16 %17933, i32 28
  %17935 = extractelement <64 x i32> %17789, i32 29
  %17936 = sext i32 %17935 to i64
  %17937 = getelementptr inbounds i16, i16* %10121, i64 %17936
  %17938 = load i16, i16* %17937, align 2, !tbaa !382
  %17939 = insertelement <64 x i16> %17934, i16 %17938, i32 29
  %17940 = extractelement <64 x i32> %17789, i32 30
  %17941 = sext i32 %17940 to i64
  %17942 = getelementptr inbounds i16, i16* %10121, i64 %17941
  %17943 = load i16, i16* %17942, align 2, !tbaa !382
  %17944 = insertelement <64 x i16> %17939, i16 %17943, i32 30
  %17945 = extractelement <64 x i32> %17789, i32 31
  %17946 = sext i32 %17945 to i64
  %17947 = getelementptr inbounds i16, i16* %10121, i64 %17946
  %17948 = load i16, i16* %17947, align 2, !tbaa !382
  %17949 = insertelement <64 x i16> %17944, i16 %17948, i32 31
  %17950 = extractelement <64 x i32> %17789, i32 32
  %17951 = sext i32 %17950 to i64
  %17952 = getelementptr inbounds i16, i16* %10121, i64 %17951
  %17953 = load i16, i16* %17952, align 2, !tbaa !382
  %17954 = insertelement <64 x i16> %17949, i16 %17953, i32 32
  %17955 = extractelement <64 x i32> %17789, i32 33
  %17956 = sext i32 %17955 to i64
  %17957 = getelementptr inbounds i16, i16* %10121, i64 %17956
  %17958 = load i16, i16* %17957, align 2, !tbaa !382
  %17959 = insertelement <64 x i16> %17954, i16 %17958, i32 33
  %17960 = extractelement <64 x i32> %17789, i32 34
  %17961 = sext i32 %17960 to i64
  %17962 = getelementptr inbounds i16, i16* %10121, i64 %17961
  %17963 = load i16, i16* %17962, align 2, !tbaa !382
  %17964 = insertelement <64 x i16> %17959, i16 %17963, i32 34
  %17965 = extractelement <64 x i32> %17789, i32 35
  %17966 = sext i32 %17965 to i64
  %17967 = getelementptr inbounds i16, i16* %10121, i64 %17966
  %17968 = load i16, i16* %17967, align 2, !tbaa !382
  %17969 = insertelement <64 x i16> %17964, i16 %17968, i32 35
  %17970 = extractelement <64 x i32> %17789, i32 36
  %17971 = sext i32 %17970 to i64
  %17972 = getelementptr inbounds i16, i16* %10121, i64 %17971
  %17973 = load i16, i16* %17972, align 2, !tbaa !382
  %17974 = insertelement <64 x i16> %17969, i16 %17973, i32 36
  %17975 = extractelement <64 x i32> %17789, i32 37
  %17976 = sext i32 %17975 to i64
  %17977 = getelementptr inbounds i16, i16* %10121, i64 %17976
  %17978 = load i16, i16* %17977, align 2, !tbaa !382
  %17979 = insertelement <64 x i16> %17974, i16 %17978, i32 37
  %17980 = extractelement <64 x i32> %17789, i32 38
  %17981 = sext i32 %17980 to i64
  %17982 = getelementptr inbounds i16, i16* %10121, i64 %17981
  %17983 = load i16, i16* %17982, align 2, !tbaa !382
  %17984 = insertelement <64 x i16> %17979, i16 %17983, i32 38
  %17985 = extractelement <64 x i32> %17789, i32 39
  %17986 = sext i32 %17985 to i64
  %17987 = getelementptr inbounds i16, i16* %10121, i64 %17986
  %17988 = load i16, i16* %17987, align 2, !tbaa !382
  %17989 = insertelement <64 x i16> %17984, i16 %17988, i32 39
  %17990 = extractelement <64 x i32> %17789, i32 40
  %17991 = sext i32 %17990 to i64
  %17992 = getelementptr inbounds i16, i16* %10121, i64 %17991
  %17993 = load i16, i16* %17992, align 2, !tbaa !382
  %17994 = insertelement <64 x i16> %17989, i16 %17993, i32 40
  %17995 = extractelement <64 x i32> %17789, i32 41
  %17996 = sext i32 %17995 to i64
  %17997 = getelementptr inbounds i16, i16* %10121, i64 %17996
  %17998 = load i16, i16* %17997, align 2, !tbaa !382
  %17999 = insertelement <64 x i16> %17994, i16 %17998, i32 41
  %18000 = extractelement <64 x i32> %17789, i32 42
  %18001 = sext i32 %18000 to i64
  %18002 = getelementptr inbounds i16, i16* %10121, i64 %18001
  %18003 = load i16, i16* %18002, align 2, !tbaa !382
  %18004 = insertelement <64 x i16> %17999, i16 %18003, i32 42
  %18005 = extractelement <64 x i32> %17789, i32 43
  %18006 = sext i32 %18005 to i64
  %18007 = getelementptr inbounds i16, i16* %10121, i64 %18006
  %18008 = load i16, i16* %18007, align 2, !tbaa !382
  %18009 = insertelement <64 x i16> %18004, i16 %18008, i32 43
  %18010 = extractelement <64 x i32> %17789, i32 44
  %18011 = sext i32 %18010 to i64
  %18012 = getelementptr inbounds i16, i16* %10121, i64 %18011
  %18013 = load i16, i16* %18012, align 2, !tbaa !382
  %18014 = insertelement <64 x i16> %18009, i16 %18013, i32 44
  %18015 = extractelement <64 x i32> %17789, i32 45
  %18016 = sext i32 %18015 to i64
  %18017 = getelementptr inbounds i16, i16* %10121, i64 %18016
  %18018 = load i16, i16* %18017, align 2, !tbaa !382
  %18019 = insertelement <64 x i16> %18014, i16 %18018, i32 45
  %18020 = extractelement <64 x i32> %17789, i32 46
  %18021 = sext i32 %18020 to i64
  %18022 = getelementptr inbounds i16, i16* %10121, i64 %18021
  %18023 = load i16, i16* %18022, align 2, !tbaa !382
  %18024 = insertelement <64 x i16> %18019, i16 %18023, i32 46
  %18025 = extractelement <64 x i32> %17789, i32 47
  %18026 = sext i32 %18025 to i64
  %18027 = getelementptr inbounds i16, i16* %10121, i64 %18026
  %18028 = load i16, i16* %18027, align 2, !tbaa !382
  %18029 = insertelement <64 x i16> %18024, i16 %18028, i32 47
  %18030 = extractelement <64 x i32> %17789, i32 48
  %18031 = sext i32 %18030 to i64
  %18032 = getelementptr inbounds i16, i16* %10121, i64 %18031
  %18033 = load i16, i16* %18032, align 2, !tbaa !382
  %18034 = insertelement <64 x i16> %18029, i16 %18033, i32 48
  %18035 = extractelement <64 x i32> %17789, i32 49
  %18036 = sext i32 %18035 to i64
  %18037 = getelementptr inbounds i16, i16* %10121, i64 %18036
  %18038 = load i16, i16* %18037, align 2, !tbaa !382
  %18039 = insertelement <64 x i16> %18034, i16 %18038, i32 49
  %18040 = extractelement <64 x i32> %17789, i32 50
  %18041 = sext i32 %18040 to i64
  %18042 = getelementptr inbounds i16, i16* %10121, i64 %18041
  %18043 = load i16, i16* %18042, align 2, !tbaa !382
  %18044 = insertelement <64 x i16> %18039, i16 %18043, i32 50
  %18045 = extractelement <64 x i32> %17789, i32 51
  %18046 = sext i32 %18045 to i64
  %18047 = getelementptr inbounds i16, i16* %10121, i64 %18046
  %18048 = load i16, i16* %18047, align 2, !tbaa !382
  %18049 = insertelement <64 x i16> %18044, i16 %18048, i32 51
  %18050 = extractelement <64 x i32> %17789, i32 52
  %18051 = sext i32 %18050 to i64
  %18052 = getelementptr inbounds i16, i16* %10121, i64 %18051
  %18053 = load i16, i16* %18052, align 2, !tbaa !382
  %18054 = insertelement <64 x i16> %18049, i16 %18053, i32 52
  %18055 = extractelement <64 x i32> %17789, i32 53
  %18056 = sext i32 %18055 to i64
  %18057 = getelementptr inbounds i16, i16* %10121, i64 %18056
  %18058 = load i16, i16* %18057, align 2, !tbaa !382
  %18059 = insertelement <64 x i16> %18054, i16 %18058, i32 53
  %18060 = extractelement <64 x i32> %17789, i32 54
  %18061 = sext i32 %18060 to i64
  %18062 = getelementptr inbounds i16, i16* %10121, i64 %18061
  %18063 = load i16, i16* %18062, align 2, !tbaa !382
  %18064 = insertelement <64 x i16> %18059, i16 %18063, i32 54
  %18065 = extractelement <64 x i32> %17789, i32 55
  %18066 = sext i32 %18065 to i64
  %18067 = getelementptr inbounds i16, i16* %10121, i64 %18066
  %18068 = load i16, i16* %18067, align 2, !tbaa !382
  %18069 = insertelement <64 x i16> %18064, i16 %18068, i32 55
  %18070 = extractelement <64 x i32> %17789, i32 56
  %18071 = sext i32 %18070 to i64
  %18072 = getelementptr inbounds i16, i16* %10121, i64 %18071
  %18073 = load i16, i16* %18072, align 2, !tbaa !382
  %18074 = insertelement <64 x i16> %18069, i16 %18073, i32 56
  %18075 = extractelement <64 x i32> %17789, i32 57
  %18076 = sext i32 %18075 to i64
  %18077 = getelementptr inbounds i16, i16* %10121, i64 %18076
  %18078 = load i16, i16* %18077, align 2, !tbaa !382
  %18079 = insertelement <64 x i16> %18074, i16 %18078, i32 57
  %18080 = extractelement <64 x i32> %17789, i32 58
  %18081 = sext i32 %18080 to i64
  %18082 = getelementptr inbounds i16, i16* %10121, i64 %18081
  %18083 = load i16, i16* %18082, align 2, !tbaa !382
  %18084 = insertelement <64 x i16> %18079, i16 %18083, i32 58
  %18085 = extractelement <64 x i32> %17789, i32 59
  %18086 = sext i32 %18085 to i64
  %18087 = getelementptr inbounds i16, i16* %10121, i64 %18086
  %18088 = load i16, i16* %18087, align 2, !tbaa !382
  %18089 = insertelement <64 x i16> %18084, i16 %18088, i32 59
  %18090 = extractelement <64 x i32> %17789, i32 60
  %18091 = sext i32 %18090 to i64
  %18092 = getelementptr inbounds i16, i16* %10121, i64 %18091
  %18093 = load i16, i16* %18092, align 2, !tbaa !382
  %18094 = insertelement <64 x i16> %18089, i16 %18093, i32 60
  %18095 = extractelement <64 x i32> %17789, i32 61
  %18096 = sext i32 %18095 to i64
  %18097 = getelementptr inbounds i16, i16* %10121, i64 %18096
  %18098 = load i16, i16* %18097, align 2, !tbaa !382
  %18099 = insertelement <64 x i16> %18094, i16 %18098, i32 61
  %18100 = extractelement <64 x i32> %17789, i32 62
  %18101 = sext i32 %18100 to i64
  %18102 = getelementptr inbounds i16, i16* %10121, i64 %18101
  %18103 = load i16, i16* %18102, align 2, !tbaa !382
  %18104 = insertelement <64 x i16> %18099, i16 %18103, i32 62
  %18105 = extractelement <64 x i32> %17789, i32 63
  %18106 = sext i32 %18105 to i64
  %18107 = getelementptr inbounds i16, i16* %10121, i64 %18106
  %18108 = load i16, i16* %18107, align 2, !tbaa !382
  %18109 = insertelement <64 x i16> %18104, i16 %18108, i32 63
  %18110 = add nsw i32 %blur_x.s0.x.v1.base.s94, -61
  %18111 = insertelement <64 x i32> undef, i32 %18110, i32 0
  %18112 = shufflevector <64 x i32> %18111, <64 x i32> undef, <64 x i32> zeroinitializer
  %18113 = add nsw <64 x i32> %18112, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %18114 = shufflevector <64 x i32> %18113, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18115 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18114, <4 x i32> %10120)
  %18116 = shufflevector <64 x i32> %18113, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %18117 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18116, <4 x i32> %10120)
  %18118 = shufflevector <64 x i32> %18113, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %18119 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18118, <4 x i32> %10120)
  %18120 = shufflevector <64 x i32> %18113, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %18121 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18120, <4 x i32> %10120)
  %18122 = shufflevector <64 x i32> %18113, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %18123 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18122, <4 x i32> %10120)
  %18124 = shufflevector <64 x i32> %18113, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %18125 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18124, <4 x i32> %10120)
  %18126 = shufflevector <64 x i32> %18113, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %18127 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18126, <4 x i32> %10120)
  %18128 = shufflevector <64 x i32> %18113, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %18129 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18128, <4 x i32> %10120)
  %18130 = shufflevector <64 x i32> %18113, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %18131 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18130, <4 x i32> %10120)
  %18132 = shufflevector <64 x i32> %18113, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %18133 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18132, <4 x i32> %10120)
  %18134 = shufflevector <64 x i32> %18113, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %18135 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18134, <4 x i32> %10120)
  %18136 = shufflevector <64 x i32> %18113, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %18137 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18136, <4 x i32> %10120)
  %18138 = shufflevector <64 x i32> %18113, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %18139 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18138, <4 x i32> %10120)
  %18140 = shufflevector <64 x i32> %18113, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %18141 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18140, <4 x i32> %10120)
  %18142 = shufflevector <64 x i32> %18113, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %18143 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18142, <4 x i32> %10120)
  %18144 = shufflevector <64 x i32> %18113, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %18145 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18144, <4 x i32> %10120)
  %18146 = shufflevector <4 x i32> %18145, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %18147 = shufflevector <8 x i32> %18146, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %18148 = shufflevector <16 x i32> %18147, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %18149 = shufflevector <32 x i32> %18148, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %18150 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18115, <4 x i32> zeroinitializer)
  %18151 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18117, <4 x i32> zeroinitializer)
  %18152 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18119, <4 x i32> zeroinitializer)
  %18153 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18121, <4 x i32> zeroinitializer)
  %18154 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18123, <4 x i32> zeroinitializer)
  %18155 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18125, <4 x i32> zeroinitializer)
  %18156 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18127, <4 x i32> zeroinitializer)
  %18157 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18129, <4 x i32> zeroinitializer)
  %18158 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18131, <4 x i32> zeroinitializer)
  %18159 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18133, <4 x i32> zeroinitializer)
  %18160 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18135, <4 x i32> zeroinitializer)
  %18161 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18137, <4 x i32> zeroinitializer)
  %18162 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18139, <4 x i32> zeroinitializer)
  %18163 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18141, <4 x i32> zeroinitializer)
  %18164 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18143, <4 x i32> zeroinitializer)
  %18165 = shufflevector <64 x i32> %18149, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %18166 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18165, <4 x i32> zeroinitializer)
  %18167 = shufflevector <4 x i32> %18150, <4 x i32> %18151, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18168 = shufflevector <4 x i32> %18152, <4 x i32> %18153, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18169 = shufflevector <4 x i32> %18154, <4 x i32> %18155, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18170 = shufflevector <4 x i32> %18156, <4 x i32> %18157, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18171 = shufflevector <4 x i32> %18158, <4 x i32> %18159, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18172 = shufflevector <4 x i32> %18160, <4 x i32> %18161, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18173 = shufflevector <4 x i32> %18162, <4 x i32> %18163, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18174 = shufflevector <4 x i32> %18164, <4 x i32> %18166, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18175 = shufflevector <8 x i32> %18167, <8 x i32> %18168, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18176 = shufflevector <8 x i32> %18169, <8 x i32> %18170, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18177 = shufflevector <8 x i32> %18171, <8 x i32> %18172, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18178 = shufflevector <8 x i32> %18173, <8 x i32> %18174, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18179 = shufflevector <16 x i32> %18175, <16 x i32> %18176, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18180 = shufflevector <16 x i32> %18177, <16 x i32> %18178, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18181 = shufflevector <32 x i32> %18179, <32 x i32> %18180, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %18182 = add nsw <64 x i32> %18181, %t25795
  %18183 = extractelement <64 x i32> %18182, i32 0
  %18184 = sext i32 %18183 to i64
  %18185 = getelementptr inbounds i16, i16* %10121, i64 %18184
  %18186 = load i16, i16* %18185, align 2, !tbaa !382
  %18187 = insertelement <64 x i16> undef, i16 %18186, i32 0
  %18188 = extractelement <64 x i32> %18182, i32 1
  %18189 = sext i32 %18188 to i64
  %18190 = getelementptr inbounds i16, i16* %10121, i64 %18189
  %18191 = load i16, i16* %18190, align 2, !tbaa !382
  %18192 = insertelement <64 x i16> %18187, i16 %18191, i32 1
  %18193 = extractelement <64 x i32> %18182, i32 2
  %18194 = sext i32 %18193 to i64
  %18195 = getelementptr inbounds i16, i16* %10121, i64 %18194
  %18196 = load i16, i16* %18195, align 2, !tbaa !382
  %18197 = insertelement <64 x i16> %18192, i16 %18196, i32 2
  %18198 = extractelement <64 x i32> %18182, i32 3
  %18199 = sext i32 %18198 to i64
  %18200 = getelementptr inbounds i16, i16* %10121, i64 %18199
  %18201 = load i16, i16* %18200, align 2, !tbaa !382
  %18202 = insertelement <64 x i16> %18197, i16 %18201, i32 3
  %18203 = extractelement <64 x i32> %18182, i32 4
  %18204 = sext i32 %18203 to i64
  %18205 = getelementptr inbounds i16, i16* %10121, i64 %18204
  %18206 = load i16, i16* %18205, align 2, !tbaa !382
  %18207 = insertelement <64 x i16> %18202, i16 %18206, i32 4
  %18208 = extractelement <64 x i32> %18182, i32 5
  %18209 = sext i32 %18208 to i64
  %18210 = getelementptr inbounds i16, i16* %10121, i64 %18209
  %18211 = load i16, i16* %18210, align 2, !tbaa !382
  %18212 = insertelement <64 x i16> %18207, i16 %18211, i32 5
  %18213 = extractelement <64 x i32> %18182, i32 6
  %18214 = sext i32 %18213 to i64
  %18215 = getelementptr inbounds i16, i16* %10121, i64 %18214
  %18216 = load i16, i16* %18215, align 2, !tbaa !382
  %18217 = insertelement <64 x i16> %18212, i16 %18216, i32 6
  %18218 = extractelement <64 x i32> %18182, i32 7
  %18219 = sext i32 %18218 to i64
  %18220 = getelementptr inbounds i16, i16* %10121, i64 %18219
  %18221 = load i16, i16* %18220, align 2, !tbaa !382
  %18222 = insertelement <64 x i16> %18217, i16 %18221, i32 7
  %18223 = extractelement <64 x i32> %18182, i32 8
  %18224 = sext i32 %18223 to i64
  %18225 = getelementptr inbounds i16, i16* %10121, i64 %18224
  %18226 = load i16, i16* %18225, align 2, !tbaa !382
  %18227 = insertelement <64 x i16> %18222, i16 %18226, i32 8
  %18228 = extractelement <64 x i32> %18182, i32 9
  %18229 = sext i32 %18228 to i64
  %18230 = getelementptr inbounds i16, i16* %10121, i64 %18229
  %18231 = load i16, i16* %18230, align 2, !tbaa !382
  %18232 = insertelement <64 x i16> %18227, i16 %18231, i32 9
  %18233 = extractelement <64 x i32> %18182, i32 10
  %18234 = sext i32 %18233 to i64
  %18235 = getelementptr inbounds i16, i16* %10121, i64 %18234
  %18236 = load i16, i16* %18235, align 2, !tbaa !382
  %18237 = insertelement <64 x i16> %18232, i16 %18236, i32 10
  %18238 = extractelement <64 x i32> %18182, i32 11
  %18239 = sext i32 %18238 to i64
  %18240 = getelementptr inbounds i16, i16* %10121, i64 %18239
  %18241 = load i16, i16* %18240, align 2, !tbaa !382
  %18242 = insertelement <64 x i16> %18237, i16 %18241, i32 11
  %18243 = extractelement <64 x i32> %18182, i32 12
  %18244 = sext i32 %18243 to i64
  %18245 = getelementptr inbounds i16, i16* %10121, i64 %18244
  %18246 = load i16, i16* %18245, align 2, !tbaa !382
  %18247 = insertelement <64 x i16> %18242, i16 %18246, i32 12
  %18248 = extractelement <64 x i32> %18182, i32 13
  %18249 = sext i32 %18248 to i64
  %18250 = getelementptr inbounds i16, i16* %10121, i64 %18249
  %18251 = load i16, i16* %18250, align 2, !tbaa !382
  %18252 = insertelement <64 x i16> %18247, i16 %18251, i32 13
  %18253 = extractelement <64 x i32> %18182, i32 14
  %18254 = sext i32 %18253 to i64
  %18255 = getelementptr inbounds i16, i16* %10121, i64 %18254
  %18256 = load i16, i16* %18255, align 2, !tbaa !382
  %18257 = insertelement <64 x i16> %18252, i16 %18256, i32 14
  %18258 = extractelement <64 x i32> %18182, i32 15
  %18259 = sext i32 %18258 to i64
  %18260 = getelementptr inbounds i16, i16* %10121, i64 %18259
  %18261 = load i16, i16* %18260, align 2, !tbaa !382
  %18262 = insertelement <64 x i16> %18257, i16 %18261, i32 15
  %18263 = extractelement <64 x i32> %18182, i32 16
  %18264 = sext i32 %18263 to i64
  %18265 = getelementptr inbounds i16, i16* %10121, i64 %18264
  %18266 = load i16, i16* %18265, align 2, !tbaa !382
  %18267 = insertelement <64 x i16> %18262, i16 %18266, i32 16
  %18268 = extractelement <64 x i32> %18182, i32 17
  %18269 = sext i32 %18268 to i64
  %18270 = getelementptr inbounds i16, i16* %10121, i64 %18269
  %18271 = load i16, i16* %18270, align 2, !tbaa !382
  %18272 = insertelement <64 x i16> %18267, i16 %18271, i32 17
  %18273 = extractelement <64 x i32> %18182, i32 18
  %18274 = sext i32 %18273 to i64
  %18275 = getelementptr inbounds i16, i16* %10121, i64 %18274
  %18276 = load i16, i16* %18275, align 2, !tbaa !382
  %18277 = insertelement <64 x i16> %18272, i16 %18276, i32 18
  %18278 = extractelement <64 x i32> %18182, i32 19
  %18279 = sext i32 %18278 to i64
  %18280 = getelementptr inbounds i16, i16* %10121, i64 %18279
  %18281 = load i16, i16* %18280, align 2, !tbaa !382
  %18282 = insertelement <64 x i16> %18277, i16 %18281, i32 19
  %18283 = extractelement <64 x i32> %18182, i32 20
  %18284 = sext i32 %18283 to i64
  %18285 = getelementptr inbounds i16, i16* %10121, i64 %18284
  %18286 = load i16, i16* %18285, align 2, !tbaa !382
  %18287 = insertelement <64 x i16> %18282, i16 %18286, i32 20
  %18288 = extractelement <64 x i32> %18182, i32 21
  %18289 = sext i32 %18288 to i64
  %18290 = getelementptr inbounds i16, i16* %10121, i64 %18289
  %18291 = load i16, i16* %18290, align 2, !tbaa !382
  %18292 = insertelement <64 x i16> %18287, i16 %18291, i32 21
  %18293 = extractelement <64 x i32> %18182, i32 22
  %18294 = sext i32 %18293 to i64
  %18295 = getelementptr inbounds i16, i16* %10121, i64 %18294
  %18296 = load i16, i16* %18295, align 2, !tbaa !382
  %18297 = insertelement <64 x i16> %18292, i16 %18296, i32 22
  %18298 = extractelement <64 x i32> %18182, i32 23
  %18299 = sext i32 %18298 to i64
  %18300 = getelementptr inbounds i16, i16* %10121, i64 %18299
  %18301 = load i16, i16* %18300, align 2, !tbaa !382
  %18302 = insertelement <64 x i16> %18297, i16 %18301, i32 23
  %18303 = extractelement <64 x i32> %18182, i32 24
  %18304 = sext i32 %18303 to i64
  %18305 = getelementptr inbounds i16, i16* %10121, i64 %18304
  %18306 = load i16, i16* %18305, align 2, !tbaa !382
  %18307 = insertelement <64 x i16> %18302, i16 %18306, i32 24
  %18308 = extractelement <64 x i32> %18182, i32 25
  %18309 = sext i32 %18308 to i64
  %18310 = getelementptr inbounds i16, i16* %10121, i64 %18309
  %18311 = load i16, i16* %18310, align 2, !tbaa !382
  %18312 = insertelement <64 x i16> %18307, i16 %18311, i32 25
  %18313 = extractelement <64 x i32> %18182, i32 26
  %18314 = sext i32 %18313 to i64
  %18315 = getelementptr inbounds i16, i16* %10121, i64 %18314
  %18316 = load i16, i16* %18315, align 2, !tbaa !382
  %18317 = insertelement <64 x i16> %18312, i16 %18316, i32 26
  %18318 = extractelement <64 x i32> %18182, i32 27
  %18319 = sext i32 %18318 to i64
  %18320 = getelementptr inbounds i16, i16* %10121, i64 %18319
  %18321 = load i16, i16* %18320, align 2, !tbaa !382
  %18322 = insertelement <64 x i16> %18317, i16 %18321, i32 27
  %18323 = extractelement <64 x i32> %18182, i32 28
  %18324 = sext i32 %18323 to i64
  %18325 = getelementptr inbounds i16, i16* %10121, i64 %18324
  %18326 = load i16, i16* %18325, align 2, !tbaa !382
  %18327 = insertelement <64 x i16> %18322, i16 %18326, i32 28
  %18328 = extractelement <64 x i32> %18182, i32 29
  %18329 = sext i32 %18328 to i64
  %18330 = getelementptr inbounds i16, i16* %10121, i64 %18329
  %18331 = load i16, i16* %18330, align 2, !tbaa !382
  %18332 = insertelement <64 x i16> %18327, i16 %18331, i32 29
  %18333 = extractelement <64 x i32> %18182, i32 30
  %18334 = sext i32 %18333 to i64
  %18335 = getelementptr inbounds i16, i16* %10121, i64 %18334
  %18336 = load i16, i16* %18335, align 2, !tbaa !382
  %18337 = insertelement <64 x i16> %18332, i16 %18336, i32 30
  %18338 = extractelement <64 x i32> %18182, i32 31
  %18339 = sext i32 %18338 to i64
  %18340 = getelementptr inbounds i16, i16* %10121, i64 %18339
  %18341 = load i16, i16* %18340, align 2, !tbaa !382
  %18342 = insertelement <64 x i16> %18337, i16 %18341, i32 31
  %18343 = extractelement <64 x i32> %18182, i32 32
  %18344 = sext i32 %18343 to i64
  %18345 = getelementptr inbounds i16, i16* %10121, i64 %18344
  %18346 = load i16, i16* %18345, align 2, !tbaa !382
  %18347 = insertelement <64 x i16> %18342, i16 %18346, i32 32
  %18348 = extractelement <64 x i32> %18182, i32 33
  %18349 = sext i32 %18348 to i64
  %18350 = getelementptr inbounds i16, i16* %10121, i64 %18349
  %18351 = load i16, i16* %18350, align 2, !tbaa !382
  %18352 = insertelement <64 x i16> %18347, i16 %18351, i32 33
  %18353 = extractelement <64 x i32> %18182, i32 34
  %18354 = sext i32 %18353 to i64
  %18355 = getelementptr inbounds i16, i16* %10121, i64 %18354
  %18356 = load i16, i16* %18355, align 2, !tbaa !382
  %18357 = insertelement <64 x i16> %18352, i16 %18356, i32 34
  %18358 = extractelement <64 x i32> %18182, i32 35
  %18359 = sext i32 %18358 to i64
  %18360 = getelementptr inbounds i16, i16* %10121, i64 %18359
  %18361 = load i16, i16* %18360, align 2, !tbaa !382
  %18362 = insertelement <64 x i16> %18357, i16 %18361, i32 35
  %18363 = extractelement <64 x i32> %18182, i32 36
  %18364 = sext i32 %18363 to i64
  %18365 = getelementptr inbounds i16, i16* %10121, i64 %18364
  %18366 = load i16, i16* %18365, align 2, !tbaa !382
  %18367 = insertelement <64 x i16> %18362, i16 %18366, i32 36
  %18368 = extractelement <64 x i32> %18182, i32 37
  %18369 = sext i32 %18368 to i64
  %18370 = getelementptr inbounds i16, i16* %10121, i64 %18369
  %18371 = load i16, i16* %18370, align 2, !tbaa !382
  %18372 = insertelement <64 x i16> %18367, i16 %18371, i32 37
  %18373 = extractelement <64 x i32> %18182, i32 38
  %18374 = sext i32 %18373 to i64
  %18375 = getelementptr inbounds i16, i16* %10121, i64 %18374
  %18376 = load i16, i16* %18375, align 2, !tbaa !382
  %18377 = insertelement <64 x i16> %18372, i16 %18376, i32 38
  %18378 = extractelement <64 x i32> %18182, i32 39
  %18379 = sext i32 %18378 to i64
  %18380 = getelementptr inbounds i16, i16* %10121, i64 %18379
  %18381 = load i16, i16* %18380, align 2, !tbaa !382
  %18382 = insertelement <64 x i16> %18377, i16 %18381, i32 39
  %18383 = extractelement <64 x i32> %18182, i32 40
  %18384 = sext i32 %18383 to i64
  %18385 = getelementptr inbounds i16, i16* %10121, i64 %18384
  %18386 = load i16, i16* %18385, align 2, !tbaa !382
  %18387 = insertelement <64 x i16> %18382, i16 %18386, i32 40
  %18388 = extractelement <64 x i32> %18182, i32 41
  %18389 = sext i32 %18388 to i64
  %18390 = getelementptr inbounds i16, i16* %10121, i64 %18389
  %18391 = load i16, i16* %18390, align 2, !tbaa !382
  %18392 = insertelement <64 x i16> %18387, i16 %18391, i32 41
  %18393 = extractelement <64 x i32> %18182, i32 42
  %18394 = sext i32 %18393 to i64
  %18395 = getelementptr inbounds i16, i16* %10121, i64 %18394
  %18396 = load i16, i16* %18395, align 2, !tbaa !382
  %18397 = insertelement <64 x i16> %18392, i16 %18396, i32 42
  %18398 = extractelement <64 x i32> %18182, i32 43
  %18399 = sext i32 %18398 to i64
  %18400 = getelementptr inbounds i16, i16* %10121, i64 %18399
  %18401 = load i16, i16* %18400, align 2, !tbaa !382
  %18402 = insertelement <64 x i16> %18397, i16 %18401, i32 43
  %18403 = extractelement <64 x i32> %18182, i32 44
  %18404 = sext i32 %18403 to i64
  %18405 = getelementptr inbounds i16, i16* %10121, i64 %18404
  %18406 = load i16, i16* %18405, align 2, !tbaa !382
  %18407 = insertelement <64 x i16> %18402, i16 %18406, i32 44
  %18408 = extractelement <64 x i32> %18182, i32 45
  %18409 = sext i32 %18408 to i64
  %18410 = getelementptr inbounds i16, i16* %10121, i64 %18409
  %18411 = load i16, i16* %18410, align 2, !tbaa !382
  %18412 = insertelement <64 x i16> %18407, i16 %18411, i32 45
  %18413 = extractelement <64 x i32> %18182, i32 46
  %18414 = sext i32 %18413 to i64
  %18415 = getelementptr inbounds i16, i16* %10121, i64 %18414
  %18416 = load i16, i16* %18415, align 2, !tbaa !382
  %18417 = insertelement <64 x i16> %18412, i16 %18416, i32 46
  %18418 = extractelement <64 x i32> %18182, i32 47
  %18419 = sext i32 %18418 to i64
  %18420 = getelementptr inbounds i16, i16* %10121, i64 %18419
  %18421 = load i16, i16* %18420, align 2, !tbaa !382
  %18422 = insertelement <64 x i16> %18417, i16 %18421, i32 47
  %18423 = extractelement <64 x i32> %18182, i32 48
  %18424 = sext i32 %18423 to i64
  %18425 = getelementptr inbounds i16, i16* %10121, i64 %18424
  %18426 = load i16, i16* %18425, align 2, !tbaa !382
  %18427 = insertelement <64 x i16> %18422, i16 %18426, i32 48
  %18428 = extractelement <64 x i32> %18182, i32 49
  %18429 = sext i32 %18428 to i64
  %18430 = getelementptr inbounds i16, i16* %10121, i64 %18429
  %18431 = load i16, i16* %18430, align 2, !tbaa !382
  %18432 = insertelement <64 x i16> %18427, i16 %18431, i32 49
  %18433 = extractelement <64 x i32> %18182, i32 50
  %18434 = sext i32 %18433 to i64
  %18435 = getelementptr inbounds i16, i16* %10121, i64 %18434
  %18436 = load i16, i16* %18435, align 2, !tbaa !382
  %18437 = insertelement <64 x i16> %18432, i16 %18436, i32 50
  %18438 = extractelement <64 x i32> %18182, i32 51
  %18439 = sext i32 %18438 to i64
  %18440 = getelementptr inbounds i16, i16* %10121, i64 %18439
  %18441 = load i16, i16* %18440, align 2, !tbaa !382
  %18442 = insertelement <64 x i16> %18437, i16 %18441, i32 51
  %18443 = extractelement <64 x i32> %18182, i32 52
  %18444 = sext i32 %18443 to i64
  %18445 = getelementptr inbounds i16, i16* %10121, i64 %18444
  %18446 = load i16, i16* %18445, align 2, !tbaa !382
  %18447 = insertelement <64 x i16> %18442, i16 %18446, i32 52
  %18448 = extractelement <64 x i32> %18182, i32 53
  %18449 = sext i32 %18448 to i64
  %18450 = getelementptr inbounds i16, i16* %10121, i64 %18449
  %18451 = load i16, i16* %18450, align 2, !tbaa !382
  %18452 = insertelement <64 x i16> %18447, i16 %18451, i32 53
  %18453 = extractelement <64 x i32> %18182, i32 54
  %18454 = sext i32 %18453 to i64
  %18455 = getelementptr inbounds i16, i16* %10121, i64 %18454
  %18456 = load i16, i16* %18455, align 2, !tbaa !382
  %18457 = insertelement <64 x i16> %18452, i16 %18456, i32 54
  %18458 = extractelement <64 x i32> %18182, i32 55
  %18459 = sext i32 %18458 to i64
  %18460 = getelementptr inbounds i16, i16* %10121, i64 %18459
  %18461 = load i16, i16* %18460, align 2, !tbaa !382
  %18462 = insertelement <64 x i16> %18457, i16 %18461, i32 55
  %18463 = extractelement <64 x i32> %18182, i32 56
  %18464 = sext i32 %18463 to i64
  %18465 = getelementptr inbounds i16, i16* %10121, i64 %18464
  %18466 = load i16, i16* %18465, align 2, !tbaa !382
  %18467 = insertelement <64 x i16> %18462, i16 %18466, i32 56
  %18468 = extractelement <64 x i32> %18182, i32 57
  %18469 = sext i32 %18468 to i64
  %18470 = getelementptr inbounds i16, i16* %10121, i64 %18469
  %18471 = load i16, i16* %18470, align 2, !tbaa !382
  %18472 = insertelement <64 x i16> %18467, i16 %18471, i32 57
  %18473 = extractelement <64 x i32> %18182, i32 58
  %18474 = sext i32 %18473 to i64
  %18475 = getelementptr inbounds i16, i16* %10121, i64 %18474
  %18476 = load i16, i16* %18475, align 2, !tbaa !382
  %18477 = insertelement <64 x i16> %18472, i16 %18476, i32 58
  %18478 = extractelement <64 x i32> %18182, i32 59
  %18479 = sext i32 %18478 to i64
  %18480 = getelementptr inbounds i16, i16* %10121, i64 %18479
  %18481 = load i16, i16* %18480, align 2, !tbaa !382
  %18482 = insertelement <64 x i16> %18477, i16 %18481, i32 59
  %18483 = extractelement <64 x i32> %18182, i32 60
  %18484 = sext i32 %18483 to i64
  %18485 = getelementptr inbounds i16, i16* %10121, i64 %18484
  %18486 = load i16, i16* %18485, align 2, !tbaa !382
  %18487 = insertelement <64 x i16> %18482, i16 %18486, i32 60
  %18488 = extractelement <64 x i32> %18182, i32 61
  %18489 = sext i32 %18488 to i64
  %18490 = getelementptr inbounds i16, i16* %10121, i64 %18489
  %18491 = load i16, i16* %18490, align 2, !tbaa !382
  %18492 = insertelement <64 x i16> %18487, i16 %18491, i32 61
  %18493 = extractelement <64 x i32> %18182, i32 62
  %18494 = sext i32 %18493 to i64
  %18495 = getelementptr inbounds i16, i16* %10121, i64 %18494
  %18496 = load i16, i16* %18495, align 2, !tbaa !382
  %18497 = insertelement <64 x i16> %18492, i16 %18496, i32 62
  %18498 = extractelement <64 x i32> %18182, i32 63
  %18499 = sext i32 %18498 to i64
  %18500 = getelementptr inbounds i16, i16* %10121, i64 %18499
  %18501 = load i16, i16* %18500, align 2, !tbaa !382
  %18502 = insertelement <64 x i16> %18497, i16 %18501, i32 63
  %18503 = add nsw i32 %blur_x.s0.x.v1.base.s94, -60
  %18504 = insertelement <64 x i32> undef, i32 %18503, i32 0
  %18505 = shufflevector <64 x i32> %18504, <64 x i32> undef, <64 x i32> zeroinitializer
  %18506 = add nsw <64 x i32> %18505, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %18507 = shufflevector <64 x i32> %18506, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18508 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18507, <4 x i32> %10120)
  %18509 = shufflevector <64 x i32> %18506, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %18510 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18509, <4 x i32> %10120)
  %18511 = shufflevector <64 x i32> %18506, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %18512 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18511, <4 x i32> %10120)
  %18513 = shufflevector <64 x i32> %18506, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %18514 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18513, <4 x i32> %10120)
  %18515 = shufflevector <64 x i32> %18506, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %18516 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18515, <4 x i32> %10120)
  %18517 = shufflevector <64 x i32> %18506, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %18518 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18517, <4 x i32> %10120)
  %18519 = shufflevector <64 x i32> %18506, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %18520 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18519, <4 x i32> %10120)
  %18521 = shufflevector <64 x i32> %18506, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %18522 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18521, <4 x i32> %10120)
  %18523 = shufflevector <64 x i32> %18506, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %18524 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18523, <4 x i32> %10120)
  %18525 = shufflevector <64 x i32> %18506, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %18526 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18525, <4 x i32> %10120)
  %18527 = shufflevector <64 x i32> %18506, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %18528 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18527, <4 x i32> %10120)
  %18529 = shufflevector <64 x i32> %18506, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %18530 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18529, <4 x i32> %10120)
  %18531 = shufflevector <64 x i32> %18506, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %18532 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18531, <4 x i32> %10120)
  %18533 = shufflevector <64 x i32> %18506, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %18534 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18533, <4 x i32> %10120)
  %18535 = shufflevector <64 x i32> %18506, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %18536 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18535, <4 x i32> %10120)
  %18537 = shufflevector <64 x i32> %18506, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %18538 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18537, <4 x i32> %10120)
  %18539 = shufflevector <4 x i32> %18538, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %18540 = shufflevector <8 x i32> %18539, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %18541 = shufflevector <16 x i32> %18540, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %18542 = shufflevector <32 x i32> %18541, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %18543 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18508, <4 x i32> zeroinitializer)
  %18544 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18510, <4 x i32> zeroinitializer)
  %18545 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18512, <4 x i32> zeroinitializer)
  %18546 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18514, <4 x i32> zeroinitializer)
  %18547 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18516, <4 x i32> zeroinitializer)
  %18548 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18518, <4 x i32> zeroinitializer)
  %18549 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18520, <4 x i32> zeroinitializer)
  %18550 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18522, <4 x i32> zeroinitializer)
  %18551 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18524, <4 x i32> zeroinitializer)
  %18552 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18526, <4 x i32> zeroinitializer)
  %18553 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18528, <4 x i32> zeroinitializer)
  %18554 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18530, <4 x i32> zeroinitializer)
  %18555 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18532, <4 x i32> zeroinitializer)
  %18556 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18534, <4 x i32> zeroinitializer)
  %18557 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18536, <4 x i32> zeroinitializer)
  %18558 = shufflevector <64 x i32> %18542, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %18559 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18558, <4 x i32> zeroinitializer)
  %18560 = shufflevector <4 x i32> %18543, <4 x i32> %18544, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18561 = shufflevector <4 x i32> %18545, <4 x i32> %18546, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18562 = shufflevector <4 x i32> %18547, <4 x i32> %18548, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18563 = shufflevector <4 x i32> %18549, <4 x i32> %18550, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18564 = shufflevector <4 x i32> %18551, <4 x i32> %18552, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18565 = shufflevector <4 x i32> %18553, <4 x i32> %18554, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18566 = shufflevector <4 x i32> %18555, <4 x i32> %18556, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18567 = shufflevector <4 x i32> %18557, <4 x i32> %18559, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18568 = shufflevector <8 x i32> %18560, <8 x i32> %18561, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18569 = shufflevector <8 x i32> %18562, <8 x i32> %18563, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18570 = shufflevector <8 x i32> %18564, <8 x i32> %18565, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18571 = shufflevector <8 x i32> %18566, <8 x i32> %18567, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18572 = shufflevector <16 x i32> %18568, <16 x i32> %18569, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18573 = shufflevector <16 x i32> %18570, <16 x i32> %18571, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18574 = shufflevector <32 x i32> %18572, <32 x i32> %18573, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %18575 = add nsw <64 x i32> %18574, %t25795
  %18576 = extractelement <64 x i32> %18575, i32 0
  %18577 = sext i32 %18576 to i64
  %18578 = getelementptr inbounds i16, i16* %10121, i64 %18577
  %18579 = load i16, i16* %18578, align 2, !tbaa !382
  %18580 = insertelement <64 x i16> undef, i16 %18579, i32 0
  %18581 = extractelement <64 x i32> %18575, i32 1
  %18582 = sext i32 %18581 to i64
  %18583 = getelementptr inbounds i16, i16* %10121, i64 %18582
  %18584 = load i16, i16* %18583, align 2, !tbaa !382
  %18585 = insertelement <64 x i16> %18580, i16 %18584, i32 1
  %18586 = extractelement <64 x i32> %18575, i32 2
  %18587 = sext i32 %18586 to i64
  %18588 = getelementptr inbounds i16, i16* %10121, i64 %18587
  %18589 = load i16, i16* %18588, align 2, !tbaa !382
  %18590 = insertelement <64 x i16> %18585, i16 %18589, i32 2
  %18591 = extractelement <64 x i32> %18575, i32 3
  %18592 = sext i32 %18591 to i64
  %18593 = getelementptr inbounds i16, i16* %10121, i64 %18592
  %18594 = load i16, i16* %18593, align 2, !tbaa !382
  %18595 = insertelement <64 x i16> %18590, i16 %18594, i32 3
  %18596 = extractelement <64 x i32> %18575, i32 4
  %18597 = sext i32 %18596 to i64
  %18598 = getelementptr inbounds i16, i16* %10121, i64 %18597
  %18599 = load i16, i16* %18598, align 2, !tbaa !382
  %18600 = insertelement <64 x i16> %18595, i16 %18599, i32 4
  %18601 = extractelement <64 x i32> %18575, i32 5
  %18602 = sext i32 %18601 to i64
  %18603 = getelementptr inbounds i16, i16* %10121, i64 %18602
  %18604 = load i16, i16* %18603, align 2, !tbaa !382
  %18605 = insertelement <64 x i16> %18600, i16 %18604, i32 5
  %18606 = extractelement <64 x i32> %18575, i32 6
  %18607 = sext i32 %18606 to i64
  %18608 = getelementptr inbounds i16, i16* %10121, i64 %18607
  %18609 = load i16, i16* %18608, align 2, !tbaa !382
  %18610 = insertelement <64 x i16> %18605, i16 %18609, i32 6
  %18611 = extractelement <64 x i32> %18575, i32 7
  %18612 = sext i32 %18611 to i64
  %18613 = getelementptr inbounds i16, i16* %10121, i64 %18612
  %18614 = load i16, i16* %18613, align 2, !tbaa !382
  %18615 = insertelement <64 x i16> %18610, i16 %18614, i32 7
  %18616 = extractelement <64 x i32> %18575, i32 8
  %18617 = sext i32 %18616 to i64
  %18618 = getelementptr inbounds i16, i16* %10121, i64 %18617
  %18619 = load i16, i16* %18618, align 2, !tbaa !382
  %18620 = insertelement <64 x i16> %18615, i16 %18619, i32 8
  %18621 = extractelement <64 x i32> %18575, i32 9
  %18622 = sext i32 %18621 to i64
  %18623 = getelementptr inbounds i16, i16* %10121, i64 %18622
  %18624 = load i16, i16* %18623, align 2, !tbaa !382
  %18625 = insertelement <64 x i16> %18620, i16 %18624, i32 9
  %18626 = extractelement <64 x i32> %18575, i32 10
  %18627 = sext i32 %18626 to i64
  %18628 = getelementptr inbounds i16, i16* %10121, i64 %18627
  %18629 = load i16, i16* %18628, align 2, !tbaa !382
  %18630 = insertelement <64 x i16> %18625, i16 %18629, i32 10
  %18631 = extractelement <64 x i32> %18575, i32 11
  %18632 = sext i32 %18631 to i64
  %18633 = getelementptr inbounds i16, i16* %10121, i64 %18632
  %18634 = load i16, i16* %18633, align 2, !tbaa !382
  %18635 = insertelement <64 x i16> %18630, i16 %18634, i32 11
  %18636 = extractelement <64 x i32> %18575, i32 12
  %18637 = sext i32 %18636 to i64
  %18638 = getelementptr inbounds i16, i16* %10121, i64 %18637
  %18639 = load i16, i16* %18638, align 2, !tbaa !382
  %18640 = insertelement <64 x i16> %18635, i16 %18639, i32 12
  %18641 = extractelement <64 x i32> %18575, i32 13
  %18642 = sext i32 %18641 to i64
  %18643 = getelementptr inbounds i16, i16* %10121, i64 %18642
  %18644 = load i16, i16* %18643, align 2, !tbaa !382
  %18645 = insertelement <64 x i16> %18640, i16 %18644, i32 13
  %18646 = extractelement <64 x i32> %18575, i32 14
  %18647 = sext i32 %18646 to i64
  %18648 = getelementptr inbounds i16, i16* %10121, i64 %18647
  %18649 = load i16, i16* %18648, align 2, !tbaa !382
  %18650 = insertelement <64 x i16> %18645, i16 %18649, i32 14
  %18651 = extractelement <64 x i32> %18575, i32 15
  %18652 = sext i32 %18651 to i64
  %18653 = getelementptr inbounds i16, i16* %10121, i64 %18652
  %18654 = load i16, i16* %18653, align 2, !tbaa !382
  %18655 = insertelement <64 x i16> %18650, i16 %18654, i32 15
  %18656 = extractelement <64 x i32> %18575, i32 16
  %18657 = sext i32 %18656 to i64
  %18658 = getelementptr inbounds i16, i16* %10121, i64 %18657
  %18659 = load i16, i16* %18658, align 2, !tbaa !382
  %18660 = insertelement <64 x i16> %18655, i16 %18659, i32 16
  %18661 = extractelement <64 x i32> %18575, i32 17
  %18662 = sext i32 %18661 to i64
  %18663 = getelementptr inbounds i16, i16* %10121, i64 %18662
  %18664 = load i16, i16* %18663, align 2, !tbaa !382
  %18665 = insertelement <64 x i16> %18660, i16 %18664, i32 17
  %18666 = extractelement <64 x i32> %18575, i32 18
  %18667 = sext i32 %18666 to i64
  %18668 = getelementptr inbounds i16, i16* %10121, i64 %18667
  %18669 = load i16, i16* %18668, align 2, !tbaa !382
  %18670 = insertelement <64 x i16> %18665, i16 %18669, i32 18
  %18671 = extractelement <64 x i32> %18575, i32 19
  %18672 = sext i32 %18671 to i64
  %18673 = getelementptr inbounds i16, i16* %10121, i64 %18672
  %18674 = load i16, i16* %18673, align 2, !tbaa !382
  %18675 = insertelement <64 x i16> %18670, i16 %18674, i32 19
  %18676 = extractelement <64 x i32> %18575, i32 20
  %18677 = sext i32 %18676 to i64
  %18678 = getelementptr inbounds i16, i16* %10121, i64 %18677
  %18679 = load i16, i16* %18678, align 2, !tbaa !382
  %18680 = insertelement <64 x i16> %18675, i16 %18679, i32 20
  %18681 = extractelement <64 x i32> %18575, i32 21
  %18682 = sext i32 %18681 to i64
  %18683 = getelementptr inbounds i16, i16* %10121, i64 %18682
  %18684 = load i16, i16* %18683, align 2, !tbaa !382
  %18685 = insertelement <64 x i16> %18680, i16 %18684, i32 21
  %18686 = extractelement <64 x i32> %18575, i32 22
  %18687 = sext i32 %18686 to i64
  %18688 = getelementptr inbounds i16, i16* %10121, i64 %18687
  %18689 = load i16, i16* %18688, align 2, !tbaa !382
  %18690 = insertelement <64 x i16> %18685, i16 %18689, i32 22
  %18691 = extractelement <64 x i32> %18575, i32 23
  %18692 = sext i32 %18691 to i64
  %18693 = getelementptr inbounds i16, i16* %10121, i64 %18692
  %18694 = load i16, i16* %18693, align 2, !tbaa !382
  %18695 = insertelement <64 x i16> %18690, i16 %18694, i32 23
  %18696 = extractelement <64 x i32> %18575, i32 24
  %18697 = sext i32 %18696 to i64
  %18698 = getelementptr inbounds i16, i16* %10121, i64 %18697
  %18699 = load i16, i16* %18698, align 2, !tbaa !382
  %18700 = insertelement <64 x i16> %18695, i16 %18699, i32 24
  %18701 = extractelement <64 x i32> %18575, i32 25
  %18702 = sext i32 %18701 to i64
  %18703 = getelementptr inbounds i16, i16* %10121, i64 %18702
  %18704 = load i16, i16* %18703, align 2, !tbaa !382
  %18705 = insertelement <64 x i16> %18700, i16 %18704, i32 25
  %18706 = extractelement <64 x i32> %18575, i32 26
  %18707 = sext i32 %18706 to i64
  %18708 = getelementptr inbounds i16, i16* %10121, i64 %18707
  %18709 = load i16, i16* %18708, align 2, !tbaa !382
  %18710 = insertelement <64 x i16> %18705, i16 %18709, i32 26
  %18711 = extractelement <64 x i32> %18575, i32 27
  %18712 = sext i32 %18711 to i64
  %18713 = getelementptr inbounds i16, i16* %10121, i64 %18712
  %18714 = load i16, i16* %18713, align 2, !tbaa !382
  %18715 = insertelement <64 x i16> %18710, i16 %18714, i32 27
  %18716 = extractelement <64 x i32> %18575, i32 28
  %18717 = sext i32 %18716 to i64
  %18718 = getelementptr inbounds i16, i16* %10121, i64 %18717
  %18719 = load i16, i16* %18718, align 2, !tbaa !382
  %18720 = insertelement <64 x i16> %18715, i16 %18719, i32 28
  %18721 = extractelement <64 x i32> %18575, i32 29
  %18722 = sext i32 %18721 to i64
  %18723 = getelementptr inbounds i16, i16* %10121, i64 %18722
  %18724 = load i16, i16* %18723, align 2, !tbaa !382
  %18725 = insertelement <64 x i16> %18720, i16 %18724, i32 29
  %18726 = extractelement <64 x i32> %18575, i32 30
  %18727 = sext i32 %18726 to i64
  %18728 = getelementptr inbounds i16, i16* %10121, i64 %18727
  %18729 = load i16, i16* %18728, align 2, !tbaa !382
  %18730 = insertelement <64 x i16> %18725, i16 %18729, i32 30
  %18731 = extractelement <64 x i32> %18575, i32 31
  %18732 = sext i32 %18731 to i64
  %18733 = getelementptr inbounds i16, i16* %10121, i64 %18732
  %18734 = load i16, i16* %18733, align 2, !tbaa !382
  %18735 = insertelement <64 x i16> %18730, i16 %18734, i32 31
  %18736 = extractelement <64 x i32> %18575, i32 32
  %18737 = sext i32 %18736 to i64
  %18738 = getelementptr inbounds i16, i16* %10121, i64 %18737
  %18739 = load i16, i16* %18738, align 2, !tbaa !382
  %18740 = insertelement <64 x i16> %18735, i16 %18739, i32 32
  %18741 = extractelement <64 x i32> %18575, i32 33
  %18742 = sext i32 %18741 to i64
  %18743 = getelementptr inbounds i16, i16* %10121, i64 %18742
  %18744 = load i16, i16* %18743, align 2, !tbaa !382
  %18745 = insertelement <64 x i16> %18740, i16 %18744, i32 33
  %18746 = extractelement <64 x i32> %18575, i32 34
  %18747 = sext i32 %18746 to i64
  %18748 = getelementptr inbounds i16, i16* %10121, i64 %18747
  %18749 = load i16, i16* %18748, align 2, !tbaa !382
  %18750 = insertelement <64 x i16> %18745, i16 %18749, i32 34
  %18751 = extractelement <64 x i32> %18575, i32 35
  %18752 = sext i32 %18751 to i64
  %18753 = getelementptr inbounds i16, i16* %10121, i64 %18752
  %18754 = load i16, i16* %18753, align 2, !tbaa !382
  %18755 = insertelement <64 x i16> %18750, i16 %18754, i32 35
  %18756 = extractelement <64 x i32> %18575, i32 36
  %18757 = sext i32 %18756 to i64
  %18758 = getelementptr inbounds i16, i16* %10121, i64 %18757
  %18759 = load i16, i16* %18758, align 2, !tbaa !382
  %18760 = insertelement <64 x i16> %18755, i16 %18759, i32 36
  %18761 = extractelement <64 x i32> %18575, i32 37
  %18762 = sext i32 %18761 to i64
  %18763 = getelementptr inbounds i16, i16* %10121, i64 %18762
  %18764 = load i16, i16* %18763, align 2, !tbaa !382
  %18765 = insertelement <64 x i16> %18760, i16 %18764, i32 37
  %18766 = extractelement <64 x i32> %18575, i32 38
  %18767 = sext i32 %18766 to i64
  %18768 = getelementptr inbounds i16, i16* %10121, i64 %18767
  %18769 = load i16, i16* %18768, align 2, !tbaa !382
  %18770 = insertelement <64 x i16> %18765, i16 %18769, i32 38
  %18771 = extractelement <64 x i32> %18575, i32 39
  %18772 = sext i32 %18771 to i64
  %18773 = getelementptr inbounds i16, i16* %10121, i64 %18772
  %18774 = load i16, i16* %18773, align 2, !tbaa !382
  %18775 = insertelement <64 x i16> %18770, i16 %18774, i32 39
  %18776 = extractelement <64 x i32> %18575, i32 40
  %18777 = sext i32 %18776 to i64
  %18778 = getelementptr inbounds i16, i16* %10121, i64 %18777
  %18779 = load i16, i16* %18778, align 2, !tbaa !382
  %18780 = insertelement <64 x i16> %18775, i16 %18779, i32 40
  %18781 = extractelement <64 x i32> %18575, i32 41
  %18782 = sext i32 %18781 to i64
  %18783 = getelementptr inbounds i16, i16* %10121, i64 %18782
  %18784 = load i16, i16* %18783, align 2, !tbaa !382
  %18785 = insertelement <64 x i16> %18780, i16 %18784, i32 41
  %18786 = extractelement <64 x i32> %18575, i32 42
  %18787 = sext i32 %18786 to i64
  %18788 = getelementptr inbounds i16, i16* %10121, i64 %18787
  %18789 = load i16, i16* %18788, align 2, !tbaa !382
  %18790 = insertelement <64 x i16> %18785, i16 %18789, i32 42
  %18791 = extractelement <64 x i32> %18575, i32 43
  %18792 = sext i32 %18791 to i64
  %18793 = getelementptr inbounds i16, i16* %10121, i64 %18792
  %18794 = load i16, i16* %18793, align 2, !tbaa !382
  %18795 = insertelement <64 x i16> %18790, i16 %18794, i32 43
  %18796 = extractelement <64 x i32> %18575, i32 44
  %18797 = sext i32 %18796 to i64
  %18798 = getelementptr inbounds i16, i16* %10121, i64 %18797
  %18799 = load i16, i16* %18798, align 2, !tbaa !382
  %18800 = insertelement <64 x i16> %18795, i16 %18799, i32 44
  %18801 = extractelement <64 x i32> %18575, i32 45
  %18802 = sext i32 %18801 to i64
  %18803 = getelementptr inbounds i16, i16* %10121, i64 %18802
  %18804 = load i16, i16* %18803, align 2, !tbaa !382
  %18805 = insertelement <64 x i16> %18800, i16 %18804, i32 45
  %18806 = extractelement <64 x i32> %18575, i32 46
  %18807 = sext i32 %18806 to i64
  %18808 = getelementptr inbounds i16, i16* %10121, i64 %18807
  %18809 = load i16, i16* %18808, align 2, !tbaa !382
  %18810 = insertelement <64 x i16> %18805, i16 %18809, i32 46
  %18811 = extractelement <64 x i32> %18575, i32 47
  %18812 = sext i32 %18811 to i64
  %18813 = getelementptr inbounds i16, i16* %10121, i64 %18812
  %18814 = load i16, i16* %18813, align 2, !tbaa !382
  %18815 = insertelement <64 x i16> %18810, i16 %18814, i32 47
  %18816 = extractelement <64 x i32> %18575, i32 48
  %18817 = sext i32 %18816 to i64
  %18818 = getelementptr inbounds i16, i16* %10121, i64 %18817
  %18819 = load i16, i16* %18818, align 2, !tbaa !382
  %18820 = insertelement <64 x i16> %18815, i16 %18819, i32 48
  %18821 = extractelement <64 x i32> %18575, i32 49
  %18822 = sext i32 %18821 to i64
  %18823 = getelementptr inbounds i16, i16* %10121, i64 %18822
  %18824 = load i16, i16* %18823, align 2, !tbaa !382
  %18825 = insertelement <64 x i16> %18820, i16 %18824, i32 49
  %18826 = extractelement <64 x i32> %18575, i32 50
  %18827 = sext i32 %18826 to i64
  %18828 = getelementptr inbounds i16, i16* %10121, i64 %18827
  %18829 = load i16, i16* %18828, align 2, !tbaa !382
  %18830 = insertelement <64 x i16> %18825, i16 %18829, i32 50
  %18831 = extractelement <64 x i32> %18575, i32 51
  %18832 = sext i32 %18831 to i64
  %18833 = getelementptr inbounds i16, i16* %10121, i64 %18832
  %18834 = load i16, i16* %18833, align 2, !tbaa !382
  %18835 = insertelement <64 x i16> %18830, i16 %18834, i32 51
  %18836 = extractelement <64 x i32> %18575, i32 52
  %18837 = sext i32 %18836 to i64
  %18838 = getelementptr inbounds i16, i16* %10121, i64 %18837
  %18839 = load i16, i16* %18838, align 2, !tbaa !382
  %18840 = insertelement <64 x i16> %18835, i16 %18839, i32 52
  %18841 = extractelement <64 x i32> %18575, i32 53
  %18842 = sext i32 %18841 to i64
  %18843 = getelementptr inbounds i16, i16* %10121, i64 %18842
  %18844 = load i16, i16* %18843, align 2, !tbaa !382
  %18845 = insertelement <64 x i16> %18840, i16 %18844, i32 53
  %18846 = extractelement <64 x i32> %18575, i32 54
  %18847 = sext i32 %18846 to i64
  %18848 = getelementptr inbounds i16, i16* %10121, i64 %18847
  %18849 = load i16, i16* %18848, align 2, !tbaa !382
  %18850 = insertelement <64 x i16> %18845, i16 %18849, i32 54
  %18851 = extractelement <64 x i32> %18575, i32 55
  %18852 = sext i32 %18851 to i64
  %18853 = getelementptr inbounds i16, i16* %10121, i64 %18852
  %18854 = load i16, i16* %18853, align 2, !tbaa !382
  %18855 = insertelement <64 x i16> %18850, i16 %18854, i32 55
  %18856 = extractelement <64 x i32> %18575, i32 56
  %18857 = sext i32 %18856 to i64
  %18858 = getelementptr inbounds i16, i16* %10121, i64 %18857
  %18859 = load i16, i16* %18858, align 2, !tbaa !382
  %18860 = insertelement <64 x i16> %18855, i16 %18859, i32 56
  %18861 = extractelement <64 x i32> %18575, i32 57
  %18862 = sext i32 %18861 to i64
  %18863 = getelementptr inbounds i16, i16* %10121, i64 %18862
  %18864 = load i16, i16* %18863, align 2, !tbaa !382
  %18865 = insertelement <64 x i16> %18860, i16 %18864, i32 57
  %18866 = extractelement <64 x i32> %18575, i32 58
  %18867 = sext i32 %18866 to i64
  %18868 = getelementptr inbounds i16, i16* %10121, i64 %18867
  %18869 = load i16, i16* %18868, align 2, !tbaa !382
  %18870 = insertelement <64 x i16> %18865, i16 %18869, i32 58
  %18871 = extractelement <64 x i32> %18575, i32 59
  %18872 = sext i32 %18871 to i64
  %18873 = getelementptr inbounds i16, i16* %10121, i64 %18872
  %18874 = load i16, i16* %18873, align 2, !tbaa !382
  %18875 = insertelement <64 x i16> %18870, i16 %18874, i32 59
  %18876 = extractelement <64 x i32> %18575, i32 60
  %18877 = sext i32 %18876 to i64
  %18878 = getelementptr inbounds i16, i16* %10121, i64 %18877
  %18879 = load i16, i16* %18878, align 2, !tbaa !382
  %18880 = insertelement <64 x i16> %18875, i16 %18879, i32 60
  %18881 = extractelement <64 x i32> %18575, i32 61
  %18882 = sext i32 %18881 to i64
  %18883 = getelementptr inbounds i16, i16* %10121, i64 %18882
  %18884 = load i16, i16* %18883, align 2, !tbaa !382
  %18885 = insertelement <64 x i16> %18880, i16 %18884, i32 61
  %18886 = extractelement <64 x i32> %18575, i32 62
  %18887 = sext i32 %18886 to i64
  %18888 = getelementptr inbounds i16, i16* %10121, i64 %18887
  %18889 = load i16, i16* %18888, align 2, !tbaa !382
  %18890 = insertelement <64 x i16> %18885, i16 %18889, i32 62
  %18891 = extractelement <64 x i32> %18575, i32 63
  %18892 = sext i32 %18891 to i64
  %18893 = getelementptr inbounds i16, i16* %10121, i64 %18892
  %18894 = load i16, i16* %18893, align 2, !tbaa !382
  %18895 = insertelement <64 x i16> %18890, i16 %18894, i32 63
  %18896 = add nsw i32 %blur_x.s0.x.v1.base.s94, -58
  %18897 = insertelement <64 x i32> undef, i32 %18896, i32 0
  %18898 = shufflevector <64 x i32> %18897, <64 x i32> undef, <64 x i32> zeroinitializer
  %18899 = add nsw <64 x i32> %18898, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %18900 = shufflevector <64 x i32> %18899, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18901 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18900, <4 x i32> %10120)
  %18902 = shufflevector <64 x i32> %18899, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %18903 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18902, <4 x i32> %10120)
  %18904 = shufflevector <64 x i32> %18899, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %18905 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18904, <4 x i32> %10120)
  %18906 = shufflevector <64 x i32> %18899, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %18907 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18906, <4 x i32> %10120)
  %18908 = shufflevector <64 x i32> %18899, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %18909 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18908, <4 x i32> %10120)
  %18910 = shufflevector <64 x i32> %18899, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %18911 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18910, <4 x i32> %10120)
  %18912 = shufflevector <64 x i32> %18899, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %18913 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18912, <4 x i32> %10120)
  %18914 = shufflevector <64 x i32> %18899, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %18915 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18914, <4 x i32> %10120)
  %18916 = shufflevector <64 x i32> %18899, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %18917 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18916, <4 x i32> %10120)
  %18918 = shufflevector <64 x i32> %18899, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %18919 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18918, <4 x i32> %10120)
  %18920 = shufflevector <64 x i32> %18899, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %18921 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18920, <4 x i32> %10120)
  %18922 = shufflevector <64 x i32> %18899, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %18923 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18922, <4 x i32> %10120)
  %18924 = shufflevector <64 x i32> %18899, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %18925 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18924, <4 x i32> %10120)
  %18926 = shufflevector <64 x i32> %18899, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %18927 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18926, <4 x i32> %10120)
  %18928 = shufflevector <64 x i32> %18899, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %18929 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18928, <4 x i32> %10120)
  %18930 = shufflevector <64 x i32> %18899, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %18931 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18930, <4 x i32> %10120)
  %18932 = shufflevector <4 x i32> %18931, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %18933 = shufflevector <8 x i32> %18932, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %18934 = shufflevector <16 x i32> %18933, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %18935 = shufflevector <32 x i32> %18934, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %18936 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18901, <4 x i32> zeroinitializer)
  %18937 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18903, <4 x i32> zeroinitializer)
  %18938 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18905, <4 x i32> zeroinitializer)
  %18939 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18907, <4 x i32> zeroinitializer)
  %18940 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18909, <4 x i32> zeroinitializer)
  %18941 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18911, <4 x i32> zeroinitializer)
  %18942 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18913, <4 x i32> zeroinitializer)
  %18943 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18915, <4 x i32> zeroinitializer)
  %18944 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18917, <4 x i32> zeroinitializer)
  %18945 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18919, <4 x i32> zeroinitializer)
  %18946 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18921, <4 x i32> zeroinitializer)
  %18947 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18923, <4 x i32> zeroinitializer)
  %18948 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18925, <4 x i32> zeroinitializer)
  %18949 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18927, <4 x i32> zeroinitializer)
  %18950 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18929, <4 x i32> zeroinitializer)
  %18951 = shufflevector <64 x i32> %18935, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %18952 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18951, <4 x i32> zeroinitializer)
  %18953 = shufflevector <4 x i32> %18936, <4 x i32> %18937, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18954 = shufflevector <4 x i32> %18938, <4 x i32> %18939, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18955 = shufflevector <4 x i32> %18940, <4 x i32> %18941, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18956 = shufflevector <4 x i32> %18942, <4 x i32> %18943, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18957 = shufflevector <4 x i32> %18944, <4 x i32> %18945, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18958 = shufflevector <4 x i32> %18946, <4 x i32> %18947, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18959 = shufflevector <4 x i32> %18948, <4 x i32> %18949, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18960 = shufflevector <4 x i32> %18950, <4 x i32> %18952, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18961 = shufflevector <8 x i32> %18953, <8 x i32> %18954, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18962 = shufflevector <8 x i32> %18955, <8 x i32> %18956, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18963 = shufflevector <8 x i32> %18957, <8 x i32> %18958, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18964 = shufflevector <8 x i32> %18959, <8 x i32> %18960, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18965 = shufflevector <16 x i32> %18961, <16 x i32> %18962, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18966 = shufflevector <16 x i32> %18963, <16 x i32> %18964, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18967 = shufflevector <32 x i32> %18965, <32 x i32> %18966, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %18968 = add nsw <64 x i32> %18967, %t25795
  %18969 = extractelement <64 x i32> %18968, i32 0
  %18970 = sext i32 %18969 to i64
  %18971 = getelementptr inbounds i16, i16* %10121, i64 %18970
  %18972 = load i16, i16* %18971, align 2, !tbaa !382
  %18973 = insertelement <64 x i16> undef, i16 %18972, i32 0
  %18974 = extractelement <64 x i32> %18968, i32 1
  %18975 = sext i32 %18974 to i64
  %18976 = getelementptr inbounds i16, i16* %10121, i64 %18975
  %18977 = load i16, i16* %18976, align 2, !tbaa !382
  %18978 = insertelement <64 x i16> %18973, i16 %18977, i32 1
  %18979 = extractelement <64 x i32> %18968, i32 2
  %18980 = sext i32 %18979 to i64
  %18981 = getelementptr inbounds i16, i16* %10121, i64 %18980
  %18982 = load i16, i16* %18981, align 2, !tbaa !382
  %18983 = insertelement <64 x i16> %18978, i16 %18982, i32 2
  %18984 = extractelement <64 x i32> %18968, i32 3
  %18985 = sext i32 %18984 to i64
  %18986 = getelementptr inbounds i16, i16* %10121, i64 %18985
  %18987 = load i16, i16* %18986, align 2, !tbaa !382
  %18988 = insertelement <64 x i16> %18983, i16 %18987, i32 3
  %18989 = extractelement <64 x i32> %18968, i32 4
  %18990 = sext i32 %18989 to i64
  %18991 = getelementptr inbounds i16, i16* %10121, i64 %18990
  %18992 = load i16, i16* %18991, align 2, !tbaa !382
  %18993 = insertelement <64 x i16> %18988, i16 %18992, i32 4
  %18994 = extractelement <64 x i32> %18968, i32 5
  %18995 = sext i32 %18994 to i64
  %18996 = getelementptr inbounds i16, i16* %10121, i64 %18995
  %18997 = load i16, i16* %18996, align 2, !tbaa !382
  %18998 = insertelement <64 x i16> %18993, i16 %18997, i32 5
  %18999 = extractelement <64 x i32> %18968, i32 6
  %19000 = sext i32 %18999 to i64
  %19001 = getelementptr inbounds i16, i16* %10121, i64 %19000
  %19002 = load i16, i16* %19001, align 2, !tbaa !382
  %19003 = insertelement <64 x i16> %18998, i16 %19002, i32 6
  %19004 = extractelement <64 x i32> %18968, i32 7
  %19005 = sext i32 %19004 to i64
  %19006 = getelementptr inbounds i16, i16* %10121, i64 %19005
  %19007 = load i16, i16* %19006, align 2, !tbaa !382
  %19008 = insertelement <64 x i16> %19003, i16 %19007, i32 7
  %19009 = extractelement <64 x i32> %18968, i32 8
  %19010 = sext i32 %19009 to i64
  %19011 = getelementptr inbounds i16, i16* %10121, i64 %19010
  %19012 = load i16, i16* %19011, align 2, !tbaa !382
  %19013 = insertelement <64 x i16> %19008, i16 %19012, i32 8
  %19014 = extractelement <64 x i32> %18968, i32 9
  %19015 = sext i32 %19014 to i64
  %19016 = getelementptr inbounds i16, i16* %10121, i64 %19015
  %19017 = load i16, i16* %19016, align 2, !tbaa !382
  %19018 = insertelement <64 x i16> %19013, i16 %19017, i32 9
  %19019 = extractelement <64 x i32> %18968, i32 10
  %19020 = sext i32 %19019 to i64
  %19021 = getelementptr inbounds i16, i16* %10121, i64 %19020
  %19022 = load i16, i16* %19021, align 2, !tbaa !382
  %19023 = insertelement <64 x i16> %19018, i16 %19022, i32 10
  %19024 = extractelement <64 x i32> %18968, i32 11
  %19025 = sext i32 %19024 to i64
  %19026 = getelementptr inbounds i16, i16* %10121, i64 %19025
  %19027 = load i16, i16* %19026, align 2, !tbaa !382
  %19028 = insertelement <64 x i16> %19023, i16 %19027, i32 11
  %19029 = extractelement <64 x i32> %18968, i32 12
  %19030 = sext i32 %19029 to i64
  %19031 = getelementptr inbounds i16, i16* %10121, i64 %19030
  %19032 = load i16, i16* %19031, align 2, !tbaa !382
  %19033 = insertelement <64 x i16> %19028, i16 %19032, i32 12
  %19034 = extractelement <64 x i32> %18968, i32 13
  %19035 = sext i32 %19034 to i64
  %19036 = getelementptr inbounds i16, i16* %10121, i64 %19035
  %19037 = load i16, i16* %19036, align 2, !tbaa !382
  %19038 = insertelement <64 x i16> %19033, i16 %19037, i32 13
  %19039 = extractelement <64 x i32> %18968, i32 14
  %19040 = sext i32 %19039 to i64
  %19041 = getelementptr inbounds i16, i16* %10121, i64 %19040
  %19042 = load i16, i16* %19041, align 2, !tbaa !382
  %19043 = insertelement <64 x i16> %19038, i16 %19042, i32 14
  %19044 = extractelement <64 x i32> %18968, i32 15
  %19045 = sext i32 %19044 to i64
  %19046 = getelementptr inbounds i16, i16* %10121, i64 %19045
  %19047 = load i16, i16* %19046, align 2, !tbaa !382
  %19048 = insertelement <64 x i16> %19043, i16 %19047, i32 15
  %19049 = extractelement <64 x i32> %18968, i32 16
  %19050 = sext i32 %19049 to i64
  %19051 = getelementptr inbounds i16, i16* %10121, i64 %19050
  %19052 = load i16, i16* %19051, align 2, !tbaa !382
  %19053 = insertelement <64 x i16> %19048, i16 %19052, i32 16
  %19054 = extractelement <64 x i32> %18968, i32 17
  %19055 = sext i32 %19054 to i64
  %19056 = getelementptr inbounds i16, i16* %10121, i64 %19055
  %19057 = load i16, i16* %19056, align 2, !tbaa !382
  %19058 = insertelement <64 x i16> %19053, i16 %19057, i32 17
  %19059 = extractelement <64 x i32> %18968, i32 18
  %19060 = sext i32 %19059 to i64
  %19061 = getelementptr inbounds i16, i16* %10121, i64 %19060
  %19062 = load i16, i16* %19061, align 2, !tbaa !382
  %19063 = insertelement <64 x i16> %19058, i16 %19062, i32 18
  %19064 = extractelement <64 x i32> %18968, i32 19
  %19065 = sext i32 %19064 to i64
  %19066 = getelementptr inbounds i16, i16* %10121, i64 %19065
  %19067 = load i16, i16* %19066, align 2, !tbaa !382
  %19068 = insertelement <64 x i16> %19063, i16 %19067, i32 19
  %19069 = extractelement <64 x i32> %18968, i32 20
  %19070 = sext i32 %19069 to i64
  %19071 = getelementptr inbounds i16, i16* %10121, i64 %19070
  %19072 = load i16, i16* %19071, align 2, !tbaa !382
  %19073 = insertelement <64 x i16> %19068, i16 %19072, i32 20
  %19074 = extractelement <64 x i32> %18968, i32 21
  %19075 = sext i32 %19074 to i64
  %19076 = getelementptr inbounds i16, i16* %10121, i64 %19075
  %19077 = load i16, i16* %19076, align 2, !tbaa !382
  %19078 = insertelement <64 x i16> %19073, i16 %19077, i32 21
  %19079 = extractelement <64 x i32> %18968, i32 22
  %19080 = sext i32 %19079 to i64
  %19081 = getelementptr inbounds i16, i16* %10121, i64 %19080
  %19082 = load i16, i16* %19081, align 2, !tbaa !382
  %19083 = insertelement <64 x i16> %19078, i16 %19082, i32 22
  %19084 = extractelement <64 x i32> %18968, i32 23
  %19085 = sext i32 %19084 to i64
  %19086 = getelementptr inbounds i16, i16* %10121, i64 %19085
  %19087 = load i16, i16* %19086, align 2, !tbaa !382
  %19088 = insertelement <64 x i16> %19083, i16 %19087, i32 23
  %19089 = extractelement <64 x i32> %18968, i32 24
  %19090 = sext i32 %19089 to i64
  %19091 = getelementptr inbounds i16, i16* %10121, i64 %19090
  %19092 = load i16, i16* %19091, align 2, !tbaa !382
  %19093 = insertelement <64 x i16> %19088, i16 %19092, i32 24
  %19094 = extractelement <64 x i32> %18968, i32 25
  %19095 = sext i32 %19094 to i64
  %19096 = getelementptr inbounds i16, i16* %10121, i64 %19095
  %19097 = load i16, i16* %19096, align 2, !tbaa !382
  %19098 = insertelement <64 x i16> %19093, i16 %19097, i32 25
  %19099 = extractelement <64 x i32> %18968, i32 26
  %19100 = sext i32 %19099 to i64
  %19101 = getelementptr inbounds i16, i16* %10121, i64 %19100
  %19102 = load i16, i16* %19101, align 2, !tbaa !382
  %19103 = insertelement <64 x i16> %19098, i16 %19102, i32 26
  %19104 = extractelement <64 x i32> %18968, i32 27
  %19105 = sext i32 %19104 to i64
  %19106 = getelementptr inbounds i16, i16* %10121, i64 %19105
  %19107 = load i16, i16* %19106, align 2, !tbaa !382
  %19108 = insertelement <64 x i16> %19103, i16 %19107, i32 27
  %19109 = extractelement <64 x i32> %18968, i32 28
  %19110 = sext i32 %19109 to i64
  %19111 = getelementptr inbounds i16, i16* %10121, i64 %19110
  %19112 = load i16, i16* %19111, align 2, !tbaa !382
  %19113 = insertelement <64 x i16> %19108, i16 %19112, i32 28
  %19114 = extractelement <64 x i32> %18968, i32 29
  %19115 = sext i32 %19114 to i64
  %19116 = getelementptr inbounds i16, i16* %10121, i64 %19115
  %19117 = load i16, i16* %19116, align 2, !tbaa !382
  %19118 = insertelement <64 x i16> %19113, i16 %19117, i32 29
  %19119 = extractelement <64 x i32> %18968, i32 30
  %19120 = sext i32 %19119 to i64
  %19121 = getelementptr inbounds i16, i16* %10121, i64 %19120
  %19122 = load i16, i16* %19121, align 2, !tbaa !382
  %19123 = insertelement <64 x i16> %19118, i16 %19122, i32 30
  %19124 = extractelement <64 x i32> %18968, i32 31
  %19125 = sext i32 %19124 to i64
  %19126 = getelementptr inbounds i16, i16* %10121, i64 %19125
  %19127 = load i16, i16* %19126, align 2, !tbaa !382
  %19128 = insertelement <64 x i16> %19123, i16 %19127, i32 31
  %19129 = extractelement <64 x i32> %18968, i32 32
  %19130 = sext i32 %19129 to i64
  %19131 = getelementptr inbounds i16, i16* %10121, i64 %19130
  %19132 = load i16, i16* %19131, align 2, !tbaa !382
  %19133 = insertelement <64 x i16> %19128, i16 %19132, i32 32
  %19134 = extractelement <64 x i32> %18968, i32 33
  %19135 = sext i32 %19134 to i64
  %19136 = getelementptr inbounds i16, i16* %10121, i64 %19135
  %19137 = load i16, i16* %19136, align 2, !tbaa !382
  %19138 = insertelement <64 x i16> %19133, i16 %19137, i32 33
  %19139 = extractelement <64 x i32> %18968, i32 34
  %19140 = sext i32 %19139 to i64
  %19141 = getelementptr inbounds i16, i16* %10121, i64 %19140
  %19142 = load i16, i16* %19141, align 2, !tbaa !382
  %19143 = insertelement <64 x i16> %19138, i16 %19142, i32 34
  %19144 = extractelement <64 x i32> %18968, i32 35
  %19145 = sext i32 %19144 to i64
  %19146 = getelementptr inbounds i16, i16* %10121, i64 %19145
  %19147 = load i16, i16* %19146, align 2, !tbaa !382
  %19148 = insertelement <64 x i16> %19143, i16 %19147, i32 35
  %19149 = extractelement <64 x i32> %18968, i32 36
  %19150 = sext i32 %19149 to i64
  %19151 = getelementptr inbounds i16, i16* %10121, i64 %19150
  %19152 = load i16, i16* %19151, align 2, !tbaa !382
  %19153 = insertelement <64 x i16> %19148, i16 %19152, i32 36
  %19154 = extractelement <64 x i32> %18968, i32 37
  %19155 = sext i32 %19154 to i64
  %19156 = getelementptr inbounds i16, i16* %10121, i64 %19155
  %19157 = load i16, i16* %19156, align 2, !tbaa !382
  %19158 = insertelement <64 x i16> %19153, i16 %19157, i32 37
  %19159 = extractelement <64 x i32> %18968, i32 38
  %19160 = sext i32 %19159 to i64
  %19161 = getelementptr inbounds i16, i16* %10121, i64 %19160
  %19162 = load i16, i16* %19161, align 2, !tbaa !382
  %19163 = insertelement <64 x i16> %19158, i16 %19162, i32 38
  %19164 = extractelement <64 x i32> %18968, i32 39
  %19165 = sext i32 %19164 to i64
  %19166 = getelementptr inbounds i16, i16* %10121, i64 %19165
  %19167 = load i16, i16* %19166, align 2, !tbaa !382
  %19168 = insertelement <64 x i16> %19163, i16 %19167, i32 39
  %19169 = extractelement <64 x i32> %18968, i32 40
  %19170 = sext i32 %19169 to i64
  %19171 = getelementptr inbounds i16, i16* %10121, i64 %19170
  %19172 = load i16, i16* %19171, align 2, !tbaa !382
  %19173 = insertelement <64 x i16> %19168, i16 %19172, i32 40
  %19174 = extractelement <64 x i32> %18968, i32 41
  %19175 = sext i32 %19174 to i64
  %19176 = getelementptr inbounds i16, i16* %10121, i64 %19175
  %19177 = load i16, i16* %19176, align 2, !tbaa !382
  %19178 = insertelement <64 x i16> %19173, i16 %19177, i32 41
  %19179 = extractelement <64 x i32> %18968, i32 42
  %19180 = sext i32 %19179 to i64
  %19181 = getelementptr inbounds i16, i16* %10121, i64 %19180
  %19182 = load i16, i16* %19181, align 2, !tbaa !382
  %19183 = insertelement <64 x i16> %19178, i16 %19182, i32 42
  %19184 = extractelement <64 x i32> %18968, i32 43
  %19185 = sext i32 %19184 to i64
  %19186 = getelementptr inbounds i16, i16* %10121, i64 %19185
  %19187 = load i16, i16* %19186, align 2, !tbaa !382
  %19188 = insertelement <64 x i16> %19183, i16 %19187, i32 43
  %19189 = extractelement <64 x i32> %18968, i32 44
  %19190 = sext i32 %19189 to i64
  %19191 = getelementptr inbounds i16, i16* %10121, i64 %19190
  %19192 = load i16, i16* %19191, align 2, !tbaa !382
  %19193 = insertelement <64 x i16> %19188, i16 %19192, i32 44
  %19194 = extractelement <64 x i32> %18968, i32 45
  %19195 = sext i32 %19194 to i64
  %19196 = getelementptr inbounds i16, i16* %10121, i64 %19195
  %19197 = load i16, i16* %19196, align 2, !tbaa !382
  %19198 = insertelement <64 x i16> %19193, i16 %19197, i32 45
  %19199 = extractelement <64 x i32> %18968, i32 46
  %19200 = sext i32 %19199 to i64
  %19201 = getelementptr inbounds i16, i16* %10121, i64 %19200
  %19202 = load i16, i16* %19201, align 2, !tbaa !382
  %19203 = insertelement <64 x i16> %19198, i16 %19202, i32 46
  %19204 = extractelement <64 x i32> %18968, i32 47
  %19205 = sext i32 %19204 to i64
  %19206 = getelementptr inbounds i16, i16* %10121, i64 %19205
  %19207 = load i16, i16* %19206, align 2, !tbaa !382
  %19208 = insertelement <64 x i16> %19203, i16 %19207, i32 47
  %19209 = extractelement <64 x i32> %18968, i32 48
  %19210 = sext i32 %19209 to i64
  %19211 = getelementptr inbounds i16, i16* %10121, i64 %19210
  %19212 = load i16, i16* %19211, align 2, !tbaa !382
  %19213 = insertelement <64 x i16> %19208, i16 %19212, i32 48
  %19214 = extractelement <64 x i32> %18968, i32 49
  %19215 = sext i32 %19214 to i64
  %19216 = getelementptr inbounds i16, i16* %10121, i64 %19215
  %19217 = load i16, i16* %19216, align 2, !tbaa !382
  %19218 = insertelement <64 x i16> %19213, i16 %19217, i32 49
  %19219 = extractelement <64 x i32> %18968, i32 50
  %19220 = sext i32 %19219 to i64
  %19221 = getelementptr inbounds i16, i16* %10121, i64 %19220
  %19222 = load i16, i16* %19221, align 2, !tbaa !382
  %19223 = insertelement <64 x i16> %19218, i16 %19222, i32 50
  %19224 = extractelement <64 x i32> %18968, i32 51
  %19225 = sext i32 %19224 to i64
  %19226 = getelementptr inbounds i16, i16* %10121, i64 %19225
  %19227 = load i16, i16* %19226, align 2, !tbaa !382
  %19228 = insertelement <64 x i16> %19223, i16 %19227, i32 51
  %19229 = extractelement <64 x i32> %18968, i32 52
  %19230 = sext i32 %19229 to i64
  %19231 = getelementptr inbounds i16, i16* %10121, i64 %19230
  %19232 = load i16, i16* %19231, align 2, !tbaa !382
  %19233 = insertelement <64 x i16> %19228, i16 %19232, i32 52
  %19234 = extractelement <64 x i32> %18968, i32 53
  %19235 = sext i32 %19234 to i64
  %19236 = getelementptr inbounds i16, i16* %10121, i64 %19235
  %19237 = load i16, i16* %19236, align 2, !tbaa !382
  %19238 = insertelement <64 x i16> %19233, i16 %19237, i32 53
  %19239 = extractelement <64 x i32> %18968, i32 54
  %19240 = sext i32 %19239 to i64
  %19241 = getelementptr inbounds i16, i16* %10121, i64 %19240
  %19242 = load i16, i16* %19241, align 2, !tbaa !382
  %19243 = insertelement <64 x i16> %19238, i16 %19242, i32 54
  %19244 = extractelement <64 x i32> %18968, i32 55
  %19245 = sext i32 %19244 to i64
  %19246 = getelementptr inbounds i16, i16* %10121, i64 %19245
  %19247 = load i16, i16* %19246, align 2, !tbaa !382
  %19248 = insertelement <64 x i16> %19243, i16 %19247, i32 55
  %19249 = extractelement <64 x i32> %18968, i32 56
  %19250 = sext i32 %19249 to i64
  %19251 = getelementptr inbounds i16, i16* %10121, i64 %19250
  %19252 = load i16, i16* %19251, align 2, !tbaa !382
  %19253 = insertelement <64 x i16> %19248, i16 %19252, i32 56
  %19254 = extractelement <64 x i32> %18968, i32 57
  %19255 = sext i32 %19254 to i64
  %19256 = getelementptr inbounds i16, i16* %10121, i64 %19255
  %19257 = load i16, i16* %19256, align 2, !tbaa !382
  %19258 = insertelement <64 x i16> %19253, i16 %19257, i32 57
  %19259 = extractelement <64 x i32> %18968, i32 58
  %19260 = sext i32 %19259 to i64
  %19261 = getelementptr inbounds i16, i16* %10121, i64 %19260
  %19262 = load i16, i16* %19261, align 2, !tbaa !382
  %19263 = insertelement <64 x i16> %19258, i16 %19262, i32 58
  %19264 = extractelement <64 x i32> %18968, i32 59
  %19265 = sext i32 %19264 to i64
  %19266 = getelementptr inbounds i16, i16* %10121, i64 %19265
  %19267 = load i16, i16* %19266, align 2, !tbaa !382
  %19268 = insertelement <64 x i16> %19263, i16 %19267, i32 59
  %19269 = extractelement <64 x i32> %18968, i32 60
  %19270 = sext i32 %19269 to i64
  %19271 = getelementptr inbounds i16, i16* %10121, i64 %19270
  %19272 = load i16, i16* %19271, align 2, !tbaa !382
  %19273 = insertelement <64 x i16> %19268, i16 %19272, i32 60
  %19274 = extractelement <64 x i32> %18968, i32 61
  %19275 = sext i32 %19274 to i64
  %19276 = getelementptr inbounds i16, i16* %10121, i64 %19275
  %19277 = load i16, i16* %19276, align 2, !tbaa !382
  %19278 = insertelement <64 x i16> %19273, i16 %19277, i32 61
  %19279 = extractelement <64 x i32> %18968, i32 62
  %19280 = sext i32 %19279 to i64
  %19281 = getelementptr inbounds i16, i16* %10121, i64 %19280
  %19282 = load i16, i16* %19281, align 2, !tbaa !382
  %19283 = insertelement <64 x i16> %19278, i16 %19282, i32 62
  %19284 = extractelement <64 x i32> %18968, i32 63
  %19285 = sext i32 %19284 to i64
  %19286 = getelementptr inbounds i16, i16* %10121, i64 %19285
  %19287 = load i16, i16* %19286, align 2, !tbaa !382
  %19288 = insertelement <64 x i16> %19283, i16 %19287, i32 63
  %19289 = add nsw i32 %blur_x.s0.x.v1.base.s94, -59
  %19290 = insertelement <64 x i32> undef, i32 %19289, i32 0
  %19291 = shufflevector <64 x i32> %19290, <64 x i32> undef, <64 x i32> zeroinitializer
  %19292 = add nsw <64 x i32> %19291, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %19293 = shufflevector <64 x i32> %19292, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19294 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %19293, <4 x i32> %10120)
  %19295 = shufflevector <64 x i32> %19292, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19296 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %19295, <4 x i32> %10120)
  %19297 = shufflevector <64 x i32> %19292, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %19298 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %19297, <4 x i32> %10120)
  %19299 = shufflevector <64 x i32> %19292, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %19300 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %19299, <4 x i32> %10120)
  %19301 = shufflevector <64 x i32> %19292, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %19302 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %19301, <4 x i32> %10120)
  %19303 = shufflevector <64 x i32> %19292, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %19304 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %19303, <4 x i32> %10120)
  %19305 = shufflevector <64 x i32> %19292, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %19306 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %19305, <4 x i32> %10120)
  %19307 = shufflevector <64 x i32> %19292, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %19308 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %19307, <4 x i32> %10120)
  %19309 = shufflevector <64 x i32> %19292, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %19310 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %19309, <4 x i32> %10120)
  %19311 = shufflevector <64 x i32> %19292, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %19312 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %19311, <4 x i32> %10120)
  %19313 = shufflevector <64 x i32> %19292, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %19314 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %19313, <4 x i32> %10120)
  %19315 = shufflevector <64 x i32> %19292, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %19316 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %19315, <4 x i32> %10120)
  %19317 = shufflevector <64 x i32> %19292, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %19318 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %19317, <4 x i32> %10120)
  %19319 = shufflevector <64 x i32> %19292, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %19320 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %19319, <4 x i32> %10120)
  %19321 = shufflevector <64 x i32> %19292, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %19322 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %19321, <4 x i32> %10120)
  %19323 = shufflevector <64 x i32> %19292, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %19324 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %19323, <4 x i32> %10120)
  %19325 = shufflevector <4 x i32> %19324, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %19326 = shufflevector <8 x i32> %19325, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %19327 = shufflevector <16 x i32> %19326, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %19328 = shufflevector <32 x i32> %19327, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %19329 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %19294, <4 x i32> zeroinitializer)
  %19330 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %19296, <4 x i32> zeroinitializer)
  %19331 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %19298, <4 x i32> zeroinitializer)
  %19332 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %19300, <4 x i32> zeroinitializer)
  %19333 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %19302, <4 x i32> zeroinitializer)
  %19334 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %19304, <4 x i32> zeroinitializer)
  %19335 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %19306, <4 x i32> zeroinitializer)
  %19336 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %19308, <4 x i32> zeroinitializer)
  %19337 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %19310, <4 x i32> zeroinitializer)
  %19338 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %19312, <4 x i32> zeroinitializer)
  %19339 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %19314, <4 x i32> zeroinitializer)
  %19340 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %19316, <4 x i32> zeroinitializer)
  %19341 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %19318, <4 x i32> zeroinitializer)
  %19342 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %19320, <4 x i32> zeroinitializer)
  %19343 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %19322, <4 x i32> zeroinitializer)
  %19344 = shufflevector <64 x i32> %19328, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %19345 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %19344, <4 x i32> zeroinitializer)
  %19346 = shufflevector <4 x i32> %19329, <4 x i32> %19330, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19347 = shufflevector <4 x i32> %19331, <4 x i32> %19332, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19348 = shufflevector <4 x i32> %19333, <4 x i32> %19334, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19349 = shufflevector <4 x i32> %19335, <4 x i32> %19336, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19350 = shufflevector <4 x i32> %19337, <4 x i32> %19338, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19351 = shufflevector <4 x i32> %19339, <4 x i32> %19340, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19352 = shufflevector <4 x i32> %19341, <4 x i32> %19342, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19353 = shufflevector <4 x i32> %19343, <4 x i32> %19345, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19354 = shufflevector <8 x i32> %19346, <8 x i32> %19347, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19355 = shufflevector <8 x i32> %19348, <8 x i32> %19349, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19356 = shufflevector <8 x i32> %19350, <8 x i32> %19351, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19357 = shufflevector <8 x i32> %19352, <8 x i32> %19353, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19358 = shufflevector <16 x i32> %19354, <16 x i32> %19355, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19359 = shufflevector <16 x i32> %19356, <16 x i32> %19357, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19360 = shufflevector <32 x i32> %19358, <32 x i32> %19359, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %19361 = add nsw <64 x i32> %19360, %t25795
  %19362 = extractelement <64 x i32> %19361, i32 0
  %19363 = sext i32 %19362 to i64
  %19364 = getelementptr inbounds i16, i16* %10121, i64 %19363
  %19365 = load i16, i16* %19364, align 2, !tbaa !382
  %19366 = insertelement <64 x i16> undef, i16 %19365, i32 0
  %19367 = extractelement <64 x i32> %19361, i32 1
  %19368 = sext i32 %19367 to i64
  %19369 = getelementptr inbounds i16, i16* %10121, i64 %19368
  %19370 = load i16, i16* %19369, align 2, !tbaa !382
  %19371 = insertelement <64 x i16> %19366, i16 %19370, i32 1
  %19372 = extractelement <64 x i32> %19361, i32 2
  %19373 = sext i32 %19372 to i64
  %19374 = getelementptr inbounds i16, i16* %10121, i64 %19373
  %19375 = load i16, i16* %19374, align 2, !tbaa !382
  %19376 = insertelement <64 x i16> %19371, i16 %19375, i32 2
  %19377 = extractelement <64 x i32> %19361, i32 3
  %19378 = sext i32 %19377 to i64
  %19379 = getelementptr inbounds i16, i16* %10121, i64 %19378
  %19380 = load i16, i16* %19379, align 2, !tbaa !382
  %19381 = insertelement <64 x i16> %19376, i16 %19380, i32 3
  %19382 = extractelement <64 x i32> %19361, i32 4
  %19383 = sext i32 %19382 to i64
  %19384 = getelementptr inbounds i16, i16* %10121, i64 %19383
  %19385 = load i16, i16* %19384, align 2, !tbaa !382
  %19386 = insertelement <64 x i16> %19381, i16 %19385, i32 4
  %19387 = extractelement <64 x i32> %19361, i32 5
  %19388 = sext i32 %19387 to i64
  %19389 = getelementptr inbounds i16, i16* %10121, i64 %19388
  %19390 = load i16, i16* %19389, align 2, !tbaa !382
  %19391 = insertelement <64 x i16> %19386, i16 %19390, i32 5
  %19392 = extractelement <64 x i32> %19361, i32 6
  %19393 = sext i32 %19392 to i64
  %19394 = getelementptr inbounds i16, i16* %10121, i64 %19393
  %19395 = load i16, i16* %19394, align 2, !tbaa !382
  %19396 = insertelement <64 x i16> %19391, i16 %19395, i32 6
  %19397 = extractelement <64 x i32> %19361, i32 7
  %19398 = sext i32 %19397 to i64
  %19399 = getelementptr inbounds i16, i16* %10121, i64 %19398
  %19400 = load i16, i16* %19399, align 2, !tbaa !382
  %19401 = insertelement <64 x i16> %19396, i16 %19400, i32 7
  %19402 = extractelement <64 x i32> %19361, i32 8
  %19403 = sext i32 %19402 to i64
  %19404 = getelementptr inbounds i16, i16* %10121, i64 %19403
  %19405 = load i16, i16* %19404, align 2, !tbaa !382
  %19406 = insertelement <64 x i16> %19401, i16 %19405, i32 8
  %19407 = extractelement <64 x i32> %19361, i32 9
  %19408 = sext i32 %19407 to i64
  %19409 = getelementptr inbounds i16, i16* %10121, i64 %19408
  %19410 = load i16, i16* %19409, align 2, !tbaa !382
  %19411 = insertelement <64 x i16> %19406, i16 %19410, i32 9
  %19412 = extractelement <64 x i32> %19361, i32 10
  %19413 = sext i32 %19412 to i64
  %19414 = getelementptr inbounds i16, i16* %10121, i64 %19413
  %19415 = load i16, i16* %19414, align 2, !tbaa !382
  %19416 = insertelement <64 x i16> %19411, i16 %19415, i32 10
  %19417 = extractelement <64 x i32> %19361, i32 11
  %19418 = sext i32 %19417 to i64
  %19419 = getelementptr inbounds i16, i16* %10121, i64 %19418
  %19420 = load i16, i16* %19419, align 2, !tbaa !382
  %19421 = insertelement <64 x i16> %19416, i16 %19420, i32 11
  %19422 = extractelement <64 x i32> %19361, i32 12
  %19423 = sext i32 %19422 to i64
  %19424 = getelementptr inbounds i16, i16* %10121, i64 %19423
  %19425 = load i16, i16* %19424, align 2, !tbaa !382
  %19426 = insertelement <64 x i16> %19421, i16 %19425, i32 12
  %19427 = extractelement <64 x i32> %19361, i32 13
  %19428 = sext i32 %19427 to i64
  %19429 = getelementptr inbounds i16, i16* %10121, i64 %19428
  %19430 = load i16, i16* %19429, align 2, !tbaa !382
  %19431 = insertelement <64 x i16> %19426, i16 %19430, i32 13
  %19432 = extractelement <64 x i32> %19361, i32 14
  %19433 = sext i32 %19432 to i64
  %19434 = getelementptr inbounds i16, i16* %10121, i64 %19433
  %19435 = load i16, i16* %19434, align 2, !tbaa !382
  %19436 = insertelement <64 x i16> %19431, i16 %19435, i32 14
  %19437 = extractelement <64 x i32> %19361, i32 15
  %19438 = sext i32 %19437 to i64
  %19439 = getelementptr inbounds i16, i16* %10121, i64 %19438
  %19440 = load i16, i16* %19439, align 2, !tbaa !382
  %19441 = insertelement <64 x i16> %19436, i16 %19440, i32 15
  %19442 = extractelement <64 x i32> %19361, i32 16
  %19443 = sext i32 %19442 to i64
  %19444 = getelementptr inbounds i16, i16* %10121, i64 %19443
  %19445 = load i16, i16* %19444, align 2, !tbaa !382
  %19446 = insertelement <64 x i16> %19441, i16 %19445, i32 16
  %19447 = extractelement <64 x i32> %19361, i32 17
  %19448 = sext i32 %19447 to i64
  %19449 = getelementptr inbounds i16, i16* %10121, i64 %19448
  %19450 = load i16, i16* %19449, align 2, !tbaa !382
  %19451 = insertelement <64 x i16> %19446, i16 %19450, i32 17
  %19452 = extractelement <64 x i32> %19361, i32 18
  %19453 = sext i32 %19452 to i64
  %19454 = getelementptr inbounds i16, i16* %10121, i64 %19453
  %19455 = load i16, i16* %19454, align 2, !tbaa !382
  %19456 = insertelement <64 x i16> %19451, i16 %19455, i32 18
  %19457 = extractelement <64 x i32> %19361, i32 19
  %19458 = sext i32 %19457 to i64
  %19459 = getelementptr inbounds i16, i16* %10121, i64 %19458
  %19460 = load i16, i16* %19459, align 2, !tbaa !382
  %19461 = insertelement <64 x i16> %19456, i16 %19460, i32 19
  %19462 = extractelement <64 x i32> %19361, i32 20
  %19463 = sext i32 %19462 to i64
  %19464 = getelementptr inbounds i16, i16* %10121, i64 %19463
  %19465 = load i16, i16* %19464, align 2, !tbaa !382
  %19466 = insertelement <64 x i16> %19461, i16 %19465, i32 20
  %19467 = extractelement <64 x i32> %19361, i32 21
  %19468 = sext i32 %19467 to i64
  %19469 = getelementptr inbounds i16, i16* %10121, i64 %19468
  %19470 = load i16, i16* %19469, align 2, !tbaa !382
  %19471 = insertelement <64 x i16> %19466, i16 %19470, i32 21
  %19472 = extractelement <64 x i32> %19361, i32 22
  %19473 = sext i32 %19472 to i64
  %19474 = getelementptr inbounds i16, i16* %10121, i64 %19473
  %19475 = load i16, i16* %19474, align 2, !tbaa !382
  %19476 = insertelement <64 x i16> %19471, i16 %19475, i32 22
  %19477 = extractelement <64 x i32> %19361, i32 23
  %19478 = sext i32 %19477 to i64
  %19479 = getelementptr inbounds i16, i16* %10121, i64 %19478
  %19480 = load i16, i16* %19479, align 2, !tbaa !382
  %19481 = insertelement <64 x i16> %19476, i16 %19480, i32 23
  %19482 = extractelement <64 x i32> %19361, i32 24
  %19483 = sext i32 %19482 to i64
  %19484 = getelementptr inbounds i16, i16* %10121, i64 %19483
  %19485 = load i16, i16* %19484, align 2, !tbaa !382
  %19486 = insertelement <64 x i16> %19481, i16 %19485, i32 24
  %19487 = extractelement <64 x i32> %19361, i32 25
  %19488 = sext i32 %19487 to i64
  %19489 = getelementptr inbounds i16, i16* %10121, i64 %19488
  %19490 = load i16, i16* %19489, align 2, !tbaa !382
  %19491 = insertelement <64 x i16> %19486, i16 %19490, i32 25
  %19492 = extractelement <64 x i32> %19361, i32 26
  %19493 = sext i32 %19492 to i64
  %19494 = getelementptr inbounds i16, i16* %10121, i64 %19493
  %19495 = load i16, i16* %19494, align 2, !tbaa !382
  %19496 = insertelement <64 x i16> %19491, i16 %19495, i32 26
  %19497 = extractelement <64 x i32> %19361, i32 27
  %19498 = sext i32 %19497 to i64
  %19499 = getelementptr inbounds i16, i16* %10121, i64 %19498
  %19500 = load i16, i16* %19499, align 2, !tbaa !382
  %19501 = insertelement <64 x i16> %19496, i16 %19500, i32 27
  %19502 = extractelement <64 x i32> %19361, i32 28
  %19503 = sext i32 %19502 to i64
  %19504 = getelementptr inbounds i16, i16* %10121, i64 %19503
  %19505 = load i16, i16* %19504, align 2, !tbaa !382
  %19506 = insertelement <64 x i16> %19501, i16 %19505, i32 28
  %19507 = extractelement <64 x i32> %19361, i32 29
  %19508 = sext i32 %19507 to i64
  %19509 = getelementptr inbounds i16, i16* %10121, i64 %19508
  %19510 = load i16, i16* %19509, align 2, !tbaa !382
  %19511 = insertelement <64 x i16> %19506, i16 %19510, i32 29
  %19512 = extractelement <64 x i32> %19361, i32 30
  %19513 = sext i32 %19512 to i64
  %19514 = getelementptr inbounds i16, i16* %10121, i64 %19513
  %19515 = load i16, i16* %19514, align 2, !tbaa !382
  %19516 = insertelement <64 x i16> %19511, i16 %19515, i32 30
  %19517 = extractelement <64 x i32> %19361, i32 31
  %19518 = sext i32 %19517 to i64
  %19519 = getelementptr inbounds i16, i16* %10121, i64 %19518
  %19520 = load i16, i16* %19519, align 2, !tbaa !382
  %19521 = insertelement <64 x i16> %19516, i16 %19520, i32 31
  %19522 = extractelement <64 x i32> %19361, i32 32
  %19523 = sext i32 %19522 to i64
  %19524 = getelementptr inbounds i16, i16* %10121, i64 %19523
  %19525 = load i16, i16* %19524, align 2, !tbaa !382
  %19526 = insertelement <64 x i16> %19521, i16 %19525, i32 32
  %19527 = extractelement <64 x i32> %19361, i32 33
  %19528 = sext i32 %19527 to i64
  %19529 = getelementptr inbounds i16, i16* %10121, i64 %19528
  %19530 = load i16, i16* %19529, align 2, !tbaa !382
  %19531 = insertelement <64 x i16> %19526, i16 %19530, i32 33
  %19532 = extractelement <64 x i32> %19361, i32 34
  %19533 = sext i32 %19532 to i64
  %19534 = getelementptr inbounds i16, i16* %10121, i64 %19533
  %19535 = load i16, i16* %19534, align 2, !tbaa !382
  %19536 = insertelement <64 x i16> %19531, i16 %19535, i32 34
  %19537 = extractelement <64 x i32> %19361, i32 35
  %19538 = sext i32 %19537 to i64
  %19539 = getelementptr inbounds i16, i16* %10121, i64 %19538
  %19540 = load i16, i16* %19539, align 2, !tbaa !382
  %19541 = insertelement <64 x i16> %19536, i16 %19540, i32 35
  %19542 = extractelement <64 x i32> %19361, i32 36
  %19543 = sext i32 %19542 to i64
  %19544 = getelementptr inbounds i16, i16* %10121, i64 %19543
  %19545 = load i16, i16* %19544, align 2, !tbaa !382
  %19546 = insertelement <64 x i16> %19541, i16 %19545, i32 36
  %19547 = extractelement <64 x i32> %19361, i32 37
  %19548 = sext i32 %19547 to i64
  %19549 = getelementptr inbounds i16, i16* %10121, i64 %19548
  %19550 = load i16, i16* %19549, align 2, !tbaa !382
  %19551 = insertelement <64 x i16> %19546, i16 %19550, i32 37
  %19552 = extractelement <64 x i32> %19361, i32 38
  %19553 = sext i32 %19552 to i64
  %19554 = getelementptr inbounds i16, i16* %10121, i64 %19553
  %19555 = load i16, i16* %19554, align 2, !tbaa !382
  %19556 = insertelement <64 x i16> %19551, i16 %19555, i32 38
  %19557 = extractelement <64 x i32> %19361, i32 39
  %19558 = sext i32 %19557 to i64
  %19559 = getelementptr inbounds i16, i16* %10121, i64 %19558
  %19560 = load i16, i16* %19559, align 2, !tbaa !382
  %19561 = insertelement <64 x i16> %19556, i16 %19560, i32 39
  %19562 = extractelement <64 x i32> %19361, i32 40
  %19563 = sext i32 %19562 to i64
  %19564 = getelementptr inbounds i16, i16* %10121, i64 %19563
  %19565 = load i16, i16* %19564, align 2, !tbaa !382
  %19566 = insertelement <64 x i16> %19561, i16 %19565, i32 40
  %19567 = extractelement <64 x i32> %19361, i32 41
  %19568 = sext i32 %19567 to i64
  %19569 = getelementptr inbounds i16, i16* %10121, i64 %19568
  %19570 = load i16, i16* %19569, align 2, !tbaa !382
  %19571 = insertelement <64 x i16> %19566, i16 %19570, i32 41
  %19572 = extractelement <64 x i32> %19361, i32 42
  %19573 = sext i32 %19572 to i64
  %19574 = getelementptr inbounds i16, i16* %10121, i64 %19573
  %19575 = load i16, i16* %19574, align 2, !tbaa !382
  %19576 = insertelement <64 x i16> %19571, i16 %19575, i32 42
  %19577 = extractelement <64 x i32> %19361, i32 43
  %19578 = sext i32 %19577 to i64
  %19579 = getelementptr inbounds i16, i16* %10121, i64 %19578
  %19580 = load i16, i16* %19579, align 2, !tbaa !382
  %19581 = insertelement <64 x i16> %19576, i16 %19580, i32 43
  %19582 = extractelement <64 x i32> %19361, i32 44
  %19583 = sext i32 %19582 to i64
  %19584 = getelementptr inbounds i16, i16* %10121, i64 %19583
  %19585 = load i16, i16* %19584, align 2, !tbaa !382
  %19586 = insertelement <64 x i16> %19581, i16 %19585, i32 44
  %19587 = extractelement <64 x i32> %19361, i32 45
  %19588 = sext i32 %19587 to i64
  %19589 = getelementptr inbounds i16, i16* %10121, i64 %19588
  %19590 = load i16, i16* %19589, align 2, !tbaa !382
  %19591 = insertelement <64 x i16> %19586, i16 %19590, i32 45
  %19592 = extractelement <64 x i32> %19361, i32 46
  %19593 = sext i32 %19592 to i64
  %19594 = getelementptr inbounds i16, i16* %10121, i64 %19593
  %19595 = load i16, i16* %19594, align 2, !tbaa !382
  %19596 = insertelement <64 x i16> %19591, i16 %19595, i32 46
  %19597 = extractelement <64 x i32> %19361, i32 47
  %19598 = sext i32 %19597 to i64
  %19599 = getelementptr inbounds i16, i16* %10121, i64 %19598
  %19600 = load i16, i16* %19599, align 2, !tbaa !382
  %19601 = insertelement <64 x i16> %19596, i16 %19600, i32 47
  %19602 = extractelement <64 x i32> %19361, i32 48
  %19603 = sext i32 %19602 to i64
  %19604 = getelementptr inbounds i16, i16* %10121, i64 %19603
  %19605 = load i16, i16* %19604, align 2, !tbaa !382
  %19606 = insertelement <64 x i16> %19601, i16 %19605, i32 48
  %19607 = extractelement <64 x i32> %19361, i32 49
  %19608 = sext i32 %19607 to i64
  %19609 = getelementptr inbounds i16, i16* %10121, i64 %19608
  %19610 = load i16, i16* %19609, align 2, !tbaa !382
  %19611 = insertelement <64 x i16> %19606, i16 %19610, i32 49
  %19612 = extractelement <64 x i32> %19361, i32 50
  %19613 = sext i32 %19612 to i64
  %19614 = getelementptr inbounds i16, i16* %10121, i64 %19613
  %19615 = load i16, i16* %19614, align 2, !tbaa !382
  %19616 = insertelement <64 x i16> %19611, i16 %19615, i32 50
  %19617 = extractelement <64 x i32> %19361, i32 51
  %19618 = sext i32 %19617 to i64
  %19619 = getelementptr inbounds i16, i16* %10121, i64 %19618
  %19620 = load i16, i16* %19619, align 2, !tbaa !382
  %19621 = insertelement <64 x i16> %19616, i16 %19620, i32 51
  %19622 = extractelement <64 x i32> %19361, i32 52
  %19623 = sext i32 %19622 to i64
  %19624 = getelementptr inbounds i16, i16* %10121, i64 %19623
  %19625 = load i16, i16* %19624, align 2, !tbaa !382
  %19626 = insertelement <64 x i16> %19621, i16 %19625, i32 52
  %19627 = extractelement <64 x i32> %19361, i32 53
  %19628 = sext i32 %19627 to i64
  %19629 = getelementptr inbounds i16, i16* %10121, i64 %19628
  %19630 = load i16, i16* %19629, align 2, !tbaa !382
  %19631 = insertelement <64 x i16> %19626, i16 %19630, i32 53
  %19632 = extractelement <64 x i32> %19361, i32 54
  %19633 = sext i32 %19632 to i64
  %19634 = getelementptr inbounds i16, i16* %10121, i64 %19633
  %19635 = load i16, i16* %19634, align 2, !tbaa !382
  %19636 = insertelement <64 x i16> %19631, i16 %19635, i32 54
  %19637 = extractelement <64 x i32> %19361, i32 55
  %19638 = sext i32 %19637 to i64
  %19639 = getelementptr inbounds i16, i16* %10121, i64 %19638
  %19640 = load i16, i16* %19639, align 2, !tbaa !382
  %19641 = insertelement <64 x i16> %19636, i16 %19640, i32 55
  %19642 = extractelement <64 x i32> %19361, i32 56
  %19643 = sext i32 %19642 to i64
  %19644 = getelementptr inbounds i16, i16* %10121, i64 %19643
  %19645 = load i16, i16* %19644, align 2, !tbaa !382
  %19646 = insertelement <64 x i16> %19641, i16 %19645, i32 56
  %19647 = extractelement <64 x i32> %19361, i32 57
  %19648 = sext i32 %19647 to i64
  %19649 = getelementptr inbounds i16, i16* %10121, i64 %19648
  %19650 = load i16, i16* %19649, align 2, !tbaa !382
  %19651 = insertelement <64 x i16> %19646, i16 %19650, i32 57
  %19652 = extractelement <64 x i32> %19361, i32 58
  %19653 = sext i32 %19652 to i64
  %19654 = getelementptr inbounds i16, i16* %10121, i64 %19653
  %19655 = load i16, i16* %19654, align 2, !tbaa !382
  %19656 = insertelement <64 x i16> %19651, i16 %19655, i32 58
  %19657 = extractelement <64 x i32> %19361, i32 59
  %19658 = sext i32 %19657 to i64
  %19659 = getelementptr inbounds i16, i16* %10121, i64 %19658
  %19660 = load i16, i16* %19659, align 2, !tbaa !382
  %19661 = insertelement <64 x i16> %19656, i16 %19660, i32 59
  %19662 = extractelement <64 x i32> %19361, i32 60
  %19663 = sext i32 %19662 to i64
  %19664 = getelementptr inbounds i16, i16* %10121, i64 %19663
  %19665 = load i16, i16* %19664, align 2, !tbaa !382
  %19666 = insertelement <64 x i16> %19661, i16 %19665, i32 60
  %19667 = extractelement <64 x i32> %19361, i32 61
  %19668 = sext i32 %19667 to i64
  %19669 = getelementptr inbounds i16, i16* %10121, i64 %19668
  %19670 = load i16, i16* %19669, align 2, !tbaa !382
  %19671 = insertelement <64 x i16> %19666, i16 %19670, i32 61
  %19672 = extractelement <64 x i32> %19361, i32 62
  %19673 = sext i32 %19672 to i64
  %19674 = getelementptr inbounds i16, i16* %10121, i64 %19673
  %19675 = load i16, i16* %19674, align 2, !tbaa !382
  %19676 = insertelement <64 x i16> %19671, i16 %19675, i32 62
  %19677 = extractelement <64 x i32> %19361, i32 63
  %19678 = sext i32 %19677 to i64
  %19679 = getelementptr inbounds i16, i16* %10121, i64 %19678
  %19680 = load i16, i16* %19679, align 2, !tbaa !382
  %19681 = insertelement <64 x i16> %19676, i16 %19680, i32 63
  %19682 = add <64 x i16> %17716, %17323
  %19683 = add <64 x i16> %19682, %18109
  %19684 = add <64 x i16> %19683, %18502
  %19685 = add <64 x i16> %19684, %18895
  %19686 = add <64 x i16> %19685, %19288
  %19687 = add <64 x i16> %19686, %19681
  %19688 = shufflevector <64 x i16> %19687, <64 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19689 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %19688, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %19690 = shufflevector <64 x i16> %19687, <64 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19691 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %19690, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %19692 = shufflevector <64 x i16> %19687, <64 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %19693 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %19692, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %19694 = shufflevector <64 x i16> %19687, <64 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %19695 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %19694, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %19696 = shufflevector <64 x i16> %19687, <64 x i16> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %19697 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %19696, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %19698 = shufflevector <64 x i16> %19687, <64 x i16> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %19699 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %19698, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %19700 = shufflevector <64 x i16> %19687, <64 x i16> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %19701 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %19700, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %19702 = shufflevector <64 x i16> %19687, <64 x i16> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %19703 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %19702, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %19704 = shufflevector <64 x i16> %19687, <64 x i16> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %19705 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %19704, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %19706 = shufflevector <64 x i16> %19687, <64 x i16> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %19707 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %19706, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %19708 = shufflevector <64 x i16> %19687, <64 x i16> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %19709 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %19708, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %19710 = shufflevector <64 x i16> %19687, <64 x i16> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %19711 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %19710, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %19712 = shufflevector <64 x i16> %19687, <64 x i16> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %19713 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %19712, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %19714 = shufflevector <64 x i16> %19687, <64 x i16> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %19715 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %19714, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %19716 = shufflevector <64 x i16> %19687, <64 x i16> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %19717 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %19716, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %19718 = shufflevector <64 x i16> %19687, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %19719 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %19718, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %19720 = shufflevector <4 x i32> %19689, <4 x i32> %19691, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19721 = shufflevector <4 x i32> %19693, <4 x i32> %19695, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19722 = shufflevector <4 x i32> %19697, <4 x i32> %19699, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19723 = shufflevector <4 x i32> %19701, <4 x i32> %19703, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19724 = shufflevector <4 x i32> %19705, <4 x i32> %19707, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19725 = shufflevector <4 x i32> %19709, <4 x i32> %19711, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19726 = shufflevector <4 x i32> %19713, <4 x i32> %19715, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19727 = shufflevector <4 x i32> %19717, <4 x i32> %19719, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19728 = shufflevector <8 x i32> %19720, <8 x i32> %19721, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19729 = shufflevector <8 x i32> %19722, <8 x i32> %19723, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19730 = shufflevector <8 x i32> %19724, <8 x i32> %19725, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19731 = shufflevector <8 x i32> %19726, <8 x i32> %19727, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19732 = shufflevector <16 x i32> %19728, <16 x i32> %19729, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19733 = shufflevector <16 x i32> %19730, <16 x i32> %19731, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19734 = shufflevector <32 x i32> %19732, <32 x i32> %19733, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %19735 = lshr <64 x i32> %19734, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %19736 = trunc <64 x i32> %19735 to <64 x i16>
  %19737 = shufflevector <64 x i16> %19736, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19738 = shufflevector <64 x i16> %19687, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19739 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %19737, <8 x i16> %19738)
  %19740 = shufflevector <64 x i16> %19736, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19741 = shufflevector <64 x i16> %19687, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19742 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %19740, <8 x i16> %19741)
  %19743 = shufflevector <64 x i16> %19736, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %19744 = shufflevector <64 x i16> %19687, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %19745 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %19743, <8 x i16> %19744)
  %19746 = shufflevector <64 x i16> %19736, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19747 = shufflevector <64 x i16> %19687, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19748 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %19746, <8 x i16> %19747)
  %19749 = shufflevector <64 x i16> %19736, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %19750 = shufflevector <64 x i16> %19687, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %19751 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %19749, <8 x i16> %19750)
  %19752 = shufflevector <64 x i16> %19736, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %19753 = shufflevector <64 x i16> %19687, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %19754 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %19752, <8 x i16> %19753)
  %19755 = shufflevector <64 x i16> %19736, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %19756 = shufflevector <64 x i16> %19687, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %19757 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %19755, <8 x i16> %19756)
  %19758 = shufflevector <64 x i16> %19736, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %19759 = shufflevector <64 x i16> %19687, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %19760 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %19758, <8 x i16> %19759)
  %19761 = shufflevector <8 x i16> %19739, <8 x i16> %19742, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19762 = shufflevector <8 x i16> %19745, <8 x i16> %19748, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19763 = shufflevector <8 x i16> %19751, <8 x i16> %19754, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19764 = shufflevector <8 x i16> %19757, <8 x i16> %19760, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19765 = shufflevector <16 x i16> %19761, <16 x i16> %19762, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19766 = shufflevector <16 x i16> %19763, <16 x i16> %19764, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19767 = shufflevector <32 x i16> %19765, <32 x i16> %19766, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %19768 = lshr <64 x i16> %19767, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19769 = shufflevector <64 x i16> %19768, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19770 = sext i32 %blur_x.s0.x.v1.base.s94 to i64
  %19771 = add nsw i64 %19770, %16928
  %19772 = getelementptr inbounds i16, i16* %blur_x47, i64 %19771
  %19773 = bitcast i16* %19772 to <8 x i16>*
  store <8 x i16> %19769, <8 x i16>* %19773, align 2, !tbaa !385
  %19774 = shufflevector <64 x i16> %19768, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19775 = getelementptr inbounds i16, i16* %19772, i64 8
  %19776 = bitcast i16* %19775 to <8 x i16>*
  store <8 x i16> %19774, <8 x i16>* %19776, align 2, !tbaa !385
  %19777 = shufflevector <64 x i16> %19768, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %19778 = getelementptr inbounds i16, i16* %19772, i64 16
  %19779 = bitcast i16* %19778 to <8 x i16>*
  store <8 x i16> %19777, <8 x i16>* %19779, align 2, !tbaa !385
  %19780 = shufflevector <64 x i16> %19768, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19781 = getelementptr inbounds i16, i16* %19772, i64 24
  %19782 = bitcast i16* %19781 to <8 x i16>*
  store <8 x i16> %19780, <8 x i16>* %19782, align 2, !tbaa !385
  %19783 = shufflevector <64 x i16> %19768, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %19784 = getelementptr inbounds i16, i16* %19772, i64 32
  %19785 = bitcast i16* %19784 to <8 x i16>*
  store <8 x i16> %19783, <8 x i16>* %19785, align 2, !tbaa !385
  %19786 = shufflevector <64 x i16> %19768, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %19787 = getelementptr inbounds i16, i16* %19772, i64 40
  %19788 = bitcast i16* %19787 to <8 x i16>*
  store <8 x i16> %19786, <8 x i16>* %19788, align 2, !tbaa !385
  %19789 = shufflevector <64 x i16> %19768, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %19790 = getelementptr inbounds i16, i16* %19772, i64 48
  %19791 = bitcast i16* %19790 to <8 x i16>*
  store <8 x i16> %19789, <8 x i16>* %19791, align 2, !tbaa !385
  %19792 = shufflevector <64 x i16> %19768, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %19793 = getelementptr inbounds i16, i16* %19772, i64 56
  %19794 = bitcast i16* %19793 to <8 x i16>*
  store <8 x i16> %19792, <8 x i16>* %19794, align 2, !tbaa !385
  %19795 = add nuw nsw i32 %blur_x.s0.x.x93, 1
  %.not111 = icmp eq i32 %19795, %t27340
  br i1 %.not111, label %"end for blur_x.s0.x.x92", label %"for blur_x.s0.x.x91"

"end for blur_x.s0.x.x92":                        ; preds = %"for blur_x.s0.x.x91", %"for blur_y.s0.y.yi.$n.rebased85"
  %19796 = icmp ugt i64 %indvars.iv178, 5
  %or.cond139 = and i1 %10122, %19796
  br i1 %or.cond139, label %"for blur_y.s0.x.x101.preheader", label %after_bb96, !prof !389

"for blur_y.s0.x.x101.preheader":                 ; preds = %"end for blur_x.s0.x.x92"
  %19797 = add i64 %16916, 3
  %19798 = and i64 %19797, 7
  %19799 = mul nsw i64 %19798, %10123
  %19800 = add i64 %16916, 2
  %19801 = and i64 %19800, 7
  %19802 = mul nsw i64 %19801, %10123
  %19803 = add i64 %16916, 4
  %19804 = and i64 %19803, 7
  %19805 = mul nsw i64 %19804, %10123
  %19806 = add i64 %16916, 5
  %19807 = and i64 %19806, 7
  %19808 = mul nsw i64 %19807, %10123
  %19809 = add i64 %16916, 6
  %19810 = and i64 %19809, 7
  %19811 = mul nsw i64 %19810, %10123
  %19812 = zext i32 %16921 to i64
  %19813 = mul nsw i64 %19812, %10123
  %19814 = add i64 %16916, 7
  %19815 = and i64 %19814, 7
  %19816 = mul nsw i64 %19815, %10123
  %19817 = add nsw i64 %16916, -6
  %19818 = mul nsw i64 %19817, %10124
  br label %"for blur_y.s0.x.x101"

after_bb96:                                       ; preds = %"for blur_y.s0.x.x101", %"end for blur_x.s0.x.x92"
  %indvars.iv.next179 = add nuw nsw i64 %indvars.iv178, 1
  %.not109 = icmp eq i64 %indvars.iv.next179, 134
  br i1 %.not109, label %"end for blur_y.s0.y.yi.$n.rebased86", label %"for blur_y.s0.y.yi.$n.rebased85"

"for blur_y.s0.x.x101":                           ; preds = %"for blur_y.s0.x.x101.preheader", %"for blur_y.s0.x.x101"
  %blur_y.s0.x.x103 = phi i32 [ %20154, %"for blur_y.s0.x.x101" ], [ 0, %"for blur_y.s0.x.x101.preheader" ]
  %a29 = shl nsw i32 %blur_y.s0.x.x103, 6
  %19819 = icmp slt i32 %a29, %b31
  %blur_y.s0.x.v0.base104 = select i1 %19819, i32 %a29, i32 %b31
  %t221105 = sub nsw i32 %blur_y.s0.x.v0.base104, %t27441
  %19820 = sext i32 %t221105 to i64
  %19821 = add nsw i64 %19799, %19820
  %19822 = getelementptr inbounds i16, i16* %blur_x47, i64 %19821
  %19823 = getelementptr inbounds i16, i16* %19822, i64 64
  %19824 = bitcast i16* %19823 to <8 x i16>*
  %19825 = load <8 x i16>, <8 x i16>* %19824, align 2, !tbaa !385
  %19826 = getelementptr inbounds i16, i16* %19822, i64 72
  %19827 = bitcast i16* %19826 to <8 x i16>*
  %19828 = load <8 x i16>, <8 x i16>* %19827, align 2, !tbaa !385
  %19829 = getelementptr inbounds i16, i16* %19822, i64 80
  %19830 = bitcast i16* %19829 to <8 x i16>*
  %19831 = load <8 x i16>, <8 x i16>* %19830, align 2, !tbaa !385
  %19832 = getelementptr inbounds i16, i16* %19822, i64 88
  %19833 = bitcast i16* %19832 to <8 x i16>*
  %19834 = load <8 x i16>, <8 x i16>* %19833, align 2, !tbaa !385
  %19835 = getelementptr inbounds i16, i16* %19822, i64 96
  %19836 = bitcast i16* %19835 to <8 x i16>*
  %19837 = load <8 x i16>, <8 x i16>* %19836, align 2, !tbaa !385
  %19838 = getelementptr inbounds i16, i16* %19822, i64 104
  %19839 = bitcast i16* %19838 to <8 x i16>*
  %19840 = load <8 x i16>, <8 x i16>* %19839, align 2, !tbaa !385
  %19841 = getelementptr inbounds i16, i16* %19822, i64 112
  %19842 = bitcast i16* %19841 to <8 x i16>*
  %19843 = load <8 x i16>, <8 x i16>* %19842, align 2, !tbaa !385
  %19844 = getelementptr inbounds i16, i16* %19822, i64 120
  %19845 = bitcast i16* %19844 to <8 x i16>*
  %19846 = load <8 x i16>, <8 x i16>* %19845, align 2, !tbaa !385
  %19847 = add nsw i64 %19802, %19820
  %19848 = getelementptr inbounds i16, i16* %blur_x47, i64 %19847
  %19849 = getelementptr inbounds i16, i16* %19848, i64 64
  %19850 = bitcast i16* %19849 to <8 x i16>*
  %19851 = load <8 x i16>, <8 x i16>* %19850, align 2, !tbaa !385
  %19852 = getelementptr inbounds i16, i16* %19848, i64 72
  %19853 = bitcast i16* %19852 to <8 x i16>*
  %19854 = load <8 x i16>, <8 x i16>* %19853, align 2, !tbaa !385
  %19855 = getelementptr inbounds i16, i16* %19848, i64 80
  %19856 = bitcast i16* %19855 to <8 x i16>*
  %19857 = load <8 x i16>, <8 x i16>* %19856, align 2, !tbaa !385
  %19858 = getelementptr inbounds i16, i16* %19848, i64 88
  %19859 = bitcast i16* %19858 to <8 x i16>*
  %19860 = load <8 x i16>, <8 x i16>* %19859, align 2, !tbaa !385
  %19861 = getelementptr inbounds i16, i16* %19848, i64 96
  %19862 = bitcast i16* %19861 to <8 x i16>*
  %19863 = load <8 x i16>, <8 x i16>* %19862, align 2, !tbaa !385
  %19864 = getelementptr inbounds i16, i16* %19848, i64 104
  %19865 = bitcast i16* %19864 to <8 x i16>*
  %19866 = load <8 x i16>, <8 x i16>* %19865, align 2, !tbaa !385
  %19867 = getelementptr inbounds i16, i16* %19848, i64 112
  %19868 = bitcast i16* %19867 to <8 x i16>*
  %19869 = load <8 x i16>, <8 x i16>* %19868, align 2, !tbaa !385
  %19870 = getelementptr inbounds i16, i16* %19848, i64 120
  %19871 = bitcast i16* %19870 to <8 x i16>*
  %19872 = load <8 x i16>, <8 x i16>* %19871, align 2, !tbaa !385
  %19873 = add nsw i64 %19805, %19820
  %19874 = getelementptr inbounds i16, i16* %blur_x47, i64 %19873
  %19875 = getelementptr inbounds i16, i16* %19874, i64 64
  %19876 = bitcast i16* %19875 to <8 x i16>*
  %19877 = load <8 x i16>, <8 x i16>* %19876, align 2, !tbaa !385
  %19878 = getelementptr inbounds i16, i16* %19874, i64 72
  %19879 = bitcast i16* %19878 to <8 x i16>*
  %19880 = load <8 x i16>, <8 x i16>* %19879, align 2, !tbaa !385
  %19881 = getelementptr inbounds i16, i16* %19874, i64 80
  %19882 = bitcast i16* %19881 to <8 x i16>*
  %19883 = load <8 x i16>, <8 x i16>* %19882, align 2, !tbaa !385
  %19884 = getelementptr inbounds i16, i16* %19874, i64 88
  %19885 = bitcast i16* %19884 to <8 x i16>*
  %19886 = load <8 x i16>, <8 x i16>* %19885, align 2, !tbaa !385
  %19887 = getelementptr inbounds i16, i16* %19874, i64 96
  %19888 = bitcast i16* %19887 to <8 x i16>*
  %19889 = load <8 x i16>, <8 x i16>* %19888, align 2, !tbaa !385
  %19890 = getelementptr inbounds i16, i16* %19874, i64 104
  %19891 = bitcast i16* %19890 to <8 x i16>*
  %19892 = load <8 x i16>, <8 x i16>* %19891, align 2, !tbaa !385
  %19893 = getelementptr inbounds i16, i16* %19874, i64 112
  %19894 = bitcast i16* %19893 to <8 x i16>*
  %19895 = load <8 x i16>, <8 x i16>* %19894, align 2, !tbaa !385
  %19896 = getelementptr inbounds i16, i16* %19874, i64 120
  %19897 = bitcast i16* %19896 to <8 x i16>*
  %19898 = load <8 x i16>, <8 x i16>* %19897, align 2, !tbaa !385
  %19899 = add nsw i64 %19808, %19820
  %19900 = getelementptr inbounds i16, i16* %blur_x47, i64 %19899
  %19901 = getelementptr inbounds i16, i16* %19900, i64 64
  %19902 = bitcast i16* %19901 to <8 x i16>*
  %19903 = load <8 x i16>, <8 x i16>* %19902, align 2, !tbaa !385
  %19904 = getelementptr inbounds i16, i16* %19900, i64 72
  %19905 = bitcast i16* %19904 to <8 x i16>*
  %19906 = load <8 x i16>, <8 x i16>* %19905, align 2, !tbaa !385
  %19907 = getelementptr inbounds i16, i16* %19900, i64 80
  %19908 = bitcast i16* %19907 to <8 x i16>*
  %19909 = load <8 x i16>, <8 x i16>* %19908, align 2, !tbaa !385
  %19910 = getelementptr inbounds i16, i16* %19900, i64 88
  %19911 = bitcast i16* %19910 to <8 x i16>*
  %19912 = load <8 x i16>, <8 x i16>* %19911, align 2, !tbaa !385
  %19913 = getelementptr inbounds i16, i16* %19900, i64 96
  %19914 = bitcast i16* %19913 to <8 x i16>*
  %19915 = load <8 x i16>, <8 x i16>* %19914, align 2, !tbaa !385
  %19916 = getelementptr inbounds i16, i16* %19900, i64 104
  %19917 = bitcast i16* %19916 to <8 x i16>*
  %19918 = load <8 x i16>, <8 x i16>* %19917, align 2, !tbaa !385
  %19919 = getelementptr inbounds i16, i16* %19900, i64 112
  %19920 = bitcast i16* %19919 to <8 x i16>*
  %19921 = load <8 x i16>, <8 x i16>* %19920, align 2, !tbaa !385
  %19922 = getelementptr inbounds i16, i16* %19900, i64 120
  %19923 = bitcast i16* %19922 to <8 x i16>*
  %19924 = load <8 x i16>, <8 x i16>* %19923, align 2, !tbaa !385
  %19925 = add nsw i64 %19811, %19820
  %19926 = getelementptr inbounds i16, i16* %blur_x47, i64 %19925
  %19927 = getelementptr inbounds i16, i16* %19926, i64 64
  %19928 = bitcast i16* %19927 to <8 x i16>*
  %19929 = load <8 x i16>, <8 x i16>* %19928, align 2, !tbaa !385
  %19930 = getelementptr inbounds i16, i16* %19926, i64 72
  %19931 = bitcast i16* %19930 to <8 x i16>*
  %19932 = load <8 x i16>, <8 x i16>* %19931, align 2, !tbaa !385
  %19933 = getelementptr inbounds i16, i16* %19926, i64 80
  %19934 = bitcast i16* %19933 to <8 x i16>*
  %19935 = load <8 x i16>, <8 x i16>* %19934, align 2, !tbaa !385
  %19936 = getelementptr inbounds i16, i16* %19926, i64 88
  %19937 = bitcast i16* %19936 to <8 x i16>*
  %19938 = load <8 x i16>, <8 x i16>* %19937, align 2, !tbaa !385
  %19939 = getelementptr inbounds i16, i16* %19926, i64 96
  %19940 = bitcast i16* %19939 to <8 x i16>*
  %19941 = load <8 x i16>, <8 x i16>* %19940, align 2, !tbaa !385
  %19942 = getelementptr inbounds i16, i16* %19926, i64 104
  %19943 = bitcast i16* %19942 to <8 x i16>*
  %19944 = load <8 x i16>, <8 x i16>* %19943, align 2, !tbaa !385
  %19945 = getelementptr inbounds i16, i16* %19926, i64 112
  %19946 = bitcast i16* %19945 to <8 x i16>*
  %19947 = load <8 x i16>, <8 x i16>* %19946, align 2, !tbaa !385
  %19948 = getelementptr inbounds i16, i16* %19926, i64 120
  %19949 = bitcast i16* %19948 to <8 x i16>*
  %19950 = load <8 x i16>, <8 x i16>* %19949, align 2, !tbaa !385
  %19951 = add nsw i64 %19813, %19820
  %19952 = getelementptr inbounds i16, i16* %blur_x47, i64 %19951
  %19953 = getelementptr inbounds i16, i16* %19952, i64 64
  %19954 = bitcast i16* %19953 to <8 x i16>*
  %19955 = load <8 x i16>, <8 x i16>* %19954, align 2, !tbaa !385
  %19956 = getelementptr inbounds i16, i16* %19952, i64 72
  %19957 = bitcast i16* %19956 to <8 x i16>*
  %19958 = load <8 x i16>, <8 x i16>* %19957, align 2, !tbaa !385
  %19959 = getelementptr inbounds i16, i16* %19952, i64 80
  %19960 = bitcast i16* %19959 to <8 x i16>*
  %19961 = load <8 x i16>, <8 x i16>* %19960, align 2, !tbaa !385
  %19962 = getelementptr inbounds i16, i16* %19952, i64 88
  %19963 = bitcast i16* %19962 to <8 x i16>*
  %19964 = load <8 x i16>, <8 x i16>* %19963, align 2, !tbaa !385
  %19965 = getelementptr inbounds i16, i16* %19952, i64 96
  %19966 = bitcast i16* %19965 to <8 x i16>*
  %19967 = load <8 x i16>, <8 x i16>* %19966, align 2, !tbaa !385
  %19968 = getelementptr inbounds i16, i16* %19952, i64 104
  %19969 = bitcast i16* %19968 to <8 x i16>*
  %19970 = load <8 x i16>, <8 x i16>* %19969, align 2, !tbaa !385
  %19971 = getelementptr inbounds i16, i16* %19952, i64 112
  %19972 = bitcast i16* %19971 to <8 x i16>*
  %19973 = load <8 x i16>, <8 x i16>* %19972, align 2, !tbaa !385
  %19974 = getelementptr inbounds i16, i16* %19952, i64 120
  %19975 = bitcast i16* %19974 to <8 x i16>*
  %19976 = load <8 x i16>, <8 x i16>* %19975, align 2, !tbaa !385
  %19977 = add nsw i64 %19816, %19820
  %19978 = getelementptr inbounds i16, i16* %blur_x47, i64 %19977
  %19979 = getelementptr inbounds i16, i16* %19978, i64 64
  %19980 = bitcast i16* %19979 to <8 x i16>*
  %19981 = load <8 x i16>, <8 x i16>* %19980, align 2, !tbaa !385
  %19982 = getelementptr inbounds i16, i16* %19978, i64 72
  %19983 = bitcast i16* %19982 to <8 x i16>*
  %19984 = load <8 x i16>, <8 x i16>* %19983, align 2, !tbaa !385
  %19985 = getelementptr inbounds i16, i16* %19978, i64 80
  %19986 = bitcast i16* %19985 to <8 x i16>*
  %19987 = load <8 x i16>, <8 x i16>* %19986, align 2, !tbaa !385
  %19988 = getelementptr inbounds i16, i16* %19978, i64 88
  %19989 = bitcast i16* %19988 to <8 x i16>*
  %19990 = load <8 x i16>, <8 x i16>* %19989, align 2, !tbaa !385
  %19991 = getelementptr inbounds i16, i16* %19978, i64 96
  %19992 = bitcast i16* %19991 to <8 x i16>*
  %19993 = load <8 x i16>, <8 x i16>* %19992, align 2, !tbaa !385
  %19994 = getelementptr inbounds i16, i16* %19978, i64 104
  %19995 = bitcast i16* %19994 to <8 x i16>*
  %19996 = load <8 x i16>, <8 x i16>* %19995, align 2, !tbaa !385
  %19997 = getelementptr inbounds i16, i16* %19978, i64 112
  %19998 = bitcast i16* %19997 to <8 x i16>*
  %19999 = load <8 x i16>, <8 x i16>* %19998, align 2, !tbaa !385
  %20000 = getelementptr inbounds i16, i16* %19978, i64 120
  %20001 = bitcast i16* %20000 to <8 x i16>*
  %20002 = load <8 x i16>, <8 x i16>* %20001, align 2, !tbaa !385
  %20003 = add <8 x i16> %19851, %19825
  %20004 = add <8 x i16> %20003, %19877
  %20005 = add <8 x i16> %20004, %19903
  %20006 = add <8 x i16> %20005, %19929
  %20007 = add <8 x i16> %20006, %19955
  %20008 = add <8 x i16> %20007, %19981
  %20009 = add <8 x i16> %19854, %19828
  %20010 = add <8 x i16> %20009, %19880
  %20011 = add <8 x i16> %20010, %19906
  %20012 = add <8 x i16> %20011, %19932
  %20013 = add <8 x i16> %20012, %19958
  %20014 = add <8 x i16> %20013, %19984
  %20015 = add <8 x i16> %19857, %19831
  %20016 = add <8 x i16> %20015, %19883
  %20017 = add <8 x i16> %20016, %19909
  %20018 = add <8 x i16> %20017, %19935
  %20019 = add <8 x i16> %20018, %19961
  %20020 = add <8 x i16> %20019, %19987
  %20021 = add <8 x i16> %19860, %19834
  %20022 = add <8 x i16> %20021, %19886
  %20023 = add <8 x i16> %20022, %19912
  %20024 = add <8 x i16> %20023, %19938
  %20025 = add <8 x i16> %20024, %19964
  %20026 = add <8 x i16> %20025, %19990
  %20027 = add <8 x i16> %19863, %19837
  %20028 = add <8 x i16> %20027, %19889
  %20029 = add <8 x i16> %20028, %19915
  %20030 = add <8 x i16> %20029, %19941
  %20031 = add <8 x i16> %20030, %19967
  %20032 = add <8 x i16> %20031, %19993
  %20033 = add <8 x i16> %19866, %19840
  %20034 = add <8 x i16> %20033, %19892
  %20035 = add <8 x i16> %20034, %19918
  %20036 = add <8 x i16> %20035, %19944
  %20037 = add <8 x i16> %20036, %19970
  %20038 = add <8 x i16> %20037, %19996
  %20039 = add <8 x i16> %19869, %19843
  %20040 = add <8 x i16> %20039, %19895
  %20041 = add <8 x i16> %20040, %19921
  %20042 = add <8 x i16> %20041, %19947
  %20043 = add <8 x i16> %20042, %19973
  %20044 = add <8 x i16> %20043, %19999
  %20045 = add <8 x i16> %19872, %19846
  %20046 = add <8 x i16> %20045, %19898
  %20047 = add <8 x i16> %20046, %19924
  %20048 = add <8 x i16> %20047, %19950
  %20049 = add <8 x i16> %20048, %19976
  %20050 = add <8 x i16> %20049, %20002
  %20051 = shufflevector <8 x i16> %20050, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20052 = shufflevector <16 x i16> %20051, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20053 = shufflevector <32 x i16> %20052, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20054 = shufflevector <8 x i16> %20008, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20055 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %20054, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %20056 = shufflevector <8 x i16> %20008, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20057 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %20056, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %20058 = shufflevector <8 x i16> %20014, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20059 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %20058, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %20060 = shufflevector <8 x i16> %20014, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20061 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %20060, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %20062 = shufflevector <8 x i16> %20020, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20063 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %20062, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %20064 = shufflevector <8 x i16> %20020, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20065 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %20064, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %20066 = shufflevector <8 x i16> %20026, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20067 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %20066, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %20068 = shufflevector <8 x i16> %20026, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20069 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %20068, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %20070 = shufflevector <8 x i16> %20032, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20071 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %20070, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %20072 = shufflevector <8 x i16> %20032, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20073 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %20072, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %20074 = shufflevector <8 x i16> %20038, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20075 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %20074, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %20076 = shufflevector <8 x i16> %20038, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20077 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %20076, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %20078 = shufflevector <8 x i16> %20044, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20079 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %20078, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %20080 = shufflevector <8 x i16> %20044, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20081 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %20080, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %20082 = shufflevector <8 x i16> %20050, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20083 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %20082, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %20084 = shufflevector <8 x i16> %20050, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20085 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %20084, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %20086 = shufflevector <4 x i32> %20055, <4 x i32> %20057, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20087 = shufflevector <4 x i32> %20059, <4 x i32> %20061, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20088 = shufflevector <4 x i32> %20063, <4 x i32> %20065, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20089 = shufflevector <4 x i32> %20067, <4 x i32> %20069, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20090 = shufflevector <4 x i32> %20071, <4 x i32> %20073, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20091 = shufflevector <4 x i32> %20075, <4 x i32> %20077, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20092 = shufflevector <4 x i32> %20079, <4 x i32> %20081, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20093 = shufflevector <4 x i32> %20083, <4 x i32> %20085, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20094 = shufflevector <8 x i32> %20086, <8 x i32> %20087, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20095 = shufflevector <8 x i32> %20088, <8 x i32> %20089, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20096 = shufflevector <8 x i32> %20090, <8 x i32> %20091, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20097 = shufflevector <8 x i32> %20092, <8 x i32> %20093, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20098 = shufflevector <16 x i32> %20094, <16 x i32> %20095, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20099 = shufflevector <16 x i32> %20096, <16 x i32> %20097, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20100 = shufflevector <32 x i32> %20098, <32 x i32> %20099, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %20101 = lshr <64 x i32> %20100, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %20102 = trunc <64 x i32> %20101 to <64 x i16>
  %20103 = shufflevector <64 x i16> %20102, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20104 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %20103, <8 x i16> %20008)
  %20105 = shufflevector <64 x i16> %20102, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20106 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %20105, <8 x i16> %20014)
  %20107 = shufflevector <64 x i16> %20102, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %20108 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %20107, <8 x i16> %20020)
  %20109 = shufflevector <64 x i16> %20102, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20110 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %20109, <8 x i16> %20026)
  %20111 = shufflevector <64 x i16> %20102, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %20112 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %20111, <8 x i16> %20032)
  %20113 = shufflevector <64 x i16> %20102, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %20114 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %20113, <8 x i16> %20038)
  %20115 = shufflevector <64 x i16> %20102, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %20116 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %20115, <8 x i16> %20044)
  %20117 = shufflevector <64 x i16> %20102, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %20118 = shufflevector <64 x i16> %20053, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %20119 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %20117, <8 x i16> %20118)
  %20120 = shufflevector <8 x i16> %20104, <8 x i16> %20106, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20121 = shufflevector <8 x i16> %20108, <8 x i16> %20110, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20122 = shufflevector <8 x i16> %20112, <8 x i16> %20114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20123 = shufflevector <8 x i16> %20116, <8 x i16> %20119, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20124 = shufflevector <16 x i16> %20120, <16 x i16> %20121, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20125 = shufflevector <16 x i16> %20122, <16 x i16> %20123, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20126 = shufflevector <32 x i16> %20124, <32 x i16> %20125, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %20127 = lshr <64 x i16> %20126, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20128 = shufflevector <64 x i16> %20127, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20129 = sext i32 %blur_y.s0.x.v0.base104 to i64
  %20130 = add nsw i64 %19818, %20129
  %20131 = getelementptr inbounds i16, i16* %10125, i64 %20130
  %20132 = bitcast i16* %20131 to <8 x i16>*
  store <8 x i16> %20128, <8 x i16>* %20132, align 2, !tbaa !387
  %20133 = shufflevector <64 x i16> %20127, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20134 = getelementptr inbounds i16, i16* %20131, i64 8
  %20135 = bitcast i16* %20134 to <8 x i16>*
  store <8 x i16> %20133, <8 x i16>* %20135, align 2, !tbaa !387
  %20136 = shufflevector <64 x i16> %20127, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %20137 = getelementptr inbounds i16, i16* %20131, i64 16
  %20138 = bitcast i16* %20137 to <8 x i16>*
  store <8 x i16> %20136, <8 x i16>* %20138, align 2, !tbaa !387
  %20139 = shufflevector <64 x i16> %20127, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20140 = getelementptr inbounds i16, i16* %20131, i64 24
  %20141 = bitcast i16* %20140 to <8 x i16>*
  store <8 x i16> %20139, <8 x i16>* %20141, align 2, !tbaa !387
  %20142 = shufflevector <64 x i16> %20127, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %20143 = getelementptr inbounds i16, i16* %20131, i64 32
  %20144 = bitcast i16* %20143 to <8 x i16>*
  store <8 x i16> %20142, <8 x i16>* %20144, align 2, !tbaa !387
  %20145 = shufflevector <64 x i16> %20127, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %20146 = getelementptr inbounds i16, i16* %20131, i64 40
  %20147 = bitcast i16* %20146 to <8 x i16>*
  store <8 x i16> %20145, <8 x i16>* %20147, align 2, !tbaa !387
  %20148 = shufflevector <64 x i16> %20127, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %20149 = getelementptr inbounds i16, i16* %20131, i64 48
  %20150 = bitcast i16* %20149 to <8 x i16>*
  store <8 x i16> %20148, <8 x i16>* %20150, align 2, !tbaa !387
  %20151 = shufflevector <64 x i16> %20127, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %20152 = getelementptr inbounds i16, i16* %20131, i64 56
  %20153 = bitcast i16* %20152 to <8 x i16>*
  store <8 x i16> %20151, <8 x i16>* %20153, align 2, !tbaa !387
  %20154 = add nuw nsw i32 %blur_y.s0.x.x103, 1
  %.not110 = icmp eq i32 %20154, %t27038
  br i1 %.not110, label %after_bb96, label %"for blur_y.s0.x.x101"
}

; Function Attrs: nounwind
define i32 @blur7x7(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, %struct.halide_buffer_t* noalias nocapture readonly %blur_y.buffer) local_unnamed_addr #10 {
entry:
  %parallel_closure21 = alloca { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, align 8
  %parallel_closure = alloca { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !176
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !180
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 0, i32 1
  %2 = load i32, i32* %extent.i, align 4, !tbaa !185
  %extent.i29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 1, i32 1
  %3 = bitcast i32* %extent.i29 to <2 x i32>*
  %4 = load <2 x i32>, <2 x i32>* %3, align 4, !tbaa !37
  %host.i32 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 2
  %5 = load i8*, i8** %host.i32, align 8, !tbaa !176
  %dim.i33 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 6
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i33, align 8, !tbaa !180
  %extent.i36 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 0, i32 1
  %7 = load i32, i32* %extent.i36, align 4, !tbaa !185
  %extent.i42 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 1, i32 1
  %8 = bitcast i32* %extent.i42 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 4, !tbaa !37
  %10 = extractelement <2 x i32> %4, i32 0
  %a30 = add nsw i32 %10, 133
  %11 = extractelement <2 x i32> %9, i32 0
  %12 = icmp slt i32 %a30, %11
  %blur_y.s0.y.y.epilogue.s = select i1 %12, i32 %a30, i32 %11
  %13 = add nsw i32 %2, 63
  %t270 = ashr i32 %13, 6
  %a31 = ashr i32 %2, 6
  %14 = icmp sgt i32 %a31, 0
  %t271 = select i1 %14, i32 %a31, i32 0
  %15 = icmp sgt i32 %2, 64
  %b42 = select i1 %15, i32 %2, i32 64
  %16 = add nuw nsw i32 %b42, 63
  %17 = lshr i32 %16, 6
  %18 = icmp slt i32 %2, 64
  %t274 = select i1 %18, i32 %2, i32 64
  %19 = sub nsw i32 126, %t274
  %a35 = ashr i32 %19, 6
  %20 = ashr i32 %t274, 6
  %b37 = sub nsw i32 1, %20
  %21 = icmp sgt i32 %a35, %b37
  %a34 = select i1 %21, i32 %a35, i32 %b37
  %22 = icmp slt i32 %a34, %17
  %b38 = select i1 %22, i32 %a34, i32 %17
  %b41 = sub nsw i32 %7, %t274
  %a40 = add nsw i32 %b41, 58
  %23 = icmp slt i32 %a40, %b42
  %24 = select i1 %23, i32 %a40, i32 %b42
  %a39 = add nsw i32 %24, -64
  %25 = icmp slt i32 %a39, %b41
  %a38 = select i1 %25, i32 %a39, i32 %b41
  %a41 = add nsw i32 %7, 63
  %26 = icmp slt i32 %a41, %2
  %27 = select i1 %26, i32 %a41, i32 %2
  %b40 = sub nsw i32 %27, %t274
  %28 = icmp slt i32 %a38, %b40
  %a37 = select i1 %28, i32 %a38, i32 %b40
  %b39 = add nsw i32 %b42, -1
  %29 = icmp slt i32 %a37, %b39
  %30 = select i1 %29, i32 %a37, i32 %b39
  %31 = ashr i32 %30, 6
  %a36 = add nsw i32 %31, 1
  %.not = icmp slt i32 %31, %b38
  %t264 = select i1 %.not, i32 %b38, i32 %a36
  %32 = add nsw i32 %blur_y.s0.y.y.epilogue.s, -6
  %a42 = ashr i32 %32, 7
  %33 = icmp sgt i32 %a42, 0
  %t261 = select i1 %33, i32 %a42, i32 0
  %34 = add nsw i32 %10, 127
  %t260 = ashr i32 %34, 7
  %35 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 0
  store i8* %0, i8** %35, align 8
  %36 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 1
  store i8* %5, i8** %36, align 8
  %37 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 2
  store i32 %2, i32* %37, align 8
  %38 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 3
  %39 = bitcast i32* %38 to <2 x i32>*
  store <2 x i32> %4, <2 x i32>* %39, align 4
  %40 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 5
  store i32 %7, i32* %40, align 4
  %41 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 6
  %42 = bitcast i32* %41 to <2 x i32>*
  store <2 x i32> %9, <2 x i32>* %42, align 8
  %43 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 8
  store i32 %t261, i32* %43, align 8
  %44 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 9
  store i32 %t264, i32* %44, align 4
  %45 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 10
  store i32 %t270, i32* %45, align 8
  %46 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 11
  store i32 %t271, i32* %46, align 4
  %47 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 12
  store i32 %b42, i32* %47, align 8
  %48 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 13
  store i32 %17, i32* %48, align 4
  %49 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 14
  store i32 %t274, i32* %49, align 8
  %50 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 15
  store i32 %b38, i32* %50, align 4
  %51 = bitcast { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure to i8*
  %closure_result = call i32 @halide_do_par_for(i8* null, i32 (i8*, i32, i8*)* nonnull @blur7x7_par_for_blur_y_s0_y_y, i32 0, i32 %t260, i8* nonnull %51) #11
  %52 = load i32, i32* %extent.i, align 4, !tbaa !185
  %53 = bitcast i32* %extent.i29 to <2 x i32>*
  %54 = load <2 x i32>, <2 x i32>* %53, align 4, !tbaa !37
  %55 = load i32, i32* %extent.i36, align 4, !tbaa !185
  %56 = bitcast i32* %extent.i42 to <2 x i32>*
  %57 = load <2 x i32>, <2 x i32>* %56, align 4, !tbaa !37
  %58 = extractelement <2 x i32> %54, i32 0
  %a43 = add nsw i32 %58, 133
  %59 = extractelement <2 x i32> %57, i32 0
  %60 = icmp slt i32 %a43, %59
  %blur_y.s0.y.y.epilogue.s14 = select i1 %60, i32 %a43, i32 %59
  %61 = add nsw i32 %52, 63
  %t27015 = ashr i32 %61, 6
  %a44 = ashr i32 %52, 6
  %62 = icmp sgt i32 %a44, 0
  %t27116 = select i1 %62, i32 %a44, i32 0
  %63 = icmp sgt i32 %52, 64
  %b55 = select i1 %63, i32 %52, i32 64
  %64 = add nuw nsw i32 %b55, 63
  %65 = lshr i32 %64, 6
  %66 = icmp slt i32 %52, 64
  %t27417 = select i1 %66, i32 %52, i32 64
  %67 = sub nsw i32 126, %t27417
  %a48 = ashr i32 %67, 6
  %68 = ashr i32 %t27417, 6
  %b50 = sub nsw i32 1, %68
  %69 = icmp sgt i32 %a48, %b50
  %a47 = select i1 %69, i32 %a48, i32 %b50
  %70 = icmp slt i32 %a47, %65
  %b51 = select i1 %70, i32 %a47, i32 %65
  %b54 = sub nsw i32 %55, %t27417
  %a53 = add nsw i32 %b54, 58
  %71 = icmp slt i32 %a53, %b55
  %72 = select i1 %71, i32 %a53, i32 %b55
  %a52 = add nsw i32 %72, -64
  %73 = icmp slt i32 %a52, %b54
  %a51 = select i1 %73, i32 %a52, i32 %b54
  %a54 = add nsw i32 %55, 63
  %74 = icmp slt i32 %a54, %52
  %75 = select i1 %74, i32 %a54, i32 %52
  %b53 = sub nsw i32 %75, %t27417
  %76 = icmp slt i32 %a51, %b53
  %a50 = select i1 %76, i32 %a51, i32 %b53
  %b52 = add nsw i32 %b55, -1
  %77 = icmp slt i32 %a50, %b52
  %78 = select i1 %77, i32 %a50, i32 %b52
  %79 = ashr i32 %78, 6
  %a49 = add nsw i32 %79, 1
  %.not23 = icmp slt i32 %79, %b51
  %t26418 = select i1 %.not23, i32 %b51, i32 %a49
  %80 = add nsw i32 %blur_y.s0.y.y.epilogue.s14, -6
  %a55 = ashr i32 %80, 7
  %81 = icmp sgt i32 %a55, 0
  %t26119 = select i1 %81, i32 %a55, i32 0
  %82 = add nsw i32 %58, 127
  %t26020 = ashr i32 %82, 7
  %83 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure21, i64 0, i32 0
  store i8* %0, i8** %83, align 8
  %84 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure21, i64 0, i32 1
  store i8* %5, i8** %84, align 8
  %85 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure21, i64 0, i32 2
  store i32 %52, i32* %85, align 8
  %86 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure21, i64 0, i32 3
  %87 = bitcast i32* %86 to <2 x i32>*
  store <2 x i32> %54, <2 x i32>* %87, align 4
  %88 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure21, i64 0, i32 5
  store i32 %55, i32* %88, align 4
  %89 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure21, i64 0, i32 6
  %90 = bitcast i32* %89 to <2 x i32>*
  store <2 x i32> %57, <2 x i32>* %90, align 8
  %91 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure21, i64 0, i32 8
  store i32 %t26119, i32* %91, align 8
  %92 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure21, i64 0, i32 9
  store i32 %t26418, i32* %92, align 4
  %93 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure21, i64 0, i32 10
  store i32 %t27015, i32* %93, align 8
  %94 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure21, i64 0, i32 11
  store i32 %t27116, i32* %94, align 4
  %95 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure21, i64 0, i32 12
  store i32 %b55, i32* %95, align 8
  %96 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure21, i64 0, i32 13
  store i32 %65, i32* %96, align 4
  %97 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure21, i64 0, i32 14
  store i32 %t27417, i32* %97, align 8
  %98 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure21, i64 0, i32 15
  store i32 %b51, i32* %98, align 4
  %99 = bitcast { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure21 to i8*
  %closure_result22 = call i32 @halide_do_par_for(i8* null, i32 (i8*, i32, i8*)* nonnull @blur7x7_par_for_blur_y_s0_y_y, i32 0, i32 %t26020, i8* nonnull %99) #11
  ret i32 0
}

; Function Attrs: nounwind
define i32 @blur7x7_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 8
  %3 = getelementptr i8*, i8** %0, i64 1
  %4 = bitcast i8** %3 to %struct.halide_buffer_t**
  %5 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %4, align 8
  %6 = tail call i32 @blur7x7(%struct.halide_buffer_t* %2, %struct.halide_buffer_t* %5) #15
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @blur7x7_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @blur7x7_metadata_storage
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i64 @llvm.vector.reduce.add.v2i64(<2 x i64>) #9

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nosync nounwind readnone willreturn }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nobuiltin nounwind "no-builtins" }
attributes #14 = { nobuiltin "no-builtins" }
attributes #15 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"apple-a12"}
!4 = !{i32 2, !"halide_mattrs", !"+sve2,+v8.1a,+dotprod,+fullfp16,+reserve-x18"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!12, !12, i64 0}
!15 = !{!16, !16, i64 0}
!16 = !{!"bool", !12, i64 0}
!17 = !{i8 0, i8 2}
!18 = !{!19, !19, i64 0}
!19 = !{!"long long", !12, i64 0}
!20 = !{!21, !22, i64 0}
!21 = !{!"_ZTS18mach_timebase_info", !22, i64 0, !22, i64 4}
!22 = !{!"int", !12, i64 0}
!23 = !{!21, !22, i64 4}
!24 = !{!25, !11, i64 0}
!25 = !{!"_ZTSN6Halide7Runtime8Internal4workE", !26, i64 0, !11, i64 56, !11, i64 64, !11, i64 72, !22, i64 80, !11, i64 88, !22, i64 96, !11, i64 104, !22, i64 112, !22, i64 116, !22, i64 120, !16, i64 124}
!26 = !{!"_ZTS22halide_parallel_task_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !22, i64 32, !22, i64 36, !22, i64 40, !22, i64 44, !16, i64 48}
!27 = !{!25, !22, i64 36}
!28 = !{!25, !22, i64 40}
!29 = !{!25, !16, i64 48}
!30 = !{!25, !11, i64 24}
!31 = !{!25, !22, i64 32}
!32 = !{!25, !11, i64 8}
!33 = !{!25, !22, i64 44}
!34 = !{!25, !11, i64 16}
!35 = !{!25, !11, i64 56}
!36 = !{!25, !11, i64 104}
!37 = !{!22, !22, i64 0}
!38 = !{!25, !22, i64 120}
!39 = !{!25, !16, i64 124}
!40 = !{!25, !11, i64 72}
!41 = !{!25, !22, i64 80}
!42 = !{!25, !11, i64 88}
!43 = !{!25, !22, i64 116}
!44 = !{!45, !45, i64 0}
!45 = !{!"vtable pointer", !13, i64 0}
!46 = !{!47, !11, i64 8}
!47 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE", !11, i64 8}
!48 = !{!49, !16, i64 2121}
!49 = !{!"_ZTSN6Halide7Runtime8Internal12work_queue_tE", !50, i64 0, !22, i64 8, !22, i64 12, !11, i64 16, !22, i64 24, !22, i64 28, !22, i64 32, !51, i64 40, !51, i64 48, !51, i64 56, !22, i64 64, !22, i64 68, !12, i64 72, !16, i64 2120, !16, i64 2121, !22, i64 2124}
!50 = !{!"_ZTS12halide_mutex", !12, i64 0}
!51 = !{!"_ZTS11halide_cond", !12, i64 0}
!52 = distinct !{!52, !53}
!53 = !{!"llvm.loop.mustprogress"}
!54 = !{!49, !22, i64 8}
!55 = distinct !{!55, !53}
!56 = !{!49, !22, i64 24}
!57 = !{!49, !22, i64 2124}
!58 = !{!49, !22, i64 28}
!59 = distinct !{!59, !53}
!60 = !{!25, !22, i64 112}
!61 = !{!25, !22, i64 96}
!62 = !{!49, !11, i64 16}
!63 = !{!25, !11, i64 64}
!64 = distinct !{!64, !53, !65}
!65 = !{!"llvm.loop.isvectorized", i32 1}
!66 = !{!49, !22, i64 68}
!67 = !{!49, !22, i64 32}
!68 = distinct !{!68, !53, !65}
!69 = !{!49, !16, i64 2120}
!70 = distinct !{!70, !53}
!71 = !{!72, !11, i64 0}
!72 = !{!"_ZTS26halide_semaphore_acquire_t", !11, i64 0, !22, i64 8}
!73 = !{!72, !22, i64 8}
!74 = distinct !{!74, !53}
!75 = !{!49, !22, i64 64}
!76 = distinct !{!76, !53}
!77 = distinct !{!77, !53}
!78 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !37, i64 36, i64 4, !37, i64 40, i64 4, !37, i64 44, i64 4, !37, i64 48, i64 1, !15, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 8, !10, i64 80, i64 4, !37, i64 88, i64 8, !10, i64 96, i64 4, !37, i64 104, i64 8, !10, i64 112, i64 4, !37, i64 116, i64 4, !37, i64 120, i64 4, !37, i64 124, i64 1, !15}
!79 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !37, i64 28, i64 4, !37, i64 32, i64 4, !37, i64 36, i64 4, !37, i64 40, i64 1, !15, i64 48, i64 8, !10, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 4, !37, i64 80, i64 8, !10, i64 88, i64 4, !37, i64 96, i64 8, !10, i64 104, i64 4, !37, i64 108, i64 4, !37, i64 112, i64 4, !37, i64 116, i64 1, !15}
!80 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !37, i64 32, i64 8, !10, i64 40, i64 4, !37, i64 48, i64 8, !10, i64 56, i64 4, !37, i64 60, i64 4, !37, i64 64, i64 4, !37, i64 68, i64 1, !15}
!81 = !{i64 0, i64 8, !10, i64 8, i64 4, !37, i64 12, i64 4, !37, i64 16, i64 4, !37, i64 20, i64 1, !15}
!82 = distinct !{!82, !53}
!83 = distinct !{!83, !53}
!84 = !{!85, !11, i64 144}
!85 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization10queue_dataE", !86, i64 0, !19, i64 136, !11, i64 144, !19, i64 152}
!86 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization13thread_parkerE", !87, i64 0, !88, i64 64, !16, i64 128}
!87 = !{!"_ZTS15pthread_mutex_t", !12, i64 0}
!88 = !{!"_ZTS14pthread_cond_t", !12, i64 0}
!89 = !{!90, !11, i64 16}
!90 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11hash_bucketE", !91, i64 0, !11, i64 8, !11, i64 16}
!91 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization9word_lockE", !19, i64 0}
!92 = distinct !{!92, !53}
!93 = !{!85, !19, i64 152}
!94 = !{!86, !16, i64 128}
!95 = distinct !{!95, !53}
!96 = !{!97, !11, i64 152}
!97 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20word_lock_queue_dataE", !86, i64 0, !11, i64 136, !11, i64 144, !11, i64 152}
!98 = !{!97, !11, i64 136}
!99 = !{!97, !11, i64 144}
!100 = distinct !{!100, !53}
!101 = distinct !{!101, !53}
!102 = distinct !{!102, !53}
!103 = !{!104, !11, i64 8}
!104 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE", !11, i64 8, !11, i64 16}
!105 = !{!104, !11, i64 16}
!106 = !{!107, !11, i64 8}
!107 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE", !11, i64 8, !11, i64 16}
!108 = !{!107, !11, i64 16}
!109 = !{!85, !19, i64 136}
!110 = !{!111, !16, i64 0}
!111 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization15validate_actionE", !16, i64 0, !19, i64 8}
!112 = !{!111, !19, i64 8}
!113 = !{!90, !11, i64 8}
!114 = !{!115, !11, i64 0}
!115 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11bucket_pairE", !11, i64 0, !11, i64 8}
!116 = distinct !{!116, !53}
!117 = !{!115, !11, i64 8}
!118 = !{!119, !11, i64 0}
!119 = !{!"_ZTSN6Halide7Runtime8Internal14spawned_threadE", !11, i64 0, !11, i64 8, !120, i64 16}
!120 = !{!"long", !12, i64 0}
!121 = !{!119, !11, i64 8}
!122 = !{!119, !120, i64 16}
!123 = !{!26, !22, i64 40}
!124 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !37, i64 36, i64 4, !37, i64 40, i64 4, !37, i64 44, i64 4, !37, i64 48, i64 1, !15}
!125 = distinct !{!125, !53}
!126 = distinct !{!126, !53}
!127 = distinct !{!127, !53}
!128 = !{!129, !11, i64 8}
!129 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE", !11, i64 8, !11, i64 16}
!130 = !{!129, !11, i64 16}
!131 = !{!132, !11, i64 0}
!132 = !{!"_ZTS18halide_mutex_array", !11, i64 0}
!133 = distinct !{!133, !53}
!134 = !{!135, !138, i64 34}
!135 = !{!"_ZTS20halide_trace_event_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !136, i64 32, !139, i64 36, !22, i64 40, !22, i64 44, !22, i64 48}
!136 = !{!"_ZTS13halide_type_t", !137, i64 0, !12, i64 1, !138, i64 2}
!137 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!138 = !{!"short", !12, i64 0}
!139 = !{!"_ZTS25halide_trace_event_code_t", !12, i64 0}
!140 = !{!136, !12, i64 1}
!141 = !{!135, !22, i64 48}
!142 = !{!135, !11, i64 0}
!143 = !{!135, !11, i64 24}
!144 = !{!145, !22, i64 0}
!145 = !{!"_ZTSN6Halide7Runtime8Internal23SharedExclusiveSpinLockE", !22, i64 0}
!146 = !{!147, !22, i64 4}
!147 = !{!"_ZTSN6Halide7Runtime8Internal11TraceBufferE", !145, i64 0, !22, i64 4, !22, i64 8, !12, i64 12}
!148 = !{!147, !22, i64 8}
!149 = distinct !{!149, !53}
!150 = !{!151, !22, i64 0}
!151 = !{!"_ZTS21halide_trace_packet_t", !22, i64 0, !22, i64 4, !136, i64 8, !139, i64 12, !22, i64 16, !22, i64 20, !22, i64 24}
!152 = !{!151, !22, i64 4}
!153 = !{!135, !11, i64 16}
!154 = !{!135, !11, i64 8}
!155 = !{!151, !22, i64 24}
!156 = !{!151, !138, i64 10}
!157 = distinct !{!157, !53}
!158 = !{!135, !139, i64 36}
!159 = !{!135, !12, i64 33}
!160 = distinct !{!160, !53}
!161 = !{!135, !22, i64 44}
!162 = distinct !{!162, !53, !163}
!163 = !{!"llvm.loop.peeled.count", i32 1}
!164 = !{!135, !137, i64 32}
!165 = !{!138, !138, i64 0}
!166 = !{!167, !167, i64 0}
!167 = !{!"float", !12, i64 0}
!168 = !{!169, !169, i64 0}
!169 = !{!"double", !12, i64 0}
!170 = distinct !{!170, !53, !163}
!171 = distinct !{!171, !53}
!172 = !{!135, !22, i64 40}
!173 = distinct !{!173, !53}
!174 = distinct !{!174, !53}
!175 = distinct !{!175, !53}
!176 = !{!177, !11, i64 16}
!177 = !{!"_ZTS15halide_buffer_t", !19, i64 0, !11, i64 8, !11, i64 16, !19, i64 24, !136, i64 32, !22, i64 36, !11, i64 40, !11, i64 48}
!178 = !{!177, !19, i64 0}
!179 = !{!177, !22, i64 36}
!180 = !{!177, !11, i64 40}
!181 = !{!182, !22, i64 8}
!182 = !{!"_ZTS18halide_dimension_t", !22, i64 0, !22, i64 4, !22, i64 8, !22, i64 12}
!183 = distinct !{!183, !53, !65}
!184 = !{i64 0, i64 4, !37, i64 4, i64 4, !37, i64 8, i64 4, !37, i64 12, i64 4, !37}
!185 = !{!182, !22, i64 4}
!186 = distinct !{!186, !53}
!187 = distinct !{!187, !53, !65}
!188 = !{!189, !138, i64 0}
!189 = !{!"_ZTSN6Halide7Runtime8Internal18halide_tiff_headerE", !138, i64 0, !138, i64 2, !22, i64 4, !138, i64 8, !12, i64 10, !22, i64 190, !12, i64 194, !12, i64 202}
!190 = !{!189, !138, i64 2}
!191 = !{!189, !22, i64 4}
!192 = !{!189, !138, i64 8}
!193 = !{!194, !138, i64 0}
!194 = !{!"_ZTSN6Halide7Runtime8Internal8tiff_tagE", !138, i64 0, !138, i64 2, !22, i64 4, !12, i64 8}
!195 = !{!194, !138, i64 2}
!196 = !{!194, !22, i64 4}
!197 = distinct !{!197, !53}
!198 = distinct !{!198, !53}
!199 = distinct !{!199, !53}
!200 = distinct !{!200, !53}
!201 = distinct !{!201, !53}
!202 = !{!203}
!203 = distinct !{!203, !204}
!204 = distinct !{!204, !"LVerDomain"}
!205 = !{!206}
!206 = distinct !{!206, !204}
!207 = distinct !{!207, !53, !65}
!208 = distinct !{!208, !53, !65}
!209 = distinct !{!209, !53, !65}
!210 = distinct !{!210, !53, !65}
!211 = distinct !{!211, !53, !212, !65}
!212 = !{!"llvm.loop.unroll.runtime.disable"}
!213 = distinct !{!213, !53, !65}
!214 = distinct !{!214, !53, !65}
!215 = distinct !{!215, !53, !65}
!216 = distinct !{!216, !53, !65}
!217 = !{!182, !22, i64 0}
!218 = distinct !{!218, !53}
!219 = distinct !{!219, !53, !65}
!220 = distinct !{!220, !53, !212, !65}
!221 = distinct !{!221, !53}
!222 = distinct !{!222, !53}
!223 = distinct !{!223, !53}
!224 = distinct !{!224, !53}
!225 = !{!226, !11, i64 0}
!226 = !{!"_ZTSN6Halide7Runtime8Internal10CacheEntryE", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !120, i64 32, !11, i64 40, !22, i64 48, !22, i64 52, !22, i64 56, !22, i64 60, !11, i64 64, !11, i64 72, !19, i64 80, !16, i64 88}
!227 = distinct !{!227, !53}
!228 = !{!226, !22, i64 56}
!229 = !{!226, !11, i64 24}
!230 = !{!226, !11, i64 72}
!231 = distinct !{!231, !53}
!232 = distinct !{!232, !53}
!233 = !{!234, !19, i64 0}
!234 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !19, i64 0, !19, i64 8, !19, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !19, i64 408}
!235 = !{!234, !19, i64 8}
!236 = !{!234, !19, i64 408}
!237 = distinct !{!237, !53}
!238 = !{!234, !19, i64 16}
!239 = distinct !{!239, !53, !65}
!240 = distinct !{!240, !53, !212, !65}
!241 = distinct !{!241, !53}
!242 = distinct !{!242, !53}
!243 = distinct !{!243, !53}
!244 = distinct !{!244, !53}
!245 = !{i64 0, i64 8, !18, i64 8, i64 8, !18, i64 16, i64 8, !18, i64 24, i64 128, !14, i64 152, i64 128, !14, i64 280, i64 128, !14, i64 408, i64 8, !18}
!246 = distinct !{!246, !53}
!247 = !{!182, !22, i64 12}
!248 = !{!226, !11, i64 16}
!249 = !{!226, !120, i64 32}
!250 = !{!226, !22, i64 48}
!251 = !{!226, !22, i64 52}
!252 = !{!226, !22, i64 60}
!253 = !{!226, !11, i64 64}
!254 = !{!226, !11, i64 40}
!255 = distinct !{!255, !53}
!256 = distinct !{!256, !53}
!257 = distinct !{!257, !53}
!258 = !{!226, !16, i64 88}
!259 = !{!226, !19, i64 80}
!260 = !{i64 0, i64 8, !18, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !18, i64 32, i64 1, !261, i64 33, i64 1, !14, i64 34, i64 2, !165, i64 36, i64 4, !37, i64 40, i64 8, !10, i64 48, i64 8, !10}
!261 = !{!137, !137, i64 0}
!262 = distinct !{!262, !53}
!263 = distinct !{!263, !53}
!264 = !{!226, !11, i64 8}
!265 = distinct !{!265, !53}
!266 = distinct !{!266, !53, !65}
!267 = distinct !{!267, !53, !65}
!268 = distinct !{!268, !53, !65}
!269 = distinct !{!269, !53, !65}
!270 = distinct !{!270, !53}
!271 = distinct !{!271, !53}
!272 = distinct !{!272, !53}
!273 = distinct !{!273, !53}
!274 = distinct !{!274, !53}
!275 = distinct !{!275, !53, !65}
!276 = distinct !{!276, !53, !65}
!277 = distinct !{!277, !53, !65}
!278 = distinct !{!278, !53, !65}
!279 = distinct !{!279, !53}
!280 = !{!281, !22, i64 8}
!281 = !{!"_ZTSN6Halide7Runtime8Internal16CacheBlockHeaderE", !11, i64 0, !22, i64 8}
!282 = !{!281, !11, i64 0}
!283 = distinct !{!283, !53}
!284 = distinct !{!284, !53}
!285 = distinct !{!285, !53}
!286 = distinct !{!286, !53}
!287 = distinct !{!287, !53, !65}
!288 = distinct !{!288, !53, !65}
!289 = distinct !{!289, !53, !65}
!290 = distinct !{!290, !53, !65}
!291 = distinct !{!291, !53}
!292 = distinct !{!292, !53}
!293 = distinct !{!293, !53}
!294 = distinct !{!294, !53}
!295 = distinct !{!295, !53}
!296 = distinct !{!296, !53}
!297 = distinct !{!297, !53}
!298 = distinct !{!298, !53}
!299 = distinct !{!299, !53}
!300 = !{!136, !137, i64 0}
!301 = !{!136, !138, i64 2}
!302 = !{!177, !11, i64 8}
!303 = !{!177, !19, i64 24}
!304 = distinct !{!304, !53}
!305 = !{!306, !11, i64 0}
!306 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 8}
!307 = distinct !{!307, !53}
!308 = !{!306, !11, i64 8}
!309 = !{!310, !11, i64 120}
!310 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!311 = !{!312, !11, i64 48}
!312 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!313 = !{!312, !11, i64 40}
!314 = !{!312, !11, i64 56}
!315 = !{!312, !11, i64 0}
!316 = !{!312, !11, i64 16}
!317 = !{!312, !11, i64 8}
!318 = !{!312, !11, i64 32}
!319 = !{!312, !11, i64 24}
!320 = !{!312, !11, i64 64}
!321 = !{!312, !11, i64 72}
!322 = distinct !{!322, !53, !65}
!323 = distinct !{!323, !53, !65}
!324 = distinct !{!324, !53, !65}
!325 = distinct !{!325, !53, !65}
!326 = !{!312, !11, i64 112}
!327 = !{!312, !11, i64 120}
!328 = !{!312, !11, i64 80}
!329 = !{!312, !11, i64 88}
!330 = !{!312, !11, i64 96}
!331 = !{!312, !11, i64 104}
!332 = !{i32 22, i32 33}
!333 = !{!334, !11, i64 40}
!334 = !{!"_ZTS21halide_profiler_state", !50, i64 0, !22, i64 8, !22, i64 12, !22, i64 16, !22, i64 20, !11, i64 24, !11, i64 32, !11, i64 40}
!335 = !{!334, !22, i64 16}
!336 = !{!337, !19, i64 0}
!337 = !{!"_ZTS30halide_profiler_pipeline_stats", !19, i64 0, !19, i64 8, !19, i64 16, !19, i64 24, !19, i64 32, !19, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !22, i64 72, !22, i64 76, !22, i64 80, !22, i64 84, !22, i64 88}
!338 = !{!337, !22, i64 80}
!339 = !{!337, !19, i64 32}
!340 = !{!337, !19, i64 40}
!341 = !{!337, !11, i64 48}
!342 = !{!337, !22, i64 84}
!343 = !{!337, !22, i64 88}
!344 = !{!337, !19, i64 16}
!345 = !{!337, !19, i64 24}
!346 = !{!337, !22, i64 72}
!347 = !{!337, !11, i64 56}
!348 = distinct !{!348, !53}
!349 = !{!350, !19, i64 32}
!350 = !{!"_ZTS26halide_profiler_func_stats", !19, i64 0, !19, i64 8, !19, i64 16, !19, i64 24, !19, i64 32, !19, i64 40, !19, i64 48, !11, i64 56, !22, i64 64}
!351 = !{!350, !19, i64 0}
!352 = !{!350, !11, i64 56}
!353 = distinct !{!353, !53}
!354 = distinct !{!354, !53}
!355 = distinct !{!355, !53}
!356 = !{!350, !19, i64 40}
!357 = !{!350, !19, i64 48}
!358 = distinct !{!358, !53}
!359 = !{!350, !19, i64 16}
!360 = distinct !{!360, !53}
!361 = !{!350, !22, i64 64}
!362 = distinct !{!362, !53}
!363 = !{!350, !19, i64 24}
!364 = distinct !{!364, !53}
!365 = distinct !{!365, !53}
!366 = !{!334, !11, i64 24}
!367 = !{!337, !11, i64 64}
!368 = distinct !{!368, !53}
!369 = !{!334, !22, i64 12}
!370 = distinct !{!370, !53}
!371 = !{!337, !22, i64 76}
!372 = distinct !{!372, !53}
!373 = distinct !{!373, !53}
!374 = !{!334, !11, i64 32}
!375 = !{!334, !22, i64 20}
!376 = !{!334, !22, i64 8}
!377 = distinct !{!377, !53}
!378 = distinct !{!378, !53}
!379 = distinct !{!379, !53}
!380 = distinct !{!380, !53}
!381 = !{!"branch_weights", i32 1073741824, i32 0}
!382 = !{!383, !383, i64 0}
!383 = !{!"input", !384, i64 0}
!384 = !{!"Halide buffer"}
!385 = !{!386, !386, i64 0}
!386 = !{!"blur_x", !384, i64 0}
!387 = !{!388, !388, i64 0}
!388 = !{!"blur_y", !384, i64 0}
!389 = !{!"branch_weights", i32 1073741824, i32 1073741824}
