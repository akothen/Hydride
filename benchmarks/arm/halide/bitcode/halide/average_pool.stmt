module name=average_pool, target=arm-64-osx-arm_dot_prod-arm_fp16-armv7s-armv81a-no_asserts-no_bounds_query-sve-sve2
external_plus_metadata func average_pool (input, stride_x, stride_y, filter_width, filter_height, output_min, output_max, output) {
assert((uint64)reinterpret((halide_buffer_t *)output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("output"))
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let input.min.2 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 2)
let input.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 2)
let input.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 2)
let input.min.3 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 3)
let input.stride.3 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 3)
let output = (void *)_halide_buffer_get_host((halide_buffer_t *)output.buffer)
let output.min.0 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 0)
let output.min.1 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 1)
let output.min.2 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 2)
let output.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 2)
let output.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 2)
let output.min.3 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 3)
let output.extent.3 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 3)
let output.stride.3 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 3)
assert(input.stride.0 == 1, 0)
assert(output.stride.0 == 1, 0)
produce output {
 let t89 = (output.extent.0 + 127)/128
 let t93 = (((output.min.0 - (output.min.3*output.stride.3)) - (output.min.2*output.stride.2)) - (output.min.1*output.stride.1)) - output.min.0
 let t92 = (((output.min.0 - (input.min.3*input.stride.3)) - (input.min.2*input.stride.2)) - (input.min.1*input.stride.1)) - input.min.0
 let t90 = input.extent.2 + input.min.2
 let t91 = input.extent.1 + input.min.1
 for (output.s0.y.rebased, 0, output.extent.2) {
  let t98 = output.min.2 + output.s0.y.rebased
  let t99 = stride_y*t98
  let t95 = min(t90 - t99, filter_height)
  let t94 = min(input.min.2 - t99, filter_height)
  let t97 = (output.stride.2*t98) + t93
  for (output.s0.x.rebased, 0, output.extent.1) {
   let t108 = output.min.1 + output.s0.x.rebased
   let t109 = max(t94, 0)
   let t110 = stride_x*t108
   let t100 = max(t94, t95)
   let t103 = min(t91 - t110, filter_width)
   let t102 = min(input.min.1 - t110, filter_width)
   let t106 = (min(filter_width + t110, t91) - max(input.min.1, t110))*(min(filter_height + t99, t90) - max(input.min.2, t99))
   let t104 = t109 + t99
   let t107 = (output.stride.1*t108) + t97
   for (output.s0.b.rebased, 0, output.extent.3) {
    let t118 = output.min.3 + output.s0.b.rebased
    let t119 = max(t102, 0)
    let t112 = max(t102, t103)
    let t111 = max(t100, 0) - t109
    let t115 = t110 + t119
    let t117 = (output.stride.3*t118) + t107
    let t114 = (input.stride.3*t118) + t92
    let t116 = uint16(max(min((t106 + 131072)/(t106*2), 65535), 0))
    for (output.s0.c.c, 0, t89) {
     let output.s0.c.v6.base.s = min(output.s0.c.c*128, output.extent.0 + -128)
     allocate sum[uint16 * 128 * 1 * 1 * 1 * 1]
     produce sum {
      sum[ramp(0, 1, 128)] = x128((uint16)0)
      let t120 = max(t112, 0) - t119
      let t121 = output.s0.c.v6.base.s + t114
      for (sum.s1.r12$y.rebased, 0, t111) {
       let t122 = ((sum.s1.r12$y.rebased + t104)*input.stride.2) + t121
       for (sum.s1.r12$x.rebased, 0, t120) {
        sum[ramp(0, 1, 128)] = sum[ramp(0, 1, 128)] + uint16x128(input[ramp(((sum.s1.r12$x.rebased + t115)*input.stride.1) + t122, 1, 128)])
       }
      }
     }
     consume sum {
      output[ramp(output.s0.c.v6.base.s + t117, 1, 128)] = max(min(uint8x128(min((uint16x128)rounding_mul_shift_right(sum[ramp(0, 1, 128)], x128(t116), x128((uint16)16)), x128((uint16)255))), x128((uint8)output_max)), x128((uint8)output_min))
     }
     free sum
    }
   }
  }
 }
}
}


