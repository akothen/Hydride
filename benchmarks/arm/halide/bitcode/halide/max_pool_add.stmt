module name=max_pool_add, target=arm-64-osx-arm_dot_prod-arm_fp16-armv7s-armv81a-no_asserts-no_bounds_query-sve-sve2
external_plus_metadata func max_pool_add (input, tensor, stride_x, stride_y, filter_width, filter_height, output_min, output_max, output) {
assert((uint64)reinterpret((halide_buffer_t *)tensor.buffer) != (uint64)0, halide_error_buffer_argument_is_null("tensor"))
assert((uint64)reinterpret((halide_buffer_t *)output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("output"))
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let input.min.2 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 2)
let input.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 2)
let input.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 2)
let input.min.3 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 3)
let input.stride.3 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 3)
let output = (void *)_halide_buffer_get_host((halide_buffer_t *)output.buffer)
let output.min.0 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 0)
let output.min.1 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 1)
let output.min.2 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 2)
let output.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 2)
let output.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 2)
let output.min.3 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 3)
let output.extent.3 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 3)
let output.stride.3 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 3)
let tensor = (void *)_halide_buffer_get_host((halide_buffer_t *)tensor.buffer)
let tensor.min.0 = _halide_buffer_get_min((halide_buffer_t *)tensor.buffer, 0)
let tensor.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)tensor.buffer, 0)
let tensor.min.1 = _halide_buffer_get_min((halide_buffer_t *)tensor.buffer, 1)
let tensor.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)tensor.buffer, 1)
let tensor.min.2 = _halide_buffer_get_min((halide_buffer_t *)tensor.buffer, 2)
let tensor.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)tensor.buffer, 2)
let tensor.min.3 = _halide_buffer_get_min((halide_buffer_t *)tensor.buffer, 3)
let tensor.stride.3 = _halide_buffer_get_stride((halide_buffer_t *)tensor.buffer, 3)
assert(input.stride.0 == 1, 0)
assert(output.stride.0 == 1, 0)
assert(tensor.stride.0 == 1, 0)
produce output {
 let t95 = (output.extent.0 + 63)/64
 let t99 = (((output.min.0 - (tensor.min.3*tensor.stride.3)) - (tensor.min.2*tensor.stride.2)) - (tensor.min.1*tensor.stride.1)) - tensor.min.0
 let t100 = (((output.min.0 - (output.min.3*output.stride.3)) - (output.min.2*output.stride.2)) - (output.min.1*output.stride.1)) - output.min.0
 let t98 = (((output.min.0 - (input.min.3*input.stride.3)) - (input.min.2*input.stride.2)) - (input.min.1*input.stride.1)) - input.min.0
 let t96 = input.extent.2 + input.min.2
 let t97 = input.extent.1 + input.min.1
 for (output.s0.y.rebased, 0, output.extent.2) {
  let t105 = output.min.2 + output.s0.y.rebased
  let t106 = stride_y*t105
  let t102 = min(t96 - t106, filter_height)
  let t101 = min(input.min.2 - t106, filter_height)
  for (output.s0.x.rebased, 0, output.extent.1) {
   let t116 = output.min.1 + output.s0.x.rebased
   let t117 = max(t101, 0)
   let t118 = stride_x*t116
   let t107 = max(t101, t102)
   let t110 = min(t97 - t118, filter_width)
   let t109 = min(input.min.1 - t118, filter_width)
   let t111 = t106 + t117
   let t114 = (max(min(t96 + -1, t105), input.min.2)*tensor.stride.2) + t99
   let t115 = (output.stride.2*t105) + t100
   for (output.s0.b.rebased, 0, output.extent.3) {
    let t127 = output.min.3 + output.s0.b.rebased
    let t128 = max(t109, 0)
    let t120 = max(t109, t110)
    let t119 = max(t107, 0) - t117
    let t123 = t118 + t128
    let t125 = (max(min(t97 + -1, t116), input.min.1)*tensor.stride.1) + t114
    let t122 = (input.stride.3*t127) + t98
    let t126 = (output.stride.1*t116) + t115
    for (output.s0.c.c, 0, t95) {
     let output.s0.c.v2.base.s = min(output.s0.c.c*64, output.extent.0 + -64)
     allocate maximum[uint8 * 64]
     produce maximum {
      maximum[ramp(0, 1, 64)] = x64((uint8)output_min)
      let t129 = max(t120, 0) - t128
      let t130 = output.s0.c.v2.base.s + t122
      for (maximum.s1.r20$y.rebased, 0, t119) {
       let t131 = ((maximum.s1.r20$y.rebased + t111)*input.stride.2) + t130
       for (maximum.s1.r20$x.rebased, 0, t129) {
        maximum[ramp(0, 1, 64)] = max(maximum[ramp(0, 1, 64)], input[ramp(((maximum.s1.r20$x.rebased + t123)*input.stride.1) + t131, 1, 64)])
       }
      }
     }
     consume maximum {
      output[ramp(((output.stride.3*t127) + t126) + output.s0.c.v2.base.s, 1, 64)] = min(maximum[ramp(0, 1, 64)] + tensor[ramp(((t127*tensor.stride.3) + t125) + output.s0.c.v2.base.s, 1, 64)], x64((uint8)output_max))
     }
     free maximum
    }
   }
  }
 }
}
}


