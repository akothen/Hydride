module name=matmul, target=arm-64-osx-no_asserts-no_bounds_query
external_plus_metadata func matmul (A, B, res) {
assert((uint64)reinterpret((halide_buffer_t *)res.buffer) != (uint64)0, halide_error_buffer_argument_is_null("res"))
assert((uint64)reinterpret((halide_buffer_t *)B.buffer) != (uint64)0, halide_error_buffer_argument_is_null("B"))
assert((uint64)reinterpret((halide_buffer_t *)A.buffer) != (uint64)0, halide_error_buffer_argument_is_null("A"))
let A = (void *)_halide_buffer_get_host((halide_buffer_t *)A.buffer)
let A.min.0 = _halide_buffer_get_min((halide_buffer_t *)A.buffer, 0)
let A.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)A.buffer, 0)
let A.min.1 = _halide_buffer_get_min((halide_buffer_t *)A.buffer, 1)
let A.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)A.buffer, 1)
let B = (void *)_halide_buffer_get_host((halide_buffer_t *)B.buffer)
let B.min.0 = _halide_buffer_get_min((halide_buffer_t *)B.buffer, 0)
let B.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)B.buffer, 0)
let B.min.1 = _halide_buffer_get_min((halide_buffer_t *)B.buffer, 1)
let B.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)B.buffer, 1)
let res = (void *)_halide_buffer_get_host((halide_buffer_t *)res.buffer)
let res.min.0 = _halide_buffer_get_min((halide_buffer_t *)res.buffer, 0)
let res.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)res.buffer, 0)
let res.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)res.buffer, 0)
let res.min.1 = _halide_buffer_get_min((halide_buffer_t *)res.buffer, 1)
let res.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)res.buffer, 1)
let res.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)res.buffer, 1)
assert(A.stride.0 == 1, 0)
assert(B.stride.0 == 1, 0)
assert(res.stride.0 == 1, 0)
produce res {
 let t89 = (res.extent.1 + 7)/8
 let t90 = (res.extent.0 + 7)/8
 let t91 = (res.min.0 - (B.min.1*B.stride.1)) - B.min.0
 let t93 = 0 - (res.min.1*res.stride.1)
 let t92 = (A.min.1*A.stride.1) + A.min.0
 for (res.s0.y.y, 0, t89) {
  let res.s0.y.yi.base.s = min(res.s0.y.y*8, res.extent.1 + -8)
  let t103 = res.min.1 + res.s0.y.yi.base.s
  let t101 = ((t103 + 7)*A.stride.1) - t92
  let t100 = ((t103 + 6)*A.stride.1) - t92
  let t99 = ((t103 + 5)*A.stride.1) - t92
  let t98 = ((t103 + 4)*A.stride.1) - t92
  let t97 = ((t103 + 3)*A.stride.1) - t92
  let t96 = ((t103 + 2)*A.stride.1) - t92
  let t95 = ((t103 + 1)*A.stride.1) - t92
  let t94 = (A.stride.1*t103) - t92
  for (res.s0.x.x, 0, t90) {
   let res.s0.x.xi.base.s = min(res.s0.x.x*8, res.extent.0 + -8)
   allocate matrix_mul[int32 * 64] in Stack
   produce matrix_mul {
    matrix_mul[ramp(0, 1, 8)] = x8(0)
    matrix_mul[ramp(8, 1, 8)] = x8(0)
    matrix_mul[ramp(16, 1, 8)] = x8(0)
    matrix_mul[ramp(24, 1, 8)] = x8(0)
    matrix_mul[ramp(32, 1, 8)] = x8(0)
    matrix_mul[ramp(40, 1, 8)] = x8(0)
    matrix_mul[ramp(48, 1, 8)] = x8(0)
    matrix_mul[ramp(56, 1, 8)] = x8(0)
    let t104 = res.s0.x.xi.base.s + t91
    for (matrix_mul.s1.r8$x.r8$x, 0, 128) {
     matrix_mul[ramp(0, 1, 8)] = matrix_mul[ramp(0, 1, 8)] + int32x8((int16x8)widening_mul(B[ramp(((B.stride.1*matrix_mul.s1.r8$x.r8$x)*2) + t104, 1, 8)], x8(A[(matrix_mul.s1.r8$x.r8$x*2) + t94])))
     matrix_mul[ramp(8, 1, 8)] = matrix_mul[ramp(8, 1, 8)] + int32x8((int16x8)widening_mul(B[ramp(((B.stride.1*matrix_mul.s1.r8$x.r8$x)*2) + t104, 1, 8)], x8(A[(matrix_mul.s1.r8$x.r8$x*2) + t95])))
     matrix_mul[ramp(16, 1, 8)] = matrix_mul[ramp(16, 1, 8)] + int32x8((int16x8)widening_mul(B[ramp(((B.stride.1*matrix_mul.s1.r8$x.r8$x)*2) + t104, 1, 8)], x8(A[(matrix_mul.s1.r8$x.r8$x*2) + t96])))
     matrix_mul[ramp(24, 1, 8)] = matrix_mul[ramp(24, 1, 8)] + int32x8((int16x8)widening_mul(B[ramp(((B.stride.1*matrix_mul.s1.r8$x.r8$x)*2) + t104, 1, 8)], x8(A[(matrix_mul.s1.r8$x.r8$x*2) + t97])))
     matrix_mul[ramp(32, 1, 8)] = matrix_mul[ramp(32, 1, 8)] + int32x8((int16x8)widening_mul(B[ramp(((B.stride.1*matrix_mul.s1.r8$x.r8$x)*2) + t104, 1, 8)], x8(A[(matrix_mul.s1.r8$x.r8$x*2) + t98])))
     matrix_mul[ramp(40, 1, 8)] = matrix_mul[ramp(40, 1, 8)] + int32x8((int16x8)widening_mul(B[ramp(((B.stride.1*matrix_mul.s1.r8$x.r8$x)*2) + t104, 1, 8)], x8(A[(matrix_mul.s1.r8$x.r8$x*2) + t99])))
     matrix_mul[ramp(48, 1, 8)] = matrix_mul[ramp(48, 1, 8)] + int32x8((int16x8)widening_mul(B[ramp(((B.stride.1*matrix_mul.s1.r8$x.r8$x)*2) + t104, 1, 8)], x8(A[(matrix_mul.s1.r8$x.r8$x*2) + t100])))
     matrix_mul[ramp(56, 1, 8)] = matrix_mul[ramp(56, 1, 8)] + int32x8((int16x8)widening_mul(B[ramp(((B.stride.1*matrix_mul.s1.r8$x.r8$x)*2) + t104, 1, 8)], x8(A[(matrix_mul.s1.r8$x.r8$x*2) + t101])))
     matrix_mul[ramp(0, 1, 8)] = matrix_mul[ramp(0, 1, 8)] + int32x8((int16x8)widening_mul(B[ramp((((matrix_mul.s1.r8$x.r8$x*2) + 1)*B.stride.1) + t104, 1, 8)], x8(A[((matrix_mul.s1.r8$x.r8$x*2) + t94) + 1])))
     matrix_mul[ramp(8, 1, 8)] = matrix_mul[ramp(8, 1, 8)] + int32x8((int16x8)widening_mul(B[ramp((((matrix_mul.s1.r8$x.r8$x*2) + 1)*B.stride.1) + t104, 1, 8)], x8(A[((matrix_mul.s1.r8$x.r8$x*2) + t95) + 1])))
     matrix_mul[ramp(16, 1, 8)] = matrix_mul[ramp(16, 1, 8)] + int32x8((int16x8)widening_mul(B[ramp((((matrix_mul.s1.r8$x.r8$x*2) + 1)*B.stride.1) + t104, 1, 8)], x8(A[((matrix_mul.s1.r8$x.r8$x*2) + t96) + 1])))
     matrix_mul[ramp(24, 1, 8)] = matrix_mul[ramp(24, 1, 8)] + int32x8((int16x8)widening_mul(B[ramp((((matrix_mul.s1.r8$x.r8$x*2) + 1)*B.stride.1) + t104, 1, 8)], x8(A[((matrix_mul.s1.r8$x.r8$x*2) + t97) + 1])))
     matrix_mul[ramp(32, 1, 8)] = matrix_mul[ramp(32, 1, 8)] + int32x8((int16x8)widening_mul(B[ramp((((matrix_mul.s1.r8$x.r8$x*2) + 1)*B.stride.1) + t104, 1, 8)], x8(A[((matrix_mul.s1.r8$x.r8$x*2) + t98) + 1])))
     matrix_mul[ramp(40, 1, 8)] = matrix_mul[ramp(40, 1, 8)] + int32x8((int16x8)widening_mul(B[ramp((((matrix_mul.s1.r8$x.r8$x*2) + 1)*B.stride.1) + t104, 1, 8)], x8(A[((matrix_mul.s1.r8$x.r8$x*2) + t99) + 1])))
     matrix_mul[ramp(48, 1, 8)] = matrix_mul[ramp(48, 1, 8)] + int32x8((int16x8)widening_mul(B[ramp((((matrix_mul.s1.r8$x.r8$x*2) + 1)*B.stride.1) + t104, 1, 8)], x8(A[((matrix_mul.s1.r8$x.r8$x*2) + t100) + 1])))
     matrix_mul[ramp(56, 1, 8)] = matrix_mul[ramp(56, 1, 8)] + int32x8((int16x8)widening_mul(B[ramp((((matrix_mul.s1.r8$x.r8$x*2) + 1)*B.stride.1) + t104, 1, 8)], x8(A[((matrix_mul.s1.r8$x.r8$x*2) + t101) + 1])))
    }
   }
   consume matrix_mul {
    let t105 = res.s0.x.xi.base.s + t93
    for (res.s0.y.yi, 0, 8) {
     res[ramp(((res.s0.y.yi + t103)*res.stride.1) + t105, 1, 8)] = matrix_mul[ramp(res.s0.y.yi*8, 1, 8) aligned(8, 0)]
    }
   }
   free matrix_mul
  }
 }
}
}


