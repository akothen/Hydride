; ModuleID = 'blur5x5'
source_filename = "/home/muchenx2/Hydride/frontends/halide/src/runtime/posix_allocator.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx"

%struct.mach_timebase_info = type { i32, i32 }
%"struct.Halide::Runtime::Internal::Synchronization::hash_table" = type { [1024 x %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"] }
%"struct.Halide::Runtime::Internal::Synchronization::hash_bucket" = type { %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* }
%"class.Halide::Runtime::Internal::Synchronization::word_lock" = type { i64 }
%"struct.Halide::Runtime::Internal::Synchronization::queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", i64, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::thread_parker" = type <{ %struct.pthread_mutex_t, %struct.pthread_mutex_t, i8, [7 x i8] }>
%struct.pthread_mutex_t = type { [8 x i64] }
%"struct.Halide::Runtime::Internal::work_queue_t" = type { %struct.halide_mutex, i32, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i32, i32, [4 x i8], %struct.halide_mutex, %struct.halide_mutex, %struct.halide_mutex, i32, i32, [256 x %struct.halide_thread*], i8, i8, i32 }
%"struct.Halide::Runtime::Internal::work" = type { %struct.halide_parallel_task_t, i32 (i8*, i32, i8*)*, %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"*, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i8*, i32, i32, i32, i8 }
%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8, [7 x i8] }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32, [4 x i8] }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex = type { [1 x i64] }
%struct.halide_thread = type opaque
%"class.Halide::Runtime::Internal::TraceBuffer" = type { %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock", i32, i32, [1048576 x i8] }
%"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" = type { i32 }
%struct.halide_trace_event_t = type <{ i8*, i8*, i32*, i8*, %struct.halide_type_t, i32, i32, i32, i32, [4 x i8] }>
%struct.halide_type_t = type { i8, i8, i16 }
%"struct.Halide::Runtime::Internal::CacheEntry" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, i8*, i64, i8*, i32, i32, i32, i32, %struct.halide_dimension_t*, %struct.halide_buffer_t*, i64, i8, [7 x i8] }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_profiler_state = type { %struct.halide_mutex, i32, i32, i32, i32, %struct.halide_profiler_pipeline_stats*, void (i32*, i32*)*, %struct.halide_thread* }
%struct.halide_profiler_pipeline_stats = type { i64, i64, i64, i64, i64, i64, i8*, %struct.halide_profiler_func_stats*, i8*, i32, i32, i32, i32, i32, [4 x i8] }
%struct.halide_profiler_func_stats = type { i64, i64, i64, i64, i64, i64, i64, i8*, i32, [4 x i8] }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_scalar_value_t = type { %union.anon.28 }
%union.anon.28 = type { double }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64* }
%"struct.Halide::Runtime::Internal::Synchronization::parking_control" = type { i32 (...)** }
%"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* }
%"struct.Halide::Runtime::Internal::Synchronization::validate_action" = type { i8, [7 x i8], i64 }
%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"* }
%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair" = type { %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* }
%"struct.Halide::Runtime::Internal::spawned_thread" = type { void (i8*)*, i8*, i64 }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%"struct.Halide::Runtime::Internal::halide_tiff_header" = type <{ i16, i16, i32, i16, [15 x %"struct.Halide::Runtime::Internal::tiff_tag"], i32, [2 x i32], [2 x i32] }>
%"struct.Halide::Runtime::Internal::tiff_tag" = type { i16, i16, i32, %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" }
%"struct.Halide::Runtime::Internal::CacheBlockHeader" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, i32, [4 x i8] }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }

@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i64)* @halide_default_malloc, align 8
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 8
@_ZN6Halide7Runtime8Internal13error_handlerE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_error, align 8
@.str = private unnamed_addr constant [8 x i8] c"Error: \00", align 1
@_ZN6Halide7Runtime8Internal12custom_printE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_print, align 8
@_ZN6Halide7Runtime8Internal29halide_reference_clock_initedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal22halide_reference_clockE = linkonce local_unnamed_addr global i64 0, align 8
@_ZN6Halide7Runtime8Internal20halide_timebase_infoE = linkonce global %struct.mach_timebase_info zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal15Synchronization5tableE = linkonce global %"struct.Halide::Runtime::Internal::Synchronization::hash_table" zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal10work_queueE = linkonce global %"struct.Halide::Runtime::Internal::work_queue_t" { %struct.halide_mutex zeroinitializer, i32 0, i32 0, %"struct.Halide::Runtime::Internal::work"* null, i32 0, i32 0, i32 0, [4 x i8] undef, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, i32 0, i32 0, [256 x %struct.halide_thread*] zeroinitializer, i8 0, i8 0, i32 0 }, align 8
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 8
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 8
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 8
@_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.5 = private unnamed_addr constant [130 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:386 halide_abort_if_false() failed: next != nullptr\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.5.6 = private unnamed_addr constant [124 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:994 halide_abort_if_false() failed: val & 0x1\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.6 = private unnamed_addr constant [186 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:155 halide_abort_if_false() failed: bytes == limit && \22Logic error in thread pool work queue initialization.\\n\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [263 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:527 halide_abort_if_false() failed: (min_threads <= ((task_parent->task.min_threads * task_parent->active_workers) - task_parent->threads_reserved)) && \22Logic error: thread over commit.\\n\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"HL_NUM_THREADS\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"HL_NUMTHREADS\00", align 1
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 8
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 8
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 8
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 8
@llvm.global_dtors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @halide_thread_pool_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_trace_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_cache_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_profiler_shutdown, i8* null }]
@_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.4 = private unnamed_addr constant [38 x i8] c"halide_set_num_threads: must be >= 0.\00", align 1
@_ZN6Halide7Runtime8Internal17custom_get_symbolE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_get_symbol, align 8
@_ZN6Halide7Runtime8Internal19custom_load_libraryE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_load_library, align 8
@_ZN6Halide7Runtime8Internal25custom_get_library_symbolE = linkonce local_unnamed_addr global i8* (i8*, i8*)* @halide_default_get_library_symbol, align 8
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@_ZN6Halide7Runtime8Internal19halide_trace_bufferE = linkonce local_unnamed_addr global %"class.Halide::Runtime::Internal::TraceBuffer"* null, align 8
@_ZN6Halide7Runtime8Internal17halide_trace_fileE = linkonce local_unnamed_addr global i32 -1, align 4
@_ZN6Halide7Runtime8Internal22halide_trace_file_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE = linkonce local_unnamed_addr global i8* null, align 8
@_ZN6Halide7Runtime8Internal19halide_custom_traceE = linkonce local_unnamed_addr global i32 (i8*, %struct.halide_trace_event_t*)* @halide_default_trace, align 8
@_ZZ20halide_default_traceE3ids = internal global i32 1, align 4
@.str.32 = private unnamed_addr constant [144 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:115 halide_abort_if_false() failed: success && \22Could not write to trace file\22\0A\00", align 1
@.str.31 = private unnamed_addr constant [120 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:87 halide_abort_if_false() failed: size <= buffer_size\0A\00", align 1
@.str.1.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.11 = private unnamed_addr constant [140 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:218 halide_abort_if_false() failed: print_bits <= 64 && \22Tracing bad type\22\0A\00", align 1
@__const.halide_default_trace.event_types = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.17, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0)], align 8
@.str.17 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c">)\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c">, <\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c" = <\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.24 = private unnamed_addr constant [142 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:287 halide_abort_if_false() failed: print_bits >= 16 && \22Tracing a bad type\22\0A\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c" tag = \22\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.3.12 = private unnamed_addr constant [5 x i8] c"Load\00", align 1
@.str.4.13 = private unnamed_addr constant [6 x i8] c"Store\00", align 1
@.str.5.14 = private unnamed_addr constant [18 x i8] c"Begin realization\00", align 1
@.str.6.15 = private unnamed_addr constant [16 x i8] c"End realization\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"Produce\00", align 1
@.str.8.16 = private unnamed_addr constant [12 x i8] c"End produce\00", align 1
@.str.9.17 = private unnamed_addr constant [8 x i8] c"Consume\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"End consume\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Begin pipeline\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"End pipeline\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Tag\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"HL_TRACE_FILE\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.30 = private unnamed_addr constant [139 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:351 halide_abort_if_false() failed: file && \22Failed to open trace file\\n\22\0A\00", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE = linkonce local_unnamed_addr global [10 x i16] [i16 3, i16 3, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2], align 2
@_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\06\09\08\0B\0A\0D\0C\0F\0E", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\09\02\01\04\03\06\05\0D\0C", align 1
@.str.34 = private unnamed_addr constant [51 x i8] c"Bounds query buffer passed to halide_debug_to_file\00", align 1
@.str.1.35 = private unnamed_addr constant [59 x i8] c"Can't debug_to_file a Func with more than four dimensions\0A\00", align 1
@.str.2.36 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.3.37 = private unnamed_addr constant [6 x i8] c".tiff\00", align 1
@.str.4.38 = private unnamed_addr constant [5 x i8] c".tif\00", align 1
@.str.5.39 = private unnamed_addr constant [5 x i8] c".mat\00", align 1
@__const.halide_debug_to_file.header = private unnamed_addr constant [129 x i8] c"MATLAB 5.0 MAT-file, produced by Halide                                                                                     \00\01IM\00", align 1
@.str.6.40 = private unnamed_addr constant [53 x i8] c"Can't debug_to_file to a .mat file greater than 4GB\0A\00", align 1
@_ZN6Halide7Runtime8Internal16memoization_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal13cache_entriesE = linkonce global [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*] zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal18most_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal19least_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal14max_cache_sizeE = linkonce local_unnamed_addr global i64 1048576, align 8
@_ZN6Halide7Runtime8Internal18current_cache_sizeE = linkonce local_unnamed_addr global i64 0, align 8
@.str.2.42 = private unnamed_addr constant [126 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:284 halide_abort_if_false() failed: prev_hash_entry != nullptr\0A\00", align 1
@.str.3.43 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:373 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.4.44 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:377 halide_abort_if_false() failed: least_recently_used == entry\0A\00", align 1
@.str.5.45 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:380 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.9.46 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:472 halide_abort_if_false() failed: no_host_pointers_equal\0A\00", align 1
@.str.12.47 = private unnamed_addr constant [123 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:550 halide_abort_if_false() failed: entry->in_use_count > 0\0A\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.57 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.58 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.59 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.60 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.61 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.62 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.63 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.64 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9.65 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11.67 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12.68 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13.71 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18.72 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17.73 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16.74 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15.75 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14.76 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19.77 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20.78 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21.79 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23.82 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24.83 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 8
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@.str.6.88 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.89 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.90 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.91 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.92 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.93 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.96 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.97 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.98 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.99 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26.100 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27.101 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28.102 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29.103 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30.104 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31.105 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32.106 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33.107 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34.108 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.111 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.112 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.113 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.114 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.115 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.116 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.117 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.118 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.119 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.120 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.121 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.122 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.123 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.124 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.125 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.126 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.127 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.128 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.129 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.130 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.131 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.132 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.133 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.134 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.135 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.136 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.137 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.138 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.139 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.140 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.141 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.142 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.143 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.144 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.145 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.146 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.147 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50.148 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.149 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.150 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.151 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.152 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.153 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.29.163 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.7.164 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8.165 = private unnamed_addr constant [14 x i8] c" total time: \00", align 1
@.str.9.166 = private unnamed_addr constant [4 x i8] c" ms\00", align 1
@.str.10.167 = private unnamed_addr constant [12 x i8] c"  samples: \00", align 1
@.str.11.168 = private unnamed_addr constant [9 x i8] c"  runs: \00", align 1
@.str.12.169 = private unnamed_addr constant [13 x i8] c"  time/run: \00", align 1
@.str.13.170 = private unnamed_addr constant [5 x i8] c" ms\0A\00", align 1
@.str.14.171 = private unnamed_addr constant [24 x i8] c" average threads used: \00", align 1
@.str.15.172 = private unnamed_addr constant [20 x i8] c" heap allocations: \00", align 1
@.str.16.173 = private unnamed_addr constant [20 x i8] c"  peak heap usage: \00", align 1
@.str.17.174 = private unnamed_addr constant [8 x i8] c" bytes\0A\00", align 1
@.str.18.175 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.19.176 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.20.177 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.21.178 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.22.179 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.23.180 = private unnamed_addr constant [3 x i8] c"%)\00", align 1
@.str.24.181 = private unnamed_addr constant [10 x i8] c"threads: \00", align 1
@.str.25.182 = private unnamed_addr constant [8 x i8] c" peak: \00", align 1
@.str.26.183 = private unnamed_addr constant [7 x i8] c" num: \00", align 1
@.str.27.184 = private unnamed_addr constant [7 x i8] c" avg: \00", align 1
@.str.28.185 = private unnamed_addr constant [9 x i8] c" stack: \00", align 1
@_ZZ25halide_profiler_get_stateE1s = internal global %struct.halide_profiler_state { %struct.halide_mutex zeroinitializer, i32 1, i32 0, i32 0, i32 0, %struct.halide_profiler_pipeline_stats* null, void (i32*, i32*)* null, %struct.halide_thread* null }, align 8
@.str.186 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:246 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.1.187 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:273 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.2.188 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:274 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.3.189 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:275 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@.str.4.190 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:309 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.5.191 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:310 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.6.192 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:311 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 8
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.197 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant [4 x i64*] zeroinitializer
@str = private constant [6 x i8] c"input\00", align 32
@1 = private constant [4 x i64*] zeroinitializer
@str.200 = private constant [7 x i8] c"blur_y\00", align 32
@2 = private constant [2 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @0, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i32 0, i32 0), i32 2, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @1, i32 0, i32 0) }]
@str.201 = private constant [84 x i8] c"arm-64-osx-arm_dot_prod-arm_fp16-armv7s-armv81a-no_asserts-no_bounds_query-sve-sve2\00", align 32
@str.202 = private constant [8 x i8] c"blur5x5\00", align 32
@blur5x5_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 2, %struct.halide_filter_argument_t* getelementptr inbounds ([2 x %struct.halide_filter_argument_t], [2 x %struct.halide_filter_argument_t]* @2, i32 0, i32 0), i8* getelementptr inbounds ([84 x i8], [84 x i8]* @str.201, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.202, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.76, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15.75, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16.74, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.73, i64 0, i64 0)], align 8

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i64 %x) #0 {
entry:
  %add = add i64 %x, 32
  %call1 = tail call i8* @malloc(i64 %add) #13
  %cmp = icmp eq i8* %call1, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call1 to i64
  %sub = add i64 %0, 39
  %and = and i64 %sub, -32
  %1 = inttoptr i64 %and to i8*
  %2 = inttoptr i64 %and to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 -1
  store i8* %call1, i8** %arrayidx, align 8, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i64 -8
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !10
  tail call void @free(i8* %1) #13
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i64)* @halide_set_custom_malloc(i8* (i8*, i64)* %user_malloc) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  store i8* (i8*, i64)* %user_malloc, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  ret i8* (i8*, i64)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak noalias i8* @halide_malloc(i8* %user_context, i64 %x) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %user_context, i64 %x) #13
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %ptr) #13
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_error(i8* %user_context, i8* %msg) #0 {
entry:
  %buf = alloca [4096 x i8], align 1
  %0 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %0) #11
  %add.ptr = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 4094
  %call = call i8* @halide_string_to_string(i8* nonnull %0, i8* nonnull %add.ptr, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)) #13
  %add.ptr2 = getelementptr inbounds i8, i8* %call, i64 4094
  %call3 = call i8* @halide_string_to_string(i8* %call, i8* nonnull %add.ptr2, i8* %msg) #13
  %arrayidx = getelementptr inbounds i8, i8* %call3, i64 -1
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %cmp.not = icmp eq i8 %1, 10
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8 10, i8* %call3, align 1, !tbaa !14
  %arrayidx5 = getelementptr inbounds i8, i8* %call3, i64 1
  store i8 0, i8* %arrayidx5, align 1, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %dst.0 = phi i8* [ %arrayidx5, %if.then ], [ %call3, %entry ]
  %sub.ptr.lhs.cast = ptrtoint i8* %dst.0 to i64
  %sub.ptr.rhs.cast = ptrtoint [4096 x i8]* %buf to i64
  %sub.ptr.sub = sub i64 1, %sub.ptr.rhs.cast
  %add = add i64 %sub.ptr.sub, %sub.ptr.lhs.cast
  %call9 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 %add) #13
  call void @halide_print(i8* %user_context, i8* nonnull %0) #13
  call void @abort() #13
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @abort() local_unnamed_addr #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak void @halide_error(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #13
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_error_handler(void (i8*, i8*)* %handler) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  store void (i8*, i8*)* %handler, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_print(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #13
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_print(void (i8*, i8*)* %print) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  store void (i8*, i8*)* %print, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_start_clock(i8* %user_context) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_reference_clock_initedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i32 @mach_timebase_info(%struct.mach_timebase_info* nonnull @_ZN6Halide7Runtime8Internal20halide_timebase_infoE) #13
  %call1 = tail call i64 @mach_absolute_time() #13
  store i64 %call1, i64* @_ZN6Halide7Runtime8Internal22halide_reference_clockE, align 8, !tbaa !18
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_reference_clock_initedE, align 1, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

declare i32 @mach_timebase_info(%struct.mach_timebase_info*) local_unnamed_addr #1

declare i64 @mach_absolute_time() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i64 @halide_current_time_ns(i8* %user_context) local_unnamed_addr #0 {
entry:
  %call = tail call i64 @mach_absolute_time() #13
  %0 = load i64, i64* @_ZN6Halide7Runtime8Internal22halide_reference_clockE, align 8, !tbaa !18
  %sub = sub i64 %call, %0
  %1 = load i32, i32* getelementptr inbounds (%struct.mach_timebase_info, %struct.mach_timebase_info* @_ZN6Halide7Runtime8Internal20halide_timebase_infoE, i64 0, i32 0), align 4, !tbaa !20
  %conv = zext i32 %1 to i64
  %mul = mul i64 %sub, %conv
  %2 = load i32, i32* getelementptr inbounds (%struct.mach_timebase_info, %struct.mach_timebase_info* @_ZN6Halide7Runtime8Internal20halide_timebase_infoE, i64 0, i32 1), align 4, !tbaa !23
  %conv1 = zext i32 %2 to i64
  %div = udiv i64 %mul, %conv1
  ret i64 %div
}

; Function Attrs: nounwind mustprogress
define weak void @halide_sleep_ms(i8* %user_context, i32 %ms) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %ms, 1000
  %call = tail call i32 @usleep(i32 %mul) #13
  ret void
}

declare i32 @usleep(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_print(i8* %user_context, i8* %str) #0 {
entry:
  %call = tail call i64 @strlen(i8* %str) #13
  %call1 = tail call i64 @write(i32 1, i8* %str, i64 %call) #13
  ret void
}

declare i64 @strlen(i8*) local_unnamed_addr #1

declare i64 @write(i32, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_host_cpu_count() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @sysconf(i32 58) #13
  %conv = trunc i64 %call to i32
  ret i32 %conv
}

declare i64 @sysconf(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_yield() local_unnamed_addr #0 {
entry:
  %call = tail call i32 @swtch_pri(i32 0) #13
  ret void
}

declare i32 @swtch_pri(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #13
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #13
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %job = alloca %"struct.Halide::Runtime::Internal::work", align 8
  %cmp = icmp slt i32 %size, 1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %"struct.Halide::Runtime::Internal::work"* %job to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %0) #11
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 0
  store i32 (i8*, i32, i32, i8*, i8*)* null, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !24
  %min2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 5
  store i32 %min, i32* %min2, align 4, !tbaa !27
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 6
  store i32 %size, i32* %extent, align 8, !tbaa !28
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 8
  store i8 0, i8* %serial, align 8, !tbaa !29
  %semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 3
  store %struct.halide_semaphore_acquire_t* null, %struct.halide_semaphore_acquire_t** %semaphores, align 8, !tbaa !30
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 4
  store i32 0, i32* %num_semaphores, align 8, !tbaa !31
  %closure8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 1
  store i8* %closure, i8** %closure8, align 8, !tbaa !32
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 7
  store i32 0, i32* %min_threads, align 4, !tbaa !33
  %name = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 2
  store i8* null, i8** %name, align 8, !tbaa !34
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 1
  store i32 (i8*, i32, i8*)* %f, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !35
  %user_context11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 7
  store i8* %user_context, i8** %user_context11, align 8, !tbaa !36
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 9
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 8
  %1 = bitcast i32* %active_workers to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %1, align 8, !tbaa !37
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !38
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !39
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %job, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !40
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 4
  store i32 0, i32* %sibling_count, align 8, !tbaa !41
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 5
  store %"struct.Halide::Runtime::Internal::work"* null, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !42
  call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 1, %"struct.Halide::Runtime::Internal::work"* nonnull %job, %"struct.Halide::Runtime::Internal::work"* null) #14
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %job) #14
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %2 = load i32, i32* %exit_status, align 4, !tbaa !43
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %0) #11
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %2, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = load atomic i64, i64* %state.i monotonic, align 8
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %6 = ptrtoint %struct.halide_mutex* %mutex to i64
  br label %while.cond.outer.i.i

while.cond.outer.i.i:                             ; preds = %while.cond.outer.i.i.backedge, %if.then.i
  %expected.0.ph.i.i = phi i64 [ %2, %if.then.i ], [ %expected.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i = phi i32 [ 40, %if.then.i ], [ %spinner.sroa.0.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %and55.i.i = and i64 %expected.0.ph.i.i, 1
  %tobool.not56.i.i = icmp eq i64 %and55.i.i, 0
  br i1 %tobool.not56.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %while.cond.outer.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %expected.057.i.i = phi i64 [ %9, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i ], [ %expected.0.ph.i.i, %while.cond.outer.i.i ]
  %or.i.i = or i64 %expected.057.i.i, 1
  %7 = cmpxchg weak i64* %state.i, i64 %expected.057.i.i, i64 %or.i.i acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then.i.i
  %9 = extractvalue { i64, i1 } %7, 0
  %and.i.i = and i64 %9, 1
  %tobool.not.i.i = icmp eq i64 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.end4.i.i.loopexit

if.end4.i.i.loopexit:                             ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %10 = extractvalue { i64, i1 } %7, 0
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end4.i.i.loopexit, %while.cond.outer.i.i
  %expected.0.lcssa.i.i = phi i64 [ %expected.0.ph.i.i, %while.cond.outer.i.i ], [ %10, %if.end4.i.i.loopexit ]
  %cmp.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i, 0
  br i1 %cmp.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, label %if.end8.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i: ; preds = %if.end4.i.i
  %cmp4.i.not.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i, 1
  br i1 %cmp4.i.not.i.i, label %if.end8.i.i, label %if.then6.i.i

if.then6.i.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i
  %dec.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i, -1
  call void @halide_thread_yield() #13
  %11 = load atomic i64, i64* %state.i monotonic, align 8
  br label %while.cond.outer.i.i.backedge

if.end8.i.i:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, %if.end4.i.i
  %spinner.sroa.0.152.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i ], [ %spinner.sroa.0.0.ph.i.i, %if.end4.i.i ]
  %and9.i.i = and i64 %expected.0.lcssa.i.i, 2
  %cmp.i.i = icmp eq i64 %and9.i.i, 0
  br i1 %cmp.i.i, label %if.then10.i.i, label %if.end19.i.i

if.then10.i.i:                                    ; preds = %if.end8.i.i
  %or12.i.i = or i64 %expected.0.lcssa.i.i, 2
  %12 = cmpxchg weak i64* %state.i, i64 %expected.0.lcssa.i.i, i64 %or12.i.i monotonic monotonic
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %if.end19.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then10.i.i
  %14 = extractvalue { i64, i1 } %12, 0
  br label %while.cond.outer.i.i.backedge

if.end19.i.i:                                     ; preds = %if.then10.i.i, %if.end8.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !44
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !46
  %call21.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %5, i64 %6) #13
  %cmp22.i.i = icmp eq i64 %call21.i.i, %6
  br i1 %cmp22.i.i, label %cleanup30.critedge.i.i, label %if.end24.i.i

if.end24.i.i:                                     ; preds = %if.end19.i.i
  %15 = load atomic i64, i64* %state.i monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %while.cond.outer.i.i.backedge

while.cond.outer.i.i.backedge:                    ; preds = %if.end24.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i, %if.then6.i.i
  %expected.0.ph.i.i.be = phi i64 [ %14, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ %15, %if.end24.i.i ], [ %11, %if.then6.i.i ]
  %spinner.sroa.0.0.ph.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ 40, %if.end24.i.i ], [ %dec.i.i.i, %if.then6.i.i ]
  br label %while.cond.outer.i.i

cleanup30.critedge.i.i:                           ; preds = %if.end19.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit: ; preds = %if.then.i.i, %cleanup30.critedge.i.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_jobs, %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !48, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %land.rhs.i, label %if.end4

land.rhs.i:                                       ; preds = %entry, %while.body.i
  %bytes.011.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), %entry ]
  %1 = load i8, i8* %bytes.011.i, align 1, !tbaa !14
  %cmp2.i = icmp eq i8 %1, 0
  br i1 %cmp2.i, label %while.body.i, label %do.body.i

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %bytes.011.i, i64 1
  %exitcond.not.i = icmp eq i8* %incdec.ptr.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*)
  br i1 %exitcond.not.i, label %do.body.i, label %land.rhs.i, !llvm.loop !52

do.body.i:                                        ; preds = %while.body.i, %land.rhs.i
  %bytes.0.lcssa.i = phi i8* [ %bytes.011.i, %land.rhs.i ], [ bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*), %while.body.i ]
  %cmp3.i = icmp eq i8* %bytes.0.lcssa.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*)
  br i1 %cmp3.i, label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit, label %if.then.i

if.then.i:                                        ; preds = %do.body.i
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.6, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit

_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit: ; preds = %if.then.i, %do.body.i
  %2 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !54
  %tobool1.not = icmp eq i32 %2, 0
  br i1 %tobool1.not, label %if.then2, label %if.end

if.then2:                                         ; preds = %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #14
  br label %if.end

if.end:                                           ; preds = %if.then2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %3 = phi i32 [ %call, %if.then2 ], [ %2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit ]
  %4 = icmp sgt i32 %3, 1
  %spec.select.i = select i1 %4, i32 %3, i32 1
  %5 = icmp slt i32 %spec.select.i, 256
  %call3176 = select i1 %5, i32 %spec.select.i, i32 256
  store i32 %call3176, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !54
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !48
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %cmp181 = icmp sgt i32 %num_jobs, 0
  br i1 %cmp181, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end4
  %wide.trip.count = zext i32 %num_jobs to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.inc
  %phi.bo = and i8 %stealable_jobs.1, 1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end4
  %workers_to_wake.0.lcssa = phi i32 [ -1, %if.end4 ], [ %workers_to_wake.1, %for.cond.cleanup.loopexit ]
  %stealable_jobs.0.lcssa = phi i8 [ 0, %if.end4 ], [ %phi.bo, %for.cond.cleanup.loopexit ]
  %job_has_acquires.0.lcssa = phi i8 [ 0, %if.end4 ], [ %spec.select, %for.cond.cleanup.loopexit ]
  %job_may_block.0.lcssa = phi i8 [ 0, %if.end4 ], [ %job_may_block.1, %for.cond.cleanup.loopexit ]
  %min_threads.0.lcssa = phi i32 [ 0, %if.end4 ], [ %add, %for.cond.cleanup.loopexit ]
  %cmp31 = icmp eq %"struct.Halide::Runtime::Internal::work"* %task_parent, null
  br i1 %cmp31, label %if.then32, label %do.body61

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %indvars.iv193 = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next194, %for.inc ]
  %min_threads.0187 = phi i32 [ 0, %for.body.preheader ], [ %add, %for.inc ]
  %job_may_block.0185 = phi i8 [ 0, %for.body.preheader ], [ %job_may_block.1, %for.inc ]
  %job_has_acquires.0184 = phi i8 [ 0, %for.body.preheader ], [ %spec.select, %for.inc ]
  %stealable_jobs.0183 = phi i8 [ 0, %for.body.preheader ], [ %stealable_jobs.1, %for.inc ]
  %workers_to_wake.0182 = phi i32 [ -1, %for.body.preheader ], [ %workers_to_wake.1, %for.inc ]
  %min_threads5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 7
  %6 = load i32, i32* %min_threads5, align 4, !tbaa !33
  %cmp6 = icmp eq i32 %6, 0
  %add = add i32 %6, %min_threads.0187
  %stealable_jobs.1 = select i1 %cmp6, i8 1, i8 %stealable_jobs.0183
  %job_may_block.1 = select i1 %cmp6, i8 %job_may_block.0185, i8 1
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 4
  %7 = load i32, i32* %num_semaphores, align 8, !tbaa !31
  %cmp16.not = icmp eq i32 %7, 0
  %spec.select = select i1 %cmp16.not, i8 %job_has_acquires.0184, i8 1
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 8
  %8 = load i8, i8* %serial, align 8, !tbaa !29, !range !17
  %tobool22.not = icmp eq i8 %8, 0
  br i1 %tobool22.not, label %if.else24, label %if.then23

if.then23:                                        ; preds = %for.body
  %inc = add nsw i32 %workers_to_wake.0182, 1
  br label %for.inc

if.else24:                                        ; preds = %for.body
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 6
  %9 = load i32, i32* %extent, align 8, !tbaa !28
  %add28 = add nsw i32 %9, %workers_to_wake.0182
  br label %for.inc

for.inc:                                          ; preds = %if.else24, %if.then23
  %workers_to_wake.1 = phi i32 [ %inc, %if.then23 ], [ %add28, %if.else24 ]
  %indvars.iv.next194 = add nuw nsw i64 %indvars.iv193, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next194, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body, !llvm.loop !55

if.then32:                                        ; preds = %for.cond.cleanup
  %10 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %11 = and i8 %10, 1
  %12 = icmp eq i8 %11, 0
  %not. = xor i1 %12, true
  %add36 = zext i1 %not. to i32
  %min_threads.2 = add nsw i32 %min_threads.0.lcssa, %add36
  %13 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !56
  %cmp38180 = icmp slt i32 %13, 256
  br i1 %cmp38180, label %land.rhs, label %do.end50

land.rhs:                                         ; preds = %if.then32, %while.body
  %14 = phi i32 [ %inc45, %while.body ], [ %13, %if.then32 ]
  %15 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !54
  %sub = add nsw i32 %15, -1
  %cmp39 = icmp slt i32 %14, %sub
  br i1 %cmp39, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %add40 = add nsw i32 %14, 1
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  %sub41 = sub i32 %add40, %16
  %cmp42 = icmp slt i32 %sub41, %min_threads.2
  br i1 %cmp42, label %while.body, label %do.end50

while.body:                                       ; preds = %lor.rhs, %land.rhs
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !58
  %inc43 = add nsw i32 %17, 1
  store i32 %inc43, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !58
  %call44 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal13worker_threadEPv, i8* null) #14
  %18 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !56
  %inc45 = add nsw i32 %18, 1
  store i32 %inc45, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !56
  %idxprom46 = sext i32 %18 to i64
  %arrayidx47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %idxprom46
  store %struct.halide_thread* %call44, %struct.halide_thread** %arrayidx47, align 8, !tbaa !10
  %cmp38 = icmp slt i32 %18, 255
  br i1 %cmp38, label %land.rhs, label %do.end50, !llvm.loop !59

do.end50:                                         ; preds = %while.body, %lor.rhs, %if.then32
  br i1 %12, label %if.end77, label %if.then54

if.then54:                                        ; preds = %do.end50
  %19 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  %inc55 = add nsw i32 %19, 1
  store i32 %inc55, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  br label %if.end77

do.body61:                                        ; preds = %for.cond.cleanup
  %min_threads63 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 0, i32 7
  %20 = load i32, i32* %min_threads63, align 4, !tbaa !33
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 8
  %21 = load i32, i32* %active_workers, align 8, !tbaa !60
  %mul = mul nsw i32 %21, %20
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %22 = load i32, i32* %threads_reserved, align 8, !tbaa !61
  %sub64 = sub nsw i32 %mul, %22
  %cmp65.not = icmp sgt i32 %min_threads.0.lcssa, %sub64
  br i1 %cmp65.not, label %if.then66, label %do.end69

if.then66:                                        ; preds = %do.body61
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([263 x i8], [263 x i8]* @.str.3, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end69

do.end69:                                         ; preds = %if.then66, %do.body61
  %23 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %if.end77, label %if.then73

if.then73:                                        ; preds = %do.end69
  %26 = load i32, i32* %threads_reserved, align 8, !tbaa !61
  %inc75 = add nsw i32 %26, 1
  store i32 %inc75, i32* %threads_reserved, align 8, !tbaa !61
  br label %if.end77

if.end77:                                         ; preds = %if.then73, %do.end69, %if.then54, %do.end50
  br i1 %cmp181, label %for.body83.lr.ph, label %for.cond.cleanup82

for.body83.lr.ph:                                 ; preds = %if.end77
  %.promoted = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !62
  %27 = zext i32 %num_jobs to i64
  %min.iters.check = icmp eq i32 %num_jobs, 1
  br i1 %min.iters.check, label %for.body83.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body83.lr.ph
  %n.vec = and i64 %27, 4294967294
  %ind.end = and i64 %27, 1
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vector.recur = phi %"struct.Halide::Runtime::Internal::work"* [ %.promoted, %vector.ph ], [ %31, %vector.body ]
  %offset.idx = sub i64 %27, %index
  %28 = add nsw i64 %offset.idx, -1
  %29 = add i64 %offset.idx, -2
  %30 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28
  %31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29
  %32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 2
  %33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %vector.recur, %"struct.Halide::Runtime::Internal::work"** %32, align 8, !tbaa !63
  store %"struct.Halide::Runtime::Internal::work"* %30, %"struct.Halide::Runtime::Internal::work"** %33, align 8, !tbaa !63
  %34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 3
  %35 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %34, align 8, !tbaa !40
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %35, align 8, !tbaa !40
  %36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 4
  %37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 4
  store i32 %num_jobs, i32* %36, align 8, !tbaa !41
  store i32 %num_jobs, i32* %37, align 8, !tbaa !41
  %38 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 6
  %39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 6
  store i32 0, i32* %38, align 8, !tbaa !61
  store i32 0, i32* %39, align 8, !tbaa !61
  %index.next = add i64 %index, 2
  %40 = icmp eq i64 %index.next, %n.vec
  br i1 %40, label %middle.block, label %vector.body, !llvm.loop !64

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %27
  br i1 %cmp.n, label %for.cond80.for.cond.cleanup82_crit_edge, label %for.body83.preheader

for.body83.preheader:                             ; preds = %for.body83.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ %ind.end, %middle.block ], [ %27, %for.body83.lr.ph ]
  %scalar.recur.ph = phi %"struct.Halide::Runtime::Internal::work"* [ %31, %middle.block ], [ %.promoted, %for.body83.lr.ph ]
  br label %for.body83

for.cond80.for.cond.cleanup82_crit_edge:          ; preds = %for.body83, %middle.block
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !62
  br label %for.cond.cleanup82

for.cond.cleanup82:                               ; preds = %for.cond80.for.cond.cleanup82_crit_edge, %if.end77
  %41 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !66
  %tobool96 = icmp ne i32 %41, 0
  %42 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8
  %43 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8
  %cmp98 = icmp slt i32 %42, %43
  %44 = or i1 %tobool96, %cmp98
  %cmp102 = icmp sgt i32 %workers_to_wake.0.lcssa, %42
  %or.cond174 = or i1 %cmp102, %44
  %storemerge = select i1 %or.cond174, i32 %43, i32 %workers_to_wake.0.lcssa
  store i32 %storemerge, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !67
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #14
  %45 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !67
  %46 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !58
  %cmp106 = icmp sgt i32 %45, %46
  br i1 %cmp106, label %if.then107, label %if.end111

for.body83:                                       ; preds = %for.body83.preheader, %for.body83
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body83 ], [ %indvars.iv.ph, %for.body83.preheader ]
  %scalar.recur = phi %"struct.Halide::Runtime::Internal::work"* [ %arrayidx85, %for.body83 ], [ %scalar.recur.ph, %for.body83.preheader ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx85 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %scalar.recur, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !63
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !40
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 4
  store i32 %num_jobs, i32* %sibling_count, align 8, !tbaa !41
  %threads_reserved93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 6
  store i32 0, i32* %threads_reserved93, align 8, !tbaa !61
  %cmp81 = icmp sgt i64 %indvars.iv, 1
  br i1 %cmp81, label %for.body83, label %for.cond80.for.cond.cleanup82_crit_edge, !llvm.loop !68

if.then107:                                       ; preds = %for.cond.cleanup82
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #14
  %tobool108.not = icmp eq i8 %stealable_jobs.0.lcssa, 0
  br i1 %tobool108.not, label %if.end111, label %if.then109

if.then109:                                       ; preds = %if.then107
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #14
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.then107, %for.cond.cleanup82
  %47 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %48 = and i8 %47, 1
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %if.end123, label %if.then115

if.then115:                                       ; preds = %if.end111
  br i1 %cmp31, label %if.else120, label %if.then117

if.then117:                                       ; preds = %if.then115
  %threads_reserved118 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %50 = load i32, i32* %threads_reserved118, align 8, !tbaa !61
  %dec119 = add nsw i32 %50, -1
  store i32 %dec119, i32* %threads_reserved118, align 8, !tbaa !61
  br label %if.end123

if.else120:                                       ; preds = %if.then115
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  %dec121 = add nsw i32 %51, -1
  store i32 %dec121, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  br label %if.end123

if.end123:                                        ; preds = %if.else120, %if.then117, %if.end111
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %owned_job) local_unnamed_addr #0 {
entry:
  %active_workers.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 8
  %tobool.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %owned_job, null
  %extent.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 0, i32 6
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 9
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 5
  %siblings56 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 3
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 11
  %next_job10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 2
  br label %while.cond

while.cond:                                       ; preds = %while.cond.backedge, %entry
  %spin_count.0 = phi i32 [ 0, %entry ], [ %spin_count.0.be, %while.cond.backedge ]
  br i1 %tobool.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.cond
  %0 = load i32, i32* %extent.i, align 8, !tbaa !28
  %tobool.not.i = icmp eq i32 %0, 0
  br i1 %tobool.not.i, label %cond.end, label %if.then

cond.false:                                       ; preds = %while.cond
  %1 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !69, !range !17
  %tobool1.not = icmp eq i8 %1, 0
  br i1 %tobool1.not, label %do.end.thread, label %while.end316

cond.end:                                         ; preds = %cond.true
  %2 = load i32, i32* %active_workers.i, align 8, !tbaa !60
  %tobool2.i.not = icmp eq i32 %2, 0
  br i1 %tobool2.i.not, label %while.end316, label %if.then

if.then:                                          ; preds = %cond.end, %cond.true
  %3 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !62
  %4 = load i32, i32* %exit_status, align 4, !tbaa !43
  %cmp.not = icmp eq i32 %4, 0
  br i1 %cmp.not, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %active_workers.i, align 8, !tbaa !60
  %cmp4 = icmp eq i32 %5, 0
  br i1 %cmp4, label %while.cond6.preheader, label %do.end

while.cond6.preheader:                            ; preds = %if.then3
  %cmp7.not524 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, %owned_job
  br i1 %cmp7.not524, label %while.end, label %while.body8

while.body8:                                      ; preds = %while.cond6.preheader, %while.body8
  %job.0525 = phi %"struct.Halide::Runtime::Internal::work"* [ %6, %while.body8 ], [ %3, %while.cond6.preheader ]
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !63
  %cmp7.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %6, %owned_job
  br i1 %cmp7.not, label %while.end.loopexit, label %while.body8, !llvm.loop !70

while.end.loopexit:                               ; preds = %while.body8
  %next_job.le = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond6.preheader
  %prev_ptr.0.lcssa = phi %"struct.Halide::Runtime::Internal::work"** [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %while.cond6.preheader ], [ %next_job.le, %while.end.loopexit ]
  %7 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job10, align 8, !tbaa !63
  store %"struct.Halide::Runtime::Internal::work"* %7, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.0.lcssa, align 8, !tbaa !10
  store i32 0, i32* %extent.i, align 8, !tbaa !28
  br label %while.cond.backedge

if.else:                                          ; preds = %if.then
  %8 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !42
  %tobool11.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %8, null
  br i1 %tobool11.not, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %exit_status13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %8, i64 0, i32 9
  %9 = load i32, i32* %exit_status13, align 4, !tbaa !43
  %cmp14.not = icmp eq i32 %9, 0
  br i1 %cmp14.not, label %do.end, label %if.then15

if.then15:                                        ; preds = %land.lhs.true
  store i32 %9, i32* %exit_status, align 4, !tbaa !43
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #14
  br label %while.cond.backedge

do.end:                                           ; preds = %land.lhs.true, %if.else, %if.then3
  %tobool23.not527 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, null
  br i1 %tobool23.not527, label %if.then105, label %do.end27

do.end.thread:                                    ; preds = %cond.false
  %10 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !62
  %tobool23.not527563 = icmp eq %"struct.Halide::Runtime::Internal::work"* %10, null
  br i1 %tobool23.not527563, label %if.else112, label %do.end27.us

do.end27.us:                                      ; preds = %do.end.thread, %cleanup.us
  %job.1529.us = phi %"struct.Halide::Runtime::Internal::work"* [ %29, %cleanup.us ], [ %10, %do.end.thread ]
  %prev_ptr.1528.us = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95.us, %cleanup.us ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end.thread ]
  %parent_job29.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 5
  %11 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29.us, align 8, !tbaa !42
  %cmp30.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %11, null
  br i1 %cmp30.us, label %if.then31.us, label %if.else32.us

if.else32.us:                                     ; preds = %do.end27.us
  %active_workers33.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 8
  %12 = load i32, i32* %active_workers33.us, align 8, !tbaa !60
  %cmp34.us = icmp eq i32 %12, 0
  %min_threads.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 0, i32 7
  %13 = load i32, i32* %min_threads.us, align 4, !tbaa !33
  br i1 %cmp34.us, label %if.then35.us, label %if.else38.us

if.else38.us:                                     ; preds = %if.else32.us
  %mul.us = mul nsw i32 %13, %12
  %threads_reserved42.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %14 = load i32, i32* %threads_reserved42.us, align 8, !tbaa !61
  %sub43.us = sub nsw i32 %mul.us, %14
  br label %if.end45.us

if.then35.us:                                     ; preds = %if.else32.us
  %threads_reserved.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %15 = load i32, i32* %threads_reserved.us, align 8, !tbaa !61
  %sub37.us = sub nsw i32 %13, %15
  br label %if.end45.us

if.then31.us:                                     ; preds = %do.end27.us
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !56
  %add.us = add nsw i32 %16, 1
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  %sub.us = sub i32 %add.us, %17
  br label %if.end45.us

if.end45.us:                                      ; preds = %if.then31.us, %if.then35.us, %if.else38.us
  %threads_available.0.us = phi i32 [ %sub.us, %if.then31.us ], [ %sub37.us, %if.then35.us ], [ %sub43.us, %if.else38.us ]
  %min_threads47.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 7
  %18 = load i32, i32* %min_threads47.us, align 4, !tbaa !33
  %cmp48.not.us = icmp sge i32 %threads_available.0.us, %18
  %serial.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 8
  %19 = load i8, i8* %serial.us, align 8, !tbaa !29, !range !17
  %tobool69.not.us = icmp eq i8 %19, 0
  br i1 %tobool69.not.us, label %if.end45.us.lor.end73.us_crit_edge, label %lor.rhs70.us

if.end45.us.lor.end73.us_crit_edge:               ; preds = %if.end45.us
  %.0 = and i1 %cmp48.not.us, true
  br label %lor.end73.us

lor.rhs70.us:                                     ; preds = %if.end45.us
  %active_workers71.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 8
  %20 = load i32, i32* %active_workers71.us, align 8, !tbaa !60
  %cmp72.us = icmp eq i32 %20, 0
  %.1 = and i1 %cmp48.not.us, %cmp72.us
  br label %lor.end73.us

lor.end73.us:                                     ; preds = %if.end45.us.lor.end73.us_crit_edge, %lor.rhs70.us
  %.phi = phi i1 [ %.0, %if.end45.us.lor.end73.us_crit_edge ], [ %.1, %lor.rhs70.us ]
  br i1 %.phi, label %if.then86.us, label %cleanup.us

if.then86.us:                                     ; preds = %lor.end73.us
  %next_semaphore.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 10
  %21 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !38
  %num_semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 4
  %22 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !31
  %cmp14.i.us = icmp slt i32 %21, %22
  br i1 %cmp14.i.us, label %for.body.lr.ph.i.us, label %if.else127

for.body.lr.ph.i.us:                              ; preds = %if.then86.us
  %semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 3
  br label %for.body.i.us

for.body.i.us:                                    ; preds = %for.inc.i.us, %for.body.lr.ph.i.us
  %23 = phi i32 [ %21, %for.body.lr.ph.i.us ], [ %inc.i.us, %for.inc.i.us ]
  %24 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i.us, align 8, !tbaa !30
  %idxprom.i.us = sext i32 %23 to i64
  %semaphore.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 0
  %25 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i.us, align 8, !tbaa !71
  %count.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 1
  %26 = load i32, i32* %count.i.us, align 8, !tbaa !73
  %call.i.us = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %25, i32 %26) #13
  br i1 %call.i.us, label %for.inc.i.us, label %cleanup.us

for.inc.i.us:                                     ; preds = %for.body.i.us
  %27 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !38
  %inc.i.us = add nsw i32 %27, 1
  store i32 %inc.i.us, i32* %next_semaphore.i.us, align 8, !tbaa !38
  %28 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !31
  %cmp.i.us = icmp slt i32 %inc.i.us, %28
  br i1 %cmp.i.us, label %for.body.i.us, label %if.else127, !llvm.loop !74

cleanup.us:                                       ; preds = %for.body.i.us, %lor.end73.us
  %next_job95.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 2
  %29 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95.us, align 8, !tbaa !63
  %tobool23.not.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %29, null
  br i1 %tobool23.not.us, label %if.then103, label %do.end27.us

do.end27:                                         ; preds = %do.end, %cleanup
  %job.1529 = phi %"struct.Halide::Runtime::Internal::work"* [ %50, %cleanup ], [ %3, %do.end ]
  %prev_ptr.1528 = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95, %cleanup ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end ]
  %parent_job29 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 5
  %30 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29, align 8, !tbaa !42
  %cmp30 = icmp eq %"struct.Halide::Runtime::Internal::work"* %30, null
  br i1 %cmp30, label %if.then31, label %if.else32

if.then31:                                        ; preds = %do.end27
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !56
  %add = add nsw i32 %31, 1
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  %sub = sub i32 %add, %32
  br label %if.end45

if.else32:                                        ; preds = %do.end27
  %active_workers33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 8
  %33 = load i32, i32* %active_workers33, align 8, !tbaa !60
  %cmp34 = icmp eq i32 %33, 0
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 0, i32 7
  %34 = load i32, i32* %min_threads, align 4, !tbaa !33
  br i1 %cmp34, label %if.then35, label %if.else38

if.then35:                                        ; preds = %if.else32
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !61
  %sub37 = sub nsw i32 %34, %35
  br label %if.end45

if.else38:                                        ; preds = %if.else32
  %mul = mul nsw i32 %34, %33
  %threads_reserved42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %36 = load i32, i32* %threads_reserved42, align 8, !tbaa !61
  %sub43 = sub nsw i32 %mul, %36
  br label %if.end45

if.end45:                                         ; preds = %if.else38, %if.then35, %if.then31
  %threads_available.0 = phi i32 [ %sub, %if.then31 ], [ %sub37, %if.then35 ], [ %sub43, %if.else38 ]
  %min_threads47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 7
  %37 = load i32, i32* %min_threads47, align 4, !tbaa !33
  %cmp48.not = icmp slt i32 %threads_available.0, %37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 3
  %38 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !40
  %39 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings56, align 8, !tbaa !40
  %cmp57 = icmp ne %"struct.Halide::Runtime::Internal::work"* %38, %39
  %cmp60 = icmp ne i32 %37, 0
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 8
  %40 = load i8, i8* %serial, align 8, !tbaa !29, !range !17
  %tobool69.not = icmp eq i8 %40, 0
  br i1 %tobool69.not, label %if.end45.lor.end73_crit_edge, label %lor.rhs70

if.end45.lor.end73_crit_edge:                     ; preds = %if.end45
  %.not472.0 = xor i1 true, true
  br label %lor.end73

lor.rhs70:                                        ; preds = %if.end45
  %active_workers71 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 8
  %41 = load i32, i32* %active_workers71, align 8, !tbaa !60
  %cmp72 = icmp eq i32 %41, 0
  %.not472.1 = xor i1 %cmp72, true
  br label %lor.end73

lor.end73:                                        ; preds = %if.end45.lor.end73_crit_edge, %lor.rhs70
  %.not472.phi = phi i1 [ %.not472.0, %if.end45.lor.end73_crit_edge ], [ %.not472.1, %lor.rhs70 ]
  %.not = and i1 %cmp60, %cmp57
  %brmerge = or i1 %cmp48.not, %.not
  %brmerge473 = or i1 %brmerge, %.not472.phi
  br i1 %brmerge473, label %cleanup, label %if.then86

if.then86:                                        ; preds = %lor.end73
  %next_semaphore.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 10
  %42 = load i32, i32* %next_semaphore.i, align 8, !tbaa !38
  %num_semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 4
  %43 = load i32, i32* %num_semaphores.i, align 8, !tbaa !31
  %cmp14.i = icmp slt i32 %42, %43
  br i1 %cmp14.i, label %for.body.lr.ph.i, label %if.else127

for.body.lr.ph.i:                                 ; preds = %if.then86
  %semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 3
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %44 = phi i32 [ %42, %for.body.lr.ph.i ], [ %inc.i, %for.inc.i ]
  %45 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i, align 8, !tbaa !30
  %idxprom.i = sext i32 %44 to i64
  %semaphore.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 0
  %46 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i, align 8, !tbaa !71
  %count.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 1
  %47 = load i32, i32* %count.i, align 8, !tbaa !73
  %call.i = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %46, i32 %47) #13
  br i1 %call.i, label %for.inc.i, label %cleanup

for.inc.i:                                        ; preds = %for.body.i
  %48 = load i32, i32* %next_semaphore.i, align 8, !tbaa !38
  %inc.i = add nsw i32 %48, 1
  store i32 %inc.i, i32* %next_semaphore.i, align 8, !tbaa !38
  %49 = load i32, i32* %num_semaphores.i, align 8, !tbaa !31
  %cmp.i = icmp slt i32 %inc.i, %49
  br i1 %cmp.i, label %for.body.i, label %if.else127, !llvm.loop !74

cleanup:                                          ; preds = %for.body.i, %lor.end73
  %next_job95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 2
  %50 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95, align 8, !tbaa !63
  %tobool23.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %50, null
  br i1 %tobool23.not, label %if.then103, label %do.end27

if.then103:                                       ; preds = %cleanup, %cleanup.us
  br i1 %tobool.not, label %if.else112, label %if.then105

if.then105:                                       ; preds = %do.end, %if.then103
  %inc = add nsw i32 %spin_count.0, 1
  %cmp106 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp106, label %if.then107, label %if.else108

if.then107:                                       ; preds = %if.then105
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  tail call void @halide_thread_yield() #13
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  br label %while.cond.backedge

if.else108:                                       ; preds = %if.then105
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !66
  %inc109 = add nsw i32 %51, 1
  store i32 %inc109, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !66
  store i8 1, i8* %owner_is_sleeping, align 4, !tbaa !39
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !39
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !66
  %dec = add nsw i32 %52, -1
  store i32 %dec, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !66
  br label %while.cond.backedge

if.else112:                                       ; preds = %if.then103, %do.end.thread
  %53 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !75
  %inc113 = add nsw i32 %53, 1
  store i32 %inc113, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !75
  %54 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !58
  %55 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !67
  %cmp114 = icmp sgt i32 %54, %55
  br i1 %cmp114, label %if.then115, label %if.else118

if.then115:                                       ; preds = %if.else112
  %dec116 = add nsw i32 %54, -1
  store i32 %dec116, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !58
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %56 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !58
  %inc117 = add nsw i32 %56, 1
  store i32 %inc117, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !58
  br label %if.end124

if.else118:                                       ; preds = %if.else112
  %inc119 = add nsw i32 %spin_count.0, 1
  %cmp120 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp120, label %if.then121, label %if.else122

if.then121:                                       ; preds = %if.else118
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  tail call void @halide_thread_yield() #13
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  br label %if.end124

if.else122:                                       ; preds = %if.else118
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  br label %if.end124

if.end124:                                        ; preds = %if.else122, %if.then121, %if.then115
  %spin_count.1 = phi i32 [ %spin_count.0, %if.then115 ], [ %inc119, %if.then121 ], [ %inc119, %if.else122 ]
  %57 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !75
  %dec125 = add nsw i32 %57, -1
  store i32 %dec125, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !75
  br label %while.cond.backedge

if.else127:                                       ; preds = %if.then86, %if.then86.us, %for.inc.i, %for.inc.i.us
  %next_semaphore.i521 = phi i32* [ %next_semaphore.i.us, %for.inc.i.us ], [ %next_semaphore.i, %for.inc.i ], [ %next_semaphore.i.us, %if.then86.us ], [ %next_semaphore.i, %if.then86 ]
  %prev_ptr.1519 = phi %"struct.Halide::Runtime::Internal::work"** [ %prev_ptr.1528.us, %for.inc.i.us ], [ %prev_ptr.1528, %for.inc.i ], [ %prev_ptr.1528.us, %if.then86.us ], [ %prev_ptr.1528, %if.then86 ]
  %job.1515 = phi %"struct.Halide::Runtime::Internal::work"* [ %job.1529.us, %for.inc.i.us ], [ %job.1529, %for.inc.i ], [ %job.1529.us, %if.then86.us ], [ %job.1529, %if.then86 ]
  store i32 0, i32* %next_semaphore.i521, align 8, !tbaa !38
  %active_workers132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 8
  %58 = load i32, i32* %active_workers132, align 8, !tbaa !60
  %inc133 = add nsw i32 %58, 1
  store i32 %inc133, i32* %active_workers132, align 8, !tbaa !60
  %parent_job134 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 5
  %59 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !42
  %cmp135 = icmp eq %"struct.Halide::Runtime::Internal::work"* %59, null
  %min_threads138 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 7
  %60 = load i32, i32* %min_threads138, align 4, !tbaa !33
  br i1 %cmp135, label %if.then136, label %if.else143

if.then136:                                       ; preds = %if.else127
  %61 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  %add139 = add nsw i32 %61, %60
  store i32 %add139, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  br label %if.end152

if.else143:                                       ; preds = %if.else127
  %threads_reserved147 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %59, i64 0, i32 6
  %62 = load i32, i32* %threads_reserved147, align 8, !tbaa !61
  %add148 = add nsw i32 %62, %60
  store i32 %add148, i32* %threads_reserved147, align 8, !tbaa !61
  br label %if.end152

if.end152:                                        ; preds = %if.else143, %if.then136
  %serial154 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 8
  %63 = load i8, i8* %serial154, align 8, !tbaa !29, !range !17
  %tobool155.not = icmp eq i8 %63, 0
  br i1 %tobool155.not, label %if.else198, label %if.then156

if.then156:                                       ; preds = %if.end152
  %next_job157 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %64 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !63
  store %"struct.Halide::Runtime::Internal::work"* %64, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %extent163 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %next_semaphore.i474 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 10
  %num_semaphores.i475 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 4
  %semaphores.i477 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 3
  %user_context = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %min = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %closure = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %65 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  br label %while.cond161.preheader

while.cond161.preheader:                          ; preds = %if.end172, %if.then156
  %iters.0538 = phi i32 [ 1, %if.then156 ], [ 0, %if.end172 ]
  %total_iters.0537 = phi i32 [ 0, %if.then156 ], [ %add178, %if.end172 ]
  %66 = load i32, i32* %extent163, align 8, !tbaa !28
  %sub164531 = sub nsw i32 %66, %total_iters.0537
  %cmp165532 = icmp sgt i32 %sub164531, %iters.0538
  br i1 %cmp165532, label %land.rhs.preheader, label %while.end169

land.rhs.preheader:                               ; preds = %while.cond161.preheader
  %.pre = load i32, i32* %next_semaphore.i474, align 8, !tbaa !38
  %.pre560 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !31
  br label %land.rhs

land.rhs:                                         ; preds = %while.body167, %land.rhs.preheader
  %67 = phi i32 [ %76, %while.body167 ], [ %66, %land.rhs.preheader ]
  %68 = phi i32 [ %77, %while.body167 ], [ %.pre560, %land.rhs.preheader ]
  %69 = phi i32 [ 0, %while.body167 ], [ %.pre, %land.rhs.preheader ]
  %iters.1533 = phi i32 [ %inc168, %while.body167 ], [ %iters.0538, %land.rhs.preheader ]
  %cmp14.i476 = icmp slt i32 %69, %68
  br i1 %cmp14.i476, label %for.body.i483, label %while.body167

for.body.i483:                                    ; preds = %land.rhs, %for.inc.i486
  %70 = phi i32 [ %inc.i484, %for.inc.i486 ], [ %69, %land.rhs ]
  %71 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i477, align 8, !tbaa !30
  %idxprom.i479 = sext i32 %70 to i64
  %semaphore.i480 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 0
  %72 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i480, align 8, !tbaa !71
  %count.i481 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 1
  %73 = load i32, i32* %count.i481, align 8, !tbaa !73
  %call.i482 = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %72, i32 %73) #13
  br i1 %call.i482, label %for.inc.i486, label %while.end169

for.inc.i486:                                     ; preds = %for.body.i483
  %74 = load i32, i32* %next_semaphore.i474, align 8, !tbaa !38
  %inc.i484 = add nsw i32 %74, 1
  store i32 %inc.i484, i32* %next_semaphore.i474, align 8, !tbaa !38
  %75 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !31
  %cmp.i485 = icmp slt i32 %inc.i484, %75
  br i1 %cmp.i485, label %for.body.i483, label %while.body167.loopexit, !llvm.loop !74

while.body167.loopexit:                           ; preds = %for.inc.i486
  %.pre561 = load i32, i32* %extent163, align 8, !tbaa !28
  br label %while.body167

while.body167:                                    ; preds = %while.body167.loopexit, %land.rhs
  %76 = phi i32 [ %.pre561, %while.body167.loopexit ], [ %67, %land.rhs ]
  %77 = phi i32 [ %75, %while.body167.loopexit ], [ %68, %land.rhs ]
  store i32 0, i32* %next_semaphore.i474, align 8, !tbaa !38
  %inc168 = add nuw nsw i32 %iters.1533, 1
  %sub164 = sub nsw i32 %76, %total_iters.0537
  %cmp165 = icmp sgt i32 %sub164, %inc168
  br i1 %cmp165, label %land.rhs, label %if.end172, !llvm.loop !76

while.end169:                                     ; preds = %for.body.i483, %while.cond161.preheader
  %iters.1523 = phi i32 [ %iters.0538, %while.cond161.preheader ], [ %iters.1533, %for.body.i483 ]
  %cmp170 = icmp eq i32 %iters.1523, 0
  br i1 %cmp170, label %while.end179, label %if.end172

if.end172:                                        ; preds = %while.body167, %while.end169
  %iters.1523566 = phi i32 [ %iters.1523, %while.end169 ], [ %inc168, %while.body167 ]
  %78 = load i8*, i8** %user_context, align 8, !tbaa !36
  %79 = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !24
  %80 = load i32, i32* %min, align 4, !tbaa !27
  %add175 = add nsw i32 %80, %total_iters.0537
  %81 = load i8*, i8** %closure, align 8, !tbaa !32
  %call177 = tail call i32 @halide_do_loop_task(i8* %78, i32 (i8*, i32, i32, i8*, i8*)* %79, i32 %add175, i32 %iters.1523566, i8* %81, i8* nonnull %65) #14
  %add178 = add nuw nsw i32 %iters.1523566, %total_iters.0537
  %cmp159 = icmp eq i32 %call177, 0
  br i1 %cmp159, label %while.cond161.preheader, label %while.end179, !llvm.loop !77

while.end179:                                     ; preds = %if.end172, %while.end169
  %cmp170568 = phi i1 [ true, %while.end169 ], [ false, %if.end172 ]
  %result.0.lcssa = phi i32 [ 0, %while.end169 ], [ %call177, %if.end172 ]
  %total_iters.0.lcssa = phi i32 [ %total_iters.0537, %while.end169 ], [ %add178, %if.end172 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %82 = load i32, i32* %min, align 4, !tbaa !27
  %add182 = add nsw i32 %82, %total_iters.0.lcssa
  store i32 %add182, i32* %min, align 4, !tbaa !27
  %83 = load i32, i32* %extent163, align 8, !tbaa !28
  %sub185 = sub nsw i32 %83, %total_iters.0.lcssa
  store i32 %sub185, i32* %extent163, align 8, !tbaa !28
  br i1 %cmp170568, label %if.else190, label %if.end230.thread505

if.end230.thread505:                              ; preds = %while.end179
  store i32 0, i32* %extent163, align 8, !tbaa !28
  br label %if.then238

if.else190:                                       ; preds = %while.end179
  %cmp193 = icmp sgt i32 %sub185, 0
  br i1 %cmp193, label %if.then194, label %if.end271

if.then194:                                       ; preds = %if.else190
  %84 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !62
  store %"struct.Halide::Runtime::Internal::work"* %84, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !63
  store %"struct.Halide::Runtime::Internal::work"* %job.1515, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !62
  br label %if.end271

if.else198:                                       ; preds = %if.end152
  %myjob.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %myjob.sroa.0.0.copyload = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %myjob.sroa.0.0..sroa_idx, align 8, !tbaa.struct !78
  %myjob.sroa.4.0..sroa_idx327 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %myjob.sroa.4.0.copyload = load i8*, i8** %myjob.sroa.4.0..sroa_idx327, align 8, !tbaa.struct !79
  %myjob.sroa.6333.0..sroa_idx334 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %myjob.sroa.6333.0.copyload = load i32, i32* %myjob.sroa.6333.0..sroa_idx334, align 4
  %myjob.sroa.8340.0..sroa_idx341 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 1
  %myjob.sroa.8340.0.copyload = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %myjob.sroa.8340.0..sroa_idx341, align 8, !tbaa.struct !80
  %myjob.sroa.10347.0..sroa_idx348 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %myjob.sroa.10347.0.copyload = load i8*, i8** %myjob.sroa.10347.0..sroa_idx348, align 8, !tbaa.struct !81
  %inc201 = add nsw i32 %myjob.sroa.6333.0.copyload, 1
  store i32 %inc201, i32* %myjob.sroa.6333.0..sroa_idx334, align 4, !tbaa !27
  %extent203 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %85 = load i32, i32* %extent203, align 8, !tbaa !28
  %dec204 = add nsw i32 %85, -1
  store i32 %dec204, i32* %extent203, align 8, !tbaa !28
  %cmp207 = icmp eq i32 %dec204, 0
  br i1 %cmp207, label %if.then208, label %if.end210

if.then208:                                       ; preds = %if.else198
  %next_job209 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %86 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job209, align 8, !tbaa !63
  store %"struct.Halide::Runtime::Internal::work"* %86, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %if.else198
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %tobool211.not = icmp eq i32 (i8*, i32, i8*)* %myjob.sroa.8340.0.copyload, null
  br i1 %tobool211.not, label %if.else220, label %if.then212

if.then212:                                       ; preds = %if.end210
  %call219 = tail call i32 @halide_do_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i8*)* nonnull %myjob.sroa.8340.0.copyload, i32 %myjob.sroa.6333.0.copyload, i8* %myjob.sroa.4.0.copyload) #14
  br label %if.end230

if.else220:                                       ; preds = %if.end210
  %87 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  %call228 = tail call i32 @halide_do_loop_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i32, i8*, i8*)* %myjob.sroa.0.0.copyload, i32 %myjob.sroa.6333.0.copyload, i32 1, i8* %myjob.sroa.4.0.copyload, i8* %87) #14
  br label %if.end230

if.end230:                                        ; preds = %if.else220, %if.then212
  %result.1 = phi i32 [ %call219, %if.then212 ], [ %call228, %if.else220 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %cmp237.not = icmp eq i32 %result.1, 0
  br i1 %cmp237.not, label %if.end271, label %if.then238

if.then238:                                       ; preds = %if.end230, %if.end230.thread505
  %result.2510 = phi i32 [ %result.0.lcssa, %if.end230.thread505 ], [ %result.1, %if.end230 ]
  %exit_status239 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  store i32 %result.2510, i32* %exit_status239, align 4, !tbaa !43
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 4
  %88 = load i32, i32* %sibling_count, align 8, !tbaa !41
  %cmp240540 = icmp sgt i32 %88, 0
  br i1 %cmp240540, label %do.end243.lr.ph, label %if.end271

do.end243.lr.ph:                                  ; preds = %if.then238
  %siblings244 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 3
  %89 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings244, align 8, !tbaa !40
  %wide.trip.count = zext i32 %88 to i64
  br label %do.end243

do.end243:                                        ; preds = %for.inc, %do.end243.lr.ph
  %indvars.iv = phi i64 [ 0, %do.end243.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %wake_owners.0541 = phi i8 [ 0, %do.end243.lr.ph ], [ %wake_owners.1, %for.inc ]
  %exit_status245 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 9
  %90 = load i32, i32* %exit_status245, align 4, !tbaa !43
  %cmp246 = icmp eq i32 %90, 0
  br i1 %cmp246, label %if.then247, label %for.inc

if.then247:                                       ; preds = %do.end243
  store i32 %result.2510, i32* %exit_status245, align 4, !tbaa !43
  %91 = load i32, i32* %active_workers132, align 8, !tbaa !60
  %cmp253 = icmp eq i32 %91, 0
  br i1 %cmp253, label %land.rhs254, label %land.end260

land.rhs254:                                      ; preds = %if.then247
  %owner_is_sleeping258 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 11
  %92 = load i8, i8* %owner_is_sleeping258, align 4, !tbaa !39, !range !17
  br label %land.end260

land.end260:                                      ; preds = %land.rhs254, %if.then247
  %93 = phi i8 [ 0, %if.then247 ], [ %92, %land.rhs254 ]
  %94 = and i8 %wake_owners.0541, 1
  %or = or i8 %93, %94
  br label %for.inc

for.inc:                                          ; preds = %land.end260, %do.end243
  %wake_owners.1 = phi i8 [ %or, %land.end260 ], [ %wake_owners.0541, %do.end243 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %if.end271, label %do.end243, !llvm.loop !82

if.end271:                                        ; preds = %for.inc, %if.then238, %if.end230, %if.then194, %if.else190
  %wake_owners.2 = phi i8 [ 0, %if.end230 ], [ 0, %if.else190 ], [ 0, %if.then194 ], [ 0, %if.then238 ], [ %wake_owners.1, %for.inc ]
  %95 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !42
  %cmp273 = icmp eq %"struct.Halide::Runtime::Internal::work"* %95, null
  %96 = load i32, i32* %min_threads138, align 4, !tbaa !33
  br i1 %cmp273, label %if.then274, label %if.else281

if.then274:                                       ; preds = %if.end271
  %97 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  %sub277 = sub nsw i32 %97, %96
  store i32 %sub277, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !57
  br label %if.end290

if.else281:                                       ; preds = %if.end271
  %threads_reserved285 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %95, i64 0, i32 6
  %98 = load i32, i32* %threads_reserved285, align 8, !tbaa !61
  %sub286 = sub nsw i32 %98, %96
  store i32 %sub286, i32* %threads_reserved285, align 8, !tbaa !61
  br label %if.end290

if.end290:                                        ; preds = %if.else281, %if.then274
  %99 = load i32, i32* %active_workers132, align 8, !tbaa !60
  %dec292 = add nsw i32 %99, -1
  store i32 %dec292, i32* %active_workers132, align 8, !tbaa !60
  %100 = and i8 %wake_owners.2, 1
  %tobool296.not = icmp eq i8 %100, 0
  br i1 %tobool296.not, label %lor.lhs.false297, label %if.then310

lor.lhs.false297:                                 ; preds = %if.end290
  %cmp299 = icmp eq i32 %dec292, 0
  br i1 %cmp299, label %land.lhs.true300, label %while.cond.backedge

land.lhs.true300:                                 ; preds = %lor.lhs.false297
  %extent302 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %101 = load i32, i32* %extent302, align 8, !tbaa !28
  %cmp303 = icmp eq i32 %101, 0
  br i1 %cmp303, label %land.lhs.true307, label %lor.lhs.false304

lor.lhs.false304:                                 ; preds = %land.lhs.true300
  %exit_status305 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  %102 = load i32, i32* %exit_status305, align 4, !tbaa !43
  %cmp306.not = icmp eq i32 %102, 0
  br i1 %cmp306.not, label %while.cond.backedge, label %land.lhs.true307

land.lhs.true307:                                 ; preds = %lor.lhs.false304, %land.lhs.true300
  %owner_is_sleeping308 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 11
  %103 = load i8, i8* %owner_is_sleeping308, align 4, !tbaa !39, !range !17
  %tobool309.not = icmp eq i8 %103, 0
  br i1 %tobool309.not, label %while.cond.backedge, label %if.then310

if.then310:                                       ; preds = %land.lhs.true307, %if.end290
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #14
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then310, %land.lhs.true307, %lor.lhs.false304, %lor.lhs.false297, %if.end124, %if.else108, %if.then107, %if.then15, %while.end
  %spin_count.0.be = phi i32 [ %spin_count.0, %while.end ], [ %spin_count.0, %if.then15 ], [ %inc, %if.then107 ], [ %inc, %if.else108 ], [ %spin_count.1, %if.end124 ], [ 0, %if.then310 ], [ 0, %land.lhs.true307 ], [ 0, %lor.lhs.false304 ], [ 0, %lor.lhs.false297 ]
  br label %while.cond, !llvm.loop !83

while.end316:                                     ; preds = %cond.end, %cond.false
  ret void
}

; Function Attrs: nounwind
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %4 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #11
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !44
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !46
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %7 = ptrtoint %struct.halide_mutex* %mutex to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %6, i64 %7) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #0 align 2 {
entry:
  %call = tail call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #14
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)***
  %state.i60 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  br label %while.cond

while.cond:                                       ; preds = %cleanup, %entry
  %data_location.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %head, %entry ], [ %data_location.1, %cleanup ]
  %prev.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ null, %entry ], [ %prev.1, %cleanup ]
  %data.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %0, %entry ], [ %data.1, %cleanup ]
  %retval.0 = phi i64 [ undef, %entry ], [ %retval.1, %cleanup ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, null
  br i1 %cmp.not, label %while.end22, label %while.body

while.body:                                       ; preds = %while.cond
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 1
  %2 = load atomic i64, i64* %sleep_address monotonic, align 8
  %cmp2 = icmp eq i64 %2, %addr
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 2
  %3 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next3, align 8, !tbaa !84
  br i1 %cmp2, label %if.then, label %cleanup

if.then:                                          ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.0, align 8, !tbaa !10
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !89
  %cmp4 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %4, %data.0
  br i1 %cmp4, label %if.then5, label %while.cond7.preheader

while.cond7.preheader:                            ; preds = %if.then
  %cmp872.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, null
  br i1 %cmp872.not, label %if.end, label %while.body9

if.then5:                                         ; preds = %if.then
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.0, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !89
  br label %if.end

while.body9:                                      ; preds = %while.cond7.preheader, %while.body9
  %data2.073 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %6, %while.body9 ], [ %3, %while.cond7.preheader ]
  %sleep_address10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 1
  %5 = load atomic i64, i64* %sleep_address10 monotonic, align 8
  %cmp11 = icmp eq i64 %5, %addr
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next12, align 8, !tbaa !84
  %cmp8 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, null
  %7 = or i1 %cmp11, %cmp8
  br i1 %7, label %if.end.loopexit, label %while.body9, !llvm.loop !92

if.end.loopexit:                                  ; preds = %while.body9
  %frombool = zext i1 %cmp11 to i8
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit, %if.then5, %while.cond7.preheader
  %more_waiters.1 = phi i8 [ 0, %if.then5 ], [ 0, %while.cond7.preheader ], [ %frombool, %if.end.loopexit ]
  %tobool13 = icmp ne i8 %more_waiters.1, 0
  %vtable = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !44
  %vfn = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable, i64 2
  %8 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn, align 8
  %call14 = tail call i64 %8(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 1, i1 zeroext %tobool13) #13
  %unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 3
  store i64 %call14, i64* %unpark_info, align 8, !tbaa !93
  %mutex.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 0
  %call.i = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i) #13
  %9 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i61 = and i64 %9, 2
  %cmp.i62 = icmp ne i64 %and.i61, 0
  %cmp3.not.i63 = icmp ult i64 %9, 4
  %or.cond.i64 = or i1 %cmp3.not.i63, %cmp.i62
  br i1 %or.cond.i64, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, label %if.then.i65

if.then.i65:                                      ; preds = %if.end
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #13
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66: ; preds = %if.then.i65, %if.end
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !94
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 1
  %call.i67 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #13
  %call.i69 = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i) #13
  %10 = zext i8 %more_waiters.1 to i64
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %next3, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %data.0, %while.body ]
  %data.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %3, %while.body ]
  %retval.1 = phi i64 [ %10, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %retval.0, %while.body ]
  br i1 %cmp2, label %cleanup27, label %while.cond, !llvm.loop !95

while.end22:                                      ; preds = %while.cond
  %vtable23 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !44
  %vfn24 = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable23, i64 2
  %11 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn24, align 8
  %call25 = tail call i64 %11(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 0, i1 zeroext false) #13
  %12 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i = and i64 %12, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %12, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup27, label %if.then.i

if.then.i:                                        ; preds = %while.end22
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #13
  br label %cleanup27

cleanup27:                                        ; preds = %cleanup, %if.then.i, %while.end22
  %retval.2 = phi i64 [ 0, %while.end22 ], [ 0, %if.then.i ], [ %retval.1, %cleanup ]
  ret i64 %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) local_unnamed_addr #0 {
entry:
  %mul.i = mul i64 %addr, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #13
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit: ; preds = %if.then.i, %entry
  ret %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx
}

declare i32 @pthread_mutex_lock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %expected.0 = phi i64 [ %0, %entry ], [ %3, %if.end ]
  %and = and i64 %expected.0, 2
  %tobool.not = icmp ne i64 %and, 0
  %cmp = icmp ult i64 %expected.0, 4
  %or.cond = or i1 %cmp, %tobool.not
  br i1 %or.cond, label %cleanup75, label %if.end

if.end:                                           ; preds = %while.cond
  %or = or i64 %expected.0, 2
  %1 = cmpxchg weak i64* %state, i64 %expected.0, i64 %or acquire monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  br i1 %2, label %while.cond11, label %while.cond

while.cond11:                                     ; preds = %if.end, %cleanup70
  %.pn.pn = phi { i64, i1 } [ %.pn, %cleanup70 ], [ %1, %if.end ]
  %expected.3 = extractvalue { i64, i1 } %.pn.pn, 0
  %and13 = and i64 %expected.3, -4
  %4 = inttoptr i64 %and13 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  %tail14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %4, i64 0, i32 3
  %tail.0143 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !96
  %cmp16144 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0143, null
  br i1 %cmp16144, label %while.body17, label %while.end23

while.body17:                                     ; preds = %while.cond11, %do.end
  %current.0145 = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %5, %do.end ], [ %4, %while.cond11 ]
  %next18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next18, align 8, !tbaa !98
  %cmp19.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, null
  br i1 %cmp19.not, label %if.then20, label %do.end

if.then20:                                        ; preds = %while.body17
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.5, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end

do.end:                                           ; preds = %if.then20, %while.body17
  %prev = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev, align 8, !tbaa !99
  %tail22 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 3
  %tail.0 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail22, align 8, !tbaa !96
  %cmp16 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0, null
  br i1 %cmp16, label %while.body17, label %while.end23, !llvm.loop !100

while.end23:                                      ; preds = %do.end, %while.cond11
  %tail.0.lcssa = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %tail.0143, %while.cond11 ], [ %tail.0, %do.end ]
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !96
  %and25 = and i64 %expected.3, 1
  %tobool26.not = icmp eq i64 %and25, 0
  br i1 %tobool26.not, label %if.end35, label %if.then27

if.then27:                                        ; preds = %while.end23
  %and29 = and i64 %expected.3, -3
  %6 = cmpxchg weak i64* %state, i64 %expected.3, i64 %and29 acq_rel monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %cleanup75, label %cleanup70

if.end35:                                         ; preds = %while.end23
  %prev36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 2
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev36, align 8, !tbaa !99
  %cmp37 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, null
  br i1 %cmp37, label %while.body41, label %if.else62

while.body41:                                     ; preds = %if.end35, %if.end47
  %expected.5146 = phi i64 [ %11, %if.end47 ], [ %expected.3, %if.end35 ]
  %and43 = and i64 %expected.5146, 1
  %9 = cmpxchg weak i64* %state, i64 %expected.5146, i64 %and43 acq_rel monotonic
  %10 = extractvalue { i64, i1 } %9, 1
  br i1 %10, label %if.end66, label %if.end47

if.end47:                                         ; preds = %while.body41
  %11 = extractvalue { i64, i1 } %9, 0
  %cmp49 = icmp ult i64 %11, 4
  br i1 %cmp49, label %while.body41, label %cleanup70, !llvm.loop !101

if.else62:                                        ; preds = %if.end35
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !96
  %12 = atomicrmw and i64* %state, i64 -3 release
  br label %if.end66

if.end66:                                         ; preds = %while.body41, %if.else62
  %mutex.i103 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 0
  %call.i104 = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i103) #13
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !94
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 1
  %call.i101 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #13
  %call.i = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i103) #13
  br label %cleanup75

cleanup70:                                        ; preds = %if.end47, %if.then27
  %.pn = phi { i64, i1 } [ %6, %if.then27 ], [ %9, %if.end47 ]
  fence acquire
  br label %while.cond11

cleanup75:                                        ; preds = %while.cond, %if.then27, %if.end66
  ret void
}

declare i32 @pthread_cond_signal(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_unlock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %node = alloca %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", align 8
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i8*
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 2
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 0
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 1
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 1
  %tail.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 3
  %2 = ptrtoint %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i64
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i to <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>*
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %while.cond.outer.backedge, %entry
  %expected.0.ph = phi i64 [ %0, %entry ], [ %expected.0.ph.be, %while.cond.outer.backedge ]
  %spinner.sroa.0.0.ph = phi i32 [ 40, %entry ], [ %spinner.sroa.0.0.ph.be, %while.cond.outer.backedge ]
  %and46 = and i64 %expected.0.ph, 1
  %tobool.not47 = icmp eq i64 %and46, 0
  br i1 %tobool.not47, label %if.then, label %if.end4

if.then:                                          ; preds = %while.cond.outer, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %expected.048 = phi i64 [ %6, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit ], [ %expected.0.ph, %while.cond.outer ]
  %or = or i64 %expected.048, 1
  %4 = cmpxchg weak i64* %state, i64 %expected.048, i64 %or acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup23, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit: ; preds = %if.then
  %6 = extractvalue { i64, i1 } %4, 0
  %and = and i64 %6, 1
  %tobool.not = icmp eq i64 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end4.loopexit

if.end4.loopexit:                                 ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %7 = extractvalue { i64, i1 } %4, 0
  br label %if.end4

if.end4:                                          ; preds = %if.end4.loopexit, %while.cond.outer
  %expected.0.lcssa = phi i64 [ %expected.0.ph, %while.cond.outer ], [ %7, %if.end4.loopexit ]
  %cmp.not = icmp ugt i64 %expected.0.lcssa, 3
  %cmp.i = icmp sgt i32 %spinner.sroa.0.0.ph, 0
  %or.cond = and i1 %cmp.i, %cmp.not
  br i1 %or.cond, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, label %if.end9

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit: ; preds = %if.end4
  %cmp4.i = icmp sgt i32 %spinner.sroa.0.0.ph, 1
  br i1 %cmp4.i, label %if.then7, label %if.end9

if.then7:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit
  %dec.i = add nsw i32 %spinner.sroa.0.0.ph, -1
  call void @halide_thread_yield() #13
  %8 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond.outer.backedge

if.end9:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, %if.end4
  %spinner.sroa.0.2 = phi i32 [ %spinner.sroa.0.0.ph, %if.end4 ], [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit ]
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1) #11
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !94
  %call.i.i29 = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #13
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #13
  store <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>* %3, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !96
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !94
  %and10 = and i64 %expected.0.lcssa, -4
  %cmp11 = icmp eq i64 %and10, 0
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !96
  br label %if.end13

if.else:                                          ; preds = %if.end9
  %9 = inttoptr i64 %and10 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %9, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i, align 8, !tbaa !98
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  %and15 = and i64 %expected.0.lcssa, 3
  %or16 = or i64 %and15, %2
  %10 = cmpxchg weak i64* %state, i64 %expected.0.lcssa, i64 %or16 release monotonic
  %11 = extractvalue { i64, i1 } %10, 1
  br i1 %11, label %if.then19, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit: ; preds = %if.end13
  %12 = extractvalue { i64, i1 } %10, 0
  br label %if.end22

if.then19:                                        ; preds = %if.end13
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #13
  %13 = load i8, i8* %should_park.i.i, align 8, !tbaa !94, !range !17
  %tobool.not6.i = icmp eq i8 %13, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %if.then19, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #13
  %14 = load i8, i8* %should_park.i.i, align 8, !tbaa !94, !range !17
  %tobool.not.i = icmp eq i8 %14, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !102

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %if.then19
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #13
  %15 = load atomic i64, i64* %state monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit
  %expected.3 = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %12, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %spinner.sroa.0.3 = phi i32 [ 40, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %spinner.sroa.0.2, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %call.i.i = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #13
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #13
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1) #11
  br label %while.cond.outer.backedge

while.cond.outer.backedge:                        ; preds = %if.end22, %if.then7
  %expected.0.ph.be = phi i64 [ %8, %if.then7 ], [ %expected.3, %if.end22 ]
  %spinner.sroa.0.0.ph.be = phi i32 [ %dec.i, %if.then7 ], [ %spinner.sroa.0.3, %if.end22 ]
  br label %while.cond.outer

cleanup23:                                        ; preds = %if.then
  ret void
}

declare i32 @pthread_mutex_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_wait(%struct.pthread_mutex_t*, %struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_cond_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 align 2 {
entry:
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %lock_state, align 8, !tbaa !46
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 3
  ret i1 %cmp
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) unnamed_addr #2 align 2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  %0 = select i1 %more_waiters, i64 2, i64 0
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %1 = load i64*, i64** %lock_state, align 8, !tbaa !46
  store atomic i64 %0, i64* %1 release, align 8
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 align 2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak void @halide_cond_broadcast(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !44
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !103
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !105
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5, i64 %0, i64 0) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = load atomic i32, i32* %value acquire, align 4
  %sub12 = sub nsw i32 %0, %n
  %cmp113 = icmp sgt i32 %sub12, -1
  br i1 %cmp113, label %land.rhs, label %return

land.rhs:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit
  %sub15 = phi i32 [ %sub, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %sub12, %if.end ]
  %expected.014 = phi i32 [ %3, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %0, %if.end ]
  %1 = cmpxchg weak i32* %value, i32 %expected.014, i32 %sub15 acq_rel monotonic
  %2 = extractvalue { i32, i1 } %1, 1
  br i1 %2, label %return.loopexit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit: ; preds = %land.rhs
  %3 = extractvalue { i32, i1 } %1, 0
  %sub = sub nsw i32 %3, %n
  %cmp1 = icmp sgt i32 %sub, -1
  br i1 %cmp1, label %land.rhs, label %return.loopexit

return.loopexit:                                  ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit, %land.rhs
  %4 = extractvalue { i32, i1 } %1, 1
  br label %return

return:                                           ; preds = %return.loopexit, %if.end, %entry
  %retval.0 = phi i1 [ true, %entry ], [ false, %if.end ], [ %4, %return.loopexit ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_cond_wait(%struct.halide_mutex* %cond, %struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #11
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !44
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !106
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  %2 = bitcast %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i to %struct.halide_mutex**
  store %struct.halide_mutex* %mutex, %struct.halide_mutex** %2, align 8, !tbaa !108
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %4 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %3, i64 %4) #13
  %5 = ptrtoint %struct.halide_mutex* %mutex to i64
  %cmp.not.i = icmp eq i64 %call.i, %5
  %6 = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %7 = cmpxchg weak i64* %6, i64 0, i64 1 acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  %9 = load atomic i64, i64* %6 monotonic, align 8
  %10 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i to i8*
  %11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0
  br label %while.cond.outer.i.i.i

while.cond.outer.i.i.i:                           ; preds = %while.cond.outer.i.i.i.backedge, %if.then.i.i
  %expected.0.ph.i.i.i = phi i64 [ %9, %if.then.i.i ], [ %expected.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i.i = phi i32 [ 40, %if.then.i.i ], [ %spinner.sroa.0.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %and55.i.i.i = and i64 %expected.0.ph.i.i.i, 1
  %tobool.not56.i.i.i = icmp eq i64 %and55.i.i.i, 0
  br i1 %tobool.not56.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i

if.then.i.i.i:                                    ; preds = %while.cond.outer.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %expected.057.i.i.i = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i ], [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ]
  %or.i.i.i = or i64 %expected.057.i.i.i, 1
  %13 = cmpxchg weak i64* %6, i64 %expected.057.i.i.i, i64 %or.i.i.i acquire monotonic
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then.i.i.i
  %15 = extractvalue { i64, i1 } %13, 0
  %and.i.i.i = and i64 %15, 1
  %tobool.not.i.i.i = icmp eq i64 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i.loopexit

if.end4.i.i.i.loopexit:                           ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %16 = extractvalue { i64, i1 } %13, 0
  br label %if.end4.i.i.i

if.end4.i.i.i:                                    ; preds = %if.end4.i.i.i.loopexit, %while.cond.outer.i.i.i
  %expected.0.lcssa.i.i.i = phi i64 [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ], [ %16, %if.end4.i.i.i.loopexit ]
  %cmp.i.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, label %if.end8.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i: ; preds = %if.end4.i.i.i
  %cmp4.i.not.i.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i.i, 1
  br i1 %cmp4.i.not.i.i.i, label %if.end8.i.i.i, label %if.then6.i.i.i

if.then6.i.i.i:                                   ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i
  %dec.i.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i.i, -1
  call void @halide_thread_yield() #13
  %17 = load atomic i64, i64* %6 monotonic, align 8
  br label %while.cond.outer.i.i.i.backedge

if.end8.i.i.i:                                    ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, %if.end4.i.i.i
  %spinner.sroa.0.152.i.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i ], [ %spinner.sroa.0.0.ph.i.i.i, %if.end4.i.i.i ]
  %and9.i.i.i = and i64 %expected.0.lcssa.i.i.i, 2
  %cmp.i.i.i = icmp eq i64 %and9.i.i.i, 0
  br i1 %cmp.i.i.i, label %if.then10.i.i.i, label %if.end19.i.i.i

if.then10.i.i.i:                                  ; preds = %if.end8.i.i.i
  %or12.i.i.i = or i64 %expected.0.lcssa.i.i.i, 2
  %18 = cmpxchg weak i64* %6, i64 %expected.0.lcssa.i.i.i, i64 %or12.i.i.i monotonic monotonic
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %if.end19.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then10.i.i.i
  %20 = extractvalue { i64, i1 } %18, 0
  br label %while.cond.outer.i.i.i.backedge

if.end19.i.i.i:                                   ; preds = %if.then10.i.i.i, %if.end8.i.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !44
  store i64* %6, i64** %lock_state2.i.i.i.i, align 8, !tbaa !46
  %call21.i.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %12, i64 %5) #13
  %cmp22.i.i.i = icmp eq i64 %call21.i.i.i, %5
  br i1 %cmp22.i.i.i, label %cleanup30.critedge.i.i.i, label %if.end24.i.i.i

if.end24.i.i.i:                                   ; preds = %if.end19.i.i.i
  %21 = load atomic i64, i64* %6 monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %while.cond.outer.i.i.i.backedge

while.cond.outer.i.i.i.backedge:                  ; preds = %if.end24.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i, %if.then6.i.i.i
  %expected.0.ph.i.i.i.be = phi i64 [ %20, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ %21, %if.end24.i.i.i ], [ %17, %if.then6.i.i.i ]
  %spinner.sroa.0.0.ph.i.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ 40, %if.end24.i.i.i ], [ %dec.i.i.i.i, %if.then6.i.i.i ]
  br label %while.cond.outer.i.i.i

cleanup30.critedge.i.i.i:                         ; preds = %if.end19.i.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.else.i:                                        ; preds = %entry
  %22 = load atomic i64, i64* %6 monotonic, align 8
  %and.i = and i64 %22, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %if.then2.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.then2.i:                                       ; preds = %if.else.i
  call void @halide_print(i8* null, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str.5.6, i64 0, i64 0)) #13
  call void @abort() #13
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit: ; preds = %if.then.i.i.i, %if.then2.i, %if.else.i, %cleanup30.critedge.i.i.i, %if.then.i
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #13
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #13
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #4 align 2 {
entry:
  %queue_data = alloca %"struct.Halide::Runtime::Internal::Synchronization::queue_data", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %0) #11
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !94
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 0
  %call.i.i = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #13
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 1
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #13
  %sleep_address.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 1
  store i64 0, i64* %sleep_address.i, align 8, !tbaa !109
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !84
  %unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 3
  store i64 0, i64* %unpark_info.i, align 8, !tbaa !93
  %call = call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #14
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !110
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !112
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !44
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call2 = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #13
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %4 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %4, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %4, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #13
  br label %cleanup

if.end:                                           ; preds = %entry
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !84
  store i64 %addr, i64* %sleep_address.i, align 8, !tbaa !109
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !94
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !113
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, i64 0, i32 2
  %head.sink = select i1 %cmp.not, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head.sink, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !89
  %state.i23 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %7 = atomicrmw and i64* %state.i23, i64 -2 release
  %and.i24 = and i64 %7, 2
  %cmp.i25 = icmp ne i64 %and.i24, 0
  %cmp3.not.i26 = icmp ult i64 %7, 4
  %or.cond.i27 = or i1 %cmp3.not.i26, %cmp.i25
  br i1 %or.cond.i27, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, label %if.then.i28

if.then.i28:                                      ; preds = %if.end
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #13
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29: ; preds = %if.then.i28, %if.end
  %8 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)***
  %vtable9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*** %8, align 8, !tbaa !44
  %vfn10 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vtable9, i64 1
  %9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vfn10, align 8
  call void %9(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) #13
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #13
  %10 = load i8, i8* %should_park.i.i, align 8, !tbaa !94, !range !17
  %tobool.not6.i = icmp eq i8 %10, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #13
  %11 = load i8, i8* %should_park.i.i, align 8, !tbaa !94, !range !17
  %tobool.not.i = icmp eq i8 %11, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !102

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #13
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %if.then.i, %if.then
  %unpark_info.i.sink = phi i64* [ %unpark_info.i, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %invalid_unpark_info.i, %if.then ], [ %invalid_unpark_info.i, %if.then.i ]
  %12 = load i64, i64* %unpark_info.i.sink, align 8, !tbaa !18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  %call.i.i22 = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #13
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #13
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %0) #11
  ret i64 %12
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !106
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !108
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store atomic i64 %3, i64* %0 monotonic, align 8
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp4.not = icmp eq i64 %1, %3
  br i1 %cmp4.not, label %cleanup, label %if.then5

if.then5:                                         ; preds = %if.else
  %invalid_unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 %3, i64* %invalid_unpark_info, align 8, !tbaa !112
  br label %cleanup

cleanup:                                          ; preds = %if.then5, %if.else, %if.then
  %retval.0 = phi i1 [ false, %if.then5 ], [ true, %if.else ], [ true, %if.then ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this) unnamed_addr #4 align 2 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %0 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !108
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0, i64 0, i32 0
  %1 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  br i1 %2, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %3 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %5 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !44
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !46
  %7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %8 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0 to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %7, i64 %8) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !106
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr_from, i64 %addr_to, i64 %unpark_info) local_unnamed_addr #4 align 2 {
entry:
  %buckets = alloca %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  call void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %buckets, i64 %addr_from, i64 %addr_to) #14
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !110
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !112
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !44
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #13
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #14
  br label %cleanup

if.end:                                           ; preds = %entry
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !114
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %cmp.not92 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  br i1 %cmp.not92, label %if.end38, label %while.body

while.body:                                       ; preds = %if.end, %if.end22
  %wakeup.098 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end22 ], [ null, %if.end ]
  %requeue_tail.097 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.2, %if.end22 ], [ null, %if.end ]
  %requeue.096 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.3, %if.end22 ], [ null, %if.end ]
  %data.095 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %7, %if.end22 ], [ %5, %if.end ]
  %prev.094 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.1, %if.end22 ], [ null, %if.end ]
  %data_location.093 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.1, %if.end22 ], [ %head, %if.end ]
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 1
  %6 = load atomic i64, i64* %sleep_address monotonic, align 8
  %next2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 2
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next2, align 8, !tbaa !84
  %cmp3 = icmp eq i64 %6, %addr_from
  br i1 %cmp3, label %if.then4, label %if.end22

if.then4:                                         ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.093, align 8, !tbaa !10
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !114
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %8, i64 0, i32 2
  %9 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !89
  %cmp6 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %9, %data.095
  br i1 %cmp6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.then4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.094, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !89
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.then4
  %10 = load i8, i8* %1, align 8, !tbaa !110, !range !17
  %tobool = icmp ne i8 %10, 0
  %cmp11 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.098, null
  %or.cond = and i1 %cmp11, %tobool
  br i1 %or.cond, label %if.end22, label %if.else

if.else:                                          ; preds = %if.end10
  %cmp13 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.096, null
  br i1 %cmp13, label %if.end17, label %if.else15

if.else15:                                        ; preds = %if.else
  %next16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.097, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next16, align 8, !tbaa !84
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.else
  %requeue.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.else15 ], [ %data.095, %if.else ]
  store atomic i64 %addr_to, i64* %sleep_address monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.end17, %if.end10, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.093, %if.end10 ], [ %data_location.093, %if.end17 ], [ %next2, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.094, %if.end10 ], [ %prev.094, %if.end17 ], [ %data.095, %while.body ]
  %requeue.3 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.end10 ], [ %requeue.1, %if.end17 ], [ %requeue.096, %while.body ]
  %requeue_tail.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.097, %if.end10 ], [ %data.095, %if.end17 ], [ %requeue_tail.097, %while.body ]
  %wakeup.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.095, %if.end10 ], [ %wakeup.098, %if.end17 ], [ %wakeup.098, %while.body ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !116

while.end:                                        ; preds = %if.end22
  %cmp23.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, null
  br i1 %cmp23.not, label %if.end38, label %if.then24

if.then24:                                        ; preds = %while.end
  %next25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next25, align 8, !tbaa !84
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %11 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !117
  %head26 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 1
  %12 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head26, align 8, !tbaa !113
  %cmp27 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %12, null
  br i1 %cmp27, label %if.end35, label %if.else31

if.else31:                                        ; preds = %if.then24
  %tail33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  %13 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail33, align 8, !tbaa !89
  %next34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %13, i64 0, i32 2
  br label %if.end35

if.end35:                                         ; preds = %if.else31, %if.then24
  %next34.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %next34, %if.else31 ], [ %head26, %if.then24 ]
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next34.sink, align 8, !tbaa !10
  %tail37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail37, align 8, !tbaa !89
  br label %if.end38

if.end38:                                         ; preds = %if.end35, %while.end, %if.end
  %cmp23106 = phi i1 [ true, %if.end35 ], [ false, %while.end ], [ false, %if.end ]
  %wakeup.0.lcssa105 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end35 ], [ %wakeup.2, %while.end ], [ null, %if.end ]
  %cmp39 = icmp ne %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, null
  %14 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)***
  %vtable41 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*** %14, align 8, !tbaa !44
  %vfn42 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vtable41, i64 3
  %15 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vfn42, align 8
  call void %15(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %cmp39, i1 zeroext %cmp23106) #13
  br i1 %cmp39, label %if.then44, label %if.else48

if.then44:                                        ; preds = %if.end38
  %unpark_info45 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 3
  store i64 %unpark_info, i64* %unpark_info45, align 8, !tbaa !93
  %mutex.i89 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 0
  %call.i90 = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i89) #13
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #14
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !94
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 1
  %call.i88 = call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #13
  %call.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i89) #13
  br label %if.end49

if.else48:                                        ; preds = %if.end38
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #14
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.then44
  %16 = load i8, i8* %1, align 8
  %17 = and i8 %16, 1
  %tobool52 = icmp ne i8 %17, 0
  %18 = and i1 %cmp39, %tobool52
  %conv = zext i1 %18 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then
  %retval.0 = phi i32 [ %conv, %if.end49 ], [ 0, %if.then ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* noalias sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %agg.result, i64 %addr_from, i64 %addr_to) local_unnamed_addr #4 {
entry:
  %mul.i = mul i64 %addr_from, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %mul.i37 = mul i64 %addr_to, -7046029254386353131
  %shr.i38 = lshr i64 %mul.i37, 54
  %cmp = icmp eq i64 %shr.i, %shr.i38
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i42, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %cleanup, label %if.then.i43

if.then.i43:                                      ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #13
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp2 = icmp ult i64 %shr.i, %shr.i38
  br i1 %cmp2, label %if.then3, label %if.else9

if.then3:                                         ; preds = %if.else
  %arrayidx5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %state.i52 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0, i32 0
  %2 = cmpxchg weak i64* %state.i52, i64 0, i64 1 acquire monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, label %if.then.i53

if.then.i53:                                      ; preds = %if.then3
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #13
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54: ; preds = %if.then.i53, %if.then3
  %state.i49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0, i32 0
  %4 = cmpxchg weak i64* %state.i49, i64 0, i64 1 acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup, label %if.then.i50

if.then.i50:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #13
  br label %cleanup

if.else9:                                         ; preds = %if.else
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %arrayidx13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0, i32 0
  %6 = cmpxchg weak i64* %state.i39, i64 0, i64 1 acquire monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, label %if.then.i40

if.then.i40:                                      ; preds = %if.else9
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #13
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41: ; preds = %if.then.i40, %if.else9
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0, i32 0
  %8 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41
  %mutex15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex15) #13
  br label %cleanup

cleanup:                                          ; preds = %if.then.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, %if.then.i50, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, %if.then.i43, %if.then
  %arrayidx13.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx5, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx5, %if.then.i50 ], [ %arrayidx13, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx13, %if.then.i ]
  %arrayidx11.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx6, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx6, %if.then.i50 ], [ %arrayidx11, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx11, %if.then.i ]
  %from2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from2.i, align 8, !tbaa !10
  %to3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to3.i, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) local_unnamed_addr #0 {
entry:
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !114
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %1 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !117
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %2 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %2, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %2, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end15, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #13
  br label %if.end15

if.else:                                          ; preds = %entry
  %cmp4 = icmp ugt %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %state.i25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %3 = atomicrmw and i64* %state.i25, i64 -2 release
  %and.i26 = and i64 %3, 2
  %cmp.i27 = icmp ne i64 %and.i26, 0
  %cmp3.not.i28 = icmp ult i64 %3, 4
  %or.cond.i29 = or i1 %cmp3.not.i28, %cmp.i27
  br i1 %or.cond.i29, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, label %if.then.i30

if.then.i30:                                      ; preds = %if.then5
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #13
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31: ; preds = %if.then.i30, %if.then5
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !117
  %state.i32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0, i32 0
  %5 = atomicrmw and i64* %state.i32, i64 -2 release
  %and.i33 = and i64 %5, 2
  %cmp.i34 = icmp ne i64 %and.i33, 0
  %cmp3.not.i35 = icmp ult i64 %5, 4
  %or.cond.i36 = or i1 %cmp3.not.i35, %cmp.i34
  br i1 %or.cond.i36, label %if.end15, label %if.then.i37

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31
  %mutex9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex9) #13
  br label %if.end15

if.else10:                                        ; preds = %if.else
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0, i32 0
  %6 = atomicrmw and i64* %state.i39, i64 -2 release
  %and.i40 = and i64 %6, 2
  %cmp.i41 = icmp ne i64 %and.i40, 0
  %cmp3.not.i42 = icmp ult i64 %6, 4
  %or.cond.i43 = or i1 %cmp3.not.i42, %cmp.i41
  br i1 %or.cond.i43, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, label %if.then.i44

if.then.i44:                                      ; preds = %if.else10
  %mutex12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex12) #13
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45: ; preds = %if.then.i44, %if.else10
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !114
  %state.i46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0, i32 0
  %8 = atomicrmw and i64* %state.i46, i64 -2 release
  %and.i47 = and i64 %8, 2
  %cmp.i48 = icmp ne i64 %and.i47, 0
  %cmp3.not.i49 = icmp ult i64 %8, 4
  %or.cond.i50 = or i1 %cmp3.not.i49, %cmp.i48
  br i1 %or.cond.i50, label %if.end15, label %if.then.i51

if.then.i51:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #13
  br label %if.end15

if.end15:                                         ; preds = %if.then.i51, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, %if.then.i37, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, %if.then.i, %if.then
  ret void
}

; Function Attrs: nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #4 align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !103
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !105
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  %cmp.not = icmp eq i64 %1, %3
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  store atomic i64 0, i64* %0 monotonic, align 8
  %4 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !105
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %4, i64 0, i32 0
  %5 = load atomic i64, i64* %state.i monotonic, align 8
  %and11.i = and i64 %5, 1
  %tobool.not12.i = icmp eq i64 %and11.i, 0
  br i1 %tobool.not12.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i
  %val.013.i = phi i64 [ %8, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ %5, %if.end ]
  %or.i = or i64 %val.013.i, 2
  %6 = cmpxchg weak i64* %state.i, i64 %val.013.i, i64 %or.i monotonic monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i: ; preds = %if.end.i
  %8 = extractvalue { i64, i1 } %6, 0
  %and.i = and i64 %8, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit: ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i, %if.end.i, %if.end
  %tobool.not.lcssa.i = phi i8 [ 1, %if.end ], [ 1, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ 0, %if.end.i ]
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  store i8 %tobool.not.lcssa.i, i8* %unpark_one, align 8, !tbaa !110
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, %entry
  ret i1 %cmp.not
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 align 2 {
entry:
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  %0 = load i8, i8* %unpark_one, align 8, !tbaa !110, !range !17
  %tobool.not = icmp ne i8 %0, 0
  %1 = and i1 %tobool.not, %some_requeued
  br i1 %1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !105
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, i64 0, i32 0
  %3 = atomicrmw or i64* %state.i, i64 2 monotonic
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() local_unnamed_addr #0 {
entry:
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #13
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.end, label %cond.true

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #13
  %tobool2.not = icmp eq i8* %call1, null
  br i1 %tobool2.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end, %entry
  %threads_str.010 = phi i8* [ %call1, %if.end ], [ %call, %entry ]
  %call3 = tail call i32 @atoi(i8* nonnull %threads_str.010) #13
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = tail call i32 @halide_host_cpu_count() #13
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal13worker_threadEPv(i8* %arg) #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %0 = bitcast i8* %arg to %"struct.Halide::Runtime::Internal::work"*
  tail call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %0) #14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @malloc(i64 24) #13
  %f1 = bitcast i8* %call to void (i8*)**
  store void (i8*)* %f, void (i8*)** %f1, align 8, !tbaa !118
  %closure2 = getelementptr inbounds i8, i8* %call, i64 8
  %0 = bitcast i8* %closure2 to i8**
  store i8* %closure, i8** %0, align 8, !tbaa !121
  %handle = getelementptr inbounds i8, i8* %call, i64 16
  %1 = bitcast i8* %handle to i64*
  store i64 0, i64* %1, align 8, !tbaa !122
  %call4 = tail call i32 @pthread_create(i64* nonnull %1, i8* null, i8* (i8*)* nonnull @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv, i8* %call) #13
  %2 = bitcast i8* %call to %struct.halide_thread*
  ret %struct.halide_thread* %2
}

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv(i8* %arg) #0 {
entry:
  %f = bitcast i8* %arg to void (i8*)**
  %0 = load void (i8*)*, void (i8*)** %f, align 8, !tbaa !118
  %closure = getelementptr inbounds i8, i8* %arg, i64 8
  %1 = bitcast i8* %closure to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !121
  tail call void %0(i8* %2) #13
  ret i8* null
}

declare i32 @pthread_create(i64*, i8*, i8* (i8*)*, i8*) local_unnamed_addr #1

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  %conv = sext i32 %num_tasks to i64
  %0 = alloca %"struct.Halide::Runtime::Internal::work", i64 %conv, align 8
  %cmp76 = icmp sgt i32 %num_tasks, 0
  br i1 %cmp76, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %num_tasks.addr.0.lcssa = phi i32 [ %num_tasks, %entry ], [ %num_tasks.addr.1, %for.inc ]
  %cmp17 = icmp eq i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp17, label %cleanup, label %if.end19

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv82 = phi i64 [ %indvars.iv.next83, %for.inc ], [ 0, %entry ]
  %num_tasks.addr.078 = phi i32 [ %num_tasks.addr.1, %for.inc ], [ %num_tasks, %entry ]
  %tasks.addr.077 = phi %struct.halide_parallel_task_t* [ %tasks.addr.1, %for.inc ], [ %tasks, %entry ]
  %extent = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 0, i32 6
  %1 = load i32, i32* %extent, align 8, !tbaa !123
  %cmp1 = icmp slt i32 %1, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %dec = add nsw i32 %num_tasks.addr.078, -1
  br label %for.inc

if.end:                                           ; preds = %for.body
  %incdec.ptr = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 1
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82
  %2 = bitcast %"struct.Halide::Runtime::Internal::work"* %arrayidx to i8*
  %3 = bitcast %struct.halide_parallel_task_t* %tasks.addr.077 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %2, i8* nonnull align 8 dereferenceable(56) %3, i64 56, i1 false), !tbaa.struct !124
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 1
  store i32 (i8*, i32, i8*)* null, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !35
  %user_context6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 7
  store i8* %user_context, i8** %user_context6, align 8, !tbaa !36
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 8
  %4 = bitcast i32* %active_workers to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %4, align 8, !tbaa !37
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !38
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !39
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 5
  %5 = bitcast %"struct.Halide::Runtime::Internal::work"** %parent_job to i8**
  store i8* %task_parent, i8** %5, align 8, !tbaa !42
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %tasks.addr.1 = phi %struct.halide_parallel_task_t* [ %tasks.addr.077, %if.then ], [ %incdec.ptr, %if.end ]
  %num_tasks.addr.1 = phi i32 [ %dec, %if.then ], [ %num_tasks.addr.078, %if.end ]
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %6 = sext i32 %num_tasks.addr.1 to i64
  %cmp = icmp slt i64 %indvars.iv.next83, %6
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !125

if.end19:                                         ; preds = %for.cond.cleanup
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %7 = bitcast i8* %task_parent to %"struct.Halide::Runtime::Internal::work"*
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_tasks.addr.0.lcssa, %"struct.Halide::Runtime::Internal::work"* nonnull %0, %"struct.Halide::Runtime::Internal::work"* %7) #14
  %cmp2373 = icmp sgt i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp2373, label %for.body25.preheader, label %for.cond.cleanup24

for.body25.preheader:                             ; preds = %if.end19
  %wide.trip.count = zext i32 %num_tasks.addr.0.lcssa to i64
  br label %for.body25

for.cond.cleanup24:                               ; preds = %for.body25, %if.end19
  %exit_status20.0.lcssa = phi i32 [ 0, %if.end19 ], [ %spec.select, %for.body25 ]
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  br label %cleanup

for.body25:                                       ; preds = %for.body25, %for.body25.preheader
  %indvars.iv = phi i64 [ 0, %for.body25.preheader ], [ %indvars.iv.next, %for.body25 ]
  %exit_status20.074 = phi i32 [ 0, %for.body25.preheader ], [ %spec.select, %for.body25 ]
  %add.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %add.ptr) #14
  %exit_status28 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 9
  %8 = load i32, i32* %exit_status28, align 4, !tbaa !43
  %cmp29.not = icmp eq i32 %8, 0
  %spec.select = select i1 %cmp29.not, i32 %exit_status20.074, i32 %8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup24, label %for.body25, !llvm.loop !126

cleanup:                                          ; preds = %for.cond.cleanup24, %for.cond.cleanup
  %retval.0 = phi i32 [ %exit_status20.0.lcssa, %for.cond.cleanup24 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #2 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  store atomic i32 %n, i32* %value release, align 4
  ret i32 %n
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = atomicrmw add i32* %value, i32 %n acq_rel
  %cmp = icmp eq i32 %0, 0
  %cmp1 = icmp ne i32 %n, 0
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #14
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %add = add nsw i32 %0, %n
  ret i32 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_pool_cleanup() #0 {
entry:
  tail call void @halide_shutdown_thread_pool() #14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !48, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !69
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #14
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #14
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !56
  %cmp4 = icmp sgt i32 %1, 0
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %call.i = tail call i8* @memset(i8* nonnull bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i32 0, i64 2116) #13
  br label %if.end

for.body:                                         ; preds = %if.then, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %indvars.iv
  %2 = load %struct.halide_thread*, %struct.halide_thread** %arrayidx, align 8, !tbaa !10
  tail call void @halide_join_thread(%struct.halide_thread* %2) #14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %3 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !56
  %4 = sext i32 %3 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %4
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !127

if.end:                                           ; preds = %for.cond.cleanup, %entry
  ret void
}

declare i8* @memset(i8*, i32, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  %ret = alloca i8*, align 8
  %0 = bitcast %struct.halide_thread* %thread_arg to %"struct.Halide::Runtime::Internal::spawned_thread"*
  %1 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #11
  store i8* null, i8** %ret, align 8, !tbaa !10
  %handle = getelementptr inbounds %"struct.Halide::Runtime::Internal::spawned_thread", %"struct.Halide::Runtime::Internal::spawned_thread"* %0, i64 0, i32 2
  %2 = load i64, i64* %handle, align 8, !tbaa !122
  %call = call i32 @pthread_join(i64 %2, i8** nonnull %ret) #13
  %3 = bitcast %struct.halide_thread* %thread_arg to i8*
  call void @free(i8* %3) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #11
  ret void
}

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #1

; Function Attrs: nounwind
define weak void @halide_cond_signal(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !44
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !128
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !130
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 align 2 {
entry:
  ret i1 true
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !128
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_malloc(i8* null, i64 8) #13
  %0 = bitcast i8* %call to %struct.halide_mutex_array*
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %conv = sext i32 %sz to i64
  %mul = shl nsw i64 %conv, 3
  %call1 = tail call i8* @halide_malloc(i8* null, i64 %mul) #13
  %1 = bitcast i8* %call to i8**
  store i8* %call1, i8** %1, align 8, !tbaa !131
  %cmp4 = icmp eq i8* %call1, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  tail call void @halide_free(i8* null, i8* nonnull %call) #13
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %call10 = tail call i8* @memset(i8* nonnull %call1, i32 0, i64 %mul) #13
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then5, %entry
  %retval.0 = phi %struct.halide_mutex_array* [ null, %if.then5 ], [ %0, %if.end6 ], [ null, %entry ]
  ret %struct.halide_mutex_array* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %array to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !131
  tail call void @halide_free(i8* %user_context, i8* %1) #13
  tail call void @halide_free(i8* %user_context, i8* %array) #13
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !131
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_lock(%struct.halide_mutex* %arrayidx) #14
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !131
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %arrayidx) #14
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  br i1 %cmp, label %if.end3.thread, label %if.end

if.end3.thread:                                   ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #13
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %0 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !54
  br label %if.else.i

if.end:                                           ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  %cmp1 = icmp eq i32 %n, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #14
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %n.addr.0 = phi i32 [ %call, %if.then2 ], [ %n, %if.end ]
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !54
  %cmp.i = icmp sgt i32 %n.addr.0, 256
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit, label %if.else.i

if.else.i:                                        ; preds = %if.end3, %if.end3.thread
  %2 = phi i32 [ %0, %if.end3.thread ], [ %1, %if.end3 ]
  %n.addr.012 = phi i32 [ %n, %if.end3.thread ], [ %n.addr.0, %if.end3 ]
  %3 = icmp sgt i32 %n.addr.012, 1
  %spec.select.i = select i1 %3, i32 %n.addr.012, i32 1
  br label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit

_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit: ; preds = %if.else.i, %if.end3
  %4 = phi i32 [ %2, %if.else.i ], [ %1, %if.end3 ]
  %call48 = phi i32 [ %spec.select.i, %if.else.i ], [ 256, %if.end3 ]
  store i32 %call48, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !54
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #14
  ret i32 %4
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_set_custom_do_loop_task(i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_custom_parallel_runtime(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release) local_unnamed_addr #2 {
entry:
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  store i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #13
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #13
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #13
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #13
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #13
  ret i1 %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_symbol(i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* nonnull inttoptr (i64 -2 to i8*), i8* %name) #13
  ret i8* %call
}

declare i8* @dlsym(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_load_library(i8* %name) #0 {
entry:
  %call = tail call i8* @dlopen(i8* %name, i32 5) #13
  ret i8* %call
}

declare i8* @dlopen(i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_library_symbol(i8* %lib, i8* %name) #0 {
entry:
  %cmp = icmp eq i8* %lib, null
  %spec.select = select i1 %cmp, i8* inttoptr (i64 -2 to i8*), i8* %lib
  %call = tail call i8* @dlsym(i8* %spec.select, i8* %name) #13
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_get_symbol(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_load_library(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i8*)* @halide_set_custom_get_library_symbol(i8* (i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  store i8* (i8*, i8*)* %f, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  ret i8* (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_symbol(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #13
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_load_library(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #13
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_library_symbol(i8* %lib, i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %lib, i8* %name) #13
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !37
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !133

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !37
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0)) #13
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #13
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !37
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

; Function Attrs: nounwind
define weak i32 @halide_default_trace(i8* %user_context, %struct.halide_trace_event_t* %e) #4 {
entry:
  %0 = atomicrmw add i32* @_ZZ20halide_default_traceE3ids, i32 1 seq_cst
  %call = tail call i32 @halide_get_trace_file(i8* %user_context) #14
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4
  %lanes = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %1 = load i16, i16* %lanes, align 2, !tbaa !134
  %conv = zext i16 %1 to i32
  %bits.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %2 = load i8, i8* %bits.i, align 1, !tbaa !140
  %conv.i = zext i8 %2 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %mul = mul nuw nsw i32 %div.i, %conv
  %dimensions = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %3 = load i32, i32* %dimensions, align 8, !tbaa !141
  %mul3 = shl i32 %3, 2
  %func = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !142
  %call4 = tail call i64 @strlen(i8* %4) #13
  %5 = trunc i64 %call4 to i32
  %conv5 = add i32 %5, 1
  %trace_tag = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %6 = load i8*, i8** %trace_tag, align 8, !tbaa !143
  %tobool.not = icmp eq i8* %6, null
  br i1 %tobool.not, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.then
  %call7 = tail call i64 @strlen(i8* nonnull %6) #13
  %7 = trunc i64 %call7 to i32
  %phi.cast = add i32 %7, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.then
  %cond = phi i32 [ %phi.cast, %cond.true ], [ 1, %if.then ]
  %add11 = add i32 %mul3, 31
  %add12 = add i32 %add11, %mul
  %add13 = add i32 %add12, %conv5
  %add14 = add i32 %add13, %cond
  %and = and i32 %add14, -4
  %8 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 0, i32 0
  %cmp.i.i = icmp ult i32 %and, 1048577
  %cursor.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 1
  %overage.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 2
  %arraydecay.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 0
  br i1 %cmp.i.i, label %while.body.i.i.us.i.preheader, label %while.body.i.i.i.preheader

while.body.i.i.i.preheader:                       ; preds = %cond.end
  %9 = bitcast i32* %cursor.i.i to <2 x i32>*
  br label %while.body.i.i.i

while.body.i.i.us.i.preheader:                    ; preds = %cond.end
  %10 = bitcast i32* %cursor.i.i to <2 x i32>*
  br label %while.body.i.i.us.i

while.body.i.i.us.i:                              ; preds = %while.body.i.i.us.i.backedge, %while.body.i.i.us.i.preheader
  %11 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !144
  %and.i.i.us.i = and i32 %11, 1073741823
  %add.i.i.us.i = add nuw nsw i32 %and.i.i.us.i, 1
  %12 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.us.i, i32 %add.i.i.us.i seq_cst seq_cst
  %13 = extractvalue { i32, i1 } %12, 1
  br i1 %13, label %do.end.i.us.i, label %while.body.i.i.us.i.backedge

do.end.i.us.i:                                    ; preds = %while.body.i.i.us.i
  %14 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.us.i = add i32 %14, %and
  %cmp2.i.us.i = icmp ugt i32 %add.i.us.i, 1048576
  br i1 %cmp2.i.us.i, label %while.body.us.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.us.i:                                  ; preds = %do.end.i.us.i
  %15 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %16 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.us.i

while.body.i.i5.us.i:                             ; preds = %while.body.i.i5.us.i, %while.body.us.i
  %17 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %18 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i, label %while.body.i.i5.us.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i: ; preds = %while.body.i.i5.us.i
  %20 = load i32, i32* %cursor.i.i, align 4, !tbaa !146
  %tobool.not.i.us.i = icmp eq i32 %20, 0
  br i1 %tobool.not.i.us.i, label %do.end.critedge.i.us.i, label %if.then.i9.us.i

if.then.i9.us.i:                                  ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %21 = load i32, i32* %overage.i.i, align 4, !tbaa !148
  %sub.i.us.i = sub i32 %20, %21
  store i32 %sub.i.us.i, i32* %cursor.i.i, align 4, !tbaa !146
  %conv.i.us.i = zext i32 %sub.i.us.i to i64
  %call.i.us.i = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.us.i) #13
  %conv5.i.us.i = trunc i64 %call.i.us.i to i32
  %cmp.i8.us.i = icmp eq i32 %sub.i.us.i, %conv5.i.us.i
  store <2 x i32> zeroinitializer, <2 x i32>* %10, align 4, !tbaa !37
  %22 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.us.i, label %while.body.i.i.us.i.backedge, label %if.then10.i.us.i

if.then10.i.us.i:                                 ; preds = %if.then.i9.us.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %while.body.i.i.us.i.backedge

do.end.critedge.i.us.i:                           ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %23 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.us.i.backedge

while.body.i.i.us.i.backedge:                     ; preds = %do.end.critedge.i.us.i, %if.then10.i.us.i, %if.then.i9.us.i, %while.body.i.i.us.i
  br label %while.body.i.i.us.i, !llvm.loop !149

while.body.i.i.i:                                 ; preds = %while.body.i.i.i.backedge, %while.body.i.i.i.preheader
  %24 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !144
  %and.i.i.i = and i32 %24, 1073741823
  %add.i.i.i = add nuw nsw i32 %and.i.i.i, 1
  %25 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.i, i32 %add.i.i.i seq_cst seq_cst
  %26 = extractvalue { i32, i1 } %25, 1
  br i1 %26, label %if.then.i.i, label %while.body.i.i.i.backedge

if.then.i.i:                                      ; preds = %while.body.i.i.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.31, i64 0, i64 0)) #13
  tail call void @abort() #13
  %27 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.i400 = add i32 %27, %and
  %cmp2.i.i = icmp ugt i32 %add.i.i400, 1048576
  br i1 %cmp2.i.i, label %while.body.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.i:                                     ; preds = %if.then.i.i
  %28 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %29 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.i

while.body.i.i5.i:                                ; preds = %while.body.i.i5.i, %while.body.i
  %30 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %31 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %32 = extractvalue { i32, i1 } %31, 1
  br i1 %32, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i, label %while.body.i.i5.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i: ; preds = %while.body.i.i5.i
  %33 = load i32, i32* %cursor.i.i, align 4, !tbaa !146
  %tobool.not.i.i = icmp eq i32 %33, 0
  br i1 %tobool.not.i.i, label %do.end.critedge.i.i, label %if.then.i9.i

if.then.i9.i:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %34 = load i32, i32* %overage.i.i, align 4, !tbaa !148
  %sub.i.i = sub i32 %33, %34
  store i32 %sub.i.i, i32* %cursor.i.i, align 4, !tbaa !146
  %conv.i.i = zext i32 %sub.i.i to i64
  %call.i.i401 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.i) #13
  %conv5.i.i = trunc i64 %call.i.i401 to i32
  %cmp.i8.i = icmp eq i32 %sub.i.i, %conv5.i.i
  store <2 x i32> zeroinitializer, <2 x i32>* %9, align 4, !tbaa !37
  %35 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.i, label %while.body.i.i.i.backedge, label %if.then10.i.i

if.then10.i.i:                                    ; preds = %if.then.i9.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %while.body.i.i.i.backedge

do.end.critedge.i.i:                              ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %36 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.i.backedge

while.body.i.i.i.backedge:                        ; preds = %do.end.critedge.i.i, %if.then10.i.i, %if.then.i9.i, %while.body.i.i.i
  br label %while.body.i.i.i, !llvm.loop !149

_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit: ; preds = %if.then.i.i, %do.end.i.us.i
  %.lcssa.i = phi i32 [ %14, %do.end.i.us.i ], [ %27, %if.then.i.i ]
  %idx.ext.i.i = zext i32 %.lcssa.i to i64
  %add.ptr.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 %idx.ext.i.i
  %cmp16 = icmp ugt i32 %and, 4096
  br i1 %cmp16, label %if.then17, label %if.end

if.then17:                                        ; preds = %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i404 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i404, label %if.then.i415, label %if.else.i421

if.then.i415:                                     ; preds = %if.then17
  %conv.i4071 = zext i32 %and to i64
  %call.i4082 = tail call i8* @halide_uint64_to_string(i8* null, i8* null, i64 %conv.i4071, i32 1) #13
  %call.i41117 = tail call i8* @halide_string_to_string(i8* %call.i4082, i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #13
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

if.else.i421:                                     ; preds = %if.then17
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %conv.i4073 = zext i32 %and to i64
  %call.i4084 = tail call i8* @halide_uint64_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i64 %conv.i4073, i32 1) #13
  %call.i411 = tail call i8* @halide_string_to_string(i8* %call.i4084, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i.i416 = ptrtoint i8* %call.i411 to i64
  %sub.ptr.rhs.cast.i.i417 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i418 = sub i64 1, %sub.ptr.rhs.cast.i.i417
  %add.i.i419 = add i64 %sub.ptr.sub.i.i418, %sub.ptr.lhs.cast.i.i416
  %call.i.i420 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* null, i8* nonnull %call.i, i64 %add.i.i419) #13
  tail call void @halide_print(i8* null, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit: ; preds = %if.else.i421, %if.then.i415
  tail call void @free(i8* %call.i) #13
  br label %if.end

if.end:                                           ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit, %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %size = bitcast i8* %add.ptr.i.i to i32*
  store i32 %and, i32* %size, align 4, !tbaa !150
  %id = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 4
  %37 = bitcast i8* %id to i32*
  store i32 %0, i32* %37, align 4, !tbaa !152
  %38 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 8
  %39 = bitcast %struct.halide_type_t* %type to i32*
  %40 = bitcast i8* %38 to i32*
  %41 = load i32, i32* %39, align 8
  store i32 %41, i32* %40, align 4
  %event = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %event22 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 12
  %42 = bitcast i32* %event to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4, !tbaa !14
  %dimensions26 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 24
  %44 = bitcast i8* %dimensions26 to i32*
  %45 = bitcast i8* %event22 to <4 x i32>*
  store <4 x i32> %43, <4 x i32>* %45, align 4, !tbaa !14
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %46 = load i32*, i32** %coordinates, align 8, !tbaa !153
  %tobool27.not = icmp eq i32* %46, null
  br i1 %tobool27.not, label %if.end33, label %if.then28

if.then28:                                        ; preds = %if.end
  %47 = bitcast i32* %46 to i8*
  %48 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %conv31 = zext i32 %mul3 to i64
  %call32 = tail call i8* @memcpy(i8* nonnull %48, i8* nonnull %47, i64 %conv31) #13
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.end
  %value = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %49 = load i8*, i8** %value, align 8, !tbaa !154
  %tobool34.not = icmp eq i8* %49, null
  br i1 %tobool34.not, label %if.end40, label %if.then35

if.then35:                                        ; preds = %if.end33
  %50 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %44, align 4, !tbaa !155
  %idx.ext.i = sext i32 %52 to i64
  %add.ptr.i424 = getelementptr inbounds i32, i32* %51, i64 %idx.ext.i
  %53 = bitcast i32* %add.ptr.i424 to i8*
  %conv38 = zext i32 %mul to i64
  %call39 = tail call i8* @memcpy(i8* nonnull %53, i8* nonnull %49, i64 %conv38) #13
  br label %if.end40

if.end40:                                         ; preds = %if.end33, %if.then35
  %54 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %44, align 4, !tbaa !155
  %idx.ext.i.i425 = sext i32 %56 to i64
  %add.ptr.i.i426 = getelementptr inbounds i32, i32* %55, i64 %idx.ext.i.i425
  %57 = bitcast i32* %add.ptr.i.i426 to i8*
  %lanes.i = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 10
  %58 = bitcast i8* %lanes.i to i16*
  %59 = load i16, i16* %58, align 2, !tbaa !156
  %conv.i427 = zext i16 %59 to i32
  %60 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 9
  %61 = load i8, i8* %60, align 1, !tbaa !140
  %conv.i.i428 = zext i8 %61 to i32
  %add.i.i429 = add nuw nsw i32 %conv.i.i428, 7
  %div.i.i = lshr i32 %add.i.i429, 3
  %mul.i = mul nuw nsw i32 %div.i.i, %conv.i427
  %idx.ext.i430 = zext i32 %mul.i to i64
  %add.ptr.i431 = getelementptr inbounds i8, i8* %57, i64 %idx.ext.i430
  %62 = load i8*, i8** %func, align 8, !tbaa !142
  %conv43 = zext i32 %conv5 to i64
  %call44 = tail call i8* @memcpy(i8* nonnull %add.ptr.i431, i8* %62, i64 %conv43) #13
  %63 = load i32, i32* %44, align 4, !tbaa !155
  %idx.ext.i.i.i = sext i32 %63 to i64
  %add.ptr.i.i.i = getelementptr inbounds i32, i32* %55, i64 %idx.ext.i.i.i
  %64 = bitcast i32* %add.ptr.i.i.i to i8*
  %65 = load i16, i16* %58, align 2, !tbaa !156
  %conv.i.i432 = zext i16 %65 to i32
  %66 = load i8, i8* %60, align 1, !tbaa !140
  %conv.i.i.i = zext i8 %66 to i32
  %add.i.i.i433 = add nuw nsw i32 %conv.i.i.i, 7
  %div.i.i.i = lshr i32 %add.i.i.i433, 3
  %mul.i.i = mul nuw nsw i32 %div.i.i.i, %conv.i.i432
  %idx.ext.i.i434 = zext i32 %mul.i.i to i64
  %add.ptr.i.i435 = getelementptr inbounds i8, i8* %64, i64 %idx.ext.i.i434
  br label %while.cond.i437

while.cond.i437:                                  ; preds = %while.cond.i437, %if.end40
  %f.0.i = phi i8* [ %add.ptr.i.i435, %if.end40 ], [ %incdec.ptr.i, %while.cond.i437 ]
  %incdec.ptr.i = getelementptr inbounds i8, i8* %f.0.i, i64 1
  %67 = load i8, i8* %f.0.i, align 1, !tbaa !14
  %tobool.not.i436 = icmp eq i8 %67, 0
  br i1 %tobool.not.i436, label %_ZN21halide_trace_packet_t9trace_tagEv.exit, label %while.cond.i437, !llvm.loop !157

_ZN21halide_trace_packet_t9trace_tagEv.exit:      ; preds = %while.cond.i437
  %68 = load i8*, i8** %trace_tag, align 8, !tbaa !143
  %tobool47.not = icmp eq i8* %68, null
  %spec.select = select i1 %tobool47.not, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.10, i64 0, i64 0), i8* %68
  %conv53 = zext i32 %cond to i64
  %call54 = tail call i8* @memcpy(i8* nonnull %incdec.ptr.i, i8* %spec.select, i64 %conv53) #13
  %69 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  fence seq_cst
  %lock.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %69, i64 0, i32 0, i32 0
  %70 = atomicrmw sub i32* %lock.i.i, i32 1 seq_cst
  %71 = load i32, i32* %event, align 4, !tbaa !158
  %cmp56 = icmp eq i32 %71, 9
  br i1 %cmp56, label %if.then57, label %if.end277

if.then57:                                        ; preds = %_ZN21halide_trace_packet_t9trace_tagEv.exit
  %72 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i438 = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 0, i32 0
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %if.then57
  %73 = atomicrmw or i32* %lock.i.i438, i32 1073741824 seq_cst
  %74 = cmpxchg i32* %lock.i.i438, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %75 = extractvalue { i32, i1 } %74, 1
  br i1 %75, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i, label %while.body.i.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i: ; preds = %while.body.i.i
  %cursor.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 1
  %76 = load i32, i32* %cursor.i, align 4, !tbaa !146
  %tobool.not.i439 = icmp eq i32 %76, 0
  br i1 %tobool.not.i439, label %do.end.critedge.i, label %if.then.i442

if.then.i442:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %overage.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 2
  %77 = load i32, i32* %overage.i, align 4, !tbaa !148
  %sub.i = sub i32 %76, %77
  store i32 %sub.i, i32* %cursor.i, align 4, !tbaa !146
  %arraydecay.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 3, i64 0
  %conv.i440 = zext i32 %sub.i to i64
  %call.i441 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i, i64 %conv.i440) #13
  %conv5.i = trunc i64 %call.i441 to i32
  %cmp.i = icmp eq i32 %sub.i, %conv5.i
  %78 = bitcast i32* %cursor.i to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %78, align 4, !tbaa !37
  %79 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br i1 %cmp.i, label %if.end277, label %if.then10.i

if.then10.i:                                      ; preds = %if.then.i442
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %if.end277

do.end.critedge.i:                                ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %80 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br label %if.end277

if.else:                                          ; preds = %entry
  %call.i445 = tail call i8* @malloc(i64 4096) #13
  %tobool.not.i448 = icmp eq i8* %call.i445, null
  br i1 %tobool.not.i448, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit, label %if.then6.i451

if.then6.i451:                                    ; preds = %if.else
  %add.ptr.i449 = getelementptr inbounds i8, i8* %call.i445, i64 4095
  store i8 0, i8* %add.ptr.i449, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit: ; preds = %if.then6.i451, %if.else
  %ss.sroa.74.0 = phi i8* [ %add.ptr.i449, %if.then6.i451 ], [ null, %if.else ]
  %bits = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %81 = load i8, i8* %bits, align 1, !tbaa !159
  %conv60 = zext i8 %81 to i32
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit
  %print_bits.0 = phi i32 [ 8, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit ], [ %shl, %while.cond ]
  %cmp61 = icmp slt i32 %print_bits.0, %conv60
  %shl = shl i32 %print_bits.0, 1
  br i1 %cmp61, label %while.cond, label %do.body, !llvm.loop !160

do.body:                                          ; preds = %while.cond
  %cmp62 = icmp slt i32 %print_bits.0, 65
  br i1 %cmp62, label %do.end, label %if.then63

if.then63:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2.11, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end

do.end:                                           ; preds = %if.then63, %do.body
  %event65 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %82 = load i32, i32* %event65, align 4, !tbaa !158
  %cmp66 = icmp slt i32 %82, 2
  %idxprom = zext i32 %82 to i64
  %arrayidx = getelementptr inbounds [11 x i8*], [11 x i8*]* @__const.halide_default_trace.event_types, i64 0, i64 %idxprom
  %83 = load i8*, i8** %arrayidx, align 8, !tbaa !10
  %call.i456 = tail call i8* @halide_string_to_string(i8* %call.i445, i8* %ss.sroa.74.0, i8* %83) #13
  %call.i459 = tail call i8* @halide_string_to_string(i8* %call.i456, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #13
  %func70 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %84 = load i8*, i8** %func70, align 8, !tbaa !142
  %call.i462 = tail call i8* @halide_string_to_string(i8* %call.i459, i8* %ss.sroa.74.0, i8* %84) #13
  %call.i465 = tail call i8* @halide_string_to_string(i8* %call.i462, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #13
  %value_index73 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 7
  %85 = load i32, i32* %value_index73, align 4, !tbaa !161
  %conv.i468 = sext i32 %85 to i64
  %call.i469 = tail call i8* @halide_int64_to_string(i8* %call.i465, i8* %ss.sroa.74.0, i64 %conv.i468, i32 1) #13
  %call.i472 = tail call i8* @halide_string_to_string(i8* %call.i469, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #13
  %lanes77 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %86 = load i16, i16* %lanes77, align 2, !tbaa !134
  %cmp79 = icmp ugt i16 %86, 1
  br i1 %cmp79, label %if.then80, label %if.end82

if.then80:                                        ; preds = %do.end
  %call.i475 = tail call i8* @halide_string_to_string(i8* %call.i472, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)) #13
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %do.end
  %ss.sroa.7.0 = phi i8* [ %call.i475, %if.then80 ], [ %call.i472, %do.end ]
  %dimensions83 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %87 = load i32, i32* %dimensions83, align 8, !tbaa !141
  %cmp84660 = icmp sgt i32 %87, 0
  br i1 %cmp84660, label %if.end100.peel, label %for.cond.cleanup

if.end100.peel:                                   ; preds = %if.end82
  %coordinates101 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %.pre = load i32*, i32** %coordinates101, align 8, !tbaa !153
  %.pre673 = load i32, i32* %.pre, align 4, !tbaa !37
  %conv.i484.peel = sext i32 %.pre673 to i64
  %call.i485.peel = tail call i8* @halide_int64_to_string(i8* %ss.sroa.7.0, i8* %ss.sroa.74.0, i64 %conv.i484.peel, i32 1) #13
  %88 = load i32, i32* %dimensions83, align 8, !tbaa !141
  %cmp84.peel = icmp sgt i32 %88, 1
  br i1 %cmp84.peel, label %if.then86, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %if.end100, %if.end100.peel, %if.end82
  %ss.sroa.7.1.lcssa = phi i8* [ %ss.sroa.7.0, %if.end82 ], [ %call.i485.peel, %if.end100.peel ], [ %call.i485, %if.end100 ]
  %89 = load i16, i16* %lanes77, align 2, !tbaa !134
  %cmp108 = icmp ugt i16 %89, 1
  %.sink684 = select i1 %cmp108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)
  %call.i491 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1.lcssa, i8* %ss.sroa.74.0, i8* %.sink684) #13
  br i1 %cmp66, label %if.then115, label %if.end263

if.then86:                                        ; preds = %if.end100.peel, %if.end100
  %indvars.iv670 = phi i64 [ %indvars.iv.next671, %if.end100 ], [ 1, %if.end100.peel ]
  %ss.sroa.7.1661 = phi i8* [ %call.i485, %if.end100 ], [ %call.i485.peel, %if.end100.peel ]
  %90 = load i16, i16* %lanes77, align 2, !tbaa !134
  %cmp90 = icmp ugt i16 %90, 1
  br i1 %cmp90, label %land.lhs.true, label %if.else97.split

land.lhs.true:                                    ; preds = %if.then86
  %conv89 = zext i16 %90 to i32
  %91 = trunc i64 %indvars.iv670 to i32
  %rem = urem i32 %91, %conv89
  %cmp94 = icmp eq i32 %rem, 0
  br i1 %cmp94, label %if.end100, label %if.else97.split

if.else97.split:                                  ; preds = %if.then86, %land.lhs.true
  br label %if.end100

if.end100:                                        ; preds = %land.lhs.true, %if.else97.split
  %.sink = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0), %if.else97.split ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), %land.lhs.true ]
  %call.i4786 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1661, i8* %ss.sroa.74.0, i8* %.sink) #13
  %92 = load i32*, i32** %coordinates101, align 8, !tbaa !153
  %arrayidx103 = getelementptr inbounds i32, i32* %92, i64 %indvars.iv670
  %93 = load i32, i32* %arrayidx103, align 4, !tbaa !37
  %conv.i484 = sext i32 %93 to i64
  %call.i485 = tail call i8* @halide_int64_to_string(i8* %call.i4786, i8* %ss.sroa.74.0, i64 %conv.i484, i32 1) #13
  %indvars.iv.next671 = add nuw nsw i64 %indvars.iv670, 1
  %94 = load i32, i32* %dimensions83, align 8, !tbaa !141
  %95 = sext i32 %94 to i64
  %cmp84 = icmp slt i64 %indvars.iv.next671, %95
  br i1 %cmp84, label %if.then86, label %for.cond.cleanup, !llvm.loop !162

if.then115:                                       ; preds = %for.cond.cleanup
  %96 = load i16, i16* %lanes77, align 2, !tbaa !134
  %cmp119 = icmp ugt i16 %96, 1
  %.sink685 = select i1 %cmp119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0)
  %call.i497 = tail call i8* @halide_string_to_string(i8* %call.i491, i8* %ss.sroa.74.0, i8* %.sink685) #13
  %97 = load i16, i16* %lanes77, align 2, !tbaa !134
  %cmp130655.not = icmp eq i16 %97, 0
  br i1 %cmp130655.not, label %if.end263, label %if.end136.peel

if.end136.peel:                                   ; preds = %if.then115
  %code = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 0
  %value245 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %98 = bitcast i8** %value245 to i8***
  %cmp214 = icmp sgt i32 %print_bits.0, 15
  %99 = bitcast i8** %value245 to i16**
  %100 = bitcast i8** %value245 to float**
  %101 = bitcast i8** %value245 to double**
  %102 = bitcast i8** %value245 to i32**
  %103 = bitcast i8** %value245 to i64**
  %.pre674 = load i8, i8* %code, align 8, !tbaa !164
  switch i8 %.pre674, label %for.inc253.peel [
    i8 0, label %if.then140.peel
    i8 1, label %if.then176.peel
    i8 2, label %do.body213.peel
    i8 3, label %if.then244.peel
  ]

if.then244.peel:                                  ; preds = %if.end136.peel
  %104 = load i8**, i8*** %98, align 8, !tbaa !154
  %105 = load i8*, i8** %104, align 8, !tbaa !10
  %call.i543.peel = tail call i8* @halide_pointer_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i8* %105) #13
  br label %for.inc253.peel

do.body213.peel:                                  ; preds = %if.end136.peel
  br i1 %cmp214, label %do.end218.peel, label %if.then215.peel

if.then215.peel:                                  ; preds = %do.body213.peel
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end218.peel

do.end218.peel:                                   ; preds = %if.then215.peel, %do.body213.peel
  switch i32 %print_bits.0, label %if.else232.peel [
    i32 32, label %if.then220.peel
    i32 16, label %if.then227.peel
  ]

if.then227.peel:                                  ; preds = %do.end218.peel
  %106 = load i16*, i16** %99, align 8, !tbaa !154
  %107 = load i16, i16* %106, align 2, !tbaa !165
  %call.i535.peel = tail call double @halide_float16_bits_to_double(i16 zeroext %107) #13
  %call2.i.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %call.i535.peel, i32 1) #13
  br label %for.inc253.peel

if.then220.peel:                                  ; preds = %do.end218.peel
  %108 = load float*, float** %100, align 8, !tbaa !154
  %109 = load float, float* %108, align 4, !tbaa !166
  %conv.i533.peel = fpext float %109 to double
  %call.i534.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %conv.i533.peel, i32 0) #13
  br label %for.inc253.peel

if.else232.peel:                                  ; preds = %do.end218.peel
  %110 = load double*, double** %101, align 8, !tbaa !154
  %111 = load double, double* %110, align 8, !tbaa !168
  %call.i540.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %111, i32 1) #13
  br label %for.inc253.peel

if.then176.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else199.peel [
    i32 8, label %if.then178.peel
    i32 16, label %if.then186.peel
    i32 32, label %if.then194.peel
  ]

if.then194.peel:                                  ; preds = %if.then176.peel
  %112 = load i32*, i32** %102, align 8, !tbaa !154
  %113 = load i32, i32* %112, align 4, !tbaa !37
  %conv.i526.peel = zext i32 %113 to i64
  %call.i527.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i526.peel, i32 1) #13
  br label %for.inc253.peel

if.then186.peel:                                  ; preds = %if.then176.peel
  %114 = load i16*, i16** %99, align 8, !tbaa !154
  %115 = load i16, i16* %114, align 2, !tbaa !165
  %conv.i522.peel = zext i16 %115 to i64
  %call.i523.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i522.peel, i32 1) #13
  br label %for.inc253.peel

if.then178.peel:                                  ; preds = %if.then176.peel
  %116 = load i8*, i8** %value245, align 8, !tbaa !154
  %117 = load i8, i8* %116, align 1, !tbaa !14
  %conv.i518.peel = zext i8 %117 to i64
  %call.i519.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i518.peel, i32 1) #13
  br label %for.inc253.peel

if.else199.peel:                                  ; preds = %if.then176.peel
  %118 = load i64*, i64** %103, align 8, !tbaa !154
  %119 = load i64, i64* %118, align 8, !tbaa !18
  %call.i530.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %119, i32 1) #13
  br label %for.inc253.peel

if.then140.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else163.peel [
    i32 8, label %if.then142.peel
    i32 16, label %if.then150.peel
    i32 32, label %if.then158.peel
  ]

if.then158.peel:                                  ; preds = %if.then140.peel
  %120 = load i32*, i32** %102, align 8, !tbaa !154
  %121 = load i32, i32* %120, align 4, !tbaa !37
  %conv.i511.peel = sext i32 %121 to i64
  %call.i512.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i511.peel, i32 1) #13
  br label %for.inc253.peel

if.then150.peel:                                  ; preds = %if.then140.peel
  %122 = load i16*, i16** %99, align 8, !tbaa !154
  %123 = load i16, i16* %122, align 2, !tbaa !165
  %conv.i507.peel = sext i16 %123 to i64
  %call.i508.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i507.peel, i32 1) #13
  br label %for.inc253.peel

if.then142.peel:                                  ; preds = %if.then140.peel
  %124 = load i8*, i8** %value245, align 8, !tbaa !154
  %125 = load i8, i8* %124, align 1, !tbaa !14
  %conv.i503.peel = sext i8 %125 to i64
  %call.i504.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i503.peel, i32 1) #13
  br label %for.inc253.peel

if.else163.peel:                                  ; preds = %if.then140.peel
  %126 = load i64*, i64** %103, align 8, !tbaa !154
  %127 = load i64, i64* %126, align 8, !tbaa !18
  %call.i515.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %127, i32 1) #13
  br label %for.inc253.peel

for.inc253.peel:                                  ; preds = %if.else163.peel, %if.then142.peel, %if.then150.peel, %if.then158.peel, %if.else199.peel, %if.then178.peel, %if.then186.peel, %if.then194.peel, %if.else232.peel, %if.then220.peel, %if.then227.peel, %if.then244.peel, %if.end136.peel
  %ss.sroa.7.7.peel = phi i8* [ %call.i497, %if.end136.peel ], [ %call.i543.peel, %if.then244.peel ], [ %call.i540.peel, %if.else232.peel ], [ %call2.i.peel, %if.then227.peel ], [ %call.i534.peel, %if.then220.peel ], [ %call.i530.peel, %if.else199.peel ], [ %call.i527.peel, %if.then194.peel ], [ %call.i523.peel, %if.then186.peel ], [ %call.i519.peel, %if.then178.peel ], [ %call.i515.peel, %if.else163.peel ], [ %call.i512.peel, %if.then158.peel ], [ %call.i508.peel, %if.then150.peel ], [ %call.i504.peel, %if.then142.peel ]
  %128 = load i16, i16* %lanes77, align 2, !tbaa !134
  %cmp130.peel = icmp ugt i16 %128, 1
  br i1 %cmp130.peel, label %if.end136, label %if.end263

for.cond.cleanup131:                              ; preds = %for.inc253
  %cmp259 = icmp ugt i16 %154, 1
  br i1 %cmp259, label %if.then260, label %if.end263

if.end136:                                        ; preds = %for.inc253.peel, %for.inc253
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc253 ], [ 1, %for.inc253.peel ]
  %ss.sroa.7.5656 = phi i8* [ %ss.sroa.7.7, %for.inc253 ], [ %ss.sroa.7.7.peel, %for.inc253.peel ]
  %call.i500 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.5656, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #13
  %129 = load i8, i8* %code, align 8, !tbaa !164
  switch i8 %129, label %for.inc253 [
    i8 0, label %if.then140
    i8 1, label %if.then176
    i8 2, label %do.body213
    i8 3, label %if.then244
  ]

if.then140:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else163 [
    i32 8, label %if.then142
    i32 16, label %if.then150
    i32 32, label %if.then158
  ]

if.then142:                                       ; preds = %if.then140
  %130 = load i8*, i8** %value245, align 8, !tbaa !154
  %arrayidx145 = getelementptr inbounds i8, i8* %130, i64 %indvars.iv
  %131 = load i8, i8* %arrayidx145, align 1, !tbaa !14
  %conv.i503 = sext i8 %131 to i64
  %call.i504 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i503, i32 1) #13
  br label %for.inc253

if.then150:                                       ; preds = %if.then140
  %132 = load i16*, i16** %99, align 8, !tbaa !154
  %arrayidx153 = getelementptr inbounds i16, i16* %132, i64 %indvars.iv
  %133 = load i16, i16* %arrayidx153, align 2, !tbaa !165
  %conv.i507 = sext i16 %133 to i64
  %call.i508 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i507, i32 1) #13
  br label %for.inc253

if.then158:                                       ; preds = %if.then140
  %134 = load i32*, i32** %102, align 8, !tbaa !154
  %arrayidx161 = getelementptr inbounds i32, i32* %134, i64 %indvars.iv
  %135 = load i32, i32* %arrayidx161, align 4, !tbaa !37
  %conv.i511 = sext i32 %135 to i64
  %call.i512 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i511, i32 1) #13
  br label %for.inc253

if.else163:                                       ; preds = %if.then140
  %136 = load i64*, i64** %103, align 8, !tbaa !154
  %arrayidx166 = getelementptr inbounds i64, i64* %136, i64 %indvars.iv
  %137 = load i64, i64* %arrayidx166, align 8, !tbaa !18
  %call.i515 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %137, i32 1) #13
  br label %for.inc253

if.then176:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else199 [
    i32 8, label %if.then178
    i32 16, label %if.then186
    i32 32, label %if.then194
  ]

if.then178:                                       ; preds = %if.then176
  %138 = load i8*, i8** %value245, align 8, !tbaa !154
  %arrayidx181 = getelementptr inbounds i8, i8* %138, i64 %indvars.iv
  %139 = load i8, i8* %arrayidx181, align 1, !tbaa !14
  %conv.i518 = zext i8 %139 to i64
  %call.i519 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i518, i32 1) #13
  br label %for.inc253

if.then186:                                       ; preds = %if.then176
  %140 = load i16*, i16** %99, align 8, !tbaa !154
  %arrayidx189 = getelementptr inbounds i16, i16* %140, i64 %indvars.iv
  %141 = load i16, i16* %arrayidx189, align 2, !tbaa !165
  %conv.i522 = zext i16 %141 to i64
  %call.i523 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i522, i32 1) #13
  br label %for.inc253

if.then194:                                       ; preds = %if.then176
  %142 = load i32*, i32** %102, align 8, !tbaa !154
  %arrayidx197 = getelementptr inbounds i32, i32* %142, i64 %indvars.iv
  %143 = load i32, i32* %arrayidx197, align 4, !tbaa !37
  %conv.i526 = zext i32 %143 to i64
  %call.i527 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i526, i32 1) #13
  br label %for.inc253

if.else199:                                       ; preds = %if.then176
  %144 = load i64*, i64** %103, align 8, !tbaa !154
  %arrayidx202 = getelementptr inbounds i64, i64* %144, i64 %indvars.iv
  %145 = load i64, i64* %arrayidx202, align 8, !tbaa !18
  %call.i530 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %145, i32 1) #13
  br label %for.inc253

do.body213:                                       ; preds = %if.end136
  br i1 %cmp214, label %do.end218, label %if.then215

if.then215:                                       ; preds = %do.body213
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end218

do.end218:                                        ; preds = %if.then215, %do.body213
  switch i32 %print_bits.0, label %if.else232 [
    i32 32, label %if.then220
    i32 16, label %if.then227
  ]

if.then220:                                       ; preds = %do.end218
  %146 = load float*, float** %100, align 8, !tbaa !154
  %arrayidx223 = getelementptr inbounds float, float* %146, i64 %indvars.iv
  %147 = load float, float* %arrayidx223, align 4, !tbaa !166
  %conv.i533 = fpext float %147 to double
  %call.i534 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %conv.i533, i32 0) #13
  br label %for.inc253

if.then227:                                       ; preds = %do.end218
  %148 = load i16*, i16** %99, align 8, !tbaa !154
  %arrayidx230 = getelementptr inbounds i16, i16* %148, i64 %indvars.iv
  %149 = load i16, i16* %arrayidx230, align 2, !tbaa !165
  %call.i535 = tail call double @halide_float16_bits_to_double(i16 zeroext %149) #13
  %call2.i = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %call.i535, i32 1) #13
  br label %for.inc253

if.else232:                                       ; preds = %do.end218
  %150 = load double*, double** %101, align 8, !tbaa !154
  %arrayidx235 = getelementptr inbounds double, double* %150, i64 %indvars.iv
  %151 = load double, double* %arrayidx235, align 8, !tbaa !168
  %call.i540 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %151, i32 1) #13
  br label %for.inc253

if.then244:                                       ; preds = %if.end136
  %152 = load i8**, i8*** %98, align 8, !tbaa !154
  %arrayidx247 = getelementptr inbounds i8*, i8** %152, i64 %indvars.iv
  %153 = load i8*, i8** %arrayidx247, align 8, !tbaa !10
  %call.i543 = tail call i8* @halide_pointer_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i8* %153) #13
  br label %for.inc253

for.inc253:                                       ; preds = %if.then244, %if.else232, %if.then227, %if.then220, %if.else199, %if.then194, %if.then186, %if.then178, %if.else163, %if.then158, %if.then150, %if.then142, %if.end136
  %ss.sroa.7.7 = phi i8* [ %call.i500, %if.end136 ], [ %call.i543, %if.then244 ], [ %call.i540, %if.else232 ], [ %call2.i, %if.then227 ], [ %call.i534, %if.then220 ], [ %call.i530, %if.else199 ], [ %call.i527, %if.then194 ], [ %call.i523, %if.then186 ], [ %call.i519, %if.then178 ], [ %call.i515, %if.else163 ], [ %call.i512, %if.then158 ], [ %call.i508, %if.then150 ], [ %call.i504, %if.then142 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %154 = load i16, i16* %lanes77, align 2, !tbaa !134
  %155 = zext i16 %154 to i64
  %cmp130 = icmp ult i64 %indvars.iv.next, %155
  br i1 %cmp130, label %if.end136, label %for.cond.cleanup131, !llvm.loop !170

if.then260:                                       ; preds = %for.cond.cleanup131
  %call.i546 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.7, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0)) #13
  br label %if.end263

if.end263:                                        ; preds = %if.then260, %for.cond.cleanup131, %for.inc253.peel, %if.then115, %for.cond.cleanup
  %ss.sroa.7.8 = phi i8* [ %call.i546, %if.then260 ], [ %ss.sroa.7.7, %for.cond.cleanup131 ], [ %call.i491, %for.cond.cleanup ], [ %ss.sroa.7.7.peel, %for.inc253.peel ], [ %call.i497, %if.then115 ]
  %trace_tag264 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %156 = load i8*, i8** %trace_tag264, align 8, !tbaa !143
  %tobool265.not = icmp eq i8* %156, null
  br i1 %tobool265.not, label %if.end274, label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end263
  %157 = load i8, i8* %156, align 1, !tbaa !14
  %tobool268.not = icmp eq i8 %157, 0
  br i1 %tobool268.not, label %if.end274, label %if.then269

if.then269:                                       ; preds = %land.lhs.true266
  %call.i549 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.8, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0)) #13
  %158 = load i8*, i8** %trace_tag264, align 8, !tbaa !143
  %call.i552 = tail call i8* @halide_string_to_string(i8* %call.i549, i8* %ss.sroa.74.0, i8* %158) #13
  %call.i555 = tail call i8* @halide_string_to_string(i8* %call.i552, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0)) #13
  br label %if.end274

if.end274:                                        ; preds = %if.then269, %land.lhs.true266, %if.end263
  %ss.sroa.7.9 = phi i8* [ %ss.sroa.7.8, %if.end263 ], [ %ss.sroa.7.8, %land.lhs.true266 ], [ %call.i555, %if.then269 ]
  %call.i558 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.9, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #13
  br label %while.cond.i560

while.cond.i560:                                  ; preds = %while.cond.i560, %if.end274
  %159 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i559 = icmp eq i8 %159, 0
  br i1 %tobool.not.i559, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i560, !llvm.loop !171

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i560
  br i1 %tobool.not.i448, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %sub.ptr.lhs.cast.i.i563 = ptrtoint i8* %call.i558 to i64
  %sub.ptr.rhs.cast.i.i564 = ptrtoint i8* %call.i445 to i64
  %sub.ptr.sub.i.i565 = sub i64 1, %sub.ptr.rhs.cast.i.i564
  %add.i.i566 = add i64 %sub.ptr.sub.i.i565, %sub.ptr.lhs.cast.i.i563
  %call.i.i567 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #13
  tail call void @halide_print(i8* %user_context, i8* nonnull %call.i445) #13
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i445) #13
  br label %if.end277

if.end277:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit, %do.end.critedge.i, %if.then10.i, %if.then.i442, %_ZN21halide_trace_packet_t9trace_tagEv.exit
  ret i32 %0
}

; Function Attrs: nounwind
define weak i32 @halide_get_trace_file(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !171

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !37
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i64 0, i64 0)) #13
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.then
  %call2 = tail call i8* @fopen(i8* nonnull %call, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i64 0, i64 0)) #13
  %tobool3.not = icmp eq i8* %call2, null
  br i1 %tobool3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.then1
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.30, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.then1
  %call5 = tail call i32 @fileno(i8* %call2) #13
  tail call void @halide_set_trace_file(i32 %call5) #14
  store i8* %call2, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %2 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool6.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %2, null
  br i1 %tobool6.not, label %if.then7, label %if.end11

if.then7:                                         ; preds = %do.end
  %call8 = tail call i8* @malloc(i64 1048588) #13
  store i8* %call8, i8** bitcast (%"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE to i8**), align 8, !tbaa !10
  %cursor.i = getelementptr inbounds i8, i8* %call8, i64 4
  %3 = bitcast i8* %cursor.i to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %3, align 4, !tbaa !37
  %lock.i.i = bitcast i8* %call8 to i32*
  store volatile i32 0, i32* %lock.i.i, align 4, !tbaa !144
  br label %if.end11

if.else:                                          ; preds = %if.then
  tail call void @halide_set_trace_file(i32 0) #14
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then7, %do.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %4 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !37
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  ret i32 %4
}

declare i8* @memcpy(i8*, i8*, i64) local_unnamed_addr #1

declare i8* @fopen(i8*, i8*) local_unnamed_addr #1

declare i32 @fileno(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_trace_file(i32 %fd) local_unnamed_addr #2 {
entry:
  store i32 %fd, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !37
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_trace_cleanup() #0 {
entry:
  %call = tail call i32 @halide_shutdown_trace() #14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_shutdown_trace() local_unnamed_addr #0 {
entry:
  %0 = load i8*, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %tobool.not = icmp eq i8* %0, null
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @fclose(i8* nonnull %0) #13
  store i32 0, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !37
  store i8 0, i8* @_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE, align 1, !tbaa !15
  store i8* null, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %1 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool1.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %1, null
  br i1 %tobool1.not, label %return, label %if.then2

if.then2:                                         ; preds = %if.then
  %2 = bitcast %"class.Halide::Runtime::Internal::TraceBuffer"* %1 to i8*
  tail call void @free(i8* nonnull %2) #13
  br label %return

return:                                           ; preds = %if.then2, %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then2 ], [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @fclose(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, %struct.halide_trace_event_t*)* @halide_set_custom_trace(i32 (i8*, %struct.halide_trace_event_t*)* %t) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  store i32 (i8*, %struct.halide_trace_event_t*)* %t, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  ret i32 (i8*, %struct.halide_trace_event_t*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* %e) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, %struct.halide_trace_event_t* %e) #13
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_trace_helper(i8* %user_context, i8* %func, i8* %value, i32* %coords, i32 %type_code, i32 %type_bits, i32 %type_lanes, i32 %code, i32 %parent_id, i32 %value_index, i32 %dimensions, i8* %trace_tag) local_unnamed_addr #4 {
entry:
  %event = alloca %struct.halide_trace_event_t, align 8
  %0 = bitcast %struct.halide_trace_event_t* %event to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %0) #11
  %code.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 0
  %bits.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 1
  %lanes.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 2
  %func1 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 0
  store i8* %func, i8** %func1, align 8, !tbaa !142
  %value2 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 1
  store i8* %value, i8** %value2, align 8, !tbaa !154
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 2
  store i32* %coords, i32** %coordinates, align 8, !tbaa !153
  %trace_tag3 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 3
  store i8* %trace_tag, i8** %trace_tag3, align 8, !tbaa !143
  %conv = trunc i32 %type_code to i8
  store i8 %conv, i8* %code.i.i, align 8, !tbaa !164
  %conv5 = trunc i32 %type_bits to i8
  store i8 %conv5, i8* %bits.i.i, align 1, !tbaa !159
  %conv7 = trunc i32 %type_lanes to i16
  store i16 %conv7, i16* %lanes.i.i, align 2, !tbaa !134
  %event9 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 5
  store i32 %code, i32* %event9, align 4, !tbaa !158
  %parent_id10 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 6
  store i32 %parent_id, i32* %parent_id10, align 8, !tbaa !172
  %value_index11 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 7
  store i32 %value_index, i32* %value_index11, align 4, !tbaa !161
  %dimensions12 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 8
  store i32 %dimensions, i32* %dimensions12, align 8, !tbaa !141
  %call = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 56) #13
  %add = add nsw i32 %type_bits, 7
  %div = sdiv i32 %add, 8
  %mul = mul nsw i32 %div, %type_lanes
  %conv13 = sext i32 %mul to i64
  %call14 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %value, i64 %conv13) #13
  %1 = bitcast i32* %coords to i8*
  %conv15 = sext i32 %dimensions to i64
  %mul16 = shl nsw i64 %conv15, 2
  %call17 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %1, i64 %mul16) #13
  %call18 = call i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* nonnull %event) #13
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %0) #11
  ret i32 %call18
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* %suffix) local_unnamed_addr #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %f.0 = phi i8* [ %filename, %entry ], [ %incdec.ptr, %while.cond ]
  %0 = load i8, i8* %f.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %0, 0
  %incdec.ptr = getelementptr inbounds i8, i8* %f.0, i64 1
  br i1 %tobool.not, label %while.cond1, label %while.cond, !llvm.loop !173

while.cond1:                                      ; preds = %while.cond, %while.cond1
  %s.0 = phi i8* [ %incdec.ptr4, %while.cond1 ], [ %suffix, %while.cond ]
  %1 = load i8, i8* %s.0, align 1, !tbaa !14
  %tobool2.not = icmp eq i8 %1, 0
  %incdec.ptr4 = getelementptr inbounds i8, i8* %s.0, i64 1
  br i1 %tobool2.not, label %while.cond6.preheader, label %while.cond1, !llvm.loop !174

while.cond6.preheader:                            ; preds = %while.cond1
  %cmp34 = icmp ne i8* %s.0, %suffix
  %cmp735 = icmp ne i8* %f.0, %filename
  %2 = and i1 %cmp735, %cmp34
  br i1 %2, label %if.end, label %while.cond6.preheader.while.end13_crit_edge

while.cond6.preheader.while.end13_crit_edge:      ; preds = %while.cond6.preheader
  %cmp16.0 = icmp eq i8 0, 0
  br label %while.end13

if.end:                                           ; preds = %while.cond6.preheader, %if.end.while.body8_crit_edge
  %f.13649 = phi i8* [ %incdec.ptr11, %if.end.while.body8_crit_edge ], [ %f.0, %while.cond6.preheader ]
  %s.13748 = phi i8* [ %incdec.ptr12, %if.end.while.body8_crit_edge ], [ %s.0, %while.cond6.preheader ]
  %incdec.ptr11 = getelementptr inbounds i8, i8* %f.13649, i64 -1
  %incdec.ptr12 = getelementptr inbounds i8, i8* %s.13748, i64 -1
  %cmp = icmp ne i8* %incdec.ptr12, %suffix
  %cmp7 = icmp ne i8* %incdec.ptr11, %filename
  %3 = and i1 %cmp7, %cmp
  %.pre = load i8, i8* %incdec.ptr11, align 1, !tbaa !14
  %.pre45 = load i8, i8* %incdec.ptr12, align 1, !tbaa !14
  br i1 %3, label %if.end.while.body8_crit_edge, label %if.end.while.end13_crit_edge, !llvm.loop !175

if.end.while.end13_crit_edge:                     ; preds = %if.end
  %cmp16.1 = icmp eq i8 %.pre, %.pre45
  br label %while.end13

if.end.while.body8_crit_edge:                     ; preds = %if.end
  %cmp10.not = icmp eq i8 %.pre, %.pre45
  br i1 %cmp10.not, label %if.end, label %cleanup

while.end13:                                      ; preds = %if.end.while.end13_crit_edge, %while.cond6.preheader.while.end13_crit_edge
  %cmp16.phi = phi i1 [ %cmp16.0, %while.cond6.preheader.while.end13_crit_edge ], [ %cmp16.1, %if.end.while.end13_crit_edge ]
  br label %cleanup

cleanup:                                          ; preds = %if.end.while.body8_crit_edge, %while.end13
  %retval.0 = phi i1 [ %cmp16.phi, %while.end13 ], [ false, %if.end.while.body8_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_debug_to_file(i8* %user_context, i8* %filename, i32 %type_code, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %shape = alloca [4 x %struct.halide_dimension_t], align 16
  %header = alloca %"struct.Halide::Runtime::Internal::halide_tiff_header", align 2
  %offset = alloca i32, align 4
  %count = alloca i32, align 4
  %array_name = alloca [256 x i8], align 1
  %array_name43 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  %header198 = alloca [129 x i8], align 1
  %tags = alloca [8 x i32], align 4
  %extents = alloca [4 x i32], align 4
  %name_header = alloca [2 x i32], align 4
  %payload_header = alloca [2 x i32], align 4
  %header289 = alloca [5 x i32], align 4
  %temp = alloca [4096 x i8], align 1
  %idx = alloca [4 x i32], align 4
  %zero = alloca i64, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !176
  %cmp.i = icmp eq i8* %0, null
  br i1 %cmp.i, label %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, label %if.end

_ZNK15halide_buffer_t15is_bounds_queryEv.exit:    ; preds = %entry
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp2.i = icmp eq i64 %1, 0
  br i1 %cmp2.i, label %if.then, label %if.end

if.then:                                          ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.34, i64 0, i64 0)) #13
  br label %return

if.end:                                           ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, %entry
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !179
  %cmp = icmp sgt i32 %2, 4
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1.35, i64 0, i64 0)) #13
  br label %return

if.end2:                                          ; preds = %if.end
  %call3 = tail call i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  %cmp4.not = icmp eq i32 %call3, 0
  br i1 %cmp4.not, label %if.end6, label %return

if.end6:                                          ; preds = %if.end2
  %call.i598 = tail call i8* @fopen(i8* %filename, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.36, i64 0, i64 0)) #13
  %cmp.i601.not = icmp eq i8* %call.i598, null
  br i1 %cmp.i601.not, label %return, label %if.end9

if.end9:                                          ; preds = %if.end6
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #11
  %min.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 0
  %extent.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %4 = bitcast [4 x %struct.halide_dimension_t]* %shape to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %4, align 16, !tbaa !37
  %min.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 0
  %extent.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %5 = bitcast i32* %min.i.1 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %5, align 16, !tbaa !37
  %min.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 0
  %extent.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %6 = bitcast i32* %min.i.2 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %6, align 16, !tbaa !37
  %min.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 0
  %extent.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %7 = bitcast i32* %min.i.3 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %7, align 16, !tbaa !37
  %8 = load i32, i32* %dimensions, align 4, !tbaa !179
  %cmp11875 = icmp sgt i32 %8, 0
  br i1 %cmp11875, label %for.body.lr.ph, label %for.body22.preheader

for.body.lr.ph:                                   ; preds = %if.end9
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !180
  %10 = zext i32 %8 to i64
  %11 = add nsw i64 %10, -1
  %12 = icmp ult i64 %11, 3
  %13 = select i1 %12, i64 %10, i64 4
  br label %for.body

for.cond19.preheader:                             ; preds = %for.body
  %cmp20873 = icmp slt i32 %8, 4
  br i1 %cmp20873, label %for.body22.preheader, label %for.cond.cleanup21

for.body22.preheader:                             ; preds = %for.cond19.preheader, %if.end9
  %elts.0.lcssa907 = phi i64 [ %mul, %for.cond19.preheader ], [ 1, %if.end9 ]
  %14 = sext i32 %8 to i64
  %15 = sub i32 3, %8
  %16 = zext i32 %15 to i64
  %17 = add nuw nsw i64 %16, 1
  %min.iters.check = icmp eq i32 %15, 0
  br i1 %min.iters.check, label %for.body22.preheader162, label %vector.ph

vector.ph:                                        ; preds = %for.body22.preheader
  %n.vec = and i64 %17, 8589934590
  %ind.end = add nsw i64 %n.vec, %14
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %offset.idx = add i64 %index, %14
  %induction36 = add i64 %offset.idx, 1
  %18 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %offset.idx, i32 0
  %19 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %induction36, i32 0
  %20 = bitcast i32* %18 to <2 x i32>*
  store <2 x i32> <i32 0, i32 1>, <2 x i32>* %20, align 16, !tbaa !37
  %21 = bitcast i32* %19 to <2 x i32>*
  store <2 x i32> <i32 0, i32 1>, <2 x i32>* %21, align 16, !tbaa !37
  %22 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %offset.idx, i32 2
  %23 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %induction36, i32 2
  store i32 0, i32* %22, align 8, !tbaa !181
  store i32 0, i32* %23, align 8, !tbaa !181
  %index.next = add i64 %index, 2
  %24 = icmp eq i64 %index.next, %n.vec
  br i1 %24, label %middle.block, label %vector.body, !llvm.loop !183

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %17, %n.vec
  br i1 %cmp.n, label %for.cond.cleanup21, label %for.body22.preheader162

for.body22.preheader162:                          ; preds = %for.body22.preheader, %middle.block
  %indvars.iv.ph = phi i64 [ %14, %for.body22.preheader ], [ %ind.end, %middle.block ]
  br label %for.body22

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv887 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next888, %for.body ]
  %elts.0877 = phi i64 [ 1, %for.body.lr.ph ], [ %mul, %for.body ]
  %arrayidx = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i64 %indvars.iv887
  %arrayidx14 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv887
  %25 = bitcast %struct.halide_dimension_t* %arrayidx14 to i8*
  %26 = bitcast %struct.halide_dimension_t* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 dereferenceable(16) %25, i8* nonnull align 4 dereferenceable(16) %26, i64 16, i1 false), !tbaa.struct !184
  %extent = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv887, i32 1
  %27 = load i32, i32* %extent, align 4, !tbaa !185
  %conv903 = zext i32 %27 to i64
  %mul = mul i64 %elts.0877, %conv903
  %indvars.iv.next888 = add nuw nsw i64 %indvars.iv887, 1
  %exitcond.not17 = icmp eq i64 %indvars.iv.next888, %13
  br i1 %exitcond.not17, label %for.cond19.preheader, label %for.body, !llvm.loop !186

for.cond.cleanup21:                               ; preds = %for.body22, %middle.block, %for.cond19.preheader
  %elts.0.lcssa906 = phi i64 [ %mul, %for.cond19.preheader ], [ %elts.0.lcssa907, %middle.block ], [ %elts.0.lcssa907, %for.body22 ]
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %28 = load i8, i8* %bits.i, align 1, !tbaa !140
  %conv.i = zext i8 %28 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %call34 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.37, i64 0, i64 0)) #14
  br i1 %call34, label %if.then36, label %lor.lhs.false

for.body22:                                       ; preds = %for.body22.preheader162, %for.body22
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body22 ], [ %indvars.iv.ph, %for.body22.preheader162 ]
  %min = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 0
  %29 = bitcast i32* %min to <2 x i32>*
  store <2 x i32> <i32 0, i32 1>, <2 x i32>* %29, align 16, !tbaa !37
  %stride = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 2
  store i32 0, i32* %stride, align 8, !tbaa !181
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond886.not = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond886.not, label %for.cond.cleanup21, label %for.body22, !llvm.loop !187

lor.lhs.false:                                    ; preds = %for.cond.cleanup21
  %call35 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.38, i64 0, i64 0)) #14
  br i1 %call35, label %if.then36, label %if.else164

if.then36:                                        ; preds = %lor.lhs.false, %for.cond.cleanup21
  %30 = load i32, i32* %extent.i, align 4, !tbaa !185
  %31 = load i32, i32* %extent.i.1, align 4, !tbaa !185
  %32 = load i32, i32* %extent.i.3, align 4, !tbaa !185
  %switch = icmp ult i32 %32, 2
  %33 = load i32, i32* %extent.i.2, align 4, !tbaa !185
  %cmp50 = icmp slt i32 %33, 5
  %or.cond = and i1 %switch, %cmp50
  %depth.0 = select i1 %or.cond, i32 1, i32 %33
  %channels.0 = select i1 %or.cond, i32 %33, i32 %32
  %34 = bitcast %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 210, i8* nonnull %34) #11
  %byte_order_marker = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 0
  store i16 18761, i16* %byte_order_marker, align 2, !tbaa !188
  %version = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 1
  store i16 42, i16* %version, align 2, !tbaa !190
  %ifd0_offset = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 2
  store i32 8, i32* %ifd0_offset, align 2, !tbaa !191
  %entry_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 3
  store i16 15, i16* %entry_count, align 2, !tbaa !192
  %tag_code2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 0
  store i16 256, i16* %tag_code2.i, align 2, !tbaa !193
  %type_code.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 1
  store i16 4, i16* %type_code.i, align 2, !tbaa !195
  %count3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 2
  store i32 1, i32* %count3.i, align 2, !tbaa !196
  %i32.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 3, i32 0
  store i32 %30, i32* %i32.i, align 2, !tbaa !14
  %tag_code2.i632 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 0
  store i16 257, i16* %tag_code2.i632, align 2, !tbaa !193
  %type_code.i633 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 1
  store i16 4, i16* %type_code.i633, align 2, !tbaa !195
  %count3.i634 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 2
  store i32 1, i32* %count3.i634, align 2, !tbaa !196
  %i32.i635 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 3, i32 0
  store i32 %31, i32* %i32.i635, align 2, !tbaa !14
  %35 = trunc i32 %add.i to i16
  %conv68 = and i16 %35, 504
  %tag_code2.i643 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 0
  store i16 258, i16* %tag_code2.i643, align 2, !tbaa !193
  %type_code.i644 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 1
  store i16 3, i16* %type_code.i644, align 2, !tbaa !195
  %count3.i645 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 2
  store i32 1, i32* %count3.i645, align 2, !tbaa !196
  %value4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 3
  %i16.i = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i to i16*
  store i16 %conv68, i16* %i16.i, align 2, !tbaa !14
  %tag_code2.i653 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 0
  store i16 259, i16* %tag_code2.i653, align 2, !tbaa !193
  %type_code.i654 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 1
  store i16 3, i16* %type_code.i654, align 2, !tbaa !195
  %count3.i655 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 2
  store i32 1, i32* %count3.i655, align 2, !tbaa !196
  %value4.i656 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 3
  %i16.i657 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i656 to i16*
  store i16 1, i16* %i16.i657, align 2, !tbaa !14
  %cmp71 = icmp sgt i32 %channels.0, 2
  %conv72 = select i1 %cmp71, i16 2, i16 1
  %tag_code2.i665 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 0
  store i16 262, i16* %tag_code2.i665, align 2, !tbaa !193
  %type_code.i666 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 1
  store i16 3, i16* %type_code.i666, align 2, !tbaa !195
  %count3.i667 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 2
  store i32 1, i32* %count3.i667, align 2, !tbaa !196
  %value4.i668 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 3
  %i16.i669 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i668 to i16*
  store i16 %conv72, i16* %i16.i669, align 2, !tbaa !14
  %tag_code2.i677 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 0
  store i16 273, i16* %tag_code2.i677, align 2, !tbaa !193
  %type_code.i678 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 1
  store i16 4, i16* %type_code.i678, align 2, !tbaa !195
  %count3.i679 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 2
  store i32 %channels.0, i32* %count3.i679, align 2, !tbaa !196
  %i32.i680 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 3, i32 0
  store i32 210, i32* %i32.i680, align 2, !tbaa !14
  %conv75 = trunc i32 %channels.0 to i16
  %tag_code2.i688 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 0
  store i16 277, i16* %tag_code2.i688, align 2, !tbaa !193
  %type_code.i689 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 1
  store i16 3, i16* %type_code.i689, align 2, !tbaa !195
  %count3.i690 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 2
  store i32 1, i32* %count3.i690, align 2, !tbaa !196
  %value4.i691 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 3
  %i16.i692 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i691 to i16*
  store i16 %conv75, i16* %i16.i692, align 2, !tbaa !14
  %tag_code2.i706 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 0
  store i16 278, i16* %tag_code2.i706, align 2, !tbaa !193
  %type_code.i707 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 1
  store i16 4, i16* %type_code.i707, align 2, !tbaa !195
  %count3.i708 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 2
  store i32 1, i32* %count3.i708, align 2, !tbaa !196
  %i32.i709 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 3, i32 0
  store i32 %31, i32* %i32.i709, align 2, !tbaa !14
  %cmp80 = icmp eq i32 %channels.0, 1
  %36 = trunc i64 %elts.0.lcssa906 to i32
  %conv86595 = mul i32 %div.i, %36
  %mul84 = shl i32 %channels.0, 2
  %add = add i32 %mul84, 210
  %add.sink = select i1 %cmp80, i32 %conv86595, i32 %add
  %37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 0
  store i16 279, i16* %37, align 2
  %38 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 1
  store i16 4, i16* %38, align 2
  %39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 2
  store i32 %channels.0, i32* %39, align 2
  %40 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 3, i32 0
  store i32 %add.sink, i32* %40, align 2
  %tag_code2.i732 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 0
  store i16 282, i16* %tag_code2.i732, align 2, !tbaa !193
  %type_code3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 1
  store i16 5, i16* %type_code3.i, align 2, !tbaa !195
  %count4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 2
  %41 = bitcast i32* %count4.i to <2 x i32>*
  store <2 x i32> <i32 1, i32 194>, <2 x i32>* %41, align 2, !tbaa !14
  %tag_code2.i741 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 0
  store i16 283, i16* %tag_code2.i741, align 2, !tbaa !193
  %type_code3.i742 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 1
  store i16 5, i16* %type_code3.i742, align 2, !tbaa !195
  %count4.i743 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 2
  %42 = bitcast i32* %count4.i743 to <2 x i32>*
  store <2 x i32> <i32 1, i32 202>, <2 x i32>* %42, align 2, !tbaa !14
  %tag_code2.i759 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 0
  store i16 284, i16* %tag_code2.i759, align 2, !tbaa !193
  %type_code.i760 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 1
  store i16 3, i16* %type_code.i760, align 2, !tbaa !195
  %count3.i761 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 2
  store i32 1, i32* %count3.i761, align 2, !tbaa !196
  %value4.i762 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 3
  %i16.i763 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i762 to i16*
  store i16 2, i16* %i16.i763, align 2, !tbaa !14
  %tag_code2.i754 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 0
  store i16 296, i16* %tag_code2.i754, align 2, !tbaa !193
  %type_code.i755 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 1
  store i16 3, i16* %type_code.i755, align 2, !tbaa !195
  %count3.i756 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 2
  store i32 1, i32* %count3.i756, align 2, !tbaa !196
  %value4.i757 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 3
  %i16.i758 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i757 to i16*
  store i16 1, i16* %i16.i758, align 2, !tbaa !14
  %idxprom92 = sext i32 %type_code to i64
  %arrayidx93 = getelementptr inbounds [10 x i16], [10 x i16]* @_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE, i64 0, i64 %idxprom92
  %43 = load i16, i16* %arrayidx93, align 2, !tbaa !165
  %tag_code2.i749 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 0
  store i16 339, i16* %tag_code2.i749, align 2, !tbaa !193
  %type_code.i750 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 1
  store i16 3, i16* %type_code.i750, align 2, !tbaa !195
  %count3.i751 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 2
  store i32 1, i32* %count3.i751, align 2, !tbaa !196
  %value4.i752 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 3
  %i16.i753 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i752 to i16*
  store i16 %43, i16* %i16.i753, align 2, !tbaa !14
  %tag_code2.i745 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 0
  store i16 -32539, i16* %tag_code2.i745, align 2, !tbaa !193
  %type_code.i746 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 1
  store i16 4, i16* %type_code.i746, align 2, !tbaa !195
  %count3.i747 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 2
  store i32 1, i32* %count3.i747, align 2, !tbaa !196
  %i32.i748 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 3, i32 0
  store i32 %depth.0, i32* %i32.i748, align 2, !tbaa !14
  %ifd0_end = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 5
  %44 = bitcast i32* %ifd0_end to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 1, i32 1>, <4 x i32>* %44, align 2, !tbaa !37
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 7, i64 1
  store i32 1, i32* %arrayidx100, align 2, !tbaa !37
  %call.i736 = call i64 @fwrite(i8* nonnull %34, i64 210, i64 1, i8* nonnull %call.i598) #13
  %cmp.i737.not = icmp eq i64 %call.i736, 0
  br i1 %cmp.i737.not, label %cleanup154, label %if.end103

if.end103:                                        ; preds = %if.then36
  %cmp104 = icmp sgt i32 %channels.0, 1
  br i1 %cmp104, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph, label %cleanup154.thread

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph: ; preds = %if.end103
  %45 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %45) #11
  %mul108 = shl i32 %channels.0, 3
  %add109 = add i32 %mul108, 210
  store i32 %add109, i32* %offset, align 4, !tbaa !37
  %mul123 = mul i32 %depth.0, %div.i
  %46 = load i32, i32* %extent.i, align 4
  %47 = load i32, i32* %extent.i.1, align 4
  %mul124 = mul i32 %mul123, %46
  %mul125 = mul i32 %mul124, %47
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731: ; preds = %if.end118, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph
  %i111.0865 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph ], [ %inc128, %if.end118 ]
  %call.i727 = call i64 @fwrite(i8* nonnull %45, i64 4, i64 1, i8* nonnull %call.i598) #13
  %cmp.i728.not = icmp eq i64 %call.i727, 0
  br i1 %cmp.i728.not, label %cleanup151.thread, label %if.end118

if.end118:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731
  %48 = load i32, i32* %offset, align 4, !tbaa !37
  %add126 = add nsw i32 %mul125, %48
  store i32 %add126, i32* %offset, align 4, !tbaa !37
  %inc128 = add nuw nsw i32 %i111.0865, 1
  %exitcond881.not = icmp eq i32 %inc128, %channels.0
  br i1 %exitcond881.not, label %for.end129, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, !llvm.loop !197

for.end129:                                       ; preds = %if.end118
  %49 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %49) #11
  store i32 %mul125, i32* %count, align 4, !tbaa !37
  %inc146.1 = add nuw nsw i32 0, 1
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

for.cond138:                                      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  %exitcond.not = icmp eq i32 %inc146.phi, %channels.0
  br i1 %exitcond.not, label %cleanup151, label %for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge, !llvm.loop !198

for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge: ; preds = %for.cond138
  %inc146.0 = add nuw nsw i32 %inc146.phi, 1
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720: ; preds = %for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge, %for.end129
  %inc146.phi = phi i32 [ %inc146.0, %for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge ], [ %inc146.1, %for.end129 ]
  %call.i716 = call i64 @fwrite(i8* nonnull %49, i64 4, i64 1, i8* nonnull %call.i598) #13
  %cmp.i717.not = icmp eq i64 %call.i716, 0
  br i1 %cmp.i717.not, label %select.unfold, label %for.cond138

select.unfold:                                    ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #11
  br label %cleanup151.thread

cleanup151.thread:                                ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, %select.unfold
  %retval.2.ph = phi i32 [ -5, %select.unfold ], [ -4, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #11
  br label %cleanup154

cleanup151:                                       ; preds = %for.cond138
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #11
  br label %cleanup154.thread

cleanup154.thread:                                ; preds = %cleanup151, %if.end103
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %34) #11
  br label %if.end311

cleanup154:                                       ; preds = %cleanup151.thread, %if.then36
  %retval.4 = phi i32 [ -3, %if.then36 ], [ %retval.2.ph, %cleanup151.thread ]
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %34) #11
  br label %cleanup433

if.else164:                                       ; preds = %lor.lhs.false
  %call165 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.39, i64 0, i64 0)) #14
  br i1 %call165, label %while.cond, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631

while.cond:                                       ; preds = %if.else164, %while.cond
  %end.0 = phi i8* [ %incdec.ptr167, %while.cond ], [ %filename, %if.else164 ]
  %50 = load i8, i8* %end.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %50, 0
  %incdec.ptr167 = getelementptr inbounds i8, i8* %end.0, i64 1
  br i1 %tobool.not, label %while.body171, label %while.cond, !llvm.loop !199

while.cond174.preheader:                          ; preds = %while.body171
  %end.1872.lcssa883 = ptrtoint i8* %end.1872 to i64
  %51 = ptrtoint i8* %filename to i64
  %52 = sub i64 %51, %end.1872.lcssa883
  br label %while.cond174

while.body171:                                    ; preds = %while.cond, %while.body171
  %end.1872 = phi i8* [ %incdec.ptr172.ptr, %while.body171 ], [ %end.0, %while.cond ]
  %incdec.ptr172.ptr = getelementptr inbounds i8, i8* %end.1872, i64 -1
  %.pr = load i8, i8* %incdec.ptr172.ptr, align 1, !tbaa !14
  %cmp170.not = icmp eq i8 %.pr, 46
  br i1 %cmp170.not, label %while.cond174.preheader, label %while.body171, !llvm.loop !200

while.cond174:                                    ; preds = %land.rhs176, %while.cond174.preheader
  %start.0.idx = phi i64 [ %start.0.add, %land.rhs176 ], [ -1, %while.cond174.preheader ]
  %start.0.ptr.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.idx
  %cmp175.not = icmp eq i8* %start.0.ptr.ptr, %filename
  br i1 %cmp175.not, label %while.end183, label %land.rhs176

land.rhs176:                                      ; preds = %while.cond174
  %start.0.add = add nsw i64 %start.0.idx, -1
  %arrayidx177.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.add
  %53 = load i8, i8* %arrayidx177.ptr, align 1, !tbaa !14
  %cmp179.not = icmp eq i8 %53, 47
  br i1 %cmp179.not, label %while.end183, label %while.cond174, !llvm.loop !201

while.end183:                                     ; preds = %land.rhs176, %while.cond174
  %start.0.idx.lcssa = phi i64 [ %52, %while.cond174 ], [ %start.0.idx, %land.rhs176 ]
  %54 = trunc i64 %start.0.idx.lcssa to i32
  %conv184 = xor i32 %54, -1
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %55) #11
  %cmp186.not868 = icmp eq i64 %start.0.idx.lcssa, -1
  br i1 %cmp186.not868, label %iter.check, label %while.body187.preheader

while.body187.preheader:                          ; preds = %while.end183
  %56 = xor i64 %start.0.idx.lcssa, -1
  %min.iters.check40 = icmp ugt i64 %start.0.idx.lcssa, -33
  br i1 %min.iters.check40, label %while.body187.preheader160, label %vector.memcheck

vector.memcheck:                                  ; preds = %while.body187.preheader
  %57 = xor i64 %start.0.idx.lcssa, -1
  %scevgep44 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %57
  %scevgep45 = getelementptr i8, i8* %end.1872, i64 %start.0.idx.lcssa
  %scevgep46 = getelementptr i8, i8* %end.1872, i64 -1
  %bound0 = icmp ult i8* %array_name43, %scevgep46
  %bound1 = icmp ult i8* %scevgep45, %scevgep44
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %while.body187.preheader160, label %vector.ph42

vector.ph42:                                      ; preds = %vector.memcheck
  %n.vec48 = and i64 %56, -32
  %ind.end52 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %n.vec48
  %ind.end54 = add i64 %start.0.idx.lcssa, %n.vec48
  br label %vector.body39

vector.body39:                                    ; preds = %vector.body39, %vector.ph42
  %index49 = phi i64 [ 0, %vector.ph42 ], [ %index.next50, %vector.body39 ]
  %next.gep = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index49
  %offset.idx57 = add i64 %start.0.idx.lcssa, %index49
  %58 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx57
  %59 = bitcast i8* %58 to <16 x i8>*
  %wide.load = load <16 x i8>, <16 x i8>* %59, align 1, !tbaa !14, !alias.scope !202
  %60 = getelementptr inbounds i8, i8* %58, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %wide.load58 = load <16 x i8>, <16 x i8>* %61, align 1, !tbaa !14, !alias.scope !202
  %62 = bitcast i8* %next.gep to <16 x i8>*
  store <16 x i8> %wide.load, <16 x i8>* %62, align 1, !tbaa !14, !alias.scope !205, !noalias !202
  %63 = getelementptr i8, i8* %next.gep, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  store <16 x i8> %wide.load58, <16 x i8>* %64, align 1, !tbaa !14, !alias.scope !205, !noalias !202
  %index.next50 = add i64 %index49, 32
  %65 = icmp eq i64 %index.next50, %n.vec48
  br i1 %65, label %middle.block37, label %vector.body39, !llvm.loop !207

middle.block37:                                   ; preds = %vector.body39
  %cmp.n55 = icmp eq i64 %n.vec48, %56
  br i1 %cmp.n55, label %while.cond191.preheader, label %while.body187.preheader160

while.body187.preheader160:                       ; preds = %vector.memcheck, %while.body187.preheader, %middle.block37
  %dst.0870.ph = phi i8* [ %55, %vector.memcheck ], [ %55, %while.body187.preheader ], [ %ind.end52, %middle.block37 ]
  %start.1869.idx.ph = phi i64 [ %start.0.idx.lcssa, %vector.memcheck ], [ %start.0.idx.lcssa, %while.body187.preheader ], [ %ind.end54, %middle.block37 ]
  br label %while.body187

while.cond191.preheader:                          ; preds = %while.body187, %middle.block37
  %incdec.ptr189.lcssa = phi i8* [ %ind.end52, %middle.block37 ], [ %incdec.ptr189, %while.body187 ]
  %add.ptr = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 256
  %cmp193866 = icmp ult i8* %incdec.ptr189.lcssa, %add.ptr
  br i1 %cmp193866, label %iter.check, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705

iter.check:                                       ; preds = %while.cond191.preheader, %while.end183
  %dst.0.lcssa911 = phi i8* [ %incdec.ptr189.lcssa, %while.cond191.preheader ], [ %55, %while.end183 ]
  %dst.0.lcssa91162 = ptrtoint i8* %dst.0.lcssa911 to i64
  %scevgep = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 1, i64 0
  %66 = sub i64 0, %dst.0.lcssa91162
  %scevgep63 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %66
  %exitcount.ptrcnt.to.int = ptrtoint i8* %scevgep63 to i64
  %min.iters.check65 = icmp ult i8* %scevgep63, inttoptr (i64 4 to i8*)
  br i1 %min.iters.check65, label %while.body194.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  %min.iters.check67 = icmp ult i8* %scevgep63, inttoptr (i64 32 to i8*)
  br i1 %min.iters.check67, label %vec.epilog.ph, label %vector.ph68

vector.ph68:                                      ; preds = %vector.main.loop.iter.check
  %n.vec70 = and i64 %exitcount.ptrcnt.to.int, -32
  %next.gep74.0 = getelementptr i8, i8* %dst.0.lcssa911, i64 0
  %index.next72.0 = add i64 0, 32
  br label %vector.body61

vector.body61:                                    ; preds = %vector.body61.vector.body61_crit_edge, %vector.ph68
  %index.next72.phi = phi i64 [ %index.next72.0, %vector.ph68 ], [ %index.next72.1, %vector.body61.vector.body61_crit_edge ]
  %next.gep74.phi = phi i8* [ %next.gep74.0, %vector.ph68 ], [ %next.gep74.1, %vector.body61.vector.body61_crit_edge ]
  %67 = bitcast i8* %next.gep74.phi to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %67, align 1, !tbaa !14
  %68 = getelementptr i8, i8* %next.gep74.phi, i64 16
  %69 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %69, align 1, !tbaa !14
  %70 = icmp eq i64 %index.next72.phi, %n.vec70
  br i1 %70, label %middle.block59, label %vector.body61.vector.body61_crit_edge, !llvm.loop !208

vector.body61.vector.body61_crit_edge:            ; preds = %vector.body61
  %next.gep74.1 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next72.phi
  %index.next72.1 = add i64 %index.next72.phi, 32
  br label %vector.body61

middle.block59:                                   ; preds = %vector.body61
  %cmp.n73 = icmp eq i64 %n.vec70, %exitcount.ptrcnt.to.int
  br i1 %cmp.n73, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block59
  %ind.end85 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec70
  %n.vec.remaining = and i64 %exitcount.ptrcnt.to.int, 28
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  br i1 %min.epilog.iters.check, label %while.body194.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %vec.epilog.resume.val = phi i64 [ %n.vec70, %vec.epilog.iter.check ], [ 0, %vector.main.loop.iter.check ]
  %71 = sub i64 0, %dst.0.lcssa91162
  %scevgep76 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %71
  %exitcount.ptrcnt.to.int78 = ptrtoint i8* %scevgep76 to i64
  %n.vec80 = and i64 %exitcount.ptrcnt.to.int78, -4
  %ind.end84 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec80
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index81 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next82, %vec.epilog.vector.body ]
  %next.gep87 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index81
  %72 = bitcast i8* %next.gep87 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %72, align 1, !tbaa !14
  %index.next82 = add i64 %index81, 4
  %73 = icmp eq i64 %index.next82, %n.vec80
  br i1 %73, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !209

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %cmp.n86 = icmp eq i64 %n.vec80, %exitcount.ptrcnt.to.int78
  br i1 %cmp.n86, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194.preheader

while.body194.preheader:                          ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %dst.1867.ph = phi i8* [ %dst.0.lcssa911, %iter.check ], [ %ind.end85, %vec.epilog.iter.check ], [ %ind.end84, %vec.epilog.middle.block ]
  br label %while.body194

while.body187:                                    ; preds = %while.body187.preheader160, %while.body187
  %dst.0870 = phi i8* [ %incdec.ptr189, %while.body187 ], [ %dst.0870.ph, %while.body187.preheader160 ]
  %start.1869.idx = phi i64 [ %start.1869.add, %while.body187 ], [ %start.1869.idx.ph, %while.body187.preheader160 ]
  %start.1869.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx
  %start.1869.add = add nuw nsw i64 %start.1869.idx, 1
  %74 = load i8, i8* %start.1869.ptr, align 1, !tbaa !14
  %incdec.ptr189 = getelementptr inbounds i8, i8* %dst.0870, i64 1
  store i8 %74, i8* %dst.0870, align 1, !tbaa !14
  %cmp186.not = icmp eq i64 %start.1869.add, -1
  br i1 %cmp186.not, label %while.cond191.preheader, label %while.body187, !llvm.loop !210

while.body194:                                    ; preds = %while.body194.preheader, %while.body194
  %dst.1867 = phi i8* [ %incdec.ptr195, %while.body194 ], [ %dst.1867.ph, %while.body194.preheader ]
  %incdec.ptr195 = getelementptr inbounds i8, i8* %dst.1867, i64 1
  store i8 0, i8* %dst.1867, align 1, !tbaa !14
  %exitcond882.not = icmp eq i8* %incdec.ptr195, %scevgep
  br i1 %exitcond882.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194, !llvm.loop !211

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705: ; preds = %while.body194, %middle.block59, %vec.epilog.middle.block, %while.cond191.preheader
  %add197 = sub i32 6, %54
  %and = and i32 %add197, -8
  %75 = getelementptr inbounds [129 x i8], [129 x i8]* %header198, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %75) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(129) %75, i8* nonnull align 1 dereferenceable(129) getelementptr inbounds ([129 x i8], [129 x i8]* @__const.halide_debug_to_file.header, i64 0, i64 0), i64 129, i1 false)
  %call.i701 = call i64 @fwrite(i8* nonnull %75, i64 128, i64 1, i8* nonnull %call.i598) #13
  %76 = load i32, i32* %dimensions, align 4, !tbaa !179
  %cmp19.i.i = icmp sgt i32 %76, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %sub.i694.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %77 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !180
  %wide.trip.count.i.i = zext i32 %76 to i64
  %min.iters.check91 = icmp ult i32 %76, 3
  br i1 %min.iters.check91, label %for.body.i.i.preheader, label %vector.ph92

vector.ph92:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec94 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body90

vector.body90:                                    ; preds = %pred.load.continue103, %vector.ph92
  %index95 = phi i64 [ 0, %vector.ph92 ], [ %index.next96, %pred.load.continue103 ]
  %vec.phi = phi i64 [ 0, %vector.ph92 ], [ %predphi, %pred.load.continue103 ]
  %vec.phi101 = phi i64 [ 0, %vector.ph92 ], [ %predphi104, %pred.load.continue103 ]
  %induction100 = or i64 %index95, 1
  %78 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index95, i32 2
  %79 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction100, i32 2
  %80 = load i32, i32* %78, align 4, !tbaa !181
  %81 = load i32, i32* %79, align 4, !tbaa !181
  %82 = icmp sgt i32 %80, 0
  %83 = icmp sgt i32 %81, 0
  %84 = zext i32 %80 to i64
  %85 = zext i32 %81 to i64
  br i1 %82, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body90
  %86 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index95, i32 1
  %87 = load i32, i32* %86, align 4, !tbaa !185
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body90
  %88 = phi i32 [ poison, %vector.body90 ], [ %87, %pred.load.if ]
  br i1 %83, label %pred.load.if102, label %pred.load.continue103

pred.load.if102:                                  ; preds = %pred.load.continue
  %89 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction100, i32 1
  %90 = load i32, i32* %89, align 4, !tbaa !185
  br label %pred.load.continue103

pred.load.continue103:                            ; preds = %pred.load.if102, %pred.load.continue
  %91 = phi i32 [ poison, %pred.load.continue ], [ %90, %pred.load.if102 ]
  %92 = add nsw i32 %88, -1
  %93 = add nsw i32 %91, -1
  %94 = sext i32 %92 to i64
  %95 = sext i32 %93 to i64
  %96 = mul nsw i64 %94, %84
  %97 = mul nsw i64 %95, %85
  %98 = select i1 %82, i64 %96, i64 0
  %predphi = add i64 %vec.phi, %98
  %99 = select i1 %83, i64 %97, i64 0
  %predphi104 = add i64 %vec.phi101, %99
  %index.next96 = add i64 %index95, 2
  %100 = icmp eq i64 %index.next96, %n.vec94
  br i1 %100, label %middle.block88, label %vector.body90, !llvm.loop !213

middle.block88:                                   ; preds = %pred.load.continue103
  %bin.rdx = add i64 %predphi104, %predphi
  %cmp.n98 = icmp eq i64 %n.vec94, %wide.trip.count.i.i
  br i1 %cmp.n98, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block88
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec94, %middle.block88 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx, %middle.block88 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i.i, i32 2
  %101 = load i32, i32* %stride2.i.i, align 4, !tbaa !181
  %cmp3.i.i = icmp sgt i32 %101, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %101 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i.i, i32 1
  %102 = load i32, i32* %extent.i.i, align 4, !tbaa !185
  %sub.i.i = add nsw i32 %102, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i693 = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i693, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !214

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block88
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx, %middle.block88 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check108 = icmp ult i32 %76, 3
  br i1 %min.iters.check108, label %for.body.i13.i.preheader157, label %vector.ph109

vector.ph109:                                     ; preds = %for.body.i13.i.preheader
  %n.vec111 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body107

vector.body107:                                   ; preds = %pred.load.continue123, %vector.ph109
  %index112 = phi i64 [ 0, %vector.ph109 ], [ %index.next113, %pred.load.continue123 ]
  %vec.phi118 = phi i64 [ 0, %vector.ph109 ], [ %predphi124, %pred.load.continue123 ]
  %vec.phi119 = phi i64 [ 0, %vector.ph109 ], [ %predphi125, %pred.load.continue123 ]
  %induction117 = or i64 %index112, 1
  %103 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index112, i32 2
  %104 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction117, i32 2
  %105 = load i32, i32* %103, align 4, !tbaa !181
  %106 = load i32, i32* %104, align 4, !tbaa !181
  %107 = icmp slt i32 %105, 0
  %108 = icmp slt i32 %106, 0
  %109 = sext i32 %105 to i64
  %110 = sext i32 %106 to i64
  br i1 %107, label %pred.load.if120, label %pred.load.continue121

pred.load.if120:                                  ; preds = %vector.body107
  %111 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index112, i32 1
  %112 = load i32, i32* %111, align 4, !tbaa !185
  br label %pred.load.continue121

pred.load.continue121:                            ; preds = %pred.load.if120, %vector.body107
  %113 = phi i32 [ poison, %vector.body107 ], [ %112, %pred.load.if120 ]
  br i1 %108, label %pred.load.if122, label %pred.load.continue123

pred.load.if122:                                  ; preds = %pred.load.continue121
  %114 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction117, i32 1
  %115 = load i32, i32* %114, align 4, !tbaa !185
  br label %pred.load.continue123

pred.load.continue123:                            ; preds = %pred.load.if122, %pred.load.continue121
  %116 = phi i32 [ poison, %pred.load.continue121 ], [ %115, %pred.load.if122 ]
  %117 = add nsw i32 %113, -1
  %118 = add nsw i32 %116, -1
  %119 = sext i32 %117 to i64
  %120 = sext i32 %118 to i64
  %121 = mul nsw i64 %119, %109
  %122 = mul nsw i64 %120, %110
  %123 = select i1 %107, i64 %121, i64 0
  %predphi124 = add i64 %vec.phi118, %123
  %124 = select i1 %108, i64 %122, i64 0
  %predphi125 = add i64 %vec.phi119, %124
  %index.next113 = add i64 %index112, 2
  %125 = icmp eq i64 %index.next113, %n.vec111
  br i1 %125, label %middle.block105, label %vector.body107, !llvm.loop !215

middle.block105:                                  ; preds = %pred.load.continue123
  %bin.rdx126 = add i64 %predphi125, %predphi124
  %cmp.n115 = icmp eq i64 %n.vec111, %wide.trip.count.i.i
  br i1 %cmp.n115, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader157

for.body.i13.i.preheader157:                      ; preds = %for.body.i13.i.preheader, %middle.block105
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec111, %middle.block105 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx126, %middle.block105 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader157, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader157 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader157 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i10.i, i32 2
  %126 = load i32, i32* %stride2.i11.i, align 4, !tbaa !181
  %cmp3.i12.i = icmp slt i32 %126, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %126 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i10.i, i32 1
  %127 = load i32, i32* %extent.i15.i, align 4, !tbaa !185
  %sub.i16.i = add nsw i32 %127, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !216

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block105
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx126, %middle.block105 ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i694.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i694.phi = phi i64 [ %sub.i694.0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i694.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %128 = load i8, i8* %bits.i, align 1, !tbaa !140
  %conv.i.i696 = zext i8 %128 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i696, 7
  %div.i.i697 = lshr i64 %add.i4.i, 3
  %mul.i698 = mul i64 %div.i.i697, %sub.i694.phi
  %129 = trunc i64 %mul.i698 to i32
  %130 = add i32 %129, 7
  %131 = and i32 %130, 7
  %conv204 = xor i32 %131, 7
  %conv205 = zext i32 %conv204 to i64
  %add206 = add i64 %mul.i698, %conv205
  %tobool207.not = icmp ult i64 %add206, 4294967296
  br i1 %tobool207.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687, label %cleanup278.thread

cleanup278.thread:                                ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6.40, i64 0, i64 0)) #13
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %75) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %55) #11
  br label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687: ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %132 = icmp sgt i32 %76, 2
  %spec.store.select = select i1 %132, i32 %76, i32 2
  %133 = bitcast [8 x i32]* %tags to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %133) #11
  %arrayinit.begin = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 0
  store i32 14, i32* %arrayinit.begin, align 4, !tbaa !37
  %arrayinit.element = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 1
  %add214 = shl i32 %spec.store.select, 2
  %and215 = add i32 %add214, 4
  %mul216 = and i32 %and215, -8
  %add217 = add i32 %and, 40
  %add218 = add i32 %add217, %mul216
  %add220 = add i32 %add218, %129
  %add221 = add i32 %add220, %conv204
  store i32 %add221, i32* %arrayinit.element, align 4, !tbaa !37
  %arrayinit.element222 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 2
  %134 = bitcast i32* %arrayinit.element222 to <2 x i32>*
  store <2 x i32> <i32 6, i32 8>, <2 x i32>* %134, align 4, !tbaa !37
  %arrayinit.element224 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 4
  %idxprom225 = sext i32 %type_code to i64
  %arrayidx226 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE, i64 0, i64 %idxprom225
  %135 = load i8, i8* %arrayidx226, align 1, !tbaa !14
  %conv227 = zext i8 %135 to i32
  store i32 %conv227, i32* %arrayinit.element224, align 4, !tbaa !37
  %arrayinit.element228 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 5
  %136 = bitcast i32* %arrayinit.element228 to <2 x i32>*
  store <2 x i32> <i32 1, i32 5>, <2 x i32>* %136, align 4, !tbaa !37
  %arrayinit.element230 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 7
  store i32 %add214, i32* %arrayinit.element230, align 4, !tbaa !37
  %call.i683 = call i64 @fwrite(i8* nonnull %133, i64 32, i64 1, i8* nonnull %call.i598) #13
  %cmp.i684.not = icmp eq i64 %call.i683, 0
  br i1 %cmp.i684.not, label %cleanup278, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %137 = bitcast [4 x i32]* %extents to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %137) #11
  %arrayinit.begin235 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 0
  %138 = load i32, i32* %extent.i, align 4, !tbaa !185
  store i32 %138, i32* %arrayinit.begin235, align 4, !tbaa !37
  %arrayinit.element238 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 1
  %139 = load i32, i32* %extent.i.1, align 4, !tbaa !185
  store i32 %139, i32* %arrayinit.element238, align 4, !tbaa !37
  %arrayinit.element241 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 2
  %140 = load i32, i32* %extent.i.2, align 4, !tbaa !185
  store i32 %140, i32* %arrayinit.element241, align 4, !tbaa !37
  %arrayinit.element244 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 3
  %141 = load i32, i32* %extent.i.3, align 4, !tbaa !185
  store i32 %141, i32* %arrayinit.element244, align 4, !tbaa !37
  %conv248 = sext i32 %mul216 to i64
  %call.i672 = call i64 @fwrite(i8* nonnull %137, i64 %conv248, i64 1, i8* nonnull %call.i598) #13
  %cmp.i673.not = icmp eq i64 %call.i672, 0
  br i1 %cmp.i673.not, label %cleanup274, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %142 = bitcast [2 x i32]* %name_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %142) #11
  %arrayinit.begin252 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 0
  store i32 1, i32* %arrayinit.begin252, align 4, !tbaa !37
  %arrayinit.element253 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 1
  store i32 %conv184, i32* %arrayinit.element253, align 4, !tbaa !37
  %call.i660 = call i64 @fwrite(i8* nonnull %142, i64 8, i64 1, i8* nonnull %call.i598) #13
  %cmp.i661.not = icmp eq i64 %call.i660, 0
  br i1 %cmp.i661.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %conv258 = zext i32 %and to i64
  %call.i648 = call i64 @fwrite(i8* nonnull %55, i64 %conv258, i64 1, i8* nonnull %call.i598) #13
  %cmp.i649.not = icmp eq i64 %call.i648, 0
  br i1 %cmp.i649.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652
  %143 = bitcast [2 x i32]* %payload_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %143) #11
  %arrayinit.begin262 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 0
  %arrayidx264 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE, i64 0, i64 %idxprom225
  %144 = load i8, i8* %arrayidx264, align 1, !tbaa !14
  %conv265 = zext i8 %144 to i32
  store i32 %conv265, i32* %arrayinit.begin262, align 4, !tbaa !37
  %arrayinit.element266 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 1
  store i32 %129, i32* %arrayinit.element266, align 4, !tbaa !37
  %call.i638 = call i64 @fwrite(i8* nonnull %143, i64 8, i64 1, i8* nonnull %call.i598) #13
  %cmp.i639.not = icmp eq i64 %call.i638, 0
  %cleanup.dest.slot.5 = zext i1 %cmp.i639.not to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %143) #11
  br label %cleanup273

cleanup273:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %cleanup.dest.slot.6 = phi i32 [ %cleanup.dest.slot.5, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  %retval.6 = phi i32 [ -11, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ -9, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ -10, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %142) #11
  br label %cleanup274

cleanup274:                                       ; preds = %cleanup273, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %cleanup.dest.slot.7 = phi i32 [ %cleanup.dest.slot.6, %cleanup273 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  %retval.7 = phi i32 [ %retval.6, %cleanup273 ], [ -8, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %137) #11
  br label %cleanup278

cleanup278:                                       ; preds = %cleanup274, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %cleanup.dest.slot.8 = phi i32 [ %cleanup.dest.slot.7, %cleanup274 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  %retval.8 = phi i32 [ %retval.7, %cleanup274 ], [ -7, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %133) #11
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %75) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %55) #11
  %cond442 = icmp eq i32 %cleanup.dest.slot.8, 0
  br i1 %cond442, label %if.end311, label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631: ; preds = %if.else164
  %145 = bitcast [5 x i32]* %header289 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %145) #11
  %arrayinit.begin290 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 0
  %146 = load i32, i32* %extent.i, align 4, !tbaa !185
  store i32 %146, i32* %arrayinit.begin290, align 4, !tbaa !37
  %arrayinit.element293 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 1
  %147 = load i32, i32* %extent.i.1, align 4, !tbaa !185
  store i32 %147, i32* %arrayinit.element293, align 4, !tbaa !37
  %arrayinit.element296 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 2
  %148 = load i32, i32* %extent.i.2, align 4, !tbaa !185
  store i32 %148, i32* %arrayinit.element296, align 4, !tbaa !37
  %arrayinit.element299 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 3
  %149 = load i32, i32* %extent.i.3, align 4, !tbaa !185
  store i32 %149, i32* %arrayinit.element299, align 4, !tbaa !37
  %arrayinit.element302 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 4
  store i32 %type_code, i32* %arrayinit.element302, align 4, !tbaa !37
  %call.i627 = call i64 @fwrite(i8* nonnull %145, i64 20, i64 1, i8* nonnull %call.i598) #13
  %cmp.i628.not = icmp eq i64 %call.i627, 0
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %145) #11
  br i1 %cmp.i628.not, label %cleanup433, label %if.end311

if.end311:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup154.thread
  %final_padding_bytes.0 = phi i32 [ %conv204, %cleanup278 ], [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ 0, %cleanup154.thread ]
  %150 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %150) #11
  %div = udiv i32 4096, %div.i
  %151 = load i32, i32* %extent.i.3, align 4, !tbaa !185
  %cmp320856 = icmp sgt i32 %151, 0
  br i1 %cmp320856, label %for.body322.lr.ph, label %if.end412

for.body322.lr.ph:                                ; preds = %if.end311
  %152 = load i32, i32* %min.i.3, align 16, !tbaa !217
  %153 = bitcast [4 x i32]* %idx to i8*
  %arrayinit.begin357 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 0
  %arrayinit.element358 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 1
  %arrayinit.element359 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 2
  %arrayinit.element360 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 3
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %conv368 = zext i32 %div.i to i64
  %mul373 = mul nuw nsw i32 %div, %div.i
  %conv374 = zext i32 %mul373 to i64
  %.pre891 = load i32, i32* %min.i.2, align 16, !tbaa !217
  %.pre892 = load i32, i32* %extent.i.2, align 4, !tbaa !185
  %.pre893 = load i32, i32* %min.i.1, align 16
  %.pre894 = load i32, i32* %extent.i.1, align 4
  %.pre = load i32, i32* %extent.i, align 4
  %154 = load i32, i32* %min.i, align 16
  %155 = load i32, i32* %extent.i, align 4
  %156 = load i32, i32* %min.i, align 16
  %add352 = add nsw i32 %156, %155
  %.pre15 = load i32, i32* %extent.i.1, align 4
  %.pre16 = load i32, i32* %min.i.1, align 16
  %.pre896 = load i32, i32* %extent.i.2, align 4
  %.pre897 = load i32, i32* %min.i.2, align 16
  %.pre898 = load i32, i32* %extent.i.3, align 4
  %.pre899 = load i32, i32* %min.i.3, align 16
  br label %for.body322

for.body322:                                      ; preds = %for.inc399, %for.body322.lr.ph
  %157 = phi i32 [ %152, %for.body322.lr.ph ], [ %218, %for.inc399 ]
  %158 = phi i32 [ %151, %for.body322.lr.ph ], [ %219, %for.inc399 ]
  %159 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %220, %for.inc399 ]
  %160 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %221, %for.inc399 ]
  %161 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %222, %for.inc399 ]
  %162 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %223, %for.inc399 ]
  %dim3.0858 = phi i32 [ %152, %for.body322.lr.ph ], [ %inc400, %for.inc399 ]
  %counter.0857 = phi i32 [ 0, %for.body322.lr.ph ], [ %counter.1.lcssa, %for.inc399 ]
  %cmp331848 = icmp sgt i32 %161, 0
  br i1 %cmp331848, label %for.body333, label %for.inc399

for.body333:                                      ; preds = %for.body322, %for.inc394
  %163 = phi i32 [ %212, %for.inc394 ], [ %.pre893, %for.body322 ]
  %164 = phi i32 [ %213, %for.inc394 ], [ %.pre894, %for.body322 ]
  %165 = phi i32 [ %214, %for.inc394 ], [ %159, %for.body322 ]
  %166 = phi i32 [ %215, %for.inc394 ], [ %160, %for.body322 ]
  %167 = phi i32 [ %216, %for.inc394 ], [ %.pre894, %for.body322 ]
  %168 = phi i32 [ %217, %for.inc394 ], [ %.pre893, %for.body322 ]
  %dim2.0850 = phi i32 [ %inc395, %for.inc394 ], [ %162, %for.body322 ]
  %counter.1849 = phi i32 [ %counter.2.lcssa, %for.inc394 ], [ %counter.0857, %for.body322 ]
  %cmp342839 = icmp sgt i32 %167, 0
  br i1 %cmp342839, label %for.body344, label %for.inc394

for.body344:                                      ; preds = %for.body333, %for.inc389
  %169 = phi i32 [ %209, %for.inc389 ], [ %163, %for.body333 ]
  %170 = phi i32 [ %210, %for.inc389 ], [ %164, %for.body333 ]
  %171 = phi i32 [ %211, %for.inc389 ], [ %.pre, %for.body333 ]
  %dim1.0841 = phi i32 [ %inc390, %for.inc389 ], [ %168, %for.body333 ]
  %counter.2840 = phi i32 [ %counter.6797, %for.inc389 ], [ %counter.1849, %for.body333 ]
  %cmp353834 = icmp sgt i32 %171, 0
  br i1 %cmp353834, label %for.body355, label %for.inc389

for.body355:                                      ; preds = %for.body344, %for.inc384
  %dim0.0836 = phi i32 [ %inc385, %for.inc384 ], [ %154, %for.body344 ]
  %counter.3835 = phi i32 [ %counter.4, %for.inc384 ], [ %counter.2840, %for.body344 ]
  %inc356 = add nsw i32 %counter.3835, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %153) #11
  store i32 %dim0.0836, i32* %arrayinit.begin357, align 4, !tbaa !37
  store i32 %dim1.0841, i32* %arrayinit.element358, align 4, !tbaa !37
  store i32 %dim2.0850, i32* %arrayinit.element359, align 4, !tbaa !37
  store i32 %dim3.0858, i32* %arrayinit.element360, align 4, !tbaa !37
  %172 = load i32, i32* %dimensions, align 4, !tbaa !179
  %cmp17.i = icmp sgt i32 %172, 0
  br i1 %cmp17.i, label %for.body.lr.ph.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit

for.body.lr.ph.i:                                 ; preds = %for.body355
  %173 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !180
  %wide.trip.count.i = zext i32 %172 to i64
  %stride.i621920 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 0, i32 2
  %174 = load i32, i32* %stride.i621920, align 4, !tbaa !181
  %conv.i622921 = sext i32 %174 to i64
  %min.i623922 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 0, i32 0
  %175 = load i32, i32* %min.i623922, align 4, !tbaa !217
  %sub.i923 = sub nsw i32 %dim0.0836, %175
  %conv7.i924 = sext i32 %sub.i923 to i64
  %mul.i925 = mul nsw i64 %conv7.i924, %conv.i622921
  %exitcond.not.i927 = icmp eq i32 %172, 1
  br i1 %exitcond.not.i927, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.preheader, !llvm.loop !218

for.body.i.for.body.i_crit_edge.preheader:        ; preds = %for.body.lr.ph.i
  %stride.i62126 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 1, i32 2
  %176 = load i32, i32* %stride.i62126, align 4, !tbaa !181
  %conv.i62227 = sext i32 %176 to i64
  %min.i62328 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 1, i32 0
  %177 = load i32, i32* %min.i62328, align 4, !tbaa !217
  %sub.i29 = sub nsw i32 %dim1.0841, %177
  %conv7.i30 = sext i32 %sub.i29 to i64
  %mul.i31 = mul nsw i64 %conv7.i30, %conv.i62227
  %add.i62432 = add nsw i64 %mul.i31, %mul.i925
  %exitcond.not.i33 = icmp eq i32 %172, 2
  br i1 %exitcond.not.i33, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph, !llvm.loop !218

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph: ; preds = %for.body.i.for.body.i_crit_edge.preheader
  %178 = add nsw i64 %wide.trip.count.i, -2
  %min.iters.check131 = icmp ult i64 %178, 5
  br i1 %min.iters.check131, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, label %vector.ph132

vector.ph132:                                     ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %n.mod.vf133 = and i64 %178, 3
  %179 = icmp eq i64 %n.mod.vf133, 0
  %180 = select i1 %179, i64 4, i64 %n.mod.vf133
  %n.vec134 = sub nsw i64 %178, %180
  %ind.end138 = add nsw i64 %n.vec134, 2
  %181 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %add.i62432, i32 0
  br label %vector.body130

vector.body130:                                   ; preds = %vector.body130, %vector.ph132
  %index135 = phi i64 [ 0, %vector.ph132 ], [ %index.next136, %vector.body130 ]
  %vec.phi141 = phi <2 x i64> [ %181, %vector.ph132 ], [ %201, %vector.body130 ]
  %vec.phi142 = phi <2 x i64> [ zeroinitializer, %vector.ph132 ], [ %202, %vector.body130 ]
  %offset.idx140 = or i64 %index135, 2
  %182 = add i64 %offset.idx140, 2
  %183 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %offset.idx140
  %184 = bitcast i32* %183 to <2 x i32>*
  %wide.load143 = load <2 x i32>, <2 x i32>* %184, align 4, !tbaa !37
  %185 = getelementptr inbounds i32, i32* %183, i64 2
  %186 = bitcast i32* %185 to <2 x i32>*
  %wide.load144 = load <2 x i32>, <2 x i32>* %186, align 4, !tbaa !37
  %187 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %offset.idx140, i32 2
  %188 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %182, i32 2
  %189 = getelementptr inbounds i32, i32* %187, i64 -2
  %190 = bitcast i32* %189 to <8 x i32>*
  %191 = getelementptr inbounds i32, i32* %188, i64 -2
  %192 = bitcast i32* %191 to <8 x i32>*
  %wide.vec = load <8 x i32>, <8 x i32>* %190, align 4, !tbaa !37
  %wide.vec145 = load <8 x i32>, <8 x i32>* %192, align 4, !tbaa !37
  %strided.vec = shufflevector <8 x i32> %wide.vec, <8 x i32> poison, <2 x i32> <i32 0, i32 4>
  %strided.vec146 = shufflevector <8 x i32> %wide.vec145, <8 x i32> poison, <2 x i32> <i32 0, i32 4>
  %strided.vec147 = shufflevector <8 x i32> %wide.vec, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %strided.vec148 = shufflevector <8 x i32> %wide.vec145, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %193 = sext <2 x i32> %strided.vec147 to <2 x i64>
  %194 = sext <2 x i32> %strided.vec148 to <2 x i64>
  %195 = sub nsw <2 x i32> %wide.load143, %strided.vec
  %196 = sub nsw <2 x i32> %wide.load144, %strided.vec146
  %197 = sext <2 x i32> %195 to <2 x i64>
  %198 = sext <2 x i32> %196 to <2 x i64>
  %199 = mul nsw <2 x i64> %197, %193
  %200 = mul nsw <2 x i64> %198, %194
  %201 = add <2 x i64> %199, %vec.phi141
  %202 = add <2 x i64> %200, %vec.phi142
  %index.next136 = add i64 %index135, 4
  %203 = icmp eq i64 %index.next136, %n.vec134
  br i1 %203, label %middle.block128, label %vector.body130, !llvm.loop !219

middle.block128:                                  ; preds = %vector.body130
  %bin.rdx149 = add <2 x i64> %202, %201
  %204 = call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx149)
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader: ; preds = %middle.block128, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %indvars.iv.next.i35.ph = phi i64 [ 2, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %ind.end138, %middle.block128 ]
  %add.i62434.ph = phi i64 [ %add.i62432, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %204, %middle.block128 ]
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge: ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge
  %indvars.iv.next.i35 = phi i64 [ %indvars.iv.next.i, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %indvars.iv.next.i35.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %add.i62434 = phi i64 [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %add.i62434.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %arrayidx3.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %indvars.iv.next.i35
  %.pre895.pre = load i32, i32* %arrayidx3.i.phi.trans.insert.phi.trans.insert, align 4, !tbaa !37
  %stride.i621 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %indvars.iv.next.i35, i32 2
  %205 = load i32, i32* %stride.i621, align 4, !tbaa !181
  %conv.i622 = sext i32 %205 to i64
  %min.i623 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %indvars.iv.next.i35, i32 0
  %206 = load i32, i32* %min.i623, align 4, !tbaa !217
  %sub.i = sub nsw i32 %.pre895.pre, %206
  %conv7.i = sext i32 %sub.i to i64
  %mul.i = mul nsw i64 %conv7.i, %conv.i622
  %add.i624 = add nsw i64 %mul.i, %add.i62434
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i35, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, !llvm.loop !220

_ZNK15halide_buffer_t10address_ofEPKi.exit:       ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, %for.body.i.for.body.i_crit_edge.preheader, %for.body.lr.ph.i, %for.body355
  %index.0.lcssa.i = phi i64 [ 0, %for.body355 ], [ %mul.i925, %for.body.lr.ph.i ], [ %add.i62432, %for.body.i.for.body.i_crit_edge.preheader ], [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ]
  %207 = load i8*, i8** %host.i, align 8, !tbaa !176
  %208 = load i8, i8* %bits.i, align 1, !tbaa !140
  %conv.i.i = zext i8 %208 to i64
  %add.i.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i.i, 3
  %mul9.i = mul nsw i64 %div.i.i, %index.0.lcssa.i
  %add.ptr.i = getelementptr inbounds i8, i8* %207, i64 %mul9.i
  %mul366 = mul nsw i32 %counter.3835, %div.i
  %idx.ext = sext i32 %mul366 to i64
  %add.ptr367 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 %idx.ext
  %call369 = call i8* @memcpy(i8* nonnull %add.ptr367, i8* %add.ptr.i, i64 %conv368) #13
  %cmp370 = icmp eq i32 %inc356, %div
  br i1 %cmp370, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, label %for.inc384

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619: ; preds = %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %call.i615 = call i64 @fwrite(i8* nonnull %150, i64 %conv374, i64 1, i8* nonnull %call.i598) #13
  %cmp.i616.not = icmp eq i64 %call.i615, 0
  br i1 %cmp.i616.not, label %cleanup425.loopexit, label %for.inc384

for.inc384:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %counter.4 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619 ], [ %inc356, %_ZNK15halide_buffer_t10address_ofEPKi.exit ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %153) #11
  %inc385 = add nsw i32 %dim0.0836, 1
  %cmp353 = icmp slt i32 %inc385, %add352
  br i1 %cmp353, label %for.body355, label %for.inc389, !llvm.loop !221

for.inc389:                                       ; preds = %for.inc384, %for.body344
  %209 = phi i32 [ %169, %for.body344 ], [ %.pre16, %for.inc384 ]
  %210 = phi i32 [ %170, %for.body344 ], [ %.pre15, %for.inc384 ]
  %211 = phi i32 [ %171, %for.body344 ], [ %155, %for.inc384 ]
  %counter.6797 = phi i32 [ %counter.2840, %for.body344 ], [ %counter.4, %for.inc384 ]
  %inc390 = add nsw i32 %dim1.0841, 1
  %add341 = add nsw i32 %209, %210
  %cmp342 = icmp slt i32 %inc390, %add341
  br i1 %cmp342, label %for.body344, label %for.inc394, !llvm.loop !222

for.inc394:                                       ; preds = %for.inc389, %for.body333
  %212 = phi i32 [ %163, %for.body333 ], [ %209, %for.inc389 ]
  %213 = phi i32 [ %164, %for.body333 ], [ %210, %for.inc389 ]
  %214 = phi i32 [ %165, %for.body333 ], [ %.pre897, %for.inc389 ]
  %215 = phi i32 [ %166, %for.body333 ], [ %.pre896, %for.inc389 ]
  %216 = phi i32 [ %167, %for.body333 ], [ %210, %for.inc389 ]
  %217 = phi i32 [ %168, %for.body333 ], [ %209, %for.inc389 ]
  %counter.2.lcssa = phi i32 [ %counter.1849, %for.body333 ], [ %counter.6797, %for.inc389 ]
  %inc395 = add nsw i32 %dim2.0850, 1
  %add330 = add nsw i32 %215, %214
  %cmp331 = icmp slt i32 %inc395, %add330
  br i1 %cmp331, label %for.body333, label %for.inc399, !llvm.loop !223

for.inc399:                                       ; preds = %for.inc394, %for.body322
  %218 = phi i32 [ %157, %for.body322 ], [ %.pre899, %for.inc394 ]
  %219 = phi i32 [ %158, %for.body322 ], [ %.pre898, %for.inc394 ]
  %220 = phi i32 [ %159, %for.body322 ], [ %214, %for.inc394 ]
  %221 = phi i32 [ %160, %for.body322 ], [ %215, %for.inc394 ]
  %222 = phi i32 [ %161, %for.body322 ], [ %215, %for.inc394 ]
  %223 = phi i32 [ %162, %for.body322 ], [ %214, %for.inc394 ]
  %counter.1.lcssa = phi i32 [ %counter.0857, %for.body322 ], [ %counter.2.lcssa, %for.inc394 ]
  %inc400 = add nsw i32 %dim3.0858, 1
  %add319 = add nsw i32 %219, %218
  %cmp320 = icmp slt i32 %inc400, %add319
  br i1 %cmp320, label %for.body322, label %for.end403, !llvm.loop !224

for.end403:                                       ; preds = %for.inc399
  %cmp404 = icmp sgt i32 %counter.1.lcssa, 0
  br i1 %cmp404, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, label %if.end412

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612: ; preds = %for.end403
  %mul407 = mul nsw i32 %counter.1.lcssa, %div.i
  %conv408 = sext i32 %mul407 to i64
  %call.i608 = call i64 @fwrite(i8* nonnull %150, i64 %conv408, i64 1, i8* nonnull %call.i598) #13
  %cmp.i609.not = icmp eq i64 %call.i608, 0
  br i1 %cmp.i609.not, label %cleanup425, label %if.end412

if.end412:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, %for.end403, %if.end311
  %224 = bitcast i64* %zero to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %224) #11
  store i64 0, i64* %zero, align 8, !tbaa !18
  %tobool413.not = icmp eq i32 %final_padding_bytes.0, 0
  br i1 %tobool413.not, label %if.end423, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit: ; preds = %if.end412
  %conv415 = zext i32 %final_padding_bytes.0 to i64
  %call.i604 = call i64 @fwrite(i8* nonnull %224, i64 %conv415, i64 1, i8* nonnull %call.i598) #13
  %cmp.i605.not = icmp eq i64 %call.i604, 0
  br i1 %cmp.i605.not, label %cleanup424, label %if.end423

if.end423:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit, %if.end412
  br label %cleanup424

cleanup424:                                       ; preds = %if.end423, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit
  %retval.21 = phi i32 [ 0, %if.end423 ], [ -16, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %224) #11
  br label %cleanup425

cleanup425.loopexit:                              ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %153) #11
  br label %cleanup425

cleanup425:                                       ; preds = %cleanup425.loopexit, %cleanup424, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612
  %retval.22 = phi i32 [ %retval.21, %cleanup424 ], [ -14, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612 ], [ -13, %cleanup425.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %150) #11
  br label %cleanup433

cleanup433:                                       ; preds = %cleanup425, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup278.thread, %cleanup154
  %retval.23 = phi i32 [ %retval.22, %cleanup425 ], [ %retval.4, %cleanup154 ], [ %retval.8, %cleanup278 ], [ -12, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ -6, %cleanup278.thread ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #11
  %call.i = call i32 @fclose(i8* nonnull %call.i598) #13
  br label %return

return:                                           ; preds = %cleanup433, %if.end6, %if.end2, %if.then1, %if.then
  %retval.26 = phi i32 [ -1, %if.then ], [ -1, %if.then1 ], [ %call3, %if.end2 ], [ %retval.23, %cleanup433 ], [ -2, %if.end6 ]
  ret i32 %retval.26
}

declare i64 @fwrite(i8*, i64, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_cache_cleanup() #0 {
entry:
  tail call void @halide_memoization_cache_cleanup() #14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_memoization_cache_cleanup() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %while.end
  store i64 0, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  ret void

for.body:                                         ; preds = %while.end, %entry
  %__begin1.018 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %while.end ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  %cmp2.not16 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not16, label %while.end, label %while.body

while.body:                                       ; preds = %for.body, %while.body
  %entry1.017 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %while.body ], [ %0, %for.body ]
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next3, align 8, !tbaa !225
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.017) #14
  %2 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %2) #13
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp2.not, label %while.end, label %while.body, !llvm.loop !227

while.end:                                        ; preds = %while.body, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this) local_unnamed_addr #0 align 2 {
entry:
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  %0 = load i32, i32* %tuple_count, align 8, !tbaa !228
  %cmp11.not = icmp eq i32 %0, 0
  br i1 %cmp11.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  %1 = load i8*, i8** %metadata_storage, align 8, !tbaa !229
  tail call void @halide_free(i8* null, i8* %1) #13
  ret void

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !230
  %arrayidx = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %2, i64 %indvars.iv
  %call = tail call i32 @halide_device_free(i8* null, %struct.halide_buffer_t* %arrayidx) #13
  %3 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !230
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %3, i64 %indvars.iv, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !176
  %call6 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %4) #14
  %5 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call6 to i8*
  tail call void @halide_free(i8* null, i8* %5) #13
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %6 = load i32, i32* %tuple_count, align 8, !tbaa !228
  %7 = zext i32 %6 to i64
  %cmp = icmp ult i64 %indvars.iv.next, %7
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !231
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) local_unnamed_addr #2 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %host, i64 -32
  %0 = bitcast i8* %add.ptr to %"struct.Halide::Runtime::Internal::CacheBlockHeader"*
  ret %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %0
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp41 = icmp sgt i32 %d, -1
  br i1 %cmp41, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.042 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %idxprom36 = zext i32 %d.addr.042 to i64
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom36
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !18
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.042, -1
  %cmp = icmp sgt i32 %d.addr.042, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !232

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.042, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %idxprom5 = sext i32 %d.addr.0.lcssa to i64
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom5
  %1 = load i64, i64* %arrayidx6, align 8, !tbaa !18
  %cmp737.not = icmp eq i64 %1, 0
  br i1 %cmp737.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 4, i64 %idxprom5
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 5, i64 %idxprom5
  %inc.0 = add nuw i64 0, 1
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !233
  %add = add i64 %2, %src_off
  %3 = inttoptr i64 %add to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !235
  %add3 = add i64 %4, %dst_off
  %5 = inttoptr i64 %add3 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !236
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i64 %6) #13
  br label %if.end

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %inc.phi = phi i64 [ %inc.0, %for.body.lr.ph ], [ %inc.1, %for.body.for.body_crit_edge ]
  %src_off.addr.039 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body.for.body_crit_edge ]
  %dst_off.addr.038 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add13, %for.body.for.body_crit_edge ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.039, i64 %dst_off.addr.038) #14
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !18
  %add10 = add i64 %7, %src_off.addr.039
  %8 = load i64, i64* %arrayidx12, align 8, !tbaa !18
  %add13 = add i64 %8, %dst_off.addr.038
  %9 = load i64, i64* %arrayidx6, align 8, !tbaa !18
  %cmp7 = icmp ult i64 %inc.phi, %9
  br i1 %cmp7, label %for.body.for.body_crit_edge, label %if.end, !llvm.loop !237

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.1 = add nuw i64 %inc.phi, 1
  br label %for.body

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !233
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !235
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !238
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !176
  %2 = ptrtoint i8* %1 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %3 = load i64, i64* %device, align 8, !tbaa !178
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !233
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %4 = load i8*, i8** %host5, align 8, !tbaa !176
  %5 = ptrtoint i8* %4 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %6 = load i64, i64* %device7, align 8, !tbaa !178
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %5, %cond.true4 ], [ %6, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !235
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 4, i32 1
  %7 = load i8, i8* %bits.i, align 1, !tbaa !140
  %conv.i = zext i8 %7 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !236
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 0
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 0
  %arrayidx14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 0
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 1
  %8 = bitcast i64* %arrayidx to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %8, align 8, !tbaa !18
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 1
  %9 = bitcast i64* %arrayidx12 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %9, align 8, !tbaa !18
  %arrayidx14.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 1
  %10 = bitcast i64* %arrayidx14 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %10, align 8, !tbaa !18
  %arrayidx.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 2
  %arrayidx12.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 2
  %arrayidx14.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 2
  %arrayidx.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 3
  %11 = bitcast i64* %arrayidx.2 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %11, align 8, !tbaa !18
  %arrayidx12.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 3
  %12 = bitcast i64* %arrayidx12.2 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %12, align 8, !tbaa !18
  %arrayidx14.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 3
  %13 = bitcast i64* %arrayidx14.2 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %13, align 8, !tbaa !18
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 4
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 4
  %arrayidx14.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 4
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 5
  %14 = bitcast i64* %arrayidx.4 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %14, align 8, !tbaa !18
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 5
  %15 = bitcast i64* %arrayidx12.4 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !18
  %arrayidx14.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 5
  %16 = bitcast i64* %arrayidx14.4 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %16, align 8, !tbaa !18
  %arrayidx.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 6
  %arrayidx12.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 6
  %arrayidx14.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 6
  %arrayidx.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 7
  %17 = bitcast i64* %arrayidx.6 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %17, align 8, !tbaa !18
  %arrayidx12.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 7
  %18 = bitcast i64* %arrayidx12.6 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %18, align 8, !tbaa !18
  %arrayidx14.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 7
  %19 = bitcast i64* %arrayidx14.6 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %19, align 8, !tbaa !18
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 8
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 8
  %arrayidx14.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 8
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 9
  %20 = bitcast i64* %arrayidx.8 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %20, align 8, !tbaa !18
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 9
  %21 = bitcast i64* %arrayidx12.8 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %21, align 8, !tbaa !18
  %arrayidx14.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 9
  %22 = bitcast i64* %arrayidx14.8 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !18
  %arrayidx.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 10
  %arrayidx12.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 10
  %arrayidx14.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 10
  %arrayidx.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 11
  %23 = bitcast i64* %arrayidx.10 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %23, align 8, !tbaa !18
  %arrayidx12.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 11
  %24 = bitcast i64* %arrayidx12.10 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %24, align 8, !tbaa !18
  %arrayidx14.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 11
  %25 = bitcast i64* %arrayidx14.10 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %25, align 8, !tbaa !18
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 12
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 12
  %arrayidx14.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 12
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 13
  %26 = bitcast i64* %arrayidx.12 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %26, align 8, !tbaa !18
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 13
  %27 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %27, align 8, !tbaa !18
  %arrayidx14.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 13
  %28 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %28, align 8, !tbaa !18
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 14
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 14
  %arrayidx14.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 14
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 15
  %29 = bitcast i64* %arrayidx.14 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %29, align 8, !tbaa !18
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 15
  %30 = bitcast i64* %arrayidx12.14 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %30, align 8, !tbaa !18
  %arrayidx14.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 15
  %31 = bitcast i64* %arrayidx14.14 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %31, align 8, !tbaa !18
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %32 = load i32, i32* %dimensions, align 4, !tbaa !179
  %cmp17272 = icmp sgt i32 %32, 0
  br i1 %cmp17272, label %for.body19.lr.ph, label %cond.end8.for.cond.cleanup18_crit_edge

cond.end8.for.cond.cleanup18_crit_edge:           ; preds = %cond.end8
  %mul37.0 = mul i64 %conv, 0
  br label %for.cond.cleanup18

for.body19.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %33 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !180
  %dim23 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %34 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim23, align 8, !tbaa !180
  %wide.trip.count = zext i32 %32 to i64
  %min.iters.check = icmp ult i32 %32, 5
  br i1 %min.iters.check, label %for.body19.preheader, label %vector.ph

for.body19.preheader:                             ; preds = %middle.block, %for.body19.lr.ph
  %indvars.iv284.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %n.vec, %middle.block ]
  %.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %61, %middle.block ]
  br label %for.body19

vector.ph:                                        ; preds = %for.body19.lr.ph
  %n.mod.vf = and i64 %wide.trip.count, 3
  %35 = icmp eq i64 %n.mod.vf, 0
  %36 = select i1 %35, i64 4, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count, %36
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <2 x i64> [ zeroinitializer, %vector.ph ], [ %58, %vector.body ]
  %vec.phi2 = phi <2 x i64> [ zeroinitializer, %vector.ph ], [ %59, %vector.body ]
  %37 = or i64 %index, 2
  %38 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %index, i32 2
  %39 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %37, i32 2
  %40 = getelementptr inbounds i32, i32* %38, i64 -2
  %41 = bitcast i32* %40 to <8 x i32>*
  %42 = getelementptr inbounds i32, i32* %39, i64 -2
  %43 = bitcast i32* %42 to <8 x i32>*
  %wide.vec = load <8 x i32>, <8 x i32>* %41, align 4, !tbaa !37
  %wide.vec3 = load <8 x i32>, <8 x i32>* %43, align 4, !tbaa !37
  %strided.vec5 = shufflevector <8 x i32> %wide.vec, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %strided.vec6 = shufflevector <8 x i32> %wide.vec3, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %44 = sext <2 x i32> %strided.vec5 to <2 x i64>
  %45 = sext <2 x i32> %strided.vec6 to <2 x i64>
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %index, i32 0
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %37, i32 0
  %48 = bitcast i32* %46 to <8 x i32>*
  %49 = bitcast i32* %47 to <8 x i32>*
  %wide.vec7 = load <8 x i32>, <8 x i32>* %48, align 4, !tbaa !217
  %wide.vec8 = load <8 x i32>, <8 x i32>* %49, align 4, !tbaa !217
  %50 = sub nsw <8 x i32> %wide.vec7, %wide.vec
  %51 = shufflevector <8 x i32> %50, <8 x i32> undef, <2 x i32> <i32 0, i32 4>
  %52 = sub nsw <8 x i32> %wide.vec8, %wide.vec3
  %53 = shufflevector <8 x i32> %52, <8 x i32> undef, <2 x i32> <i32 0, i32 4>
  %54 = sext <2 x i32> %51 to <2 x i64>
  %55 = sext <2 x i32> %53 to <2 x i64>
  %56 = mul nsw <2 x i64> %54, %44
  %57 = mul nsw <2 x i64> %55, %45
  %58 = add <2 x i64> %56, %vec.phi
  %59 = add <2 x i64> %57, %vec.phi2
  %index.next = add i64 %index, 4
  %60 = icmp eq i64 %index.next, %n.vec
  br i1 %60, label %middle.block, label %vector.body, !llvm.loop !239

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %59, %58
  %61 = call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br label %for.body19.preheader

for.cond.cleanup18:                               ; preds = %for.body19.for.cond.cleanup18_crit_edge, %cond.end8.for.cond.cleanup18_crit_edge
  %mul37.phi = phi i64 [ %mul37.0, %cond.end8.for.cond.cleanup18_crit_edge ], [ %mul37.1, %for.body19.for.cond.cleanup18_crit_edge ]
  store i64 %mul37.phi, i64* %src_begin, align 8, !tbaa !238
  %dimensions39 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %62 = load i32, i32* %dimensions39, align 4, !tbaa !179
  %cmp40.not = icmp eq i32 %32, %62
  br i1 %cmp40.not, label %lor.lhs.false, label %if.then

for.body19:                                       ; preds = %for.body19.preheader, %for.body19
  %indvars.iv284 = phi i64 [ %indvars.iv.next285, %for.body19 ], [ %indvars.iv284.ph, %for.body19.preheader ]
  %63 = phi i64 [ %add, %for.body19 ], [ %.ph, %for.body19.preheader ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv284, i32 2
  %64 = load i32, i32* %stride, align 4, !tbaa !181
  %conv22 = sext i32 %64 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %indvars.iv284, i32 0
  %65 = load i32, i32* %min, align 4, !tbaa !217
  %min29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv284, i32 0
  %66 = load i32, i32* %min29, align 4, !tbaa !217
  %sub = sub nsw i32 %65, %66
  %conv30 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv30, %conv22
  %add = add i64 %mul, %63
  %indvars.iv.next285 = add nuw nsw i64 %indvars.iv284, 1
  %exitcond286.not = icmp eq i64 %indvars.iv.next285, %wide.trip.count
  br i1 %exitcond286.not, label %for.body19.for.cond.cleanup18_crit_edge, label %for.body19, !llvm.loop !240

for.body19.for.cond.cleanup18_crit_edge:          ; preds = %for.body19
  %mul37.1 = mul i64 %add, %conv
  br label %for.cond.cleanup18

lor.lhs.false:                                    ; preds = %for.cond.cleanup18
  %bits.i253 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 4, i32 1
  %67 = load i8, i8* %bits.i253, align 1, !tbaa !140
  %conv.i254 = zext i8 %67 to i32
  %add.i255 = add nuw nsw i32 %conv.i254, 7
  %div.i256 = lshr i32 %add.i255, 3
  %cmp45.not = icmp ne i32 %div.i, %div.i256
  %cmp48 = icmp sgt i32 %32, 16
  %or.cond261 = or i1 %cmp48, %cmp45.not
  br i1 %or.cond261, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup18
  %68 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %68, i8 0, i64 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp50 = icmp eq i32 %div.i, 0
  br i1 %cmp50, label %if.then51, label %for.cond54.preheader

for.cond54.preheader:                             ; preds = %if.end
  br i1 %cmp17272, label %for.body58.lr.ph, label %while.end

for.body58.lr.ph:                                 ; preds = %for.cond54.preheader
  %dim60 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %69 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim60, align 8, !tbaa !180
  %dim70 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %70 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim70, align 8, !tbaa !180
  %wide.trip.count282 = zext i32 %32 to i64
  br label %for.body58

if.then51:                                        ; preds = %if.end
  %71 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %71, i8 0, i64 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup94
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !236
  %.pre290 = load i64, i64* %arrayidx12, align 8, !tbaa !18
  %cmp139263 = icmp eq i64 %.pre, %.pre290
  br i1 %cmp139263, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre291 = load i64, i64* %arrayidx14, align 8, !tbaa !18
  %72 = bitcast i64* %arrayidx.1 to <2 x i64>*
  %73 = bitcast i64* %arrayidx to <2 x i64>*
  %74 = bitcast i64* %arrayidx12.1 to <2 x i64>*
  %75 = bitcast i64* %arrayidx12 to <2 x i64>*
  %76 = bitcast i64* %arrayidx14.1 to <2 x i64>*
  %77 = bitcast i64* %arrayidx14 to <2 x i64>*
  %78 = bitcast i64* %arrayidx.3 to <2 x i64>*
  %79 = bitcast i64* %arrayidx.2 to <2 x i64>*
  %80 = bitcast i64* %arrayidx12.3 to <2 x i64>*
  %81 = bitcast i64* %arrayidx12.2 to <2 x i64>*
  %82 = bitcast i64* %arrayidx14.3 to <2 x i64>*
  %83 = bitcast i64* %arrayidx14.2 to <2 x i64>*
  %84 = bitcast i64* %arrayidx.5 to <2 x i64>*
  %85 = bitcast i64* %arrayidx.4 to <2 x i64>*
  %86 = bitcast i64* %arrayidx12.5 to <2 x i64>*
  %87 = bitcast i64* %arrayidx12.4 to <2 x i64>*
  %88 = bitcast i64* %arrayidx14.5 to <2 x i64>*
  %89 = bitcast i64* %arrayidx14.4 to <2 x i64>*
  %90 = bitcast i64* %arrayidx.7 to <2 x i64>*
  %91 = bitcast i64* %arrayidx.6 to <2 x i64>*
  %92 = bitcast i64* %arrayidx12.7 to <2 x i64>*
  %93 = bitcast i64* %arrayidx12.6 to <2 x i64>*
  %94 = bitcast i64* %arrayidx14.7 to <2 x i64>*
  %95 = bitcast i64* %arrayidx14.6 to <2 x i64>*
  %96 = bitcast i64* %arrayidx.9 to <2 x i64>*
  %97 = bitcast i64* %arrayidx.8 to <2 x i64>*
  %98 = bitcast i64* %arrayidx12.9 to <2 x i64>*
  %99 = bitcast i64* %arrayidx12.8 to <2 x i64>*
  %100 = bitcast i64* %arrayidx14.9 to <2 x i64>*
  %101 = bitcast i64* %arrayidx14.8 to <2 x i64>*
  %102 = bitcast i64* %arrayidx.11 to <2 x i64>*
  %103 = bitcast i64* %arrayidx.10 to <2 x i64>*
  %104 = bitcast i64* %arrayidx12.11 to <2 x i64>*
  %105 = bitcast i64* %arrayidx12.10 to <2 x i64>*
  %106 = bitcast i64* %arrayidx14.11 to <2 x i64>*
  %107 = bitcast i64* %arrayidx14.10 to <2 x i64>*
  %108 = bitcast i64* %arrayidx.13 to <2 x i64>*
  %109 = bitcast i64* %arrayidx.12 to <2 x i64>*
  %110 = bitcast i64* %arrayidx12.13 to <2 x i64>*
  %111 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  %112 = bitcast i64* %arrayidx14.13 to <2 x i64>*
  %113 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  br label %land.rhs

for.body58:                                       ; preds = %for.cond.cleanup94, %for.body58.lr.ph
  %indvars.iv278 = phi i64 [ 0, %for.body58.lr.ph ], [ %indvars.iv.next279, %for.cond.cleanup94 ]
  %stride63 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %69, i64 %indvars.iv278, i32 2
  %114 = load i32, i32* %stride63, align 4, !tbaa !181
  %conv64 = sext i32 %114 to i64
  %mul68 = mul nsw i64 %conv64, %conv
  %stride73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %70, i64 %indvars.iv278, i32 2
  %115 = load i32, i32* %stride73, align 4, !tbaa !181
  %conv74 = sext i32 %115 to i64
  %mul78 = mul nsw i64 %conv74, %conv
  %cmp80264.not = icmp eq i64 %indvars.iv278, 0
  br i1 %cmp80264.not, label %for.end91, label %for.body81.lr.ph

for.body81.lr.ph:                                 ; preds = %for.body58
  %cmp86.not = icmp eq i64 %mul68, 0
  br i1 %cmp86.not, label %for.body81.preheader, label %for.body81.us

for.body81.preheader:                             ; preds = %for.body81.lr.ph
  %116 = trunc i64 %indvars.iv278 to i32
  br label %for.end91

for.body81.us:                                    ; preds = %for.body81.lr.ph, %for.inc89.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc89.us ], [ 0, %for.body81.lr.ph ]
  %arrayidx84.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv
  %117 = load i64, i64* %arrayidx84.us, align 8, !tbaa !18
  %cmp85.us = icmp ult i64 %mul68, %117
  br i1 %cmp85.us, label %for.end91.loopexit, label %for.inc89.us

for.inc89.us:                                     ; preds = %for.body81.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %indvars.iv278
  br i1 %exitcond.not, label %for.end91.loopexit, label %for.body81.us, !llvm.loop !241

for.end91.loopexit:                               ; preds = %for.inc89.us, %for.body81.us
  %insert.0.lcssa.ph.in = phi i64 [ %indvars.iv278, %for.inc89.us ], [ %indvars.iv, %for.body81.us ]
  %insert.0.lcssa.ph = trunc i64 %insert.0.lcssa.ph.in to i32
  br label %for.end91

for.end91:                                        ; preds = %for.end91.loopexit, %for.body81.preheader, %for.body58
  %insert.0.lcssa = phi i32 [ 0, %for.body58 ], [ %insert.0.lcssa.ph, %for.end91.loopexit ], [ %116, %for.body81.preheader ]
  %118 = zext i32 %insert.0.lcssa to i64
  %cmp93267 = icmp ugt i64 %indvars.iv278, %118
  br i1 %cmp93267, label %for.body95.preheader, label %for.cond.cleanup94

for.body95.preheader:                             ; preds = %for.end91
  %119 = sext i32 %insert.0.lcssa to i64
  br label %for.body95

for.cond.cleanup94:                               ; preds = %for.body95, %for.end91
  %extent122 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %69, i64 %indvars.iv278, i32 1
  %120 = load i32, i32* %extent122, align 4, !tbaa !185
  %conv123 = sext i32 %120 to i64
  %arrayidx126 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %118
  store i64 %conv123, i64* %arrayidx126, align 8, !tbaa !18
  %arrayidx129 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %118
  store i64 %mul68, i64* %arrayidx129, align 8, !tbaa !18
  %arrayidx132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %118
  store i64 %mul78, i64* %arrayidx132, align 8, !tbaa !18
  %indvars.iv.next279 = add nuw nsw i64 %indvars.iv278, 1
  %exitcond283.not = icmp eq i64 %indvars.iv.next279, %wide.trip.count282
  br i1 %exitcond283.not, label %while.cond.preheader, label %for.body58, !llvm.loop !242

for.body95:                                       ; preds = %for.body95, %for.body95.preheader
  %indvars.iv280 = phi i64 [ %indvars.iv278, %for.body95.preheader ], [ %indvars.iv.next281, %for.body95 ]
  %indvars.iv.next281 = add nsw i64 %indvars.iv280, -1
  %arrayidx99 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  %121 = load i64, i64* %arrayidx99, align 8, !tbaa !18
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280
  store i64 %121, i64* %arrayidx102, align 8, !tbaa !18
  %arrayidx106 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  %122 = load i64, i64* %arrayidx106, align 8, !tbaa !18
  %arrayidx109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280
  store i64 %122, i64* %arrayidx109, align 8, !tbaa !18
  %arrayidx113 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  %123 = load i64, i64* %arrayidx113, align 8, !tbaa !18
  %arrayidx116 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280
  store i64 %123, i64* %arrayidx116, align 8, !tbaa !18
  %cmp93 = icmp sgt i64 %indvars.iv.next281, %119
  br i1 %cmp93, label %for.body95, label %for.cond.cleanup94, !llvm.loop !243

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %124 = phi i64 [ %.pre291, %land.rhs.lr.ph ], [ %152, %while.body ]
  %125 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul147, %while.body ]
  %cmp143 = icmp eq i64 %125, %124
  br i1 %cmp143, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %126 = load i64, i64* %arrayidx, align 8, !tbaa !18
  %mul147 = mul i64 %126, %124
  store i64 %mul147, i64* %chunk_size, align 8, !tbaa !236
  %127 = load <2 x i64>, <2 x i64>* %72, align 8, !tbaa !18
  store <2 x i64> %127, <2 x i64>* %73, align 8, !tbaa !18
  %128 = load <2 x i64>, <2 x i64>* %74, align 8, !tbaa !18
  store <2 x i64> %128, <2 x i64>* %75, align 8, !tbaa !18
  %129 = load <2 x i64>, <2 x i64>* %76, align 8, !tbaa !18
  store <2 x i64> %129, <2 x i64>* %77, align 8, !tbaa !18
  %130 = load <2 x i64>, <2 x i64>* %78, align 8, !tbaa !18
  store <2 x i64> %130, <2 x i64>* %79, align 8, !tbaa !18
  %131 = load <2 x i64>, <2 x i64>* %80, align 8, !tbaa !18
  store <2 x i64> %131, <2 x i64>* %81, align 8, !tbaa !18
  %132 = load <2 x i64>, <2 x i64>* %82, align 8, !tbaa !18
  store <2 x i64> %132, <2 x i64>* %83, align 8, !tbaa !18
  %133 = load <2 x i64>, <2 x i64>* %84, align 8, !tbaa !18
  store <2 x i64> %133, <2 x i64>* %85, align 8, !tbaa !18
  %134 = load <2 x i64>, <2 x i64>* %86, align 8, !tbaa !18
  store <2 x i64> %134, <2 x i64>* %87, align 8, !tbaa !18
  %135 = load <2 x i64>, <2 x i64>* %88, align 8, !tbaa !18
  store <2 x i64> %135, <2 x i64>* %89, align 8, !tbaa !18
  %136 = load <2 x i64>, <2 x i64>* %90, align 8, !tbaa !18
  store <2 x i64> %136, <2 x i64>* %91, align 8, !tbaa !18
  %137 = load <2 x i64>, <2 x i64>* %92, align 8, !tbaa !18
  store <2 x i64> %137, <2 x i64>* %93, align 8, !tbaa !18
  %138 = load <2 x i64>, <2 x i64>* %94, align 8, !tbaa !18
  store <2 x i64> %138, <2 x i64>* %95, align 8, !tbaa !18
  %139 = load <2 x i64>, <2 x i64>* %96, align 8, !tbaa !18
  store <2 x i64> %139, <2 x i64>* %97, align 8, !tbaa !18
  %140 = load <2 x i64>, <2 x i64>* %98, align 8, !tbaa !18
  store <2 x i64> %140, <2 x i64>* %99, align 8, !tbaa !18
  %141 = load <2 x i64>, <2 x i64>* %100, align 8, !tbaa !18
  store <2 x i64> %141, <2 x i64>* %101, align 8, !tbaa !18
  %142 = load <2 x i64>, <2 x i64>* %102, align 8, !tbaa !18
  store <2 x i64> %142, <2 x i64>* %103, align 8, !tbaa !18
  %143 = load <2 x i64>, <2 x i64>* %104, align 8, !tbaa !18
  store <2 x i64> %143, <2 x i64>* %105, align 8, !tbaa !18
  %144 = load <2 x i64>, <2 x i64>* %106, align 8, !tbaa !18
  store <2 x i64> %144, <2 x i64>* %107, align 8, !tbaa !18
  %145 = load <2 x i64>, <2 x i64>* %108, align 8, !tbaa !18
  store <2 x i64> %145, <2 x i64>* %109, align 8, !tbaa !18
  %146 = load <2 x i64>, <2 x i64>* %110, align 8, !tbaa !18
  store <2 x i64> %146, <2 x i64>* %111, align 8, !tbaa !18
  %147 = load <2 x i64>, <2 x i64>* %112, align 8, !tbaa !18
  store <2 x i64> %147, <2 x i64>* %113, align 8, !tbaa !18
  %148 = load i64, i64* %arrayidx.15, align 8, !tbaa !18
  store i64 %148, i64* %arrayidx.14, align 8, !tbaa !18
  %149 = load i64, i64* %arrayidx12.15, align 8, !tbaa !18
  store i64 %149, i64* %arrayidx12.14, align 8, !tbaa !18
  %150 = load i64, i64* %arrayidx14.15, align 8, !tbaa !18
  store i64 %150, i64* %arrayidx14.14, align 8, !tbaa !18
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !18
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !18
  store i64 0, i64* %arrayidx14.15, align 8, !tbaa !18
  %151 = extractelement <2 x i64> %128, i32 0
  %cmp139 = icmp eq i64 %mul147, %151
  %152 = extractelement <2 x i64> %129, i32 0
  br i1 %cmp139, label %land.rhs, label %while.end, !llvm.loop !244

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond54.preheader
  %153 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %153, i8* nonnull align 8 dereferenceable(416) %0, i64 416, i1 false), !tbaa.struct !245
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then51, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %key1, i8* %key2, i64 %key_size) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @memcmp(i8* %key1, i8* %key2, i64 %key_size) #13
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

declare i32 @memcmp(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %buf, %struct.halide_dimension_t* %shape) local_unnamed_addr #0 {
entry:
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %0 = load i32, i32* %dimensions, align 4, !tbaa !179
  %cmp9 = icmp sgt i32 %0, 0
  br i1 %cmp9, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !180
  %2 = zext i32 %0 to i64
  br label %for.body

for.cond:                                         ; preds = %_ZNK18halide_dimension_tneERKS_.exit
  %exitcond.not = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond.not, label %return, label %for.body, !llvm.loop !246

for.body:                                         ; preds = %for.cond, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %min.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 0
  %3 = load i32, i32* %min.i.i, align 4, !tbaa !217
  %min2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %min2.i.i, align 4, !tbaa !217
  %cmp.i.i = icmp eq i32 %3, %4
  br i1 %cmp.i.i, label %land.lhs.true.i.i, label %return

land.lhs.true.i.i:                                ; preds = %for.body
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 1
  %5 = load i32, i32* %extent.i.i, align 4, !tbaa !185
  %extent3.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 1
  %6 = load i32, i32* %extent3.i.i, align 4, !tbaa !185
  %cmp4.i.i = icmp eq i32 %5, %6
  br i1 %cmp4.i.i, label %land.lhs.true5.i.i, label %return

land.lhs.true5.i.i:                               ; preds = %land.lhs.true.i.i
  %stride.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 2
  %7 = load i32, i32* %stride.i.i, align 4, !tbaa !181
  %stride6.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 2
  %8 = load i32, i32* %stride6.i.i, align 4, !tbaa !181
  %cmp7.i.i = icmp eq i32 %7, %8
  br i1 %cmp7.i.i, label %_ZNK18halide_dimension_tneERKS_.exit, label %return

_ZNK18halide_dimension_tneERKS_.exit:             ; preds = %land.lhs.true5.i.i
  %flags.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 3
  %9 = load i32, i32* %flags.i.i, align 4, !tbaa !247
  %flags8.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 3
  %10 = load i32, i32* %flags8.i.i, align 4, !tbaa !247
  %cmp9.i.i.not = icmp eq i32 %9, %10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp9.i.i.not, label %for.cond, label %return

return:                                           ; preds = %_ZNK18halide_dimension_tneERKS_.exit, %land.lhs.true5.i.i, %land.lhs.true.i.i, %for.body, %for.cond, %entry
  %cmp.lcssa = phi i1 [ true, %entry ], [ false, %_ZNK18halide_dimension_tneERKS_.exit ], [ true, %for.cond ], [ false, %land.lhs.true5.i.i ], [ false, %land.lhs.true.i.i ], [ false, %for.body ]
  ret i1 %cmp.lcssa
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this, i8* %cache_key, i64 %cache_key_size, i32 %key_hash, %struct.halide_buffer_t* %computed_bounds_buf, i32 %tuples, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key_arg, i64 %eviction_key_arg) local_unnamed_addr #0 align 2 {
entry:
  %frombool = zext i1 %has_eviction_key_arg to i8
  %0 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %this to <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>*
  store <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>* %0, align 8, !tbaa !10
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !248
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 4
  store i64 %cache_key_size, i64* %key_size, align 8, !tbaa !249
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 6
  store i32 %key_hash, i32* %hash, align 8, !tbaa !250
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 7
  store i32 0, i32* %in_use_count, align 4, !tbaa !251
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  store i32 %tuples, i32* %tuple_count, align 8, !tbaa !228
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 5
  %1 = load i32, i32* %dimensions, align 4, !tbaa !179
  %dimensions2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 9
  store i32 %1, i32* %dimensions2, align 4, !tbaa !252
  %conv = zext i32 %tuples to i64
  %mul = mul nuw nsw i64 %conv, 56
  %conv5 = sext i32 %1 to i64
  %add8 = add i32 %tuples, 1
  %conv9 = zext i32 %add8 to i64
  %mul6 = shl nuw nsw i64 %conv9, 4
  %mul10 = mul i64 %mul6, %conv5
  %add11 = add i64 %mul10, %mul
  %add13 = add i64 %add11, %cache_key_size
  %call = tail call i8* @halide_malloc(i8* null, i64 %add13) #13
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  store i8* %call, i8** %metadata_storage, align 8, !tbaa !229
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  %2 = bitcast %struct.halide_buffer_t** %buf to i8**
  store i8* %call, i8** %2, align 8, !tbaa !230
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 %mul
  %computed_bounds = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 10
  %3 = bitcast %struct.halide_dimension_t** %computed_bounds to i8**
  store i8* %add.ptr, i8** %3, align 8, !tbaa !253
  %add.ptr18 = getelementptr inbounds i8, i8* %call, i64 %add11
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 5
  store i8* %add.ptr18, i8** %key, align 8, !tbaa !254
  %4 = load i64, i64* %key_size, align 8, !tbaa !249
  %cmp117.not = icmp eq i64 %4, 0
  br i1 %cmp117.not, label %for.cond23.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %if.end
  %5 = load i8, i8* %cache_key, align 1, !tbaa !14
  store i8 %5, i8* %add.ptr18, align 1, !tbaa !14
  %cmp130.not = icmp eq i64 %4, 1
  br i1 %cmp130.not, label %for.cond23.preheader, label %for.body.for.body_crit_edge.preheader, !llvm.loop !255

for.body.for.body_crit_edge.preheader:            ; preds = %for.body.preheader
  %arrayidx2 = getelementptr inbounds i8, i8* %cache_key, i64 1
  %6 = load i8, i8* %arrayidx2, align 1, !tbaa !14
  %arrayidx213 = getelementptr inbounds i8, i8* %add.ptr18, i64 1
  store i8 %6, i8* %arrayidx213, align 1, !tbaa !14
  %7 = load i64, i64* %key_size, align 8, !tbaa !249
  %cmp4 = icmp ugt i64 %7, 2
  br i1 %cmp4, label %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, label %for.cond23.preheader, !llvm.loop !255

for.cond23.preheader:                             ; preds = %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, %for.body.for.body_crit_edge.preheader, %for.body.preheader, %if.end
  %8 = load i32, i32* %dimensions2, align 4, !tbaa !252
  %cmp25115 = icmp sgt i32 %8, 0
  br i1 %cmp25115, label %for.body27.lr.ph, label %for.cond36.preheader

for.body27.lr.ph:                                 ; preds = %for.cond23.preheader
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 6
  br label %for.body27

for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge: ; preds = %for.body.for.body_crit_edge.preheader, %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge
  %inc5 = phi i64 [ %inc, %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge ], [ 2, %for.body.for.body_crit_edge.preheader ]
  %.pre.pre = load i8*, i8** %key, align 8, !tbaa !254
  %arrayidx = getelementptr inbounds i8, i8* %cache_key, i64 %inc5
  %9 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %arrayidx21 = getelementptr inbounds i8, i8* %.pre.pre, i64 %inc5
  store i8 %9, i8* %arrayidx21, align 1, !tbaa !14
  %inc = add nuw i64 %inc5, 1
  %10 = load i64, i64* %key_size, align 8, !tbaa !249
  %cmp = icmp ult i64 %inc, %10
  br i1 %cmp, label %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, label %for.cond23.preheader, !llvm.loop !255

for.cond36.preheader:                             ; preds = %for.body27, %for.cond23.preheader
  %11 = load i32, i32* %tuple_count, align 8, !tbaa !228
  %cmp38113.not = icmp eq i32 %11, 0
  br i1 %cmp38113.not, label %for.cond.cleanup39, label %for.body40

for.body27:                                       ; preds = %for.body27, %for.body27.lr.ph
  %indvars.iv121 = phi i64 [ 0, %for.body27.lr.ph ], [ %indvars.iv.next122, %for.body27 ]
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !180
  %arrayidx28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 %indvars.iv121
  %13 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !253
  %arrayidx31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i64 %indvars.iv121
  %14 = bitcast %struct.halide_dimension_t* %arrayidx31 to i8*
  %15 = bitcast %struct.halide_dimension_t* %arrayidx28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %14, i8* nonnull align 4 dereferenceable(16) %15, i64 16, i1 false), !tbaa.struct !184
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  %16 = load i32, i32* %dimensions2, align 4, !tbaa !252
  %17 = sext i32 %16 to i64
  %cmp25 = icmp slt i64 %indvars.iv.next122, %17
  br i1 %cmp25, label %for.body27, label %for.cond36.preheader, !llvm.loop !256

for.cond36.loopexit:                              ; preds = %for.body59.for.body59_crit_edge, %for.body59.preheader, %for.body40
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !228
  %19 = zext i32 %18 to i64
  %cmp38 = icmp ult i64 %indvars.iv.next120, %19
  br i1 %cmp38, label %for.body40, label %for.cond.cleanup39, !llvm.loop !257

for.cond.cleanup39:                               ; preds = %for.cond36.loopexit, %for.cond36.preheader
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 13
  store i8 %frombool, i8* %has_eviction_key, align 8, !tbaa !258
  %eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 12
  store i64 %eviction_key_arg, i64* %eviction_key, align 8, !tbaa !259
  br label %cleanup

for.body40:                                       ; preds = %for.cond36.preheader, %for.cond36.loopexit
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %for.cond36.loopexit ], [ 0, %for.cond36.preheader ]
  %arrayidx42 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv119
  %20 = bitcast %struct.halide_buffer_t** %arrayidx42 to i8**
  %21 = load i8*, i8** %20, align 8, !tbaa !10
  %22 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !230
  %arrayidx45 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %22, i64 %indvars.iv119
  %23 = bitcast %struct.halide_buffer_t* %arrayidx45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %23, i8* nonnull align 8 dereferenceable(56) %21, i64 56, i1 false), !tbaa.struct !260
  %24 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !253
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv119, 1
  %25 = load i32, i32* %dimensions2, align 4, !tbaa !252
  %26 = trunc i64 %indvars.iv.next120 to i32
  %mul49 = mul i32 %25, %26
  %idx.ext = zext i32 %mul49 to i64
  %add.ptr50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i64 %idx.ext
  %27 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !230
  %dim54 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %27, i64 %indvars.iv119, i32 6
  store %struct.halide_dimension_t* %add.ptr50, %struct.halide_dimension_t** %dim54, align 8, !tbaa !180
  %cmp57111 = icmp sgt i32 %25, 0
  br i1 %cmp57111, label %for.body59.preheader, label %for.cond36.loopexit

for.body59.preheader:                             ; preds = %for.body40
  %28 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62125 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %28, i64 0, i32 6
  %29 = bitcast %struct.halide_dimension_t** %dim62125 to i8**
  %30 = load i8*, i8** %29, align 8, !tbaa !180
  %31 = bitcast %struct.halide_dimension_t* %add.ptr50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %31, i8* nonnull align 4 dereferenceable(16) %30, i64 16, i1 false), !tbaa.struct !184
  %32 = load i32, i32* %dimensions2, align 4, !tbaa !252
  %cmp57128 = icmp sgt i32 %32, 1
  br i1 %cmp57128, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !262

for.body59.for.body59_crit_edge:                  ; preds = %for.body59.preheader, %for.body59.for.body59_crit_edge
  %indvars.iv.next129 = phi i64 [ %indvars.iv.next, %for.body59.for.body59_crit_edge ], [ 1, %for.body59.preheader ]
  %.pre123 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !230
  %dim68.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %.pre123, i64 %indvars.iv119, i32 6
  %.pre124 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim68.phi.trans.insert, align 8, !tbaa !180
  %33 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %33, i64 0, i32 6
  %34 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim62, align 8, !tbaa !180
  %arrayidx64 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %indvars.iv.next129
  %arrayidx70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre124, i64 %indvars.iv.next129
  %35 = bitcast %struct.halide_dimension_t* %arrayidx70 to i8*
  %36 = bitcast %struct.halide_dimension_t* %arrayidx64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %35, i8* nonnull align 4 dereferenceable(16) %36, i64 16, i1 false), !tbaa.struct !184
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next129, 1
  %37 = load i32, i32* %dimensions2, align 4, !tbaa !252
  %38 = sext i32 %37 to i64
  %cmp57 = icmp slt i64 %indvars.iv.next, %38
  br i1 %cmp57, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !262

cleanup:                                          ; preds = %for.cond.cleanup39, %entry
  %39 = xor i1 %tobool.not, true
  ret i1 %39
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %key, i64 %key_size) local_unnamed_addr #0 {
entry:
  %cmp8.not = icmp eq i64 %key_size, 0
  br i1 %cmp8.not, label %for.cond.cleanup, label %entry.for.body_crit_edge

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw i64 0, 1
  %arrayidx.1 = getelementptr inbounds i8, i8* %key, i64 0
  %add.1 = mul i32 5381, 33
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %h.0.lcssa = phi i32 [ 5381, %entry ], [ %add1, %for.body ]
  ret i32 %h.0.lcssa

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %add.phi = phi i32 [ %add.0, %for.body.for.body_crit_edge ], [ %add.1, %entry.for.body_crit_edge ]
  %arrayidx.phi = phi i8* [ %arrayidx.0, %for.body.for.body_crit_edge ], [ %arrayidx.1, %entry.for.body_crit_edge ]
  %inc.phi = phi i64 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %0 = load i8, i8* %arrayidx.phi, align 1, !tbaa !14
  %conv = zext i8 %0 to i32
  %add1 = add i32 %add.phi, %conv
  %exitcond.not = icmp eq i64 %inc.phi, %key_size
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body.for.body_crit_edge, !llvm.loop !263

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw i64 %inc.phi, 1
  %arrayidx.0 = getelementptr inbounds i8, i8* %key, i64 %inc.phi
  %add.0 = mul i32 %add1, 33
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11prune_cacheEv() local_unnamed_addr #0 {
entry:
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %1 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  %2 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !18
  %cmp84 = icmp sgt i64 %1, %2
  %cmp185 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  %3 = and i1 %cmp185, %cmp84
  br i1 %3, label %while.body, label %while.end42

while.body:                                       ; preds = %entry, %if.end41
  %4 = phi i64 [ %74, %if.end41 ], [ %2, %entry ]
  %5 = phi i64 [ %75, %if.end41 ], [ %1, %entry ]
  %prune_candidate.086 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %6, %if.end41 ], [ %0, %entry ]
  %more_recent2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 1
  %6 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent2, align 8, !tbaa !264
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 7
  %7 = load i32, i32* %in_use_count, align 4, !tbaa !251
  %cmp3 = icmp eq i32 %7, 0
  br i1 %cmp3, label %if.then, label %if.end41

if.then:                                          ; preds = %while.body
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 6
  %8 = load i32, i32* %hash, align 8, !tbaa !250
  %9 = and i32 %8, 255
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %10 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp5 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %10, %prune_candidate.086
  br i1 %cmp5, label %if.then6, label %while.cond9

if.then6:                                         ; preds = %if.then
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %11 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !225
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %11, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  br label %if.end21

while.cond9:                                      ; preds = %if.then, %land.rhs11
  %prev_hash_entry.0 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %12, %land.rhs11 ], [ %10, %if.then ]
  %cmp10.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, null
  br i1 %cmp10.not, label %if.then18, label %land.rhs11

land.rhs11:                                       ; preds = %while.cond9
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  %12 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next12, align 8, !tbaa !225
  %cmp13.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %12, %prune_candidate.086
  br i1 %cmp13.not, label %do.end, label %while.cond9, !llvm.loop !265

if.then18:                                        ; preds = %while.cond9
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.2.42, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end

do.end:                                           ; preds = %land.rhs11, %if.then18
  %next19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %13 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next19, align 8, !tbaa !225
  %next20 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %13, %"struct.Halide::Runtime::Internal::CacheEntry"** %next20, align 8, !tbaa !225
  br label %if.end21

if.end21:                                         ; preds = %do.end, %if.then6
  %14 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp22 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %14, %prune_candidate.086
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %cmp25.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  br i1 %cmp25.not, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end24
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %15 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !248
  %less_recent27 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %15, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent27, align 8, !tbaa !248
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp29 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %16, %prune_candidate.086
  %less_recent31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !248
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end28
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %17, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %cmp34.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp34.not, label %if.end37, label %if.then35

if.then35:                                        ; preds = %if.end32
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !248
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end32
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 8
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !228
  %cmp3882.not = icmp eq i32 %18, 0
  br i1 %cmp3882.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end37
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 11
  %19 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !230
  %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  %wide.trip.count = zext i32 %18 to i64
  br label %for.body

for.cond.for.cond.cleanup_crit_edge:              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %if.end37
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %prune_candidate.086) #14
  %20 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %20) #13
  %.pre92 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  %.pre93 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !18
  br label %if.end41

for.body:                                         ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %sub89 = phi i64 [ %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted, %for.body.lr.ph ], [ %sub, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 5
  %21 = load i32, i32* %dimensions.i.i, align 4, !tbaa !179
  %cmp19.i.i = icmp sgt i32 %21, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body
  %sub.i.neg.0 = add i64 0, -1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !180
  %wide.trip.count.i.i = zext i32 %21 to i64
  %min.iters.check28 = icmp ult i32 %21, 3
  br i1 %min.iters.check28, label %for.body.i.i.preheader, label %vector.ph29

vector.ph29:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec31 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body27

vector.body27:                                    ; preds = %pred.load.continue43, %vector.ph29
  %index32 = phi i64 [ 0, %vector.ph29 ], [ %index.next33, %pred.load.continue43 ]
  %vec.phi38 = phi i64 [ 0, %vector.ph29 ], [ %predphi44, %pred.load.continue43 ]
  %vec.phi39 = phi i64 [ 0, %vector.ph29 ], [ %predphi45, %pred.load.continue43 ]
  %induction37 = or i64 %index32, 1
  %23 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index32, i32 2
  %24 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction37, i32 2
  %25 = load i32, i32* %23, align 4, !tbaa !181
  %26 = load i32, i32* %24, align 4, !tbaa !181
  %27 = icmp sgt i32 %25, 0
  %28 = icmp sgt i32 %26, 0
  %29 = zext i32 %25 to i64
  %30 = zext i32 %26 to i64
  br i1 %27, label %pred.load.if40, label %pred.load.continue41

pred.load.if40:                                   ; preds = %vector.body27
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index32, i32 1
  %32 = load i32, i32* %31, align 4, !tbaa !185
  br label %pred.load.continue41

pred.load.continue41:                             ; preds = %pred.load.if40, %vector.body27
  %33 = phi i32 [ poison, %vector.body27 ], [ %32, %pred.load.if40 ]
  br i1 %28, label %pred.load.if42, label %pred.load.continue43

pred.load.if42:                                   ; preds = %pred.load.continue41
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction37, i32 1
  %35 = load i32, i32* %34, align 4, !tbaa !185
  br label %pred.load.continue43

pred.load.continue43:                             ; preds = %pred.load.if42, %pred.load.continue41
  %36 = phi i32 [ poison, %pred.load.continue41 ], [ %35, %pred.load.if42 ]
  %37 = add nsw i32 %33, -1
  %38 = add nsw i32 %36, -1
  %39 = sext i32 %37 to i64
  %40 = sext i32 %38 to i64
  %41 = mul nsw i64 %39, %29
  %42 = mul nsw i64 %40, %30
  %43 = select i1 %27, i64 %41, i64 0
  %predphi44 = add i64 %vec.phi38, %43
  %44 = select i1 %28, i64 %42, i64 0
  %predphi45 = add i64 %vec.phi39, %44
  %index.next33 = add i64 %index32, 2
  %45 = icmp eq i64 %index.next33, %n.vec31
  br i1 %45, label %middle.block25, label %vector.body27, !llvm.loop !266

middle.block25:                                   ; preds = %pred.load.continue43
  %bin.rdx46 = add i64 %predphi45, %predphi44
  %cmp.n35 = icmp eq i64 %n.vec31, %wide.trip.count.i.i
  br i1 %cmp.n35, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block25
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec31, %middle.block25 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx46, %middle.block25 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 2
  %46 = load i32, i32* %stride2.i.i, align 4, !tbaa !181
  %cmp3.i.i = icmp sgt i32 %46, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %46 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 1
  %47 = load i32, i32* %extent.i.i, align 4, !tbaa !185
  %sub.i.i = add nsw i32 %47, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !267

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block25
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx46, %middle.block25 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check = icmp ult i32 %21, 3
  br i1 %min.iters.check, label %for.body.i13.i.preheader48, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue23, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue23 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue23 ]
  %vec.phi21 = phi i64 [ 0, %vector.ph ], [ %predphi24, %pred.load.continue23 ]
  %induction20 = or i64 %index, 1
  %48 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 2
  %49 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction20, i32 2
  %50 = load i32, i32* %48, align 4, !tbaa !181
  %51 = load i32, i32* %49, align 4, !tbaa !181
  %52 = icmp slt i32 %50, 0
  %53 = icmp slt i32 %51, 0
  %54 = sext i32 %50 to i64
  %55 = sext i32 %51 to i64
  br i1 %52, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %56 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 1
  %57 = load i32, i32* %56, align 4, !tbaa !185
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %58 = phi i32 [ poison, %vector.body ], [ %57, %pred.load.if ]
  br i1 %53, label %pred.load.if22, label %pred.load.continue23

pred.load.if22:                                   ; preds = %pred.load.continue
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction20, i32 1
  %60 = load i32, i32* %59, align 4, !tbaa !185
  br label %pred.load.continue23

pred.load.continue23:                             ; preds = %pred.load.if22, %pred.load.continue
  %61 = phi i32 [ poison, %pred.load.continue ], [ %60, %pred.load.if22 ]
  %62 = add nsw i32 %58, -1
  %63 = add nsw i32 %61, -1
  %64 = sext i32 %62 to i64
  %65 = sext i32 %63 to i64
  %66 = mul nsw i64 %64, %54
  %67 = mul nsw i64 %65, %55
  %68 = select i1 %52, i64 %66, i64 0
  %predphi = add i64 %vec.phi, %68
  %69 = select i1 %53, i64 %67, i64 0
  %predphi24 = add i64 %vec.phi21, %69
  %index.next = add i64 %index, 2
  %70 = icmp eq i64 %index.next, %n.vec
  br i1 %70, label %middle.block, label %vector.body, !llvm.loop !268

middle.block:                                     ; preds = %pred.load.continue23
  %bin.rdx = add i64 %predphi24, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader48

for.body.i13.i.preheader48:                       ; preds = %for.body.i13.i.preheader, %middle.block
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader48, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader48 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader48 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 2
  %71 = load i32, i32* %stride2.i11.i, align 4, !tbaa !181
  %cmp3.i12.i = icmp slt i32 %71, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %71 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 1
  %72 = load i32, i32* %extent.i15.i, align 4, !tbaa !185
  %sub.i16.i = add nsw i32 %72, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !269

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i.neg = xor i64 %index.1.i.i.lcssa, -1
  %sub.i.neg.1 = add i64 %index.1.i21.i.lcssa, %add8.i.i.neg
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.neg.phi = phi i64 [ %sub.i.neg.0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.neg.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 4, i32 1
  %73 = load i8, i8* %bits.i.i, align 1, !tbaa !140
  %conv.i.i = zext i8 %73 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i.neg = mul i64 %div.i.i, %sub.i.neg.phi
  %sub = add i64 %mul.i.neg, %sub89
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.for.cond.cleanup_crit_edge, label %for.body, !llvm.loop !270

if.end41:                                         ; preds = %for.cond.cleanup, %while.body
  %74 = phi i64 [ %.pre93, %for.cond.cleanup ], [ %4, %while.body ]
  %75 = phi i64 [ %.pre92, %for.cond.cleanup ], [ %5, %while.body ]
  %cmp = icmp sgt i64 %75, %74
  %cmp1 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %76 = and i1 %cmp1, %cmp
  br i1 %76, label %while.body, label %while.end42, !llvm.loop !271

while.end42:                                      ; preds = %if.end41, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_set_size(i64 %size) local_unnamed_addr #4 {
entry:
  %cmp = icmp eq i64 %size, 0
  %spec.store.select = select i1 %cmp, i64 1048576, i64 %size
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #13
  store i64 %spec.store.select, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !18
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #13
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_lookup(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers) local_unnamed_addr #4 {
entry:
  %conv = sext i32 %size to i64
  %call = tail call i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %cache_key, i64 %conv) #14
  %0 = and i32 %call, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #13
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry3.0220 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp.not221 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0220, null
  br i1 %cmp.not221, label %for.cond75.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %cmp16215 = icmp sgt i32 %tuple_count, 0
  %1 = sext i32 %tuple_count to i64
  br i1 %cmp16215, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.lr.ph, %if.end73.us
  %entry3.0222.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0.us, %if.end73.us ], [ %entry3.0220, %while.body.lr.ph ]
  %hash.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 6
  %2 = load i32, i32* %hash.us, align 8, !tbaa !250
  %cmp4.us = icmp eq i32 %2, %call
  br i1 %cmp4.us, label %land.lhs.true.us, label %if.end73.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 4
  %3 = load i64, i64* %key_size.us, align 8, !tbaa !249
  %cmp6.us = icmp eq i64 %3, %conv
  br i1 %cmp6.us, label %land.lhs.true7.us, label %if.end73.us

land.lhs.true7.us:                                ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 5
  %4 = load i8*, i8** %key.us, align 8, !tbaa !254
  %call9.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %4, i8* %cache_key, i64 %conv) #14
  br i1 %call9.us, label %land.lhs.true10.us, label %if.end73.us

land.lhs.true10.us:                               ; preds = %land.lhs.true7.us
  %computed_bounds11.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 10
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11.us, align 8, !tbaa !253
  %call12.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %5) #14
  br i1 %call12.us, label %land.lhs.true13.us, label %if.end73.us

land.lhs.true13.us:                               ; preds = %land.lhs.true10.us
  %tuple_count14.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 8
  %6 = load i32, i32* %tuple_count14.us, align 8, !tbaa !228
  %cmp15.us = icmp eq i32 %6, %tuple_count
  br i1 %cmp15.us, label %for.cond.preheader.us, label %if.end73.us

for.cond.preheader.us:                            ; preds = %land.lhs.true13.us
  %buf.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 11
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %for.cond.preheader.us
  %indvars.iv226.us = phi i64 [ 0, %for.cond.preheader.us ], [ %indvars.iv.next227.us, %for.body.us ]
  %arrayidx18.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv226.us
  %7 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx18.us, align 8, !tbaa !10
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf.us, align 8, !tbaa !230
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %8, i64 %indvars.iv226.us, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !180
  %call21.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %7, %struct.halide_dimension_t* %9) #14
  %indvars.iv.next227.us = add nuw nsw i64 %indvars.iv226.us, 1
  %cmp16.us = icmp slt i64 %indvars.iv.next227.us, %1
  %10 = and i1 %cmp16.us, %call21.us
  br i1 %10, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !272

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call21.us, label %if.then23, label %if.end73.us

if.end73.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true13.us, %land.lhs.true10.us, %land.lhs.true7.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 0
  %entry3.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0.us, null
  br i1 %cmp.not.us, label %for.cond75.preheader, label %while.body.us, !llvm.loop !273

for.cond75.preheader:                             ; preds = %if.end73, %if.end73.us, %entry
  %cmp76210 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp76210, label %for.body78.preheader, label %cleanup119

for.body78.preheader:                             ; preds = %for.cond75.preheader
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body78

while.body:                                       ; preds = %while.body.lr.ph, %if.end73
  %entry3.0222 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0, %if.end73 ], [ %entry3.0220, %while.body.lr.ph ]
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 6
  %11 = load i32, i32* %hash, align 8, !tbaa !250
  %cmp4 = icmp eq i32 %11, %call
  br i1 %cmp4, label %land.lhs.true, label %if.end73

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 4
  %12 = load i64, i64* %key_size, align 8, !tbaa !249
  %cmp6 = icmp eq i64 %12, %conv
  br i1 %cmp6, label %land.lhs.true7, label %if.end73

land.lhs.true7:                                   ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 5
  %13 = load i8*, i8** %key, align 8, !tbaa !254
  %call9 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %13, i8* %cache_key, i64 %conv) #14
  br i1 %call9, label %land.lhs.true10, label %if.end73

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %computed_bounds11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 10
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11, align 8, !tbaa !253
  %call12 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %14) #14
  br i1 %call12, label %land.lhs.true13, label %if.end73

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %tuple_count14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 8
  %15 = load i32, i32* %tuple_count14, align 8, !tbaa !228
  %cmp15 = icmp eq i32 %15, %tuple_count
  br i1 %cmp15, label %if.then23, label %if.end73

if.then23:                                        ; preds = %land.lhs.true13, %for.cond.cleanup.us
  %.us-phi = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0222.us, %for.cond.cleanup.us ], [ %entry3.0222, %land.lhs.true13 ]
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp24.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %16
  br i1 %cmp24.not, label %if.end57, label %do.body

do.body:                                          ; preds = %if.then23
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 1
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !264
  %cmp26.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp26.not, label %if.then27, label %do.end

if.then27:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.3.43, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end

do.end:                                           ; preds = %if.then27, %do.body
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 2
  %18 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !248
  %cmp28.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %18, null
  br i1 %cmp28.not, label %do.body33, label %if.then29

if.then29:                                        ; preds = %do.end
  %19 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !264
  %more_recent32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %18, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %19, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent32, align 8, !tbaa !264
  %.pr = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !264
  br label %do.body41

do.body33:                                        ; preds = %do.end
  %20 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp34 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %20, %.us-phi
  br i1 %cmp34, label %do.end38, label %if.then35

if.then35:                                        ; preds = %do.body33
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.44, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end38

do.end38:                                         ; preds = %if.then35, %do.body33
  %21 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !264
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %21, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %do.body41

do.body41:                                        ; preds = %do.end38, %if.then29
  %22 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pr, %if.then29 ], [ %21, %do.end38 ]
  %cmp43.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %22, null
  br i1 %cmp43.not, label %if.then44, label %do.end47

if.then44:                                        ; preds = %do.body41
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.5.45, i64 0, i64 0)) #13
  tail call void @abort() #13
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !264
  br label %do.end47

do.end47:                                         ; preds = %if.then44, %do.body41
  %23 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pre, %if.then44 ], [ %22, %do.body41 ]
  %24 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !248
  %less_recent50 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %23, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %24, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent50, align 8, !tbaa !248
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !264
  %25 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %25, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !248
  %cmp53.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %25, null
  br i1 %cmp53.not, label %if.end56, label %if.then54

if.then54:                                        ; preds = %do.end47
  %more_recent55 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %25, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent55, align 8, !tbaa !264
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %do.end47
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then23
  br i1 %cmp16215, label %for.body62.lr.ph, label %cleanup119.loopexit223

for.body62.lr.ph:                                 ; preds = %if.end57
  %buf66 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 11
  %wide.trip.count230 = zext i32 %tuple_count to i64
  br label %for.body62

for.body62:                                       ; preds = %for.body62, %for.body62.lr.ph
  %indvars.iv228 = phi i64 [ 0, %for.body62.lr.ph ], [ %indvars.iv.next229, %for.body62 ]
  %arrayidx65 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228
  %26 = bitcast %struct.halide_buffer_t** %arrayidx65 to i8**
  %27 = load i8*, i8** %26, align 8, !tbaa !10
  %28 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !230
  %arrayidx68 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %28, i64 %indvars.iv228
  %29 = bitcast %struct.halide_buffer_t* %arrayidx68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %27, i8* nonnull align 8 dereferenceable(56) %29, i64 56, i1 false), !tbaa.struct !260
  %indvars.iv.next229 = add nuw nsw i64 %indvars.iv228, 1
  %exitcond231.not = icmp eq i64 %indvars.iv.next229, %wide.trip.count230
  br i1 %exitcond231.not, label %cleanup119.loopexit223, label %for.body62, !llvm.loop !274

if.end73:                                         ; preds = %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 0
  %entry3.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0, null
  br i1 %cmp.not, label %for.cond75.preheader, label %while.body, !llvm.loop !273

for.body78:                                       ; preds = %for.inc114, %for.body78.preheader
  %indvars.iv = phi i64 [ 0, %for.body78.preheader ], [ %indvars.iv.next, %for.inc114 ]
  %arrayidx81 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %30 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx81, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 5
  %31 = load i32, i32* %dimensions.i.i, align 4, !tbaa !179
  %cmp19.i.i = icmp sgt i32 %31, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body78
  %sub.i.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body78
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 6
  %32 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !180
  %wide.trip.count.i.i = zext i32 %31 to i64
  %min.iters.check38 = icmp ult i32 %31, 3
  br i1 %min.iters.check38, label %for.body.i.i.preheader, label %vector.ph39

vector.ph39:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec41 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body37

vector.body37:                                    ; preds = %pred.load.continue53, %vector.ph39
  %index42 = phi i64 [ 0, %vector.ph39 ], [ %index.next43, %pred.load.continue53 ]
  %vec.phi48 = phi i64 [ 0, %vector.ph39 ], [ %predphi54, %pred.load.continue53 ]
  %vec.phi49 = phi i64 [ 0, %vector.ph39 ], [ %predphi55, %pred.load.continue53 ]
  %induction47 = or i64 %index42, 1
  %33 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index42, i32 2
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction47, i32 2
  %35 = load i32, i32* %33, align 4, !tbaa !181
  %36 = load i32, i32* %34, align 4, !tbaa !181
  %37 = icmp sgt i32 %35, 0
  %38 = icmp sgt i32 %36, 0
  %39 = zext i32 %35 to i64
  %40 = zext i32 %36 to i64
  br i1 %37, label %pred.load.if50, label %pred.load.continue51

pred.load.if50:                                   ; preds = %vector.body37
  %41 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index42, i32 1
  %42 = load i32, i32* %41, align 4, !tbaa !185
  br label %pred.load.continue51

pred.load.continue51:                             ; preds = %pred.load.if50, %vector.body37
  %43 = phi i32 [ poison, %vector.body37 ], [ %42, %pred.load.if50 ]
  br i1 %38, label %pred.load.if52, label %pred.load.continue53

pred.load.if52:                                   ; preds = %pred.load.continue51
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction47, i32 1
  %45 = load i32, i32* %44, align 4, !tbaa !185
  br label %pred.load.continue53

pred.load.continue53:                             ; preds = %pred.load.if52, %pred.load.continue51
  %46 = phi i32 [ poison, %pred.load.continue51 ], [ %45, %pred.load.if52 ]
  %47 = add nsw i32 %43, -1
  %48 = add nsw i32 %46, -1
  %49 = sext i32 %47 to i64
  %50 = sext i32 %48 to i64
  %51 = mul nsw i64 %49, %39
  %52 = mul nsw i64 %50, %40
  %53 = select i1 %37, i64 %51, i64 0
  %predphi54 = add i64 %vec.phi48, %53
  %54 = select i1 %38, i64 %52, i64 0
  %predphi55 = add i64 %vec.phi49, %54
  %index.next43 = add i64 %index42, 2
  %55 = icmp eq i64 %index.next43, %n.vec41
  br i1 %55, label %middle.block35, label %vector.body37, !llvm.loop !275

middle.block35:                                   ; preds = %pred.load.continue53
  %bin.rdx56 = add i64 %predphi55, %predphi54
  %cmp.n45 = icmp eq i64 %n.vec41, %wide.trip.count.i.i
  br i1 %cmp.n45, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block35
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec41, %middle.block35 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx56, %middle.block35 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i.i, i32 2
  %56 = load i32, i32* %stride2.i.i, align 4, !tbaa !181
  %cmp3.i.i = icmp sgt i32 %56, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %56 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i.i, i32 1
  %57 = load i32, i32* %extent.i.i, align 4, !tbaa !185
  %sub.i.i = add nsw i32 %57, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !276

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block35
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx56, %middle.block35 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check = icmp ult i32 %31, 3
  br i1 %min.iters.check, label %for.body.i13.i.preheader58, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue33, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue33 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue33 ]
  %vec.phi31 = phi i64 [ 0, %vector.ph ], [ %predphi34, %pred.load.continue33 ]
  %induction30 = or i64 %index, 1
  %58 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index, i32 2
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction30, i32 2
  %60 = load i32, i32* %58, align 4, !tbaa !181
  %61 = load i32, i32* %59, align 4, !tbaa !181
  %62 = icmp slt i32 %60, 0
  %63 = icmp slt i32 %61, 0
  %64 = sext i32 %60 to i64
  %65 = sext i32 %61 to i64
  br i1 %62, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %66 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index, i32 1
  %67 = load i32, i32* %66, align 4, !tbaa !185
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %68 = phi i32 [ poison, %vector.body ], [ %67, %pred.load.if ]
  br i1 %63, label %pred.load.if32, label %pred.load.continue33

pred.load.if32:                                   ; preds = %pred.load.continue
  %69 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction30, i32 1
  %70 = load i32, i32* %69, align 4, !tbaa !185
  br label %pred.load.continue33

pred.load.continue33:                             ; preds = %pred.load.if32, %pred.load.continue
  %71 = phi i32 [ poison, %pred.load.continue ], [ %70, %pred.load.if32 ]
  %72 = add nsw i32 %68, -1
  %73 = add nsw i32 %71, -1
  %74 = sext i32 %72 to i64
  %75 = sext i32 %73 to i64
  %76 = mul nsw i64 %74, %64
  %77 = mul nsw i64 %75, %65
  %78 = select i1 %62, i64 %76, i64 0
  %predphi = add i64 %vec.phi, %78
  %79 = select i1 %63, i64 %77, i64 0
  %predphi34 = add i64 %vec.phi31, %79
  %index.next = add i64 %index, 2
  %80 = icmp eq i64 %index.next, %n.vec
  br i1 %80, label %middle.block, label %vector.body, !llvm.loop !277

middle.block:                                     ; preds = %pred.load.continue33
  %bin.rdx = add i64 %predphi34, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader58

for.body.i13.i.preheader58:                       ; preds = %for.body.i13.i.preheader, %middle.block
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader58, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader58 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader58 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i10.i, i32 2
  %81 = load i32, i32* %stride2.i11.i, align 4, !tbaa !181
  %cmp3.i12.i = icmp slt i32 %81, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %81 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i10.i, i32 1
  %82 = load i32, i32* %extent.i15.i, align 4, !tbaa !185
  %sub.i16.i = add nsw i32 %82, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !278

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.phi = phi i64 [ %sub.i.0, %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 4, i32 1
  %83 = load i8, i8* %bits.i.i, align 1, !tbaa !140
  %conv.i.i = zext i8 %83 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i.phi
  %add84 = add i64 %mul.i, 32
  %call85 = tail call i8* @halide_malloc(i8* %user_context, i64 %add84) #13
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 2
  store i8* %call85, i8** %host, align 8, !tbaa !176
  %cmp87 = icmp eq i8* %call85, null
  br i1 %cmp87, label %for.cond89.preheader, label %for.inc114

for.cond89.preheader:                             ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %cmp90208.not = icmp eq i64 %indvars.iv, 0
  br i1 %cmp90208.not, label %cleanup119, label %for.body92

for.body92:                                       ; preds = %for.cond89.preheader, %for.body92
  %indvars.iv224 = phi i64 [ %indvars.iv.next225, %for.body92 ], [ %indvars.iv, %for.cond89.preheader ]
  %sub = add nuw nsw i64 %indvars.iv224, 4294967295
  %84 = and i64 %sub, 4294967295
  %arrayidx94 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %84
  %85 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host95 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %85, i64 0, i32 2
  %86 = load i8*, i8** %host95, align 8, !tbaa !176
  %call96 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %86) #14
  %87 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call96 to i8*
  tail call void @halide_free(i8* %user_context, i8* %87) #13
  %88 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host100 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %88, i64 0, i32 2
  store i8* null, i8** %host100, align 8, !tbaa !176
  %89 = icmp sgt i64 %indvars.iv224, 1
  %indvars.iv.next225 = add nsw i64 %indvars.iv224, -1
  br i1 %89, label %for.body92, label %cleanup119, !llvm.loop !279

for.inc114:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %add.ptr = getelementptr inbounds i8, i8* %call85, i64 32
  store i8* %add.ptr, i8** %host, align 8, !tbaa !176
  %call108 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* nonnull %add.ptr) #14
  %hash109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 1
  store i32 %call, i32* %hash109, align 8, !tbaa !280
  %entry110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry110, align 8, !tbaa !282
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %cleanup119, label %for.body78, !llvm.loop !283

cleanup119.loopexit223:                           ; preds = %for.body62, %if.end57
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 7
  %90 = load i32, i32* %in_use_count, align 4, !tbaa !251
  %add = add i32 %90, %tuple_count
  store i32 %add, i32* %in_use_count, align 4, !tbaa !251
  br label %cleanup119

cleanup119:                                       ; preds = %for.inc114, %for.body92, %cleanup119.loopexit223, %for.cond89.preheader, %for.cond75.preheader
  %retval.6 = phi i32 [ 1, %for.cond75.preheader ], [ 0, %cleanup119.loopexit223 ], [ -1, %for.cond89.preheader ], [ -1, %for.body92 ], [ 1, %for.inc114 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #13
  ret i32 %retval.6
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_store(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  %0 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, align 8, !tbaa !10
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %0, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !176
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %1) #14
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 1
  %2 = load i32, i32* %hash, align 8, !tbaa !280
  %3 = and i32 %2, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #13
  %idxprom = zext i32 %3 to i64
  %arrayidx7 = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry6.0228 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %cmp.not229 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0228, null
  br i1 %cmp.not229, label %for.cond61.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %conv10 = sext i32 %size to i64
  %cmp22221 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp22221, label %while.body.us.preheader, label %while.body

while.body.us.preheader:                          ; preds = %while.body.lr.ph
  %4 = zext i32 %tuple_count to i64
  br label %while.body.us

while.body.us:                                    ; preds = %if.end59.us, %while.body.us.preheader
  %entry6.0230.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0.us, %if.end59.us ], [ %entry6.0228, %while.body.us.preheader ]
  %hash8.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 6
  %5 = load i32, i32* %hash8.us, align 8, !tbaa !250
  %cmp9.us = icmp eq i32 %5, %2
  br i1 %cmp9.us, label %land.lhs.true.us, label %if.end59.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 4
  %6 = load i64, i64* %key_size.us, align 8, !tbaa !249
  %cmp11.us = icmp eq i64 %6, %conv10
  br i1 %cmp11.us, label %land.lhs.true12.us, label %if.end59.us

land.lhs.true12.us:                               ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 5
  %7 = load i8*, i8** %key.us, align 8, !tbaa !254
  %call14.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %7, i8* %cache_key, i64 %conv10) #14
  br i1 %call14.us, label %land.lhs.true15.us, label %if.end59.us

land.lhs.true15.us:                               ; preds = %land.lhs.true12.us
  %computed_bounds16.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 10
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16.us, align 8, !tbaa !253
  %call17.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %8) #14
  br i1 %call17.us, label %land.lhs.true18.us, label %if.end59.us

land.lhs.true18.us:                               ; preds = %land.lhs.true15.us
  %tuple_count19.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 8
  %9 = load i32, i32* %tuple_count19.us, align 8, !tbaa !228
  %cmp20.us = icmp eq i32 %9, %tuple_count
  br i1 %cmp20.us, label %for.body.lr.ph.us, label %if.end59.us

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call30.us, label %do.body.us, label %if.end59.us

do.body.us:                                       ; preds = %for.cond.cleanup.us
  %10 = and i8 %spec.select.us, 1
  %tobool41.not.us = icmp eq i8 %10, 0
  br i1 %tobool41.not.us, label %if.then42.us, label %for.body48.us.preheader

for.body48.us.preheader:                          ; preds = %if.then42.us, %do.body.us
  %indvars.iv.next245.1 = add nuw nsw i64 0, 1
  %arrayidx50.us.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 0
  br label %for.body48.us

if.then42.us:                                     ; preds = %do.body.us
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.9.46, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %for.body48.us.preheader

if.end59.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true18.us, %land.lhs.true15.us, %land.lhs.true12.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 0
  %entry6.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0.us, null
  br i1 %cmp.not.us, label %for.cond61.preheader, label %while.body.us, !llvm.loop !284

for.body48.us:                                    ; preds = %for.body48.us.for.body48.us_crit_edge, %for.body48.us.preheader
  %arrayidx50.us.phi = phi %struct.halide_buffer_t** [ %arrayidx50.us.0, %for.body48.us.for.body48.us_crit_edge ], [ %arrayidx50.us.1, %for.body48.us.preheader ]
  %indvars.iv.next245.phi = phi i64 [ %indvars.iv.next245.0, %for.body48.us.for.body48.us_crit_edge ], [ %indvars.iv.next245.1, %for.body48.us.preheader ]
  %11 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx50.us.phi, align 8, !tbaa !10
  %host51.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %11, i64 0, i32 2
  %12 = load i8*, i8** %host51.us, align 8, !tbaa !176
  %call52.us = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %12) #14
  %entry53.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call52.us, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry53.us, align 8, !tbaa !282
  %exitcond247.not = icmp eq i64 %indvars.iv.next245.phi, %4
  br i1 %exitcond247.not, label %cleanup132, label %for.body48.us.for.body48.us_crit_edge, !llvm.loop !285

for.body48.us.for.body48.us_crit_edge:            ; preds = %for.body48.us
  %indvars.iv.next245.0 = add nuw nsw i64 %indvars.iv.next245.phi, 1
  %arrayidx50.us.0 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next245.phi
  br label %for.body48.us

for.body.us:                                      ; preds = %for.body.lr.ph.us, %for.body.us
  %13 = phi %struct.halide_buffer_t* [ %.pre, %for.body.lr.ph.us ], [ %16, %for.body.us ]
  %indvars.iv242 = phi i64 [ 0, %for.body.lr.ph.us ], [ %indvars.iv.next243, %for.body.us ]
  %no_host_pointers_equal.0222.us = phi i8 [ 1, %for.body.lr.ph.us ], [ %spec.select.us, %for.body.us ]
  %arrayidx24.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv242
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx24.us, align 8, !tbaa !10
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %13, i64 %indvars.iv242, i32 6
  %15 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !180
  %call30.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %14, %struct.halide_dimension_t* %15) #14
  %16 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !230
  %host35.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %16, i64 %indvars.iv242, i32 2
  %17 = load i8*, i8** %host35.us, align 8, !tbaa !176
  %host36.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %14, i64 0, i32 2
  %18 = load i8*, i8** %host36.us, align 8, !tbaa !176
  %cmp37.us = icmp eq i8* %17, %18
  %spec.select.us = select i1 %cmp37.us, i8 0, i8 %no_host_pointers_equal.0222.us
  %indvars.iv.next243 = add nuw nsw i64 %indvars.iv242, 1
  %cmp22.us = icmp ult i64 %indvars.iv.next243, %4
  %19 = and i1 %cmp22.us, %call30.us
  br i1 %19, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !286

for.body.lr.ph.us:                                ; preds = %land.lhs.true18.us
  %buf27.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 11
  %.pre = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !230
  br label %for.body.us

for.cond61.preheader:                             ; preds = %if.end59, %if.end59.us, %entry
  %cmp62218 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp62218, label %for.body64.preheader, label %for.cond.cleanup63

for.body64.preheader:                             ; preds = %for.cond61.preheader
  %wide.trip.count240 = zext i32 %tuple_count to i64
  br label %for.body64

while.body:                                       ; preds = %while.body.lr.ph, %if.end59
  %entry6.0230 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0, %if.end59 ], [ %entry6.0228, %while.body.lr.ph ]
  %hash8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 6
  %20 = load i32, i32* %hash8, align 8, !tbaa !250
  %cmp9 = icmp eq i32 %20, %2
  br i1 %cmp9, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 4
  %21 = load i64, i64* %key_size, align 8, !tbaa !249
  %cmp11 = icmp eq i64 %21, %conv10
  br i1 %cmp11, label %land.lhs.true12, label %if.end59

land.lhs.true12:                                  ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 5
  %22 = load i8*, i8** %key, align 8, !tbaa !254
  %call14 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %22, i8* %cache_key, i64 %conv10) #14
  br i1 %call14, label %land.lhs.true15, label %if.end59

land.lhs.true15:                                  ; preds = %land.lhs.true12
  %computed_bounds16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 10
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16, align 8, !tbaa !253
  %call17 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %23) #14
  br i1 %call17, label %land.lhs.true18, label %if.end59

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %tuple_count19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 8
  %24 = load i32, i32* %tuple_count19, align 8, !tbaa !228
  %cmp20 = icmp eq i32 %24, %tuple_count
  br i1 %cmp20, label %cleanup132, label %if.end59

if.end59:                                         ; preds = %land.lhs.true18, %land.lhs.true15, %land.lhs.true12, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 0
  %entry6.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0, null
  br i1 %cmp.not, label %for.cond61.preheader, label %while.body, !llvm.loop !284

for.cond.cleanup63:                               ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.cond61.preheader
  %added_size.0.lcssa = phi i64 [ 0, %for.cond61.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %25 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  %add73 = add i64 %25, %added_size.0.lcssa
  store i64 %add73, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #14
  %call74 = tail call i8* @halide_malloc(i8* null, i64 96) #13
  %tobool75.not = icmp eq i8* %call74, null
  br i1 %tobool75.not, label %if.then83, label %if.then76

for.body64:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body64.preheader
  %indvars.iv238 = phi i64 [ 0, %for.body64.preheader ], [ %indvars.iv.next239, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %added_size.0219 = phi i64 [ 0, %for.body64.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %arrayidx67 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv238
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx67, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 5
  %27 = load i32, i32* %dimensions.i.i, align 4, !tbaa !179
  %cmp19.i.i = icmp sgt i32 %27, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body64
  %sub.i.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body64
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 6
  %28 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !180
  %wide.trip.count.i.i = zext i32 %27 to i64
  %min.iters.check24 = icmp ult i32 %27, 3
  br i1 %min.iters.check24, label %for.body.i.i.preheader, label %vector.ph25

vector.ph25:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec27 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body23

vector.body23:                                    ; preds = %pred.load.continue39, %vector.ph25
  %index28 = phi i64 [ 0, %vector.ph25 ], [ %index.next29, %pred.load.continue39 ]
  %vec.phi34 = phi i64 [ 0, %vector.ph25 ], [ %predphi40, %pred.load.continue39 ]
  %vec.phi35 = phi i64 [ 0, %vector.ph25 ], [ %predphi41, %pred.load.continue39 ]
  %induction33 = or i64 %index28, 1
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index28, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction33, i32 2
  %31 = load i32, i32* %29, align 4, !tbaa !181
  %32 = load i32, i32* %30, align 4, !tbaa !181
  %33 = icmp sgt i32 %31, 0
  %34 = icmp sgt i32 %32, 0
  %35 = zext i32 %31 to i64
  %36 = zext i32 %32 to i64
  br i1 %33, label %pred.load.if36, label %pred.load.continue37

pred.load.if36:                                   ; preds = %vector.body23
  %37 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index28, i32 1
  %38 = load i32, i32* %37, align 4, !tbaa !185
  br label %pred.load.continue37

pred.load.continue37:                             ; preds = %pred.load.if36, %vector.body23
  %39 = phi i32 [ poison, %vector.body23 ], [ %38, %pred.load.if36 ]
  br i1 %34, label %pred.load.if38, label %pred.load.continue39

pred.load.if38:                                   ; preds = %pred.load.continue37
  %40 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction33, i32 1
  %41 = load i32, i32* %40, align 4, !tbaa !185
  br label %pred.load.continue39

pred.load.continue39:                             ; preds = %pred.load.if38, %pred.load.continue37
  %42 = phi i32 [ poison, %pred.load.continue37 ], [ %41, %pred.load.if38 ]
  %43 = add nsw i32 %39, -1
  %44 = add nsw i32 %42, -1
  %45 = sext i32 %43 to i64
  %46 = sext i32 %44 to i64
  %47 = mul nsw i64 %45, %35
  %48 = mul nsw i64 %46, %36
  %49 = select i1 %33, i64 %47, i64 0
  %predphi40 = add i64 %vec.phi34, %49
  %50 = select i1 %34, i64 %48, i64 0
  %predphi41 = add i64 %vec.phi35, %50
  %index.next29 = add i64 %index28, 2
  %51 = icmp eq i64 %index.next29, %n.vec27
  br i1 %51, label %middle.block21, label %vector.body23, !llvm.loop !287

middle.block21:                                   ; preds = %pred.load.continue39
  %bin.rdx42 = add i64 %predphi41, %predphi40
  %cmp.n31 = icmp eq i64 %n.vec27, %wide.trip.count.i.i
  br i1 %cmp.n31, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block21
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec27, %middle.block21 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx42, %middle.block21 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 2
  %52 = load i32, i32* %stride2.i.i, align 4, !tbaa !181
  %cmp3.i.i = icmp sgt i32 %52, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %52 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 1
  %53 = load i32, i32* %extent.i.i, align 4, !tbaa !185
  %sub.i.i = add nsw i32 %53, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !288

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block21
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx42, %middle.block21 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check = icmp ult i32 %27, 3
  br i1 %min.iters.check, label %for.body.i13.i.preheader44, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue19, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue19 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue19 ]
  %vec.phi17 = phi i64 [ 0, %vector.ph ], [ %predphi20, %pred.load.continue19 ]
  %induction16 = or i64 %index, 1
  %54 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 2
  %55 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction16, i32 2
  %56 = load i32, i32* %54, align 4, !tbaa !181
  %57 = load i32, i32* %55, align 4, !tbaa !181
  %58 = icmp slt i32 %56, 0
  %59 = icmp slt i32 %57, 0
  %60 = sext i32 %56 to i64
  %61 = sext i32 %57 to i64
  br i1 %58, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %62 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 1
  %63 = load i32, i32* %62, align 4, !tbaa !185
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %64 = phi i32 [ poison, %vector.body ], [ %63, %pred.load.if ]
  br i1 %59, label %pred.load.if18, label %pred.load.continue19

pred.load.if18:                                   ; preds = %pred.load.continue
  %65 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction16, i32 1
  %66 = load i32, i32* %65, align 4, !tbaa !185
  br label %pred.load.continue19

pred.load.continue19:                             ; preds = %pred.load.if18, %pred.load.continue
  %67 = phi i32 [ poison, %pred.load.continue ], [ %66, %pred.load.if18 ]
  %68 = add nsw i32 %64, -1
  %69 = add nsw i32 %67, -1
  %70 = sext i32 %68 to i64
  %71 = sext i32 %69 to i64
  %72 = mul nsw i64 %70, %60
  %73 = mul nsw i64 %71, %61
  %74 = select i1 %58, i64 %72, i64 0
  %predphi = add i64 %vec.phi, %74
  %75 = select i1 %59, i64 %73, i64 0
  %predphi20 = add i64 %vec.phi17, %75
  %index.next = add i64 %index, 2
  %76 = icmp eq i64 %index.next, %n.vec
  br i1 %76, label %middle.block, label %vector.body, !llvm.loop !289

middle.block:                                     ; preds = %pred.load.continue19
  %bin.rdx = add i64 %predphi20, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader44

for.body.i13.i.preheader44:                       ; preds = %for.body.i13.i.preheader, %middle.block
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader44, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader44 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader44 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 2
  %77 = load i32, i32* %stride2.i11.i, align 4, !tbaa !181
  %cmp3.i12.i = icmp slt i32 %77, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %77 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 1
  %78 = load i32, i32* %extent.i15.i, align 4, !tbaa !185
  %sub.i16.i = add nsw i32 %78, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !290

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.phi = phi i64 [ %sub.i.0, %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 4, i32 1
  %79 = load i8, i8* %bits.i.i, align 1, !tbaa !140
  %conv.i.i = zext i8 %79 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i.phi
  %add = add i64 %mul.i, %added_size.0219
  %indvars.iv.next239 = add nuw nsw i64 %indvars.iv238, 1
  %exitcond241.not = icmp eq i64 %indvars.iv.next239, %wide.trip.count240
  br i1 %exitcond241.not, label %for.cond.cleanup63, label %for.body64, !llvm.loop !291

if.then76:                                        ; preds = %for.cond.cleanup63
  %80 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"*
  %conv77 = sext i32 %size to i64
  %call79 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %80, i8* %cache_key, i64 %conv77, i32 %2, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** nonnull %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) #14
  br i1 %call79, label %if.end101, label %if.then83

if.then83:                                        ; preds = %if.then76, %for.cond.cleanup63
  %81 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  %sub = sub i64 %81, %added_size.0.lcssa
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !18
  br i1 %cmp62218, label %for.body88.preheader, label %for.cond.cleanup87

for.body88.preheader:                             ; preds = %if.then83
  %wide.trip.count = zext i32 %tuple_count to i64
  %indvars.iv.next.0 = add nuw nsw i64 0, 1
  %arrayidx90.0 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 0
  br label %for.body88

for.cond.cleanup87:                               ; preds = %for.body88, %if.then83
  br i1 %tobool75.not, label %cleanup132, label %if.then99

for.body88:                                       ; preds = %for.body88.for.body88_crit_edge, %for.body88.preheader
  %arrayidx90.phi = phi %struct.halide_buffer_t** [ %arrayidx90.0, %for.body88.preheader ], [ %arrayidx90.1, %for.body88.for.body88_crit_edge ]
  %indvars.iv.next.phi = phi i64 [ %indvars.iv.next.0, %for.body88.preheader ], [ %indvars.iv.next.1, %for.body88.for.body88_crit_edge ]
  %82 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx90.phi, align 8, !tbaa !10
  %host91 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %82, i64 0, i32 2
  %83 = load i8*, i8** %host91, align 8, !tbaa !176
  %call92 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %83) #14
  %entry93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call92, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry93, align 8, !tbaa !282
  %exitcond.not = icmp eq i64 %indvars.iv.next.phi, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup87, label %for.body88.for.body88_crit_edge, !llvm.loop !292

for.body88.for.body88_crit_edge:                  ; preds = %for.body88
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.next.phi, 1
  %arrayidx90.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next.phi
  br label %for.body88

if.then99:                                        ; preds = %for.cond.cleanup87
  tail call void @halide_free(i8* %user_context, i8* nonnull %call74) #13
  br label %cleanup132

if.end101:                                        ; preds = %if.then76
  %84 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %next104 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %84, %"struct.Halide::Runtime::Internal::CacheEntry"** %next104, align 8, !tbaa !225
  %85 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %less_recent = getelementptr inbounds i8, i8* %call74, i64 16
  %86 = bitcast i8* %less_recent to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %85, %"struct.Halide::Runtime::Internal::CacheEntry"** %86, align 8, !tbaa !248
  %cmp105.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %85, null
  br i1 %cmp105.not, label %if.end107, label %if.then106

if.then106:                                       ; preds = %if.end101
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %85, i64 0, i32 1
  %87 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent to i8**
  store i8* %call74, i8** %87, align 8, !tbaa !264
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.end101
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE to i8**), align 8, !tbaa !10
  %88 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp108 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %88, null
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.end107
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE to i8**), align 8, !tbaa !10
  br label %if.end110

if.end110:                                        ; preds = %if.then109, %if.end107
  %89 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7 to i8**
  store i8* %call74, i8** %89, align 8, !tbaa !10
  %in_use_count = getelementptr inbounds i8, i8* %call74, i64 52
  %90 = bitcast i8* %in_use_count to i32*
  store i32 %tuple_count, i32* %90, align 4, !tbaa !251
  br i1 %cmp62218, label %for.body117.preheader, label %cleanup132

for.body117.preheader:                            ; preds = %if.end110
  %wide.trip.count236 = zext i32 %tuple_count to i64
  %indvars.iv.next235.0 = add nuw nsw i64 0, 1
  %arrayidx119.0 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 0
  br label %for.body117

for.body117:                                      ; preds = %for.body117.for.body117_crit_edge, %for.body117.preheader
  %arrayidx119.phi = phi %struct.halide_buffer_t** [ %arrayidx119.0, %for.body117.preheader ], [ %arrayidx119.1, %for.body117.for.body117_crit_edge ]
  %indvars.iv.next235.phi = phi i64 [ %indvars.iv.next235.0, %for.body117.preheader ], [ %indvars.iv.next235.1, %for.body117.for.body117_crit_edge ]
  %91 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx119.phi, align 8, !tbaa !10
  %host120 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %91, i64 0, i32 2
  %92 = load i8*, i8** %host120, align 8, !tbaa !176
  %call121 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %92) #14
  %93 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call121 to i8**
  store i8* %call74, i8** %93, align 8, !tbaa !282
  %exitcond237.not = icmp eq i64 %indvars.iv.next235.phi, %wide.trip.count236
  br i1 %exitcond237.not, label %cleanup132, label %for.body117.for.body117_crit_edge, !llvm.loop !293

for.body117.for.body117_crit_edge:                ; preds = %for.body117
  %indvars.iv.next235.1 = add nuw nsw i64 %indvars.iv.next235.phi, 1
  %arrayidx119.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next235.phi
  br label %for.body117

cleanup132:                                       ; preds = %land.lhs.true18, %for.body48.us, %for.body117, %if.end110, %if.then99, %for.cond.cleanup87
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #13
  ret i32 0
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_release(i8* %user_context, i8* %host) local_unnamed_addr #4 {
entry:
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) #14
  %entry2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry2, align 8, !tbaa !282
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call to i8*
  tail call void @halide_free(i8* %user_context, i8* %1) #13
  br label %if.end6

if.else:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #13
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %0, i64 0, i32 7
  %2 = load i32, i32* %in_use_count, align 4, !tbaa !251
  %cmp3.not = icmp eq i32 %2, 0
  br i1 %cmp3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.else
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.12.47, i64 0, i64 0)) #13
  tail call void @abort() #13
  %.pre = load i32, i32* %in_use_count, align 4, !tbaa !251
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.else
  %3 = phi i32 [ %.pre, %if.then4 ], [ %2, %if.else ]
  %dec = add i32 %3, -1
  store i32 %dec, i32* %in_use_count, align 4, !tbaa !251
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #13
  br label %if.end6

if.end6:                                          ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_evict(i8* %user_context, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #13
  br label %for.body

for.cond.cleanup:                                 ; preds = %if.end25
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #13
  ret void

for.body:                                         ; preds = %if.end25, %entry
  %__begin1.059 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %if.end25 ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, align 8, !tbaa !10
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not, label %if.end25, label %while.body

while.body:                                       ; preds = %for.body, %if.end24
  %prev.058 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.1, %if.end24 ], [ %__begin1.059, %for.body ]
  %entry1.056 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %if.end24 ], [ %0, %for.body ]
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next4, align 8, !tbaa !225
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 13
  %2 = load i8, i8* %has_eviction_key, align 8, !tbaa !258, !range !17
  %tobool.not = icmp eq i8 %2, 0
  br i1 %tobool.not, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %eviction_key5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 12
  %3 = load i64, i64* %eviction_key5, align 8, !tbaa !259
  %cmp6 = icmp eq i64 %3, %eviction_key
  br i1 %cmp6, label %if.then7, label %if.end24

if.then7:                                         ; preds = %land.lhs.true
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %1, %"struct.Halide::Runtime::Internal::CacheEntry"** %prev.058, align 8, !tbaa !10
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 1
  %4 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !264
  %cmp8.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %4, null
  %less_recent12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 2
  %5 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !248
  br i1 %cmp8.not, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.then7
  %less_recent11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %4, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent11, align 8, !tbaa !248
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !248
  br label %if.end

if.else:                                          ; preds = %if.then7
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then9
  %6 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %5, %if.else ], [ %.pre, %if.then9 ]
  %cmp14.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %more_recent18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 1
  %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink = select i1 %cmp14.not, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %4, %"struct.Halide::Runtime::Internal::CacheEntry"** %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink, align 8, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.056) #14
  %7 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056 to i8*
  tail call void @halide_free(i8* %user_context, i8* nonnull %7) #13
  br label %if.end24

if.end24:                                         ; preds = %if.end, %land.lhs.true, %while.body
  %prev.1 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.058, %if.end ], [ %next4, %land.lhs.true ], [ %next4, %while.body ]
  %cmp3.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp3.not, label %if.end25, label %while.body, !llvm.loop !294

if.end25:                                         ; preds = %if.end24, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i64 0, i64 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !14
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !14
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !14
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i64 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i64 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !14
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %entry.for.body_crit_edge, label %for.cond.cleanup

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw nsw i32 0, 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i64 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %arg.addr.017 = phi i64 [ %div, %for.body.for.body_crit_edge ], [ %arg, %entry.for.body_crit_edge ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body.for.body_crit_edge ], [ %add.ptr, %entry.for.body_crit_edge ]
  %inc.phi = phi i32 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i64 -1
  %cmp = icmp slt i32 %inc.phi, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body.for.body_crit_edge, label %for.cond.cleanup, !llvm.loop !295

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw nsw i32 %inc.phi, 1
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i64 1
  store i8 45, i8* %dst, align 1, !tbaa !14
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #14
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !168
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !18
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i64 8) #13
  %2 = load i64, i64* %bits, align 8, !tbaa !18
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.57, i64 0, i64 0)) #14
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.58, i64 0, i64 0)) #14
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.59, i64 0, i64 0)) #14
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.60, i64 0, i64 0)) #14
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.61, i64 0, i64 0)) #14
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.62, i64 0, i64 0)) #14
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.63, i64 0, i64 0)) #14
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.64, i64 0, i64 0)) #14
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9.65, i64 0, i64 0)) #14
  %4 = load double, double* %arg.addr, align 8, !tbaa !168
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !168
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !168
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.condthread-pre-split.while.body_crit_edge, label %while.cond40thread-pre-split

while.condthread-pre-split.while.body_crit_edge:  ; preds = %while.condthread-pre-split
  %dec.1 = add nsw i32 0, -1
  br label %while.body

while.body:                                       ; preds = %while.condthread-pre-split.while.body_crit_edge, %while.body.while.body_crit_edge
  %dec.phi = phi i32 [ %dec.0, %while.body.while.body_crit_edge ], [ %dec.1, %while.condthread-pre-split.while.body_crit_edge ]
  %5 = phi double [ %mul, %while.body.while.body_crit_edge ], [ %.pr, %while.condthread-pre-split.while.body_crit_edge ]
  %mul = fmul double %5, 1.000000e+01
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body.while.body_crit_edge, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !296

while.body.while.body_crit_edge:                  ; preds = %while.body
  %dec.0 = add nsw i32 %dec.phi, -1
  br label %while.body

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !168
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr261 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec.phi, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr261, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr261, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !297

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !168
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr261, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #14
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #14
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11.67, i64 0, i64 0)) #14
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.68, i64 0, i64 0)) #14
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59262 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59262, i32 2) #14
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #14
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %integer_part.0 = select i1 %cmp72, i64 0, i64 %shr77
  %sub81 = select i1 %cmp72, i64 0, i64 %shl80
  %f.0.in = sub i64 %add67, %sub81
  %f.0 = uitofp i64 %f.0.in to double
  %conv84258 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84258, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond259 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond259 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select260 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.then71, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.then71 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.then71 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select260, %if.then71 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #14
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader, label %for.cond.cleanup

for.cond111.preheader:                            ; preds = %if.end104, %if.end137
  %i.0270 = phi i32 [ %inc139, %if.end137 ], [ 0, %if.end104 ]
  %int_part_ptr.0268 = phi i8* [ %int_part_ptr.1, %if.end137 ], [ %add.ptr105, %if.end104 ]
  %cmp113.not264 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not264, label %if.end137, label %for.body115

for.cond.cleanup:                                 ; preds = %if.end137, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1, %if.end137 ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #14
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #14
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0266.pn = phi i8* [ %p.0266, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0265 = phi i32 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0266 = getelementptr inbounds i8, i8* %p.0266.pn, i64 -1
  %9 = load i8, i8* %p.0266, align 1, !tbaa !14
  %sub117 = add i8 %9, -48
  %conv119 = sext i8 %sub117 to i32
  %mul120 = shl nsw i32 %conv119, 1
  %add121 = or i32 %mul120, %carry.0265
  %10 = trunc i32 %add121 to i8
  %cmp124 = icmp sgt i8 %10, 9
  %sub127 = add nsw i32 %add121, 246
  %carry.1 = zext i1 %cmp124 to i32
  %new_digit.0.in = select i1 %cmp124, i32 %sub127, i32 %add121
  %11 = trunc i32 %new_digit.0.in to i8
  %conv133 = add i8 %11, 48
  store i8 %conv133, i8* %p.0266, align 1, !tbaa !14
  %cmp113.not = icmp eq i8* %p.0266, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !298

if.then135:                                       ; preds = %for.cond.cleanup114
  %incdec.ptr136 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i64 -1
  store i8 49, i8* %incdec.ptr136, align 1, !tbaa !14
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %incdec.ptr136, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %inc139 = add nuw nsw i32 %i.0270, 1
  %exitcond.not = icmp eq i32 %inc139, %integer_exponent.0
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond111.preheader, !llvm.loop !299

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i64 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 18
  %1 = ptrtoint i8* %arg to i64
  %and = and i64 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !14
  %shr = lshr i64 %1, 4
  %tobool.not = icmp eq i64 %shr, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %and.1 = and i64 %shr, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.1
  %3 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 16
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !14
  %shr.1 = lshr i64 %1, 8
  %tobool.not.1 = icmp eq i64 %shr.1, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.14, %for.cond.13, %for.cond.12, %for.cond.11, %for.cond.10, %for.cond.9, %for.cond.8, %for.cond.7, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ], [ %incdec.ptr.7, %for.cond.7 ], [ %incdec.ptr.8, %for.cond.8 ], [ %incdec.ptr.9, %for.cond.9 ], [ %incdec.ptr.10, %for.cond.10 ], [ %incdec.ptr.11, %for.cond.11 ], [ %incdec.ptr.12, %for.cond.12 ], [ %incdec.ptr.13, %for.cond.13 ], [ %incdec.ptr.14, %for.cond.14 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ], [ %incdec.ptr.8, %for.cond.7 ], [ %incdec.ptr.9, %for.cond.8 ], [ %incdec.ptr.10, %for.cond.9 ], [ %incdec.ptr.11, %for.cond.10 ], [ %incdec.ptr.12, %for.cond.11 ], [ %incdec.ptr.13, %for.cond.12 ], [ %incdec.ptr.14, %for.cond.13 ], [ %incdec.ptr.15, %for.cond.14 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i64 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !14
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !14
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #14
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %and.2 = and i64 %shr.1, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.2
  %4 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 15
  store i8 %4, i8* %incdec.ptr.1, align 1, !tbaa !14
  %shr.2 = lshr i64 %1, 12
  %tobool.not.2 = icmp eq i64 %shr.2, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %and.3 = and i64 %shr.2, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.3
  %5 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 14
  store i8 %5, i8* %incdec.ptr.2, align 1, !tbaa !14
  %shr.3 = lshr i64 %1, 16
  %tobool.not.3 = icmp eq i64 %shr.3, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %and.4 = and i64 %shr.3, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.4
  %6 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 13
  store i8 %6, i8* %incdec.ptr.3, align 1, !tbaa !14
  %shr.4 = lshr i64 %1, 20
  %tobool.not.4 = icmp eq i64 %shr.4, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %and.5 = and i64 %shr.4, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.5
  %7 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 12
  store i8 %7, i8* %incdec.ptr.4, align 1, !tbaa !14
  %shr.5 = lshr i64 %1, 24
  %tobool.not.5 = icmp eq i64 %shr.5, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %and.6 = and i64 %shr.5, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.6
  %8 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 11
  store i8 %8, i8* %incdec.ptr.5, align 1, !tbaa !14
  %shr.6 = lshr i64 %1, 28
  %tobool.not.6 = icmp eq i64 %shr.6, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %and.7 = and i64 %shr.6, 15
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.7
  %9 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 10
  store i8 %9, i8* %incdec.ptr.6, align 1, !tbaa !14
  %shr.7 = lshr i64 %1, 32
  %tobool.not.7 = icmp eq i64 %shr.7, 0
  br i1 %tobool.not.7, label %cleanup, label %for.cond.7

for.cond.7:                                       ; preds = %for.cond.6
  %and.8 = and i64 %shr.7, 15
  %arrayidx.8 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.8
  %10 = load i8, i8* %arrayidx.8, align 1, !tbaa !14
  %incdec.ptr.8 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 9
  store i8 %10, i8* %incdec.ptr.7, align 1, !tbaa !14
  %shr.8 = lshr i64 %1, 36
  %tobool.not.8 = icmp eq i64 %shr.8, 0
  br i1 %tobool.not.8, label %cleanup, label %for.cond.8

for.cond.8:                                       ; preds = %for.cond.7
  %and.9 = and i64 %shr.8, 15
  %arrayidx.9 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.9
  %11 = load i8, i8* %arrayidx.9, align 1, !tbaa !14
  %incdec.ptr.9 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 8
  store i8 %11, i8* %incdec.ptr.8, align 1, !tbaa !14
  %shr.9 = lshr i64 %1, 40
  %tobool.not.9 = icmp eq i64 %shr.9, 0
  br i1 %tobool.not.9, label %cleanup, label %for.cond.9

for.cond.9:                                       ; preds = %for.cond.8
  %and.10 = and i64 %shr.9, 15
  %arrayidx.10 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.10
  %12 = load i8, i8* %arrayidx.10, align 1, !tbaa !14
  %incdec.ptr.10 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 7
  store i8 %12, i8* %incdec.ptr.9, align 1, !tbaa !14
  %shr.10 = lshr i64 %1, 44
  %tobool.not.10 = icmp eq i64 %shr.10, 0
  br i1 %tobool.not.10, label %cleanup, label %for.cond.10

for.cond.10:                                      ; preds = %for.cond.9
  %and.11 = and i64 %shr.10, 15
  %arrayidx.11 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.11
  %13 = load i8, i8* %arrayidx.11, align 1, !tbaa !14
  %incdec.ptr.11 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 6
  store i8 %13, i8* %incdec.ptr.10, align 1, !tbaa !14
  %shr.11 = lshr i64 %1, 48
  %tobool.not.11 = icmp eq i64 %shr.11, 0
  br i1 %tobool.not.11, label %cleanup, label %for.cond.11

for.cond.11:                                      ; preds = %for.cond.10
  %and.12 = and i64 %shr.11, 15
  %arrayidx.12 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.12
  %14 = load i8, i8* %arrayidx.12, align 1, !tbaa !14
  %incdec.ptr.12 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 5
  store i8 %14, i8* %incdec.ptr.11, align 1, !tbaa !14
  %shr.12 = lshr i64 %1, 52
  %tobool.not.12 = icmp eq i64 %shr.12, 0
  br i1 %tobool.not.12, label %cleanup, label %for.cond.12

for.cond.12:                                      ; preds = %for.cond.11
  %and.13 = and i64 %shr.12, 15
  %arrayidx.13 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.13
  %15 = load i8, i8* %arrayidx.13, align 1, !tbaa !14
  %incdec.ptr.13 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 4
  store i8 %15, i8* %incdec.ptr.12, align 1, !tbaa !14
  %shr.13 = lshr i64 %1, 56
  %tobool.not.13 = icmp eq i64 %shr.13, 0
  br i1 %tobool.not.13, label %cleanup, label %for.cond.13

for.cond.13:                                      ; preds = %for.cond.12
  %and.14 = and i64 %shr.13, 15
  %arrayidx.14 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.14
  %16 = load i8, i8* %arrayidx.14, align 1, !tbaa !14
  %incdec.ptr.14 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 3
  store i8 %16, i8* %incdec.ptr.13, align 1, !tbaa !14
  %shr.14 = lshr i64 %1, 60
  %tobool.not.14 = icmp eq i64 %shr.14, 0
  br i1 %tobool.not.14, label %cleanup, label %for.cond.14

for.cond.14:                                      ; preds = %for.cond.13
  %arrayidx.15 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %shr.14
  %17 = load i8, i8* %arrayidx.15, align 1, !tbaa !14
  %incdec.ptr.15 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 2
  store i8 %17, i8* %incdec.ptr.14, align 1, !tbaa !14
  br label %cleanup
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !300
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i64
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i64 0, i64 %2
  %switch.load = load i8*, i8** %switch.gep, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18.72, i64 0, i64 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #14
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !140
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #14
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !301
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19.77, i64 0, i64 0)) #14
  %5 = load i16, i16* %lanes, align 2, !tbaa !301
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #14
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20.78, i64 0, i64 0)) #14
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21.79, i64 0, i64 0)) #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !178
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #14
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !302
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #14
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %3 = load i8*, i8** %host, align 8, !tbaa !176
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #14
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !303
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #14
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #14
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !179
  %cmp1179 = icmp sgt i32 %5, 0
  br i1 %cmp1179, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call26, %for.body ]
  %call27 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #14
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %dst.addr.080 = phi i8* [ %call10, %for.body.lr.ph ], [ %call26, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.080, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.82, i64 0, i64 0)) #14
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !180
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 %indvars.iv, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !217
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #14
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !180
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 %indvars.iv, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !185
  %conv18 = sext i32 %9 to i64
  %call19 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv18, i32 1) #14
  %call20 = tail call i8* @halide_string_to_string(i8* %call19, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !180
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i64 %indvars.iv, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !181
  %conv24 = sext i32 %11 to i64
  %call25 = tail call i8* @halide_int64_to_string(i8* %call20, i8* %end, i64 %conv24, i32 1) #14
  %call26 = tail call i8* @halide_string_to_string(i8* %call25, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24.83, i64 0, i64 0)) #14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !179
  %13 = sext i32 %12 to i64
  %cmp11 = icmp slt i64 %indvars.iv.next, %13
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !304

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call27, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 32
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #13
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #13
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 8, !tbaa !305
  %call = tail call i32 %0(i8* %user_context) #13
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !307

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15, !range !17
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #13
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i64 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !308
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #13
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !303
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 8, !tbaa !311
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !303
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !303
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 8, !tbaa !313
  %call = tail call i32 %1(i8* %user_context) #13
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.88, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.89, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !302
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !178
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !302
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.90, i64 0, i64 0)) #13
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #14
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !303
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 8, !tbaa !314
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !303
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !303
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.91, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !302
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.92, i64 0, i64 0)) #13
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #13
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 8, !tbaa !316
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %10() #13
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.93, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !302
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 8, !tbaa !318
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.96, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !302
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #13
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 8, !tbaa !319
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %10() #13
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !178
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.22.97, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !303
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !303
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.98, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !302
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.99, i64 0, i64 0)) #13
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #13
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 8, !tbaa !320
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %10() #13
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26.100, i64 0, i64 0)) #13
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27.101, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !302
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #13
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 8, !tbaa !321
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %10() #13
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !178
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.28.102, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %12 = load i8*, i8** %host, align 8, !tbaa !176
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #13
  store i8* null, i8** %host, align 8, !tbaa !176
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !303
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !303
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29.103, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !179
  %cmp19.i.i = icmp sgt i32 %4, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %if.end
  %sub.i.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !180
  %wide.trip.count.i.i = zext i32 %4 to i64
  %min.iters.check = icmp ult i32 %4, 3
  br i1 %min.iters.check, label %for.body.i.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body.lr.ph.i.i
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue6, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue6 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue6 ]
  %vec.phi4 = phi i64 [ 0, %vector.ph ], [ %predphi7, %pred.load.continue6 ]
  %induction3 = or i64 %index, 1
  %6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 2
  %7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction3, i32 2
  %8 = load i32, i32* %6, align 4, !tbaa !181
  %9 = load i32, i32* %7, align 4, !tbaa !181
  %10 = icmp sgt i32 %8, 0
  %11 = icmp sgt i32 %9, 0
  %12 = zext i32 %8 to i64
  %13 = zext i32 %9 to i64
  br i1 %10, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %14 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 1
  %15 = load i32, i32* %14, align 4, !tbaa !185
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %16 = phi i32 [ poison, %vector.body ], [ %15, %pred.load.if ]
  br i1 %11, label %pred.load.if5, label %pred.load.continue6

pred.load.if5:                                    ; preds = %pred.load.continue
  %17 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction3, i32 1
  %18 = load i32, i32* %17, align 4, !tbaa !185
  br label %pred.load.continue6

pred.load.continue6:                              ; preds = %pred.load.if5, %pred.load.continue
  %19 = phi i32 [ poison, %pred.load.continue ], [ %18, %pred.load.if5 ]
  %20 = add nsw i32 %16, -1
  %21 = add nsw i32 %19, -1
  %22 = sext i32 %20 to i64
  %23 = sext i32 %21 to i64
  %24 = mul nsw i64 %22, %12
  %25 = mul nsw i64 %23, %13
  %26 = select i1 %10, i64 %24, i64 0
  %predphi = add i64 %vec.phi, %26
  %27 = select i1 %11, i64 %25, i64 0
  %predphi7 = add i64 %vec.phi4, %27
  %index.next = add i64 %index, 2
  %28 = icmp eq i64 %index.next, %n.vec
  br i1 %28, label %middle.block, label %vector.body, !llvm.loop !322

middle.block:                                     ; preds = %pred.load.continue6
  %bin.rdx = add i64 %predphi7, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec, %middle.block ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx, %middle.block ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 2
  %29 = load i32, i32* %stride2.i.i, align 4, !tbaa !181
  %cmp3.i.i = icmp sgt i32 %29, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %29 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 1
  %30 = load i32, i32* %extent.i.i, align 4, !tbaa !185
  %sub.i.i = add nsw i32 %30, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !323

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check11 = icmp ult i32 %4, 3
  br i1 %min.iters.check11, label %for.body.i13.i.preheader31, label %vector.ph12

vector.ph12:                                      ; preds = %for.body.i13.i.preheader
  %n.vec14 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body10

vector.body10:                                    ; preds = %pred.load.continue26, %vector.ph12
  %index15 = phi i64 [ 0, %vector.ph12 ], [ %index.next16, %pred.load.continue26 ]
  %vec.phi21 = phi i64 [ 0, %vector.ph12 ], [ %predphi27, %pred.load.continue26 ]
  %vec.phi22 = phi i64 [ 0, %vector.ph12 ], [ %predphi28, %pred.load.continue26 ]
  %induction20 = or i64 %index15, 1
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index15, i32 2
  %32 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction20, i32 2
  %33 = load i32, i32* %31, align 4, !tbaa !181
  %34 = load i32, i32* %32, align 4, !tbaa !181
  %35 = icmp slt i32 %33, 0
  %36 = icmp slt i32 %34, 0
  %37 = sext i32 %33 to i64
  %38 = sext i32 %34 to i64
  br i1 %35, label %pred.load.if23, label %pred.load.continue24

pred.load.if23:                                   ; preds = %vector.body10
  %39 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index15, i32 1
  %40 = load i32, i32* %39, align 4, !tbaa !185
  br label %pred.load.continue24

pred.load.continue24:                             ; preds = %pred.load.if23, %vector.body10
  %41 = phi i32 [ poison, %vector.body10 ], [ %40, %pred.load.if23 ]
  br i1 %36, label %pred.load.if25, label %pred.load.continue26

pred.load.if25:                                   ; preds = %pred.load.continue24
  %42 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction20, i32 1
  %43 = load i32, i32* %42, align 4, !tbaa !185
  br label %pred.load.continue26

pred.load.continue26:                             ; preds = %pred.load.if25, %pred.load.continue24
  %44 = phi i32 [ poison, %pred.load.continue24 ], [ %43, %pred.load.if25 ]
  %45 = add nsw i32 %41, -1
  %46 = add nsw i32 %44, -1
  %47 = sext i32 %45 to i64
  %48 = sext i32 %46 to i64
  %49 = mul nsw i64 %47, %37
  %50 = mul nsw i64 %48, %38
  %51 = select i1 %35, i64 %49, i64 0
  %predphi27 = add i64 %vec.phi21, %51
  %52 = select i1 %36, i64 %50, i64 0
  %predphi28 = add i64 %vec.phi22, %52
  %index.next16 = add i64 %index15, 2
  %53 = icmp eq i64 %index.next16, %n.vec14
  br i1 %53, label %middle.block8, label %vector.body10, !llvm.loop !324

middle.block8:                                    ; preds = %pred.load.continue26
  %bin.rdx29 = add i64 %predphi28, %predphi27
  %cmp.n18 = icmp eq i64 %n.vec14, %wide.trip.count.i.i
  br i1 %cmp.n18, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader31

for.body.i13.i.preheader31:                       ; preds = %for.body.i13.i.preheader, %middle.block8
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec14, %middle.block8 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx29, %middle.block8 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader31, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader31 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader31 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 2
  %54 = load i32, i32* %stride2.i11.i, align 4, !tbaa !181
  %cmp3.i12.i = icmp slt i32 %54, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %54 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 1
  %55 = load i32, i32* %extent.i15.i, align 4, !tbaa !185
  %sub.i16.i = add nsw i32 %55, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !325

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block8
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx29, %middle.block8 ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.phi = phi i64 [ %sub.i.0, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %56 = load i8, i8* %bits.i.i, align 1, !tbaa !140
  %conv.i.i = zext i8 %56 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i.phi
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i64 %mul.i) #13
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  store i8* %call2, i8** %host, align 8, !tbaa !176
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #14
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %57 = load i8*, i8** %host, align 8, !tbaa !176
  tail call void @halide_free(i8* %user_context, i8* %57) #13
  store i8* null, i8** %host, align 8, !tbaa !176
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30.104, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #14
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !176
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #13
  store i8* null, i8** %host, align 8, !tbaa !176
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !303
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !303
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31.105, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !302
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32.106, i64 0, i64 0)) #13
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #13
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !302
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 8, !tbaa !326
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #13
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %10() #13
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33.107, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !302
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #13
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 8, !tbaa !327
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %10() #13
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !178
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.34.108, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !178
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %3() #13
  store i64 %handle, i64* %device, align 8, !tbaa !178
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i64 0, i64 0)) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !302
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !178
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !303
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #13
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !178
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i64 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i64 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %7() #13
  store i64 0, i64* %device, align 8, !tbaa !178
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #14
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i64 0, i64 0)) #13
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !178
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #14
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !178
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 8, !tbaa !176
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !303
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !303
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !302
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %9 = load i8*, i8** %host34, align 8, !tbaa !176
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i64 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 8, !tbaa !328
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #13
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #14
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #14
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !302
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i64 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 8, !tbaa !309
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i64 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 8, !tbaa !328
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #13
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #14
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #14
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !302
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i64 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 8, !tbaa !309
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i64 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 8, !tbaa !328
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #13
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !303
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !303
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #14
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #14
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 8, !tbaa !309
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i64 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 8, !tbaa !328
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #13
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !303
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !303
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !303
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %1() #13
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i64 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 8, !tbaa !309
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i64 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 8, !tbaa !315
  tail call void %4() #13
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #14
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %6() #13
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 8, !tbaa !309
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 8, !tbaa !317
  tail call void %9() #13
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #13
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i64 0, i64 0)) #13
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !178
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !178
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #13
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !179
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !179
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i64 0, i64 0)) #13
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #13
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !309
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 8, !tbaa !329
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #13
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !178
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !178
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #13
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !179
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !179
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i64 0, i64 0)) #13
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !315
  tail call void %6() #13
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !309
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 8, !tbaa !330
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #13
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !178
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #13
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !178
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 8, !tbaa !331
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #13
  store i64 0, i64* %device, align 8, !tbaa !178
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !309
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i64 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 8, !tbaa !317
  tail call void %5() #13
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !302
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #13
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !332
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #14
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #13
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #13
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #13
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #13
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #13
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.115, i64 0, i64 0)) #13
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #13
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.116, i64 0, i64 0)) #13
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #13
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #13
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #13
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.118, i64 0, i64 0)) #13
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #13
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #13
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #13
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !37
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !37
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !300
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !140
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !301
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !300
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !140
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !301
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i64 4) #13
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i64 4) #13
  %call.i = call i8* @malloc(i64 1024) #13
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.120, i64 0, i64 0)) #13
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #13
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.121, i64 0, i64 0)) #13
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #13
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.122, i64 0, i64 0)) #13
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #13
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.123, i64 0, i64 0)) #13
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #13
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.124, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #13
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #13
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.126, i64 0, i64 0)) #13
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #13
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #13
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i64 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !14
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #13
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #13
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.128, i64 0, i64 0)) #13
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #13
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #13
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #13
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i100

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %if.end17.sink.split

if.else.i100:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i64
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i64
  %sub.ptr.sub.i.i97 = sub i64 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i64 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %call.i.i99 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %add.i.i98) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #13
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i100, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i100 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #13
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #13
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #13
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #13
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #13
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #13
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.133, i64 0, i64 0)) #13
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #13
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.134, i64 0, i64 0)) #13
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #13
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #13
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #13
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #13
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #13
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #13
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.137, i64 0, i64 0)) #13
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #13
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #13
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.139, i64 0, i64 0)) #13
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #13
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #13
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #13
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #13
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.140, i64 0, i64 0)) #13
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #13
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #13
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #13
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #13
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #13
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #13
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.144, i64 0, i64 0)) #13
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #13
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #13
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #13
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #13
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #13
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #13
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #13
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #13
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #13
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #13
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #13
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #13
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #13
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #13
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #13
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #13
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #13
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #13
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #13
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #13
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #13
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #13
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #13
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #13
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #13
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #13
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #13
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i64 0, i64 0)) #13
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #13
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #13
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.147, i64 0, i64 0)) #13
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #13
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0)) #13
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #13
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #13
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #13
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #13
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i64 0, i64 0)) #13
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #13
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #13
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #13
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #13
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i64 0, i64 0)) #13
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #13
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #13
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #13
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #13
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #13
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #13
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #13
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #13
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #13
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i64 0, i64 0)) #13
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #13
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #13
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #13
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.149, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i64 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !14
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #13
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #13
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #13
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #13
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #13
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #13
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #13
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #13
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.150, i64 0, i64 0)) #13
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.151, i64 0, i64 0)) #13
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #13
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #13
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i167

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %if.end

if.else.i167:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i64
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i64
  %sub.ptr.sub.i.i164 = sub i64 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i64 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %call.i.i166 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %add.i.i165) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #13
  br label %if.end

if.end:                                           ; preds = %if.else.i167, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i167 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #13
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #13
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #13
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #13
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #13
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #13
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i64 0, i64 0)) #13
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #13
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #13
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #13
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #13
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i64 0, i64 0)) #13
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #13
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #13
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #13
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #13
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #13
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #13
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #13
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #13
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #13
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #13
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #13
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #13
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #13
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i64 0, i64 0)) #13
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #13
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #13
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret i32 -41
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_shutdown() #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #14
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !333
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  store i32 -2, i32* %current_func, align 8, !tbaa !335
  tail call void @halide_join_thread(%struct.halide_thread* nonnull %0) #13
  store %struct.halide_thread* null, %struct.halide_thread** %sampling_thread, align 8, !tbaa !333
  store i32 -1, i32* %current_func, align 8, !tbaa !335
  tail call void @halide_profiler_report_unlocked(i8* null, %struct.halide_profiler_state* nonnull %call) #14
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* nonnull %call) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_profiler_state* @halide_profiler_get_state() local_unnamed_addr #2 {
entry:
  ret %struct.halide_profiler_state* @_ZZ25halide_profiler_get_stateE1s
}

; Function Attrs: nounwind
define weak void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %s) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #13
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit, label %if.then6.i

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry
  %sstr.sroa.125.0 = phi i8* [ %add.ptr.i, %if.then6.i ], [ null, %entry ]
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.0624 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not625 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0624, null
  br i1 %tobool.not625, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sub.ptr.rhs.cast.i.i348 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i349 = sub i64 1, %sub.ptr.rhs.cast.i.i348
  br label %for.body

for.cond.cleanup:                                 ; preds = %cleanup181, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sstr.sroa.19.0.lcssa = phi i8* [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit ], [ %sstr.sroa.19.15, %cleanup181 ]
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.cond.cleanup
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %for.cond.cleanup
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %sstr.sroa.19.0.lcssa to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #13
  ret void

for.body:                                         ; preds = %cleanup181, %for.body.lr.ph
  %p.0627 = phi %struct.halide_profiler_pipeline_stats* [ %p.0624, %for.body.lr.ph ], [ %p.0, %cleanup181 ]
  %sstr.sroa.19.0626 = phi i8* [ %call.i, %for.body.lr.ph ], [ %sstr.sroa.19.15, %cleanup181 ]
  %time = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 0
  %0 = load i64, i64* %time, align 8, !tbaa !336
  %conv = uitofp i64 %0 to float
  %div = fdiv float %conv, 1.000000e+06
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !338
  %tobool1.not = icmp eq i32 %1, 0
  br i1 %tobool1.not, label %cleanup181, label %if.end

if.end:                                           ; preds = %for.body
  br i1 %tobool.not.i, label %if.end.split, label %if.then.i278

if.end.split:                                     ; preds = %if.end
  %active_threads_numerator1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %2 = load i64, i64* %active_threads_numerator1, align 8, !tbaa !339
  %active_threads_denominator2 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %3 = load i64, i64* %active_threads_denominator2, align 8, !tbaa !340
  %cmp3 = icmp eq i64 %2, %3
  %name4 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %4 = load i8*, i8** %name4, align 8, !tbaa !341
  %call.i2825 = tail call i8* @halide_string_to_string(i8* null, i8* %sstr.sroa.125.0, i8* %4) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

if.then.i278:                                     ; preds = %if.end
  store i8 0, i8* %call.i, align 1, !tbaa !14
  %active_threads_numerator6 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %5 = load i64, i64* %active_threads_numerator6, align 8, !tbaa !339
  %active_threads_denominator7 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %6 = load i64, i64* %active_threads_denominator7, align 8, !tbaa !340
  %cmp8 = icmp eq i64 %5, %6
  %name9 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %7 = load i8*, i8** %name9, align 8, !tbaa !341
  %call.i28210 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* %sstr.sroa.125.0, i8* %7) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit: ; preds = %if.end.split, %if.then.i278
  %8 = phi i64 [ %2, %if.end.split ], [ %5, %if.then.i278 ]
  %9 = phi i64 [ %3, %if.end.split ], [ %6, %if.then.i278 ]
  %10 = phi i1 [ %cmp3, %if.end.split ], [ %cmp8, %if.then.i278 ]
  %phi.call = phi i8* [ %call.i2825, %if.end.split ], [ %call.i28210, %if.then.i278 ]
  %call.i285 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #13
  %call.i288 = tail call i8* @halide_string_to_string(i8* %call.i285, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8.165, i64 0, i64 0)) #13
  %conv.i = fpext float %div to double
  %call.i291 = tail call i8* @halide_double_to_string(i8* %call.i288, i8* %sstr.sroa.125.0, double %conv.i, i32 0) #13
  %call.i294 = tail call i8* @halide_string_to_string(i8* %call.i291, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.166, i64 0, i64 0)) #13
  %call.i297 = tail call i8* @halide_string_to_string(i8* %call.i294, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.167, i64 0, i64 0)) #13
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 12
  %11 = load i32, i32* %samples, align 4, !tbaa !342
  %conv.i300 = sext i32 %11 to i64
  %call.i301 = tail call i8* @halide_int64_to_string(i8* %call.i297, i8* %sstr.sroa.125.0, i64 %conv.i300, i32 1) #13
  %call.i304 = tail call i8* @halide_string_to_string(i8* %call.i301, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.168, i64 0, i64 0)) #13
  %12 = load i32, i32* %runs, align 8, !tbaa !338
  %conv.i307 = sext i32 %12 to i64
  %call.i308 = tail call i8* @halide_int64_to_string(i8* %call.i304, i8* %sstr.sroa.125.0, i64 %conv.i307, i32 1) #13
  %call.i311 = tail call i8* @halide_string_to_string(i8* %call.i308, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12.169, i64 0, i64 0)) #13
  %13 = load i32, i32* %runs, align 8, !tbaa !338
  %conv19 = sitofp i32 %13 to float
  %div20 = fdiv float %div, %conv19
  %conv.i314 = fpext float %div20 to double
  %call.i315 = tail call i8* @halide_double_to_string(i8* %call.i311, i8* %sstr.sroa.125.0, double %conv.i314, i32 0) #13
  %call.i318 = tail call i8* @halide_string_to_string(i8* %call.i315, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13.170, i64 0, i64 0)) #13
  br i1 %10, label %if.end28, label %if.then24

if.then24:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %conv3 = uitofp i64 %8 to double
  %conv5 = uitofp i64 %9 to double
  %add = fadd double %conv5, 1.000000e-10
  %div6 = fdiv double %conv3, %add
  %conv7 = fptrunc double %div6 to float
  %call.i321 = tail call i8* @halide_string_to_string(i8* %call.i318, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14.171, i64 0, i64 0)) #13
  %conv.i324 = fpext float %conv7 to double
  %call.i325 = tail call i8* @halide_double_to_string(i8* %call.i321, i8* %sstr.sroa.125.0, double %conv.i324, i32 0) #13
  %call.i328 = tail call i8* @halide_string_to_string(i8* %call.i325, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #13
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %sstr.sroa.19.1 = phi i8* [ %call.i318, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit ], [ %call.i328, %if.then24 ]
  %call.i331 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.1, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15.172, i64 0, i64 0)) #13
  %num_allocs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 13
  %14 = load i32, i32* %num_allocs, align 8, !tbaa !343
  %conv.i334 = sext i32 %14 to i64
  %call.i335 = tail call i8* @halide_int64_to_string(i8* %call.i331, i8* %sstr.sroa.125.0, i64 %conv.i334, i32 1) #13
  %call.i338 = tail call i8* @halide_string_to_string(i8* %call.i335, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.173, i64 0, i64 0)) #13
  %memory_peak = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 2
  %15 = load i64, i64* %memory_peak, align 8, !tbaa !344
  %call.i341 = tail call i8* @halide_uint64_to_string(i8* %call.i338, i8* %sstr.sroa.125.0, i64 %15, i32 1) #13
  %call.i344 = tail call i8* @halide_string_to_string(i8* %call.i341, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.174, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit, label %if.then.i352

if.then.i352:                                     ; preds = %if.end28
  %sub.ptr.lhs.cast.i.i347 = ptrtoint i8* %call.i344 to i64
  %add.i.i350 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i347
  %call.i.i351 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i350) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit: ; preds = %if.then.i352, %if.end28
  %retval.0.i = phi i8* [ %call.i, %if.then.i352 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end28 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i) #13
  %16 = load i64, i64* %time, align 8, !tbaa !336
  %tobool36.not = icmp eq i64 %16, 0
  br i1 %tobool36.not, label %lor.end, label %for.cond53.preheader

lor.end:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %memory_total = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 3
  %17 = load i64, i64* %memory_total, align 8, !tbaa !345
  %tobool37.not = icmp eq i64 %17, 0
  br i1 %tobool37.not, label %for.cond41.preheader, label %for.cond53.preheader

for.cond41.preheader:                             ; preds = %lor.end
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %18 = load i32, i32* %num_funcs, align 8, !tbaa !346
  %cmp42589 = icmp sgt i32 %18, 0
  br i1 %cmp42589, label %for.body44.lr.ph, label %cleanup181

for.body44.lr.ph:                                 ; preds = %for.cond41.preheader
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  %19 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !347
  %20 = zext i32 %18 to i64
  br label %for.body44

for.cond41:                                       ; preds = %for.body44
  %exitcond.not = icmp eq i64 %indvars.iv.next, %20
  br i1 %exitcond.not, label %cleanup181, label %for.body44, !llvm.loop !348

for.body44:                                       ; preds = %for.cond41, %for.body44.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body44.lr.ph ], [ %indvars.iv.next, %for.cond41 ]
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %19, i64 %indvars.iv, i32 4
  %21 = load i64, i64* %stack_peak, align 8, !tbaa !349
  %tobool45.not = icmp eq i64 %21, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool45.not, label %for.cond41, label %for.cond53.preheader

for.cond53.preheader:                             ; preds = %for.body44, %lor.end, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %num_funcs54 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %22 = load i32, i32* %num_funcs54, align 8, !tbaa !346
  %cmp55621 = icmp sgt i32 %22, 0
  br i1 %cmp55621, label %for.body57.lr.ph, label %cleanup181

for.body57.lr.ph:                                 ; preds = %for.cond53.preheader
  %funcs59 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  br label %for.body57

for.body57:                                       ; preds = %cleanup172, %for.body57.lr.ph
  %indvars.iv630 = phi i64 [ 0, %for.body57.lr.ph ], [ %indvars.iv.next631, %cleanup172 ]
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358, label %if.then.i356

if.then.i356:                                     ; preds = %for.body57
  store i8 0, i8* %call.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358: ; preds = %if.then.i356, %for.body57
  %23 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs59, align 8, !tbaa !347
  %add.ptr61 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630
  %cmp62 = icmp eq i64 %indvars.iv630, 0
  br i1 %cmp62, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %time63 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %24 = load i64, i64* %time63, align 8, !tbaa !351
  %cmp64 = icmp eq i64 %24, 0
  br i1 %cmp64, label %cleanup172, label %if.end66

if.end66:                                         ; preds = %land.lhs.true, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %call.i361 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.175, i64 0, i64 0)) #13
  %name68 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 7
  %25 = load i8*, i8** %name68, align 8, !tbaa !352
  %call.i364 = tail call i8* @halide_string_to_string(i8* %call.i361, i8* %sstr.sroa.125.0, i8* %25) #13
  %call.i367 = tail call i8* @halide_string_to_string(i8* %call.i364, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19.176, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i591 = ptrtoint i8* %call.i367 to i64
  %sub.ptr.sub.i592 = sub i64 %sub.ptr.lhs.cast.i591, %sub.ptr.rhs.cast.i.i348
  %cmp73593 = icmp ult i64 %sub.ptr.sub.i592, 25
  br i1 %cmp73593, label %while.body, label %while.end

while.body:                                       ; preds = %if.end66, %while.body
  %sstr.sroa.19.3594 = phi i8* [ %call.i384, %while.body ], [ %call.i367, %if.end66 ]
  %call.i384 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.3594, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i = ptrtoint i8* %call.i384 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i.i348
  %cmp73 = icmp ult i64 %sub.ptr.sub.i, 25
  br i1 %cmp73, label %while.body, label %while.end, !llvm.loop !353

while.end:                                        ; preds = %while.body, %if.end66
  %sstr.sroa.19.3.lcssa = phi i8* [ %call.i367, %if.end66 ], [ %call.i384, %while.body ]
  %time75 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %26 = load i64, i64* %time75, align 8, !tbaa !351
  %conv76 = uitofp i64 %26 to float
  %27 = load i32, i32* %runs, align 8, !tbaa !338
  %conv78 = sitofp i32 %27 to float
  %mul = fmul float %conv78, 1.000000e+06
  %div79 = fdiv float %conv76, %mul
  %conv.i387 = fpext float %div79 to double
  %call.i388 = tail call i8* @halide_double_to_string(i8* %sstr.sroa.19.3.lcssa, i8* %sstr.sroa.125.0, double %conv.i387, i32 0) #13
  %tobool.not.i390 = icmp eq i8* %call.i388, null
  br i1 %tobool.not.i390, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, label %if.then.i393

if.then.i393:                                     ; preds = %while.end
  %add.ptr.i391 = getelementptr inbounds i8, i8* %call.i388, i64 -3
  %cmp.i = icmp ult i8* %add.ptr.i391, %call.i
  %spec.store.select.i = select i1 %cmp.i, i8* %call.i, i8* %add.ptr.i391
  store i8 0, i8* %spec.store.select.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit: ; preds = %if.then.i393, %while.end
  %sstr.sroa.19.4 = phi i8* [ null, %while.end ], [ %spec.store.select.i, %if.then.i393 ]
  %call.i399 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.4, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.178, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i400596 = ptrtoint i8* %call.i399 to i64
  %sub.ptr.sub.i402597 = sub i64 %sub.ptr.lhs.cast.i400596, %sub.ptr.rhs.cast.i.i348
  %cmp85598 = icmp ult i64 %sub.ptr.sub.i402597, 35
  br i1 %cmp85598, label %while.body86, label %while.end88

while.body86:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, %while.body86
  %sstr.sroa.19.5599 = phi i8* [ %call.i408, %while.body86 ], [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ]
  %call.i408 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5599, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i400 = ptrtoint i8* %call.i408 to i64
  %sub.ptr.sub.i402 = sub i64 %sub.ptr.lhs.cast.i400, %sub.ptr.rhs.cast.i.i348
  %cmp85 = icmp ult i64 %sub.ptr.sub.i402, 35
  br i1 %cmp85, label %while.body86, label %while.end88, !llvm.loop !354

while.end88:                                      ; preds = %while.body86, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit
  %sstr.sroa.19.5.lcssa = phi i8* [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ], [ %call.i408, %while.body86 ]
  %28 = load i64, i64* %time, align 8, !tbaa !336
  %cmp90.not = icmp eq i64 %28, 0
  br i1 %cmp90.not, label %if.end97, label %if.then91

if.then91:                                        ; preds = %while.end88
  %29 = load i64, i64* %time75, align 8, !tbaa !351
  %mul93 = mul i64 %29, 100
  %div95 = udiv i64 %mul93, %28
  br label %if.end97

if.end97:                                         ; preds = %if.then91, %while.end88
  %percent.0 = phi i64 [ %div95, %if.then91 ], [ 0, %while.end88 ]
  %call.i411 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #13
  %sext = shl i64 %percent.0, 32
  %conv.i414 = ashr exact i64 %sext, 32
  %call.i415 = tail call i8* @halide_int64_to_string(i8* %call.i411, i8* %sstr.sroa.125.0, i64 %conv.i414, i32 1) #13
  %call.i418 = tail call i8* @halide_string_to_string(i8* %call.i415, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23.180, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i419601 = ptrtoint i8* %call.i418 to i64
  %sub.ptr.sub.i421602 = sub i64 %sub.ptr.lhs.cast.i419601, %sub.ptr.rhs.cast.i.i348
  %cmp104603 = icmp ult i64 %sub.ptr.sub.i421602, 43
  br i1 %cmp104603, label %while.body105, label %while.end107

while.body105:                                    ; preds = %if.end97, %while.body105
  %sstr.sroa.19.6604 = phi i8* [ %call.i427, %while.body105 ], [ %call.i418, %if.end97 ]
  %call.i427 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6604, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i419 = ptrtoint i8* %call.i427 to i64
  %sub.ptr.sub.i421 = sub i64 %sub.ptr.lhs.cast.i419, %sub.ptr.rhs.cast.i.i348
  %cmp104 = icmp ult i64 %sub.ptr.sub.i421, 43
  br i1 %cmp104, label %while.body105, label %while.end107, !llvm.loop !355

while.end107:                                     ; preds = %while.body105, %if.end97
  %sstr.sroa.19.6.lcssa = phi i8* [ %call.i418, %if.end97 ], [ %call.i427, %while.body105 ]
  br i1 %10, label %if.end127, label %if.then109

if.then109:                                       ; preds = %while.end107
  %active_threads_numerator111 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 5
  %30 = load i64, i64* %active_threads_numerator111, align 8, !tbaa !356
  %conv112 = uitofp i64 %30 to double
  %active_threads_denominator113 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 6
  %31 = load i64, i64* %active_threads_denominator113, align 8, !tbaa !357
  %conv114 = uitofp i64 %31 to double
  %add115 = fadd double %conv114, 1.000000e-10
  %div116 = fdiv double %conv112, %add115
  %conv117 = fptrunc double %div116 to float
  %call.i430 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.181, i64 0, i64 0)) #13
  %conv.i433 = fpext float %conv117 to double
  %call.i434 = tail call i8* @halide_double_to_string(i8* %call.i430, i8* %sstr.sroa.125.0, double %conv.i433, i32 0) #13
  %tobool.not.i436 = icmp eq i8* %call.i434, null
  br i1 %tobool.not.i436, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, label %if.then.i441

if.then.i441:                                     ; preds = %if.then109
  %add.ptr.i437 = getelementptr inbounds i8, i8* %call.i434, i64 -3
  %cmp.i439 = icmp ult i8* %add.ptr.i437, %call.i
  %spec.store.select.i440 = select i1 %cmp.i439, i8* %call.i, i8* %add.ptr.i437
  store i8 0, i8* %spec.store.select.i440, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442: ; preds = %if.then.i441, %if.then109
  %sstr.sroa.19.7 = phi i8* [ null, %if.then109 ], [ %spec.store.select.i440, %if.then.i441 ]
  %sub.ptr.lhs.cast.i447606 = ptrtoint i8* %sstr.sroa.19.7 to i64
  %sub.ptr.sub.i449607 = sub i64 %sub.ptr.lhs.cast.i447606, %sub.ptr.rhs.cast.i.i348
  %cmp123608 = icmp ult i64 %sub.ptr.sub.i449607, 58
  br i1 %cmp123608, label %while.body124, label %if.end127

while.body124:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.body124
  %sstr.sroa.19.8609 = phi i8* [ %call.i455, %while.body124 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ]
  %call.i455 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.8609, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i447 = ptrtoint i8* %call.i455 to i64
  %sub.ptr.sub.i449 = sub i64 %sub.ptr.lhs.cast.i447, %sub.ptr.rhs.cast.i.i348
  %cmp123 = icmp ult i64 %sub.ptr.sub.i449, 58
  br i1 %cmp123, label %while.body124, label %if.end127, !llvm.loop !358

if.end127:                                        ; preds = %while.body124, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.end107
  %sstr.sroa.19.9 = phi i8* [ %sstr.sroa.19.6.lcssa, %while.end107 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ %call.i455, %while.body124 ]
  %cursor.0 = phi i64 [ 58, %while.end107 ], [ 73, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ 73, %while.body124 ]
  %memory_peak128 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 2
  %32 = load i64, i64* %memory_peak128, align 8, !tbaa !359
  %tobool129.not = icmp eq i64 %32, 0
  br i1 %tobool129.not, label %if.end162, label %if.then130

if.then130:                                       ; preds = %if.end127
  %call.i458 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.9, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25.182, i64 0, i64 0)) #13
  %33 = load i64, i64* %memory_peak128, align 8, !tbaa !359
  %call.i461 = tail call i8* @halide_uint64_to_string(i8* %call.i458, i8* %sstr.sroa.125.0, i64 %33, i32 1) #13
  %sub.ptr.lhs.cast.i462611 = ptrtoint i8* %call.i461 to i64
  %sub.ptr.sub.i464612 = sub i64 %sub.ptr.lhs.cast.i462611, %sub.ptr.rhs.cast.i.i348
  %cmp137613 = icmp ult i64 %sub.ptr.sub.i464612, %cursor.0
  br i1 %cmp137613, label %while.body138, label %while.end140

while.body138:                                    ; preds = %if.then130, %while.body138
  %sstr.sroa.19.10614 = phi i8* [ %call.i470, %while.body138 ], [ %call.i461, %if.then130 ]
  %call.i470 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10614, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i462 = ptrtoint i8* %call.i470 to i64
  %sub.ptr.sub.i464 = sub i64 %sub.ptr.lhs.cast.i462, %sub.ptr.rhs.cast.i.i348
  %cmp137 = icmp ult i64 %sub.ptr.sub.i464, %cursor.0
  br i1 %cmp137, label %while.body138, label %while.end140, !llvm.loop !360

while.end140:                                     ; preds = %while.body138, %if.then130
  %sstr.sroa.19.10.lcssa = phi i8* [ %call.i461, %if.then130 ], [ %call.i470, %while.body138 ]
  %call.i473 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26.183, i64 0, i64 0)) #13
  %num_allocs142 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 8
  %34 = load i32, i32* %num_allocs142, align 8, !tbaa !361
  %conv.i476 = sext i32 %34 to i64
  %call.i477 = tail call i8* @halide_int64_to_string(i8* %call.i473, i8* %sstr.sroa.125.0, i64 %conv.i476, i32 1) #13
  %add144 = add nuw nsw i64 %cursor.0, 15
  %sub.ptr.lhs.cast.i478616 = ptrtoint i8* %call.i477 to i64
  %sub.ptr.sub.i480617 = sub i64 %sub.ptr.lhs.cast.i478616, %sub.ptr.rhs.cast.i.i348
  %cmp147618 = icmp ult i64 %sub.ptr.sub.i480617, %add144
  br i1 %cmp147618, label %while.body148, label %while.end150

while.body148:                                    ; preds = %while.end140, %while.body148
  %sstr.sroa.19.11619 = phi i8* [ %call.i467, %while.body148 ], [ %call.i477, %while.end140 ]
  %call.i467 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11619, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #13
  %sub.ptr.lhs.cast.i478 = ptrtoint i8* %call.i467 to i64
  %sub.ptr.sub.i480 = sub i64 %sub.ptr.lhs.cast.i478, %sub.ptr.rhs.cast.i.i348
  %cmp147 = icmp ult i64 %sub.ptr.sub.i480, %add144
  br i1 %cmp147, label %while.body148, label %while.end150, !llvm.loop !362

while.end150:                                     ; preds = %while.body148, %while.end140
  %sstr.sroa.19.11.lcssa = phi i8* [ %call.i477, %while.end140 ], [ %call.i467, %while.body148 ]
  %35 = load i32, i32* %num_allocs142, align 8, !tbaa !361
  %cmp152.not = icmp eq i32 %35, 0
  br i1 %cmp152.not, label %if.end159, label %if.then153

if.then153:                                       ; preds = %while.end150
  %memory_total154 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 3
  %36 = load i64, i64* %memory_total154, align 8, !tbaa !363
  %conv156 = sext i32 %35 to i64
  %div157 = udiv i64 %36, %conv156
  br label %if.end159

if.end159:                                        ; preds = %if.then153, %while.end150
  %alloc_avg.0 = phi i64 [ %div157, %if.then153 ], [ 0, %while.end150 ]
  %call.i452 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27.184, i64 0, i64 0)) #13
  %sext586 = shl i64 %alloc_avg.0, 32
  %conv.i445 = ashr exact i64 %sext586, 32
  %call.i446 = tail call i8* @halide_int64_to_string(i8* %call.i452, i8* %sstr.sroa.125.0, i64 %conv.i445, i32 1) #13
  br label %if.end162

if.end162:                                        ; preds = %if.end159, %if.end127
  %sstr.sroa.19.12 = phi i8* [ %sstr.sroa.19.9, %if.end127 ], [ %call.i446, %if.end159 ]
  %stack_peak163 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 4
  %37 = load i64, i64* %stack_peak163, align 8, !tbaa !349
  %cmp164.not = icmp eq i64 %37, 0
  br i1 %cmp164.not, label %if.end169, label %if.then165

if.then165:                                       ; preds = %if.end162
  %call.i424 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.12, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28.185, i64 0, i64 0)) #13
  %38 = load i64, i64* %stack_peak163, align 8, !tbaa !349
  %call.i405 = tail call i8* @halide_uint64_to_string(i8* %call.i424, i8* %sstr.sroa.125.0, i64 %38, i32 1) #13
  br label %if.end169

if.end169:                                        ; preds = %if.then165, %if.end162
  %sstr.sroa.19.13 = phi i8* [ %sstr.sroa.19.12, %if.end162 ], [ %call.i405, %if.then165 ]
  %call.i396 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.13, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #13
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, label %if.then.i379

if.then.i379:                                     ; preds = %if.end169
  %sub.ptr.lhs.cast.i.i374 = ptrtoint i8* %call.i396 to i64
  %add.i.i377 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i374
  %call.i.i378 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i377) #13
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381: ; preds = %if.then.i379, %if.end169
  %retval.0.i380 = phi i8* [ %call.i, %if.then.i379 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end169 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i380) #13
  br label %cleanup172

cleanup172:                                       ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, %land.lhs.true
  %sstr.sroa.19.14 = phi i8* [ %call.i, %land.lhs.true ], [ %call.i396, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381 ]
  %indvars.iv.next631 = add nuw nsw i64 %indvars.iv630, 1
  %39 = load i32, i32* %num_funcs54, align 8, !tbaa !346
  %40 = sext i32 %39 to i64
  %cmp55 = icmp slt i64 %indvars.iv.next631, %40
  br i1 %cmp55, label %for.body57, label %cleanup181, !llvm.loop !364

cleanup181:                                       ; preds = %for.cond41, %cleanup172, %for.cond53.preheader, %for.cond41.preheader, %for.body
  %sstr.sroa.19.15 = phi i8* [ %sstr.sroa.19.0626, %for.body ], [ %call.i344, %for.cond53.preheader ], [ %call.i344, %for.cond41.preheader ], [ %sstr.sroa.19.14, %cleanup172 ], [ %call.i344, %for.cond41 ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 8
  %41 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %41, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.cond.cleanup, label %for.body, !llvm.loop !365
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %s) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !366
  %tobool.not9 = icmp eq %struct.halide_profiler_pipeline_stats* %0, null
  br i1 %tobool.not9, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %1 = phi %struct.halide_profiler_pipeline_stats* [ %7, %while.body ], [ %0, %entry ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %3 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !367
  store %struct.halide_profiler_pipeline_stats* %3, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !366
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 7
  %4 = bitcast %struct.halide_profiler_func_stats** %funcs to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !347
  tail call void @free(i8* %5) #13
  %6 = bitcast %struct.halide_profiler_pipeline_stats* %1 to i8*
  tail call void @free(i8* nonnull %6) #13
  %7 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !366
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %7, null
  br i1 %tobool.not, label %while.end, label %while.body, !llvm.loop !368

while.end:                                        ; preds = %while.body, %entry
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 2
  store i32 0, i32* %first_free_id, align 4, !tbaa !369
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #14
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.0121 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not122 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0121, null
  br i1 %tobool.not122, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.0123 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.0121, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !341
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %num_funcs1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 9
  %1 = load i32, i32* %num_funcs1, align 8, !tbaa !346
  %cmp2 = icmp eq i32 %1, %num_funcs
  br i1 %cmp2, label %cleanup62, label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.end, label %for.body, !llvm.loop !370

for.end:                                          ; preds = %for.inc, %entry
  %call4 = tail call i8* @malloc(i64 96) #13
  %3 = bitcast i8* %call4 to %struct.halide_profiler_pipeline_stats*
  %tobool5.not = icmp eq i8* %call4, null
  br i1 %tobool5.not, label %cleanup62, label %if.end7

if.end7:                                          ; preds = %for.end
  %4 = bitcast %struct.halide_profiler_pipeline_stats** %pipelines to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !366
  %next9 = getelementptr inbounds i8, i8* %call4, i64 64
  %6 = bitcast i8* %next9 to i8**
  store i8* %5, i8** %6, align 8, !tbaa !367
  %name10 = getelementptr inbounds i8, i8* %call4, i64 48
  %7 = bitcast i8* %name10 to i8**
  store i8* %pipeline_name, i8** %7, align 8, !tbaa !341
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 2
  %8 = load i32, i32* %first_free_id, align 4, !tbaa !369
  %first_func_id = getelementptr inbounds i8, i8* %call4, i64 76
  %9 = bitcast i8* %first_func_id to i32*
  store i32 %8, i32* %9, align 4, !tbaa !371
  %num_funcs11 = getelementptr inbounds i8, i8* %call4, i64 72
  %10 = bitcast i8* %num_funcs11 to i32*
  store i32 %num_funcs, i32* %10, align 8, !tbaa !346
  %runs = getelementptr inbounds i8, i8* %call4, i64 80
  %11 = bitcast i8* %runs to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %11, align 8, !tbaa !37
  %12 = bitcast i8* %call4 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %12, align 8, !tbaa !18
  %memory_peak = getelementptr inbounds i8, i8* %call4, i64 16
  %13 = bitcast i8* %memory_peak to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %13, align 8, !tbaa !18
  %num_allocs = getelementptr inbounds i8, i8* %call4, i64 88
  %14 = bitcast i8* %num_allocs to i32*
  store i32 0, i32* %14, align 8, !tbaa !343
  %active_threads_numerator = getelementptr inbounds i8, i8* %call4, i64 32
  %15 = bitcast i8* %active_threads_numerator to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !18
  %conv = sext i32 %num_funcs to i64
  %mul = mul nsw i64 %conv, 72
  %call12 = tail call i8* @malloc(i64 %mul) #13
  %funcs = getelementptr inbounds i8, i8* %call4, i64 56
  %16 = bitcast i8* %funcs to i8**
  store i8* %call12, i8** %16, align 8, !tbaa !347
  %tobool14.not = icmp eq i8* %call12, null
  %17 = bitcast i8* %call12 to %struct.halide_profiler_func_stats*
  br i1 %tobool14.not, label %if.then15, label %for.cond17.preheader

for.cond17.preheader:                             ; preds = %if.end7
  %cmp18119 = icmp sgt i32 %num_funcs, 0
  br i1 %cmp18119, label %for.body20.lr.ph, label %for.cond.cleanup19

for.body20.lr.ph:                                 ; preds = %for.cond17.preheader
  %wide.trip.count = zext i32 %num_funcs to i64
  br label %for.body20

if.then15:                                        ; preds = %if.end7
  tail call void @free(i8* nonnull %call4) #13
  br label %cleanup62

for.cond.cleanup19:                               ; preds = %for.body20, %for.cond17.preheader
  %18 = load i32, i32* %first_free_id, align 4, !tbaa !369
  %add = add nsw i32 %18, %num_funcs
  store i32 %add, i32* %first_free_id, align 4, !tbaa !369
  store i8* %call4, i8** %4, align 8, !tbaa !366
  br label %cleanup62

for.body20:                                       ; preds = %for.body20, %for.body20.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body20.lr.ph ], [ %indvars.iv.next, %for.body20 ]
  %time22 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 0
  store i64 0, i64* %time22, align 8, !tbaa !351
  %arrayidx24 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv
  %19 = load i64, i64* %arrayidx24, align 8, !tbaa !18
  %20 = inttoptr i64 %19 to i8*
  %name28 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 7
  store i8* %20, i8** %name28, align 8, !tbaa !352
  %memory_current32 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 1
  %21 = bitcast i64* %memory_current32 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %21, align 8, !tbaa !18
  %memory_total40 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 3
  %num_allocs44 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 8
  store i32 0, i32* %num_allocs44, align 8, !tbaa !361
  %22 = bitcast i64* %memory_total40 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !18
  %active_threads_numerator51 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 5
  %23 = bitcast i64* %active_threads_numerator51 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %23, align 8, !tbaa !18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup19, label %for.body20, !llvm.loop !372

cleanup62:                                        ; preds = %land.lhs.true, %for.cond.cleanup19, %if.then15, %for.end
  %retval.2 = phi %struct.halide_profiler_pipeline_stats* [ %3, %for.cond.cleanup19 ], [ null, %if.then15 ], [ null, %for.end ], [ %p.0123, %land.lhs.true ]
  ret %struct.halide_profiler_pipeline_stats* %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* %s, i32 %func_id, i64 %time, i32 %active_threads) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.055 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not56 = icmp eq %struct.halide_profiler_pipeline_stats* %p.055, null
  br i1 %tobool.not56, label %cleanup25, label %for.body

for.body:                                         ; preds = %entry, %if.end23
  %p.058 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %if.end23 ], [ %p.055, %entry ]
  %p_prev.057 = phi %struct.halide_profiler_pipeline_stats* [ %p.058, %if.end23 ], [ null, %entry ]
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 10
  %0 = load i32, i32* %first_func_id, align 4, !tbaa !371
  %cmp.not = icmp sgt i32 %0, %func_id
  br i1 %cmp.not, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 9
  %1 = load i32, i32* %num_funcs, align 8, !tbaa !346
  %add = add nsw i32 %1, %0
  %cmp2 = icmp sgt i32 %add, %func_id
  br i1 %cmp2, label %if.then, label %if.end23

if.then:                                          ; preds = %land.lhs.true
  %tobool3.not = icmp eq %struct.halide_profiler_pipeline_stats* %p_prev.057, null
  br i1 %tobool3.not, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %2 = load i8*, i8** %next, align 8, !tbaa !367
  %next5 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p_prev.057, i64 0, i32 8
  store i8* %2, i8** %next5, align 8, !tbaa !367
  %3 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  store %struct.halide_profiler_pipeline_stats* %p.055, %struct.halide_profiler_pipeline_stats** %3, align 8, !tbaa !367
  store %struct.halide_profiler_pipeline_stats* %p.058, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !366
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 7
  %4 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !347
  %idx.ext = sext i32 %func_id to i64
  %add.ptr = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %4, i64 %idx.ext
  %idx.ext10 = sext i32 %0 to i64
  %idx.neg = sub nsw i64 0, %idx.ext10
  %add.ptr11 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr, i64 %idx.neg
  %time12 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 0
  %5 = load i64, i64* %time12, align 8, !tbaa !351
  %add13 = add i64 %5, %time
  store i64 %add13, i64* %time12, align 8, !tbaa !351
  %conv = sext i32 %active_threads to i64
  %active_threads_numerator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 5
  %6 = load i64, i64* %active_threads_numerator, align 8, !tbaa !356
  %add14 = add i64 %6, %conv
  store i64 %add14, i64* %active_threads_numerator, align 8, !tbaa !356
  %active_threads_denominator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 6
  %7 = load i64, i64* %active_threads_denominator, align 8, !tbaa !357
  %add15 = add i64 %7, 1
  store i64 %add15, i64* %active_threads_denominator, align 8, !tbaa !357
  %time16 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 0
  %8 = load i64, i64* %time16, align 8, !tbaa !336
  %add17 = add i64 %8, %time
  store i64 %add17, i64* %time16, align 8, !tbaa !336
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 12
  %9 = load i32, i32* %samples, align 4, !tbaa !342
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %samples, align 4, !tbaa !342
  %active_threads_numerator19 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 4
  %10 = load i64, i64* %active_threads_numerator19, align 8, !tbaa !339
  %add20 = add i64 %10, %conv
  store i64 %add20, i64* %active_threads_numerator19, align 8, !tbaa !339
  %active_threads_denominator21 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 5
  %11 = load i64, i64* %active_threads_denominator21, align 8, !tbaa !340
  %add22 = add i64 %11, 1
  store i64 %add22, i64* %active_threads_denominator21, align 8, !tbaa !340
  ret void

if.end23:                                         ; preds = %land.lhs.true, %for.body
  %next24 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %12 = bitcast i8** %next24 to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %12, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup25, label %for.body, !llvm.loop !373

cleanup25:                                        ; preds = %if.end23, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_profiler_sample(%struct.halide_profiler_state* %s, i64* %prev_t) local_unnamed_addr #0 {
entry:
  %func = alloca i32, align 4
  %active_threads = alloca i32, align 4
  %0 = bitcast i32* %func to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  %1 = bitcast i32* %active_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  %get_remote_profiler_state = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 6
  %2 = load void (i32*, i32*)*, void (i32*, i32*)** %get_remote_profiler_state, align 8, !tbaa !374
  %tobool.not = icmp eq void (i32*, i32*)* %2, null
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void %2(i32* nonnull %func, i32* nonnull %active_threads) #13
  br label %if.end

if.else:                                          ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 3
  %3 = load i32, i32* %current_func, align 8, !tbaa !335
  store i32 %3, i32* %func, align 4, !tbaa !37
  %active_threads2 = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 4
  %4 = load i32, i32* %active_threads2, align 4, !tbaa !375
  store i32 %4, i32* %active_threads, align 4, !tbaa !37
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call = call i64 @halide_current_time_ns(i8* null) #13
  %5 = load i32, i32* %func, align 4, !tbaa !37
  %cmp = icmp eq i32 %5, -2
  br i1 %cmp, label %cleanup, label %if.else4

if.else4:                                         ; preds = %if.end
  %cmp5 = icmp sgt i32 %5, -1
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.else4
  %6 = load i64, i64* %prev_t, align 8, !tbaa !18
  %sub = sub i64 %call, %6
  %7 = load i32, i32* %active_threads, align 4, !tbaa !37
  call void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* nonnull %s, i32 %5, i64 %sub, i32 %7) #14
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.else4
  store i64 %call, i64* %prev_t, align 8, !tbaa !18
  %sleep_time = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 1
  %8 = load i32, i32* %sleep_time, align 8, !tbaa !376
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.end
  %retval.0 = phi i32 [ %8, %if.end8 ], [ -1, %if.end ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv(i8* %0) #4 {
entry:
  %t = alloca i64, align 8
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #14
  %lock = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock) #13
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  %1 = load i32, i32* %current_func, align 8, !tbaa !335
  %cmp.not23 = icmp eq i32 %1, -2
  br i1 %cmp.not23, label %while.end8, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %2 = bitcast i64* %t to i8*
  br label %while.body

while.body:                                       ; preds = %while.end, %while.body.lr.ph
  %call1 = call i64 @halide_current_time_ns(i8* null) #13
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #11
  store i64 %call1, i64* %t, align 8, !tbaa !18
  %call420 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* nonnull %call, i64* nonnull %t) #14
  %cmp521 = icmp slt i32 %call420, 0
  br i1 %cmp521, label %while.end, label %if.end

if.end:                                           ; preds = %while.body, %if.end
  %call422 = phi i32 [ %call4, %if.end ], [ %call420, %while.body ]
  call void @halide_mutex_unlock(%struct.halide_mutex* %lock) #13
  call void @halide_sleep_ms(i8* null, i32 %call422) #13
  call void @halide_mutex_lock(%struct.halide_mutex* %lock) #13
  %call4 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* %call, i64* nonnull %t) #14
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %while.end, label %if.end

while.end:                                        ; preds = %if.end, %while.body
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #11
  %3 = load i32, i32* %current_func, align 8, !tbaa !335
  %cmp.not = icmp eq i32 %3, -2
  br i1 %cmp.not, label %while.end8, label %while.body, !llvm.loop !377

while.end8:                                       ; preds = %while.end, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock) #13
  ret void
}

; Function Attrs: nounwind
define weak %struct.halide_profiler_pipeline_stats* @halide_profiler_get_pipeline_state(i8* %pipeline_name) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #14
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #13
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.013 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not14 = icmp eq %struct.halide_profiler_pipeline_stats* %p.013, null
  br i1 %tobool.not14, label %cleanup, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.015 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.013, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !341
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 8
  %1 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %1, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup, label %for.body, !llvm.loop !378

cleanup:                                          ; preds = %for.inc, %for.body, %entry
  %p.0.lcssa = phi %struct.halide_profiler_pipeline_stats* [ null, %entry ], [ null, %for.inc ], [ %p.015, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #13
  ret %struct.halide_profiler_pipeline_stats* %p.0.lcssa
}

; Function Attrs: nounwind
define weak i32 @halide_profiler_pipeline_start(i8* %user_context, i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #14
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #13
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !333
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @halide_start_clock(i8* %user_context) #13
  %call2 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv, i8* null) #13
  store %struct.halide_thread* %call2, %struct.halide_thread** %sampling_thread, align 8, !tbaa !333
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call4 = tail call %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) #14
  %tobool5.not = icmp eq %struct.halide_profiler_pipeline_stats* %call4, null
  br i1 %tobool5.not, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32 @halide_error_out_of_memory(i8* %user_context) #13
  br label %cleanup

if.end8:                                          ; preds = %if.end
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !338
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %runs, align 8, !tbaa !338
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 10
  %2 = load i32, i32* %first_func_id, align 4, !tbaa !371
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then6
  %retval.0 = phi i32 [ %2, %if.end8 ], [ %call7, %if.then6 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock.i) #13
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_stack_peak_update(i8* %user_context, i8* %pipeline_state, i64* %f_values) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp.not, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.186, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !346
  %cmp118 = icmp sgt i32 %1, 0
  br i1 %cmp118, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %do.end
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %do.end
  ret void

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %3 = phi i32 [ %1, %for.body.lr.ph ], [ %9, %for.inc ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i64, i64* %f_values, i64 %indvars.iv
  %4 = load i64, i64* %arrayidx, align 8, !tbaa !18
  %cmp2.not = icmp eq i64 %4, 0
  br i1 %cmp2.not, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %5 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !347
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %5, i64 %indvars.iv, i32 4
  %6 = load i64, i64* %stack_peak, align 8, !tbaa !18
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then3
  %old_val.0.i = phi i64 [ %6, %if.then3 ], [ %8, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %4
  br i1 %cmp.i, label %while.body.i, label %for.inc.loopexit

while.body.i:                                     ; preds = %while.cond.i
  %7 = cmpxchg i64* %stack_peak, i64 %old_val.0.i, i64 %4 seq_cst seq_cst
  %8 = extractvalue { i64, i1 } %7, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %8
  br i1 %cmp1.i, label %for.inc.loopexit, label %while.cond.i, !llvm.loop !379

for.inc.loopexit:                                 ; preds = %while.body.i, %while.cond.i
  %.pre = load i32, i32* %0, align 8, !tbaa !346
  br label %for.inc

for.inc:                                          ; preds = %for.inc.loopexit, %for.body
  %9 = phi i32 [ %.pre, %for.inc.loopexit ], [ %3, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = sext i32 %9 to i64
  %cmp1 = icmp slt i64 %indvars.iv.next, %10
  br i1 %cmp1, label %for.body, label %for.cond.cleanup, !llvm.loop !380
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_allocate(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %incr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %incr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.1.187, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.2.188, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !346
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.3.189, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !347
  %idxprom = sext i32 %func_id to i64
  %num_allocs = getelementptr inbounds i8, i8* %pipeline_state, i64 88
  %4 = bitcast i8* %num_allocs to i32*
  %5 = atomicrmw add i32* %4, i32 1 seq_cst
  %memory_total = getelementptr inbounds i8, i8* %pipeline_state, i64 24
  %6 = bitcast i8* %memory_total to i64*
  %7 = atomicrmw add i64* %6, i64 %incr seq_cst
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %8 = bitcast i8* %memory_current to i64*
  %9 = atomicrmw add i64* %8, i64 %incr seq_cst
  %10 = add i64 %9, %incr
  %memory_peak = getelementptr inbounds i8, i8* %pipeline_state, i64 16
  %11 = bitcast i8* %memory_peak to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !18
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %do.end15
  %old_val.0.i = phi i64 [ %12, %do.end15 ], [ %14, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %10
  br i1 %cmp.i, label %while.body.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit

while.body.i:                                     ; preds = %while.cond.i
  %13 = cmpxchg i64* %11, i64 %old_val.0.i, i64 %10 seq_cst seq_cst
  %14 = extractvalue { i64, i1 } %13, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %14
  br i1 %cmp1.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit, label %while.cond.i, !llvm.loop !379

_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit: ; preds = %while.body.i, %while.cond.i
  %num_allocs16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 8
  %15 = atomicrmw add i32* %num_allocs16, i32 1 seq_cst
  %memory_total17 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 3
  %16 = atomicrmw add i64* %memory_total17, i64 %incr seq_cst
  %memory_current18 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %17 = atomicrmw add i64* %memory_current18, i64 %incr seq_cst
  %18 = add i64 %17, %incr
  %memory_peak19 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 2
  %19 = load i64, i64* %memory_peak19, align 8, !tbaa !18
  br label %while.cond.i43

while.cond.i43:                                   ; preds = %while.body.i45, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit
  %old_val.0.i41 = phi i64 [ %19, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit ], [ %21, %while.body.i45 ]
  %cmp.i42 = icmp ult i64 %old_val.0.i41, %18
  br i1 %cmp.i42, label %while.body.i45, label %return

while.body.i45:                                   ; preds = %while.cond.i43
  %20 = cmpxchg i64* %memory_peak19, i64 %old_val.0.i41, i64 %18 seq_cst seq_cst
  %21 = extractvalue { i64, i1 } %20, 0
  %cmp1.i44 = icmp eq i64 %old_val.0.i41, %21
  br i1 %cmp1.i44, label %return, label %while.cond.i43, !llvm.loop !379

return:                                           ; preds = %while.body.i45, %while.cond.i43, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_free(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %decr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %decr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.190, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.5.191, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !346
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.6.192, i64 0, i64 0)) #13
  tail call void @abort() #13
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !347
  %idxprom = sext i32 %func_id to i64
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %4 = bitcast i8* %memory_current to i64*
  %5 = atomicrmw sub i64* %4, i64 %decr seq_cst
  %memory_current16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %6 = atomicrmw sub i64* %memory_current16, i64 %decr seq_cst
  br label %return

return:                                           ; preds = %do.end15, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_report(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #14
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #13
  tail call void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %call) #14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #13
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_reset() local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #14
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #13
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %call) #14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #13
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_profiler_pipeline_end(i8* %user_context, i8* %state) local_unnamed_addr #2 {
entry:
  %current_func = getelementptr inbounds i8, i8* %state, i64 16
  %0 = bitcast i8* %current_func to i32*
  store i32 -1, i32* %0, align 8, !tbaa !335
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #13
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #13
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i64 32) #13
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #13
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.197, i64 0, i64 0)) #13
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !18
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 0), align 8, !tbaa !18
  %and = and i64 %3, %2
  %cmp6.not = icmp eq i64 %and, 0
  br i1 %cmp6.not, label %for.inc.critedge, label %if.then7

if.then7:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 2), align 8, !tbaa !18
  %and10 = and i64 %4, %and
  %cmp11.not = icmp eq i64 %and10, %and
  br i1 %cmp11.not, label %for.inc.critedge, label %cleanup15

for.inc.critedge:                                 ; preds = %if.then7, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i64 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !18
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 1), align 8, !tbaa !18
  %and.1 = and i64 %6, %5
  %cmp6.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp6.not.1, label %for.inc.critedge.1, label %if.then7.1

cleanup15:                                        ; preds = %for.inc.critedge.1, %if.then7.1, %if.then7
  %cmp3.lcssa = phi i32 [ 0, %if.then7 ], [ 0, %if.then7.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then7.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 3), align 8, !tbaa !18
  %and10.1 = and i64 %7, %and.1
  %cmp11.not.1 = icmp eq i64 %and10.1, %and.1
  br i1 %cmp11.not.1, label %for.inc.critedge.1, label %cleanup15

for.inc.critedge.1:                               ; preds = %if.then7.1, %for.inc.critedge
  br label %cleanup15
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #13
  ret i32 %call
}

; Function Attrs: nounwind willreturn
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #8 {
entry:
  %arrayidx3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i64 0, i32 1, i64 0
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %0, align 8, !tbaa !18
  %1 = bitcast i64* %arrayidx3.i to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %1, align 8, !tbaa !18
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16>, <4 x i16>) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32>, <4 x i32>) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32>, <4 x i32>) #9

; Function Attrs: nounwind
define i32 @blur5x5_par_for_blur_y_s0_y_y(i8* %__user_context, i32 %blur_y.s0.y.y, i8* readonly %closure_arg) #10 {
entry:
  %0 = bitcast i8* %closure_arg to i8**
  %blur_y = load i8*, i8** %0, align 8
  %1 = getelementptr inbounds i8, i8* %closure_arg, i64 8
  %2 = bitcast i8* %1 to i8**
  %input = load i8*, i8** %2, align 8
  %3 = getelementptr inbounds i8, i8* %closure_arg, i64 16
  %4 = bitcast i8* %3 to i32*
  %5 = getelementptr inbounds i8, i8* %closure_arg, i64 20
  %6 = bitcast i8* %5 to i32*
  %blur_y.extent.1 = load i32, i32* %6, align 4
  %7 = getelementptr inbounds i8, i8* %closure_arg, i64 24
  %8 = bitcast i8* %7 to i32*
  %blur_y.min.1 = load i32, i32* %8, align 4
  %9 = getelementptr inbounds i8, i8* %closure_arg, i64 28
  %10 = bitcast i8* %9 to i32*
  %blur_y.s0.y.y.epilogue = load i32, i32* %10, align 4
  %11 = getelementptr inbounds i8, i8* %closure_arg, i64 32
  %12 = bitcast i8* %11 to i32*
  %blur_y.s0.y.y.prologue = load i32, i32* %12, align 4
  %13 = getelementptr inbounds i8, i8* %closure_arg, i64 36
  %14 = bitcast i8* %13 to i32*
  %blur_y.stride.1 = load i32, i32* %14, align 4
  %15 = getelementptr inbounds i8, i8* %closure_arg, i64 40
  %16 = bitcast i8* %15 to i32*
  %17 = getelementptr inbounds i8, i8* %closure_arg, i64 44
  %18 = bitcast i8* %17 to i32*
  %input.min.0 = load i32, i32* %18, align 4
  %19 = getelementptr inbounds i8, i8* %closure_arg, i64 48
  %20 = bitcast i8* %19 to i32*
  %input.stride.1 = load i32, i32* %20, align 4
  %21 = getelementptr inbounds i8, i8* %closure_arg, i64 52
  %22 = bitcast i8* %21 to i32*
  %t214 = load i32, i32* %22, align 4
  %23 = getelementptr inbounds i8, i8* %closure_arg, i64 56
  %24 = bitcast i8* %23 to i32*
  %t215 = load i32, i32* %24, align 4
  %25 = getelementptr inbounds i8, i8* %closure_arg, i64 60
  %26 = bitcast i8* %25 to i32*
  %t217 = load i32, i32* %26, align 4
  %27 = getelementptr inbounds i8, i8* %closure_arg, i64 64
  %28 = bitcast i8* %27 to i32*
  %t222 = load i32, i32* %28, align 4
  %29 = getelementptr inbounds i8, i8* %closure_arg, i64 68
  %30 = bitcast i8* %29 to i32*
  %31 = getelementptr inbounds i8, i8* %closure_arg, i64 72
  %32 = bitcast i8* %31 to i32*
  %b11 = load i32, i32* %32, align 4
  %33 = getelementptr inbounds i8, i8* %closure_arg, i64 76
  %34 = bitcast i8* %33 to i32*
  %t227 = load i32, i32* %34, align 4
  %35 = getelementptr inbounds i8, i8* %closure_arg, i64 80
  %36 = bitcast i8* %35 to i32*
  %t228 = load i32, i32* %36, align 4
  %37 = getelementptr inbounds i8, i8* %closure_arg, i64 84
  %38 = bitcast i8* %37 to i32*
  %t230 = load i32, i32* %38, align 4
  %39 = getelementptr inbounds i8, i8* %closure_arg, i64 88
  %40 = bitcast i8* %39 to i32*
  %t231 = load i32, i32* %40, align 4
  %41 = getelementptr inbounds i8, i8* %closure_arg, i64 92
  %42 = bitcast i8* %41 to i32*
  %a7 = load i32, i32* %42, align 4
  %43 = getelementptr inbounds i8, i8* %closure_arg, i64 96
  %44 = bitcast i8* %43 to i32*
  %t233 = load i32, i32* %44, align 4
  %45 = getelementptr inbounds i8, i8* %closure_arg, i64 100
  %46 = bitcast i8* %45 to i32*
  %t234 = load i32, i32* %46, align 4
  %47 = icmp sle i32 %blur_y.s0.y.y.prologue, %blur_y.s0.y.y
  %48 = icmp sgt i32 %blur_y.s0.y.y.epilogue, %blur_y.s0.y.y
  %49 = and i1 %48, %47
  br i1 %49, label %then_bb, label %next_bb

after_bb:                                         ; preds = %if.then.i155, %"end for blur_y.s0.y.yi.$n.rebased15", %if.then.i, %"end for blur_y.s0.y.yi.$n.rebased"
  %blur_y30 = load i8*, i8** %0, align 8
  %input31 = load i8*, i8** %2, align 8
  %blur_y.extent.133 = load i32, i32* %6, align 4
  %blur_y.min.134 = load i32, i32* %8, align 4
  %blur_y.s0.y.y.epilogue35 = load i32, i32* %10, align 4
  %blur_y.s0.y.y.prologue36 = load i32, i32* %12, align 4
  %blur_y.stride.137 = load i32, i32* %14, align 4
  %input.min.039 = load i32, i32* %18, align 4
  %input.stride.140 = load i32, i32* %20, align 4
  %t21441 = load i32, i32* %22, align 4
  %t21542 = load i32, i32* %24, align 4
  %t21743 = load i32, i32* %26, align 4
  %t22244 = load i32, i32* %28, align 4
  %b23 = load i32, i32* %32, align 4
  %t22746 = load i32, i32* %34, align 4
  %t22847 = load i32, i32* %36, align 4
  %t23048 = load i32, i32* %38, align 4
  %t23149 = load i32, i32* %40, align 4
  %a19 = load i32, i32* %42, align 4
  %t23350 = load i32, i32* %44, align 4
  %t23451 = load i32, i32* %46, align 4
  %50 = icmp sle i32 %blur_y.s0.y.y.prologue36, %blur_y.s0.y.y
  %51 = icmp sgt i32 %blur_y.s0.y.y.epilogue35, %blur_y.s0.y.y
  %52 = and i1 %51, %50
  br i1 %52, label %then_bb53, label %next_bb54

then_bb:                                          ; preds = %entry
  %t224 = load i32, i32* %30, align 4
  %a0 = shl nsw i32 %blur_y.s0.y.y, 7
  %b2 = add nsw i32 %blur_y.extent.1, -128
  %53 = icmp slt i32 %a0, %b2
  %blur_y.s0.y.yi.base.s = select i1 %53, i32 %a0, i32 %b2
  %54 = icmp sgt i32 %a7, 0
  %55 = select i1 %54, i32 %a7, i32 0
  %t256 = zext i32 %55 to i64
  %56 = shl nuw nsw i64 %t256, 4
  %57 = or i64 %56, 6
  %58 = tail call i8* @halide_malloc(i8* %__user_context, i64 %57)
  %blur_x = bitcast i8* %58 to i16*
  %t239 = sub nsw i32 %t233, %t214
  %59 = icmp sgt i32 %t234, 0
  %60 = add nsw i32 %t227, -1
  %61 = insertelement <64 x i32> undef, i32 %60, i32 0
  %62 = shufflevector <64 x i32> %61, <64 x i32> undef, <4 x i32> zeroinitializer
  %63 = insertelement <64 x i32> undef, i32 %input.min.0, i32 0
  %64 = shufflevector <64 x i32> %63, <64 x i32> undef, <4 x i32> zeroinitializer
  %65 = bitcast i8* %input to i16*
  %t243 = sub nsw i32 %t214, %t234
  %66 = icmp sgt i32 %t243, 0
  %67 = icmp sgt i32 %t239, 0
  %68 = icmp sgt i32 %t231, 0
  %69 = sext i32 %a7 to i64
  %70 = sext i32 %blur_y.stride.1 to i64
  %71 = sext i32 %t222 to i64
  %72 = bitcast i8* %blur_y to i16*
  %73 = icmp sgt i32 %t230, %t231
  %74 = sext i32 %t224 to i64
  %75 = zext i32 %t243 to i64
  %76 = zext i32 %t231 to i64
  %77 = sext i32 %t228 to i64
  br label %"for blur_y.s0.y.yi.$n.rebased"

next_bb:                                          ; preds = %entry
  %input.extent.1 = load i32, i32* %16, align 4
  %blur_y.extent.0 = load i32, i32* %4, align 4
  %a5 = shl nsw i32 %blur_y.s0.y.y, 7
  %b7 = add nsw i32 %blur_y.extent.1, -128
  %78 = icmp slt i32 %a5, %b7
  %blur_y.s0.y.yi.base.s12 = select i1 %78, i32 %a5, i32 %b7
  %79 = icmp sgt i32 %a7, 0
  %80 = select i1 %79, i32 %a7, i32 0
  %t257 = zext i32 %80 to i64
  %81 = shl nuw nsw i64 %t257, 4
  %82 = or i64 %81, 6
  %83 = tail call i8* @halide_malloc(i8* %__user_context, i64 %82)
  %blur_x13 = bitcast i8* %83 to i16*
  %b10 = add nsw i32 %input.extent.1, -1
  %84 = icmp sgt i32 %t233, 0
  %85 = add nsw i32 %t227, -1
  %86 = insertelement <64 x i32> undef, i32 %85, i32 0
  %87 = shufflevector <64 x i32> %86, <64 x i32> undef, <4 x i32> zeroinitializer
  %88 = insertelement <64 x i32> undef, i32 %input.min.0, i32 0
  %89 = shufflevector <64 x i32> %88, <64 x i32> undef, <4 x i32> zeroinitializer
  %90 = bitcast i8* %input to i16*
  %91 = icmp sgt i32 %t230, 0
  %b13 = add nsw i32 %blur_y.extent.0, -64
  %92 = sext i32 %a7 to i64
  %93 = sext i32 %blur_y.stride.1 to i64
  %94 = sext i32 %t222 to i64
  %95 = bitcast i8* %blur_y to i16*
  br label %"for blur_y.s0.y.yi.$n.rebased14"

"for blur_y.s0.y.yi.$n.rebased":                  ; preds = %then_bb, %after_bb6
  %indvars.iv182 = phi i64 [ 0, %then_bb ], [ %indvars.iv.next183, %after_bb6 ]
  %96 = trunc i64 %indvars.iv182 to i32
  %t237 = add i32 %blur_y.s0.y.yi.base.s, %96
  %97 = add i32 %t237, %blur_y.min.1
  %98 = and i32 %97, 7
  %99 = mul nsw i32 %a7, %98
  %t242 = sub nsw i32 %99, %t215
  %100 = add i32 %t237, %t217
  %101 = mul nsw i32 %100, %input.stride.1
  %t241 = sub nsw i32 %101, %input.min.0
  br i1 %59, label %"for blur_x.s0.x.x.preheader", label %"end for blur_x.s0.x.x", !prof !381

"for blur_x.s0.x.x.preheader":                    ; preds = %"for blur_y.s0.y.yi.$n.rebased"
  %102 = insertelement <64 x i32> undef, i32 %t241, i32 0
  %t198 = shufflevector <64 x i32> %102, <64 x i32> undef, <64 x i32> zeroinitializer
  %103 = sext i32 %t242 to i64
  br label %"for blur_x.s0.x.x"

"end for blur_y.s0.y.yi.$n.rebased":              ; preds = %after_bb6
  %tobool.not.i.not = icmp eq i8* %58, null
  br i1 %tobool.not.i.not, label %after_bb, label %if.then.i

if.then.i:                                        ; preds = %"end for blur_y.s0.y.yi.$n.rebased"
  tail call void @halide_free(i8* %__user_context, i8* nonnull %58) #13
  br label %after_bb

"for blur_x.s0.x.x":                              ; preds = %"for blur_x.s0.x.x.preheader", %"for blur_x.s0.x.x"
  %blur_x.s0.x.x = phi i32 [ %2150, %"for blur_x.s0.x.x" ], [ 0, %"for blur_x.s0.x.x.preheader" ]
  %104 = shl nsw i32 %blur_x.s0.x.x, 6
  %a3 = add nsw i32 %104, %t215
  %105 = icmp slt i32 %a3, %b11
  %blur_x.s0.x.v1.base.s = select i1 %105, i32 %a3, i32 %b11
  %106 = add nsw i32 %blur_x.s0.x.v1.base.s, -63
  %107 = insertelement <64 x i32> undef, i32 %106, i32 0
  %108 = shufflevector <64 x i32> %107, <64 x i32> undef, <64 x i32> zeroinitializer
  %109 = add nsw <64 x i32> %108, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %110 = shufflevector <64 x i32> %109, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %111 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %110, <4 x i32> %62)
  %112 = shufflevector <64 x i32> %109, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %113 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %112, <4 x i32> %62)
  %114 = shufflevector <64 x i32> %109, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %115 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %114, <4 x i32> %62)
  %116 = shufflevector <64 x i32> %109, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %117 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %116, <4 x i32> %62)
  %118 = shufflevector <64 x i32> %109, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %119 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %118, <4 x i32> %62)
  %120 = shufflevector <64 x i32> %109, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %121 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %120, <4 x i32> %62)
  %122 = shufflevector <64 x i32> %109, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %123 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %122, <4 x i32> %62)
  %124 = shufflevector <64 x i32> %109, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %125 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %124, <4 x i32> %62)
  %126 = shufflevector <64 x i32> %109, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %127 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %126, <4 x i32> %62)
  %128 = shufflevector <64 x i32> %109, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %129 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %128, <4 x i32> %62)
  %130 = shufflevector <64 x i32> %109, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %131 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %130, <4 x i32> %62)
  %132 = shufflevector <64 x i32> %109, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %133 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %132, <4 x i32> %62)
  %134 = shufflevector <64 x i32> %109, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %135 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %134, <4 x i32> %62)
  %136 = shufflevector <64 x i32> %109, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %137 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %136, <4 x i32> %62)
  %138 = shufflevector <64 x i32> %109, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %139 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %138, <4 x i32> %62)
  %140 = shufflevector <64 x i32> %109, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %141 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %140, <4 x i32> %62)
  %142 = shufflevector <4 x i32> %141, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %143 = shufflevector <8 x i32> %142, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %144 = shufflevector <16 x i32> %143, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %145 = shufflevector <32 x i32> %144, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %146 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %111, <4 x i32> %64)
  %147 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %113, <4 x i32> %64)
  %148 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %115, <4 x i32> %64)
  %149 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %117, <4 x i32> %64)
  %150 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %119, <4 x i32> %64)
  %151 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %121, <4 x i32> %64)
  %152 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %123, <4 x i32> %64)
  %153 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %125, <4 x i32> %64)
  %154 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %127, <4 x i32> %64)
  %155 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %129, <4 x i32> %64)
  %156 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %131, <4 x i32> %64)
  %157 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %133, <4 x i32> %64)
  %158 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %135, <4 x i32> %64)
  %159 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %137, <4 x i32> %64)
  %160 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %139, <4 x i32> %64)
  %161 = shufflevector <64 x i32> %145, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %162 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %161, <4 x i32> %64)
  %163 = shufflevector <4 x i32> %146, <4 x i32> %147, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %164 = shufflevector <4 x i32> %148, <4 x i32> %149, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %165 = shufflevector <4 x i32> %150, <4 x i32> %151, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %166 = shufflevector <4 x i32> %152, <4 x i32> %153, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %167 = shufflevector <4 x i32> %154, <4 x i32> %155, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %168 = shufflevector <4 x i32> %156, <4 x i32> %157, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %169 = shufflevector <4 x i32> %158, <4 x i32> %159, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %170 = shufflevector <4 x i32> %160, <4 x i32> %162, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %171 = shufflevector <8 x i32> %163, <8 x i32> %164, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %172 = shufflevector <8 x i32> %165, <8 x i32> %166, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %173 = shufflevector <8 x i32> %167, <8 x i32> %168, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %174 = shufflevector <8 x i32> %169, <8 x i32> %170, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %175 = shufflevector <16 x i32> %171, <16 x i32> %172, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %176 = shufflevector <16 x i32> %173, <16 x i32> %174, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %177 = shufflevector <32 x i32> %175, <32 x i32> %176, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %178 = add nsw <64 x i32> %177, %t198
  %179 = extractelement <64 x i32> %178, i32 0
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds i16, i16* %65, i64 %180
  %182 = load i16, i16* %181, align 2, !tbaa !382
  %183 = insertelement <64 x i16> undef, i16 %182, i32 0
  %184 = extractelement <64 x i32> %178, i32 1
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds i16, i16* %65, i64 %185
  %187 = load i16, i16* %186, align 2, !tbaa !382
  %188 = insertelement <64 x i16> %183, i16 %187, i32 1
  %189 = extractelement <64 x i32> %178, i32 2
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds i16, i16* %65, i64 %190
  %192 = load i16, i16* %191, align 2, !tbaa !382
  %193 = insertelement <64 x i16> %188, i16 %192, i32 2
  %194 = extractelement <64 x i32> %178, i32 3
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds i16, i16* %65, i64 %195
  %197 = load i16, i16* %196, align 2, !tbaa !382
  %198 = insertelement <64 x i16> %193, i16 %197, i32 3
  %199 = extractelement <64 x i32> %178, i32 4
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds i16, i16* %65, i64 %200
  %202 = load i16, i16* %201, align 2, !tbaa !382
  %203 = insertelement <64 x i16> %198, i16 %202, i32 4
  %204 = extractelement <64 x i32> %178, i32 5
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds i16, i16* %65, i64 %205
  %207 = load i16, i16* %206, align 2, !tbaa !382
  %208 = insertelement <64 x i16> %203, i16 %207, i32 5
  %209 = extractelement <64 x i32> %178, i32 6
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds i16, i16* %65, i64 %210
  %212 = load i16, i16* %211, align 2, !tbaa !382
  %213 = insertelement <64 x i16> %208, i16 %212, i32 6
  %214 = extractelement <64 x i32> %178, i32 7
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds i16, i16* %65, i64 %215
  %217 = load i16, i16* %216, align 2, !tbaa !382
  %218 = insertelement <64 x i16> %213, i16 %217, i32 7
  %219 = extractelement <64 x i32> %178, i32 8
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds i16, i16* %65, i64 %220
  %222 = load i16, i16* %221, align 2, !tbaa !382
  %223 = insertelement <64 x i16> %218, i16 %222, i32 8
  %224 = extractelement <64 x i32> %178, i32 9
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds i16, i16* %65, i64 %225
  %227 = load i16, i16* %226, align 2, !tbaa !382
  %228 = insertelement <64 x i16> %223, i16 %227, i32 9
  %229 = extractelement <64 x i32> %178, i32 10
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds i16, i16* %65, i64 %230
  %232 = load i16, i16* %231, align 2, !tbaa !382
  %233 = insertelement <64 x i16> %228, i16 %232, i32 10
  %234 = extractelement <64 x i32> %178, i32 11
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds i16, i16* %65, i64 %235
  %237 = load i16, i16* %236, align 2, !tbaa !382
  %238 = insertelement <64 x i16> %233, i16 %237, i32 11
  %239 = extractelement <64 x i32> %178, i32 12
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds i16, i16* %65, i64 %240
  %242 = load i16, i16* %241, align 2, !tbaa !382
  %243 = insertelement <64 x i16> %238, i16 %242, i32 12
  %244 = extractelement <64 x i32> %178, i32 13
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds i16, i16* %65, i64 %245
  %247 = load i16, i16* %246, align 2, !tbaa !382
  %248 = insertelement <64 x i16> %243, i16 %247, i32 13
  %249 = extractelement <64 x i32> %178, i32 14
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds i16, i16* %65, i64 %250
  %252 = load i16, i16* %251, align 2, !tbaa !382
  %253 = insertelement <64 x i16> %248, i16 %252, i32 14
  %254 = extractelement <64 x i32> %178, i32 15
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds i16, i16* %65, i64 %255
  %257 = load i16, i16* %256, align 2, !tbaa !382
  %258 = insertelement <64 x i16> %253, i16 %257, i32 15
  %259 = extractelement <64 x i32> %178, i32 16
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds i16, i16* %65, i64 %260
  %262 = load i16, i16* %261, align 2, !tbaa !382
  %263 = insertelement <64 x i16> %258, i16 %262, i32 16
  %264 = extractelement <64 x i32> %178, i32 17
  %265 = sext i32 %264 to i64
  %266 = getelementptr inbounds i16, i16* %65, i64 %265
  %267 = load i16, i16* %266, align 2, !tbaa !382
  %268 = insertelement <64 x i16> %263, i16 %267, i32 17
  %269 = extractelement <64 x i32> %178, i32 18
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds i16, i16* %65, i64 %270
  %272 = load i16, i16* %271, align 2, !tbaa !382
  %273 = insertelement <64 x i16> %268, i16 %272, i32 18
  %274 = extractelement <64 x i32> %178, i32 19
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds i16, i16* %65, i64 %275
  %277 = load i16, i16* %276, align 2, !tbaa !382
  %278 = insertelement <64 x i16> %273, i16 %277, i32 19
  %279 = extractelement <64 x i32> %178, i32 20
  %280 = sext i32 %279 to i64
  %281 = getelementptr inbounds i16, i16* %65, i64 %280
  %282 = load i16, i16* %281, align 2, !tbaa !382
  %283 = insertelement <64 x i16> %278, i16 %282, i32 20
  %284 = extractelement <64 x i32> %178, i32 21
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds i16, i16* %65, i64 %285
  %287 = load i16, i16* %286, align 2, !tbaa !382
  %288 = insertelement <64 x i16> %283, i16 %287, i32 21
  %289 = extractelement <64 x i32> %178, i32 22
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds i16, i16* %65, i64 %290
  %292 = load i16, i16* %291, align 2, !tbaa !382
  %293 = insertelement <64 x i16> %288, i16 %292, i32 22
  %294 = extractelement <64 x i32> %178, i32 23
  %295 = sext i32 %294 to i64
  %296 = getelementptr inbounds i16, i16* %65, i64 %295
  %297 = load i16, i16* %296, align 2, !tbaa !382
  %298 = insertelement <64 x i16> %293, i16 %297, i32 23
  %299 = extractelement <64 x i32> %178, i32 24
  %300 = sext i32 %299 to i64
  %301 = getelementptr inbounds i16, i16* %65, i64 %300
  %302 = load i16, i16* %301, align 2, !tbaa !382
  %303 = insertelement <64 x i16> %298, i16 %302, i32 24
  %304 = extractelement <64 x i32> %178, i32 25
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds i16, i16* %65, i64 %305
  %307 = load i16, i16* %306, align 2, !tbaa !382
  %308 = insertelement <64 x i16> %303, i16 %307, i32 25
  %309 = extractelement <64 x i32> %178, i32 26
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds i16, i16* %65, i64 %310
  %312 = load i16, i16* %311, align 2, !tbaa !382
  %313 = insertelement <64 x i16> %308, i16 %312, i32 26
  %314 = extractelement <64 x i32> %178, i32 27
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds i16, i16* %65, i64 %315
  %317 = load i16, i16* %316, align 2, !tbaa !382
  %318 = insertelement <64 x i16> %313, i16 %317, i32 27
  %319 = extractelement <64 x i32> %178, i32 28
  %320 = sext i32 %319 to i64
  %321 = getelementptr inbounds i16, i16* %65, i64 %320
  %322 = load i16, i16* %321, align 2, !tbaa !382
  %323 = insertelement <64 x i16> %318, i16 %322, i32 28
  %324 = extractelement <64 x i32> %178, i32 29
  %325 = sext i32 %324 to i64
  %326 = getelementptr inbounds i16, i16* %65, i64 %325
  %327 = load i16, i16* %326, align 2, !tbaa !382
  %328 = insertelement <64 x i16> %323, i16 %327, i32 29
  %329 = extractelement <64 x i32> %178, i32 30
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds i16, i16* %65, i64 %330
  %332 = load i16, i16* %331, align 2, !tbaa !382
  %333 = insertelement <64 x i16> %328, i16 %332, i32 30
  %334 = extractelement <64 x i32> %178, i32 31
  %335 = sext i32 %334 to i64
  %336 = getelementptr inbounds i16, i16* %65, i64 %335
  %337 = load i16, i16* %336, align 2, !tbaa !382
  %338 = insertelement <64 x i16> %333, i16 %337, i32 31
  %339 = extractelement <64 x i32> %178, i32 32
  %340 = sext i32 %339 to i64
  %341 = getelementptr inbounds i16, i16* %65, i64 %340
  %342 = load i16, i16* %341, align 2, !tbaa !382
  %343 = insertelement <64 x i16> %338, i16 %342, i32 32
  %344 = extractelement <64 x i32> %178, i32 33
  %345 = sext i32 %344 to i64
  %346 = getelementptr inbounds i16, i16* %65, i64 %345
  %347 = load i16, i16* %346, align 2, !tbaa !382
  %348 = insertelement <64 x i16> %343, i16 %347, i32 33
  %349 = extractelement <64 x i32> %178, i32 34
  %350 = sext i32 %349 to i64
  %351 = getelementptr inbounds i16, i16* %65, i64 %350
  %352 = load i16, i16* %351, align 2, !tbaa !382
  %353 = insertelement <64 x i16> %348, i16 %352, i32 34
  %354 = extractelement <64 x i32> %178, i32 35
  %355 = sext i32 %354 to i64
  %356 = getelementptr inbounds i16, i16* %65, i64 %355
  %357 = load i16, i16* %356, align 2, !tbaa !382
  %358 = insertelement <64 x i16> %353, i16 %357, i32 35
  %359 = extractelement <64 x i32> %178, i32 36
  %360 = sext i32 %359 to i64
  %361 = getelementptr inbounds i16, i16* %65, i64 %360
  %362 = load i16, i16* %361, align 2, !tbaa !382
  %363 = insertelement <64 x i16> %358, i16 %362, i32 36
  %364 = extractelement <64 x i32> %178, i32 37
  %365 = sext i32 %364 to i64
  %366 = getelementptr inbounds i16, i16* %65, i64 %365
  %367 = load i16, i16* %366, align 2, !tbaa !382
  %368 = insertelement <64 x i16> %363, i16 %367, i32 37
  %369 = extractelement <64 x i32> %178, i32 38
  %370 = sext i32 %369 to i64
  %371 = getelementptr inbounds i16, i16* %65, i64 %370
  %372 = load i16, i16* %371, align 2, !tbaa !382
  %373 = insertelement <64 x i16> %368, i16 %372, i32 38
  %374 = extractelement <64 x i32> %178, i32 39
  %375 = sext i32 %374 to i64
  %376 = getelementptr inbounds i16, i16* %65, i64 %375
  %377 = load i16, i16* %376, align 2, !tbaa !382
  %378 = insertelement <64 x i16> %373, i16 %377, i32 39
  %379 = extractelement <64 x i32> %178, i32 40
  %380 = sext i32 %379 to i64
  %381 = getelementptr inbounds i16, i16* %65, i64 %380
  %382 = load i16, i16* %381, align 2, !tbaa !382
  %383 = insertelement <64 x i16> %378, i16 %382, i32 40
  %384 = extractelement <64 x i32> %178, i32 41
  %385 = sext i32 %384 to i64
  %386 = getelementptr inbounds i16, i16* %65, i64 %385
  %387 = load i16, i16* %386, align 2, !tbaa !382
  %388 = insertelement <64 x i16> %383, i16 %387, i32 41
  %389 = extractelement <64 x i32> %178, i32 42
  %390 = sext i32 %389 to i64
  %391 = getelementptr inbounds i16, i16* %65, i64 %390
  %392 = load i16, i16* %391, align 2, !tbaa !382
  %393 = insertelement <64 x i16> %388, i16 %392, i32 42
  %394 = extractelement <64 x i32> %178, i32 43
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds i16, i16* %65, i64 %395
  %397 = load i16, i16* %396, align 2, !tbaa !382
  %398 = insertelement <64 x i16> %393, i16 %397, i32 43
  %399 = extractelement <64 x i32> %178, i32 44
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds i16, i16* %65, i64 %400
  %402 = load i16, i16* %401, align 2, !tbaa !382
  %403 = insertelement <64 x i16> %398, i16 %402, i32 44
  %404 = extractelement <64 x i32> %178, i32 45
  %405 = sext i32 %404 to i64
  %406 = getelementptr inbounds i16, i16* %65, i64 %405
  %407 = load i16, i16* %406, align 2, !tbaa !382
  %408 = insertelement <64 x i16> %403, i16 %407, i32 45
  %409 = extractelement <64 x i32> %178, i32 46
  %410 = sext i32 %409 to i64
  %411 = getelementptr inbounds i16, i16* %65, i64 %410
  %412 = load i16, i16* %411, align 2, !tbaa !382
  %413 = insertelement <64 x i16> %408, i16 %412, i32 46
  %414 = extractelement <64 x i32> %178, i32 47
  %415 = sext i32 %414 to i64
  %416 = getelementptr inbounds i16, i16* %65, i64 %415
  %417 = load i16, i16* %416, align 2, !tbaa !382
  %418 = insertelement <64 x i16> %413, i16 %417, i32 47
  %419 = extractelement <64 x i32> %178, i32 48
  %420 = sext i32 %419 to i64
  %421 = getelementptr inbounds i16, i16* %65, i64 %420
  %422 = load i16, i16* %421, align 2, !tbaa !382
  %423 = insertelement <64 x i16> %418, i16 %422, i32 48
  %424 = extractelement <64 x i32> %178, i32 49
  %425 = sext i32 %424 to i64
  %426 = getelementptr inbounds i16, i16* %65, i64 %425
  %427 = load i16, i16* %426, align 2, !tbaa !382
  %428 = insertelement <64 x i16> %423, i16 %427, i32 49
  %429 = extractelement <64 x i32> %178, i32 50
  %430 = sext i32 %429 to i64
  %431 = getelementptr inbounds i16, i16* %65, i64 %430
  %432 = load i16, i16* %431, align 2, !tbaa !382
  %433 = insertelement <64 x i16> %428, i16 %432, i32 50
  %434 = extractelement <64 x i32> %178, i32 51
  %435 = sext i32 %434 to i64
  %436 = getelementptr inbounds i16, i16* %65, i64 %435
  %437 = load i16, i16* %436, align 2, !tbaa !382
  %438 = insertelement <64 x i16> %433, i16 %437, i32 51
  %439 = extractelement <64 x i32> %178, i32 52
  %440 = sext i32 %439 to i64
  %441 = getelementptr inbounds i16, i16* %65, i64 %440
  %442 = load i16, i16* %441, align 2, !tbaa !382
  %443 = insertelement <64 x i16> %438, i16 %442, i32 52
  %444 = extractelement <64 x i32> %178, i32 53
  %445 = sext i32 %444 to i64
  %446 = getelementptr inbounds i16, i16* %65, i64 %445
  %447 = load i16, i16* %446, align 2, !tbaa !382
  %448 = insertelement <64 x i16> %443, i16 %447, i32 53
  %449 = extractelement <64 x i32> %178, i32 54
  %450 = sext i32 %449 to i64
  %451 = getelementptr inbounds i16, i16* %65, i64 %450
  %452 = load i16, i16* %451, align 2, !tbaa !382
  %453 = insertelement <64 x i16> %448, i16 %452, i32 54
  %454 = extractelement <64 x i32> %178, i32 55
  %455 = sext i32 %454 to i64
  %456 = getelementptr inbounds i16, i16* %65, i64 %455
  %457 = load i16, i16* %456, align 2, !tbaa !382
  %458 = insertelement <64 x i16> %453, i16 %457, i32 55
  %459 = extractelement <64 x i32> %178, i32 56
  %460 = sext i32 %459 to i64
  %461 = getelementptr inbounds i16, i16* %65, i64 %460
  %462 = load i16, i16* %461, align 2, !tbaa !382
  %463 = insertelement <64 x i16> %458, i16 %462, i32 56
  %464 = extractelement <64 x i32> %178, i32 57
  %465 = sext i32 %464 to i64
  %466 = getelementptr inbounds i16, i16* %65, i64 %465
  %467 = load i16, i16* %466, align 2, !tbaa !382
  %468 = insertelement <64 x i16> %463, i16 %467, i32 57
  %469 = extractelement <64 x i32> %178, i32 58
  %470 = sext i32 %469 to i64
  %471 = getelementptr inbounds i16, i16* %65, i64 %470
  %472 = load i16, i16* %471, align 2, !tbaa !382
  %473 = insertelement <64 x i16> %468, i16 %472, i32 58
  %474 = extractelement <64 x i32> %178, i32 59
  %475 = sext i32 %474 to i64
  %476 = getelementptr inbounds i16, i16* %65, i64 %475
  %477 = load i16, i16* %476, align 2, !tbaa !382
  %478 = insertelement <64 x i16> %473, i16 %477, i32 59
  %479 = extractelement <64 x i32> %178, i32 60
  %480 = sext i32 %479 to i64
  %481 = getelementptr inbounds i16, i16* %65, i64 %480
  %482 = load i16, i16* %481, align 2, !tbaa !382
  %483 = insertelement <64 x i16> %478, i16 %482, i32 60
  %484 = extractelement <64 x i32> %178, i32 61
  %485 = sext i32 %484 to i64
  %486 = getelementptr inbounds i16, i16* %65, i64 %485
  %487 = load i16, i16* %486, align 2, !tbaa !382
  %488 = insertelement <64 x i16> %483, i16 %487, i32 61
  %489 = extractelement <64 x i32> %178, i32 62
  %490 = sext i32 %489 to i64
  %491 = getelementptr inbounds i16, i16* %65, i64 %490
  %492 = load i16, i16* %491, align 2, !tbaa !382
  %493 = insertelement <64 x i16> %488, i16 %492, i32 62
  %494 = extractelement <64 x i32> %178, i32 63
  %495 = sext i32 %494 to i64
  %496 = getelementptr inbounds i16, i16* %65, i64 %495
  %497 = load i16, i16* %496, align 2, !tbaa !382
  %498 = insertelement <64 x i16> %493, i16 %497, i32 63
  %499 = add nsw i32 %blur_x.s0.x.v1.base.s, -64
  %500 = insertelement <64 x i32> undef, i32 %499, i32 0
  %501 = shufflevector <64 x i32> %500, <64 x i32> undef, <64 x i32> zeroinitializer
  %502 = add nsw <64 x i32> %501, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %503 = shufflevector <64 x i32> %502, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %504 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %503, <4 x i32> %62)
  %505 = shufflevector <64 x i32> %502, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %506 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %505, <4 x i32> %62)
  %507 = shufflevector <64 x i32> %502, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %508 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %507, <4 x i32> %62)
  %509 = shufflevector <64 x i32> %502, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %510 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %509, <4 x i32> %62)
  %511 = shufflevector <64 x i32> %502, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %512 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %511, <4 x i32> %62)
  %513 = shufflevector <64 x i32> %502, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %514 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %513, <4 x i32> %62)
  %515 = shufflevector <64 x i32> %502, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %516 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %515, <4 x i32> %62)
  %517 = shufflevector <64 x i32> %502, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %518 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %517, <4 x i32> %62)
  %519 = shufflevector <64 x i32> %502, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %520 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %519, <4 x i32> %62)
  %521 = shufflevector <64 x i32> %502, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %522 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %521, <4 x i32> %62)
  %523 = shufflevector <64 x i32> %502, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %524 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %523, <4 x i32> %62)
  %525 = shufflevector <64 x i32> %502, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %526 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %525, <4 x i32> %62)
  %527 = shufflevector <64 x i32> %502, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %528 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %527, <4 x i32> %62)
  %529 = shufflevector <64 x i32> %502, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %530 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %529, <4 x i32> %62)
  %531 = shufflevector <64 x i32> %502, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %532 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %531, <4 x i32> %62)
  %533 = shufflevector <64 x i32> %502, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %534 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %533, <4 x i32> %62)
  %535 = shufflevector <4 x i32> %534, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %536 = shufflevector <8 x i32> %535, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %537 = shufflevector <16 x i32> %536, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %538 = shufflevector <32 x i32> %537, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %539 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %504, <4 x i32> %64)
  %540 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %506, <4 x i32> %64)
  %541 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %508, <4 x i32> %64)
  %542 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %510, <4 x i32> %64)
  %543 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %512, <4 x i32> %64)
  %544 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %514, <4 x i32> %64)
  %545 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %516, <4 x i32> %64)
  %546 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %518, <4 x i32> %64)
  %547 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %520, <4 x i32> %64)
  %548 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %522, <4 x i32> %64)
  %549 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %524, <4 x i32> %64)
  %550 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %526, <4 x i32> %64)
  %551 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %528, <4 x i32> %64)
  %552 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %530, <4 x i32> %64)
  %553 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %532, <4 x i32> %64)
  %554 = shufflevector <64 x i32> %538, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %555 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %554, <4 x i32> %64)
  %556 = shufflevector <4 x i32> %539, <4 x i32> %540, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %557 = shufflevector <4 x i32> %541, <4 x i32> %542, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %558 = shufflevector <4 x i32> %543, <4 x i32> %544, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %559 = shufflevector <4 x i32> %545, <4 x i32> %546, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %560 = shufflevector <4 x i32> %547, <4 x i32> %548, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %561 = shufflevector <4 x i32> %549, <4 x i32> %550, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %562 = shufflevector <4 x i32> %551, <4 x i32> %552, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %563 = shufflevector <4 x i32> %553, <4 x i32> %555, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %564 = shufflevector <8 x i32> %556, <8 x i32> %557, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %565 = shufflevector <8 x i32> %558, <8 x i32> %559, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %566 = shufflevector <8 x i32> %560, <8 x i32> %561, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %567 = shufflevector <8 x i32> %562, <8 x i32> %563, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %568 = shufflevector <16 x i32> %564, <16 x i32> %565, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %569 = shufflevector <16 x i32> %566, <16 x i32> %567, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %570 = shufflevector <32 x i32> %568, <32 x i32> %569, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %571 = add nsw <64 x i32> %570, %t198
  %572 = extractelement <64 x i32> %571, i32 0
  %573 = sext i32 %572 to i64
  %574 = getelementptr inbounds i16, i16* %65, i64 %573
  %575 = load i16, i16* %574, align 2, !tbaa !382
  %576 = insertelement <64 x i16> undef, i16 %575, i32 0
  %577 = extractelement <64 x i32> %571, i32 1
  %578 = sext i32 %577 to i64
  %579 = getelementptr inbounds i16, i16* %65, i64 %578
  %580 = load i16, i16* %579, align 2, !tbaa !382
  %581 = insertelement <64 x i16> %576, i16 %580, i32 1
  %582 = extractelement <64 x i32> %571, i32 2
  %583 = sext i32 %582 to i64
  %584 = getelementptr inbounds i16, i16* %65, i64 %583
  %585 = load i16, i16* %584, align 2, !tbaa !382
  %586 = insertelement <64 x i16> %581, i16 %585, i32 2
  %587 = extractelement <64 x i32> %571, i32 3
  %588 = sext i32 %587 to i64
  %589 = getelementptr inbounds i16, i16* %65, i64 %588
  %590 = load i16, i16* %589, align 2, !tbaa !382
  %591 = insertelement <64 x i16> %586, i16 %590, i32 3
  %592 = extractelement <64 x i32> %571, i32 4
  %593 = sext i32 %592 to i64
  %594 = getelementptr inbounds i16, i16* %65, i64 %593
  %595 = load i16, i16* %594, align 2, !tbaa !382
  %596 = insertelement <64 x i16> %591, i16 %595, i32 4
  %597 = extractelement <64 x i32> %571, i32 5
  %598 = sext i32 %597 to i64
  %599 = getelementptr inbounds i16, i16* %65, i64 %598
  %600 = load i16, i16* %599, align 2, !tbaa !382
  %601 = insertelement <64 x i16> %596, i16 %600, i32 5
  %602 = extractelement <64 x i32> %571, i32 6
  %603 = sext i32 %602 to i64
  %604 = getelementptr inbounds i16, i16* %65, i64 %603
  %605 = load i16, i16* %604, align 2, !tbaa !382
  %606 = insertelement <64 x i16> %601, i16 %605, i32 6
  %607 = extractelement <64 x i32> %571, i32 7
  %608 = sext i32 %607 to i64
  %609 = getelementptr inbounds i16, i16* %65, i64 %608
  %610 = load i16, i16* %609, align 2, !tbaa !382
  %611 = insertelement <64 x i16> %606, i16 %610, i32 7
  %612 = extractelement <64 x i32> %571, i32 8
  %613 = sext i32 %612 to i64
  %614 = getelementptr inbounds i16, i16* %65, i64 %613
  %615 = load i16, i16* %614, align 2, !tbaa !382
  %616 = insertelement <64 x i16> %611, i16 %615, i32 8
  %617 = extractelement <64 x i32> %571, i32 9
  %618 = sext i32 %617 to i64
  %619 = getelementptr inbounds i16, i16* %65, i64 %618
  %620 = load i16, i16* %619, align 2, !tbaa !382
  %621 = insertelement <64 x i16> %616, i16 %620, i32 9
  %622 = extractelement <64 x i32> %571, i32 10
  %623 = sext i32 %622 to i64
  %624 = getelementptr inbounds i16, i16* %65, i64 %623
  %625 = load i16, i16* %624, align 2, !tbaa !382
  %626 = insertelement <64 x i16> %621, i16 %625, i32 10
  %627 = extractelement <64 x i32> %571, i32 11
  %628 = sext i32 %627 to i64
  %629 = getelementptr inbounds i16, i16* %65, i64 %628
  %630 = load i16, i16* %629, align 2, !tbaa !382
  %631 = insertelement <64 x i16> %626, i16 %630, i32 11
  %632 = extractelement <64 x i32> %571, i32 12
  %633 = sext i32 %632 to i64
  %634 = getelementptr inbounds i16, i16* %65, i64 %633
  %635 = load i16, i16* %634, align 2, !tbaa !382
  %636 = insertelement <64 x i16> %631, i16 %635, i32 12
  %637 = extractelement <64 x i32> %571, i32 13
  %638 = sext i32 %637 to i64
  %639 = getelementptr inbounds i16, i16* %65, i64 %638
  %640 = load i16, i16* %639, align 2, !tbaa !382
  %641 = insertelement <64 x i16> %636, i16 %640, i32 13
  %642 = extractelement <64 x i32> %571, i32 14
  %643 = sext i32 %642 to i64
  %644 = getelementptr inbounds i16, i16* %65, i64 %643
  %645 = load i16, i16* %644, align 2, !tbaa !382
  %646 = insertelement <64 x i16> %641, i16 %645, i32 14
  %647 = extractelement <64 x i32> %571, i32 15
  %648 = sext i32 %647 to i64
  %649 = getelementptr inbounds i16, i16* %65, i64 %648
  %650 = load i16, i16* %649, align 2, !tbaa !382
  %651 = insertelement <64 x i16> %646, i16 %650, i32 15
  %652 = extractelement <64 x i32> %571, i32 16
  %653 = sext i32 %652 to i64
  %654 = getelementptr inbounds i16, i16* %65, i64 %653
  %655 = load i16, i16* %654, align 2, !tbaa !382
  %656 = insertelement <64 x i16> %651, i16 %655, i32 16
  %657 = extractelement <64 x i32> %571, i32 17
  %658 = sext i32 %657 to i64
  %659 = getelementptr inbounds i16, i16* %65, i64 %658
  %660 = load i16, i16* %659, align 2, !tbaa !382
  %661 = insertelement <64 x i16> %656, i16 %660, i32 17
  %662 = extractelement <64 x i32> %571, i32 18
  %663 = sext i32 %662 to i64
  %664 = getelementptr inbounds i16, i16* %65, i64 %663
  %665 = load i16, i16* %664, align 2, !tbaa !382
  %666 = insertelement <64 x i16> %661, i16 %665, i32 18
  %667 = extractelement <64 x i32> %571, i32 19
  %668 = sext i32 %667 to i64
  %669 = getelementptr inbounds i16, i16* %65, i64 %668
  %670 = load i16, i16* %669, align 2, !tbaa !382
  %671 = insertelement <64 x i16> %666, i16 %670, i32 19
  %672 = extractelement <64 x i32> %571, i32 20
  %673 = sext i32 %672 to i64
  %674 = getelementptr inbounds i16, i16* %65, i64 %673
  %675 = load i16, i16* %674, align 2, !tbaa !382
  %676 = insertelement <64 x i16> %671, i16 %675, i32 20
  %677 = extractelement <64 x i32> %571, i32 21
  %678 = sext i32 %677 to i64
  %679 = getelementptr inbounds i16, i16* %65, i64 %678
  %680 = load i16, i16* %679, align 2, !tbaa !382
  %681 = insertelement <64 x i16> %676, i16 %680, i32 21
  %682 = extractelement <64 x i32> %571, i32 22
  %683 = sext i32 %682 to i64
  %684 = getelementptr inbounds i16, i16* %65, i64 %683
  %685 = load i16, i16* %684, align 2, !tbaa !382
  %686 = insertelement <64 x i16> %681, i16 %685, i32 22
  %687 = extractelement <64 x i32> %571, i32 23
  %688 = sext i32 %687 to i64
  %689 = getelementptr inbounds i16, i16* %65, i64 %688
  %690 = load i16, i16* %689, align 2, !tbaa !382
  %691 = insertelement <64 x i16> %686, i16 %690, i32 23
  %692 = extractelement <64 x i32> %571, i32 24
  %693 = sext i32 %692 to i64
  %694 = getelementptr inbounds i16, i16* %65, i64 %693
  %695 = load i16, i16* %694, align 2, !tbaa !382
  %696 = insertelement <64 x i16> %691, i16 %695, i32 24
  %697 = extractelement <64 x i32> %571, i32 25
  %698 = sext i32 %697 to i64
  %699 = getelementptr inbounds i16, i16* %65, i64 %698
  %700 = load i16, i16* %699, align 2, !tbaa !382
  %701 = insertelement <64 x i16> %696, i16 %700, i32 25
  %702 = extractelement <64 x i32> %571, i32 26
  %703 = sext i32 %702 to i64
  %704 = getelementptr inbounds i16, i16* %65, i64 %703
  %705 = load i16, i16* %704, align 2, !tbaa !382
  %706 = insertelement <64 x i16> %701, i16 %705, i32 26
  %707 = extractelement <64 x i32> %571, i32 27
  %708 = sext i32 %707 to i64
  %709 = getelementptr inbounds i16, i16* %65, i64 %708
  %710 = load i16, i16* %709, align 2, !tbaa !382
  %711 = insertelement <64 x i16> %706, i16 %710, i32 27
  %712 = extractelement <64 x i32> %571, i32 28
  %713 = sext i32 %712 to i64
  %714 = getelementptr inbounds i16, i16* %65, i64 %713
  %715 = load i16, i16* %714, align 2, !tbaa !382
  %716 = insertelement <64 x i16> %711, i16 %715, i32 28
  %717 = extractelement <64 x i32> %571, i32 29
  %718 = sext i32 %717 to i64
  %719 = getelementptr inbounds i16, i16* %65, i64 %718
  %720 = load i16, i16* %719, align 2, !tbaa !382
  %721 = insertelement <64 x i16> %716, i16 %720, i32 29
  %722 = extractelement <64 x i32> %571, i32 30
  %723 = sext i32 %722 to i64
  %724 = getelementptr inbounds i16, i16* %65, i64 %723
  %725 = load i16, i16* %724, align 2, !tbaa !382
  %726 = insertelement <64 x i16> %721, i16 %725, i32 30
  %727 = extractelement <64 x i32> %571, i32 31
  %728 = sext i32 %727 to i64
  %729 = getelementptr inbounds i16, i16* %65, i64 %728
  %730 = load i16, i16* %729, align 2, !tbaa !382
  %731 = insertelement <64 x i16> %726, i16 %730, i32 31
  %732 = extractelement <64 x i32> %571, i32 32
  %733 = sext i32 %732 to i64
  %734 = getelementptr inbounds i16, i16* %65, i64 %733
  %735 = load i16, i16* %734, align 2, !tbaa !382
  %736 = insertelement <64 x i16> %731, i16 %735, i32 32
  %737 = extractelement <64 x i32> %571, i32 33
  %738 = sext i32 %737 to i64
  %739 = getelementptr inbounds i16, i16* %65, i64 %738
  %740 = load i16, i16* %739, align 2, !tbaa !382
  %741 = insertelement <64 x i16> %736, i16 %740, i32 33
  %742 = extractelement <64 x i32> %571, i32 34
  %743 = sext i32 %742 to i64
  %744 = getelementptr inbounds i16, i16* %65, i64 %743
  %745 = load i16, i16* %744, align 2, !tbaa !382
  %746 = insertelement <64 x i16> %741, i16 %745, i32 34
  %747 = extractelement <64 x i32> %571, i32 35
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds i16, i16* %65, i64 %748
  %750 = load i16, i16* %749, align 2, !tbaa !382
  %751 = insertelement <64 x i16> %746, i16 %750, i32 35
  %752 = extractelement <64 x i32> %571, i32 36
  %753 = sext i32 %752 to i64
  %754 = getelementptr inbounds i16, i16* %65, i64 %753
  %755 = load i16, i16* %754, align 2, !tbaa !382
  %756 = insertelement <64 x i16> %751, i16 %755, i32 36
  %757 = extractelement <64 x i32> %571, i32 37
  %758 = sext i32 %757 to i64
  %759 = getelementptr inbounds i16, i16* %65, i64 %758
  %760 = load i16, i16* %759, align 2, !tbaa !382
  %761 = insertelement <64 x i16> %756, i16 %760, i32 37
  %762 = extractelement <64 x i32> %571, i32 38
  %763 = sext i32 %762 to i64
  %764 = getelementptr inbounds i16, i16* %65, i64 %763
  %765 = load i16, i16* %764, align 2, !tbaa !382
  %766 = insertelement <64 x i16> %761, i16 %765, i32 38
  %767 = extractelement <64 x i32> %571, i32 39
  %768 = sext i32 %767 to i64
  %769 = getelementptr inbounds i16, i16* %65, i64 %768
  %770 = load i16, i16* %769, align 2, !tbaa !382
  %771 = insertelement <64 x i16> %766, i16 %770, i32 39
  %772 = extractelement <64 x i32> %571, i32 40
  %773 = sext i32 %772 to i64
  %774 = getelementptr inbounds i16, i16* %65, i64 %773
  %775 = load i16, i16* %774, align 2, !tbaa !382
  %776 = insertelement <64 x i16> %771, i16 %775, i32 40
  %777 = extractelement <64 x i32> %571, i32 41
  %778 = sext i32 %777 to i64
  %779 = getelementptr inbounds i16, i16* %65, i64 %778
  %780 = load i16, i16* %779, align 2, !tbaa !382
  %781 = insertelement <64 x i16> %776, i16 %780, i32 41
  %782 = extractelement <64 x i32> %571, i32 42
  %783 = sext i32 %782 to i64
  %784 = getelementptr inbounds i16, i16* %65, i64 %783
  %785 = load i16, i16* %784, align 2, !tbaa !382
  %786 = insertelement <64 x i16> %781, i16 %785, i32 42
  %787 = extractelement <64 x i32> %571, i32 43
  %788 = sext i32 %787 to i64
  %789 = getelementptr inbounds i16, i16* %65, i64 %788
  %790 = load i16, i16* %789, align 2, !tbaa !382
  %791 = insertelement <64 x i16> %786, i16 %790, i32 43
  %792 = extractelement <64 x i32> %571, i32 44
  %793 = sext i32 %792 to i64
  %794 = getelementptr inbounds i16, i16* %65, i64 %793
  %795 = load i16, i16* %794, align 2, !tbaa !382
  %796 = insertelement <64 x i16> %791, i16 %795, i32 44
  %797 = extractelement <64 x i32> %571, i32 45
  %798 = sext i32 %797 to i64
  %799 = getelementptr inbounds i16, i16* %65, i64 %798
  %800 = load i16, i16* %799, align 2, !tbaa !382
  %801 = insertelement <64 x i16> %796, i16 %800, i32 45
  %802 = extractelement <64 x i32> %571, i32 46
  %803 = sext i32 %802 to i64
  %804 = getelementptr inbounds i16, i16* %65, i64 %803
  %805 = load i16, i16* %804, align 2, !tbaa !382
  %806 = insertelement <64 x i16> %801, i16 %805, i32 46
  %807 = extractelement <64 x i32> %571, i32 47
  %808 = sext i32 %807 to i64
  %809 = getelementptr inbounds i16, i16* %65, i64 %808
  %810 = load i16, i16* %809, align 2, !tbaa !382
  %811 = insertelement <64 x i16> %806, i16 %810, i32 47
  %812 = extractelement <64 x i32> %571, i32 48
  %813 = sext i32 %812 to i64
  %814 = getelementptr inbounds i16, i16* %65, i64 %813
  %815 = load i16, i16* %814, align 2, !tbaa !382
  %816 = insertelement <64 x i16> %811, i16 %815, i32 48
  %817 = extractelement <64 x i32> %571, i32 49
  %818 = sext i32 %817 to i64
  %819 = getelementptr inbounds i16, i16* %65, i64 %818
  %820 = load i16, i16* %819, align 2, !tbaa !382
  %821 = insertelement <64 x i16> %816, i16 %820, i32 49
  %822 = extractelement <64 x i32> %571, i32 50
  %823 = sext i32 %822 to i64
  %824 = getelementptr inbounds i16, i16* %65, i64 %823
  %825 = load i16, i16* %824, align 2, !tbaa !382
  %826 = insertelement <64 x i16> %821, i16 %825, i32 50
  %827 = extractelement <64 x i32> %571, i32 51
  %828 = sext i32 %827 to i64
  %829 = getelementptr inbounds i16, i16* %65, i64 %828
  %830 = load i16, i16* %829, align 2, !tbaa !382
  %831 = insertelement <64 x i16> %826, i16 %830, i32 51
  %832 = extractelement <64 x i32> %571, i32 52
  %833 = sext i32 %832 to i64
  %834 = getelementptr inbounds i16, i16* %65, i64 %833
  %835 = load i16, i16* %834, align 2, !tbaa !382
  %836 = insertelement <64 x i16> %831, i16 %835, i32 52
  %837 = extractelement <64 x i32> %571, i32 53
  %838 = sext i32 %837 to i64
  %839 = getelementptr inbounds i16, i16* %65, i64 %838
  %840 = load i16, i16* %839, align 2, !tbaa !382
  %841 = insertelement <64 x i16> %836, i16 %840, i32 53
  %842 = extractelement <64 x i32> %571, i32 54
  %843 = sext i32 %842 to i64
  %844 = getelementptr inbounds i16, i16* %65, i64 %843
  %845 = load i16, i16* %844, align 2, !tbaa !382
  %846 = insertelement <64 x i16> %841, i16 %845, i32 54
  %847 = extractelement <64 x i32> %571, i32 55
  %848 = sext i32 %847 to i64
  %849 = getelementptr inbounds i16, i16* %65, i64 %848
  %850 = load i16, i16* %849, align 2, !tbaa !382
  %851 = insertelement <64 x i16> %846, i16 %850, i32 55
  %852 = extractelement <64 x i32> %571, i32 56
  %853 = sext i32 %852 to i64
  %854 = getelementptr inbounds i16, i16* %65, i64 %853
  %855 = load i16, i16* %854, align 2, !tbaa !382
  %856 = insertelement <64 x i16> %851, i16 %855, i32 56
  %857 = extractelement <64 x i32> %571, i32 57
  %858 = sext i32 %857 to i64
  %859 = getelementptr inbounds i16, i16* %65, i64 %858
  %860 = load i16, i16* %859, align 2, !tbaa !382
  %861 = insertelement <64 x i16> %856, i16 %860, i32 57
  %862 = extractelement <64 x i32> %571, i32 58
  %863 = sext i32 %862 to i64
  %864 = getelementptr inbounds i16, i16* %65, i64 %863
  %865 = load i16, i16* %864, align 2, !tbaa !382
  %866 = insertelement <64 x i16> %861, i16 %865, i32 58
  %867 = extractelement <64 x i32> %571, i32 59
  %868 = sext i32 %867 to i64
  %869 = getelementptr inbounds i16, i16* %65, i64 %868
  %870 = load i16, i16* %869, align 2, !tbaa !382
  %871 = insertelement <64 x i16> %866, i16 %870, i32 59
  %872 = extractelement <64 x i32> %571, i32 60
  %873 = sext i32 %872 to i64
  %874 = getelementptr inbounds i16, i16* %65, i64 %873
  %875 = load i16, i16* %874, align 2, !tbaa !382
  %876 = insertelement <64 x i16> %871, i16 %875, i32 60
  %877 = extractelement <64 x i32> %571, i32 61
  %878 = sext i32 %877 to i64
  %879 = getelementptr inbounds i16, i16* %65, i64 %878
  %880 = load i16, i16* %879, align 2, !tbaa !382
  %881 = insertelement <64 x i16> %876, i16 %880, i32 61
  %882 = extractelement <64 x i32> %571, i32 62
  %883 = sext i32 %882 to i64
  %884 = getelementptr inbounds i16, i16* %65, i64 %883
  %885 = load i16, i16* %884, align 2, !tbaa !382
  %886 = insertelement <64 x i16> %881, i16 %885, i32 62
  %887 = extractelement <64 x i32> %571, i32 63
  %888 = sext i32 %887 to i64
  %889 = getelementptr inbounds i16, i16* %65, i64 %888
  %890 = load i16, i16* %889, align 2, !tbaa !382
  %891 = insertelement <64 x i16> %886, i16 %890, i32 63
  %892 = add nsw i32 %blur_x.s0.x.v1.base.s, -62
  %893 = insertelement <64 x i32> undef, i32 %892, i32 0
  %894 = shufflevector <64 x i32> %893, <64 x i32> undef, <64 x i32> zeroinitializer
  %895 = add nsw <64 x i32> %894, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %896 = shufflevector <64 x i32> %895, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %897 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %896, <4 x i32> %62)
  %898 = shufflevector <64 x i32> %895, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %899 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %898, <4 x i32> %62)
  %900 = shufflevector <64 x i32> %895, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %901 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %900, <4 x i32> %62)
  %902 = shufflevector <64 x i32> %895, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %903 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %902, <4 x i32> %62)
  %904 = shufflevector <64 x i32> %895, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %905 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %904, <4 x i32> %62)
  %906 = shufflevector <64 x i32> %895, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %907 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %906, <4 x i32> %62)
  %908 = shufflevector <64 x i32> %895, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %909 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %908, <4 x i32> %62)
  %910 = shufflevector <64 x i32> %895, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %911 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %910, <4 x i32> %62)
  %912 = shufflevector <64 x i32> %895, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %913 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %912, <4 x i32> %62)
  %914 = shufflevector <64 x i32> %895, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %915 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %914, <4 x i32> %62)
  %916 = shufflevector <64 x i32> %895, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %917 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %916, <4 x i32> %62)
  %918 = shufflevector <64 x i32> %895, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %919 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %918, <4 x i32> %62)
  %920 = shufflevector <64 x i32> %895, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %921 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %920, <4 x i32> %62)
  %922 = shufflevector <64 x i32> %895, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %923 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %922, <4 x i32> %62)
  %924 = shufflevector <64 x i32> %895, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %925 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %924, <4 x i32> %62)
  %926 = shufflevector <64 x i32> %895, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %927 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %926, <4 x i32> %62)
  %928 = shufflevector <4 x i32> %927, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %929 = shufflevector <8 x i32> %928, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %930 = shufflevector <16 x i32> %929, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %931 = shufflevector <32 x i32> %930, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %932 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %897, <4 x i32> %64)
  %933 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %899, <4 x i32> %64)
  %934 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %901, <4 x i32> %64)
  %935 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %903, <4 x i32> %64)
  %936 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %905, <4 x i32> %64)
  %937 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %907, <4 x i32> %64)
  %938 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %909, <4 x i32> %64)
  %939 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %911, <4 x i32> %64)
  %940 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %913, <4 x i32> %64)
  %941 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %915, <4 x i32> %64)
  %942 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %917, <4 x i32> %64)
  %943 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %919, <4 x i32> %64)
  %944 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %921, <4 x i32> %64)
  %945 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %923, <4 x i32> %64)
  %946 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %925, <4 x i32> %64)
  %947 = shufflevector <64 x i32> %931, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %948 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %947, <4 x i32> %64)
  %949 = shufflevector <4 x i32> %932, <4 x i32> %933, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %950 = shufflevector <4 x i32> %934, <4 x i32> %935, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %951 = shufflevector <4 x i32> %936, <4 x i32> %937, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %952 = shufflevector <4 x i32> %938, <4 x i32> %939, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %953 = shufflevector <4 x i32> %940, <4 x i32> %941, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %954 = shufflevector <4 x i32> %942, <4 x i32> %943, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %955 = shufflevector <4 x i32> %944, <4 x i32> %945, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %956 = shufflevector <4 x i32> %946, <4 x i32> %948, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %957 = shufflevector <8 x i32> %949, <8 x i32> %950, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %958 = shufflevector <8 x i32> %951, <8 x i32> %952, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %959 = shufflevector <8 x i32> %953, <8 x i32> %954, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %960 = shufflevector <8 x i32> %955, <8 x i32> %956, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %961 = shufflevector <16 x i32> %957, <16 x i32> %958, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %962 = shufflevector <16 x i32> %959, <16 x i32> %960, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %963 = shufflevector <32 x i32> %961, <32 x i32> %962, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %964 = add nsw <64 x i32> %963, %t198
  %965 = extractelement <64 x i32> %964, i32 0
  %966 = sext i32 %965 to i64
  %967 = getelementptr inbounds i16, i16* %65, i64 %966
  %968 = load i16, i16* %967, align 2, !tbaa !382
  %969 = insertelement <64 x i16> undef, i16 %968, i32 0
  %970 = extractelement <64 x i32> %964, i32 1
  %971 = sext i32 %970 to i64
  %972 = getelementptr inbounds i16, i16* %65, i64 %971
  %973 = load i16, i16* %972, align 2, !tbaa !382
  %974 = insertelement <64 x i16> %969, i16 %973, i32 1
  %975 = extractelement <64 x i32> %964, i32 2
  %976 = sext i32 %975 to i64
  %977 = getelementptr inbounds i16, i16* %65, i64 %976
  %978 = load i16, i16* %977, align 2, !tbaa !382
  %979 = insertelement <64 x i16> %974, i16 %978, i32 2
  %980 = extractelement <64 x i32> %964, i32 3
  %981 = sext i32 %980 to i64
  %982 = getelementptr inbounds i16, i16* %65, i64 %981
  %983 = load i16, i16* %982, align 2, !tbaa !382
  %984 = insertelement <64 x i16> %979, i16 %983, i32 3
  %985 = extractelement <64 x i32> %964, i32 4
  %986 = sext i32 %985 to i64
  %987 = getelementptr inbounds i16, i16* %65, i64 %986
  %988 = load i16, i16* %987, align 2, !tbaa !382
  %989 = insertelement <64 x i16> %984, i16 %988, i32 4
  %990 = extractelement <64 x i32> %964, i32 5
  %991 = sext i32 %990 to i64
  %992 = getelementptr inbounds i16, i16* %65, i64 %991
  %993 = load i16, i16* %992, align 2, !tbaa !382
  %994 = insertelement <64 x i16> %989, i16 %993, i32 5
  %995 = extractelement <64 x i32> %964, i32 6
  %996 = sext i32 %995 to i64
  %997 = getelementptr inbounds i16, i16* %65, i64 %996
  %998 = load i16, i16* %997, align 2, !tbaa !382
  %999 = insertelement <64 x i16> %994, i16 %998, i32 6
  %1000 = extractelement <64 x i32> %964, i32 7
  %1001 = sext i32 %1000 to i64
  %1002 = getelementptr inbounds i16, i16* %65, i64 %1001
  %1003 = load i16, i16* %1002, align 2, !tbaa !382
  %1004 = insertelement <64 x i16> %999, i16 %1003, i32 7
  %1005 = extractelement <64 x i32> %964, i32 8
  %1006 = sext i32 %1005 to i64
  %1007 = getelementptr inbounds i16, i16* %65, i64 %1006
  %1008 = load i16, i16* %1007, align 2, !tbaa !382
  %1009 = insertelement <64 x i16> %1004, i16 %1008, i32 8
  %1010 = extractelement <64 x i32> %964, i32 9
  %1011 = sext i32 %1010 to i64
  %1012 = getelementptr inbounds i16, i16* %65, i64 %1011
  %1013 = load i16, i16* %1012, align 2, !tbaa !382
  %1014 = insertelement <64 x i16> %1009, i16 %1013, i32 9
  %1015 = extractelement <64 x i32> %964, i32 10
  %1016 = sext i32 %1015 to i64
  %1017 = getelementptr inbounds i16, i16* %65, i64 %1016
  %1018 = load i16, i16* %1017, align 2, !tbaa !382
  %1019 = insertelement <64 x i16> %1014, i16 %1018, i32 10
  %1020 = extractelement <64 x i32> %964, i32 11
  %1021 = sext i32 %1020 to i64
  %1022 = getelementptr inbounds i16, i16* %65, i64 %1021
  %1023 = load i16, i16* %1022, align 2, !tbaa !382
  %1024 = insertelement <64 x i16> %1019, i16 %1023, i32 11
  %1025 = extractelement <64 x i32> %964, i32 12
  %1026 = sext i32 %1025 to i64
  %1027 = getelementptr inbounds i16, i16* %65, i64 %1026
  %1028 = load i16, i16* %1027, align 2, !tbaa !382
  %1029 = insertelement <64 x i16> %1024, i16 %1028, i32 12
  %1030 = extractelement <64 x i32> %964, i32 13
  %1031 = sext i32 %1030 to i64
  %1032 = getelementptr inbounds i16, i16* %65, i64 %1031
  %1033 = load i16, i16* %1032, align 2, !tbaa !382
  %1034 = insertelement <64 x i16> %1029, i16 %1033, i32 13
  %1035 = extractelement <64 x i32> %964, i32 14
  %1036 = sext i32 %1035 to i64
  %1037 = getelementptr inbounds i16, i16* %65, i64 %1036
  %1038 = load i16, i16* %1037, align 2, !tbaa !382
  %1039 = insertelement <64 x i16> %1034, i16 %1038, i32 14
  %1040 = extractelement <64 x i32> %964, i32 15
  %1041 = sext i32 %1040 to i64
  %1042 = getelementptr inbounds i16, i16* %65, i64 %1041
  %1043 = load i16, i16* %1042, align 2, !tbaa !382
  %1044 = insertelement <64 x i16> %1039, i16 %1043, i32 15
  %1045 = extractelement <64 x i32> %964, i32 16
  %1046 = sext i32 %1045 to i64
  %1047 = getelementptr inbounds i16, i16* %65, i64 %1046
  %1048 = load i16, i16* %1047, align 2, !tbaa !382
  %1049 = insertelement <64 x i16> %1044, i16 %1048, i32 16
  %1050 = extractelement <64 x i32> %964, i32 17
  %1051 = sext i32 %1050 to i64
  %1052 = getelementptr inbounds i16, i16* %65, i64 %1051
  %1053 = load i16, i16* %1052, align 2, !tbaa !382
  %1054 = insertelement <64 x i16> %1049, i16 %1053, i32 17
  %1055 = extractelement <64 x i32> %964, i32 18
  %1056 = sext i32 %1055 to i64
  %1057 = getelementptr inbounds i16, i16* %65, i64 %1056
  %1058 = load i16, i16* %1057, align 2, !tbaa !382
  %1059 = insertelement <64 x i16> %1054, i16 %1058, i32 18
  %1060 = extractelement <64 x i32> %964, i32 19
  %1061 = sext i32 %1060 to i64
  %1062 = getelementptr inbounds i16, i16* %65, i64 %1061
  %1063 = load i16, i16* %1062, align 2, !tbaa !382
  %1064 = insertelement <64 x i16> %1059, i16 %1063, i32 19
  %1065 = extractelement <64 x i32> %964, i32 20
  %1066 = sext i32 %1065 to i64
  %1067 = getelementptr inbounds i16, i16* %65, i64 %1066
  %1068 = load i16, i16* %1067, align 2, !tbaa !382
  %1069 = insertelement <64 x i16> %1064, i16 %1068, i32 20
  %1070 = extractelement <64 x i32> %964, i32 21
  %1071 = sext i32 %1070 to i64
  %1072 = getelementptr inbounds i16, i16* %65, i64 %1071
  %1073 = load i16, i16* %1072, align 2, !tbaa !382
  %1074 = insertelement <64 x i16> %1069, i16 %1073, i32 21
  %1075 = extractelement <64 x i32> %964, i32 22
  %1076 = sext i32 %1075 to i64
  %1077 = getelementptr inbounds i16, i16* %65, i64 %1076
  %1078 = load i16, i16* %1077, align 2, !tbaa !382
  %1079 = insertelement <64 x i16> %1074, i16 %1078, i32 22
  %1080 = extractelement <64 x i32> %964, i32 23
  %1081 = sext i32 %1080 to i64
  %1082 = getelementptr inbounds i16, i16* %65, i64 %1081
  %1083 = load i16, i16* %1082, align 2, !tbaa !382
  %1084 = insertelement <64 x i16> %1079, i16 %1083, i32 23
  %1085 = extractelement <64 x i32> %964, i32 24
  %1086 = sext i32 %1085 to i64
  %1087 = getelementptr inbounds i16, i16* %65, i64 %1086
  %1088 = load i16, i16* %1087, align 2, !tbaa !382
  %1089 = insertelement <64 x i16> %1084, i16 %1088, i32 24
  %1090 = extractelement <64 x i32> %964, i32 25
  %1091 = sext i32 %1090 to i64
  %1092 = getelementptr inbounds i16, i16* %65, i64 %1091
  %1093 = load i16, i16* %1092, align 2, !tbaa !382
  %1094 = insertelement <64 x i16> %1089, i16 %1093, i32 25
  %1095 = extractelement <64 x i32> %964, i32 26
  %1096 = sext i32 %1095 to i64
  %1097 = getelementptr inbounds i16, i16* %65, i64 %1096
  %1098 = load i16, i16* %1097, align 2, !tbaa !382
  %1099 = insertelement <64 x i16> %1094, i16 %1098, i32 26
  %1100 = extractelement <64 x i32> %964, i32 27
  %1101 = sext i32 %1100 to i64
  %1102 = getelementptr inbounds i16, i16* %65, i64 %1101
  %1103 = load i16, i16* %1102, align 2, !tbaa !382
  %1104 = insertelement <64 x i16> %1099, i16 %1103, i32 27
  %1105 = extractelement <64 x i32> %964, i32 28
  %1106 = sext i32 %1105 to i64
  %1107 = getelementptr inbounds i16, i16* %65, i64 %1106
  %1108 = load i16, i16* %1107, align 2, !tbaa !382
  %1109 = insertelement <64 x i16> %1104, i16 %1108, i32 28
  %1110 = extractelement <64 x i32> %964, i32 29
  %1111 = sext i32 %1110 to i64
  %1112 = getelementptr inbounds i16, i16* %65, i64 %1111
  %1113 = load i16, i16* %1112, align 2, !tbaa !382
  %1114 = insertelement <64 x i16> %1109, i16 %1113, i32 29
  %1115 = extractelement <64 x i32> %964, i32 30
  %1116 = sext i32 %1115 to i64
  %1117 = getelementptr inbounds i16, i16* %65, i64 %1116
  %1118 = load i16, i16* %1117, align 2, !tbaa !382
  %1119 = insertelement <64 x i16> %1114, i16 %1118, i32 30
  %1120 = extractelement <64 x i32> %964, i32 31
  %1121 = sext i32 %1120 to i64
  %1122 = getelementptr inbounds i16, i16* %65, i64 %1121
  %1123 = load i16, i16* %1122, align 2, !tbaa !382
  %1124 = insertelement <64 x i16> %1119, i16 %1123, i32 31
  %1125 = extractelement <64 x i32> %964, i32 32
  %1126 = sext i32 %1125 to i64
  %1127 = getelementptr inbounds i16, i16* %65, i64 %1126
  %1128 = load i16, i16* %1127, align 2, !tbaa !382
  %1129 = insertelement <64 x i16> %1124, i16 %1128, i32 32
  %1130 = extractelement <64 x i32> %964, i32 33
  %1131 = sext i32 %1130 to i64
  %1132 = getelementptr inbounds i16, i16* %65, i64 %1131
  %1133 = load i16, i16* %1132, align 2, !tbaa !382
  %1134 = insertelement <64 x i16> %1129, i16 %1133, i32 33
  %1135 = extractelement <64 x i32> %964, i32 34
  %1136 = sext i32 %1135 to i64
  %1137 = getelementptr inbounds i16, i16* %65, i64 %1136
  %1138 = load i16, i16* %1137, align 2, !tbaa !382
  %1139 = insertelement <64 x i16> %1134, i16 %1138, i32 34
  %1140 = extractelement <64 x i32> %964, i32 35
  %1141 = sext i32 %1140 to i64
  %1142 = getelementptr inbounds i16, i16* %65, i64 %1141
  %1143 = load i16, i16* %1142, align 2, !tbaa !382
  %1144 = insertelement <64 x i16> %1139, i16 %1143, i32 35
  %1145 = extractelement <64 x i32> %964, i32 36
  %1146 = sext i32 %1145 to i64
  %1147 = getelementptr inbounds i16, i16* %65, i64 %1146
  %1148 = load i16, i16* %1147, align 2, !tbaa !382
  %1149 = insertelement <64 x i16> %1144, i16 %1148, i32 36
  %1150 = extractelement <64 x i32> %964, i32 37
  %1151 = sext i32 %1150 to i64
  %1152 = getelementptr inbounds i16, i16* %65, i64 %1151
  %1153 = load i16, i16* %1152, align 2, !tbaa !382
  %1154 = insertelement <64 x i16> %1149, i16 %1153, i32 37
  %1155 = extractelement <64 x i32> %964, i32 38
  %1156 = sext i32 %1155 to i64
  %1157 = getelementptr inbounds i16, i16* %65, i64 %1156
  %1158 = load i16, i16* %1157, align 2, !tbaa !382
  %1159 = insertelement <64 x i16> %1154, i16 %1158, i32 38
  %1160 = extractelement <64 x i32> %964, i32 39
  %1161 = sext i32 %1160 to i64
  %1162 = getelementptr inbounds i16, i16* %65, i64 %1161
  %1163 = load i16, i16* %1162, align 2, !tbaa !382
  %1164 = insertelement <64 x i16> %1159, i16 %1163, i32 39
  %1165 = extractelement <64 x i32> %964, i32 40
  %1166 = sext i32 %1165 to i64
  %1167 = getelementptr inbounds i16, i16* %65, i64 %1166
  %1168 = load i16, i16* %1167, align 2, !tbaa !382
  %1169 = insertelement <64 x i16> %1164, i16 %1168, i32 40
  %1170 = extractelement <64 x i32> %964, i32 41
  %1171 = sext i32 %1170 to i64
  %1172 = getelementptr inbounds i16, i16* %65, i64 %1171
  %1173 = load i16, i16* %1172, align 2, !tbaa !382
  %1174 = insertelement <64 x i16> %1169, i16 %1173, i32 41
  %1175 = extractelement <64 x i32> %964, i32 42
  %1176 = sext i32 %1175 to i64
  %1177 = getelementptr inbounds i16, i16* %65, i64 %1176
  %1178 = load i16, i16* %1177, align 2, !tbaa !382
  %1179 = insertelement <64 x i16> %1174, i16 %1178, i32 42
  %1180 = extractelement <64 x i32> %964, i32 43
  %1181 = sext i32 %1180 to i64
  %1182 = getelementptr inbounds i16, i16* %65, i64 %1181
  %1183 = load i16, i16* %1182, align 2, !tbaa !382
  %1184 = insertelement <64 x i16> %1179, i16 %1183, i32 43
  %1185 = extractelement <64 x i32> %964, i32 44
  %1186 = sext i32 %1185 to i64
  %1187 = getelementptr inbounds i16, i16* %65, i64 %1186
  %1188 = load i16, i16* %1187, align 2, !tbaa !382
  %1189 = insertelement <64 x i16> %1184, i16 %1188, i32 44
  %1190 = extractelement <64 x i32> %964, i32 45
  %1191 = sext i32 %1190 to i64
  %1192 = getelementptr inbounds i16, i16* %65, i64 %1191
  %1193 = load i16, i16* %1192, align 2, !tbaa !382
  %1194 = insertelement <64 x i16> %1189, i16 %1193, i32 45
  %1195 = extractelement <64 x i32> %964, i32 46
  %1196 = sext i32 %1195 to i64
  %1197 = getelementptr inbounds i16, i16* %65, i64 %1196
  %1198 = load i16, i16* %1197, align 2, !tbaa !382
  %1199 = insertelement <64 x i16> %1194, i16 %1198, i32 46
  %1200 = extractelement <64 x i32> %964, i32 47
  %1201 = sext i32 %1200 to i64
  %1202 = getelementptr inbounds i16, i16* %65, i64 %1201
  %1203 = load i16, i16* %1202, align 2, !tbaa !382
  %1204 = insertelement <64 x i16> %1199, i16 %1203, i32 47
  %1205 = extractelement <64 x i32> %964, i32 48
  %1206 = sext i32 %1205 to i64
  %1207 = getelementptr inbounds i16, i16* %65, i64 %1206
  %1208 = load i16, i16* %1207, align 2, !tbaa !382
  %1209 = insertelement <64 x i16> %1204, i16 %1208, i32 48
  %1210 = extractelement <64 x i32> %964, i32 49
  %1211 = sext i32 %1210 to i64
  %1212 = getelementptr inbounds i16, i16* %65, i64 %1211
  %1213 = load i16, i16* %1212, align 2, !tbaa !382
  %1214 = insertelement <64 x i16> %1209, i16 %1213, i32 49
  %1215 = extractelement <64 x i32> %964, i32 50
  %1216 = sext i32 %1215 to i64
  %1217 = getelementptr inbounds i16, i16* %65, i64 %1216
  %1218 = load i16, i16* %1217, align 2, !tbaa !382
  %1219 = insertelement <64 x i16> %1214, i16 %1218, i32 50
  %1220 = extractelement <64 x i32> %964, i32 51
  %1221 = sext i32 %1220 to i64
  %1222 = getelementptr inbounds i16, i16* %65, i64 %1221
  %1223 = load i16, i16* %1222, align 2, !tbaa !382
  %1224 = insertelement <64 x i16> %1219, i16 %1223, i32 51
  %1225 = extractelement <64 x i32> %964, i32 52
  %1226 = sext i32 %1225 to i64
  %1227 = getelementptr inbounds i16, i16* %65, i64 %1226
  %1228 = load i16, i16* %1227, align 2, !tbaa !382
  %1229 = insertelement <64 x i16> %1224, i16 %1228, i32 52
  %1230 = extractelement <64 x i32> %964, i32 53
  %1231 = sext i32 %1230 to i64
  %1232 = getelementptr inbounds i16, i16* %65, i64 %1231
  %1233 = load i16, i16* %1232, align 2, !tbaa !382
  %1234 = insertelement <64 x i16> %1229, i16 %1233, i32 53
  %1235 = extractelement <64 x i32> %964, i32 54
  %1236 = sext i32 %1235 to i64
  %1237 = getelementptr inbounds i16, i16* %65, i64 %1236
  %1238 = load i16, i16* %1237, align 2, !tbaa !382
  %1239 = insertelement <64 x i16> %1234, i16 %1238, i32 54
  %1240 = extractelement <64 x i32> %964, i32 55
  %1241 = sext i32 %1240 to i64
  %1242 = getelementptr inbounds i16, i16* %65, i64 %1241
  %1243 = load i16, i16* %1242, align 2, !tbaa !382
  %1244 = insertelement <64 x i16> %1239, i16 %1243, i32 55
  %1245 = extractelement <64 x i32> %964, i32 56
  %1246 = sext i32 %1245 to i64
  %1247 = getelementptr inbounds i16, i16* %65, i64 %1246
  %1248 = load i16, i16* %1247, align 2, !tbaa !382
  %1249 = insertelement <64 x i16> %1244, i16 %1248, i32 56
  %1250 = extractelement <64 x i32> %964, i32 57
  %1251 = sext i32 %1250 to i64
  %1252 = getelementptr inbounds i16, i16* %65, i64 %1251
  %1253 = load i16, i16* %1252, align 2, !tbaa !382
  %1254 = insertelement <64 x i16> %1249, i16 %1253, i32 57
  %1255 = extractelement <64 x i32> %964, i32 58
  %1256 = sext i32 %1255 to i64
  %1257 = getelementptr inbounds i16, i16* %65, i64 %1256
  %1258 = load i16, i16* %1257, align 2, !tbaa !382
  %1259 = insertelement <64 x i16> %1254, i16 %1258, i32 58
  %1260 = extractelement <64 x i32> %964, i32 59
  %1261 = sext i32 %1260 to i64
  %1262 = getelementptr inbounds i16, i16* %65, i64 %1261
  %1263 = load i16, i16* %1262, align 2, !tbaa !382
  %1264 = insertelement <64 x i16> %1259, i16 %1263, i32 59
  %1265 = extractelement <64 x i32> %964, i32 60
  %1266 = sext i32 %1265 to i64
  %1267 = getelementptr inbounds i16, i16* %65, i64 %1266
  %1268 = load i16, i16* %1267, align 2, !tbaa !382
  %1269 = insertelement <64 x i16> %1264, i16 %1268, i32 60
  %1270 = extractelement <64 x i32> %964, i32 61
  %1271 = sext i32 %1270 to i64
  %1272 = getelementptr inbounds i16, i16* %65, i64 %1271
  %1273 = load i16, i16* %1272, align 2, !tbaa !382
  %1274 = insertelement <64 x i16> %1269, i16 %1273, i32 61
  %1275 = extractelement <64 x i32> %964, i32 62
  %1276 = sext i32 %1275 to i64
  %1277 = getelementptr inbounds i16, i16* %65, i64 %1276
  %1278 = load i16, i16* %1277, align 2, !tbaa !382
  %1279 = insertelement <64 x i16> %1274, i16 %1278, i32 62
  %1280 = extractelement <64 x i32> %964, i32 63
  %1281 = sext i32 %1280 to i64
  %1282 = getelementptr inbounds i16, i16* %65, i64 %1281
  %1283 = load i16, i16* %1282, align 2, !tbaa !382
  %1284 = insertelement <64 x i16> %1279, i16 %1283, i32 63
  %1285 = add nsw i32 %blur_x.s0.x.v1.base.s, -60
  %1286 = insertelement <64 x i32> undef, i32 %1285, i32 0
  %1287 = shufflevector <64 x i32> %1286, <64 x i32> undef, <64 x i32> zeroinitializer
  %1288 = add nsw <64 x i32> %1287, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1289 = shufflevector <64 x i32> %1288, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1290 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1289, <4 x i32> %62)
  %1291 = shufflevector <64 x i32> %1288, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1292 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1291, <4 x i32> %62)
  %1293 = shufflevector <64 x i32> %1288, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1294 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1293, <4 x i32> %62)
  %1295 = shufflevector <64 x i32> %1288, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1296 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1295, <4 x i32> %62)
  %1297 = shufflevector <64 x i32> %1288, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %1298 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1297, <4 x i32> %62)
  %1299 = shufflevector <64 x i32> %1288, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %1300 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1299, <4 x i32> %62)
  %1301 = shufflevector <64 x i32> %1288, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %1302 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1301, <4 x i32> %62)
  %1303 = shufflevector <64 x i32> %1288, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %1304 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1303, <4 x i32> %62)
  %1305 = shufflevector <64 x i32> %1288, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %1306 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1305, <4 x i32> %62)
  %1307 = shufflevector <64 x i32> %1288, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %1308 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1307, <4 x i32> %62)
  %1309 = shufflevector <64 x i32> %1288, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %1310 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1309, <4 x i32> %62)
  %1311 = shufflevector <64 x i32> %1288, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %1312 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1311, <4 x i32> %62)
  %1313 = shufflevector <64 x i32> %1288, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %1314 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1313, <4 x i32> %62)
  %1315 = shufflevector <64 x i32> %1288, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %1316 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1315, <4 x i32> %62)
  %1317 = shufflevector <64 x i32> %1288, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %1318 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1317, <4 x i32> %62)
  %1319 = shufflevector <64 x i32> %1288, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %1320 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1319, <4 x i32> %62)
  %1321 = shufflevector <4 x i32> %1320, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %1322 = shufflevector <8 x i32> %1321, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %1323 = shufflevector <16 x i32> %1322, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %1324 = shufflevector <32 x i32> %1323, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %1325 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1290, <4 x i32> %64)
  %1326 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1292, <4 x i32> %64)
  %1327 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1294, <4 x i32> %64)
  %1328 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1296, <4 x i32> %64)
  %1329 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1298, <4 x i32> %64)
  %1330 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1300, <4 x i32> %64)
  %1331 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1302, <4 x i32> %64)
  %1332 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1304, <4 x i32> %64)
  %1333 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1306, <4 x i32> %64)
  %1334 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1308, <4 x i32> %64)
  %1335 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1310, <4 x i32> %64)
  %1336 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1312, <4 x i32> %64)
  %1337 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1314, <4 x i32> %64)
  %1338 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1316, <4 x i32> %64)
  %1339 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1318, <4 x i32> %64)
  %1340 = shufflevector <64 x i32> %1324, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %1341 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1340, <4 x i32> %64)
  %1342 = shufflevector <4 x i32> %1325, <4 x i32> %1326, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1343 = shufflevector <4 x i32> %1327, <4 x i32> %1328, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1344 = shufflevector <4 x i32> %1329, <4 x i32> %1330, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1345 = shufflevector <4 x i32> %1331, <4 x i32> %1332, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1346 = shufflevector <4 x i32> %1333, <4 x i32> %1334, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1347 = shufflevector <4 x i32> %1335, <4 x i32> %1336, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1348 = shufflevector <4 x i32> %1337, <4 x i32> %1338, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1349 = shufflevector <4 x i32> %1339, <4 x i32> %1341, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1350 = shufflevector <8 x i32> %1342, <8 x i32> %1343, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1351 = shufflevector <8 x i32> %1344, <8 x i32> %1345, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1352 = shufflevector <8 x i32> %1346, <8 x i32> %1347, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1353 = shufflevector <8 x i32> %1348, <8 x i32> %1349, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1354 = shufflevector <16 x i32> %1350, <16 x i32> %1351, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1355 = shufflevector <16 x i32> %1352, <16 x i32> %1353, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1356 = shufflevector <32 x i32> %1354, <32 x i32> %1355, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1357 = add nsw <64 x i32> %1356, %t198
  %1358 = extractelement <64 x i32> %1357, i32 0
  %1359 = sext i32 %1358 to i64
  %1360 = getelementptr inbounds i16, i16* %65, i64 %1359
  %1361 = load i16, i16* %1360, align 2, !tbaa !382
  %1362 = insertelement <64 x i16> undef, i16 %1361, i32 0
  %1363 = extractelement <64 x i32> %1357, i32 1
  %1364 = sext i32 %1363 to i64
  %1365 = getelementptr inbounds i16, i16* %65, i64 %1364
  %1366 = load i16, i16* %1365, align 2, !tbaa !382
  %1367 = insertelement <64 x i16> %1362, i16 %1366, i32 1
  %1368 = extractelement <64 x i32> %1357, i32 2
  %1369 = sext i32 %1368 to i64
  %1370 = getelementptr inbounds i16, i16* %65, i64 %1369
  %1371 = load i16, i16* %1370, align 2, !tbaa !382
  %1372 = insertelement <64 x i16> %1367, i16 %1371, i32 2
  %1373 = extractelement <64 x i32> %1357, i32 3
  %1374 = sext i32 %1373 to i64
  %1375 = getelementptr inbounds i16, i16* %65, i64 %1374
  %1376 = load i16, i16* %1375, align 2, !tbaa !382
  %1377 = insertelement <64 x i16> %1372, i16 %1376, i32 3
  %1378 = extractelement <64 x i32> %1357, i32 4
  %1379 = sext i32 %1378 to i64
  %1380 = getelementptr inbounds i16, i16* %65, i64 %1379
  %1381 = load i16, i16* %1380, align 2, !tbaa !382
  %1382 = insertelement <64 x i16> %1377, i16 %1381, i32 4
  %1383 = extractelement <64 x i32> %1357, i32 5
  %1384 = sext i32 %1383 to i64
  %1385 = getelementptr inbounds i16, i16* %65, i64 %1384
  %1386 = load i16, i16* %1385, align 2, !tbaa !382
  %1387 = insertelement <64 x i16> %1382, i16 %1386, i32 5
  %1388 = extractelement <64 x i32> %1357, i32 6
  %1389 = sext i32 %1388 to i64
  %1390 = getelementptr inbounds i16, i16* %65, i64 %1389
  %1391 = load i16, i16* %1390, align 2, !tbaa !382
  %1392 = insertelement <64 x i16> %1387, i16 %1391, i32 6
  %1393 = extractelement <64 x i32> %1357, i32 7
  %1394 = sext i32 %1393 to i64
  %1395 = getelementptr inbounds i16, i16* %65, i64 %1394
  %1396 = load i16, i16* %1395, align 2, !tbaa !382
  %1397 = insertelement <64 x i16> %1392, i16 %1396, i32 7
  %1398 = extractelement <64 x i32> %1357, i32 8
  %1399 = sext i32 %1398 to i64
  %1400 = getelementptr inbounds i16, i16* %65, i64 %1399
  %1401 = load i16, i16* %1400, align 2, !tbaa !382
  %1402 = insertelement <64 x i16> %1397, i16 %1401, i32 8
  %1403 = extractelement <64 x i32> %1357, i32 9
  %1404 = sext i32 %1403 to i64
  %1405 = getelementptr inbounds i16, i16* %65, i64 %1404
  %1406 = load i16, i16* %1405, align 2, !tbaa !382
  %1407 = insertelement <64 x i16> %1402, i16 %1406, i32 9
  %1408 = extractelement <64 x i32> %1357, i32 10
  %1409 = sext i32 %1408 to i64
  %1410 = getelementptr inbounds i16, i16* %65, i64 %1409
  %1411 = load i16, i16* %1410, align 2, !tbaa !382
  %1412 = insertelement <64 x i16> %1407, i16 %1411, i32 10
  %1413 = extractelement <64 x i32> %1357, i32 11
  %1414 = sext i32 %1413 to i64
  %1415 = getelementptr inbounds i16, i16* %65, i64 %1414
  %1416 = load i16, i16* %1415, align 2, !tbaa !382
  %1417 = insertelement <64 x i16> %1412, i16 %1416, i32 11
  %1418 = extractelement <64 x i32> %1357, i32 12
  %1419 = sext i32 %1418 to i64
  %1420 = getelementptr inbounds i16, i16* %65, i64 %1419
  %1421 = load i16, i16* %1420, align 2, !tbaa !382
  %1422 = insertelement <64 x i16> %1417, i16 %1421, i32 12
  %1423 = extractelement <64 x i32> %1357, i32 13
  %1424 = sext i32 %1423 to i64
  %1425 = getelementptr inbounds i16, i16* %65, i64 %1424
  %1426 = load i16, i16* %1425, align 2, !tbaa !382
  %1427 = insertelement <64 x i16> %1422, i16 %1426, i32 13
  %1428 = extractelement <64 x i32> %1357, i32 14
  %1429 = sext i32 %1428 to i64
  %1430 = getelementptr inbounds i16, i16* %65, i64 %1429
  %1431 = load i16, i16* %1430, align 2, !tbaa !382
  %1432 = insertelement <64 x i16> %1427, i16 %1431, i32 14
  %1433 = extractelement <64 x i32> %1357, i32 15
  %1434 = sext i32 %1433 to i64
  %1435 = getelementptr inbounds i16, i16* %65, i64 %1434
  %1436 = load i16, i16* %1435, align 2, !tbaa !382
  %1437 = insertelement <64 x i16> %1432, i16 %1436, i32 15
  %1438 = extractelement <64 x i32> %1357, i32 16
  %1439 = sext i32 %1438 to i64
  %1440 = getelementptr inbounds i16, i16* %65, i64 %1439
  %1441 = load i16, i16* %1440, align 2, !tbaa !382
  %1442 = insertelement <64 x i16> %1437, i16 %1441, i32 16
  %1443 = extractelement <64 x i32> %1357, i32 17
  %1444 = sext i32 %1443 to i64
  %1445 = getelementptr inbounds i16, i16* %65, i64 %1444
  %1446 = load i16, i16* %1445, align 2, !tbaa !382
  %1447 = insertelement <64 x i16> %1442, i16 %1446, i32 17
  %1448 = extractelement <64 x i32> %1357, i32 18
  %1449 = sext i32 %1448 to i64
  %1450 = getelementptr inbounds i16, i16* %65, i64 %1449
  %1451 = load i16, i16* %1450, align 2, !tbaa !382
  %1452 = insertelement <64 x i16> %1447, i16 %1451, i32 18
  %1453 = extractelement <64 x i32> %1357, i32 19
  %1454 = sext i32 %1453 to i64
  %1455 = getelementptr inbounds i16, i16* %65, i64 %1454
  %1456 = load i16, i16* %1455, align 2, !tbaa !382
  %1457 = insertelement <64 x i16> %1452, i16 %1456, i32 19
  %1458 = extractelement <64 x i32> %1357, i32 20
  %1459 = sext i32 %1458 to i64
  %1460 = getelementptr inbounds i16, i16* %65, i64 %1459
  %1461 = load i16, i16* %1460, align 2, !tbaa !382
  %1462 = insertelement <64 x i16> %1457, i16 %1461, i32 20
  %1463 = extractelement <64 x i32> %1357, i32 21
  %1464 = sext i32 %1463 to i64
  %1465 = getelementptr inbounds i16, i16* %65, i64 %1464
  %1466 = load i16, i16* %1465, align 2, !tbaa !382
  %1467 = insertelement <64 x i16> %1462, i16 %1466, i32 21
  %1468 = extractelement <64 x i32> %1357, i32 22
  %1469 = sext i32 %1468 to i64
  %1470 = getelementptr inbounds i16, i16* %65, i64 %1469
  %1471 = load i16, i16* %1470, align 2, !tbaa !382
  %1472 = insertelement <64 x i16> %1467, i16 %1471, i32 22
  %1473 = extractelement <64 x i32> %1357, i32 23
  %1474 = sext i32 %1473 to i64
  %1475 = getelementptr inbounds i16, i16* %65, i64 %1474
  %1476 = load i16, i16* %1475, align 2, !tbaa !382
  %1477 = insertelement <64 x i16> %1472, i16 %1476, i32 23
  %1478 = extractelement <64 x i32> %1357, i32 24
  %1479 = sext i32 %1478 to i64
  %1480 = getelementptr inbounds i16, i16* %65, i64 %1479
  %1481 = load i16, i16* %1480, align 2, !tbaa !382
  %1482 = insertelement <64 x i16> %1477, i16 %1481, i32 24
  %1483 = extractelement <64 x i32> %1357, i32 25
  %1484 = sext i32 %1483 to i64
  %1485 = getelementptr inbounds i16, i16* %65, i64 %1484
  %1486 = load i16, i16* %1485, align 2, !tbaa !382
  %1487 = insertelement <64 x i16> %1482, i16 %1486, i32 25
  %1488 = extractelement <64 x i32> %1357, i32 26
  %1489 = sext i32 %1488 to i64
  %1490 = getelementptr inbounds i16, i16* %65, i64 %1489
  %1491 = load i16, i16* %1490, align 2, !tbaa !382
  %1492 = insertelement <64 x i16> %1487, i16 %1491, i32 26
  %1493 = extractelement <64 x i32> %1357, i32 27
  %1494 = sext i32 %1493 to i64
  %1495 = getelementptr inbounds i16, i16* %65, i64 %1494
  %1496 = load i16, i16* %1495, align 2, !tbaa !382
  %1497 = insertelement <64 x i16> %1492, i16 %1496, i32 27
  %1498 = extractelement <64 x i32> %1357, i32 28
  %1499 = sext i32 %1498 to i64
  %1500 = getelementptr inbounds i16, i16* %65, i64 %1499
  %1501 = load i16, i16* %1500, align 2, !tbaa !382
  %1502 = insertelement <64 x i16> %1497, i16 %1501, i32 28
  %1503 = extractelement <64 x i32> %1357, i32 29
  %1504 = sext i32 %1503 to i64
  %1505 = getelementptr inbounds i16, i16* %65, i64 %1504
  %1506 = load i16, i16* %1505, align 2, !tbaa !382
  %1507 = insertelement <64 x i16> %1502, i16 %1506, i32 29
  %1508 = extractelement <64 x i32> %1357, i32 30
  %1509 = sext i32 %1508 to i64
  %1510 = getelementptr inbounds i16, i16* %65, i64 %1509
  %1511 = load i16, i16* %1510, align 2, !tbaa !382
  %1512 = insertelement <64 x i16> %1507, i16 %1511, i32 30
  %1513 = extractelement <64 x i32> %1357, i32 31
  %1514 = sext i32 %1513 to i64
  %1515 = getelementptr inbounds i16, i16* %65, i64 %1514
  %1516 = load i16, i16* %1515, align 2, !tbaa !382
  %1517 = insertelement <64 x i16> %1512, i16 %1516, i32 31
  %1518 = extractelement <64 x i32> %1357, i32 32
  %1519 = sext i32 %1518 to i64
  %1520 = getelementptr inbounds i16, i16* %65, i64 %1519
  %1521 = load i16, i16* %1520, align 2, !tbaa !382
  %1522 = insertelement <64 x i16> %1517, i16 %1521, i32 32
  %1523 = extractelement <64 x i32> %1357, i32 33
  %1524 = sext i32 %1523 to i64
  %1525 = getelementptr inbounds i16, i16* %65, i64 %1524
  %1526 = load i16, i16* %1525, align 2, !tbaa !382
  %1527 = insertelement <64 x i16> %1522, i16 %1526, i32 33
  %1528 = extractelement <64 x i32> %1357, i32 34
  %1529 = sext i32 %1528 to i64
  %1530 = getelementptr inbounds i16, i16* %65, i64 %1529
  %1531 = load i16, i16* %1530, align 2, !tbaa !382
  %1532 = insertelement <64 x i16> %1527, i16 %1531, i32 34
  %1533 = extractelement <64 x i32> %1357, i32 35
  %1534 = sext i32 %1533 to i64
  %1535 = getelementptr inbounds i16, i16* %65, i64 %1534
  %1536 = load i16, i16* %1535, align 2, !tbaa !382
  %1537 = insertelement <64 x i16> %1532, i16 %1536, i32 35
  %1538 = extractelement <64 x i32> %1357, i32 36
  %1539 = sext i32 %1538 to i64
  %1540 = getelementptr inbounds i16, i16* %65, i64 %1539
  %1541 = load i16, i16* %1540, align 2, !tbaa !382
  %1542 = insertelement <64 x i16> %1537, i16 %1541, i32 36
  %1543 = extractelement <64 x i32> %1357, i32 37
  %1544 = sext i32 %1543 to i64
  %1545 = getelementptr inbounds i16, i16* %65, i64 %1544
  %1546 = load i16, i16* %1545, align 2, !tbaa !382
  %1547 = insertelement <64 x i16> %1542, i16 %1546, i32 37
  %1548 = extractelement <64 x i32> %1357, i32 38
  %1549 = sext i32 %1548 to i64
  %1550 = getelementptr inbounds i16, i16* %65, i64 %1549
  %1551 = load i16, i16* %1550, align 2, !tbaa !382
  %1552 = insertelement <64 x i16> %1547, i16 %1551, i32 38
  %1553 = extractelement <64 x i32> %1357, i32 39
  %1554 = sext i32 %1553 to i64
  %1555 = getelementptr inbounds i16, i16* %65, i64 %1554
  %1556 = load i16, i16* %1555, align 2, !tbaa !382
  %1557 = insertelement <64 x i16> %1552, i16 %1556, i32 39
  %1558 = extractelement <64 x i32> %1357, i32 40
  %1559 = sext i32 %1558 to i64
  %1560 = getelementptr inbounds i16, i16* %65, i64 %1559
  %1561 = load i16, i16* %1560, align 2, !tbaa !382
  %1562 = insertelement <64 x i16> %1557, i16 %1561, i32 40
  %1563 = extractelement <64 x i32> %1357, i32 41
  %1564 = sext i32 %1563 to i64
  %1565 = getelementptr inbounds i16, i16* %65, i64 %1564
  %1566 = load i16, i16* %1565, align 2, !tbaa !382
  %1567 = insertelement <64 x i16> %1562, i16 %1566, i32 41
  %1568 = extractelement <64 x i32> %1357, i32 42
  %1569 = sext i32 %1568 to i64
  %1570 = getelementptr inbounds i16, i16* %65, i64 %1569
  %1571 = load i16, i16* %1570, align 2, !tbaa !382
  %1572 = insertelement <64 x i16> %1567, i16 %1571, i32 42
  %1573 = extractelement <64 x i32> %1357, i32 43
  %1574 = sext i32 %1573 to i64
  %1575 = getelementptr inbounds i16, i16* %65, i64 %1574
  %1576 = load i16, i16* %1575, align 2, !tbaa !382
  %1577 = insertelement <64 x i16> %1572, i16 %1576, i32 43
  %1578 = extractelement <64 x i32> %1357, i32 44
  %1579 = sext i32 %1578 to i64
  %1580 = getelementptr inbounds i16, i16* %65, i64 %1579
  %1581 = load i16, i16* %1580, align 2, !tbaa !382
  %1582 = insertelement <64 x i16> %1577, i16 %1581, i32 44
  %1583 = extractelement <64 x i32> %1357, i32 45
  %1584 = sext i32 %1583 to i64
  %1585 = getelementptr inbounds i16, i16* %65, i64 %1584
  %1586 = load i16, i16* %1585, align 2, !tbaa !382
  %1587 = insertelement <64 x i16> %1582, i16 %1586, i32 45
  %1588 = extractelement <64 x i32> %1357, i32 46
  %1589 = sext i32 %1588 to i64
  %1590 = getelementptr inbounds i16, i16* %65, i64 %1589
  %1591 = load i16, i16* %1590, align 2, !tbaa !382
  %1592 = insertelement <64 x i16> %1587, i16 %1591, i32 46
  %1593 = extractelement <64 x i32> %1357, i32 47
  %1594 = sext i32 %1593 to i64
  %1595 = getelementptr inbounds i16, i16* %65, i64 %1594
  %1596 = load i16, i16* %1595, align 2, !tbaa !382
  %1597 = insertelement <64 x i16> %1592, i16 %1596, i32 47
  %1598 = extractelement <64 x i32> %1357, i32 48
  %1599 = sext i32 %1598 to i64
  %1600 = getelementptr inbounds i16, i16* %65, i64 %1599
  %1601 = load i16, i16* %1600, align 2, !tbaa !382
  %1602 = insertelement <64 x i16> %1597, i16 %1601, i32 48
  %1603 = extractelement <64 x i32> %1357, i32 49
  %1604 = sext i32 %1603 to i64
  %1605 = getelementptr inbounds i16, i16* %65, i64 %1604
  %1606 = load i16, i16* %1605, align 2, !tbaa !382
  %1607 = insertelement <64 x i16> %1602, i16 %1606, i32 49
  %1608 = extractelement <64 x i32> %1357, i32 50
  %1609 = sext i32 %1608 to i64
  %1610 = getelementptr inbounds i16, i16* %65, i64 %1609
  %1611 = load i16, i16* %1610, align 2, !tbaa !382
  %1612 = insertelement <64 x i16> %1607, i16 %1611, i32 50
  %1613 = extractelement <64 x i32> %1357, i32 51
  %1614 = sext i32 %1613 to i64
  %1615 = getelementptr inbounds i16, i16* %65, i64 %1614
  %1616 = load i16, i16* %1615, align 2, !tbaa !382
  %1617 = insertelement <64 x i16> %1612, i16 %1616, i32 51
  %1618 = extractelement <64 x i32> %1357, i32 52
  %1619 = sext i32 %1618 to i64
  %1620 = getelementptr inbounds i16, i16* %65, i64 %1619
  %1621 = load i16, i16* %1620, align 2, !tbaa !382
  %1622 = insertelement <64 x i16> %1617, i16 %1621, i32 52
  %1623 = extractelement <64 x i32> %1357, i32 53
  %1624 = sext i32 %1623 to i64
  %1625 = getelementptr inbounds i16, i16* %65, i64 %1624
  %1626 = load i16, i16* %1625, align 2, !tbaa !382
  %1627 = insertelement <64 x i16> %1622, i16 %1626, i32 53
  %1628 = extractelement <64 x i32> %1357, i32 54
  %1629 = sext i32 %1628 to i64
  %1630 = getelementptr inbounds i16, i16* %65, i64 %1629
  %1631 = load i16, i16* %1630, align 2, !tbaa !382
  %1632 = insertelement <64 x i16> %1627, i16 %1631, i32 54
  %1633 = extractelement <64 x i32> %1357, i32 55
  %1634 = sext i32 %1633 to i64
  %1635 = getelementptr inbounds i16, i16* %65, i64 %1634
  %1636 = load i16, i16* %1635, align 2, !tbaa !382
  %1637 = insertelement <64 x i16> %1632, i16 %1636, i32 55
  %1638 = extractelement <64 x i32> %1357, i32 56
  %1639 = sext i32 %1638 to i64
  %1640 = getelementptr inbounds i16, i16* %65, i64 %1639
  %1641 = load i16, i16* %1640, align 2, !tbaa !382
  %1642 = insertelement <64 x i16> %1637, i16 %1641, i32 56
  %1643 = extractelement <64 x i32> %1357, i32 57
  %1644 = sext i32 %1643 to i64
  %1645 = getelementptr inbounds i16, i16* %65, i64 %1644
  %1646 = load i16, i16* %1645, align 2, !tbaa !382
  %1647 = insertelement <64 x i16> %1642, i16 %1646, i32 57
  %1648 = extractelement <64 x i32> %1357, i32 58
  %1649 = sext i32 %1648 to i64
  %1650 = getelementptr inbounds i16, i16* %65, i64 %1649
  %1651 = load i16, i16* %1650, align 2, !tbaa !382
  %1652 = insertelement <64 x i16> %1647, i16 %1651, i32 58
  %1653 = extractelement <64 x i32> %1357, i32 59
  %1654 = sext i32 %1653 to i64
  %1655 = getelementptr inbounds i16, i16* %65, i64 %1654
  %1656 = load i16, i16* %1655, align 2, !tbaa !382
  %1657 = insertelement <64 x i16> %1652, i16 %1656, i32 59
  %1658 = extractelement <64 x i32> %1357, i32 60
  %1659 = sext i32 %1658 to i64
  %1660 = getelementptr inbounds i16, i16* %65, i64 %1659
  %1661 = load i16, i16* %1660, align 2, !tbaa !382
  %1662 = insertelement <64 x i16> %1657, i16 %1661, i32 60
  %1663 = extractelement <64 x i32> %1357, i32 61
  %1664 = sext i32 %1663 to i64
  %1665 = getelementptr inbounds i16, i16* %65, i64 %1664
  %1666 = load i16, i16* %1665, align 2, !tbaa !382
  %1667 = insertelement <64 x i16> %1662, i16 %1666, i32 61
  %1668 = extractelement <64 x i32> %1357, i32 62
  %1669 = sext i32 %1668 to i64
  %1670 = getelementptr inbounds i16, i16* %65, i64 %1669
  %1671 = load i16, i16* %1670, align 2, !tbaa !382
  %1672 = insertelement <64 x i16> %1667, i16 %1671, i32 62
  %1673 = extractelement <64 x i32> %1357, i32 63
  %1674 = sext i32 %1673 to i64
  %1675 = getelementptr inbounds i16, i16* %65, i64 %1674
  %1676 = load i16, i16* %1675, align 2, !tbaa !382
  %1677 = insertelement <64 x i16> %1672, i16 %1676, i32 63
  %1678 = add nsw i32 %blur_x.s0.x.v1.base.s, -61
  %1679 = insertelement <64 x i32> undef, i32 %1678, i32 0
  %1680 = shufflevector <64 x i32> %1679, <64 x i32> undef, <64 x i32> zeroinitializer
  %1681 = add nsw <64 x i32> %1680, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1682 = shufflevector <64 x i32> %1681, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1683 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1682, <4 x i32> %62)
  %1684 = shufflevector <64 x i32> %1681, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1685 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1684, <4 x i32> %62)
  %1686 = shufflevector <64 x i32> %1681, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1687 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1686, <4 x i32> %62)
  %1688 = shufflevector <64 x i32> %1681, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1689 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1688, <4 x i32> %62)
  %1690 = shufflevector <64 x i32> %1681, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %1691 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1690, <4 x i32> %62)
  %1692 = shufflevector <64 x i32> %1681, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %1693 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1692, <4 x i32> %62)
  %1694 = shufflevector <64 x i32> %1681, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %1695 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1694, <4 x i32> %62)
  %1696 = shufflevector <64 x i32> %1681, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %1697 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1696, <4 x i32> %62)
  %1698 = shufflevector <64 x i32> %1681, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %1699 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1698, <4 x i32> %62)
  %1700 = shufflevector <64 x i32> %1681, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %1701 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1700, <4 x i32> %62)
  %1702 = shufflevector <64 x i32> %1681, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %1703 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1702, <4 x i32> %62)
  %1704 = shufflevector <64 x i32> %1681, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %1705 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1704, <4 x i32> %62)
  %1706 = shufflevector <64 x i32> %1681, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %1707 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1706, <4 x i32> %62)
  %1708 = shufflevector <64 x i32> %1681, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %1709 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1708, <4 x i32> %62)
  %1710 = shufflevector <64 x i32> %1681, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %1711 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1710, <4 x i32> %62)
  %1712 = shufflevector <64 x i32> %1681, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %1713 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1712, <4 x i32> %62)
  %1714 = shufflevector <4 x i32> %1713, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %1715 = shufflevector <8 x i32> %1714, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %1716 = shufflevector <16 x i32> %1715, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %1717 = shufflevector <32 x i32> %1716, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %1718 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1683, <4 x i32> %64)
  %1719 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1685, <4 x i32> %64)
  %1720 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1687, <4 x i32> %64)
  %1721 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1689, <4 x i32> %64)
  %1722 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1691, <4 x i32> %64)
  %1723 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1693, <4 x i32> %64)
  %1724 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1695, <4 x i32> %64)
  %1725 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1697, <4 x i32> %64)
  %1726 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1699, <4 x i32> %64)
  %1727 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1701, <4 x i32> %64)
  %1728 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1703, <4 x i32> %64)
  %1729 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1705, <4 x i32> %64)
  %1730 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1707, <4 x i32> %64)
  %1731 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1709, <4 x i32> %64)
  %1732 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1711, <4 x i32> %64)
  %1733 = shufflevector <64 x i32> %1717, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %1734 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1733, <4 x i32> %64)
  %1735 = shufflevector <4 x i32> %1718, <4 x i32> %1719, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1736 = shufflevector <4 x i32> %1720, <4 x i32> %1721, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1737 = shufflevector <4 x i32> %1722, <4 x i32> %1723, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1738 = shufflevector <4 x i32> %1724, <4 x i32> %1725, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1739 = shufflevector <4 x i32> %1726, <4 x i32> %1727, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1740 = shufflevector <4 x i32> %1728, <4 x i32> %1729, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1741 = shufflevector <4 x i32> %1730, <4 x i32> %1731, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1742 = shufflevector <4 x i32> %1732, <4 x i32> %1734, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1743 = shufflevector <8 x i32> %1735, <8 x i32> %1736, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1744 = shufflevector <8 x i32> %1737, <8 x i32> %1738, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1745 = shufflevector <8 x i32> %1739, <8 x i32> %1740, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1746 = shufflevector <8 x i32> %1741, <8 x i32> %1742, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1747 = shufflevector <16 x i32> %1743, <16 x i32> %1744, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1748 = shufflevector <16 x i32> %1745, <16 x i32> %1746, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1749 = shufflevector <32 x i32> %1747, <32 x i32> %1748, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1750 = add nsw <64 x i32> %1749, %t198
  %1751 = extractelement <64 x i32> %1750, i32 0
  %1752 = sext i32 %1751 to i64
  %1753 = getelementptr inbounds i16, i16* %65, i64 %1752
  %1754 = load i16, i16* %1753, align 2, !tbaa !382
  %1755 = insertelement <64 x i16> undef, i16 %1754, i32 0
  %1756 = extractelement <64 x i32> %1750, i32 1
  %1757 = sext i32 %1756 to i64
  %1758 = getelementptr inbounds i16, i16* %65, i64 %1757
  %1759 = load i16, i16* %1758, align 2, !tbaa !382
  %1760 = insertelement <64 x i16> %1755, i16 %1759, i32 1
  %1761 = extractelement <64 x i32> %1750, i32 2
  %1762 = sext i32 %1761 to i64
  %1763 = getelementptr inbounds i16, i16* %65, i64 %1762
  %1764 = load i16, i16* %1763, align 2, !tbaa !382
  %1765 = insertelement <64 x i16> %1760, i16 %1764, i32 2
  %1766 = extractelement <64 x i32> %1750, i32 3
  %1767 = sext i32 %1766 to i64
  %1768 = getelementptr inbounds i16, i16* %65, i64 %1767
  %1769 = load i16, i16* %1768, align 2, !tbaa !382
  %1770 = insertelement <64 x i16> %1765, i16 %1769, i32 3
  %1771 = extractelement <64 x i32> %1750, i32 4
  %1772 = sext i32 %1771 to i64
  %1773 = getelementptr inbounds i16, i16* %65, i64 %1772
  %1774 = load i16, i16* %1773, align 2, !tbaa !382
  %1775 = insertelement <64 x i16> %1770, i16 %1774, i32 4
  %1776 = extractelement <64 x i32> %1750, i32 5
  %1777 = sext i32 %1776 to i64
  %1778 = getelementptr inbounds i16, i16* %65, i64 %1777
  %1779 = load i16, i16* %1778, align 2, !tbaa !382
  %1780 = insertelement <64 x i16> %1775, i16 %1779, i32 5
  %1781 = extractelement <64 x i32> %1750, i32 6
  %1782 = sext i32 %1781 to i64
  %1783 = getelementptr inbounds i16, i16* %65, i64 %1782
  %1784 = load i16, i16* %1783, align 2, !tbaa !382
  %1785 = insertelement <64 x i16> %1780, i16 %1784, i32 6
  %1786 = extractelement <64 x i32> %1750, i32 7
  %1787 = sext i32 %1786 to i64
  %1788 = getelementptr inbounds i16, i16* %65, i64 %1787
  %1789 = load i16, i16* %1788, align 2, !tbaa !382
  %1790 = insertelement <64 x i16> %1785, i16 %1789, i32 7
  %1791 = extractelement <64 x i32> %1750, i32 8
  %1792 = sext i32 %1791 to i64
  %1793 = getelementptr inbounds i16, i16* %65, i64 %1792
  %1794 = load i16, i16* %1793, align 2, !tbaa !382
  %1795 = insertelement <64 x i16> %1790, i16 %1794, i32 8
  %1796 = extractelement <64 x i32> %1750, i32 9
  %1797 = sext i32 %1796 to i64
  %1798 = getelementptr inbounds i16, i16* %65, i64 %1797
  %1799 = load i16, i16* %1798, align 2, !tbaa !382
  %1800 = insertelement <64 x i16> %1795, i16 %1799, i32 9
  %1801 = extractelement <64 x i32> %1750, i32 10
  %1802 = sext i32 %1801 to i64
  %1803 = getelementptr inbounds i16, i16* %65, i64 %1802
  %1804 = load i16, i16* %1803, align 2, !tbaa !382
  %1805 = insertelement <64 x i16> %1800, i16 %1804, i32 10
  %1806 = extractelement <64 x i32> %1750, i32 11
  %1807 = sext i32 %1806 to i64
  %1808 = getelementptr inbounds i16, i16* %65, i64 %1807
  %1809 = load i16, i16* %1808, align 2, !tbaa !382
  %1810 = insertelement <64 x i16> %1805, i16 %1809, i32 11
  %1811 = extractelement <64 x i32> %1750, i32 12
  %1812 = sext i32 %1811 to i64
  %1813 = getelementptr inbounds i16, i16* %65, i64 %1812
  %1814 = load i16, i16* %1813, align 2, !tbaa !382
  %1815 = insertelement <64 x i16> %1810, i16 %1814, i32 12
  %1816 = extractelement <64 x i32> %1750, i32 13
  %1817 = sext i32 %1816 to i64
  %1818 = getelementptr inbounds i16, i16* %65, i64 %1817
  %1819 = load i16, i16* %1818, align 2, !tbaa !382
  %1820 = insertelement <64 x i16> %1815, i16 %1819, i32 13
  %1821 = extractelement <64 x i32> %1750, i32 14
  %1822 = sext i32 %1821 to i64
  %1823 = getelementptr inbounds i16, i16* %65, i64 %1822
  %1824 = load i16, i16* %1823, align 2, !tbaa !382
  %1825 = insertelement <64 x i16> %1820, i16 %1824, i32 14
  %1826 = extractelement <64 x i32> %1750, i32 15
  %1827 = sext i32 %1826 to i64
  %1828 = getelementptr inbounds i16, i16* %65, i64 %1827
  %1829 = load i16, i16* %1828, align 2, !tbaa !382
  %1830 = insertelement <64 x i16> %1825, i16 %1829, i32 15
  %1831 = extractelement <64 x i32> %1750, i32 16
  %1832 = sext i32 %1831 to i64
  %1833 = getelementptr inbounds i16, i16* %65, i64 %1832
  %1834 = load i16, i16* %1833, align 2, !tbaa !382
  %1835 = insertelement <64 x i16> %1830, i16 %1834, i32 16
  %1836 = extractelement <64 x i32> %1750, i32 17
  %1837 = sext i32 %1836 to i64
  %1838 = getelementptr inbounds i16, i16* %65, i64 %1837
  %1839 = load i16, i16* %1838, align 2, !tbaa !382
  %1840 = insertelement <64 x i16> %1835, i16 %1839, i32 17
  %1841 = extractelement <64 x i32> %1750, i32 18
  %1842 = sext i32 %1841 to i64
  %1843 = getelementptr inbounds i16, i16* %65, i64 %1842
  %1844 = load i16, i16* %1843, align 2, !tbaa !382
  %1845 = insertelement <64 x i16> %1840, i16 %1844, i32 18
  %1846 = extractelement <64 x i32> %1750, i32 19
  %1847 = sext i32 %1846 to i64
  %1848 = getelementptr inbounds i16, i16* %65, i64 %1847
  %1849 = load i16, i16* %1848, align 2, !tbaa !382
  %1850 = insertelement <64 x i16> %1845, i16 %1849, i32 19
  %1851 = extractelement <64 x i32> %1750, i32 20
  %1852 = sext i32 %1851 to i64
  %1853 = getelementptr inbounds i16, i16* %65, i64 %1852
  %1854 = load i16, i16* %1853, align 2, !tbaa !382
  %1855 = insertelement <64 x i16> %1850, i16 %1854, i32 20
  %1856 = extractelement <64 x i32> %1750, i32 21
  %1857 = sext i32 %1856 to i64
  %1858 = getelementptr inbounds i16, i16* %65, i64 %1857
  %1859 = load i16, i16* %1858, align 2, !tbaa !382
  %1860 = insertelement <64 x i16> %1855, i16 %1859, i32 21
  %1861 = extractelement <64 x i32> %1750, i32 22
  %1862 = sext i32 %1861 to i64
  %1863 = getelementptr inbounds i16, i16* %65, i64 %1862
  %1864 = load i16, i16* %1863, align 2, !tbaa !382
  %1865 = insertelement <64 x i16> %1860, i16 %1864, i32 22
  %1866 = extractelement <64 x i32> %1750, i32 23
  %1867 = sext i32 %1866 to i64
  %1868 = getelementptr inbounds i16, i16* %65, i64 %1867
  %1869 = load i16, i16* %1868, align 2, !tbaa !382
  %1870 = insertelement <64 x i16> %1865, i16 %1869, i32 23
  %1871 = extractelement <64 x i32> %1750, i32 24
  %1872 = sext i32 %1871 to i64
  %1873 = getelementptr inbounds i16, i16* %65, i64 %1872
  %1874 = load i16, i16* %1873, align 2, !tbaa !382
  %1875 = insertelement <64 x i16> %1870, i16 %1874, i32 24
  %1876 = extractelement <64 x i32> %1750, i32 25
  %1877 = sext i32 %1876 to i64
  %1878 = getelementptr inbounds i16, i16* %65, i64 %1877
  %1879 = load i16, i16* %1878, align 2, !tbaa !382
  %1880 = insertelement <64 x i16> %1875, i16 %1879, i32 25
  %1881 = extractelement <64 x i32> %1750, i32 26
  %1882 = sext i32 %1881 to i64
  %1883 = getelementptr inbounds i16, i16* %65, i64 %1882
  %1884 = load i16, i16* %1883, align 2, !tbaa !382
  %1885 = insertelement <64 x i16> %1880, i16 %1884, i32 26
  %1886 = extractelement <64 x i32> %1750, i32 27
  %1887 = sext i32 %1886 to i64
  %1888 = getelementptr inbounds i16, i16* %65, i64 %1887
  %1889 = load i16, i16* %1888, align 2, !tbaa !382
  %1890 = insertelement <64 x i16> %1885, i16 %1889, i32 27
  %1891 = extractelement <64 x i32> %1750, i32 28
  %1892 = sext i32 %1891 to i64
  %1893 = getelementptr inbounds i16, i16* %65, i64 %1892
  %1894 = load i16, i16* %1893, align 2, !tbaa !382
  %1895 = insertelement <64 x i16> %1890, i16 %1894, i32 28
  %1896 = extractelement <64 x i32> %1750, i32 29
  %1897 = sext i32 %1896 to i64
  %1898 = getelementptr inbounds i16, i16* %65, i64 %1897
  %1899 = load i16, i16* %1898, align 2, !tbaa !382
  %1900 = insertelement <64 x i16> %1895, i16 %1899, i32 29
  %1901 = extractelement <64 x i32> %1750, i32 30
  %1902 = sext i32 %1901 to i64
  %1903 = getelementptr inbounds i16, i16* %65, i64 %1902
  %1904 = load i16, i16* %1903, align 2, !tbaa !382
  %1905 = insertelement <64 x i16> %1900, i16 %1904, i32 30
  %1906 = extractelement <64 x i32> %1750, i32 31
  %1907 = sext i32 %1906 to i64
  %1908 = getelementptr inbounds i16, i16* %65, i64 %1907
  %1909 = load i16, i16* %1908, align 2, !tbaa !382
  %1910 = insertelement <64 x i16> %1905, i16 %1909, i32 31
  %1911 = extractelement <64 x i32> %1750, i32 32
  %1912 = sext i32 %1911 to i64
  %1913 = getelementptr inbounds i16, i16* %65, i64 %1912
  %1914 = load i16, i16* %1913, align 2, !tbaa !382
  %1915 = insertelement <64 x i16> %1910, i16 %1914, i32 32
  %1916 = extractelement <64 x i32> %1750, i32 33
  %1917 = sext i32 %1916 to i64
  %1918 = getelementptr inbounds i16, i16* %65, i64 %1917
  %1919 = load i16, i16* %1918, align 2, !tbaa !382
  %1920 = insertelement <64 x i16> %1915, i16 %1919, i32 33
  %1921 = extractelement <64 x i32> %1750, i32 34
  %1922 = sext i32 %1921 to i64
  %1923 = getelementptr inbounds i16, i16* %65, i64 %1922
  %1924 = load i16, i16* %1923, align 2, !tbaa !382
  %1925 = insertelement <64 x i16> %1920, i16 %1924, i32 34
  %1926 = extractelement <64 x i32> %1750, i32 35
  %1927 = sext i32 %1926 to i64
  %1928 = getelementptr inbounds i16, i16* %65, i64 %1927
  %1929 = load i16, i16* %1928, align 2, !tbaa !382
  %1930 = insertelement <64 x i16> %1925, i16 %1929, i32 35
  %1931 = extractelement <64 x i32> %1750, i32 36
  %1932 = sext i32 %1931 to i64
  %1933 = getelementptr inbounds i16, i16* %65, i64 %1932
  %1934 = load i16, i16* %1933, align 2, !tbaa !382
  %1935 = insertelement <64 x i16> %1930, i16 %1934, i32 36
  %1936 = extractelement <64 x i32> %1750, i32 37
  %1937 = sext i32 %1936 to i64
  %1938 = getelementptr inbounds i16, i16* %65, i64 %1937
  %1939 = load i16, i16* %1938, align 2, !tbaa !382
  %1940 = insertelement <64 x i16> %1935, i16 %1939, i32 37
  %1941 = extractelement <64 x i32> %1750, i32 38
  %1942 = sext i32 %1941 to i64
  %1943 = getelementptr inbounds i16, i16* %65, i64 %1942
  %1944 = load i16, i16* %1943, align 2, !tbaa !382
  %1945 = insertelement <64 x i16> %1940, i16 %1944, i32 38
  %1946 = extractelement <64 x i32> %1750, i32 39
  %1947 = sext i32 %1946 to i64
  %1948 = getelementptr inbounds i16, i16* %65, i64 %1947
  %1949 = load i16, i16* %1948, align 2, !tbaa !382
  %1950 = insertelement <64 x i16> %1945, i16 %1949, i32 39
  %1951 = extractelement <64 x i32> %1750, i32 40
  %1952 = sext i32 %1951 to i64
  %1953 = getelementptr inbounds i16, i16* %65, i64 %1952
  %1954 = load i16, i16* %1953, align 2, !tbaa !382
  %1955 = insertelement <64 x i16> %1950, i16 %1954, i32 40
  %1956 = extractelement <64 x i32> %1750, i32 41
  %1957 = sext i32 %1956 to i64
  %1958 = getelementptr inbounds i16, i16* %65, i64 %1957
  %1959 = load i16, i16* %1958, align 2, !tbaa !382
  %1960 = insertelement <64 x i16> %1955, i16 %1959, i32 41
  %1961 = extractelement <64 x i32> %1750, i32 42
  %1962 = sext i32 %1961 to i64
  %1963 = getelementptr inbounds i16, i16* %65, i64 %1962
  %1964 = load i16, i16* %1963, align 2, !tbaa !382
  %1965 = insertelement <64 x i16> %1960, i16 %1964, i32 42
  %1966 = extractelement <64 x i32> %1750, i32 43
  %1967 = sext i32 %1966 to i64
  %1968 = getelementptr inbounds i16, i16* %65, i64 %1967
  %1969 = load i16, i16* %1968, align 2, !tbaa !382
  %1970 = insertelement <64 x i16> %1965, i16 %1969, i32 43
  %1971 = extractelement <64 x i32> %1750, i32 44
  %1972 = sext i32 %1971 to i64
  %1973 = getelementptr inbounds i16, i16* %65, i64 %1972
  %1974 = load i16, i16* %1973, align 2, !tbaa !382
  %1975 = insertelement <64 x i16> %1970, i16 %1974, i32 44
  %1976 = extractelement <64 x i32> %1750, i32 45
  %1977 = sext i32 %1976 to i64
  %1978 = getelementptr inbounds i16, i16* %65, i64 %1977
  %1979 = load i16, i16* %1978, align 2, !tbaa !382
  %1980 = insertelement <64 x i16> %1975, i16 %1979, i32 45
  %1981 = extractelement <64 x i32> %1750, i32 46
  %1982 = sext i32 %1981 to i64
  %1983 = getelementptr inbounds i16, i16* %65, i64 %1982
  %1984 = load i16, i16* %1983, align 2, !tbaa !382
  %1985 = insertelement <64 x i16> %1980, i16 %1984, i32 46
  %1986 = extractelement <64 x i32> %1750, i32 47
  %1987 = sext i32 %1986 to i64
  %1988 = getelementptr inbounds i16, i16* %65, i64 %1987
  %1989 = load i16, i16* %1988, align 2, !tbaa !382
  %1990 = insertelement <64 x i16> %1985, i16 %1989, i32 47
  %1991 = extractelement <64 x i32> %1750, i32 48
  %1992 = sext i32 %1991 to i64
  %1993 = getelementptr inbounds i16, i16* %65, i64 %1992
  %1994 = load i16, i16* %1993, align 2, !tbaa !382
  %1995 = insertelement <64 x i16> %1990, i16 %1994, i32 48
  %1996 = extractelement <64 x i32> %1750, i32 49
  %1997 = sext i32 %1996 to i64
  %1998 = getelementptr inbounds i16, i16* %65, i64 %1997
  %1999 = load i16, i16* %1998, align 2, !tbaa !382
  %2000 = insertelement <64 x i16> %1995, i16 %1999, i32 49
  %2001 = extractelement <64 x i32> %1750, i32 50
  %2002 = sext i32 %2001 to i64
  %2003 = getelementptr inbounds i16, i16* %65, i64 %2002
  %2004 = load i16, i16* %2003, align 2, !tbaa !382
  %2005 = insertelement <64 x i16> %2000, i16 %2004, i32 50
  %2006 = extractelement <64 x i32> %1750, i32 51
  %2007 = sext i32 %2006 to i64
  %2008 = getelementptr inbounds i16, i16* %65, i64 %2007
  %2009 = load i16, i16* %2008, align 2, !tbaa !382
  %2010 = insertelement <64 x i16> %2005, i16 %2009, i32 51
  %2011 = extractelement <64 x i32> %1750, i32 52
  %2012 = sext i32 %2011 to i64
  %2013 = getelementptr inbounds i16, i16* %65, i64 %2012
  %2014 = load i16, i16* %2013, align 2, !tbaa !382
  %2015 = insertelement <64 x i16> %2010, i16 %2014, i32 52
  %2016 = extractelement <64 x i32> %1750, i32 53
  %2017 = sext i32 %2016 to i64
  %2018 = getelementptr inbounds i16, i16* %65, i64 %2017
  %2019 = load i16, i16* %2018, align 2, !tbaa !382
  %2020 = insertelement <64 x i16> %2015, i16 %2019, i32 53
  %2021 = extractelement <64 x i32> %1750, i32 54
  %2022 = sext i32 %2021 to i64
  %2023 = getelementptr inbounds i16, i16* %65, i64 %2022
  %2024 = load i16, i16* %2023, align 2, !tbaa !382
  %2025 = insertelement <64 x i16> %2020, i16 %2024, i32 54
  %2026 = extractelement <64 x i32> %1750, i32 55
  %2027 = sext i32 %2026 to i64
  %2028 = getelementptr inbounds i16, i16* %65, i64 %2027
  %2029 = load i16, i16* %2028, align 2, !tbaa !382
  %2030 = insertelement <64 x i16> %2025, i16 %2029, i32 55
  %2031 = extractelement <64 x i32> %1750, i32 56
  %2032 = sext i32 %2031 to i64
  %2033 = getelementptr inbounds i16, i16* %65, i64 %2032
  %2034 = load i16, i16* %2033, align 2, !tbaa !382
  %2035 = insertelement <64 x i16> %2030, i16 %2034, i32 56
  %2036 = extractelement <64 x i32> %1750, i32 57
  %2037 = sext i32 %2036 to i64
  %2038 = getelementptr inbounds i16, i16* %65, i64 %2037
  %2039 = load i16, i16* %2038, align 2, !tbaa !382
  %2040 = insertelement <64 x i16> %2035, i16 %2039, i32 57
  %2041 = extractelement <64 x i32> %1750, i32 58
  %2042 = sext i32 %2041 to i64
  %2043 = getelementptr inbounds i16, i16* %65, i64 %2042
  %2044 = load i16, i16* %2043, align 2, !tbaa !382
  %2045 = insertelement <64 x i16> %2040, i16 %2044, i32 58
  %2046 = extractelement <64 x i32> %1750, i32 59
  %2047 = sext i32 %2046 to i64
  %2048 = getelementptr inbounds i16, i16* %65, i64 %2047
  %2049 = load i16, i16* %2048, align 2, !tbaa !382
  %2050 = insertelement <64 x i16> %2045, i16 %2049, i32 59
  %2051 = extractelement <64 x i32> %1750, i32 60
  %2052 = sext i32 %2051 to i64
  %2053 = getelementptr inbounds i16, i16* %65, i64 %2052
  %2054 = load i16, i16* %2053, align 2, !tbaa !382
  %2055 = insertelement <64 x i16> %2050, i16 %2054, i32 60
  %2056 = extractelement <64 x i32> %1750, i32 61
  %2057 = sext i32 %2056 to i64
  %2058 = getelementptr inbounds i16, i16* %65, i64 %2057
  %2059 = load i16, i16* %2058, align 2, !tbaa !382
  %2060 = insertelement <64 x i16> %2055, i16 %2059, i32 61
  %2061 = extractelement <64 x i32> %1750, i32 62
  %2062 = sext i32 %2061 to i64
  %2063 = getelementptr inbounds i16, i16* %65, i64 %2062
  %2064 = load i16, i16* %2063, align 2, !tbaa !382
  %2065 = insertelement <64 x i16> %2060, i16 %2064, i32 62
  %2066 = extractelement <64 x i32> %1750, i32 63
  %2067 = sext i32 %2066 to i64
  %2068 = getelementptr inbounds i16, i16* %65, i64 %2067
  %2069 = load i16, i16* %2068, align 2, !tbaa !382
  %2070 = insertelement <64 x i16> %2065, i16 %2069, i32 63
  %2071 = add <64 x i16> %891, %498
  %2072 = add <64 x i16> %2071, %1284
  %2073 = add <64 x i16> %2072, %1677
  %2074 = add <64 x i16> %2073, %2070
  %2075 = shufflevector <64 x i16> %2074, <64 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2076 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2075, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2077 = shufflevector <64 x i16> %2074, <64 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2078 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2077, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2079 = shufflevector <64 x i16> %2074, <64 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2080 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2079, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2081 = shufflevector <64 x i16> %2074, <64 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2082 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2081, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2083 = shufflevector <64 x i16> %2074, <64 x i16> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %2084 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2083, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2085 = shufflevector <64 x i16> %2074, <64 x i16> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %2086 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2085, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2087 = shufflevector <64 x i16> %2074, <64 x i16> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %2088 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2087, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2089 = shufflevector <64 x i16> %2074, <64 x i16> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %2090 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2089, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2091 = shufflevector <64 x i16> %2074, <64 x i16> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %2092 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2091, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2093 = shufflevector <64 x i16> %2074, <64 x i16> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %2094 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2093, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2095 = shufflevector <64 x i16> %2074, <64 x i16> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %2096 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2095, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2097 = shufflevector <64 x i16> %2074, <64 x i16> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %2098 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2097, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2099 = shufflevector <64 x i16> %2074, <64 x i16> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %2100 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2099, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2101 = shufflevector <64 x i16> %2074, <64 x i16> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %2102 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2101, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2103 = shufflevector <64 x i16> %2074, <64 x i16> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %2104 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2103, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2105 = shufflevector <64 x i16> %2074, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %2106 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2105, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2107 = shufflevector <4 x i32> %2076, <4 x i32> %2078, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2108 = shufflevector <4 x i32> %2080, <4 x i32> %2082, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2109 = shufflevector <4 x i32> %2084, <4 x i32> %2086, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2110 = shufflevector <4 x i32> %2088, <4 x i32> %2090, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2111 = shufflevector <4 x i32> %2092, <4 x i32> %2094, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2112 = shufflevector <4 x i32> %2096, <4 x i32> %2098, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2113 = shufflevector <4 x i32> %2100, <4 x i32> %2102, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2114 = shufflevector <4 x i32> %2104, <4 x i32> %2106, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2115 = shufflevector <8 x i32> %2107, <8 x i32> %2108, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2116 = shufflevector <8 x i32> %2109, <8 x i32> %2110, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2117 = shufflevector <8 x i32> %2111, <8 x i32> %2112, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2118 = shufflevector <8 x i32> %2113, <8 x i32> %2114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2119 = shufflevector <16 x i32> %2115, <16 x i32> %2116, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2120 = shufflevector <16 x i32> %2117, <16 x i32> %2118, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2121 = shufflevector <32 x i32> %2119, <32 x i32> %2120, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2122 = lshr <64 x i32> %2121, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %2123 = trunc <64 x i32> %2122 to <64 x i16>
  %2124 = shufflevector <64 x i16> %2123, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2125 = sext i32 %blur_x.s0.x.v1.base.s to i64
  %2126 = add nsw i64 %2125, %103
  %2127 = getelementptr inbounds i16, i16* %blur_x, i64 %2126
  %2128 = bitcast i16* %2127 to <8 x i16>*
  store <8 x i16> %2124, <8 x i16>* %2128, align 2, !tbaa !385
  %2129 = shufflevector <64 x i16> %2123, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2130 = getelementptr inbounds i16, i16* %2127, i64 8
  %2131 = bitcast i16* %2130 to <8 x i16>*
  store <8 x i16> %2129, <8 x i16>* %2131, align 2, !tbaa !385
  %2132 = shufflevector <64 x i16> %2123, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2133 = getelementptr inbounds i16, i16* %2127, i64 16
  %2134 = bitcast i16* %2133 to <8 x i16>*
  store <8 x i16> %2132, <8 x i16>* %2134, align 2, !tbaa !385
  %2135 = shufflevector <64 x i16> %2123, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2136 = getelementptr inbounds i16, i16* %2127, i64 24
  %2137 = bitcast i16* %2136 to <8 x i16>*
  store <8 x i16> %2135, <8 x i16>* %2137, align 2, !tbaa !385
  %2138 = shufflevector <64 x i16> %2123, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2139 = getelementptr inbounds i16, i16* %2127, i64 32
  %2140 = bitcast i16* %2139 to <8 x i16>*
  store <8 x i16> %2138, <8 x i16>* %2140, align 2, !tbaa !385
  %2141 = shufflevector <64 x i16> %2123, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2142 = getelementptr inbounds i16, i16* %2127, i64 40
  %2143 = bitcast i16* %2142 to <8 x i16>*
  store <8 x i16> %2141, <8 x i16>* %2143, align 2, !tbaa !385
  %2144 = shufflevector <64 x i16> %2123, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2145 = getelementptr inbounds i16, i16* %2127, i64 48
  %2146 = bitcast i16* %2145 to <8 x i16>*
  store <8 x i16> %2144, <8 x i16>* %2146, align 2, !tbaa !385
  %2147 = shufflevector <64 x i16> %2123, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2148 = getelementptr inbounds i16, i16* %2127, i64 56
  %2149 = bitcast i16* %2148 to <8 x i16>*
  store <8 x i16> %2147, <8 x i16>* %2149, align 2, !tbaa !385
  %2150 = add nuw nsw i32 %blur_x.s0.x.x, 1
  %.not152 = icmp eq i32 %2150, %t234
  br i1 %.not152, label %"end for blur_x.s0.x.x", label %"for blur_x.s0.x.x"

"end for blur_x.s0.x.x":                          ; preds = %"for blur_x.s0.x.x", %"for blur_y.s0.y.yi.$n.rebased"
  br i1 %66, label %"for blur_x.s0.x.x.rebased.preheader", label %"end for blur_x.s0.x.x.rebased", !prof !381

"for blur_x.s0.x.x.rebased.preheader":            ; preds = %"end for blur_x.s0.x.x"
  %2151 = sext i32 %t242 to i64
  %indvars.iv.next178.0 = add nuw nsw i64 0, 1
  br label %"for blur_x.s0.x.x.rebased"

"for blur_x.s0.x.x.rebased":                      ; preds = %"for blur_x.s0.x.x.rebased.for blur_x.s0.x.x.rebased_crit_edge", %"for blur_x.s0.x.x.rebased.preheader"
  %indvars.iv.next178.phi = phi i64 [ %indvars.iv.next178.0, %"for blur_x.s0.x.x.rebased.preheader" ], [ %indvars.iv.next178.1, %"for blur_x.s0.x.x.rebased.for blur_x.s0.x.x.rebased_crit_edge" ]
  %blur_x.s0.x.x.rebased = phi i32 [ 0, %"for blur_x.s0.x.x.rebased.preheader" ], [ %2386, %"for blur_x.s0.x.x.rebased.for blur_x.s0.x.x.rebased_crit_edge" ]
  %2152 = add nsw i32 %blur_x.s0.x.x.rebased, %t234
  %2153 = shl nsw i32 %2152, 6
  %blur_x.s0.x.v1.base.s1 = add nsw i32 %2153, %t215
  %t200 = add nsw i32 %blur_x.s0.x.v1.base.s1, %t241
  %2154 = sext i32 %t200 to i64
  %2155 = getelementptr inbounds i16, i16* %65, i64 %2154
  %2156 = getelementptr inbounds i16, i16* %2155, i64 -63
  %2157 = bitcast i16* %2156 to <8 x i16>*
  %2158 = load <8 x i16>, <8 x i16>* %2157, align 2, !tbaa !382
  %2159 = getelementptr inbounds i16, i16* %2155, i64 -55
  %2160 = bitcast i16* %2159 to <8 x i16>*
  %2161 = load <8 x i16>, <8 x i16>* %2160, align 2, !tbaa !382
  %2162 = getelementptr inbounds i16, i16* %2155, i64 -47
  %2163 = bitcast i16* %2162 to <8 x i16>*
  %2164 = load <8 x i16>, <8 x i16>* %2163, align 2, !tbaa !382
  %2165 = getelementptr inbounds i16, i16* %2155, i64 -39
  %2166 = bitcast i16* %2165 to <8 x i16>*
  %2167 = load <8 x i16>, <8 x i16>* %2166, align 2, !tbaa !382
  %2168 = getelementptr inbounds i16, i16* %2155, i64 -31
  %2169 = bitcast i16* %2168 to <8 x i16>*
  %2170 = load <8 x i16>, <8 x i16>* %2169, align 2, !tbaa !382
  %2171 = getelementptr inbounds i16, i16* %2155, i64 -23
  %2172 = bitcast i16* %2171 to <8 x i16>*
  %2173 = load <8 x i16>, <8 x i16>* %2172, align 2, !tbaa !382
  %2174 = getelementptr inbounds i16, i16* %2155, i64 -15
  %2175 = bitcast i16* %2174 to <8 x i16>*
  %2176 = load <8 x i16>, <8 x i16>* %2175, align 2, !tbaa !382
  %2177 = getelementptr inbounds i16, i16* %2155, i64 -7
  %2178 = bitcast i16* %2177 to <8 x i16>*
  %2179 = load <8 x i16>, <8 x i16>* %2178, align 2, !tbaa !382
  %2180 = getelementptr inbounds i16, i16* %2155, i64 -64
  %2181 = bitcast i16* %2180 to <8 x i16>*
  %2182 = load <8 x i16>, <8 x i16>* %2181, align 2, !tbaa !382
  %2183 = getelementptr inbounds i16, i16* %2155, i64 -56
  %2184 = bitcast i16* %2183 to <8 x i16>*
  %2185 = load <8 x i16>, <8 x i16>* %2184, align 2, !tbaa !382
  %2186 = getelementptr inbounds i16, i16* %2155, i64 -48
  %2187 = bitcast i16* %2186 to <8 x i16>*
  %2188 = load <8 x i16>, <8 x i16>* %2187, align 2, !tbaa !382
  %2189 = getelementptr inbounds i16, i16* %2155, i64 -40
  %2190 = bitcast i16* %2189 to <8 x i16>*
  %2191 = load <8 x i16>, <8 x i16>* %2190, align 2, !tbaa !382
  %2192 = getelementptr inbounds i16, i16* %2155, i64 -32
  %2193 = bitcast i16* %2192 to <8 x i16>*
  %2194 = load <8 x i16>, <8 x i16>* %2193, align 2, !tbaa !382
  %2195 = getelementptr inbounds i16, i16* %2155, i64 -24
  %2196 = bitcast i16* %2195 to <8 x i16>*
  %2197 = load <8 x i16>, <8 x i16>* %2196, align 2, !tbaa !382
  %2198 = getelementptr inbounds i16, i16* %2155, i64 -16
  %2199 = bitcast i16* %2198 to <8 x i16>*
  %2200 = load <8 x i16>, <8 x i16>* %2199, align 2, !tbaa !382
  %2201 = getelementptr inbounds i16, i16* %2155, i64 -8
  %2202 = bitcast i16* %2201 to <8 x i16>*
  %2203 = load <8 x i16>, <8 x i16>* %2202, align 2, !tbaa !382
  %2204 = getelementptr inbounds i16, i16* %2155, i64 -62
  %2205 = bitcast i16* %2204 to <8 x i16>*
  %2206 = load <8 x i16>, <8 x i16>* %2205, align 2, !tbaa !382
  %2207 = getelementptr inbounds i16, i16* %2155, i64 -54
  %2208 = bitcast i16* %2207 to <8 x i16>*
  %2209 = load <8 x i16>, <8 x i16>* %2208, align 2, !tbaa !382
  %2210 = getelementptr inbounds i16, i16* %2155, i64 -46
  %2211 = bitcast i16* %2210 to <8 x i16>*
  %2212 = load <8 x i16>, <8 x i16>* %2211, align 2, !tbaa !382
  %2213 = getelementptr inbounds i16, i16* %2155, i64 -38
  %2214 = bitcast i16* %2213 to <8 x i16>*
  %2215 = load <8 x i16>, <8 x i16>* %2214, align 2, !tbaa !382
  %2216 = getelementptr inbounds i16, i16* %2155, i64 -30
  %2217 = bitcast i16* %2216 to <8 x i16>*
  %2218 = load <8 x i16>, <8 x i16>* %2217, align 2, !tbaa !382
  %2219 = getelementptr inbounds i16, i16* %2155, i64 -22
  %2220 = bitcast i16* %2219 to <8 x i16>*
  %2221 = load <8 x i16>, <8 x i16>* %2220, align 2, !tbaa !382
  %2222 = getelementptr inbounds i16, i16* %2155, i64 -14
  %2223 = bitcast i16* %2222 to <8 x i16>*
  %2224 = load <8 x i16>, <8 x i16>* %2223, align 2, !tbaa !382
  %2225 = getelementptr inbounds i16, i16* %2155, i64 -6
  %2226 = bitcast i16* %2225 to <8 x i16>*
  %2227 = load <8 x i16>, <8 x i16>* %2226, align 2, !tbaa !382
  %2228 = getelementptr inbounds i16, i16* %2155, i64 -60
  %2229 = bitcast i16* %2228 to <8 x i16>*
  %2230 = load <8 x i16>, <8 x i16>* %2229, align 2, !tbaa !382
  %2231 = getelementptr inbounds i16, i16* %2155, i64 -52
  %2232 = bitcast i16* %2231 to <8 x i16>*
  %2233 = load <8 x i16>, <8 x i16>* %2232, align 2, !tbaa !382
  %2234 = getelementptr inbounds i16, i16* %2155, i64 -44
  %2235 = bitcast i16* %2234 to <8 x i16>*
  %2236 = load <8 x i16>, <8 x i16>* %2235, align 2, !tbaa !382
  %2237 = getelementptr inbounds i16, i16* %2155, i64 -36
  %2238 = bitcast i16* %2237 to <8 x i16>*
  %2239 = load <8 x i16>, <8 x i16>* %2238, align 2, !tbaa !382
  %2240 = getelementptr inbounds i16, i16* %2155, i64 -28
  %2241 = bitcast i16* %2240 to <8 x i16>*
  %2242 = load <8 x i16>, <8 x i16>* %2241, align 2, !tbaa !382
  %2243 = getelementptr inbounds i16, i16* %2155, i64 -20
  %2244 = bitcast i16* %2243 to <8 x i16>*
  %2245 = load <8 x i16>, <8 x i16>* %2244, align 2, !tbaa !382
  %2246 = getelementptr inbounds i16, i16* %2155, i64 -12
  %2247 = bitcast i16* %2246 to <8 x i16>*
  %2248 = load <8 x i16>, <8 x i16>* %2247, align 2, !tbaa !382
  %2249 = getelementptr inbounds i16, i16* %2155, i64 -4
  %2250 = bitcast i16* %2249 to <8 x i16>*
  %2251 = load <8 x i16>, <8 x i16>* %2250, align 2, !tbaa !382
  %2252 = getelementptr inbounds i16, i16* %2155, i64 -61
  %2253 = bitcast i16* %2252 to <8 x i16>*
  %2254 = load <8 x i16>, <8 x i16>* %2253, align 2, !tbaa !382
  %2255 = getelementptr inbounds i16, i16* %2155, i64 -53
  %2256 = bitcast i16* %2255 to <8 x i16>*
  %2257 = load <8 x i16>, <8 x i16>* %2256, align 2, !tbaa !382
  %2258 = getelementptr inbounds i16, i16* %2155, i64 -45
  %2259 = bitcast i16* %2258 to <8 x i16>*
  %2260 = load <8 x i16>, <8 x i16>* %2259, align 2, !tbaa !382
  %2261 = getelementptr inbounds i16, i16* %2155, i64 -37
  %2262 = bitcast i16* %2261 to <8 x i16>*
  %2263 = load <8 x i16>, <8 x i16>* %2262, align 2, !tbaa !382
  %2264 = getelementptr inbounds i16, i16* %2155, i64 -29
  %2265 = bitcast i16* %2264 to <8 x i16>*
  %2266 = load <8 x i16>, <8 x i16>* %2265, align 2, !tbaa !382
  %2267 = getelementptr inbounds i16, i16* %2155, i64 -21
  %2268 = bitcast i16* %2267 to <8 x i16>*
  %2269 = load <8 x i16>, <8 x i16>* %2268, align 2, !tbaa !382
  %2270 = getelementptr inbounds i16, i16* %2155, i64 -13
  %2271 = bitcast i16* %2270 to <8 x i16>*
  %2272 = load <8 x i16>, <8 x i16>* %2271, align 2, !tbaa !382
  %2273 = getelementptr inbounds i16, i16* %2155, i64 -5
  %2274 = bitcast i16* %2273 to <8 x i16>*
  %2275 = load <8 x i16>, <8 x i16>* %2274, align 2, !tbaa !382
  %2276 = add <8 x i16> %2182, %2158
  %2277 = add <8 x i16> %2276, %2206
  %2278 = add <8 x i16> %2277, %2230
  %2279 = add <8 x i16> %2278, %2254
  %2280 = add <8 x i16> %2185, %2161
  %2281 = add <8 x i16> %2280, %2209
  %2282 = add <8 x i16> %2281, %2233
  %2283 = add <8 x i16> %2282, %2257
  %2284 = add <8 x i16> %2188, %2164
  %2285 = add <8 x i16> %2284, %2212
  %2286 = add <8 x i16> %2285, %2236
  %2287 = add <8 x i16> %2286, %2260
  %2288 = add <8 x i16> %2191, %2167
  %2289 = add <8 x i16> %2288, %2215
  %2290 = add <8 x i16> %2289, %2239
  %2291 = add <8 x i16> %2290, %2263
  %2292 = add <8 x i16> %2194, %2170
  %2293 = add <8 x i16> %2292, %2218
  %2294 = add <8 x i16> %2293, %2242
  %2295 = add <8 x i16> %2294, %2266
  %2296 = add <8 x i16> %2197, %2173
  %2297 = add <8 x i16> %2296, %2221
  %2298 = add <8 x i16> %2297, %2245
  %2299 = add <8 x i16> %2298, %2269
  %2300 = add <8 x i16> %2200, %2176
  %2301 = add <8 x i16> %2300, %2224
  %2302 = add <8 x i16> %2301, %2248
  %2303 = add <8 x i16> %2302, %2272
  %2304 = add <8 x i16> %2203, %2179
  %2305 = add <8 x i16> %2304, %2227
  %2306 = add <8 x i16> %2305, %2251
  %2307 = add <8 x i16> %2306, %2275
  %2308 = shufflevector <8 x i16> %2307, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2309 = shufflevector <16 x i16> %2308, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %2310 = shufflevector <32 x i16> %2309, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %2311 = shufflevector <8 x i16> %2279, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2312 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2311, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2313 = shufflevector <8 x i16> %2279, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2314 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2313, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2315 = shufflevector <8 x i16> %2283, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2316 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2315, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2317 = shufflevector <8 x i16> %2283, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2318 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2317, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2319 = shufflevector <8 x i16> %2287, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2320 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2319, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2321 = shufflevector <8 x i16> %2287, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2322 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2321, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2323 = shufflevector <8 x i16> %2291, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2324 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2323, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2325 = shufflevector <8 x i16> %2291, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2326 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2325, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2327 = shufflevector <8 x i16> %2295, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2328 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2327, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2329 = shufflevector <8 x i16> %2295, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2330 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2329, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2331 = shufflevector <8 x i16> %2299, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2332 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2331, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2333 = shufflevector <8 x i16> %2299, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2334 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2333, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2335 = shufflevector <8 x i16> %2303, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2336 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2335, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2337 = shufflevector <8 x i16> %2303, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2338 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2337, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2339 = shufflevector <8 x i16> %2307, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2340 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2339, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2341 = shufflevector <64 x i16> %2310, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %2342 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2341, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2343 = shufflevector <4 x i32> %2312, <4 x i32> %2314, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2344 = shufflevector <4 x i32> %2316, <4 x i32> %2318, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2345 = shufflevector <4 x i32> %2320, <4 x i32> %2322, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2346 = shufflevector <4 x i32> %2324, <4 x i32> %2326, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2347 = shufflevector <4 x i32> %2328, <4 x i32> %2330, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2348 = shufflevector <4 x i32> %2332, <4 x i32> %2334, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2349 = shufflevector <4 x i32> %2336, <4 x i32> %2338, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2350 = shufflevector <4 x i32> %2340, <4 x i32> %2342, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2351 = shufflevector <8 x i32> %2343, <8 x i32> %2344, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2352 = shufflevector <8 x i32> %2345, <8 x i32> %2346, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2353 = shufflevector <8 x i32> %2347, <8 x i32> %2348, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2354 = shufflevector <8 x i32> %2349, <8 x i32> %2350, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2355 = shufflevector <16 x i32> %2351, <16 x i32> %2352, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2356 = shufflevector <16 x i32> %2353, <16 x i32> %2354, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2357 = shufflevector <32 x i32> %2355, <32 x i32> %2356, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2358 = lshr <64 x i32> %2357, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %2359 = trunc <64 x i32> %2358 to <64 x i16>
  %2360 = shufflevector <64 x i16> %2359, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2361 = sext i32 %blur_x.s0.x.v1.base.s1 to i64
  %2362 = add nsw i64 %2361, %2151
  %2363 = getelementptr inbounds i16, i16* %blur_x, i64 %2362
  %2364 = bitcast i16* %2363 to <8 x i16>*
  store <8 x i16> %2360, <8 x i16>* %2364, align 2, !tbaa !385
  %2365 = shufflevector <64 x i16> %2359, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2366 = getelementptr inbounds i16, i16* %2363, i64 8
  %2367 = bitcast i16* %2366 to <8 x i16>*
  store <8 x i16> %2365, <8 x i16>* %2367, align 2, !tbaa !385
  %2368 = shufflevector <64 x i16> %2359, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2369 = getelementptr inbounds i16, i16* %2363, i64 16
  %2370 = bitcast i16* %2369 to <8 x i16>*
  store <8 x i16> %2368, <8 x i16>* %2370, align 2, !tbaa !385
  %2371 = shufflevector <64 x i16> %2359, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2372 = getelementptr inbounds i16, i16* %2363, i64 24
  %2373 = bitcast i16* %2372 to <8 x i16>*
  store <8 x i16> %2371, <8 x i16>* %2373, align 2, !tbaa !385
  %2374 = shufflevector <64 x i16> %2359, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2375 = getelementptr inbounds i16, i16* %2363, i64 32
  %2376 = bitcast i16* %2375 to <8 x i16>*
  store <8 x i16> %2374, <8 x i16>* %2376, align 2, !tbaa !385
  %2377 = shufflevector <64 x i16> %2359, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2378 = getelementptr inbounds i16, i16* %2363, i64 40
  %2379 = bitcast i16* %2378 to <8 x i16>*
  store <8 x i16> %2377, <8 x i16>* %2379, align 2, !tbaa !385
  %2380 = shufflevector <64 x i16> %2359, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2381 = getelementptr inbounds i16, i16* %2363, i64 48
  %2382 = bitcast i16* %2381 to <8 x i16>*
  store <8 x i16> %2380, <8 x i16>* %2382, align 2, !tbaa !385
  %2383 = shufflevector <64 x i16> %2359, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2384 = getelementptr inbounds i16, i16* %2363, i64 56
  %2385 = bitcast i16* %2384 to <8 x i16>*
  store <8 x i16> %2383, <8 x i16>* %2385, align 2, !tbaa !385
  %2386 = add nuw nsw i32 %blur_x.s0.x.x.rebased, 1
  %.not151 = icmp eq i64 %indvars.iv.next178.phi, %75
  br i1 %.not151, label %"end for blur_x.s0.x.x.rebased", label %"for blur_x.s0.x.x.rebased.for blur_x.s0.x.x.rebased_crit_edge"

"for blur_x.s0.x.x.rebased.for blur_x.s0.x.x.rebased_crit_edge": ; preds = %"for blur_x.s0.x.x.rebased"
  %indvars.iv.next178.1 = add nuw nsw i64 %indvars.iv.next178.phi, 1
  br label %"for blur_x.s0.x.x.rebased"

"end for blur_x.s0.x.x.rebased":                  ; preds = %"for blur_x.s0.x.x.rebased", %"end for blur_x.s0.x.x"
  br i1 %67, label %"for blur_x.s0.x.x.rebased2.preheader", label %"end for blur_x.s0.x.x.rebased3", !prof !381

"for blur_x.s0.x.x.rebased2.preheader":           ; preds = %"end for blur_x.s0.x.x.rebased"
  %2387 = insertelement <64 x i32> undef, i32 %t241, i32 0
  %t201 = shufflevector <64 x i32> %2387, <64 x i32> undef, <64 x i32> zeroinitializer
  %2388 = sext i32 %t242 to i64
  br label %"for blur_x.s0.x.x.rebased2"

"for blur_x.s0.x.x.rebased2":                     ; preds = %"for blur_x.s0.x.x.rebased2.preheader", %"for blur_x.s0.x.x.rebased2"
  %blur_x.s0.x.x.rebased4 = phi i32 [ %4436, %"for blur_x.s0.x.x.rebased2" ], [ 0, %"for blur_x.s0.x.x.rebased2.preheader" ]
  %2389 = add nsw i32 %blur_x.s0.x.x.rebased4, %t214
  %2390 = shl nsw i32 %2389, 6
  %a4 = add nsw i32 %2390, %t215
  %2391 = icmp slt i32 %a4, %b11
  %blur_x.s0.x.v1.base.s5 = select i1 %2391, i32 %a4, i32 %b11
  %2392 = add nsw i32 %blur_x.s0.x.v1.base.s5, -63
  %2393 = insertelement <64 x i32> undef, i32 %2392, i32 0
  %2394 = shufflevector <64 x i32> %2393, <64 x i32> undef, <64 x i32> zeroinitializer
  %2395 = add nsw <64 x i32> %2394, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2396 = shufflevector <64 x i32> %2395, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2397 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2396, <4 x i32> %62)
  %2398 = shufflevector <64 x i32> %2395, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2399 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2398, <4 x i32> %62)
  %2400 = shufflevector <64 x i32> %2395, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2401 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2400, <4 x i32> %62)
  %2402 = shufflevector <64 x i32> %2395, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2403 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2402, <4 x i32> %62)
  %2404 = shufflevector <64 x i32> %2395, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %2405 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2404, <4 x i32> %62)
  %2406 = shufflevector <64 x i32> %2395, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %2407 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2406, <4 x i32> %62)
  %2408 = shufflevector <64 x i32> %2395, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %2409 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2408, <4 x i32> %62)
  %2410 = shufflevector <64 x i32> %2395, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %2411 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2410, <4 x i32> %62)
  %2412 = shufflevector <64 x i32> %2395, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %2413 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2412, <4 x i32> %62)
  %2414 = shufflevector <64 x i32> %2395, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %2415 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2414, <4 x i32> %62)
  %2416 = shufflevector <64 x i32> %2395, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %2417 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2416, <4 x i32> %62)
  %2418 = shufflevector <64 x i32> %2395, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %2419 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2418, <4 x i32> %62)
  %2420 = shufflevector <64 x i32> %2395, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %2421 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2420, <4 x i32> %62)
  %2422 = shufflevector <64 x i32> %2395, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %2423 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2422, <4 x i32> %62)
  %2424 = shufflevector <64 x i32> %2395, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %2425 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2424, <4 x i32> %62)
  %2426 = shufflevector <64 x i32> %2395, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %2427 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2426, <4 x i32> %62)
  %2428 = shufflevector <4 x i32> %2427, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %2429 = shufflevector <8 x i32> %2428, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2430 = shufflevector <16 x i32> %2429, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %2431 = shufflevector <32 x i32> %2430, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %2432 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2397, <4 x i32> %64)
  %2433 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2399, <4 x i32> %64)
  %2434 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2401, <4 x i32> %64)
  %2435 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2403, <4 x i32> %64)
  %2436 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2405, <4 x i32> %64)
  %2437 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2407, <4 x i32> %64)
  %2438 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2409, <4 x i32> %64)
  %2439 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2411, <4 x i32> %64)
  %2440 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2413, <4 x i32> %64)
  %2441 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2415, <4 x i32> %64)
  %2442 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2417, <4 x i32> %64)
  %2443 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2419, <4 x i32> %64)
  %2444 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2421, <4 x i32> %64)
  %2445 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2423, <4 x i32> %64)
  %2446 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2425, <4 x i32> %64)
  %2447 = shufflevector <64 x i32> %2431, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %2448 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2447, <4 x i32> %64)
  %2449 = shufflevector <4 x i32> %2432, <4 x i32> %2433, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2450 = shufflevector <4 x i32> %2434, <4 x i32> %2435, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2451 = shufflevector <4 x i32> %2436, <4 x i32> %2437, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2452 = shufflevector <4 x i32> %2438, <4 x i32> %2439, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2453 = shufflevector <4 x i32> %2440, <4 x i32> %2441, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2454 = shufflevector <4 x i32> %2442, <4 x i32> %2443, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2455 = shufflevector <4 x i32> %2444, <4 x i32> %2445, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2456 = shufflevector <4 x i32> %2446, <4 x i32> %2448, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2457 = shufflevector <8 x i32> %2449, <8 x i32> %2450, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2458 = shufflevector <8 x i32> %2451, <8 x i32> %2452, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2459 = shufflevector <8 x i32> %2453, <8 x i32> %2454, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2460 = shufflevector <8 x i32> %2455, <8 x i32> %2456, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2461 = shufflevector <16 x i32> %2457, <16 x i32> %2458, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2462 = shufflevector <16 x i32> %2459, <16 x i32> %2460, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2463 = shufflevector <32 x i32> %2461, <32 x i32> %2462, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2464 = add nsw <64 x i32> %2463, %t201
  %2465 = extractelement <64 x i32> %2464, i32 0
  %2466 = sext i32 %2465 to i64
  %2467 = getelementptr inbounds i16, i16* %65, i64 %2466
  %2468 = load i16, i16* %2467, align 2, !tbaa !382
  %2469 = insertelement <64 x i16> undef, i16 %2468, i32 0
  %2470 = extractelement <64 x i32> %2464, i32 1
  %2471 = sext i32 %2470 to i64
  %2472 = getelementptr inbounds i16, i16* %65, i64 %2471
  %2473 = load i16, i16* %2472, align 2, !tbaa !382
  %2474 = insertelement <64 x i16> %2469, i16 %2473, i32 1
  %2475 = extractelement <64 x i32> %2464, i32 2
  %2476 = sext i32 %2475 to i64
  %2477 = getelementptr inbounds i16, i16* %65, i64 %2476
  %2478 = load i16, i16* %2477, align 2, !tbaa !382
  %2479 = insertelement <64 x i16> %2474, i16 %2478, i32 2
  %2480 = extractelement <64 x i32> %2464, i32 3
  %2481 = sext i32 %2480 to i64
  %2482 = getelementptr inbounds i16, i16* %65, i64 %2481
  %2483 = load i16, i16* %2482, align 2, !tbaa !382
  %2484 = insertelement <64 x i16> %2479, i16 %2483, i32 3
  %2485 = extractelement <64 x i32> %2464, i32 4
  %2486 = sext i32 %2485 to i64
  %2487 = getelementptr inbounds i16, i16* %65, i64 %2486
  %2488 = load i16, i16* %2487, align 2, !tbaa !382
  %2489 = insertelement <64 x i16> %2484, i16 %2488, i32 4
  %2490 = extractelement <64 x i32> %2464, i32 5
  %2491 = sext i32 %2490 to i64
  %2492 = getelementptr inbounds i16, i16* %65, i64 %2491
  %2493 = load i16, i16* %2492, align 2, !tbaa !382
  %2494 = insertelement <64 x i16> %2489, i16 %2493, i32 5
  %2495 = extractelement <64 x i32> %2464, i32 6
  %2496 = sext i32 %2495 to i64
  %2497 = getelementptr inbounds i16, i16* %65, i64 %2496
  %2498 = load i16, i16* %2497, align 2, !tbaa !382
  %2499 = insertelement <64 x i16> %2494, i16 %2498, i32 6
  %2500 = extractelement <64 x i32> %2464, i32 7
  %2501 = sext i32 %2500 to i64
  %2502 = getelementptr inbounds i16, i16* %65, i64 %2501
  %2503 = load i16, i16* %2502, align 2, !tbaa !382
  %2504 = insertelement <64 x i16> %2499, i16 %2503, i32 7
  %2505 = extractelement <64 x i32> %2464, i32 8
  %2506 = sext i32 %2505 to i64
  %2507 = getelementptr inbounds i16, i16* %65, i64 %2506
  %2508 = load i16, i16* %2507, align 2, !tbaa !382
  %2509 = insertelement <64 x i16> %2504, i16 %2508, i32 8
  %2510 = extractelement <64 x i32> %2464, i32 9
  %2511 = sext i32 %2510 to i64
  %2512 = getelementptr inbounds i16, i16* %65, i64 %2511
  %2513 = load i16, i16* %2512, align 2, !tbaa !382
  %2514 = insertelement <64 x i16> %2509, i16 %2513, i32 9
  %2515 = extractelement <64 x i32> %2464, i32 10
  %2516 = sext i32 %2515 to i64
  %2517 = getelementptr inbounds i16, i16* %65, i64 %2516
  %2518 = load i16, i16* %2517, align 2, !tbaa !382
  %2519 = insertelement <64 x i16> %2514, i16 %2518, i32 10
  %2520 = extractelement <64 x i32> %2464, i32 11
  %2521 = sext i32 %2520 to i64
  %2522 = getelementptr inbounds i16, i16* %65, i64 %2521
  %2523 = load i16, i16* %2522, align 2, !tbaa !382
  %2524 = insertelement <64 x i16> %2519, i16 %2523, i32 11
  %2525 = extractelement <64 x i32> %2464, i32 12
  %2526 = sext i32 %2525 to i64
  %2527 = getelementptr inbounds i16, i16* %65, i64 %2526
  %2528 = load i16, i16* %2527, align 2, !tbaa !382
  %2529 = insertelement <64 x i16> %2524, i16 %2528, i32 12
  %2530 = extractelement <64 x i32> %2464, i32 13
  %2531 = sext i32 %2530 to i64
  %2532 = getelementptr inbounds i16, i16* %65, i64 %2531
  %2533 = load i16, i16* %2532, align 2, !tbaa !382
  %2534 = insertelement <64 x i16> %2529, i16 %2533, i32 13
  %2535 = extractelement <64 x i32> %2464, i32 14
  %2536 = sext i32 %2535 to i64
  %2537 = getelementptr inbounds i16, i16* %65, i64 %2536
  %2538 = load i16, i16* %2537, align 2, !tbaa !382
  %2539 = insertelement <64 x i16> %2534, i16 %2538, i32 14
  %2540 = extractelement <64 x i32> %2464, i32 15
  %2541 = sext i32 %2540 to i64
  %2542 = getelementptr inbounds i16, i16* %65, i64 %2541
  %2543 = load i16, i16* %2542, align 2, !tbaa !382
  %2544 = insertelement <64 x i16> %2539, i16 %2543, i32 15
  %2545 = extractelement <64 x i32> %2464, i32 16
  %2546 = sext i32 %2545 to i64
  %2547 = getelementptr inbounds i16, i16* %65, i64 %2546
  %2548 = load i16, i16* %2547, align 2, !tbaa !382
  %2549 = insertelement <64 x i16> %2544, i16 %2548, i32 16
  %2550 = extractelement <64 x i32> %2464, i32 17
  %2551 = sext i32 %2550 to i64
  %2552 = getelementptr inbounds i16, i16* %65, i64 %2551
  %2553 = load i16, i16* %2552, align 2, !tbaa !382
  %2554 = insertelement <64 x i16> %2549, i16 %2553, i32 17
  %2555 = extractelement <64 x i32> %2464, i32 18
  %2556 = sext i32 %2555 to i64
  %2557 = getelementptr inbounds i16, i16* %65, i64 %2556
  %2558 = load i16, i16* %2557, align 2, !tbaa !382
  %2559 = insertelement <64 x i16> %2554, i16 %2558, i32 18
  %2560 = extractelement <64 x i32> %2464, i32 19
  %2561 = sext i32 %2560 to i64
  %2562 = getelementptr inbounds i16, i16* %65, i64 %2561
  %2563 = load i16, i16* %2562, align 2, !tbaa !382
  %2564 = insertelement <64 x i16> %2559, i16 %2563, i32 19
  %2565 = extractelement <64 x i32> %2464, i32 20
  %2566 = sext i32 %2565 to i64
  %2567 = getelementptr inbounds i16, i16* %65, i64 %2566
  %2568 = load i16, i16* %2567, align 2, !tbaa !382
  %2569 = insertelement <64 x i16> %2564, i16 %2568, i32 20
  %2570 = extractelement <64 x i32> %2464, i32 21
  %2571 = sext i32 %2570 to i64
  %2572 = getelementptr inbounds i16, i16* %65, i64 %2571
  %2573 = load i16, i16* %2572, align 2, !tbaa !382
  %2574 = insertelement <64 x i16> %2569, i16 %2573, i32 21
  %2575 = extractelement <64 x i32> %2464, i32 22
  %2576 = sext i32 %2575 to i64
  %2577 = getelementptr inbounds i16, i16* %65, i64 %2576
  %2578 = load i16, i16* %2577, align 2, !tbaa !382
  %2579 = insertelement <64 x i16> %2574, i16 %2578, i32 22
  %2580 = extractelement <64 x i32> %2464, i32 23
  %2581 = sext i32 %2580 to i64
  %2582 = getelementptr inbounds i16, i16* %65, i64 %2581
  %2583 = load i16, i16* %2582, align 2, !tbaa !382
  %2584 = insertelement <64 x i16> %2579, i16 %2583, i32 23
  %2585 = extractelement <64 x i32> %2464, i32 24
  %2586 = sext i32 %2585 to i64
  %2587 = getelementptr inbounds i16, i16* %65, i64 %2586
  %2588 = load i16, i16* %2587, align 2, !tbaa !382
  %2589 = insertelement <64 x i16> %2584, i16 %2588, i32 24
  %2590 = extractelement <64 x i32> %2464, i32 25
  %2591 = sext i32 %2590 to i64
  %2592 = getelementptr inbounds i16, i16* %65, i64 %2591
  %2593 = load i16, i16* %2592, align 2, !tbaa !382
  %2594 = insertelement <64 x i16> %2589, i16 %2593, i32 25
  %2595 = extractelement <64 x i32> %2464, i32 26
  %2596 = sext i32 %2595 to i64
  %2597 = getelementptr inbounds i16, i16* %65, i64 %2596
  %2598 = load i16, i16* %2597, align 2, !tbaa !382
  %2599 = insertelement <64 x i16> %2594, i16 %2598, i32 26
  %2600 = extractelement <64 x i32> %2464, i32 27
  %2601 = sext i32 %2600 to i64
  %2602 = getelementptr inbounds i16, i16* %65, i64 %2601
  %2603 = load i16, i16* %2602, align 2, !tbaa !382
  %2604 = insertelement <64 x i16> %2599, i16 %2603, i32 27
  %2605 = extractelement <64 x i32> %2464, i32 28
  %2606 = sext i32 %2605 to i64
  %2607 = getelementptr inbounds i16, i16* %65, i64 %2606
  %2608 = load i16, i16* %2607, align 2, !tbaa !382
  %2609 = insertelement <64 x i16> %2604, i16 %2608, i32 28
  %2610 = extractelement <64 x i32> %2464, i32 29
  %2611 = sext i32 %2610 to i64
  %2612 = getelementptr inbounds i16, i16* %65, i64 %2611
  %2613 = load i16, i16* %2612, align 2, !tbaa !382
  %2614 = insertelement <64 x i16> %2609, i16 %2613, i32 29
  %2615 = extractelement <64 x i32> %2464, i32 30
  %2616 = sext i32 %2615 to i64
  %2617 = getelementptr inbounds i16, i16* %65, i64 %2616
  %2618 = load i16, i16* %2617, align 2, !tbaa !382
  %2619 = insertelement <64 x i16> %2614, i16 %2618, i32 30
  %2620 = extractelement <64 x i32> %2464, i32 31
  %2621 = sext i32 %2620 to i64
  %2622 = getelementptr inbounds i16, i16* %65, i64 %2621
  %2623 = load i16, i16* %2622, align 2, !tbaa !382
  %2624 = insertelement <64 x i16> %2619, i16 %2623, i32 31
  %2625 = extractelement <64 x i32> %2464, i32 32
  %2626 = sext i32 %2625 to i64
  %2627 = getelementptr inbounds i16, i16* %65, i64 %2626
  %2628 = load i16, i16* %2627, align 2, !tbaa !382
  %2629 = insertelement <64 x i16> %2624, i16 %2628, i32 32
  %2630 = extractelement <64 x i32> %2464, i32 33
  %2631 = sext i32 %2630 to i64
  %2632 = getelementptr inbounds i16, i16* %65, i64 %2631
  %2633 = load i16, i16* %2632, align 2, !tbaa !382
  %2634 = insertelement <64 x i16> %2629, i16 %2633, i32 33
  %2635 = extractelement <64 x i32> %2464, i32 34
  %2636 = sext i32 %2635 to i64
  %2637 = getelementptr inbounds i16, i16* %65, i64 %2636
  %2638 = load i16, i16* %2637, align 2, !tbaa !382
  %2639 = insertelement <64 x i16> %2634, i16 %2638, i32 34
  %2640 = extractelement <64 x i32> %2464, i32 35
  %2641 = sext i32 %2640 to i64
  %2642 = getelementptr inbounds i16, i16* %65, i64 %2641
  %2643 = load i16, i16* %2642, align 2, !tbaa !382
  %2644 = insertelement <64 x i16> %2639, i16 %2643, i32 35
  %2645 = extractelement <64 x i32> %2464, i32 36
  %2646 = sext i32 %2645 to i64
  %2647 = getelementptr inbounds i16, i16* %65, i64 %2646
  %2648 = load i16, i16* %2647, align 2, !tbaa !382
  %2649 = insertelement <64 x i16> %2644, i16 %2648, i32 36
  %2650 = extractelement <64 x i32> %2464, i32 37
  %2651 = sext i32 %2650 to i64
  %2652 = getelementptr inbounds i16, i16* %65, i64 %2651
  %2653 = load i16, i16* %2652, align 2, !tbaa !382
  %2654 = insertelement <64 x i16> %2649, i16 %2653, i32 37
  %2655 = extractelement <64 x i32> %2464, i32 38
  %2656 = sext i32 %2655 to i64
  %2657 = getelementptr inbounds i16, i16* %65, i64 %2656
  %2658 = load i16, i16* %2657, align 2, !tbaa !382
  %2659 = insertelement <64 x i16> %2654, i16 %2658, i32 38
  %2660 = extractelement <64 x i32> %2464, i32 39
  %2661 = sext i32 %2660 to i64
  %2662 = getelementptr inbounds i16, i16* %65, i64 %2661
  %2663 = load i16, i16* %2662, align 2, !tbaa !382
  %2664 = insertelement <64 x i16> %2659, i16 %2663, i32 39
  %2665 = extractelement <64 x i32> %2464, i32 40
  %2666 = sext i32 %2665 to i64
  %2667 = getelementptr inbounds i16, i16* %65, i64 %2666
  %2668 = load i16, i16* %2667, align 2, !tbaa !382
  %2669 = insertelement <64 x i16> %2664, i16 %2668, i32 40
  %2670 = extractelement <64 x i32> %2464, i32 41
  %2671 = sext i32 %2670 to i64
  %2672 = getelementptr inbounds i16, i16* %65, i64 %2671
  %2673 = load i16, i16* %2672, align 2, !tbaa !382
  %2674 = insertelement <64 x i16> %2669, i16 %2673, i32 41
  %2675 = extractelement <64 x i32> %2464, i32 42
  %2676 = sext i32 %2675 to i64
  %2677 = getelementptr inbounds i16, i16* %65, i64 %2676
  %2678 = load i16, i16* %2677, align 2, !tbaa !382
  %2679 = insertelement <64 x i16> %2674, i16 %2678, i32 42
  %2680 = extractelement <64 x i32> %2464, i32 43
  %2681 = sext i32 %2680 to i64
  %2682 = getelementptr inbounds i16, i16* %65, i64 %2681
  %2683 = load i16, i16* %2682, align 2, !tbaa !382
  %2684 = insertelement <64 x i16> %2679, i16 %2683, i32 43
  %2685 = extractelement <64 x i32> %2464, i32 44
  %2686 = sext i32 %2685 to i64
  %2687 = getelementptr inbounds i16, i16* %65, i64 %2686
  %2688 = load i16, i16* %2687, align 2, !tbaa !382
  %2689 = insertelement <64 x i16> %2684, i16 %2688, i32 44
  %2690 = extractelement <64 x i32> %2464, i32 45
  %2691 = sext i32 %2690 to i64
  %2692 = getelementptr inbounds i16, i16* %65, i64 %2691
  %2693 = load i16, i16* %2692, align 2, !tbaa !382
  %2694 = insertelement <64 x i16> %2689, i16 %2693, i32 45
  %2695 = extractelement <64 x i32> %2464, i32 46
  %2696 = sext i32 %2695 to i64
  %2697 = getelementptr inbounds i16, i16* %65, i64 %2696
  %2698 = load i16, i16* %2697, align 2, !tbaa !382
  %2699 = insertelement <64 x i16> %2694, i16 %2698, i32 46
  %2700 = extractelement <64 x i32> %2464, i32 47
  %2701 = sext i32 %2700 to i64
  %2702 = getelementptr inbounds i16, i16* %65, i64 %2701
  %2703 = load i16, i16* %2702, align 2, !tbaa !382
  %2704 = insertelement <64 x i16> %2699, i16 %2703, i32 47
  %2705 = extractelement <64 x i32> %2464, i32 48
  %2706 = sext i32 %2705 to i64
  %2707 = getelementptr inbounds i16, i16* %65, i64 %2706
  %2708 = load i16, i16* %2707, align 2, !tbaa !382
  %2709 = insertelement <64 x i16> %2704, i16 %2708, i32 48
  %2710 = extractelement <64 x i32> %2464, i32 49
  %2711 = sext i32 %2710 to i64
  %2712 = getelementptr inbounds i16, i16* %65, i64 %2711
  %2713 = load i16, i16* %2712, align 2, !tbaa !382
  %2714 = insertelement <64 x i16> %2709, i16 %2713, i32 49
  %2715 = extractelement <64 x i32> %2464, i32 50
  %2716 = sext i32 %2715 to i64
  %2717 = getelementptr inbounds i16, i16* %65, i64 %2716
  %2718 = load i16, i16* %2717, align 2, !tbaa !382
  %2719 = insertelement <64 x i16> %2714, i16 %2718, i32 50
  %2720 = extractelement <64 x i32> %2464, i32 51
  %2721 = sext i32 %2720 to i64
  %2722 = getelementptr inbounds i16, i16* %65, i64 %2721
  %2723 = load i16, i16* %2722, align 2, !tbaa !382
  %2724 = insertelement <64 x i16> %2719, i16 %2723, i32 51
  %2725 = extractelement <64 x i32> %2464, i32 52
  %2726 = sext i32 %2725 to i64
  %2727 = getelementptr inbounds i16, i16* %65, i64 %2726
  %2728 = load i16, i16* %2727, align 2, !tbaa !382
  %2729 = insertelement <64 x i16> %2724, i16 %2728, i32 52
  %2730 = extractelement <64 x i32> %2464, i32 53
  %2731 = sext i32 %2730 to i64
  %2732 = getelementptr inbounds i16, i16* %65, i64 %2731
  %2733 = load i16, i16* %2732, align 2, !tbaa !382
  %2734 = insertelement <64 x i16> %2729, i16 %2733, i32 53
  %2735 = extractelement <64 x i32> %2464, i32 54
  %2736 = sext i32 %2735 to i64
  %2737 = getelementptr inbounds i16, i16* %65, i64 %2736
  %2738 = load i16, i16* %2737, align 2, !tbaa !382
  %2739 = insertelement <64 x i16> %2734, i16 %2738, i32 54
  %2740 = extractelement <64 x i32> %2464, i32 55
  %2741 = sext i32 %2740 to i64
  %2742 = getelementptr inbounds i16, i16* %65, i64 %2741
  %2743 = load i16, i16* %2742, align 2, !tbaa !382
  %2744 = insertelement <64 x i16> %2739, i16 %2743, i32 55
  %2745 = extractelement <64 x i32> %2464, i32 56
  %2746 = sext i32 %2745 to i64
  %2747 = getelementptr inbounds i16, i16* %65, i64 %2746
  %2748 = load i16, i16* %2747, align 2, !tbaa !382
  %2749 = insertelement <64 x i16> %2744, i16 %2748, i32 56
  %2750 = extractelement <64 x i32> %2464, i32 57
  %2751 = sext i32 %2750 to i64
  %2752 = getelementptr inbounds i16, i16* %65, i64 %2751
  %2753 = load i16, i16* %2752, align 2, !tbaa !382
  %2754 = insertelement <64 x i16> %2749, i16 %2753, i32 57
  %2755 = extractelement <64 x i32> %2464, i32 58
  %2756 = sext i32 %2755 to i64
  %2757 = getelementptr inbounds i16, i16* %65, i64 %2756
  %2758 = load i16, i16* %2757, align 2, !tbaa !382
  %2759 = insertelement <64 x i16> %2754, i16 %2758, i32 58
  %2760 = extractelement <64 x i32> %2464, i32 59
  %2761 = sext i32 %2760 to i64
  %2762 = getelementptr inbounds i16, i16* %65, i64 %2761
  %2763 = load i16, i16* %2762, align 2, !tbaa !382
  %2764 = insertelement <64 x i16> %2759, i16 %2763, i32 59
  %2765 = extractelement <64 x i32> %2464, i32 60
  %2766 = sext i32 %2765 to i64
  %2767 = getelementptr inbounds i16, i16* %65, i64 %2766
  %2768 = load i16, i16* %2767, align 2, !tbaa !382
  %2769 = insertelement <64 x i16> %2764, i16 %2768, i32 60
  %2770 = extractelement <64 x i32> %2464, i32 61
  %2771 = sext i32 %2770 to i64
  %2772 = getelementptr inbounds i16, i16* %65, i64 %2771
  %2773 = load i16, i16* %2772, align 2, !tbaa !382
  %2774 = insertelement <64 x i16> %2769, i16 %2773, i32 61
  %2775 = extractelement <64 x i32> %2464, i32 62
  %2776 = sext i32 %2775 to i64
  %2777 = getelementptr inbounds i16, i16* %65, i64 %2776
  %2778 = load i16, i16* %2777, align 2, !tbaa !382
  %2779 = insertelement <64 x i16> %2774, i16 %2778, i32 62
  %2780 = extractelement <64 x i32> %2464, i32 63
  %2781 = sext i32 %2780 to i64
  %2782 = getelementptr inbounds i16, i16* %65, i64 %2781
  %2783 = load i16, i16* %2782, align 2, !tbaa !382
  %2784 = insertelement <64 x i16> %2779, i16 %2783, i32 63
  %2785 = add nsw i32 %blur_x.s0.x.v1.base.s5, -64
  %2786 = insertelement <64 x i32> undef, i32 %2785, i32 0
  %2787 = shufflevector <64 x i32> %2786, <64 x i32> undef, <64 x i32> zeroinitializer
  %2788 = add nsw <64 x i32> %2787, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2789 = shufflevector <64 x i32> %2788, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2790 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2789, <4 x i32> %62)
  %2791 = shufflevector <64 x i32> %2788, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2792 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2791, <4 x i32> %62)
  %2793 = shufflevector <64 x i32> %2788, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2794 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2793, <4 x i32> %62)
  %2795 = shufflevector <64 x i32> %2788, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2796 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2795, <4 x i32> %62)
  %2797 = shufflevector <64 x i32> %2788, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %2798 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2797, <4 x i32> %62)
  %2799 = shufflevector <64 x i32> %2788, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %2800 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2799, <4 x i32> %62)
  %2801 = shufflevector <64 x i32> %2788, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %2802 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2801, <4 x i32> %62)
  %2803 = shufflevector <64 x i32> %2788, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %2804 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2803, <4 x i32> %62)
  %2805 = shufflevector <64 x i32> %2788, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %2806 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2805, <4 x i32> %62)
  %2807 = shufflevector <64 x i32> %2788, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %2808 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2807, <4 x i32> %62)
  %2809 = shufflevector <64 x i32> %2788, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %2810 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2809, <4 x i32> %62)
  %2811 = shufflevector <64 x i32> %2788, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %2812 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2811, <4 x i32> %62)
  %2813 = shufflevector <64 x i32> %2788, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %2814 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2813, <4 x i32> %62)
  %2815 = shufflevector <64 x i32> %2788, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %2816 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2815, <4 x i32> %62)
  %2817 = shufflevector <64 x i32> %2788, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %2818 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2817, <4 x i32> %62)
  %2819 = shufflevector <64 x i32> %2788, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %2820 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2819, <4 x i32> %62)
  %2821 = shufflevector <4 x i32> %2820, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %2822 = shufflevector <8 x i32> %2821, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2823 = shufflevector <16 x i32> %2822, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %2824 = shufflevector <32 x i32> %2823, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %2825 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2790, <4 x i32> %64)
  %2826 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2792, <4 x i32> %64)
  %2827 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2794, <4 x i32> %64)
  %2828 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2796, <4 x i32> %64)
  %2829 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2798, <4 x i32> %64)
  %2830 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2800, <4 x i32> %64)
  %2831 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2802, <4 x i32> %64)
  %2832 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2804, <4 x i32> %64)
  %2833 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2806, <4 x i32> %64)
  %2834 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2808, <4 x i32> %64)
  %2835 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2810, <4 x i32> %64)
  %2836 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2812, <4 x i32> %64)
  %2837 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2814, <4 x i32> %64)
  %2838 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2816, <4 x i32> %64)
  %2839 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2818, <4 x i32> %64)
  %2840 = shufflevector <64 x i32> %2824, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %2841 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2840, <4 x i32> %64)
  %2842 = shufflevector <4 x i32> %2825, <4 x i32> %2826, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2843 = shufflevector <4 x i32> %2827, <4 x i32> %2828, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2844 = shufflevector <4 x i32> %2829, <4 x i32> %2830, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2845 = shufflevector <4 x i32> %2831, <4 x i32> %2832, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2846 = shufflevector <4 x i32> %2833, <4 x i32> %2834, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2847 = shufflevector <4 x i32> %2835, <4 x i32> %2836, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2848 = shufflevector <4 x i32> %2837, <4 x i32> %2838, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2849 = shufflevector <4 x i32> %2839, <4 x i32> %2841, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2850 = shufflevector <8 x i32> %2842, <8 x i32> %2843, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2851 = shufflevector <8 x i32> %2844, <8 x i32> %2845, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2852 = shufflevector <8 x i32> %2846, <8 x i32> %2847, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2853 = shufflevector <8 x i32> %2848, <8 x i32> %2849, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2854 = shufflevector <16 x i32> %2850, <16 x i32> %2851, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2855 = shufflevector <16 x i32> %2852, <16 x i32> %2853, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2856 = shufflevector <32 x i32> %2854, <32 x i32> %2855, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2857 = add nsw <64 x i32> %2856, %t201
  %2858 = extractelement <64 x i32> %2857, i32 0
  %2859 = sext i32 %2858 to i64
  %2860 = getelementptr inbounds i16, i16* %65, i64 %2859
  %2861 = load i16, i16* %2860, align 2, !tbaa !382
  %2862 = insertelement <64 x i16> undef, i16 %2861, i32 0
  %2863 = extractelement <64 x i32> %2857, i32 1
  %2864 = sext i32 %2863 to i64
  %2865 = getelementptr inbounds i16, i16* %65, i64 %2864
  %2866 = load i16, i16* %2865, align 2, !tbaa !382
  %2867 = insertelement <64 x i16> %2862, i16 %2866, i32 1
  %2868 = extractelement <64 x i32> %2857, i32 2
  %2869 = sext i32 %2868 to i64
  %2870 = getelementptr inbounds i16, i16* %65, i64 %2869
  %2871 = load i16, i16* %2870, align 2, !tbaa !382
  %2872 = insertelement <64 x i16> %2867, i16 %2871, i32 2
  %2873 = extractelement <64 x i32> %2857, i32 3
  %2874 = sext i32 %2873 to i64
  %2875 = getelementptr inbounds i16, i16* %65, i64 %2874
  %2876 = load i16, i16* %2875, align 2, !tbaa !382
  %2877 = insertelement <64 x i16> %2872, i16 %2876, i32 3
  %2878 = extractelement <64 x i32> %2857, i32 4
  %2879 = sext i32 %2878 to i64
  %2880 = getelementptr inbounds i16, i16* %65, i64 %2879
  %2881 = load i16, i16* %2880, align 2, !tbaa !382
  %2882 = insertelement <64 x i16> %2877, i16 %2881, i32 4
  %2883 = extractelement <64 x i32> %2857, i32 5
  %2884 = sext i32 %2883 to i64
  %2885 = getelementptr inbounds i16, i16* %65, i64 %2884
  %2886 = load i16, i16* %2885, align 2, !tbaa !382
  %2887 = insertelement <64 x i16> %2882, i16 %2886, i32 5
  %2888 = extractelement <64 x i32> %2857, i32 6
  %2889 = sext i32 %2888 to i64
  %2890 = getelementptr inbounds i16, i16* %65, i64 %2889
  %2891 = load i16, i16* %2890, align 2, !tbaa !382
  %2892 = insertelement <64 x i16> %2887, i16 %2891, i32 6
  %2893 = extractelement <64 x i32> %2857, i32 7
  %2894 = sext i32 %2893 to i64
  %2895 = getelementptr inbounds i16, i16* %65, i64 %2894
  %2896 = load i16, i16* %2895, align 2, !tbaa !382
  %2897 = insertelement <64 x i16> %2892, i16 %2896, i32 7
  %2898 = extractelement <64 x i32> %2857, i32 8
  %2899 = sext i32 %2898 to i64
  %2900 = getelementptr inbounds i16, i16* %65, i64 %2899
  %2901 = load i16, i16* %2900, align 2, !tbaa !382
  %2902 = insertelement <64 x i16> %2897, i16 %2901, i32 8
  %2903 = extractelement <64 x i32> %2857, i32 9
  %2904 = sext i32 %2903 to i64
  %2905 = getelementptr inbounds i16, i16* %65, i64 %2904
  %2906 = load i16, i16* %2905, align 2, !tbaa !382
  %2907 = insertelement <64 x i16> %2902, i16 %2906, i32 9
  %2908 = extractelement <64 x i32> %2857, i32 10
  %2909 = sext i32 %2908 to i64
  %2910 = getelementptr inbounds i16, i16* %65, i64 %2909
  %2911 = load i16, i16* %2910, align 2, !tbaa !382
  %2912 = insertelement <64 x i16> %2907, i16 %2911, i32 10
  %2913 = extractelement <64 x i32> %2857, i32 11
  %2914 = sext i32 %2913 to i64
  %2915 = getelementptr inbounds i16, i16* %65, i64 %2914
  %2916 = load i16, i16* %2915, align 2, !tbaa !382
  %2917 = insertelement <64 x i16> %2912, i16 %2916, i32 11
  %2918 = extractelement <64 x i32> %2857, i32 12
  %2919 = sext i32 %2918 to i64
  %2920 = getelementptr inbounds i16, i16* %65, i64 %2919
  %2921 = load i16, i16* %2920, align 2, !tbaa !382
  %2922 = insertelement <64 x i16> %2917, i16 %2921, i32 12
  %2923 = extractelement <64 x i32> %2857, i32 13
  %2924 = sext i32 %2923 to i64
  %2925 = getelementptr inbounds i16, i16* %65, i64 %2924
  %2926 = load i16, i16* %2925, align 2, !tbaa !382
  %2927 = insertelement <64 x i16> %2922, i16 %2926, i32 13
  %2928 = extractelement <64 x i32> %2857, i32 14
  %2929 = sext i32 %2928 to i64
  %2930 = getelementptr inbounds i16, i16* %65, i64 %2929
  %2931 = load i16, i16* %2930, align 2, !tbaa !382
  %2932 = insertelement <64 x i16> %2927, i16 %2931, i32 14
  %2933 = extractelement <64 x i32> %2857, i32 15
  %2934 = sext i32 %2933 to i64
  %2935 = getelementptr inbounds i16, i16* %65, i64 %2934
  %2936 = load i16, i16* %2935, align 2, !tbaa !382
  %2937 = insertelement <64 x i16> %2932, i16 %2936, i32 15
  %2938 = extractelement <64 x i32> %2857, i32 16
  %2939 = sext i32 %2938 to i64
  %2940 = getelementptr inbounds i16, i16* %65, i64 %2939
  %2941 = load i16, i16* %2940, align 2, !tbaa !382
  %2942 = insertelement <64 x i16> %2937, i16 %2941, i32 16
  %2943 = extractelement <64 x i32> %2857, i32 17
  %2944 = sext i32 %2943 to i64
  %2945 = getelementptr inbounds i16, i16* %65, i64 %2944
  %2946 = load i16, i16* %2945, align 2, !tbaa !382
  %2947 = insertelement <64 x i16> %2942, i16 %2946, i32 17
  %2948 = extractelement <64 x i32> %2857, i32 18
  %2949 = sext i32 %2948 to i64
  %2950 = getelementptr inbounds i16, i16* %65, i64 %2949
  %2951 = load i16, i16* %2950, align 2, !tbaa !382
  %2952 = insertelement <64 x i16> %2947, i16 %2951, i32 18
  %2953 = extractelement <64 x i32> %2857, i32 19
  %2954 = sext i32 %2953 to i64
  %2955 = getelementptr inbounds i16, i16* %65, i64 %2954
  %2956 = load i16, i16* %2955, align 2, !tbaa !382
  %2957 = insertelement <64 x i16> %2952, i16 %2956, i32 19
  %2958 = extractelement <64 x i32> %2857, i32 20
  %2959 = sext i32 %2958 to i64
  %2960 = getelementptr inbounds i16, i16* %65, i64 %2959
  %2961 = load i16, i16* %2960, align 2, !tbaa !382
  %2962 = insertelement <64 x i16> %2957, i16 %2961, i32 20
  %2963 = extractelement <64 x i32> %2857, i32 21
  %2964 = sext i32 %2963 to i64
  %2965 = getelementptr inbounds i16, i16* %65, i64 %2964
  %2966 = load i16, i16* %2965, align 2, !tbaa !382
  %2967 = insertelement <64 x i16> %2962, i16 %2966, i32 21
  %2968 = extractelement <64 x i32> %2857, i32 22
  %2969 = sext i32 %2968 to i64
  %2970 = getelementptr inbounds i16, i16* %65, i64 %2969
  %2971 = load i16, i16* %2970, align 2, !tbaa !382
  %2972 = insertelement <64 x i16> %2967, i16 %2971, i32 22
  %2973 = extractelement <64 x i32> %2857, i32 23
  %2974 = sext i32 %2973 to i64
  %2975 = getelementptr inbounds i16, i16* %65, i64 %2974
  %2976 = load i16, i16* %2975, align 2, !tbaa !382
  %2977 = insertelement <64 x i16> %2972, i16 %2976, i32 23
  %2978 = extractelement <64 x i32> %2857, i32 24
  %2979 = sext i32 %2978 to i64
  %2980 = getelementptr inbounds i16, i16* %65, i64 %2979
  %2981 = load i16, i16* %2980, align 2, !tbaa !382
  %2982 = insertelement <64 x i16> %2977, i16 %2981, i32 24
  %2983 = extractelement <64 x i32> %2857, i32 25
  %2984 = sext i32 %2983 to i64
  %2985 = getelementptr inbounds i16, i16* %65, i64 %2984
  %2986 = load i16, i16* %2985, align 2, !tbaa !382
  %2987 = insertelement <64 x i16> %2982, i16 %2986, i32 25
  %2988 = extractelement <64 x i32> %2857, i32 26
  %2989 = sext i32 %2988 to i64
  %2990 = getelementptr inbounds i16, i16* %65, i64 %2989
  %2991 = load i16, i16* %2990, align 2, !tbaa !382
  %2992 = insertelement <64 x i16> %2987, i16 %2991, i32 26
  %2993 = extractelement <64 x i32> %2857, i32 27
  %2994 = sext i32 %2993 to i64
  %2995 = getelementptr inbounds i16, i16* %65, i64 %2994
  %2996 = load i16, i16* %2995, align 2, !tbaa !382
  %2997 = insertelement <64 x i16> %2992, i16 %2996, i32 27
  %2998 = extractelement <64 x i32> %2857, i32 28
  %2999 = sext i32 %2998 to i64
  %3000 = getelementptr inbounds i16, i16* %65, i64 %2999
  %3001 = load i16, i16* %3000, align 2, !tbaa !382
  %3002 = insertelement <64 x i16> %2997, i16 %3001, i32 28
  %3003 = extractelement <64 x i32> %2857, i32 29
  %3004 = sext i32 %3003 to i64
  %3005 = getelementptr inbounds i16, i16* %65, i64 %3004
  %3006 = load i16, i16* %3005, align 2, !tbaa !382
  %3007 = insertelement <64 x i16> %3002, i16 %3006, i32 29
  %3008 = extractelement <64 x i32> %2857, i32 30
  %3009 = sext i32 %3008 to i64
  %3010 = getelementptr inbounds i16, i16* %65, i64 %3009
  %3011 = load i16, i16* %3010, align 2, !tbaa !382
  %3012 = insertelement <64 x i16> %3007, i16 %3011, i32 30
  %3013 = extractelement <64 x i32> %2857, i32 31
  %3014 = sext i32 %3013 to i64
  %3015 = getelementptr inbounds i16, i16* %65, i64 %3014
  %3016 = load i16, i16* %3015, align 2, !tbaa !382
  %3017 = insertelement <64 x i16> %3012, i16 %3016, i32 31
  %3018 = extractelement <64 x i32> %2857, i32 32
  %3019 = sext i32 %3018 to i64
  %3020 = getelementptr inbounds i16, i16* %65, i64 %3019
  %3021 = load i16, i16* %3020, align 2, !tbaa !382
  %3022 = insertelement <64 x i16> %3017, i16 %3021, i32 32
  %3023 = extractelement <64 x i32> %2857, i32 33
  %3024 = sext i32 %3023 to i64
  %3025 = getelementptr inbounds i16, i16* %65, i64 %3024
  %3026 = load i16, i16* %3025, align 2, !tbaa !382
  %3027 = insertelement <64 x i16> %3022, i16 %3026, i32 33
  %3028 = extractelement <64 x i32> %2857, i32 34
  %3029 = sext i32 %3028 to i64
  %3030 = getelementptr inbounds i16, i16* %65, i64 %3029
  %3031 = load i16, i16* %3030, align 2, !tbaa !382
  %3032 = insertelement <64 x i16> %3027, i16 %3031, i32 34
  %3033 = extractelement <64 x i32> %2857, i32 35
  %3034 = sext i32 %3033 to i64
  %3035 = getelementptr inbounds i16, i16* %65, i64 %3034
  %3036 = load i16, i16* %3035, align 2, !tbaa !382
  %3037 = insertelement <64 x i16> %3032, i16 %3036, i32 35
  %3038 = extractelement <64 x i32> %2857, i32 36
  %3039 = sext i32 %3038 to i64
  %3040 = getelementptr inbounds i16, i16* %65, i64 %3039
  %3041 = load i16, i16* %3040, align 2, !tbaa !382
  %3042 = insertelement <64 x i16> %3037, i16 %3041, i32 36
  %3043 = extractelement <64 x i32> %2857, i32 37
  %3044 = sext i32 %3043 to i64
  %3045 = getelementptr inbounds i16, i16* %65, i64 %3044
  %3046 = load i16, i16* %3045, align 2, !tbaa !382
  %3047 = insertelement <64 x i16> %3042, i16 %3046, i32 37
  %3048 = extractelement <64 x i32> %2857, i32 38
  %3049 = sext i32 %3048 to i64
  %3050 = getelementptr inbounds i16, i16* %65, i64 %3049
  %3051 = load i16, i16* %3050, align 2, !tbaa !382
  %3052 = insertelement <64 x i16> %3047, i16 %3051, i32 38
  %3053 = extractelement <64 x i32> %2857, i32 39
  %3054 = sext i32 %3053 to i64
  %3055 = getelementptr inbounds i16, i16* %65, i64 %3054
  %3056 = load i16, i16* %3055, align 2, !tbaa !382
  %3057 = insertelement <64 x i16> %3052, i16 %3056, i32 39
  %3058 = extractelement <64 x i32> %2857, i32 40
  %3059 = sext i32 %3058 to i64
  %3060 = getelementptr inbounds i16, i16* %65, i64 %3059
  %3061 = load i16, i16* %3060, align 2, !tbaa !382
  %3062 = insertelement <64 x i16> %3057, i16 %3061, i32 40
  %3063 = extractelement <64 x i32> %2857, i32 41
  %3064 = sext i32 %3063 to i64
  %3065 = getelementptr inbounds i16, i16* %65, i64 %3064
  %3066 = load i16, i16* %3065, align 2, !tbaa !382
  %3067 = insertelement <64 x i16> %3062, i16 %3066, i32 41
  %3068 = extractelement <64 x i32> %2857, i32 42
  %3069 = sext i32 %3068 to i64
  %3070 = getelementptr inbounds i16, i16* %65, i64 %3069
  %3071 = load i16, i16* %3070, align 2, !tbaa !382
  %3072 = insertelement <64 x i16> %3067, i16 %3071, i32 42
  %3073 = extractelement <64 x i32> %2857, i32 43
  %3074 = sext i32 %3073 to i64
  %3075 = getelementptr inbounds i16, i16* %65, i64 %3074
  %3076 = load i16, i16* %3075, align 2, !tbaa !382
  %3077 = insertelement <64 x i16> %3072, i16 %3076, i32 43
  %3078 = extractelement <64 x i32> %2857, i32 44
  %3079 = sext i32 %3078 to i64
  %3080 = getelementptr inbounds i16, i16* %65, i64 %3079
  %3081 = load i16, i16* %3080, align 2, !tbaa !382
  %3082 = insertelement <64 x i16> %3077, i16 %3081, i32 44
  %3083 = extractelement <64 x i32> %2857, i32 45
  %3084 = sext i32 %3083 to i64
  %3085 = getelementptr inbounds i16, i16* %65, i64 %3084
  %3086 = load i16, i16* %3085, align 2, !tbaa !382
  %3087 = insertelement <64 x i16> %3082, i16 %3086, i32 45
  %3088 = extractelement <64 x i32> %2857, i32 46
  %3089 = sext i32 %3088 to i64
  %3090 = getelementptr inbounds i16, i16* %65, i64 %3089
  %3091 = load i16, i16* %3090, align 2, !tbaa !382
  %3092 = insertelement <64 x i16> %3087, i16 %3091, i32 46
  %3093 = extractelement <64 x i32> %2857, i32 47
  %3094 = sext i32 %3093 to i64
  %3095 = getelementptr inbounds i16, i16* %65, i64 %3094
  %3096 = load i16, i16* %3095, align 2, !tbaa !382
  %3097 = insertelement <64 x i16> %3092, i16 %3096, i32 47
  %3098 = extractelement <64 x i32> %2857, i32 48
  %3099 = sext i32 %3098 to i64
  %3100 = getelementptr inbounds i16, i16* %65, i64 %3099
  %3101 = load i16, i16* %3100, align 2, !tbaa !382
  %3102 = insertelement <64 x i16> %3097, i16 %3101, i32 48
  %3103 = extractelement <64 x i32> %2857, i32 49
  %3104 = sext i32 %3103 to i64
  %3105 = getelementptr inbounds i16, i16* %65, i64 %3104
  %3106 = load i16, i16* %3105, align 2, !tbaa !382
  %3107 = insertelement <64 x i16> %3102, i16 %3106, i32 49
  %3108 = extractelement <64 x i32> %2857, i32 50
  %3109 = sext i32 %3108 to i64
  %3110 = getelementptr inbounds i16, i16* %65, i64 %3109
  %3111 = load i16, i16* %3110, align 2, !tbaa !382
  %3112 = insertelement <64 x i16> %3107, i16 %3111, i32 50
  %3113 = extractelement <64 x i32> %2857, i32 51
  %3114 = sext i32 %3113 to i64
  %3115 = getelementptr inbounds i16, i16* %65, i64 %3114
  %3116 = load i16, i16* %3115, align 2, !tbaa !382
  %3117 = insertelement <64 x i16> %3112, i16 %3116, i32 51
  %3118 = extractelement <64 x i32> %2857, i32 52
  %3119 = sext i32 %3118 to i64
  %3120 = getelementptr inbounds i16, i16* %65, i64 %3119
  %3121 = load i16, i16* %3120, align 2, !tbaa !382
  %3122 = insertelement <64 x i16> %3117, i16 %3121, i32 52
  %3123 = extractelement <64 x i32> %2857, i32 53
  %3124 = sext i32 %3123 to i64
  %3125 = getelementptr inbounds i16, i16* %65, i64 %3124
  %3126 = load i16, i16* %3125, align 2, !tbaa !382
  %3127 = insertelement <64 x i16> %3122, i16 %3126, i32 53
  %3128 = extractelement <64 x i32> %2857, i32 54
  %3129 = sext i32 %3128 to i64
  %3130 = getelementptr inbounds i16, i16* %65, i64 %3129
  %3131 = load i16, i16* %3130, align 2, !tbaa !382
  %3132 = insertelement <64 x i16> %3127, i16 %3131, i32 54
  %3133 = extractelement <64 x i32> %2857, i32 55
  %3134 = sext i32 %3133 to i64
  %3135 = getelementptr inbounds i16, i16* %65, i64 %3134
  %3136 = load i16, i16* %3135, align 2, !tbaa !382
  %3137 = insertelement <64 x i16> %3132, i16 %3136, i32 55
  %3138 = extractelement <64 x i32> %2857, i32 56
  %3139 = sext i32 %3138 to i64
  %3140 = getelementptr inbounds i16, i16* %65, i64 %3139
  %3141 = load i16, i16* %3140, align 2, !tbaa !382
  %3142 = insertelement <64 x i16> %3137, i16 %3141, i32 56
  %3143 = extractelement <64 x i32> %2857, i32 57
  %3144 = sext i32 %3143 to i64
  %3145 = getelementptr inbounds i16, i16* %65, i64 %3144
  %3146 = load i16, i16* %3145, align 2, !tbaa !382
  %3147 = insertelement <64 x i16> %3142, i16 %3146, i32 57
  %3148 = extractelement <64 x i32> %2857, i32 58
  %3149 = sext i32 %3148 to i64
  %3150 = getelementptr inbounds i16, i16* %65, i64 %3149
  %3151 = load i16, i16* %3150, align 2, !tbaa !382
  %3152 = insertelement <64 x i16> %3147, i16 %3151, i32 58
  %3153 = extractelement <64 x i32> %2857, i32 59
  %3154 = sext i32 %3153 to i64
  %3155 = getelementptr inbounds i16, i16* %65, i64 %3154
  %3156 = load i16, i16* %3155, align 2, !tbaa !382
  %3157 = insertelement <64 x i16> %3152, i16 %3156, i32 59
  %3158 = extractelement <64 x i32> %2857, i32 60
  %3159 = sext i32 %3158 to i64
  %3160 = getelementptr inbounds i16, i16* %65, i64 %3159
  %3161 = load i16, i16* %3160, align 2, !tbaa !382
  %3162 = insertelement <64 x i16> %3157, i16 %3161, i32 60
  %3163 = extractelement <64 x i32> %2857, i32 61
  %3164 = sext i32 %3163 to i64
  %3165 = getelementptr inbounds i16, i16* %65, i64 %3164
  %3166 = load i16, i16* %3165, align 2, !tbaa !382
  %3167 = insertelement <64 x i16> %3162, i16 %3166, i32 61
  %3168 = extractelement <64 x i32> %2857, i32 62
  %3169 = sext i32 %3168 to i64
  %3170 = getelementptr inbounds i16, i16* %65, i64 %3169
  %3171 = load i16, i16* %3170, align 2, !tbaa !382
  %3172 = insertelement <64 x i16> %3167, i16 %3171, i32 62
  %3173 = extractelement <64 x i32> %2857, i32 63
  %3174 = sext i32 %3173 to i64
  %3175 = getelementptr inbounds i16, i16* %65, i64 %3174
  %3176 = load i16, i16* %3175, align 2, !tbaa !382
  %3177 = insertelement <64 x i16> %3172, i16 %3176, i32 63
  %3178 = add nsw i32 %blur_x.s0.x.v1.base.s5, -62
  %3179 = insertelement <64 x i32> undef, i32 %3178, i32 0
  %3180 = shufflevector <64 x i32> %3179, <64 x i32> undef, <64 x i32> zeroinitializer
  %3181 = add nsw <64 x i32> %3180, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3182 = shufflevector <64 x i32> %3181, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3183 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3182, <4 x i32> %62)
  %3184 = shufflevector <64 x i32> %3181, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3185 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3184, <4 x i32> %62)
  %3186 = shufflevector <64 x i32> %3181, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3187 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3186, <4 x i32> %62)
  %3188 = shufflevector <64 x i32> %3181, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3189 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3188, <4 x i32> %62)
  %3190 = shufflevector <64 x i32> %3181, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %3191 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3190, <4 x i32> %62)
  %3192 = shufflevector <64 x i32> %3181, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %3193 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3192, <4 x i32> %62)
  %3194 = shufflevector <64 x i32> %3181, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %3195 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3194, <4 x i32> %62)
  %3196 = shufflevector <64 x i32> %3181, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %3197 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3196, <4 x i32> %62)
  %3198 = shufflevector <64 x i32> %3181, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %3199 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3198, <4 x i32> %62)
  %3200 = shufflevector <64 x i32> %3181, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %3201 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3200, <4 x i32> %62)
  %3202 = shufflevector <64 x i32> %3181, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %3203 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3202, <4 x i32> %62)
  %3204 = shufflevector <64 x i32> %3181, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %3205 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3204, <4 x i32> %62)
  %3206 = shufflevector <64 x i32> %3181, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %3207 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3206, <4 x i32> %62)
  %3208 = shufflevector <64 x i32> %3181, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %3209 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3208, <4 x i32> %62)
  %3210 = shufflevector <64 x i32> %3181, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %3211 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3210, <4 x i32> %62)
  %3212 = shufflevector <64 x i32> %3181, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3213 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3212, <4 x i32> %62)
  %3214 = shufflevector <4 x i32> %3213, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %3215 = shufflevector <8 x i32> %3214, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3216 = shufflevector <16 x i32> %3215, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %3217 = shufflevector <32 x i32> %3216, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %3218 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3183, <4 x i32> %64)
  %3219 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3185, <4 x i32> %64)
  %3220 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3187, <4 x i32> %64)
  %3221 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3189, <4 x i32> %64)
  %3222 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3191, <4 x i32> %64)
  %3223 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3193, <4 x i32> %64)
  %3224 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3195, <4 x i32> %64)
  %3225 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3197, <4 x i32> %64)
  %3226 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3199, <4 x i32> %64)
  %3227 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3201, <4 x i32> %64)
  %3228 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3203, <4 x i32> %64)
  %3229 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3205, <4 x i32> %64)
  %3230 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3207, <4 x i32> %64)
  %3231 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3209, <4 x i32> %64)
  %3232 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3211, <4 x i32> %64)
  %3233 = shufflevector <64 x i32> %3217, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3234 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3233, <4 x i32> %64)
  %3235 = shufflevector <4 x i32> %3218, <4 x i32> %3219, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3236 = shufflevector <4 x i32> %3220, <4 x i32> %3221, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3237 = shufflevector <4 x i32> %3222, <4 x i32> %3223, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3238 = shufflevector <4 x i32> %3224, <4 x i32> %3225, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3239 = shufflevector <4 x i32> %3226, <4 x i32> %3227, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3240 = shufflevector <4 x i32> %3228, <4 x i32> %3229, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3241 = shufflevector <4 x i32> %3230, <4 x i32> %3231, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3242 = shufflevector <4 x i32> %3232, <4 x i32> %3234, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3243 = shufflevector <8 x i32> %3235, <8 x i32> %3236, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3244 = shufflevector <8 x i32> %3237, <8 x i32> %3238, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3245 = shufflevector <8 x i32> %3239, <8 x i32> %3240, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3246 = shufflevector <8 x i32> %3241, <8 x i32> %3242, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3247 = shufflevector <16 x i32> %3243, <16 x i32> %3244, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3248 = shufflevector <16 x i32> %3245, <16 x i32> %3246, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3249 = shufflevector <32 x i32> %3247, <32 x i32> %3248, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3250 = add nsw <64 x i32> %3249, %t201
  %3251 = extractelement <64 x i32> %3250, i32 0
  %3252 = sext i32 %3251 to i64
  %3253 = getelementptr inbounds i16, i16* %65, i64 %3252
  %3254 = load i16, i16* %3253, align 2, !tbaa !382
  %3255 = insertelement <64 x i16> undef, i16 %3254, i32 0
  %3256 = extractelement <64 x i32> %3250, i32 1
  %3257 = sext i32 %3256 to i64
  %3258 = getelementptr inbounds i16, i16* %65, i64 %3257
  %3259 = load i16, i16* %3258, align 2, !tbaa !382
  %3260 = insertelement <64 x i16> %3255, i16 %3259, i32 1
  %3261 = extractelement <64 x i32> %3250, i32 2
  %3262 = sext i32 %3261 to i64
  %3263 = getelementptr inbounds i16, i16* %65, i64 %3262
  %3264 = load i16, i16* %3263, align 2, !tbaa !382
  %3265 = insertelement <64 x i16> %3260, i16 %3264, i32 2
  %3266 = extractelement <64 x i32> %3250, i32 3
  %3267 = sext i32 %3266 to i64
  %3268 = getelementptr inbounds i16, i16* %65, i64 %3267
  %3269 = load i16, i16* %3268, align 2, !tbaa !382
  %3270 = insertelement <64 x i16> %3265, i16 %3269, i32 3
  %3271 = extractelement <64 x i32> %3250, i32 4
  %3272 = sext i32 %3271 to i64
  %3273 = getelementptr inbounds i16, i16* %65, i64 %3272
  %3274 = load i16, i16* %3273, align 2, !tbaa !382
  %3275 = insertelement <64 x i16> %3270, i16 %3274, i32 4
  %3276 = extractelement <64 x i32> %3250, i32 5
  %3277 = sext i32 %3276 to i64
  %3278 = getelementptr inbounds i16, i16* %65, i64 %3277
  %3279 = load i16, i16* %3278, align 2, !tbaa !382
  %3280 = insertelement <64 x i16> %3275, i16 %3279, i32 5
  %3281 = extractelement <64 x i32> %3250, i32 6
  %3282 = sext i32 %3281 to i64
  %3283 = getelementptr inbounds i16, i16* %65, i64 %3282
  %3284 = load i16, i16* %3283, align 2, !tbaa !382
  %3285 = insertelement <64 x i16> %3280, i16 %3284, i32 6
  %3286 = extractelement <64 x i32> %3250, i32 7
  %3287 = sext i32 %3286 to i64
  %3288 = getelementptr inbounds i16, i16* %65, i64 %3287
  %3289 = load i16, i16* %3288, align 2, !tbaa !382
  %3290 = insertelement <64 x i16> %3285, i16 %3289, i32 7
  %3291 = extractelement <64 x i32> %3250, i32 8
  %3292 = sext i32 %3291 to i64
  %3293 = getelementptr inbounds i16, i16* %65, i64 %3292
  %3294 = load i16, i16* %3293, align 2, !tbaa !382
  %3295 = insertelement <64 x i16> %3290, i16 %3294, i32 8
  %3296 = extractelement <64 x i32> %3250, i32 9
  %3297 = sext i32 %3296 to i64
  %3298 = getelementptr inbounds i16, i16* %65, i64 %3297
  %3299 = load i16, i16* %3298, align 2, !tbaa !382
  %3300 = insertelement <64 x i16> %3295, i16 %3299, i32 9
  %3301 = extractelement <64 x i32> %3250, i32 10
  %3302 = sext i32 %3301 to i64
  %3303 = getelementptr inbounds i16, i16* %65, i64 %3302
  %3304 = load i16, i16* %3303, align 2, !tbaa !382
  %3305 = insertelement <64 x i16> %3300, i16 %3304, i32 10
  %3306 = extractelement <64 x i32> %3250, i32 11
  %3307 = sext i32 %3306 to i64
  %3308 = getelementptr inbounds i16, i16* %65, i64 %3307
  %3309 = load i16, i16* %3308, align 2, !tbaa !382
  %3310 = insertelement <64 x i16> %3305, i16 %3309, i32 11
  %3311 = extractelement <64 x i32> %3250, i32 12
  %3312 = sext i32 %3311 to i64
  %3313 = getelementptr inbounds i16, i16* %65, i64 %3312
  %3314 = load i16, i16* %3313, align 2, !tbaa !382
  %3315 = insertelement <64 x i16> %3310, i16 %3314, i32 12
  %3316 = extractelement <64 x i32> %3250, i32 13
  %3317 = sext i32 %3316 to i64
  %3318 = getelementptr inbounds i16, i16* %65, i64 %3317
  %3319 = load i16, i16* %3318, align 2, !tbaa !382
  %3320 = insertelement <64 x i16> %3315, i16 %3319, i32 13
  %3321 = extractelement <64 x i32> %3250, i32 14
  %3322 = sext i32 %3321 to i64
  %3323 = getelementptr inbounds i16, i16* %65, i64 %3322
  %3324 = load i16, i16* %3323, align 2, !tbaa !382
  %3325 = insertelement <64 x i16> %3320, i16 %3324, i32 14
  %3326 = extractelement <64 x i32> %3250, i32 15
  %3327 = sext i32 %3326 to i64
  %3328 = getelementptr inbounds i16, i16* %65, i64 %3327
  %3329 = load i16, i16* %3328, align 2, !tbaa !382
  %3330 = insertelement <64 x i16> %3325, i16 %3329, i32 15
  %3331 = extractelement <64 x i32> %3250, i32 16
  %3332 = sext i32 %3331 to i64
  %3333 = getelementptr inbounds i16, i16* %65, i64 %3332
  %3334 = load i16, i16* %3333, align 2, !tbaa !382
  %3335 = insertelement <64 x i16> %3330, i16 %3334, i32 16
  %3336 = extractelement <64 x i32> %3250, i32 17
  %3337 = sext i32 %3336 to i64
  %3338 = getelementptr inbounds i16, i16* %65, i64 %3337
  %3339 = load i16, i16* %3338, align 2, !tbaa !382
  %3340 = insertelement <64 x i16> %3335, i16 %3339, i32 17
  %3341 = extractelement <64 x i32> %3250, i32 18
  %3342 = sext i32 %3341 to i64
  %3343 = getelementptr inbounds i16, i16* %65, i64 %3342
  %3344 = load i16, i16* %3343, align 2, !tbaa !382
  %3345 = insertelement <64 x i16> %3340, i16 %3344, i32 18
  %3346 = extractelement <64 x i32> %3250, i32 19
  %3347 = sext i32 %3346 to i64
  %3348 = getelementptr inbounds i16, i16* %65, i64 %3347
  %3349 = load i16, i16* %3348, align 2, !tbaa !382
  %3350 = insertelement <64 x i16> %3345, i16 %3349, i32 19
  %3351 = extractelement <64 x i32> %3250, i32 20
  %3352 = sext i32 %3351 to i64
  %3353 = getelementptr inbounds i16, i16* %65, i64 %3352
  %3354 = load i16, i16* %3353, align 2, !tbaa !382
  %3355 = insertelement <64 x i16> %3350, i16 %3354, i32 20
  %3356 = extractelement <64 x i32> %3250, i32 21
  %3357 = sext i32 %3356 to i64
  %3358 = getelementptr inbounds i16, i16* %65, i64 %3357
  %3359 = load i16, i16* %3358, align 2, !tbaa !382
  %3360 = insertelement <64 x i16> %3355, i16 %3359, i32 21
  %3361 = extractelement <64 x i32> %3250, i32 22
  %3362 = sext i32 %3361 to i64
  %3363 = getelementptr inbounds i16, i16* %65, i64 %3362
  %3364 = load i16, i16* %3363, align 2, !tbaa !382
  %3365 = insertelement <64 x i16> %3360, i16 %3364, i32 22
  %3366 = extractelement <64 x i32> %3250, i32 23
  %3367 = sext i32 %3366 to i64
  %3368 = getelementptr inbounds i16, i16* %65, i64 %3367
  %3369 = load i16, i16* %3368, align 2, !tbaa !382
  %3370 = insertelement <64 x i16> %3365, i16 %3369, i32 23
  %3371 = extractelement <64 x i32> %3250, i32 24
  %3372 = sext i32 %3371 to i64
  %3373 = getelementptr inbounds i16, i16* %65, i64 %3372
  %3374 = load i16, i16* %3373, align 2, !tbaa !382
  %3375 = insertelement <64 x i16> %3370, i16 %3374, i32 24
  %3376 = extractelement <64 x i32> %3250, i32 25
  %3377 = sext i32 %3376 to i64
  %3378 = getelementptr inbounds i16, i16* %65, i64 %3377
  %3379 = load i16, i16* %3378, align 2, !tbaa !382
  %3380 = insertelement <64 x i16> %3375, i16 %3379, i32 25
  %3381 = extractelement <64 x i32> %3250, i32 26
  %3382 = sext i32 %3381 to i64
  %3383 = getelementptr inbounds i16, i16* %65, i64 %3382
  %3384 = load i16, i16* %3383, align 2, !tbaa !382
  %3385 = insertelement <64 x i16> %3380, i16 %3384, i32 26
  %3386 = extractelement <64 x i32> %3250, i32 27
  %3387 = sext i32 %3386 to i64
  %3388 = getelementptr inbounds i16, i16* %65, i64 %3387
  %3389 = load i16, i16* %3388, align 2, !tbaa !382
  %3390 = insertelement <64 x i16> %3385, i16 %3389, i32 27
  %3391 = extractelement <64 x i32> %3250, i32 28
  %3392 = sext i32 %3391 to i64
  %3393 = getelementptr inbounds i16, i16* %65, i64 %3392
  %3394 = load i16, i16* %3393, align 2, !tbaa !382
  %3395 = insertelement <64 x i16> %3390, i16 %3394, i32 28
  %3396 = extractelement <64 x i32> %3250, i32 29
  %3397 = sext i32 %3396 to i64
  %3398 = getelementptr inbounds i16, i16* %65, i64 %3397
  %3399 = load i16, i16* %3398, align 2, !tbaa !382
  %3400 = insertelement <64 x i16> %3395, i16 %3399, i32 29
  %3401 = extractelement <64 x i32> %3250, i32 30
  %3402 = sext i32 %3401 to i64
  %3403 = getelementptr inbounds i16, i16* %65, i64 %3402
  %3404 = load i16, i16* %3403, align 2, !tbaa !382
  %3405 = insertelement <64 x i16> %3400, i16 %3404, i32 30
  %3406 = extractelement <64 x i32> %3250, i32 31
  %3407 = sext i32 %3406 to i64
  %3408 = getelementptr inbounds i16, i16* %65, i64 %3407
  %3409 = load i16, i16* %3408, align 2, !tbaa !382
  %3410 = insertelement <64 x i16> %3405, i16 %3409, i32 31
  %3411 = extractelement <64 x i32> %3250, i32 32
  %3412 = sext i32 %3411 to i64
  %3413 = getelementptr inbounds i16, i16* %65, i64 %3412
  %3414 = load i16, i16* %3413, align 2, !tbaa !382
  %3415 = insertelement <64 x i16> %3410, i16 %3414, i32 32
  %3416 = extractelement <64 x i32> %3250, i32 33
  %3417 = sext i32 %3416 to i64
  %3418 = getelementptr inbounds i16, i16* %65, i64 %3417
  %3419 = load i16, i16* %3418, align 2, !tbaa !382
  %3420 = insertelement <64 x i16> %3415, i16 %3419, i32 33
  %3421 = extractelement <64 x i32> %3250, i32 34
  %3422 = sext i32 %3421 to i64
  %3423 = getelementptr inbounds i16, i16* %65, i64 %3422
  %3424 = load i16, i16* %3423, align 2, !tbaa !382
  %3425 = insertelement <64 x i16> %3420, i16 %3424, i32 34
  %3426 = extractelement <64 x i32> %3250, i32 35
  %3427 = sext i32 %3426 to i64
  %3428 = getelementptr inbounds i16, i16* %65, i64 %3427
  %3429 = load i16, i16* %3428, align 2, !tbaa !382
  %3430 = insertelement <64 x i16> %3425, i16 %3429, i32 35
  %3431 = extractelement <64 x i32> %3250, i32 36
  %3432 = sext i32 %3431 to i64
  %3433 = getelementptr inbounds i16, i16* %65, i64 %3432
  %3434 = load i16, i16* %3433, align 2, !tbaa !382
  %3435 = insertelement <64 x i16> %3430, i16 %3434, i32 36
  %3436 = extractelement <64 x i32> %3250, i32 37
  %3437 = sext i32 %3436 to i64
  %3438 = getelementptr inbounds i16, i16* %65, i64 %3437
  %3439 = load i16, i16* %3438, align 2, !tbaa !382
  %3440 = insertelement <64 x i16> %3435, i16 %3439, i32 37
  %3441 = extractelement <64 x i32> %3250, i32 38
  %3442 = sext i32 %3441 to i64
  %3443 = getelementptr inbounds i16, i16* %65, i64 %3442
  %3444 = load i16, i16* %3443, align 2, !tbaa !382
  %3445 = insertelement <64 x i16> %3440, i16 %3444, i32 38
  %3446 = extractelement <64 x i32> %3250, i32 39
  %3447 = sext i32 %3446 to i64
  %3448 = getelementptr inbounds i16, i16* %65, i64 %3447
  %3449 = load i16, i16* %3448, align 2, !tbaa !382
  %3450 = insertelement <64 x i16> %3445, i16 %3449, i32 39
  %3451 = extractelement <64 x i32> %3250, i32 40
  %3452 = sext i32 %3451 to i64
  %3453 = getelementptr inbounds i16, i16* %65, i64 %3452
  %3454 = load i16, i16* %3453, align 2, !tbaa !382
  %3455 = insertelement <64 x i16> %3450, i16 %3454, i32 40
  %3456 = extractelement <64 x i32> %3250, i32 41
  %3457 = sext i32 %3456 to i64
  %3458 = getelementptr inbounds i16, i16* %65, i64 %3457
  %3459 = load i16, i16* %3458, align 2, !tbaa !382
  %3460 = insertelement <64 x i16> %3455, i16 %3459, i32 41
  %3461 = extractelement <64 x i32> %3250, i32 42
  %3462 = sext i32 %3461 to i64
  %3463 = getelementptr inbounds i16, i16* %65, i64 %3462
  %3464 = load i16, i16* %3463, align 2, !tbaa !382
  %3465 = insertelement <64 x i16> %3460, i16 %3464, i32 42
  %3466 = extractelement <64 x i32> %3250, i32 43
  %3467 = sext i32 %3466 to i64
  %3468 = getelementptr inbounds i16, i16* %65, i64 %3467
  %3469 = load i16, i16* %3468, align 2, !tbaa !382
  %3470 = insertelement <64 x i16> %3465, i16 %3469, i32 43
  %3471 = extractelement <64 x i32> %3250, i32 44
  %3472 = sext i32 %3471 to i64
  %3473 = getelementptr inbounds i16, i16* %65, i64 %3472
  %3474 = load i16, i16* %3473, align 2, !tbaa !382
  %3475 = insertelement <64 x i16> %3470, i16 %3474, i32 44
  %3476 = extractelement <64 x i32> %3250, i32 45
  %3477 = sext i32 %3476 to i64
  %3478 = getelementptr inbounds i16, i16* %65, i64 %3477
  %3479 = load i16, i16* %3478, align 2, !tbaa !382
  %3480 = insertelement <64 x i16> %3475, i16 %3479, i32 45
  %3481 = extractelement <64 x i32> %3250, i32 46
  %3482 = sext i32 %3481 to i64
  %3483 = getelementptr inbounds i16, i16* %65, i64 %3482
  %3484 = load i16, i16* %3483, align 2, !tbaa !382
  %3485 = insertelement <64 x i16> %3480, i16 %3484, i32 46
  %3486 = extractelement <64 x i32> %3250, i32 47
  %3487 = sext i32 %3486 to i64
  %3488 = getelementptr inbounds i16, i16* %65, i64 %3487
  %3489 = load i16, i16* %3488, align 2, !tbaa !382
  %3490 = insertelement <64 x i16> %3485, i16 %3489, i32 47
  %3491 = extractelement <64 x i32> %3250, i32 48
  %3492 = sext i32 %3491 to i64
  %3493 = getelementptr inbounds i16, i16* %65, i64 %3492
  %3494 = load i16, i16* %3493, align 2, !tbaa !382
  %3495 = insertelement <64 x i16> %3490, i16 %3494, i32 48
  %3496 = extractelement <64 x i32> %3250, i32 49
  %3497 = sext i32 %3496 to i64
  %3498 = getelementptr inbounds i16, i16* %65, i64 %3497
  %3499 = load i16, i16* %3498, align 2, !tbaa !382
  %3500 = insertelement <64 x i16> %3495, i16 %3499, i32 49
  %3501 = extractelement <64 x i32> %3250, i32 50
  %3502 = sext i32 %3501 to i64
  %3503 = getelementptr inbounds i16, i16* %65, i64 %3502
  %3504 = load i16, i16* %3503, align 2, !tbaa !382
  %3505 = insertelement <64 x i16> %3500, i16 %3504, i32 50
  %3506 = extractelement <64 x i32> %3250, i32 51
  %3507 = sext i32 %3506 to i64
  %3508 = getelementptr inbounds i16, i16* %65, i64 %3507
  %3509 = load i16, i16* %3508, align 2, !tbaa !382
  %3510 = insertelement <64 x i16> %3505, i16 %3509, i32 51
  %3511 = extractelement <64 x i32> %3250, i32 52
  %3512 = sext i32 %3511 to i64
  %3513 = getelementptr inbounds i16, i16* %65, i64 %3512
  %3514 = load i16, i16* %3513, align 2, !tbaa !382
  %3515 = insertelement <64 x i16> %3510, i16 %3514, i32 52
  %3516 = extractelement <64 x i32> %3250, i32 53
  %3517 = sext i32 %3516 to i64
  %3518 = getelementptr inbounds i16, i16* %65, i64 %3517
  %3519 = load i16, i16* %3518, align 2, !tbaa !382
  %3520 = insertelement <64 x i16> %3515, i16 %3519, i32 53
  %3521 = extractelement <64 x i32> %3250, i32 54
  %3522 = sext i32 %3521 to i64
  %3523 = getelementptr inbounds i16, i16* %65, i64 %3522
  %3524 = load i16, i16* %3523, align 2, !tbaa !382
  %3525 = insertelement <64 x i16> %3520, i16 %3524, i32 54
  %3526 = extractelement <64 x i32> %3250, i32 55
  %3527 = sext i32 %3526 to i64
  %3528 = getelementptr inbounds i16, i16* %65, i64 %3527
  %3529 = load i16, i16* %3528, align 2, !tbaa !382
  %3530 = insertelement <64 x i16> %3525, i16 %3529, i32 55
  %3531 = extractelement <64 x i32> %3250, i32 56
  %3532 = sext i32 %3531 to i64
  %3533 = getelementptr inbounds i16, i16* %65, i64 %3532
  %3534 = load i16, i16* %3533, align 2, !tbaa !382
  %3535 = insertelement <64 x i16> %3530, i16 %3534, i32 56
  %3536 = extractelement <64 x i32> %3250, i32 57
  %3537 = sext i32 %3536 to i64
  %3538 = getelementptr inbounds i16, i16* %65, i64 %3537
  %3539 = load i16, i16* %3538, align 2, !tbaa !382
  %3540 = insertelement <64 x i16> %3535, i16 %3539, i32 57
  %3541 = extractelement <64 x i32> %3250, i32 58
  %3542 = sext i32 %3541 to i64
  %3543 = getelementptr inbounds i16, i16* %65, i64 %3542
  %3544 = load i16, i16* %3543, align 2, !tbaa !382
  %3545 = insertelement <64 x i16> %3540, i16 %3544, i32 58
  %3546 = extractelement <64 x i32> %3250, i32 59
  %3547 = sext i32 %3546 to i64
  %3548 = getelementptr inbounds i16, i16* %65, i64 %3547
  %3549 = load i16, i16* %3548, align 2, !tbaa !382
  %3550 = insertelement <64 x i16> %3545, i16 %3549, i32 59
  %3551 = extractelement <64 x i32> %3250, i32 60
  %3552 = sext i32 %3551 to i64
  %3553 = getelementptr inbounds i16, i16* %65, i64 %3552
  %3554 = load i16, i16* %3553, align 2, !tbaa !382
  %3555 = insertelement <64 x i16> %3550, i16 %3554, i32 60
  %3556 = extractelement <64 x i32> %3250, i32 61
  %3557 = sext i32 %3556 to i64
  %3558 = getelementptr inbounds i16, i16* %65, i64 %3557
  %3559 = load i16, i16* %3558, align 2, !tbaa !382
  %3560 = insertelement <64 x i16> %3555, i16 %3559, i32 61
  %3561 = extractelement <64 x i32> %3250, i32 62
  %3562 = sext i32 %3561 to i64
  %3563 = getelementptr inbounds i16, i16* %65, i64 %3562
  %3564 = load i16, i16* %3563, align 2, !tbaa !382
  %3565 = insertelement <64 x i16> %3560, i16 %3564, i32 62
  %3566 = extractelement <64 x i32> %3250, i32 63
  %3567 = sext i32 %3566 to i64
  %3568 = getelementptr inbounds i16, i16* %65, i64 %3567
  %3569 = load i16, i16* %3568, align 2, !tbaa !382
  %3570 = insertelement <64 x i16> %3565, i16 %3569, i32 63
  %3571 = add nsw i32 %blur_x.s0.x.v1.base.s5, -60
  %3572 = insertelement <64 x i32> undef, i32 %3571, i32 0
  %3573 = shufflevector <64 x i32> %3572, <64 x i32> undef, <64 x i32> zeroinitializer
  %3574 = add nsw <64 x i32> %3573, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3575 = shufflevector <64 x i32> %3574, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3576 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3575, <4 x i32> %62)
  %3577 = shufflevector <64 x i32> %3574, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3578 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3577, <4 x i32> %62)
  %3579 = shufflevector <64 x i32> %3574, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3580 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3579, <4 x i32> %62)
  %3581 = shufflevector <64 x i32> %3574, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3582 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3581, <4 x i32> %62)
  %3583 = shufflevector <64 x i32> %3574, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %3584 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3583, <4 x i32> %62)
  %3585 = shufflevector <64 x i32> %3574, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %3586 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3585, <4 x i32> %62)
  %3587 = shufflevector <64 x i32> %3574, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %3588 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3587, <4 x i32> %62)
  %3589 = shufflevector <64 x i32> %3574, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %3590 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3589, <4 x i32> %62)
  %3591 = shufflevector <64 x i32> %3574, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %3592 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3591, <4 x i32> %62)
  %3593 = shufflevector <64 x i32> %3574, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %3594 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3593, <4 x i32> %62)
  %3595 = shufflevector <64 x i32> %3574, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %3596 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3595, <4 x i32> %62)
  %3597 = shufflevector <64 x i32> %3574, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %3598 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3597, <4 x i32> %62)
  %3599 = shufflevector <64 x i32> %3574, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %3600 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3599, <4 x i32> %62)
  %3601 = shufflevector <64 x i32> %3574, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %3602 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3601, <4 x i32> %62)
  %3603 = shufflevector <64 x i32> %3574, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %3604 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3603, <4 x i32> %62)
  %3605 = shufflevector <64 x i32> %3574, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3606 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3605, <4 x i32> %62)
  %3607 = shufflevector <4 x i32> %3606, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %3608 = shufflevector <8 x i32> %3607, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3609 = shufflevector <16 x i32> %3608, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %3610 = shufflevector <32 x i32> %3609, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %3611 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3576, <4 x i32> %64)
  %3612 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3578, <4 x i32> %64)
  %3613 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3580, <4 x i32> %64)
  %3614 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3582, <4 x i32> %64)
  %3615 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3584, <4 x i32> %64)
  %3616 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3586, <4 x i32> %64)
  %3617 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3588, <4 x i32> %64)
  %3618 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3590, <4 x i32> %64)
  %3619 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3592, <4 x i32> %64)
  %3620 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3594, <4 x i32> %64)
  %3621 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3596, <4 x i32> %64)
  %3622 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3598, <4 x i32> %64)
  %3623 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3600, <4 x i32> %64)
  %3624 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3602, <4 x i32> %64)
  %3625 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3604, <4 x i32> %64)
  %3626 = shufflevector <64 x i32> %3610, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3627 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3626, <4 x i32> %64)
  %3628 = shufflevector <4 x i32> %3611, <4 x i32> %3612, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3629 = shufflevector <4 x i32> %3613, <4 x i32> %3614, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3630 = shufflevector <4 x i32> %3615, <4 x i32> %3616, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3631 = shufflevector <4 x i32> %3617, <4 x i32> %3618, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3632 = shufflevector <4 x i32> %3619, <4 x i32> %3620, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3633 = shufflevector <4 x i32> %3621, <4 x i32> %3622, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3634 = shufflevector <4 x i32> %3623, <4 x i32> %3624, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3635 = shufflevector <4 x i32> %3625, <4 x i32> %3627, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3636 = shufflevector <8 x i32> %3628, <8 x i32> %3629, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3637 = shufflevector <8 x i32> %3630, <8 x i32> %3631, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3638 = shufflevector <8 x i32> %3632, <8 x i32> %3633, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3639 = shufflevector <8 x i32> %3634, <8 x i32> %3635, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3640 = shufflevector <16 x i32> %3636, <16 x i32> %3637, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3641 = shufflevector <16 x i32> %3638, <16 x i32> %3639, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3642 = shufflevector <32 x i32> %3640, <32 x i32> %3641, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3643 = add nsw <64 x i32> %3642, %t201
  %3644 = extractelement <64 x i32> %3643, i32 0
  %3645 = sext i32 %3644 to i64
  %3646 = getelementptr inbounds i16, i16* %65, i64 %3645
  %3647 = load i16, i16* %3646, align 2, !tbaa !382
  %3648 = insertelement <64 x i16> undef, i16 %3647, i32 0
  %3649 = extractelement <64 x i32> %3643, i32 1
  %3650 = sext i32 %3649 to i64
  %3651 = getelementptr inbounds i16, i16* %65, i64 %3650
  %3652 = load i16, i16* %3651, align 2, !tbaa !382
  %3653 = insertelement <64 x i16> %3648, i16 %3652, i32 1
  %3654 = extractelement <64 x i32> %3643, i32 2
  %3655 = sext i32 %3654 to i64
  %3656 = getelementptr inbounds i16, i16* %65, i64 %3655
  %3657 = load i16, i16* %3656, align 2, !tbaa !382
  %3658 = insertelement <64 x i16> %3653, i16 %3657, i32 2
  %3659 = extractelement <64 x i32> %3643, i32 3
  %3660 = sext i32 %3659 to i64
  %3661 = getelementptr inbounds i16, i16* %65, i64 %3660
  %3662 = load i16, i16* %3661, align 2, !tbaa !382
  %3663 = insertelement <64 x i16> %3658, i16 %3662, i32 3
  %3664 = extractelement <64 x i32> %3643, i32 4
  %3665 = sext i32 %3664 to i64
  %3666 = getelementptr inbounds i16, i16* %65, i64 %3665
  %3667 = load i16, i16* %3666, align 2, !tbaa !382
  %3668 = insertelement <64 x i16> %3663, i16 %3667, i32 4
  %3669 = extractelement <64 x i32> %3643, i32 5
  %3670 = sext i32 %3669 to i64
  %3671 = getelementptr inbounds i16, i16* %65, i64 %3670
  %3672 = load i16, i16* %3671, align 2, !tbaa !382
  %3673 = insertelement <64 x i16> %3668, i16 %3672, i32 5
  %3674 = extractelement <64 x i32> %3643, i32 6
  %3675 = sext i32 %3674 to i64
  %3676 = getelementptr inbounds i16, i16* %65, i64 %3675
  %3677 = load i16, i16* %3676, align 2, !tbaa !382
  %3678 = insertelement <64 x i16> %3673, i16 %3677, i32 6
  %3679 = extractelement <64 x i32> %3643, i32 7
  %3680 = sext i32 %3679 to i64
  %3681 = getelementptr inbounds i16, i16* %65, i64 %3680
  %3682 = load i16, i16* %3681, align 2, !tbaa !382
  %3683 = insertelement <64 x i16> %3678, i16 %3682, i32 7
  %3684 = extractelement <64 x i32> %3643, i32 8
  %3685 = sext i32 %3684 to i64
  %3686 = getelementptr inbounds i16, i16* %65, i64 %3685
  %3687 = load i16, i16* %3686, align 2, !tbaa !382
  %3688 = insertelement <64 x i16> %3683, i16 %3687, i32 8
  %3689 = extractelement <64 x i32> %3643, i32 9
  %3690 = sext i32 %3689 to i64
  %3691 = getelementptr inbounds i16, i16* %65, i64 %3690
  %3692 = load i16, i16* %3691, align 2, !tbaa !382
  %3693 = insertelement <64 x i16> %3688, i16 %3692, i32 9
  %3694 = extractelement <64 x i32> %3643, i32 10
  %3695 = sext i32 %3694 to i64
  %3696 = getelementptr inbounds i16, i16* %65, i64 %3695
  %3697 = load i16, i16* %3696, align 2, !tbaa !382
  %3698 = insertelement <64 x i16> %3693, i16 %3697, i32 10
  %3699 = extractelement <64 x i32> %3643, i32 11
  %3700 = sext i32 %3699 to i64
  %3701 = getelementptr inbounds i16, i16* %65, i64 %3700
  %3702 = load i16, i16* %3701, align 2, !tbaa !382
  %3703 = insertelement <64 x i16> %3698, i16 %3702, i32 11
  %3704 = extractelement <64 x i32> %3643, i32 12
  %3705 = sext i32 %3704 to i64
  %3706 = getelementptr inbounds i16, i16* %65, i64 %3705
  %3707 = load i16, i16* %3706, align 2, !tbaa !382
  %3708 = insertelement <64 x i16> %3703, i16 %3707, i32 12
  %3709 = extractelement <64 x i32> %3643, i32 13
  %3710 = sext i32 %3709 to i64
  %3711 = getelementptr inbounds i16, i16* %65, i64 %3710
  %3712 = load i16, i16* %3711, align 2, !tbaa !382
  %3713 = insertelement <64 x i16> %3708, i16 %3712, i32 13
  %3714 = extractelement <64 x i32> %3643, i32 14
  %3715 = sext i32 %3714 to i64
  %3716 = getelementptr inbounds i16, i16* %65, i64 %3715
  %3717 = load i16, i16* %3716, align 2, !tbaa !382
  %3718 = insertelement <64 x i16> %3713, i16 %3717, i32 14
  %3719 = extractelement <64 x i32> %3643, i32 15
  %3720 = sext i32 %3719 to i64
  %3721 = getelementptr inbounds i16, i16* %65, i64 %3720
  %3722 = load i16, i16* %3721, align 2, !tbaa !382
  %3723 = insertelement <64 x i16> %3718, i16 %3722, i32 15
  %3724 = extractelement <64 x i32> %3643, i32 16
  %3725 = sext i32 %3724 to i64
  %3726 = getelementptr inbounds i16, i16* %65, i64 %3725
  %3727 = load i16, i16* %3726, align 2, !tbaa !382
  %3728 = insertelement <64 x i16> %3723, i16 %3727, i32 16
  %3729 = extractelement <64 x i32> %3643, i32 17
  %3730 = sext i32 %3729 to i64
  %3731 = getelementptr inbounds i16, i16* %65, i64 %3730
  %3732 = load i16, i16* %3731, align 2, !tbaa !382
  %3733 = insertelement <64 x i16> %3728, i16 %3732, i32 17
  %3734 = extractelement <64 x i32> %3643, i32 18
  %3735 = sext i32 %3734 to i64
  %3736 = getelementptr inbounds i16, i16* %65, i64 %3735
  %3737 = load i16, i16* %3736, align 2, !tbaa !382
  %3738 = insertelement <64 x i16> %3733, i16 %3737, i32 18
  %3739 = extractelement <64 x i32> %3643, i32 19
  %3740 = sext i32 %3739 to i64
  %3741 = getelementptr inbounds i16, i16* %65, i64 %3740
  %3742 = load i16, i16* %3741, align 2, !tbaa !382
  %3743 = insertelement <64 x i16> %3738, i16 %3742, i32 19
  %3744 = extractelement <64 x i32> %3643, i32 20
  %3745 = sext i32 %3744 to i64
  %3746 = getelementptr inbounds i16, i16* %65, i64 %3745
  %3747 = load i16, i16* %3746, align 2, !tbaa !382
  %3748 = insertelement <64 x i16> %3743, i16 %3747, i32 20
  %3749 = extractelement <64 x i32> %3643, i32 21
  %3750 = sext i32 %3749 to i64
  %3751 = getelementptr inbounds i16, i16* %65, i64 %3750
  %3752 = load i16, i16* %3751, align 2, !tbaa !382
  %3753 = insertelement <64 x i16> %3748, i16 %3752, i32 21
  %3754 = extractelement <64 x i32> %3643, i32 22
  %3755 = sext i32 %3754 to i64
  %3756 = getelementptr inbounds i16, i16* %65, i64 %3755
  %3757 = load i16, i16* %3756, align 2, !tbaa !382
  %3758 = insertelement <64 x i16> %3753, i16 %3757, i32 22
  %3759 = extractelement <64 x i32> %3643, i32 23
  %3760 = sext i32 %3759 to i64
  %3761 = getelementptr inbounds i16, i16* %65, i64 %3760
  %3762 = load i16, i16* %3761, align 2, !tbaa !382
  %3763 = insertelement <64 x i16> %3758, i16 %3762, i32 23
  %3764 = extractelement <64 x i32> %3643, i32 24
  %3765 = sext i32 %3764 to i64
  %3766 = getelementptr inbounds i16, i16* %65, i64 %3765
  %3767 = load i16, i16* %3766, align 2, !tbaa !382
  %3768 = insertelement <64 x i16> %3763, i16 %3767, i32 24
  %3769 = extractelement <64 x i32> %3643, i32 25
  %3770 = sext i32 %3769 to i64
  %3771 = getelementptr inbounds i16, i16* %65, i64 %3770
  %3772 = load i16, i16* %3771, align 2, !tbaa !382
  %3773 = insertelement <64 x i16> %3768, i16 %3772, i32 25
  %3774 = extractelement <64 x i32> %3643, i32 26
  %3775 = sext i32 %3774 to i64
  %3776 = getelementptr inbounds i16, i16* %65, i64 %3775
  %3777 = load i16, i16* %3776, align 2, !tbaa !382
  %3778 = insertelement <64 x i16> %3773, i16 %3777, i32 26
  %3779 = extractelement <64 x i32> %3643, i32 27
  %3780 = sext i32 %3779 to i64
  %3781 = getelementptr inbounds i16, i16* %65, i64 %3780
  %3782 = load i16, i16* %3781, align 2, !tbaa !382
  %3783 = insertelement <64 x i16> %3778, i16 %3782, i32 27
  %3784 = extractelement <64 x i32> %3643, i32 28
  %3785 = sext i32 %3784 to i64
  %3786 = getelementptr inbounds i16, i16* %65, i64 %3785
  %3787 = load i16, i16* %3786, align 2, !tbaa !382
  %3788 = insertelement <64 x i16> %3783, i16 %3787, i32 28
  %3789 = extractelement <64 x i32> %3643, i32 29
  %3790 = sext i32 %3789 to i64
  %3791 = getelementptr inbounds i16, i16* %65, i64 %3790
  %3792 = load i16, i16* %3791, align 2, !tbaa !382
  %3793 = insertelement <64 x i16> %3788, i16 %3792, i32 29
  %3794 = extractelement <64 x i32> %3643, i32 30
  %3795 = sext i32 %3794 to i64
  %3796 = getelementptr inbounds i16, i16* %65, i64 %3795
  %3797 = load i16, i16* %3796, align 2, !tbaa !382
  %3798 = insertelement <64 x i16> %3793, i16 %3797, i32 30
  %3799 = extractelement <64 x i32> %3643, i32 31
  %3800 = sext i32 %3799 to i64
  %3801 = getelementptr inbounds i16, i16* %65, i64 %3800
  %3802 = load i16, i16* %3801, align 2, !tbaa !382
  %3803 = insertelement <64 x i16> %3798, i16 %3802, i32 31
  %3804 = extractelement <64 x i32> %3643, i32 32
  %3805 = sext i32 %3804 to i64
  %3806 = getelementptr inbounds i16, i16* %65, i64 %3805
  %3807 = load i16, i16* %3806, align 2, !tbaa !382
  %3808 = insertelement <64 x i16> %3803, i16 %3807, i32 32
  %3809 = extractelement <64 x i32> %3643, i32 33
  %3810 = sext i32 %3809 to i64
  %3811 = getelementptr inbounds i16, i16* %65, i64 %3810
  %3812 = load i16, i16* %3811, align 2, !tbaa !382
  %3813 = insertelement <64 x i16> %3808, i16 %3812, i32 33
  %3814 = extractelement <64 x i32> %3643, i32 34
  %3815 = sext i32 %3814 to i64
  %3816 = getelementptr inbounds i16, i16* %65, i64 %3815
  %3817 = load i16, i16* %3816, align 2, !tbaa !382
  %3818 = insertelement <64 x i16> %3813, i16 %3817, i32 34
  %3819 = extractelement <64 x i32> %3643, i32 35
  %3820 = sext i32 %3819 to i64
  %3821 = getelementptr inbounds i16, i16* %65, i64 %3820
  %3822 = load i16, i16* %3821, align 2, !tbaa !382
  %3823 = insertelement <64 x i16> %3818, i16 %3822, i32 35
  %3824 = extractelement <64 x i32> %3643, i32 36
  %3825 = sext i32 %3824 to i64
  %3826 = getelementptr inbounds i16, i16* %65, i64 %3825
  %3827 = load i16, i16* %3826, align 2, !tbaa !382
  %3828 = insertelement <64 x i16> %3823, i16 %3827, i32 36
  %3829 = extractelement <64 x i32> %3643, i32 37
  %3830 = sext i32 %3829 to i64
  %3831 = getelementptr inbounds i16, i16* %65, i64 %3830
  %3832 = load i16, i16* %3831, align 2, !tbaa !382
  %3833 = insertelement <64 x i16> %3828, i16 %3832, i32 37
  %3834 = extractelement <64 x i32> %3643, i32 38
  %3835 = sext i32 %3834 to i64
  %3836 = getelementptr inbounds i16, i16* %65, i64 %3835
  %3837 = load i16, i16* %3836, align 2, !tbaa !382
  %3838 = insertelement <64 x i16> %3833, i16 %3837, i32 38
  %3839 = extractelement <64 x i32> %3643, i32 39
  %3840 = sext i32 %3839 to i64
  %3841 = getelementptr inbounds i16, i16* %65, i64 %3840
  %3842 = load i16, i16* %3841, align 2, !tbaa !382
  %3843 = insertelement <64 x i16> %3838, i16 %3842, i32 39
  %3844 = extractelement <64 x i32> %3643, i32 40
  %3845 = sext i32 %3844 to i64
  %3846 = getelementptr inbounds i16, i16* %65, i64 %3845
  %3847 = load i16, i16* %3846, align 2, !tbaa !382
  %3848 = insertelement <64 x i16> %3843, i16 %3847, i32 40
  %3849 = extractelement <64 x i32> %3643, i32 41
  %3850 = sext i32 %3849 to i64
  %3851 = getelementptr inbounds i16, i16* %65, i64 %3850
  %3852 = load i16, i16* %3851, align 2, !tbaa !382
  %3853 = insertelement <64 x i16> %3848, i16 %3852, i32 41
  %3854 = extractelement <64 x i32> %3643, i32 42
  %3855 = sext i32 %3854 to i64
  %3856 = getelementptr inbounds i16, i16* %65, i64 %3855
  %3857 = load i16, i16* %3856, align 2, !tbaa !382
  %3858 = insertelement <64 x i16> %3853, i16 %3857, i32 42
  %3859 = extractelement <64 x i32> %3643, i32 43
  %3860 = sext i32 %3859 to i64
  %3861 = getelementptr inbounds i16, i16* %65, i64 %3860
  %3862 = load i16, i16* %3861, align 2, !tbaa !382
  %3863 = insertelement <64 x i16> %3858, i16 %3862, i32 43
  %3864 = extractelement <64 x i32> %3643, i32 44
  %3865 = sext i32 %3864 to i64
  %3866 = getelementptr inbounds i16, i16* %65, i64 %3865
  %3867 = load i16, i16* %3866, align 2, !tbaa !382
  %3868 = insertelement <64 x i16> %3863, i16 %3867, i32 44
  %3869 = extractelement <64 x i32> %3643, i32 45
  %3870 = sext i32 %3869 to i64
  %3871 = getelementptr inbounds i16, i16* %65, i64 %3870
  %3872 = load i16, i16* %3871, align 2, !tbaa !382
  %3873 = insertelement <64 x i16> %3868, i16 %3872, i32 45
  %3874 = extractelement <64 x i32> %3643, i32 46
  %3875 = sext i32 %3874 to i64
  %3876 = getelementptr inbounds i16, i16* %65, i64 %3875
  %3877 = load i16, i16* %3876, align 2, !tbaa !382
  %3878 = insertelement <64 x i16> %3873, i16 %3877, i32 46
  %3879 = extractelement <64 x i32> %3643, i32 47
  %3880 = sext i32 %3879 to i64
  %3881 = getelementptr inbounds i16, i16* %65, i64 %3880
  %3882 = load i16, i16* %3881, align 2, !tbaa !382
  %3883 = insertelement <64 x i16> %3878, i16 %3882, i32 47
  %3884 = extractelement <64 x i32> %3643, i32 48
  %3885 = sext i32 %3884 to i64
  %3886 = getelementptr inbounds i16, i16* %65, i64 %3885
  %3887 = load i16, i16* %3886, align 2, !tbaa !382
  %3888 = insertelement <64 x i16> %3883, i16 %3887, i32 48
  %3889 = extractelement <64 x i32> %3643, i32 49
  %3890 = sext i32 %3889 to i64
  %3891 = getelementptr inbounds i16, i16* %65, i64 %3890
  %3892 = load i16, i16* %3891, align 2, !tbaa !382
  %3893 = insertelement <64 x i16> %3888, i16 %3892, i32 49
  %3894 = extractelement <64 x i32> %3643, i32 50
  %3895 = sext i32 %3894 to i64
  %3896 = getelementptr inbounds i16, i16* %65, i64 %3895
  %3897 = load i16, i16* %3896, align 2, !tbaa !382
  %3898 = insertelement <64 x i16> %3893, i16 %3897, i32 50
  %3899 = extractelement <64 x i32> %3643, i32 51
  %3900 = sext i32 %3899 to i64
  %3901 = getelementptr inbounds i16, i16* %65, i64 %3900
  %3902 = load i16, i16* %3901, align 2, !tbaa !382
  %3903 = insertelement <64 x i16> %3898, i16 %3902, i32 51
  %3904 = extractelement <64 x i32> %3643, i32 52
  %3905 = sext i32 %3904 to i64
  %3906 = getelementptr inbounds i16, i16* %65, i64 %3905
  %3907 = load i16, i16* %3906, align 2, !tbaa !382
  %3908 = insertelement <64 x i16> %3903, i16 %3907, i32 52
  %3909 = extractelement <64 x i32> %3643, i32 53
  %3910 = sext i32 %3909 to i64
  %3911 = getelementptr inbounds i16, i16* %65, i64 %3910
  %3912 = load i16, i16* %3911, align 2, !tbaa !382
  %3913 = insertelement <64 x i16> %3908, i16 %3912, i32 53
  %3914 = extractelement <64 x i32> %3643, i32 54
  %3915 = sext i32 %3914 to i64
  %3916 = getelementptr inbounds i16, i16* %65, i64 %3915
  %3917 = load i16, i16* %3916, align 2, !tbaa !382
  %3918 = insertelement <64 x i16> %3913, i16 %3917, i32 54
  %3919 = extractelement <64 x i32> %3643, i32 55
  %3920 = sext i32 %3919 to i64
  %3921 = getelementptr inbounds i16, i16* %65, i64 %3920
  %3922 = load i16, i16* %3921, align 2, !tbaa !382
  %3923 = insertelement <64 x i16> %3918, i16 %3922, i32 55
  %3924 = extractelement <64 x i32> %3643, i32 56
  %3925 = sext i32 %3924 to i64
  %3926 = getelementptr inbounds i16, i16* %65, i64 %3925
  %3927 = load i16, i16* %3926, align 2, !tbaa !382
  %3928 = insertelement <64 x i16> %3923, i16 %3927, i32 56
  %3929 = extractelement <64 x i32> %3643, i32 57
  %3930 = sext i32 %3929 to i64
  %3931 = getelementptr inbounds i16, i16* %65, i64 %3930
  %3932 = load i16, i16* %3931, align 2, !tbaa !382
  %3933 = insertelement <64 x i16> %3928, i16 %3932, i32 57
  %3934 = extractelement <64 x i32> %3643, i32 58
  %3935 = sext i32 %3934 to i64
  %3936 = getelementptr inbounds i16, i16* %65, i64 %3935
  %3937 = load i16, i16* %3936, align 2, !tbaa !382
  %3938 = insertelement <64 x i16> %3933, i16 %3937, i32 58
  %3939 = extractelement <64 x i32> %3643, i32 59
  %3940 = sext i32 %3939 to i64
  %3941 = getelementptr inbounds i16, i16* %65, i64 %3940
  %3942 = load i16, i16* %3941, align 2, !tbaa !382
  %3943 = insertelement <64 x i16> %3938, i16 %3942, i32 59
  %3944 = extractelement <64 x i32> %3643, i32 60
  %3945 = sext i32 %3944 to i64
  %3946 = getelementptr inbounds i16, i16* %65, i64 %3945
  %3947 = load i16, i16* %3946, align 2, !tbaa !382
  %3948 = insertelement <64 x i16> %3943, i16 %3947, i32 60
  %3949 = extractelement <64 x i32> %3643, i32 61
  %3950 = sext i32 %3949 to i64
  %3951 = getelementptr inbounds i16, i16* %65, i64 %3950
  %3952 = load i16, i16* %3951, align 2, !tbaa !382
  %3953 = insertelement <64 x i16> %3948, i16 %3952, i32 61
  %3954 = extractelement <64 x i32> %3643, i32 62
  %3955 = sext i32 %3954 to i64
  %3956 = getelementptr inbounds i16, i16* %65, i64 %3955
  %3957 = load i16, i16* %3956, align 2, !tbaa !382
  %3958 = insertelement <64 x i16> %3953, i16 %3957, i32 62
  %3959 = extractelement <64 x i32> %3643, i32 63
  %3960 = sext i32 %3959 to i64
  %3961 = getelementptr inbounds i16, i16* %65, i64 %3960
  %3962 = load i16, i16* %3961, align 2, !tbaa !382
  %3963 = insertelement <64 x i16> %3958, i16 %3962, i32 63
  %3964 = add nsw i32 %blur_x.s0.x.v1.base.s5, -61
  %3965 = insertelement <64 x i32> undef, i32 %3964, i32 0
  %3966 = shufflevector <64 x i32> %3965, <64 x i32> undef, <64 x i32> zeroinitializer
  %3967 = add nsw <64 x i32> %3966, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3968 = shufflevector <64 x i32> %3967, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3969 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3968, <4 x i32> %62)
  %3970 = shufflevector <64 x i32> %3967, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3971 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3970, <4 x i32> %62)
  %3972 = shufflevector <64 x i32> %3967, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3973 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3972, <4 x i32> %62)
  %3974 = shufflevector <64 x i32> %3967, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3975 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3974, <4 x i32> %62)
  %3976 = shufflevector <64 x i32> %3967, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %3977 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3976, <4 x i32> %62)
  %3978 = shufflevector <64 x i32> %3967, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %3979 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3978, <4 x i32> %62)
  %3980 = shufflevector <64 x i32> %3967, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %3981 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3980, <4 x i32> %62)
  %3982 = shufflevector <64 x i32> %3967, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %3983 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3982, <4 x i32> %62)
  %3984 = shufflevector <64 x i32> %3967, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %3985 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3984, <4 x i32> %62)
  %3986 = shufflevector <64 x i32> %3967, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %3987 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3986, <4 x i32> %62)
  %3988 = shufflevector <64 x i32> %3967, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %3989 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3988, <4 x i32> %62)
  %3990 = shufflevector <64 x i32> %3967, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %3991 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3990, <4 x i32> %62)
  %3992 = shufflevector <64 x i32> %3967, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %3993 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3992, <4 x i32> %62)
  %3994 = shufflevector <64 x i32> %3967, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %3995 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3994, <4 x i32> %62)
  %3996 = shufflevector <64 x i32> %3967, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %3997 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3996, <4 x i32> %62)
  %3998 = shufflevector <64 x i32> %3967, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3999 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3998, <4 x i32> %62)
  %4000 = shufflevector <4 x i32> %3999, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %4001 = shufflevector <8 x i32> %4000, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4002 = shufflevector <16 x i32> %4001, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %4003 = shufflevector <32 x i32> %4002, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %4004 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3969, <4 x i32> %64)
  %4005 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3971, <4 x i32> %64)
  %4006 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3973, <4 x i32> %64)
  %4007 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3975, <4 x i32> %64)
  %4008 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3977, <4 x i32> %64)
  %4009 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3979, <4 x i32> %64)
  %4010 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3981, <4 x i32> %64)
  %4011 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3983, <4 x i32> %64)
  %4012 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3985, <4 x i32> %64)
  %4013 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3987, <4 x i32> %64)
  %4014 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3989, <4 x i32> %64)
  %4015 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3991, <4 x i32> %64)
  %4016 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3993, <4 x i32> %64)
  %4017 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3995, <4 x i32> %64)
  %4018 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3997, <4 x i32> %64)
  %4019 = shufflevector <64 x i32> %4003, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4020 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4019, <4 x i32> %64)
  %4021 = shufflevector <4 x i32> %4004, <4 x i32> %4005, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4022 = shufflevector <4 x i32> %4006, <4 x i32> %4007, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4023 = shufflevector <4 x i32> %4008, <4 x i32> %4009, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4024 = shufflevector <4 x i32> %4010, <4 x i32> %4011, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4025 = shufflevector <4 x i32> %4012, <4 x i32> %4013, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4026 = shufflevector <4 x i32> %4014, <4 x i32> %4015, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4027 = shufflevector <4 x i32> %4016, <4 x i32> %4017, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4028 = shufflevector <4 x i32> %4018, <4 x i32> %4020, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4029 = shufflevector <8 x i32> %4021, <8 x i32> %4022, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4030 = shufflevector <8 x i32> %4023, <8 x i32> %4024, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4031 = shufflevector <8 x i32> %4025, <8 x i32> %4026, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4032 = shufflevector <8 x i32> %4027, <8 x i32> %4028, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4033 = shufflevector <16 x i32> %4029, <16 x i32> %4030, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4034 = shufflevector <16 x i32> %4031, <16 x i32> %4032, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4035 = shufflevector <32 x i32> %4033, <32 x i32> %4034, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4036 = add nsw <64 x i32> %4035, %t201
  %4037 = extractelement <64 x i32> %4036, i32 0
  %4038 = sext i32 %4037 to i64
  %4039 = getelementptr inbounds i16, i16* %65, i64 %4038
  %4040 = load i16, i16* %4039, align 2, !tbaa !382
  %4041 = insertelement <64 x i16> undef, i16 %4040, i32 0
  %4042 = extractelement <64 x i32> %4036, i32 1
  %4043 = sext i32 %4042 to i64
  %4044 = getelementptr inbounds i16, i16* %65, i64 %4043
  %4045 = load i16, i16* %4044, align 2, !tbaa !382
  %4046 = insertelement <64 x i16> %4041, i16 %4045, i32 1
  %4047 = extractelement <64 x i32> %4036, i32 2
  %4048 = sext i32 %4047 to i64
  %4049 = getelementptr inbounds i16, i16* %65, i64 %4048
  %4050 = load i16, i16* %4049, align 2, !tbaa !382
  %4051 = insertelement <64 x i16> %4046, i16 %4050, i32 2
  %4052 = extractelement <64 x i32> %4036, i32 3
  %4053 = sext i32 %4052 to i64
  %4054 = getelementptr inbounds i16, i16* %65, i64 %4053
  %4055 = load i16, i16* %4054, align 2, !tbaa !382
  %4056 = insertelement <64 x i16> %4051, i16 %4055, i32 3
  %4057 = extractelement <64 x i32> %4036, i32 4
  %4058 = sext i32 %4057 to i64
  %4059 = getelementptr inbounds i16, i16* %65, i64 %4058
  %4060 = load i16, i16* %4059, align 2, !tbaa !382
  %4061 = insertelement <64 x i16> %4056, i16 %4060, i32 4
  %4062 = extractelement <64 x i32> %4036, i32 5
  %4063 = sext i32 %4062 to i64
  %4064 = getelementptr inbounds i16, i16* %65, i64 %4063
  %4065 = load i16, i16* %4064, align 2, !tbaa !382
  %4066 = insertelement <64 x i16> %4061, i16 %4065, i32 5
  %4067 = extractelement <64 x i32> %4036, i32 6
  %4068 = sext i32 %4067 to i64
  %4069 = getelementptr inbounds i16, i16* %65, i64 %4068
  %4070 = load i16, i16* %4069, align 2, !tbaa !382
  %4071 = insertelement <64 x i16> %4066, i16 %4070, i32 6
  %4072 = extractelement <64 x i32> %4036, i32 7
  %4073 = sext i32 %4072 to i64
  %4074 = getelementptr inbounds i16, i16* %65, i64 %4073
  %4075 = load i16, i16* %4074, align 2, !tbaa !382
  %4076 = insertelement <64 x i16> %4071, i16 %4075, i32 7
  %4077 = extractelement <64 x i32> %4036, i32 8
  %4078 = sext i32 %4077 to i64
  %4079 = getelementptr inbounds i16, i16* %65, i64 %4078
  %4080 = load i16, i16* %4079, align 2, !tbaa !382
  %4081 = insertelement <64 x i16> %4076, i16 %4080, i32 8
  %4082 = extractelement <64 x i32> %4036, i32 9
  %4083 = sext i32 %4082 to i64
  %4084 = getelementptr inbounds i16, i16* %65, i64 %4083
  %4085 = load i16, i16* %4084, align 2, !tbaa !382
  %4086 = insertelement <64 x i16> %4081, i16 %4085, i32 9
  %4087 = extractelement <64 x i32> %4036, i32 10
  %4088 = sext i32 %4087 to i64
  %4089 = getelementptr inbounds i16, i16* %65, i64 %4088
  %4090 = load i16, i16* %4089, align 2, !tbaa !382
  %4091 = insertelement <64 x i16> %4086, i16 %4090, i32 10
  %4092 = extractelement <64 x i32> %4036, i32 11
  %4093 = sext i32 %4092 to i64
  %4094 = getelementptr inbounds i16, i16* %65, i64 %4093
  %4095 = load i16, i16* %4094, align 2, !tbaa !382
  %4096 = insertelement <64 x i16> %4091, i16 %4095, i32 11
  %4097 = extractelement <64 x i32> %4036, i32 12
  %4098 = sext i32 %4097 to i64
  %4099 = getelementptr inbounds i16, i16* %65, i64 %4098
  %4100 = load i16, i16* %4099, align 2, !tbaa !382
  %4101 = insertelement <64 x i16> %4096, i16 %4100, i32 12
  %4102 = extractelement <64 x i32> %4036, i32 13
  %4103 = sext i32 %4102 to i64
  %4104 = getelementptr inbounds i16, i16* %65, i64 %4103
  %4105 = load i16, i16* %4104, align 2, !tbaa !382
  %4106 = insertelement <64 x i16> %4101, i16 %4105, i32 13
  %4107 = extractelement <64 x i32> %4036, i32 14
  %4108 = sext i32 %4107 to i64
  %4109 = getelementptr inbounds i16, i16* %65, i64 %4108
  %4110 = load i16, i16* %4109, align 2, !tbaa !382
  %4111 = insertelement <64 x i16> %4106, i16 %4110, i32 14
  %4112 = extractelement <64 x i32> %4036, i32 15
  %4113 = sext i32 %4112 to i64
  %4114 = getelementptr inbounds i16, i16* %65, i64 %4113
  %4115 = load i16, i16* %4114, align 2, !tbaa !382
  %4116 = insertelement <64 x i16> %4111, i16 %4115, i32 15
  %4117 = extractelement <64 x i32> %4036, i32 16
  %4118 = sext i32 %4117 to i64
  %4119 = getelementptr inbounds i16, i16* %65, i64 %4118
  %4120 = load i16, i16* %4119, align 2, !tbaa !382
  %4121 = insertelement <64 x i16> %4116, i16 %4120, i32 16
  %4122 = extractelement <64 x i32> %4036, i32 17
  %4123 = sext i32 %4122 to i64
  %4124 = getelementptr inbounds i16, i16* %65, i64 %4123
  %4125 = load i16, i16* %4124, align 2, !tbaa !382
  %4126 = insertelement <64 x i16> %4121, i16 %4125, i32 17
  %4127 = extractelement <64 x i32> %4036, i32 18
  %4128 = sext i32 %4127 to i64
  %4129 = getelementptr inbounds i16, i16* %65, i64 %4128
  %4130 = load i16, i16* %4129, align 2, !tbaa !382
  %4131 = insertelement <64 x i16> %4126, i16 %4130, i32 18
  %4132 = extractelement <64 x i32> %4036, i32 19
  %4133 = sext i32 %4132 to i64
  %4134 = getelementptr inbounds i16, i16* %65, i64 %4133
  %4135 = load i16, i16* %4134, align 2, !tbaa !382
  %4136 = insertelement <64 x i16> %4131, i16 %4135, i32 19
  %4137 = extractelement <64 x i32> %4036, i32 20
  %4138 = sext i32 %4137 to i64
  %4139 = getelementptr inbounds i16, i16* %65, i64 %4138
  %4140 = load i16, i16* %4139, align 2, !tbaa !382
  %4141 = insertelement <64 x i16> %4136, i16 %4140, i32 20
  %4142 = extractelement <64 x i32> %4036, i32 21
  %4143 = sext i32 %4142 to i64
  %4144 = getelementptr inbounds i16, i16* %65, i64 %4143
  %4145 = load i16, i16* %4144, align 2, !tbaa !382
  %4146 = insertelement <64 x i16> %4141, i16 %4145, i32 21
  %4147 = extractelement <64 x i32> %4036, i32 22
  %4148 = sext i32 %4147 to i64
  %4149 = getelementptr inbounds i16, i16* %65, i64 %4148
  %4150 = load i16, i16* %4149, align 2, !tbaa !382
  %4151 = insertelement <64 x i16> %4146, i16 %4150, i32 22
  %4152 = extractelement <64 x i32> %4036, i32 23
  %4153 = sext i32 %4152 to i64
  %4154 = getelementptr inbounds i16, i16* %65, i64 %4153
  %4155 = load i16, i16* %4154, align 2, !tbaa !382
  %4156 = insertelement <64 x i16> %4151, i16 %4155, i32 23
  %4157 = extractelement <64 x i32> %4036, i32 24
  %4158 = sext i32 %4157 to i64
  %4159 = getelementptr inbounds i16, i16* %65, i64 %4158
  %4160 = load i16, i16* %4159, align 2, !tbaa !382
  %4161 = insertelement <64 x i16> %4156, i16 %4160, i32 24
  %4162 = extractelement <64 x i32> %4036, i32 25
  %4163 = sext i32 %4162 to i64
  %4164 = getelementptr inbounds i16, i16* %65, i64 %4163
  %4165 = load i16, i16* %4164, align 2, !tbaa !382
  %4166 = insertelement <64 x i16> %4161, i16 %4165, i32 25
  %4167 = extractelement <64 x i32> %4036, i32 26
  %4168 = sext i32 %4167 to i64
  %4169 = getelementptr inbounds i16, i16* %65, i64 %4168
  %4170 = load i16, i16* %4169, align 2, !tbaa !382
  %4171 = insertelement <64 x i16> %4166, i16 %4170, i32 26
  %4172 = extractelement <64 x i32> %4036, i32 27
  %4173 = sext i32 %4172 to i64
  %4174 = getelementptr inbounds i16, i16* %65, i64 %4173
  %4175 = load i16, i16* %4174, align 2, !tbaa !382
  %4176 = insertelement <64 x i16> %4171, i16 %4175, i32 27
  %4177 = extractelement <64 x i32> %4036, i32 28
  %4178 = sext i32 %4177 to i64
  %4179 = getelementptr inbounds i16, i16* %65, i64 %4178
  %4180 = load i16, i16* %4179, align 2, !tbaa !382
  %4181 = insertelement <64 x i16> %4176, i16 %4180, i32 28
  %4182 = extractelement <64 x i32> %4036, i32 29
  %4183 = sext i32 %4182 to i64
  %4184 = getelementptr inbounds i16, i16* %65, i64 %4183
  %4185 = load i16, i16* %4184, align 2, !tbaa !382
  %4186 = insertelement <64 x i16> %4181, i16 %4185, i32 29
  %4187 = extractelement <64 x i32> %4036, i32 30
  %4188 = sext i32 %4187 to i64
  %4189 = getelementptr inbounds i16, i16* %65, i64 %4188
  %4190 = load i16, i16* %4189, align 2, !tbaa !382
  %4191 = insertelement <64 x i16> %4186, i16 %4190, i32 30
  %4192 = extractelement <64 x i32> %4036, i32 31
  %4193 = sext i32 %4192 to i64
  %4194 = getelementptr inbounds i16, i16* %65, i64 %4193
  %4195 = load i16, i16* %4194, align 2, !tbaa !382
  %4196 = insertelement <64 x i16> %4191, i16 %4195, i32 31
  %4197 = extractelement <64 x i32> %4036, i32 32
  %4198 = sext i32 %4197 to i64
  %4199 = getelementptr inbounds i16, i16* %65, i64 %4198
  %4200 = load i16, i16* %4199, align 2, !tbaa !382
  %4201 = insertelement <64 x i16> %4196, i16 %4200, i32 32
  %4202 = extractelement <64 x i32> %4036, i32 33
  %4203 = sext i32 %4202 to i64
  %4204 = getelementptr inbounds i16, i16* %65, i64 %4203
  %4205 = load i16, i16* %4204, align 2, !tbaa !382
  %4206 = insertelement <64 x i16> %4201, i16 %4205, i32 33
  %4207 = extractelement <64 x i32> %4036, i32 34
  %4208 = sext i32 %4207 to i64
  %4209 = getelementptr inbounds i16, i16* %65, i64 %4208
  %4210 = load i16, i16* %4209, align 2, !tbaa !382
  %4211 = insertelement <64 x i16> %4206, i16 %4210, i32 34
  %4212 = extractelement <64 x i32> %4036, i32 35
  %4213 = sext i32 %4212 to i64
  %4214 = getelementptr inbounds i16, i16* %65, i64 %4213
  %4215 = load i16, i16* %4214, align 2, !tbaa !382
  %4216 = insertelement <64 x i16> %4211, i16 %4215, i32 35
  %4217 = extractelement <64 x i32> %4036, i32 36
  %4218 = sext i32 %4217 to i64
  %4219 = getelementptr inbounds i16, i16* %65, i64 %4218
  %4220 = load i16, i16* %4219, align 2, !tbaa !382
  %4221 = insertelement <64 x i16> %4216, i16 %4220, i32 36
  %4222 = extractelement <64 x i32> %4036, i32 37
  %4223 = sext i32 %4222 to i64
  %4224 = getelementptr inbounds i16, i16* %65, i64 %4223
  %4225 = load i16, i16* %4224, align 2, !tbaa !382
  %4226 = insertelement <64 x i16> %4221, i16 %4225, i32 37
  %4227 = extractelement <64 x i32> %4036, i32 38
  %4228 = sext i32 %4227 to i64
  %4229 = getelementptr inbounds i16, i16* %65, i64 %4228
  %4230 = load i16, i16* %4229, align 2, !tbaa !382
  %4231 = insertelement <64 x i16> %4226, i16 %4230, i32 38
  %4232 = extractelement <64 x i32> %4036, i32 39
  %4233 = sext i32 %4232 to i64
  %4234 = getelementptr inbounds i16, i16* %65, i64 %4233
  %4235 = load i16, i16* %4234, align 2, !tbaa !382
  %4236 = insertelement <64 x i16> %4231, i16 %4235, i32 39
  %4237 = extractelement <64 x i32> %4036, i32 40
  %4238 = sext i32 %4237 to i64
  %4239 = getelementptr inbounds i16, i16* %65, i64 %4238
  %4240 = load i16, i16* %4239, align 2, !tbaa !382
  %4241 = insertelement <64 x i16> %4236, i16 %4240, i32 40
  %4242 = extractelement <64 x i32> %4036, i32 41
  %4243 = sext i32 %4242 to i64
  %4244 = getelementptr inbounds i16, i16* %65, i64 %4243
  %4245 = load i16, i16* %4244, align 2, !tbaa !382
  %4246 = insertelement <64 x i16> %4241, i16 %4245, i32 41
  %4247 = extractelement <64 x i32> %4036, i32 42
  %4248 = sext i32 %4247 to i64
  %4249 = getelementptr inbounds i16, i16* %65, i64 %4248
  %4250 = load i16, i16* %4249, align 2, !tbaa !382
  %4251 = insertelement <64 x i16> %4246, i16 %4250, i32 42
  %4252 = extractelement <64 x i32> %4036, i32 43
  %4253 = sext i32 %4252 to i64
  %4254 = getelementptr inbounds i16, i16* %65, i64 %4253
  %4255 = load i16, i16* %4254, align 2, !tbaa !382
  %4256 = insertelement <64 x i16> %4251, i16 %4255, i32 43
  %4257 = extractelement <64 x i32> %4036, i32 44
  %4258 = sext i32 %4257 to i64
  %4259 = getelementptr inbounds i16, i16* %65, i64 %4258
  %4260 = load i16, i16* %4259, align 2, !tbaa !382
  %4261 = insertelement <64 x i16> %4256, i16 %4260, i32 44
  %4262 = extractelement <64 x i32> %4036, i32 45
  %4263 = sext i32 %4262 to i64
  %4264 = getelementptr inbounds i16, i16* %65, i64 %4263
  %4265 = load i16, i16* %4264, align 2, !tbaa !382
  %4266 = insertelement <64 x i16> %4261, i16 %4265, i32 45
  %4267 = extractelement <64 x i32> %4036, i32 46
  %4268 = sext i32 %4267 to i64
  %4269 = getelementptr inbounds i16, i16* %65, i64 %4268
  %4270 = load i16, i16* %4269, align 2, !tbaa !382
  %4271 = insertelement <64 x i16> %4266, i16 %4270, i32 46
  %4272 = extractelement <64 x i32> %4036, i32 47
  %4273 = sext i32 %4272 to i64
  %4274 = getelementptr inbounds i16, i16* %65, i64 %4273
  %4275 = load i16, i16* %4274, align 2, !tbaa !382
  %4276 = insertelement <64 x i16> %4271, i16 %4275, i32 47
  %4277 = extractelement <64 x i32> %4036, i32 48
  %4278 = sext i32 %4277 to i64
  %4279 = getelementptr inbounds i16, i16* %65, i64 %4278
  %4280 = load i16, i16* %4279, align 2, !tbaa !382
  %4281 = insertelement <64 x i16> %4276, i16 %4280, i32 48
  %4282 = extractelement <64 x i32> %4036, i32 49
  %4283 = sext i32 %4282 to i64
  %4284 = getelementptr inbounds i16, i16* %65, i64 %4283
  %4285 = load i16, i16* %4284, align 2, !tbaa !382
  %4286 = insertelement <64 x i16> %4281, i16 %4285, i32 49
  %4287 = extractelement <64 x i32> %4036, i32 50
  %4288 = sext i32 %4287 to i64
  %4289 = getelementptr inbounds i16, i16* %65, i64 %4288
  %4290 = load i16, i16* %4289, align 2, !tbaa !382
  %4291 = insertelement <64 x i16> %4286, i16 %4290, i32 50
  %4292 = extractelement <64 x i32> %4036, i32 51
  %4293 = sext i32 %4292 to i64
  %4294 = getelementptr inbounds i16, i16* %65, i64 %4293
  %4295 = load i16, i16* %4294, align 2, !tbaa !382
  %4296 = insertelement <64 x i16> %4291, i16 %4295, i32 51
  %4297 = extractelement <64 x i32> %4036, i32 52
  %4298 = sext i32 %4297 to i64
  %4299 = getelementptr inbounds i16, i16* %65, i64 %4298
  %4300 = load i16, i16* %4299, align 2, !tbaa !382
  %4301 = insertelement <64 x i16> %4296, i16 %4300, i32 52
  %4302 = extractelement <64 x i32> %4036, i32 53
  %4303 = sext i32 %4302 to i64
  %4304 = getelementptr inbounds i16, i16* %65, i64 %4303
  %4305 = load i16, i16* %4304, align 2, !tbaa !382
  %4306 = insertelement <64 x i16> %4301, i16 %4305, i32 53
  %4307 = extractelement <64 x i32> %4036, i32 54
  %4308 = sext i32 %4307 to i64
  %4309 = getelementptr inbounds i16, i16* %65, i64 %4308
  %4310 = load i16, i16* %4309, align 2, !tbaa !382
  %4311 = insertelement <64 x i16> %4306, i16 %4310, i32 54
  %4312 = extractelement <64 x i32> %4036, i32 55
  %4313 = sext i32 %4312 to i64
  %4314 = getelementptr inbounds i16, i16* %65, i64 %4313
  %4315 = load i16, i16* %4314, align 2, !tbaa !382
  %4316 = insertelement <64 x i16> %4311, i16 %4315, i32 55
  %4317 = extractelement <64 x i32> %4036, i32 56
  %4318 = sext i32 %4317 to i64
  %4319 = getelementptr inbounds i16, i16* %65, i64 %4318
  %4320 = load i16, i16* %4319, align 2, !tbaa !382
  %4321 = insertelement <64 x i16> %4316, i16 %4320, i32 56
  %4322 = extractelement <64 x i32> %4036, i32 57
  %4323 = sext i32 %4322 to i64
  %4324 = getelementptr inbounds i16, i16* %65, i64 %4323
  %4325 = load i16, i16* %4324, align 2, !tbaa !382
  %4326 = insertelement <64 x i16> %4321, i16 %4325, i32 57
  %4327 = extractelement <64 x i32> %4036, i32 58
  %4328 = sext i32 %4327 to i64
  %4329 = getelementptr inbounds i16, i16* %65, i64 %4328
  %4330 = load i16, i16* %4329, align 2, !tbaa !382
  %4331 = insertelement <64 x i16> %4326, i16 %4330, i32 58
  %4332 = extractelement <64 x i32> %4036, i32 59
  %4333 = sext i32 %4332 to i64
  %4334 = getelementptr inbounds i16, i16* %65, i64 %4333
  %4335 = load i16, i16* %4334, align 2, !tbaa !382
  %4336 = insertelement <64 x i16> %4331, i16 %4335, i32 59
  %4337 = extractelement <64 x i32> %4036, i32 60
  %4338 = sext i32 %4337 to i64
  %4339 = getelementptr inbounds i16, i16* %65, i64 %4338
  %4340 = load i16, i16* %4339, align 2, !tbaa !382
  %4341 = insertelement <64 x i16> %4336, i16 %4340, i32 60
  %4342 = extractelement <64 x i32> %4036, i32 61
  %4343 = sext i32 %4342 to i64
  %4344 = getelementptr inbounds i16, i16* %65, i64 %4343
  %4345 = load i16, i16* %4344, align 2, !tbaa !382
  %4346 = insertelement <64 x i16> %4341, i16 %4345, i32 61
  %4347 = extractelement <64 x i32> %4036, i32 62
  %4348 = sext i32 %4347 to i64
  %4349 = getelementptr inbounds i16, i16* %65, i64 %4348
  %4350 = load i16, i16* %4349, align 2, !tbaa !382
  %4351 = insertelement <64 x i16> %4346, i16 %4350, i32 62
  %4352 = extractelement <64 x i32> %4036, i32 63
  %4353 = sext i32 %4352 to i64
  %4354 = getelementptr inbounds i16, i16* %65, i64 %4353
  %4355 = load i16, i16* %4354, align 2, !tbaa !382
  %4356 = insertelement <64 x i16> %4351, i16 %4355, i32 63
  %4357 = add <64 x i16> %3177, %2784
  %4358 = add <64 x i16> %4357, %3570
  %4359 = add <64 x i16> %4358, %3963
  %4360 = add <64 x i16> %4359, %4356
  %4361 = shufflevector <64 x i16> %4360, <64 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4362 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4361, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4363 = shufflevector <64 x i16> %4360, <64 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4364 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4363, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4365 = shufflevector <64 x i16> %4360, <64 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4366 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4365, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4367 = shufflevector <64 x i16> %4360, <64 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4368 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4367, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4369 = shufflevector <64 x i16> %4360, <64 x i16> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %4370 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4369, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4371 = shufflevector <64 x i16> %4360, <64 x i16> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %4372 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4371, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4373 = shufflevector <64 x i16> %4360, <64 x i16> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %4374 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4373, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4375 = shufflevector <64 x i16> %4360, <64 x i16> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %4376 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4375, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4377 = shufflevector <64 x i16> %4360, <64 x i16> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %4378 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4377, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4379 = shufflevector <64 x i16> %4360, <64 x i16> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %4380 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4379, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4381 = shufflevector <64 x i16> %4360, <64 x i16> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %4382 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4381, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4383 = shufflevector <64 x i16> %4360, <64 x i16> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %4384 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4383, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4385 = shufflevector <64 x i16> %4360, <64 x i16> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %4386 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4385, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4387 = shufflevector <64 x i16> %4360, <64 x i16> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %4388 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4387, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4389 = shufflevector <64 x i16> %4360, <64 x i16> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %4390 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4389, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4391 = shufflevector <64 x i16> %4360, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4392 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4391, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4393 = shufflevector <4 x i32> %4362, <4 x i32> %4364, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4394 = shufflevector <4 x i32> %4366, <4 x i32> %4368, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4395 = shufflevector <4 x i32> %4370, <4 x i32> %4372, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4396 = shufflevector <4 x i32> %4374, <4 x i32> %4376, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4397 = shufflevector <4 x i32> %4378, <4 x i32> %4380, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4398 = shufflevector <4 x i32> %4382, <4 x i32> %4384, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4399 = shufflevector <4 x i32> %4386, <4 x i32> %4388, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4400 = shufflevector <4 x i32> %4390, <4 x i32> %4392, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4401 = shufflevector <8 x i32> %4393, <8 x i32> %4394, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4402 = shufflevector <8 x i32> %4395, <8 x i32> %4396, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4403 = shufflevector <8 x i32> %4397, <8 x i32> %4398, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4404 = shufflevector <8 x i32> %4399, <8 x i32> %4400, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4405 = shufflevector <16 x i32> %4401, <16 x i32> %4402, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4406 = shufflevector <16 x i32> %4403, <16 x i32> %4404, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4407 = shufflevector <32 x i32> %4405, <32 x i32> %4406, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4408 = lshr <64 x i32> %4407, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %4409 = trunc <64 x i32> %4408 to <64 x i16>
  %4410 = shufflevector <64 x i16> %4409, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4411 = sext i32 %blur_x.s0.x.v1.base.s5 to i64
  %4412 = add nsw i64 %4411, %2388
  %4413 = getelementptr inbounds i16, i16* %blur_x, i64 %4412
  %4414 = bitcast i16* %4413 to <8 x i16>*
  store <8 x i16> %4410, <8 x i16>* %4414, align 2, !tbaa !385
  %4415 = shufflevector <64 x i16> %4409, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4416 = getelementptr inbounds i16, i16* %4413, i64 8
  %4417 = bitcast i16* %4416 to <8 x i16>*
  store <8 x i16> %4415, <8 x i16>* %4417, align 2, !tbaa !385
  %4418 = shufflevector <64 x i16> %4409, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %4419 = getelementptr inbounds i16, i16* %4413, i64 16
  %4420 = bitcast i16* %4419 to <8 x i16>*
  store <8 x i16> %4418, <8 x i16>* %4420, align 2, !tbaa !385
  %4421 = shufflevector <64 x i16> %4409, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4422 = getelementptr inbounds i16, i16* %4413, i64 24
  %4423 = bitcast i16* %4422 to <8 x i16>*
  store <8 x i16> %4421, <8 x i16>* %4423, align 2, !tbaa !385
  %4424 = shufflevector <64 x i16> %4409, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %4425 = getelementptr inbounds i16, i16* %4413, i64 32
  %4426 = bitcast i16* %4425 to <8 x i16>*
  store <8 x i16> %4424, <8 x i16>* %4426, align 2, !tbaa !385
  %4427 = shufflevector <64 x i16> %4409, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %4428 = getelementptr inbounds i16, i16* %4413, i64 40
  %4429 = bitcast i16* %4428 to <8 x i16>*
  store <8 x i16> %4427, <8 x i16>* %4429, align 2, !tbaa !385
  %4430 = shufflevector <64 x i16> %4409, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %4431 = getelementptr inbounds i16, i16* %4413, i64 48
  %4432 = bitcast i16* %4431 to <8 x i16>*
  store <8 x i16> %4430, <8 x i16>* %4432, align 2, !tbaa !385
  %4433 = shufflevector <64 x i16> %4409, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4434 = getelementptr inbounds i16, i16* %4413, i64 56
  %4435 = bitcast i16* %4434 to <8 x i16>*
  store <8 x i16> %4433, <8 x i16>* %4435, align 2, !tbaa !385
  %4436 = add nuw nsw i32 %blur_x.s0.x.x.rebased4, 1
  %.not150 = icmp eq i32 %4436, %t239
  br i1 %.not150, label %"end for blur_x.s0.x.x.rebased3", label %"for blur_x.s0.x.x.rebased2"

"end for blur_x.s0.x.x.rebased3":                 ; preds = %"for blur_x.s0.x.x.rebased2", %"end for blur_x.s0.x.x.rebased"
  %4437 = icmp ugt i64 %indvars.iv182, 3
  br i1 %4437, label %"consume blur_x", label %after_bb6

after_bb6:                                        ; preds = %"for blur_y.s0.x.x9.preheader", %"end for blur_y.s0.x.x", %"end for blur_x.s0.x.x.rebased3"
  %indvars.iv.next183 = add nuw nsw i64 %indvars.iv182, 1
  %.not142 = icmp eq i64 %indvars.iv.next183, 132
  br i1 %.not142, label %"end for blur_y.s0.y.yi.$n.rebased", label %"for blur_y.s0.y.yi.$n.rebased"

"consume blur_x":                                 ; preds = %"end for blur_x.s0.x.x.rebased3"
  br i1 %68, label %"for blur_y.s0.x.x.preheader", label %"end for blur_y.s0.x.x", !prof !381

"for blur_y.s0.x.x.preheader":                    ; preds = %"consume blur_x"
  %4438 = add nsw i32 %97, 5
  %4439 = and i32 %4438, 7
  %4440 = zext i32 %4439 to i64
  %4441 = mul nsw i64 %69, %4440
  %4442 = add nsw i32 %97, 4
  %4443 = and i32 %4442, 7
  %4444 = zext i32 %4443 to i64
  %4445 = mul nsw i64 %69, %4444
  %4446 = add nsw i32 %97, 6
  %4447 = and i32 %4446, 7
  %4448 = zext i32 %4447 to i64
  %4449 = mul nsw i64 %69, %4448
  %4450 = zext i32 %98 to i64
  %4451 = mul nsw i64 %69, %4450
  %4452 = add nsw i32 %97, 7
  %4453 = and i32 %4452, 7
  %4454 = zext i32 %4453 to i64
  %4455 = mul nsw i64 %69, %4454
  %4456 = sext i32 %97 to i64
  %4457 = add nsw i64 %4456, -4
  %4458 = mul nsw i64 %4457, %70
  %4459 = add nsw i64 %4458, %71
  br label %"for blur_y.s0.x.x"

"for blur_y.s0.x.x":                              ; preds = %"for blur_y.s0.x.x.preheader", %"for blur_y.s0.x.x"
  %indvars.iv179 = phi i64 [ 0, %"for blur_y.s0.x.x.preheader" ], [ %indvars.iv.next180, %"for blur_y.s0.x.x" ]
  %4460 = shl nsw i64 %indvars.iv179, 6
  %4461 = sub nsw i64 %4460, %77
  %4462 = add nsw i64 %4441, %4461
  %4463 = getelementptr inbounds i16, i16* %blur_x, i64 %4462
  %4464 = getelementptr inbounds i16, i16* %4463, i64 64
  %4465 = bitcast i16* %4464 to <8 x i16>*
  %4466 = load <8 x i16>, <8 x i16>* %4465, align 2, !tbaa !385
  %4467 = getelementptr inbounds i16, i16* %4463, i64 72
  %4468 = bitcast i16* %4467 to <8 x i16>*
  %4469 = load <8 x i16>, <8 x i16>* %4468, align 2, !tbaa !385
  %4470 = getelementptr inbounds i16, i16* %4463, i64 80
  %4471 = bitcast i16* %4470 to <8 x i16>*
  %4472 = load <8 x i16>, <8 x i16>* %4471, align 2, !tbaa !385
  %4473 = getelementptr inbounds i16, i16* %4463, i64 88
  %4474 = bitcast i16* %4473 to <8 x i16>*
  %4475 = load <8 x i16>, <8 x i16>* %4474, align 2, !tbaa !385
  %4476 = getelementptr inbounds i16, i16* %4463, i64 96
  %4477 = bitcast i16* %4476 to <8 x i16>*
  %4478 = load <8 x i16>, <8 x i16>* %4477, align 2, !tbaa !385
  %4479 = getelementptr inbounds i16, i16* %4463, i64 104
  %4480 = bitcast i16* %4479 to <8 x i16>*
  %4481 = load <8 x i16>, <8 x i16>* %4480, align 2, !tbaa !385
  %4482 = getelementptr inbounds i16, i16* %4463, i64 112
  %4483 = bitcast i16* %4482 to <8 x i16>*
  %4484 = load <8 x i16>, <8 x i16>* %4483, align 2, !tbaa !385
  %4485 = getelementptr inbounds i16, i16* %4463, i64 120
  %4486 = bitcast i16* %4485 to <8 x i16>*
  %4487 = load <8 x i16>, <8 x i16>* %4486, align 2, !tbaa !385
  %4488 = add nsw i64 %4445, %4461
  %4489 = getelementptr inbounds i16, i16* %blur_x, i64 %4488
  %4490 = getelementptr inbounds i16, i16* %4489, i64 64
  %4491 = bitcast i16* %4490 to <8 x i16>*
  %4492 = load <8 x i16>, <8 x i16>* %4491, align 2, !tbaa !385
  %4493 = getelementptr inbounds i16, i16* %4489, i64 72
  %4494 = bitcast i16* %4493 to <8 x i16>*
  %4495 = load <8 x i16>, <8 x i16>* %4494, align 2, !tbaa !385
  %4496 = getelementptr inbounds i16, i16* %4489, i64 80
  %4497 = bitcast i16* %4496 to <8 x i16>*
  %4498 = load <8 x i16>, <8 x i16>* %4497, align 2, !tbaa !385
  %4499 = getelementptr inbounds i16, i16* %4489, i64 88
  %4500 = bitcast i16* %4499 to <8 x i16>*
  %4501 = load <8 x i16>, <8 x i16>* %4500, align 2, !tbaa !385
  %4502 = getelementptr inbounds i16, i16* %4489, i64 96
  %4503 = bitcast i16* %4502 to <8 x i16>*
  %4504 = load <8 x i16>, <8 x i16>* %4503, align 2, !tbaa !385
  %4505 = getelementptr inbounds i16, i16* %4489, i64 104
  %4506 = bitcast i16* %4505 to <8 x i16>*
  %4507 = load <8 x i16>, <8 x i16>* %4506, align 2, !tbaa !385
  %4508 = getelementptr inbounds i16, i16* %4489, i64 112
  %4509 = bitcast i16* %4508 to <8 x i16>*
  %4510 = load <8 x i16>, <8 x i16>* %4509, align 2, !tbaa !385
  %4511 = getelementptr inbounds i16, i16* %4489, i64 120
  %4512 = bitcast i16* %4511 to <8 x i16>*
  %4513 = load <8 x i16>, <8 x i16>* %4512, align 2, !tbaa !385
  %4514 = add nsw i64 %4449, %4461
  %4515 = getelementptr inbounds i16, i16* %blur_x, i64 %4514
  %4516 = getelementptr inbounds i16, i16* %4515, i64 64
  %4517 = bitcast i16* %4516 to <8 x i16>*
  %4518 = load <8 x i16>, <8 x i16>* %4517, align 2, !tbaa !385
  %4519 = getelementptr inbounds i16, i16* %4515, i64 72
  %4520 = bitcast i16* %4519 to <8 x i16>*
  %4521 = load <8 x i16>, <8 x i16>* %4520, align 2, !tbaa !385
  %4522 = getelementptr inbounds i16, i16* %4515, i64 80
  %4523 = bitcast i16* %4522 to <8 x i16>*
  %4524 = load <8 x i16>, <8 x i16>* %4523, align 2, !tbaa !385
  %4525 = getelementptr inbounds i16, i16* %4515, i64 88
  %4526 = bitcast i16* %4525 to <8 x i16>*
  %4527 = load <8 x i16>, <8 x i16>* %4526, align 2, !tbaa !385
  %4528 = getelementptr inbounds i16, i16* %4515, i64 96
  %4529 = bitcast i16* %4528 to <8 x i16>*
  %4530 = load <8 x i16>, <8 x i16>* %4529, align 2, !tbaa !385
  %4531 = getelementptr inbounds i16, i16* %4515, i64 104
  %4532 = bitcast i16* %4531 to <8 x i16>*
  %4533 = load <8 x i16>, <8 x i16>* %4532, align 2, !tbaa !385
  %4534 = getelementptr inbounds i16, i16* %4515, i64 112
  %4535 = bitcast i16* %4534 to <8 x i16>*
  %4536 = load <8 x i16>, <8 x i16>* %4535, align 2, !tbaa !385
  %4537 = getelementptr inbounds i16, i16* %4515, i64 120
  %4538 = bitcast i16* %4537 to <8 x i16>*
  %4539 = load <8 x i16>, <8 x i16>* %4538, align 2, !tbaa !385
  %4540 = add nsw i64 %4451, %4461
  %4541 = getelementptr inbounds i16, i16* %blur_x, i64 %4540
  %4542 = getelementptr inbounds i16, i16* %4541, i64 64
  %4543 = bitcast i16* %4542 to <8 x i16>*
  %4544 = load <8 x i16>, <8 x i16>* %4543, align 2, !tbaa !385
  %4545 = getelementptr inbounds i16, i16* %4541, i64 72
  %4546 = bitcast i16* %4545 to <8 x i16>*
  %4547 = load <8 x i16>, <8 x i16>* %4546, align 2, !tbaa !385
  %4548 = getelementptr inbounds i16, i16* %4541, i64 80
  %4549 = bitcast i16* %4548 to <8 x i16>*
  %4550 = load <8 x i16>, <8 x i16>* %4549, align 2, !tbaa !385
  %4551 = getelementptr inbounds i16, i16* %4541, i64 88
  %4552 = bitcast i16* %4551 to <8 x i16>*
  %4553 = load <8 x i16>, <8 x i16>* %4552, align 2, !tbaa !385
  %4554 = getelementptr inbounds i16, i16* %4541, i64 96
  %4555 = bitcast i16* %4554 to <8 x i16>*
  %4556 = load <8 x i16>, <8 x i16>* %4555, align 2, !tbaa !385
  %4557 = getelementptr inbounds i16, i16* %4541, i64 104
  %4558 = bitcast i16* %4557 to <8 x i16>*
  %4559 = load <8 x i16>, <8 x i16>* %4558, align 2, !tbaa !385
  %4560 = getelementptr inbounds i16, i16* %4541, i64 112
  %4561 = bitcast i16* %4560 to <8 x i16>*
  %4562 = load <8 x i16>, <8 x i16>* %4561, align 2, !tbaa !385
  %4563 = getelementptr inbounds i16, i16* %4541, i64 120
  %4564 = bitcast i16* %4563 to <8 x i16>*
  %4565 = load <8 x i16>, <8 x i16>* %4564, align 2, !tbaa !385
  %4566 = add nsw i64 %4455, %4461
  %4567 = getelementptr inbounds i16, i16* %blur_x, i64 %4566
  %4568 = getelementptr inbounds i16, i16* %4567, i64 64
  %4569 = bitcast i16* %4568 to <8 x i16>*
  %4570 = load <8 x i16>, <8 x i16>* %4569, align 2, !tbaa !385
  %4571 = getelementptr inbounds i16, i16* %4567, i64 72
  %4572 = bitcast i16* %4571 to <8 x i16>*
  %4573 = load <8 x i16>, <8 x i16>* %4572, align 2, !tbaa !385
  %4574 = getelementptr inbounds i16, i16* %4567, i64 80
  %4575 = bitcast i16* %4574 to <8 x i16>*
  %4576 = load <8 x i16>, <8 x i16>* %4575, align 2, !tbaa !385
  %4577 = getelementptr inbounds i16, i16* %4567, i64 88
  %4578 = bitcast i16* %4577 to <8 x i16>*
  %4579 = load <8 x i16>, <8 x i16>* %4578, align 2, !tbaa !385
  %4580 = getelementptr inbounds i16, i16* %4567, i64 96
  %4581 = bitcast i16* %4580 to <8 x i16>*
  %4582 = load <8 x i16>, <8 x i16>* %4581, align 2, !tbaa !385
  %4583 = getelementptr inbounds i16, i16* %4567, i64 104
  %4584 = bitcast i16* %4583 to <8 x i16>*
  %4585 = load <8 x i16>, <8 x i16>* %4584, align 2, !tbaa !385
  %4586 = getelementptr inbounds i16, i16* %4567, i64 112
  %4587 = bitcast i16* %4586 to <8 x i16>*
  %4588 = load <8 x i16>, <8 x i16>* %4587, align 2, !tbaa !385
  %4589 = getelementptr inbounds i16, i16* %4567, i64 120
  %4590 = bitcast i16* %4589 to <8 x i16>*
  %4591 = load <8 x i16>, <8 x i16>* %4590, align 2, !tbaa !385
  %4592 = add <8 x i16> %4492, %4466
  %4593 = add <8 x i16> %4592, %4518
  %4594 = add <8 x i16> %4593, %4544
  %4595 = add <8 x i16> %4594, %4570
  %4596 = add <8 x i16> %4495, %4469
  %4597 = add <8 x i16> %4596, %4521
  %4598 = add <8 x i16> %4597, %4547
  %4599 = add <8 x i16> %4598, %4573
  %4600 = add <8 x i16> %4498, %4472
  %4601 = add <8 x i16> %4600, %4524
  %4602 = add <8 x i16> %4601, %4550
  %4603 = add <8 x i16> %4602, %4576
  %4604 = add <8 x i16> %4501, %4475
  %4605 = add <8 x i16> %4604, %4527
  %4606 = add <8 x i16> %4605, %4553
  %4607 = add <8 x i16> %4606, %4579
  %4608 = add <8 x i16> %4504, %4478
  %4609 = add <8 x i16> %4608, %4530
  %4610 = add <8 x i16> %4609, %4556
  %4611 = add <8 x i16> %4610, %4582
  %4612 = add <8 x i16> %4507, %4481
  %4613 = add <8 x i16> %4612, %4533
  %4614 = add <8 x i16> %4613, %4559
  %4615 = add <8 x i16> %4614, %4585
  %4616 = add <8 x i16> %4510, %4484
  %4617 = add <8 x i16> %4616, %4536
  %4618 = add <8 x i16> %4617, %4562
  %4619 = add <8 x i16> %4618, %4588
  %4620 = add <8 x i16> %4513, %4487
  %4621 = add <8 x i16> %4620, %4539
  %4622 = add <8 x i16> %4621, %4565
  %4623 = add <8 x i16> %4622, %4591
  %4624 = shufflevector <8 x i16> %4623, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4625 = shufflevector <16 x i16> %4624, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %4626 = shufflevector <32 x i16> %4625, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %4627 = shufflevector <8 x i16> %4595, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4628 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4627, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4629 = shufflevector <8 x i16> %4595, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4630 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4629, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4631 = shufflevector <8 x i16> %4599, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4632 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4631, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4633 = shufflevector <8 x i16> %4599, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4634 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4633, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4635 = shufflevector <8 x i16> %4603, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4636 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4635, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4637 = shufflevector <8 x i16> %4603, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4638 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4637, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4639 = shufflevector <8 x i16> %4607, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4640 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4639, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4641 = shufflevector <8 x i16> %4607, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4642 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4641, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4643 = shufflevector <8 x i16> %4611, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4644 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4643, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4645 = shufflevector <8 x i16> %4611, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4646 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4645, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4647 = shufflevector <8 x i16> %4615, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4648 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4647, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4649 = shufflevector <8 x i16> %4615, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4650 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4649, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4651 = shufflevector <8 x i16> %4619, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4652 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4651, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4653 = shufflevector <8 x i16> %4619, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4654 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4653, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4655 = shufflevector <8 x i16> %4623, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4656 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4655, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4657 = shufflevector <64 x i16> %4626, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4658 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4657, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4659 = shufflevector <4 x i32> %4628, <4 x i32> %4630, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4660 = shufflevector <4 x i32> %4632, <4 x i32> %4634, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4661 = shufflevector <4 x i32> %4636, <4 x i32> %4638, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4662 = shufflevector <4 x i32> %4640, <4 x i32> %4642, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4663 = shufflevector <4 x i32> %4644, <4 x i32> %4646, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4664 = shufflevector <4 x i32> %4648, <4 x i32> %4650, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4665 = shufflevector <4 x i32> %4652, <4 x i32> %4654, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4666 = shufflevector <4 x i32> %4656, <4 x i32> %4658, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4667 = shufflevector <8 x i32> %4659, <8 x i32> %4660, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4668 = shufflevector <8 x i32> %4661, <8 x i32> %4662, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4669 = shufflevector <8 x i32> %4663, <8 x i32> %4664, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4670 = shufflevector <8 x i32> %4665, <8 x i32> %4666, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4671 = shufflevector <16 x i32> %4667, <16 x i32> %4668, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4672 = shufflevector <16 x i32> %4669, <16 x i32> %4670, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4673 = shufflevector <32 x i32> %4671, <32 x i32> %4672, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4674 = lshr <64 x i32> %4673, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %4675 = trunc <64 x i32> %4674 to <64 x i16>
  %4676 = shufflevector <64 x i16> %4675, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4677 = add nsw i64 %4459, %4460
  %4678 = getelementptr inbounds i16, i16* %72, i64 %4677
  %4679 = bitcast i16* %4678 to <8 x i16>*
  store <8 x i16> %4676, <8 x i16>* %4679, align 2, !tbaa !387
  %4680 = shufflevector <64 x i16> %4675, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4681 = getelementptr inbounds i16, i16* %4678, i64 8
  %4682 = bitcast i16* %4681 to <8 x i16>*
  store <8 x i16> %4680, <8 x i16>* %4682, align 2, !tbaa !387
  %4683 = shufflevector <64 x i16> %4675, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %4684 = getelementptr inbounds i16, i16* %4678, i64 16
  %4685 = bitcast i16* %4684 to <8 x i16>*
  store <8 x i16> %4683, <8 x i16>* %4685, align 2, !tbaa !387
  %4686 = shufflevector <64 x i16> %4675, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4687 = getelementptr inbounds i16, i16* %4678, i64 24
  %4688 = bitcast i16* %4687 to <8 x i16>*
  store <8 x i16> %4686, <8 x i16>* %4688, align 2, !tbaa !387
  %4689 = shufflevector <64 x i16> %4675, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %4690 = getelementptr inbounds i16, i16* %4678, i64 32
  %4691 = bitcast i16* %4690 to <8 x i16>*
  store <8 x i16> %4689, <8 x i16>* %4691, align 2, !tbaa !387
  %4692 = shufflevector <64 x i16> %4675, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %4693 = getelementptr inbounds i16, i16* %4678, i64 40
  %4694 = bitcast i16* %4693 to <8 x i16>*
  store <8 x i16> %4692, <8 x i16>* %4694, align 2, !tbaa !387
  %4695 = shufflevector <64 x i16> %4675, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %4696 = getelementptr inbounds i16, i16* %4678, i64 48
  %4697 = bitcast i16* %4696 to <8 x i16>*
  store <8 x i16> %4695, <8 x i16>* %4697, align 2, !tbaa !387
  %4698 = shufflevector <64 x i16> %4675, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4699 = getelementptr inbounds i16, i16* %4678, i64 56
  %4700 = bitcast i16* %4699 to <8 x i16>*
  store <8 x i16> %4698, <8 x i16>* %4700, align 2, !tbaa !387
  %indvars.iv.next180 = add nuw nsw i64 %indvars.iv179, 1
  %.not149 = icmp eq i64 %indvars.iv.next180, %76
  br i1 %.not149, label %"end for blur_y.s0.x.x", label %"for blur_y.s0.x.x"

"end for blur_y.s0.x.x":                          ; preds = %"for blur_y.s0.x.x", %"consume blur_x"
  br i1 %73, label %"for blur_y.s0.x.x9.preheader", label %after_bb6, !prof !381

"for blur_y.s0.x.x9.preheader":                   ; preds = %"end for blur_y.s0.x.x"
  %4701 = add nsw i32 %97, 5
  %4702 = and i32 %4701, 7
  %narrow143 = add nuw nsw i32 %4702, 1
  %4703 = zext i32 %narrow143 to i64
  %4704 = mul nsw i64 %69, %4703
  %4705 = getelementptr inbounds i16, i16* %blur_x, i64 %4704
  %4706 = getelementptr inbounds i16, i16* %4705, i64 -64
  %4707 = bitcast i16* %4706 to <8 x i16>*
  %4708 = load <8 x i16>, <8 x i16>* %4707, align 2, !tbaa !385
  %4709 = getelementptr inbounds i16, i16* %4705, i64 -56
  %4710 = bitcast i16* %4709 to <8 x i16>*
  %4711 = load <8 x i16>, <8 x i16>* %4710, align 2, !tbaa !385
  %4712 = getelementptr inbounds i16, i16* %4705, i64 -48
  %4713 = bitcast i16* %4712 to <8 x i16>*
  %4714 = load <8 x i16>, <8 x i16>* %4713, align 2, !tbaa !385
  %4715 = getelementptr inbounds i16, i16* %4705, i64 -40
  %4716 = bitcast i16* %4715 to <8 x i16>*
  %4717 = load <8 x i16>, <8 x i16>* %4716, align 2, !tbaa !385
  %4718 = getelementptr inbounds i16, i16* %4705, i64 -32
  %4719 = bitcast i16* %4718 to <8 x i16>*
  %4720 = load <8 x i16>, <8 x i16>* %4719, align 2, !tbaa !385
  %4721 = getelementptr inbounds i16, i16* %4705, i64 -24
  %4722 = bitcast i16* %4721 to <8 x i16>*
  %4723 = load <8 x i16>, <8 x i16>* %4722, align 2, !tbaa !385
  %4724 = getelementptr inbounds i16, i16* %4705, i64 -16
  %4725 = bitcast i16* %4724 to <8 x i16>*
  %4726 = load <8 x i16>, <8 x i16>* %4725, align 2, !tbaa !385
  %4727 = getelementptr inbounds i16, i16* %4705, i64 -8
  %4728 = bitcast i16* %4727 to <8 x i16>*
  %4729 = load <8 x i16>, <8 x i16>* %4728, align 2, !tbaa !385
  %4730 = add nsw i32 %97, 4
  %4731 = and i32 %4730, 7
  %narrow144 = add nuw nsw i32 %4731, 1
  %4732 = zext i32 %narrow144 to i64
  %4733 = mul nsw i64 %69, %4732
  %4734 = getelementptr inbounds i16, i16* %blur_x, i64 %4733
  %4735 = getelementptr inbounds i16, i16* %4734, i64 -64
  %4736 = bitcast i16* %4735 to <8 x i16>*
  %4737 = load <8 x i16>, <8 x i16>* %4736, align 2, !tbaa !385
  %4738 = getelementptr inbounds i16, i16* %4734, i64 -56
  %4739 = bitcast i16* %4738 to <8 x i16>*
  %4740 = load <8 x i16>, <8 x i16>* %4739, align 2, !tbaa !385
  %4741 = getelementptr inbounds i16, i16* %4734, i64 -48
  %4742 = bitcast i16* %4741 to <8 x i16>*
  %4743 = load <8 x i16>, <8 x i16>* %4742, align 2, !tbaa !385
  %4744 = getelementptr inbounds i16, i16* %4734, i64 -40
  %4745 = bitcast i16* %4744 to <8 x i16>*
  %4746 = load <8 x i16>, <8 x i16>* %4745, align 2, !tbaa !385
  %4747 = getelementptr inbounds i16, i16* %4734, i64 -32
  %4748 = bitcast i16* %4747 to <8 x i16>*
  %4749 = load <8 x i16>, <8 x i16>* %4748, align 2, !tbaa !385
  %4750 = getelementptr inbounds i16, i16* %4734, i64 -24
  %4751 = bitcast i16* %4750 to <8 x i16>*
  %4752 = load <8 x i16>, <8 x i16>* %4751, align 2, !tbaa !385
  %4753 = getelementptr inbounds i16, i16* %4734, i64 -16
  %4754 = bitcast i16* %4753 to <8 x i16>*
  %4755 = load <8 x i16>, <8 x i16>* %4754, align 2, !tbaa !385
  %4756 = getelementptr inbounds i16, i16* %4734, i64 -8
  %4757 = bitcast i16* %4756 to <8 x i16>*
  %4758 = load <8 x i16>, <8 x i16>* %4757, align 2, !tbaa !385
  %4759 = add nsw i32 %97, 6
  %4760 = and i32 %4759, 7
  %narrow145 = add nuw nsw i32 %4760, 1
  %4761 = zext i32 %narrow145 to i64
  %4762 = mul nsw i64 %69, %4761
  %4763 = getelementptr inbounds i16, i16* %blur_x, i64 %4762
  %4764 = getelementptr inbounds i16, i16* %4763, i64 -64
  %4765 = bitcast i16* %4764 to <8 x i16>*
  %4766 = load <8 x i16>, <8 x i16>* %4765, align 2, !tbaa !385
  %4767 = getelementptr inbounds i16, i16* %4763, i64 -56
  %4768 = bitcast i16* %4767 to <8 x i16>*
  %4769 = load <8 x i16>, <8 x i16>* %4768, align 2, !tbaa !385
  %4770 = getelementptr inbounds i16, i16* %4763, i64 -48
  %4771 = bitcast i16* %4770 to <8 x i16>*
  %4772 = load <8 x i16>, <8 x i16>* %4771, align 2, !tbaa !385
  %4773 = getelementptr inbounds i16, i16* %4763, i64 -40
  %4774 = bitcast i16* %4773 to <8 x i16>*
  %4775 = load <8 x i16>, <8 x i16>* %4774, align 2, !tbaa !385
  %4776 = getelementptr inbounds i16, i16* %4763, i64 -32
  %4777 = bitcast i16* %4776 to <8 x i16>*
  %4778 = load <8 x i16>, <8 x i16>* %4777, align 2, !tbaa !385
  %4779 = getelementptr inbounds i16, i16* %4763, i64 -24
  %4780 = bitcast i16* %4779 to <8 x i16>*
  %4781 = load <8 x i16>, <8 x i16>* %4780, align 2, !tbaa !385
  %4782 = getelementptr inbounds i16, i16* %4763, i64 -16
  %4783 = bitcast i16* %4782 to <8 x i16>*
  %4784 = load <8 x i16>, <8 x i16>* %4783, align 2, !tbaa !385
  %4785 = getelementptr inbounds i16, i16* %4763, i64 -8
  %4786 = bitcast i16* %4785 to <8 x i16>*
  %4787 = load <8 x i16>, <8 x i16>* %4786, align 2, !tbaa !385
  %narrow146 = add nuw nsw i32 %98, 1
  %4788 = zext i32 %narrow146 to i64
  %4789 = mul nsw i64 %69, %4788
  %4790 = getelementptr inbounds i16, i16* %blur_x, i64 %4789
  %4791 = getelementptr inbounds i16, i16* %4790, i64 -64
  %4792 = bitcast i16* %4791 to <8 x i16>*
  %4793 = load <8 x i16>, <8 x i16>* %4792, align 2, !tbaa !385
  %4794 = getelementptr inbounds i16, i16* %4790, i64 -56
  %4795 = bitcast i16* %4794 to <8 x i16>*
  %4796 = load <8 x i16>, <8 x i16>* %4795, align 2, !tbaa !385
  %4797 = getelementptr inbounds i16, i16* %4790, i64 -48
  %4798 = bitcast i16* %4797 to <8 x i16>*
  %4799 = load <8 x i16>, <8 x i16>* %4798, align 2, !tbaa !385
  %4800 = getelementptr inbounds i16, i16* %4790, i64 -40
  %4801 = bitcast i16* %4800 to <8 x i16>*
  %4802 = load <8 x i16>, <8 x i16>* %4801, align 2, !tbaa !385
  %4803 = getelementptr inbounds i16, i16* %4790, i64 -32
  %4804 = bitcast i16* %4803 to <8 x i16>*
  %4805 = load <8 x i16>, <8 x i16>* %4804, align 2, !tbaa !385
  %4806 = getelementptr inbounds i16, i16* %4790, i64 -24
  %4807 = bitcast i16* %4806 to <8 x i16>*
  %4808 = load <8 x i16>, <8 x i16>* %4807, align 2, !tbaa !385
  %4809 = getelementptr inbounds i16, i16* %4790, i64 -16
  %4810 = bitcast i16* %4809 to <8 x i16>*
  %4811 = load <8 x i16>, <8 x i16>* %4810, align 2, !tbaa !385
  %4812 = getelementptr inbounds i16, i16* %4790, i64 -8
  %4813 = bitcast i16* %4812 to <8 x i16>*
  %4814 = load <8 x i16>, <8 x i16>* %4813, align 2, !tbaa !385
  %4815 = add nsw i32 %97, 7
  %4816 = and i32 %4815, 7
  %narrow147 = add nuw nsw i32 %4816, 1
  %4817 = zext i32 %narrow147 to i64
  %4818 = mul nsw i64 %69, %4817
  %4819 = getelementptr inbounds i16, i16* %blur_x, i64 %4818
  %4820 = getelementptr inbounds i16, i16* %4819, i64 -64
  %4821 = bitcast i16* %4820 to <8 x i16>*
  %4822 = load <8 x i16>, <8 x i16>* %4821, align 2, !tbaa !385
  %4823 = getelementptr inbounds i16, i16* %4819, i64 -56
  %4824 = bitcast i16* %4823 to <8 x i16>*
  %4825 = load <8 x i16>, <8 x i16>* %4824, align 2, !tbaa !385
  %4826 = getelementptr inbounds i16, i16* %4819, i64 -48
  %4827 = bitcast i16* %4826 to <8 x i16>*
  %4828 = load <8 x i16>, <8 x i16>* %4827, align 2, !tbaa !385
  %4829 = getelementptr inbounds i16, i16* %4819, i64 -40
  %4830 = bitcast i16* %4829 to <8 x i16>*
  %4831 = load <8 x i16>, <8 x i16>* %4830, align 2, !tbaa !385
  %4832 = getelementptr inbounds i16, i16* %4819, i64 -32
  %4833 = bitcast i16* %4832 to <8 x i16>*
  %4834 = load <8 x i16>, <8 x i16>* %4833, align 2, !tbaa !385
  %4835 = getelementptr inbounds i16, i16* %4819, i64 -24
  %4836 = bitcast i16* %4835 to <8 x i16>*
  %4837 = load <8 x i16>, <8 x i16>* %4836, align 2, !tbaa !385
  %4838 = getelementptr inbounds i16, i16* %4819, i64 -16
  %4839 = bitcast i16* %4838 to <8 x i16>*
  %4840 = load <8 x i16>, <8 x i16>* %4839, align 2, !tbaa !385
  %4841 = getelementptr inbounds i16, i16* %4819, i64 -8
  %4842 = bitcast i16* %4841 to <8 x i16>*
  %4843 = load <8 x i16>, <8 x i16>* %4842, align 2, !tbaa !385
  %4844 = add <8 x i16> %4737, %4708
  %4845 = add <8 x i16> %4844, %4766
  %4846 = add <8 x i16> %4845, %4793
  %4847 = add <8 x i16> %4846, %4822
  %4848 = add <8 x i16> %4740, %4711
  %4849 = add <8 x i16> %4848, %4769
  %4850 = add <8 x i16> %4849, %4796
  %4851 = add <8 x i16> %4850, %4825
  %4852 = add <8 x i16> %4743, %4714
  %4853 = add <8 x i16> %4852, %4772
  %4854 = add <8 x i16> %4853, %4799
  %4855 = add <8 x i16> %4854, %4828
  %4856 = add <8 x i16> %4746, %4717
  %4857 = add <8 x i16> %4856, %4775
  %4858 = add <8 x i16> %4857, %4802
  %4859 = add <8 x i16> %4858, %4831
  %4860 = add <8 x i16> %4749, %4720
  %4861 = add <8 x i16> %4860, %4778
  %4862 = add <8 x i16> %4861, %4805
  %4863 = add <8 x i16> %4862, %4834
  %4864 = add <8 x i16> %4752, %4723
  %4865 = add <8 x i16> %4864, %4781
  %4866 = add <8 x i16> %4865, %4808
  %4867 = add <8 x i16> %4866, %4837
  %4868 = add <8 x i16> %4755, %4726
  %4869 = add <8 x i16> %4868, %4784
  %4870 = add <8 x i16> %4869, %4811
  %4871 = add <8 x i16> %4870, %4840
  %4872 = add <8 x i16> %4758, %4729
  %4873 = add <8 x i16> %4872, %4787
  %4874 = add <8 x i16> %4873, %4814
  %4875 = add <8 x i16> %4874, %4843
  %4876 = shufflevector <8 x i16> %4875, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4877 = shufflevector <16 x i16> %4876, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %4878 = shufflevector <32 x i16> %4877, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %4879 = shufflevector <8 x i16> %4847, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4880 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4879, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4881 = shufflevector <8 x i16> %4847, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4882 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4881, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4883 = shufflevector <8 x i16> %4851, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4884 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4883, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4885 = shufflevector <8 x i16> %4851, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4886 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4885, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4887 = shufflevector <8 x i16> %4855, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4888 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4887, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4889 = shufflevector <8 x i16> %4855, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4890 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4889, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4891 = shufflevector <8 x i16> %4859, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4892 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4891, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4893 = shufflevector <8 x i16> %4859, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4894 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4893, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4895 = shufflevector <8 x i16> %4863, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4896 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4895, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4897 = shufflevector <8 x i16> %4863, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4898 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4897, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4899 = shufflevector <8 x i16> %4867, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4900 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4899, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4901 = shufflevector <8 x i16> %4867, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4902 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4901, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4903 = shufflevector <8 x i16> %4871, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4904 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4903, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4905 = shufflevector <8 x i16> %4871, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4906 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4905, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4907 = shufflevector <8 x i16> %4875, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4908 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4907, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4909 = shufflevector <64 x i16> %4878, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4910 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4909, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4911 = shufflevector <4 x i32> %4880, <4 x i32> %4882, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4912 = shufflevector <4 x i32> %4884, <4 x i32> %4886, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4913 = shufflevector <4 x i32> %4888, <4 x i32> %4890, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4914 = shufflevector <4 x i32> %4892, <4 x i32> %4894, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4915 = shufflevector <4 x i32> %4896, <4 x i32> %4898, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4916 = shufflevector <4 x i32> %4900, <4 x i32> %4902, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4917 = shufflevector <4 x i32> %4904, <4 x i32> %4906, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4918 = shufflevector <4 x i32> %4908, <4 x i32> %4910, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4919 = shufflevector <8 x i32> %4911, <8 x i32> %4912, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4920 = shufflevector <8 x i32> %4913, <8 x i32> %4914, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4921 = shufflevector <8 x i32> %4915, <8 x i32> %4916, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4922 = shufflevector <8 x i32> %4917, <8 x i32> %4918, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4923 = shufflevector <16 x i32> %4919, <16 x i32> %4920, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4924 = shufflevector <16 x i32> %4921, <16 x i32> %4922, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4925 = shufflevector <32 x i32> %4923, <32 x i32> %4924, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4926 = lshr <64 x i32> %4925, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %4927 = trunc <64 x i32> %4926 to <64 x i16>
  %4928 = sext i32 %97 to i64
  %4929 = add nsw i64 %4928, -4
  %4930 = mul nsw i64 %4929, %70
  %4931 = add nsw i64 %4930, %74
  %4932 = getelementptr inbounds i16, i16* %72, i64 %4931
  %4933 = getelementptr inbounds i16, i16* %4932, i64 -64
  %4934 = bitcast i16* %4933 to <8 x i16>*
  %4935 = getelementptr inbounds i16, i16* %4932, i64 -56
  %4936 = bitcast i16* %4935 to <8 x i16>*
  %4937 = getelementptr inbounds i16, i16* %4932, i64 -48
  %4938 = bitcast i16* %4937 to <8 x i16>*
  %4939 = getelementptr inbounds i16, i16* %4932, i64 -40
  %4940 = bitcast i16* %4939 to <8 x i16>*
  %4941 = getelementptr inbounds i16, i16* %4932, i64 -32
  %4942 = bitcast i16* %4941 to <8 x i16>*
  %4943 = getelementptr inbounds i16, i16* %4932, i64 -24
  %4944 = bitcast i16* %4943 to <8 x i16>*
  %4945 = getelementptr inbounds i16, i16* %4932, i64 -16
  %4946 = bitcast i16* %4945 to <8 x i16>*
  %4947 = getelementptr inbounds i16, i16* %4932, i64 -8
  %4948 = shufflevector <64 x i16> %4927, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4949 = shufflevector <64 x i16> %4927, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4950 = shufflevector <64 x i16> %4927, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %4951 = shufflevector <64 x i16> %4927, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4952 = shufflevector <64 x i16> %4927, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %4953 = shufflevector <64 x i16> %4927, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %4954 = shufflevector <64 x i16> %4927, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %4955 = shufflevector <64 x i16> %4927, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4956 = bitcast i16* %4947 to <8 x i16>*
  store <8 x i16> %4948, <8 x i16>* %4934, align 2, !tbaa !387
  store <8 x i16> %4949, <8 x i16>* %4936, align 2, !tbaa !387
  store <8 x i16> %4950, <8 x i16>* %4938, align 2, !tbaa !387
  store <8 x i16> %4951, <8 x i16>* %4940, align 2, !tbaa !387
  store <8 x i16> %4952, <8 x i16>* %4942, align 2, !tbaa !387
  store <8 x i16> %4953, <8 x i16>* %4944, align 2, !tbaa !387
  store <8 x i16> %4954, <8 x i16>* %4946, align 2, !tbaa !387
  store <8 x i16> %4955, <8 x i16>* %4956, align 2, !tbaa !387
  br label %after_bb6

"for blur_y.s0.y.yi.$n.rebased14":                ; preds = %next_bb, %after_bb22
  %indvars.iv = phi i64 [ 0, %next_bb ], [ %indvars.iv.next, %after_bb22 ]
  %4957 = trunc i64 %indvars.iv to i32
  %t250 = add i32 %blur_y.s0.y.yi.base.s12, %4957
  %a8 = add i32 %t250, %t217
  %4958 = icmp slt i32 %a8, %b10
  %a10 = select i1 %4958, i32 %a8, i32 %b10
  %4959 = add i32 %t250, %blur_y.min.1
  %4960 = and i32 %4959, 7
  br i1 %84, label %"for blur_x.s0.x.x18.preheader", label %"end for blur_x.s0.x.x19", !prof !381

"for blur_x.s0.x.x18.preheader":                  ; preds = %"for blur_y.s0.y.yi.$n.rebased14"
  %4961 = mul nsw i32 %a7, %4960
  %t253 = sub nsw i32 %4961, %t215
  %4962 = icmp sgt i32 %a10, 0
  %4963 = select i1 %4962, i32 %a10, i32 0
  %4964 = mul nsw i32 %4963, %input.stride.1
  %4965 = sub nsw i32 %4964, %input.min.0
  %4966 = insertelement <64 x i32> undef, i32 %4965, i32 0
  %t207 = shufflevector <64 x i32> %4966, <64 x i32> undef, <64 x i32> zeroinitializer
  %4967 = sext i32 %t253 to i64
  br label %"for blur_x.s0.x.x18"

"end for blur_y.s0.y.yi.$n.rebased15":            ; preds = %after_bb22
  %tobool.not.i154.not = icmp eq i8* %83, null
  br i1 %tobool.not.i154.not, label %after_bb, label %if.then.i155

if.then.i155:                                     ; preds = %"end for blur_y.s0.y.yi.$n.rebased15"
  tail call void @halide_free(i8* %__user_context, i8* nonnull %83) #13
  br label %after_bb

"for blur_x.s0.x.x18":                            ; preds = %"for blur_x.s0.x.x18.preheader", %"for blur_x.s0.x.x18"
  %blur_x.s0.x.x20 = phi i32 [ %7014, %"for blur_x.s0.x.x18" ], [ 0, %"for blur_x.s0.x.x18.preheader" ]
  %4968 = shl nsw i32 %blur_x.s0.x.x20, 6
  %a9 = add nsw i32 %4968, %t215
  %4969 = icmp slt i32 %a9, %b11
  %blur_x.s0.x.v1.base.s21 = select i1 %4969, i32 %a9, i32 %b11
  %4970 = add nsw i32 %blur_x.s0.x.v1.base.s21, -63
  %4971 = insertelement <64 x i32> undef, i32 %4970, i32 0
  %4972 = shufflevector <64 x i32> %4971, <64 x i32> undef, <64 x i32> zeroinitializer
  %4973 = add nsw <64 x i32> %4972, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4974 = shufflevector <64 x i32> %4973, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4975 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4974, <4 x i32> %87)
  %4976 = shufflevector <64 x i32> %4973, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4977 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4976, <4 x i32> %87)
  %4978 = shufflevector <64 x i32> %4973, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4979 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4978, <4 x i32> %87)
  %4980 = shufflevector <64 x i32> %4973, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4981 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4980, <4 x i32> %87)
  %4982 = shufflevector <64 x i32> %4973, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %4983 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4982, <4 x i32> %87)
  %4984 = shufflevector <64 x i32> %4973, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %4985 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4984, <4 x i32> %87)
  %4986 = shufflevector <64 x i32> %4973, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %4987 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4986, <4 x i32> %87)
  %4988 = shufflevector <64 x i32> %4973, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %4989 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4988, <4 x i32> %87)
  %4990 = shufflevector <64 x i32> %4973, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %4991 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4990, <4 x i32> %87)
  %4992 = shufflevector <64 x i32> %4973, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %4993 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4992, <4 x i32> %87)
  %4994 = shufflevector <64 x i32> %4973, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %4995 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4994, <4 x i32> %87)
  %4996 = shufflevector <64 x i32> %4973, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %4997 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4996, <4 x i32> %87)
  %4998 = shufflevector <64 x i32> %4973, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %4999 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4998, <4 x i32> %87)
  %5000 = shufflevector <64 x i32> %4973, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %5001 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5000, <4 x i32> %87)
  %5002 = shufflevector <64 x i32> %4973, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %5003 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5002, <4 x i32> %87)
  %5004 = shufflevector <64 x i32> %4973, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %5005 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5004, <4 x i32> %87)
  %5006 = shufflevector <4 x i32> %5005, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %5007 = shufflevector <8 x i32> %5006, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %5008 = shufflevector <16 x i32> %5007, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %5009 = shufflevector <32 x i32> %5008, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %5010 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4975, <4 x i32> %89)
  %5011 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4977, <4 x i32> %89)
  %5012 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4979, <4 x i32> %89)
  %5013 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4981, <4 x i32> %89)
  %5014 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4983, <4 x i32> %89)
  %5015 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4985, <4 x i32> %89)
  %5016 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4987, <4 x i32> %89)
  %5017 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4989, <4 x i32> %89)
  %5018 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4991, <4 x i32> %89)
  %5019 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4993, <4 x i32> %89)
  %5020 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4995, <4 x i32> %89)
  %5021 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4997, <4 x i32> %89)
  %5022 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4999, <4 x i32> %89)
  %5023 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5001, <4 x i32> %89)
  %5024 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5003, <4 x i32> %89)
  %5025 = shufflevector <64 x i32> %5009, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %5026 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5025, <4 x i32> %89)
  %5027 = shufflevector <4 x i32> %5010, <4 x i32> %5011, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5028 = shufflevector <4 x i32> %5012, <4 x i32> %5013, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5029 = shufflevector <4 x i32> %5014, <4 x i32> %5015, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5030 = shufflevector <4 x i32> %5016, <4 x i32> %5017, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5031 = shufflevector <4 x i32> %5018, <4 x i32> %5019, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5032 = shufflevector <4 x i32> %5020, <4 x i32> %5021, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5033 = shufflevector <4 x i32> %5022, <4 x i32> %5023, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5034 = shufflevector <4 x i32> %5024, <4 x i32> %5026, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5035 = shufflevector <8 x i32> %5027, <8 x i32> %5028, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5036 = shufflevector <8 x i32> %5029, <8 x i32> %5030, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5037 = shufflevector <8 x i32> %5031, <8 x i32> %5032, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5038 = shufflevector <8 x i32> %5033, <8 x i32> %5034, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5039 = shufflevector <16 x i32> %5035, <16 x i32> %5036, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5040 = shufflevector <16 x i32> %5037, <16 x i32> %5038, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5041 = shufflevector <32 x i32> %5039, <32 x i32> %5040, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5042 = add nsw <64 x i32> %5041, %t207
  %5043 = extractelement <64 x i32> %5042, i32 0
  %5044 = sext i32 %5043 to i64
  %5045 = getelementptr inbounds i16, i16* %90, i64 %5044
  %5046 = load i16, i16* %5045, align 2, !tbaa !382
  %5047 = insertelement <64 x i16> undef, i16 %5046, i32 0
  %5048 = extractelement <64 x i32> %5042, i32 1
  %5049 = sext i32 %5048 to i64
  %5050 = getelementptr inbounds i16, i16* %90, i64 %5049
  %5051 = load i16, i16* %5050, align 2, !tbaa !382
  %5052 = insertelement <64 x i16> %5047, i16 %5051, i32 1
  %5053 = extractelement <64 x i32> %5042, i32 2
  %5054 = sext i32 %5053 to i64
  %5055 = getelementptr inbounds i16, i16* %90, i64 %5054
  %5056 = load i16, i16* %5055, align 2, !tbaa !382
  %5057 = insertelement <64 x i16> %5052, i16 %5056, i32 2
  %5058 = extractelement <64 x i32> %5042, i32 3
  %5059 = sext i32 %5058 to i64
  %5060 = getelementptr inbounds i16, i16* %90, i64 %5059
  %5061 = load i16, i16* %5060, align 2, !tbaa !382
  %5062 = insertelement <64 x i16> %5057, i16 %5061, i32 3
  %5063 = extractelement <64 x i32> %5042, i32 4
  %5064 = sext i32 %5063 to i64
  %5065 = getelementptr inbounds i16, i16* %90, i64 %5064
  %5066 = load i16, i16* %5065, align 2, !tbaa !382
  %5067 = insertelement <64 x i16> %5062, i16 %5066, i32 4
  %5068 = extractelement <64 x i32> %5042, i32 5
  %5069 = sext i32 %5068 to i64
  %5070 = getelementptr inbounds i16, i16* %90, i64 %5069
  %5071 = load i16, i16* %5070, align 2, !tbaa !382
  %5072 = insertelement <64 x i16> %5067, i16 %5071, i32 5
  %5073 = extractelement <64 x i32> %5042, i32 6
  %5074 = sext i32 %5073 to i64
  %5075 = getelementptr inbounds i16, i16* %90, i64 %5074
  %5076 = load i16, i16* %5075, align 2, !tbaa !382
  %5077 = insertelement <64 x i16> %5072, i16 %5076, i32 6
  %5078 = extractelement <64 x i32> %5042, i32 7
  %5079 = sext i32 %5078 to i64
  %5080 = getelementptr inbounds i16, i16* %90, i64 %5079
  %5081 = load i16, i16* %5080, align 2, !tbaa !382
  %5082 = insertelement <64 x i16> %5077, i16 %5081, i32 7
  %5083 = extractelement <64 x i32> %5042, i32 8
  %5084 = sext i32 %5083 to i64
  %5085 = getelementptr inbounds i16, i16* %90, i64 %5084
  %5086 = load i16, i16* %5085, align 2, !tbaa !382
  %5087 = insertelement <64 x i16> %5082, i16 %5086, i32 8
  %5088 = extractelement <64 x i32> %5042, i32 9
  %5089 = sext i32 %5088 to i64
  %5090 = getelementptr inbounds i16, i16* %90, i64 %5089
  %5091 = load i16, i16* %5090, align 2, !tbaa !382
  %5092 = insertelement <64 x i16> %5087, i16 %5091, i32 9
  %5093 = extractelement <64 x i32> %5042, i32 10
  %5094 = sext i32 %5093 to i64
  %5095 = getelementptr inbounds i16, i16* %90, i64 %5094
  %5096 = load i16, i16* %5095, align 2, !tbaa !382
  %5097 = insertelement <64 x i16> %5092, i16 %5096, i32 10
  %5098 = extractelement <64 x i32> %5042, i32 11
  %5099 = sext i32 %5098 to i64
  %5100 = getelementptr inbounds i16, i16* %90, i64 %5099
  %5101 = load i16, i16* %5100, align 2, !tbaa !382
  %5102 = insertelement <64 x i16> %5097, i16 %5101, i32 11
  %5103 = extractelement <64 x i32> %5042, i32 12
  %5104 = sext i32 %5103 to i64
  %5105 = getelementptr inbounds i16, i16* %90, i64 %5104
  %5106 = load i16, i16* %5105, align 2, !tbaa !382
  %5107 = insertelement <64 x i16> %5102, i16 %5106, i32 12
  %5108 = extractelement <64 x i32> %5042, i32 13
  %5109 = sext i32 %5108 to i64
  %5110 = getelementptr inbounds i16, i16* %90, i64 %5109
  %5111 = load i16, i16* %5110, align 2, !tbaa !382
  %5112 = insertelement <64 x i16> %5107, i16 %5111, i32 13
  %5113 = extractelement <64 x i32> %5042, i32 14
  %5114 = sext i32 %5113 to i64
  %5115 = getelementptr inbounds i16, i16* %90, i64 %5114
  %5116 = load i16, i16* %5115, align 2, !tbaa !382
  %5117 = insertelement <64 x i16> %5112, i16 %5116, i32 14
  %5118 = extractelement <64 x i32> %5042, i32 15
  %5119 = sext i32 %5118 to i64
  %5120 = getelementptr inbounds i16, i16* %90, i64 %5119
  %5121 = load i16, i16* %5120, align 2, !tbaa !382
  %5122 = insertelement <64 x i16> %5117, i16 %5121, i32 15
  %5123 = extractelement <64 x i32> %5042, i32 16
  %5124 = sext i32 %5123 to i64
  %5125 = getelementptr inbounds i16, i16* %90, i64 %5124
  %5126 = load i16, i16* %5125, align 2, !tbaa !382
  %5127 = insertelement <64 x i16> %5122, i16 %5126, i32 16
  %5128 = extractelement <64 x i32> %5042, i32 17
  %5129 = sext i32 %5128 to i64
  %5130 = getelementptr inbounds i16, i16* %90, i64 %5129
  %5131 = load i16, i16* %5130, align 2, !tbaa !382
  %5132 = insertelement <64 x i16> %5127, i16 %5131, i32 17
  %5133 = extractelement <64 x i32> %5042, i32 18
  %5134 = sext i32 %5133 to i64
  %5135 = getelementptr inbounds i16, i16* %90, i64 %5134
  %5136 = load i16, i16* %5135, align 2, !tbaa !382
  %5137 = insertelement <64 x i16> %5132, i16 %5136, i32 18
  %5138 = extractelement <64 x i32> %5042, i32 19
  %5139 = sext i32 %5138 to i64
  %5140 = getelementptr inbounds i16, i16* %90, i64 %5139
  %5141 = load i16, i16* %5140, align 2, !tbaa !382
  %5142 = insertelement <64 x i16> %5137, i16 %5141, i32 19
  %5143 = extractelement <64 x i32> %5042, i32 20
  %5144 = sext i32 %5143 to i64
  %5145 = getelementptr inbounds i16, i16* %90, i64 %5144
  %5146 = load i16, i16* %5145, align 2, !tbaa !382
  %5147 = insertelement <64 x i16> %5142, i16 %5146, i32 20
  %5148 = extractelement <64 x i32> %5042, i32 21
  %5149 = sext i32 %5148 to i64
  %5150 = getelementptr inbounds i16, i16* %90, i64 %5149
  %5151 = load i16, i16* %5150, align 2, !tbaa !382
  %5152 = insertelement <64 x i16> %5147, i16 %5151, i32 21
  %5153 = extractelement <64 x i32> %5042, i32 22
  %5154 = sext i32 %5153 to i64
  %5155 = getelementptr inbounds i16, i16* %90, i64 %5154
  %5156 = load i16, i16* %5155, align 2, !tbaa !382
  %5157 = insertelement <64 x i16> %5152, i16 %5156, i32 22
  %5158 = extractelement <64 x i32> %5042, i32 23
  %5159 = sext i32 %5158 to i64
  %5160 = getelementptr inbounds i16, i16* %90, i64 %5159
  %5161 = load i16, i16* %5160, align 2, !tbaa !382
  %5162 = insertelement <64 x i16> %5157, i16 %5161, i32 23
  %5163 = extractelement <64 x i32> %5042, i32 24
  %5164 = sext i32 %5163 to i64
  %5165 = getelementptr inbounds i16, i16* %90, i64 %5164
  %5166 = load i16, i16* %5165, align 2, !tbaa !382
  %5167 = insertelement <64 x i16> %5162, i16 %5166, i32 24
  %5168 = extractelement <64 x i32> %5042, i32 25
  %5169 = sext i32 %5168 to i64
  %5170 = getelementptr inbounds i16, i16* %90, i64 %5169
  %5171 = load i16, i16* %5170, align 2, !tbaa !382
  %5172 = insertelement <64 x i16> %5167, i16 %5171, i32 25
  %5173 = extractelement <64 x i32> %5042, i32 26
  %5174 = sext i32 %5173 to i64
  %5175 = getelementptr inbounds i16, i16* %90, i64 %5174
  %5176 = load i16, i16* %5175, align 2, !tbaa !382
  %5177 = insertelement <64 x i16> %5172, i16 %5176, i32 26
  %5178 = extractelement <64 x i32> %5042, i32 27
  %5179 = sext i32 %5178 to i64
  %5180 = getelementptr inbounds i16, i16* %90, i64 %5179
  %5181 = load i16, i16* %5180, align 2, !tbaa !382
  %5182 = insertelement <64 x i16> %5177, i16 %5181, i32 27
  %5183 = extractelement <64 x i32> %5042, i32 28
  %5184 = sext i32 %5183 to i64
  %5185 = getelementptr inbounds i16, i16* %90, i64 %5184
  %5186 = load i16, i16* %5185, align 2, !tbaa !382
  %5187 = insertelement <64 x i16> %5182, i16 %5186, i32 28
  %5188 = extractelement <64 x i32> %5042, i32 29
  %5189 = sext i32 %5188 to i64
  %5190 = getelementptr inbounds i16, i16* %90, i64 %5189
  %5191 = load i16, i16* %5190, align 2, !tbaa !382
  %5192 = insertelement <64 x i16> %5187, i16 %5191, i32 29
  %5193 = extractelement <64 x i32> %5042, i32 30
  %5194 = sext i32 %5193 to i64
  %5195 = getelementptr inbounds i16, i16* %90, i64 %5194
  %5196 = load i16, i16* %5195, align 2, !tbaa !382
  %5197 = insertelement <64 x i16> %5192, i16 %5196, i32 30
  %5198 = extractelement <64 x i32> %5042, i32 31
  %5199 = sext i32 %5198 to i64
  %5200 = getelementptr inbounds i16, i16* %90, i64 %5199
  %5201 = load i16, i16* %5200, align 2, !tbaa !382
  %5202 = insertelement <64 x i16> %5197, i16 %5201, i32 31
  %5203 = extractelement <64 x i32> %5042, i32 32
  %5204 = sext i32 %5203 to i64
  %5205 = getelementptr inbounds i16, i16* %90, i64 %5204
  %5206 = load i16, i16* %5205, align 2, !tbaa !382
  %5207 = insertelement <64 x i16> %5202, i16 %5206, i32 32
  %5208 = extractelement <64 x i32> %5042, i32 33
  %5209 = sext i32 %5208 to i64
  %5210 = getelementptr inbounds i16, i16* %90, i64 %5209
  %5211 = load i16, i16* %5210, align 2, !tbaa !382
  %5212 = insertelement <64 x i16> %5207, i16 %5211, i32 33
  %5213 = extractelement <64 x i32> %5042, i32 34
  %5214 = sext i32 %5213 to i64
  %5215 = getelementptr inbounds i16, i16* %90, i64 %5214
  %5216 = load i16, i16* %5215, align 2, !tbaa !382
  %5217 = insertelement <64 x i16> %5212, i16 %5216, i32 34
  %5218 = extractelement <64 x i32> %5042, i32 35
  %5219 = sext i32 %5218 to i64
  %5220 = getelementptr inbounds i16, i16* %90, i64 %5219
  %5221 = load i16, i16* %5220, align 2, !tbaa !382
  %5222 = insertelement <64 x i16> %5217, i16 %5221, i32 35
  %5223 = extractelement <64 x i32> %5042, i32 36
  %5224 = sext i32 %5223 to i64
  %5225 = getelementptr inbounds i16, i16* %90, i64 %5224
  %5226 = load i16, i16* %5225, align 2, !tbaa !382
  %5227 = insertelement <64 x i16> %5222, i16 %5226, i32 36
  %5228 = extractelement <64 x i32> %5042, i32 37
  %5229 = sext i32 %5228 to i64
  %5230 = getelementptr inbounds i16, i16* %90, i64 %5229
  %5231 = load i16, i16* %5230, align 2, !tbaa !382
  %5232 = insertelement <64 x i16> %5227, i16 %5231, i32 37
  %5233 = extractelement <64 x i32> %5042, i32 38
  %5234 = sext i32 %5233 to i64
  %5235 = getelementptr inbounds i16, i16* %90, i64 %5234
  %5236 = load i16, i16* %5235, align 2, !tbaa !382
  %5237 = insertelement <64 x i16> %5232, i16 %5236, i32 38
  %5238 = extractelement <64 x i32> %5042, i32 39
  %5239 = sext i32 %5238 to i64
  %5240 = getelementptr inbounds i16, i16* %90, i64 %5239
  %5241 = load i16, i16* %5240, align 2, !tbaa !382
  %5242 = insertelement <64 x i16> %5237, i16 %5241, i32 39
  %5243 = extractelement <64 x i32> %5042, i32 40
  %5244 = sext i32 %5243 to i64
  %5245 = getelementptr inbounds i16, i16* %90, i64 %5244
  %5246 = load i16, i16* %5245, align 2, !tbaa !382
  %5247 = insertelement <64 x i16> %5242, i16 %5246, i32 40
  %5248 = extractelement <64 x i32> %5042, i32 41
  %5249 = sext i32 %5248 to i64
  %5250 = getelementptr inbounds i16, i16* %90, i64 %5249
  %5251 = load i16, i16* %5250, align 2, !tbaa !382
  %5252 = insertelement <64 x i16> %5247, i16 %5251, i32 41
  %5253 = extractelement <64 x i32> %5042, i32 42
  %5254 = sext i32 %5253 to i64
  %5255 = getelementptr inbounds i16, i16* %90, i64 %5254
  %5256 = load i16, i16* %5255, align 2, !tbaa !382
  %5257 = insertelement <64 x i16> %5252, i16 %5256, i32 42
  %5258 = extractelement <64 x i32> %5042, i32 43
  %5259 = sext i32 %5258 to i64
  %5260 = getelementptr inbounds i16, i16* %90, i64 %5259
  %5261 = load i16, i16* %5260, align 2, !tbaa !382
  %5262 = insertelement <64 x i16> %5257, i16 %5261, i32 43
  %5263 = extractelement <64 x i32> %5042, i32 44
  %5264 = sext i32 %5263 to i64
  %5265 = getelementptr inbounds i16, i16* %90, i64 %5264
  %5266 = load i16, i16* %5265, align 2, !tbaa !382
  %5267 = insertelement <64 x i16> %5262, i16 %5266, i32 44
  %5268 = extractelement <64 x i32> %5042, i32 45
  %5269 = sext i32 %5268 to i64
  %5270 = getelementptr inbounds i16, i16* %90, i64 %5269
  %5271 = load i16, i16* %5270, align 2, !tbaa !382
  %5272 = insertelement <64 x i16> %5267, i16 %5271, i32 45
  %5273 = extractelement <64 x i32> %5042, i32 46
  %5274 = sext i32 %5273 to i64
  %5275 = getelementptr inbounds i16, i16* %90, i64 %5274
  %5276 = load i16, i16* %5275, align 2, !tbaa !382
  %5277 = insertelement <64 x i16> %5272, i16 %5276, i32 46
  %5278 = extractelement <64 x i32> %5042, i32 47
  %5279 = sext i32 %5278 to i64
  %5280 = getelementptr inbounds i16, i16* %90, i64 %5279
  %5281 = load i16, i16* %5280, align 2, !tbaa !382
  %5282 = insertelement <64 x i16> %5277, i16 %5281, i32 47
  %5283 = extractelement <64 x i32> %5042, i32 48
  %5284 = sext i32 %5283 to i64
  %5285 = getelementptr inbounds i16, i16* %90, i64 %5284
  %5286 = load i16, i16* %5285, align 2, !tbaa !382
  %5287 = insertelement <64 x i16> %5282, i16 %5286, i32 48
  %5288 = extractelement <64 x i32> %5042, i32 49
  %5289 = sext i32 %5288 to i64
  %5290 = getelementptr inbounds i16, i16* %90, i64 %5289
  %5291 = load i16, i16* %5290, align 2, !tbaa !382
  %5292 = insertelement <64 x i16> %5287, i16 %5291, i32 49
  %5293 = extractelement <64 x i32> %5042, i32 50
  %5294 = sext i32 %5293 to i64
  %5295 = getelementptr inbounds i16, i16* %90, i64 %5294
  %5296 = load i16, i16* %5295, align 2, !tbaa !382
  %5297 = insertelement <64 x i16> %5292, i16 %5296, i32 50
  %5298 = extractelement <64 x i32> %5042, i32 51
  %5299 = sext i32 %5298 to i64
  %5300 = getelementptr inbounds i16, i16* %90, i64 %5299
  %5301 = load i16, i16* %5300, align 2, !tbaa !382
  %5302 = insertelement <64 x i16> %5297, i16 %5301, i32 51
  %5303 = extractelement <64 x i32> %5042, i32 52
  %5304 = sext i32 %5303 to i64
  %5305 = getelementptr inbounds i16, i16* %90, i64 %5304
  %5306 = load i16, i16* %5305, align 2, !tbaa !382
  %5307 = insertelement <64 x i16> %5302, i16 %5306, i32 52
  %5308 = extractelement <64 x i32> %5042, i32 53
  %5309 = sext i32 %5308 to i64
  %5310 = getelementptr inbounds i16, i16* %90, i64 %5309
  %5311 = load i16, i16* %5310, align 2, !tbaa !382
  %5312 = insertelement <64 x i16> %5307, i16 %5311, i32 53
  %5313 = extractelement <64 x i32> %5042, i32 54
  %5314 = sext i32 %5313 to i64
  %5315 = getelementptr inbounds i16, i16* %90, i64 %5314
  %5316 = load i16, i16* %5315, align 2, !tbaa !382
  %5317 = insertelement <64 x i16> %5312, i16 %5316, i32 54
  %5318 = extractelement <64 x i32> %5042, i32 55
  %5319 = sext i32 %5318 to i64
  %5320 = getelementptr inbounds i16, i16* %90, i64 %5319
  %5321 = load i16, i16* %5320, align 2, !tbaa !382
  %5322 = insertelement <64 x i16> %5317, i16 %5321, i32 55
  %5323 = extractelement <64 x i32> %5042, i32 56
  %5324 = sext i32 %5323 to i64
  %5325 = getelementptr inbounds i16, i16* %90, i64 %5324
  %5326 = load i16, i16* %5325, align 2, !tbaa !382
  %5327 = insertelement <64 x i16> %5322, i16 %5326, i32 56
  %5328 = extractelement <64 x i32> %5042, i32 57
  %5329 = sext i32 %5328 to i64
  %5330 = getelementptr inbounds i16, i16* %90, i64 %5329
  %5331 = load i16, i16* %5330, align 2, !tbaa !382
  %5332 = insertelement <64 x i16> %5327, i16 %5331, i32 57
  %5333 = extractelement <64 x i32> %5042, i32 58
  %5334 = sext i32 %5333 to i64
  %5335 = getelementptr inbounds i16, i16* %90, i64 %5334
  %5336 = load i16, i16* %5335, align 2, !tbaa !382
  %5337 = insertelement <64 x i16> %5332, i16 %5336, i32 58
  %5338 = extractelement <64 x i32> %5042, i32 59
  %5339 = sext i32 %5338 to i64
  %5340 = getelementptr inbounds i16, i16* %90, i64 %5339
  %5341 = load i16, i16* %5340, align 2, !tbaa !382
  %5342 = insertelement <64 x i16> %5337, i16 %5341, i32 59
  %5343 = extractelement <64 x i32> %5042, i32 60
  %5344 = sext i32 %5343 to i64
  %5345 = getelementptr inbounds i16, i16* %90, i64 %5344
  %5346 = load i16, i16* %5345, align 2, !tbaa !382
  %5347 = insertelement <64 x i16> %5342, i16 %5346, i32 60
  %5348 = extractelement <64 x i32> %5042, i32 61
  %5349 = sext i32 %5348 to i64
  %5350 = getelementptr inbounds i16, i16* %90, i64 %5349
  %5351 = load i16, i16* %5350, align 2, !tbaa !382
  %5352 = insertelement <64 x i16> %5347, i16 %5351, i32 61
  %5353 = extractelement <64 x i32> %5042, i32 62
  %5354 = sext i32 %5353 to i64
  %5355 = getelementptr inbounds i16, i16* %90, i64 %5354
  %5356 = load i16, i16* %5355, align 2, !tbaa !382
  %5357 = insertelement <64 x i16> %5352, i16 %5356, i32 62
  %5358 = extractelement <64 x i32> %5042, i32 63
  %5359 = sext i32 %5358 to i64
  %5360 = getelementptr inbounds i16, i16* %90, i64 %5359
  %5361 = load i16, i16* %5360, align 2, !tbaa !382
  %5362 = insertelement <64 x i16> %5357, i16 %5361, i32 63
  %5363 = add nsw i32 %blur_x.s0.x.v1.base.s21, -64
  %5364 = insertelement <64 x i32> undef, i32 %5363, i32 0
  %5365 = shufflevector <64 x i32> %5364, <64 x i32> undef, <64 x i32> zeroinitializer
  %5366 = add nsw <64 x i32> %5365, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5367 = shufflevector <64 x i32> %5366, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5368 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5367, <4 x i32> %87)
  %5369 = shufflevector <64 x i32> %5366, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5370 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5369, <4 x i32> %87)
  %5371 = shufflevector <64 x i32> %5366, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %5372 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5371, <4 x i32> %87)
  %5373 = shufflevector <64 x i32> %5366, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5374 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5373, <4 x i32> %87)
  %5375 = shufflevector <64 x i32> %5366, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %5376 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5375, <4 x i32> %87)
  %5377 = shufflevector <64 x i32> %5366, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %5378 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5377, <4 x i32> %87)
  %5379 = shufflevector <64 x i32> %5366, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %5380 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5379, <4 x i32> %87)
  %5381 = shufflevector <64 x i32> %5366, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %5382 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5381, <4 x i32> %87)
  %5383 = shufflevector <64 x i32> %5366, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %5384 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5383, <4 x i32> %87)
  %5385 = shufflevector <64 x i32> %5366, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %5386 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5385, <4 x i32> %87)
  %5387 = shufflevector <64 x i32> %5366, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %5388 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5387, <4 x i32> %87)
  %5389 = shufflevector <64 x i32> %5366, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %5390 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5389, <4 x i32> %87)
  %5391 = shufflevector <64 x i32> %5366, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %5392 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5391, <4 x i32> %87)
  %5393 = shufflevector <64 x i32> %5366, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %5394 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5393, <4 x i32> %87)
  %5395 = shufflevector <64 x i32> %5366, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %5396 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5395, <4 x i32> %87)
  %5397 = shufflevector <64 x i32> %5366, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %5398 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5397, <4 x i32> %87)
  %5399 = shufflevector <4 x i32> %5398, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %5400 = shufflevector <8 x i32> %5399, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %5401 = shufflevector <16 x i32> %5400, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %5402 = shufflevector <32 x i32> %5401, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %5403 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5368, <4 x i32> %89)
  %5404 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5370, <4 x i32> %89)
  %5405 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5372, <4 x i32> %89)
  %5406 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5374, <4 x i32> %89)
  %5407 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5376, <4 x i32> %89)
  %5408 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5378, <4 x i32> %89)
  %5409 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5380, <4 x i32> %89)
  %5410 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5382, <4 x i32> %89)
  %5411 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5384, <4 x i32> %89)
  %5412 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5386, <4 x i32> %89)
  %5413 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5388, <4 x i32> %89)
  %5414 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5390, <4 x i32> %89)
  %5415 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5392, <4 x i32> %89)
  %5416 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5394, <4 x i32> %89)
  %5417 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5396, <4 x i32> %89)
  %5418 = shufflevector <64 x i32> %5402, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %5419 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5418, <4 x i32> %89)
  %5420 = shufflevector <4 x i32> %5403, <4 x i32> %5404, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5421 = shufflevector <4 x i32> %5405, <4 x i32> %5406, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5422 = shufflevector <4 x i32> %5407, <4 x i32> %5408, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5423 = shufflevector <4 x i32> %5409, <4 x i32> %5410, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5424 = shufflevector <4 x i32> %5411, <4 x i32> %5412, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5425 = shufflevector <4 x i32> %5413, <4 x i32> %5414, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5426 = shufflevector <4 x i32> %5415, <4 x i32> %5416, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5427 = shufflevector <4 x i32> %5417, <4 x i32> %5419, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5428 = shufflevector <8 x i32> %5420, <8 x i32> %5421, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5429 = shufflevector <8 x i32> %5422, <8 x i32> %5423, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5430 = shufflevector <8 x i32> %5424, <8 x i32> %5425, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5431 = shufflevector <8 x i32> %5426, <8 x i32> %5427, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5432 = shufflevector <16 x i32> %5428, <16 x i32> %5429, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5433 = shufflevector <16 x i32> %5430, <16 x i32> %5431, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5434 = shufflevector <32 x i32> %5432, <32 x i32> %5433, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5435 = add nsw <64 x i32> %5434, %t207
  %5436 = extractelement <64 x i32> %5435, i32 0
  %5437 = sext i32 %5436 to i64
  %5438 = getelementptr inbounds i16, i16* %90, i64 %5437
  %5439 = load i16, i16* %5438, align 2, !tbaa !382
  %5440 = insertelement <64 x i16> undef, i16 %5439, i32 0
  %5441 = extractelement <64 x i32> %5435, i32 1
  %5442 = sext i32 %5441 to i64
  %5443 = getelementptr inbounds i16, i16* %90, i64 %5442
  %5444 = load i16, i16* %5443, align 2, !tbaa !382
  %5445 = insertelement <64 x i16> %5440, i16 %5444, i32 1
  %5446 = extractelement <64 x i32> %5435, i32 2
  %5447 = sext i32 %5446 to i64
  %5448 = getelementptr inbounds i16, i16* %90, i64 %5447
  %5449 = load i16, i16* %5448, align 2, !tbaa !382
  %5450 = insertelement <64 x i16> %5445, i16 %5449, i32 2
  %5451 = extractelement <64 x i32> %5435, i32 3
  %5452 = sext i32 %5451 to i64
  %5453 = getelementptr inbounds i16, i16* %90, i64 %5452
  %5454 = load i16, i16* %5453, align 2, !tbaa !382
  %5455 = insertelement <64 x i16> %5450, i16 %5454, i32 3
  %5456 = extractelement <64 x i32> %5435, i32 4
  %5457 = sext i32 %5456 to i64
  %5458 = getelementptr inbounds i16, i16* %90, i64 %5457
  %5459 = load i16, i16* %5458, align 2, !tbaa !382
  %5460 = insertelement <64 x i16> %5455, i16 %5459, i32 4
  %5461 = extractelement <64 x i32> %5435, i32 5
  %5462 = sext i32 %5461 to i64
  %5463 = getelementptr inbounds i16, i16* %90, i64 %5462
  %5464 = load i16, i16* %5463, align 2, !tbaa !382
  %5465 = insertelement <64 x i16> %5460, i16 %5464, i32 5
  %5466 = extractelement <64 x i32> %5435, i32 6
  %5467 = sext i32 %5466 to i64
  %5468 = getelementptr inbounds i16, i16* %90, i64 %5467
  %5469 = load i16, i16* %5468, align 2, !tbaa !382
  %5470 = insertelement <64 x i16> %5465, i16 %5469, i32 6
  %5471 = extractelement <64 x i32> %5435, i32 7
  %5472 = sext i32 %5471 to i64
  %5473 = getelementptr inbounds i16, i16* %90, i64 %5472
  %5474 = load i16, i16* %5473, align 2, !tbaa !382
  %5475 = insertelement <64 x i16> %5470, i16 %5474, i32 7
  %5476 = extractelement <64 x i32> %5435, i32 8
  %5477 = sext i32 %5476 to i64
  %5478 = getelementptr inbounds i16, i16* %90, i64 %5477
  %5479 = load i16, i16* %5478, align 2, !tbaa !382
  %5480 = insertelement <64 x i16> %5475, i16 %5479, i32 8
  %5481 = extractelement <64 x i32> %5435, i32 9
  %5482 = sext i32 %5481 to i64
  %5483 = getelementptr inbounds i16, i16* %90, i64 %5482
  %5484 = load i16, i16* %5483, align 2, !tbaa !382
  %5485 = insertelement <64 x i16> %5480, i16 %5484, i32 9
  %5486 = extractelement <64 x i32> %5435, i32 10
  %5487 = sext i32 %5486 to i64
  %5488 = getelementptr inbounds i16, i16* %90, i64 %5487
  %5489 = load i16, i16* %5488, align 2, !tbaa !382
  %5490 = insertelement <64 x i16> %5485, i16 %5489, i32 10
  %5491 = extractelement <64 x i32> %5435, i32 11
  %5492 = sext i32 %5491 to i64
  %5493 = getelementptr inbounds i16, i16* %90, i64 %5492
  %5494 = load i16, i16* %5493, align 2, !tbaa !382
  %5495 = insertelement <64 x i16> %5490, i16 %5494, i32 11
  %5496 = extractelement <64 x i32> %5435, i32 12
  %5497 = sext i32 %5496 to i64
  %5498 = getelementptr inbounds i16, i16* %90, i64 %5497
  %5499 = load i16, i16* %5498, align 2, !tbaa !382
  %5500 = insertelement <64 x i16> %5495, i16 %5499, i32 12
  %5501 = extractelement <64 x i32> %5435, i32 13
  %5502 = sext i32 %5501 to i64
  %5503 = getelementptr inbounds i16, i16* %90, i64 %5502
  %5504 = load i16, i16* %5503, align 2, !tbaa !382
  %5505 = insertelement <64 x i16> %5500, i16 %5504, i32 13
  %5506 = extractelement <64 x i32> %5435, i32 14
  %5507 = sext i32 %5506 to i64
  %5508 = getelementptr inbounds i16, i16* %90, i64 %5507
  %5509 = load i16, i16* %5508, align 2, !tbaa !382
  %5510 = insertelement <64 x i16> %5505, i16 %5509, i32 14
  %5511 = extractelement <64 x i32> %5435, i32 15
  %5512 = sext i32 %5511 to i64
  %5513 = getelementptr inbounds i16, i16* %90, i64 %5512
  %5514 = load i16, i16* %5513, align 2, !tbaa !382
  %5515 = insertelement <64 x i16> %5510, i16 %5514, i32 15
  %5516 = extractelement <64 x i32> %5435, i32 16
  %5517 = sext i32 %5516 to i64
  %5518 = getelementptr inbounds i16, i16* %90, i64 %5517
  %5519 = load i16, i16* %5518, align 2, !tbaa !382
  %5520 = insertelement <64 x i16> %5515, i16 %5519, i32 16
  %5521 = extractelement <64 x i32> %5435, i32 17
  %5522 = sext i32 %5521 to i64
  %5523 = getelementptr inbounds i16, i16* %90, i64 %5522
  %5524 = load i16, i16* %5523, align 2, !tbaa !382
  %5525 = insertelement <64 x i16> %5520, i16 %5524, i32 17
  %5526 = extractelement <64 x i32> %5435, i32 18
  %5527 = sext i32 %5526 to i64
  %5528 = getelementptr inbounds i16, i16* %90, i64 %5527
  %5529 = load i16, i16* %5528, align 2, !tbaa !382
  %5530 = insertelement <64 x i16> %5525, i16 %5529, i32 18
  %5531 = extractelement <64 x i32> %5435, i32 19
  %5532 = sext i32 %5531 to i64
  %5533 = getelementptr inbounds i16, i16* %90, i64 %5532
  %5534 = load i16, i16* %5533, align 2, !tbaa !382
  %5535 = insertelement <64 x i16> %5530, i16 %5534, i32 19
  %5536 = extractelement <64 x i32> %5435, i32 20
  %5537 = sext i32 %5536 to i64
  %5538 = getelementptr inbounds i16, i16* %90, i64 %5537
  %5539 = load i16, i16* %5538, align 2, !tbaa !382
  %5540 = insertelement <64 x i16> %5535, i16 %5539, i32 20
  %5541 = extractelement <64 x i32> %5435, i32 21
  %5542 = sext i32 %5541 to i64
  %5543 = getelementptr inbounds i16, i16* %90, i64 %5542
  %5544 = load i16, i16* %5543, align 2, !tbaa !382
  %5545 = insertelement <64 x i16> %5540, i16 %5544, i32 21
  %5546 = extractelement <64 x i32> %5435, i32 22
  %5547 = sext i32 %5546 to i64
  %5548 = getelementptr inbounds i16, i16* %90, i64 %5547
  %5549 = load i16, i16* %5548, align 2, !tbaa !382
  %5550 = insertelement <64 x i16> %5545, i16 %5549, i32 22
  %5551 = extractelement <64 x i32> %5435, i32 23
  %5552 = sext i32 %5551 to i64
  %5553 = getelementptr inbounds i16, i16* %90, i64 %5552
  %5554 = load i16, i16* %5553, align 2, !tbaa !382
  %5555 = insertelement <64 x i16> %5550, i16 %5554, i32 23
  %5556 = extractelement <64 x i32> %5435, i32 24
  %5557 = sext i32 %5556 to i64
  %5558 = getelementptr inbounds i16, i16* %90, i64 %5557
  %5559 = load i16, i16* %5558, align 2, !tbaa !382
  %5560 = insertelement <64 x i16> %5555, i16 %5559, i32 24
  %5561 = extractelement <64 x i32> %5435, i32 25
  %5562 = sext i32 %5561 to i64
  %5563 = getelementptr inbounds i16, i16* %90, i64 %5562
  %5564 = load i16, i16* %5563, align 2, !tbaa !382
  %5565 = insertelement <64 x i16> %5560, i16 %5564, i32 25
  %5566 = extractelement <64 x i32> %5435, i32 26
  %5567 = sext i32 %5566 to i64
  %5568 = getelementptr inbounds i16, i16* %90, i64 %5567
  %5569 = load i16, i16* %5568, align 2, !tbaa !382
  %5570 = insertelement <64 x i16> %5565, i16 %5569, i32 26
  %5571 = extractelement <64 x i32> %5435, i32 27
  %5572 = sext i32 %5571 to i64
  %5573 = getelementptr inbounds i16, i16* %90, i64 %5572
  %5574 = load i16, i16* %5573, align 2, !tbaa !382
  %5575 = insertelement <64 x i16> %5570, i16 %5574, i32 27
  %5576 = extractelement <64 x i32> %5435, i32 28
  %5577 = sext i32 %5576 to i64
  %5578 = getelementptr inbounds i16, i16* %90, i64 %5577
  %5579 = load i16, i16* %5578, align 2, !tbaa !382
  %5580 = insertelement <64 x i16> %5575, i16 %5579, i32 28
  %5581 = extractelement <64 x i32> %5435, i32 29
  %5582 = sext i32 %5581 to i64
  %5583 = getelementptr inbounds i16, i16* %90, i64 %5582
  %5584 = load i16, i16* %5583, align 2, !tbaa !382
  %5585 = insertelement <64 x i16> %5580, i16 %5584, i32 29
  %5586 = extractelement <64 x i32> %5435, i32 30
  %5587 = sext i32 %5586 to i64
  %5588 = getelementptr inbounds i16, i16* %90, i64 %5587
  %5589 = load i16, i16* %5588, align 2, !tbaa !382
  %5590 = insertelement <64 x i16> %5585, i16 %5589, i32 30
  %5591 = extractelement <64 x i32> %5435, i32 31
  %5592 = sext i32 %5591 to i64
  %5593 = getelementptr inbounds i16, i16* %90, i64 %5592
  %5594 = load i16, i16* %5593, align 2, !tbaa !382
  %5595 = insertelement <64 x i16> %5590, i16 %5594, i32 31
  %5596 = extractelement <64 x i32> %5435, i32 32
  %5597 = sext i32 %5596 to i64
  %5598 = getelementptr inbounds i16, i16* %90, i64 %5597
  %5599 = load i16, i16* %5598, align 2, !tbaa !382
  %5600 = insertelement <64 x i16> %5595, i16 %5599, i32 32
  %5601 = extractelement <64 x i32> %5435, i32 33
  %5602 = sext i32 %5601 to i64
  %5603 = getelementptr inbounds i16, i16* %90, i64 %5602
  %5604 = load i16, i16* %5603, align 2, !tbaa !382
  %5605 = insertelement <64 x i16> %5600, i16 %5604, i32 33
  %5606 = extractelement <64 x i32> %5435, i32 34
  %5607 = sext i32 %5606 to i64
  %5608 = getelementptr inbounds i16, i16* %90, i64 %5607
  %5609 = load i16, i16* %5608, align 2, !tbaa !382
  %5610 = insertelement <64 x i16> %5605, i16 %5609, i32 34
  %5611 = extractelement <64 x i32> %5435, i32 35
  %5612 = sext i32 %5611 to i64
  %5613 = getelementptr inbounds i16, i16* %90, i64 %5612
  %5614 = load i16, i16* %5613, align 2, !tbaa !382
  %5615 = insertelement <64 x i16> %5610, i16 %5614, i32 35
  %5616 = extractelement <64 x i32> %5435, i32 36
  %5617 = sext i32 %5616 to i64
  %5618 = getelementptr inbounds i16, i16* %90, i64 %5617
  %5619 = load i16, i16* %5618, align 2, !tbaa !382
  %5620 = insertelement <64 x i16> %5615, i16 %5619, i32 36
  %5621 = extractelement <64 x i32> %5435, i32 37
  %5622 = sext i32 %5621 to i64
  %5623 = getelementptr inbounds i16, i16* %90, i64 %5622
  %5624 = load i16, i16* %5623, align 2, !tbaa !382
  %5625 = insertelement <64 x i16> %5620, i16 %5624, i32 37
  %5626 = extractelement <64 x i32> %5435, i32 38
  %5627 = sext i32 %5626 to i64
  %5628 = getelementptr inbounds i16, i16* %90, i64 %5627
  %5629 = load i16, i16* %5628, align 2, !tbaa !382
  %5630 = insertelement <64 x i16> %5625, i16 %5629, i32 38
  %5631 = extractelement <64 x i32> %5435, i32 39
  %5632 = sext i32 %5631 to i64
  %5633 = getelementptr inbounds i16, i16* %90, i64 %5632
  %5634 = load i16, i16* %5633, align 2, !tbaa !382
  %5635 = insertelement <64 x i16> %5630, i16 %5634, i32 39
  %5636 = extractelement <64 x i32> %5435, i32 40
  %5637 = sext i32 %5636 to i64
  %5638 = getelementptr inbounds i16, i16* %90, i64 %5637
  %5639 = load i16, i16* %5638, align 2, !tbaa !382
  %5640 = insertelement <64 x i16> %5635, i16 %5639, i32 40
  %5641 = extractelement <64 x i32> %5435, i32 41
  %5642 = sext i32 %5641 to i64
  %5643 = getelementptr inbounds i16, i16* %90, i64 %5642
  %5644 = load i16, i16* %5643, align 2, !tbaa !382
  %5645 = insertelement <64 x i16> %5640, i16 %5644, i32 41
  %5646 = extractelement <64 x i32> %5435, i32 42
  %5647 = sext i32 %5646 to i64
  %5648 = getelementptr inbounds i16, i16* %90, i64 %5647
  %5649 = load i16, i16* %5648, align 2, !tbaa !382
  %5650 = insertelement <64 x i16> %5645, i16 %5649, i32 42
  %5651 = extractelement <64 x i32> %5435, i32 43
  %5652 = sext i32 %5651 to i64
  %5653 = getelementptr inbounds i16, i16* %90, i64 %5652
  %5654 = load i16, i16* %5653, align 2, !tbaa !382
  %5655 = insertelement <64 x i16> %5650, i16 %5654, i32 43
  %5656 = extractelement <64 x i32> %5435, i32 44
  %5657 = sext i32 %5656 to i64
  %5658 = getelementptr inbounds i16, i16* %90, i64 %5657
  %5659 = load i16, i16* %5658, align 2, !tbaa !382
  %5660 = insertelement <64 x i16> %5655, i16 %5659, i32 44
  %5661 = extractelement <64 x i32> %5435, i32 45
  %5662 = sext i32 %5661 to i64
  %5663 = getelementptr inbounds i16, i16* %90, i64 %5662
  %5664 = load i16, i16* %5663, align 2, !tbaa !382
  %5665 = insertelement <64 x i16> %5660, i16 %5664, i32 45
  %5666 = extractelement <64 x i32> %5435, i32 46
  %5667 = sext i32 %5666 to i64
  %5668 = getelementptr inbounds i16, i16* %90, i64 %5667
  %5669 = load i16, i16* %5668, align 2, !tbaa !382
  %5670 = insertelement <64 x i16> %5665, i16 %5669, i32 46
  %5671 = extractelement <64 x i32> %5435, i32 47
  %5672 = sext i32 %5671 to i64
  %5673 = getelementptr inbounds i16, i16* %90, i64 %5672
  %5674 = load i16, i16* %5673, align 2, !tbaa !382
  %5675 = insertelement <64 x i16> %5670, i16 %5674, i32 47
  %5676 = extractelement <64 x i32> %5435, i32 48
  %5677 = sext i32 %5676 to i64
  %5678 = getelementptr inbounds i16, i16* %90, i64 %5677
  %5679 = load i16, i16* %5678, align 2, !tbaa !382
  %5680 = insertelement <64 x i16> %5675, i16 %5679, i32 48
  %5681 = extractelement <64 x i32> %5435, i32 49
  %5682 = sext i32 %5681 to i64
  %5683 = getelementptr inbounds i16, i16* %90, i64 %5682
  %5684 = load i16, i16* %5683, align 2, !tbaa !382
  %5685 = insertelement <64 x i16> %5680, i16 %5684, i32 49
  %5686 = extractelement <64 x i32> %5435, i32 50
  %5687 = sext i32 %5686 to i64
  %5688 = getelementptr inbounds i16, i16* %90, i64 %5687
  %5689 = load i16, i16* %5688, align 2, !tbaa !382
  %5690 = insertelement <64 x i16> %5685, i16 %5689, i32 50
  %5691 = extractelement <64 x i32> %5435, i32 51
  %5692 = sext i32 %5691 to i64
  %5693 = getelementptr inbounds i16, i16* %90, i64 %5692
  %5694 = load i16, i16* %5693, align 2, !tbaa !382
  %5695 = insertelement <64 x i16> %5690, i16 %5694, i32 51
  %5696 = extractelement <64 x i32> %5435, i32 52
  %5697 = sext i32 %5696 to i64
  %5698 = getelementptr inbounds i16, i16* %90, i64 %5697
  %5699 = load i16, i16* %5698, align 2, !tbaa !382
  %5700 = insertelement <64 x i16> %5695, i16 %5699, i32 52
  %5701 = extractelement <64 x i32> %5435, i32 53
  %5702 = sext i32 %5701 to i64
  %5703 = getelementptr inbounds i16, i16* %90, i64 %5702
  %5704 = load i16, i16* %5703, align 2, !tbaa !382
  %5705 = insertelement <64 x i16> %5700, i16 %5704, i32 53
  %5706 = extractelement <64 x i32> %5435, i32 54
  %5707 = sext i32 %5706 to i64
  %5708 = getelementptr inbounds i16, i16* %90, i64 %5707
  %5709 = load i16, i16* %5708, align 2, !tbaa !382
  %5710 = insertelement <64 x i16> %5705, i16 %5709, i32 54
  %5711 = extractelement <64 x i32> %5435, i32 55
  %5712 = sext i32 %5711 to i64
  %5713 = getelementptr inbounds i16, i16* %90, i64 %5712
  %5714 = load i16, i16* %5713, align 2, !tbaa !382
  %5715 = insertelement <64 x i16> %5710, i16 %5714, i32 55
  %5716 = extractelement <64 x i32> %5435, i32 56
  %5717 = sext i32 %5716 to i64
  %5718 = getelementptr inbounds i16, i16* %90, i64 %5717
  %5719 = load i16, i16* %5718, align 2, !tbaa !382
  %5720 = insertelement <64 x i16> %5715, i16 %5719, i32 56
  %5721 = extractelement <64 x i32> %5435, i32 57
  %5722 = sext i32 %5721 to i64
  %5723 = getelementptr inbounds i16, i16* %90, i64 %5722
  %5724 = load i16, i16* %5723, align 2, !tbaa !382
  %5725 = insertelement <64 x i16> %5720, i16 %5724, i32 57
  %5726 = extractelement <64 x i32> %5435, i32 58
  %5727 = sext i32 %5726 to i64
  %5728 = getelementptr inbounds i16, i16* %90, i64 %5727
  %5729 = load i16, i16* %5728, align 2, !tbaa !382
  %5730 = insertelement <64 x i16> %5725, i16 %5729, i32 58
  %5731 = extractelement <64 x i32> %5435, i32 59
  %5732 = sext i32 %5731 to i64
  %5733 = getelementptr inbounds i16, i16* %90, i64 %5732
  %5734 = load i16, i16* %5733, align 2, !tbaa !382
  %5735 = insertelement <64 x i16> %5730, i16 %5734, i32 59
  %5736 = extractelement <64 x i32> %5435, i32 60
  %5737 = sext i32 %5736 to i64
  %5738 = getelementptr inbounds i16, i16* %90, i64 %5737
  %5739 = load i16, i16* %5738, align 2, !tbaa !382
  %5740 = insertelement <64 x i16> %5735, i16 %5739, i32 60
  %5741 = extractelement <64 x i32> %5435, i32 61
  %5742 = sext i32 %5741 to i64
  %5743 = getelementptr inbounds i16, i16* %90, i64 %5742
  %5744 = load i16, i16* %5743, align 2, !tbaa !382
  %5745 = insertelement <64 x i16> %5740, i16 %5744, i32 61
  %5746 = extractelement <64 x i32> %5435, i32 62
  %5747 = sext i32 %5746 to i64
  %5748 = getelementptr inbounds i16, i16* %90, i64 %5747
  %5749 = load i16, i16* %5748, align 2, !tbaa !382
  %5750 = insertelement <64 x i16> %5745, i16 %5749, i32 62
  %5751 = extractelement <64 x i32> %5435, i32 63
  %5752 = sext i32 %5751 to i64
  %5753 = getelementptr inbounds i16, i16* %90, i64 %5752
  %5754 = load i16, i16* %5753, align 2, !tbaa !382
  %5755 = insertelement <64 x i16> %5750, i16 %5754, i32 63
  %5756 = add nsw i32 %blur_x.s0.x.v1.base.s21, -62
  %5757 = insertelement <64 x i32> undef, i32 %5756, i32 0
  %5758 = shufflevector <64 x i32> %5757, <64 x i32> undef, <64 x i32> zeroinitializer
  %5759 = add nsw <64 x i32> %5758, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5760 = shufflevector <64 x i32> %5759, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5761 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5760, <4 x i32> %87)
  %5762 = shufflevector <64 x i32> %5759, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5763 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5762, <4 x i32> %87)
  %5764 = shufflevector <64 x i32> %5759, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %5765 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5764, <4 x i32> %87)
  %5766 = shufflevector <64 x i32> %5759, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5767 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5766, <4 x i32> %87)
  %5768 = shufflevector <64 x i32> %5759, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %5769 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5768, <4 x i32> %87)
  %5770 = shufflevector <64 x i32> %5759, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %5771 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5770, <4 x i32> %87)
  %5772 = shufflevector <64 x i32> %5759, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %5773 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5772, <4 x i32> %87)
  %5774 = shufflevector <64 x i32> %5759, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %5775 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5774, <4 x i32> %87)
  %5776 = shufflevector <64 x i32> %5759, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %5777 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5776, <4 x i32> %87)
  %5778 = shufflevector <64 x i32> %5759, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %5779 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5778, <4 x i32> %87)
  %5780 = shufflevector <64 x i32> %5759, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %5781 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5780, <4 x i32> %87)
  %5782 = shufflevector <64 x i32> %5759, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %5783 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5782, <4 x i32> %87)
  %5784 = shufflevector <64 x i32> %5759, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %5785 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5784, <4 x i32> %87)
  %5786 = shufflevector <64 x i32> %5759, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %5787 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5786, <4 x i32> %87)
  %5788 = shufflevector <64 x i32> %5759, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %5789 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5788, <4 x i32> %87)
  %5790 = shufflevector <64 x i32> %5759, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %5791 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5790, <4 x i32> %87)
  %5792 = shufflevector <4 x i32> %5791, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %5793 = shufflevector <8 x i32> %5792, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %5794 = shufflevector <16 x i32> %5793, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %5795 = shufflevector <32 x i32> %5794, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %5796 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5761, <4 x i32> %89)
  %5797 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5763, <4 x i32> %89)
  %5798 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5765, <4 x i32> %89)
  %5799 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5767, <4 x i32> %89)
  %5800 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5769, <4 x i32> %89)
  %5801 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5771, <4 x i32> %89)
  %5802 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5773, <4 x i32> %89)
  %5803 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5775, <4 x i32> %89)
  %5804 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5777, <4 x i32> %89)
  %5805 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5779, <4 x i32> %89)
  %5806 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5781, <4 x i32> %89)
  %5807 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5783, <4 x i32> %89)
  %5808 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5785, <4 x i32> %89)
  %5809 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5787, <4 x i32> %89)
  %5810 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5789, <4 x i32> %89)
  %5811 = shufflevector <64 x i32> %5795, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %5812 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5811, <4 x i32> %89)
  %5813 = shufflevector <4 x i32> %5796, <4 x i32> %5797, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5814 = shufflevector <4 x i32> %5798, <4 x i32> %5799, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5815 = shufflevector <4 x i32> %5800, <4 x i32> %5801, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5816 = shufflevector <4 x i32> %5802, <4 x i32> %5803, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5817 = shufflevector <4 x i32> %5804, <4 x i32> %5805, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5818 = shufflevector <4 x i32> %5806, <4 x i32> %5807, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5819 = shufflevector <4 x i32> %5808, <4 x i32> %5809, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5820 = shufflevector <4 x i32> %5810, <4 x i32> %5812, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5821 = shufflevector <8 x i32> %5813, <8 x i32> %5814, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5822 = shufflevector <8 x i32> %5815, <8 x i32> %5816, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5823 = shufflevector <8 x i32> %5817, <8 x i32> %5818, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5824 = shufflevector <8 x i32> %5819, <8 x i32> %5820, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5825 = shufflevector <16 x i32> %5821, <16 x i32> %5822, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5826 = shufflevector <16 x i32> %5823, <16 x i32> %5824, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5827 = shufflevector <32 x i32> %5825, <32 x i32> %5826, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5828 = add nsw <64 x i32> %5827, %t207
  %5829 = extractelement <64 x i32> %5828, i32 0
  %5830 = sext i32 %5829 to i64
  %5831 = getelementptr inbounds i16, i16* %90, i64 %5830
  %5832 = load i16, i16* %5831, align 2, !tbaa !382
  %5833 = insertelement <64 x i16> undef, i16 %5832, i32 0
  %5834 = extractelement <64 x i32> %5828, i32 1
  %5835 = sext i32 %5834 to i64
  %5836 = getelementptr inbounds i16, i16* %90, i64 %5835
  %5837 = load i16, i16* %5836, align 2, !tbaa !382
  %5838 = insertelement <64 x i16> %5833, i16 %5837, i32 1
  %5839 = extractelement <64 x i32> %5828, i32 2
  %5840 = sext i32 %5839 to i64
  %5841 = getelementptr inbounds i16, i16* %90, i64 %5840
  %5842 = load i16, i16* %5841, align 2, !tbaa !382
  %5843 = insertelement <64 x i16> %5838, i16 %5842, i32 2
  %5844 = extractelement <64 x i32> %5828, i32 3
  %5845 = sext i32 %5844 to i64
  %5846 = getelementptr inbounds i16, i16* %90, i64 %5845
  %5847 = load i16, i16* %5846, align 2, !tbaa !382
  %5848 = insertelement <64 x i16> %5843, i16 %5847, i32 3
  %5849 = extractelement <64 x i32> %5828, i32 4
  %5850 = sext i32 %5849 to i64
  %5851 = getelementptr inbounds i16, i16* %90, i64 %5850
  %5852 = load i16, i16* %5851, align 2, !tbaa !382
  %5853 = insertelement <64 x i16> %5848, i16 %5852, i32 4
  %5854 = extractelement <64 x i32> %5828, i32 5
  %5855 = sext i32 %5854 to i64
  %5856 = getelementptr inbounds i16, i16* %90, i64 %5855
  %5857 = load i16, i16* %5856, align 2, !tbaa !382
  %5858 = insertelement <64 x i16> %5853, i16 %5857, i32 5
  %5859 = extractelement <64 x i32> %5828, i32 6
  %5860 = sext i32 %5859 to i64
  %5861 = getelementptr inbounds i16, i16* %90, i64 %5860
  %5862 = load i16, i16* %5861, align 2, !tbaa !382
  %5863 = insertelement <64 x i16> %5858, i16 %5862, i32 6
  %5864 = extractelement <64 x i32> %5828, i32 7
  %5865 = sext i32 %5864 to i64
  %5866 = getelementptr inbounds i16, i16* %90, i64 %5865
  %5867 = load i16, i16* %5866, align 2, !tbaa !382
  %5868 = insertelement <64 x i16> %5863, i16 %5867, i32 7
  %5869 = extractelement <64 x i32> %5828, i32 8
  %5870 = sext i32 %5869 to i64
  %5871 = getelementptr inbounds i16, i16* %90, i64 %5870
  %5872 = load i16, i16* %5871, align 2, !tbaa !382
  %5873 = insertelement <64 x i16> %5868, i16 %5872, i32 8
  %5874 = extractelement <64 x i32> %5828, i32 9
  %5875 = sext i32 %5874 to i64
  %5876 = getelementptr inbounds i16, i16* %90, i64 %5875
  %5877 = load i16, i16* %5876, align 2, !tbaa !382
  %5878 = insertelement <64 x i16> %5873, i16 %5877, i32 9
  %5879 = extractelement <64 x i32> %5828, i32 10
  %5880 = sext i32 %5879 to i64
  %5881 = getelementptr inbounds i16, i16* %90, i64 %5880
  %5882 = load i16, i16* %5881, align 2, !tbaa !382
  %5883 = insertelement <64 x i16> %5878, i16 %5882, i32 10
  %5884 = extractelement <64 x i32> %5828, i32 11
  %5885 = sext i32 %5884 to i64
  %5886 = getelementptr inbounds i16, i16* %90, i64 %5885
  %5887 = load i16, i16* %5886, align 2, !tbaa !382
  %5888 = insertelement <64 x i16> %5883, i16 %5887, i32 11
  %5889 = extractelement <64 x i32> %5828, i32 12
  %5890 = sext i32 %5889 to i64
  %5891 = getelementptr inbounds i16, i16* %90, i64 %5890
  %5892 = load i16, i16* %5891, align 2, !tbaa !382
  %5893 = insertelement <64 x i16> %5888, i16 %5892, i32 12
  %5894 = extractelement <64 x i32> %5828, i32 13
  %5895 = sext i32 %5894 to i64
  %5896 = getelementptr inbounds i16, i16* %90, i64 %5895
  %5897 = load i16, i16* %5896, align 2, !tbaa !382
  %5898 = insertelement <64 x i16> %5893, i16 %5897, i32 13
  %5899 = extractelement <64 x i32> %5828, i32 14
  %5900 = sext i32 %5899 to i64
  %5901 = getelementptr inbounds i16, i16* %90, i64 %5900
  %5902 = load i16, i16* %5901, align 2, !tbaa !382
  %5903 = insertelement <64 x i16> %5898, i16 %5902, i32 14
  %5904 = extractelement <64 x i32> %5828, i32 15
  %5905 = sext i32 %5904 to i64
  %5906 = getelementptr inbounds i16, i16* %90, i64 %5905
  %5907 = load i16, i16* %5906, align 2, !tbaa !382
  %5908 = insertelement <64 x i16> %5903, i16 %5907, i32 15
  %5909 = extractelement <64 x i32> %5828, i32 16
  %5910 = sext i32 %5909 to i64
  %5911 = getelementptr inbounds i16, i16* %90, i64 %5910
  %5912 = load i16, i16* %5911, align 2, !tbaa !382
  %5913 = insertelement <64 x i16> %5908, i16 %5912, i32 16
  %5914 = extractelement <64 x i32> %5828, i32 17
  %5915 = sext i32 %5914 to i64
  %5916 = getelementptr inbounds i16, i16* %90, i64 %5915
  %5917 = load i16, i16* %5916, align 2, !tbaa !382
  %5918 = insertelement <64 x i16> %5913, i16 %5917, i32 17
  %5919 = extractelement <64 x i32> %5828, i32 18
  %5920 = sext i32 %5919 to i64
  %5921 = getelementptr inbounds i16, i16* %90, i64 %5920
  %5922 = load i16, i16* %5921, align 2, !tbaa !382
  %5923 = insertelement <64 x i16> %5918, i16 %5922, i32 18
  %5924 = extractelement <64 x i32> %5828, i32 19
  %5925 = sext i32 %5924 to i64
  %5926 = getelementptr inbounds i16, i16* %90, i64 %5925
  %5927 = load i16, i16* %5926, align 2, !tbaa !382
  %5928 = insertelement <64 x i16> %5923, i16 %5927, i32 19
  %5929 = extractelement <64 x i32> %5828, i32 20
  %5930 = sext i32 %5929 to i64
  %5931 = getelementptr inbounds i16, i16* %90, i64 %5930
  %5932 = load i16, i16* %5931, align 2, !tbaa !382
  %5933 = insertelement <64 x i16> %5928, i16 %5932, i32 20
  %5934 = extractelement <64 x i32> %5828, i32 21
  %5935 = sext i32 %5934 to i64
  %5936 = getelementptr inbounds i16, i16* %90, i64 %5935
  %5937 = load i16, i16* %5936, align 2, !tbaa !382
  %5938 = insertelement <64 x i16> %5933, i16 %5937, i32 21
  %5939 = extractelement <64 x i32> %5828, i32 22
  %5940 = sext i32 %5939 to i64
  %5941 = getelementptr inbounds i16, i16* %90, i64 %5940
  %5942 = load i16, i16* %5941, align 2, !tbaa !382
  %5943 = insertelement <64 x i16> %5938, i16 %5942, i32 22
  %5944 = extractelement <64 x i32> %5828, i32 23
  %5945 = sext i32 %5944 to i64
  %5946 = getelementptr inbounds i16, i16* %90, i64 %5945
  %5947 = load i16, i16* %5946, align 2, !tbaa !382
  %5948 = insertelement <64 x i16> %5943, i16 %5947, i32 23
  %5949 = extractelement <64 x i32> %5828, i32 24
  %5950 = sext i32 %5949 to i64
  %5951 = getelementptr inbounds i16, i16* %90, i64 %5950
  %5952 = load i16, i16* %5951, align 2, !tbaa !382
  %5953 = insertelement <64 x i16> %5948, i16 %5952, i32 24
  %5954 = extractelement <64 x i32> %5828, i32 25
  %5955 = sext i32 %5954 to i64
  %5956 = getelementptr inbounds i16, i16* %90, i64 %5955
  %5957 = load i16, i16* %5956, align 2, !tbaa !382
  %5958 = insertelement <64 x i16> %5953, i16 %5957, i32 25
  %5959 = extractelement <64 x i32> %5828, i32 26
  %5960 = sext i32 %5959 to i64
  %5961 = getelementptr inbounds i16, i16* %90, i64 %5960
  %5962 = load i16, i16* %5961, align 2, !tbaa !382
  %5963 = insertelement <64 x i16> %5958, i16 %5962, i32 26
  %5964 = extractelement <64 x i32> %5828, i32 27
  %5965 = sext i32 %5964 to i64
  %5966 = getelementptr inbounds i16, i16* %90, i64 %5965
  %5967 = load i16, i16* %5966, align 2, !tbaa !382
  %5968 = insertelement <64 x i16> %5963, i16 %5967, i32 27
  %5969 = extractelement <64 x i32> %5828, i32 28
  %5970 = sext i32 %5969 to i64
  %5971 = getelementptr inbounds i16, i16* %90, i64 %5970
  %5972 = load i16, i16* %5971, align 2, !tbaa !382
  %5973 = insertelement <64 x i16> %5968, i16 %5972, i32 28
  %5974 = extractelement <64 x i32> %5828, i32 29
  %5975 = sext i32 %5974 to i64
  %5976 = getelementptr inbounds i16, i16* %90, i64 %5975
  %5977 = load i16, i16* %5976, align 2, !tbaa !382
  %5978 = insertelement <64 x i16> %5973, i16 %5977, i32 29
  %5979 = extractelement <64 x i32> %5828, i32 30
  %5980 = sext i32 %5979 to i64
  %5981 = getelementptr inbounds i16, i16* %90, i64 %5980
  %5982 = load i16, i16* %5981, align 2, !tbaa !382
  %5983 = insertelement <64 x i16> %5978, i16 %5982, i32 30
  %5984 = extractelement <64 x i32> %5828, i32 31
  %5985 = sext i32 %5984 to i64
  %5986 = getelementptr inbounds i16, i16* %90, i64 %5985
  %5987 = load i16, i16* %5986, align 2, !tbaa !382
  %5988 = insertelement <64 x i16> %5983, i16 %5987, i32 31
  %5989 = extractelement <64 x i32> %5828, i32 32
  %5990 = sext i32 %5989 to i64
  %5991 = getelementptr inbounds i16, i16* %90, i64 %5990
  %5992 = load i16, i16* %5991, align 2, !tbaa !382
  %5993 = insertelement <64 x i16> %5988, i16 %5992, i32 32
  %5994 = extractelement <64 x i32> %5828, i32 33
  %5995 = sext i32 %5994 to i64
  %5996 = getelementptr inbounds i16, i16* %90, i64 %5995
  %5997 = load i16, i16* %5996, align 2, !tbaa !382
  %5998 = insertelement <64 x i16> %5993, i16 %5997, i32 33
  %5999 = extractelement <64 x i32> %5828, i32 34
  %6000 = sext i32 %5999 to i64
  %6001 = getelementptr inbounds i16, i16* %90, i64 %6000
  %6002 = load i16, i16* %6001, align 2, !tbaa !382
  %6003 = insertelement <64 x i16> %5998, i16 %6002, i32 34
  %6004 = extractelement <64 x i32> %5828, i32 35
  %6005 = sext i32 %6004 to i64
  %6006 = getelementptr inbounds i16, i16* %90, i64 %6005
  %6007 = load i16, i16* %6006, align 2, !tbaa !382
  %6008 = insertelement <64 x i16> %6003, i16 %6007, i32 35
  %6009 = extractelement <64 x i32> %5828, i32 36
  %6010 = sext i32 %6009 to i64
  %6011 = getelementptr inbounds i16, i16* %90, i64 %6010
  %6012 = load i16, i16* %6011, align 2, !tbaa !382
  %6013 = insertelement <64 x i16> %6008, i16 %6012, i32 36
  %6014 = extractelement <64 x i32> %5828, i32 37
  %6015 = sext i32 %6014 to i64
  %6016 = getelementptr inbounds i16, i16* %90, i64 %6015
  %6017 = load i16, i16* %6016, align 2, !tbaa !382
  %6018 = insertelement <64 x i16> %6013, i16 %6017, i32 37
  %6019 = extractelement <64 x i32> %5828, i32 38
  %6020 = sext i32 %6019 to i64
  %6021 = getelementptr inbounds i16, i16* %90, i64 %6020
  %6022 = load i16, i16* %6021, align 2, !tbaa !382
  %6023 = insertelement <64 x i16> %6018, i16 %6022, i32 38
  %6024 = extractelement <64 x i32> %5828, i32 39
  %6025 = sext i32 %6024 to i64
  %6026 = getelementptr inbounds i16, i16* %90, i64 %6025
  %6027 = load i16, i16* %6026, align 2, !tbaa !382
  %6028 = insertelement <64 x i16> %6023, i16 %6027, i32 39
  %6029 = extractelement <64 x i32> %5828, i32 40
  %6030 = sext i32 %6029 to i64
  %6031 = getelementptr inbounds i16, i16* %90, i64 %6030
  %6032 = load i16, i16* %6031, align 2, !tbaa !382
  %6033 = insertelement <64 x i16> %6028, i16 %6032, i32 40
  %6034 = extractelement <64 x i32> %5828, i32 41
  %6035 = sext i32 %6034 to i64
  %6036 = getelementptr inbounds i16, i16* %90, i64 %6035
  %6037 = load i16, i16* %6036, align 2, !tbaa !382
  %6038 = insertelement <64 x i16> %6033, i16 %6037, i32 41
  %6039 = extractelement <64 x i32> %5828, i32 42
  %6040 = sext i32 %6039 to i64
  %6041 = getelementptr inbounds i16, i16* %90, i64 %6040
  %6042 = load i16, i16* %6041, align 2, !tbaa !382
  %6043 = insertelement <64 x i16> %6038, i16 %6042, i32 42
  %6044 = extractelement <64 x i32> %5828, i32 43
  %6045 = sext i32 %6044 to i64
  %6046 = getelementptr inbounds i16, i16* %90, i64 %6045
  %6047 = load i16, i16* %6046, align 2, !tbaa !382
  %6048 = insertelement <64 x i16> %6043, i16 %6047, i32 43
  %6049 = extractelement <64 x i32> %5828, i32 44
  %6050 = sext i32 %6049 to i64
  %6051 = getelementptr inbounds i16, i16* %90, i64 %6050
  %6052 = load i16, i16* %6051, align 2, !tbaa !382
  %6053 = insertelement <64 x i16> %6048, i16 %6052, i32 44
  %6054 = extractelement <64 x i32> %5828, i32 45
  %6055 = sext i32 %6054 to i64
  %6056 = getelementptr inbounds i16, i16* %90, i64 %6055
  %6057 = load i16, i16* %6056, align 2, !tbaa !382
  %6058 = insertelement <64 x i16> %6053, i16 %6057, i32 45
  %6059 = extractelement <64 x i32> %5828, i32 46
  %6060 = sext i32 %6059 to i64
  %6061 = getelementptr inbounds i16, i16* %90, i64 %6060
  %6062 = load i16, i16* %6061, align 2, !tbaa !382
  %6063 = insertelement <64 x i16> %6058, i16 %6062, i32 46
  %6064 = extractelement <64 x i32> %5828, i32 47
  %6065 = sext i32 %6064 to i64
  %6066 = getelementptr inbounds i16, i16* %90, i64 %6065
  %6067 = load i16, i16* %6066, align 2, !tbaa !382
  %6068 = insertelement <64 x i16> %6063, i16 %6067, i32 47
  %6069 = extractelement <64 x i32> %5828, i32 48
  %6070 = sext i32 %6069 to i64
  %6071 = getelementptr inbounds i16, i16* %90, i64 %6070
  %6072 = load i16, i16* %6071, align 2, !tbaa !382
  %6073 = insertelement <64 x i16> %6068, i16 %6072, i32 48
  %6074 = extractelement <64 x i32> %5828, i32 49
  %6075 = sext i32 %6074 to i64
  %6076 = getelementptr inbounds i16, i16* %90, i64 %6075
  %6077 = load i16, i16* %6076, align 2, !tbaa !382
  %6078 = insertelement <64 x i16> %6073, i16 %6077, i32 49
  %6079 = extractelement <64 x i32> %5828, i32 50
  %6080 = sext i32 %6079 to i64
  %6081 = getelementptr inbounds i16, i16* %90, i64 %6080
  %6082 = load i16, i16* %6081, align 2, !tbaa !382
  %6083 = insertelement <64 x i16> %6078, i16 %6082, i32 50
  %6084 = extractelement <64 x i32> %5828, i32 51
  %6085 = sext i32 %6084 to i64
  %6086 = getelementptr inbounds i16, i16* %90, i64 %6085
  %6087 = load i16, i16* %6086, align 2, !tbaa !382
  %6088 = insertelement <64 x i16> %6083, i16 %6087, i32 51
  %6089 = extractelement <64 x i32> %5828, i32 52
  %6090 = sext i32 %6089 to i64
  %6091 = getelementptr inbounds i16, i16* %90, i64 %6090
  %6092 = load i16, i16* %6091, align 2, !tbaa !382
  %6093 = insertelement <64 x i16> %6088, i16 %6092, i32 52
  %6094 = extractelement <64 x i32> %5828, i32 53
  %6095 = sext i32 %6094 to i64
  %6096 = getelementptr inbounds i16, i16* %90, i64 %6095
  %6097 = load i16, i16* %6096, align 2, !tbaa !382
  %6098 = insertelement <64 x i16> %6093, i16 %6097, i32 53
  %6099 = extractelement <64 x i32> %5828, i32 54
  %6100 = sext i32 %6099 to i64
  %6101 = getelementptr inbounds i16, i16* %90, i64 %6100
  %6102 = load i16, i16* %6101, align 2, !tbaa !382
  %6103 = insertelement <64 x i16> %6098, i16 %6102, i32 54
  %6104 = extractelement <64 x i32> %5828, i32 55
  %6105 = sext i32 %6104 to i64
  %6106 = getelementptr inbounds i16, i16* %90, i64 %6105
  %6107 = load i16, i16* %6106, align 2, !tbaa !382
  %6108 = insertelement <64 x i16> %6103, i16 %6107, i32 55
  %6109 = extractelement <64 x i32> %5828, i32 56
  %6110 = sext i32 %6109 to i64
  %6111 = getelementptr inbounds i16, i16* %90, i64 %6110
  %6112 = load i16, i16* %6111, align 2, !tbaa !382
  %6113 = insertelement <64 x i16> %6108, i16 %6112, i32 56
  %6114 = extractelement <64 x i32> %5828, i32 57
  %6115 = sext i32 %6114 to i64
  %6116 = getelementptr inbounds i16, i16* %90, i64 %6115
  %6117 = load i16, i16* %6116, align 2, !tbaa !382
  %6118 = insertelement <64 x i16> %6113, i16 %6117, i32 57
  %6119 = extractelement <64 x i32> %5828, i32 58
  %6120 = sext i32 %6119 to i64
  %6121 = getelementptr inbounds i16, i16* %90, i64 %6120
  %6122 = load i16, i16* %6121, align 2, !tbaa !382
  %6123 = insertelement <64 x i16> %6118, i16 %6122, i32 58
  %6124 = extractelement <64 x i32> %5828, i32 59
  %6125 = sext i32 %6124 to i64
  %6126 = getelementptr inbounds i16, i16* %90, i64 %6125
  %6127 = load i16, i16* %6126, align 2, !tbaa !382
  %6128 = insertelement <64 x i16> %6123, i16 %6127, i32 59
  %6129 = extractelement <64 x i32> %5828, i32 60
  %6130 = sext i32 %6129 to i64
  %6131 = getelementptr inbounds i16, i16* %90, i64 %6130
  %6132 = load i16, i16* %6131, align 2, !tbaa !382
  %6133 = insertelement <64 x i16> %6128, i16 %6132, i32 60
  %6134 = extractelement <64 x i32> %5828, i32 61
  %6135 = sext i32 %6134 to i64
  %6136 = getelementptr inbounds i16, i16* %90, i64 %6135
  %6137 = load i16, i16* %6136, align 2, !tbaa !382
  %6138 = insertelement <64 x i16> %6133, i16 %6137, i32 61
  %6139 = extractelement <64 x i32> %5828, i32 62
  %6140 = sext i32 %6139 to i64
  %6141 = getelementptr inbounds i16, i16* %90, i64 %6140
  %6142 = load i16, i16* %6141, align 2, !tbaa !382
  %6143 = insertelement <64 x i16> %6138, i16 %6142, i32 62
  %6144 = extractelement <64 x i32> %5828, i32 63
  %6145 = sext i32 %6144 to i64
  %6146 = getelementptr inbounds i16, i16* %90, i64 %6145
  %6147 = load i16, i16* %6146, align 2, !tbaa !382
  %6148 = insertelement <64 x i16> %6143, i16 %6147, i32 63
  %6149 = add nsw i32 %blur_x.s0.x.v1.base.s21, -60
  %6150 = insertelement <64 x i32> undef, i32 %6149, i32 0
  %6151 = shufflevector <64 x i32> %6150, <64 x i32> undef, <64 x i32> zeroinitializer
  %6152 = add nsw <64 x i32> %6151, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6153 = shufflevector <64 x i32> %6152, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6154 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6153, <4 x i32> %87)
  %6155 = shufflevector <64 x i32> %6152, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6156 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6155, <4 x i32> %87)
  %6157 = shufflevector <64 x i32> %6152, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6158 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6157, <4 x i32> %87)
  %6159 = shufflevector <64 x i32> %6152, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %6160 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6159, <4 x i32> %87)
  %6161 = shufflevector <64 x i32> %6152, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %6162 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6161, <4 x i32> %87)
  %6163 = shufflevector <64 x i32> %6152, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %6164 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6163, <4 x i32> %87)
  %6165 = shufflevector <64 x i32> %6152, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %6166 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6165, <4 x i32> %87)
  %6167 = shufflevector <64 x i32> %6152, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %6168 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6167, <4 x i32> %87)
  %6169 = shufflevector <64 x i32> %6152, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %6170 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6169, <4 x i32> %87)
  %6171 = shufflevector <64 x i32> %6152, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %6172 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6171, <4 x i32> %87)
  %6173 = shufflevector <64 x i32> %6152, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %6174 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6173, <4 x i32> %87)
  %6175 = shufflevector <64 x i32> %6152, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %6176 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6175, <4 x i32> %87)
  %6177 = shufflevector <64 x i32> %6152, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %6178 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6177, <4 x i32> %87)
  %6179 = shufflevector <64 x i32> %6152, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %6180 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6179, <4 x i32> %87)
  %6181 = shufflevector <64 x i32> %6152, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %6182 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6181, <4 x i32> %87)
  %6183 = shufflevector <64 x i32> %6152, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %6184 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6183, <4 x i32> %87)
  %6185 = shufflevector <4 x i32> %6184, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %6186 = shufflevector <8 x i32> %6185, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %6187 = shufflevector <16 x i32> %6186, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %6188 = shufflevector <32 x i32> %6187, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %6189 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6154, <4 x i32> %89)
  %6190 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6156, <4 x i32> %89)
  %6191 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6158, <4 x i32> %89)
  %6192 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6160, <4 x i32> %89)
  %6193 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6162, <4 x i32> %89)
  %6194 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6164, <4 x i32> %89)
  %6195 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6166, <4 x i32> %89)
  %6196 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6168, <4 x i32> %89)
  %6197 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6170, <4 x i32> %89)
  %6198 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6172, <4 x i32> %89)
  %6199 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6174, <4 x i32> %89)
  %6200 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6176, <4 x i32> %89)
  %6201 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6178, <4 x i32> %89)
  %6202 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6180, <4 x i32> %89)
  %6203 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6182, <4 x i32> %89)
  %6204 = shufflevector <64 x i32> %6188, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %6205 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6204, <4 x i32> %89)
  %6206 = shufflevector <4 x i32> %6189, <4 x i32> %6190, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6207 = shufflevector <4 x i32> %6191, <4 x i32> %6192, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6208 = shufflevector <4 x i32> %6193, <4 x i32> %6194, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6209 = shufflevector <4 x i32> %6195, <4 x i32> %6196, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6210 = shufflevector <4 x i32> %6197, <4 x i32> %6198, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6211 = shufflevector <4 x i32> %6199, <4 x i32> %6200, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6212 = shufflevector <4 x i32> %6201, <4 x i32> %6202, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6213 = shufflevector <4 x i32> %6203, <4 x i32> %6205, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6214 = shufflevector <8 x i32> %6206, <8 x i32> %6207, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6215 = shufflevector <8 x i32> %6208, <8 x i32> %6209, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6216 = shufflevector <8 x i32> %6210, <8 x i32> %6211, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6217 = shufflevector <8 x i32> %6212, <8 x i32> %6213, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6218 = shufflevector <16 x i32> %6214, <16 x i32> %6215, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6219 = shufflevector <16 x i32> %6216, <16 x i32> %6217, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6220 = shufflevector <32 x i32> %6218, <32 x i32> %6219, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6221 = add nsw <64 x i32> %6220, %t207
  %6222 = extractelement <64 x i32> %6221, i32 0
  %6223 = sext i32 %6222 to i64
  %6224 = getelementptr inbounds i16, i16* %90, i64 %6223
  %6225 = load i16, i16* %6224, align 2, !tbaa !382
  %6226 = insertelement <64 x i16> undef, i16 %6225, i32 0
  %6227 = extractelement <64 x i32> %6221, i32 1
  %6228 = sext i32 %6227 to i64
  %6229 = getelementptr inbounds i16, i16* %90, i64 %6228
  %6230 = load i16, i16* %6229, align 2, !tbaa !382
  %6231 = insertelement <64 x i16> %6226, i16 %6230, i32 1
  %6232 = extractelement <64 x i32> %6221, i32 2
  %6233 = sext i32 %6232 to i64
  %6234 = getelementptr inbounds i16, i16* %90, i64 %6233
  %6235 = load i16, i16* %6234, align 2, !tbaa !382
  %6236 = insertelement <64 x i16> %6231, i16 %6235, i32 2
  %6237 = extractelement <64 x i32> %6221, i32 3
  %6238 = sext i32 %6237 to i64
  %6239 = getelementptr inbounds i16, i16* %90, i64 %6238
  %6240 = load i16, i16* %6239, align 2, !tbaa !382
  %6241 = insertelement <64 x i16> %6236, i16 %6240, i32 3
  %6242 = extractelement <64 x i32> %6221, i32 4
  %6243 = sext i32 %6242 to i64
  %6244 = getelementptr inbounds i16, i16* %90, i64 %6243
  %6245 = load i16, i16* %6244, align 2, !tbaa !382
  %6246 = insertelement <64 x i16> %6241, i16 %6245, i32 4
  %6247 = extractelement <64 x i32> %6221, i32 5
  %6248 = sext i32 %6247 to i64
  %6249 = getelementptr inbounds i16, i16* %90, i64 %6248
  %6250 = load i16, i16* %6249, align 2, !tbaa !382
  %6251 = insertelement <64 x i16> %6246, i16 %6250, i32 5
  %6252 = extractelement <64 x i32> %6221, i32 6
  %6253 = sext i32 %6252 to i64
  %6254 = getelementptr inbounds i16, i16* %90, i64 %6253
  %6255 = load i16, i16* %6254, align 2, !tbaa !382
  %6256 = insertelement <64 x i16> %6251, i16 %6255, i32 6
  %6257 = extractelement <64 x i32> %6221, i32 7
  %6258 = sext i32 %6257 to i64
  %6259 = getelementptr inbounds i16, i16* %90, i64 %6258
  %6260 = load i16, i16* %6259, align 2, !tbaa !382
  %6261 = insertelement <64 x i16> %6256, i16 %6260, i32 7
  %6262 = extractelement <64 x i32> %6221, i32 8
  %6263 = sext i32 %6262 to i64
  %6264 = getelementptr inbounds i16, i16* %90, i64 %6263
  %6265 = load i16, i16* %6264, align 2, !tbaa !382
  %6266 = insertelement <64 x i16> %6261, i16 %6265, i32 8
  %6267 = extractelement <64 x i32> %6221, i32 9
  %6268 = sext i32 %6267 to i64
  %6269 = getelementptr inbounds i16, i16* %90, i64 %6268
  %6270 = load i16, i16* %6269, align 2, !tbaa !382
  %6271 = insertelement <64 x i16> %6266, i16 %6270, i32 9
  %6272 = extractelement <64 x i32> %6221, i32 10
  %6273 = sext i32 %6272 to i64
  %6274 = getelementptr inbounds i16, i16* %90, i64 %6273
  %6275 = load i16, i16* %6274, align 2, !tbaa !382
  %6276 = insertelement <64 x i16> %6271, i16 %6275, i32 10
  %6277 = extractelement <64 x i32> %6221, i32 11
  %6278 = sext i32 %6277 to i64
  %6279 = getelementptr inbounds i16, i16* %90, i64 %6278
  %6280 = load i16, i16* %6279, align 2, !tbaa !382
  %6281 = insertelement <64 x i16> %6276, i16 %6280, i32 11
  %6282 = extractelement <64 x i32> %6221, i32 12
  %6283 = sext i32 %6282 to i64
  %6284 = getelementptr inbounds i16, i16* %90, i64 %6283
  %6285 = load i16, i16* %6284, align 2, !tbaa !382
  %6286 = insertelement <64 x i16> %6281, i16 %6285, i32 12
  %6287 = extractelement <64 x i32> %6221, i32 13
  %6288 = sext i32 %6287 to i64
  %6289 = getelementptr inbounds i16, i16* %90, i64 %6288
  %6290 = load i16, i16* %6289, align 2, !tbaa !382
  %6291 = insertelement <64 x i16> %6286, i16 %6290, i32 13
  %6292 = extractelement <64 x i32> %6221, i32 14
  %6293 = sext i32 %6292 to i64
  %6294 = getelementptr inbounds i16, i16* %90, i64 %6293
  %6295 = load i16, i16* %6294, align 2, !tbaa !382
  %6296 = insertelement <64 x i16> %6291, i16 %6295, i32 14
  %6297 = extractelement <64 x i32> %6221, i32 15
  %6298 = sext i32 %6297 to i64
  %6299 = getelementptr inbounds i16, i16* %90, i64 %6298
  %6300 = load i16, i16* %6299, align 2, !tbaa !382
  %6301 = insertelement <64 x i16> %6296, i16 %6300, i32 15
  %6302 = extractelement <64 x i32> %6221, i32 16
  %6303 = sext i32 %6302 to i64
  %6304 = getelementptr inbounds i16, i16* %90, i64 %6303
  %6305 = load i16, i16* %6304, align 2, !tbaa !382
  %6306 = insertelement <64 x i16> %6301, i16 %6305, i32 16
  %6307 = extractelement <64 x i32> %6221, i32 17
  %6308 = sext i32 %6307 to i64
  %6309 = getelementptr inbounds i16, i16* %90, i64 %6308
  %6310 = load i16, i16* %6309, align 2, !tbaa !382
  %6311 = insertelement <64 x i16> %6306, i16 %6310, i32 17
  %6312 = extractelement <64 x i32> %6221, i32 18
  %6313 = sext i32 %6312 to i64
  %6314 = getelementptr inbounds i16, i16* %90, i64 %6313
  %6315 = load i16, i16* %6314, align 2, !tbaa !382
  %6316 = insertelement <64 x i16> %6311, i16 %6315, i32 18
  %6317 = extractelement <64 x i32> %6221, i32 19
  %6318 = sext i32 %6317 to i64
  %6319 = getelementptr inbounds i16, i16* %90, i64 %6318
  %6320 = load i16, i16* %6319, align 2, !tbaa !382
  %6321 = insertelement <64 x i16> %6316, i16 %6320, i32 19
  %6322 = extractelement <64 x i32> %6221, i32 20
  %6323 = sext i32 %6322 to i64
  %6324 = getelementptr inbounds i16, i16* %90, i64 %6323
  %6325 = load i16, i16* %6324, align 2, !tbaa !382
  %6326 = insertelement <64 x i16> %6321, i16 %6325, i32 20
  %6327 = extractelement <64 x i32> %6221, i32 21
  %6328 = sext i32 %6327 to i64
  %6329 = getelementptr inbounds i16, i16* %90, i64 %6328
  %6330 = load i16, i16* %6329, align 2, !tbaa !382
  %6331 = insertelement <64 x i16> %6326, i16 %6330, i32 21
  %6332 = extractelement <64 x i32> %6221, i32 22
  %6333 = sext i32 %6332 to i64
  %6334 = getelementptr inbounds i16, i16* %90, i64 %6333
  %6335 = load i16, i16* %6334, align 2, !tbaa !382
  %6336 = insertelement <64 x i16> %6331, i16 %6335, i32 22
  %6337 = extractelement <64 x i32> %6221, i32 23
  %6338 = sext i32 %6337 to i64
  %6339 = getelementptr inbounds i16, i16* %90, i64 %6338
  %6340 = load i16, i16* %6339, align 2, !tbaa !382
  %6341 = insertelement <64 x i16> %6336, i16 %6340, i32 23
  %6342 = extractelement <64 x i32> %6221, i32 24
  %6343 = sext i32 %6342 to i64
  %6344 = getelementptr inbounds i16, i16* %90, i64 %6343
  %6345 = load i16, i16* %6344, align 2, !tbaa !382
  %6346 = insertelement <64 x i16> %6341, i16 %6345, i32 24
  %6347 = extractelement <64 x i32> %6221, i32 25
  %6348 = sext i32 %6347 to i64
  %6349 = getelementptr inbounds i16, i16* %90, i64 %6348
  %6350 = load i16, i16* %6349, align 2, !tbaa !382
  %6351 = insertelement <64 x i16> %6346, i16 %6350, i32 25
  %6352 = extractelement <64 x i32> %6221, i32 26
  %6353 = sext i32 %6352 to i64
  %6354 = getelementptr inbounds i16, i16* %90, i64 %6353
  %6355 = load i16, i16* %6354, align 2, !tbaa !382
  %6356 = insertelement <64 x i16> %6351, i16 %6355, i32 26
  %6357 = extractelement <64 x i32> %6221, i32 27
  %6358 = sext i32 %6357 to i64
  %6359 = getelementptr inbounds i16, i16* %90, i64 %6358
  %6360 = load i16, i16* %6359, align 2, !tbaa !382
  %6361 = insertelement <64 x i16> %6356, i16 %6360, i32 27
  %6362 = extractelement <64 x i32> %6221, i32 28
  %6363 = sext i32 %6362 to i64
  %6364 = getelementptr inbounds i16, i16* %90, i64 %6363
  %6365 = load i16, i16* %6364, align 2, !tbaa !382
  %6366 = insertelement <64 x i16> %6361, i16 %6365, i32 28
  %6367 = extractelement <64 x i32> %6221, i32 29
  %6368 = sext i32 %6367 to i64
  %6369 = getelementptr inbounds i16, i16* %90, i64 %6368
  %6370 = load i16, i16* %6369, align 2, !tbaa !382
  %6371 = insertelement <64 x i16> %6366, i16 %6370, i32 29
  %6372 = extractelement <64 x i32> %6221, i32 30
  %6373 = sext i32 %6372 to i64
  %6374 = getelementptr inbounds i16, i16* %90, i64 %6373
  %6375 = load i16, i16* %6374, align 2, !tbaa !382
  %6376 = insertelement <64 x i16> %6371, i16 %6375, i32 30
  %6377 = extractelement <64 x i32> %6221, i32 31
  %6378 = sext i32 %6377 to i64
  %6379 = getelementptr inbounds i16, i16* %90, i64 %6378
  %6380 = load i16, i16* %6379, align 2, !tbaa !382
  %6381 = insertelement <64 x i16> %6376, i16 %6380, i32 31
  %6382 = extractelement <64 x i32> %6221, i32 32
  %6383 = sext i32 %6382 to i64
  %6384 = getelementptr inbounds i16, i16* %90, i64 %6383
  %6385 = load i16, i16* %6384, align 2, !tbaa !382
  %6386 = insertelement <64 x i16> %6381, i16 %6385, i32 32
  %6387 = extractelement <64 x i32> %6221, i32 33
  %6388 = sext i32 %6387 to i64
  %6389 = getelementptr inbounds i16, i16* %90, i64 %6388
  %6390 = load i16, i16* %6389, align 2, !tbaa !382
  %6391 = insertelement <64 x i16> %6386, i16 %6390, i32 33
  %6392 = extractelement <64 x i32> %6221, i32 34
  %6393 = sext i32 %6392 to i64
  %6394 = getelementptr inbounds i16, i16* %90, i64 %6393
  %6395 = load i16, i16* %6394, align 2, !tbaa !382
  %6396 = insertelement <64 x i16> %6391, i16 %6395, i32 34
  %6397 = extractelement <64 x i32> %6221, i32 35
  %6398 = sext i32 %6397 to i64
  %6399 = getelementptr inbounds i16, i16* %90, i64 %6398
  %6400 = load i16, i16* %6399, align 2, !tbaa !382
  %6401 = insertelement <64 x i16> %6396, i16 %6400, i32 35
  %6402 = extractelement <64 x i32> %6221, i32 36
  %6403 = sext i32 %6402 to i64
  %6404 = getelementptr inbounds i16, i16* %90, i64 %6403
  %6405 = load i16, i16* %6404, align 2, !tbaa !382
  %6406 = insertelement <64 x i16> %6401, i16 %6405, i32 36
  %6407 = extractelement <64 x i32> %6221, i32 37
  %6408 = sext i32 %6407 to i64
  %6409 = getelementptr inbounds i16, i16* %90, i64 %6408
  %6410 = load i16, i16* %6409, align 2, !tbaa !382
  %6411 = insertelement <64 x i16> %6406, i16 %6410, i32 37
  %6412 = extractelement <64 x i32> %6221, i32 38
  %6413 = sext i32 %6412 to i64
  %6414 = getelementptr inbounds i16, i16* %90, i64 %6413
  %6415 = load i16, i16* %6414, align 2, !tbaa !382
  %6416 = insertelement <64 x i16> %6411, i16 %6415, i32 38
  %6417 = extractelement <64 x i32> %6221, i32 39
  %6418 = sext i32 %6417 to i64
  %6419 = getelementptr inbounds i16, i16* %90, i64 %6418
  %6420 = load i16, i16* %6419, align 2, !tbaa !382
  %6421 = insertelement <64 x i16> %6416, i16 %6420, i32 39
  %6422 = extractelement <64 x i32> %6221, i32 40
  %6423 = sext i32 %6422 to i64
  %6424 = getelementptr inbounds i16, i16* %90, i64 %6423
  %6425 = load i16, i16* %6424, align 2, !tbaa !382
  %6426 = insertelement <64 x i16> %6421, i16 %6425, i32 40
  %6427 = extractelement <64 x i32> %6221, i32 41
  %6428 = sext i32 %6427 to i64
  %6429 = getelementptr inbounds i16, i16* %90, i64 %6428
  %6430 = load i16, i16* %6429, align 2, !tbaa !382
  %6431 = insertelement <64 x i16> %6426, i16 %6430, i32 41
  %6432 = extractelement <64 x i32> %6221, i32 42
  %6433 = sext i32 %6432 to i64
  %6434 = getelementptr inbounds i16, i16* %90, i64 %6433
  %6435 = load i16, i16* %6434, align 2, !tbaa !382
  %6436 = insertelement <64 x i16> %6431, i16 %6435, i32 42
  %6437 = extractelement <64 x i32> %6221, i32 43
  %6438 = sext i32 %6437 to i64
  %6439 = getelementptr inbounds i16, i16* %90, i64 %6438
  %6440 = load i16, i16* %6439, align 2, !tbaa !382
  %6441 = insertelement <64 x i16> %6436, i16 %6440, i32 43
  %6442 = extractelement <64 x i32> %6221, i32 44
  %6443 = sext i32 %6442 to i64
  %6444 = getelementptr inbounds i16, i16* %90, i64 %6443
  %6445 = load i16, i16* %6444, align 2, !tbaa !382
  %6446 = insertelement <64 x i16> %6441, i16 %6445, i32 44
  %6447 = extractelement <64 x i32> %6221, i32 45
  %6448 = sext i32 %6447 to i64
  %6449 = getelementptr inbounds i16, i16* %90, i64 %6448
  %6450 = load i16, i16* %6449, align 2, !tbaa !382
  %6451 = insertelement <64 x i16> %6446, i16 %6450, i32 45
  %6452 = extractelement <64 x i32> %6221, i32 46
  %6453 = sext i32 %6452 to i64
  %6454 = getelementptr inbounds i16, i16* %90, i64 %6453
  %6455 = load i16, i16* %6454, align 2, !tbaa !382
  %6456 = insertelement <64 x i16> %6451, i16 %6455, i32 46
  %6457 = extractelement <64 x i32> %6221, i32 47
  %6458 = sext i32 %6457 to i64
  %6459 = getelementptr inbounds i16, i16* %90, i64 %6458
  %6460 = load i16, i16* %6459, align 2, !tbaa !382
  %6461 = insertelement <64 x i16> %6456, i16 %6460, i32 47
  %6462 = extractelement <64 x i32> %6221, i32 48
  %6463 = sext i32 %6462 to i64
  %6464 = getelementptr inbounds i16, i16* %90, i64 %6463
  %6465 = load i16, i16* %6464, align 2, !tbaa !382
  %6466 = insertelement <64 x i16> %6461, i16 %6465, i32 48
  %6467 = extractelement <64 x i32> %6221, i32 49
  %6468 = sext i32 %6467 to i64
  %6469 = getelementptr inbounds i16, i16* %90, i64 %6468
  %6470 = load i16, i16* %6469, align 2, !tbaa !382
  %6471 = insertelement <64 x i16> %6466, i16 %6470, i32 49
  %6472 = extractelement <64 x i32> %6221, i32 50
  %6473 = sext i32 %6472 to i64
  %6474 = getelementptr inbounds i16, i16* %90, i64 %6473
  %6475 = load i16, i16* %6474, align 2, !tbaa !382
  %6476 = insertelement <64 x i16> %6471, i16 %6475, i32 50
  %6477 = extractelement <64 x i32> %6221, i32 51
  %6478 = sext i32 %6477 to i64
  %6479 = getelementptr inbounds i16, i16* %90, i64 %6478
  %6480 = load i16, i16* %6479, align 2, !tbaa !382
  %6481 = insertelement <64 x i16> %6476, i16 %6480, i32 51
  %6482 = extractelement <64 x i32> %6221, i32 52
  %6483 = sext i32 %6482 to i64
  %6484 = getelementptr inbounds i16, i16* %90, i64 %6483
  %6485 = load i16, i16* %6484, align 2, !tbaa !382
  %6486 = insertelement <64 x i16> %6481, i16 %6485, i32 52
  %6487 = extractelement <64 x i32> %6221, i32 53
  %6488 = sext i32 %6487 to i64
  %6489 = getelementptr inbounds i16, i16* %90, i64 %6488
  %6490 = load i16, i16* %6489, align 2, !tbaa !382
  %6491 = insertelement <64 x i16> %6486, i16 %6490, i32 53
  %6492 = extractelement <64 x i32> %6221, i32 54
  %6493 = sext i32 %6492 to i64
  %6494 = getelementptr inbounds i16, i16* %90, i64 %6493
  %6495 = load i16, i16* %6494, align 2, !tbaa !382
  %6496 = insertelement <64 x i16> %6491, i16 %6495, i32 54
  %6497 = extractelement <64 x i32> %6221, i32 55
  %6498 = sext i32 %6497 to i64
  %6499 = getelementptr inbounds i16, i16* %90, i64 %6498
  %6500 = load i16, i16* %6499, align 2, !tbaa !382
  %6501 = insertelement <64 x i16> %6496, i16 %6500, i32 55
  %6502 = extractelement <64 x i32> %6221, i32 56
  %6503 = sext i32 %6502 to i64
  %6504 = getelementptr inbounds i16, i16* %90, i64 %6503
  %6505 = load i16, i16* %6504, align 2, !tbaa !382
  %6506 = insertelement <64 x i16> %6501, i16 %6505, i32 56
  %6507 = extractelement <64 x i32> %6221, i32 57
  %6508 = sext i32 %6507 to i64
  %6509 = getelementptr inbounds i16, i16* %90, i64 %6508
  %6510 = load i16, i16* %6509, align 2, !tbaa !382
  %6511 = insertelement <64 x i16> %6506, i16 %6510, i32 57
  %6512 = extractelement <64 x i32> %6221, i32 58
  %6513 = sext i32 %6512 to i64
  %6514 = getelementptr inbounds i16, i16* %90, i64 %6513
  %6515 = load i16, i16* %6514, align 2, !tbaa !382
  %6516 = insertelement <64 x i16> %6511, i16 %6515, i32 58
  %6517 = extractelement <64 x i32> %6221, i32 59
  %6518 = sext i32 %6517 to i64
  %6519 = getelementptr inbounds i16, i16* %90, i64 %6518
  %6520 = load i16, i16* %6519, align 2, !tbaa !382
  %6521 = insertelement <64 x i16> %6516, i16 %6520, i32 59
  %6522 = extractelement <64 x i32> %6221, i32 60
  %6523 = sext i32 %6522 to i64
  %6524 = getelementptr inbounds i16, i16* %90, i64 %6523
  %6525 = load i16, i16* %6524, align 2, !tbaa !382
  %6526 = insertelement <64 x i16> %6521, i16 %6525, i32 60
  %6527 = extractelement <64 x i32> %6221, i32 61
  %6528 = sext i32 %6527 to i64
  %6529 = getelementptr inbounds i16, i16* %90, i64 %6528
  %6530 = load i16, i16* %6529, align 2, !tbaa !382
  %6531 = insertelement <64 x i16> %6526, i16 %6530, i32 61
  %6532 = extractelement <64 x i32> %6221, i32 62
  %6533 = sext i32 %6532 to i64
  %6534 = getelementptr inbounds i16, i16* %90, i64 %6533
  %6535 = load i16, i16* %6534, align 2, !tbaa !382
  %6536 = insertelement <64 x i16> %6531, i16 %6535, i32 62
  %6537 = extractelement <64 x i32> %6221, i32 63
  %6538 = sext i32 %6537 to i64
  %6539 = getelementptr inbounds i16, i16* %90, i64 %6538
  %6540 = load i16, i16* %6539, align 2, !tbaa !382
  %6541 = insertelement <64 x i16> %6536, i16 %6540, i32 63
  %6542 = add nsw i32 %blur_x.s0.x.v1.base.s21, -61
  %6543 = insertelement <64 x i32> undef, i32 %6542, i32 0
  %6544 = shufflevector <64 x i32> %6543, <64 x i32> undef, <64 x i32> zeroinitializer
  %6545 = add nsw <64 x i32> %6544, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6546 = shufflevector <64 x i32> %6545, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6547 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6546, <4 x i32> %87)
  %6548 = shufflevector <64 x i32> %6545, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6549 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6548, <4 x i32> %87)
  %6550 = shufflevector <64 x i32> %6545, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6551 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6550, <4 x i32> %87)
  %6552 = shufflevector <64 x i32> %6545, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %6553 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6552, <4 x i32> %87)
  %6554 = shufflevector <64 x i32> %6545, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %6555 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6554, <4 x i32> %87)
  %6556 = shufflevector <64 x i32> %6545, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %6557 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6556, <4 x i32> %87)
  %6558 = shufflevector <64 x i32> %6545, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %6559 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6558, <4 x i32> %87)
  %6560 = shufflevector <64 x i32> %6545, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %6561 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6560, <4 x i32> %87)
  %6562 = shufflevector <64 x i32> %6545, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %6563 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6562, <4 x i32> %87)
  %6564 = shufflevector <64 x i32> %6545, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %6565 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6564, <4 x i32> %87)
  %6566 = shufflevector <64 x i32> %6545, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %6567 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6566, <4 x i32> %87)
  %6568 = shufflevector <64 x i32> %6545, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %6569 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6568, <4 x i32> %87)
  %6570 = shufflevector <64 x i32> %6545, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %6571 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6570, <4 x i32> %87)
  %6572 = shufflevector <64 x i32> %6545, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %6573 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6572, <4 x i32> %87)
  %6574 = shufflevector <64 x i32> %6545, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %6575 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6574, <4 x i32> %87)
  %6576 = shufflevector <64 x i32> %6545, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %6577 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6576, <4 x i32> %87)
  %6578 = shufflevector <4 x i32> %6577, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %6579 = shufflevector <8 x i32> %6578, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %6580 = shufflevector <16 x i32> %6579, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %6581 = shufflevector <32 x i32> %6580, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %6582 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6547, <4 x i32> %89)
  %6583 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6549, <4 x i32> %89)
  %6584 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6551, <4 x i32> %89)
  %6585 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6553, <4 x i32> %89)
  %6586 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6555, <4 x i32> %89)
  %6587 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6557, <4 x i32> %89)
  %6588 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6559, <4 x i32> %89)
  %6589 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6561, <4 x i32> %89)
  %6590 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6563, <4 x i32> %89)
  %6591 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6565, <4 x i32> %89)
  %6592 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6567, <4 x i32> %89)
  %6593 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6569, <4 x i32> %89)
  %6594 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6571, <4 x i32> %89)
  %6595 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6573, <4 x i32> %89)
  %6596 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6575, <4 x i32> %89)
  %6597 = shufflevector <64 x i32> %6581, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %6598 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6597, <4 x i32> %89)
  %6599 = shufflevector <4 x i32> %6582, <4 x i32> %6583, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6600 = shufflevector <4 x i32> %6584, <4 x i32> %6585, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6601 = shufflevector <4 x i32> %6586, <4 x i32> %6587, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6602 = shufflevector <4 x i32> %6588, <4 x i32> %6589, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6603 = shufflevector <4 x i32> %6590, <4 x i32> %6591, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6604 = shufflevector <4 x i32> %6592, <4 x i32> %6593, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6605 = shufflevector <4 x i32> %6594, <4 x i32> %6595, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6606 = shufflevector <4 x i32> %6596, <4 x i32> %6598, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6607 = shufflevector <8 x i32> %6599, <8 x i32> %6600, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6608 = shufflevector <8 x i32> %6601, <8 x i32> %6602, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6609 = shufflevector <8 x i32> %6603, <8 x i32> %6604, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6610 = shufflevector <8 x i32> %6605, <8 x i32> %6606, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6611 = shufflevector <16 x i32> %6607, <16 x i32> %6608, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6612 = shufflevector <16 x i32> %6609, <16 x i32> %6610, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6613 = shufflevector <32 x i32> %6611, <32 x i32> %6612, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6614 = add nsw <64 x i32> %6613, %t207
  %6615 = extractelement <64 x i32> %6614, i32 0
  %6616 = sext i32 %6615 to i64
  %6617 = getelementptr inbounds i16, i16* %90, i64 %6616
  %6618 = load i16, i16* %6617, align 2, !tbaa !382
  %6619 = insertelement <64 x i16> undef, i16 %6618, i32 0
  %6620 = extractelement <64 x i32> %6614, i32 1
  %6621 = sext i32 %6620 to i64
  %6622 = getelementptr inbounds i16, i16* %90, i64 %6621
  %6623 = load i16, i16* %6622, align 2, !tbaa !382
  %6624 = insertelement <64 x i16> %6619, i16 %6623, i32 1
  %6625 = extractelement <64 x i32> %6614, i32 2
  %6626 = sext i32 %6625 to i64
  %6627 = getelementptr inbounds i16, i16* %90, i64 %6626
  %6628 = load i16, i16* %6627, align 2, !tbaa !382
  %6629 = insertelement <64 x i16> %6624, i16 %6628, i32 2
  %6630 = extractelement <64 x i32> %6614, i32 3
  %6631 = sext i32 %6630 to i64
  %6632 = getelementptr inbounds i16, i16* %90, i64 %6631
  %6633 = load i16, i16* %6632, align 2, !tbaa !382
  %6634 = insertelement <64 x i16> %6629, i16 %6633, i32 3
  %6635 = extractelement <64 x i32> %6614, i32 4
  %6636 = sext i32 %6635 to i64
  %6637 = getelementptr inbounds i16, i16* %90, i64 %6636
  %6638 = load i16, i16* %6637, align 2, !tbaa !382
  %6639 = insertelement <64 x i16> %6634, i16 %6638, i32 4
  %6640 = extractelement <64 x i32> %6614, i32 5
  %6641 = sext i32 %6640 to i64
  %6642 = getelementptr inbounds i16, i16* %90, i64 %6641
  %6643 = load i16, i16* %6642, align 2, !tbaa !382
  %6644 = insertelement <64 x i16> %6639, i16 %6643, i32 5
  %6645 = extractelement <64 x i32> %6614, i32 6
  %6646 = sext i32 %6645 to i64
  %6647 = getelementptr inbounds i16, i16* %90, i64 %6646
  %6648 = load i16, i16* %6647, align 2, !tbaa !382
  %6649 = insertelement <64 x i16> %6644, i16 %6648, i32 6
  %6650 = extractelement <64 x i32> %6614, i32 7
  %6651 = sext i32 %6650 to i64
  %6652 = getelementptr inbounds i16, i16* %90, i64 %6651
  %6653 = load i16, i16* %6652, align 2, !tbaa !382
  %6654 = insertelement <64 x i16> %6649, i16 %6653, i32 7
  %6655 = extractelement <64 x i32> %6614, i32 8
  %6656 = sext i32 %6655 to i64
  %6657 = getelementptr inbounds i16, i16* %90, i64 %6656
  %6658 = load i16, i16* %6657, align 2, !tbaa !382
  %6659 = insertelement <64 x i16> %6654, i16 %6658, i32 8
  %6660 = extractelement <64 x i32> %6614, i32 9
  %6661 = sext i32 %6660 to i64
  %6662 = getelementptr inbounds i16, i16* %90, i64 %6661
  %6663 = load i16, i16* %6662, align 2, !tbaa !382
  %6664 = insertelement <64 x i16> %6659, i16 %6663, i32 9
  %6665 = extractelement <64 x i32> %6614, i32 10
  %6666 = sext i32 %6665 to i64
  %6667 = getelementptr inbounds i16, i16* %90, i64 %6666
  %6668 = load i16, i16* %6667, align 2, !tbaa !382
  %6669 = insertelement <64 x i16> %6664, i16 %6668, i32 10
  %6670 = extractelement <64 x i32> %6614, i32 11
  %6671 = sext i32 %6670 to i64
  %6672 = getelementptr inbounds i16, i16* %90, i64 %6671
  %6673 = load i16, i16* %6672, align 2, !tbaa !382
  %6674 = insertelement <64 x i16> %6669, i16 %6673, i32 11
  %6675 = extractelement <64 x i32> %6614, i32 12
  %6676 = sext i32 %6675 to i64
  %6677 = getelementptr inbounds i16, i16* %90, i64 %6676
  %6678 = load i16, i16* %6677, align 2, !tbaa !382
  %6679 = insertelement <64 x i16> %6674, i16 %6678, i32 12
  %6680 = extractelement <64 x i32> %6614, i32 13
  %6681 = sext i32 %6680 to i64
  %6682 = getelementptr inbounds i16, i16* %90, i64 %6681
  %6683 = load i16, i16* %6682, align 2, !tbaa !382
  %6684 = insertelement <64 x i16> %6679, i16 %6683, i32 13
  %6685 = extractelement <64 x i32> %6614, i32 14
  %6686 = sext i32 %6685 to i64
  %6687 = getelementptr inbounds i16, i16* %90, i64 %6686
  %6688 = load i16, i16* %6687, align 2, !tbaa !382
  %6689 = insertelement <64 x i16> %6684, i16 %6688, i32 14
  %6690 = extractelement <64 x i32> %6614, i32 15
  %6691 = sext i32 %6690 to i64
  %6692 = getelementptr inbounds i16, i16* %90, i64 %6691
  %6693 = load i16, i16* %6692, align 2, !tbaa !382
  %6694 = insertelement <64 x i16> %6689, i16 %6693, i32 15
  %6695 = extractelement <64 x i32> %6614, i32 16
  %6696 = sext i32 %6695 to i64
  %6697 = getelementptr inbounds i16, i16* %90, i64 %6696
  %6698 = load i16, i16* %6697, align 2, !tbaa !382
  %6699 = insertelement <64 x i16> %6694, i16 %6698, i32 16
  %6700 = extractelement <64 x i32> %6614, i32 17
  %6701 = sext i32 %6700 to i64
  %6702 = getelementptr inbounds i16, i16* %90, i64 %6701
  %6703 = load i16, i16* %6702, align 2, !tbaa !382
  %6704 = insertelement <64 x i16> %6699, i16 %6703, i32 17
  %6705 = extractelement <64 x i32> %6614, i32 18
  %6706 = sext i32 %6705 to i64
  %6707 = getelementptr inbounds i16, i16* %90, i64 %6706
  %6708 = load i16, i16* %6707, align 2, !tbaa !382
  %6709 = insertelement <64 x i16> %6704, i16 %6708, i32 18
  %6710 = extractelement <64 x i32> %6614, i32 19
  %6711 = sext i32 %6710 to i64
  %6712 = getelementptr inbounds i16, i16* %90, i64 %6711
  %6713 = load i16, i16* %6712, align 2, !tbaa !382
  %6714 = insertelement <64 x i16> %6709, i16 %6713, i32 19
  %6715 = extractelement <64 x i32> %6614, i32 20
  %6716 = sext i32 %6715 to i64
  %6717 = getelementptr inbounds i16, i16* %90, i64 %6716
  %6718 = load i16, i16* %6717, align 2, !tbaa !382
  %6719 = insertelement <64 x i16> %6714, i16 %6718, i32 20
  %6720 = extractelement <64 x i32> %6614, i32 21
  %6721 = sext i32 %6720 to i64
  %6722 = getelementptr inbounds i16, i16* %90, i64 %6721
  %6723 = load i16, i16* %6722, align 2, !tbaa !382
  %6724 = insertelement <64 x i16> %6719, i16 %6723, i32 21
  %6725 = extractelement <64 x i32> %6614, i32 22
  %6726 = sext i32 %6725 to i64
  %6727 = getelementptr inbounds i16, i16* %90, i64 %6726
  %6728 = load i16, i16* %6727, align 2, !tbaa !382
  %6729 = insertelement <64 x i16> %6724, i16 %6728, i32 22
  %6730 = extractelement <64 x i32> %6614, i32 23
  %6731 = sext i32 %6730 to i64
  %6732 = getelementptr inbounds i16, i16* %90, i64 %6731
  %6733 = load i16, i16* %6732, align 2, !tbaa !382
  %6734 = insertelement <64 x i16> %6729, i16 %6733, i32 23
  %6735 = extractelement <64 x i32> %6614, i32 24
  %6736 = sext i32 %6735 to i64
  %6737 = getelementptr inbounds i16, i16* %90, i64 %6736
  %6738 = load i16, i16* %6737, align 2, !tbaa !382
  %6739 = insertelement <64 x i16> %6734, i16 %6738, i32 24
  %6740 = extractelement <64 x i32> %6614, i32 25
  %6741 = sext i32 %6740 to i64
  %6742 = getelementptr inbounds i16, i16* %90, i64 %6741
  %6743 = load i16, i16* %6742, align 2, !tbaa !382
  %6744 = insertelement <64 x i16> %6739, i16 %6743, i32 25
  %6745 = extractelement <64 x i32> %6614, i32 26
  %6746 = sext i32 %6745 to i64
  %6747 = getelementptr inbounds i16, i16* %90, i64 %6746
  %6748 = load i16, i16* %6747, align 2, !tbaa !382
  %6749 = insertelement <64 x i16> %6744, i16 %6748, i32 26
  %6750 = extractelement <64 x i32> %6614, i32 27
  %6751 = sext i32 %6750 to i64
  %6752 = getelementptr inbounds i16, i16* %90, i64 %6751
  %6753 = load i16, i16* %6752, align 2, !tbaa !382
  %6754 = insertelement <64 x i16> %6749, i16 %6753, i32 27
  %6755 = extractelement <64 x i32> %6614, i32 28
  %6756 = sext i32 %6755 to i64
  %6757 = getelementptr inbounds i16, i16* %90, i64 %6756
  %6758 = load i16, i16* %6757, align 2, !tbaa !382
  %6759 = insertelement <64 x i16> %6754, i16 %6758, i32 28
  %6760 = extractelement <64 x i32> %6614, i32 29
  %6761 = sext i32 %6760 to i64
  %6762 = getelementptr inbounds i16, i16* %90, i64 %6761
  %6763 = load i16, i16* %6762, align 2, !tbaa !382
  %6764 = insertelement <64 x i16> %6759, i16 %6763, i32 29
  %6765 = extractelement <64 x i32> %6614, i32 30
  %6766 = sext i32 %6765 to i64
  %6767 = getelementptr inbounds i16, i16* %90, i64 %6766
  %6768 = load i16, i16* %6767, align 2, !tbaa !382
  %6769 = insertelement <64 x i16> %6764, i16 %6768, i32 30
  %6770 = extractelement <64 x i32> %6614, i32 31
  %6771 = sext i32 %6770 to i64
  %6772 = getelementptr inbounds i16, i16* %90, i64 %6771
  %6773 = load i16, i16* %6772, align 2, !tbaa !382
  %6774 = insertelement <64 x i16> %6769, i16 %6773, i32 31
  %6775 = extractelement <64 x i32> %6614, i32 32
  %6776 = sext i32 %6775 to i64
  %6777 = getelementptr inbounds i16, i16* %90, i64 %6776
  %6778 = load i16, i16* %6777, align 2, !tbaa !382
  %6779 = insertelement <64 x i16> %6774, i16 %6778, i32 32
  %6780 = extractelement <64 x i32> %6614, i32 33
  %6781 = sext i32 %6780 to i64
  %6782 = getelementptr inbounds i16, i16* %90, i64 %6781
  %6783 = load i16, i16* %6782, align 2, !tbaa !382
  %6784 = insertelement <64 x i16> %6779, i16 %6783, i32 33
  %6785 = extractelement <64 x i32> %6614, i32 34
  %6786 = sext i32 %6785 to i64
  %6787 = getelementptr inbounds i16, i16* %90, i64 %6786
  %6788 = load i16, i16* %6787, align 2, !tbaa !382
  %6789 = insertelement <64 x i16> %6784, i16 %6788, i32 34
  %6790 = extractelement <64 x i32> %6614, i32 35
  %6791 = sext i32 %6790 to i64
  %6792 = getelementptr inbounds i16, i16* %90, i64 %6791
  %6793 = load i16, i16* %6792, align 2, !tbaa !382
  %6794 = insertelement <64 x i16> %6789, i16 %6793, i32 35
  %6795 = extractelement <64 x i32> %6614, i32 36
  %6796 = sext i32 %6795 to i64
  %6797 = getelementptr inbounds i16, i16* %90, i64 %6796
  %6798 = load i16, i16* %6797, align 2, !tbaa !382
  %6799 = insertelement <64 x i16> %6794, i16 %6798, i32 36
  %6800 = extractelement <64 x i32> %6614, i32 37
  %6801 = sext i32 %6800 to i64
  %6802 = getelementptr inbounds i16, i16* %90, i64 %6801
  %6803 = load i16, i16* %6802, align 2, !tbaa !382
  %6804 = insertelement <64 x i16> %6799, i16 %6803, i32 37
  %6805 = extractelement <64 x i32> %6614, i32 38
  %6806 = sext i32 %6805 to i64
  %6807 = getelementptr inbounds i16, i16* %90, i64 %6806
  %6808 = load i16, i16* %6807, align 2, !tbaa !382
  %6809 = insertelement <64 x i16> %6804, i16 %6808, i32 38
  %6810 = extractelement <64 x i32> %6614, i32 39
  %6811 = sext i32 %6810 to i64
  %6812 = getelementptr inbounds i16, i16* %90, i64 %6811
  %6813 = load i16, i16* %6812, align 2, !tbaa !382
  %6814 = insertelement <64 x i16> %6809, i16 %6813, i32 39
  %6815 = extractelement <64 x i32> %6614, i32 40
  %6816 = sext i32 %6815 to i64
  %6817 = getelementptr inbounds i16, i16* %90, i64 %6816
  %6818 = load i16, i16* %6817, align 2, !tbaa !382
  %6819 = insertelement <64 x i16> %6814, i16 %6818, i32 40
  %6820 = extractelement <64 x i32> %6614, i32 41
  %6821 = sext i32 %6820 to i64
  %6822 = getelementptr inbounds i16, i16* %90, i64 %6821
  %6823 = load i16, i16* %6822, align 2, !tbaa !382
  %6824 = insertelement <64 x i16> %6819, i16 %6823, i32 41
  %6825 = extractelement <64 x i32> %6614, i32 42
  %6826 = sext i32 %6825 to i64
  %6827 = getelementptr inbounds i16, i16* %90, i64 %6826
  %6828 = load i16, i16* %6827, align 2, !tbaa !382
  %6829 = insertelement <64 x i16> %6824, i16 %6828, i32 42
  %6830 = extractelement <64 x i32> %6614, i32 43
  %6831 = sext i32 %6830 to i64
  %6832 = getelementptr inbounds i16, i16* %90, i64 %6831
  %6833 = load i16, i16* %6832, align 2, !tbaa !382
  %6834 = insertelement <64 x i16> %6829, i16 %6833, i32 43
  %6835 = extractelement <64 x i32> %6614, i32 44
  %6836 = sext i32 %6835 to i64
  %6837 = getelementptr inbounds i16, i16* %90, i64 %6836
  %6838 = load i16, i16* %6837, align 2, !tbaa !382
  %6839 = insertelement <64 x i16> %6834, i16 %6838, i32 44
  %6840 = extractelement <64 x i32> %6614, i32 45
  %6841 = sext i32 %6840 to i64
  %6842 = getelementptr inbounds i16, i16* %90, i64 %6841
  %6843 = load i16, i16* %6842, align 2, !tbaa !382
  %6844 = insertelement <64 x i16> %6839, i16 %6843, i32 45
  %6845 = extractelement <64 x i32> %6614, i32 46
  %6846 = sext i32 %6845 to i64
  %6847 = getelementptr inbounds i16, i16* %90, i64 %6846
  %6848 = load i16, i16* %6847, align 2, !tbaa !382
  %6849 = insertelement <64 x i16> %6844, i16 %6848, i32 46
  %6850 = extractelement <64 x i32> %6614, i32 47
  %6851 = sext i32 %6850 to i64
  %6852 = getelementptr inbounds i16, i16* %90, i64 %6851
  %6853 = load i16, i16* %6852, align 2, !tbaa !382
  %6854 = insertelement <64 x i16> %6849, i16 %6853, i32 47
  %6855 = extractelement <64 x i32> %6614, i32 48
  %6856 = sext i32 %6855 to i64
  %6857 = getelementptr inbounds i16, i16* %90, i64 %6856
  %6858 = load i16, i16* %6857, align 2, !tbaa !382
  %6859 = insertelement <64 x i16> %6854, i16 %6858, i32 48
  %6860 = extractelement <64 x i32> %6614, i32 49
  %6861 = sext i32 %6860 to i64
  %6862 = getelementptr inbounds i16, i16* %90, i64 %6861
  %6863 = load i16, i16* %6862, align 2, !tbaa !382
  %6864 = insertelement <64 x i16> %6859, i16 %6863, i32 49
  %6865 = extractelement <64 x i32> %6614, i32 50
  %6866 = sext i32 %6865 to i64
  %6867 = getelementptr inbounds i16, i16* %90, i64 %6866
  %6868 = load i16, i16* %6867, align 2, !tbaa !382
  %6869 = insertelement <64 x i16> %6864, i16 %6868, i32 50
  %6870 = extractelement <64 x i32> %6614, i32 51
  %6871 = sext i32 %6870 to i64
  %6872 = getelementptr inbounds i16, i16* %90, i64 %6871
  %6873 = load i16, i16* %6872, align 2, !tbaa !382
  %6874 = insertelement <64 x i16> %6869, i16 %6873, i32 51
  %6875 = extractelement <64 x i32> %6614, i32 52
  %6876 = sext i32 %6875 to i64
  %6877 = getelementptr inbounds i16, i16* %90, i64 %6876
  %6878 = load i16, i16* %6877, align 2, !tbaa !382
  %6879 = insertelement <64 x i16> %6874, i16 %6878, i32 52
  %6880 = extractelement <64 x i32> %6614, i32 53
  %6881 = sext i32 %6880 to i64
  %6882 = getelementptr inbounds i16, i16* %90, i64 %6881
  %6883 = load i16, i16* %6882, align 2, !tbaa !382
  %6884 = insertelement <64 x i16> %6879, i16 %6883, i32 53
  %6885 = extractelement <64 x i32> %6614, i32 54
  %6886 = sext i32 %6885 to i64
  %6887 = getelementptr inbounds i16, i16* %90, i64 %6886
  %6888 = load i16, i16* %6887, align 2, !tbaa !382
  %6889 = insertelement <64 x i16> %6884, i16 %6888, i32 54
  %6890 = extractelement <64 x i32> %6614, i32 55
  %6891 = sext i32 %6890 to i64
  %6892 = getelementptr inbounds i16, i16* %90, i64 %6891
  %6893 = load i16, i16* %6892, align 2, !tbaa !382
  %6894 = insertelement <64 x i16> %6889, i16 %6893, i32 55
  %6895 = extractelement <64 x i32> %6614, i32 56
  %6896 = sext i32 %6895 to i64
  %6897 = getelementptr inbounds i16, i16* %90, i64 %6896
  %6898 = load i16, i16* %6897, align 2, !tbaa !382
  %6899 = insertelement <64 x i16> %6894, i16 %6898, i32 56
  %6900 = extractelement <64 x i32> %6614, i32 57
  %6901 = sext i32 %6900 to i64
  %6902 = getelementptr inbounds i16, i16* %90, i64 %6901
  %6903 = load i16, i16* %6902, align 2, !tbaa !382
  %6904 = insertelement <64 x i16> %6899, i16 %6903, i32 57
  %6905 = extractelement <64 x i32> %6614, i32 58
  %6906 = sext i32 %6905 to i64
  %6907 = getelementptr inbounds i16, i16* %90, i64 %6906
  %6908 = load i16, i16* %6907, align 2, !tbaa !382
  %6909 = insertelement <64 x i16> %6904, i16 %6908, i32 58
  %6910 = extractelement <64 x i32> %6614, i32 59
  %6911 = sext i32 %6910 to i64
  %6912 = getelementptr inbounds i16, i16* %90, i64 %6911
  %6913 = load i16, i16* %6912, align 2, !tbaa !382
  %6914 = insertelement <64 x i16> %6909, i16 %6913, i32 59
  %6915 = extractelement <64 x i32> %6614, i32 60
  %6916 = sext i32 %6915 to i64
  %6917 = getelementptr inbounds i16, i16* %90, i64 %6916
  %6918 = load i16, i16* %6917, align 2, !tbaa !382
  %6919 = insertelement <64 x i16> %6914, i16 %6918, i32 60
  %6920 = extractelement <64 x i32> %6614, i32 61
  %6921 = sext i32 %6920 to i64
  %6922 = getelementptr inbounds i16, i16* %90, i64 %6921
  %6923 = load i16, i16* %6922, align 2, !tbaa !382
  %6924 = insertelement <64 x i16> %6919, i16 %6923, i32 61
  %6925 = extractelement <64 x i32> %6614, i32 62
  %6926 = sext i32 %6925 to i64
  %6927 = getelementptr inbounds i16, i16* %90, i64 %6926
  %6928 = load i16, i16* %6927, align 2, !tbaa !382
  %6929 = insertelement <64 x i16> %6924, i16 %6928, i32 62
  %6930 = extractelement <64 x i32> %6614, i32 63
  %6931 = sext i32 %6930 to i64
  %6932 = getelementptr inbounds i16, i16* %90, i64 %6931
  %6933 = load i16, i16* %6932, align 2, !tbaa !382
  %6934 = insertelement <64 x i16> %6929, i16 %6933, i32 63
  %6935 = add <64 x i16> %5755, %5362
  %6936 = add <64 x i16> %6935, %6148
  %6937 = add <64 x i16> %6936, %6541
  %6938 = add <64 x i16> %6937, %6934
  %6939 = shufflevector <64 x i16> %6938, <64 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6940 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6939, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6941 = shufflevector <64 x i16> %6938, <64 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6942 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6941, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6943 = shufflevector <64 x i16> %6938, <64 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6944 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6943, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6945 = shufflevector <64 x i16> %6938, <64 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %6946 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6945, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6947 = shufflevector <64 x i16> %6938, <64 x i16> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %6948 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6947, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6949 = shufflevector <64 x i16> %6938, <64 x i16> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %6950 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6949, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6951 = shufflevector <64 x i16> %6938, <64 x i16> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %6952 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6951, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6953 = shufflevector <64 x i16> %6938, <64 x i16> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %6954 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6953, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6955 = shufflevector <64 x i16> %6938, <64 x i16> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %6956 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6955, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6957 = shufflevector <64 x i16> %6938, <64 x i16> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %6958 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6957, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6959 = shufflevector <64 x i16> %6938, <64 x i16> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %6960 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6959, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6961 = shufflevector <64 x i16> %6938, <64 x i16> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %6962 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6961, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6963 = shufflevector <64 x i16> %6938, <64 x i16> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %6964 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6963, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6965 = shufflevector <64 x i16> %6938, <64 x i16> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %6966 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6965, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6967 = shufflevector <64 x i16> %6938, <64 x i16> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %6968 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6967, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6969 = shufflevector <64 x i16> %6938, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %6970 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6969, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6971 = shufflevector <4 x i32> %6940, <4 x i32> %6942, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6972 = shufflevector <4 x i32> %6944, <4 x i32> %6946, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6973 = shufflevector <4 x i32> %6948, <4 x i32> %6950, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6974 = shufflevector <4 x i32> %6952, <4 x i32> %6954, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6975 = shufflevector <4 x i32> %6956, <4 x i32> %6958, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6976 = shufflevector <4 x i32> %6960, <4 x i32> %6962, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6977 = shufflevector <4 x i32> %6964, <4 x i32> %6966, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6978 = shufflevector <4 x i32> %6968, <4 x i32> %6970, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6979 = shufflevector <8 x i32> %6971, <8 x i32> %6972, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6980 = shufflevector <8 x i32> %6973, <8 x i32> %6974, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6981 = shufflevector <8 x i32> %6975, <8 x i32> %6976, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6982 = shufflevector <8 x i32> %6977, <8 x i32> %6978, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6983 = shufflevector <16 x i32> %6979, <16 x i32> %6980, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6984 = shufflevector <16 x i32> %6981, <16 x i32> %6982, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6985 = shufflevector <32 x i32> %6983, <32 x i32> %6984, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6986 = lshr <64 x i32> %6985, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %6987 = trunc <64 x i32> %6986 to <64 x i16>
  %6988 = shufflevector <64 x i16> %6987, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6989 = sext i32 %blur_x.s0.x.v1.base.s21 to i64
  %6990 = add nsw i64 %6989, %4967
  %6991 = getelementptr inbounds i16, i16* %blur_x13, i64 %6990
  %6992 = bitcast i16* %6991 to <8 x i16>*
  store <8 x i16> %6988, <8 x i16>* %6992, align 2, !tbaa !385
  %6993 = shufflevector <64 x i16> %6987, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6994 = getelementptr inbounds i16, i16* %6991, i64 8
  %6995 = bitcast i16* %6994 to <8 x i16>*
  store <8 x i16> %6993, <8 x i16>* %6995, align 2, !tbaa !385
  %6996 = shufflevector <64 x i16> %6987, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6997 = getelementptr inbounds i16, i16* %6991, i64 16
  %6998 = bitcast i16* %6997 to <8 x i16>*
  store <8 x i16> %6996, <8 x i16>* %6998, align 2, !tbaa !385
  %6999 = shufflevector <64 x i16> %6987, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7000 = getelementptr inbounds i16, i16* %6991, i64 24
  %7001 = bitcast i16* %7000 to <8 x i16>*
  store <8 x i16> %6999, <8 x i16>* %7001, align 2, !tbaa !385
  %7002 = shufflevector <64 x i16> %6987, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %7003 = getelementptr inbounds i16, i16* %6991, i64 32
  %7004 = bitcast i16* %7003 to <8 x i16>*
  store <8 x i16> %7002, <8 x i16>* %7004, align 2, !tbaa !385
  %7005 = shufflevector <64 x i16> %6987, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %7006 = getelementptr inbounds i16, i16* %6991, i64 40
  %7007 = bitcast i16* %7006 to <8 x i16>*
  store <8 x i16> %7005, <8 x i16>* %7007, align 2, !tbaa !385
  %7008 = shufflevector <64 x i16> %6987, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %7009 = getelementptr inbounds i16, i16* %6991, i64 48
  %7010 = bitcast i16* %7009 to <8 x i16>*
  store <8 x i16> %7008, <8 x i16>* %7010, align 2, !tbaa !385
  %7011 = shufflevector <64 x i16> %6987, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7012 = getelementptr inbounds i16, i16* %6991, i64 56
  %7013 = bitcast i16* %7012 to <8 x i16>*
  store <8 x i16> %7011, <8 x i16>* %7013, align 2, !tbaa !385
  %7014 = add nuw nsw i32 %blur_x.s0.x.x20, 1
  %.not141 = icmp eq i32 %7014, %t233
  br i1 %.not141, label %"end for blur_x.s0.x.x19", label %"for blur_x.s0.x.x18"

"end for blur_x.s0.x.x19":                        ; preds = %"for blur_x.s0.x.x18", %"for blur_y.s0.y.yi.$n.rebased14"
  %7015 = icmp ugt i64 %indvars.iv, 3
  %or.cond = and i1 %91, %7015
  br i1 %or.cond, label %"for blur_y.s0.x.x26.preheader", label %after_bb22, !prof !389

"for blur_y.s0.x.x26.preheader":                  ; preds = %"end for blur_x.s0.x.x19"
  %7016 = add nsw i32 %4959, 5
  %7017 = and i32 %7016, 7
  %7018 = zext i32 %7017 to i64
  %7019 = mul nsw i64 %92, %7018
  %7020 = add nsw i32 %4959, 4
  %7021 = and i32 %7020, 7
  %7022 = zext i32 %7021 to i64
  %7023 = mul nsw i64 %92, %7022
  %7024 = add nsw i32 %4959, 6
  %7025 = and i32 %7024, 7
  %7026 = zext i32 %7025 to i64
  %7027 = mul nsw i64 %92, %7026
  %7028 = zext i32 %4960 to i64
  %7029 = mul nsw i64 %92, %7028
  %7030 = add nsw i32 %4959, 7
  %7031 = and i32 %7030, 7
  %7032 = zext i32 %7031 to i64
  %7033 = mul nsw i64 %92, %7032
  %7034 = sext i32 %4959 to i64
  %7035 = add nsw i64 %7034, -4
  %7036 = mul nsw i64 %7035, %93
  %7037 = add nsw i64 %7036, %94
  br label %"for blur_y.s0.x.x26"

after_bb22:                                       ; preds = %"for blur_y.s0.x.x26", %"end for blur_x.s0.x.x19"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %.not = icmp eq i64 %indvars.iv.next, 132
  br i1 %.not, label %"end for blur_y.s0.y.yi.$n.rebased15", label %"for blur_y.s0.y.yi.$n.rebased14"

"for blur_y.s0.x.x26":                            ; preds = %"for blur_y.s0.x.x26.preheader", %"for blur_y.s0.x.x26"
  %blur_y.s0.x.x28 = phi i32 [ %7280, %"for blur_y.s0.x.x26" ], [ 0, %"for blur_y.s0.x.x26.preheader" ]
  %a11 = shl nsw i32 %blur_y.s0.x.x28, 6
  %7038 = icmp slt i32 %a11, %b13
  %blur_y.s0.x.v0.base.s = select i1 %7038, i32 %a11, i32 %b13
  %t177 = sub nsw i32 %blur_y.s0.x.v0.base.s, %t228
  %7039 = sext i32 %t177 to i64
  %7040 = add nsw i64 %7019, %7039
  %7041 = getelementptr inbounds i16, i16* %blur_x13, i64 %7040
  %7042 = getelementptr inbounds i16, i16* %7041, i64 64
  %7043 = bitcast i16* %7042 to <8 x i16>*
  %7044 = load <8 x i16>, <8 x i16>* %7043, align 2, !tbaa !385
  %7045 = getelementptr inbounds i16, i16* %7041, i64 72
  %7046 = bitcast i16* %7045 to <8 x i16>*
  %7047 = load <8 x i16>, <8 x i16>* %7046, align 2, !tbaa !385
  %7048 = getelementptr inbounds i16, i16* %7041, i64 80
  %7049 = bitcast i16* %7048 to <8 x i16>*
  %7050 = load <8 x i16>, <8 x i16>* %7049, align 2, !tbaa !385
  %7051 = getelementptr inbounds i16, i16* %7041, i64 88
  %7052 = bitcast i16* %7051 to <8 x i16>*
  %7053 = load <8 x i16>, <8 x i16>* %7052, align 2, !tbaa !385
  %7054 = getelementptr inbounds i16, i16* %7041, i64 96
  %7055 = bitcast i16* %7054 to <8 x i16>*
  %7056 = load <8 x i16>, <8 x i16>* %7055, align 2, !tbaa !385
  %7057 = getelementptr inbounds i16, i16* %7041, i64 104
  %7058 = bitcast i16* %7057 to <8 x i16>*
  %7059 = load <8 x i16>, <8 x i16>* %7058, align 2, !tbaa !385
  %7060 = getelementptr inbounds i16, i16* %7041, i64 112
  %7061 = bitcast i16* %7060 to <8 x i16>*
  %7062 = load <8 x i16>, <8 x i16>* %7061, align 2, !tbaa !385
  %7063 = getelementptr inbounds i16, i16* %7041, i64 120
  %7064 = bitcast i16* %7063 to <8 x i16>*
  %7065 = load <8 x i16>, <8 x i16>* %7064, align 2, !tbaa !385
  %7066 = add nsw i64 %7023, %7039
  %7067 = getelementptr inbounds i16, i16* %blur_x13, i64 %7066
  %7068 = getelementptr inbounds i16, i16* %7067, i64 64
  %7069 = bitcast i16* %7068 to <8 x i16>*
  %7070 = load <8 x i16>, <8 x i16>* %7069, align 2, !tbaa !385
  %7071 = getelementptr inbounds i16, i16* %7067, i64 72
  %7072 = bitcast i16* %7071 to <8 x i16>*
  %7073 = load <8 x i16>, <8 x i16>* %7072, align 2, !tbaa !385
  %7074 = getelementptr inbounds i16, i16* %7067, i64 80
  %7075 = bitcast i16* %7074 to <8 x i16>*
  %7076 = load <8 x i16>, <8 x i16>* %7075, align 2, !tbaa !385
  %7077 = getelementptr inbounds i16, i16* %7067, i64 88
  %7078 = bitcast i16* %7077 to <8 x i16>*
  %7079 = load <8 x i16>, <8 x i16>* %7078, align 2, !tbaa !385
  %7080 = getelementptr inbounds i16, i16* %7067, i64 96
  %7081 = bitcast i16* %7080 to <8 x i16>*
  %7082 = load <8 x i16>, <8 x i16>* %7081, align 2, !tbaa !385
  %7083 = getelementptr inbounds i16, i16* %7067, i64 104
  %7084 = bitcast i16* %7083 to <8 x i16>*
  %7085 = load <8 x i16>, <8 x i16>* %7084, align 2, !tbaa !385
  %7086 = getelementptr inbounds i16, i16* %7067, i64 112
  %7087 = bitcast i16* %7086 to <8 x i16>*
  %7088 = load <8 x i16>, <8 x i16>* %7087, align 2, !tbaa !385
  %7089 = getelementptr inbounds i16, i16* %7067, i64 120
  %7090 = bitcast i16* %7089 to <8 x i16>*
  %7091 = load <8 x i16>, <8 x i16>* %7090, align 2, !tbaa !385
  %7092 = add nsw i64 %7027, %7039
  %7093 = getelementptr inbounds i16, i16* %blur_x13, i64 %7092
  %7094 = getelementptr inbounds i16, i16* %7093, i64 64
  %7095 = bitcast i16* %7094 to <8 x i16>*
  %7096 = load <8 x i16>, <8 x i16>* %7095, align 2, !tbaa !385
  %7097 = getelementptr inbounds i16, i16* %7093, i64 72
  %7098 = bitcast i16* %7097 to <8 x i16>*
  %7099 = load <8 x i16>, <8 x i16>* %7098, align 2, !tbaa !385
  %7100 = getelementptr inbounds i16, i16* %7093, i64 80
  %7101 = bitcast i16* %7100 to <8 x i16>*
  %7102 = load <8 x i16>, <8 x i16>* %7101, align 2, !tbaa !385
  %7103 = getelementptr inbounds i16, i16* %7093, i64 88
  %7104 = bitcast i16* %7103 to <8 x i16>*
  %7105 = load <8 x i16>, <8 x i16>* %7104, align 2, !tbaa !385
  %7106 = getelementptr inbounds i16, i16* %7093, i64 96
  %7107 = bitcast i16* %7106 to <8 x i16>*
  %7108 = load <8 x i16>, <8 x i16>* %7107, align 2, !tbaa !385
  %7109 = getelementptr inbounds i16, i16* %7093, i64 104
  %7110 = bitcast i16* %7109 to <8 x i16>*
  %7111 = load <8 x i16>, <8 x i16>* %7110, align 2, !tbaa !385
  %7112 = getelementptr inbounds i16, i16* %7093, i64 112
  %7113 = bitcast i16* %7112 to <8 x i16>*
  %7114 = load <8 x i16>, <8 x i16>* %7113, align 2, !tbaa !385
  %7115 = getelementptr inbounds i16, i16* %7093, i64 120
  %7116 = bitcast i16* %7115 to <8 x i16>*
  %7117 = load <8 x i16>, <8 x i16>* %7116, align 2, !tbaa !385
  %7118 = add nsw i64 %7029, %7039
  %7119 = getelementptr inbounds i16, i16* %blur_x13, i64 %7118
  %7120 = getelementptr inbounds i16, i16* %7119, i64 64
  %7121 = bitcast i16* %7120 to <8 x i16>*
  %7122 = load <8 x i16>, <8 x i16>* %7121, align 2, !tbaa !385
  %7123 = getelementptr inbounds i16, i16* %7119, i64 72
  %7124 = bitcast i16* %7123 to <8 x i16>*
  %7125 = load <8 x i16>, <8 x i16>* %7124, align 2, !tbaa !385
  %7126 = getelementptr inbounds i16, i16* %7119, i64 80
  %7127 = bitcast i16* %7126 to <8 x i16>*
  %7128 = load <8 x i16>, <8 x i16>* %7127, align 2, !tbaa !385
  %7129 = getelementptr inbounds i16, i16* %7119, i64 88
  %7130 = bitcast i16* %7129 to <8 x i16>*
  %7131 = load <8 x i16>, <8 x i16>* %7130, align 2, !tbaa !385
  %7132 = getelementptr inbounds i16, i16* %7119, i64 96
  %7133 = bitcast i16* %7132 to <8 x i16>*
  %7134 = load <8 x i16>, <8 x i16>* %7133, align 2, !tbaa !385
  %7135 = getelementptr inbounds i16, i16* %7119, i64 104
  %7136 = bitcast i16* %7135 to <8 x i16>*
  %7137 = load <8 x i16>, <8 x i16>* %7136, align 2, !tbaa !385
  %7138 = getelementptr inbounds i16, i16* %7119, i64 112
  %7139 = bitcast i16* %7138 to <8 x i16>*
  %7140 = load <8 x i16>, <8 x i16>* %7139, align 2, !tbaa !385
  %7141 = getelementptr inbounds i16, i16* %7119, i64 120
  %7142 = bitcast i16* %7141 to <8 x i16>*
  %7143 = load <8 x i16>, <8 x i16>* %7142, align 2, !tbaa !385
  %7144 = add nsw i64 %7033, %7039
  %7145 = getelementptr inbounds i16, i16* %blur_x13, i64 %7144
  %7146 = getelementptr inbounds i16, i16* %7145, i64 64
  %7147 = bitcast i16* %7146 to <8 x i16>*
  %7148 = load <8 x i16>, <8 x i16>* %7147, align 2, !tbaa !385
  %7149 = getelementptr inbounds i16, i16* %7145, i64 72
  %7150 = bitcast i16* %7149 to <8 x i16>*
  %7151 = load <8 x i16>, <8 x i16>* %7150, align 2, !tbaa !385
  %7152 = getelementptr inbounds i16, i16* %7145, i64 80
  %7153 = bitcast i16* %7152 to <8 x i16>*
  %7154 = load <8 x i16>, <8 x i16>* %7153, align 2, !tbaa !385
  %7155 = getelementptr inbounds i16, i16* %7145, i64 88
  %7156 = bitcast i16* %7155 to <8 x i16>*
  %7157 = load <8 x i16>, <8 x i16>* %7156, align 2, !tbaa !385
  %7158 = getelementptr inbounds i16, i16* %7145, i64 96
  %7159 = bitcast i16* %7158 to <8 x i16>*
  %7160 = load <8 x i16>, <8 x i16>* %7159, align 2, !tbaa !385
  %7161 = getelementptr inbounds i16, i16* %7145, i64 104
  %7162 = bitcast i16* %7161 to <8 x i16>*
  %7163 = load <8 x i16>, <8 x i16>* %7162, align 2, !tbaa !385
  %7164 = getelementptr inbounds i16, i16* %7145, i64 112
  %7165 = bitcast i16* %7164 to <8 x i16>*
  %7166 = load <8 x i16>, <8 x i16>* %7165, align 2, !tbaa !385
  %7167 = getelementptr inbounds i16, i16* %7145, i64 120
  %7168 = bitcast i16* %7167 to <8 x i16>*
  %7169 = load <8 x i16>, <8 x i16>* %7168, align 2, !tbaa !385
  %7170 = add <8 x i16> %7070, %7044
  %7171 = add <8 x i16> %7170, %7096
  %7172 = add <8 x i16> %7171, %7122
  %7173 = add <8 x i16> %7172, %7148
  %7174 = add <8 x i16> %7073, %7047
  %7175 = add <8 x i16> %7174, %7099
  %7176 = add <8 x i16> %7175, %7125
  %7177 = add <8 x i16> %7176, %7151
  %7178 = add <8 x i16> %7076, %7050
  %7179 = add <8 x i16> %7178, %7102
  %7180 = add <8 x i16> %7179, %7128
  %7181 = add <8 x i16> %7180, %7154
  %7182 = add <8 x i16> %7079, %7053
  %7183 = add <8 x i16> %7182, %7105
  %7184 = add <8 x i16> %7183, %7131
  %7185 = add <8 x i16> %7184, %7157
  %7186 = add <8 x i16> %7082, %7056
  %7187 = add <8 x i16> %7186, %7108
  %7188 = add <8 x i16> %7187, %7134
  %7189 = add <8 x i16> %7188, %7160
  %7190 = add <8 x i16> %7085, %7059
  %7191 = add <8 x i16> %7190, %7111
  %7192 = add <8 x i16> %7191, %7137
  %7193 = add <8 x i16> %7192, %7163
  %7194 = add <8 x i16> %7088, %7062
  %7195 = add <8 x i16> %7194, %7114
  %7196 = add <8 x i16> %7195, %7140
  %7197 = add <8 x i16> %7196, %7166
  %7198 = add <8 x i16> %7091, %7065
  %7199 = add <8 x i16> %7198, %7117
  %7200 = add <8 x i16> %7199, %7143
  %7201 = add <8 x i16> %7200, %7169
  %7202 = shufflevector <8 x i16> %7201, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %7203 = shufflevector <16 x i16> %7202, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %7204 = shufflevector <32 x i16> %7203, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %7205 = shufflevector <8 x i16> %7173, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7206 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %7205, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7207 = shufflevector <8 x i16> %7173, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7208 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %7207, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7209 = shufflevector <8 x i16> %7177, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7210 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %7209, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7211 = shufflevector <8 x i16> %7177, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7212 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %7211, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7213 = shufflevector <8 x i16> %7181, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7214 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %7213, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7215 = shufflevector <8 x i16> %7181, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7216 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %7215, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7217 = shufflevector <8 x i16> %7185, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7218 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %7217, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7219 = shufflevector <8 x i16> %7185, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7220 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %7219, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7221 = shufflevector <8 x i16> %7189, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7222 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %7221, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7223 = shufflevector <8 x i16> %7189, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7224 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %7223, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7225 = shufflevector <8 x i16> %7193, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7226 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %7225, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7227 = shufflevector <8 x i16> %7193, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7228 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %7227, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7229 = shufflevector <8 x i16> %7197, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7230 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %7229, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7231 = shufflevector <8 x i16> %7197, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7232 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %7231, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7233 = shufflevector <8 x i16> %7201, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7234 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %7233, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7235 = shufflevector <64 x i16> %7204, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7236 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %7235, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7237 = shufflevector <4 x i32> %7206, <4 x i32> %7208, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7238 = shufflevector <4 x i32> %7210, <4 x i32> %7212, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7239 = shufflevector <4 x i32> %7214, <4 x i32> %7216, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7240 = shufflevector <4 x i32> %7218, <4 x i32> %7220, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7241 = shufflevector <4 x i32> %7222, <4 x i32> %7224, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7242 = shufflevector <4 x i32> %7226, <4 x i32> %7228, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7243 = shufflevector <4 x i32> %7230, <4 x i32> %7232, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7244 = shufflevector <4 x i32> %7234, <4 x i32> %7236, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7245 = shufflevector <8 x i32> %7237, <8 x i32> %7238, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7246 = shufflevector <8 x i32> %7239, <8 x i32> %7240, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7247 = shufflevector <8 x i32> %7241, <8 x i32> %7242, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7248 = shufflevector <8 x i32> %7243, <8 x i32> %7244, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7249 = shufflevector <16 x i32> %7245, <16 x i32> %7246, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7250 = shufflevector <16 x i32> %7247, <16 x i32> %7248, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7251 = shufflevector <32 x i32> %7249, <32 x i32> %7250, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7252 = lshr <64 x i32> %7251, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %7253 = trunc <64 x i32> %7252 to <64 x i16>
  %7254 = shufflevector <64 x i16> %7253, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7255 = sext i32 %blur_y.s0.x.v0.base.s to i64
  %7256 = add nsw i64 %7037, %7255
  %7257 = getelementptr inbounds i16, i16* %95, i64 %7256
  %7258 = bitcast i16* %7257 to <8 x i16>*
  store <8 x i16> %7254, <8 x i16>* %7258, align 2, !tbaa !387
  %7259 = shufflevector <64 x i16> %7253, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7260 = getelementptr inbounds i16, i16* %7257, i64 8
  %7261 = bitcast i16* %7260 to <8 x i16>*
  store <8 x i16> %7259, <8 x i16>* %7261, align 2, !tbaa !387
  %7262 = shufflevector <64 x i16> %7253, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %7263 = getelementptr inbounds i16, i16* %7257, i64 16
  %7264 = bitcast i16* %7263 to <8 x i16>*
  store <8 x i16> %7262, <8 x i16>* %7264, align 2, !tbaa !387
  %7265 = shufflevector <64 x i16> %7253, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7266 = getelementptr inbounds i16, i16* %7257, i64 24
  %7267 = bitcast i16* %7266 to <8 x i16>*
  store <8 x i16> %7265, <8 x i16>* %7267, align 2, !tbaa !387
  %7268 = shufflevector <64 x i16> %7253, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %7269 = getelementptr inbounds i16, i16* %7257, i64 32
  %7270 = bitcast i16* %7269 to <8 x i16>*
  store <8 x i16> %7268, <8 x i16>* %7270, align 2, !tbaa !387
  %7271 = shufflevector <64 x i16> %7253, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %7272 = getelementptr inbounds i16, i16* %7257, i64 40
  %7273 = bitcast i16* %7272 to <8 x i16>*
  store <8 x i16> %7271, <8 x i16>* %7273, align 2, !tbaa !387
  %7274 = shufflevector <64 x i16> %7253, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %7275 = getelementptr inbounds i16, i16* %7257, i64 48
  %7276 = bitcast i16* %7275 to <8 x i16>*
  store <8 x i16> %7274, <8 x i16>* %7276, align 2, !tbaa !387
  %7277 = shufflevector <64 x i16> %7253, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7278 = getelementptr inbounds i16, i16* %7257, i64 56
  %7279 = bitcast i16* %7278 to <8 x i16>*
  store <8 x i16> %7277, <8 x i16>* %7279, align 2, !tbaa !387
  %7280 = add nuw nsw i32 %blur_y.s0.x.x28, 1
  %.not140 = icmp eq i32 %7280, %t230
  br i1 %.not140, label %after_bb22, label %"for blur_y.s0.x.x26"

after_bb52:                                       ; preds = %if.then.i165, %"end for blur_y.s0.y.yi.$n.rebased105", %if.then.i162, %"end for blur_y.s0.y.yi.$n.rebased62"
  ret i32 0

then_bb53:                                        ; preds = %after_bb
  %t22445 = load i32, i32* %30, align 4
  %a12 = shl nsw i32 %blur_y.s0.y.y, 7
  %b14 = add nsw i32 %blur_y.extent.133, -128
  %7281 = icmp slt i32 %a12, %b14
  %blur_y.s0.y.yi.base.s55 = select i1 %7281, i32 %a12, i32 %b14
  %7282 = icmp sgt i32 %a19, 0
  %7283 = select i1 %7282, i32 %a19, i32 0
  %t258 = zext i32 %7283 to i64
  %7284 = shl nuw nsw i64 %t258, 4
  %7285 = or i64 %7284, 6
  %7286 = tail call i8* @halide_malloc(i8* %__user_context, i64 %7285)
  %blur_x56 = bitcast i8* %7286 to i16*
  %t23957 = sub nsw i32 %t23350, %t21441
  %7287 = icmp sgt i32 %t23451, 0
  %7288 = add nsw i32 %t22746, -1
  %7289 = insertelement <64 x i32> undef, i32 %7288, i32 0
  %7290 = shufflevector <64 x i32> %7289, <64 x i32> undef, <4 x i32> zeroinitializer
  %7291 = insertelement <64 x i32> undef, i32 %input.min.039, i32 0
  %7292 = shufflevector <64 x i32> %7291, <64 x i32> undef, <4 x i32> zeroinitializer
  %7293 = bitcast i8* %input31 to i16*
  %t24374 = sub nsw i32 %t21441, %t23451
  %7294 = icmp sgt i32 %t24374, 0
  %7295 = icmp sgt i32 %t23957, 0
  %7296 = icmp sgt i32 %t23149, 0
  %7297 = sext i32 %a19 to i64
  %7298 = sext i32 %blur_y.stride.137 to i64
  %7299 = sext i32 %t22244 to i64
  %7300 = bitcast i8* %blur_y30 to i16*
  %7301 = icmp sgt i32 %t23048, %t23149
  %7302 = sext i32 %t22445 to i64
  %7303 = zext i32 %t24374 to i64
  %7304 = zext i32 %t23149 to i64
  %7305 = sext i32 %t22847 to i64
  br label %"for blur_y.s0.y.yi.$n.rebased61"

next_bb54:                                        ; preds = %after_bb
  %input.extent.138 = load i32, i32* %16, align 4
  %blur_y.extent.032 = load i32, i32* %4, align 4
  %a17 = shl nsw i32 %blur_y.s0.y.y, 7
  %b19 = add nsw i32 %blur_y.extent.133, -128
  %7306 = icmp slt i32 %a17, %b19
  %blur_y.s0.y.yi.base.s100 = select i1 %7306, i32 %a17, i32 %b19
  %7307 = icmp sgt i32 %a19, 0
  %7308 = select i1 %7307, i32 %a19, i32 0
  %t259 = zext i32 %7308 to i64
  %7309 = shl nuw nsw i64 %t259, 4
  %7310 = or i64 %7309, 6
  %7311 = tail call i8* @halide_malloc(i8* %__user_context, i64 %7310)
  %blur_x101 = bitcast i8* %7311 to i16*
  %b22 = add nsw i32 %input.extent.138, -1
  %7312 = icmp sgt i32 %t23350, 0
  %7313 = add nsw i32 %t22746, -1
  %7314 = insertelement <64 x i32> undef, i32 %7313, i32 0
  %7315 = shufflevector <64 x i32> %7314, <64 x i32> undef, <4 x i32> zeroinitializer
  %7316 = insertelement <64 x i32> undef, i32 %input.min.039, i32 0
  %7317 = shufflevector <64 x i32> %7316, <64 x i32> undef, <4 x i32> zeroinitializer
  %7318 = bitcast i8* %input31 to i16*
  %7319 = icmp sgt i32 %t23048, 0
  %b25 = add nsw i32 %blur_y.extent.032, -64
  %7320 = sext i32 %a19 to i64
  %7321 = sext i32 %blur_y.stride.137 to i64
  %7322 = sext i32 %t22244 to i64
  %7323 = bitcast i8* %blur_y30 to i16*
  br label %"for blur_y.s0.y.yi.$n.rebased104"

"for blur_y.s0.y.yi.$n.rebased61":                ; preds = %then_bb53, %after_bb87
  %indvars.iv191 = phi i64 [ 0, %then_bb53 ], [ %indvars.iv.next192, %after_bb87 ]
  %7324 = trunc i64 %indvars.iv191 to i32
  %t23760 = add i32 %blur_y.s0.y.yi.base.s55, %7324
  %7325 = add i32 %t23760, %blur_y.min.134
  %7326 = and i32 %7325, 7
  %7327 = mul nsw i32 %a19, %7326
  %t24265 = sub nsw i32 %7327, %t21542
  %7328 = add i32 %t23760, %t21743
  %7329 = mul nsw i32 %7328, %input.stride.140
  %t24166 = sub nsw i32 %7329, %input.min.039
  br i1 %7287, label %"for blur_x.s0.x.x67.preheader", label %"end for blur_x.s0.x.x68", !prof !381

"for blur_x.s0.x.x67.preheader":                  ; preds = %"for blur_y.s0.y.yi.$n.rebased61"
  %7330 = insertelement <64 x i32> undef, i32 %t24166, i32 0
  %t19871 = shufflevector <64 x i32> %7330, <64 x i32> undef, <64 x i32> zeroinitializer
  %7331 = sext i32 %t24265 to i64
  br label %"for blur_x.s0.x.x67"

"end for blur_y.s0.y.yi.$n.rebased62":            ; preds = %after_bb87
  %tobool.not.i161.not = icmp eq i8* %7286, null
  br i1 %tobool.not.i161.not, label %after_bb52, label %if.then.i162

if.then.i162:                                     ; preds = %"end for blur_y.s0.y.yi.$n.rebased62"
  tail call void @halide_free(i8* %__user_context, i8* nonnull %7286) #13
  br label %after_bb52

"for blur_x.s0.x.x67":                            ; preds = %"for blur_x.s0.x.x67.preheader", %"for blur_x.s0.x.x67"
  %blur_x.s0.x.x69 = phi i32 [ %9378, %"for blur_x.s0.x.x67" ], [ 0, %"for blur_x.s0.x.x67.preheader" ]
  %7332 = shl nsw i32 %blur_x.s0.x.x69, 6
  %a15 = add nsw i32 %7332, %t21542
  %7333 = icmp slt i32 %a15, %b23
  %blur_x.s0.x.v1.base.s70 = select i1 %7333, i32 %a15, i32 %b23
  %7334 = add nsw i32 %blur_x.s0.x.v1.base.s70, -63
  %7335 = insertelement <64 x i32> undef, i32 %7334, i32 0
  %7336 = shufflevector <64 x i32> %7335, <64 x i32> undef, <64 x i32> zeroinitializer
  %7337 = add nsw <64 x i32> %7336, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7338 = shufflevector <64 x i32> %7337, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7339 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7338, <4 x i32> %7290)
  %7340 = shufflevector <64 x i32> %7337, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7341 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7340, <4 x i32> %7290)
  %7342 = shufflevector <64 x i32> %7337, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %7343 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7342, <4 x i32> %7290)
  %7344 = shufflevector <64 x i32> %7337, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %7345 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7344, <4 x i32> %7290)
  %7346 = shufflevector <64 x i32> %7337, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %7347 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7346, <4 x i32> %7290)
  %7348 = shufflevector <64 x i32> %7337, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %7349 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7348, <4 x i32> %7290)
  %7350 = shufflevector <64 x i32> %7337, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %7351 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7350, <4 x i32> %7290)
  %7352 = shufflevector <64 x i32> %7337, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %7353 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7352, <4 x i32> %7290)
  %7354 = shufflevector <64 x i32> %7337, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %7355 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7354, <4 x i32> %7290)
  %7356 = shufflevector <64 x i32> %7337, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %7357 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7356, <4 x i32> %7290)
  %7358 = shufflevector <64 x i32> %7337, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %7359 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7358, <4 x i32> %7290)
  %7360 = shufflevector <64 x i32> %7337, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %7361 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7360, <4 x i32> %7290)
  %7362 = shufflevector <64 x i32> %7337, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %7363 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7362, <4 x i32> %7290)
  %7364 = shufflevector <64 x i32> %7337, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %7365 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7364, <4 x i32> %7290)
  %7366 = shufflevector <64 x i32> %7337, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %7367 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7366, <4 x i32> %7290)
  %7368 = shufflevector <64 x i32> %7337, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7369 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7368, <4 x i32> %7290)
  %7370 = shufflevector <4 x i32> %7369, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %7371 = shufflevector <8 x i32> %7370, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %7372 = shufflevector <16 x i32> %7371, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %7373 = shufflevector <32 x i32> %7372, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %7374 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7339, <4 x i32> %7292)
  %7375 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7341, <4 x i32> %7292)
  %7376 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7343, <4 x i32> %7292)
  %7377 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7345, <4 x i32> %7292)
  %7378 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7347, <4 x i32> %7292)
  %7379 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7349, <4 x i32> %7292)
  %7380 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7351, <4 x i32> %7292)
  %7381 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7353, <4 x i32> %7292)
  %7382 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7355, <4 x i32> %7292)
  %7383 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7357, <4 x i32> %7292)
  %7384 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7359, <4 x i32> %7292)
  %7385 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7361, <4 x i32> %7292)
  %7386 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7363, <4 x i32> %7292)
  %7387 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7365, <4 x i32> %7292)
  %7388 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7367, <4 x i32> %7292)
  %7389 = shufflevector <64 x i32> %7373, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7390 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7389, <4 x i32> %7292)
  %7391 = shufflevector <4 x i32> %7374, <4 x i32> %7375, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7392 = shufflevector <4 x i32> %7376, <4 x i32> %7377, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7393 = shufflevector <4 x i32> %7378, <4 x i32> %7379, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7394 = shufflevector <4 x i32> %7380, <4 x i32> %7381, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7395 = shufflevector <4 x i32> %7382, <4 x i32> %7383, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7396 = shufflevector <4 x i32> %7384, <4 x i32> %7385, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7397 = shufflevector <4 x i32> %7386, <4 x i32> %7387, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7398 = shufflevector <4 x i32> %7388, <4 x i32> %7390, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7399 = shufflevector <8 x i32> %7391, <8 x i32> %7392, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7400 = shufflevector <8 x i32> %7393, <8 x i32> %7394, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7401 = shufflevector <8 x i32> %7395, <8 x i32> %7396, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7402 = shufflevector <8 x i32> %7397, <8 x i32> %7398, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7403 = shufflevector <16 x i32> %7399, <16 x i32> %7400, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7404 = shufflevector <16 x i32> %7401, <16 x i32> %7402, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7405 = shufflevector <32 x i32> %7403, <32 x i32> %7404, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7406 = add nsw <64 x i32> %7405, %t19871
  %7407 = extractelement <64 x i32> %7406, i32 0
  %7408 = sext i32 %7407 to i64
  %7409 = getelementptr inbounds i16, i16* %7293, i64 %7408
  %7410 = load i16, i16* %7409, align 2, !tbaa !382
  %7411 = insertelement <64 x i16> undef, i16 %7410, i32 0
  %7412 = extractelement <64 x i32> %7406, i32 1
  %7413 = sext i32 %7412 to i64
  %7414 = getelementptr inbounds i16, i16* %7293, i64 %7413
  %7415 = load i16, i16* %7414, align 2, !tbaa !382
  %7416 = insertelement <64 x i16> %7411, i16 %7415, i32 1
  %7417 = extractelement <64 x i32> %7406, i32 2
  %7418 = sext i32 %7417 to i64
  %7419 = getelementptr inbounds i16, i16* %7293, i64 %7418
  %7420 = load i16, i16* %7419, align 2, !tbaa !382
  %7421 = insertelement <64 x i16> %7416, i16 %7420, i32 2
  %7422 = extractelement <64 x i32> %7406, i32 3
  %7423 = sext i32 %7422 to i64
  %7424 = getelementptr inbounds i16, i16* %7293, i64 %7423
  %7425 = load i16, i16* %7424, align 2, !tbaa !382
  %7426 = insertelement <64 x i16> %7421, i16 %7425, i32 3
  %7427 = extractelement <64 x i32> %7406, i32 4
  %7428 = sext i32 %7427 to i64
  %7429 = getelementptr inbounds i16, i16* %7293, i64 %7428
  %7430 = load i16, i16* %7429, align 2, !tbaa !382
  %7431 = insertelement <64 x i16> %7426, i16 %7430, i32 4
  %7432 = extractelement <64 x i32> %7406, i32 5
  %7433 = sext i32 %7432 to i64
  %7434 = getelementptr inbounds i16, i16* %7293, i64 %7433
  %7435 = load i16, i16* %7434, align 2, !tbaa !382
  %7436 = insertelement <64 x i16> %7431, i16 %7435, i32 5
  %7437 = extractelement <64 x i32> %7406, i32 6
  %7438 = sext i32 %7437 to i64
  %7439 = getelementptr inbounds i16, i16* %7293, i64 %7438
  %7440 = load i16, i16* %7439, align 2, !tbaa !382
  %7441 = insertelement <64 x i16> %7436, i16 %7440, i32 6
  %7442 = extractelement <64 x i32> %7406, i32 7
  %7443 = sext i32 %7442 to i64
  %7444 = getelementptr inbounds i16, i16* %7293, i64 %7443
  %7445 = load i16, i16* %7444, align 2, !tbaa !382
  %7446 = insertelement <64 x i16> %7441, i16 %7445, i32 7
  %7447 = extractelement <64 x i32> %7406, i32 8
  %7448 = sext i32 %7447 to i64
  %7449 = getelementptr inbounds i16, i16* %7293, i64 %7448
  %7450 = load i16, i16* %7449, align 2, !tbaa !382
  %7451 = insertelement <64 x i16> %7446, i16 %7450, i32 8
  %7452 = extractelement <64 x i32> %7406, i32 9
  %7453 = sext i32 %7452 to i64
  %7454 = getelementptr inbounds i16, i16* %7293, i64 %7453
  %7455 = load i16, i16* %7454, align 2, !tbaa !382
  %7456 = insertelement <64 x i16> %7451, i16 %7455, i32 9
  %7457 = extractelement <64 x i32> %7406, i32 10
  %7458 = sext i32 %7457 to i64
  %7459 = getelementptr inbounds i16, i16* %7293, i64 %7458
  %7460 = load i16, i16* %7459, align 2, !tbaa !382
  %7461 = insertelement <64 x i16> %7456, i16 %7460, i32 10
  %7462 = extractelement <64 x i32> %7406, i32 11
  %7463 = sext i32 %7462 to i64
  %7464 = getelementptr inbounds i16, i16* %7293, i64 %7463
  %7465 = load i16, i16* %7464, align 2, !tbaa !382
  %7466 = insertelement <64 x i16> %7461, i16 %7465, i32 11
  %7467 = extractelement <64 x i32> %7406, i32 12
  %7468 = sext i32 %7467 to i64
  %7469 = getelementptr inbounds i16, i16* %7293, i64 %7468
  %7470 = load i16, i16* %7469, align 2, !tbaa !382
  %7471 = insertelement <64 x i16> %7466, i16 %7470, i32 12
  %7472 = extractelement <64 x i32> %7406, i32 13
  %7473 = sext i32 %7472 to i64
  %7474 = getelementptr inbounds i16, i16* %7293, i64 %7473
  %7475 = load i16, i16* %7474, align 2, !tbaa !382
  %7476 = insertelement <64 x i16> %7471, i16 %7475, i32 13
  %7477 = extractelement <64 x i32> %7406, i32 14
  %7478 = sext i32 %7477 to i64
  %7479 = getelementptr inbounds i16, i16* %7293, i64 %7478
  %7480 = load i16, i16* %7479, align 2, !tbaa !382
  %7481 = insertelement <64 x i16> %7476, i16 %7480, i32 14
  %7482 = extractelement <64 x i32> %7406, i32 15
  %7483 = sext i32 %7482 to i64
  %7484 = getelementptr inbounds i16, i16* %7293, i64 %7483
  %7485 = load i16, i16* %7484, align 2, !tbaa !382
  %7486 = insertelement <64 x i16> %7481, i16 %7485, i32 15
  %7487 = extractelement <64 x i32> %7406, i32 16
  %7488 = sext i32 %7487 to i64
  %7489 = getelementptr inbounds i16, i16* %7293, i64 %7488
  %7490 = load i16, i16* %7489, align 2, !tbaa !382
  %7491 = insertelement <64 x i16> %7486, i16 %7490, i32 16
  %7492 = extractelement <64 x i32> %7406, i32 17
  %7493 = sext i32 %7492 to i64
  %7494 = getelementptr inbounds i16, i16* %7293, i64 %7493
  %7495 = load i16, i16* %7494, align 2, !tbaa !382
  %7496 = insertelement <64 x i16> %7491, i16 %7495, i32 17
  %7497 = extractelement <64 x i32> %7406, i32 18
  %7498 = sext i32 %7497 to i64
  %7499 = getelementptr inbounds i16, i16* %7293, i64 %7498
  %7500 = load i16, i16* %7499, align 2, !tbaa !382
  %7501 = insertelement <64 x i16> %7496, i16 %7500, i32 18
  %7502 = extractelement <64 x i32> %7406, i32 19
  %7503 = sext i32 %7502 to i64
  %7504 = getelementptr inbounds i16, i16* %7293, i64 %7503
  %7505 = load i16, i16* %7504, align 2, !tbaa !382
  %7506 = insertelement <64 x i16> %7501, i16 %7505, i32 19
  %7507 = extractelement <64 x i32> %7406, i32 20
  %7508 = sext i32 %7507 to i64
  %7509 = getelementptr inbounds i16, i16* %7293, i64 %7508
  %7510 = load i16, i16* %7509, align 2, !tbaa !382
  %7511 = insertelement <64 x i16> %7506, i16 %7510, i32 20
  %7512 = extractelement <64 x i32> %7406, i32 21
  %7513 = sext i32 %7512 to i64
  %7514 = getelementptr inbounds i16, i16* %7293, i64 %7513
  %7515 = load i16, i16* %7514, align 2, !tbaa !382
  %7516 = insertelement <64 x i16> %7511, i16 %7515, i32 21
  %7517 = extractelement <64 x i32> %7406, i32 22
  %7518 = sext i32 %7517 to i64
  %7519 = getelementptr inbounds i16, i16* %7293, i64 %7518
  %7520 = load i16, i16* %7519, align 2, !tbaa !382
  %7521 = insertelement <64 x i16> %7516, i16 %7520, i32 22
  %7522 = extractelement <64 x i32> %7406, i32 23
  %7523 = sext i32 %7522 to i64
  %7524 = getelementptr inbounds i16, i16* %7293, i64 %7523
  %7525 = load i16, i16* %7524, align 2, !tbaa !382
  %7526 = insertelement <64 x i16> %7521, i16 %7525, i32 23
  %7527 = extractelement <64 x i32> %7406, i32 24
  %7528 = sext i32 %7527 to i64
  %7529 = getelementptr inbounds i16, i16* %7293, i64 %7528
  %7530 = load i16, i16* %7529, align 2, !tbaa !382
  %7531 = insertelement <64 x i16> %7526, i16 %7530, i32 24
  %7532 = extractelement <64 x i32> %7406, i32 25
  %7533 = sext i32 %7532 to i64
  %7534 = getelementptr inbounds i16, i16* %7293, i64 %7533
  %7535 = load i16, i16* %7534, align 2, !tbaa !382
  %7536 = insertelement <64 x i16> %7531, i16 %7535, i32 25
  %7537 = extractelement <64 x i32> %7406, i32 26
  %7538 = sext i32 %7537 to i64
  %7539 = getelementptr inbounds i16, i16* %7293, i64 %7538
  %7540 = load i16, i16* %7539, align 2, !tbaa !382
  %7541 = insertelement <64 x i16> %7536, i16 %7540, i32 26
  %7542 = extractelement <64 x i32> %7406, i32 27
  %7543 = sext i32 %7542 to i64
  %7544 = getelementptr inbounds i16, i16* %7293, i64 %7543
  %7545 = load i16, i16* %7544, align 2, !tbaa !382
  %7546 = insertelement <64 x i16> %7541, i16 %7545, i32 27
  %7547 = extractelement <64 x i32> %7406, i32 28
  %7548 = sext i32 %7547 to i64
  %7549 = getelementptr inbounds i16, i16* %7293, i64 %7548
  %7550 = load i16, i16* %7549, align 2, !tbaa !382
  %7551 = insertelement <64 x i16> %7546, i16 %7550, i32 28
  %7552 = extractelement <64 x i32> %7406, i32 29
  %7553 = sext i32 %7552 to i64
  %7554 = getelementptr inbounds i16, i16* %7293, i64 %7553
  %7555 = load i16, i16* %7554, align 2, !tbaa !382
  %7556 = insertelement <64 x i16> %7551, i16 %7555, i32 29
  %7557 = extractelement <64 x i32> %7406, i32 30
  %7558 = sext i32 %7557 to i64
  %7559 = getelementptr inbounds i16, i16* %7293, i64 %7558
  %7560 = load i16, i16* %7559, align 2, !tbaa !382
  %7561 = insertelement <64 x i16> %7556, i16 %7560, i32 30
  %7562 = extractelement <64 x i32> %7406, i32 31
  %7563 = sext i32 %7562 to i64
  %7564 = getelementptr inbounds i16, i16* %7293, i64 %7563
  %7565 = load i16, i16* %7564, align 2, !tbaa !382
  %7566 = insertelement <64 x i16> %7561, i16 %7565, i32 31
  %7567 = extractelement <64 x i32> %7406, i32 32
  %7568 = sext i32 %7567 to i64
  %7569 = getelementptr inbounds i16, i16* %7293, i64 %7568
  %7570 = load i16, i16* %7569, align 2, !tbaa !382
  %7571 = insertelement <64 x i16> %7566, i16 %7570, i32 32
  %7572 = extractelement <64 x i32> %7406, i32 33
  %7573 = sext i32 %7572 to i64
  %7574 = getelementptr inbounds i16, i16* %7293, i64 %7573
  %7575 = load i16, i16* %7574, align 2, !tbaa !382
  %7576 = insertelement <64 x i16> %7571, i16 %7575, i32 33
  %7577 = extractelement <64 x i32> %7406, i32 34
  %7578 = sext i32 %7577 to i64
  %7579 = getelementptr inbounds i16, i16* %7293, i64 %7578
  %7580 = load i16, i16* %7579, align 2, !tbaa !382
  %7581 = insertelement <64 x i16> %7576, i16 %7580, i32 34
  %7582 = extractelement <64 x i32> %7406, i32 35
  %7583 = sext i32 %7582 to i64
  %7584 = getelementptr inbounds i16, i16* %7293, i64 %7583
  %7585 = load i16, i16* %7584, align 2, !tbaa !382
  %7586 = insertelement <64 x i16> %7581, i16 %7585, i32 35
  %7587 = extractelement <64 x i32> %7406, i32 36
  %7588 = sext i32 %7587 to i64
  %7589 = getelementptr inbounds i16, i16* %7293, i64 %7588
  %7590 = load i16, i16* %7589, align 2, !tbaa !382
  %7591 = insertelement <64 x i16> %7586, i16 %7590, i32 36
  %7592 = extractelement <64 x i32> %7406, i32 37
  %7593 = sext i32 %7592 to i64
  %7594 = getelementptr inbounds i16, i16* %7293, i64 %7593
  %7595 = load i16, i16* %7594, align 2, !tbaa !382
  %7596 = insertelement <64 x i16> %7591, i16 %7595, i32 37
  %7597 = extractelement <64 x i32> %7406, i32 38
  %7598 = sext i32 %7597 to i64
  %7599 = getelementptr inbounds i16, i16* %7293, i64 %7598
  %7600 = load i16, i16* %7599, align 2, !tbaa !382
  %7601 = insertelement <64 x i16> %7596, i16 %7600, i32 38
  %7602 = extractelement <64 x i32> %7406, i32 39
  %7603 = sext i32 %7602 to i64
  %7604 = getelementptr inbounds i16, i16* %7293, i64 %7603
  %7605 = load i16, i16* %7604, align 2, !tbaa !382
  %7606 = insertelement <64 x i16> %7601, i16 %7605, i32 39
  %7607 = extractelement <64 x i32> %7406, i32 40
  %7608 = sext i32 %7607 to i64
  %7609 = getelementptr inbounds i16, i16* %7293, i64 %7608
  %7610 = load i16, i16* %7609, align 2, !tbaa !382
  %7611 = insertelement <64 x i16> %7606, i16 %7610, i32 40
  %7612 = extractelement <64 x i32> %7406, i32 41
  %7613 = sext i32 %7612 to i64
  %7614 = getelementptr inbounds i16, i16* %7293, i64 %7613
  %7615 = load i16, i16* %7614, align 2, !tbaa !382
  %7616 = insertelement <64 x i16> %7611, i16 %7615, i32 41
  %7617 = extractelement <64 x i32> %7406, i32 42
  %7618 = sext i32 %7617 to i64
  %7619 = getelementptr inbounds i16, i16* %7293, i64 %7618
  %7620 = load i16, i16* %7619, align 2, !tbaa !382
  %7621 = insertelement <64 x i16> %7616, i16 %7620, i32 42
  %7622 = extractelement <64 x i32> %7406, i32 43
  %7623 = sext i32 %7622 to i64
  %7624 = getelementptr inbounds i16, i16* %7293, i64 %7623
  %7625 = load i16, i16* %7624, align 2, !tbaa !382
  %7626 = insertelement <64 x i16> %7621, i16 %7625, i32 43
  %7627 = extractelement <64 x i32> %7406, i32 44
  %7628 = sext i32 %7627 to i64
  %7629 = getelementptr inbounds i16, i16* %7293, i64 %7628
  %7630 = load i16, i16* %7629, align 2, !tbaa !382
  %7631 = insertelement <64 x i16> %7626, i16 %7630, i32 44
  %7632 = extractelement <64 x i32> %7406, i32 45
  %7633 = sext i32 %7632 to i64
  %7634 = getelementptr inbounds i16, i16* %7293, i64 %7633
  %7635 = load i16, i16* %7634, align 2, !tbaa !382
  %7636 = insertelement <64 x i16> %7631, i16 %7635, i32 45
  %7637 = extractelement <64 x i32> %7406, i32 46
  %7638 = sext i32 %7637 to i64
  %7639 = getelementptr inbounds i16, i16* %7293, i64 %7638
  %7640 = load i16, i16* %7639, align 2, !tbaa !382
  %7641 = insertelement <64 x i16> %7636, i16 %7640, i32 46
  %7642 = extractelement <64 x i32> %7406, i32 47
  %7643 = sext i32 %7642 to i64
  %7644 = getelementptr inbounds i16, i16* %7293, i64 %7643
  %7645 = load i16, i16* %7644, align 2, !tbaa !382
  %7646 = insertelement <64 x i16> %7641, i16 %7645, i32 47
  %7647 = extractelement <64 x i32> %7406, i32 48
  %7648 = sext i32 %7647 to i64
  %7649 = getelementptr inbounds i16, i16* %7293, i64 %7648
  %7650 = load i16, i16* %7649, align 2, !tbaa !382
  %7651 = insertelement <64 x i16> %7646, i16 %7650, i32 48
  %7652 = extractelement <64 x i32> %7406, i32 49
  %7653 = sext i32 %7652 to i64
  %7654 = getelementptr inbounds i16, i16* %7293, i64 %7653
  %7655 = load i16, i16* %7654, align 2, !tbaa !382
  %7656 = insertelement <64 x i16> %7651, i16 %7655, i32 49
  %7657 = extractelement <64 x i32> %7406, i32 50
  %7658 = sext i32 %7657 to i64
  %7659 = getelementptr inbounds i16, i16* %7293, i64 %7658
  %7660 = load i16, i16* %7659, align 2, !tbaa !382
  %7661 = insertelement <64 x i16> %7656, i16 %7660, i32 50
  %7662 = extractelement <64 x i32> %7406, i32 51
  %7663 = sext i32 %7662 to i64
  %7664 = getelementptr inbounds i16, i16* %7293, i64 %7663
  %7665 = load i16, i16* %7664, align 2, !tbaa !382
  %7666 = insertelement <64 x i16> %7661, i16 %7665, i32 51
  %7667 = extractelement <64 x i32> %7406, i32 52
  %7668 = sext i32 %7667 to i64
  %7669 = getelementptr inbounds i16, i16* %7293, i64 %7668
  %7670 = load i16, i16* %7669, align 2, !tbaa !382
  %7671 = insertelement <64 x i16> %7666, i16 %7670, i32 52
  %7672 = extractelement <64 x i32> %7406, i32 53
  %7673 = sext i32 %7672 to i64
  %7674 = getelementptr inbounds i16, i16* %7293, i64 %7673
  %7675 = load i16, i16* %7674, align 2, !tbaa !382
  %7676 = insertelement <64 x i16> %7671, i16 %7675, i32 53
  %7677 = extractelement <64 x i32> %7406, i32 54
  %7678 = sext i32 %7677 to i64
  %7679 = getelementptr inbounds i16, i16* %7293, i64 %7678
  %7680 = load i16, i16* %7679, align 2, !tbaa !382
  %7681 = insertelement <64 x i16> %7676, i16 %7680, i32 54
  %7682 = extractelement <64 x i32> %7406, i32 55
  %7683 = sext i32 %7682 to i64
  %7684 = getelementptr inbounds i16, i16* %7293, i64 %7683
  %7685 = load i16, i16* %7684, align 2, !tbaa !382
  %7686 = insertelement <64 x i16> %7681, i16 %7685, i32 55
  %7687 = extractelement <64 x i32> %7406, i32 56
  %7688 = sext i32 %7687 to i64
  %7689 = getelementptr inbounds i16, i16* %7293, i64 %7688
  %7690 = load i16, i16* %7689, align 2, !tbaa !382
  %7691 = insertelement <64 x i16> %7686, i16 %7690, i32 56
  %7692 = extractelement <64 x i32> %7406, i32 57
  %7693 = sext i32 %7692 to i64
  %7694 = getelementptr inbounds i16, i16* %7293, i64 %7693
  %7695 = load i16, i16* %7694, align 2, !tbaa !382
  %7696 = insertelement <64 x i16> %7691, i16 %7695, i32 57
  %7697 = extractelement <64 x i32> %7406, i32 58
  %7698 = sext i32 %7697 to i64
  %7699 = getelementptr inbounds i16, i16* %7293, i64 %7698
  %7700 = load i16, i16* %7699, align 2, !tbaa !382
  %7701 = insertelement <64 x i16> %7696, i16 %7700, i32 58
  %7702 = extractelement <64 x i32> %7406, i32 59
  %7703 = sext i32 %7702 to i64
  %7704 = getelementptr inbounds i16, i16* %7293, i64 %7703
  %7705 = load i16, i16* %7704, align 2, !tbaa !382
  %7706 = insertelement <64 x i16> %7701, i16 %7705, i32 59
  %7707 = extractelement <64 x i32> %7406, i32 60
  %7708 = sext i32 %7707 to i64
  %7709 = getelementptr inbounds i16, i16* %7293, i64 %7708
  %7710 = load i16, i16* %7709, align 2, !tbaa !382
  %7711 = insertelement <64 x i16> %7706, i16 %7710, i32 60
  %7712 = extractelement <64 x i32> %7406, i32 61
  %7713 = sext i32 %7712 to i64
  %7714 = getelementptr inbounds i16, i16* %7293, i64 %7713
  %7715 = load i16, i16* %7714, align 2, !tbaa !382
  %7716 = insertelement <64 x i16> %7711, i16 %7715, i32 61
  %7717 = extractelement <64 x i32> %7406, i32 62
  %7718 = sext i32 %7717 to i64
  %7719 = getelementptr inbounds i16, i16* %7293, i64 %7718
  %7720 = load i16, i16* %7719, align 2, !tbaa !382
  %7721 = insertelement <64 x i16> %7716, i16 %7720, i32 62
  %7722 = extractelement <64 x i32> %7406, i32 63
  %7723 = sext i32 %7722 to i64
  %7724 = getelementptr inbounds i16, i16* %7293, i64 %7723
  %7725 = load i16, i16* %7724, align 2, !tbaa !382
  %7726 = insertelement <64 x i16> %7721, i16 %7725, i32 63
  %7727 = add nsw i32 %blur_x.s0.x.v1.base.s70, -64
  %7728 = insertelement <64 x i32> undef, i32 %7727, i32 0
  %7729 = shufflevector <64 x i32> %7728, <64 x i32> undef, <64 x i32> zeroinitializer
  %7730 = add nsw <64 x i32> %7729, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7731 = shufflevector <64 x i32> %7730, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7732 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7731, <4 x i32> %7290)
  %7733 = shufflevector <64 x i32> %7730, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7734 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7733, <4 x i32> %7290)
  %7735 = shufflevector <64 x i32> %7730, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %7736 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7735, <4 x i32> %7290)
  %7737 = shufflevector <64 x i32> %7730, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %7738 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7737, <4 x i32> %7290)
  %7739 = shufflevector <64 x i32> %7730, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %7740 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7739, <4 x i32> %7290)
  %7741 = shufflevector <64 x i32> %7730, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %7742 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7741, <4 x i32> %7290)
  %7743 = shufflevector <64 x i32> %7730, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %7744 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7743, <4 x i32> %7290)
  %7745 = shufflevector <64 x i32> %7730, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %7746 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7745, <4 x i32> %7290)
  %7747 = shufflevector <64 x i32> %7730, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %7748 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7747, <4 x i32> %7290)
  %7749 = shufflevector <64 x i32> %7730, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %7750 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7749, <4 x i32> %7290)
  %7751 = shufflevector <64 x i32> %7730, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %7752 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7751, <4 x i32> %7290)
  %7753 = shufflevector <64 x i32> %7730, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %7754 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7753, <4 x i32> %7290)
  %7755 = shufflevector <64 x i32> %7730, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %7756 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7755, <4 x i32> %7290)
  %7757 = shufflevector <64 x i32> %7730, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %7758 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7757, <4 x i32> %7290)
  %7759 = shufflevector <64 x i32> %7730, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %7760 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7759, <4 x i32> %7290)
  %7761 = shufflevector <64 x i32> %7730, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7762 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7761, <4 x i32> %7290)
  %7763 = shufflevector <4 x i32> %7762, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %7764 = shufflevector <8 x i32> %7763, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %7765 = shufflevector <16 x i32> %7764, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %7766 = shufflevector <32 x i32> %7765, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %7767 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7732, <4 x i32> %7292)
  %7768 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7734, <4 x i32> %7292)
  %7769 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7736, <4 x i32> %7292)
  %7770 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7738, <4 x i32> %7292)
  %7771 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7740, <4 x i32> %7292)
  %7772 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7742, <4 x i32> %7292)
  %7773 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7744, <4 x i32> %7292)
  %7774 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7746, <4 x i32> %7292)
  %7775 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7748, <4 x i32> %7292)
  %7776 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7750, <4 x i32> %7292)
  %7777 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7752, <4 x i32> %7292)
  %7778 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7754, <4 x i32> %7292)
  %7779 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7756, <4 x i32> %7292)
  %7780 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7758, <4 x i32> %7292)
  %7781 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7760, <4 x i32> %7292)
  %7782 = shufflevector <64 x i32> %7766, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7783 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7782, <4 x i32> %7292)
  %7784 = shufflevector <4 x i32> %7767, <4 x i32> %7768, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7785 = shufflevector <4 x i32> %7769, <4 x i32> %7770, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7786 = shufflevector <4 x i32> %7771, <4 x i32> %7772, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7787 = shufflevector <4 x i32> %7773, <4 x i32> %7774, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7788 = shufflevector <4 x i32> %7775, <4 x i32> %7776, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7789 = shufflevector <4 x i32> %7777, <4 x i32> %7778, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7790 = shufflevector <4 x i32> %7779, <4 x i32> %7780, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7791 = shufflevector <4 x i32> %7781, <4 x i32> %7783, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7792 = shufflevector <8 x i32> %7784, <8 x i32> %7785, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7793 = shufflevector <8 x i32> %7786, <8 x i32> %7787, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7794 = shufflevector <8 x i32> %7788, <8 x i32> %7789, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7795 = shufflevector <8 x i32> %7790, <8 x i32> %7791, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7796 = shufflevector <16 x i32> %7792, <16 x i32> %7793, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7797 = shufflevector <16 x i32> %7794, <16 x i32> %7795, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7798 = shufflevector <32 x i32> %7796, <32 x i32> %7797, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7799 = add nsw <64 x i32> %7798, %t19871
  %7800 = extractelement <64 x i32> %7799, i32 0
  %7801 = sext i32 %7800 to i64
  %7802 = getelementptr inbounds i16, i16* %7293, i64 %7801
  %7803 = load i16, i16* %7802, align 2, !tbaa !382
  %7804 = insertelement <64 x i16> undef, i16 %7803, i32 0
  %7805 = extractelement <64 x i32> %7799, i32 1
  %7806 = sext i32 %7805 to i64
  %7807 = getelementptr inbounds i16, i16* %7293, i64 %7806
  %7808 = load i16, i16* %7807, align 2, !tbaa !382
  %7809 = insertelement <64 x i16> %7804, i16 %7808, i32 1
  %7810 = extractelement <64 x i32> %7799, i32 2
  %7811 = sext i32 %7810 to i64
  %7812 = getelementptr inbounds i16, i16* %7293, i64 %7811
  %7813 = load i16, i16* %7812, align 2, !tbaa !382
  %7814 = insertelement <64 x i16> %7809, i16 %7813, i32 2
  %7815 = extractelement <64 x i32> %7799, i32 3
  %7816 = sext i32 %7815 to i64
  %7817 = getelementptr inbounds i16, i16* %7293, i64 %7816
  %7818 = load i16, i16* %7817, align 2, !tbaa !382
  %7819 = insertelement <64 x i16> %7814, i16 %7818, i32 3
  %7820 = extractelement <64 x i32> %7799, i32 4
  %7821 = sext i32 %7820 to i64
  %7822 = getelementptr inbounds i16, i16* %7293, i64 %7821
  %7823 = load i16, i16* %7822, align 2, !tbaa !382
  %7824 = insertelement <64 x i16> %7819, i16 %7823, i32 4
  %7825 = extractelement <64 x i32> %7799, i32 5
  %7826 = sext i32 %7825 to i64
  %7827 = getelementptr inbounds i16, i16* %7293, i64 %7826
  %7828 = load i16, i16* %7827, align 2, !tbaa !382
  %7829 = insertelement <64 x i16> %7824, i16 %7828, i32 5
  %7830 = extractelement <64 x i32> %7799, i32 6
  %7831 = sext i32 %7830 to i64
  %7832 = getelementptr inbounds i16, i16* %7293, i64 %7831
  %7833 = load i16, i16* %7832, align 2, !tbaa !382
  %7834 = insertelement <64 x i16> %7829, i16 %7833, i32 6
  %7835 = extractelement <64 x i32> %7799, i32 7
  %7836 = sext i32 %7835 to i64
  %7837 = getelementptr inbounds i16, i16* %7293, i64 %7836
  %7838 = load i16, i16* %7837, align 2, !tbaa !382
  %7839 = insertelement <64 x i16> %7834, i16 %7838, i32 7
  %7840 = extractelement <64 x i32> %7799, i32 8
  %7841 = sext i32 %7840 to i64
  %7842 = getelementptr inbounds i16, i16* %7293, i64 %7841
  %7843 = load i16, i16* %7842, align 2, !tbaa !382
  %7844 = insertelement <64 x i16> %7839, i16 %7843, i32 8
  %7845 = extractelement <64 x i32> %7799, i32 9
  %7846 = sext i32 %7845 to i64
  %7847 = getelementptr inbounds i16, i16* %7293, i64 %7846
  %7848 = load i16, i16* %7847, align 2, !tbaa !382
  %7849 = insertelement <64 x i16> %7844, i16 %7848, i32 9
  %7850 = extractelement <64 x i32> %7799, i32 10
  %7851 = sext i32 %7850 to i64
  %7852 = getelementptr inbounds i16, i16* %7293, i64 %7851
  %7853 = load i16, i16* %7852, align 2, !tbaa !382
  %7854 = insertelement <64 x i16> %7849, i16 %7853, i32 10
  %7855 = extractelement <64 x i32> %7799, i32 11
  %7856 = sext i32 %7855 to i64
  %7857 = getelementptr inbounds i16, i16* %7293, i64 %7856
  %7858 = load i16, i16* %7857, align 2, !tbaa !382
  %7859 = insertelement <64 x i16> %7854, i16 %7858, i32 11
  %7860 = extractelement <64 x i32> %7799, i32 12
  %7861 = sext i32 %7860 to i64
  %7862 = getelementptr inbounds i16, i16* %7293, i64 %7861
  %7863 = load i16, i16* %7862, align 2, !tbaa !382
  %7864 = insertelement <64 x i16> %7859, i16 %7863, i32 12
  %7865 = extractelement <64 x i32> %7799, i32 13
  %7866 = sext i32 %7865 to i64
  %7867 = getelementptr inbounds i16, i16* %7293, i64 %7866
  %7868 = load i16, i16* %7867, align 2, !tbaa !382
  %7869 = insertelement <64 x i16> %7864, i16 %7868, i32 13
  %7870 = extractelement <64 x i32> %7799, i32 14
  %7871 = sext i32 %7870 to i64
  %7872 = getelementptr inbounds i16, i16* %7293, i64 %7871
  %7873 = load i16, i16* %7872, align 2, !tbaa !382
  %7874 = insertelement <64 x i16> %7869, i16 %7873, i32 14
  %7875 = extractelement <64 x i32> %7799, i32 15
  %7876 = sext i32 %7875 to i64
  %7877 = getelementptr inbounds i16, i16* %7293, i64 %7876
  %7878 = load i16, i16* %7877, align 2, !tbaa !382
  %7879 = insertelement <64 x i16> %7874, i16 %7878, i32 15
  %7880 = extractelement <64 x i32> %7799, i32 16
  %7881 = sext i32 %7880 to i64
  %7882 = getelementptr inbounds i16, i16* %7293, i64 %7881
  %7883 = load i16, i16* %7882, align 2, !tbaa !382
  %7884 = insertelement <64 x i16> %7879, i16 %7883, i32 16
  %7885 = extractelement <64 x i32> %7799, i32 17
  %7886 = sext i32 %7885 to i64
  %7887 = getelementptr inbounds i16, i16* %7293, i64 %7886
  %7888 = load i16, i16* %7887, align 2, !tbaa !382
  %7889 = insertelement <64 x i16> %7884, i16 %7888, i32 17
  %7890 = extractelement <64 x i32> %7799, i32 18
  %7891 = sext i32 %7890 to i64
  %7892 = getelementptr inbounds i16, i16* %7293, i64 %7891
  %7893 = load i16, i16* %7892, align 2, !tbaa !382
  %7894 = insertelement <64 x i16> %7889, i16 %7893, i32 18
  %7895 = extractelement <64 x i32> %7799, i32 19
  %7896 = sext i32 %7895 to i64
  %7897 = getelementptr inbounds i16, i16* %7293, i64 %7896
  %7898 = load i16, i16* %7897, align 2, !tbaa !382
  %7899 = insertelement <64 x i16> %7894, i16 %7898, i32 19
  %7900 = extractelement <64 x i32> %7799, i32 20
  %7901 = sext i32 %7900 to i64
  %7902 = getelementptr inbounds i16, i16* %7293, i64 %7901
  %7903 = load i16, i16* %7902, align 2, !tbaa !382
  %7904 = insertelement <64 x i16> %7899, i16 %7903, i32 20
  %7905 = extractelement <64 x i32> %7799, i32 21
  %7906 = sext i32 %7905 to i64
  %7907 = getelementptr inbounds i16, i16* %7293, i64 %7906
  %7908 = load i16, i16* %7907, align 2, !tbaa !382
  %7909 = insertelement <64 x i16> %7904, i16 %7908, i32 21
  %7910 = extractelement <64 x i32> %7799, i32 22
  %7911 = sext i32 %7910 to i64
  %7912 = getelementptr inbounds i16, i16* %7293, i64 %7911
  %7913 = load i16, i16* %7912, align 2, !tbaa !382
  %7914 = insertelement <64 x i16> %7909, i16 %7913, i32 22
  %7915 = extractelement <64 x i32> %7799, i32 23
  %7916 = sext i32 %7915 to i64
  %7917 = getelementptr inbounds i16, i16* %7293, i64 %7916
  %7918 = load i16, i16* %7917, align 2, !tbaa !382
  %7919 = insertelement <64 x i16> %7914, i16 %7918, i32 23
  %7920 = extractelement <64 x i32> %7799, i32 24
  %7921 = sext i32 %7920 to i64
  %7922 = getelementptr inbounds i16, i16* %7293, i64 %7921
  %7923 = load i16, i16* %7922, align 2, !tbaa !382
  %7924 = insertelement <64 x i16> %7919, i16 %7923, i32 24
  %7925 = extractelement <64 x i32> %7799, i32 25
  %7926 = sext i32 %7925 to i64
  %7927 = getelementptr inbounds i16, i16* %7293, i64 %7926
  %7928 = load i16, i16* %7927, align 2, !tbaa !382
  %7929 = insertelement <64 x i16> %7924, i16 %7928, i32 25
  %7930 = extractelement <64 x i32> %7799, i32 26
  %7931 = sext i32 %7930 to i64
  %7932 = getelementptr inbounds i16, i16* %7293, i64 %7931
  %7933 = load i16, i16* %7932, align 2, !tbaa !382
  %7934 = insertelement <64 x i16> %7929, i16 %7933, i32 26
  %7935 = extractelement <64 x i32> %7799, i32 27
  %7936 = sext i32 %7935 to i64
  %7937 = getelementptr inbounds i16, i16* %7293, i64 %7936
  %7938 = load i16, i16* %7937, align 2, !tbaa !382
  %7939 = insertelement <64 x i16> %7934, i16 %7938, i32 27
  %7940 = extractelement <64 x i32> %7799, i32 28
  %7941 = sext i32 %7940 to i64
  %7942 = getelementptr inbounds i16, i16* %7293, i64 %7941
  %7943 = load i16, i16* %7942, align 2, !tbaa !382
  %7944 = insertelement <64 x i16> %7939, i16 %7943, i32 28
  %7945 = extractelement <64 x i32> %7799, i32 29
  %7946 = sext i32 %7945 to i64
  %7947 = getelementptr inbounds i16, i16* %7293, i64 %7946
  %7948 = load i16, i16* %7947, align 2, !tbaa !382
  %7949 = insertelement <64 x i16> %7944, i16 %7948, i32 29
  %7950 = extractelement <64 x i32> %7799, i32 30
  %7951 = sext i32 %7950 to i64
  %7952 = getelementptr inbounds i16, i16* %7293, i64 %7951
  %7953 = load i16, i16* %7952, align 2, !tbaa !382
  %7954 = insertelement <64 x i16> %7949, i16 %7953, i32 30
  %7955 = extractelement <64 x i32> %7799, i32 31
  %7956 = sext i32 %7955 to i64
  %7957 = getelementptr inbounds i16, i16* %7293, i64 %7956
  %7958 = load i16, i16* %7957, align 2, !tbaa !382
  %7959 = insertelement <64 x i16> %7954, i16 %7958, i32 31
  %7960 = extractelement <64 x i32> %7799, i32 32
  %7961 = sext i32 %7960 to i64
  %7962 = getelementptr inbounds i16, i16* %7293, i64 %7961
  %7963 = load i16, i16* %7962, align 2, !tbaa !382
  %7964 = insertelement <64 x i16> %7959, i16 %7963, i32 32
  %7965 = extractelement <64 x i32> %7799, i32 33
  %7966 = sext i32 %7965 to i64
  %7967 = getelementptr inbounds i16, i16* %7293, i64 %7966
  %7968 = load i16, i16* %7967, align 2, !tbaa !382
  %7969 = insertelement <64 x i16> %7964, i16 %7968, i32 33
  %7970 = extractelement <64 x i32> %7799, i32 34
  %7971 = sext i32 %7970 to i64
  %7972 = getelementptr inbounds i16, i16* %7293, i64 %7971
  %7973 = load i16, i16* %7972, align 2, !tbaa !382
  %7974 = insertelement <64 x i16> %7969, i16 %7973, i32 34
  %7975 = extractelement <64 x i32> %7799, i32 35
  %7976 = sext i32 %7975 to i64
  %7977 = getelementptr inbounds i16, i16* %7293, i64 %7976
  %7978 = load i16, i16* %7977, align 2, !tbaa !382
  %7979 = insertelement <64 x i16> %7974, i16 %7978, i32 35
  %7980 = extractelement <64 x i32> %7799, i32 36
  %7981 = sext i32 %7980 to i64
  %7982 = getelementptr inbounds i16, i16* %7293, i64 %7981
  %7983 = load i16, i16* %7982, align 2, !tbaa !382
  %7984 = insertelement <64 x i16> %7979, i16 %7983, i32 36
  %7985 = extractelement <64 x i32> %7799, i32 37
  %7986 = sext i32 %7985 to i64
  %7987 = getelementptr inbounds i16, i16* %7293, i64 %7986
  %7988 = load i16, i16* %7987, align 2, !tbaa !382
  %7989 = insertelement <64 x i16> %7984, i16 %7988, i32 37
  %7990 = extractelement <64 x i32> %7799, i32 38
  %7991 = sext i32 %7990 to i64
  %7992 = getelementptr inbounds i16, i16* %7293, i64 %7991
  %7993 = load i16, i16* %7992, align 2, !tbaa !382
  %7994 = insertelement <64 x i16> %7989, i16 %7993, i32 38
  %7995 = extractelement <64 x i32> %7799, i32 39
  %7996 = sext i32 %7995 to i64
  %7997 = getelementptr inbounds i16, i16* %7293, i64 %7996
  %7998 = load i16, i16* %7997, align 2, !tbaa !382
  %7999 = insertelement <64 x i16> %7994, i16 %7998, i32 39
  %8000 = extractelement <64 x i32> %7799, i32 40
  %8001 = sext i32 %8000 to i64
  %8002 = getelementptr inbounds i16, i16* %7293, i64 %8001
  %8003 = load i16, i16* %8002, align 2, !tbaa !382
  %8004 = insertelement <64 x i16> %7999, i16 %8003, i32 40
  %8005 = extractelement <64 x i32> %7799, i32 41
  %8006 = sext i32 %8005 to i64
  %8007 = getelementptr inbounds i16, i16* %7293, i64 %8006
  %8008 = load i16, i16* %8007, align 2, !tbaa !382
  %8009 = insertelement <64 x i16> %8004, i16 %8008, i32 41
  %8010 = extractelement <64 x i32> %7799, i32 42
  %8011 = sext i32 %8010 to i64
  %8012 = getelementptr inbounds i16, i16* %7293, i64 %8011
  %8013 = load i16, i16* %8012, align 2, !tbaa !382
  %8014 = insertelement <64 x i16> %8009, i16 %8013, i32 42
  %8015 = extractelement <64 x i32> %7799, i32 43
  %8016 = sext i32 %8015 to i64
  %8017 = getelementptr inbounds i16, i16* %7293, i64 %8016
  %8018 = load i16, i16* %8017, align 2, !tbaa !382
  %8019 = insertelement <64 x i16> %8014, i16 %8018, i32 43
  %8020 = extractelement <64 x i32> %7799, i32 44
  %8021 = sext i32 %8020 to i64
  %8022 = getelementptr inbounds i16, i16* %7293, i64 %8021
  %8023 = load i16, i16* %8022, align 2, !tbaa !382
  %8024 = insertelement <64 x i16> %8019, i16 %8023, i32 44
  %8025 = extractelement <64 x i32> %7799, i32 45
  %8026 = sext i32 %8025 to i64
  %8027 = getelementptr inbounds i16, i16* %7293, i64 %8026
  %8028 = load i16, i16* %8027, align 2, !tbaa !382
  %8029 = insertelement <64 x i16> %8024, i16 %8028, i32 45
  %8030 = extractelement <64 x i32> %7799, i32 46
  %8031 = sext i32 %8030 to i64
  %8032 = getelementptr inbounds i16, i16* %7293, i64 %8031
  %8033 = load i16, i16* %8032, align 2, !tbaa !382
  %8034 = insertelement <64 x i16> %8029, i16 %8033, i32 46
  %8035 = extractelement <64 x i32> %7799, i32 47
  %8036 = sext i32 %8035 to i64
  %8037 = getelementptr inbounds i16, i16* %7293, i64 %8036
  %8038 = load i16, i16* %8037, align 2, !tbaa !382
  %8039 = insertelement <64 x i16> %8034, i16 %8038, i32 47
  %8040 = extractelement <64 x i32> %7799, i32 48
  %8041 = sext i32 %8040 to i64
  %8042 = getelementptr inbounds i16, i16* %7293, i64 %8041
  %8043 = load i16, i16* %8042, align 2, !tbaa !382
  %8044 = insertelement <64 x i16> %8039, i16 %8043, i32 48
  %8045 = extractelement <64 x i32> %7799, i32 49
  %8046 = sext i32 %8045 to i64
  %8047 = getelementptr inbounds i16, i16* %7293, i64 %8046
  %8048 = load i16, i16* %8047, align 2, !tbaa !382
  %8049 = insertelement <64 x i16> %8044, i16 %8048, i32 49
  %8050 = extractelement <64 x i32> %7799, i32 50
  %8051 = sext i32 %8050 to i64
  %8052 = getelementptr inbounds i16, i16* %7293, i64 %8051
  %8053 = load i16, i16* %8052, align 2, !tbaa !382
  %8054 = insertelement <64 x i16> %8049, i16 %8053, i32 50
  %8055 = extractelement <64 x i32> %7799, i32 51
  %8056 = sext i32 %8055 to i64
  %8057 = getelementptr inbounds i16, i16* %7293, i64 %8056
  %8058 = load i16, i16* %8057, align 2, !tbaa !382
  %8059 = insertelement <64 x i16> %8054, i16 %8058, i32 51
  %8060 = extractelement <64 x i32> %7799, i32 52
  %8061 = sext i32 %8060 to i64
  %8062 = getelementptr inbounds i16, i16* %7293, i64 %8061
  %8063 = load i16, i16* %8062, align 2, !tbaa !382
  %8064 = insertelement <64 x i16> %8059, i16 %8063, i32 52
  %8065 = extractelement <64 x i32> %7799, i32 53
  %8066 = sext i32 %8065 to i64
  %8067 = getelementptr inbounds i16, i16* %7293, i64 %8066
  %8068 = load i16, i16* %8067, align 2, !tbaa !382
  %8069 = insertelement <64 x i16> %8064, i16 %8068, i32 53
  %8070 = extractelement <64 x i32> %7799, i32 54
  %8071 = sext i32 %8070 to i64
  %8072 = getelementptr inbounds i16, i16* %7293, i64 %8071
  %8073 = load i16, i16* %8072, align 2, !tbaa !382
  %8074 = insertelement <64 x i16> %8069, i16 %8073, i32 54
  %8075 = extractelement <64 x i32> %7799, i32 55
  %8076 = sext i32 %8075 to i64
  %8077 = getelementptr inbounds i16, i16* %7293, i64 %8076
  %8078 = load i16, i16* %8077, align 2, !tbaa !382
  %8079 = insertelement <64 x i16> %8074, i16 %8078, i32 55
  %8080 = extractelement <64 x i32> %7799, i32 56
  %8081 = sext i32 %8080 to i64
  %8082 = getelementptr inbounds i16, i16* %7293, i64 %8081
  %8083 = load i16, i16* %8082, align 2, !tbaa !382
  %8084 = insertelement <64 x i16> %8079, i16 %8083, i32 56
  %8085 = extractelement <64 x i32> %7799, i32 57
  %8086 = sext i32 %8085 to i64
  %8087 = getelementptr inbounds i16, i16* %7293, i64 %8086
  %8088 = load i16, i16* %8087, align 2, !tbaa !382
  %8089 = insertelement <64 x i16> %8084, i16 %8088, i32 57
  %8090 = extractelement <64 x i32> %7799, i32 58
  %8091 = sext i32 %8090 to i64
  %8092 = getelementptr inbounds i16, i16* %7293, i64 %8091
  %8093 = load i16, i16* %8092, align 2, !tbaa !382
  %8094 = insertelement <64 x i16> %8089, i16 %8093, i32 58
  %8095 = extractelement <64 x i32> %7799, i32 59
  %8096 = sext i32 %8095 to i64
  %8097 = getelementptr inbounds i16, i16* %7293, i64 %8096
  %8098 = load i16, i16* %8097, align 2, !tbaa !382
  %8099 = insertelement <64 x i16> %8094, i16 %8098, i32 59
  %8100 = extractelement <64 x i32> %7799, i32 60
  %8101 = sext i32 %8100 to i64
  %8102 = getelementptr inbounds i16, i16* %7293, i64 %8101
  %8103 = load i16, i16* %8102, align 2, !tbaa !382
  %8104 = insertelement <64 x i16> %8099, i16 %8103, i32 60
  %8105 = extractelement <64 x i32> %7799, i32 61
  %8106 = sext i32 %8105 to i64
  %8107 = getelementptr inbounds i16, i16* %7293, i64 %8106
  %8108 = load i16, i16* %8107, align 2, !tbaa !382
  %8109 = insertelement <64 x i16> %8104, i16 %8108, i32 61
  %8110 = extractelement <64 x i32> %7799, i32 62
  %8111 = sext i32 %8110 to i64
  %8112 = getelementptr inbounds i16, i16* %7293, i64 %8111
  %8113 = load i16, i16* %8112, align 2, !tbaa !382
  %8114 = insertelement <64 x i16> %8109, i16 %8113, i32 62
  %8115 = extractelement <64 x i32> %7799, i32 63
  %8116 = sext i32 %8115 to i64
  %8117 = getelementptr inbounds i16, i16* %7293, i64 %8116
  %8118 = load i16, i16* %8117, align 2, !tbaa !382
  %8119 = insertelement <64 x i16> %8114, i16 %8118, i32 63
  %8120 = add nsw i32 %blur_x.s0.x.v1.base.s70, -62
  %8121 = insertelement <64 x i32> undef, i32 %8120, i32 0
  %8122 = shufflevector <64 x i32> %8121, <64 x i32> undef, <64 x i32> zeroinitializer
  %8123 = add nsw <64 x i32> %8122, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8124 = shufflevector <64 x i32> %8123, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8125 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8124, <4 x i32> %7290)
  %8126 = shufflevector <64 x i32> %8123, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8127 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8126, <4 x i32> %7290)
  %8128 = shufflevector <64 x i32> %8123, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8129 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8128, <4 x i32> %7290)
  %8130 = shufflevector <64 x i32> %8123, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %8131 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8130, <4 x i32> %7290)
  %8132 = shufflevector <64 x i32> %8123, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %8133 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8132, <4 x i32> %7290)
  %8134 = shufflevector <64 x i32> %8123, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %8135 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8134, <4 x i32> %7290)
  %8136 = shufflevector <64 x i32> %8123, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %8137 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8136, <4 x i32> %7290)
  %8138 = shufflevector <64 x i32> %8123, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %8139 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8138, <4 x i32> %7290)
  %8140 = shufflevector <64 x i32> %8123, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %8141 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8140, <4 x i32> %7290)
  %8142 = shufflevector <64 x i32> %8123, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %8143 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8142, <4 x i32> %7290)
  %8144 = shufflevector <64 x i32> %8123, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %8145 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8144, <4 x i32> %7290)
  %8146 = shufflevector <64 x i32> %8123, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %8147 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8146, <4 x i32> %7290)
  %8148 = shufflevector <64 x i32> %8123, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %8149 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8148, <4 x i32> %7290)
  %8150 = shufflevector <64 x i32> %8123, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %8151 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8150, <4 x i32> %7290)
  %8152 = shufflevector <64 x i32> %8123, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %8153 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8152, <4 x i32> %7290)
  %8154 = shufflevector <64 x i32> %8123, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %8155 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8154, <4 x i32> %7290)
  %8156 = shufflevector <4 x i32> %8155, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %8157 = shufflevector <8 x i32> %8156, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %8158 = shufflevector <16 x i32> %8157, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %8159 = shufflevector <32 x i32> %8158, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %8160 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8125, <4 x i32> %7292)
  %8161 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8127, <4 x i32> %7292)
  %8162 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8129, <4 x i32> %7292)
  %8163 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8131, <4 x i32> %7292)
  %8164 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8133, <4 x i32> %7292)
  %8165 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8135, <4 x i32> %7292)
  %8166 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8137, <4 x i32> %7292)
  %8167 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8139, <4 x i32> %7292)
  %8168 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8141, <4 x i32> %7292)
  %8169 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8143, <4 x i32> %7292)
  %8170 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8145, <4 x i32> %7292)
  %8171 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8147, <4 x i32> %7292)
  %8172 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8149, <4 x i32> %7292)
  %8173 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8151, <4 x i32> %7292)
  %8174 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8153, <4 x i32> %7292)
  %8175 = shufflevector <64 x i32> %8159, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %8176 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8175, <4 x i32> %7292)
  %8177 = shufflevector <4 x i32> %8160, <4 x i32> %8161, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8178 = shufflevector <4 x i32> %8162, <4 x i32> %8163, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8179 = shufflevector <4 x i32> %8164, <4 x i32> %8165, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8180 = shufflevector <4 x i32> %8166, <4 x i32> %8167, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8181 = shufflevector <4 x i32> %8168, <4 x i32> %8169, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8182 = shufflevector <4 x i32> %8170, <4 x i32> %8171, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8183 = shufflevector <4 x i32> %8172, <4 x i32> %8173, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8184 = shufflevector <4 x i32> %8174, <4 x i32> %8176, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8185 = shufflevector <8 x i32> %8177, <8 x i32> %8178, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8186 = shufflevector <8 x i32> %8179, <8 x i32> %8180, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8187 = shufflevector <8 x i32> %8181, <8 x i32> %8182, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8188 = shufflevector <8 x i32> %8183, <8 x i32> %8184, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8189 = shufflevector <16 x i32> %8185, <16 x i32> %8186, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8190 = shufflevector <16 x i32> %8187, <16 x i32> %8188, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8191 = shufflevector <32 x i32> %8189, <32 x i32> %8190, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8192 = add nsw <64 x i32> %8191, %t19871
  %8193 = extractelement <64 x i32> %8192, i32 0
  %8194 = sext i32 %8193 to i64
  %8195 = getelementptr inbounds i16, i16* %7293, i64 %8194
  %8196 = load i16, i16* %8195, align 2, !tbaa !382
  %8197 = insertelement <64 x i16> undef, i16 %8196, i32 0
  %8198 = extractelement <64 x i32> %8192, i32 1
  %8199 = sext i32 %8198 to i64
  %8200 = getelementptr inbounds i16, i16* %7293, i64 %8199
  %8201 = load i16, i16* %8200, align 2, !tbaa !382
  %8202 = insertelement <64 x i16> %8197, i16 %8201, i32 1
  %8203 = extractelement <64 x i32> %8192, i32 2
  %8204 = sext i32 %8203 to i64
  %8205 = getelementptr inbounds i16, i16* %7293, i64 %8204
  %8206 = load i16, i16* %8205, align 2, !tbaa !382
  %8207 = insertelement <64 x i16> %8202, i16 %8206, i32 2
  %8208 = extractelement <64 x i32> %8192, i32 3
  %8209 = sext i32 %8208 to i64
  %8210 = getelementptr inbounds i16, i16* %7293, i64 %8209
  %8211 = load i16, i16* %8210, align 2, !tbaa !382
  %8212 = insertelement <64 x i16> %8207, i16 %8211, i32 3
  %8213 = extractelement <64 x i32> %8192, i32 4
  %8214 = sext i32 %8213 to i64
  %8215 = getelementptr inbounds i16, i16* %7293, i64 %8214
  %8216 = load i16, i16* %8215, align 2, !tbaa !382
  %8217 = insertelement <64 x i16> %8212, i16 %8216, i32 4
  %8218 = extractelement <64 x i32> %8192, i32 5
  %8219 = sext i32 %8218 to i64
  %8220 = getelementptr inbounds i16, i16* %7293, i64 %8219
  %8221 = load i16, i16* %8220, align 2, !tbaa !382
  %8222 = insertelement <64 x i16> %8217, i16 %8221, i32 5
  %8223 = extractelement <64 x i32> %8192, i32 6
  %8224 = sext i32 %8223 to i64
  %8225 = getelementptr inbounds i16, i16* %7293, i64 %8224
  %8226 = load i16, i16* %8225, align 2, !tbaa !382
  %8227 = insertelement <64 x i16> %8222, i16 %8226, i32 6
  %8228 = extractelement <64 x i32> %8192, i32 7
  %8229 = sext i32 %8228 to i64
  %8230 = getelementptr inbounds i16, i16* %7293, i64 %8229
  %8231 = load i16, i16* %8230, align 2, !tbaa !382
  %8232 = insertelement <64 x i16> %8227, i16 %8231, i32 7
  %8233 = extractelement <64 x i32> %8192, i32 8
  %8234 = sext i32 %8233 to i64
  %8235 = getelementptr inbounds i16, i16* %7293, i64 %8234
  %8236 = load i16, i16* %8235, align 2, !tbaa !382
  %8237 = insertelement <64 x i16> %8232, i16 %8236, i32 8
  %8238 = extractelement <64 x i32> %8192, i32 9
  %8239 = sext i32 %8238 to i64
  %8240 = getelementptr inbounds i16, i16* %7293, i64 %8239
  %8241 = load i16, i16* %8240, align 2, !tbaa !382
  %8242 = insertelement <64 x i16> %8237, i16 %8241, i32 9
  %8243 = extractelement <64 x i32> %8192, i32 10
  %8244 = sext i32 %8243 to i64
  %8245 = getelementptr inbounds i16, i16* %7293, i64 %8244
  %8246 = load i16, i16* %8245, align 2, !tbaa !382
  %8247 = insertelement <64 x i16> %8242, i16 %8246, i32 10
  %8248 = extractelement <64 x i32> %8192, i32 11
  %8249 = sext i32 %8248 to i64
  %8250 = getelementptr inbounds i16, i16* %7293, i64 %8249
  %8251 = load i16, i16* %8250, align 2, !tbaa !382
  %8252 = insertelement <64 x i16> %8247, i16 %8251, i32 11
  %8253 = extractelement <64 x i32> %8192, i32 12
  %8254 = sext i32 %8253 to i64
  %8255 = getelementptr inbounds i16, i16* %7293, i64 %8254
  %8256 = load i16, i16* %8255, align 2, !tbaa !382
  %8257 = insertelement <64 x i16> %8252, i16 %8256, i32 12
  %8258 = extractelement <64 x i32> %8192, i32 13
  %8259 = sext i32 %8258 to i64
  %8260 = getelementptr inbounds i16, i16* %7293, i64 %8259
  %8261 = load i16, i16* %8260, align 2, !tbaa !382
  %8262 = insertelement <64 x i16> %8257, i16 %8261, i32 13
  %8263 = extractelement <64 x i32> %8192, i32 14
  %8264 = sext i32 %8263 to i64
  %8265 = getelementptr inbounds i16, i16* %7293, i64 %8264
  %8266 = load i16, i16* %8265, align 2, !tbaa !382
  %8267 = insertelement <64 x i16> %8262, i16 %8266, i32 14
  %8268 = extractelement <64 x i32> %8192, i32 15
  %8269 = sext i32 %8268 to i64
  %8270 = getelementptr inbounds i16, i16* %7293, i64 %8269
  %8271 = load i16, i16* %8270, align 2, !tbaa !382
  %8272 = insertelement <64 x i16> %8267, i16 %8271, i32 15
  %8273 = extractelement <64 x i32> %8192, i32 16
  %8274 = sext i32 %8273 to i64
  %8275 = getelementptr inbounds i16, i16* %7293, i64 %8274
  %8276 = load i16, i16* %8275, align 2, !tbaa !382
  %8277 = insertelement <64 x i16> %8272, i16 %8276, i32 16
  %8278 = extractelement <64 x i32> %8192, i32 17
  %8279 = sext i32 %8278 to i64
  %8280 = getelementptr inbounds i16, i16* %7293, i64 %8279
  %8281 = load i16, i16* %8280, align 2, !tbaa !382
  %8282 = insertelement <64 x i16> %8277, i16 %8281, i32 17
  %8283 = extractelement <64 x i32> %8192, i32 18
  %8284 = sext i32 %8283 to i64
  %8285 = getelementptr inbounds i16, i16* %7293, i64 %8284
  %8286 = load i16, i16* %8285, align 2, !tbaa !382
  %8287 = insertelement <64 x i16> %8282, i16 %8286, i32 18
  %8288 = extractelement <64 x i32> %8192, i32 19
  %8289 = sext i32 %8288 to i64
  %8290 = getelementptr inbounds i16, i16* %7293, i64 %8289
  %8291 = load i16, i16* %8290, align 2, !tbaa !382
  %8292 = insertelement <64 x i16> %8287, i16 %8291, i32 19
  %8293 = extractelement <64 x i32> %8192, i32 20
  %8294 = sext i32 %8293 to i64
  %8295 = getelementptr inbounds i16, i16* %7293, i64 %8294
  %8296 = load i16, i16* %8295, align 2, !tbaa !382
  %8297 = insertelement <64 x i16> %8292, i16 %8296, i32 20
  %8298 = extractelement <64 x i32> %8192, i32 21
  %8299 = sext i32 %8298 to i64
  %8300 = getelementptr inbounds i16, i16* %7293, i64 %8299
  %8301 = load i16, i16* %8300, align 2, !tbaa !382
  %8302 = insertelement <64 x i16> %8297, i16 %8301, i32 21
  %8303 = extractelement <64 x i32> %8192, i32 22
  %8304 = sext i32 %8303 to i64
  %8305 = getelementptr inbounds i16, i16* %7293, i64 %8304
  %8306 = load i16, i16* %8305, align 2, !tbaa !382
  %8307 = insertelement <64 x i16> %8302, i16 %8306, i32 22
  %8308 = extractelement <64 x i32> %8192, i32 23
  %8309 = sext i32 %8308 to i64
  %8310 = getelementptr inbounds i16, i16* %7293, i64 %8309
  %8311 = load i16, i16* %8310, align 2, !tbaa !382
  %8312 = insertelement <64 x i16> %8307, i16 %8311, i32 23
  %8313 = extractelement <64 x i32> %8192, i32 24
  %8314 = sext i32 %8313 to i64
  %8315 = getelementptr inbounds i16, i16* %7293, i64 %8314
  %8316 = load i16, i16* %8315, align 2, !tbaa !382
  %8317 = insertelement <64 x i16> %8312, i16 %8316, i32 24
  %8318 = extractelement <64 x i32> %8192, i32 25
  %8319 = sext i32 %8318 to i64
  %8320 = getelementptr inbounds i16, i16* %7293, i64 %8319
  %8321 = load i16, i16* %8320, align 2, !tbaa !382
  %8322 = insertelement <64 x i16> %8317, i16 %8321, i32 25
  %8323 = extractelement <64 x i32> %8192, i32 26
  %8324 = sext i32 %8323 to i64
  %8325 = getelementptr inbounds i16, i16* %7293, i64 %8324
  %8326 = load i16, i16* %8325, align 2, !tbaa !382
  %8327 = insertelement <64 x i16> %8322, i16 %8326, i32 26
  %8328 = extractelement <64 x i32> %8192, i32 27
  %8329 = sext i32 %8328 to i64
  %8330 = getelementptr inbounds i16, i16* %7293, i64 %8329
  %8331 = load i16, i16* %8330, align 2, !tbaa !382
  %8332 = insertelement <64 x i16> %8327, i16 %8331, i32 27
  %8333 = extractelement <64 x i32> %8192, i32 28
  %8334 = sext i32 %8333 to i64
  %8335 = getelementptr inbounds i16, i16* %7293, i64 %8334
  %8336 = load i16, i16* %8335, align 2, !tbaa !382
  %8337 = insertelement <64 x i16> %8332, i16 %8336, i32 28
  %8338 = extractelement <64 x i32> %8192, i32 29
  %8339 = sext i32 %8338 to i64
  %8340 = getelementptr inbounds i16, i16* %7293, i64 %8339
  %8341 = load i16, i16* %8340, align 2, !tbaa !382
  %8342 = insertelement <64 x i16> %8337, i16 %8341, i32 29
  %8343 = extractelement <64 x i32> %8192, i32 30
  %8344 = sext i32 %8343 to i64
  %8345 = getelementptr inbounds i16, i16* %7293, i64 %8344
  %8346 = load i16, i16* %8345, align 2, !tbaa !382
  %8347 = insertelement <64 x i16> %8342, i16 %8346, i32 30
  %8348 = extractelement <64 x i32> %8192, i32 31
  %8349 = sext i32 %8348 to i64
  %8350 = getelementptr inbounds i16, i16* %7293, i64 %8349
  %8351 = load i16, i16* %8350, align 2, !tbaa !382
  %8352 = insertelement <64 x i16> %8347, i16 %8351, i32 31
  %8353 = extractelement <64 x i32> %8192, i32 32
  %8354 = sext i32 %8353 to i64
  %8355 = getelementptr inbounds i16, i16* %7293, i64 %8354
  %8356 = load i16, i16* %8355, align 2, !tbaa !382
  %8357 = insertelement <64 x i16> %8352, i16 %8356, i32 32
  %8358 = extractelement <64 x i32> %8192, i32 33
  %8359 = sext i32 %8358 to i64
  %8360 = getelementptr inbounds i16, i16* %7293, i64 %8359
  %8361 = load i16, i16* %8360, align 2, !tbaa !382
  %8362 = insertelement <64 x i16> %8357, i16 %8361, i32 33
  %8363 = extractelement <64 x i32> %8192, i32 34
  %8364 = sext i32 %8363 to i64
  %8365 = getelementptr inbounds i16, i16* %7293, i64 %8364
  %8366 = load i16, i16* %8365, align 2, !tbaa !382
  %8367 = insertelement <64 x i16> %8362, i16 %8366, i32 34
  %8368 = extractelement <64 x i32> %8192, i32 35
  %8369 = sext i32 %8368 to i64
  %8370 = getelementptr inbounds i16, i16* %7293, i64 %8369
  %8371 = load i16, i16* %8370, align 2, !tbaa !382
  %8372 = insertelement <64 x i16> %8367, i16 %8371, i32 35
  %8373 = extractelement <64 x i32> %8192, i32 36
  %8374 = sext i32 %8373 to i64
  %8375 = getelementptr inbounds i16, i16* %7293, i64 %8374
  %8376 = load i16, i16* %8375, align 2, !tbaa !382
  %8377 = insertelement <64 x i16> %8372, i16 %8376, i32 36
  %8378 = extractelement <64 x i32> %8192, i32 37
  %8379 = sext i32 %8378 to i64
  %8380 = getelementptr inbounds i16, i16* %7293, i64 %8379
  %8381 = load i16, i16* %8380, align 2, !tbaa !382
  %8382 = insertelement <64 x i16> %8377, i16 %8381, i32 37
  %8383 = extractelement <64 x i32> %8192, i32 38
  %8384 = sext i32 %8383 to i64
  %8385 = getelementptr inbounds i16, i16* %7293, i64 %8384
  %8386 = load i16, i16* %8385, align 2, !tbaa !382
  %8387 = insertelement <64 x i16> %8382, i16 %8386, i32 38
  %8388 = extractelement <64 x i32> %8192, i32 39
  %8389 = sext i32 %8388 to i64
  %8390 = getelementptr inbounds i16, i16* %7293, i64 %8389
  %8391 = load i16, i16* %8390, align 2, !tbaa !382
  %8392 = insertelement <64 x i16> %8387, i16 %8391, i32 39
  %8393 = extractelement <64 x i32> %8192, i32 40
  %8394 = sext i32 %8393 to i64
  %8395 = getelementptr inbounds i16, i16* %7293, i64 %8394
  %8396 = load i16, i16* %8395, align 2, !tbaa !382
  %8397 = insertelement <64 x i16> %8392, i16 %8396, i32 40
  %8398 = extractelement <64 x i32> %8192, i32 41
  %8399 = sext i32 %8398 to i64
  %8400 = getelementptr inbounds i16, i16* %7293, i64 %8399
  %8401 = load i16, i16* %8400, align 2, !tbaa !382
  %8402 = insertelement <64 x i16> %8397, i16 %8401, i32 41
  %8403 = extractelement <64 x i32> %8192, i32 42
  %8404 = sext i32 %8403 to i64
  %8405 = getelementptr inbounds i16, i16* %7293, i64 %8404
  %8406 = load i16, i16* %8405, align 2, !tbaa !382
  %8407 = insertelement <64 x i16> %8402, i16 %8406, i32 42
  %8408 = extractelement <64 x i32> %8192, i32 43
  %8409 = sext i32 %8408 to i64
  %8410 = getelementptr inbounds i16, i16* %7293, i64 %8409
  %8411 = load i16, i16* %8410, align 2, !tbaa !382
  %8412 = insertelement <64 x i16> %8407, i16 %8411, i32 43
  %8413 = extractelement <64 x i32> %8192, i32 44
  %8414 = sext i32 %8413 to i64
  %8415 = getelementptr inbounds i16, i16* %7293, i64 %8414
  %8416 = load i16, i16* %8415, align 2, !tbaa !382
  %8417 = insertelement <64 x i16> %8412, i16 %8416, i32 44
  %8418 = extractelement <64 x i32> %8192, i32 45
  %8419 = sext i32 %8418 to i64
  %8420 = getelementptr inbounds i16, i16* %7293, i64 %8419
  %8421 = load i16, i16* %8420, align 2, !tbaa !382
  %8422 = insertelement <64 x i16> %8417, i16 %8421, i32 45
  %8423 = extractelement <64 x i32> %8192, i32 46
  %8424 = sext i32 %8423 to i64
  %8425 = getelementptr inbounds i16, i16* %7293, i64 %8424
  %8426 = load i16, i16* %8425, align 2, !tbaa !382
  %8427 = insertelement <64 x i16> %8422, i16 %8426, i32 46
  %8428 = extractelement <64 x i32> %8192, i32 47
  %8429 = sext i32 %8428 to i64
  %8430 = getelementptr inbounds i16, i16* %7293, i64 %8429
  %8431 = load i16, i16* %8430, align 2, !tbaa !382
  %8432 = insertelement <64 x i16> %8427, i16 %8431, i32 47
  %8433 = extractelement <64 x i32> %8192, i32 48
  %8434 = sext i32 %8433 to i64
  %8435 = getelementptr inbounds i16, i16* %7293, i64 %8434
  %8436 = load i16, i16* %8435, align 2, !tbaa !382
  %8437 = insertelement <64 x i16> %8432, i16 %8436, i32 48
  %8438 = extractelement <64 x i32> %8192, i32 49
  %8439 = sext i32 %8438 to i64
  %8440 = getelementptr inbounds i16, i16* %7293, i64 %8439
  %8441 = load i16, i16* %8440, align 2, !tbaa !382
  %8442 = insertelement <64 x i16> %8437, i16 %8441, i32 49
  %8443 = extractelement <64 x i32> %8192, i32 50
  %8444 = sext i32 %8443 to i64
  %8445 = getelementptr inbounds i16, i16* %7293, i64 %8444
  %8446 = load i16, i16* %8445, align 2, !tbaa !382
  %8447 = insertelement <64 x i16> %8442, i16 %8446, i32 50
  %8448 = extractelement <64 x i32> %8192, i32 51
  %8449 = sext i32 %8448 to i64
  %8450 = getelementptr inbounds i16, i16* %7293, i64 %8449
  %8451 = load i16, i16* %8450, align 2, !tbaa !382
  %8452 = insertelement <64 x i16> %8447, i16 %8451, i32 51
  %8453 = extractelement <64 x i32> %8192, i32 52
  %8454 = sext i32 %8453 to i64
  %8455 = getelementptr inbounds i16, i16* %7293, i64 %8454
  %8456 = load i16, i16* %8455, align 2, !tbaa !382
  %8457 = insertelement <64 x i16> %8452, i16 %8456, i32 52
  %8458 = extractelement <64 x i32> %8192, i32 53
  %8459 = sext i32 %8458 to i64
  %8460 = getelementptr inbounds i16, i16* %7293, i64 %8459
  %8461 = load i16, i16* %8460, align 2, !tbaa !382
  %8462 = insertelement <64 x i16> %8457, i16 %8461, i32 53
  %8463 = extractelement <64 x i32> %8192, i32 54
  %8464 = sext i32 %8463 to i64
  %8465 = getelementptr inbounds i16, i16* %7293, i64 %8464
  %8466 = load i16, i16* %8465, align 2, !tbaa !382
  %8467 = insertelement <64 x i16> %8462, i16 %8466, i32 54
  %8468 = extractelement <64 x i32> %8192, i32 55
  %8469 = sext i32 %8468 to i64
  %8470 = getelementptr inbounds i16, i16* %7293, i64 %8469
  %8471 = load i16, i16* %8470, align 2, !tbaa !382
  %8472 = insertelement <64 x i16> %8467, i16 %8471, i32 55
  %8473 = extractelement <64 x i32> %8192, i32 56
  %8474 = sext i32 %8473 to i64
  %8475 = getelementptr inbounds i16, i16* %7293, i64 %8474
  %8476 = load i16, i16* %8475, align 2, !tbaa !382
  %8477 = insertelement <64 x i16> %8472, i16 %8476, i32 56
  %8478 = extractelement <64 x i32> %8192, i32 57
  %8479 = sext i32 %8478 to i64
  %8480 = getelementptr inbounds i16, i16* %7293, i64 %8479
  %8481 = load i16, i16* %8480, align 2, !tbaa !382
  %8482 = insertelement <64 x i16> %8477, i16 %8481, i32 57
  %8483 = extractelement <64 x i32> %8192, i32 58
  %8484 = sext i32 %8483 to i64
  %8485 = getelementptr inbounds i16, i16* %7293, i64 %8484
  %8486 = load i16, i16* %8485, align 2, !tbaa !382
  %8487 = insertelement <64 x i16> %8482, i16 %8486, i32 58
  %8488 = extractelement <64 x i32> %8192, i32 59
  %8489 = sext i32 %8488 to i64
  %8490 = getelementptr inbounds i16, i16* %7293, i64 %8489
  %8491 = load i16, i16* %8490, align 2, !tbaa !382
  %8492 = insertelement <64 x i16> %8487, i16 %8491, i32 59
  %8493 = extractelement <64 x i32> %8192, i32 60
  %8494 = sext i32 %8493 to i64
  %8495 = getelementptr inbounds i16, i16* %7293, i64 %8494
  %8496 = load i16, i16* %8495, align 2, !tbaa !382
  %8497 = insertelement <64 x i16> %8492, i16 %8496, i32 60
  %8498 = extractelement <64 x i32> %8192, i32 61
  %8499 = sext i32 %8498 to i64
  %8500 = getelementptr inbounds i16, i16* %7293, i64 %8499
  %8501 = load i16, i16* %8500, align 2, !tbaa !382
  %8502 = insertelement <64 x i16> %8497, i16 %8501, i32 61
  %8503 = extractelement <64 x i32> %8192, i32 62
  %8504 = sext i32 %8503 to i64
  %8505 = getelementptr inbounds i16, i16* %7293, i64 %8504
  %8506 = load i16, i16* %8505, align 2, !tbaa !382
  %8507 = insertelement <64 x i16> %8502, i16 %8506, i32 62
  %8508 = extractelement <64 x i32> %8192, i32 63
  %8509 = sext i32 %8508 to i64
  %8510 = getelementptr inbounds i16, i16* %7293, i64 %8509
  %8511 = load i16, i16* %8510, align 2, !tbaa !382
  %8512 = insertelement <64 x i16> %8507, i16 %8511, i32 63
  %8513 = add nsw i32 %blur_x.s0.x.v1.base.s70, -60
  %8514 = insertelement <64 x i32> undef, i32 %8513, i32 0
  %8515 = shufflevector <64 x i32> %8514, <64 x i32> undef, <64 x i32> zeroinitializer
  %8516 = add nsw <64 x i32> %8515, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8517 = shufflevector <64 x i32> %8516, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8518 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8517, <4 x i32> %7290)
  %8519 = shufflevector <64 x i32> %8516, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8520 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8519, <4 x i32> %7290)
  %8521 = shufflevector <64 x i32> %8516, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8522 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8521, <4 x i32> %7290)
  %8523 = shufflevector <64 x i32> %8516, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %8524 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8523, <4 x i32> %7290)
  %8525 = shufflevector <64 x i32> %8516, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %8526 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8525, <4 x i32> %7290)
  %8527 = shufflevector <64 x i32> %8516, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %8528 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8527, <4 x i32> %7290)
  %8529 = shufflevector <64 x i32> %8516, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %8530 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8529, <4 x i32> %7290)
  %8531 = shufflevector <64 x i32> %8516, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %8532 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8531, <4 x i32> %7290)
  %8533 = shufflevector <64 x i32> %8516, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %8534 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8533, <4 x i32> %7290)
  %8535 = shufflevector <64 x i32> %8516, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %8536 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8535, <4 x i32> %7290)
  %8537 = shufflevector <64 x i32> %8516, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %8538 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8537, <4 x i32> %7290)
  %8539 = shufflevector <64 x i32> %8516, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %8540 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8539, <4 x i32> %7290)
  %8541 = shufflevector <64 x i32> %8516, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %8542 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8541, <4 x i32> %7290)
  %8543 = shufflevector <64 x i32> %8516, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %8544 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8543, <4 x i32> %7290)
  %8545 = shufflevector <64 x i32> %8516, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %8546 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8545, <4 x i32> %7290)
  %8547 = shufflevector <64 x i32> %8516, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %8548 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8547, <4 x i32> %7290)
  %8549 = shufflevector <4 x i32> %8548, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %8550 = shufflevector <8 x i32> %8549, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %8551 = shufflevector <16 x i32> %8550, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %8552 = shufflevector <32 x i32> %8551, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %8553 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8518, <4 x i32> %7292)
  %8554 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8520, <4 x i32> %7292)
  %8555 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8522, <4 x i32> %7292)
  %8556 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8524, <4 x i32> %7292)
  %8557 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8526, <4 x i32> %7292)
  %8558 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8528, <4 x i32> %7292)
  %8559 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8530, <4 x i32> %7292)
  %8560 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8532, <4 x i32> %7292)
  %8561 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8534, <4 x i32> %7292)
  %8562 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8536, <4 x i32> %7292)
  %8563 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8538, <4 x i32> %7292)
  %8564 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8540, <4 x i32> %7292)
  %8565 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8542, <4 x i32> %7292)
  %8566 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8544, <4 x i32> %7292)
  %8567 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8546, <4 x i32> %7292)
  %8568 = shufflevector <64 x i32> %8552, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %8569 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8568, <4 x i32> %7292)
  %8570 = shufflevector <4 x i32> %8553, <4 x i32> %8554, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8571 = shufflevector <4 x i32> %8555, <4 x i32> %8556, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8572 = shufflevector <4 x i32> %8557, <4 x i32> %8558, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8573 = shufflevector <4 x i32> %8559, <4 x i32> %8560, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8574 = shufflevector <4 x i32> %8561, <4 x i32> %8562, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8575 = shufflevector <4 x i32> %8563, <4 x i32> %8564, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8576 = shufflevector <4 x i32> %8565, <4 x i32> %8566, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8577 = shufflevector <4 x i32> %8567, <4 x i32> %8569, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8578 = shufflevector <8 x i32> %8570, <8 x i32> %8571, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8579 = shufflevector <8 x i32> %8572, <8 x i32> %8573, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8580 = shufflevector <8 x i32> %8574, <8 x i32> %8575, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8581 = shufflevector <8 x i32> %8576, <8 x i32> %8577, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8582 = shufflevector <16 x i32> %8578, <16 x i32> %8579, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8583 = shufflevector <16 x i32> %8580, <16 x i32> %8581, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8584 = shufflevector <32 x i32> %8582, <32 x i32> %8583, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8585 = add nsw <64 x i32> %8584, %t19871
  %8586 = extractelement <64 x i32> %8585, i32 0
  %8587 = sext i32 %8586 to i64
  %8588 = getelementptr inbounds i16, i16* %7293, i64 %8587
  %8589 = load i16, i16* %8588, align 2, !tbaa !382
  %8590 = insertelement <64 x i16> undef, i16 %8589, i32 0
  %8591 = extractelement <64 x i32> %8585, i32 1
  %8592 = sext i32 %8591 to i64
  %8593 = getelementptr inbounds i16, i16* %7293, i64 %8592
  %8594 = load i16, i16* %8593, align 2, !tbaa !382
  %8595 = insertelement <64 x i16> %8590, i16 %8594, i32 1
  %8596 = extractelement <64 x i32> %8585, i32 2
  %8597 = sext i32 %8596 to i64
  %8598 = getelementptr inbounds i16, i16* %7293, i64 %8597
  %8599 = load i16, i16* %8598, align 2, !tbaa !382
  %8600 = insertelement <64 x i16> %8595, i16 %8599, i32 2
  %8601 = extractelement <64 x i32> %8585, i32 3
  %8602 = sext i32 %8601 to i64
  %8603 = getelementptr inbounds i16, i16* %7293, i64 %8602
  %8604 = load i16, i16* %8603, align 2, !tbaa !382
  %8605 = insertelement <64 x i16> %8600, i16 %8604, i32 3
  %8606 = extractelement <64 x i32> %8585, i32 4
  %8607 = sext i32 %8606 to i64
  %8608 = getelementptr inbounds i16, i16* %7293, i64 %8607
  %8609 = load i16, i16* %8608, align 2, !tbaa !382
  %8610 = insertelement <64 x i16> %8605, i16 %8609, i32 4
  %8611 = extractelement <64 x i32> %8585, i32 5
  %8612 = sext i32 %8611 to i64
  %8613 = getelementptr inbounds i16, i16* %7293, i64 %8612
  %8614 = load i16, i16* %8613, align 2, !tbaa !382
  %8615 = insertelement <64 x i16> %8610, i16 %8614, i32 5
  %8616 = extractelement <64 x i32> %8585, i32 6
  %8617 = sext i32 %8616 to i64
  %8618 = getelementptr inbounds i16, i16* %7293, i64 %8617
  %8619 = load i16, i16* %8618, align 2, !tbaa !382
  %8620 = insertelement <64 x i16> %8615, i16 %8619, i32 6
  %8621 = extractelement <64 x i32> %8585, i32 7
  %8622 = sext i32 %8621 to i64
  %8623 = getelementptr inbounds i16, i16* %7293, i64 %8622
  %8624 = load i16, i16* %8623, align 2, !tbaa !382
  %8625 = insertelement <64 x i16> %8620, i16 %8624, i32 7
  %8626 = extractelement <64 x i32> %8585, i32 8
  %8627 = sext i32 %8626 to i64
  %8628 = getelementptr inbounds i16, i16* %7293, i64 %8627
  %8629 = load i16, i16* %8628, align 2, !tbaa !382
  %8630 = insertelement <64 x i16> %8625, i16 %8629, i32 8
  %8631 = extractelement <64 x i32> %8585, i32 9
  %8632 = sext i32 %8631 to i64
  %8633 = getelementptr inbounds i16, i16* %7293, i64 %8632
  %8634 = load i16, i16* %8633, align 2, !tbaa !382
  %8635 = insertelement <64 x i16> %8630, i16 %8634, i32 9
  %8636 = extractelement <64 x i32> %8585, i32 10
  %8637 = sext i32 %8636 to i64
  %8638 = getelementptr inbounds i16, i16* %7293, i64 %8637
  %8639 = load i16, i16* %8638, align 2, !tbaa !382
  %8640 = insertelement <64 x i16> %8635, i16 %8639, i32 10
  %8641 = extractelement <64 x i32> %8585, i32 11
  %8642 = sext i32 %8641 to i64
  %8643 = getelementptr inbounds i16, i16* %7293, i64 %8642
  %8644 = load i16, i16* %8643, align 2, !tbaa !382
  %8645 = insertelement <64 x i16> %8640, i16 %8644, i32 11
  %8646 = extractelement <64 x i32> %8585, i32 12
  %8647 = sext i32 %8646 to i64
  %8648 = getelementptr inbounds i16, i16* %7293, i64 %8647
  %8649 = load i16, i16* %8648, align 2, !tbaa !382
  %8650 = insertelement <64 x i16> %8645, i16 %8649, i32 12
  %8651 = extractelement <64 x i32> %8585, i32 13
  %8652 = sext i32 %8651 to i64
  %8653 = getelementptr inbounds i16, i16* %7293, i64 %8652
  %8654 = load i16, i16* %8653, align 2, !tbaa !382
  %8655 = insertelement <64 x i16> %8650, i16 %8654, i32 13
  %8656 = extractelement <64 x i32> %8585, i32 14
  %8657 = sext i32 %8656 to i64
  %8658 = getelementptr inbounds i16, i16* %7293, i64 %8657
  %8659 = load i16, i16* %8658, align 2, !tbaa !382
  %8660 = insertelement <64 x i16> %8655, i16 %8659, i32 14
  %8661 = extractelement <64 x i32> %8585, i32 15
  %8662 = sext i32 %8661 to i64
  %8663 = getelementptr inbounds i16, i16* %7293, i64 %8662
  %8664 = load i16, i16* %8663, align 2, !tbaa !382
  %8665 = insertelement <64 x i16> %8660, i16 %8664, i32 15
  %8666 = extractelement <64 x i32> %8585, i32 16
  %8667 = sext i32 %8666 to i64
  %8668 = getelementptr inbounds i16, i16* %7293, i64 %8667
  %8669 = load i16, i16* %8668, align 2, !tbaa !382
  %8670 = insertelement <64 x i16> %8665, i16 %8669, i32 16
  %8671 = extractelement <64 x i32> %8585, i32 17
  %8672 = sext i32 %8671 to i64
  %8673 = getelementptr inbounds i16, i16* %7293, i64 %8672
  %8674 = load i16, i16* %8673, align 2, !tbaa !382
  %8675 = insertelement <64 x i16> %8670, i16 %8674, i32 17
  %8676 = extractelement <64 x i32> %8585, i32 18
  %8677 = sext i32 %8676 to i64
  %8678 = getelementptr inbounds i16, i16* %7293, i64 %8677
  %8679 = load i16, i16* %8678, align 2, !tbaa !382
  %8680 = insertelement <64 x i16> %8675, i16 %8679, i32 18
  %8681 = extractelement <64 x i32> %8585, i32 19
  %8682 = sext i32 %8681 to i64
  %8683 = getelementptr inbounds i16, i16* %7293, i64 %8682
  %8684 = load i16, i16* %8683, align 2, !tbaa !382
  %8685 = insertelement <64 x i16> %8680, i16 %8684, i32 19
  %8686 = extractelement <64 x i32> %8585, i32 20
  %8687 = sext i32 %8686 to i64
  %8688 = getelementptr inbounds i16, i16* %7293, i64 %8687
  %8689 = load i16, i16* %8688, align 2, !tbaa !382
  %8690 = insertelement <64 x i16> %8685, i16 %8689, i32 20
  %8691 = extractelement <64 x i32> %8585, i32 21
  %8692 = sext i32 %8691 to i64
  %8693 = getelementptr inbounds i16, i16* %7293, i64 %8692
  %8694 = load i16, i16* %8693, align 2, !tbaa !382
  %8695 = insertelement <64 x i16> %8690, i16 %8694, i32 21
  %8696 = extractelement <64 x i32> %8585, i32 22
  %8697 = sext i32 %8696 to i64
  %8698 = getelementptr inbounds i16, i16* %7293, i64 %8697
  %8699 = load i16, i16* %8698, align 2, !tbaa !382
  %8700 = insertelement <64 x i16> %8695, i16 %8699, i32 22
  %8701 = extractelement <64 x i32> %8585, i32 23
  %8702 = sext i32 %8701 to i64
  %8703 = getelementptr inbounds i16, i16* %7293, i64 %8702
  %8704 = load i16, i16* %8703, align 2, !tbaa !382
  %8705 = insertelement <64 x i16> %8700, i16 %8704, i32 23
  %8706 = extractelement <64 x i32> %8585, i32 24
  %8707 = sext i32 %8706 to i64
  %8708 = getelementptr inbounds i16, i16* %7293, i64 %8707
  %8709 = load i16, i16* %8708, align 2, !tbaa !382
  %8710 = insertelement <64 x i16> %8705, i16 %8709, i32 24
  %8711 = extractelement <64 x i32> %8585, i32 25
  %8712 = sext i32 %8711 to i64
  %8713 = getelementptr inbounds i16, i16* %7293, i64 %8712
  %8714 = load i16, i16* %8713, align 2, !tbaa !382
  %8715 = insertelement <64 x i16> %8710, i16 %8714, i32 25
  %8716 = extractelement <64 x i32> %8585, i32 26
  %8717 = sext i32 %8716 to i64
  %8718 = getelementptr inbounds i16, i16* %7293, i64 %8717
  %8719 = load i16, i16* %8718, align 2, !tbaa !382
  %8720 = insertelement <64 x i16> %8715, i16 %8719, i32 26
  %8721 = extractelement <64 x i32> %8585, i32 27
  %8722 = sext i32 %8721 to i64
  %8723 = getelementptr inbounds i16, i16* %7293, i64 %8722
  %8724 = load i16, i16* %8723, align 2, !tbaa !382
  %8725 = insertelement <64 x i16> %8720, i16 %8724, i32 27
  %8726 = extractelement <64 x i32> %8585, i32 28
  %8727 = sext i32 %8726 to i64
  %8728 = getelementptr inbounds i16, i16* %7293, i64 %8727
  %8729 = load i16, i16* %8728, align 2, !tbaa !382
  %8730 = insertelement <64 x i16> %8725, i16 %8729, i32 28
  %8731 = extractelement <64 x i32> %8585, i32 29
  %8732 = sext i32 %8731 to i64
  %8733 = getelementptr inbounds i16, i16* %7293, i64 %8732
  %8734 = load i16, i16* %8733, align 2, !tbaa !382
  %8735 = insertelement <64 x i16> %8730, i16 %8734, i32 29
  %8736 = extractelement <64 x i32> %8585, i32 30
  %8737 = sext i32 %8736 to i64
  %8738 = getelementptr inbounds i16, i16* %7293, i64 %8737
  %8739 = load i16, i16* %8738, align 2, !tbaa !382
  %8740 = insertelement <64 x i16> %8735, i16 %8739, i32 30
  %8741 = extractelement <64 x i32> %8585, i32 31
  %8742 = sext i32 %8741 to i64
  %8743 = getelementptr inbounds i16, i16* %7293, i64 %8742
  %8744 = load i16, i16* %8743, align 2, !tbaa !382
  %8745 = insertelement <64 x i16> %8740, i16 %8744, i32 31
  %8746 = extractelement <64 x i32> %8585, i32 32
  %8747 = sext i32 %8746 to i64
  %8748 = getelementptr inbounds i16, i16* %7293, i64 %8747
  %8749 = load i16, i16* %8748, align 2, !tbaa !382
  %8750 = insertelement <64 x i16> %8745, i16 %8749, i32 32
  %8751 = extractelement <64 x i32> %8585, i32 33
  %8752 = sext i32 %8751 to i64
  %8753 = getelementptr inbounds i16, i16* %7293, i64 %8752
  %8754 = load i16, i16* %8753, align 2, !tbaa !382
  %8755 = insertelement <64 x i16> %8750, i16 %8754, i32 33
  %8756 = extractelement <64 x i32> %8585, i32 34
  %8757 = sext i32 %8756 to i64
  %8758 = getelementptr inbounds i16, i16* %7293, i64 %8757
  %8759 = load i16, i16* %8758, align 2, !tbaa !382
  %8760 = insertelement <64 x i16> %8755, i16 %8759, i32 34
  %8761 = extractelement <64 x i32> %8585, i32 35
  %8762 = sext i32 %8761 to i64
  %8763 = getelementptr inbounds i16, i16* %7293, i64 %8762
  %8764 = load i16, i16* %8763, align 2, !tbaa !382
  %8765 = insertelement <64 x i16> %8760, i16 %8764, i32 35
  %8766 = extractelement <64 x i32> %8585, i32 36
  %8767 = sext i32 %8766 to i64
  %8768 = getelementptr inbounds i16, i16* %7293, i64 %8767
  %8769 = load i16, i16* %8768, align 2, !tbaa !382
  %8770 = insertelement <64 x i16> %8765, i16 %8769, i32 36
  %8771 = extractelement <64 x i32> %8585, i32 37
  %8772 = sext i32 %8771 to i64
  %8773 = getelementptr inbounds i16, i16* %7293, i64 %8772
  %8774 = load i16, i16* %8773, align 2, !tbaa !382
  %8775 = insertelement <64 x i16> %8770, i16 %8774, i32 37
  %8776 = extractelement <64 x i32> %8585, i32 38
  %8777 = sext i32 %8776 to i64
  %8778 = getelementptr inbounds i16, i16* %7293, i64 %8777
  %8779 = load i16, i16* %8778, align 2, !tbaa !382
  %8780 = insertelement <64 x i16> %8775, i16 %8779, i32 38
  %8781 = extractelement <64 x i32> %8585, i32 39
  %8782 = sext i32 %8781 to i64
  %8783 = getelementptr inbounds i16, i16* %7293, i64 %8782
  %8784 = load i16, i16* %8783, align 2, !tbaa !382
  %8785 = insertelement <64 x i16> %8780, i16 %8784, i32 39
  %8786 = extractelement <64 x i32> %8585, i32 40
  %8787 = sext i32 %8786 to i64
  %8788 = getelementptr inbounds i16, i16* %7293, i64 %8787
  %8789 = load i16, i16* %8788, align 2, !tbaa !382
  %8790 = insertelement <64 x i16> %8785, i16 %8789, i32 40
  %8791 = extractelement <64 x i32> %8585, i32 41
  %8792 = sext i32 %8791 to i64
  %8793 = getelementptr inbounds i16, i16* %7293, i64 %8792
  %8794 = load i16, i16* %8793, align 2, !tbaa !382
  %8795 = insertelement <64 x i16> %8790, i16 %8794, i32 41
  %8796 = extractelement <64 x i32> %8585, i32 42
  %8797 = sext i32 %8796 to i64
  %8798 = getelementptr inbounds i16, i16* %7293, i64 %8797
  %8799 = load i16, i16* %8798, align 2, !tbaa !382
  %8800 = insertelement <64 x i16> %8795, i16 %8799, i32 42
  %8801 = extractelement <64 x i32> %8585, i32 43
  %8802 = sext i32 %8801 to i64
  %8803 = getelementptr inbounds i16, i16* %7293, i64 %8802
  %8804 = load i16, i16* %8803, align 2, !tbaa !382
  %8805 = insertelement <64 x i16> %8800, i16 %8804, i32 43
  %8806 = extractelement <64 x i32> %8585, i32 44
  %8807 = sext i32 %8806 to i64
  %8808 = getelementptr inbounds i16, i16* %7293, i64 %8807
  %8809 = load i16, i16* %8808, align 2, !tbaa !382
  %8810 = insertelement <64 x i16> %8805, i16 %8809, i32 44
  %8811 = extractelement <64 x i32> %8585, i32 45
  %8812 = sext i32 %8811 to i64
  %8813 = getelementptr inbounds i16, i16* %7293, i64 %8812
  %8814 = load i16, i16* %8813, align 2, !tbaa !382
  %8815 = insertelement <64 x i16> %8810, i16 %8814, i32 45
  %8816 = extractelement <64 x i32> %8585, i32 46
  %8817 = sext i32 %8816 to i64
  %8818 = getelementptr inbounds i16, i16* %7293, i64 %8817
  %8819 = load i16, i16* %8818, align 2, !tbaa !382
  %8820 = insertelement <64 x i16> %8815, i16 %8819, i32 46
  %8821 = extractelement <64 x i32> %8585, i32 47
  %8822 = sext i32 %8821 to i64
  %8823 = getelementptr inbounds i16, i16* %7293, i64 %8822
  %8824 = load i16, i16* %8823, align 2, !tbaa !382
  %8825 = insertelement <64 x i16> %8820, i16 %8824, i32 47
  %8826 = extractelement <64 x i32> %8585, i32 48
  %8827 = sext i32 %8826 to i64
  %8828 = getelementptr inbounds i16, i16* %7293, i64 %8827
  %8829 = load i16, i16* %8828, align 2, !tbaa !382
  %8830 = insertelement <64 x i16> %8825, i16 %8829, i32 48
  %8831 = extractelement <64 x i32> %8585, i32 49
  %8832 = sext i32 %8831 to i64
  %8833 = getelementptr inbounds i16, i16* %7293, i64 %8832
  %8834 = load i16, i16* %8833, align 2, !tbaa !382
  %8835 = insertelement <64 x i16> %8830, i16 %8834, i32 49
  %8836 = extractelement <64 x i32> %8585, i32 50
  %8837 = sext i32 %8836 to i64
  %8838 = getelementptr inbounds i16, i16* %7293, i64 %8837
  %8839 = load i16, i16* %8838, align 2, !tbaa !382
  %8840 = insertelement <64 x i16> %8835, i16 %8839, i32 50
  %8841 = extractelement <64 x i32> %8585, i32 51
  %8842 = sext i32 %8841 to i64
  %8843 = getelementptr inbounds i16, i16* %7293, i64 %8842
  %8844 = load i16, i16* %8843, align 2, !tbaa !382
  %8845 = insertelement <64 x i16> %8840, i16 %8844, i32 51
  %8846 = extractelement <64 x i32> %8585, i32 52
  %8847 = sext i32 %8846 to i64
  %8848 = getelementptr inbounds i16, i16* %7293, i64 %8847
  %8849 = load i16, i16* %8848, align 2, !tbaa !382
  %8850 = insertelement <64 x i16> %8845, i16 %8849, i32 52
  %8851 = extractelement <64 x i32> %8585, i32 53
  %8852 = sext i32 %8851 to i64
  %8853 = getelementptr inbounds i16, i16* %7293, i64 %8852
  %8854 = load i16, i16* %8853, align 2, !tbaa !382
  %8855 = insertelement <64 x i16> %8850, i16 %8854, i32 53
  %8856 = extractelement <64 x i32> %8585, i32 54
  %8857 = sext i32 %8856 to i64
  %8858 = getelementptr inbounds i16, i16* %7293, i64 %8857
  %8859 = load i16, i16* %8858, align 2, !tbaa !382
  %8860 = insertelement <64 x i16> %8855, i16 %8859, i32 54
  %8861 = extractelement <64 x i32> %8585, i32 55
  %8862 = sext i32 %8861 to i64
  %8863 = getelementptr inbounds i16, i16* %7293, i64 %8862
  %8864 = load i16, i16* %8863, align 2, !tbaa !382
  %8865 = insertelement <64 x i16> %8860, i16 %8864, i32 55
  %8866 = extractelement <64 x i32> %8585, i32 56
  %8867 = sext i32 %8866 to i64
  %8868 = getelementptr inbounds i16, i16* %7293, i64 %8867
  %8869 = load i16, i16* %8868, align 2, !tbaa !382
  %8870 = insertelement <64 x i16> %8865, i16 %8869, i32 56
  %8871 = extractelement <64 x i32> %8585, i32 57
  %8872 = sext i32 %8871 to i64
  %8873 = getelementptr inbounds i16, i16* %7293, i64 %8872
  %8874 = load i16, i16* %8873, align 2, !tbaa !382
  %8875 = insertelement <64 x i16> %8870, i16 %8874, i32 57
  %8876 = extractelement <64 x i32> %8585, i32 58
  %8877 = sext i32 %8876 to i64
  %8878 = getelementptr inbounds i16, i16* %7293, i64 %8877
  %8879 = load i16, i16* %8878, align 2, !tbaa !382
  %8880 = insertelement <64 x i16> %8875, i16 %8879, i32 58
  %8881 = extractelement <64 x i32> %8585, i32 59
  %8882 = sext i32 %8881 to i64
  %8883 = getelementptr inbounds i16, i16* %7293, i64 %8882
  %8884 = load i16, i16* %8883, align 2, !tbaa !382
  %8885 = insertelement <64 x i16> %8880, i16 %8884, i32 59
  %8886 = extractelement <64 x i32> %8585, i32 60
  %8887 = sext i32 %8886 to i64
  %8888 = getelementptr inbounds i16, i16* %7293, i64 %8887
  %8889 = load i16, i16* %8888, align 2, !tbaa !382
  %8890 = insertelement <64 x i16> %8885, i16 %8889, i32 60
  %8891 = extractelement <64 x i32> %8585, i32 61
  %8892 = sext i32 %8891 to i64
  %8893 = getelementptr inbounds i16, i16* %7293, i64 %8892
  %8894 = load i16, i16* %8893, align 2, !tbaa !382
  %8895 = insertelement <64 x i16> %8890, i16 %8894, i32 61
  %8896 = extractelement <64 x i32> %8585, i32 62
  %8897 = sext i32 %8896 to i64
  %8898 = getelementptr inbounds i16, i16* %7293, i64 %8897
  %8899 = load i16, i16* %8898, align 2, !tbaa !382
  %8900 = insertelement <64 x i16> %8895, i16 %8899, i32 62
  %8901 = extractelement <64 x i32> %8585, i32 63
  %8902 = sext i32 %8901 to i64
  %8903 = getelementptr inbounds i16, i16* %7293, i64 %8902
  %8904 = load i16, i16* %8903, align 2, !tbaa !382
  %8905 = insertelement <64 x i16> %8900, i16 %8904, i32 63
  %8906 = add nsw i32 %blur_x.s0.x.v1.base.s70, -61
  %8907 = insertelement <64 x i32> undef, i32 %8906, i32 0
  %8908 = shufflevector <64 x i32> %8907, <64 x i32> undef, <64 x i32> zeroinitializer
  %8909 = add nsw <64 x i32> %8908, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8910 = shufflevector <64 x i32> %8909, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8911 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8910, <4 x i32> %7290)
  %8912 = shufflevector <64 x i32> %8909, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8913 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8912, <4 x i32> %7290)
  %8914 = shufflevector <64 x i32> %8909, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8915 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8914, <4 x i32> %7290)
  %8916 = shufflevector <64 x i32> %8909, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %8917 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8916, <4 x i32> %7290)
  %8918 = shufflevector <64 x i32> %8909, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %8919 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8918, <4 x i32> %7290)
  %8920 = shufflevector <64 x i32> %8909, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %8921 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8920, <4 x i32> %7290)
  %8922 = shufflevector <64 x i32> %8909, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %8923 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8922, <4 x i32> %7290)
  %8924 = shufflevector <64 x i32> %8909, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %8925 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8924, <4 x i32> %7290)
  %8926 = shufflevector <64 x i32> %8909, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %8927 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8926, <4 x i32> %7290)
  %8928 = shufflevector <64 x i32> %8909, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %8929 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8928, <4 x i32> %7290)
  %8930 = shufflevector <64 x i32> %8909, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %8931 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8930, <4 x i32> %7290)
  %8932 = shufflevector <64 x i32> %8909, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %8933 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8932, <4 x i32> %7290)
  %8934 = shufflevector <64 x i32> %8909, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %8935 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8934, <4 x i32> %7290)
  %8936 = shufflevector <64 x i32> %8909, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %8937 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8936, <4 x i32> %7290)
  %8938 = shufflevector <64 x i32> %8909, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %8939 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8938, <4 x i32> %7290)
  %8940 = shufflevector <64 x i32> %8909, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %8941 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8940, <4 x i32> %7290)
  %8942 = shufflevector <4 x i32> %8941, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %8943 = shufflevector <8 x i32> %8942, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %8944 = shufflevector <16 x i32> %8943, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %8945 = shufflevector <32 x i32> %8944, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %8946 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8911, <4 x i32> %7292)
  %8947 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8913, <4 x i32> %7292)
  %8948 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8915, <4 x i32> %7292)
  %8949 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8917, <4 x i32> %7292)
  %8950 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8919, <4 x i32> %7292)
  %8951 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8921, <4 x i32> %7292)
  %8952 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8923, <4 x i32> %7292)
  %8953 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8925, <4 x i32> %7292)
  %8954 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8927, <4 x i32> %7292)
  %8955 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8929, <4 x i32> %7292)
  %8956 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8931, <4 x i32> %7292)
  %8957 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8933, <4 x i32> %7292)
  %8958 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8935, <4 x i32> %7292)
  %8959 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8937, <4 x i32> %7292)
  %8960 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8939, <4 x i32> %7292)
  %8961 = shufflevector <64 x i32> %8945, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %8962 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8961, <4 x i32> %7292)
  %8963 = shufflevector <4 x i32> %8946, <4 x i32> %8947, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8964 = shufflevector <4 x i32> %8948, <4 x i32> %8949, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8965 = shufflevector <4 x i32> %8950, <4 x i32> %8951, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8966 = shufflevector <4 x i32> %8952, <4 x i32> %8953, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8967 = shufflevector <4 x i32> %8954, <4 x i32> %8955, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8968 = shufflevector <4 x i32> %8956, <4 x i32> %8957, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8969 = shufflevector <4 x i32> %8958, <4 x i32> %8959, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8970 = shufflevector <4 x i32> %8960, <4 x i32> %8962, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8971 = shufflevector <8 x i32> %8963, <8 x i32> %8964, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8972 = shufflevector <8 x i32> %8965, <8 x i32> %8966, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8973 = shufflevector <8 x i32> %8967, <8 x i32> %8968, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8974 = shufflevector <8 x i32> %8969, <8 x i32> %8970, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8975 = shufflevector <16 x i32> %8971, <16 x i32> %8972, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8976 = shufflevector <16 x i32> %8973, <16 x i32> %8974, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8977 = shufflevector <32 x i32> %8975, <32 x i32> %8976, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8978 = add nsw <64 x i32> %8977, %t19871
  %8979 = extractelement <64 x i32> %8978, i32 0
  %8980 = sext i32 %8979 to i64
  %8981 = getelementptr inbounds i16, i16* %7293, i64 %8980
  %8982 = load i16, i16* %8981, align 2, !tbaa !382
  %8983 = insertelement <64 x i16> undef, i16 %8982, i32 0
  %8984 = extractelement <64 x i32> %8978, i32 1
  %8985 = sext i32 %8984 to i64
  %8986 = getelementptr inbounds i16, i16* %7293, i64 %8985
  %8987 = load i16, i16* %8986, align 2, !tbaa !382
  %8988 = insertelement <64 x i16> %8983, i16 %8987, i32 1
  %8989 = extractelement <64 x i32> %8978, i32 2
  %8990 = sext i32 %8989 to i64
  %8991 = getelementptr inbounds i16, i16* %7293, i64 %8990
  %8992 = load i16, i16* %8991, align 2, !tbaa !382
  %8993 = insertelement <64 x i16> %8988, i16 %8992, i32 2
  %8994 = extractelement <64 x i32> %8978, i32 3
  %8995 = sext i32 %8994 to i64
  %8996 = getelementptr inbounds i16, i16* %7293, i64 %8995
  %8997 = load i16, i16* %8996, align 2, !tbaa !382
  %8998 = insertelement <64 x i16> %8993, i16 %8997, i32 3
  %8999 = extractelement <64 x i32> %8978, i32 4
  %9000 = sext i32 %8999 to i64
  %9001 = getelementptr inbounds i16, i16* %7293, i64 %9000
  %9002 = load i16, i16* %9001, align 2, !tbaa !382
  %9003 = insertelement <64 x i16> %8998, i16 %9002, i32 4
  %9004 = extractelement <64 x i32> %8978, i32 5
  %9005 = sext i32 %9004 to i64
  %9006 = getelementptr inbounds i16, i16* %7293, i64 %9005
  %9007 = load i16, i16* %9006, align 2, !tbaa !382
  %9008 = insertelement <64 x i16> %9003, i16 %9007, i32 5
  %9009 = extractelement <64 x i32> %8978, i32 6
  %9010 = sext i32 %9009 to i64
  %9011 = getelementptr inbounds i16, i16* %7293, i64 %9010
  %9012 = load i16, i16* %9011, align 2, !tbaa !382
  %9013 = insertelement <64 x i16> %9008, i16 %9012, i32 6
  %9014 = extractelement <64 x i32> %8978, i32 7
  %9015 = sext i32 %9014 to i64
  %9016 = getelementptr inbounds i16, i16* %7293, i64 %9015
  %9017 = load i16, i16* %9016, align 2, !tbaa !382
  %9018 = insertelement <64 x i16> %9013, i16 %9017, i32 7
  %9019 = extractelement <64 x i32> %8978, i32 8
  %9020 = sext i32 %9019 to i64
  %9021 = getelementptr inbounds i16, i16* %7293, i64 %9020
  %9022 = load i16, i16* %9021, align 2, !tbaa !382
  %9023 = insertelement <64 x i16> %9018, i16 %9022, i32 8
  %9024 = extractelement <64 x i32> %8978, i32 9
  %9025 = sext i32 %9024 to i64
  %9026 = getelementptr inbounds i16, i16* %7293, i64 %9025
  %9027 = load i16, i16* %9026, align 2, !tbaa !382
  %9028 = insertelement <64 x i16> %9023, i16 %9027, i32 9
  %9029 = extractelement <64 x i32> %8978, i32 10
  %9030 = sext i32 %9029 to i64
  %9031 = getelementptr inbounds i16, i16* %7293, i64 %9030
  %9032 = load i16, i16* %9031, align 2, !tbaa !382
  %9033 = insertelement <64 x i16> %9028, i16 %9032, i32 10
  %9034 = extractelement <64 x i32> %8978, i32 11
  %9035 = sext i32 %9034 to i64
  %9036 = getelementptr inbounds i16, i16* %7293, i64 %9035
  %9037 = load i16, i16* %9036, align 2, !tbaa !382
  %9038 = insertelement <64 x i16> %9033, i16 %9037, i32 11
  %9039 = extractelement <64 x i32> %8978, i32 12
  %9040 = sext i32 %9039 to i64
  %9041 = getelementptr inbounds i16, i16* %7293, i64 %9040
  %9042 = load i16, i16* %9041, align 2, !tbaa !382
  %9043 = insertelement <64 x i16> %9038, i16 %9042, i32 12
  %9044 = extractelement <64 x i32> %8978, i32 13
  %9045 = sext i32 %9044 to i64
  %9046 = getelementptr inbounds i16, i16* %7293, i64 %9045
  %9047 = load i16, i16* %9046, align 2, !tbaa !382
  %9048 = insertelement <64 x i16> %9043, i16 %9047, i32 13
  %9049 = extractelement <64 x i32> %8978, i32 14
  %9050 = sext i32 %9049 to i64
  %9051 = getelementptr inbounds i16, i16* %7293, i64 %9050
  %9052 = load i16, i16* %9051, align 2, !tbaa !382
  %9053 = insertelement <64 x i16> %9048, i16 %9052, i32 14
  %9054 = extractelement <64 x i32> %8978, i32 15
  %9055 = sext i32 %9054 to i64
  %9056 = getelementptr inbounds i16, i16* %7293, i64 %9055
  %9057 = load i16, i16* %9056, align 2, !tbaa !382
  %9058 = insertelement <64 x i16> %9053, i16 %9057, i32 15
  %9059 = extractelement <64 x i32> %8978, i32 16
  %9060 = sext i32 %9059 to i64
  %9061 = getelementptr inbounds i16, i16* %7293, i64 %9060
  %9062 = load i16, i16* %9061, align 2, !tbaa !382
  %9063 = insertelement <64 x i16> %9058, i16 %9062, i32 16
  %9064 = extractelement <64 x i32> %8978, i32 17
  %9065 = sext i32 %9064 to i64
  %9066 = getelementptr inbounds i16, i16* %7293, i64 %9065
  %9067 = load i16, i16* %9066, align 2, !tbaa !382
  %9068 = insertelement <64 x i16> %9063, i16 %9067, i32 17
  %9069 = extractelement <64 x i32> %8978, i32 18
  %9070 = sext i32 %9069 to i64
  %9071 = getelementptr inbounds i16, i16* %7293, i64 %9070
  %9072 = load i16, i16* %9071, align 2, !tbaa !382
  %9073 = insertelement <64 x i16> %9068, i16 %9072, i32 18
  %9074 = extractelement <64 x i32> %8978, i32 19
  %9075 = sext i32 %9074 to i64
  %9076 = getelementptr inbounds i16, i16* %7293, i64 %9075
  %9077 = load i16, i16* %9076, align 2, !tbaa !382
  %9078 = insertelement <64 x i16> %9073, i16 %9077, i32 19
  %9079 = extractelement <64 x i32> %8978, i32 20
  %9080 = sext i32 %9079 to i64
  %9081 = getelementptr inbounds i16, i16* %7293, i64 %9080
  %9082 = load i16, i16* %9081, align 2, !tbaa !382
  %9083 = insertelement <64 x i16> %9078, i16 %9082, i32 20
  %9084 = extractelement <64 x i32> %8978, i32 21
  %9085 = sext i32 %9084 to i64
  %9086 = getelementptr inbounds i16, i16* %7293, i64 %9085
  %9087 = load i16, i16* %9086, align 2, !tbaa !382
  %9088 = insertelement <64 x i16> %9083, i16 %9087, i32 21
  %9089 = extractelement <64 x i32> %8978, i32 22
  %9090 = sext i32 %9089 to i64
  %9091 = getelementptr inbounds i16, i16* %7293, i64 %9090
  %9092 = load i16, i16* %9091, align 2, !tbaa !382
  %9093 = insertelement <64 x i16> %9088, i16 %9092, i32 22
  %9094 = extractelement <64 x i32> %8978, i32 23
  %9095 = sext i32 %9094 to i64
  %9096 = getelementptr inbounds i16, i16* %7293, i64 %9095
  %9097 = load i16, i16* %9096, align 2, !tbaa !382
  %9098 = insertelement <64 x i16> %9093, i16 %9097, i32 23
  %9099 = extractelement <64 x i32> %8978, i32 24
  %9100 = sext i32 %9099 to i64
  %9101 = getelementptr inbounds i16, i16* %7293, i64 %9100
  %9102 = load i16, i16* %9101, align 2, !tbaa !382
  %9103 = insertelement <64 x i16> %9098, i16 %9102, i32 24
  %9104 = extractelement <64 x i32> %8978, i32 25
  %9105 = sext i32 %9104 to i64
  %9106 = getelementptr inbounds i16, i16* %7293, i64 %9105
  %9107 = load i16, i16* %9106, align 2, !tbaa !382
  %9108 = insertelement <64 x i16> %9103, i16 %9107, i32 25
  %9109 = extractelement <64 x i32> %8978, i32 26
  %9110 = sext i32 %9109 to i64
  %9111 = getelementptr inbounds i16, i16* %7293, i64 %9110
  %9112 = load i16, i16* %9111, align 2, !tbaa !382
  %9113 = insertelement <64 x i16> %9108, i16 %9112, i32 26
  %9114 = extractelement <64 x i32> %8978, i32 27
  %9115 = sext i32 %9114 to i64
  %9116 = getelementptr inbounds i16, i16* %7293, i64 %9115
  %9117 = load i16, i16* %9116, align 2, !tbaa !382
  %9118 = insertelement <64 x i16> %9113, i16 %9117, i32 27
  %9119 = extractelement <64 x i32> %8978, i32 28
  %9120 = sext i32 %9119 to i64
  %9121 = getelementptr inbounds i16, i16* %7293, i64 %9120
  %9122 = load i16, i16* %9121, align 2, !tbaa !382
  %9123 = insertelement <64 x i16> %9118, i16 %9122, i32 28
  %9124 = extractelement <64 x i32> %8978, i32 29
  %9125 = sext i32 %9124 to i64
  %9126 = getelementptr inbounds i16, i16* %7293, i64 %9125
  %9127 = load i16, i16* %9126, align 2, !tbaa !382
  %9128 = insertelement <64 x i16> %9123, i16 %9127, i32 29
  %9129 = extractelement <64 x i32> %8978, i32 30
  %9130 = sext i32 %9129 to i64
  %9131 = getelementptr inbounds i16, i16* %7293, i64 %9130
  %9132 = load i16, i16* %9131, align 2, !tbaa !382
  %9133 = insertelement <64 x i16> %9128, i16 %9132, i32 30
  %9134 = extractelement <64 x i32> %8978, i32 31
  %9135 = sext i32 %9134 to i64
  %9136 = getelementptr inbounds i16, i16* %7293, i64 %9135
  %9137 = load i16, i16* %9136, align 2, !tbaa !382
  %9138 = insertelement <64 x i16> %9133, i16 %9137, i32 31
  %9139 = extractelement <64 x i32> %8978, i32 32
  %9140 = sext i32 %9139 to i64
  %9141 = getelementptr inbounds i16, i16* %7293, i64 %9140
  %9142 = load i16, i16* %9141, align 2, !tbaa !382
  %9143 = insertelement <64 x i16> %9138, i16 %9142, i32 32
  %9144 = extractelement <64 x i32> %8978, i32 33
  %9145 = sext i32 %9144 to i64
  %9146 = getelementptr inbounds i16, i16* %7293, i64 %9145
  %9147 = load i16, i16* %9146, align 2, !tbaa !382
  %9148 = insertelement <64 x i16> %9143, i16 %9147, i32 33
  %9149 = extractelement <64 x i32> %8978, i32 34
  %9150 = sext i32 %9149 to i64
  %9151 = getelementptr inbounds i16, i16* %7293, i64 %9150
  %9152 = load i16, i16* %9151, align 2, !tbaa !382
  %9153 = insertelement <64 x i16> %9148, i16 %9152, i32 34
  %9154 = extractelement <64 x i32> %8978, i32 35
  %9155 = sext i32 %9154 to i64
  %9156 = getelementptr inbounds i16, i16* %7293, i64 %9155
  %9157 = load i16, i16* %9156, align 2, !tbaa !382
  %9158 = insertelement <64 x i16> %9153, i16 %9157, i32 35
  %9159 = extractelement <64 x i32> %8978, i32 36
  %9160 = sext i32 %9159 to i64
  %9161 = getelementptr inbounds i16, i16* %7293, i64 %9160
  %9162 = load i16, i16* %9161, align 2, !tbaa !382
  %9163 = insertelement <64 x i16> %9158, i16 %9162, i32 36
  %9164 = extractelement <64 x i32> %8978, i32 37
  %9165 = sext i32 %9164 to i64
  %9166 = getelementptr inbounds i16, i16* %7293, i64 %9165
  %9167 = load i16, i16* %9166, align 2, !tbaa !382
  %9168 = insertelement <64 x i16> %9163, i16 %9167, i32 37
  %9169 = extractelement <64 x i32> %8978, i32 38
  %9170 = sext i32 %9169 to i64
  %9171 = getelementptr inbounds i16, i16* %7293, i64 %9170
  %9172 = load i16, i16* %9171, align 2, !tbaa !382
  %9173 = insertelement <64 x i16> %9168, i16 %9172, i32 38
  %9174 = extractelement <64 x i32> %8978, i32 39
  %9175 = sext i32 %9174 to i64
  %9176 = getelementptr inbounds i16, i16* %7293, i64 %9175
  %9177 = load i16, i16* %9176, align 2, !tbaa !382
  %9178 = insertelement <64 x i16> %9173, i16 %9177, i32 39
  %9179 = extractelement <64 x i32> %8978, i32 40
  %9180 = sext i32 %9179 to i64
  %9181 = getelementptr inbounds i16, i16* %7293, i64 %9180
  %9182 = load i16, i16* %9181, align 2, !tbaa !382
  %9183 = insertelement <64 x i16> %9178, i16 %9182, i32 40
  %9184 = extractelement <64 x i32> %8978, i32 41
  %9185 = sext i32 %9184 to i64
  %9186 = getelementptr inbounds i16, i16* %7293, i64 %9185
  %9187 = load i16, i16* %9186, align 2, !tbaa !382
  %9188 = insertelement <64 x i16> %9183, i16 %9187, i32 41
  %9189 = extractelement <64 x i32> %8978, i32 42
  %9190 = sext i32 %9189 to i64
  %9191 = getelementptr inbounds i16, i16* %7293, i64 %9190
  %9192 = load i16, i16* %9191, align 2, !tbaa !382
  %9193 = insertelement <64 x i16> %9188, i16 %9192, i32 42
  %9194 = extractelement <64 x i32> %8978, i32 43
  %9195 = sext i32 %9194 to i64
  %9196 = getelementptr inbounds i16, i16* %7293, i64 %9195
  %9197 = load i16, i16* %9196, align 2, !tbaa !382
  %9198 = insertelement <64 x i16> %9193, i16 %9197, i32 43
  %9199 = extractelement <64 x i32> %8978, i32 44
  %9200 = sext i32 %9199 to i64
  %9201 = getelementptr inbounds i16, i16* %7293, i64 %9200
  %9202 = load i16, i16* %9201, align 2, !tbaa !382
  %9203 = insertelement <64 x i16> %9198, i16 %9202, i32 44
  %9204 = extractelement <64 x i32> %8978, i32 45
  %9205 = sext i32 %9204 to i64
  %9206 = getelementptr inbounds i16, i16* %7293, i64 %9205
  %9207 = load i16, i16* %9206, align 2, !tbaa !382
  %9208 = insertelement <64 x i16> %9203, i16 %9207, i32 45
  %9209 = extractelement <64 x i32> %8978, i32 46
  %9210 = sext i32 %9209 to i64
  %9211 = getelementptr inbounds i16, i16* %7293, i64 %9210
  %9212 = load i16, i16* %9211, align 2, !tbaa !382
  %9213 = insertelement <64 x i16> %9208, i16 %9212, i32 46
  %9214 = extractelement <64 x i32> %8978, i32 47
  %9215 = sext i32 %9214 to i64
  %9216 = getelementptr inbounds i16, i16* %7293, i64 %9215
  %9217 = load i16, i16* %9216, align 2, !tbaa !382
  %9218 = insertelement <64 x i16> %9213, i16 %9217, i32 47
  %9219 = extractelement <64 x i32> %8978, i32 48
  %9220 = sext i32 %9219 to i64
  %9221 = getelementptr inbounds i16, i16* %7293, i64 %9220
  %9222 = load i16, i16* %9221, align 2, !tbaa !382
  %9223 = insertelement <64 x i16> %9218, i16 %9222, i32 48
  %9224 = extractelement <64 x i32> %8978, i32 49
  %9225 = sext i32 %9224 to i64
  %9226 = getelementptr inbounds i16, i16* %7293, i64 %9225
  %9227 = load i16, i16* %9226, align 2, !tbaa !382
  %9228 = insertelement <64 x i16> %9223, i16 %9227, i32 49
  %9229 = extractelement <64 x i32> %8978, i32 50
  %9230 = sext i32 %9229 to i64
  %9231 = getelementptr inbounds i16, i16* %7293, i64 %9230
  %9232 = load i16, i16* %9231, align 2, !tbaa !382
  %9233 = insertelement <64 x i16> %9228, i16 %9232, i32 50
  %9234 = extractelement <64 x i32> %8978, i32 51
  %9235 = sext i32 %9234 to i64
  %9236 = getelementptr inbounds i16, i16* %7293, i64 %9235
  %9237 = load i16, i16* %9236, align 2, !tbaa !382
  %9238 = insertelement <64 x i16> %9233, i16 %9237, i32 51
  %9239 = extractelement <64 x i32> %8978, i32 52
  %9240 = sext i32 %9239 to i64
  %9241 = getelementptr inbounds i16, i16* %7293, i64 %9240
  %9242 = load i16, i16* %9241, align 2, !tbaa !382
  %9243 = insertelement <64 x i16> %9238, i16 %9242, i32 52
  %9244 = extractelement <64 x i32> %8978, i32 53
  %9245 = sext i32 %9244 to i64
  %9246 = getelementptr inbounds i16, i16* %7293, i64 %9245
  %9247 = load i16, i16* %9246, align 2, !tbaa !382
  %9248 = insertelement <64 x i16> %9243, i16 %9247, i32 53
  %9249 = extractelement <64 x i32> %8978, i32 54
  %9250 = sext i32 %9249 to i64
  %9251 = getelementptr inbounds i16, i16* %7293, i64 %9250
  %9252 = load i16, i16* %9251, align 2, !tbaa !382
  %9253 = insertelement <64 x i16> %9248, i16 %9252, i32 54
  %9254 = extractelement <64 x i32> %8978, i32 55
  %9255 = sext i32 %9254 to i64
  %9256 = getelementptr inbounds i16, i16* %7293, i64 %9255
  %9257 = load i16, i16* %9256, align 2, !tbaa !382
  %9258 = insertelement <64 x i16> %9253, i16 %9257, i32 55
  %9259 = extractelement <64 x i32> %8978, i32 56
  %9260 = sext i32 %9259 to i64
  %9261 = getelementptr inbounds i16, i16* %7293, i64 %9260
  %9262 = load i16, i16* %9261, align 2, !tbaa !382
  %9263 = insertelement <64 x i16> %9258, i16 %9262, i32 56
  %9264 = extractelement <64 x i32> %8978, i32 57
  %9265 = sext i32 %9264 to i64
  %9266 = getelementptr inbounds i16, i16* %7293, i64 %9265
  %9267 = load i16, i16* %9266, align 2, !tbaa !382
  %9268 = insertelement <64 x i16> %9263, i16 %9267, i32 57
  %9269 = extractelement <64 x i32> %8978, i32 58
  %9270 = sext i32 %9269 to i64
  %9271 = getelementptr inbounds i16, i16* %7293, i64 %9270
  %9272 = load i16, i16* %9271, align 2, !tbaa !382
  %9273 = insertelement <64 x i16> %9268, i16 %9272, i32 58
  %9274 = extractelement <64 x i32> %8978, i32 59
  %9275 = sext i32 %9274 to i64
  %9276 = getelementptr inbounds i16, i16* %7293, i64 %9275
  %9277 = load i16, i16* %9276, align 2, !tbaa !382
  %9278 = insertelement <64 x i16> %9273, i16 %9277, i32 59
  %9279 = extractelement <64 x i32> %8978, i32 60
  %9280 = sext i32 %9279 to i64
  %9281 = getelementptr inbounds i16, i16* %7293, i64 %9280
  %9282 = load i16, i16* %9281, align 2, !tbaa !382
  %9283 = insertelement <64 x i16> %9278, i16 %9282, i32 60
  %9284 = extractelement <64 x i32> %8978, i32 61
  %9285 = sext i32 %9284 to i64
  %9286 = getelementptr inbounds i16, i16* %7293, i64 %9285
  %9287 = load i16, i16* %9286, align 2, !tbaa !382
  %9288 = insertelement <64 x i16> %9283, i16 %9287, i32 61
  %9289 = extractelement <64 x i32> %8978, i32 62
  %9290 = sext i32 %9289 to i64
  %9291 = getelementptr inbounds i16, i16* %7293, i64 %9290
  %9292 = load i16, i16* %9291, align 2, !tbaa !382
  %9293 = insertelement <64 x i16> %9288, i16 %9292, i32 62
  %9294 = extractelement <64 x i32> %8978, i32 63
  %9295 = sext i32 %9294 to i64
  %9296 = getelementptr inbounds i16, i16* %7293, i64 %9295
  %9297 = load i16, i16* %9296, align 2, !tbaa !382
  %9298 = insertelement <64 x i16> %9293, i16 %9297, i32 63
  %9299 = add <64 x i16> %8119, %7726
  %9300 = add <64 x i16> %9299, %8512
  %9301 = add <64 x i16> %9300, %8905
  %9302 = add <64 x i16> %9301, %9298
  %9303 = shufflevector <64 x i16> %9302, <64 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9304 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9303, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9305 = shufflevector <64 x i16> %9302, <64 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9306 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9305, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9307 = shufflevector <64 x i16> %9302, <64 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9308 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9307, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9309 = shufflevector <64 x i16> %9302, <64 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %9310 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9309, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9311 = shufflevector <64 x i16> %9302, <64 x i16> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %9312 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9311, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9313 = shufflevector <64 x i16> %9302, <64 x i16> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %9314 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9313, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9315 = shufflevector <64 x i16> %9302, <64 x i16> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %9316 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9315, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9317 = shufflevector <64 x i16> %9302, <64 x i16> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %9318 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9317, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9319 = shufflevector <64 x i16> %9302, <64 x i16> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %9320 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9319, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9321 = shufflevector <64 x i16> %9302, <64 x i16> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %9322 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9321, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9323 = shufflevector <64 x i16> %9302, <64 x i16> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %9324 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9323, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9325 = shufflevector <64 x i16> %9302, <64 x i16> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %9326 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9325, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9327 = shufflevector <64 x i16> %9302, <64 x i16> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %9328 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9327, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9329 = shufflevector <64 x i16> %9302, <64 x i16> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %9330 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9329, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9331 = shufflevector <64 x i16> %9302, <64 x i16> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %9332 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9331, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9333 = shufflevector <64 x i16> %9302, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %9334 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9333, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9335 = shufflevector <4 x i32> %9304, <4 x i32> %9306, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9336 = shufflevector <4 x i32> %9308, <4 x i32> %9310, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9337 = shufflevector <4 x i32> %9312, <4 x i32> %9314, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9338 = shufflevector <4 x i32> %9316, <4 x i32> %9318, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9339 = shufflevector <4 x i32> %9320, <4 x i32> %9322, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9340 = shufflevector <4 x i32> %9324, <4 x i32> %9326, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9341 = shufflevector <4 x i32> %9328, <4 x i32> %9330, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9342 = shufflevector <4 x i32> %9332, <4 x i32> %9334, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9343 = shufflevector <8 x i32> %9335, <8 x i32> %9336, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9344 = shufflevector <8 x i32> %9337, <8 x i32> %9338, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9345 = shufflevector <8 x i32> %9339, <8 x i32> %9340, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9346 = shufflevector <8 x i32> %9341, <8 x i32> %9342, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9347 = shufflevector <16 x i32> %9343, <16 x i32> %9344, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9348 = shufflevector <16 x i32> %9345, <16 x i32> %9346, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9349 = shufflevector <32 x i32> %9347, <32 x i32> %9348, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9350 = lshr <64 x i32> %9349, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %9351 = trunc <64 x i32> %9350 to <64 x i16>
  %9352 = shufflevector <64 x i16> %9351, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9353 = sext i32 %blur_x.s0.x.v1.base.s70 to i64
  %9354 = add nsw i64 %9353, %7331
  %9355 = getelementptr inbounds i16, i16* %blur_x56, i64 %9354
  %9356 = bitcast i16* %9355 to <8 x i16>*
  store <8 x i16> %9352, <8 x i16>* %9356, align 2, !tbaa !385
  %9357 = shufflevector <64 x i16> %9351, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9358 = getelementptr inbounds i16, i16* %9355, i64 8
  %9359 = bitcast i16* %9358 to <8 x i16>*
  store <8 x i16> %9357, <8 x i16>* %9359, align 2, !tbaa !385
  %9360 = shufflevector <64 x i16> %9351, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %9361 = getelementptr inbounds i16, i16* %9355, i64 16
  %9362 = bitcast i16* %9361 to <8 x i16>*
  store <8 x i16> %9360, <8 x i16>* %9362, align 2, !tbaa !385
  %9363 = shufflevector <64 x i16> %9351, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9364 = getelementptr inbounds i16, i16* %9355, i64 24
  %9365 = bitcast i16* %9364 to <8 x i16>*
  store <8 x i16> %9363, <8 x i16>* %9365, align 2, !tbaa !385
  %9366 = shufflevector <64 x i16> %9351, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %9367 = getelementptr inbounds i16, i16* %9355, i64 32
  %9368 = bitcast i16* %9367 to <8 x i16>*
  store <8 x i16> %9366, <8 x i16>* %9368, align 2, !tbaa !385
  %9369 = shufflevector <64 x i16> %9351, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %9370 = getelementptr inbounds i16, i16* %9355, i64 40
  %9371 = bitcast i16* %9370 to <8 x i16>*
  store <8 x i16> %9369, <8 x i16>* %9371, align 2, !tbaa !385
  %9372 = shufflevector <64 x i16> %9351, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %9373 = getelementptr inbounds i16, i16* %9355, i64 48
  %9374 = bitcast i16* %9373 to <8 x i16>*
  store <8 x i16> %9372, <8 x i16>* %9374, align 2, !tbaa !385
  %9375 = shufflevector <64 x i16> %9351, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9376 = getelementptr inbounds i16, i16* %9355, i64 56
  %9377 = bitcast i16* %9376 to <8 x i16>*
  store <8 x i16> %9375, <8 x i16>* %9377, align 2, !tbaa !385
  %9378 = add nuw nsw i32 %blur_x.s0.x.x69, 1
  %.not139 = icmp eq i32 %9378, %t23451
  br i1 %.not139, label %"end for blur_x.s0.x.x68", label %"for blur_x.s0.x.x67"

"end for blur_x.s0.x.x68":                        ; preds = %"for blur_x.s0.x.x67", %"for blur_y.s0.y.yi.$n.rebased61"
  br i1 %7294, label %"for blur_x.s0.x.x.rebased75.preheader", label %"end for blur_x.s0.x.x.rebased76", !prof !381

"for blur_x.s0.x.x.rebased75.preheader":          ; preds = %"end for blur_x.s0.x.x68"
  %9379 = sext i32 %t24265 to i64
  %indvars.iv.next187.0 = add nuw nsw i64 0, 1
  br label %"for blur_x.s0.x.x.rebased75"

"for blur_x.s0.x.x.rebased75":                    ; preds = %"for blur_x.s0.x.x.rebased75.for blur_x.s0.x.x.rebased75_crit_edge", %"for blur_x.s0.x.x.rebased75.preheader"
  %indvars.iv.next187.phi = phi i64 [ %indvars.iv.next187.0, %"for blur_x.s0.x.x.rebased75.preheader" ], [ %indvars.iv.next187.1, %"for blur_x.s0.x.x.rebased75.for blur_x.s0.x.x.rebased75_crit_edge" ]
  %blur_x.s0.x.x.rebased77 = phi i32 [ 0, %"for blur_x.s0.x.x.rebased75.preheader" ], [ %9614, %"for blur_x.s0.x.x.rebased75.for blur_x.s0.x.x.rebased75_crit_edge" ]
  %9380 = add nsw i32 %blur_x.s0.x.x.rebased77, %t23451
  %9381 = shl nsw i32 %9380, 6
  %blur_x.s0.x.v1.base.s78 = add nsw i32 %9381, %t21542
  %t20079 = add nsw i32 %blur_x.s0.x.v1.base.s78, %t24166
  %9382 = sext i32 %t20079 to i64
  %9383 = getelementptr inbounds i16, i16* %7293, i64 %9382
  %9384 = getelementptr inbounds i16, i16* %9383, i64 -63
  %9385 = bitcast i16* %9384 to <8 x i16>*
  %9386 = load <8 x i16>, <8 x i16>* %9385, align 2, !tbaa !382
  %9387 = getelementptr inbounds i16, i16* %9383, i64 -55
  %9388 = bitcast i16* %9387 to <8 x i16>*
  %9389 = load <8 x i16>, <8 x i16>* %9388, align 2, !tbaa !382
  %9390 = getelementptr inbounds i16, i16* %9383, i64 -47
  %9391 = bitcast i16* %9390 to <8 x i16>*
  %9392 = load <8 x i16>, <8 x i16>* %9391, align 2, !tbaa !382
  %9393 = getelementptr inbounds i16, i16* %9383, i64 -39
  %9394 = bitcast i16* %9393 to <8 x i16>*
  %9395 = load <8 x i16>, <8 x i16>* %9394, align 2, !tbaa !382
  %9396 = getelementptr inbounds i16, i16* %9383, i64 -31
  %9397 = bitcast i16* %9396 to <8 x i16>*
  %9398 = load <8 x i16>, <8 x i16>* %9397, align 2, !tbaa !382
  %9399 = getelementptr inbounds i16, i16* %9383, i64 -23
  %9400 = bitcast i16* %9399 to <8 x i16>*
  %9401 = load <8 x i16>, <8 x i16>* %9400, align 2, !tbaa !382
  %9402 = getelementptr inbounds i16, i16* %9383, i64 -15
  %9403 = bitcast i16* %9402 to <8 x i16>*
  %9404 = load <8 x i16>, <8 x i16>* %9403, align 2, !tbaa !382
  %9405 = getelementptr inbounds i16, i16* %9383, i64 -7
  %9406 = bitcast i16* %9405 to <8 x i16>*
  %9407 = load <8 x i16>, <8 x i16>* %9406, align 2, !tbaa !382
  %9408 = getelementptr inbounds i16, i16* %9383, i64 -64
  %9409 = bitcast i16* %9408 to <8 x i16>*
  %9410 = load <8 x i16>, <8 x i16>* %9409, align 2, !tbaa !382
  %9411 = getelementptr inbounds i16, i16* %9383, i64 -56
  %9412 = bitcast i16* %9411 to <8 x i16>*
  %9413 = load <8 x i16>, <8 x i16>* %9412, align 2, !tbaa !382
  %9414 = getelementptr inbounds i16, i16* %9383, i64 -48
  %9415 = bitcast i16* %9414 to <8 x i16>*
  %9416 = load <8 x i16>, <8 x i16>* %9415, align 2, !tbaa !382
  %9417 = getelementptr inbounds i16, i16* %9383, i64 -40
  %9418 = bitcast i16* %9417 to <8 x i16>*
  %9419 = load <8 x i16>, <8 x i16>* %9418, align 2, !tbaa !382
  %9420 = getelementptr inbounds i16, i16* %9383, i64 -32
  %9421 = bitcast i16* %9420 to <8 x i16>*
  %9422 = load <8 x i16>, <8 x i16>* %9421, align 2, !tbaa !382
  %9423 = getelementptr inbounds i16, i16* %9383, i64 -24
  %9424 = bitcast i16* %9423 to <8 x i16>*
  %9425 = load <8 x i16>, <8 x i16>* %9424, align 2, !tbaa !382
  %9426 = getelementptr inbounds i16, i16* %9383, i64 -16
  %9427 = bitcast i16* %9426 to <8 x i16>*
  %9428 = load <8 x i16>, <8 x i16>* %9427, align 2, !tbaa !382
  %9429 = getelementptr inbounds i16, i16* %9383, i64 -8
  %9430 = bitcast i16* %9429 to <8 x i16>*
  %9431 = load <8 x i16>, <8 x i16>* %9430, align 2, !tbaa !382
  %9432 = getelementptr inbounds i16, i16* %9383, i64 -62
  %9433 = bitcast i16* %9432 to <8 x i16>*
  %9434 = load <8 x i16>, <8 x i16>* %9433, align 2, !tbaa !382
  %9435 = getelementptr inbounds i16, i16* %9383, i64 -54
  %9436 = bitcast i16* %9435 to <8 x i16>*
  %9437 = load <8 x i16>, <8 x i16>* %9436, align 2, !tbaa !382
  %9438 = getelementptr inbounds i16, i16* %9383, i64 -46
  %9439 = bitcast i16* %9438 to <8 x i16>*
  %9440 = load <8 x i16>, <8 x i16>* %9439, align 2, !tbaa !382
  %9441 = getelementptr inbounds i16, i16* %9383, i64 -38
  %9442 = bitcast i16* %9441 to <8 x i16>*
  %9443 = load <8 x i16>, <8 x i16>* %9442, align 2, !tbaa !382
  %9444 = getelementptr inbounds i16, i16* %9383, i64 -30
  %9445 = bitcast i16* %9444 to <8 x i16>*
  %9446 = load <8 x i16>, <8 x i16>* %9445, align 2, !tbaa !382
  %9447 = getelementptr inbounds i16, i16* %9383, i64 -22
  %9448 = bitcast i16* %9447 to <8 x i16>*
  %9449 = load <8 x i16>, <8 x i16>* %9448, align 2, !tbaa !382
  %9450 = getelementptr inbounds i16, i16* %9383, i64 -14
  %9451 = bitcast i16* %9450 to <8 x i16>*
  %9452 = load <8 x i16>, <8 x i16>* %9451, align 2, !tbaa !382
  %9453 = getelementptr inbounds i16, i16* %9383, i64 -6
  %9454 = bitcast i16* %9453 to <8 x i16>*
  %9455 = load <8 x i16>, <8 x i16>* %9454, align 2, !tbaa !382
  %9456 = getelementptr inbounds i16, i16* %9383, i64 -60
  %9457 = bitcast i16* %9456 to <8 x i16>*
  %9458 = load <8 x i16>, <8 x i16>* %9457, align 2, !tbaa !382
  %9459 = getelementptr inbounds i16, i16* %9383, i64 -52
  %9460 = bitcast i16* %9459 to <8 x i16>*
  %9461 = load <8 x i16>, <8 x i16>* %9460, align 2, !tbaa !382
  %9462 = getelementptr inbounds i16, i16* %9383, i64 -44
  %9463 = bitcast i16* %9462 to <8 x i16>*
  %9464 = load <8 x i16>, <8 x i16>* %9463, align 2, !tbaa !382
  %9465 = getelementptr inbounds i16, i16* %9383, i64 -36
  %9466 = bitcast i16* %9465 to <8 x i16>*
  %9467 = load <8 x i16>, <8 x i16>* %9466, align 2, !tbaa !382
  %9468 = getelementptr inbounds i16, i16* %9383, i64 -28
  %9469 = bitcast i16* %9468 to <8 x i16>*
  %9470 = load <8 x i16>, <8 x i16>* %9469, align 2, !tbaa !382
  %9471 = getelementptr inbounds i16, i16* %9383, i64 -20
  %9472 = bitcast i16* %9471 to <8 x i16>*
  %9473 = load <8 x i16>, <8 x i16>* %9472, align 2, !tbaa !382
  %9474 = getelementptr inbounds i16, i16* %9383, i64 -12
  %9475 = bitcast i16* %9474 to <8 x i16>*
  %9476 = load <8 x i16>, <8 x i16>* %9475, align 2, !tbaa !382
  %9477 = getelementptr inbounds i16, i16* %9383, i64 -4
  %9478 = bitcast i16* %9477 to <8 x i16>*
  %9479 = load <8 x i16>, <8 x i16>* %9478, align 2, !tbaa !382
  %9480 = getelementptr inbounds i16, i16* %9383, i64 -61
  %9481 = bitcast i16* %9480 to <8 x i16>*
  %9482 = load <8 x i16>, <8 x i16>* %9481, align 2, !tbaa !382
  %9483 = getelementptr inbounds i16, i16* %9383, i64 -53
  %9484 = bitcast i16* %9483 to <8 x i16>*
  %9485 = load <8 x i16>, <8 x i16>* %9484, align 2, !tbaa !382
  %9486 = getelementptr inbounds i16, i16* %9383, i64 -45
  %9487 = bitcast i16* %9486 to <8 x i16>*
  %9488 = load <8 x i16>, <8 x i16>* %9487, align 2, !tbaa !382
  %9489 = getelementptr inbounds i16, i16* %9383, i64 -37
  %9490 = bitcast i16* %9489 to <8 x i16>*
  %9491 = load <8 x i16>, <8 x i16>* %9490, align 2, !tbaa !382
  %9492 = getelementptr inbounds i16, i16* %9383, i64 -29
  %9493 = bitcast i16* %9492 to <8 x i16>*
  %9494 = load <8 x i16>, <8 x i16>* %9493, align 2, !tbaa !382
  %9495 = getelementptr inbounds i16, i16* %9383, i64 -21
  %9496 = bitcast i16* %9495 to <8 x i16>*
  %9497 = load <8 x i16>, <8 x i16>* %9496, align 2, !tbaa !382
  %9498 = getelementptr inbounds i16, i16* %9383, i64 -13
  %9499 = bitcast i16* %9498 to <8 x i16>*
  %9500 = load <8 x i16>, <8 x i16>* %9499, align 2, !tbaa !382
  %9501 = getelementptr inbounds i16, i16* %9383, i64 -5
  %9502 = bitcast i16* %9501 to <8 x i16>*
  %9503 = load <8 x i16>, <8 x i16>* %9502, align 2, !tbaa !382
  %9504 = add <8 x i16> %9410, %9386
  %9505 = add <8 x i16> %9504, %9434
  %9506 = add <8 x i16> %9505, %9458
  %9507 = add <8 x i16> %9506, %9482
  %9508 = add <8 x i16> %9413, %9389
  %9509 = add <8 x i16> %9508, %9437
  %9510 = add <8 x i16> %9509, %9461
  %9511 = add <8 x i16> %9510, %9485
  %9512 = add <8 x i16> %9416, %9392
  %9513 = add <8 x i16> %9512, %9440
  %9514 = add <8 x i16> %9513, %9464
  %9515 = add <8 x i16> %9514, %9488
  %9516 = add <8 x i16> %9419, %9395
  %9517 = add <8 x i16> %9516, %9443
  %9518 = add <8 x i16> %9517, %9467
  %9519 = add <8 x i16> %9518, %9491
  %9520 = add <8 x i16> %9422, %9398
  %9521 = add <8 x i16> %9520, %9446
  %9522 = add <8 x i16> %9521, %9470
  %9523 = add <8 x i16> %9522, %9494
  %9524 = add <8 x i16> %9425, %9401
  %9525 = add <8 x i16> %9524, %9449
  %9526 = add <8 x i16> %9525, %9473
  %9527 = add <8 x i16> %9526, %9497
  %9528 = add <8 x i16> %9428, %9404
  %9529 = add <8 x i16> %9528, %9452
  %9530 = add <8 x i16> %9529, %9476
  %9531 = add <8 x i16> %9530, %9500
  %9532 = add <8 x i16> %9431, %9407
  %9533 = add <8 x i16> %9532, %9455
  %9534 = add <8 x i16> %9533, %9479
  %9535 = add <8 x i16> %9534, %9503
  %9536 = shufflevector <8 x i16> %9535, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %9537 = shufflevector <16 x i16> %9536, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %9538 = shufflevector <32 x i16> %9537, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %9539 = shufflevector <8 x i16> %9507, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9540 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9539, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9541 = shufflevector <8 x i16> %9507, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9542 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9541, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9543 = shufflevector <8 x i16> %9511, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9544 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9543, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9545 = shufflevector <8 x i16> %9511, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9546 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9545, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9547 = shufflevector <8 x i16> %9515, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9548 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9547, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9549 = shufflevector <8 x i16> %9515, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9550 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9549, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9551 = shufflevector <8 x i16> %9519, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9552 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9551, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9553 = shufflevector <8 x i16> %9519, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9554 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9553, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9555 = shufflevector <8 x i16> %9523, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9556 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9555, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9557 = shufflevector <8 x i16> %9523, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9558 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9557, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9559 = shufflevector <8 x i16> %9527, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9560 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9559, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9561 = shufflevector <8 x i16> %9527, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9562 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9561, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9563 = shufflevector <8 x i16> %9531, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9564 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9563, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9565 = shufflevector <8 x i16> %9531, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9566 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9565, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9567 = shufflevector <8 x i16> %9535, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9568 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9567, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9569 = shufflevector <64 x i16> %9538, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %9570 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9569, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9571 = shufflevector <4 x i32> %9540, <4 x i32> %9542, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9572 = shufflevector <4 x i32> %9544, <4 x i32> %9546, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9573 = shufflevector <4 x i32> %9548, <4 x i32> %9550, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9574 = shufflevector <4 x i32> %9552, <4 x i32> %9554, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9575 = shufflevector <4 x i32> %9556, <4 x i32> %9558, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9576 = shufflevector <4 x i32> %9560, <4 x i32> %9562, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9577 = shufflevector <4 x i32> %9564, <4 x i32> %9566, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9578 = shufflevector <4 x i32> %9568, <4 x i32> %9570, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9579 = shufflevector <8 x i32> %9571, <8 x i32> %9572, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9580 = shufflevector <8 x i32> %9573, <8 x i32> %9574, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9581 = shufflevector <8 x i32> %9575, <8 x i32> %9576, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9582 = shufflevector <8 x i32> %9577, <8 x i32> %9578, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9583 = shufflevector <16 x i32> %9579, <16 x i32> %9580, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9584 = shufflevector <16 x i32> %9581, <16 x i32> %9582, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9585 = shufflevector <32 x i32> %9583, <32 x i32> %9584, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9586 = lshr <64 x i32> %9585, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %9587 = trunc <64 x i32> %9586 to <64 x i16>
  %9588 = shufflevector <64 x i16> %9587, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9589 = sext i32 %blur_x.s0.x.v1.base.s78 to i64
  %9590 = add nsw i64 %9589, %9379
  %9591 = getelementptr inbounds i16, i16* %blur_x56, i64 %9590
  %9592 = bitcast i16* %9591 to <8 x i16>*
  store <8 x i16> %9588, <8 x i16>* %9592, align 2, !tbaa !385
  %9593 = shufflevector <64 x i16> %9587, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9594 = getelementptr inbounds i16, i16* %9591, i64 8
  %9595 = bitcast i16* %9594 to <8 x i16>*
  store <8 x i16> %9593, <8 x i16>* %9595, align 2, !tbaa !385
  %9596 = shufflevector <64 x i16> %9587, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %9597 = getelementptr inbounds i16, i16* %9591, i64 16
  %9598 = bitcast i16* %9597 to <8 x i16>*
  store <8 x i16> %9596, <8 x i16>* %9598, align 2, !tbaa !385
  %9599 = shufflevector <64 x i16> %9587, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9600 = getelementptr inbounds i16, i16* %9591, i64 24
  %9601 = bitcast i16* %9600 to <8 x i16>*
  store <8 x i16> %9599, <8 x i16>* %9601, align 2, !tbaa !385
  %9602 = shufflevector <64 x i16> %9587, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %9603 = getelementptr inbounds i16, i16* %9591, i64 32
  %9604 = bitcast i16* %9603 to <8 x i16>*
  store <8 x i16> %9602, <8 x i16>* %9604, align 2, !tbaa !385
  %9605 = shufflevector <64 x i16> %9587, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %9606 = getelementptr inbounds i16, i16* %9591, i64 40
  %9607 = bitcast i16* %9606 to <8 x i16>*
  store <8 x i16> %9605, <8 x i16>* %9607, align 2, !tbaa !385
  %9608 = shufflevector <64 x i16> %9587, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %9609 = getelementptr inbounds i16, i16* %9591, i64 48
  %9610 = bitcast i16* %9609 to <8 x i16>*
  store <8 x i16> %9608, <8 x i16>* %9610, align 2, !tbaa !385
  %9611 = shufflevector <64 x i16> %9587, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9612 = getelementptr inbounds i16, i16* %9591, i64 56
  %9613 = bitcast i16* %9612 to <8 x i16>*
  store <8 x i16> %9611, <8 x i16>* %9613, align 2, !tbaa !385
  %9614 = add nuw nsw i32 %blur_x.s0.x.x.rebased77, 1
  %.not138 = icmp eq i64 %indvars.iv.next187.phi, %7303
  br i1 %.not138, label %"end for blur_x.s0.x.x.rebased76", label %"for blur_x.s0.x.x.rebased75.for blur_x.s0.x.x.rebased75_crit_edge"

"for blur_x.s0.x.x.rebased75.for blur_x.s0.x.x.rebased75_crit_edge": ; preds = %"for blur_x.s0.x.x.rebased75"
  %indvars.iv.next187.1 = add nuw nsw i64 %indvars.iv.next187.phi, 1
  br label %"for blur_x.s0.x.x.rebased75"

"end for blur_x.s0.x.x.rebased76":                ; preds = %"for blur_x.s0.x.x.rebased75", %"end for blur_x.s0.x.x68"
  br i1 %7295, label %"for blur_x.s0.x.x.rebased82.preheader", label %"end for blur_x.s0.x.x.rebased83", !prof !381

"for blur_x.s0.x.x.rebased82.preheader":          ; preds = %"end for blur_x.s0.x.x.rebased76"
  %9615 = insertelement <64 x i32> undef, i32 %t24166, i32 0
  %t20186 = shufflevector <64 x i32> %9615, <64 x i32> undef, <64 x i32> zeroinitializer
  %9616 = sext i32 %t24265 to i64
  br label %"for blur_x.s0.x.x.rebased82"

"for blur_x.s0.x.x.rebased82":                    ; preds = %"for blur_x.s0.x.x.rebased82.preheader", %"for blur_x.s0.x.x.rebased82"
  %blur_x.s0.x.x.rebased84 = phi i32 [ %11664, %"for blur_x.s0.x.x.rebased82" ], [ 0, %"for blur_x.s0.x.x.rebased82.preheader" ]
  %9617 = add nsw i32 %blur_x.s0.x.x.rebased84, %t21441
  %9618 = shl nsw i32 %9617, 6
  %a16 = add nsw i32 %9618, %t21542
  %9619 = icmp slt i32 %a16, %b23
  %blur_x.s0.x.v1.base.s85 = select i1 %9619, i32 %a16, i32 %b23
  %9620 = add nsw i32 %blur_x.s0.x.v1.base.s85, -63
  %9621 = insertelement <64 x i32> undef, i32 %9620, i32 0
  %9622 = shufflevector <64 x i32> %9621, <64 x i32> undef, <64 x i32> zeroinitializer
  %9623 = add nsw <64 x i32> %9622, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9624 = shufflevector <64 x i32> %9623, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9625 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9624, <4 x i32> %7290)
  %9626 = shufflevector <64 x i32> %9623, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9627 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9626, <4 x i32> %7290)
  %9628 = shufflevector <64 x i32> %9623, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9629 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9628, <4 x i32> %7290)
  %9630 = shufflevector <64 x i32> %9623, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %9631 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9630, <4 x i32> %7290)
  %9632 = shufflevector <64 x i32> %9623, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %9633 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9632, <4 x i32> %7290)
  %9634 = shufflevector <64 x i32> %9623, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %9635 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9634, <4 x i32> %7290)
  %9636 = shufflevector <64 x i32> %9623, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %9637 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9636, <4 x i32> %7290)
  %9638 = shufflevector <64 x i32> %9623, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %9639 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9638, <4 x i32> %7290)
  %9640 = shufflevector <64 x i32> %9623, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %9641 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9640, <4 x i32> %7290)
  %9642 = shufflevector <64 x i32> %9623, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %9643 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9642, <4 x i32> %7290)
  %9644 = shufflevector <64 x i32> %9623, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %9645 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9644, <4 x i32> %7290)
  %9646 = shufflevector <64 x i32> %9623, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %9647 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9646, <4 x i32> %7290)
  %9648 = shufflevector <64 x i32> %9623, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %9649 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9648, <4 x i32> %7290)
  %9650 = shufflevector <64 x i32> %9623, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %9651 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9650, <4 x i32> %7290)
  %9652 = shufflevector <64 x i32> %9623, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %9653 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9652, <4 x i32> %7290)
  %9654 = shufflevector <64 x i32> %9623, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %9655 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %9654, <4 x i32> %7290)
  %9656 = shufflevector <4 x i32> %9655, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %9657 = shufflevector <8 x i32> %9656, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %9658 = shufflevector <16 x i32> %9657, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %9659 = shufflevector <32 x i32> %9658, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %9660 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9625, <4 x i32> %7292)
  %9661 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9627, <4 x i32> %7292)
  %9662 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9629, <4 x i32> %7292)
  %9663 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9631, <4 x i32> %7292)
  %9664 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9633, <4 x i32> %7292)
  %9665 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9635, <4 x i32> %7292)
  %9666 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9637, <4 x i32> %7292)
  %9667 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9639, <4 x i32> %7292)
  %9668 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9641, <4 x i32> %7292)
  %9669 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9643, <4 x i32> %7292)
  %9670 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9645, <4 x i32> %7292)
  %9671 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9647, <4 x i32> %7292)
  %9672 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9649, <4 x i32> %7292)
  %9673 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9651, <4 x i32> %7292)
  %9674 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9653, <4 x i32> %7292)
  %9675 = shufflevector <64 x i32> %9659, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %9676 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %9675, <4 x i32> %7292)
  %9677 = shufflevector <4 x i32> %9660, <4 x i32> %9661, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9678 = shufflevector <4 x i32> %9662, <4 x i32> %9663, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9679 = shufflevector <4 x i32> %9664, <4 x i32> %9665, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9680 = shufflevector <4 x i32> %9666, <4 x i32> %9667, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9681 = shufflevector <4 x i32> %9668, <4 x i32> %9669, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9682 = shufflevector <4 x i32> %9670, <4 x i32> %9671, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9683 = shufflevector <4 x i32> %9672, <4 x i32> %9673, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9684 = shufflevector <4 x i32> %9674, <4 x i32> %9676, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9685 = shufflevector <8 x i32> %9677, <8 x i32> %9678, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9686 = shufflevector <8 x i32> %9679, <8 x i32> %9680, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9687 = shufflevector <8 x i32> %9681, <8 x i32> %9682, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9688 = shufflevector <8 x i32> %9683, <8 x i32> %9684, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9689 = shufflevector <16 x i32> %9685, <16 x i32> %9686, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9690 = shufflevector <16 x i32> %9687, <16 x i32> %9688, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9691 = shufflevector <32 x i32> %9689, <32 x i32> %9690, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9692 = add nsw <64 x i32> %9691, %t20186
  %9693 = extractelement <64 x i32> %9692, i32 0
  %9694 = sext i32 %9693 to i64
  %9695 = getelementptr inbounds i16, i16* %7293, i64 %9694
  %9696 = load i16, i16* %9695, align 2, !tbaa !382
  %9697 = insertelement <64 x i16> undef, i16 %9696, i32 0
  %9698 = extractelement <64 x i32> %9692, i32 1
  %9699 = sext i32 %9698 to i64
  %9700 = getelementptr inbounds i16, i16* %7293, i64 %9699
  %9701 = load i16, i16* %9700, align 2, !tbaa !382
  %9702 = insertelement <64 x i16> %9697, i16 %9701, i32 1
  %9703 = extractelement <64 x i32> %9692, i32 2
  %9704 = sext i32 %9703 to i64
  %9705 = getelementptr inbounds i16, i16* %7293, i64 %9704
  %9706 = load i16, i16* %9705, align 2, !tbaa !382
  %9707 = insertelement <64 x i16> %9702, i16 %9706, i32 2
  %9708 = extractelement <64 x i32> %9692, i32 3
  %9709 = sext i32 %9708 to i64
  %9710 = getelementptr inbounds i16, i16* %7293, i64 %9709
  %9711 = load i16, i16* %9710, align 2, !tbaa !382
  %9712 = insertelement <64 x i16> %9707, i16 %9711, i32 3
  %9713 = extractelement <64 x i32> %9692, i32 4
  %9714 = sext i32 %9713 to i64
  %9715 = getelementptr inbounds i16, i16* %7293, i64 %9714
  %9716 = load i16, i16* %9715, align 2, !tbaa !382
  %9717 = insertelement <64 x i16> %9712, i16 %9716, i32 4
  %9718 = extractelement <64 x i32> %9692, i32 5
  %9719 = sext i32 %9718 to i64
  %9720 = getelementptr inbounds i16, i16* %7293, i64 %9719
  %9721 = load i16, i16* %9720, align 2, !tbaa !382
  %9722 = insertelement <64 x i16> %9717, i16 %9721, i32 5
  %9723 = extractelement <64 x i32> %9692, i32 6
  %9724 = sext i32 %9723 to i64
  %9725 = getelementptr inbounds i16, i16* %7293, i64 %9724
  %9726 = load i16, i16* %9725, align 2, !tbaa !382
  %9727 = insertelement <64 x i16> %9722, i16 %9726, i32 6
  %9728 = extractelement <64 x i32> %9692, i32 7
  %9729 = sext i32 %9728 to i64
  %9730 = getelementptr inbounds i16, i16* %7293, i64 %9729
  %9731 = load i16, i16* %9730, align 2, !tbaa !382
  %9732 = insertelement <64 x i16> %9727, i16 %9731, i32 7
  %9733 = extractelement <64 x i32> %9692, i32 8
  %9734 = sext i32 %9733 to i64
  %9735 = getelementptr inbounds i16, i16* %7293, i64 %9734
  %9736 = load i16, i16* %9735, align 2, !tbaa !382
  %9737 = insertelement <64 x i16> %9732, i16 %9736, i32 8
  %9738 = extractelement <64 x i32> %9692, i32 9
  %9739 = sext i32 %9738 to i64
  %9740 = getelementptr inbounds i16, i16* %7293, i64 %9739
  %9741 = load i16, i16* %9740, align 2, !tbaa !382
  %9742 = insertelement <64 x i16> %9737, i16 %9741, i32 9
  %9743 = extractelement <64 x i32> %9692, i32 10
  %9744 = sext i32 %9743 to i64
  %9745 = getelementptr inbounds i16, i16* %7293, i64 %9744
  %9746 = load i16, i16* %9745, align 2, !tbaa !382
  %9747 = insertelement <64 x i16> %9742, i16 %9746, i32 10
  %9748 = extractelement <64 x i32> %9692, i32 11
  %9749 = sext i32 %9748 to i64
  %9750 = getelementptr inbounds i16, i16* %7293, i64 %9749
  %9751 = load i16, i16* %9750, align 2, !tbaa !382
  %9752 = insertelement <64 x i16> %9747, i16 %9751, i32 11
  %9753 = extractelement <64 x i32> %9692, i32 12
  %9754 = sext i32 %9753 to i64
  %9755 = getelementptr inbounds i16, i16* %7293, i64 %9754
  %9756 = load i16, i16* %9755, align 2, !tbaa !382
  %9757 = insertelement <64 x i16> %9752, i16 %9756, i32 12
  %9758 = extractelement <64 x i32> %9692, i32 13
  %9759 = sext i32 %9758 to i64
  %9760 = getelementptr inbounds i16, i16* %7293, i64 %9759
  %9761 = load i16, i16* %9760, align 2, !tbaa !382
  %9762 = insertelement <64 x i16> %9757, i16 %9761, i32 13
  %9763 = extractelement <64 x i32> %9692, i32 14
  %9764 = sext i32 %9763 to i64
  %9765 = getelementptr inbounds i16, i16* %7293, i64 %9764
  %9766 = load i16, i16* %9765, align 2, !tbaa !382
  %9767 = insertelement <64 x i16> %9762, i16 %9766, i32 14
  %9768 = extractelement <64 x i32> %9692, i32 15
  %9769 = sext i32 %9768 to i64
  %9770 = getelementptr inbounds i16, i16* %7293, i64 %9769
  %9771 = load i16, i16* %9770, align 2, !tbaa !382
  %9772 = insertelement <64 x i16> %9767, i16 %9771, i32 15
  %9773 = extractelement <64 x i32> %9692, i32 16
  %9774 = sext i32 %9773 to i64
  %9775 = getelementptr inbounds i16, i16* %7293, i64 %9774
  %9776 = load i16, i16* %9775, align 2, !tbaa !382
  %9777 = insertelement <64 x i16> %9772, i16 %9776, i32 16
  %9778 = extractelement <64 x i32> %9692, i32 17
  %9779 = sext i32 %9778 to i64
  %9780 = getelementptr inbounds i16, i16* %7293, i64 %9779
  %9781 = load i16, i16* %9780, align 2, !tbaa !382
  %9782 = insertelement <64 x i16> %9777, i16 %9781, i32 17
  %9783 = extractelement <64 x i32> %9692, i32 18
  %9784 = sext i32 %9783 to i64
  %9785 = getelementptr inbounds i16, i16* %7293, i64 %9784
  %9786 = load i16, i16* %9785, align 2, !tbaa !382
  %9787 = insertelement <64 x i16> %9782, i16 %9786, i32 18
  %9788 = extractelement <64 x i32> %9692, i32 19
  %9789 = sext i32 %9788 to i64
  %9790 = getelementptr inbounds i16, i16* %7293, i64 %9789
  %9791 = load i16, i16* %9790, align 2, !tbaa !382
  %9792 = insertelement <64 x i16> %9787, i16 %9791, i32 19
  %9793 = extractelement <64 x i32> %9692, i32 20
  %9794 = sext i32 %9793 to i64
  %9795 = getelementptr inbounds i16, i16* %7293, i64 %9794
  %9796 = load i16, i16* %9795, align 2, !tbaa !382
  %9797 = insertelement <64 x i16> %9792, i16 %9796, i32 20
  %9798 = extractelement <64 x i32> %9692, i32 21
  %9799 = sext i32 %9798 to i64
  %9800 = getelementptr inbounds i16, i16* %7293, i64 %9799
  %9801 = load i16, i16* %9800, align 2, !tbaa !382
  %9802 = insertelement <64 x i16> %9797, i16 %9801, i32 21
  %9803 = extractelement <64 x i32> %9692, i32 22
  %9804 = sext i32 %9803 to i64
  %9805 = getelementptr inbounds i16, i16* %7293, i64 %9804
  %9806 = load i16, i16* %9805, align 2, !tbaa !382
  %9807 = insertelement <64 x i16> %9802, i16 %9806, i32 22
  %9808 = extractelement <64 x i32> %9692, i32 23
  %9809 = sext i32 %9808 to i64
  %9810 = getelementptr inbounds i16, i16* %7293, i64 %9809
  %9811 = load i16, i16* %9810, align 2, !tbaa !382
  %9812 = insertelement <64 x i16> %9807, i16 %9811, i32 23
  %9813 = extractelement <64 x i32> %9692, i32 24
  %9814 = sext i32 %9813 to i64
  %9815 = getelementptr inbounds i16, i16* %7293, i64 %9814
  %9816 = load i16, i16* %9815, align 2, !tbaa !382
  %9817 = insertelement <64 x i16> %9812, i16 %9816, i32 24
  %9818 = extractelement <64 x i32> %9692, i32 25
  %9819 = sext i32 %9818 to i64
  %9820 = getelementptr inbounds i16, i16* %7293, i64 %9819
  %9821 = load i16, i16* %9820, align 2, !tbaa !382
  %9822 = insertelement <64 x i16> %9817, i16 %9821, i32 25
  %9823 = extractelement <64 x i32> %9692, i32 26
  %9824 = sext i32 %9823 to i64
  %9825 = getelementptr inbounds i16, i16* %7293, i64 %9824
  %9826 = load i16, i16* %9825, align 2, !tbaa !382
  %9827 = insertelement <64 x i16> %9822, i16 %9826, i32 26
  %9828 = extractelement <64 x i32> %9692, i32 27
  %9829 = sext i32 %9828 to i64
  %9830 = getelementptr inbounds i16, i16* %7293, i64 %9829
  %9831 = load i16, i16* %9830, align 2, !tbaa !382
  %9832 = insertelement <64 x i16> %9827, i16 %9831, i32 27
  %9833 = extractelement <64 x i32> %9692, i32 28
  %9834 = sext i32 %9833 to i64
  %9835 = getelementptr inbounds i16, i16* %7293, i64 %9834
  %9836 = load i16, i16* %9835, align 2, !tbaa !382
  %9837 = insertelement <64 x i16> %9832, i16 %9836, i32 28
  %9838 = extractelement <64 x i32> %9692, i32 29
  %9839 = sext i32 %9838 to i64
  %9840 = getelementptr inbounds i16, i16* %7293, i64 %9839
  %9841 = load i16, i16* %9840, align 2, !tbaa !382
  %9842 = insertelement <64 x i16> %9837, i16 %9841, i32 29
  %9843 = extractelement <64 x i32> %9692, i32 30
  %9844 = sext i32 %9843 to i64
  %9845 = getelementptr inbounds i16, i16* %7293, i64 %9844
  %9846 = load i16, i16* %9845, align 2, !tbaa !382
  %9847 = insertelement <64 x i16> %9842, i16 %9846, i32 30
  %9848 = extractelement <64 x i32> %9692, i32 31
  %9849 = sext i32 %9848 to i64
  %9850 = getelementptr inbounds i16, i16* %7293, i64 %9849
  %9851 = load i16, i16* %9850, align 2, !tbaa !382
  %9852 = insertelement <64 x i16> %9847, i16 %9851, i32 31
  %9853 = extractelement <64 x i32> %9692, i32 32
  %9854 = sext i32 %9853 to i64
  %9855 = getelementptr inbounds i16, i16* %7293, i64 %9854
  %9856 = load i16, i16* %9855, align 2, !tbaa !382
  %9857 = insertelement <64 x i16> %9852, i16 %9856, i32 32
  %9858 = extractelement <64 x i32> %9692, i32 33
  %9859 = sext i32 %9858 to i64
  %9860 = getelementptr inbounds i16, i16* %7293, i64 %9859
  %9861 = load i16, i16* %9860, align 2, !tbaa !382
  %9862 = insertelement <64 x i16> %9857, i16 %9861, i32 33
  %9863 = extractelement <64 x i32> %9692, i32 34
  %9864 = sext i32 %9863 to i64
  %9865 = getelementptr inbounds i16, i16* %7293, i64 %9864
  %9866 = load i16, i16* %9865, align 2, !tbaa !382
  %9867 = insertelement <64 x i16> %9862, i16 %9866, i32 34
  %9868 = extractelement <64 x i32> %9692, i32 35
  %9869 = sext i32 %9868 to i64
  %9870 = getelementptr inbounds i16, i16* %7293, i64 %9869
  %9871 = load i16, i16* %9870, align 2, !tbaa !382
  %9872 = insertelement <64 x i16> %9867, i16 %9871, i32 35
  %9873 = extractelement <64 x i32> %9692, i32 36
  %9874 = sext i32 %9873 to i64
  %9875 = getelementptr inbounds i16, i16* %7293, i64 %9874
  %9876 = load i16, i16* %9875, align 2, !tbaa !382
  %9877 = insertelement <64 x i16> %9872, i16 %9876, i32 36
  %9878 = extractelement <64 x i32> %9692, i32 37
  %9879 = sext i32 %9878 to i64
  %9880 = getelementptr inbounds i16, i16* %7293, i64 %9879
  %9881 = load i16, i16* %9880, align 2, !tbaa !382
  %9882 = insertelement <64 x i16> %9877, i16 %9881, i32 37
  %9883 = extractelement <64 x i32> %9692, i32 38
  %9884 = sext i32 %9883 to i64
  %9885 = getelementptr inbounds i16, i16* %7293, i64 %9884
  %9886 = load i16, i16* %9885, align 2, !tbaa !382
  %9887 = insertelement <64 x i16> %9882, i16 %9886, i32 38
  %9888 = extractelement <64 x i32> %9692, i32 39
  %9889 = sext i32 %9888 to i64
  %9890 = getelementptr inbounds i16, i16* %7293, i64 %9889
  %9891 = load i16, i16* %9890, align 2, !tbaa !382
  %9892 = insertelement <64 x i16> %9887, i16 %9891, i32 39
  %9893 = extractelement <64 x i32> %9692, i32 40
  %9894 = sext i32 %9893 to i64
  %9895 = getelementptr inbounds i16, i16* %7293, i64 %9894
  %9896 = load i16, i16* %9895, align 2, !tbaa !382
  %9897 = insertelement <64 x i16> %9892, i16 %9896, i32 40
  %9898 = extractelement <64 x i32> %9692, i32 41
  %9899 = sext i32 %9898 to i64
  %9900 = getelementptr inbounds i16, i16* %7293, i64 %9899
  %9901 = load i16, i16* %9900, align 2, !tbaa !382
  %9902 = insertelement <64 x i16> %9897, i16 %9901, i32 41
  %9903 = extractelement <64 x i32> %9692, i32 42
  %9904 = sext i32 %9903 to i64
  %9905 = getelementptr inbounds i16, i16* %7293, i64 %9904
  %9906 = load i16, i16* %9905, align 2, !tbaa !382
  %9907 = insertelement <64 x i16> %9902, i16 %9906, i32 42
  %9908 = extractelement <64 x i32> %9692, i32 43
  %9909 = sext i32 %9908 to i64
  %9910 = getelementptr inbounds i16, i16* %7293, i64 %9909
  %9911 = load i16, i16* %9910, align 2, !tbaa !382
  %9912 = insertelement <64 x i16> %9907, i16 %9911, i32 43
  %9913 = extractelement <64 x i32> %9692, i32 44
  %9914 = sext i32 %9913 to i64
  %9915 = getelementptr inbounds i16, i16* %7293, i64 %9914
  %9916 = load i16, i16* %9915, align 2, !tbaa !382
  %9917 = insertelement <64 x i16> %9912, i16 %9916, i32 44
  %9918 = extractelement <64 x i32> %9692, i32 45
  %9919 = sext i32 %9918 to i64
  %9920 = getelementptr inbounds i16, i16* %7293, i64 %9919
  %9921 = load i16, i16* %9920, align 2, !tbaa !382
  %9922 = insertelement <64 x i16> %9917, i16 %9921, i32 45
  %9923 = extractelement <64 x i32> %9692, i32 46
  %9924 = sext i32 %9923 to i64
  %9925 = getelementptr inbounds i16, i16* %7293, i64 %9924
  %9926 = load i16, i16* %9925, align 2, !tbaa !382
  %9927 = insertelement <64 x i16> %9922, i16 %9926, i32 46
  %9928 = extractelement <64 x i32> %9692, i32 47
  %9929 = sext i32 %9928 to i64
  %9930 = getelementptr inbounds i16, i16* %7293, i64 %9929
  %9931 = load i16, i16* %9930, align 2, !tbaa !382
  %9932 = insertelement <64 x i16> %9927, i16 %9931, i32 47
  %9933 = extractelement <64 x i32> %9692, i32 48
  %9934 = sext i32 %9933 to i64
  %9935 = getelementptr inbounds i16, i16* %7293, i64 %9934
  %9936 = load i16, i16* %9935, align 2, !tbaa !382
  %9937 = insertelement <64 x i16> %9932, i16 %9936, i32 48
  %9938 = extractelement <64 x i32> %9692, i32 49
  %9939 = sext i32 %9938 to i64
  %9940 = getelementptr inbounds i16, i16* %7293, i64 %9939
  %9941 = load i16, i16* %9940, align 2, !tbaa !382
  %9942 = insertelement <64 x i16> %9937, i16 %9941, i32 49
  %9943 = extractelement <64 x i32> %9692, i32 50
  %9944 = sext i32 %9943 to i64
  %9945 = getelementptr inbounds i16, i16* %7293, i64 %9944
  %9946 = load i16, i16* %9945, align 2, !tbaa !382
  %9947 = insertelement <64 x i16> %9942, i16 %9946, i32 50
  %9948 = extractelement <64 x i32> %9692, i32 51
  %9949 = sext i32 %9948 to i64
  %9950 = getelementptr inbounds i16, i16* %7293, i64 %9949
  %9951 = load i16, i16* %9950, align 2, !tbaa !382
  %9952 = insertelement <64 x i16> %9947, i16 %9951, i32 51
  %9953 = extractelement <64 x i32> %9692, i32 52
  %9954 = sext i32 %9953 to i64
  %9955 = getelementptr inbounds i16, i16* %7293, i64 %9954
  %9956 = load i16, i16* %9955, align 2, !tbaa !382
  %9957 = insertelement <64 x i16> %9952, i16 %9956, i32 52
  %9958 = extractelement <64 x i32> %9692, i32 53
  %9959 = sext i32 %9958 to i64
  %9960 = getelementptr inbounds i16, i16* %7293, i64 %9959
  %9961 = load i16, i16* %9960, align 2, !tbaa !382
  %9962 = insertelement <64 x i16> %9957, i16 %9961, i32 53
  %9963 = extractelement <64 x i32> %9692, i32 54
  %9964 = sext i32 %9963 to i64
  %9965 = getelementptr inbounds i16, i16* %7293, i64 %9964
  %9966 = load i16, i16* %9965, align 2, !tbaa !382
  %9967 = insertelement <64 x i16> %9962, i16 %9966, i32 54
  %9968 = extractelement <64 x i32> %9692, i32 55
  %9969 = sext i32 %9968 to i64
  %9970 = getelementptr inbounds i16, i16* %7293, i64 %9969
  %9971 = load i16, i16* %9970, align 2, !tbaa !382
  %9972 = insertelement <64 x i16> %9967, i16 %9971, i32 55
  %9973 = extractelement <64 x i32> %9692, i32 56
  %9974 = sext i32 %9973 to i64
  %9975 = getelementptr inbounds i16, i16* %7293, i64 %9974
  %9976 = load i16, i16* %9975, align 2, !tbaa !382
  %9977 = insertelement <64 x i16> %9972, i16 %9976, i32 56
  %9978 = extractelement <64 x i32> %9692, i32 57
  %9979 = sext i32 %9978 to i64
  %9980 = getelementptr inbounds i16, i16* %7293, i64 %9979
  %9981 = load i16, i16* %9980, align 2, !tbaa !382
  %9982 = insertelement <64 x i16> %9977, i16 %9981, i32 57
  %9983 = extractelement <64 x i32> %9692, i32 58
  %9984 = sext i32 %9983 to i64
  %9985 = getelementptr inbounds i16, i16* %7293, i64 %9984
  %9986 = load i16, i16* %9985, align 2, !tbaa !382
  %9987 = insertelement <64 x i16> %9982, i16 %9986, i32 58
  %9988 = extractelement <64 x i32> %9692, i32 59
  %9989 = sext i32 %9988 to i64
  %9990 = getelementptr inbounds i16, i16* %7293, i64 %9989
  %9991 = load i16, i16* %9990, align 2, !tbaa !382
  %9992 = insertelement <64 x i16> %9987, i16 %9991, i32 59
  %9993 = extractelement <64 x i32> %9692, i32 60
  %9994 = sext i32 %9993 to i64
  %9995 = getelementptr inbounds i16, i16* %7293, i64 %9994
  %9996 = load i16, i16* %9995, align 2, !tbaa !382
  %9997 = insertelement <64 x i16> %9992, i16 %9996, i32 60
  %9998 = extractelement <64 x i32> %9692, i32 61
  %9999 = sext i32 %9998 to i64
  %10000 = getelementptr inbounds i16, i16* %7293, i64 %9999
  %10001 = load i16, i16* %10000, align 2, !tbaa !382
  %10002 = insertelement <64 x i16> %9997, i16 %10001, i32 61
  %10003 = extractelement <64 x i32> %9692, i32 62
  %10004 = sext i32 %10003 to i64
  %10005 = getelementptr inbounds i16, i16* %7293, i64 %10004
  %10006 = load i16, i16* %10005, align 2, !tbaa !382
  %10007 = insertelement <64 x i16> %10002, i16 %10006, i32 62
  %10008 = extractelement <64 x i32> %9692, i32 63
  %10009 = sext i32 %10008 to i64
  %10010 = getelementptr inbounds i16, i16* %7293, i64 %10009
  %10011 = load i16, i16* %10010, align 2, !tbaa !382
  %10012 = insertelement <64 x i16> %10007, i16 %10011, i32 63
  %10013 = add nsw i32 %blur_x.s0.x.v1.base.s85, -64
  %10014 = insertelement <64 x i32> undef, i32 %10013, i32 0
  %10015 = shufflevector <64 x i32> %10014, <64 x i32> undef, <64 x i32> zeroinitializer
  %10016 = add nsw <64 x i32> %10015, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10017 = shufflevector <64 x i32> %10016, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10018 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10017, <4 x i32> %7290)
  %10019 = shufflevector <64 x i32> %10016, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10020 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10019, <4 x i32> %7290)
  %10021 = shufflevector <64 x i32> %10016, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %10022 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10021, <4 x i32> %7290)
  %10023 = shufflevector <64 x i32> %10016, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %10024 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10023, <4 x i32> %7290)
  %10025 = shufflevector <64 x i32> %10016, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %10026 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10025, <4 x i32> %7290)
  %10027 = shufflevector <64 x i32> %10016, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %10028 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10027, <4 x i32> %7290)
  %10029 = shufflevector <64 x i32> %10016, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %10030 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10029, <4 x i32> %7290)
  %10031 = shufflevector <64 x i32> %10016, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %10032 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10031, <4 x i32> %7290)
  %10033 = shufflevector <64 x i32> %10016, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %10034 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10033, <4 x i32> %7290)
  %10035 = shufflevector <64 x i32> %10016, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %10036 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10035, <4 x i32> %7290)
  %10037 = shufflevector <64 x i32> %10016, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %10038 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10037, <4 x i32> %7290)
  %10039 = shufflevector <64 x i32> %10016, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %10040 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10039, <4 x i32> %7290)
  %10041 = shufflevector <64 x i32> %10016, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %10042 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10041, <4 x i32> %7290)
  %10043 = shufflevector <64 x i32> %10016, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %10044 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10043, <4 x i32> %7290)
  %10045 = shufflevector <64 x i32> %10016, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %10046 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10045, <4 x i32> %7290)
  %10047 = shufflevector <64 x i32> %10016, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %10048 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10047, <4 x i32> %7290)
  %10049 = shufflevector <4 x i32> %10048, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %10050 = shufflevector <8 x i32> %10049, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %10051 = shufflevector <16 x i32> %10050, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %10052 = shufflevector <32 x i32> %10051, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %10053 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10018, <4 x i32> %7292)
  %10054 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10020, <4 x i32> %7292)
  %10055 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10022, <4 x i32> %7292)
  %10056 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10024, <4 x i32> %7292)
  %10057 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10026, <4 x i32> %7292)
  %10058 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10028, <4 x i32> %7292)
  %10059 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10030, <4 x i32> %7292)
  %10060 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10032, <4 x i32> %7292)
  %10061 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10034, <4 x i32> %7292)
  %10062 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10036, <4 x i32> %7292)
  %10063 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10038, <4 x i32> %7292)
  %10064 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10040, <4 x i32> %7292)
  %10065 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10042, <4 x i32> %7292)
  %10066 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10044, <4 x i32> %7292)
  %10067 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10046, <4 x i32> %7292)
  %10068 = shufflevector <64 x i32> %10052, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %10069 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10068, <4 x i32> %7292)
  %10070 = shufflevector <4 x i32> %10053, <4 x i32> %10054, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10071 = shufflevector <4 x i32> %10055, <4 x i32> %10056, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10072 = shufflevector <4 x i32> %10057, <4 x i32> %10058, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10073 = shufflevector <4 x i32> %10059, <4 x i32> %10060, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10074 = shufflevector <4 x i32> %10061, <4 x i32> %10062, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10075 = shufflevector <4 x i32> %10063, <4 x i32> %10064, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10076 = shufflevector <4 x i32> %10065, <4 x i32> %10066, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10077 = shufflevector <4 x i32> %10067, <4 x i32> %10069, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10078 = shufflevector <8 x i32> %10070, <8 x i32> %10071, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10079 = shufflevector <8 x i32> %10072, <8 x i32> %10073, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10080 = shufflevector <8 x i32> %10074, <8 x i32> %10075, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10081 = shufflevector <8 x i32> %10076, <8 x i32> %10077, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10082 = shufflevector <16 x i32> %10078, <16 x i32> %10079, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10083 = shufflevector <16 x i32> %10080, <16 x i32> %10081, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10084 = shufflevector <32 x i32> %10082, <32 x i32> %10083, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10085 = add nsw <64 x i32> %10084, %t20186
  %10086 = extractelement <64 x i32> %10085, i32 0
  %10087 = sext i32 %10086 to i64
  %10088 = getelementptr inbounds i16, i16* %7293, i64 %10087
  %10089 = load i16, i16* %10088, align 2, !tbaa !382
  %10090 = insertelement <64 x i16> undef, i16 %10089, i32 0
  %10091 = extractelement <64 x i32> %10085, i32 1
  %10092 = sext i32 %10091 to i64
  %10093 = getelementptr inbounds i16, i16* %7293, i64 %10092
  %10094 = load i16, i16* %10093, align 2, !tbaa !382
  %10095 = insertelement <64 x i16> %10090, i16 %10094, i32 1
  %10096 = extractelement <64 x i32> %10085, i32 2
  %10097 = sext i32 %10096 to i64
  %10098 = getelementptr inbounds i16, i16* %7293, i64 %10097
  %10099 = load i16, i16* %10098, align 2, !tbaa !382
  %10100 = insertelement <64 x i16> %10095, i16 %10099, i32 2
  %10101 = extractelement <64 x i32> %10085, i32 3
  %10102 = sext i32 %10101 to i64
  %10103 = getelementptr inbounds i16, i16* %7293, i64 %10102
  %10104 = load i16, i16* %10103, align 2, !tbaa !382
  %10105 = insertelement <64 x i16> %10100, i16 %10104, i32 3
  %10106 = extractelement <64 x i32> %10085, i32 4
  %10107 = sext i32 %10106 to i64
  %10108 = getelementptr inbounds i16, i16* %7293, i64 %10107
  %10109 = load i16, i16* %10108, align 2, !tbaa !382
  %10110 = insertelement <64 x i16> %10105, i16 %10109, i32 4
  %10111 = extractelement <64 x i32> %10085, i32 5
  %10112 = sext i32 %10111 to i64
  %10113 = getelementptr inbounds i16, i16* %7293, i64 %10112
  %10114 = load i16, i16* %10113, align 2, !tbaa !382
  %10115 = insertelement <64 x i16> %10110, i16 %10114, i32 5
  %10116 = extractelement <64 x i32> %10085, i32 6
  %10117 = sext i32 %10116 to i64
  %10118 = getelementptr inbounds i16, i16* %7293, i64 %10117
  %10119 = load i16, i16* %10118, align 2, !tbaa !382
  %10120 = insertelement <64 x i16> %10115, i16 %10119, i32 6
  %10121 = extractelement <64 x i32> %10085, i32 7
  %10122 = sext i32 %10121 to i64
  %10123 = getelementptr inbounds i16, i16* %7293, i64 %10122
  %10124 = load i16, i16* %10123, align 2, !tbaa !382
  %10125 = insertelement <64 x i16> %10120, i16 %10124, i32 7
  %10126 = extractelement <64 x i32> %10085, i32 8
  %10127 = sext i32 %10126 to i64
  %10128 = getelementptr inbounds i16, i16* %7293, i64 %10127
  %10129 = load i16, i16* %10128, align 2, !tbaa !382
  %10130 = insertelement <64 x i16> %10125, i16 %10129, i32 8
  %10131 = extractelement <64 x i32> %10085, i32 9
  %10132 = sext i32 %10131 to i64
  %10133 = getelementptr inbounds i16, i16* %7293, i64 %10132
  %10134 = load i16, i16* %10133, align 2, !tbaa !382
  %10135 = insertelement <64 x i16> %10130, i16 %10134, i32 9
  %10136 = extractelement <64 x i32> %10085, i32 10
  %10137 = sext i32 %10136 to i64
  %10138 = getelementptr inbounds i16, i16* %7293, i64 %10137
  %10139 = load i16, i16* %10138, align 2, !tbaa !382
  %10140 = insertelement <64 x i16> %10135, i16 %10139, i32 10
  %10141 = extractelement <64 x i32> %10085, i32 11
  %10142 = sext i32 %10141 to i64
  %10143 = getelementptr inbounds i16, i16* %7293, i64 %10142
  %10144 = load i16, i16* %10143, align 2, !tbaa !382
  %10145 = insertelement <64 x i16> %10140, i16 %10144, i32 11
  %10146 = extractelement <64 x i32> %10085, i32 12
  %10147 = sext i32 %10146 to i64
  %10148 = getelementptr inbounds i16, i16* %7293, i64 %10147
  %10149 = load i16, i16* %10148, align 2, !tbaa !382
  %10150 = insertelement <64 x i16> %10145, i16 %10149, i32 12
  %10151 = extractelement <64 x i32> %10085, i32 13
  %10152 = sext i32 %10151 to i64
  %10153 = getelementptr inbounds i16, i16* %7293, i64 %10152
  %10154 = load i16, i16* %10153, align 2, !tbaa !382
  %10155 = insertelement <64 x i16> %10150, i16 %10154, i32 13
  %10156 = extractelement <64 x i32> %10085, i32 14
  %10157 = sext i32 %10156 to i64
  %10158 = getelementptr inbounds i16, i16* %7293, i64 %10157
  %10159 = load i16, i16* %10158, align 2, !tbaa !382
  %10160 = insertelement <64 x i16> %10155, i16 %10159, i32 14
  %10161 = extractelement <64 x i32> %10085, i32 15
  %10162 = sext i32 %10161 to i64
  %10163 = getelementptr inbounds i16, i16* %7293, i64 %10162
  %10164 = load i16, i16* %10163, align 2, !tbaa !382
  %10165 = insertelement <64 x i16> %10160, i16 %10164, i32 15
  %10166 = extractelement <64 x i32> %10085, i32 16
  %10167 = sext i32 %10166 to i64
  %10168 = getelementptr inbounds i16, i16* %7293, i64 %10167
  %10169 = load i16, i16* %10168, align 2, !tbaa !382
  %10170 = insertelement <64 x i16> %10165, i16 %10169, i32 16
  %10171 = extractelement <64 x i32> %10085, i32 17
  %10172 = sext i32 %10171 to i64
  %10173 = getelementptr inbounds i16, i16* %7293, i64 %10172
  %10174 = load i16, i16* %10173, align 2, !tbaa !382
  %10175 = insertelement <64 x i16> %10170, i16 %10174, i32 17
  %10176 = extractelement <64 x i32> %10085, i32 18
  %10177 = sext i32 %10176 to i64
  %10178 = getelementptr inbounds i16, i16* %7293, i64 %10177
  %10179 = load i16, i16* %10178, align 2, !tbaa !382
  %10180 = insertelement <64 x i16> %10175, i16 %10179, i32 18
  %10181 = extractelement <64 x i32> %10085, i32 19
  %10182 = sext i32 %10181 to i64
  %10183 = getelementptr inbounds i16, i16* %7293, i64 %10182
  %10184 = load i16, i16* %10183, align 2, !tbaa !382
  %10185 = insertelement <64 x i16> %10180, i16 %10184, i32 19
  %10186 = extractelement <64 x i32> %10085, i32 20
  %10187 = sext i32 %10186 to i64
  %10188 = getelementptr inbounds i16, i16* %7293, i64 %10187
  %10189 = load i16, i16* %10188, align 2, !tbaa !382
  %10190 = insertelement <64 x i16> %10185, i16 %10189, i32 20
  %10191 = extractelement <64 x i32> %10085, i32 21
  %10192 = sext i32 %10191 to i64
  %10193 = getelementptr inbounds i16, i16* %7293, i64 %10192
  %10194 = load i16, i16* %10193, align 2, !tbaa !382
  %10195 = insertelement <64 x i16> %10190, i16 %10194, i32 21
  %10196 = extractelement <64 x i32> %10085, i32 22
  %10197 = sext i32 %10196 to i64
  %10198 = getelementptr inbounds i16, i16* %7293, i64 %10197
  %10199 = load i16, i16* %10198, align 2, !tbaa !382
  %10200 = insertelement <64 x i16> %10195, i16 %10199, i32 22
  %10201 = extractelement <64 x i32> %10085, i32 23
  %10202 = sext i32 %10201 to i64
  %10203 = getelementptr inbounds i16, i16* %7293, i64 %10202
  %10204 = load i16, i16* %10203, align 2, !tbaa !382
  %10205 = insertelement <64 x i16> %10200, i16 %10204, i32 23
  %10206 = extractelement <64 x i32> %10085, i32 24
  %10207 = sext i32 %10206 to i64
  %10208 = getelementptr inbounds i16, i16* %7293, i64 %10207
  %10209 = load i16, i16* %10208, align 2, !tbaa !382
  %10210 = insertelement <64 x i16> %10205, i16 %10209, i32 24
  %10211 = extractelement <64 x i32> %10085, i32 25
  %10212 = sext i32 %10211 to i64
  %10213 = getelementptr inbounds i16, i16* %7293, i64 %10212
  %10214 = load i16, i16* %10213, align 2, !tbaa !382
  %10215 = insertelement <64 x i16> %10210, i16 %10214, i32 25
  %10216 = extractelement <64 x i32> %10085, i32 26
  %10217 = sext i32 %10216 to i64
  %10218 = getelementptr inbounds i16, i16* %7293, i64 %10217
  %10219 = load i16, i16* %10218, align 2, !tbaa !382
  %10220 = insertelement <64 x i16> %10215, i16 %10219, i32 26
  %10221 = extractelement <64 x i32> %10085, i32 27
  %10222 = sext i32 %10221 to i64
  %10223 = getelementptr inbounds i16, i16* %7293, i64 %10222
  %10224 = load i16, i16* %10223, align 2, !tbaa !382
  %10225 = insertelement <64 x i16> %10220, i16 %10224, i32 27
  %10226 = extractelement <64 x i32> %10085, i32 28
  %10227 = sext i32 %10226 to i64
  %10228 = getelementptr inbounds i16, i16* %7293, i64 %10227
  %10229 = load i16, i16* %10228, align 2, !tbaa !382
  %10230 = insertelement <64 x i16> %10225, i16 %10229, i32 28
  %10231 = extractelement <64 x i32> %10085, i32 29
  %10232 = sext i32 %10231 to i64
  %10233 = getelementptr inbounds i16, i16* %7293, i64 %10232
  %10234 = load i16, i16* %10233, align 2, !tbaa !382
  %10235 = insertelement <64 x i16> %10230, i16 %10234, i32 29
  %10236 = extractelement <64 x i32> %10085, i32 30
  %10237 = sext i32 %10236 to i64
  %10238 = getelementptr inbounds i16, i16* %7293, i64 %10237
  %10239 = load i16, i16* %10238, align 2, !tbaa !382
  %10240 = insertelement <64 x i16> %10235, i16 %10239, i32 30
  %10241 = extractelement <64 x i32> %10085, i32 31
  %10242 = sext i32 %10241 to i64
  %10243 = getelementptr inbounds i16, i16* %7293, i64 %10242
  %10244 = load i16, i16* %10243, align 2, !tbaa !382
  %10245 = insertelement <64 x i16> %10240, i16 %10244, i32 31
  %10246 = extractelement <64 x i32> %10085, i32 32
  %10247 = sext i32 %10246 to i64
  %10248 = getelementptr inbounds i16, i16* %7293, i64 %10247
  %10249 = load i16, i16* %10248, align 2, !tbaa !382
  %10250 = insertelement <64 x i16> %10245, i16 %10249, i32 32
  %10251 = extractelement <64 x i32> %10085, i32 33
  %10252 = sext i32 %10251 to i64
  %10253 = getelementptr inbounds i16, i16* %7293, i64 %10252
  %10254 = load i16, i16* %10253, align 2, !tbaa !382
  %10255 = insertelement <64 x i16> %10250, i16 %10254, i32 33
  %10256 = extractelement <64 x i32> %10085, i32 34
  %10257 = sext i32 %10256 to i64
  %10258 = getelementptr inbounds i16, i16* %7293, i64 %10257
  %10259 = load i16, i16* %10258, align 2, !tbaa !382
  %10260 = insertelement <64 x i16> %10255, i16 %10259, i32 34
  %10261 = extractelement <64 x i32> %10085, i32 35
  %10262 = sext i32 %10261 to i64
  %10263 = getelementptr inbounds i16, i16* %7293, i64 %10262
  %10264 = load i16, i16* %10263, align 2, !tbaa !382
  %10265 = insertelement <64 x i16> %10260, i16 %10264, i32 35
  %10266 = extractelement <64 x i32> %10085, i32 36
  %10267 = sext i32 %10266 to i64
  %10268 = getelementptr inbounds i16, i16* %7293, i64 %10267
  %10269 = load i16, i16* %10268, align 2, !tbaa !382
  %10270 = insertelement <64 x i16> %10265, i16 %10269, i32 36
  %10271 = extractelement <64 x i32> %10085, i32 37
  %10272 = sext i32 %10271 to i64
  %10273 = getelementptr inbounds i16, i16* %7293, i64 %10272
  %10274 = load i16, i16* %10273, align 2, !tbaa !382
  %10275 = insertelement <64 x i16> %10270, i16 %10274, i32 37
  %10276 = extractelement <64 x i32> %10085, i32 38
  %10277 = sext i32 %10276 to i64
  %10278 = getelementptr inbounds i16, i16* %7293, i64 %10277
  %10279 = load i16, i16* %10278, align 2, !tbaa !382
  %10280 = insertelement <64 x i16> %10275, i16 %10279, i32 38
  %10281 = extractelement <64 x i32> %10085, i32 39
  %10282 = sext i32 %10281 to i64
  %10283 = getelementptr inbounds i16, i16* %7293, i64 %10282
  %10284 = load i16, i16* %10283, align 2, !tbaa !382
  %10285 = insertelement <64 x i16> %10280, i16 %10284, i32 39
  %10286 = extractelement <64 x i32> %10085, i32 40
  %10287 = sext i32 %10286 to i64
  %10288 = getelementptr inbounds i16, i16* %7293, i64 %10287
  %10289 = load i16, i16* %10288, align 2, !tbaa !382
  %10290 = insertelement <64 x i16> %10285, i16 %10289, i32 40
  %10291 = extractelement <64 x i32> %10085, i32 41
  %10292 = sext i32 %10291 to i64
  %10293 = getelementptr inbounds i16, i16* %7293, i64 %10292
  %10294 = load i16, i16* %10293, align 2, !tbaa !382
  %10295 = insertelement <64 x i16> %10290, i16 %10294, i32 41
  %10296 = extractelement <64 x i32> %10085, i32 42
  %10297 = sext i32 %10296 to i64
  %10298 = getelementptr inbounds i16, i16* %7293, i64 %10297
  %10299 = load i16, i16* %10298, align 2, !tbaa !382
  %10300 = insertelement <64 x i16> %10295, i16 %10299, i32 42
  %10301 = extractelement <64 x i32> %10085, i32 43
  %10302 = sext i32 %10301 to i64
  %10303 = getelementptr inbounds i16, i16* %7293, i64 %10302
  %10304 = load i16, i16* %10303, align 2, !tbaa !382
  %10305 = insertelement <64 x i16> %10300, i16 %10304, i32 43
  %10306 = extractelement <64 x i32> %10085, i32 44
  %10307 = sext i32 %10306 to i64
  %10308 = getelementptr inbounds i16, i16* %7293, i64 %10307
  %10309 = load i16, i16* %10308, align 2, !tbaa !382
  %10310 = insertelement <64 x i16> %10305, i16 %10309, i32 44
  %10311 = extractelement <64 x i32> %10085, i32 45
  %10312 = sext i32 %10311 to i64
  %10313 = getelementptr inbounds i16, i16* %7293, i64 %10312
  %10314 = load i16, i16* %10313, align 2, !tbaa !382
  %10315 = insertelement <64 x i16> %10310, i16 %10314, i32 45
  %10316 = extractelement <64 x i32> %10085, i32 46
  %10317 = sext i32 %10316 to i64
  %10318 = getelementptr inbounds i16, i16* %7293, i64 %10317
  %10319 = load i16, i16* %10318, align 2, !tbaa !382
  %10320 = insertelement <64 x i16> %10315, i16 %10319, i32 46
  %10321 = extractelement <64 x i32> %10085, i32 47
  %10322 = sext i32 %10321 to i64
  %10323 = getelementptr inbounds i16, i16* %7293, i64 %10322
  %10324 = load i16, i16* %10323, align 2, !tbaa !382
  %10325 = insertelement <64 x i16> %10320, i16 %10324, i32 47
  %10326 = extractelement <64 x i32> %10085, i32 48
  %10327 = sext i32 %10326 to i64
  %10328 = getelementptr inbounds i16, i16* %7293, i64 %10327
  %10329 = load i16, i16* %10328, align 2, !tbaa !382
  %10330 = insertelement <64 x i16> %10325, i16 %10329, i32 48
  %10331 = extractelement <64 x i32> %10085, i32 49
  %10332 = sext i32 %10331 to i64
  %10333 = getelementptr inbounds i16, i16* %7293, i64 %10332
  %10334 = load i16, i16* %10333, align 2, !tbaa !382
  %10335 = insertelement <64 x i16> %10330, i16 %10334, i32 49
  %10336 = extractelement <64 x i32> %10085, i32 50
  %10337 = sext i32 %10336 to i64
  %10338 = getelementptr inbounds i16, i16* %7293, i64 %10337
  %10339 = load i16, i16* %10338, align 2, !tbaa !382
  %10340 = insertelement <64 x i16> %10335, i16 %10339, i32 50
  %10341 = extractelement <64 x i32> %10085, i32 51
  %10342 = sext i32 %10341 to i64
  %10343 = getelementptr inbounds i16, i16* %7293, i64 %10342
  %10344 = load i16, i16* %10343, align 2, !tbaa !382
  %10345 = insertelement <64 x i16> %10340, i16 %10344, i32 51
  %10346 = extractelement <64 x i32> %10085, i32 52
  %10347 = sext i32 %10346 to i64
  %10348 = getelementptr inbounds i16, i16* %7293, i64 %10347
  %10349 = load i16, i16* %10348, align 2, !tbaa !382
  %10350 = insertelement <64 x i16> %10345, i16 %10349, i32 52
  %10351 = extractelement <64 x i32> %10085, i32 53
  %10352 = sext i32 %10351 to i64
  %10353 = getelementptr inbounds i16, i16* %7293, i64 %10352
  %10354 = load i16, i16* %10353, align 2, !tbaa !382
  %10355 = insertelement <64 x i16> %10350, i16 %10354, i32 53
  %10356 = extractelement <64 x i32> %10085, i32 54
  %10357 = sext i32 %10356 to i64
  %10358 = getelementptr inbounds i16, i16* %7293, i64 %10357
  %10359 = load i16, i16* %10358, align 2, !tbaa !382
  %10360 = insertelement <64 x i16> %10355, i16 %10359, i32 54
  %10361 = extractelement <64 x i32> %10085, i32 55
  %10362 = sext i32 %10361 to i64
  %10363 = getelementptr inbounds i16, i16* %7293, i64 %10362
  %10364 = load i16, i16* %10363, align 2, !tbaa !382
  %10365 = insertelement <64 x i16> %10360, i16 %10364, i32 55
  %10366 = extractelement <64 x i32> %10085, i32 56
  %10367 = sext i32 %10366 to i64
  %10368 = getelementptr inbounds i16, i16* %7293, i64 %10367
  %10369 = load i16, i16* %10368, align 2, !tbaa !382
  %10370 = insertelement <64 x i16> %10365, i16 %10369, i32 56
  %10371 = extractelement <64 x i32> %10085, i32 57
  %10372 = sext i32 %10371 to i64
  %10373 = getelementptr inbounds i16, i16* %7293, i64 %10372
  %10374 = load i16, i16* %10373, align 2, !tbaa !382
  %10375 = insertelement <64 x i16> %10370, i16 %10374, i32 57
  %10376 = extractelement <64 x i32> %10085, i32 58
  %10377 = sext i32 %10376 to i64
  %10378 = getelementptr inbounds i16, i16* %7293, i64 %10377
  %10379 = load i16, i16* %10378, align 2, !tbaa !382
  %10380 = insertelement <64 x i16> %10375, i16 %10379, i32 58
  %10381 = extractelement <64 x i32> %10085, i32 59
  %10382 = sext i32 %10381 to i64
  %10383 = getelementptr inbounds i16, i16* %7293, i64 %10382
  %10384 = load i16, i16* %10383, align 2, !tbaa !382
  %10385 = insertelement <64 x i16> %10380, i16 %10384, i32 59
  %10386 = extractelement <64 x i32> %10085, i32 60
  %10387 = sext i32 %10386 to i64
  %10388 = getelementptr inbounds i16, i16* %7293, i64 %10387
  %10389 = load i16, i16* %10388, align 2, !tbaa !382
  %10390 = insertelement <64 x i16> %10385, i16 %10389, i32 60
  %10391 = extractelement <64 x i32> %10085, i32 61
  %10392 = sext i32 %10391 to i64
  %10393 = getelementptr inbounds i16, i16* %7293, i64 %10392
  %10394 = load i16, i16* %10393, align 2, !tbaa !382
  %10395 = insertelement <64 x i16> %10390, i16 %10394, i32 61
  %10396 = extractelement <64 x i32> %10085, i32 62
  %10397 = sext i32 %10396 to i64
  %10398 = getelementptr inbounds i16, i16* %7293, i64 %10397
  %10399 = load i16, i16* %10398, align 2, !tbaa !382
  %10400 = insertelement <64 x i16> %10395, i16 %10399, i32 62
  %10401 = extractelement <64 x i32> %10085, i32 63
  %10402 = sext i32 %10401 to i64
  %10403 = getelementptr inbounds i16, i16* %7293, i64 %10402
  %10404 = load i16, i16* %10403, align 2, !tbaa !382
  %10405 = insertelement <64 x i16> %10400, i16 %10404, i32 63
  %10406 = add nsw i32 %blur_x.s0.x.v1.base.s85, -62
  %10407 = insertelement <64 x i32> undef, i32 %10406, i32 0
  %10408 = shufflevector <64 x i32> %10407, <64 x i32> undef, <64 x i32> zeroinitializer
  %10409 = add nsw <64 x i32> %10408, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10410 = shufflevector <64 x i32> %10409, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10411 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10410, <4 x i32> %7290)
  %10412 = shufflevector <64 x i32> %10409, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10413 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10412, <4 x i32> %7290)
  %10414 = shufflevector <64 x i32> %10409, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %10415 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10414, <4 x i32> %7290)
  %10416 = shufflevector <64 x i32> %10409, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %10417 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10416, <4 x i32> %7290)
  %10418 = shufflevector <64 x i32> %10409, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %10419 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10418, <4 x i32> %7290)
  %10420 = shufflevector <64 x i32> %10409, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %10421 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10420, <4 x i32> %7290)
  %10422 = shufflevector <64 x i32> %10409, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %10423 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10422, <4 x i32> %7290)
  %10424 = shufflevector <64 x i32> %10409, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %10425 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10424, <4 x i32> %7290)
  %10426 = shufflevector <64 x i32> %10409, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %10427 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10426, <4 x i32> %7290)
  %10428 = shufflevector <64 x i32> %10409, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %10429 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10428, <4 x i32> %7290)
  %10430 = shufflevector <64 x i32> %10409, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %10431 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10430, <4 x i32> %7290)
  %10432 = shufflevector <64 x i32> %10409, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %10433 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10432, <4 x i32> %7290)
  %10434 = shufflevector <64 x i32> %10409, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %10435 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10434, <4 x i32> %7290)
  %10436 = shufflevector <64 x i32> %10409, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %10437 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10436, <4 x i32> %7290)
  %10438 = shufflevector <64 x i32> %10409, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %10439 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10438, <4 x i32> %7290)
  %10440 = shufflevector <64 x i32> %10409, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %10441 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10440, <4 x i32> %7290)
  %10442 = shufflevector <4 x i32> %10441, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %10443 = shufflevector <8 x i32> %10442, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %10444 = shufflevector <16 x i32> %10443, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %10445 = shufflevector <32 x i32> %10444, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %10446 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10411, <4 x i32> %7292)
  %10447 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10413, <4 x i32> %7292)
  %10448 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10415, <4 x i32> %7292)
  %10449 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10417, <4 x i32> %7292)
  %10450 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10419, <4 x i32> %7292)
  %10451 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10421, <4 x i32> %7292)
  %10452 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10423, <4 x i32> %7292)
  %10453 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10425, <4 x i32> %7292)
  %10454 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10427, <4 x i32> %7292)
  %10455 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10429, <4 x i32> %7292)
  %10456 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10431, <4 x i32> %7292)
  %10457 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10433, <4 x i32> %7292)
  %10458 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10435, <4 x i32> %7292)
  %10459 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10437, <4 x i32> %7292)
  %10460 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10439, <4 x i32> %7292)
  %10461 = shufflevector <64 x i32> %10445, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %10462 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10461, <4 x i32> %7292)
  %10463 = shufflevector <4 x i32> %10446, <4 x i32> %10447, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10464 = shufflevector <4 x i32> %10448, <4 x i32> %10449, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10465 = shufflevector <4 x i32> %10450, <4 x i32> %10451, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10466 = shufflevector <4 x i32> %10452, <4 x i32> %10453, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10467 = shufflevector <4 x i32> %10454, <4 x i32> %10455, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10468 = shufflevector <4 x i32> %10456, <4 x i32> %10457, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10469 = shufflevector <4 x i32> %10458, <4 x i32> %10459, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10470 = shufflevector <4 x i32> %10460, <4 x i32> %10462, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10471 = shufflevector <8 x i32> %10463, <8 x i32> %10464, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10472 = shufflevector <8 x i32> %10465, <8 x i32> %10466, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10473 = shufflevector <8 x i32> %10467, <8 x i32> %10468, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10474 = shufflevector <8 x i32> %10469, <8 x i32> %10470, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10475 = shufflevector <16 x i32> %10471, <16 x i32> %10472, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10476 = shufflevector <16 x i32> %10473, <16 x i32> %10474, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10477 = shufflevector <32 x i32> %10475, <32 x i32> %10476, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10478 = add nsw <64 x i32> %10477, %t20186
  %10479 = extractelement <64 x i32> %10478, i32 0
  %10480 = sext i32 %10479 to i64
  %10481 = getelementptr inbounds i16, i16* %7293, i64 %10480
  %10482 = load i16, i16* %10481, align 2, !tbaa !382
  %10483 = insertelement <64 x i16> undef, i16 %10482, i32 0
  %10484 = extractelement <64 x i32> %10478, i32 1
  %10485 = sext i32 %10484 to i64
  %10486 = getelementptr inbounds i16, i16* %7293, i64 %10485
  %10487 = load i16, i16* %10486, align 2, !tbaa !382
  %10488 = insertelement <64 x i16> %10483, i16 %10487, i32 1
  %10489 = extractelement <64 x i32> %10478, i32 2
  %10490 = sext i32 %10489 to i64
  %10491 = getelementptr inbounds i16, i16* %7293, i64 %10490
  %10492 = load i16, i16* %10491, align 2, !tbaa !382
  %10493 = insertelement <64 x i16> %10488, i16 %10492, i32 2
  %10494 = extractelement <64 x i32> %10478, i32 3
  %10495 = sext i32 %10494 to i64
  %10496 = getelementptr inbounds i16, i16* %7293, i64 %10495
  %10497 = load i16, i16* %10496, align 2, !tbaa !382
  %10498 = insertelement <64 x i16> %10493, i16 %10497, i32 3
  %10499 = extractelement <64 x i32> %10478, i32 4
  %10500 = sext i32 %10499 to i64
  %10501 = getelementptr inbounds i16, i16* %7293, i64 %10500
  %10502 = load i16, i16* %10501, align 2, !tbaa !382
  %10503 = insertelement <64 x i16> %10498, i16 %10502, i32 4
  %10504 = extractelement <64 x i32> %10478, i32 5
  %10505 = sext i32 %10504 to i64
  %10506 = getelementptr inbounds i16, i16* %7293, i64 %10505
  %10507 = load i16, i16* %10506, align 2, !tbaa !382
  %10508 = insertelement <64 x i16> %10503, i16 %10507, i32 5
  %10509 = extractelement <64 x i32> %10478, i32 6
  %10510 = sext i32 %10509 to i64
  %10511 = getelementptr inbounds i16, i16* %7293, i64 %10510
  %10512 = load i16, i16* %10511, align 2, !tbaa !382
  %10513 = insertelement <64 x i16> %10508, i16 %10512, i32 6
  %10514 = extractelement <64 x i32> %10478, i32 7
  %10515 = sext i32 %10514 to i64
  %10516 = getelementptr inbounds i16, i16* %7293, i64 %10515
  %10517 = load i16, i16* %10516, align 2, !tbaa !382
  %10518 = insertelement <64 x i16> %10513, i16 %10517, i32 7
  %10519 = extractelement <64 x i32> %10478, i32 8
  %10520 = sext i32 %10519 to i64
  %10521 = getelementptr inbounds i16, i16* %7293, i64 %10520
  %10522 = load i16, i16* %10521, align 2, !tbaa !382
  %10523 = insertelement <64 x i16> %10518, i16 %10522, i32 8
  %10524 = extractelement <64 x i32> %10478, i32 9
  %10525 = sext i32 %10524 to i64
  %10526 = getelementptr inbounds i16, i16* %7293, i64 %10525
  %10527 = load i16, i16* %10526, align 2, !tbaa !382
  %10528 = insertelement <64 x i16> %10523, i16 %10527, i32 9
  %10529 = extractelement <64 x i32> %10478, i32 10
  %10530 = sext i32 %10529 to i64
  %10531 = getelementptr inbounds i16, i16* %7293, i64 %10530
  %10532 = load i16, i16* %10531, align 2, !tbaa !382
  %10533 = insertelement <64 x i16> %10528, i16 %10532, i32 10
  %10534 = extractelement <64 x i32> %10478, i32 11
  %10535 = sext i32 %10534 to i64
  %10536 = getelementptr inbounds i16, i16* %7293, i64 %10535
  %10537 = load i16, i16* %10536, align 2, !tbaa !382
  %10538 = insertelement <64 x i16> %10533, i16 %10537, i32 11
  %10539 = extractelement <64 x i32> %10478, i32 12
  %10540 = sext i32 %10539 to i64
  %10541 = getelementptr inbounds i16, i16* %7293, i64 %10540
  %10542 = load i16, i16* %10541, align 2, !tbaa !382
  %10543 = insertelement <64 x i16> %10538, i16 %10542, i32 12
  %10544 = extractelement <64 x i32> %10478, i32 13
  %10545 = sext i32 %10544 to i64
  %10546 = getelementptr inbounds i16, i16* %7293, i64 %10545
  %10547 = load i16, i16* %10546, align 2, !tbaa !382
  %10548 = insertelement <64 x i16> %10543, i16 %10547, i32 13
  %10549 = extractelement <64 x i32> %10478, i32 14
  %10550 = sext i32 %10549 to i64
  %10551 = getelementptr inbounds i16, i16* %7293, i64 %10550
  %10552 = load i16, i16* %10551, align 2, !tbaa !382
  %10553 = insertelement <64 x i16> %10548, i16 %10552, i32 14
  %10554 = extractelement <64 x i32> %10478, i32 15
  %10555 = sext i32 %10554 to i64
  %10556 = getelementptr inbounds i16, i16* %7293, i64 %10555
  %10557 = load i16, i16* %10556, align 2, !tbaa !382
  %10558 = insertelement <64 x i16> %10553, i16 %10557, i32 15
  %10559 = extractelement <64 x i32> %10478, i32 16
  %10560 = sext i32 %10559 to i64
  %10561 = getelementptr inbounds i16, i16* %7293, i64 %10560
  %10562 = load i16, i16* %10561, align 2, !tbaa !382
  %10563 = insertelement <64 x i16> %10558, i16 %10562, i32 16
  %10564 = extractelement <64 x i32> %10478, i32 17
  %10565 = sext i32 %10564 to i64
  %10566 = getelementptr inbounds i16, i16* %7293, i64 %10565
  %10567 = load i16, i16* %10566, align 2, !tbaa !382
  %10568 = insertelement <64 x i16> %10563, i16 %10567, i32 17
  %10569 = extractelement <64 x i32> %10478, i32 18
  %10570 = sext i32 %10569 to i64
  %10571 = getelementptr inbounds i16, i16* %7293, i64 %10570
  %10572 = load i16, i16* %10571, align 2, !tbaa !382
  %10573 = insertelement <64 x i16> %10568, i16 %10572, i32 18
  %10574 = extractelement <64 x i32> %10478, i32 19
  %10575 = sext i32 %10574 to i64
  %10576 = getelementptr inbounds i16, i16* %7293, i64 %10575
  %10577 = load i16, i16* %10576, align 2, !tbaa !382
  %10578 = insertelement <64 x i16> %10573, i16 %10577, i32 19
  %10579 = extractelement <64 x i32> %10478, i32 20
  %10580 = sext i32 %10579 to i64
  %10581 = getelementptr inbounds i16, i16* %7293, i64 %10580
  %10582 = load i16, i16* %10581, align 2, !tbaa !382
  %10583 = insertelement <64 x i16> %10578, i16 %10582, i32 20
  %10584 = extractelement <64 x i32> %10478, i32 21
  %10585 = sext i32 %10584 to i64
  %10586 = getelementptr inbounds i16, i16* %7293, i64 %10585
  %10587 = load i16, i16* %10586, align 2, !tbaa !382
  %10588 = insertelement <64 x i16> %10583, i16 %10587, i32 21
  %10589 = extractelement <64 x i32> %10478, i32 22
  %10590 = sext i32 %10589 to i64
  %10591 = getelementptr inbounds i16, i16* %7293, i64 %10590
  %10592 = load i16, i16* %10591, align 2, !tbaa !382
  %10593 = insertelement <64 x i16> %10588, i16 %10592, i32 22
  %10594 = extractelement <64 x i32> %10478, i32 23
  %10595 = sext i32 %10594 to i64
  %10596 = getelementptr inbounds i16, i16* %7293, i64 %10595
  %10597 = load i16, i16* %10596, align 2, !tbaa !382
  %10598 = insertelement <64 x i16> %10593, i16 %10597, i32 23
  %10599 = extractelement <64 x i32> %10478, i32 24
  %10600 = sext i32 %10599 to i64
  %10601 = getelementptr inbounds i16, i16* %7293, i64 %10600
  %10602 = load i16, i16* %10601, align 2, !tbaa !382
  %10603 = insertelement <64 x i16> %10598, i16 %10602, i32 24
  %10604 = extractelement <64 x i32> %10478, i32 25
  %10605 = sext i32 %10604 to i64
  %10606 = getelementptr inbounds i16, i16* %7293, i64 %10605
  %10607 = load i16, i16* %10606, align 2, !tbaa !382
  %10608 = insertelement <64 x i16> %10603, i16 %10607, i32 25
  %10609 = extractelement <64 x i32> %10478, i32 26
  %10610 = sext i32 %10609 to i64
  %10611 = getelementptr inbounds i16, i16* %7293, i64 %10610
  %10612 = load i16, i16* %10611, align 2, !tbaa !382
  %10613 = insertelement <64 x i16> %10608, i16 %10612, i32 26
  %10614 = extractelement <64 x i32> %10478, i32 27
  %10615 = sext i32 %10614 to i64
  %10616 = getelementptr inbounds i16, i16* %7293, i64 %10615
  %10617 = load i16, i16* %10616, align 2, !tbaa !382
  %10618 = insertelement <64 x i16> %10613, i16 %10617, i32 27
  %10619 = extractelement <64 x i32> %10478, i32 28
  %10620 = sext i32 %10619 to i64
  %10621 = getelementptr inbounds i16, i16* %7293, i64 %10620
  %10622 = load i16, i16* %10621, align 2, !tbaa !382
  %10623 = insertelement <64 x i16> %10618, i16 %10622, i32 28
  %10624 = extractelement <64 x i32> %10478, i32 29
  %10625 = sext i32 %10624 to i64
  %10626 = getelementptr inbounds i16, i16* %7293, i64 %10625
  %10627 = load i16, i16* %10626, align 2, !tbaa !382
  %10628 = insertelement <64 x i16> %10623, i16 %10627, i32 29
  %10629 = extractelement <64 x i32> %10478, i32 30
  %10630 = sext i32 %10629 to i64
  %10631 = getelementptr inbounds i16, i16* %7293, i64 %10630
  %10632 = load i16, i16* %10631, align 2, !tbaa !382
  %10633 = insertelement <64 x i16> %10628, i16 %10632, i32 30
  %10634 = extractelement <64 x i32> %10478, i32 31
  %10635 = sext i32 %10634 to i64
  %10636 = getelementptr inbounds i16, i16* %7293, i64 %10635
  %10637 = load i16, i16* %10636, align 2, !tbaa !382
  %10638 = insertelement <64 x i16> %10633, i16 %10637, i32 31
  %10639 = extractelement <64 x i32> %10478, i32 32
  %10640 = sext i32 %10639 to i64
  %10641 = getelementptr inbounds i16, i16* %7293, i64 %10640
  %10642 = load i16, i16* %10641, align 2, !tbaa !382
  %10643 = insertelement <64 x i16> %10638, i16 %10642, i32 32
  %10644 = extractelement <64 x i32> %10478, i32 33
  %10645 = sext i32 %10644 to i64
  %10646 = getelementptr inbounds i16, i16* %7293, i64 %10645
  %10647 = load i16, i16* %10646, align 2, !tbaa !382
  %10648 = insertelement <64 x i16> %10643, i16 %10647, i32 33
  %10649 = extractelement <64 x i32> %10478, i32 34
  %10650 = sext i32 %10649 to i64
  %10651 = getelementptr inbounds i16, i16* %7293, i64 %10650
  %10652 = load i16, i16* %10651, align 2, !tbaa !382
  %10653 = insertelement <64 x i16> %10648, i16 %10652, i32 34
  %10654 = extractelement <64 x i32> %10478, i32 35
  %10655 = sext i32 %10654 to i64
  %10656 = getelementptr inbounds i16, i16* %7293, i64 %10655
  %10657 = load i16, i16* %10656, align 2, !tbaa !382
  %10658 = insertelement <64 x i16> %10653, i16 %10657, i32 35
  %10659 = extractelement <64 x i32> %10478, i32 36
  %10660 = sext i32 %10659 to i64
  %10661 = getelementptr inbounds i16, i16* %7293, i64 %10660
  %10662 = load i16, i16* %10661, align 2, !tbaa !382
  %10663 = insertelement <64 x i16> %10658, i16 %10662, i32 36
  %10664 = extractelement <64 x i32> %10478, i32 37
  %10665 = sext i32 %10664 to i64
  %10666 = getelementptr inbounds i16, i16* %7293, i64 %10665
  %10667 = load i16, i16* %10666, align 2, !tbaa !382
  %10668 = insertelement <64 x i16> %10663, i16 %10667, i32 37
  %10669 = extractelement <64 x i32> %10478, i32 38
  %10670 = sext i32 %10669 to i64
  %10671 = getelementptr inbounds i16, i16* %7293, i64 %10670
  %10672 = load i16, i16* %10671, align 2, !tbaa !382
  %10673 = insertelement <64 x i16> %10668, i16 %10672, i32 38
  %10674 = extractelement <64 x i32> %10478, i32 39
  %10675 = sext i32 %10674 to i64
  %10676 = getelementptr inbounds i16, i16* %7293, i64 %10675
  %10677 = load i16, i16* %10676, align 2, !tbaa !382
  %10678 = insertelement <64 x i16> %10673, i16 %10677, i32 39
  %10679 = extractelement <64 x i32> %10478, i32 40
  %10680 = sext i32 %10679 to i64
  %10681 = getelementptr inbounds i16, i16* %7293, i64 %10680
  %10682 = load i16, i16* %10681, align 2, !tbaa !382
  %10683 = insertelement <64 x i16> %10678, i16 %10682, i32 40
  %10684 = extractelement <64 x i32> %10478, i32 41
  %10685 = sext i32 %10684 to i64
  %10686 = getelementptr inbounds i16, i16* %7293, i64 %10685
  %10687 = load i16, i16* %10686, align 2, !tbaa !382
  %10688 = insertelement <64 x i16> %10683, i16 %10687, i32 41
  %10689 = extractelement <64 x i32> %10478, i32 42
  %10690 = sext i32 %10689 to i64
  %10691 = getelementptr inbounds i16, i16* %7293, i64 %10690
  %10692 = load i16, i16* %10691, align 2, !tbaa !382
  %10693 = insertelement <64 x i16> %10688, i16 %10692, i32 42
  %10694 = extractelement <64 x i32> %10478, i32 43
  %10695 = sext i32 %10694 to i64
  %10696 = getelementptr inbounds i16, i16* %7293, i64 %10695
  %10697 = load i16, i16* %10696, align 2, !tbaa !382
  %10698 = insertelement <64 x i16> %10693, i16 %10697, i32 43
  %10699 = extractelement <64 x i32> %10478, i32 44
  %10700 = sext i32 %10699 to i64
  %10701 = getelementptr inbounds i16, i16* %7293, i64 %10700
  %10702 = load i16, i16* %10701, align 2, !tbaa !382
  %10703 = insertelement <64 x i16> %10698, i16 %10702, i32 44
  %10704 = extractelement <64 x i32> %10478, i32 45
  %10705 = sext i32 %10704 to i64
  %10706 = getelementptr inbounds i16, i16* %7293, i64 %10705
  %10707 = load i16, i16* %10706, align 2, !tbaa !382
  %10708 = insertelement <64 x i16> %10703, i16 %10707, i32 45
  %10709 = extractelement <64 x i32> %10478, i32 46
  %10710 = sext i32 %10709 to i64
  %10711 = getelementptr inbounds i16, i16* %7293, i64 %10710
  %10712 = load i16, i16* %10711, align 2, !tbaa !382
  %10713 = insertelement <64 x i16> %10708, i16 %10712, i32 46
  %10714 = extractelement <64 x i32> %10478, i32 47
  %10715 = sext i32 %10714 to i64
  %10716 = getelementptr inbounds i16, i16* %7293, i64 %10715
  %10717 = load i16, i16* %10716, align 2, !tbaa !382
  %10718 = insertelement <64 x i16> %10713, i16 %10717, i32 47
  %10719 = extractelement <64 x i32> %10478, i32 48
  %10720 = sext i32 %10719 to i64
  %10721 = getelementptr inbounds i16, i16* %7293, i64 %10720
  %10722 = load i16, i16* %10721, align 2, !tbaa !382
  %10723 = insertelement <64 x i16> %10718, i16 %10722, i32 48
  %10724 = extractelement <64 x i32> %10478, i32 49
  %10725 = sext i32 %10724 to i64
  %10726 = getelementptr inbounds i16, i16* %7293, i64 %10725
  %10727 = load i16, i16* %10726, align 2, !tbaa !382
  %10728 = insertelement <64 x i16> %10723, i16 %10727, i32 49
  %10729 = extractelement <64 x i32> %10478, i32 50
  %10730 = sext i32 %10729 to i64
  %10731 = getelementptr inbounds i16, i16* %7293, i64 %10730
  %10732 = load i16, i16* %10731, align 2, !tbaa !382
  %10733 = insertelement <64 x i16> %10728, i16 %10732, i32 50
  %10734 = extractelement <64 x i32> %10478, i32 51
  %10735 = sext i32 %10734 to i64
  %10736 = getelementptr inbounds i16, i16* %7293, i64 %10735
  %10737 = load i16, i16* %10736, align 2, !tbaa !382
  %10738 = insertelement <64 x i16> %10733, i16 %10737, i32 51
  %10739 = extractelement <64 x i32> %10478, i32 52
  %10740 = sext i32 %10739 to i64
  %10741 = getelementptr inbounds i16, i16* %7293, i64 %10740
  %10742 = load i16, i16* %10741, align 2, !tbaa !382
  %10743 = insertelement <64 x i16> %10738, i16 %10742, i32 52
  %10744 = extractelement <64 x i32> %10478, i32 53
  %10745 = sext i32 %10744 to i64
  %10746 = getelementptr inbounds i16, i16* %7293, i64 %10745
  %10747 = load i16, i16* %10746, align 2, !tbaa !382
  %10748 = insertelement <64 x i16> %10743, i16 %10747, i32 53
  %10749 = extractelement <64 x i32> %10478, i32 54
  %10750 = sext i32 %10749 to i64
  %10751 = getelementptr inbounds i16, i16* %7293, i64 %10750
  %10752 = load i16, i16* %10751, align 2, !tbaa !382
  %10753 = insertelement <64 x i16> %10748, i16 %10752, i32 54
  %10754 = extractelement <64 x i32> %10478, i32 55
  %10755 = sext i32 %10754 to i64
  %10756 = getelementptr inbounds i16, i16* %7293, i64 %10755
  %10757 = load i16, i16* %10756, align 2, !tbaa !382
  %10758 = insertelement <64 x i16> %10753, i16 %10757, i32 55
  %10759 = extractelement <64 x i32> %10478, i32 56
  %10760 = sext i32 %10759 to i64
  %10761 = getelementptr inbounds i16, i16* %7293, i64 %10760
  %10762 = load i16, i16* %10761, align 2, !tbaa !382
  %10763 = insertelement <64 x i16> %10758, i16 %10762, i32 56
  %10764 = extractelement <64 x i32> %10478, i32 57
  %10765 = sext i32 %10764 to i64
  %10766 = getelementptr inbounds i16, i16* %7293, i64 %10765
  %10767 = load i16, i16* %10766, align 2, !tbaa !382
  %10768 = insertelement <64 x i16> %10763, i16 %10767, i32 57
  %10769 = extractelement <64 x i32> %10478, i32 58
  %10770 = sext i32 %10769 to i64
  %10771 = getelementptr inbounds i16, i16* %7293, i64 %10770
  %10772 = load i16, i16* %10771, align 2, !tbaa !382
  %10773 = insertelement <64 x i16> %10768, i16 %10772, i32 58
  %10774 = extractelement <64 x i32> %10478, i32 59
  %10775 = sext i32 %10774 to i64
  %10776 = getelementptr inbounds i16, i16* %7293, i64 %10775
  %10777 = load i16, i16* %10776, align 2, !tbaa !382
  %10778 = insertelement <64 x i16> %10773, i16 %10777, i32 59
  %10779 = extractelement <64 x i32> %10478, i32 60
  %10780 = sext i32 %10779 to i64
  %10781 = getelementptr inbounds i16, i16* %7293, i64 %10780
  %10782 = load i16, i16* %10781, align 2, !tbaa !382
  %10783 = insertelement <64 x i16> %10778, i16 %10782, i32 60
  %10784 = extractelement <64 x i32> %10478, i32 61
  %10785 = sext i32 %10784 to i64
  %10786 = getelementptr inbounds i16, i16* %7293, i64 %10785
  %10787 = load i16, i16* %10786, align 2, !tbaa !382
  %10788 = insertelement <64 x i16> %10783, i16 %10787, i32 61
  %10789 = extractelement <64 x i32> %10478, i32 62
  %10790 = sext i32 %10789 to i64
  %10791 = getelementptr inbounds i16, i16* %7293, i64 %10790
  %10792 = load i16, i16* %10791, align 2, !tbaa !382
  %10793 = insertelement <64 x i16> %10788, i16 %10792, i32 62
  %10794 = extractelement <64 x i32> %10478, i32 63
  %10795 = sext i32 %10794 to i64
  %10796 = getelementptr inbounds i16, i16* %7293, i64 %10795
  %10797 = load i16, i16* %10796, align 2, !tbaa !382
  %10798 = insertelement <64 x i16> %10793, i16 %10797, i32 63
  %10799 = add nsw i32 %blur_x.s0.x.v1.base.s85, -60
  %10800 = insertelement <64 x i32> undef, i32 %10799, i32 0
  %10801 = shufflevector <64 x i32> %10800, <64 x i32> undef, <64 x i32> zeroinitializer
  %10802 = add nsw <64 x i32> %10801, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10803 = shufflevector <64 x i32> %10802, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10804 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10803, <4 x i32> %7290)
  %10805 = shufflevector <64 x i32> %10802, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10806 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10805, <4 x i32> %7290)
  %10807 = shufflevector <64 x i32> %10802, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %10808 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10807, <4 x i32> %7290)
  %10809 = shufflevector <64 x i32> %10802, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %10810 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10809, <4 x i32> %7290)
  %10811 = shufflevector <64 x i32> %10802, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %10812 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10811, <4 x i32> %7290)
  %10813 = shufflevector <64 x i32> %10802, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %10814 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10813, <4 x i32> %7290)
  %10815 = shufflevector <64 x i32> %10802, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %10816 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10815, <4 x i32> %7290)
  %10817 = shufflevector <64 x i32> %10802, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %10818 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10817, <4 x i32> %7290)
  %10819 = shufflevector <64 x i32> %10802, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %10820 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10819, <4 x i32> %7290)
  %10821 = shufflevector <64 x i32> %10802, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %10822 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10821, <4 x i32> %7290)
  %10823 = shufflevector <64 x i32> %10802, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %10824 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10823, <4 x i32> %7290)
  %10825 = shufflevector <64 x i32> %10802, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %10826 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10825, <4 x i32> %7290)
  %10827 = shufflevector <64 x i32> %10802, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %10828 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10827, <4 x i32> %7290)
  %10829 = shufflevector <64 x i32> %10802, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %10830 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10829, <4 x i32> %7290)
  %10831 = shufflevector <64 x i32> %10802, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %10832 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10831, <4 x i32> %7290)
  %10833 = shufflevector <64 x i32> %10802, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %10834 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10833, <4 x i32> %7290)
  %10835 = shufflevector <4 x i32> %10834, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %10836 = shufflevector <8 x i32> %10835, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %10837 = shufflevector <16 x i32> %10836, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %10838 = shufflevector <32 x i32> %10837, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %10839 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10804, <4 x i32> %7292)
  %10840 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10806, <4 x i32> %7292)
  %10841 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10808, <4 x i32> %7292)
  %10842 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10810, <4 x i32> %7292)
  %10843 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10812, <4 x i32> %7292)
  %10844 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10814, <4 x i32> %7292)
  %10845 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10816, <4 x i32> %7292)
  %10846 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10818, <4 x i32> %7292)
  %10847 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10820, <4 x i32> %7292)
  %10848 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10822, <4 x i32> %7292)
  %10849 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10824, <4 x i32> %7292)
  %10850 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10826, <4 x i32> %7292)
  %10851 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10828, <4 x i32> %7292)
  %10852 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10830, <4 x i32> %7292)
  %10853 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10832, <4 x i32> %7292)
  %10854 = shufflevector <64 x i32> %10838, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %10855 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10854, <4 x i32> %7292)
  %10856 = shufflevector <4 x i32> %10839, <4 x i32> %10840, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10857 = shufflevector <4 x i32> %10841, <4 x i32> %10842, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10858 = shufflevector <4 x i32> %10843, <4 x i32> %10844, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10859 = shufflevector <4 x i32> %10845, <4 x i32> %10846, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10860 = shufflevector <4 x i32> %10847, <4 x i32> %10848, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10861 = shufflevector <4 x i32> %10849, <4 x i32> %10850, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10862 = shufflevector <4 x i32> %10851, <4 x i32> %10852, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10863 = shufflevector <4 x i32> %10853, <4 x i32> %10855, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10864 = shufflevector <8 x i32> %10856, <8 x i32> %10857, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10865 = shufflevector <8 x i32> %10858, <8 x i32> %10859, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10866 = shufflevector <8 x i32> %10860, <8 x i32> %10861, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10867 = shufflevector <8 x i32> %10862, <8 x i32> %10863, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10868 = shufflevector <16 x i32> %10864, <16 x i32> %10865, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10869 = shufflevector <16 x i32> %10866, <16 x i32> %10867, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10870 = shufflevector <32 x i32> %10868, <32 x i32> %10869, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10871 = add nsw <64 x i32> %10870, %t20186
  %10872 = extractelement <64 x i32> %10871, i32 0
  %10873 = sext i32 %10872 to i64
  %10874 = getelementptr inbounds i16, i16* %7293, i64 %10873
  %10875 = load i16, i16* %10874, align 2, !tbaa !382
  %10876 = insertelement <64 x i16> undef, i16 %10875, i32 0
  %10877 = extractelement <64 x i32> %10871, i32 1
  %10878 = sext i32 %10877 to i64
  %10879 = getelementptr inbounds i16, i16* %7293, i64 %10878
  %10880 = load i16, i16* %10879, align 2, !tbaa !382
  %10881 = insertelement <64 x i16> %10876, i16 %10880, i32 1
  %10882 = extractelement <64 x i32> %10871, i32 2
  %10883 = sext i32 %10882 to i64
  %10884 = getelementptr inbounds i16, i16* %7293, i64 %10883
  %10885 = load i16, i16* %10884, align 2, !tbaa !382
  %10886 = insertelement <64 x i16> %10881, i16 %10885, i32 2
  %10887 = extractelement <64 x i32> %10871, i32 3
  %10888 = sext i32 %10887 to i64
  %10889 = getelementptr inbounds i16, i16* %7293, i64 %10888
  %10890 = load i16, i16* %10889, align 2, !tbaa !382
  %10891 = insertelement <64 x i16> %10886, i16 %10890, i32 3
  %10892 = extractelement <64 x i32> %10871, i32 4
  %10893 = sext i32 %10892 to i64
  %10894 = getelementptr inbounds i16, i16* %7293, i64 %10893
  %10895 = load i16, i16* %10894, align 2, !tbaa !382
  %10896 = insertelement <64 x i16> %10891, i16 %10895, i32 4
  %10897 = extractelement <64 x i32> %10871, i32 5
  %10898 = sext i32 %10897 to i64
  %10899 = getelementptr inbounds i16, i16* %7293, i64 %10898
  %10900 = load i16, i16* %10899, align 2, !tbaa !382
  %10901 = insertelement <64 x i16> %10896, i16 %10900, i32 5
  %10902 = extractelement <64 x i32> %10871, i32 6
  %10903 = sext i32 %10902 to i64
  %10904 = getelementptr inbounds i16, i16* %7293, i64 %10903
  %10905 = load i16, i16* %10904, align 2, !tbaa !382
  %10906 = insertelement <64 x i16> %10901, i16 %10905, i32 6
  %10907 = extractelement <64 x i32> %10871, i32 7
  %10908 = sext i32 %10907 to i64
  %10909 = getelementptr inbounds i16, i16* %7293, i64 %10908
  %10910 = load i16, i16* %10909, align 2, !tbaa !382
  %10911 = insertelement <64 x i16> %10906, i16 %10910, i32 7
  %10912 = extractelement <64 x i32> %10871, i32 8
  %10913 = sext i32 %10912 to i64
  %10914 = getelementptr inbounds i16, i16* %7293, i64 %10913
  %10915 = load i16, i16* %10914, align 2, !tbaa !382
  %10916 = insertelement <64 x i16> %10911, i16 %10915, i32 8
  %10917 = extractelement <64 x i32> %10871, i32 9
  %10918 = sext i32 %10917 to i64
  %10919 = getelementptr inbounds i16, i16* %7293, i64 %10918
  %10920 = load i16, i16* %10919, align 2, !tbaa !382
  %10921 = insertelement <64 x i16> %10916, i16 %10920, i32 9
  %10922 = extractelement <64 x i32> %10871, i32 10
  %10923 = sext i32 %10922 to i64
  %10924 = getelementptr inbounds i16, i16* %7293, i64 %10923
  %10925 = load i16, i16* %10924, align 2, !tbaa !382
  %10926 = insertelement <64 x i16> %10921, i16 %10925, i32 10
  %10927 = extractelement <64 x i32> %10871, i32 11
  %10928 = sext i32 %10927 to i64
  %10929 = getelementptr inbounds i16, i16* %7293, i64 %10928
  %10930 = load i16, i16* %10929, align 2, !tbaa !382
  %10931 = insertelement <64 x i16> %10926, i16 %10930, i32 11
  %10932 = extractelement <64 x i32> %10871, i32 12
  %10933 = sext i32 %10932 to i64
  %10934 = getelementptr inbounds i16, i16* %7293, i64 %10933
  %10935 = load i16, i16* %10934, align 2, !tbaa !382
  %10936 = insertelement <64 x i16> %10931, i16 %10935, i32 12
  %10937 = extractelement <64 x i32> %10871, i32 13
  %10938 = sext i32 %10937 to i64
  %10939 = getelementptr inbounds i16, i16* %7293, i64 %10938
  %10940 = load i16, i16* %10939, align 2, !tbaa !382
  %10941 = insertelement <64 x i16> %10936, i16 %10940, i32 13
  %10942 = extractelement <64 x i32> %10871, i32 14
  %10943 = sext i32 %10942 to i64
  %10944 = getelementptr inbounds i16, i16* %7293, i64 %10943
  %10945 = load i16, i16* %10944, align 2, !tbaa !382
  %10946 = insertelement <64 x i16> %10941, i16 %10945, i32 14
  %10947 = extractelement <64 x i32> %10871, i32 15
  %10948 = sext i32 %10947 to i64
  %10949 = getelementptr inbounds i16, i16* %7293, i64 %10948
  %10950 = load i16, i16* %10949, align 2, !tbaa !382
  %10951 = insertelement <64 x i16> %10946, i16 %10950, i32 15
  %10952 = extractelement <64 x i32> %10871, i32 16
  %10953 = sext i32 %10952 to i64
  %10954 = getelementptr inbounds i16, i16* %7293, i64 %10953
  %10955 = load i16, i16* %10954, align 2, !tbaa !382
  %10956 = insertelement <64 x i16> %10951, i16 %10955, i32 16
  %10957 = extractelement <64 x i32> %10871, i32 17
  %10958 = sext i32 %10957 to i64
  %10959 = getelementptr inbounds i16, i16* %7293, i64 %10958
  %10960 = load i16, i16* %10959, align 2, !tbaa !382
  %10961 = insertelement <64 x i16> %10956, i16 %10960, i32 17
  %10962 = extractelement <64 x i32> %10871, i32 18
  %10963 = sext i32 %10962 to i64
  %10964 = getelementptr inbounds i16, i16* %7293, i64 %10963
  %10965 = load i16, i16* %10964, align 2, !tbaa !382
  %10966 = insertelement <64 x i16> %10961, i16 %10965, i32 18
  %10967 = extractelement <64 x i32> %10871, i32 19
  %10968 = sext i32 %10967 to i64
  %10969 = getelementptr inbounds i16, i16* %7293, i64 %10968
  %10970 = load i16, i16* %10969, align 2, !tbaa !382
  %10971 = insertelement <64 x i16> %10966, i16 %10970, i32 19
  %10972 = extractelement <64 x i32> %10871, i32 20
  %10973 = sext i32 %10972 to i64
  %10974 = getelementptr inbounds i16, i16* %7293, i64 %10973
  %10975 = load i16, i16* %10974, align 2, !tbaa !382
  %10976 = insertelement <64 x i16> %10971, i16 %10975, i32 20
  %10977 = extractelement <64 x i32> %10871, i32 21
  %10978 = sext i32 %10977 to i64
  %10979 = getelementptr inbounds i16, i16* %7293, i64 %10978
  %10980 = load i16, i16* %10979, align 2, !tbaa !382
  %10981 = insertelement <64 x i16> %10976, i16 %10980, i32 21
  %10982 = extractelement <64 x i32> %10871, i32 22
  %10983 = sext i32 %10982 to i64
  %10984 = getelementptr inbounds i16, i16* %7293, i64 %10983
  %10985 = load i16, i16* %10984, align 2, !tbaa !382
  %10986 = insertelement <64 x i16> %10981, i16 %10985, i32 22
  %10987 = extractelement <64 x i32> %10871, i32 23
  %10988 = sext i32 %10987 to i64
  %10989 = getelementptr inbounds i16, i16* %7293, i64 %10988
  %10990 = load i16, i16* %10989, align 2, !tbaa !382
  %10991 = insertelement <64 x i16> %10986, i16 %10990, i32 23
  %10992 = extractelement <64 x i32> %10871, i32 24
  %10993 = sext i32 %10992 to i64
  %10994 = getelementptr inbounds i16, i16* %7293, i64 %10993
  %10995 = load i16, i16* %10994, align 2, !tbaa !382
  %10996 = insertelement <64 x i16> %10991, i16 %10995, i32 24
  %10997 = extractelement <64 x i32> %10871, i32 25
  %10998 = sext i32 %10997 to i64
  %10999 = getelementptr inbounds i16, i16* %7293, i64 %10998
  %11000 = load i16, i16* %10999, align 2, !tbaa !382
  %11001 = insertelement <64 x i16> %10996, i16 %11000, i32 25
  %11002 = extractelement <64 x i32> %10871, i32 26
  %11003 = sext i32 %11002 to i64
  %11004 = getelementptr inbounds i16, i16* %7293, i64 %11003
  %11005 = load i16, i16* %11004, align 2, !tbaa !382
  %11006 = insertelement <64 x i16> %11001, i16 %11005, i32 26
  %11007 = extractelement <64 x i32> %10871, i32 27
  %11008 = sext i32 %11007 to i64
  %11009 = getelementptr inbounds i16, i16* %7293, i64 %11008
  %11010 = load i16, i16* %11009, align 2, !tbaa !382
  %11011 = insertelement <64 x i16> %11006, i16 %11010, i32 27
  %11012 = extractelement <64 x i32> %10871, i32 28
  %11013 = sext i32 %11012 to i64
  %11014 = getelementptr inbounds i16, i16* %7293, i64 %11013
  %11015 = load i16, i16* %11014, align 2, !tbaa !382
  %11016 = insertelement <64 x i16> %11011, i16 %11015, i32 28
  %11017 = extractelement <64 x i32> %10871, i32 29
  %11018 = sext i32 %11017 to i64
  %11019 = getelementptr inbounds i16, i16* %7293, i64 %11018
  %11020 = load i16, i16* %11019, align 2, !tbaa !382
  %11021 = insertelement <64 x i16> %11016, i16 %11020, i32 29
  %11022 = extractelement <64 x i32> %10871, i32 30
  %11023 = sext i32 %11022 to i64
  %11024 = getelementptr inbounds i16, i16* %7293, i64 %11023
  %11025 = load i16, i16* %11024, align 2, !tbaa !382
  %11026 = insertelement <64 x i16> %11021, i16 %11025, i32 30
  %11027 = extractelement <64 x i32> %10871, i32 31
  %11028 = sext i32 %11027 to i64
  %11029 = getelementptr inbounds i16, i16* %7293, i64 %11028
  %11030 = load i16, i16* %11029, align 2, !tbaa !382
  %11031 = insertelement <64 x i16> %11026, i16 %11030, i32 31
  %11032 = extractelement <64 x i32> %10871, i32 32
  %11033 = sext i32 %11032 to i64
  %11034 = getelementptr inbounds i16, i16* %7293, i64 %11033
  %11035 = load i16, i16* %11034, align 2, !tbaa !382
  %11036 = insertelement <64 x i16> %11031, i16 %11035, i32 32
  %11037 = extractelement <64 x i32> %10871, i32 33
  %11038 = sext i32 %11037 to i64
  %11039 = getelementptr inbounds i16, i16* %7293, i64 %11038
  %11040 = load i16, i16* %11039, align 2, !tbaa !382
  %11041 = insertelement <64 x i16> %11036, i16 %11040, i32 33
  %11042 = extractelement <64 x i32> %10871, i32 34
  %11043 = sext i32 %11042 to i64
  %11044 = getelementptr inbounds i16, i16* %7293, i64 %11043
  %11045 = load i16, i16* %11044, align 2, !tbaa !382
  %11046 = insertelement <64 x i16> %11041, i16 %11045, i32 34
  %11047 = extractelement <64 x i32> %10871, i32 35
  %11048 = sext i32 %11047 to i64
  %11049 = getelementptr inbounds i16, i16* %7293, i64 %11048
  %11050 = load i16, i16* %11049, align 2, !tbaa !382
  %11051 = insertelement <64 x i16> %11046, i16 %11050, i32 35
  %11052 = extractelement <64 x i32> %10871, i32 36
  %11053 = sext i32 %11052 to i64
  %11054 = getelementptr inbounds i16, i16* %7293, i64 %11053
  %11055 = load i16, i16* %11054, align 2, !tbaa !382
  %11056 = insertelement <64 x i16> %11051, i16 %11055, i32 36
  %11057 = extractelement <64 x i32> %10871, i32 37
  %11058 = sext i32 %11057 to i64
  %11059 = getelementptr inbounds i16, i16* %7293, i64 %11058
  %11060 = load i16, i16* %11059, align 2, !tbaa !382
  %11061 = insertelement <64 x i16> %11056, i16 %11060, i32 37
  %11062 = extractelement <64 x i32> %10871, i32 38
  %11063 = sext i32 %11062 to i64
  %11064 = getelementptr inbounds i16, i16* %7293, i64 %11063
  %11065 = load i16, i16* %11064, align 2, !tbaa !382
  %11066 = insertelement <64 x i16> %11061, i16 %11065, i32 38
  %11067 = extractelement <64 x i32> %10871, i32 39
  %11068 = sext i32 %11067 to i64
  %11069 = getelementptr inbounds i16, i16* %7293, i64 %11068
  %11070 = load i16, i16* %11069, align 2, !tbaa !382
  %11071 = insertelement <64 x i16> %11066, i16 %11070, i32 39
  %11072 = extractelement <64 x i32> %10871, i32 40
  %11073 = sext i32 %11072 to i64
  %11074 = getelementptr inbounds i16, i16* %7293, i64 %11073
  %11075 = load i16, i16* %11074, align 2, !tbaa !382
  %11076 = insertelement <64 x i16> %11071, i16 %11075, i32 40
  %11077 = extractelement <64 x i32> %10871, i32 41
  %11078 = sext i32 %11077 to i64
  %11079 = getelementptr inbounds i16, i16* %7293, i64 %11078
  %11080 = load i16, i16* %11079, align 2, !tbaa !382
  %11081 = insertelement <64 x i16> %11076, i16 %11080, i32 41
  %11082 = extractelement <64 x i32> %10871, i32 42
  %11083 = sext i32 %11082 to i64
  %11084 = getelementptr inbounds i16, i16* %7293, i64 %11083
  %11085 = load i16, i16* %11084, align 2, !tbaa !382
  %11086 = insertelement <64 x i16> %11081, i16 %11085, i32 42
  %11087 = extractelement <64 x i32> %10871, i32 43
  %11088 = sext i32 %11087 to i64
  %11089 = getelementptr inbounds i16, i16* %7293, i64 %11088
  %11090 = load i16, i16* %11089, align 2, !tbaa !382
  %11091 = insertelement <64 x i16> %11086, i16 %11090, i32 43
  %11092 = extractelement <64 x i32> %10871, i32 44
  %11093 = sext i32 %11092 to i64
  %11094 = getelementptr inbounds i16, i16* %7293, i64 %11093
  %11095 = load i16, i16* %11094, align 2, !tbaa !382
  %11096 = insertelement <64 x i16> %11091, i16 %11095, i32 44
  %11097 = extractelement <64 x i32> %10871, i32 45
  %11098 = sext i32 %11097 to i64
  %11099 = getelementptr inbounds i16, i16* %7293, i64 %11098
  %11100 = load i16, i16* %11099, align 2, !tbaa !382
  %11101 = insertelement <64 x i16> %11096, i16 %11100, i32 45
  %11102 = extractelement <64 x i32> %10871, i32 46
  %11103 = sext i32 %11102 to i64
  %11104 = getelementptr inbounds i16, i16* %7293, i64 %11103
  %11105 = load i16, i16* %11104, align 2, !tbaa !382
  %11106 = insertelement <64 x i16> %11101, i16 %11105, i32 46
  %11107 = extractelement <64 x i32> %10871, i32 47
  %11108 = sext i32 %11107 to i64
  %11109 = getelementptr inbounds i16, i16* %7293, i64 %11108
  %11110 = load i16, i16* %11109, align 2, !tbaa !382
  %11111 = insertelement <64 x i16> %11106, i16 %11110, i32 47
  %11112 = extractelement <64 x i32> %10871, i32 48
  %11113 = sext i32 %11112 to i64
  %11114 = getelementptr inbounds i16, i16* %7293, i64 %11113
  %11115 = load i16, i16* %11114, align 2, !tbaa !382
  %11116 = insertelement <64 x i16> %11111, i16 %11115, i32 48
  %11117 = extractelement <64 x i32> %10871, i32 49
  %11118 = sext i32 %11117 to i64
  %11119 = getelementptr inbounds i16, i16* %7293, i64 %11118
  %11120 = load i16, i16* %11119, align 2, !tbaa !382
  %11121 = insertelement <64 x i16> %11116, i16 %11120, i32 49
  %11122 = extractelement <64 x i32> %10871, i32 50
  %11123 = sext i32 %11122 to i64
  %11124 = getelementptr inbounds i16, i16* %7293, i64 %11123
  %11125 = load i16, i16* %11124, align 2, !tbaa !382
  %11126 = insertelement <64 x i16> %11121, i16 %11125, i32 50
  %11127 = extractelement <64 x i32> %10871, i32 51
  %11128 = sext i32 %11127 to i64
  %11129 = getelementptr inbounds i16, i16* %7293, i64 %11128
  %11130 = load i16, i16* %11129, align 2, !tbaa !382
  %11131 = insertelement <64 x i16> %11126, i16 %11130, i32 51
  %11132 = extractelement <64 x i32> %10871, i32 52
  %11133 = sext i32 %11132 to i64
  %11134 = getelementptr inbounds i16, i16* %7293, i64 %11133
  %11135 = load i16, i16* %11134, align 2, !tbaa !382
  %11136 = insertelement <64 x i16> %11131, i16 %11135, i32 52
  %11137 = extractelement <64 x i32> %10871, i32 53
  %11138 = sext i32 %11137 to i64
  %11139 = getelementptr inbounds i16, i16* %7293, i64 %11138
  %11140 = load i16, i16* %11139, align 2, !tbaa !382
  %11141 = insertelement <64 x i16> %11136, i16 %11140, i32 53
  %11142 = extractelement <64 x i32> %10871, i32 54
  %11143 = sext i32 %11142 to i64
  %11144 = getelementptr inbounds i16, i16* %7293, i64 %11143
  %11145 = load i16, i16* %11144, align 2, !tbaa !382
  %11146 = insertelement <64 x i16> %11141, i16 %11145, i32 54
  %11147 = extractelement <64 x i32> %10871, i32 55
  %11148 = sext i32 %11147 to i64
  %11149 = getelementptr inbounds i16, i16* %7293, i64 %11148
  %11150 = load i16, i16* %11149, align 2, !tbaa !382
  %11151 = insertelement <64 x i16> %11146, i16 %11150, i32 55
  %11152 = extractelement <64 x i32> %10871, i32 56
  %11153 = sext i32 %11152 to i64
  %11154 = getelementptr inbounds i16, i16* %7293, i64 %11153
  %11155 = load i16, i16* %11154, align 2, !tbaa !382
  %11156 = insertelement <64 x i16> %11151, i16 %11155, i32 56
  %11157 = extractelement <64 x i32> %10871, i32 57
  %11158 = sext i32 %11157 to i64
  %11159 = getelementptr inbounds i16, i16* %7293, i64 %11158
  %11160 = load i16, i16* %11159, align 2, !tbaa !382
  %11161 = insertelement <64 x i16> %11156, i16 %11160, i32 57
  %11162 = extractelement <64 x i32> %10871, i32 58
  %11163 = sext i32 %11162 to i64
  %11164 = getelementptr inbounds i16, i16* %7293, i64 %11163
  %11165 = load i16, i16* %11164, align 2, !tbaa !382
  %11166 = insertelement <64 x i16> %11161, i16 %11165, i32 58
  %11167 = extractelement <64 x i32> %10871, i32 59
  %11168 = sext i32 %11167 to i64
  %11169 = getelementptr inbounds i16, i16* %7293, i64 %11168
  %11170 = load i16, i16* %11169, align 2, !tbaa !382
  %11171 = insertelement <64 x i16> %11166, i16 %11170, i32 59
  %11172 = extractelement <64 x i32> %10871, i32 60
  %11173 = sext i32 %11172 to i64
  %11174 = getelementptr inbounds i16, i16* %7293, i64 %11173
  %11175 = load i16, i16* %11174, align 2, !tbaa !382
  %11176 = insertelement <64 x i16> %11171, i16 %11175, i32 60
  %11177 = extractelement <64 x i32> %10871, i32 61
  %11178 = sext i32 %11177 to i64
  %11179 = getelementptr inbounds i16, i16* %7293, i64 %11178
  %11180 = load i16, i16* %11179, align 2, !tbaa !382
  %11181 = insertelement <64 x i16> %11176, i16 %11180, i32 61
  %11182 = extractelement <64 x i32> %10871, i32 62
  %11183 = sext i32 %11182 to i64
  %11184 = getelementptr inbounds i16, i16* %7293, i64 %11183
  %11185 = load i16, i16* %11184, align 2, !tbaa !382
  %11186 = insertelement <64 x i16> %11181, i16 %11185, i32 62
  %11187 = extractelement <64 x i32> %10871, i32 63
  %11188 = sext i32 %11187 to i64
  %11189 = getelementptr inbounds i16, i16* %7293, i64 %11188
  %11190 = load i16, i16* %11189, align 2, !tbaa !382
  %11191 = insertelement <64 x i16> %11186, i16 %11190, i32 63
  %11192 = add nsw i32 %blur_x.s0.x.v1.base.s85, -61
  %11193 = insertelement <64 x i32> undef, i32 %11192, i32 0
  %11194 = shufflevector <64 x i32> %11193, <64 x i32> undef, <64 x i32> zeroinitializer
  %11195 = add nsw <64 x i32> %11194, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %11196 = shufflevector <64 x i32> %11195, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11197 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11196, <4 x i32> %7290)
  %11198 = shufflevector <64 x i32> %11195, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11199 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11198, <4 x i32> %7290)
  %11200 = shufflevector <64 x i32> %11195, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %11201 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11200, <4 x i32> %7290)
  %11202 = shufflevector <64 x i32> %11195, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %11203 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11202, <4 x i32> %7290)
  %11204 = shufflevector <64 x i32> %11195, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %11205 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11204, <4 x i32> %7290)
  %11206 = shufflevector <64 x i32> %11195, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %11207 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11206, <4 x i32> %7290)
  %11208 = shufflevector <64 x i32> %11195, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %11209 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11208, <4 x i32> %7290)
  %11210 = shufflevector <64 x i32> %11195, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %11211 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11210, <4 x i32> %7290)
  %11212 = shufflevector <64 x i32> %11195, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %11213 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11212, <4 x i32> %7290)
  %11214 = shufflevector <64 x i32> %11195, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %11215 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11214, <4 x i32> %7290)
  %11216 = shufflevector <64 x i32> %11195, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %11217 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11216, <4 x i32> %7290)
  %11218 = shufflevector <64 x i32> %11195, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %11219 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11218, <4 x i32> %7290)
  %11220 = shufflevector <64 x i32> %11195, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %11221 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11220, <4 x i32> %7290)
  %11222 = shufflevector <64 x i32> %11195, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %11223 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11222, <4 x i32> %7290)
  %11224 = shufflevector <64 x i32> %11195, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %11225 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11224, <4 x i32> %7290)
  %11226 = shufflevector <64 x i32> %11195, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %11227 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11226, <4 x i32> %7290)
  %11228 = shufflevector <4 x i32> %11227, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %11229 = shufflevector <8 x i32> %11228, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %11230 = shufflevector <16 x i32> %11229, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %11231 = shufflevector <32 x i32> %11230, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %11232 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11197, <4 x i32> %7292)
  %11233 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11199, <4 x i32> %7292)
  %11234 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11201, <4 x i32> %7292)
  %11235 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11203, <4 x i32> %7292)
  %11236 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11205, <4 x i32> %7292)
  %11237 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11207, <4 x i32> %7292)
  %11238 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11209, <4 x i32> %7292)
  %11239 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11211, <4 x i32> %7292)
  %11240 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11213, <4 x i32> %7292)
  %11241 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11215, <4 x i32> %7292)
  %11242 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11217, <4 x i32> %7292)
  %11243 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11219, <4 x i32> %7292)
  %11244 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11221, <4 x i32> %7292)
  %11245 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11223, <4 x i32> %7292)
  %11246 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11225, <4 x i32> %7292)
  %11247 = shufflevector <64 x i32> %11231, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %11248 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11247, <4 x i32> %7292)
  %11249 = shufflevector <4 x i32> %11232, <4 x i32> %11233, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11250 = shufflevector <4 x i32> %11234, <4 x i32> %11235, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11251 = shufflevector <4 x i32> %11236, <4 x i32> %11237, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11252 = shufflevector <4 x i32> %11238, <4 x i32> %11239, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11253 = shufflevector <4 x i32> %11240, <4 x i32> %11241, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11254 = shufflevector <4 x i32> %11242, <4 x i32> %11243, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11255 = shufflevector <4 x i32> %11244, <4 x i32> %11245, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11256 = shufflevector <4 x i32> %11246, <4 x i32> %11248, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11257 = shufflevector <8 x i32> %11249, <8 x i32> %11250, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11258 = shufflevector <8 x i32> %11251, <8 x i32> %11252, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11259 = shufflevector <8 x i32> %11253, <8 x i32> %11254, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11260 = shufflevector <8 x i32> %11255, <8 x i32> %11256, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11261 = shufflevector <16 x i32> %11257, <16 x i32> %11258, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11262 = shufflevector <16 x i32> %11259, <16 x i32> %11260, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11263 = shufflevector <32 x i32> %11261, <32 x i32> %11262, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %11264 = add nsw <64 x i32> %11263, %t20186
  %11265 = extractelement <64 x i32> %11264, i32 0
  %11266 = sext i32 %11265 to i64
  %11267 = getelementptr inbounds i16, i16* %7293, i64 %11266
  %11268 = load i16, i16* %11267, align 2, !tbaa !382
  %11269 = insertelement <64 x i16> undef, i16 %11268, i32 0
  %11270 = extractelement <64 x i32> %11264, i32 1
  %11271 = sext i32 %11270 to i64
  %11272 = getelementptr inbounds i16, i16* %7293, i64 %11271
  %11273 = load i16, i16* %11272, align 2, !tbaa !382
  %11274 = insertelement <64 x i16> %11269, i16 %11273, i32 1
  %11275 = extractelement <64 x i32> %11264, i32 2
  %11276 = sext i32 %11275 to i64
  %11277 = getelementptr inbounds i16, i16* %7293, i64 %11276
  %11278 = load i16, i16* %11277, align 2, !tbaa !382
  %11279 = insertelement <64 x i16> %11274, i16 %11278, i32 2
  %11280 = extractelement <64 x i32> %11264, i32 3
  %11281 = sext i32 %11280 to i64
  %11282 = getelementptr inbounds i16, i16* %7293, i64 %11281
  %11283 = load i16, i16* %11282, align 2, !tbaa !382
  %11284 = insertelement <64 x i16> %11279, i16 %11283, i32 3
  %11285 = extractelement <64 x i32> %11264, i32 4
  %11286 = sext i32 %11285 to i64
  %11287 = getelementptr inbounds i16, i16* %7293, i64 %11286
  %11288 = load i16, i16* %11287, align 2, !tbaa !382
  %11289 = insertelement <64 x i16> %11284, i16 %11288, i32 4
  %11290 = extractelement <64 x i32> %11264, i32 5
  %11291 = sext i32 %11290 to i64
  %11292 = getelementptr inbounds i16, i16* %7293, i64 %11291
  %11293 = load i16, i16* %11292, align 2, !tbaa !382
  %11294 = insertelement <64 x i16> %11289, i16 %11293, i32 5
  %11295 = extractelement <64 x i32> %11264, i32 6
  %11296 = sext i32 %11295 to i64
  %11297 = getelementptr inbounds i16, i16* %7293, i64 %11296
  %11298 = load i16, i16* %11297, align 2, !tbaa !382
  %11299 = insertelement <64 x i16> %11294, i16 %11298, i32 6
  %11300 = extractelement <64 x i32> %11264, i32 7
  %11301 = sext i32 %11300 to i64
  %11302 = getelementptr inbounds i16, i16* %7293, i64 %11301
  %11303 = load i16, i16* %11302, align 2, !tbaa !382
  %11304 = insertelement <64 x i16> %11299, i16 %11303, i32 7
  %11305 = extractelement <64 x i32> %11264, i32 8
  %11306 = sext i32 %11305 to i64
  %11307 = getelementptr inbounds i16, i16* %7293, i64 %11306
  %11308 = load i16, i16* %11307, align 2, !tbaa !382
  %11309 = insertelement <64 x i16> %11304, i16 %11308, i32 8
  %11310 = extractelement <64 x i32> %11264, i32 9
  %11311 = sext i32 %11310 to i64
  %11312 = getelementptr inbounds i16, i16* %7293, i64 %11311
  %11313 = load i16, i16* %11312, align 2, !tbaa !382
  %11314 = insertelement <64 x i16> %11309, i16 %11313, i32 9
  %11315 = extractelement <64 x i32> %11264, i32 10
  %11316 = sext i32 %11315 to i64
  %11317 = getelementptr inbounds i16, i16* %7293, i64 %11316
  %11318 = load i16, i16* %11317, align 2, !tbaa !382
  %11319 = insertelement <64 x i16> %11314, i16 %11318, i32 10
  %11320 = extractelement <64 x i32> %11264, i32 11
  %11321 = sext i32 %11320 to i64
  %11322 = getelementptr inbounds i16, i16* %7293, i64 %11321
  %11323 = load i16, i16* %11322, align 2, !tbaa !382
  %11324 = insertelement <64 x i16> %11319, i16 %11323, i32 11
  %11325 = extractelement <64 x i32> %11264, i32 12
  %11326 = sext i32 %11325 to i64
  %11327 = getelementptr inbounds i16, i16* %7293, i64 %11326
  %11328 = load i16, i16* %11327, align 2, !tbaa !382
  %11329 = insertelement <64 x i16> %11324, i16 %11328, i32 12
  %11330 = extractelement <64 x i32> %11264, i32 13
  %11331 = sext i32 %11330 to i64
  %11332 = getelementptr inbounds i16, i16* %7293, i64 %11331
  %11333 = load i16, i16* %11332, align 2, !tbaa !382
  %11334 = insertelement <64 x i16> %11329, i16 %11333, i32 13
  %11335 = extractelement <64 x i32> %11264, i32 14
  %11336 = sext i32 %11335 to i64
  %11337 = getelementptr inbounds i16, i16* %7293, i64 %11336
  %11338 = load i16, i16* %11337, align 2, !tbaa !382
  %11339 = insertelement <64 x i16> %11334, i16 %11338, i32 14
  %11340 = extractelement <64 x i32> %11264, i32 15
  %11341 = sext i32 %11340 to i64
  %11342 = getelementptr inbounds i16, i16* %7293, i64 %11341
  %11343 = load i16, i16* %11342, align 2, !tbaa !382
  %11344 = insertelement <64 x i16> %11339, i16 %11343, i32 15
  %11345 = extractelement <64 x i32> %11264, i32 16
  %11346 = sext i32 %11345 to i64
  %11347 = getelementptr inbounds i16, i16* %7293, i64 %11346
  %11348 = load i16, i16* %11347, align 2, !tbaa !382
  %11349 = insertelement <64 x i16> %11344, i16 %11348, i32 16
  %11350 = extractelement <64 x i32> %11264, i32 17
  %11351 = sext i32 %11350 to i64
  %11352 = getelementptr inbounds i16, i16* %7293, i64 %11351
  %11353 = load i16, i16* %11352, align 2, !tbaa !382
  %11354 = insertelement <64 x i16> %11349, i16 %11353, i32 17
  %11355 = extractelement <64 x i32> %11264, i32 18
  %11356 = sext i32 %11355 to i64
  %11357 = getelementptr inbounds i16, i16* %7293, i64 %11356
  %11358 = load i16, i16* %11357, align 2, !tbaa !382
  %11359 = insertelement <64 x i16> %11354, i16 %11358, i32 18
  %11360 = extractelement <64 x i32> %11264, i32 19
  %11361 = sext i32 %11360 to i64
  %11362 = getelementptr inbounds i16, i16* %7293, i64 %11361
  %11363 = load i16, i16* %11362, align 2, !tbaa !382
  %11364 = insertelement <64 x i16> %11359, i16 %11363, i32 19
  %11365 = extractelement <64 x i32> %11264, i32 20
  %11366 = sext i32 %11365 to i64
  %11367 = getelementptr inbounds i16, i16* %7293, i64 %11366
  %11368 = load i16, i16* %11367, align 2, !tbaa !382
  %11369 = insertelement <64 x i16> %11364, i16 %11368, i32 20
  %11370 = extractelement <64 x i32> %11264, i32 21
  %11371 = sext i32 %11370 to i64
  %11372 = getelementptr inbounds i16, i16* %7293, i64 %11371
  %11373 = load i16, i16* %11372, align 2, !tbaa !382
  %11374 = insertelement <64 x i16> %11369, i16 %11373, i32 21
  %11375 = extractelement <64 x i32> %11264, i32 22
  %11376 = sext i32 %11375 to i64
  %11377 = getelementptr inbounds i16, i16* %7293, i64 %11376
  %11378 = load i16, i16* %11377, align 2, !tbaa !382
  %11379 = insertelement <64 x i16> %11374, i16 %11378, i32 22
  %11380 = extractelement <64 x i32> %11264, i32 23
  %11381 = sext i32 %11380 to i64
  %11382 = getelementptr inbounds i16, i16* %7293, i64 %11381
  %11383 = load i16, i16* %11382, align 2, !tbaa !382
  %11384 = insertelement <64 x i16> %11379, i16 %11383, i32 23
  %11385 = extractelement <64 x i32> %11264, i32 24
  %11386 = sext i32 %11385 to i64
  %11387 = getelementptr inbounds i16, i16* %7293, i64 %11386
  %11388 = load i16, i16* %11387, align 2, !tbaa !382
  %11389 = insertelement <64 x i16> %11384, i16 %11388, i32 24
  %11390 = extractelement <64 x i32> %11264, i32 25
  %11391 = sext i32 %11390 to i64
  %11392 = getelementptr inbounds i16, i16* %7293, i64 %11391
  %11393 = load i16, i16* %11392, align 2, !tbaa !382
  %11394 = insertelement <64 x i16> %11389, i16 %11393, i32 25
  %11395 = extractelement <64 x i32> %11264, i32 26
  %11396 = sext i32 %11395 to i64
  %11397 = getelementptr inbounds i16, i16* %7293, i64 %11396
  %11398 = load i16, i16* %11397, align 2, !tbaa !382
  %11399 = insertelement <64 x i16> %11394, i16 %11398, i32 26
  %11400 = extractelement <64 x i32> %11264, i32 27
  %11401 = sext i32 %11400 to i64
  %11402 = getelementptr inbounds i16, i16* %7293, i64 %11401
  %11403 = load i16, i16* %11402, align 2, !tbaa !382
  %11404 = insertelement <64 x i16> %11399, i16 %11403, i32 27
  %11405 = extractelement <64 x i32> %11264, i32 28
  %11406 = sext i32 %11405 to i64
  %11407 = getelementptr inbounds i16, i16* %7293, i64 %11406
  %11408 = load i16, i16* %11407, align 2, !tbaa !382
  %11409 = insertelement <64 x i16> %11404, i16 %11408, i32 28
  %11410 = extractelement <64 x i32> %11264, i32 29
  %11411 = sext i32 %11410 to i64
  %11412 = getelementptr inbounds i16, i16* %7293, i64 %11411
  %11413 = load i16, i16* %11412, align 2, !tbaa !382
  %11414 = insertelement <64 x i16> %11409, i16 %11413, i32 29
  %11415 = extractelement <64 x i32> %11264, i32 30
  %11416 = sext i32 %11415 to i64
  %11417 = getelementptr inbounds i16, i16* %7293, i64 %11416
  %11418 = load i16, i16* %11417, align 2, !tbaa !382
  %11419 = insertelement <64 x i16> %11414, i16 %11418, i32 30
  %11420 = extractelement <64 x i32> %11264, i32 31
  %11421 = sext i32 %11420 to i64
  %11422 = getelementptr inbounds i16, i16* %7293, i64 %11421
  %11423 = load i16, i16* %11422, align 2, !tbaa !382
  %11424 = insertelement <64 x i16> %11419, i16 %11423, i32 31
  %11425 = extractelement <64 x i32> %11264, i32 32
  %11426 = sext i32 %11425 to i64
  %11427 = getelementptr inbounds i16, i16* %7293, i64 %11426
  %11428 = load i16, i16* %11427, align 2, !tbaa !382
  %11429 = insertelement <64 x i16> %11424, i16 %11428, i32 32
  %11430 = extractelement <64 x i32> %11264, i32 33
  %11431 = sext i32 %11430 to i64
  %11432 = getelementptr inbounds i16, i16* %7293, i64 %11431
  %11433 = load i16, i16* %11432, align 2, !tbaa !382
  %11434 = insertelement <64 x i16> %11429, i16 %11433, i32 33
  %11435 = extractelement <64 x i32> %11264, i32 34
  %11436 = sext i32 %11435 to i64
  %11437 = getelementptr inbounds i16, i16* %7293, i64 %11436
  %11438 = load i16, i16* %11437, align 2, !tbaa !382
  %11439 = insertelement <64 x i16> %11434, i16 %11438, i32 34
  %11440 = extractelement <64 x i32> %11264, i32 35
  %11441 = sext i32 %11440 to i64
  %11442 = getelementptr inbounds i16, i16* %7293, i64 %11441
  %11443 = load i16, i16* %11442, align 2, !tbaa !382
  %11444 = insertelement <64 x i16> %11439, i16 %11443, i32 35
  %11445 = extractelement <64 x i32> %11264, i32 36
  %11446 = sext i32 %11445 to i64
  %11447 = getelementptr inbounds i16, i16* %7293, i64 %11446
  %11448 = load i16, i16* %11447, align 2, !tbaa !382
  %11449 = insertelement <64 x i16> %11444, i16 %11448, i32 36
  %11450 = extractelement <64 x i32> %11264, i32 37
  %11451 = sext i32 %11450 to i64
  %11452 = getelementptr inbounds i16, i16* %7293, i64 %11451
  %11453 = load i16, i16* %11452, align 2, !tbaa !382
  %11454 = insertelement <64 x i16> %11449, i16 %11453, i32 37
  %11455 = extractelement <64 x i32> %11264, i32 38
  %11456 = sext i32 %11455 to i64
  %11457 = getelementptr inbounds i16, i16* %7293, i64 %11456
  %11458 = load i16, i16* %11457, align 2, !tbaa !382
  %11459 = insertelement <64 x i16> %11454, i16 %11458, i32 38
  %11460 = extractelement <64 x i32> %11264, i32 39
  %11461 = sext i32 %11460 to i64
  %11462 = getelementptr inbounds i16, i16* %7293, i64 %11461
  %11463 = load i16, i16* %11462, align 2, !tbaa !382
  %11464 = insertelement <64 x i16> %11459, i16 %11463, i32 39
  %11465 = extractelement <64 x i32> %11264, i32 40
  %11466 = sext i32 %11465 to i64
  %11467 = getelementptr inbounds i16, i16* %7293, i64 %11466
  %11468 = load i16, i16* %11467, align 2, !tbaa !382
  %11469 = insertelement <64 x i16> %11464, i16 %11468, i32 40
  %11470 = extractelement <64 x i32> %11264, i32 41
  %11471 = sext i32 %11470 to i64
  %11472 = getelementptr inbounds i16, i16* %7293, i64 %11471
  %11473 = load i16, i16* %11472, align 2, !tbaa !382
  %11474 = insertelement <64 x i16> %11469, i16 %11473, i32 41
  %11475 = extractelement <64 x i32> %11264, i32 42
  %11476 = sext i32 %11475 to i64
  %11477 = getelementptr inbounds i16, i16* %7293, i64 %11476
  %11478 = load i16, i16* %11477, align 2, !tbaa !382
  %11479 = insertelement <64 x i16> %11474, i16 %11478, i32 42
  %11480 = extractelement <64 x i32> %11264, i32 43
  %11481 = sext i32 %11480 to i64
  %11482 = getelementptr inbounds i16, i16* %7293, i64 %11481
  %11483 = load i16, i16* %11482, align 2, !tbaa !382
  %11484 = insertelement <64 x i16> %11479, i16 %11483, i32 43
  %11485 = extractelement <64 x i32> %11264, i32 44
  %11486 = sext i32 %11485 to i64
  %11487 = getelementptr inbounds i16, i16* %7293, i64 %11486
  %11488 = load i16, i16* %11487, align 2, !tbaa !382
  %11489 = insertelement <64 x i16> %11484, i16 %11488, i32 44
  %11490 = extractelement <64 x i32> %11264, i32 45
  %11491 = sext i32 %11490 to i64
  %11492 = getelementptr inbounds i16, i16* %7293, i64 %11491
  %11493 = load i16, i16* %11492, align 2, !tbaa !382
  %11494 = insertelement <64 x i16> %11489, i16 %11493, i32 45
  %11495 = extractelement <64 x i32> %11264, i32 46
  %11496 = sext i32 %11495 to i64
  %11497 = getelementptr inbounds i16, i16* %7293, i64 %11496
  %11498 = load i16, i16* %11497, align 2, !tbaa !382
  %11499 = insertelement <64 x i16> %11494, i16 %11498, i32 46
  %11500 = extractelement <64 x i32> %11264, i32 47
  %11501 = sext i32 %11500 to i64
  %11502 = getelementptr inbounds i16, i16* %7293, i64 %11501
  %11503 = load i16, i16* %11502, align 2, !tbaa !382
  %11504 = insertelement <64 x i16> %11499, i16 %11503, i32 47
  %11505 = extractelement <64 x i32> %11264, i32 48
  %11506 = sext i32 %11505 to i64
  %11507 = getelementptr inbounds i16, i16* %7293, i64 %11506
  %11508 = load i16, i16* %11507, align 2, !tbaa !382
  %11509 = insertelement <64 x i16> %11504, i16 %11508, i32 48
  %11510 = extractelement <64 x i32> %11264, i32 49
  %11511 = sext i32 %11510 to i64
  %11512 = getelementptr inbounds i16, i16* %7293, i64 %11511
  %11513 = load i16, i16* %11512, align 2, !tbaa !382
  %11514 = insertelement <64 x i16> %11509, i16 %11513, i32 49
  %11515 = extractelement <64 x i32> %11264, i32 50
  %11516 = sext i32 %11515 to i64
  %11517 = getelementptr inbounds i16, i16* %7293, i64 %11516
  %11518 = load i16, i16* %11517, align 2, !tbaa !382
  %11519 = insertelement <64 x i16> %11514, i16 %11518, i32 50
  %11520 = extractelement <64 x i32> %11264, i32 51
  %11521 = sext i32 %11520 to i64
  %11522 = getelementptr inbounds i16, i16* %7293, i64 %11521
  %11523 = load i16, i16* %11522, align 2, !tbaa !382
  %11524 = insertelement <64 x i16> %11519, i16 %11523, i32 51
  %11525 = extractelement <64 x i32> %11264, i32 52
  %11526 = sext i32 %11525 to i64
  %11527 = getelementptr inbounds i16, i16* %7293, i64 %11526
  %11528 = load i16, i16* %11527, align 2, !tbaa !382
  %11529 = insertelement <64 x i16> %11524, i16 %11528, i32 52
  %11530 = extractelement <64 x i32> %11264, i32 53
  %11531 = sext i32 %11530 to i64
  %11532 = getelementptr inbounds i16, i16* %7293, i64 %11531
  %11533 = load i16, i16* %11532, align 2, !tbaa !382
  %11534 = insertelement <64 x i16> %11529, i16 %11533, i32 53
  %11535 = extractelement <64 x i32> %11264, i32 54
  %11536 = sext i32 %11535 to i64
  %11537 = getelementptr inbounds i16, i16* %7293, i64 %11536
  %11538 = load i16, i16* %11537, align 2, !tbaa !382
  %11539 = insertelement <64 x i16> %11534, i16 %11538, i32 54
  %11540 = extractelement <64 x i32> %11264, i32 55
  %11541 = sext i32 %11540 to i64
  %11542 = getelementptr inbounds i16, i16* %7293, i64 %11541
  %11543 = load i16, i16* %11542, align 2, !tbaa !382
  %11544 = insertelement <64 x i16> %11539, i16 %11543, i32 55
  %11545 = extractelement <64 x i32> %11264, i32 56
  %11546 = sext i32 %11545 to i64
  %11547 = getelementptr inbounds i16, i16* %7293, i64 %11546
  %11548 = load i16, i16* %11547, align 2, !tbaa !382
  %11549 = insertelement <64 x i16> %11544, i16 %11548, i32 56
  %11550 = extractelement <64 x i32> %11264, i32 57
  %11551 = sext i32 %11550 to i64
  %11552 = getelementptr inbounds i16, i16* %7293, i64 %11551
  %11553 = load i16, i16* %11552, align 2, !tbaa !382
  %11554 = insertelement <64 x i16> %11549, i16 %11553, i32 57
  %11555 = extractelement <64 x i32> %11264, i32 58
  %11556 = sext i32 %11555 to i64
  %11557 = getelementptr inbounds i16, i16* %7293, i64 %11556
  %11558 = load i16, i16* %11557, align 2, !tbaa !382
  %11559 = insertelement <64 x i16> %11554, i16 %11558, i32 58
  %11560 = extractelement <64 x i32> %11264, i32 59
  %11561 = sext i32 %11560 to i64
  %11562 = getelementptr inbounds i16, i16* %7293, i64 %11561
  %11563 = load i16, i16* %11562, align 2, !tbaa !382
  %11564 = insertelement <64 x i16> %11559, i16 %11563, i32 59
  %11565 = extractelement <64 x i32> %11264, i32 60
  %11566 = sext i32 %11565 to i64
  %11567 = getelementptr inbounds i16, i16* %7293, i64 %11566
  %11568 = load i16, i16* %11567, align 2, !tbaa !382
  %11569 = insertelement <64 x i16> %11564, i16 %11568, i32 60
  %11570 = extractelement <64 x i32> %11264, i32 61
  %11571 = sext i32 %11570 to i64
  %11572 = getelementptr inbounds i16, i16* %7293, i64 %11571
  %11573 = load i16, i16* %11572, align 2, !tbaa !382
  %11574 = insertelement <64 x i16> %11569, i16 %11573, i32 61
  %11575 = extractelement <64 x i32> %11264, i32 62
  %11576 = sext i32 %11575 to i64
  %11577 = getelementptr inbounds i16, i16* %7293, i64 %11576
  %11578 = load i16, i16* %11577, align 2, !tbaa !382
  %11579 = insertelement <64 x i16> %11574, i16 %11578, i32 62
  %11580 = extractelement <64 x i32> %11264, i32 63
  %11581 = sext i32 %11580 to i64
  %11582 = getelementptr inbounds i16, i16* %7293, i64 %11581
  %11583 = load i16, i16* %11582, align 2, !tbaa !382
  %11584 = insertelement <64 x i16> %11579, i16 %11583, i32 63
  %11585 = add <64 x i16> %10405, %10012
  %11586 = add <64 x i16> %11585, %10798
  %11587 = add <64 x i16> %11586, %11191
  %11588 = add <64 x i16> %11587, %11584
  %11589 = shufflevector <64 x i16> %11588, <64 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11590 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11589, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11591 = shufflevector <64 x i16> %11588, <64 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11592 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11591, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11593 = shufflevector <64 x i16> %11588, <64 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %11594 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11593, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11595 = shufflevector <64 x i16> %11588, <64 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %11596 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11595, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11597 = shufflevector <64 x i16> %11588, <64 x i16> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %11598 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11597, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11599 = shufflevector <64 x i16> %11588, <64 x i16> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %11600 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11599, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11601 = shufflevector <64 x i16> %11588, <64 x i16> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %11602 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11601, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11603 = shufflevector <64 x i16> %11588, <64 x i16> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %11604 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11603, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11605 = shufflevector <64 x i16> %11588, <64 x i16> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %11606 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11605, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11607 = shufflevector <64 x i16> %11588, <64 x i16> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %11608 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11607, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11609 = shufflevector <64 x i16> %11588, <64 x i16> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %11610 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11609, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11611 = shufflevector <64 x i16> %11588, <64 x i16> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %11612 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11611, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11613 = shufflevector <64 x i16> %11588, <64 x i16> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %11614 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11613, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11615 = shufflevector <64 x i16> %11588, <64 x i16> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %11616 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11615, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11617 = shufflevector <64 x i16> %11588, <64 x i16> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %11618 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11617, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11619 = shufflevector <64 x i16> %11588, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %11620 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11619, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11621 = shufflevector <4 x i32> %11590, <4 x i32> %11592, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11622 = shufflevector <4 x i32> %11594, <4 x i32> %11596, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11623 = shufflevector <4 x i32> %11598, <4 x i32> %11600, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11624 = shufflevector <4 x i32> %11602, <4 x i32> %11604, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11625 = shufflevector <4 x i32> %11606, <4 x i32> %11608, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11626 = shufflevector <4 x i32> %11610, <4 x i32> %11612, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11627 = shufflevector <4 x i32> %11614, <4 x i32> %11616, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11628 = shufflevector <4 x i32> %11618, <4 x i32> %11620, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11629 = shufflevector <8 x i32> %11621, <8 x i32> %11622, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11630 = shufflevector <8 x i32> %11623, <8 x i32> %11624, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11631 = shufflevector <8 x i32> %11625, <8 x i32> %11626, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11632 = shufflevector <8 x i32> %11627, <8 x i32> %11628, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11633 = shufflevector <16 x i32> %11629, <16 x i32> %11630, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11634 = shufflevector <16 x i32> %11631, <16 x i32> %11632, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11635 = shufflevector <32 x i32> %11633, <32 x i32> %11634, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %11636 = lshr <64 x i32> %11635, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %11637 = trunc <64 x i32> %11636 to <64 x i16>
  %11638 = shufflevector <64 x i16> %11637, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11639 = sext i32 %blur_x.s0.x.v1.base.s85 to i64
  %11640 = add nsw i64 %11639, %9616
  %11641 = getelementptr inbounds i16, i16* %blur_x56, i64 %11640
  %11642 = bitcast i16* %11641 to <8 x i16>*
  store <8 x i16> %11638, <8 x i16>* %11642, align 2, !tbaa !385
  %11643 = shufflevector <64 x i16> %11637, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11644 = getelementptr inbounds i16, i16* %11641, i64 8
  %11645 = bitcast i16* %11644 to <8 x i16>*
  store <8 x i16> %11643, <8 x i16>* %11645, align 2, !tbaa !385
  %11646 = shufflevector <64 x i16> %11637, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %11647 = getelementptr inbounds i16, i16* %11641, i64 16
  %11648 = bitcast i16* %11647 to <8 x i16>*
  store <8 x i16> %11646, <8 x i16>* %11648, align 2, !tbaa !385
  %11649 = shufflevector <64 x i16> %11637, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11650 = getelementptr inbounds i16, i16* %11641, i64 24
  %11651 = bitcast i16* %11650 to <8 x i16>*
  store <8 x i16> %11649, <8 x i16>* %11651, align 2, !tbaa !385
  %11652 = shufflevector <64 x i16> %11637, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %11653 = getelementptr inbounds i16, i16* %11641, i64 32
  %11654 = bitcast i16* %11653 to <8 x i16>*
  store <8 x i16> %11652, <8 x i16>* %11654, align 2, !tbaa !385
  %11655 = shufflevector <64 x i16> %11637, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %11656 = getelementptr inbounds i16, i16* %11641, i64 40
  %11657 = bitcast i16* %11656 to <8 x i16>*
  store <8 x i16> %11655, <8 x i16>* %11657, align 2, !tbaa !385
  %11658 = shufflevector <64 x i16> %11637, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %11659 = getelementptr inbounds i16, i16* %11641, i64 48
  %11660 = bitcast i16* %11659 to <8 x i16>*
  store <8 x i16> %11658, <8 x i16>* %11660, align 2, !tbaa !385
  %11661 = shufflevector <64 x i16> %11637, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %11662 = getelementptr inbounds i16, i16* %11641, i64 56
  %11663 = bitcast i16* %11662 to <8 x i16>*
  store <8 x i16> %11661, <8 x i16>* %11663, align 2, !tbaa !385
  %11664 = add nuw nsw i32 %blur_x.s0.x.x.rebased84, 1
  %.not137 = icmp eq i32 %11664, %t23957
  br i1 %.not137, label %"end for blur_x.s0.x.x.rebased83", label %"for blur_x.s0.x.x.rebased82"

"end for blur_x.s0.x.x.rebased83":                ; preds = %"for blur_x.s0.x.x.rebased82", %"end for blur_x.s0.x.x.rebased76"
  %11665 = icmp ugt i64 %indvars.iv191, 3
  br i1 %11665, label %"consume blur_x90", label %after_bb87

after_bb87:                                       ; preds = %"for blur_y.s0.x.x97.preheader", %"end for blur_y.s0.x.x93", %"end for blur_x.s0.x.x.rebased83"
  %indvars.iv.next192 = add nuw nsw i64 %indvars.iv191, 1
  %.not130 = icmp eq i64 %indvars.iv.next192, 132
  br i1 %.not130, label %"end for blur_y.s0.y.yi.$n.rebased62", label %"for blur_y.s0.y.yi.$n.rebased61"

"consume blur_x90":                               ; preds = %"end for blur_x.s0.x.x.rebased83"
  br i1 %7296, label %"for blur_y.s0.x.x92.preheader", label %"end for blur_y.s0.x.x93", !prof !381

"for blur_y.s0.x.x92.preheader":                  ; preds = %"consume blur_x90"
  %11666 = add nsw i32 %7325, 5
  %11667 = and i32 %11666, 7
  %11668 = zext i32 %11667 to i64
  %11669 = mul nsw i64 %7297, %11668
  %11670 = add nsw i32 %7325, 4
  %11671 = and i32 %11670, 7
  %11672 = zext i32 %11671 to i64
  %11673 = mul nsw i64 %7297, %11672
  %11674 = add nsw i32 %7325, 6
  %11675 = and i32 %11674, 7
  %11676 = zext i32 %11675 to i64
  %11677 = mul nsw i64 %7297, %11676
  %11678 = zext i32 %7326 to i64
  %11679 = mul nsw i64 %7297, %11678
  %11680 = add nsw i32 %7325, 7
  %11681 = and i32 %11680, 7
  %11682 = zext i32 %11681 to i64
  %11683 = mul nsw i64 %7297, %11682
  %11684 = sext i32 %7325 to i64
  %11685 = add nsw i64 %11684, -4
  %11686 = mul nsw i64 %11685, %7298
  %11687 = add nsw i64 %11686, %7299
  br label %"for blur_y.s0.x.x92"

"for blur_y.s0.x.x92":                            ; preds = %"for blur_y.s0.x.x92.preheader", %"for blur_y.s0.x.x92"
  %indvars.iv188 = phi i64 [ 0, %"for blur_y.s0.x.x92.preheader" ], [ %indvars.iv.next189, %"for blur_y.s0.x.x92" ]
  %11688 = shl nsw i64 %indvars.iv188, 6
  %11689 = sub nsw i64 %11688, %7305
  %11690 = add nsw i64 %11669, %11689
  %11691 = getelementptr inbounds i16, i16* %blur_x56, i64 %11690
  %11692 = getelementptr inbounds i16, i16* %11691, i64 64
  %11693 = bitcast i16* %11692 to <8 x i16>*
  %11694 = load <8 x i16>, <8 x i16>* %11693, align 2, !tbaa !385
  %11695 = getelementptr inbounds i16, i16* %11691, i64 72
  %11696 = bitcast i16* %11695 to <8 x i16>*
  %11697 = load <8 x i16>, <8 x i16>* %11696, align 2, !tbaa !385
  %11698 = getelementptr inbounds i16, i16* %11691, i64 80
  %11699 = bitcast i16* %11698 to <8 x i16>*
  %11700 = load <8 x i16>, <8 x i16>* %11699, align 2, !tbaa !385
  %11701 = getelementptr inbounds i16, i16* %11691, i64 88
  %11702 = bitcast i16* %11701 to <8 x i16>*
  %11703 = load <8 x i16>, <8 x i16>* %11702, align 2, !tbaa !385
  %11704 = getelementptr inbounds i16, i16* %11691, i64 96
  %11705 = bitcast i16* %11704 to <8 x i16>*
  %11706 = load <8 x i16>, <8 x i16>* %11705, align 2, !tbaa !385
  %11707 = getelementptr inbounds i16, i16* %11691, i64 104
  %11708 = bitcast i16* %11707 to <8 x i16>*
  %11709 = load <8 x i16>, <8 x i16>* %11708, align 2, !tbaa !385
  %11710 = getelementptr inbounds i16, i16* %11691, i64 112
  %11711 = bitcast i16* %11710 to <8 x i16>*
  %11712 = load <8 x i16>, <8 x i16>* %11711, align 2, !tbaa !385
  %11713 = getelementptr inbounds i16, i16* %11691, i64 120
  %11714 = bitcast i16* %11713 to <8 x i16>*
  %11715 = load <8 x i16>, <8 x i16>* %11714, align 2, !tbaa !385
  %11716 = add nsw i64 %11673, %11689
  %11717 = getelementptr inbounds i16, i16* %blur_x56, i64 %11716
  %11718 = getelementptr inbounds i16, i16* %11717, i64 64
  %11719 = bitcast i16* %11718 to <8 x i16>*
  %11720 = load <8 x i16>, <8 x i16>* %11719, align 2, !tbaa !385
  %11721 = getelementptr inbounds i16, i16* %11717, i64 72
  %11722 = bitcast i16* %11721 to <8 x i16>*
  %11723 = load <8 x i16>, <8 x i16>* %11722, align 2, !tbaa !385
  %11724 = getelementptr inbounds i16, i16* %11717, i64 80
  %11725 = bitcast i16* %11724 to <8 x i16>*
  %11726 = load <8 x i16>, <8 x i16>* %11725, align 2, !tbaa !385
  %11727 = getelementptr inbounds i16, i16* %11717, i64 88
  %11728 = bitcast i16* %11727 to <8 x i16>*
  %11729 = load <8 x i16>, <8 x i16>* %11728, align 2, !tbaa !385
  %11730 = getelementptr inbounds i16, i16* %11717, i64 96
  %11731 = bitcast i16* %11730 to <8 x i16>*
  %11732 = load <8 x i16>, <8 x i16>* %11731, align 2, !tbaa !385
  %11733 = getelementptr inbounds i16, i16* %11717, i64 104
  %11734 = bitcast i16* %11733 to <8 x i16>*
  %11735 = load <8 x i16>, <8 x i16>* %11734, align 2, !tbaa !385
  %11736 = getelementptr inbounds i16, i16* %11717, i64 112
  %11737 = bitcast i16* %11736 to <8 x i16>*
  %11738 = load <8 x i16>, <8 x i16>* %11737, align 2, !tbaa !385
  %11739 = getelementptr inbounds i16, i16* %11717, i64 120
  %11740 = bitcast i16* %11739 to <8 x i16>*
  %11741 = load <8 x i16>, <8 x i16>* %11740, align 2, !tbaa !385
  %11742 = add nsw i64 %11677, %11689
  %11743 = getelementptr inbounds i16, i16* %blur_x56, i64 %11742
  %11744 = getelementptr inbounds i16, i16* %11743, i64 64
  %11745 = bitcast i16* %11744 to <8 x i16>*
  %11746 = load <8 x i16>, <8 x i16>* %11745, align 2, !tbaa !385
  %11747 = getelementptr inbounds i16, i16* %11743, i64 72
  %11748 = bitcast i16* %11747 to <8 x i16>*
  %11749 = load <8 x i16>, <8 x i16>* %11748, align 2, !tbaa !385
  %11750 = getelementptr inbounds i16, i16* %11743, i64 80
  %11751 = bitcast i16* %11750 to <8 x i16>*
  %11752 = load <8 x i16>, <8 x i16>* %11751, align 2, !tbaa !385
  %11753 = getelementptr inbounds i16, i16* %11743, i64 88
  %11754 = bitcast i16* %11753 to <8 x i16>*
  %11755 = load <8 x i16>, <8 x i16>* %11754, align 2, !tbaa !385
  %11756 = getelementptr inbounds i16, i16* %11743, i64 96
  %11757 = bitcast i16* %11756 to <8 x i16>*
  %11758 = load <8 x i16>, <8 x i16>* %11757, align 2, !tbaa !385
  %11759 = getelementptr inbounds i16, i16* %11743, i64 104
  %11760 = bitcast i16* %11759 to <8 x i16>*
  %11761 = load <8 x i16>, <8 x i16>* %11760, align 2, !tbaa !385
  %11762 = getelementptr inbounds i16, i16* %11743, i64 112
  %11763 = bitcast i16* %11762 to <8 x i16>*
  %11764 = load <8 x i16>, <8 x i16>* %11763, align 2, !tbaa !385
  %11765 = getelementptr inbounds i16, i16* %11743, i64 120
  %11766 = bitcast i16* %11765 to <8 x i16>*
  %11767 = load <8 x i16>, <8 x i16>* %11766, align 2, !tbaa !385
  %11768 = add nsw i64 %11679, %11689
  %11769 = getelementptr inbounds i16, i16* %blur_x56, i64 %11768
  %11770 = getelementptr inbounds i16, i16* %11769, i64 64
  %11771 = bitcast i16* %11770 to <8 x i16>*
  %11772 = load <8 x i16>, <8 x i16>* %11771, align 2, !tbaa !385
  %11773 = getelementptr inbounds i16, i16* %11769, i64 72
  %11774 = bitcast i16* %11773 to <8 x i16>*
  %11775 = load <8 x i16>, <8 x i16>* %11774, align 2, !tbaa !385
  %11776 = getelementptr inbounds i16, i16* %11769, i64 80
  %11777 = bitcast i16* %11776 to <8 x i16>*
  %11778 = load <8 x i16>, <8 x i16>* %11777, align 2, !tbaa !385
  %11779 = getelementptr inbounds i16, i16* %11769, i64 88
  %11780 = bitcast i16* %11779 to <8 x i16>*
  %11781 = load <8 x i16>, <8 x i16>* %11780, align 2, !tbaa !385
  %11782 = getelementptr inbounds i16, i16* %11769, i64 96
  %11783 = bitcast i16* %11782 to <8 x i16>*
  %11784 = load <8 x i16>, <8 x i16>* %11783, align 2, !tbaa !385
  %11785 = getelementptr inbounds i16, i16* %11769, i64 104
  %11786 = bitcast i16* %11785 to <8 x i16>*
  %11787 = load <8 x i16>, <8 x i16>* %11786, align 2, !tbaa !385
  %11788 = getelementptr inbounds i16, i16* %11769, i64 112
  %11789 = bitcast i16* %11788 to <8 x i16>*
  %11790 = load <8 x i16>, <8 x i16>* %11789, align 2, !tbaa !385
  %11791 = getelementptr inbounds i16, i16* %11769, i64 120
  %11792 = bitcast i16* %11791 to <8 x i16>*
  %11793 = load <8 x i16>, <8 x i16>* %11792, align 2, !tbaa !385
  %11794 = add nsw i64 %11683, %11689
  %11795 = getelementptr inbounds i16, i16* %blur_x56, i64 %11794
  %11796 = getelementptr inbounds i16, i16* %11795, i64 64
  %11797 = bitcast i16* %11796 to <8 x i16>*
  %11798 = load <8 x i16>, <8 x i16>* %11797, align 2, !tbaa !385
  %11799 = getelementptr inbounds i16, i16* %11795, i64 72
  %11800 = bitcast i16* %11799 to <8 x i16>*
  %11801 = load <8 x i16>, <8 x i16>* %11800, align 2, !tbaa !385
  %11802 = getelementptr inbounds i16, i16* %11795, i64 80
  %11803 = bitcast i16* %11802 to <8 x i16>*
  %11804 = load <8 x i16>, <8 x i16>* %11803, align 2, !tbaa !385
  %11805 = getelementptr inbounds i16, i16* %11795, i64 88
  %11806 = bitcast i16* %11805 to <8 x i16>*
  %11807 = load <8 x i16>, <8 x i16>* %11806, align 2, !tbaa !385
  %11808 = getelementptr inbounds i16, i16* %11795, i64 96
  %11809 = bitcast i16* %11808 to <8 x i16>*
  %11810 = load <8 x i16>, <8 x i16>* %11809, align 2, !tbaa !385
  %11811 = getelementptr inbounds i16, i16* %11795, i64 104
  %11812 = bitcast i16* %11811 to <8 x i16>*
  %11813 = load <8 x i16>, <8 x i16>* %11812, align 2, !tbaa !385
  %11814 = getelementptr inbounds i16, i16* %11795, i64 112
  %11815 = bitcast i16* %11814 to <8 x i16>*
  %11816 = load <8 x i16>, <8 x i16>* %11815, align 2, !tbaa !385
  %11817 = getelementptr inbounds i16, i16* %11795, i64 120
  %11818 = bitcast i16* %11817 to <8 x i16>*
  %11819 = load <8 x i16>, <8 x i16>* %11818, align 2, !tbaa !385
  %11820 = add <8 x i16> %11720, %11694
  %11821 = add <8 x i16> %11820, %11746
  %11822 = add <8 x i16> %11821, %11772
  %11823 = add <8 x i16> %11822, %11798
  %11824 = add <8 x i16> %11723, %11697
  %11825 = add <8 x i16> %11824, %11749
  %11826 = add <8 x i16> %11825, %11775
  %11827 = add <8 x i16> %11826, %11801
  %11828 = add <8 x i16> %11726, %11700
  %11829 = add <8 x i16> %11828, %11752
  %11830 = add <8 x i16> %11829, %11778
  %11831 = add <8 x i16> %11830, %11804
  %11832 = add <8 x i16> %11729, %11703
  %11833 = add <8 x i16> %11832, %11755
  %11834 = add <8 x i16> %11833, %11781
  %11835 = add <8 x i16> %11834, %11807
  %11836 = add <8 x i16> %11732, %11706
  %11837 = add <8 x i16> %11836, %11758
  %11838 = add <8 x i16> %11837, %11784
  %11839 = add <8 x i16> %11838, %11810
  %11840 = add <8 x i16> %11735, %11709
  %11841 = add <8 x i16> %11840, %11761
  %11842 = add <8 x i16> %11841, %11787
  %11843 = add <8 x i16> %11842, %11813
  %11844 = add <8 x i16> %11738, %11712
  %11845 = add <8 x i16> %11844, %11764
  %11846 = add <8 x i16> %11845, %11790
  %11847 = add <8 x i16> %11846, %11816
  %11848 = add <8 x i16> %11741, %11715
  %11849 = add <8 x i16> %11848, %11767
  %11850 = add <8 x i16> %11849, %11793
  %11851 = add <8 x i16> %11850, %11819
  %11852 = shufflevector <8 x i16> %11851, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %11853 = shufflevector <16 x i16> %11852, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %11854 = shufflevector <32 x i16> %11853, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %11855 = shufflevector <8 x i16> %11823, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11856 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11855, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11857 = shufflevector <8 x i16> %11823, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11858 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11857, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11859 = shufflevector <8 x i16> %11827, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11860 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11859, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11861 = shufflevector <8 x i16> %11827, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11862 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11861, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11863 = shufflevector <8 x i16> %11831, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11864 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11863, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11865 = shufflevector <8 x i16> %11831, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11866 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11865, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11867 = shufflevector <8 x i16> %11835, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11868 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11867, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11869 = shufflevector <8 x i16> %11835, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11870 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11869, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11871 = shufflevector <8 x i16> %11839, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11872 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11871, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11873 = shufflevector <8 x i16> %11839, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11874 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11873, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11875 = shufflevector <8 x i16> %11843, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11876 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11875, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11877 = shufflevector <8 x i16> %11843, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11878 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11877, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11879 = shufflevector <8 x i16> %11847, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11880 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11879, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11881 = shufflevector <8 x i16> %11847, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11882 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11881, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11883 = shufflevector <8 x i16> %11851, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11884 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11883, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11885 = shufflevector <64 x i16> %11854, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %11886 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %11885, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11887 = shufflevector <4 x i32> %11856, <4 x i32> %11858, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11888 = shufflevector <4 x i32> %11860, <4 x i32> %11862, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11889 = shufflevector <4 x i32> %11864, <4 x i32> %11866, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11890 = shufflevector <4 x i32> %11868, <4 x i32> %11870, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11891 = shufflevector <4 x i32> %11872, <4 x i32> %11874, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11892 = shufflevector <4 x i32> %11876, <4 x i32> %11878, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11893 = shufflevector <4 x i32> %11880, <4 x i32> %11882, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11894 = shufflevector <4 x i32> %11884, <4 x i32> %11886, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11895 = shufflevector <8 x i32> %11887, <8 x i32> %11888, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11896 = shufflevector <8 x i32> %11889, <8 x i32> %11890, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11897 = shufflevector <8 x i32> %11891, <8 x i32> %11892, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11898 = shufflevector <8 x i32> %11893, <8 x i32> %11894, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11899 = shufflevector <16 x i32> %11895, <16 x i32> %11896, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11900 = shufflevector <16 x i32> %11897, <16 x i32> %11898, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11901 = shufflevector <32 x i32> %11899, <32 x i32> %11900, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %11902 = lshr <64 x i32> %11901, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %11903 = trunc <64 x i32> %11902 to <64 x i16>
  %11904 = shufflevector <64 x i16> %11903, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11905 = add nsw i64 %11687, %11688
  %11906 = getelementptr inbounds i16, i16* %7300, i64 %11905
  %11907 = bitcast i16* %11906 to <8 x i16>*
  store <8 x i16> %11904, <8 x i16>* %11907, align 2, !tbaa !387
  %11908 = shufflevector <64 x i16> %11903, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11909 = getelementptr inbounds i16, i16* %11906, i64 8
  %11910 = bitcast i16* %11909 to <8 x i16>*
  store <8 x i16> %11908, <8 x i16>* %11910, align 2, !tbaa !387
  %11911 = shufflevector <64 x i16> %11903, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %11912 = getelementptr inbounds i16, i16* %11906, i64 16
  %11913 = bitcast i16* %11912 to <8 x i16>*
  store <8 x i16> %11911, <8 x i16>* %11913, align 2, !tbaa !387
  %11914 = shufflevector <64 x i16> %11903, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11915 = getelementptr inbounds i16, i16* %11906, i64 24
  %11916 = bitcast i16* %11915 to <8 x i16>*
  store <8 x i16> %11914, <8 x i16>* %11916, align 2, !tbaa !387
  %11917 = shufflevector <64 x i16> %11903, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %11918 = getelementptr inbounds i16, i16* %11906, i64 32
  %11919 = bitcast i16* %11918 to <8 x i16>*
  store <8 x i16> %11917, <8 x i16>* %11919, align 2, !tbaa !387
  %11920 = shufflevector <64 x i16> %11903, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %11921 = getelementptr inbounds i16, i16* %11906, i64 40
  %11922 = bitcast i16* %11921 to <8 x i16>*
  store <8 x i16> %11920, <8 x i16>* %11922, align 2, !tbaa !387
  %11923 = shufflevector <64 x i16> %11903, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %11924 = getelementptr inbounds i16, i16* %11906, i64 48
  %11925 = bitcast i16* %11924 to <8 x i16>*
  store <8 x i16> %11923, <8 x i16>* %11925, align 2, !tbaa !387
  %11926 = shufflevector <64 x i16> %11903, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %11927 = getelementptr inbounds i16, i16* %11906, i64 56
  %11928 = bitcast i16* %11927 to <8 x i16>*
  store <8 x i16> %11926, <8 x i16>* %11928, align 2, !tbaa !387
  %indvars.iv.next189 = add nuw nsw i64 %indvars.iv188, 1
  %.not136 = icmp eq i64 %indvars.iv.next189, %7304
  br i1 %.not136, label %"end for blur_y.s0.x.x93", label %"for blur_y.s0.x.x92"

"end for blur_y.s0.x.x93":                        ; preds = %"for blur_y.s0.x.x92", %"consume blur_x90"
  br i1 %7301, label %"for blur_y.s0.x.x97.preheader", label %after_bb87, !prof !381

"for blur_y.s0.x.x97.preheader":                  ; preds = %"end for blur_y.s0.x.x93"
  %11929 = add nsw i32 %7325, 5
  %11930 = and i32 %11929, 7
  %narrow = add nuw nsw i32 %11930, 1
  %11931 = zext i32 %narrow to i64
  %11932 = mul nsw i64 %7297, %11931
  %11933 = getelementptr inbounds i16, i16* %blur_x56, i64 %11932
  %11934 = getelementptr inbounds i16, i16* %11933, i64 -64
  %11935 = bitcast i16* %11934 to <8 x i16>*
  %11936 = load <8 x i16>, <8 x i16>* %11935, align 2, !tbaa !385
  %11937 = getelementptr inbounds i16, i16* %11933, i64 -56
  %11938 = bitcast i16* %11937 to <8 x i16>*
  %11939 = load <8 x i16>, <8 x i16>* %11938, align 2, !tbaa !385
  %11940 = getelementptr inbounds i16, i16* %11933, i64 -48
  %11941 = bitcast i16* %11940 to <8 x i16>*
  %11942 = load <8 x i16>, <8 x i16>* %11941, align 2, !tbaa !385
  %11943 = getelementptr inbounds i16, i16* %11933, i64 -40
  %11944 = bitcast i16* %11943 to <8 x i16>*
  %11945 = load <8 x i16>, <8 x i16>* %11944, align 2, !tbaa !385
  %11946 = getelementptr inbounds i16, i16* %11933, i64 -32
  %11947 = bitcast i16* %11946 to <8 x i16>*
  %11948 = load <8 x i16>, <8 x i16>* %11947, align 2, !tbaa !385
  %11949 = getelementptr inbounds i16, i16* %11933, i64 -24
  %11950 = bitcast i16* %11949 to <8 x i16>*
  %11951 = load <8 x i16>, <8 x i16>* %11950, align 2, !tbaa !385
  %11952 = getelementptr inbounds i16, i16* %11933, i64 -16
  %11953 = bitcast i16* %11952 to <8 x i16>*
  %11954 = load <8 x i16>, <8 x i16>* %11953, align 2, !tbaa !385
  %11955 = getelementptr inbounds i16, i16* %11933, i64 -8
  %11956 = bitcast i16* %11955 to <8 x i16>*
  %11957 = load <8 x i16>, <8 x i16>* %11956, align 2, !tbaa !385
  %11958 = add nsw i32 %7325, 4
  %11959 = and i32 %11958, 7
  %narrow131 = add nuw nsw i32 %11959, 1
  %11960 = zext i32 %narrow131 to i64
  %11961 = mul nsw i64 %7297, %11960
  %11962 = getelementptr inbounds i16, i16* %blur_x56, i64 %11961
  %11963 = getelementptr inbounds i16, i16* %11962, i64 -64
  %11964 = bitcast i16* %11963 to <8 x i16>*
  %11965 = load <8 x i16>, <8 x i16>* %11964, align 2, !tbaa !385
  %11966 = getelementptr inbounds i16, i16* %11962, i64 -56
  %11967 = bitcast i16* %11966 to <8 x i16>*
  %11968 = load <8 x i16>, <8 x i16>* %11967, align 2, !tbaa !385
  %11969 = getelementptr inbounds i16, i16* %11962, i64 -48
  %11970 = bitcast i16* %11969 to <8 x i16>*
  %11971 = load <8 x i16>, <8 x i16>* %11970, align 2, !tbaa !385
  %11972 = getelementptr inbounds i16, i16* %11962, i64 -40
  %11973 = bitcast i16* %11972 to <8 x i16>*
  %11974 = load <8 x i16>, <8 x i16>* %11973, align 2, !tbaa !385
  %11975 = getelementptr inbounds i16, i16* %11962, i64 -32
  %11976 = bitcast i16* %11975 to <8 x i16>*
  %11977 = load <8 x i16>, <8 x i16>* %11976, align 2, !tbaa !385
  %11978 = getelementptr inbounds i16, i16* %11962, i64 -24
  %11979 = bitcast i16* %11978 to <8 x i16>*
  %11980 = load <8 x i16>, <8 x i16>* %11979, align 2, !tbaa !385
  %11981 = getelementptr inbounds i16, i16* %11962, i64 -16
  %11982 = bitcast i16* %11981 to <8 x i16>*
  %11983 = load <8 x i16>, <8 x i16>* %11982, align 2, !tbaa !385
  %11984 = getelementptr inbounds i16, i16* %11962, i64 -8
  %11985 = bitcast i16* %11984 to <8 x i16>*
  %11986 = load <8 x i16>, <8 x i16>* %11985, align 2, !tbaa !385
  %11987 = add nsw i32 %7325, 6
  %11988 = and i32 %11987, 7
  %narrow132 = add nuw nsw i32 %11988, 1
  %11989 = zext i32 %narrow132 to i64
  %11990 = mul nsw i64 %7297, %11989
  %11991 = getelementptr inbounds i16, i16* %blur_x56, i64 %11990
  %11992 = getelementptr inbounds i16, i16* %11991, i64 -64
  %11993 = bitcast i16* %11992 to <8 x i16>*
  %11994 = load <8 x i16>, <8 x i16>* %11993, align 2, !tbaa !385
  %11995 = getelementptr inbounds i16, i16* %11991, i64 -56
  %11996 = bitcast i16* %11995 to <8 x i16>*
  %11997 = load <8 x i16>, <8 x i16>* %11996, align 2, !tbaa !385
  %11998 = getelementptr inbounds i16, i16* %11991, i64 -48
  %11999 = bitcast i16* %11998 to <8 x i16>*
  %12000 = load <8 x i16>, <8 x i16>* %11999, align 2, !tbaa !385
  %12001 = getelementptr inbounds i16, i16* %11991, i64 -40
  %12002 = bitcast i16* %12001 to <8 x i16>*
  %12003 = load <8 x i16>, <8 x i16>* %12002, align 2, !tbaa !385
  %12004 = getelementptr inbounds i16, i16* %11991, i64 -32
  %12005 = bitcast i16* %12004 to <8 x i16>*
  %12006 = load <8 x i16>, <8 x i16>* %12005, align 2, !tbaa !385
  %12007 = getelementptr inbounds i16, i16* %11991, i64 -24
  %12008 = bitcast i16* %12007 to <8 x i16>*
  %12009 = load <8 x i16>, <8 x i16>* %12008, align 2, !tbaa !385
  %12010 = getelementptr inbounds i16, i16* %11991, i64 -16
  %12011 = bitcast i16* %12010 to <8 x i16>*
  %12012 = load <8 x i16>, <8 x i16>* %12011, align 2, !tbaa !385
  %12013 = getelementptr inbounds i16, i16* %11991, i64 -8
  %12014 = bitcast i16* %12013 to <8 x i16>*
  %12015 = load <8 x i16>, <8 x i16>* %12014, align 2, !tbaa !385
  %narrow133 = add nuw nsw i32 %7326, 1
  %12016 = zext i32 %narrow133 to i64
  %12017 = mul nsw i64 %7297, %12016
  %12018 = getelementptr inbounds i16, i16* %blur_x56, i64 %12017
  %12019 = getelementptr inbounds i16, i16* %12018, i64 -64
  %12020 = bitcast i16* %12019 to <8 x i16>*
  %12021 = load <8 x i16>, <8 x i16>* %12020, align 2, !tbaa !385
  %12022 = getelementptr inbounds i16, i16* %12018, i64 -56
  %12023 = bitcast i16* %12022 to <8 x i16>*
  %12024 = load <8 x i16>, <8 x i16>* %12023, align 2, !tbaa !385
  %12025 = getelementptr inbounds i16, i16* %12018, i64 -48
  %12026 = bitcast i16* %12025 to <8 x i16>*
  %12027 = load <8 x i16>, <8 x i16>* %12026, align 2, !tbaa !385
  %12028 = getelementptr inbounds i16, i16* %12018, i64 -40
  %12029 = bitcast i16* %12028 to <8 x i16>*
  %12030 = load <8 x i16>, <8 x i16>* %12029, align 2, !tbaa !385
  %12031 = getelementptr inbounds i16, i16* %12018, i64 -32
  %12032 = bitcast i16* %12031 to <8 x i16>*
  %12033 = load <8 x i16>, <8 x i16>* %12032, align 2, !tbaa !385
  %12034 = getelementptr inbounds i16, i16* %12018, i64 -24
  %12035 = bitcast i16* %12034 to <8 x i16>*
  %12036 = load <8 x i16>, <8 x i16>* %12035, align 2, !tbaa !385
  %12037 = getelementptr inbounds i16, i16* %12018, i64 -16
  %12038 = bitcast i16* %12037 to <8 x i16>*
  %12039 = load <8 x i16>, <8 x i16>* %12038, align 2, !tbaa !385
  %12040 = getelementptr inbounds i16, i16* %12018, i64 -8
  %12041 = bitcast i16* %12040 to <8 x i16>*
  %12042 = load <8 x i16>, <8 x i16>* %12041, align 2, !tbaa !385
  %12043 = add nsw i32 %7325, 7
  %12044 = and i32 %12043, 7
  %narrow134 = add nuw nsw i32 %12044, 1
  %12045 = zext i32 %narrow134 to i64
  %12046 = mul nsw i64 %7297, %12045
  %12047 = getelementptr inbounds i16, i16* %blur_x56, i64 %12046
  %12048 = getelementptr inbounds i16, i16* %12047, i64 -64
  %12049 = bitcast i16* %12048 to <8 x i16>*
  %12050 = load <8 x i16>, <8 x i16>* %12049, align 2, !tbaa !385
  %12051 = getelementptr inbounds i16, i16* %12047, i64 -56
  %12052 = bitcast i16* %12051 to <8 x i16>*
  %12053 = load <8 x i16>, <8 x i16>* %12052, align 2, !tbaa !385
  %12054 = getelementptr inbounds i16, i16* %12047, i64 -48
  %12055 = bitcast i16* %12054 to <8 x i16>*
  %12056 = load <8 x i16>, <8 x i16>* %12055, align 2, !tbaa !385
  %12057 = getelementptr inbounds i16, i16* %12047, i64 -40
  %12058 = bitcast i16* %12057 to <8 x i16>*
  %12059 = load <8 x i16>, <8 x i16>* %12058, align 2, !tbaa !385
  %12060 = getelementptr inbounds i16, i16* %12047, i64 -32
  %12061 = bitcast i16* %12060 to <8 x i16>*
  %12062 = load <8 x i16>, <8 x i16>* %12061, align 2, !tbaa !385
  %12063 = getelementptr inbounds i16, i16* %12047, i64 -24
  %12064 = bitcast i16* %12063 to <8 x i16>*
  %12065 = load <8 x i16>, <8 x i16>* %12064, align 2, !tbaa !385
  %12066 = getelementptr inbounds i16, i16* %12047, i64 -16
  %12067 = bitcast i16* %12066 to <8 x i16>*
  %12068 = load <8 x i16>, <8 x i16>* %12067, align 2, !tbaa !385
  %12069 = getelementptr inbounds i16, i16* %12047, i64 -8
  %12070 = bitcast i16* %12069 to <8 x i16>*
  %12071 = load <8 x i16>, <8 x i16>* %12070, align 2, !tbaa !385
  %12072 = add <8 x i16> %11965, %11936
  %12073 = add <8 x i16> %12072, %11994
  %12074 = add <8 x i16> %12073, %12021
  %12075 = add <8 x i16> %12074, %12050
  %12076 = add <8 x i16> %11968, %11939
  %12077 = add <8 x i16> %12076, %11997
  %12078 = add <8 x i16> %12077, %12024
  %12079 = add <8 x i16> %12078, %12053
  %12080 = add <8 x i16> %11971, %11942
  %12081 = add <8 x i16> %12080, %12000
  %12082 = add <8 x i16> %12081, %12027
  %12083 = add <8 x i16> %12082, %12056
  %12084 = add <8 x i16> %11974, %11945
  %12085 = add <8 x i16> %12084, %12003
  %12086 = add <8 x i16> %12085, %12030
  %12087 = add <8 x i16> %12086, %12059
  %12088 = add <8 x i16> %11977, %11948
  %12089 = add <8 x i16> %12088, %12006
  %12090 = add <8 x i16> %12089, %12033
  %12091 = add <8 x i16> %12090, %12062
  %12092 = add <8 x i16> %11980, %11951
  %12093 = add <8 x i16> %12092, %12009
  %12094 = add <8 x i16> %12093, %12036
  %12095 = add <8 x i16> %12094, %12065
  %12096 = add <8 x i16> %11983, %11954
  %12097 = add <8 x i16> %12096, %12012
  %12098 = add <8 x i16> %12097, %12039
  %12099 = add <8 x i16> %12098, %12068
  %12100 = add <8 x i16> %11986, %11957
  %12101 = add <8 x i16> %12100, %12015
  %12102 = add <8 x i16> %12101, %12042
  %12103 = add <8 x i16> %12102, %12071
  %12104 = shufflevector <8 x i16> %12103, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %12105 = shufflevector <16 x i16> %12104, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %12106 = shufflevector <32 x i16> %12105, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %12107 = shufflevector <8 x i16> %12075, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12108 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12107, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12109 = shufflevector <8 x i16> %12075, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12110 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12109, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12111 = shufflevector <8 x i16> %12079, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12112 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12111, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12113 = shufflevector <8 x i16> %12079, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12114 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12113, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12115 = shufflevector <8 x i16> %12083, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12116 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12115, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12117 = shufflevector <8 x i16> %12083, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12118 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12117, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12119 = shufflevector <8 x i16> %12087, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12120 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12119, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12121 = shufflevector <8 x i16> %12087, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12122 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12121, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12123 = shufflevector <8 x i16> %12091, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12124 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12123, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12125 = shufflevector <8 x i16> %12091, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12126 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12125, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12127 = shufflevector <8 x i16> %12095, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12128 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12127, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12129 = shufflevector <8 x i16> %12095, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12130 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12129, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12131 = shufflevector <8 x i16> %12099, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12132 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12131, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12133 = shufflevector <8 x i16> %12099, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12134 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12133, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12135 = shufflevector <8 x i16> %12103, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12136 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12135, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12137 = shufflevector <64 x i16> %12106, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %12138 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %12137, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12139 = shufflevector <4 x i32> %12108, <4 x i32> %12110, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12140 = shufflevector <4 x i32> %12112, <4 x i32> %12114, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12141 = shufflevector <4 x i32> %12116, <4 x i32> %12118, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12142 = shufflevector <4 x i32> %12120, <4 x i32> %12122, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12143 = shufflevector <4 x i32> %12124, <4 x i32> %12126, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12144 = shufflevector <4 x i32> %12128, <4 x i32> %12130, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12145 = shufflevector <4 x i32> %12132, <4 x i32> %12134, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12146 = shufflevector <4 x i32> %12136, <4 x i32> %12138, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12147 = shufflevector <8 x i32> %12139, <8 x i32> %12140, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12148 = shufflevector <8 x i32> %12141, <8 x i32> %12142, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12149 = shufflevector <8 x i32> %12143, <8 x i32> %12144, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12150 = shufflevector <8 x i32> %12145, <8 x i32> %12146, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12151 = shufflevector <16 x i32> %12147, <16 x i32> %12148, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12152 = shufflevector <16 x i32> %12149, <16 x i32> %12150, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12153 = shufflevector <32 x i32> %12151, <32 x i32> %12152, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %12154 = lshr <64 x i32> %12153, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %12155 = trunc <64 x i32> %12154 to <64 x i16>
  %12156 = sext i32 %7325 to i64
  %12157 = add nsw i64 %12156, -4
  %12158 = mul nsw i64 %12157, %7298
  %12159 = add nsw i64 %12158, %7302
  %12160 = getelementptr inbounds i16, i16* %7300, i64 %12159
  %12161 = getelementptr inbounds i16, i16* %12160, i64 -64
  %12162 = bitcast i16* %12161 to <8 x i16>*
  %12163 = getelementptr inbounds i16, i16* %12160, i64 -56
  %12164 = bitcast i16* %12163 to <8 x i16>*
  %12165 = getelementptr inbounds i16, i16* %12160, i64 -48
  %12166 = bitcast i16* %12165 to <8 x i16>*
  %12167 = getelementptr inbounds i16, i16* %12160, i64 -40
  %12168 = bitcast i16* %12167 to <8 x i16>*
  %12169 = getelementptr inbounds i16, i16* %12160, i64 -32
  %12170 = bitcast i16* %12169 to <8 x i16>*
  %12171 = getelementptr inbounds i16, i16* %12160, i64 -24
  %12172 = bitcast i16* %12171 to <8 x i16>*
  %12173 = getelementptr inbounds i16, i16* %12160, i64 -16
  %12174 = bitcast i16* %12173 to <8 x i16>*
  %12175 = getelementptr inbounds i16, i16* %12160, i64 -8
  %12176 = shufflevector <64 x i16> %12155, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12177 = shufflevector <64 x i16> %12155, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12178 = shufflevector <64 x i16> %12155, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %12179 = shufflevector <64 x i16> %12155, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12180 = shufflevector <64 x i16> %12155, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %12181 = shufflevector <64 x i16> %12155, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %12182 = shufflevector <64 x i16> %12155, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %12183 = shufflevector <64 x i16> %12155, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %12184 = bitcast i16* %12175 to <8 x i16>*
  store <8 x i16> %12176, <8 x i16>* %12162, align 2, !tbaa !387
  store <8 x i16> %12177, <8 x i16>* %12164, align 2, !tbaa !387
  store <8 x i16> %12178, <8 x i16>* %12166, align 2, !tbaa !387
  store <8 x i16> %12179, <8 x i16>* %12168, align 2, !tbaa !387
  store <8 x i16> %12180, <8 x i16>* %12170, align 2, !tbaa !387
  store <8 x i16> %12181, <8 x i16>* %12172, align 2, !tbaa !387
  store <8 x i16> %12182, <8 x i16>* %12174, align 2, !tbaa !387
  store <8 x i16> %12183, <8 x i16>* %12184, align 2, !tbaa !387
  br label %after_bb87

"for blur_y.s0.y.yi.$n.rebased104":               ; preds = %next_bb54, %after_bb114
  %indvars.iv184 = phi i64 [ 0, %next_bb54 ], [ %indvars.iv.next185, %after_bb114 ]
  %12185 = trunc i64 %indvars.iv184 to i32
  %t250102 = add i32 %blur_y.s0.y.yi.base.s100, %12185
  %a20 = add i32 %t250102, %t21743
  %12186 = icmp slt i32 %a20, %b22
  %a22 = select i1 %12186, i32 %a20, i32 %b22
  %12187 = add i32 %t250102, %blur_y.min.134
  %12188 = and i32 %12187, 7
  br i1 %7312, label %"for blur_x.s0.x.x109.preheader", label %"end for blur_x.s0.x.x110", !prof !381

"for blur_x.s0.x.x109.preheader":                 ; preds = %"for blur_y.s0.y.yi.$n.rebased104"
  %12189 = mul nsw i32 %a19, %12188
  %t253108 = sub nsw i32 %12189, %t21542
  %12190 = icmp sgt i32 %a22, 0
  %12191 = select i1 %12190, i32 %a22, i32 0
  %12192 = mul nsw i32 %12191, %input.stride.140
  %12193 = sub nsw i32 %12192, %input.min.039
  %12194 = insertelement <64 x i32> undef, i32 %12193, i32 0
  %t207113 = shufflevector <64 x i32> %12194, <64 x i32> undef, <64 x i32> zeroinitializer
  %12195 = sext i32 %t253108 to i64
  br label %"for blur_x.s0.x.x109"

"end for blur_y.s0.y.yi.$n.rebased105":           ; preds = %after_bb114
  %tobool.not.i164.not = icmp eq i8* %7311, null
  br i1 %tobool.not.i164.not, label %after_bb52, label %if.then.i165

if.then.i165:                                     ; preds = %"end for blur_y.s0.y.yi.$n.rebased105"
  tail call void @halide_free(i8* %__user_context, i8* nonnull %7311) #13
  br label %after_bb52

"for blur_x.s0.x.x109":                           ; preds = %"for blur_x.s0.x.x109.preheader", %"for blur_x.s0.x.x109"
  %blur_x.s0.x.x111 = phi i32 [ %14242, %"for blur_x.s0.x.x109" ], [ 0, %"for blur_x.s0.x.x109.preheader" ]
  %12196 = shl nsw i32 %blur_x.s0.x.x111, 6
  %a21 = add nsw i32 %12196, %t21542
  %12197 = icmp slt i32 %a21, %b23
  %blur_x.s0.x.v1.base.s112 = select i1 %12197, i32 %a21, i32 %b23
  %12198 = add nsw i32 %blur_x.s0.x.v1.base.s112, -63
  %12199 = insertelement <64 x i32> undef, i32 %12198, i32 0
  %12200 = shufflevector <64 x i32> %12199, <64 x i32> undef, <64 x i32> zeroinitializer
  %12201 = add nsw <64 x i32> %12200, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %12202 = shufflevector <64 x i32> %12201, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12203 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12202, <4 x i32> %7315)
  %12204 = shufflevector <64 x i32> %12201, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12205 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12204, <4 x i32> %7315)
  %12206 = shufflevector <64 x i32> %12201, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %12207 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12206, <4 x i32> %7315)
  %12208 = shufflevector <64 x i32> %12201, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %12209 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12208, <4 x i32> %7315)
  %12210 = shufflevector <64 x i32> %12201, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %12211 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12210, <4 x i32> %7315)
  %12212 = shufflevector <64 x i32> %12201, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %12213 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12212, <4 x i32> %7315)
  %12214 = shufflevector <64 x i32> %12201, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %12215 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12214, <4 x i32> %7315)
  %12216 = shufflevector <64 x i32> %12201, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %12217 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12216, <4 x i32> %7315)
  %12218 = shufflevector <64 x i32> %12201, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %12219 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12218, <4 x i32> %7315)
  %12220 = shufflevector <64 x i32> %12201, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %12221 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12220, <4 x i32> %7315)
  %12222 = shufflevector <64 x i32> %12201, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %12223 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12222, <4 x i32> %7315)
  %12224 = shufflevector <64 x i32> %12201, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %12225 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12224, <4 x i32> %7315)
  %12226 = shufflevector <64 x i32> %12201, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %12227 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12226, <4 x i32> %7315)
  %12228 = shufflevector <64 x i32> %12201, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %12229 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12228, <4 x i32> %7315)
  %12230 = shufflevector <64 x i32> %12201, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %12231 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12230, <4 x i32> %7315)
  %12232 = shufflevector <64 x i32> %12201, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %12233 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12232, <4 x i32> %7315)
  %12234 = shufflevector <4 x i32> %12233, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %12235 = shufflevector <8 x i32> %12234, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %12236 = shufflevector <16 x i32> %12235, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %12237 = shufflevector <32 x i32> %12236, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %12238 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12203, <4 x i32> %7317)
  %12239 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12205, <4 x i32> %7317)
  %12240 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12207, <4 x i32> %7317)
  %12241 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12209, <4 x i32> %7317)
  %12242 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12211, <4 x i32> %7317)
  %12243 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12213, <4 x i32> %7317)
  %12244 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12215, <4 x i32> %7317)
  %12245 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12217, <4 x i32> %7317)
  %12246 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12219, <4 x i32> %7317)
  %12247 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12221, <4 x i32> %7317)
  %12248 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12223, <4 x i32> %7317)
  %12249 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12225, <4 x i32> %7317)
  %12250 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12227, <4 x i32> %7317)
  %12251 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12229, <4 x i32> %7317)
  %12252 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12231, <4 x i32> %7317)
  %12253 = shufflevector <64 x i32> %12237, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %12254 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12253, <4 x i32> %7317)
  %12255 = shufflevector <4 x i32> %12238, <4 x i32> %12239, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12256 = shufflevector <4 x i32> %12240, <4 x i32> %12241, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12257 = shufflevector <4 x i32> %12242, <4 x i32> %12243, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12258 = shufflevector <4 x i32> %12244, <4 x i32> %12245, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12259 = shufflevector <4 x i32> %12246, <4 x i32> %12247, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12260 = shufflevector <4 x i32> %12248, <4 x i32> %12249, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12261 = shufflevector <4 x i32> %12250, <4 x i32> %12251, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12262 = shufflevector <4 x i32> %12252, <4 x i32> %12254, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12263 = shufflevector <8 x i32> %12255, <8 x i32> %12256, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12264 = shufflevector <8 x i32> %12257, <8 x i32> %12258, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12265 = shufflevector <8 x i32> %12259, <8 x i32> %12260, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12266 = shufflevector <8 x i32> %12261, <8 x i32> %12262, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12267 = shufflevector <16 x i32> %12263, <16 x i32> %12264, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12268 = shufflevector <16 x i32> %12265, <16 x i32> %12266, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12269 = shufflevector <32 x i32> %12267, <32 x i32> %12268, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %12270 = add nsw <64 x i32> %12269, %t207113
  %12271 = extractelement <64 x i32> %12270, i32 0
  %12272 = sext i32 %12271 to i64
  %12273 = getelementptr inbounds i16, i16* %7318, i64 %12272
  %12274 = load i16, i16* %12273, align 2, !tbaa !382
  %12275 = insertelement <64 x i16> undef, i16 %12274, i32 0
  %12276 = extractelement <64 x i32> %12270, i32 1
  %12277 = sext i32 %12276 to i64
  %12278 = getelementptr inbounds i16, i16* %7318, i64 %12277
  %12279 = load i16, i16* %12278, align 2, !tbaa !382
  %12280 = insertelement <64 x i16> %12275, i16 %12279, i32 1
  %12281 = extractelement <64 x i32> %12270, i32 2
  %12282 = sext i32 %12281 to i64
  %12283 = getelementptr inbounds i16, i16* %7318, i64 %12282
  %12284 = load i16, i16* %12283, align 2, !tbaa !382
  %12285 = insertelement <64 x i16> %12280, i16 %12284, i32 2
  %12286 = extractelement <64 x i32> %12270, i32 3
  %12287 = sext i32 %12286 to i64
  %12288 = getelementptr inbounds i16, i16* %7318, i64 %12287
  %12289 = load i16, i16* %12288, align 2, !tbaa !382
  %12290 = insertelement <64 x i16> %12285, i16 %12289, i32 3
  %12291 = extractelement <64 x i32> %12270, i32 4
  %12292 = sext i32 %12291 to i64
  %12293 = getelementptr inbounds i16, i16* %7318, i64 %12292
  %12294 = load i16, i16* %12293, align 2, !tbaa !382
  %12295 = insertelement <64 x i16> %12290, i16 %12294, i32 4
  %12296 = extractelement <64 x i32> %12270, i32 5
  %12297 = sext i32 %12296 to i64
  %12298 = getelementptr inbounds i16, i16* %7318, i64 %12297
  %12299 = load i16, i16* %12298, align 2, !tbaa !382
  %12300 = insertelement <64 x i16> %12295, i16 %12299, i32 5
  %12301 = extractelement <64 x i32> %12270, i32 6
  %12302 = sext i32 %12301 to i64
  %12303 = getelementptr inbounds i16, i16* %7318, i64 %12302
  %12304 = load i16, i16* %12303, align 2, !tbaa !382
  %12305 = insertelement <64 x i16> %12300, i16 %12304, i32 6
  %12306 = extractelement <64 x i32> %12270, i32 7
  %12307 = sext i32 %12306 to i64
  %12308 = getelementptr inbounds i16, i16* %7318, i64 %12307
  %12309 = load i16, i16* %12308, align 2, !tbaa !382
  %12310 = insertelement <64 x i16> %12305, i16 %12309, i32 7
  %12311 = extractelement <64 x i32> %12270, i32 8
  %12312 = sext i32 %12311 to i64
  %12313 = getelementptr inbounds i16, i16* %7318, i64 %12312
  %12314 = load i16, i16* %12313, align 2, !tbaa !382
  %12315 = insertelement <64 x i16> %12310, i16 %12314, i32 8
  %12316 = extractelement <64 x i32> %12270, i32 9
  %12317 = sext i32 %12316 to i64
  %12318 = getelementptr inbounds i16, i16* %7318, i64 %12317
  %12319 = load i16, i16* %12318, align 2, !tbaa !382
  %12320 = insertelement <64 x i16> %12315, i16 %12319, i32 9
  %12321 = extractelement <64 x i32> %12270, i32 10
  %12322 = sext i32 %12321 to i64
  %12323 = getelementptr inbounds i16, i16* %7318, i64 %12322
  %12324 = load i16, i16* %12323, align 2, !tbaa !382
  %12325 = insertelement <64 x i16> %12320, i16 %12324, i32 10
  %12326 = extractelement <64 x i32> %12270, i32 11
  %12327 = sext i32 %12326 to i64
  %12328 = getelementptr inbounds i16, i16* %7318, i64 %12327
  %12329 = load i16, i16* %12328, align 2, !tbaa !382
  %12330 = insertelement <64 x i16> %12325, i16 %12329, i32 11
  %12331 = extractelement <64 x i32> %12270, i32 12
  %12332 = sext i32 %12331 to i64
  %12333 = getelementptr inbounds i16, i16* %7318, i64 %12332
  %12334 = load i16, i16* %12333, align 2, !tbaa !382
  %12335 = insertelement <64 x i16> %12330, i16 %12334, i32 12
  %12336 = extractelement <64 x i32> %12270, i32 13
  %12337 = sext i32 %12336 to i64
  %12338 = getelementptr inbounds i16, i16* %7318, i64 %12337
  %12339 = load i16, i16* %12338, align 2, !tbaa !382
  %12340 = insertelement <64 x i16> %12335, i16 %12339, i32 13
  %12341 = extractelement <64 x i32> %12270, i32 14
  %12342 = sext i32 %12341 to i64
  %12343 = getelementptr inbounds i16, i16* %7318, i64 %12342
  %12344 = load i16, i16* %12343, align 2, !tbaa !382
  %12345 = insertelement <64 x i16> %12340, i16 %12344, i32 14
  %12346 = extractelement <64 x i32> %12270, i32 15
  %12347 = sext i32 %12346 to i64
  %12348 = getelementptr inbounds i16, i16* %7318, i64 %12347
  %12349 = load i16, i16* %12348, align 2, !tbaa !382
  %12350 = insertelement <64 x i16> %12345, i16 %12349, i32 15
  %12351 = extractelement <64 x i32> %12270, i32 16
  %12352 = sext i32 %12351 to i64
  %12353 = getelementptr inbounds i16, i16* %7318, i64 %12352
  %12354 = load i16, i16* %12353, align 2, !tbaa !382
  %12355 = insertelement <64 x i16> %12350, i16 %12354, i32 16
  %12356 = extractelement <64 x i32> %12270, i32 17
  %12357 = sext i32 %12356 to i64
  %12358 = getelementptr inbounds i16, i16* %7318, i64 %12357
  %12359 = load i16, i16* %12358, align 2, !tbaa !382
  %12360 = insertelement <64 x i16> %12355, i16 %12359, i32 17
  %12361 = extractelement <64 x i32> %12270, i32 18
  %12362 = sext i32 %12361 to i64
  %12363 = getelementptr inbounds i16, i16* %7318, i64 %12362
  %12364 = load i16, i16* %12363, align 2, !tbaa !382
  %12365 = insertelement <64 x i16> %12360, i16 %12364, i32 18
  %12366 = extractelement <64 x i32> %12270, i32 19
  %12367 = sext i32 %12366 to i64
  %12368 = getelementptr inbounds i16, i16* %7318, i64 %12367
  %12369 = load i16, i16* %12368, align 2, !tbaa !382
  %12370 = insertelement <64 x i16> %12365, i16 %12369, i32 19
  %12371 = extractelement <64 x i32> %12270, i32 20
  %12372 = sext i32 %12371 to i64
  %12373 = getelementptr inbounds i16, i16* %7318, i64 %12372
  %12374 = load i16, i16* %12373, align 2, !tbaa !382
  %12375 = insertelement <64 x i16> %12370, i16 %12374, i32 20
  %12376 = extractelement <64 x i32> %12270, i32 21
  %12377 = sext i32 %12376 to i64
  %12378 = getelementptr inbounds i16, i16* %7318, i64 %12377
  %12379 = load i16, i16* %12378, align 2, !tbaa !382
  %12380 = insertelement <64 x i16> %12375, i16 %12379, i32 21
  %12381 = extractelement <64 x i32> %12270, i32 22
  %12382 = sext i32 %12381 to i64
  %12383 = getelementptr inbounds i16, i16* %7318, i64 %12382
  %12384 = load i16, i16* %12383, align 2, !tbaa !382
  %12385 = insertelement <64 x i16> %12380, i16 %12384, i32 22
  %12386 = extractelement <64 x i32> %12270, i32 23
  %12387 = sext i32 %12386 to i64
  %12388 = getelementptr inbounds i16, i16* %7318, i64 %12387
  %12389 = load i16, i16* %12388, align 2, !tbaa !382
  %12390 = insertelement <64 x i16> %12385, i16 %12389, i32 23
  %12391 = extractelement <64 x i32> %12270, i32 24
  %12392 = sext i32 %12391 to i64
  %12393 = getelementptr inbounds i16, i16* %7318, i64 %12392
  %12394 = load i16, i16* %12393, align 2, !tbaa !382
  %12395 = insertelement <64 x i16> %12390, i16 %12394, i32 24
  %12396 = extractelement <64 x i32> %12270, i32 25
  %12397 = sext i32 %12396 to i64
  %12398 = getelementptr inbounds i16, i16* %7318, i64 %12397
  %12399 = load i16, i16* %12398, align 2, !tbaa !382
  %12400 = insertelement <64 x i16> %12395, i16 %12399, i32 25
  %12401 = extractelement <64 x i32> %12270, i32 26
  %12402 = sext i32 %12401 to i64
  %12403 = getelementptr inbounds i16, i16* %7318, i64 %12402
  %12404 = load i16, i16* %12403, align 2, !tbaa !382
  %12405 = insertelement <64 x i16> %12400, i16 %12404, i32 26
  %12406 = extractelement <64 x i32> %12270, i32 27
  %12407 = sext i32 %12406 to i64
  %12408 = getelementptr inbounds i16, i16* %7318, i64 %12407
  %12409 = load i16, i16* %12408, align 2, !tbaa !382
  %12410 = insertelement <64 x i16> %12405, i16 %12409, i32 27
  %12411 = extractelement <64 x i32> %12270, i32 28
  %12412 = sext i32 %12411 to i64
  %12413 = getelementptr inbounds i16, i16* %7318, i64 %12412
  %12414 = load i16, i16* %12413, align 2, !tbaa !382
  %12415 = insertelement <64 x i16> %12410, i16 %12414, i32 28
  %12416 = extractelement <64 x i32> %12270, i32 29
  %12417 = sext i32 %12416 to i64
  %12418 = getelementptr inbounds i16, i16* %7318, i64 %12417
  %12419 = load i16, i16* %12418, align 2, !tbaa !382
  %12420 = insertelement <64 x i16> %12415, i16 %12419, i32 29
  %12421 = extractelement <64 x i32> %12270, i32 30
  %12422 = sext i32 %12421 to i64
  %12423 = getelementptr inbounds i16, i16* %7318, i64 %12422
  %12424 = load i16, i16* %12423, align 2, !tbaa !382
  %12425 = insertelement <64 x i16> %12420, i16 %12424, i32 30
  %12426 = extractelement <64 x i32> %12270, i32 31
  %12427 = sext i32 %12426 to i64
  %12428 = getelementptr inbounds i16, i16* %7318, i64 %12427
  %12429 = load i16, i16* %12428, align 2, !tbaa !382
  %12430 = insertelement <64 x i16> %12425, i16 %12429, i32 31
  %12431 = extractelement <64 x i32> %12270, i32 32
  %12432 = sext i32 %12431 to i64
  %12433 = getelementptr inbounds i16, i16* %7318, i64 %12432
  %12434 = load i16, i16* %12433, align 2, !tbaa !382
  %12435 = insertelement <64 x i16> %12430, i16 %12434, i32 32
  %12436 = extractelement <64 x i32> %12270, i32 33
  %12437 = sext i32 %12436 to i64
  %12438 = getelementptr inbounds i16, i16* %7318, i64 %12437
  %12439 = load i16, i16* %12438, align 2, !tbaa !382
  %12440 = insertelement <64 x i16> %12435, i16 %12439, i32 33
  %12441 = extractelement <64 x i32> %12270, i32 34
  %12442 = sext i32 %12441 to i64
  %12443 = getelementptr inbounds i16, i16* %7318, i64 %12442
  %12444 = load i16, i16* %12443, align 2, !tbaa !382
  %12445 = insertelement <64 x i16> %12440, i16 %12444, i32 34
  %12446 = extractelement <64 x i32> %12270, i32 35
  %12447 = sext i32 %12446 to i64
  %12448 = getelementptr inbounds i16, i16* %7318, i64 %12447
  %12449 = load i16, i16* %12448, align 2, !tbaa !382
  %12450 = insertelement <64 x i16> %12445, i16 %12449, i32 35
  %12451 = extractelement <64 x i32> %12270, i32 36
  %12452 = sext i32 %12451 to i64
  %12453 = getelementptr inbounds i16, i16* %7318, i64 %12452
  %12454 = load i16, i16* %12453, align 2, !tbaa !382
  %12455 = insertelement <64 x i16> %12450, i16 %12454, i32 36
  %12456 = extractelement <64 x i32> %12270, i32 37
  %12457 = sext i32 %12456 to i64
  %12458 = getelementptr inbounds i16, i16* %7318, i64 %12457
  %12459 = load i16, i16* %12458, align 2, !tbaa !382
  %12460 = insertelement <64 x i16> %12455, i16 %12459, i32 37
  %12461 = extractelement <64 x i32> %12270, i32 38
  %12462 = sext i32 %12461 to i64
  %12463 = getelementptr inbounds i16, i16* %7318, i64 %12462
  %12464 = load i16, i16* %12463, align 2, !tbaa !382
  %12465 = insertelement <64 x i16> %12460, i16 %12464, i32 38
  %12466 = extractelement <64 x i32> %12270, i32 39
  %12467 = sext i32 %12466 to i64
  %12468 = getelementptr inbounds i16, i16* %7318, i64 %12467
  %12469 = load i16, i16* %12468, align 2, !tbaa !382
  %12470 = insertelement <64 x i16> %12465, i16 %12469, i32 39
  %12471 = extractelement <64 x i32> %12270, i32 40
  %12472 = sext i32 %12471 to i64
  %12473 = getelementptr inbounds i16, i16* %7318, i64 %12472
  %12474 = load i16, i16* %12473, align 2, !tbaa !382
  %12475 = insertelement <64 x i16> %12470, i16 %12474, i32 40
  %12476 = extractelement <64 x i32> %12270, i32 41
  %12477 = sext i32 %12476 to i64
  %12478 = getelementptr inbounds i16, i16* %7318, i64 %12477
  %12479 = load i16, i16* %12478, align 2, !tbaa !382
  %12480 = insertelement <64 x i16> %12475, i16 %12479, i32 41
  %12481 = extractelement <64 x i32> %12270, i32 42
  %12482 = sext i32 %12481 to i64
  %12483 = getelementptr inbounds i16, i16* %7318, i64 %12482
  %12484 = load i16, i16* %12483, align 2, !tbaa !382
  %12485 = insertelement <64 x i16> %12480, i16 %12484, i32 42
  %12486 = extractelement <64 x i32> %12270, i32 43
  %12487 = sext i32 %12486 to i64
  %12488 = getelementptr inbounds i16, i16* %7318, i64 %12487
  %12489 = load i16, i16* %12488, align 2, !tbaa !382
  %12490 = insertelement <64 x i16> %12485, i16 %12489, i32 43
  %12491 = extractelement <64 x i32> %12270, i32 44
  %12492 = sext i32 %12491 to i64
  %12493 = getelementptr inbounds i16, i16* %7318, i64 %12492
  %12494 = load i16, i16* %12493, align 2, !tbaa !382
  %12495 = insertelement <64 x i16> %12490, i16 %12494, i32 44
  %12496 = extractelement <64 x i32> %12270, i32 45
  %12497 = sext i32 %12496 to i64
  %12498 = getelementptr inbounds i16, i16* %7318, i64 %12497
  %12499 = load i16, i16* %12498, align 2, !tbaa !382
  %12500 = insertelement <64 x i16> %12495, i16 %12499, i32 45
  %12501 = extractelement <64 x i32> %12270, i32 46
  %12502 = sext i32 %12501 to i64
  %12503 = getelementptr inbounds i16, i16* %7318, i64 %12502
  %12504 = load i16, i16* %12503, align 2, !tbaa !382
  %12505 = insertelement <64 x i16> %12500, i16 %12504, i32 46
  %12506 = extractelement <64 x i32> %12270, i32 47
  %12507 = sext i32 %12506 to i64
  %12508 = getelementptr inbounds i16, i16* %7318, i64 %12507
  %12509 = load i16, i16* %12508, align 2, !tbaa !382
  %12510 = insertelement <64 x i16> %12505, i16 %12509, i32 47
  %12511 = extractelement <64 x i32> %12270, i32 48
  %12512 = sext i32 %12511 to i64
  %12513 = getelementptr inbounds i16, i16* %7318, i64 %12512
  %12514 = load i16, i16* %12513, align 2, !tbaa !382
  %12515 = insertelement <64 x i16> %12510, i16 %12514, i32 48
  %12516 = extractelement <64 x i32> %12270, i32 49
  %12517 = sext i32 %12516 to i64
  %12518 = getelementptr inbounds i16, i16* %7318, i64 %12517
  %12519 = load i16, i16* %12518, align 2, !tbaa !382
  %12520 = insertelement <64 x i16> %12515, i16 %12519, i32 49
  %12521 = extractelement <64 x i32> %12270, i32 50
  %12522 = sext i32 %12521 to i64
  %12523 = getelementptr inbounds i16, i16* %7318, i64 %12522
  %12524 = load i16, i16* %12523, align 2, !tbaa !382
  %12525 = insertelement <64 x i16> %12520, i16 %12524, i32 50
  %12526 = extractelement <64 x i32> %12270, i32 51
  %12527 = sext i32 %12526 to i64
  %12528 = getelementptr inbounds i16, i16* %7318, i64 %12527
  %12529 = load i16, i16* %12528, align 2, !tbaa !382
  %12530 = insertelement <64 x i16> %12525, i16 %12529, i32 51
  %12531 = extractelement <64 x i32> %12270, i32 52
  %12532 = sext i32 %12531 to i64
  %12533 = getelementptr inbounds i16, i16* %7318, i64 %12532
  %12534 = load i16, i16* %12533, align 2, !tbaa !382
  %12535 = insertelement <64 x i16> %12530, i16 %12534, i32 52
  %12536 = extractelement <64 x i32> %12270, i32 53
  %12537 = sext i32 %12536 to i64
  %12538 = getelementptr inbounds i16, i16* %7318, i64 %12537
  %12539 = load i16, i16* %12538, align 2, !tbaa !382
  %12540 = insertelement <64 x i16> %12535, i16 %12539, i32 53
  %12541 = extractelement <64 x i32> %12270, i32 54
  %12542 = sext i32 %12541 to i64
  %12543 = getelementptr inbounds i16, i16* %7318, i64 %12542
  %12544 = load i16, i16* %12543, align 2, !tbaa !382
  %12545 = insertelement <64 x i16> %12540, i16 %12544, i32 54
  %12546 = extractelement <64 x i32> %12270, i32 55
  %12547 = sext i32 %12546 to i64
  %12548 = getelementptr inbounds i16, i16* %7318, i64 %12547
  %12549 = load i16, i16* %12548, align 2, !tbaa !382
  %12550 = insertelement <64 x i16> %12545, i16 %12549, i32 55
  %12551 = extractelement <64 x i32> %12270, i32 56
  %12552 = sext i32 %12551 to i64
  %12553 = getelementptr inbounds i16, i16* %7318, i64 %12552
  %12554 = load i16, i16* %12553, align 2, !tbaa !382
  %12555 = insertelement <64 x i16> %12550, i16 %12554, i32 56
  %12556 = extractelement <64 x i32> %12270, i32 57
  %12557 = sext i32 %12556 to i64
  %12558 = getelementptr inbounds i16, i16* %7318, i64 %12557
  %12559 = load i16, i16* %12558, align 2, !tbaa !382
  %12560 = insertelement <64 x i16> %12555, i16 %12559, i32 57
  %12561 = extractelement <64 x i32> %12270, i32 58
  %12562 = sext i32 %12561 to i64
  %12563 = getelementptr inbounds i16, i16* %7318, i64 %12562
  %12564 = load i16, i16* %12563, align 2, !tbaa !382
  %12565 = insertelement <64 x i16> %12560, i16 %12564, i32 58
  %12566 = extractelement <64 x i32> %12270, i32 59
  %12567 = sext i32 %12566 to i64
  %12568 = getelementptr inbounds i16, i16* %7318, i64 %12567
  %12569 = load i16, i16* %12568, align 2, !tbaa !382
  %12570 = insertelement <64 x i16> %12565, i16 %12569, i32 59
  %12571 = extractelement <64 x i32> %12270, i32 60
  %12572 = sext i32 %12571 to i64
  %12573 = getelementptr inbounds i16, i16* %7318, i64 %12572
  %12574 = load i16, i16* %12573, align 2, !tbaa !382
  %12575 = insertelement <64 x i16> %12570, i16 %12574, i32 60
  %12576 = extractelement <64 x i32> %12270, i32 61
  %12577 = sext i32 %12576 to i64
  %12578 = getelementptr inbounds i16, i16* %7318, i64 %12577
  %12579 = load i16, i16* %12578, align 2, !tbaa !382
  %12580 = insertelement <64 x i16> %12575, i16 %12579, i32 61
  %12581 = extractelement <64 x i32> %12270, i32 62
  %12582 = sext i32 %12581 to i64
  %12583 = getelementptr inbounds i16, i16* %7318, i64 %12582
  %12584 = load i16, i16* %12583, align 2, !tbaa !382
  %12585 = insertelement <64 x i16> %12580, i16 %12584, i32 62
  %12586 = extractelement <64 x i32> %12270, i32 63
  %12587 = sext i32 %12586 to i64
  %12588 = getelementptr inbounds i16, i16* %7318, i64 %12587
  %12589 = load i16, i16* %12588, align 2, !tbaa !382
  %12590 = insertelement <64 x i16> %12585, i16 %12589, i32 63
  %12591 = add nsw i32 %blur_x.s0.x.v1.base.s112, -64
  %12592 = insertelement <64 x i32> undef, i32 %12591, i32 0
  %12593 = shufflevector <64 x i32> %12592, <64 x i32> undef, <64 x i32> zeroinitializer
  %12594 = add nsw <64 x i32> %12593, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %12595 = shufflevector <64 x i32> %12594, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12596 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12595, <4 x i32> %7315)
  %12597 = shufflevector <64 x i32> %12594, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12598 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12597, <4 x i32> %7315)
  %12599 = shufflevector <64 x i32> %12594, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %12600 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12599, <4 x i32> %7315)
  %12601 = shufflevector <64 x i32> %12594, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %12602 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12601, <4 x i32> %7315)
  %12603 = shufflevector <64 x i32> %12594, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %12604 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12603, <4 x i32> %7315)
  %12605 = shufflevector <64 x i32> %12594, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %12606 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12605, <4 x i32> %7315)
  %12607 = shufflevector <64 x i32> %12594, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %12608 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12607, <4 x i32> %7315)
  %12609 = shufflevector <64 x i32> %12594, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %12610 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12609, <4 x i32> %7315)
  %12611 = shufflevector <64 x i32> %12594, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %12612 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12611, <4 x i32> %7315)
  %12613 = shufflevector <64 x i32> %12594, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %12614 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12613, <4 x i32> %7315)
  %12615 = shufflevector <64 x i32> %12594, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %12616 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12615, <4 x i32> %7315)
  %12617 = shufflevector <64 x i32> %12594, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %12618 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12617, <4 x i32> %7315)
  %12619 = shufflevector <64 x i32> %12594, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %12620 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12619, <4 x i32> %7315)
  %12621 = shufflevector <64 x i32> %12594, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %12622 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12621, <4 x i32> %7315)
  %12623 = shufflevector <64 x i32> %12594, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %12624 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12623, <4 x i32> %7315)
  %12625 = shufflevector <64 x i32> %12594, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %12626 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12625, <4 x i32> %7315)
  %12627 = shufflevector <4 x i32> %12626, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %12628 = shufflevector <8 x i32> %12627, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %12629 = shufflevector <16 x i32> %12628, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %12630 = shufflevector <32 x i32> %12629, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %12631 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12596, <4 x i32> %7317)
  %12632 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12598, <4 x i32> %7317)
  %12633 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12600, <4 x i32> %7317)
  %12634 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12602, <4 x i32> %7317)
  %12635 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12604, <4 x i32> %7317)
  %12636 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12606, <4 x i32> %7317)
  %12637 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12608, <4 x i32> %7317)
  %12638 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12610, <4 x i32> %7317)
  %12639 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12612, <4 x i32> %7317)
  %12640 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12614, <4 x i32> %7317)
  %12641 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12616, <4 x i32> %7317)
  %12642 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12618, <4 x i32> %7317)
  %12643 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12620, <4 x i32> %7317)
  %12644 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12622, <4 x i32> %7317)
  %12645 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12624, <4 x i32> %7317)
  %12646 = shufflevector <64 x i32> %12630, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %12647 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12646, <4 x i32> %7317)
  %12648 = shufflevector <4 x i32> %12631, <4 x i32> %12632, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12649 = shufflevector <4 x i32> %12633, <4 x i32> %12634, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12650 = shufflevector <4 x i32> %12635, <4 x i32> %12636, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12651 = shufflevector <4 x i32> %12637, <4 x i32> %12638, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12652 = shufflevector <4 x i32> %12639, <4 x i32> %12640, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12653 = shufflevector <4 x i32> %12641, <4 x i32> %12642, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12654 = shufflevector <4 x i32> %12643, <4 x i32> %12644, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12655 = shufflevector <4 x i32> %12645, <4 x i32> %12647, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12656 = shufflevector <8 x i32> %12648, <8 x i32> %12649, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12657 = shufflevector <8 x i32> %12650, <8 x i32> %12651, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12658 = shufflevector <8 x i32> %12652, <8 x i32> %12653, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12659 = shufflevector <8 x i32> %12654, <8 x i32> %12655, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12660 = shufflevector <16 x i32> %12656, <16 x i32> %12657, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12661 = shufflevector <16 x i32> %12658, <16 x i32> %12659, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12662 = shufflevector <32 x i32> %12660, <32 x i32> %12661, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %12663 = add nsw <64 x i32> %12662, %t207113
  %12664 = extractelement <64 x i32> %12663, i32 0
  %12665 = sext i32 %12664 to i64
  %12666 = getelementptr inbounds i16, i16* %7318, i64 %12665
  %12667 = load i16, i16* %12666, align 2, !tbaa !382
  %12668 = insertelement <64 x i16> undef, i16 %12667, i32 0
  %12669 = extractelement <64 x i32> %12663, i32 1
  %12670 = sext i32 %12669 to i64
  %12671 = getelementptr inbounds i16, i16* %7318, i64 %12670
  %12672 = load i16, i16* %12671, align 2, !tbaa !382
  %12673 = insertelement <64 x i16> %12668, i16 %12672, i32 1
  %12674 = extractelement <64 x i32> %12663, i32 2
  %12675 = sext i32 %12674 to i64
  %12676 = getelementptr inbounds i16, i16* %7318, i64 %12675
  %12677 = load i16, i16* %12676, align 2, !tbaa !382
  %12678 = insertelement <64 x i16> %12673, i16 %12677, i32 2
  %12679 = extractelement <64 x i32> %12663, i32 3
  %12680 = sext i32 %12679 to i64
  %12681 = getelementptr inbounds i16, i16* %7318, i64 %12680
  %12682 = load i16, i16* %12681, align 2, !tbaa !382
  %12683 = insertelement <64 x i16> %12678, i16 %12682, i32 3
  %12684 = extractelement <64 x i32> %12663, i32 4
  %12685 = sext i32 %12684 to i64
  %12686 = getelementptr inbounds i16, i16* %7318, i64 %12685
  %12687 = load i16, i16* %12686, align 2, !tbaa !382
  %12688 = insertelement <64 x i16> %12683, i16 %12687, i32 4
  %12689 = extractelement <64 x i32> %12663, i32 5
  %12690 = sext i32 %12689 to i64
  %12691 = getelementptr inbounds i16, i16* %7318, i64 %12690
  %12692 = load i16, i16* %12691, align 2, !tbaa !382
  %12693 = insertelement <64 x i16> %12688, i16 %12692, i32 5
  %12694 = extractelement <64 x i32> %12663, i32 6
  %12695 = sext i32 %12694 to i64
  %12696 = getelementptr inbounds i16, i16* %7318, i64 %12695
  %12697 = load i16, i16* %12696, align 2, !tbaa !382
  %12698 = insertelement <64 x i16> %12693, i16 %12697, i32 6
  %12699 = extractelement <64 x i32> %12663, i32 7
  %12700 = sext i32 %12699 to i64
  %12701 = getelementptr inbounds i16, i16* %7318, i64 %12700
  %12702 = load i16, i16* %12701, align 2, !tbaa !382
  %12703 = insertelement <64 x i16> %12698, i16 %12702, i32 7
  %12704 = extractelement <64 x i32> %12663, i32 8
  %12705 = sext i32 %12704 to i64
  %12706 = getelementptr inbounds i16, i16* %7318, i64 %12705
  %12707 = load i16, i16* %12706, align 2, !tbaa !382
  %12708 = insertelement <64 x i16> %12703, i16 %12707, i32 8
  %12709 = extractelement <64 x i32> %12663, i32 9
  %12710 = sext i32 %12709 to i64
  %12711 = getelementptr inbounds i16, i16* %7318, i64 %12710
  %12712 = load i16, i16* %12711, align 2, !tbaa !382
  %12713 = insertelement <64 x i16> %12708, i16 %12712, i32 9
  %12714 = extractelement <64 x i32> %12663, i32 10
  %12715 = sext i32 %12714 to i64
  %12716 = getelementptr inbounds i16, i16* %7318, i64 %12715
  %12717 = load i16, i16* %12716, align 2, !tbaa !382
  %12718 = insertelement <64 x i16> %12713, i16 %12717, i32 10
  %12719 = extractelement <64 x i32> %12663, i32 11
  %12720 = sext i32 %12719 to i64
  %12721 = getelementptr inbounds i16, i16* %7318, i64 %12720
  %12722 = load i16, i16* %12721, align 2, !tbaa !382
  %12723 = insertelement <64 x i16> %12718, i16 %12722, i32 11
  %12724 = extractelement <64 x i32> %12663, i32 12
  %12725 = sext i32 %12724 to i64
  %12726 = getelementptr inbounds i16, i16* %7318, i64 %12725
  %12727 = load i16, i16* %12726, align 2, !tbaa !382
  %12728 = insertelement <64 x i16> %12723, i16 %12727, i32 12
  %12729 = extractelement <64 x i32> %12663, i32 13
  %12730 = sext i32 %12729 to i64
  %12731 = getelementptr inbounds i16, i16* %7318, i64 %12730
  %12732 = load i16, i16* %12731, align 2, !tbaa !382
  %12733 = insertelement <64 x i16> %12728, i16 %12732, i32 13
  %12734 = extractelement <64 x i32> %12663, i32 14
  %12735 = sext i32 %12734 to i64
  %12736 = getelementptr inbounds i16, i16* %7318, i64 %12735
  %12737 = load i16, i16* %12736, align 2, !tbaa !382
  %12738 = insertelement <64 x i16> %12733, i16 %12737, i32 14
  %12739 = extractelement <64 x i32> %12663, i32 15
  %12740 = sext i32 %12739 to i64
  %12741 = getelementptr inbounds i16, i16* %7318, i64 %12740
  %12742 = load i16, i16* %12741, align 2, !tbaa !382
  %12743 = insertelement <64 x i16> %12738, i16 %12742, i32 15
  %12744 = extractelement <64 x i32> %12663, i32 16
  %12745 = sext i32 %12744 to i64
  %12746 = getelementptr inbounds i16, i16* %7318, i64 %12745
  %12747 = load i16, i16* %12746, align 2, !tbaa !382
  %12748 = insertelement <64 x i16> %12743, i16 %12747, i32 16
  %12749 = extractelement <64 x i32> %12663, i32 17
  %12750 = sext i32 %12749 to i64
  %12751 = getelementptr inbounds i16, i16* %7318, i64 %12750
  %12752 = load i16, i16* %12751, align 2, !tbaa !382
  %12753 = insertelement <64 x i16> %12748, i16 %12752, i32 17
  %12754 = extractelement <64 x i32> %12663, i32 18
  %12755 = sext i32 %12754 to i64
  %12756 = getelementptr inbounds i16, i16* %7318, i64 %12755
  %12757 = load i16, i16* %12756, align 2, !tbaa !382
  %12758 = insertelement <64 x i16> %12753, i16 %12757, i32 18
  %12759 = extractelement <64 x i32> %12663, i32 19
  %12760 = sext i32 %12759 to i64
  %12761 = getelementptr inbounds i16, i16* %7318, i64 %12760
  %12762 = load i16, i16* %12761, align 2, !tbaa !382
  %12763 = insertelement <64 x i16> %12758, i16 %12762, i32 19
  %12764 = extractelement <64 x i32> %12663, i32 20
  %12765 = sext i32 %12764 to i64
  %12766 = getelementptr inbounds i16, i16* %7318, i64 %12765
  %12767 = load i16, i16* %12766, align 2, !tbaa !382
  %12768 = insertelement <64 x i16> %12763, i16 %12767, i32 20
  %12769 = extractelement <64 x i32> %12663, i32 21
  %12770 = sext i32 %12769 to i64
  %12771 = getelementptr inbounds i16, i16* %7318, i64 %12770
  %12772 = load i16, i16* %12771, align 2, !tbaa !382
  %12773 = insertelement <64 x i16> %12768, i16 %12772, i32 21
  %12774 = extractelement <64 x i32> %12663, i32 22
  %12775 = sext i32 %12774 to i64
  %12776 = getelementptr inbounds i16, i16* %7318, i64 %12775
  %12777 = load i16, i16* %12776, align 2, !tbaa !382
  %12778 = insertelement <64 x i16> %12773, i16 %12777, i32 22
  %12779 = extractelement <64 x i32> %12663, i32 23
  %12780 = sext i32 %12779 to i64
  %12781 = getelementptr inbounds i16, i16* %7318, i64 %12780
  %12782 = load i16, i16* %12781, align 2, !tbaa !382
  %12783 = insertelement <64 x i16> %12778, i16 %12782, i32 23
  %12784 = extractelement <64 x i32> %12663, i32 24
  %12785 = sext i32 %12784 to i64
  %12786 = getelementptr inbounds i16, i16* %7318, i64 %12785
  %12787 = load i16, i16* %12786, align 2, !tbaa !382
  %12788 = insertelement <64 x i16> %12783, i16 %12787, i32 24
  %12789 = extractelement <64 x i32> %12663, i32 25
  %12790 = sext i32 %12789 to i64
  %12791 = getelementptr inbounds i16, i16* %7318, i64 %12790
  %12792 = load i16, i16* %12791, align 2, !tbaa !382
  %12793 = insertelement <64 x i16> %12788, i16 %12792, i32 25
  %12794 = extractelement <64 x i32> %12663, i32 26
  %12795 = sext i32 %12794 to i64
  %12796 = getelementptr inbounds i16, i16* %7318, i64 %12795
  %12797 = load i16, i16* %12796, align 2, !tbaa !382
  %12798 = insertelement <64 x i16> %12793, i16 %12797, i32 26
  %12799 = extractelement <64 x i32> %12663, i32 27
  %12800 = sext i32 %12799 to i64
  %12801 = getelementptr inbounds i16, i16* %7318, i64 %12800
  %12802 = load i16, i16* %12801, align 2, !tbaa !382
  %12803 = insertelement <64 x i16> %12798, i16 %12802, i32 27
  %12804 = extractelement <64 x i32> %12663, i32 28
  %12805 = sext i32 %12804 to i64
  %12806 = getelementptr inbounds i16, i16* %7318, i64 %12805
  %12807 = load i16, i16* %12806, align 2, !tbaa !382
  %12808 = insertelement <64 x i16> %12803, i16 %12807, i32 28
  %12809 = extractelement <64 x i32> %12663, i32 29
  %12810 = sext i32 %12809 to i64
  %12811 = getelementptr inbounds i16, i16* %7318, i64 %12810
  %12812 = load i16, i16* %12811, align 2, !tbaa !382
  %12813 = insertelement <64 x i16> %12808, i16 %12812, i32 29
  %12814 = extractelement <64 x i32> %12663, i32 30
  %12815 = sext i32 %12814 to i64
  %12816 = getelementptr inbounds i16, i16* %7318, i64 %12815
  %12817 = load i16, i16* %12816, align 2, !tbaa !382
  %12818 = insertelement <64 x i16> %12813, i16 %12817, i32 30
  %12819 = extractelement <64 x i32> %12663, i32 31
  %12820 = sext i32 %12819 to i64
  %12821 = getelementptr inbounds i16, i16* %7318, i64 %12820
  %12822 = load i16, i16* %12821, align 2, !tbaa !382
  %12823 = insertelement <64 x i16> %12818, i16 %12822, i32 31
  %12824 = extractelement <64 x i32> %12663, i32 32
  %12825 = sext i32 %12824 to i64
  %12826 = getelementptr inbounds i16, i16* %7318, i64 %12825
  %12827 = load i16, i16* %12826, align 2, !tbaa !382
  %12828 = insertelement <64 x i16> %12823, i16 %12827, i32 32
  %12829 = extractelement <64 x i32> %12663, i32 33
  %12830 = sext i32 %12829 to i64
  %12831 = getelementptr inbounds i16, i16* %7318, i64 %12830
  %12832 = load i16, i16* %12831, align 2, !tbaa !382
  %12833 = insertelement <64 x i16> %12828, i16 %12832, i32 33
  %12834 = extractelement <64 x i32> %12663, i32 34
  %12835 = sext i32 %12834 to i64
  %12836 = getelementptr inbounds i16, i16* %7318, i64 %12835
  %12837 = load i16, i16* %12836, align 2, !tbaa !382
  %12838 = insertelement <64 x i16> %12833, i16 %12837, i32 34
  %12839 = extractelement <64 x i32> %12663, i32 35
  %12840 = sext i32 %12839 to i64
  %12841 = getelementptr inbounds i16, i16* %7318, i64 %12840
  %12842 = load i16, i16* %12841, align 2, !tbaa !382
  %12843 = insertelement <64 x i16> %12838, i16 %12842, i32 35
  %12844 = extractelement <64 x i32> %12663, i32 36
  %12845 = sext i32 %12844 to i64
  %12846 = getelementptr inbounds i16, i16* %7318, i64 %12845
  %12847 = load i16, i16* %12846, align 2, !tbaa !382
  %12848 = insertelement <64 x i16> %12843, i16 %12847, i32 36
  %12849 = extractelement <64 x i32> %12663, i32 37
  %12850 = sext i32 %12849 to i64
  %12851 = getelementptr inbounds i16, i16* %7318, i64 %12850
  %12852 = load i16, i16* %12851, align 2, !tbaa !382
  %12853 = insertelement <64 x i16> %12848, i16 %12852, i32 37
  %12854 = extractelement <64 x i32> %12663, i32 38
  %12855 = sext i32 %12854 to i64
  %12856 = getelementptr inbounds i16, i16* %7318, i64 %12855
  %12857 = load i16, i16* %12856, align 2, !tbaa !382
  %12858 = insertelement <64 x i16> %12853, i16 %12857, i32 38
  %12859 = extractelement <64 x i32> %12663, i32 39
  %12860 = sext i32 %12859 to i64
  %12861 = getelementptr inbounds i16, i16* %7318, i64 %12860
  %12862 = load i16, i16* %12861, align 2, !tbaa !382
  %12863 = insertelement <64 x i16> %12858, i16 %12862, i32 39
  %12864 = extractelement <64 x i32> %12663, i32 40
  %12865 = sext i32 %12864 to i64
  %12866 = getelementptr inbounds i16, i16* %7318, i64 %12865
  %12867 = load i16, i16* %12866, align 2, !tbaa !382
  %12868 = insertelement <64 x i16> %12863, i16 %12867, i32 40
  %12869 = extractelement <64 x i32> %12663, i32 41
  %12870 = sext i32 %12869 to i64
  %12871 = getelementptr inbounds i16, i16* %7318, i64 %12870
  %12872 = load i16, i16* %12871, align 2, !tbaa !382
  %12873 = insertelement <64 x i16> %12868, i16 %12872, i32 41
  %12874 = extractelement <64 x i32> %12663, i32 42
  %12875 = sext i32 %12874 to i64
  %12876 = getelementptr inbounds i16, i16* %7318, i64 %12875
  %12877 = load i16, i16* %12876, align 2, !tbaa !382
  %12878 = insertelement <64 x i16> %12873, i16 %12877, i32 42
  %12879 = extractelement <64 x i32> %12663, i32 43
  %12880 = sext i32 %12879 to i64
  %12881 = getelementptr inbounds i16, i16* %7318, i64 %12880
  %12882 = load i16, i16* %12881, align 2, !tbaa !382
  %12883 = insertelement <64 x i16> %12878, i16 %12882, i32 43
  %12884 = extractelement <64 x i32> %12663, i32 44
  %12885 = sext i32 %12884 to i64
  %12886 = getelementptr inbounds i16, i16* %7318, i64 %12885
  %12887 = load i16, i16* %12886, align 2, !tbaa !382
  %12888 = insertelement <64 x i16> %12883, i16 %12887, i32 44
  %12889 = extractelement <64 x i32> %12663, i32 45
  %12890 = sext i32 %12889 to i64
  %12891 = getelementptr inbounds i16, i16* %7318, i64 %12890
  %12892 = load i16, i16* %12891, align 2, !tbaa !382
  %12893 = insertelement <64 x i16> %12888, i16 %12892, i32 45
  %12894 = extractelement <64 x i32> %12663, i32 46
  %12895 = sext i32 %12894 to i64
  %12896 = getelementptr inbounds i16, i16* %7318, i64 %12895
  %12897 = load i16, i16* %12896, align 2, !tbaa !382
  %12898 = insertelement <64 x i16> %12893, i16 %12897, i32 46
  %12899 = extractelement <64 x i32> %12663, i32 47
  %12900 = sext i32 %12899 to i64
  %12901 = getelementptr inbounds i16, i16* %7318, i64 %12900
  %12902 = load i16, i16* %12901, align 2, !tbaa !382
  %12903 = insertelement <64 x i16> %12898, i16 %12902, i32 47
  %12904 = extractelement <64 x i32> %12663, i32 48
  %12905 = sext i32 %12904 to i64
  %12906 = getelementptr inbounds i16, i16* %7318, i64 %12905
  %12907 = load i16, i16* %12906, align 2, !tbaa !382
  %12908 = insertelement <64 x i16> %12903, i16 %12907, i32 48
  %12909 = extractelement <64 x i32> %12663, i32 49
  %12910 = sext i32 %12909 to i64
  %12911 = getelementptr inbounds i16, i16* %7318, i64 %12910
  %12912 = load i16, i16* %12911, align 2, !tbaa !382
  %12913 = insertelement <64 x i16> %12908, i16 %12912, i32 49
  %12914 = extractelement <64 x i32> %12663, i32 50
  %12915 = sext i32 %12914 to i64
  %12916 = getelementptr inbounds i16, i16* %7318, i64 %12915
  %12917 = load i16, i16* %12916, align 2, !tbaa !382
  %12918 = insertelement <64 x i16> %12913, i16 %12917, i32 50
  %12919 = extractelement <64 x i32> %12663, i32 51
  %12920 = sext i32 %12919 to i64
  %12921 = getelementptr inbounds i16, i16* %7318, i64 %12920
  %12922 = load i16, i16* %12921, align 2, !tbaa !382
  %12923 = insertelement <64 x i16> %12918, i16 %12922, i32 51
  %12924 = extractelement <64 x i32> %12663, i32 52
  %12925 = sext i32 %12924 to i64
  %12926 = getelementptr inbounds i16, i16* %7318, i64 %12925
  %12927 = load i16, i16* %12926, align 2, !tbaa !382
  %12928 = insertelement <64 x i16> %12923, i16 %12927, i32 52
  %12929 = extractelement <64 x i32> %12663, i32 53
  %12930 = sext i32 %12929 to i64
  %12931 = getelementptr inbounds i16, i16* %7318, i64 %12930
  %12932 = load i16, i16* %12931, align 2, !tbaa !382
  %12933 = insertelement <64 x i16> %12928, i16 %12932, i32 53
  %12934 = extractelement <64 x i32> %12663, i32 54
  %12935 = sext i32 %12934 to i64
  %12936 = getelementptr inbounds i16, i16* %7318, i64 %12935
  %12937 = load i16, i16* %12936, align 2, !tbaa !382
  %12938 = insertelement <64 x i16> %12933, i16 %12937, i32 54
  %12939 = extractelement <64 x i32> %12663, i32 55
  %12940 = sext i32 %12939 to i64
  %12941 = getelementptr inbounds i16, i16* %7318, i64 %12940
  %12942 = load i16, i16* %12941, align 2, !tbaa !382
  %12943 = insertelement <64 x i16> %12938, i16 %12942, i32 55
  %12944 = extractelement <64 x i32> %12663, i32 56
  %12945 = sext i32 %12944 to i64
  %12946 = getelementptr inbounds i16, i16* %7318, i64 %12945
  %12947 = load i16, i16* %12946, align 2, !tbaa !382
  %12948 = insertelement <64 x i16> %12943, i16 %12947, i32 56
  %12949 = extractelement <64 x i32> %12663, i32 57
  %12950 = sext i32 %12949 to i64
  %12951 = getelementptr inbounds i16, i16* %7318, i64 %12950
  %12952 = load i16, i16* %12951, align 2, !tbaa !382
  %12953 = insertelement <64 x i16> %12948, i16 %12952, i32 57
  %12954 = extractelement <64 x i32> %12663, i32 58
  %12955 = sext i32 %12954 to i64
  %12956 = getelementptr inbounds i16, i16* %7318, i64 %12955
  %12957 = load i16, i16* %12956, align 2, !tbaa !382
  %12958 = insertelement <64 x i16> %12953, i16 %12957, i32 58
  %12959 = extractelement <64 x i32> %12663, i32 59
  %12960 = sext i32 %12959 to i64
  %12961 = getelementptr inbounds i16, i16* %7318, i64 %12960
  %12962 = load i16, i16* %12961, align 2, !tbaa !382
  %12963 = insertelement <64 x i16> %12958, i16 %12962, i32 59
  %12964 = extractelement <64 x i32> %12663, i32 60
  %12965 = sext i32 %12964 to i64
  %12966 = getelementptr inbounds i16, i16* %7318, i64 %12965
  %12967 = load i16, i16* %12966, align 2, !tbaa !382
  %12968 = insertelement <64 x i16> %12963, i16 %12967, i32 60
  %12969 = extractelement <64 x i32> %12663, i32 61
  %12970 = sext i32 %12969 to i64
  %12971 = getelementptr inbounds i16, i16* %7318, i64 %12970
  %12972 = load i16, i16* %12971, align 2, !tbaa !382
  %12973 = insertelement <64 x i16> %12968, i16 %12972, i32 61
  %12974 = extractelement <64 x i32> %12663, i32 62
  %12975 = sext i32 %12974 to i64
  %12976 = getelementptr inbounds i16, i16* %7318, i64 %12975
  %12977 = load i16, i16* %12976, align 2, !tbaa !382
  %12978 = insertelement <64 x i16> %12973, i16 %12977, i32 62
  %12979 = extractelement <64 x i32> %12663, i32 63
  %12980 = sext i32 %12979 to i64
  %12981 = getelementptr inbounds i16, i16* %7318, i64 %12980
  %12982 = load i16, i16* %12981, align 2, !tbaa !382
  %12983 = insertelement <64 x i16> %12978, i16 %12982, i32 63
  %12984 = add nsw i32 %blur_x.s0.x.v1.base.s112, -62
  %12985 = insertelement <64 x i32> undef, i32 %12984, i32 0
  %12986 = shufflevector <64 x i32> %12985, <64 x i32> undef, <64 x i32> zeroinitializer
  %12987 = add nsw <64 x i32> %12986, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %12988 = shufflevector <64 x i32> %12987, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12989 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12988, <4 x i32> %7315)
  %12990 = shufflevector <64 x i32> %12987, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12991 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12990, <4 x i32> %7315)
  %12992 = shufflevector <64 x i32> %12987, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %12993 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12992, <4 x i32> %7315)
  %12994 = shufflevector <64 x i32> %12987, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %12995 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12994, <4 x i32> %7315)
  %12996 = shufflevector <64 x i32> %12987, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %12997 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12996, <4 x i32> %7315)
  %12998 = shufflevector <64 x i32> %12987, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %12999 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12998, <4 x i32> %7315)
  %13000 = shufflevector <64 x i32> %12987, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %13001 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13000, <4 x i32> %7315)
  %13002 = shufflevector <64 x i32> %12987, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %13003 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13002, <4 x i32> %7315)
  %13004 = shufflevector <64 x i32> %12987, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %13005 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13004, <4 x i32> %7315)
  %13006 = shufflevector <64 x i32> %12987, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %13007 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13006, <4 x i32> %7315)
  %13008 = shufflevector <64 x i32> %12987, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %13009 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13008, <4 x i32> %7315)
  %13010 = shufflevector <64 x i32> %12987, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %13011 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13010, <4 x i32> %7315)
  %13012 = shufflevector <64 x i32> %12987, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %13013 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13012, <4 x i32> %7315)
  %13014 = shufflevector <64 x i32> %12987, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %13015 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13014, <4 x i32> %7315)
  %13016 = shufflevector <64 x i32> %12987, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %13017 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13016, <4 x i32> %7315)
  %13018 = shufflevector <64 x i32> %12987, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %13019 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13018, <4 x i32> %7315)
  %13020 = shufflevector <4 x i32> %13019, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %13021 = shufflevector <8 x i32> %13020, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %13022 = shufflevector <16 x i32> %13021, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %13023 = shufflevector <32 x i32> %13022, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %13024 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12989, <4 x i32> %7317)
  %13025 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12991, <4 x i32> %7317)
  %13026 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12993, <4 x i32> %7317)
  %13027 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12995, <4 x i32> %7317)
  %13028 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12997, <4 x i32> %7317)
  %13029 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12999, <4 x i32> %7317)
  %13030 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13001, <4 x i32> %7317)
  %13031 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13003, <4 x i32> %7317)
  %13032 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13005, <4 x i32> %7317)
  %13033 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13007, <4 x i32> %7317)
  %13034 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13009, <4 x i32> %7317)
  %13035 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13011, <4 x i32> %7317)
  %13036 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13013, <4 x i32> %7317)
  %13037 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13015, <4 x i32> %7317)
  %13038 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13017, <4 x i32> %7317)
  %13039 = shufflevector <64 x i32> %13023, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %13040 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13039, <4 x i32> %7317)
  %13041 = shufflevector <4 x i32> %13024, <4 x i32> %13025, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13042 = shufflevector <4 x i32> %13026, <4 x i32> %13027, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13043 = shufflevector <4 x i32> %13028, <4 x i32> %13029, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13044 = shufflevector <4 x i32> %13030, <4 x i32> %13031, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13045 = shufflevector <4 x i32> %13032, <4 x i32> %13033, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13046 = shufflevector <4 x i32> %13034, <4 x i32> %13035, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13047 = shufflevector <4 x i32> %13036, <4 x i32> %13037, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13048 = shufflevector <4 x i32> %13038, <4 x i32> %13040, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13049 = shufflevector <8 x i32> %13041, <8 x i32> %13042, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13050 = shufflevector <8 x i32> %13043, <8 x i32> %13044, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13051 = shufflevector <8 x i32> %13045, <8 x i32> %13046, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13052 = shufflevector <8 x i32> %13047, <8 x i32> %13048, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13053 = shufflevector <16 x i32> %13049, <16 x i32> %13050, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13054 = shufflevector <16 x i32> %13051, <16 x i32> %13052, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13055 = shufflevector <32 x i32> %13053, <32 x i32> %13054, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %13056 = add nsw <64 x i32> %13055, %t207113
  %13057 = extractelement <64 x i32> %13056, i32 0
  %13058 = sext i32 %13057 to i64
  %13059 = getelementptr inbounds i16, i16* %7318, i64 %13058
  %13060 = load i16, i16* %13059, align 2, !tbaa !382
  %13061 = insertelement <64 x i16> undef, i16 %13060, i32 0
  %13062 = extractelement <64 x i32> %13056, i32 1
  %13063 = sext i32 %13062 to i64
  %13064 = getelementptr inbounds i16, i16* %7318, i64 %13063
  %13065 = load i16, i16* %13064, align 2, !tbaa !382
  %13066 = insertelement <64 x i16> %13061, i16 %13065, i32 1
  %13067 = extractelement <64 x i32> %13056, i32 2
  %13068 = sext i32 %13067 to i64
  %13069 = getelementptr inbounds i16, i16* %7318, i64 %13068
  %13070 = load i16, i16* %13069, align 2, !tbaa !382
  %13071 = insertelement <64 x i16> %13066, i16 %13070, i32 2
  %13072 = extractelement <64 x i32> %13056, i32 3
  %13073 = sext i32 %13072 to i64
  %13074 = getelementptr inbounds i16, i16* %7318, i64 %13073
  %13075 = load i16, i16* %13074, align 2, !tbaa !382
  %13076 = insertelement <64 x i16> %13071, i16 %13075, i32 3
  %13077 = extractelement <64 x i32> %13056, i32 4
  %13078 = sext i32 %13077 to i64
  %13079 = getelementptr inbounds i16, i16* %7318, i64 %13078
  %13080 = load i16, i16* %13079, align 2, !tbaa !382
  %13081 = insertelement <64 x i16> %13076, i16 %13080, i32 4
  %13082 = extractelement <64 x i32> %13056, i32 5
  %13083 = sext i32 %13082 to i64
  %13084 = getelementptr inbounds i16, i16* %7318, i64 %13083
  %13085 = load i16, i16* %13084, align 2, !tbaa !382
  %13086 = insertelement <64 x i16> %13081, i16 %13085, i32 5
  %13087 = extractelement <64 x i32> %13056, i32 6
  %13088 = sext i32 %13087 to i64
  %13089 = getelementptr inbounds i16, i16* %7318, i64 %13088
  %13090 = load i16, i16* %13089, align 2, !tbaa !382
  %13091 = insertelement <64 x i16> %13086, i16 %13090, i32 6
  %13092 = extractelement <64 x i32> %13056, i32 7
  %13093 = sext i32 %13092 to i64
  %13094 = getelementptr inbounds i16, i16* %7318, i64 %13093
  %13095 = load i16, i16* %13094, align 2, !tbaa !382
  %13096 = insertelement <64 x i16> %13091, i16 %13095, i32 7
  %13097 = extractelement <64 x i32> %13056, i32 8
  %13098 = sext i32 %13097 to i64
  %13099 = getelementptr inbounds i16, i16* %7318, i64 %13098
  %13100 = load i16, i16* %13099, align 2, !tbaa !382
  %13101 = insertelement <64 x i16> %13096, i16 %13100, i32 8
  %13102 = extractelement <64 x i32> %13056, i32 9
  %13103 = sext i32 %13102 to i64
  %13104 = getelementptr inbounds i16, i16* %7318, i64 %13103
  %13105 = load i16, i16* %13104, align 2, !tbaa !382
  %13106 = insertelement <64 x i16> %13101, i16 %13105, i32 9
  %13107 = extractelement <64 x i32> %13056, i32 10
  %13108 = sext i32 %13107 to i64
  %13109 = getelementptr inbounds i16, i16* %7318, i64 %13108
  %13110 = load i16, i16* %13109, align 2, !tbaa !382
  %13111 = insertelement <64 x i16> %13106, i16 %13110, i32 10
  %13112 = extractelement <64 x i32> %13056, i32 11
  %13113 = sext i32 %13112 to i64
  %13114 = getelementptr inbounds i16, i16* %7318, i64 %13113
  %13115 = load i16, i16* %13114, align 2, !tbaa !382
  %13116 = insertelement <64 x i16> %13111, i16 %13115, i32 11
  %13117 = extractelement <64 x i32> %13056, i32 12
  %13118 = sext i32 %13117 to i64
  %13119 = getelementptr inbounds i16, i16* %7318, i64 %13118
  %13120 = load i16, i16* %13119, align 2, !tbaa !382
  %13121 = insertelement <64 x i16> %13116, i16 %13120, i32 12
  %13122 = extractelement <64 x i32> %13056, i32 13
  %13123 = sext i32 %13122 to i64
  %13124 = getelementptr inbounds i16, i16* %7318, i64 %13123
  %13125 = load i16, i16* %13124, align 2, !tbaa !382
  %13126 = insertelement <64 x i16> %13121, i16 %13125, i32 13
  %13127 = extractelement <64 x i32> %13056, i32 14
  %13128 = sext i32 %13127 to i64
  %13129 = getelementptr inbounds i16, i16* %7318, i64 %13128
  %13130 = load i16, i16* %13129, align 2, !tbaa !382
  %13131 = insertelement <64 x i16> %13126, i16 %13130, i32 14
  %13132 = extractelement <64 x i32> %13056, i32 15
  %13133 = sext i32 %13132 to i64
  %13134 = getelementptr inbounds i16, i16* %7318, i64 %13133
  %13135 = load i16, i16* %13134, align 2, !tbaa !382
  %13136 = insertelement <64 x i16> %13131, i16 %13135, i32 15
  %13137 = extractelement <64 x i32> %13056, i32 16
  %13138 = sext i32 %13137 to i64
  %13139 = getelementptr inbounds i16, i16* %7318, i64 %13138
  %13140 = load i16, i16* %13139, align 2, !tbaa !382
  %13141 = insertelement <64 x i16> %13136, i16 %13140, i32 16
  %13142 = extractelement <64 x i32> %13056, i32 17
  %13143 = sext i32 %13142 to i64
  %13144 = getelementptr inbounds i16, i16* %7318, i64 %13143
  %13145 = load i16, i16* %13144, align 2, !tbaa !382
  %13146 = insertelement <64 x i16> %13141, i16 %13145, i32 17
  %13147 = extractelement <64 x i32> %13056, i32 18
  %13148 = sext i32 %13147 to i64
  %13149 = getelementptr inbounds i16, i16* %7318, i64 %13148
  %13150 = load i16, i16* %13149, align 2, !tbaa !382
  %13151 = insertelement <64 x i16> %13146, i16 %13150, i32 18
  %13152 = extractelement <64 x i32> %13056, i32 19
  %13153 = sext i32 %13152 to i64
  %13154 = getelementptr inbounds i16, i16* %7318, i64 %13153
  %13155 = load i16, i16* %13154, align 2, !tbaa !382
  %13156 = insertelement <64 x i16> %13151, i16 %13155, i32 19
  %13157 = extractelement <64 x i32> %13056, i32 20
  %13158 = sext i32 %13157 to i64
  %13159 = getelementptr inbounds i16, i16* %7318, i64 %13158
  %13160 = load i16, i16* %13159, align 2, !tbaa !382
  %13161 = insertelement <64 x i16> %13156, i16 %13160, i32 20
  %13162 = extractelement <64 x i32> %13056, i32 21
  %13163 = sext i32 %13162 to i64
  %13164 = getelementptr inbounds i16, i16* %7318, i64 %13163
  %13165 = load i16, i16* %13164, align 2, !tbaa !382
  %13166 = insertelement <64 x i16> %13161, i16 %13165, i32 21
  %13167 = extractelement <64 x i32> %13056, i32 22
  %13168 = sext i32 %13167 to i64
  %13169 = getelementptr inbounds i16, i16* %7318, i64 %13168
  %13170 = load i16, i16* %13169, align 2, !tbaa !382
  %13171 = insertelement <64 x i16> %13166, i16 %13170, i32 22
  %13172 = extractelement <64 x i32> %13056, i32 23
  %13173 = sext i32 %13172 to i64
  %13174 = getelementptr inbounds i16, i16* %7318, i64 %13173
  %13175 = load i16, i16* %13174, align 2, !tbaa !382
  %13176 = insertelement <64 x i16> %13171, i16 %13175, i32 23
  %13177 = extractelement <64 x i32> %13056, i32 24
  %13178 = sext i32 %13177 to i64
  %13179 = getelementptr inbounds i16, i16* %7318, i64 %13178
  %13180 = load i16, i16* %13179, align 2, !tbaa !382
  %13181 = insertelement <64 x i16> %13176, i16 %13180, i32 24
  %13182 = extractelement <64 x i32> %13056, i32 25
  %13183 = sext i32 %13182 to i64
  %13184 = getelementptr inbounds i16, i16* %7318, i64 %13183
  %13185 = load i16, i16* %13184, align 2, !tbaa !382
  %13186 = insertelement <64 x i16> %13181, i16 %13185, i32 25
  %13187 = extractelement <64 x i32> %13056, i32 26
  %13188 = sext i32 %13187 to i64
  %13189 = getelementptr inbounds i16, i16* %7318, i64 %13188
  %13190 = load i16, i16* %13189, align 2, !tbaa !382
  %13191 = insertelement <64 x i16> %13186, i16 %13190, i32 26
  %13192 = extractelement <64 x i32> %13056, i32 27
  %13193 = sext i32 %13192 to i64
  %13194 = getelementptr inbounds i16, i16* %7318, i64 %13193
  %13195 = load i16, i16* %13194, align 2, !tbaa !382
  %13196 = insertelement <64 x i16> %13191, i16 %13195, i32 27
  %13197 = extractelement <64 x i32> %13056, i32 28
  %13198 = sext i32 %13197 to i64
  %13199 = getelementptr inbounds i16, i16* %7318, i64 %13198
  %13200 = load i16, i16* %13199, align 2, !tbaa !382
  %13201 = insertelement <64 x i16> %13196, i16 %13200, i32 28
  %13202 = extractelement <64 x i32> %13056, i32 29
  %13203 = sext i32 %13202 to i64
  %13204 = getelementptr inbounds i16, i16* %7318, i64 %13203
  %13205 = load i16, i16* %13204, align 2, !tbaa !382
  %13206 = insertelement <64 x i16> %13201, i16 %13205, i32 29
  %13207 = extractelement <64 x i32> %13056, i32 30
  %13208 = sext i32 %13207 to i64
  %13209 = getelementptr inbounds i16, i16* %7318, i64 %13208
  %13210 = load i16, i16* %13209, align 2, !tbaa !382
  %13211 = insertelement <64 x i16> %13206, i16 %13210, i32 30
  %13212 = extractelement <64 x i32> %13056, i32 31
  %13213 = sext i32 %13212 to i64
  %13214 = getelementptr inbounds i16, i16* %7318, i64 %13213
  %13215 = load i16, i16* %13214, align 2, !tbaa !382
  %13216 = insertelement <64 x i16> %13211, i16 %13215, i32 31
  %13217 = extractelement <64 x i32> %13056, i32 32
  %13218 = sext i32 %13217 to i64
  %13219 = getelementptr inbounds i16, i16* %7318, i64 %13218
  %13220 = load i16, i16* %13219, align 2, !tbaa !382
  %13221 = insertelement <64 x i16> %13216, i16 %13220, i32 32
  %13222 = extractelement <64 x i32> %13056, i32 33
  %13223 = sext i32 %13222 to i64
  %13224 = getelementptr inbounds i16, i16* %7318, i64 %13223
  %13225 = load i16, i16* %13224, align 2, !tbaa !382
  %13226 = insertelement <64 x i16> %13221, i16 %13225, i32 33
  %13227 = extractelement <64 x i32> %13056, i32 34
  %13228 = sext i32 %13227 to i64
  %13229 = getelementptr inbounds i16, i16* %7318, i64 %13228
  %13230 = load i16, i16* %13229, align 2, !tbaa !382
  %13231 = insertelement <64 x i16> %13226, i16 %13230, i32 34
  %13232 = extractelement <64 x i32> %13056, i32 35
  %13233 = sext i32 %13232 to i64
  %13234 = getelementptr inbounds i16, i16* %7318, i64 %13233
  %13235 = load i16, i16* %13234, align 2, !tbaa !382
  %13236 = insertelement <64 x i16> %13231, i16 %13235, i32 35
  %13237 = extractelement <64 x i32> %13056, i32 36
  %13238 = sext i32 %13237 to i64
  %13239 = getelementptr inbounds i16, i16* %7318, i64 %13238
  %13240 = load i16, i16* %13239, align 2, !tbaa !382
  %13241 = insertelement <64 x i16> %13236, i16 %13240, i32 36
  %13242 = extractelement <64 x i32> %13056, i32 37
  %13243 = sext i32 %13242 to i64
  %13244 = getelementptr inbounds i16, i16* %7318, i64 %13243
  %13245 = load i16, i16* %13244, align 2, !tbaa !382
  %13246 = insertelement <64 x i16> %13241, i16 %13245, i32 37
  %13247 = extractelement <64 x i32> %13056, i32 38
  %13248 = sext i32 %13247 to i64
  %13249 = getelementptr inbounds i16, i16* %7318, i64 %13248
  %13250 = load i16, i16* %13249, align 2, !tbaa !382
  %13251 = insertelement <64 x i16> %13246, i16 %13250, i32 38
  %13252 = extractelement <64 x i32> %13056, i32 39
  %13253 = sext i32 %13252 to i64
  %13254 = getelementptr inbounds i16, i16* %7318, i64 %13253
  %13255 = load i16, i16* %13254, align 2, !tbaa !382
  %13256 = insertelement <64 x i16> %13251, i16 %13255, i32 39
  %13257 = extractelement <64 x i32> %13056, i32 40
  %13258 = sext i32 %13257 to i64
  %13259 = getelementptr inbounds i16, i16* %7318, i64 %13258
  %13260 = load i16, i16* %13259, align 2, !tbaa !382
  %13261 = insertelement <64 x i16> %13256, i16 %13260, i32 40
  %13262 = extractelement <64 x i32> %13056, i32 41
  %13263 = sext i32 %13262 to i64
  %13264 = getelementptr inbounds i16, i16* %7318, i64 %13263
  %13265 = load i16, i16* %13264, align 2, !tbaa !382
  %13266 = insertelement <64 x i16> %13261, i16 %13265, i32 41
  %13267 = extractelement <64 x i32> %13056, i32 42
  %13268 = sext i32 %13267 to i64
  %13269 = getelementptr inbounds i16, i16* %7318, i64 %13268
  %13270 = load i16, i16* %13269, align 2, !tbaa !382
  %13271 = insertelement <64 x i16> %13266, i16 %13270, i32 42
  %13272 = extractelement <64 x i32> %13056, i32 43
  %13273 = sext i32 %13272 to i64
  %13274 = getelementptr inbounds i16, i16* %7318, i64 %13273
  %13275 = load i16, i16* %13274, align 2, !tbaa !382
  %13276 = insertelement <64 x i16> %13271, i16 %13275, i32 43
  %13277 = extractelement <64 x i32> %13056, i32 44
  %13278 = sext i32 %13277 to i64
  %13279 = getelementptr inbounds i16, i16* %7318, i64 %13278
  %13280 = load i16, i16* %13279, align 2, !tbaa !382
  %13281 = insertelement <64 x i16> %13276, i16 %13280, i32 44
  %13282 = extractelement <64 x i32> %13056, i32 45
  %13283 = sext i32 %13282 to i64
  %13284 = getelementptr inbounds i16, i16* %7318, i64 %13283
  %13285 = load i16, i16* %13284, align 2, !tbaa !382
  %13286 = insertelement <64 x i16> %13281, i16 %13285, i32 45
  %13287 = extractelement <64 x i32> %13056, i32 46
  %13288 = sext i32 %13287 to i64
  %13289 = getelementptr inbounds i16, i16* %7318, i64 %13288
  %13290 = load i16, i16* %13289, align 2, !tbaa !382
  %13291 = insertelement <64 x i16> %13286, i16 %13290, i32 46
  %13292 = extractelement <64 x i32> %13056, i32 47
  %13293 = sext i32 %13292 to i64
  %13294 = getelementptr inbounds i16, i16* %7318, i64 %13293
  %13295 = load i16, i16* %13294, align 2, !tbaa !382
  %13296 = insertelement <64 x i16> %13291, i16 %13295, i32 47
  %13297 = extractelement <64 x i32> %13056, i32 48
  %13298 = sext i32 %13297 to i64
  %13299 = getelementptr inbounds i16, i16* %7318, i64 %13298
  %13300 = load i16, i16* %13299, align 2, !tbaa !382
  %13301 = insertelement <64 x i16> %13296, i16 %13300, i32 48
  %13302 = extractelement <64 x i32> %13056, i32 49
  %13303 = sext i32 %13302 to i64
  %13304 = getelementptr inbounds i16, i16* %7318, i64 %13303
  %13305 = load i16, i16* %13304, align 2, !tbaa !382
  %13306 = insertelement <64 x i16> %13301, i16 %13305, i32 49
  %13307 = extractelement <64 x i32> %13056, i32 50
  %13308 = sext i32 %13307 to i64
  %13309 = getelementptr inbounds i16, i16* %7318, i64 %13308
  %13310 = load i16, i16* %13309, align 2, !tbaa !382
  %13311 = insertelement <64 x i16> %13306, i16 %13310, i32 50
  %13312 = extractelement <64 x i32> %13056, i32 51
  %13313 = sext i32 %13312 to i64
  %13314 = getelementptr inbounds i16, i16* %7318, i64 %13313
  %13315 = load i16, i16* %13314, align 2, !tbaa !382
  %13316 = insertelement <64 x i16> %13311, i16 %13315, i32 51
  %13317 = extractelement <64 x i32> %13056, i32 52
  %13318 = sext i32 %13317 to i64
  %13319 = getelementptr inbounds i16, i16* %7318, i64 %13318
  %13320 = load i16, i16* %13319, align 2, !tbaa !382
  %13321 = insertelement <64 x i16> %13316, i16 %13320, i32 52
  %13322 = extractelement <64 x i32> %13056, i32 53
  %13323 = sext i32 %13322 to i64
  %13324 = getelementptr inbounds i16, i16* %7318, i64 %13323
  %13325 = load i16, i16* %13324, align 2, !tbaa !382
  %13326 = insertelement <64 x i16> %13321, i16 %13325, i32 53
  %13327 = extractelement <64 x i32> %13056, i32 54
  %13328 = sext i32 %13327 to i64
  %13329 = getelementptr inbounds i16, i16* %7318, i64 %13328
  %13330 = load i16, i16* %13329, align 2, !tbaa !382
  %13331 = insertelement <64 x i16> %13326, i16 %13330, i32 54
  %13332 = extractelement <64 x i32> %13056, i32 55
  %13333 = sext i32 %13332 to i64
  %13334 = getelementptr inbounds i16, i16* %7318, i64 %13333
  %13335 = load i16, i16* %13334, align 2, !tbaa !382
  %13336 = insertelement <64 x i16> %13331, i16 %13335, i32 55
  %13337 = extractelement <64 x i32> %13056, i32 56
  %13338 = sext i32 %13337 to i64
  %13339 = getelementptr inbounds i16, i16* %7318, i64 %13338
  %13340 = load i16, i16* %13339, align 2, !tbaa !382
  %13341 = insertelement <64 x i16> %13336, i16 %13340, i32 56
  %13342 = extractelement <64 x i32> %13056, i32 57
  %13343 = sext i32 %13342 to i64
  %13344 = getelementptr inbounds i16, i16* %7318, i64 %13343
  %13345 = load i16, i16* %13344, align 2, !tbaa !382
  %13346 = insertelement <64 x i16> %13341, i16 %13345, i32 57
  %13347 = extractelement <64 x i32> %13056, i32 58
  %13348 = sext i32 %13347 to i64
  %13349 = getelementptr inbounds i16, i16* %7318, i64 %13348
  %13350 = load i16, i16* %13349, align 2, !tbaa !382
  %13351 = insertelement <64 x i16> %13346, i16 %13350, i32 58
  %13352 = extractelement <64 x i32> %13056, i32 59
  %13353 = sext i32 %13352 to i64
  %13354 = getelementptr inbounds i16, i16* %7318, i64 %13353
  %13355 = load i16, i16* %13354, align 2, !tbaa !382
  %13356 = insertelement <64 x i16> %13351, i16 %13355, i32 59
  %13357 = extractelement <64 x i32> %13056, i32 60
  %13358 = sext i32 %13357 to i64
  %13359 = getelementptr inbounds i16, i16* %7318, i64 %13358
  %13360 = load i16, i16* %13359, align 2, !tbaa !382
  %13361 = insertelement <64 x i16> %13356, i16 %13360, i32 60
  %13362 = extractelement <64 x i32> %13056, i32 61
  %13363 = sext i32 %13362 to i64
  %13364 = getelementptr inbounds i16, i16* %7318, i64 %13363
  %13365 = load i16, i16* %13364, align 2, !tbaa !382
  %13366 = insertelement <64 x i16> %13361, i16 %13365, i32 61
  %13367 = extractelement <64 x i32> %13056, i32 62
  %13368 = sext i32 %13367 to i64
  %13369 = getelementptr inbounds i16, i16* %7318, i64 %13368
  %13370 = load i16, i16* %13369, align 2, !tbaa !382
  %13371 = insertelement <64 x i16> %13366, i16 %13370, i32 62
  %13372 = extractelement <64 x i32> %13056, i32 63
  %13373 = sext i32 %13372 to i64
  %13374 = getelementptr inbounds i16, i16* %7318, i64 %13373
  %13375 = load i16, i16* %13374, align 2, !tbaa !382
  %13376 = insertelement <64 x i16> %13371, i16 %13375, i32 63
  %13377 = add nsw i32 %blur_x.s0.x.v1.base.s112, -60
  %13378 = insertelement <64 x i32> undef, i32 %13377, i32 0
  %13379 = shufflevector <64 x i32> %13378, <64 x i32> undef, <64 x i32> zeroinitializer
  %13380 = add nsw <64 x i32> %13379, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %13381 = shufflevector <64 x i32> %13380, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %13382 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13381, <4 x i32> %7315)
  %13383 = shufflevector <64 x i32> %13380, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %13384 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13383, <4 x i32> %7315)
  %13385 = shufflevector <64 x i32> %13380, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %13386 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13385, <4 x i32> %7315)
  %13387 = shufflevector <64 x i32> %13380, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13388 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13387, <4 x i32> %7315)
  %13389 = shufflevector <64 x i32> %13380, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %13390 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13389, <4 x i32> %7315)
  %13391 = shufflevector <64 x i32> %13380, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %13392 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13391, <4 x i32> %7315)
  %13393 = shufflevector <64 x i32> %13380, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %13394 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13393, <4 x i32> %7315)
  %13395 = shufflevector <64 x i32> %13380, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %13396 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13395, <4 x i32> %7315)
  %13397 = shufflevector <64 x i32> %13380, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %13398 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13397, <4 x i32> %7315)
  %13399 = shufflevector <64 x i32> %13380, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %13400 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13399, <4 x i32> %7315)
  %13401 = shufflevector <64 x i32> %13380, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %13402 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13401, <4 x i32> %7315)
  %13403 = shufflevector <64 x i32> %13380, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %13404 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13403, <4 x i32> %7315)
  %13405 = shufflevector <64 x i32> %13380, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %13406 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13405, <4 x i32> %7315)
  %13407 = shufflevector <64 x i32> %13380, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %13408 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13407, <4 x i32> %7315)
  %13409 = shufflevector <64 x i32> %13380, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %13410 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13409, <4 x i32> %7315)
  %13411 = shufflevector <64 x i32> %13380, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %13412 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13411, <4 x i32> %7315)
  %13413 = shufflevector <4 x i32> %13412, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %13414 = shufflevector <8 x i32> %13413, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %13415 = shufflevector <16 x i32> %13414, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %13416 = shufflevector <32 x i32> %13415, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %13417 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13382, <4 x i32> %7317)
  %13418 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13384, <4 x i32> %7317)
  %13419 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13386, <4 x i32> %7317)
  %13420 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13388, <4 x i32> %7317)
  %13421 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13390, <4 x i32> %7317)
  %13422 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13392, <4 x i32> %7317)
  %13423 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13394, <4 x i32> %7317)
  %13424 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13396, <4 x i32> %7317)
  %13425 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13398, <4 x i32> %7317)
  %13426 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13400, <4 x i32> %7317)
  %13427 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13402, <4 x i32> %7317)
  %13428 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13404, <4 x i32> %7317)
  %13429 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13406, <4 x i32> %7317)
  %13430 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13408, <4 x i32> %7317)
  %13431 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13410, <4 x i32> %7317)
  %13432 = shufflevector <64 x i32> %13416, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %13433 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13432, <4 x i32> %7317)
  %13434 = shufflevector <4 x i32> %13417, <4 x i32> %13418, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13435 = shufflevector <4 x i32> %13419, <4 x i32> %13420, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13436 = shufflevector <4 x i32> %13421, <4 x i32> %13422, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13437 = shufflevector <4 x i32> %13423, <4 x i32> %13424, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13438 = shufflevector <4 x i32> %13425, <4 x i32> %13426, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13439 = shufflevector <4 x i32> %13427, <4 x i32> %13428, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13440 = shufflevector <4 x i32> %13429, <4 x i32> %13430, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13441 = shufflevector <4 x i32> %13431, <4 x i32> %13433, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13442 = shufflevector <8 x i32> %13434, <8 x i32> %13435, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13443 = shufflevector <8 x i32> %13436, <8 x i32> %13437, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13444 = shufflevector <8 x i32> %13438, <8 x i32> %13439, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13445 = shufflevector <8 x i32> %13440, <8 x i32> %13441, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13446 = shufflevector <16 x i32> %13442, <16 x i32> %13443, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13447 = shufflevector <16 x i32> %13444, <16 x i32> %13445, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13448 = shufflevector <32 x i32> %13446, <32 x i32> %13447, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %13449 = add nsw <64 x i32> %13448, %t207113
  %13450 = extractelement <64 x i32> %13449, i32 0
  %13451 = sext i32 %13450 to i64
  %13452 = getelementptr inbounds i16, i16* %7318, i64 %13451
  %13453 = load i16, i16* %13452, align 2, !tbaa !382
  %13454 = insertelement <64 x i16> undef, i16 %13453, i32 0
  %13455 = extractelement <64 x i32> %13449, i32 1
  %13456 = sext i32 %13455 to i64
  %13457 = getelementptr inbounds i16, i16* %7318, i64 %13456
  %13458 = load i16, i16* %13457, align 2, !tbaa !382
  %13459 = insertelement <64 x i16> %13454, i16 %13458, i32 1
  %13460 = extractelement <64 x i32> %13449, i32 2
  %13461 = sext i32 %13460 to i64
  %13462 = getelementptr inbounds i16, i16* %7318, i64 %13461
  %13463 = load i16, i16* %13462, align 2, !tbaa !382
  %13464 = insertelement <64 x i16> %13459, i16 %13463, i32 2
  %13465 = extractelement <64 x i32> %13449, i32 3
  %13466 = sext i32 %13465 to i64
  %13467 = getelementptr inbounds i16, i16* %7318, i64 %13466
  %13468 = load i16, i16* %13467, align 2, !tbaa !382
  %13469 = insertelement <64 x i16> %13464, i16 %13468, i32 3
  %13470 = extractelement <64 x i32> %13449, i32 4
  %13471 = sext i32 %13470 to i64
  %13472 = getelementptr inbounds i16, i16* %7318, i64 %13471
  %13473 = load i16, i16* %13472, align 2, !tbaa !382
  %13474 = insertelement <64 x i16> %13469, i16 %13473, i32 4
  %13475 = extractelement <64 x i32> %13449, i32 5
  %13476 = sext i32 %13475 to i64
  %13477 = getelementptr inbounds i16, i16* %7318, i64 %13476
  %13478 = load i16, i16* %13477, align 2, !tbaa !382
  %13479 = insertelement <64 x i16> %13474, i16 %13478, i32 5
  %13480 = extractelement <64 x i32> %13449, i32 6
  %13481 = sext i32 %13480 to i64
  %13482 = getelementptr inbounds i16, i16* %7318, i64 %13481
  %13483 = load i16, i16* %13482, align 2, !tbaa !382
  %13484 = insertelement <64 x i16> %13479, i16 %13483, i32 6
  %13485 = extractelement <64 x i32> %13449, i32 7
  %13486 = sext i32 %13485 to i64
  %13487 = getelementptr inbounds i16, i16* %7318, i64 %13486
  %13488 = load i16, i16* %13487, align 2, !tbaa !382
  %13489 = insertelement <64 x i16> %13484, i16 %13488, i32 7
  %13490 = extractelement <64 x i32> %13449, i32 8
  %13491 = sext i32 %13490 to i64
  %13492 = getelementptr inbounds i16, i16* %7318, i64 %13491
  %13493 = load i16, i16* %13492, align 2, !tbaa !382
  %13494 = insertelement <64 x i16> %13489, i16 %13493, i32 8
  %13495 = extractelement <64 x i32> %13449, i32 9
  %13496 = sext i32 %13495 to i64
  %13497 = getelementptr inbounds i16, i16* %7318, i64 %13496
  %13498 = load i16, i16* %13497, align 2, !tbaa !382
  %13499 = insertelement <64 x i16> %13494, i16 %13498, i32 9
  %13500 = extractelement <64 x i32> %13449, i32 10
  %13501 = sext i32 %13500 to i64
  %13502 = getelementptr inbounds i16, i16* %7318, i64 %13501
  %13503 = load i16, i16* %13502, align 2, !tbaa !382
  %13504 = insertelement <64 x i16> %13499, i16 %13503, i32 10
  %13505 = extractelement <64 x i32> %13449, i32 11
  %13506 = sext i32 %13505 to i64
  %13507 = getelementptr inbounds i16, i16* %7318, i64 %13506
  %13508 = load i16, i16* %13507, align 2, !tbaa !382
  %13509 = insertelement <64 x i16> %13504, i16 %13508, i32 11
  %13510 = extractelement <64 x i32> %13449, i32 12
  %13511 = sext i32 %13510 to i64
  %13512 = getelementptr inbounds i16, i16* %7318, i64 %13511
  %13513 = load i16, i16* %13512, align 2, !tbaa !382
  %13514 = insertelement <64 x i16> %13509, i16 %13513, i32 12
  %13515 = extractelement <64 x i32> %13449, i32 13
  %13516 = sext i32 %13515 to i64
  %13517 = getelementptr inbounds i16, i16* %7318, i64 %13516
  %13518 = load i16, i16* %13517, align 2, !tbaa !382
  %13519 = insertelement <64 x i16> %13514, i16 %13518, i32 13
  %13520 = extractelement <64 x i32> %13449, i32 14
  %13521 = sext i32 %13520 to i64
  %13522 = getelementptr inbounds i16, i16* %7318, i64 %13521
  %13523 = load i16, i16* %13522, align 2, !tbaa !382
  %13524 = insertelement <64 x i16> %13519, i16 %13523, i32 14
  %13525 = extractelement <64 x i32> %13449, i32 15
  %13526 = sext i32 %13525 to i64
  %13527 = getelementptr inbounds i16, i16* %7318, i64 %13526
  %13528 = load i16, i16* %13527, align 2, !tbaa !382
  %13529 = insertelement <64 x i16> %13524, i16 %13528, i32 15
  %13530 = extractelement <64 x i32> %13449, i32 16
  %13531 = sext i32 %13530 to i64
  %13532 = getelementptr inbounds i16, i16* %7318, i64 %13531
  %13533 = load i16, i16* %13532, align 2, !tbaa !382
  %13534 = insertelement <64 x i16> %13529, i16 %13533, i32 16
  %13535 = extractelement <64 x i32> %13449, i32 17
  %13536 = sext i32 %13535 to i64
  %13537 = getelementptr inbounds i16, i16* %7318, i64 %13536
  %13538 = load i16, i16* %13537, align 2, !tbaa !382
  %13539 = insertelement <64 x i16> %13534, i16 %13538, i32 17
  %13540 = extractelement <64 x i32> %13449, i32 18
  %13541 = sext i32 %13540 to i64
  %13542 = getelementptr inbounds i16, i16* %7318, i64 %13541
  %13543 = load i16, i16* %13542, align 2, !tbaa !382
  %13544 = insertelement <64 x i16> %13539, i16 %13543, i32 18
  %13545 = extractelement <64 x i32> %13449, i32 19
  %13546 = sext i32 %13545 to i64
  %13547 = getelementptr inbounds i16, i16* %7318, i64 %13546
  %13548 = load i16, i16* %13547, align 2, !tbaa !382
  %13549 = insertelement <64 x i16> %13544, i16 %13548, i32 19
  %13550 = extractelement <64 x i32> %13449, i32 20
  %13551 = sext i32 %13550 to i64
  %13552 = getelementptr inbounds i16, i16* %7318, i64 %13551
  %13553 = load i16, i16* %13552, align 2, !tbaa !382
  %13554 = insertelement <64 x i16> %13549, i16 %13553, i32 20
  %13555 = extractelement <64 x i32> %13449, i32 21
  %13556 = sext i32 %13555 to i64
  %13557 = getelementptr inbounds i16, i16* %7318, i64 %13556
  %13558 = load i16, i16* %13557, align 2, !tbaa !382
  %13559 = insertelement <64 x i16> %13554, i16 %13558, i32 21
  %13560 = extractelement <64 x i32> %13449, i32 22
  %13561 = sext i32 %13560 to i64
  %13562 = getelementptr inbounds i16, i16* %7318, i64 %13561
  %13563 = load i16, i16* %13562, align 2, !tbaa !382
  %13564 = insertelement <64 x i16> %13559, i16 %13563, i32 22
  %13565 = extractelement <64 x i32> %13449, i32 23
  %13566 = sext i32 %13565 to i64
  %13567 = getelementptr inbounds i16, i16* %7318, i64 %13566
  %13568 = load i16, i16* %13567, align 2, !tbaa !382
  %13569 = insertelement <64 x i16> %13564, i16 %13568, i32 23
  %13570 = extractelement <64 x i32> %13449, i32 24
  %13571 = sext i32 %13570 to i64
  %13572 = getelementptr inbounds i16, i16* %7318, i64 %13571
  %13573 = load i16, i16* %13572, align 2, !tbaa !382
  %13574 = insertelement <64 x i16> %13569, i16 %13573, i32 24
  %13575 = extractelement <64 x i32> %13449, i32 25
  %13576 = sext i32 %13575 to i64
  %13577 = getelementptr inbounds i16, i16* %7318, i64 %13576
  %13578 = load i16, i16* %13577, align 2, !tbaa !382
  %13579 = insertelement <64 x i16> %13574, i16 %13578, i32 25
  %13580 = extractelement <64 x i32> %13449, i32 26
  %13581 = sext i32 %13580 to i64
  %13582 = getelementptr inbounds i16, i16* %7318, i64 %13581
  %13583 = load i16, i16* %13582, align 2, !tbaa !382
  %13584 = insertelement <64 x i16> %13579, i16 %13583, i32 26
  %13585 = extractelement <64 x i32> %13449, i32 27
  %13586 = sext i32 %13585 to i64
  %13587 = getelementptr inbounds i16, i16* %7318, i64 %13586
  %13588 = load i16, i16* %13587, align 2, !tbaa !382
  %13589 = insertelement <64 x i16> %13584, i16 %13588, i32 27
  %13590 = extractelement <64 x i32> %13449, i32 28
  %13591 = sext i32 %13590 to i64
  %13592 = getelementptr inbounds i16, i16* %7318, i64 %13591
  %13593 = load i16, i16* %13592, align 2, !tbaa !382
  %13594 = insertelement <64 x i16> %13589, i16 %13593, i32 28
  %13595 = extractelement <64 x i32> %13449, i32 29
  %13596 = sext i32 %13595 to i64
  %13597 = getelementptr inbounds i16, i16* %7318, i64 %13596
  %13598 = load i16, i16* %13597, align 2, !tbaa !382
  %13599 = insertelement <64 x i16> %13594, i16 %13598, i32 29
  %13600 = extractelement <64 x i32> %13449, i32 30
  %13601 = sext i32 %13600 to i64
  %13602 = getelementptr inbounds i16, i16* %7318, i64 %13601
  %13603 = load i16, i16* %13602, align 2, !tbaa !382
  %13604 = insertelement <64 x i16> %13599, i16 %13603, i32 30
  %13605 = extractelement <64 x i32> %13449, i32 31
  %13606 = sext i32 %13605 to i64
  %13607 = getelementptr inbounds i16, i16* %7318, i64 %13606
  %13608 = load i16, i16* %13607, align 2, !tbaa !382
  %13609 = insertelement <64 x i16> %13604, i16 %13608, i32 31
  %13610 = extractelement <64 x i32> %13449, i32 32
  %13611 = sext i32 %13610 to i64
  %13612 = getelementptr inbounds i16, i16* %7318, i64 %13611
  %13613 = load i16, i16* %13612, align 2, !tbaa !382
  %13614 = insertelement <64 x i16> %13609, i16 %13613, i32 32
  %13615 = extractelement <64 x i32> %13449, i32 33
  %13616 = sext i32 %13615 to i64
  %13617 = getelementptr inbounds i16, i16* %7318, i64 %13616
  %13618 = load i16, i16* %13617, align 2, !tbaa !382
  %13619 = insertelement <64 x i16> %13614, i16 %13618, i32 33
  %13620 = extractelement <64 x i32> %13449, i32 34
  %13621 = sext i32 %13620 to i64
  %13622 = getelementptr inbounds i16, i16* %7318, i64 %13621
  %13623 = load i16, i16* %13622, align 2, !tbaa !382
  %13624 = insertelement <64 x i16> %13619, i16 %13623, i32 34
  %13625 = extractelement <64 x i32> %13449, i32 35
  %13626 = sext i32 %13625 to i64
  %13627 = getelementptr inbounds i16, i16* %7318, i64 %13626
  %13628 = load i16, i16* %13627, align 2, !tbaa !382
  %13629 = insertelement <64 x i16> %13624, i16 %13628, i32 35
  %13630 = extractelement <64 x i32> %13449, i32 36
  %13631 = sext i32 %13630 to i64
  %13632 = getelementptr inbounds i16, i16* %7318, i64 %13631
  %13633 = load i16, i16* %13632, align 2, !tbaa !382
  %13634 = insertelement <64 x i16> %13629, i16 %13633, i32 36
  %13635 = extractelement <64 x i32> %13449, i32 37
  %13636 = sext i32 %13635 to i64
  %13637 = getelementptr inbounds i16, i16* %7318, i64 %13636
  %13638 = load i16, i16* %13637, align 2, !tbaa !382
  %13639 = insertelement <64 x i16> %13634, i16 %13638, i32 37
  %13640 = extractelement <64 x i32> %13449, i32 38
  %13641 = sext i32 %13640 to i64
  %13642 = getelementptr inbounds i16, i16* %7318, i64 %13641
  %13643 = load i16, i16* %13642, align 2, !tbaa !382
  %13644 = insertelement <64 x i16> %13639, i16 %13643, i32 38
  %13645 = extractelement <64 x i32> %13449, i32 39
  %13646 = sext i32 %13645 to i64
  %13647 = getelementptr inbounds i16, i16* %7318, i64 %13646
  %13648 = load i16, i16* %13647, align 2, !tbaa !382
  %13649 = insertelement <64 x i16> %13644, i16 %13648, i32 39
  %13650 = extractelement <64 x i32> %13449, i32 40
  %13651 = sext i32 %13650 to i64
  %13652 = getelementptr inbounds i16, i16* %7318, i64 %13651
  %13653 = load i16, i16* %13652, align 2, !tbaa !382
  %13654 = insertelement <64 x i16> %13649, i16 %13653, i32 40
  %13655 = extractelement <64 x i32> %13449, i32 41
  %13656 = sext i32 %13655 to i64
  %13657 = getelementptr inbounds i16, i16* %7318, i64 %13656
  %13658 = load i16, i16* %13657, align 2, !tbaa !382
  %13659 = insertelement <64 x i16> %13654, i16 %13658, i32 41
  %13660 = extractelement <64 x i32> %13449, i32 42
  %13661 = sext i32 %13660 to i64
  %13662 = getelementptr inbounds i16, i16* %7318, i64 %13661
  %13663 = load i16, i16* %13662, align 2, !tbaa !382
  %13664 = insertelement <64 x i16> %13659, i16 %13663, i32 42
  %13665 = extractelement <64 x i32> %13449, i32 43
  %13666 = sext i32 %13665 to i64
  %13667 = getelementptr inbounds i16, i16* %7318, i64 %13666
  %13668 = load i16, i16* %13667, align 2, !tbaa !382
  %13669 = insertelement <64 x i16> %13664, i16 %13668, i32 43
  %13670 = extractelement <64 x i32> %13449, i32 44
  %13671 = sext i32 %13670 to i64
  %13672 = getelementptr inbounds i16, i16* %7318, i64 %13671
  %13673 = load i16, i16* %13672, align 2, !tbaa !382
  %13674 = insertelement <64 x i16> %13669, i16 %13673, i32 44
  %13675 = extractelement <64 x i32> %13449, i32 45
  %13676 = sext i32 %13675 to i64
  %13677 = getelementptr inbounds i16, i16* %7318, i64 %13676
  %13678 = load i16, i16* %13677, align 2, !tbaa !382
  %13679 = insertelement <64 x i16> %13674, i16 %13678, i32 45
  %13680 = extractelement <64 x i32> %13449, i32 46
  %13681 = sext i32 %13680 to i64
  %13682 = getelementptr inbounds i16, i16* %7318, i64 %13681
  %13683 = load i16, i16* %13682, align 2, !tbaa !382
  %13684 = insertelement <64 x i16> %13679, i16 %13683, i32 46
  %13685 = extractelement <64 x i32> %13449, i32 47
  %13686 = sext i32 %13685 to i64
  %13687 = getelementptr inbounds i16, i16* %7318, i64 %13686
  %13688 = load i16, i16* %13687, align 2, !tbaa !382
  %13689 = insertelement <64 x i16> %13684, i16 %13688, i32 47
  %13690 = extractelement <64 x i32> %13449, i32 48
  %13691 = sext i32 %13690 to i64
  %13692 = getelementptr inbounds i16, i16* %7318, i64 %13691
  %13693 = load i16, i16* %13692, align 2, !tbaa !382
  %13694 = insertelement <64 x i16> %13689, i16 %13693, i32 48
  %13695 = extractelement <64 x i32> %13449, i32 49
  %13696 = sext i32 %13695 to i64
  %13697 = getelementptr inbounds i16, i16* %7318, i64 %13696
  %13698 = load i16, i16* %13697, align 2, !tbaa !382
  %13699 = insertelement <64 x i16> %13694, i16 %13698, i32 49
  %13700 = extractelement <64 x i32> %13449, i32 50
  %13701 = sext i32 %13700 to i64
  %13702 = getelementptr inbounds i16, i16* %7318, i64 %13701
  %13703 = load i16, i16* %13702, align 2, !tbaa !382
  %13704 = insertelement <64 x i16> %13699, i16 %13703, i32 50
  %13705 = extractelement <64 x i32> %13449, i32 51
  %13706 = sext i32 %13705 to i64
  %13707 = getelementptr inbounds i16, i16* %7318, i64 %13706
  %13708 = load i16, i16* %13707, align 2, !tbaa !382
  %13709 = insertelement <64 x i16> %13704, i16 %13708, i32 51
  %13710 = extractelement <64 x i32> %13449, i32 52
  %13711 = sext i32 %13710 to i64
  %13712 = getelementptr inbounds i16, i16* %7318, i64 %13711
  %13713 = load i16, i16* %13712, align 2, !tbaa !382
  %13714 = insertelement <64 x i16> %13709, i16 %13713, i32 52
  %13715 = extractelement <64 x i32> %13449, i32 53
  %13716 = sext i32 %13715 to i64
  %13717 = getelementptr inbounds i16, i16* %7318, i64 %13716
  %13718 = load i16, i16* %13717, align 2, !tbaa !382
  %13719 = insertelement <64 x i16> %13714, i16 %13718, i32 53
  %13720 = extractelement <64 x i32> %13449, i32 54
  %13721 = sext i32 %13720 to i64
  %13722 = getelementptr inbounds i16, i16* %7318, i64 %13721
  %13723 = load i16, i16* %13722, align 2, !tbaa !382
  %13724 = insertelement <64 x i16> %13719, i16 %13723, i32 54
  %13725 = extractelement <64 x i32> %13449, i32 55
  %13726 = sext i32 %13725 to i64
  %13727 = getelementptr inbounds i16, i16* %7318, i64 %13726
  %13728 = load i16, i16* %13727, align 2, !tbaa !382
  %13729 = insertelement <64 x i16> %13724, i16 %13728, i32 55
  %13730 = extractelement <64 x i32> %13449, i32 56
  %13731 = sext i32 %13730 to i64
  %13732 = getelementptr inbounds i16, i16* %7318, i64 %13731
  %13733 = load i16, i16* %13732, align 2, !tbaa !382
  %13734 = insertelement <64 x i16> %13729, i16 %13733, i32 56
  %13735 = extractelement <64 x i32> %13449, i32 57
  %13736 = sext i32 %13735 to i64
  %13737 = getelementptr inbounds i16, i16* %7318, i64 %13736
  %13738 = load i16, i16* %13737, align 2, !tbaa !382
  %13739 = insertelement <64 x i16> %13734, i16 %13738, i32 57
  %13740 = extractelement <64 x i32> %13449, i32 58
  %13741 = sext i32 %13740 to i64
  %13742 = getelementptr inbounds i16, i16* %7318, i64 %13741
  %13743 = load i16, i16* %13742, align 2, !tbaa !382
  %13744 = insertelement <64 x i16> %13739, i16 %13743, i32 58
  %13745 = extractelement <64 x i32> %13449, i32 59
  %13746 = sext i32 %13745 to i64
  %13747 = getelementptr inbounds i16, i16* %7318, i64 %13746
  %13748 = load i16, i16* %13747, align 2, !tbaa !382
  %13749 = insertelement <64 x i16> %13744, i16 %13748, i32 59
  %13750 = extractelement <64 x i32> %13449, i32 60
  %13751 = sext i32 %13750 to i64
  %13752 = getelementptr inbounds i16, i16* %7318, i64 %13751
  %13753 = load i16, i16* %13752, align 2, !tbaa !382
  %13754 = insertelement <64 x i16> %13749, i16 %13753, i32 60
  %13755 = extractelement <64 x i32> %13449, i32 61
  %13756 = sext i32 %13755 to i64
  %13757 = getelementptr inbounds i16, i16* %7318, i64 %13756
  %13758 = load i16, i16* %13757, align 2, !tbaa !382
  %13759 = insertelement <64 x i16> %13754, i16 %13758, i32 61
  %13760 = extractelement <64 x i32> %13449, i32 62
  %13761 = sext i32 %13760 to i64
  %13762 = getelementptr inbounds i16, i16* %7318, i64 %13761
  %13763 = load i16, i16* %13762, align 2, !tbaa !382
  %13764 = insertelement <64 x i16> %13759, i16 %13763, i32 62
  %13765 = extractelement <64 x i32> %13449, i32 63
  %13766 = sext i32 %13765 to i64
  %13767 = getelementptr inbounds i16, i16* %7318, i64 %13766
  %13768 = load i16, i16* %13767, align 2, !tbaa !382
  %13769 = insertelement <64 x i16> %13764, i16 %13768, i32 63
  %13770 = add nsw i32 %blur_x.s0.x.v1.base.s112, -61
  %13771 = insertelement <64 x i32> undef, i32 %13770, i32 0
  %13772 = shufflevector <64 x i32> %13771, <64 x i32> undef, <64 x i32> zeroinitializer
  %13773 = add nsw <64 x i32> %13772, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %13774 = shufflevector <64 x i32> %13773, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %13775 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13774, <4 x i32> %7315)
  %13776 = shufflevector <64 x i32> %13773, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %13777 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13776, <4 x i32> %7315)
  %13778 = shufflevector <64 x i32> %13773, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %13779 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13778, <4 x i32> %7315)
  %13780 = shufflevector <64 x i32> %13773, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13781 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13780, <4 x i32> %7315)
  %13782 = shufflevector <64 x i32> %13773, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %13783 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13782, <4 x i32> %7315)
  %13784 = shufflevector <64 x i32> %13773, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %13785 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13784, <4 x i32> %7315)
  %13786 = shufflevector <64 x i32> %13773, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %13787 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13786, <4 x i32> %7315)
  %13788 = shufflevector <64 x i32> %13773, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %13789 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13788, <4 x i32> %7315)
  %13790 = shufflevector <64 x i32> %13773, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %13791 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13790, <4 x i32> %7315)
  %13792 = shufflevector <64 x i32> %13773, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %13793 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13792, <4 x i32> %7315)
  %13794 = shufflevector <64 x i32> %13773, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %13795 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13794, <4 x i32> %7315)
  %13796 = shufflevector <64 x i32> %13773, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %13797 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13796, <4 x i32> %7315)
  %13798 = shufflevector <64 x i32> %13773, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %13799 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13798, <4 x i32> %7315)
  %13800 = shufflevector <64 x i32> %13773, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %13801 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13800, <4 x i32> %7315)
  %13802 = shufflevector <64 x i32> %13773, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %13803 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13802, <4 x i32> %7315)
  %13804 = shufflevector <64 x i32> %13773, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %13805 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13804, <4 x i32> %7315)
  %13806 = shufflevector <4 x i32> %13805, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %13807 = shufflevector <8 x i32> %13806, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %13808 = shufflevector <16 x i32> %13807, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %13809 = shufflevector <32 x i32> %13808, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %13810 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13775, <4 x i32> %7317)
  %13811 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13777, <4 x i32> %7317)
  %13812 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13779, <4 x i32> %7317)
  %13813 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13781, <4 x i32> %7317)
  %13814 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13783, <4 x i32> %7317)
  %13815 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13785, <4 x i32> %7317)
  %13816 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13787, <4 x i32> %7317)
  %13817 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13789, <4 x i32> %7317)
  %13818 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13791, <4 x i32> %7317)
  %13819 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13793, <4 x i32> %7317)
  %13820 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13795, <4 x i32> %7317)
  %13821 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13797, <4 x i32> %7317)
  %13822 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13799, <4 x i32> %7317)
  %13823 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13801, <4 x i32> %7317)
  %13824 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13803, <4 x i32> %7317)
  %13825 = shufflevector <64 x i32> %13809, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %13826 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13825, <4 x i32> %7317)
  %13827 = shufflevector <4 x i32> %13810, <4 x i32> %13811, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13828 = shufflevector <4 x i32> %13812, <4 x i32> %13813, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13829 = shufflevector <4 x i32> %13814, <4 x i32> %13815, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13830 = shufflevector <4 x i32> %13816, <4 x i32> %13817, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13831 = shufflevector <4 x i32> %13818, <4 x i32> %13819, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13832 = shufflevector <4 x i32> %13820, <4 x i32> %13821, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13833 = shufflevector <4 x i32> %13822, <4 x i32> %13823, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13834 = shufflevector <4 x i32> %13824, <4 x i32> %13826, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13835 = shufflevector <8 x i32> %13827, <8 x i32> %13828, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13836 = shufflevector <8 x i32> %13829, <8 x i32> %13830, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13837 = shufflevector <8 x i32> %13831, <8 x i32> %13832, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13838 = shufflevector <8 x i32> %13833, <8 x i32> %13834, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13839 = shufflevector <16 x i32> %13835, <16 x i32> %13836, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13840 = shufflevector <16 x i32> %13837, <16 x i32> %13838, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13841 = shufflevector <32 x i32> %13839, <32 x i32> %13840, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %13842 = add nsw <64 x i32> %13841, %t207113
  %13843 = extractelement <64 x i32> %13842, i32 0
  %13844 = sext i32 %13843 to i64
  %13845 = getelementptr inbounds i16, i16* %7318, i64 %13844
  %13846 = load i16, i16* %13845, align 2, !tbaa !382
  %13847 = insertelement <64 x i16> undef, i16 %13846, i32 0
  %13848 = extractelement <64 x i32> %13842, i32 1
  %13849 = sext i32 %13848 to i64
  %13850 = getelementptr inbounds i16, i16* %7318, i64 %13849
  %13851 = load i16, i16* %13850, align 2, !tbaa !382
  %13852 = insertelement <64 x i16> %13847, i16 %13851, i32 1
  %13853 = extractelement <64 x i32> %13842, i32 2
  %13854 = sext i32 %13853 to i64
  %13855 = getelementptr inbounds i16, i16* %7318, i64 %13854
  %13856 = load i16, i16* %13855, align 2, !tbaa !382
  %13857 = insertelement <64 x i16> %13852, i16 %13856, i32 2
  %13858 = extractelement <64 x i32> %13842, i32 3
  %13859 = sext i32 %13858 to i64
  %13860 = getelementptr inbounds i16, i16* %7318, i64 %13859
  %13861 = load i16, i16* %13860, align 2, !tbaa !382
  %13862 = insertelement <64 x i16> %13857, i16 %13861, i32 3
  %13863 = extractelement <64 x i32> %13842, i32 4
  %13864 = sext i32 %13863 to i64
  %13865 = getelementptr inbounds i16, i16* %7318, i64 %13864
  %13866 = load i16, i16* %13865, align 2, !tbaa !382
  %13867 = insertelement <64 x i16> %13862, i16 %13866, i32 4
  %13868 = extractelement <64 x i32> %13842, i32 5
  %13869 = sext i32 %13868 to i64
  %13870 = getelementptr inbounds i16, i16* %7318, i64 %13869
  %13871 = load i16, i16* %13870, align 2, !tbaa !382
  %13872 = insertelement <64 x i16> %13867, i16 %13871, i32 5
  %13873 = extractelement <64 x i32> %13842, i32 6
  %13874 = sext i32 %13873 to i64
  %13875 = getelementptr inbounds i16, i16* %7318, i64 %13874
  %13876 = load i16, i16* %13875, align 2, !tbaa !382
  %13877 = insertelement <64 x i16> %13872, i16 %13876, i32 6
  %13878 = extractelement <64 x i32> %13842, i32 7
  %13879 = sext i32 %13878 to i64
  %13880 = getelementptr inbounds i16, i16* %7318, i64 %13879
  %13881 = load i16, i16* %13880, align 2, !tbaa !382
  %13882 = insertelement <64 x i16> %13877, i16 %13881, i32 7
  %13883 = extractelement <64 x i32> %13842, i32 8
  %13884 = sext i32 %13883 to i64
  %13885 = getelementptr inbounds i16, i16* %7318, i64 %13884
  %13886 = load i16, i16* %13885, align 2, !tbaa !382
  %13887 = insertelement <64 x i16> %13882, i16 %13886, i32 8
  %13888 = extractelement <64 x i32> %13842, i32 9
  %13889 = sext i32 %13888 to i64
  %13890 = getelementptr inbounds i16, i16* %7318, i64 %13889
  %13891 = load i16, i16* %13890, align 2, !tbaa !382
  %13892 = insertelement <64 x i16> %13887, i16 %13891, i32 9
  %13893 = extractelement <64 x i32> %13842, i32 10
  %13894 = sext i32 %13893 to i64
  %13895 = getelementptr inbounds i16, i16* %7318, i64 %13894
  %13896 = load i16, i16* %13895, align 2, !tbaa !382
  %13897 = insertelement <64 x i16> %13892, i16 %13896, i32 10
  %13898 = extractelement <64 x i32> %13842, i32 11
  %13899 = sext i32 %13898 to i64
  %13900 = getelementptr inbounds i16, i16* %7318, i64 %13899
  %13901 = load i16, i16* %13900, align 2, !tbaa !382
  %13902 = insertelement <64 x i16> %13897, i16 %13901, i32 11
  %13903 = extractelement <64 x i32> %13842, i32 12
  %13904 = sext i32 %13903 to i64
  %13905 = getelementptr inbounds i16, i16* %7318, i64 %13904
  %13906 = load i16, i16* %13905, align 2, !tbaa !382
  %13907 = insertelement <64 x i16> %13902, i16 %13906, i32 12
  %13908 = extractelement <64 x i32> %13842, i32 13
  %13909 = sext i32 %13908 to i64
  %13910 = getelementptr inbounds i16, i16* %7318, i64 %13909
  %13911 = load i16, i16* %13910, align 2, !tbaa !382
  %13912 = insertelement <64 x i16> %13907, i16 %13911, i32 13
  %13913 = extractelement <64 x i32> %13842, i32 14
  %13914 = sext i32 %13913 to i64
  %13915 = getelementptr inbounds i16, i16* %7318, i64 %13914
  %13916 = load i16, i16* %13915, align 2, !tbaa !382
  %13917 = insertelement <64 x i16> %13912, i16 %13916, i32 14
  %13918 = extractelement <64 x i32> %13842, i32 15
  %13919 = sext i32 %13918 to i64
  %13920 = getelementptr inbounds i16, i16* %7318, i64 %13919
  %13921 = load i16, i16* %13920, align 2, !tbaa !382
  %13922 = insertelement <64 x i16> %13917, i16 %13921, i32 15
  %13923 = extractelement <64 x i32> %13842, i32 16
  %13924 = sext i32 %13923 to i64
  %13925 = getelementptr inbounds i16, i16* %7318, i64 %13924
  %13926 = load i16, i16* %13925, align 2, !tbaa !382
  %13927 = insertelement <64 x i16> %13922, i16 %13926, i32 16
  %13928 = extractelement <64 x i32> %13842, i32 17
  %13929 = sext i32 %13928 to i64
  %13930 = getelementptr inbounds i16, i16* %7318, i64 %13929
  %13931 = load i16, i16* %13930, align 2, !tbaa !382
  %13932 = insertelement <64 x i16> %13927, i16 %13931, i32 17
  %13933 = extractelement <64 x i32> %13842, i32 18
  %13934 = sext i32 %13933 to i64
  %13935 = getelementptr inbounds i16, i16* %7318, i64 %13934
  %13936 = load i16, i16* %13935, align 2, !tbaa !382
  %13937 = insertelement <64 x i16> %13932, i16 %13936, i32 18
  %13938 = extractelement <64 x i32> %13842, i32 19
  %13939 = sext i32 %13938 to i64
  %13940 = getelementptr inbounds i16, i16* %7318, i64 %13939
  %13941 = load i16, i16* %13940, align 2, !tbaa !382
  %13942 = insertelement <64 x i16> %13937, i16 %13941, i32 19
  %13943 = extractelement <64 x i32> %13842, i32 20
  %13944 = sext i32 %13943 to i64
  %13945 = getelementptr inbounds i16, i16* %7318, i64 %13944
  %13946 = load i16, i16* %13945, align 2, !tbaa !382
  %13947 = insertelement <64 x i16> %13942, i16 %13946, i32 20
  %13948 = extractelement <64 x i32> %13842, i32 21
  %13949 = sext i32 %13948 to i64
  %13950 = getelementptr inbounds i16, i16* %7318, i64 %13949
  %13951 = load i16, i16* %13950, align 2, !tbaa !382
  %13952 = insertelement <64 x i16> %13947, i16 %13951, i32 21
  %13953 = extractelement <64 x i32> %13842, i32 22
  %13954 = sext i32 %13953 to i64
  %13955 = getelementptr inbounds i16, i16* %7318, i64 %13954
  %13956 = load i16, i16* %13955, align 2, !tbaa !382
  %13957 = insertelement <64 x i16> %13952, i16 %13956, i32 22
  %13958 = extractelement <64 x i32> %13842, i32 23
  %13959 = sext i32 %13958 to i64
  %13960 = getelementptr inbounds i16, i16* %7318, i64 %13959
  %13961 = load i16, i16* %13960, align 2, !tbaa !382
  %13962 = insertelement <64 x i16> %13957, i16 %13961, i32 23
  %13963 = extractelement <64 x i32> %13842, i32 24
  %13964 = sext i32 %13963 to i64
  %13965 = getelementptr inbounds i16, i16* %7318, i64 %13964
  %13966 = load i16, i16* %13965, align 2, !tbaa !382
  %13967 = insertelement <64 x i16> %13962, i16 %13966, i32 24
  %13968 = extractelement <64 x i32> %13842, i32 25
  %13969 = sext i32 %13968 to i64
  %13970 = getelementptr inbounds i16, i16* %7318, i64 %13969
  %13971 = load i16, i16* %13970, align 2, !tbaa !382
  %13972 = insertelement <64 x i16> %13967, i16 %13971, i32 25
  %13973 = extractelement <64 x i32> %13842, i32 26
  %13974 = sext i32 %13973 to i64
  %13975 = getelementptr inbounds i16, i16* %7318, i64 %13974
  %13976 = load i16, i16* %13975, align 2, !tbaa !382
  %13977 = insertelement <64 x i16> %13972, i16 %13976, i32 26
  %13978 = extractelement <64 x i32> %13842, i32 27
  %13979 = sext i32 %13978 to i64
  %13980 = getelementptr inbounds i16, i16* %7318, i64 %13979
  %13981 = load i16, i16* %13980, align 2, !tbaa !382
  %13982 = insertelement <64 x i16> %13977, i16 %13981, i32 27
  %13983 = extractelement <64 x i32> %13842, i32 28
  %13984 = sext i32 %13983 to i64
  %13985 = getelementptr inbounds i16, i16* %7318, i64 %13984
  %13986 = load i16, i16* %13985, align 2, !tbaa !382
  %13987 = insertelement <64 x i16> %13982, i16 %13986, i32 28
  %13988 = extractelement <64 x i32> %13842, i32 29
  %13989 = sext i32 %13988 to i64
  %13990 = getelementptr inbounds i16, i16* %7318, i64 %13989
  %13991 = load i16, i16* %13990, align 2, !tbaa !382
  %13992 = insertelement <64 x i16> %13987, i16 %13991, i32 29
  %13993 = extractelement <64 x i32> %13842, i32 30
  %13994 = sext i32 %13993 to i64
  %13995 = getelementptr inbounds i16, i16* %7318, i64 %13994
  %13996 = load i16, i16* %13995, align 2, !tbaa !382
  %13997 = insertelement <64 x i16> %13992, i16 %13996, i32 30
  %13998 = extractelement <64 x i32> %13842, i32 31
  %13999 = sext i32 %13998 to i64
  %14000 = getelementptr inbounds i16, i16* %7318, i64 %13999
  %14001 = load i16, i16* %14000, align 2, !tbaa !382
  %14002 = insertelement <64 x i16> %13997, i16 %14001, i32 31
  %14003 = extractelement <64 x i32> %13842, i32 32
  %14004 = sext i32 %14003 to i64
  %14005 = getelementptr inbounds i16, i16* %7318, i64 %14004
  %14006 = load i16, i16* %14005, align 2, !tbaa !382
  %14007 = insertelement <64 x i16> %14002, i16 %14006, i32 32
  %14008 = extractelement <64 x i32> %13842, i32 33
  %14009 = sext i32 %14008 to i64
  %14010 = getelementptr inbounds i16, i16* %7318, i64 %14009
  %14011 = load i16, i16* %14010, align 2, !tbaa !382
  %14012 = insertelement <64 x i16> %14007, i16 %14011, i32 33
  %14013 = extractelement <64 x i32> %13842, i32 34
  %14014 = sext i32 %14013 to i64
  %14015 = getelementptr inbounds i16, i16* %7318, i64 %14014
  %14016 = load i16, i16* %14015, align 2, !tbaa !382
  %14017 = insertelement <64 x i16> %14012, i16 %14016, i32 34
  %14018 = extractelement <64 x i32> %13842, i32 35
  %14019 = sext i32 %14018 to i64
  %14020 = getelementptr inbounds i16, i16* %7318, i64 %14019
  %14021 = load i16, i16* %14020, align 2, !tbaa !382
  %14022 = insertelement <64 x i16> %14017, i16 %14021, i32 35
  %14023 = extractelement <64 x i32> %13842, i32 36
  %14024 = sext i32 %14023 to i64
  %14025 = getelementptr inbounds i16, i16* %7318, i64 %14024
  %14026 = load i16, i16* %14025, align 2, !tbaa !382
  %14027 = insertelement <64 x i16> %14022, i16 %14026, i32 36
  %14028 = extractelement <64 x i32> %13842, i32 37
  %14029 = sext i32 %14028 to i64
  %14030 = getelementptr inbounds i16, i16* %7318, i64 %14029
  %14031 = load i16, i16* %14030, align 2, !tbaa !382
  %14032 = insertelement <64 x i16> %14027, i16 %14031, i32 37
  %14033 = extractelement <64 x i32> %13842, i32 38
  %14034 = sext i32 %14033 to i64
  %14035 = getelementptr inbounds i16, i16* %7318, i64 %14034
  %14036 = load i16, i16* %14035, align 2, !tbaa !382
  %14037 = insertelement <64 x i16> %14032, i16 %14036, i32 38
  %14038 = extractelement <64 x i32> %13842, i32 39
  %14039 = sext i32 %14038 to i64
  %14040 = getelementptr inbounds i16, i16* %7318, i64 %14039
  %14041 = load i16, i16* %14040, align 2, !tbaa !382
  %14042 = insertelement <64 x i16> %14037, i16 %14041, i32 39
  %14043 = extractelement <64 x i32> %13842, i32 40
  %14044 = sext i32 %14043 to i64
  %14045 = getelementptr inbounds i16, i16* %7318, i64 %14044
  %14046 = load i16, i16* %14045, align 2, !tbaa !382
  %14047 = insertelement <64 x i16> %14042, i16 %14046, i32 40
  %14048 = extractelement <64 x i32> %13842, i32 41
  %14049 = sext i32 %14048 to i64
  %14050 = getelementptr inbounds i16, i16* %7318, i64 %14049
  %14051 = load i16, i16* %14050, align 2, !tbaa !382
  %14052 = insertelement <64 x i16> %14047, i16 %14051, i32 41
  %14053 = extractelement <64 x i32> %13842, i32 42
  %14054 = sext i32 %14053 to i64
  %14055 = getelementptr inbounds i16, i16* %7318, i64 %14054
  %14056 = load i16, i16* %14055, align 2, !tbaa !382
  %14057 = insertelement <64 x i16> %14052, i16 %14056, i32 42
  %14058 = extractelement <64 x i32> %13842, i32 43
  %14059 = sext i32 %14058 to i64
  %14060 = getelementptr inbounds i16, i16* %7318, i64 %14059
  %14061 = load i16, i16* %14060, align 2, !tbaa !382
  %14062 = insertelement <64 x i16> %14057, i16 %14061, i32 43
  %14063 = extractelement <64 x i32> %13842, i32 44
  %14064 = sext i32 %14063 to i64
  %14065 = getelementptr inbounds i16, i16* %7318, i64 %14064
  %14066 = load i16, i16* %14065, align 2, !tbaa !382
  %14067 = insertelement <64 x i16> %14062, i16 %14066, i32 44
  %14068 = extractelement <64 x i32> %13842, i32 45
  %14069 = sext i32 %14068 to i64
  %14070 = getelementptr inbounds i16, i16* %7318, i64 %14069
  %14071 = load i16, i16* %14070, align 2, !tbaa !382
  %14072 = insertelement <64 x i16> %14067, i16 %14071, i32 45
  %14073 = extractelement <64 x i32> %13842, i32 46
  %14074 = sext i32 %14073 to i64
  %14075 = getelementptr inbounds i16, i16* %7318, i64 %14074
  %14076 = load i16, i16* %14075, align 2, !tbaa !382
  %14077 = insertelement <64 x i16> %14072, i16 %14076, i32 46
  %14078 = extractelement <64 x i32> %13842, i32 47
  %14079 = sext i32 %14078 to i64
  %14080 = getelementptr inbounds i16, i16* %7318, i64 %14079
  %14081 = load i16, i16* %14080, align 2, !tbaa !382
  %14082 = insertelement <64 x i16> %14077, i16 %14081, i32 47
  %14083 = extractelement <64 x i32> %13842, i32 48
  %14084 = sext i32 %14083 to i64
  %14085 = getelementptr inbounds i16, i16* %7318, i64 %14084
  %14086 = load i16, i16* %14085, align 2, !tbaa !382
  %14087 = insertelement <64 x i16> %14082, i16 %14086, i32 48
  %14088 = extractelement <64 x i32> %13842, i32 49
  %14089 = sext i32 %14088 to i64
  %14090 = getelementptr inbounds i16, i16* %7318, i64 %14089
  %14091 = load i16, i16* %14090, align 2, !tbaa !382
  %14092 = insertelement <64 x i16> %14087, i16 %14091, i32 49
  %14093 = extractelement <64 x i32> %13842, i32 50
  %14094 = sext i32 %14093 to i64
  %14095 = getelementptr inbounds i16, i16* %7318, i64 %14094
  %14096 = load i16, i16* %14095, align 2, !tbaa !382
  %14097 = insertelement <64 x i16> %14092, i16 %14096, i32 50
  %14098 = extractelement <64 x i32> %13842, i32 51
  %14099 = sext i32 %14098 to i64
  %14100 = getelementptr inbounds i16, i16* %7318, i64 %14099
  %14101 = load i16, i16* %14100, align 2, !tbaa !382
  %14102 = insertelement <64 x i16> %14097, i16 %14101, i32 51
  %14103 = extractelement <64 x i32> %13842, i32 52
  %14104 = sext i32 %14103 to i64
  %14105 = getelementptr inbounds i16, i16* %7318, i64 %14104
  %14106 = load i16, i16* %14105, align 2, !tbaa !382
  %14107 = insertelement <64 x i16> %14102, i16 %14106, i32 52
  %14108 = extractelement <64 x i32> %13842, i32 53
  %14109 = sext i32 %14108 to i64
  %14110 = getelementptr inbounds i16, i16* %7318, i64 %14109
  %14111 = load i16, i16* %14110, align 2, !tbaa !382
  %14112 = insertelement <64 x i16> %14107, i16 %14111, i32 53
  %14113 = extractelement <64 x i32> %13842, i32 54
  %14114 = sext i32 %14113 to i64
  %14115 = getelementptr inbounds i16, i16* %7318, i64 %14114
  %14116 = load i16, i16* %14115, align 2, !tbaa !382
  %14117 = insertelement <64 x i16> %14112, i16 %14116, i32 54
  %14118 = extractelement <64 x i32> %13842, i32 55
  %14119 = sext i32 %14118 to i64
  %14120 = getelementptr inbounds i16, i16* %7318, i64 %14119
  %14121 = load i16, i16* %14120, align 2, !tbaa !382
  %14122 = insertelement <64 x i16> %14117, i16 %14121, i32 55
  %14123 = extractelement <64 x i32> %13842, i32 56
  %14124 = sext i32 %14123 to i64
  %14125 = getelementptr inbounds i16, i16* %7318, i64 %14124
  %14126 = load i16, i16* %14125, align 2, !tbaa !382
  %14127 = insertelement <64 x i16> %14122, i16 %14126, i32 56
  %14128 = extractelement <64 x i32> %13842, i32 57
  %14129 = sext i32 %14128 to i64
  %14130 = getelementptr inbounds i16, i16* %7318, i64 %14129
  %14131 = load i16, i16* %14130, align 2, !tbaa !382
  %14132 = insertelement <64 x i16> %14127, i16 %14131, i32 57
  %14133 = extractelement <64 x i32> %13842, i32 58
  %14134 = sext i32 %14133 to i64
  %14135 = getelementptr inbounds i16, i16* %7318, i64 %14134
  %14136 = load i16, i16* %14135, align 2, !tbaa !382
  %14137 = insertelement <64 x i16> %14132, i16 %14136, i32 58
  %14138 = extractelement <64 x i32> %13842, i32 59
  %14139 = sext i32 %14138 to i64
  %14140 = getelementptr inbounds i16, i16* %7318, i64 %14139
  %14141 = load i16, i16* %14140, align 2, !tbaa !382
  %14142 = insertelement <64 x i16> %14137, i16 %14141, i32 59
  %14143 = extractelement <64 x i32> %13842, i32 60
  %14144 = sext i32 %14143 to i64
  %14145 = getelementptr inbounds i16, i16* %7318, i64 %14144
  %14146 = load i16, i16* %14145, align 2, !tbaa !382
  %14147 = insertelement <64 x i16> %14142, i16 %14146, i32 60
  %14148 = extractelement <64 x i32> %13842, i32 61
  %14149 = sext i32 %14148 to i64
  %14150 = getelementptr inbounds i16, i16* %7318, i64 %14149
  %14151 = load i16, i16* %14150, align 2, !tbaa !382
  %14152 = insertelement <64 x i16> %14147, i16 %14151, i32 61
  %14153 = extractelement <64 x i32> %13842, i32 62
  %14154 = sext i32 %14153 to i64
  %14155 = getelementptr inbounds i16, i16* %7318, i64 %14154
  %14156 = load i16, i16* %14155, align 2, !tbaa !382
  %14157 = insertelement <64 x i16> %14152, i16 %14156, i32 62
  %14158 = extractelement <64 x i32> %13842, i32 63
  %14159 = sext i32 %14158 to i64
  %14160 = getelementptr inbounds i16, i16* %7318, i64 %14159
  %14161 = load i16, i16* %14160, align 2, !tbaa !382
  %14162 = insertelement <64 x i16> %14157, i16 %14161, i32 63
  %14163 = add <64 x i16> %12983, %12590
  %14164 = add <64 x i16> %14163, %13376
  %14165 = add <64 x i16> %14164, %13769
  %14166 = add <64 x i16> %14165, %14162
  %14167 = shufflevector <64 x i16> %14166, <64 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14168 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14167, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14169 = shufflevector <64 x i16> %14166, <64 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14170 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14169, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14171 = shufflevector <64 x i16> %14166, <64 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %14172 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14171, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14173 = shufflevector <64 x i16> %14166, <64 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14174 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14173, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14175 = shufflevector <64 x i16> %14166, <64 x i16> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %14176 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14175, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14177 = shufflevector <64 x i16> %14166, <64 x i16> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %14178 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14177, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14179 = shufflevector <64 x i16> %14166, <64 x i16> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %14180 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14179, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14181 = shufflevector <64 x i16> %14166, <64 x i16> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %14182 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14181, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14183 = shufflevector <64 x i16> %14166, <64 x i16> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %14184 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14183, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14185 = shufflevector <64 x i16> %14166, <64 x i16> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %14186 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14185, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14187 = shufflevector <64 x i16> %14166, <64 x i16> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %14188 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14187, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14189 = shufflevector <64 x i16> %14166, <64 x i16> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %14190 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14189, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14191 = shufflevector <64 x i16> %14166, <64 x i16> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %14192 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14191, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14193 = shufflevector <64 x i16> %14166, <64 x i16> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %14194 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14193, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14195 = shufflevector <64 x i16> %14166, <64 x i16> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %14196 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14195, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14197 = shufflevector <64 x i16> %14166, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %14198 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14197, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14199 = shufflevector <4 x i32> %14168, <4 x i32> %14170, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14200 = shufflevector <4 x i32> %14172, <4 x i32> %14174, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14201 = shufflevector <4 x i32> %14176, <4 x i32> %14178, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14202 = shufflevector <4 x i32> %14180, <4 x i32> %14182, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14203 = shufflevector <4 x i32> %14184, <4 x i32> %14186, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14204 = shufflevector <4 x i32> %14188, <4 x i32> %14190, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14205 = shufflevector <4 x i32> %14192, <4 x i32> %14194, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14206 = shufflevector <4 x i32> %14196, <4 x i32> %14198, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14207 = shufflevector <8 x i32> %14199, <8 x i32> %14200, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14208 = shufflevector <8 x i32> %14201, <8 x i32> %14202, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14209 = shufflevector <8 x i32> %14203, <8 x i32> %14204, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14210 = shufflevector <8 x i32> %14205, <8 x i32> %14206, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14211 = shufflevector <16 x i32> %14207, <16 x i32> %14208, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14212 = shufflevector <16 x i32> %14209, <16 x i32> %14210, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14213 = shufflevector <32 x i32> %14211, <32 x i32> %14212, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %14214 = lshr <64 x i32> %14213, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %14215 = trunc <64 x i32> %14214 to <64 x i16>
  %14216 = shufflevector <64 x i16> %14215, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14217 = sext i32 %blur_x.s0.x.v1.base.s112 to i64
  %14218 = add nsw i64 %14217, %12195
  %14219 = getelementptr inbounds i16, i16* %blur_x101, i64 %14218
  %14220 = bitcast i16* %14219 to <8 x i16>*
  store <8 x i16> %14216, <8 x i16>* %14220, align 2, !tbaa !385
  %14221 = shufflevector <64 x i16> %14215, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14222 = getelementptr inbounds i16, i16* %14219, i64 8
  %14223 = bitcast i16* %14222 to <8 x i16>*
  store <8 x i16> %14221, <8 x i16>* %14223, align 2, !tbaa !385
  %14224 = shufflevector <64 x i16> %14215, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %14225 = getelementptr inbounds i16, i16* %14219, i64 16
  %14226 = bitcast i16* %14225 to <8 x i16>*
  store <8 x i16> %14224, <8 x i16>* %14226, align 2, !tbaa !385
  %14227 = shufflevector <64 x i16> %14215, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14228 = getelementptr inbounds i16, i16* %14219, i64 24
  %14229 = bitcast i16* %14228 to <8 x i16>*
  store <8 x i16> %14227, <8 x i16>* %14229, align 2, !tbaa !385
  %14230 = shufflevector <64 x i16> %14215, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %14231 = getelementptr inbounds i16, i16* %14219, i64 32
  %14232 = bitcast i16* %14231 to <8 x i16>*
  store <8 x i16> %14230, <8 x i16>* %14232, align 2, !tbaa !385
  %14233 = shufflevector <64 x i16> %14215, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %14234 = getelementptr inbounds i16, i16* %14219, i64 40
  %14235 = bitcast i16* %14234 to <8 x i16>*
  store <8 x i16> %14233, <8 x i16>* %14235, align 2, !tbaa !385
  %14236 = shufflevector <64 x i16> %14215, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %14237 = getelementptr inbounds i16, i16* %14219, i64 48
  %14238 = bitcast i16* %14237 to <8 x i16>*
  store <8 x i16> %14236, <8 x i16>* %14238, align 2, !tbaa !385
  %14239 = shufflevector <64 x i16> %14215, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %14240 = getelementptr inbounds i16, i16* %14219, i64 56
  %14241 = bitcast i16* %14240 to <8 x i16>*
  store <8 x i16> %14239, <8 x i16>* %14241, align 2, !tbaa !385
  %14242 = add nuw nsw i32 %blur_x.s0.x.x111, 1
  %.not129 = icmp eq i32 %14242, %t23350
  br i1 %.not129, label %"end for blur_x.s0.x.x110", label %"for blur_x.s0.x.x109"

"end for blur_x.s0.x.x110":                       ; preds = %"for blur_x.s0.x.x109", %"for blur_y.s0.y.yi.$n.rebased104"
  %14243 = icmp ugt i64 %indvars.iv184, 3
  %or.cond153 = and i1 %7319, %14243
  br i1 %or.cond153, label %"for blur_y.s0.x.x119.preheader", label %after_bb114, !prof !389

"for blur_y.s0.x.x119.preheader":                 ; preds = %"end for blur_x.s0.x.x110"
  %14244 = add nsw i32 %12187, 5
  %14245 = and i32 %14244, 7
  %14246 = zext i32 %14245 to i64
  %14247 = mul nsw i64 %7320, %14246
  %14248 = add nsw i32 %12187, 4
  %14249 = and i32 %14248, 7
  %14250 = zext i32 %14249 to i64
  %14251 = mul nsw i64 %7320, %14250
  %14252 = add nsw i32 %12187, 6
  %14253 = and i32 %14252, 7
  %14254 = zext i32 %14253 to i64
  %14255 = mul nsw i64 %7320, %14254
  %14256 = zext i32 %12188 to i64
  %14257 = mul nsw i64 %7320, %14256
  %14258 = add nsw i32 %12187, 7
  %14259 = and i32 %14258, 7
  %14260 = zext i32 %14259 to i64
  %14261 = mul nsw i64 %7320, %14260
  %14262 = sext i32 %12187 to i64
  %14263 = add nsw i64 %14262, -4
  %14264 = mul nsw i64 %14263, %7321
  %14265 = add nsw i64 %14264, %7322
  br label %"for blur_y.s0.x.x119"

after_bb114:                                      ; preds = %"for blur_y.s0.x.x119", %"end for blur_x.s0.x.x110"
  %indvars.iv.next185 = add nuw nsw i64 %indvars.iv184, 1
  %.not127 = icmp eq i64 %indvars.iv.next185, 132
  br i1 %.not127, label %"end for blur_y.s0.y.yi.$n.rebased105", label %"for blur_y.s0.y.yi.$n.rebased104"

"for blur_y.s0.x.x119":                           ; preds = %"for blur_y.s0.x.x119.preheader", %"for blur_y.s0.x.x119"
  %blur_y.s0.x.x121 = phi i32 [ %14508, %"for blur_y.s0.x.x119" ], [ 0, %"for blur_y.s0.x.x119.preheader" ]
  %a23 = shl nsw i32 %blur_y.s0.x.x121, 6
  %14266 = icmp slt i32 %a23, %b25
  %blur_y.s0.x.v0.base.s122 = select i1 %14266, i32 %a23, i32 %b25
  %t177123 = sub nsw i32 %blur_y.s0.x.v0.base.s122, %t22847
  %14267 = sext i32 %t177123 to i64
  %14268 = add nsw i64 %14247, %14267
  %14269 = getelementptr inbounds i16, i16* %blur_x101, i64 %14268
  %14270 = getelementptr inbounds i16, i16* %14269, i64 64
  %14271 = bitcast i16* %14270 to <8 x i16>*
  %14272 = load <8 x i16>, <8 x i16>* %14271, align 2, !tbaa !385
  %14273 = getelementptr inbounds i16, i16* %14269, i64 72
  %14274 = bitcast i16* %14273 to <8 x i16>*
  %14275 = load <8 x i16>, <8 x i16>* %14274, align 2, !tbaa !385
  %14276 = getelementptr inbounds i16, i16* %14269, i64 80
  %14277 = bitcast i16* %14276 to <8 x i16>*
  %14278 = load <8 x i16>, <8 x i16>* %14277, align 2, !tbaa !385
  %14279 = getelementptr inbounds i16, i16* %14269, i64 88
  %14280 = bitcast i16* %14279 to <8 x i16>*
  %14281 = load <8 x i16>, <8 x i16>* %14280, align 2, !tbaa !385
  %14282 = getelementptr inbounds i16, i16* %14269, i64 96
  %14283 = bitcast i16* %14282 to <8 x i16>*
  %14284 = load <8 x i16>, <8 x i16>* %14283, align 2, !tbaa !385
  %14285 = getelementptr inbounds i16, i16* %14269, i64 104
  %14286 = bitcast i16* %14285 to <8 x i16>*
  %14287 = load <8 x i16>, <8 x i16>* %14286, align 2, !tbaa !385
  %14288 = getelementptr inbounds i16, i16* %14269, i64 112
  %14289 = bitcast i16* %14288 to <8 x i16>*
  %14290 = load <8 x i16>, <8 x i16>* %14289, align 2, !tbaa !385
  %14291 = getelementptr inbounds i16, i16* %14269, i64 120
  %14292 = bitcast i16* %14291 to <8 x i16>*
  %14293 = load <8 x i16>, <8 x i16>* %14292, align 2, !tbaa !385
  %14294 = add nsw i64 %14251, %14267
  %14295 = getelementptr inbounds i16, i16* %blur_x101, i64 %14294
  %14296 = getelementptr inbounds i16, i16* %14295, i64 64
  %14297 = bitcast i16* %14296 to <8 x i16>*
  %14298 = load <8 x i16>, <8 x i16>* %14297, align 2, !tbaa !385
  %14299 = getelementptr inbounds i16, i16* %14295, i64 72
  %14300 = bitcast i16* %14299 to <8 x i16>*
  %14301 = load <8 x i16>, <8 x i16>* %14300, align 2, !tbaa !385
  %14302 = getelementptr inbounds i16, i16* %14295, i64 80
  %14303 = bitcast i16* %14302 to <8 x i16>*
  %14304 = load <8 x i16>, <8 x i16>* %14303, align 2, !tbaa !385
  %14305 = getelementptr inbounds i16, i16* %14295, i64 88
  %14306 = bitcast i16* %14305 to <8 x i16>*
  %14307 = load <8 x i16>, <8 x i16>* %14306, align 2, !tbaa !385
  %14308 = getelementptr inbounds i16, i16* %14295, i64 96
  %14309 = bitcast i16* %14308 to <8 x i16>*
  %14310 = load <8 x i16>, <8 x i16>* %14309, align 2, !tbaa !385
  %14311 = getelementptr inbounds i16, i16* %14295, i64 104
  %14312 = bitcast i16* %14311 to <8 x i16>*
  %14313 = load <8 x i16>, <8 x i16>* %14312, align 2, !tbaa !385
  %14314 = getelementptr inbounds i16, i16* %14295, i64 112
  %14315 = bitcast i16* %14314 to <8 x i16>*
  %14316 = load <8 x i16>, <8 x i16>* %14315, align 2, !tbaa !385
  %14317 = getelementptr inbounds i16, i16* %14295, i64 120
  %14318 = bitcast i16* %14317 to <8 x i16>*
  %14319 = load <8 x i16>, <8 x i16>* %14318, align 2, !tbaa !385
  %14320 = add nsw i64 %14255, %14267
  %14321 = getelementptr inbounds i16, i16* %blur_x101, i64 %14320
  %14322 = getelementptr inbounds i16, i16* %14321, i64 64
  %14323 = bitcast i16* %14322 to <8 x i16>*
  %14324 = load <8 x i16>, <8 x i16>* %14323, align 2, !tbaa !385
  %14325 = getelementptr inbounds i16, i16* %14321, i64 72
  %14326 = bitcast i16* %14325 to <8 x i16>*
  %14327 = load <8 x i16>, <8 x i16>* %14326, align 2, !tbaa !385
  %14328 = getelementptr inbounds i16, i16* %14321, i64 80
  %14329 = bitcast i16* %14328 to <8 x i16>*
  %14330 = load <8 x i16>, <8 x i16>* %14329, align 2, !tbaa !385
  %14331 = getelementptr inbounds i16, i16* %14321, i64 88
  %14332 = bitcast i16* %14331 to <8 x i16>*
  %14333 = load <8 x i16>, <8 x i16>* %14332, align 2, !tbaa !385
  %14334 = getelementptr inbounds i16, i16* %14321, i64 96
  %14335 = bitcast i16* %14334 to <8 x i16>*
  %14336 = load <8 x i16>, <8 x i16>* %14335, align 2, !tbaa !385
  %14337 = getelementptr inbounds i16, i16* %14321, i64 104
  %14338 = bitcast i16* %14337 to <8 x i16>*
  %14339 = load <8 x i16>, <8 x i16>* %14338, align 2, !tbaa !385
  %14340 = getelementptr inbounds i16, i16* %14321, i64 112
  %14341 = bitcast i16* %14340 to <8 x i16>*
  %14342 = load <8 x i16>, <8 x i16>* %14341, align 2, !tbaa !385
  %14343 = getelementptr inbounds i16, i16* %14321, i64 120
  %14344 = bitcast i16* %14343 to <8 x i16>*
  %14345 = load <8 x i16>, <8 x i16>* %14344, align 2, !tbaa !385
  %14346 = add nsw i64 %14257, %14267
  %14347 = getelementptr inbounds i16, i16* %blur_x101, i64 %14346
  %14348 = getelementptr inbounds i16, i16* %14347, i64 64
  %14349 = bitcast i16* %14348 to <8 x i16>*
  %14350 = load <8 x i16>, <8 x i16>* %14349, align 2, !tbaa !385
  %14351 = getelementptr inbounds i16, i16* %14347, i64 72
  %14352 = bitcast i16* %14351 to <8 x i16>*
  %14353 = load <8 x i16>, <8 x i16>* %14352, align 2, !tbaa !385
  %14354 = getelementptr inbounds i16, i16* %14347, i64 80
  %14355 = bitcast i16* %14354 to <8 x i16>*
  %14356 = load <8 x i16>, <8 x i16>* %14355, align 2, !tbaa !385
  %14357 = getelementptr inbounds i16, i16* %14347, i64 88
  %14358 = bitcast i16* %14357 to <8 x i16>*
  %14359 = load <8 x i16>, <8 x i16>* %14358, align 2, !tbaa !385
  %14360 = getelementptr inbounds i16, i16* %14347, i64 96
  %14361 = bitcast i16* %14360 to <8 x i16>*
  %14362 = load <8 x i16>, <8 x i16>* %14361, align 2, !tbaa !385
  %14363 = getelementptr inbounds i16, i16* %14347, i64 104
  %14364 = bitcast i16* %14363 to <8 x i16>*
  %14365 = load <8 x i16>, <8 x i16>* %14364, align 2, !tbaa !385
  %14366 = getelementptr inbounds i16, i16* %14347, i64 112
  %14367 = bitcast i16* %14366 to <8 x i16>*
  %14368 = load <8 x i16>, <8 x i16>* %14367, align 2, !tbaa !385
  %14369 = getelementptr inbounds i16, i16* %14347, i64 120
  %14370 = bitcast i16* %14369 to <8 x i16>*
  %14371 = load <8 x i16>, <8 x i16>* %14370, align 2, !tbaa !385
  %14372 = add nsw i64 %14261, %14267
  %14373 = getelementptr inbounds i16, i16* %blur_x101, i64 %14372
  %14374 = getelementptr inbounds i16, i16* %14373, i64 64
  %14375 = bitcast i16* %14374 to <8 x i16>*
  %14376 = load <8 x i16>, <8 x i16>* %14375, align 2, !tbaa !385
  %14377 = getelementptr inbounds i16, i16* %14373, i64 72
  %14378 = bitcast i16* %14377 to <8 x i16>*
  %14379 = load <8 x i16>, <8 x i16>* %14378, align 2, !tbaa !385
  %14380 = getelementptr inbounds i16, i16* %14373, i64 80
  %14381 = bitcast i16* %14380 to <8 x i16>*
  %14382 = load <8 x i16>, <8 x i16>* %14381, align 2, !tbaa !385
  %14383 = getelementptr inbounds i16, i16* %14373, i64 88
  %14384 = bitcast i16* %14383 to <8 x i16>*
  %14385 = load <8 x i16>, <8 x i16>* %14384, align 2, !tbaa !385
  %14386 = getelementptr inbounds i16, i16* %14373, i64 96
  %14387 = bitcast i16* %14386 to <8 x i16>*
  %14388 = load <8 x i16>, <8 x i16>* %14387, align 2, !tbaa !385
  %14389 = getelementptr inbounds i16, i16* %14373, i64 104
  %14390 = bitcast i16* %14389 to <8 x i16>*
  %14391 = load <8 x i16>, <8 x i16>* %14390, align 2, !tbaa !385
  %14392 = getelementptr inbounds i16, i16* %14373, i64 112
  %14393 = bitcast i16* %14392 to <8 x i16>*
  %14394 = load <8 x i16>, <8 x i16>* %14393, align 2, !tbaa !385
  %14395 = getelementptr inbounds i16, i16* %14373, i64 120
  %14396 = bitcast i16* %14395 to <8 x i16>*
  %14397 = load <8 x i16>, <8 x i16>* %14396, align 2, !tbaa !385
  %14398 = add <8 x i16> %14298, %14272
  %14399 = add <8 x i16> %14398, %14324
  %14400 = add <8 x i16> %14399, %14350
  %14401 = add <8 x i16> %14400, %14376
  %14402 = add <8 x i16> %14301, %14275
  %14403 = add <8 x i16> %14402, %14327
  %14404 = add <8 x i16> %14403, %14353
  %14405 = add <8 x i16> %14404, %14379
  %14406 = add <8 x i16> %14304, %14278
  %14407 = add <8 x i16> %14406, %14330
  %14408 = add <8 x i16> %14407, %14356
  %14409 = add <8 x i16> %14408, %14382
  %14410 = add <8 x i16> %14307, %14281
  %14411 = add <8 x i16> %14410, %14333
  %14412 = add <8 x i16> %14411, %14359
  %14413 = add <8 x i16> %14412, %14385
  %14414 = add <8 x i16> %14310, %14284
  %14415 = add <8 x i16> %14414, %14336
  %14416 = add <8 x i16> %14415, %14362
  %14417 = add <8 x i16> %14416, %14388
  %14418 = add <8 x i16> %14313, %14287
  %14419 = add <8 x i16> %14418, %14339
  %14420 = add <8 x i16> %14419, %14365
  %14421 = add <8 x i16> %14420, %14391
  %14422 = add <8 x i16> %14316, %14290
  %14423 = add <8 x i16> %14422, %14342
  %14424 = add <8 x i16> %14423, %14368
  %14425 = add <8 x i16> %14424, %14394
  %14426 = add <8 x i16> %14319, %14293
  %14427 = add <8 x i16> %14426, %14345
  %14428 = add <8 x i16> %14427, %14371
  %14429 = add <8 x i16> %14428, %14397
  %14430 = shufflevector <8 x i16> %14429, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %14431 = shufflevector <16 x i16> %14430, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %14432 = shufflevector <32 x i16> %14431, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %14433 = shufflevector <8 x i16> %14401, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14434 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14433, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14435 = shufflevector <8 x i16> %14401, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14436 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14435, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14437 = shufflevector <8 x i16> %14405, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14438 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14437, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14439 = shufflevector <8 x i16> %14405, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14440 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14439, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14441 = shufflevector <8 x i16> %14409, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14442 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14441, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14443 = shufflevector <8 x i16> %14409, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14444 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14443, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14445 = shufflevector <8 x i16> %14413, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14446 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14445, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14447 = shufflevector <8 x i16> %14413, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14448 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14447, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14449 = shufflevector <8 x i16> %14417, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14450 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14449, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14451 = shufflevector <8 x i16> %14417, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14452 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14451, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14453 = shufflevector <8 x i16> %14421, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14454 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14453, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14455 = shufflevector <8 x i16> %14421, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14456 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14455, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14457 = shufflevector <8 x i16> %14425, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14458 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14457, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14459 = shufflevector <8 x i16> %14425, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14460 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14459, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14461 = shufflevector <8 x i16> %14429, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14462 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14461, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14463 = shufflevector <64 x i16> %14432, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %14464 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %14463, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14465 = shufflevector <4 x i32> %14434, <4 x i32> %14436, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14466 = shufflevector <4 x i32> %14438, <4 x i32> %14440, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14467 = shufflevector <4 x i32> %14442, <4 x i32> %14444, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14468 = shufflevector <4 x i32> %14446, <4 x i32> %14448, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14469 = shufflevector <4 x i32> %14450, <4 x i32> %14452, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14470 = shufflevector <4 x i32> %14454, <4 x i32> %14456, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14471 = shufflevector <4 x i32> %14458, <4 x i32> %14460, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14472 = shufflevector <4 x i32> %14462, <4 x i32> %14464, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14473 = shufflevector <8 x i32> %14465, <8 x i32> %14466, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14474 = shufflevector <8 x i32> %14467, <8 x i32> %14468, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14475 = shufflevector <8 x i32> %14469, <8 x i32> %14470, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14476 = shufflevector <8 x i32> %14471, <8 x i32> %14472, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14477 = shufflevector <16 x i32> %14473, <16 x i32> %14474, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14478 = shufflevector <16 x i32> %14475, <16 x i32> %14476, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14479 = shufflevector <32 x i32> %14477, <32 x i32> %14478, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %14480 = lshr <64 x i32> %14479, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %14481 = trunc <64 x i32> %14480 to <64 x i16>
  %14482 = shufflevector <64 x i16> %14481, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14483 = sext i32 %blur_y.s0.x.v0.base.s122 to i64
  %14484 = add nsw i64 %14265, %14483
  %14485 = getelementptr inbounds i16, i16* %7323, i64 %14484
  %14486 = bitcast i16* %14485 to <8 x i16>*
  store <8 x i16> %14482, <8 x i16>* %14486, align 2, !tbaa !387
  %14487 = shufflevector <64 x i16> %14481, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14488 = getelementptr inbounds i16, i16* %14485, i64 8
  %14489 = bitcast i16* %14488 to <8 x i16>*
  store <8 x i16> %14487, <8 x i16>* %14489, align 2, !tbaa !387
  %14490 = shufflevector <64 x i16> %14481, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %14491 = getelementptr inbounds i16, i16* %14485, i64 16
  %14492 = bitcast i16* %14491 to <8 x i16>*
  store <8 x i16> %14490, <8 x i16>* %14492, align 2, !tbaa !387
  %14493 = shufflevector <64 x i16> %14481, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14494 = getelementptr inbounds i16, i16* %14485, i64 24
  %14495 = bitcast i16* %14494 to <8 x i16>*
  store <8 x i16> %14493, <8 x i16>* %14495, align 2, !tbaa !387
  %14496 = shufflevector <64 x i16> %14481, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %14497 = getelementptr inbounds i16, i16* %14485, i64 32
  %14498 = bitcast i16* %14497 to <8 x i16>*
  store <8 x i16> %14496, <8 x i16>* %14498, align 2, !tbaa !387
  %14499 = shufflevector <64 x i16> %14481, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %14500 = getelementptr inbounds i16, i16* %14485, i64 40
  %14501 = bitcast i16* %14500 to <8 x i16>*
  store <8 x i16> %14499, <8 x i16>* %14501, align 2, !tbaa !387
  %14502 = shufflevector <64 x i16> %14481, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %14503 = getelementptr inbounds i16, i16* %14485, i64 48
  %14504 = bitcast i16* %14503 to <8 x i16>*
  store <8 x i16> %14502, <8 x i16>* %14504, align 2, !tbaa !387
  %14505 = shufflevector <64 x i16> %14481, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %14506 = getelementptr inbounds i16, i16* %14485, i64 56
  %14507 = bitcast i16* %14506 to <8 x i16>*
  store <8 x i16> %14505, <8 x i16>* %14507, align 2, !tbaa !387
  %14508 = add nuw nsw i32 %blur_y.s0.x.x121, 1
  %.not128 = icmp eq i32 %14508, %t23048
  br i1 %.not128, label %after_bb114, label %"for blur_y.s0.x.x119"
}

; Function Attrs: nounwind
define i32 @blur5x5(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, %struct.halide_buffer_t* noalias nocapture readonly %blur_y.buffer) local_unnamed_addr #10 {
entry:
  %parallel_closure27 = alloca { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, align 8
  %parallel_closure = alloca { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !176
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !180
  %min.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 0, i32 0
  %2 = load i32, i32* %min.i, align 4, !tbaa !217
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 0, i32 1
  %3 = load i32, i32* %extent.i, align 4, !tbaa !185
  %min.i33 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 1, i32 0
  %4 = load i32, i32* %min.i33, align 4, !tbaa !217
  %extent.i35 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 1, i32 1
  %5 = load i32, i32* %extent.i35, align 4, !tbaa !185
  %stride.i37 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 1, i32 2
  %6 = load i32, i32* %stride.i37, align 4, !tbaa !181
  %host.i38 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 2
  %7 = load i8*, i8** %host.i38, align 8, !tbaa !176
  %dim.i39 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 6
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i39, align 8, !tbaa !180
  %min.i40 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 0, i32 0
  %9 = load i32, i32* %min.i40, align 4, !tbaa !217
  %extent.i42 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 0, i32 1
  %10 = load i32, i32* %extent.i42, align 4, !tbaa !185
  %min.i46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 0
  %11 = load i32, i32* %min.i46, align 4, !tbaa !217
  %extent.i48 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 1
  %12 = load i32, i32* %extent.i48, align 4, !tbaa !185
  %stride.i50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 2
  %13 = load i32, i32* %stride.i50, align 4, !tbaa !181
  %14 = sub i32 127, %4
  %15 = add i32 %14, %11
  %a25 = ashr i32 %15, 7
  %16 = icmp sgt i32 %a25, 0
  %a24 = select i1 %16, i32 %a25, i32 0
  %17 = add nsw i32 %5, 127
  %b26 = ashr i32 %17, 7
  %18 = icmp slt i32 %a24, %b26
  %blur_y.s0.y.y.prologue = select i1 %18, i32 %a24, i32 %b26
  %19 = sub i32 %11, %4
  %a30 = add i32 %19, %12
  %a31 = add nsw i32 %a30, 127
  %20 = icmp slt i32 %a31, %5
  %21 = select i1 %20, i32 %a31, i32 %5
  %b32 = add nsw i32 %21, 4
  %22 = icmp slt i32 %a30, %b32
  %a29 = select i1 %22, i32 %a30, i32 %b32
  %b31 = add nsw i32 %5, 131
  %23 = icmp slt i32 %a29, %b31
  %24 = select i1 %23, i32 %a29, i32 %b31
  %25 = add nsw i32 %24, -4
  %b28 = ashr i32 %25, 7
  %26 = icmp sgt i32 %blur_y.s0.y.y.prologue, %b28
  %blur_y.s0.y.y.epilogue = select i1 %26, i32 %blur_y.s0.y.y.prologue, i32 %b28
  %b44 = add nsw i32 %3, %2
  %t227 = add nsw i32 %10, %9
  %27 = icmp slt i32 %3, 64
  %t228 = select i1 %27, i32 %3, i32 64
  %t229 = mul nsw i32 %6, %4
  %28 = add nsw i32 %3, 63
  %t230 = ashr i32 %28, 6
  %a33 = ashr i32 %3, 6
  %29 = icmp sgt i32 %a33, 0
  %t231 = select i1 %29, i32 %a33, i32 0
  %30 = icmp sgt i32 %3, 64
  %b43 = select i1 %30, i32 %3, i32 64
  %31 = add nuw nsw i32 %b43, 63
  %32 = lshr i32 %31, 6
  %33 = sub i32 127, %2
  %34 = sub i32 %33, %t228
  %35 = add i32 %34, %9
  %a36 = ashr i32 %35, 6
  %36 = icmp sgt i32 %a36, 0
  %a35 = select i1 %36, i32 %a36, i32 0
  %37 = icmp slt i32 %a35, %32
  %b39 = select i1 %37, i32 %a35, i32 %32
  %38 = sub nsw i32 %t227, %t228
  %b42 = sub i32 %38, %2
  %a41 = add nsw i32 %b42, 60
  %39 = icmp slt i32 %a41, %b43
  %40 = select i1 %39, i32 %a41, i32 %b43
  %a40 = add nsw i32 %40, -64
  %41 = icmp slt i32 %a40, %b42
  %a39 = select i1 %41, i32 %a40, i32 %b42
  %a42 = add nsw i32 %t227, 63
  %42 = icmp slt i32 %a42, %b44
  %43 = select i1 %42, i32 %a42, i32 %b44
  %44 = sub nsw i32 %43, %t228
  %b41 = sub i32 %44, %2
  %45 = icmp slt i32 %a39, %b41
  %a38 = select i1 %45, i32 %a39, i32 %b41
  %b40 = add nsw i32 %b43, -1
  %46 = icmp slt i32 %a38, %b40
  %47 = select i1 %46, i32 %a38, i32 %b40
  %48 = ashr i32 %47, 6
  %a37 = add nsw i32 %48, 1
  %.not = icmp slt i32 %48, %b39
  %t214 = select i1 %.not, i32 %b39, i32 %a37
  %t217 = sub nsw i32 %4, %11
  %t224 = sub nsw i32 %3, %t229
  %t222 = sub nsw i32 0, %t229
  %t215 = add nsw i32 %t228, %2
  %49 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 0
  store i8* %0, i8** %49, align 8
  %50 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 1
  store i8* %7, i8** %50, align 8
  %51 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 2
  store i32 %3, i32* %51, align 8
  %52 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 3
  store i32 %5, i32* %52, align 4
  %53 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 4
  store i32 %4, i32* %53, align 8
  %54 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 5
  store i32 %blur_y.s0.y.y.epilogue, i32* %54, align 4
  %55 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 6
  store i32 %blur_y.s0.y.y.prologue, i32* %55, align 8
  %56 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 7
  store i32 %6, i32* %56, align 4
  %57 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 8
  store i32 %12, i32* %57, align 8
  %58 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 9
  store i32 %9, i32* %58, align 4
  %59 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 10
  store i32 %13, i32* %59, align 8
  %60 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 11
  store i32 %t214, i32* %60, align 4
  %61 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 12
  store i32 %t215, i32* %61, align 8
  %62 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 13
  store i32 %t217, i32* %62, align 4
  %63 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 14
  store i32 %t222, i32* %63, align 8
  %64 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 15
  store i32 %t224, i32* %64, align 4
  %65 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 16
  store i32 %b44, i32* %65, align 8
  %66 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 17
  store i32 %t227, i32* %66, align 4
  %67 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 18
  store i32 %t228, i32* %67, align 8
  %68 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 19
  store i32 %t230, i32* %68, align 4
  %69 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 20
  store i32 %t231, i32* %69, align 8
  %70 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 21
  store i32 %b43, i32* %70, align 4
  %71 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 22
  store i32 %32, i32* %71, align 8
  %72 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 23
  store i32 %b39, i32* %72, align 4
  %73 = bitcast { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure to i8*
  %closure_result = call i32 @halide_do_par_for(i8* null, i32 (i8*, i32, i8*)* nonnull @blur5x5_par_for_blur_y_s0_y_y, i32 0, i32 %b26, i8* nonnull %73) #11
  %74 = load i32, i32* %min.i, align 4, !tbaa !217
  %75 = load i32, i32* %extent.i, align 4, !tbaa !185
  %76 = load i32, i32* %min.i33, align 4, !tbaa !217
  %77 = load i32, i32* %extent.i35, align 4, !tbaa !185
  %78 = load i32, i32* %stride.i37, align 4, !tbaa !181
  %79 = load i32, i32* %min.i40, align 4, !tbaa !217
  %80 = load i32, i32* %extent.i42, align 4, !tbaa !185
  %81 = load i32, i32* %min.i46, align 4, !tbaa !217
  %82 = load i32, i32* %extent.i48, align 4, !tbaa !185
  %83 = load i32, i32* %stride.i50, align 4, !tbaa !181
  %84 = sub i32 127, %76
  %85 = add i32 %84, %81
  %a44 = ashr i32 %85, 7
  %86 = icmp sgt i32 %a44, 0
  %a43 = select i1 %86, i32 %a44, i32 0
  %87 = add nsw i32 %77, 127
  %b45 = ashr i32 %87, 7
  %88 = icmp slt i32 %a43, %b45
  %blur_y.s0.y.y.prologue14 = select i1 %88, i32 %a43, i32 %b45
  %89 = sub i32 %81, %76
  %a49 = add i32 %89, %82
  %a50 = add nsw i32 %a49, 127
  %90 = icmp slt i32 %a50, %77
  %91 = select i1 %90, i32 %a50, i32 %77
  %b51 = add nsw i32 %91, 4
  %92 = icmp slt i32 %a49, %b51
  %a48 = select i1 %92, i32 %a49, i32 %b51
  %b50 = add nsw i32 %77, 131
  %93 = icmp slt i32 %a48, %b50
  %94 = select i1 %93, i32 %a48, i32 %b50
  %95 = add nsw i32 %94, -4
  %b47 = ashr i32 %95, 7
  %96 = icmp sgt i32 %blur_y.s0.y.y.prologue14, %b47
  %blur_y.s0.y.y.epilogue15 = select i1 %96, i32 %blur_y.s0.y.y.prologue14, i32 %b47
  %b63 = add nsw i32 %75, %74
  %t22716 = add nsw i32 %80, %79
  %97 = icmp slt i32 %75, 64
  %t22817 = select i1 %97, i32 %75, i32 64
  %t22918 = mul nsw i32 %78, %76
  %98 = add nsw i32 %75, 63
  %t23019 = ashr i32 %98, 6
  %a52 = ashr i32 %75, 6
  %99 = icmp sgt i32 %a52, 0
  %t23120 = select i1 %99, i32 %a52, i32 0
  %100 = icmp sgt i32 %75, 64
  %b62 = select i1 %100, i32 %75, i32 64
  %101 = add nuw nsw i32 %b62, 63
  %102 = lshr i32 %101, 6
  %103 = sub i32 127, %74
  %104 = sub i32 %103, %t22817
  %105 = add i32 %104, %79
  %a55 = ashr i32 %105, 6
  %106 = icmp sgt i32 %a55, 0
  %a54 = select i1 %106, i32 %a55, i32 0
  %107 = icmp slt i32 %a54, %102
  %b58 = select i1 %107, i32 %a54, i32 %102
  %108 = sub nsw i32 %t22716, %t22817
  %b61 = sub i32 %108, %74
  %a60 = add nsw i32 %b61, 60
  %109 = icmp slt i32 %a60, %b62
  %110 = select i1 %109, i32 %a60, i32 %b62
  %a59 = add nsw i32 %110, -64
  %111 = icmp slt i32 %a59, %b61
  %a58 = select i1 %111, i32 %a59, i32 %b61
  %a61 = add nsw i32 %t22716, 63
  %112 = icmp slt i32 %a61, %b63
  %113 = select i1 %112, i32 %a61, i32 %b63
  %114 = sub nsw i32 %113, %t22817
  %b60 = sub i32 %114, %74
  %115 = icmp slt i32 %a58, %b60
  %a57 = select i1 %115, i32 %a58, i32 %b60
  %b59 = add nsw i32 %b62, -1
  %116 = icmp slt i32 %a57, %b59
  %117 = select i1 %116, i32 %a57, i32 %b59
  %118 = ashr i32 %117, 6
  %a56 = add nsw i32 %118, 1
  %.not29 = icmp slt i32 %118, %b58
  %t21421 = select i1 %.not29, i32 %b58, i32 %a56
  %t21723 = sub nsw i32 %76, %81
  %t22424 = sub nsw i32 %75, %t22918
  %t22225 = sub nsw i32 0, %t22918
  %t21526 = add nsw i32 %t22817, %74
  %119 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 0
  store i8* %0, i8** %119, align 8
  %120 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 1
  store i8* %7, i8** %120, align 8
  %121 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 2
  store i32 %75, i32* %121, align 8
  %122 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 3
  store i32 %77, i32* %122, align 4
  %123 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 4
  store i32 %76, i32* %123, align 8
  %124 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 5
  store i32 %blur_y.s0.y.y.epilogue15, i32* %124, align 4
  %125 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 6
  store i32 %blur_y.s0.y.y.prologue14, i32* %125, align 8
  %126 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 7
  store i32 %78, i32* %126, align 4
  %127 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 8
  store i32 %82, i32* %127, align 8
  %128 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 9
  store i32 %79, i32* %128, align 4
  %129 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 10
  store i32 %83, i32* %129, align 8
  %130 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 11
  store i32 %t21421, i32* %130, align 4
  %131 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 12
  store i32 %t21526, i32* %131, align 8
  %132 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 13
  store i32 %t21723, i32* %132, align 4
  %133 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 14
  store i32 %t22225, i32* %133, align 8
  %134 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 15
  store i32 %t22424, i32* %134, align 4
  %135 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 16
  store i32 %b63, i32* %135, align 8
  %136 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 17
  store i32 %t22716, i32* %136, align 4
  %137 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 18
  store i32 %t22817, i32* %137, align 8
  %138 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 19
  store i32 %t23019, i32* %138, align 4
  %139 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 20
  store i32 %t23120, i32* %139, align 8
  %140 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 21
  store i32 %b62, i32* %140, align 4
  %141 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 22
  store i32 %102, i32* %141, align 8
  %142 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27, i64 0, i32 23
  store i32 %b58, i32* %142, align 4
  %143 = bitcast { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure27 to i8*
  %closure_result28 = call i32 @halide_do_par_for(i8* null, i32 (i8*, i32, i8*)* nonnull @blur5x5_par_for_blur_y_s0_y_y, i32 0, i32 %b45, i8* nonnull %143) #11
  ret i32 0
}

; Function Attrs: nounwind
define i32 @blur5x5_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 8
  %3 = getelementptr i8*, i8** %0, i64 1
  %4 = bitcast i8** %3 to %struct.halide_buffer_t**
  %5 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %4, align 8
  %6 = tail call i32 @blur5x5(%struct.halide_buffer_t* %2, %struct.halide_buffer_t* %5) #15
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @blur5x5_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @blur5x5_metadata_storage
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i64 @llvm.vector.reduce.add.v2i64(<2 x i64>) #9

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nosync nounwind readnone willreturn }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nobuiltin nounwind "no-builtins" }
attributes #14 = { nobuiltin "no-builtins" }
attributes #15 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"apple-a12"}
!4 = !{i32 2, !"halide_mattrs", !"+sve2,+v8.1a,+dotprod,+fullfp16,+reserve-x18"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!12, !12, i64 0}
!15 = !{!16, !16, i64 0}
!16 = !{!"bool", !12, i64 0}
!17 = !{i8 0, i8 2}
!18 = !{!19, !19, i64 0}
!19 = !{!"long long", !12, i64 0}
!20 = !{!21, !22, i64 0}
!21 = !{!"_ZTS18mach_timebase_info", !22, i64 0, !22, i64 4}
!22 = !{!"int", !12, i64 0}
!23 = !{!21, !22, i64 4}
!24 = !{!25, !11, i64 0}
!25 = !{!"_ZTSN6Halide7Runtime8Internal4workE", !26, i64 0, !11, i64 56, !11, i64 64, !11, i64 72, !22, i64 80, !11, i64 88, !22, i64 96, !11, i64 104, !22, i64 112, !22, i64 116, !22, i64 120, !16, i64 124}
!26 = !{!"_ZTS22halide_parallel_task_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !22, i64 32, !22, i64 36, !22, i64 40, !22, i64 44, !16, i64 48}
!27 = !{!25, !22, i64 36}
!28 = !{!25, !22, i64 40}
!29 = !{!25, !16, i64 48}
!30 = !{!25, !11, i64 24}
!31 = !{!25, !22, i64 32}
!32 = !{!25, !11, i64 8}
!33 = !{!25, !22, i64 44}
!34 = !{!25, !11, i64 16}
!35 = !{!25, !11, i64 56}
!36 = !{!25, !11, i64 104}
!37 = !{!22, !22, i64 0}
!38 = !{!25, !22, i64 120}
!39 = !{!25, !16, i64 124}
!40 = !{!25, !11, i64 72}
!41 = !{!25, !22, i64 80}
!42 = !{!25, !11, i64 88}
!43 = !{!25, !22, i64 116}
!44 = !{!45, !45, i64 0}
!45 = !{!"vtable pointer", !13, i64 0}
!46 = !{!47, !11, i64 8}
!47 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE", !11, i64 8}
!48 = !{!49, !16, i64 2121}
!49 = !{!"_ZTSN6Halide7Runtime8Internal12work_queue_tE", !50, i64 0, !22, i64 8, !22, i64 12, !11, i64 16, !22, i64 24, !22, i64 28, !22, i64 32, !51, i64 40, !51, i64 48, !51, i64 56, !22, i64 64, !22, i64 68, !12, i64 72, !16, i64 2120, !16, i64 2121, !22, i64 2124}
!50 = !{!"_ZTS12halide_mutex", !12, i64 0}
!51 = !{!"_ZTS11halide_cond", !12, i64 0}
!52 = distinct !{!52, !53}
!53 = !{!"llvm.loop.mustprogress"}
!54 = !{!49, !22, i64 8}
!55 = distinct !{!55, !53}
!56 = !{!49, !22, i64 24}
!57 = !{!49, !22, i64 2124}
!58 = !{!49, !22, i64 28}
!59 = distinct !{!59, !53}
!60 = !{!25, !22, i64 112}
!61 = !{!25, !22, i64 96}
!62 = !{!49, !11, i64 16}
!63 = !{!25, !11, i64 64}
!64 = distinct !{!64, !53, !65}
!65 = !{!"llvm.loop.isvectorized", i32 1}
!66 = !{!49, !22, i64 68}
!67 = !{!49, !22, i64 32}
!68 = distinct !{!68, !53, !65}
!69 = !{!49, !16, i64 2120}
!70 = distinct !{!70, !53}
!71 = !{!72, !11, i64 0}
!72 = !{!"_ZTS26halide_semaphore_acquire_t", !11, i64 0, !22, i64 8}
!73 = !{!72, !22, i64 8}
!74 = distinct !{!74, !53}
!75 = !{!49, !22, i64 64}
!76 = distinct !{!76, !53}
!77 = distinct !{!77, !53}
!78 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !37, i64 36, i64 4, !37, i64 40, i64 4, !37, i64 44, i64 4, !37, i64 48, i64 1, !15, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 8, !10, i64 80, i64 4, !37, i64 88, i64 8, !10, i64 96, i64 4, !37, i64 104, i64 8, !10, i64 112, i64 4, !37, i64 116, i64 4, !37, i64 120, i64 4, !37, i64 124, i64 1, !15}
!79 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !37, i64 28, i64 4, !37, i64 32, i64 4, !37, i64 36, i64 4, !37, i64 40, i64 1, !15, i64 48, i64 8, !10, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 4, !37, i64 80, i64 8, !10, i64 88, i64 4, !37, i64 96, i64 8, !10, i64 104, i64 4, !37, i64 108, i64 4, !37, i64 112, i64 4, !37, i64 116, i64 1, !15}
!80 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !37, i64 32, i64 8, !10, i64 40, i64 4, !37, i64 48, i64 8, !10, i64 56, i64 4, !37, i64 60, i64 4, !37, i64 64, i64 4, !37, i64 68, i64 1, !15}
!81 = !{i64 0, i64 8, !10, i64 8, i64 4, !37, i64 12, i64 4, !37, i64 16, i64 4, !37, i64 20, i64 1, !15}
!82 = distinct !{!82, !53}
!83 = distinct !{!83, !53}
!84 = !{!85, !11, i64 144}
!85 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization10queue_dataE", !86, i64 0, !19, i64 136, !11, i64 144, !19, i64 152}
!86 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization13thread_parkerE", !87, i64 0, !88, i64 64, !16, i64 128}
!87 = !{!"_ZTS15pthread_mutex_t", !12, i64 0}
!88 = !{!"_ZTS14pthread_cond_t", !12, i64 0}
!89 = !{!90, !11, i64 16}
!90 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11hash_bucketE", !91, i64 0, !11, i64 8, !11, i64 16}
!91 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization9word_lockE", !19, i64 0}
!92 = distinct !{!92, !53}
!93 = !{!85, !19, i64 152}
!94 = !{!86, !16, i64 128}
!95 = distinct !{!95, !53}
!96 = !{!97, !11, i64 152}
!97 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20word_lock_queue_dataE", !86, i64 0, !11, i64 136, !11, i64 144, !11, i64 152}
!98 = !{!97, !11, i64 136}
!99 = !{!97, !11, i64 144}
!100 = distinct !{!100, !53}
!101 = distinct !{!101, !53}
!102 = distinct !{!102, !53}
!103 = !{!104, !11, i64 8}
!104 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE", !11, i64 8, !11, i64 16}
!105 = !{!104, !11, i64 16}
!106 = !{!107, !11, i64 8}
!107 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE", !11, i64 8, !11, i64 16}
!108 = !{!107, !11, i64 16}
!109 = !{!85, !19, i64 136}
!110 = !{!111, !16, i64 0}
!111 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization15validate_actionE", !16, i64 0, !19, i64 8}
!112 = !{!111, !19, i64 8}
!113 = !{!90, !11, i64 8}
!114 = !{!115, !11, i64 0}
!115 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11bucket_pairE", !11, i64 0, !11, i64 8}
!116 = distinct !{!116, !53}
!117 = !{!115, !11, i64 8}
!118 = !{!119, !11, i64 0}
!119 = !{!"_ZTSN6Halide7Runtime8Internal14spawned_threadE", !11, i64 0, !11, i64 8, !120, i64 16}
!120 = !{!"long", !12, i64 0}
!121 = !{!119, !11, i64 8}
!122 = !{!119, !120, i64 16}
!123 = !{!26, !22, i64 40}
!124 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !37, i64 36, i64 4, !37, i64 40, i64 4, !37, i64 44, i64 4, !37, i64 48, i64 1, !15}
!125 = distinct !{!125, !53}
!126 = distinct !{!126, !53}
!127 = distinct !{!127, !53}
!128 = !{!129, !11, i64 8}
!129 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE", !11, i64 8, !11, i64 16}
!130 = !{!129, !11, i64 16}
!131 = !{!132, !11, i64 0}
!132 = !{!"_ZTS18halide_mutex_array", !11, i64 0}
!133 = distinct !{!133, !53}
!134 = !{!135, !138, i64 34}
!135 = !{!"_ZTS20halide_trace_event_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !136, i64 32, !139, i64 36, !22, i64 40, !22, i64 44, !22, i64 48}
!136 = !{!"_ZTS13halide_type_t", !137, i64 0, !12, i64 1, !138, i64 2}
!137 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!138 = !{!"short", !12, i64 0}
!139 = !{!"_ZTS25halide_trace_event_code_t", !12, i64 0}
!140 = !{!136, !12, i64 1}
!141 = !{!135, !22, i64 48}
!142 = !{!135, !11, i64 0}
!143 = !{!135, !11, i64 24}
!144 = !{!145, !22, i64 0}
!145 = !{!"_ZTSN6Halide7Runtime8Internal23SharedExclusiveSpinLockE", !22, i64 0}
!146 = !{!147, !22, i64 4}
!147 = !{!"_ZTSN6Halide7Runtime8Internal11TraceBufferE", !145, i64 0, !22, i64 4, !22, i64 8, !12, i64 12}
!148 = !{!147, !22, i64 8}
!149 = distinct !{!149, !53}
!150 = !{!151, !22, i64 0}
!151 = !{!"_ZTS21halide_trace_packet_t", !22, i64 0, !22, i64 4, !136, i64 8, !139, i64 12, !22, i64 16, !22, i64 20, !22, i64 24}
!152 = !{!151, !22, i64 4}
!153 = !{!135, !11, i64 16}
!154 = !{!135, !11, i64 8}
!155 = !{!151, !22, i64 24}
!156 = !{!151, !138, i64 10}
!157 = distinct !{!157, !53}
!158 = !{!135, !139, i64 36}
!159 = !{!135, !12, i64 33}
!160 = distinct !{!160, !53}
!161 = !{!135, !22, i64 44}
!162 = distinct !{!162, !53, !163}
!163 = !{!"llvm.loop.peeled.count", i32 1}
!164 = !{!135, !137, i64 32}
!165 = !{!138, !138, i64 0}
!166 = !{!167, !167, i64 0}
!167 = !{!"float", !12, i64 0}
!168 = !{!169, !169, i64 0}
!169 = !{!"double", !12, i64 0}
!170 = distinct !{!170, !53, !163}
!171 = distinct !{!171, !53}
!172 = !{!135, !22, i64 40}
!173 = distinct !{!173, !53}
!174 = distinct !{!174, !53}
!175 = distinct !{!175, !53}
!176 = !{!177, !11, i64 16}
!177 = !{!"_ZTS15halide_buffer_t", !19, i64 0, !11, i64 8, !11, i64 16, !19, i64 24, !136, i64 32, !22, i64 36, !11, i64 40, !11, i64 48}
!178 = !{!177, !19, i64 0}
!179 = !{!177, !22, i64 36}
!180 = !{!177, !11, i64 40}
!181 = !{!182, !22, i64 8}
!182 = !{!"_ZTS18halide_dimension_t", !22, i64 0, !22, i64 4, !22, i64 8, !22, i64 12}
!183 = distinct !{!183, !53, !65}
!184 = !{i64 0, i64 4, !37, i64 4, i64 4, !37, i64 8, i64 4, !37, i64 12, i64 4, !37}
!185 = !{!182, !22, i64 4}
!186 = distinct !{!186, !53}
!187 = distinct !{!187, !53, !65}
!188 = !{!189, !138, i64 0}
!189 = !{!"_ZTSN6Halide7Runtime8Internal18halide_tiff_headerE", !138, i64 0, !138, i64 2, !22, i64 4, !138, i64 8, !12, i64 10, !22, i64 190, !12, i64 194, !12, i64 202}
!190 = !{!189, !138, i64 2}
!191 = !{!189, !22, i64 4}
!192 = !{!189, !138, i64 8}
!193 = !{!194, !138, i64 0}
!194 = !{!"_ZTSN6Halide7Runtime8Internal8tiff_tagE", !138, i64 0, !138, i64 2, !22, i64 4, !12, i64 8}
!195 = !{!194, !138, i64 2}
!196 = !{!194, !22, i64 4}
!197 = distinct !{!197, !53}
!198 = distinct !{!198, !53}
!199 = distinct !{!199, !53}
!200 = distinct !{!200, !53}
!201 = distinct !{!201, !53}
!202 = !{!203}
!203 = distinct !{!203, !204}
!204 = distinct !{!204, !"LVerDomain"}
!205 = !{!206}
!206 = distinct !{!206, !204}
!207 = distinct !{!207, !53, !65}
!208 = distinct !{!208, !53, !65}
!209 = distinct !{!209, !53, !65}
!210 = distinct !{!210, !53, !65}
!211 = distinct !{!211, !53, !212, !65}
!212 = !{!"llvm.loop.unroll.runtime.disable"}
!213 = distinct !{!213, !53, !65}
!214 = distinct !{!214, !53, !65}
!215 = distinct !{!215, !53, !65}
!216 = distinct !{!216, !53, !65}
!217 = !{!182, !22, i64 0}
!218 = distinct !{!218, !53}
!219 = distinct !{!219, !53, !65}
!220 = distinct !{!220, !53, !212, !65}
!221 = distinct !{!221, !53}
!222 = distinct !{!222, !53}
!223 = distinct !{!223, !53}
!224 = distinct !{!224, !53}
!225 = !{!226, !11, i64 0}
!226 = !{!"_ZTSN6Halide7Runtime8Internal10CacheEntryE", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !120, i64 32, !11, i64 40, !22, i64 48, !22, i64 52, !22, i64 56, !22, i64 60, !11, i64 64, !11, i64 72, !19, i64 80, !16, i64 88}
!227 = distinct !{!227, !53}
!228 = !{!226, !22, i64 56}
!229 = !{!226, !11, i64 24}
!230 = !{!226, !11, i64 72}
!231 = distinct !{!231, !53}
!232 = distinct !{!232, !53}
!233 = !{!234, !19, i64 0}
!234 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !19, i64 0, !19, i64 8, !19, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !19, i64 408}
!235 = !{!234, !19, i64 8}
!236 = !{!234, !19, i64 408}
!237 = distinct !{!237, !53}
!238 = !{!234, !19, i64 16}
!239 = distinct !{!239, !53, !65}
!240 = distinct !{!240, !53, !212, !65}
!241 = distinct !{!241, !53}
!242 = distinct !{!242, !53}
!243 = distinct !{!243, !53}
!244 = distinct !{!244, !53}
!245 = !{i64 0, i64 8, !18, i64 8, i64 8, !18, i64 16, i64 8, !18, i64 24, i64 128, !14, i64 152, i64 128, !14, i64 280, i64 128, !14, i64 408, i64 8, !18}
!246 = distinct !{!246, !53}
!247 = !{!182, !22, i64 12}
!248 = !{!226, !11, i64 16}
!249 = !{!226, !120, i64 32}
!250 = !{!226, !22, i64 48}
!251 = !{!226, !22, i64 52}
!252 = !{!226, !22, i64 60}
!253 = !{!226, !11, i64 64}
!254 = !{!226, !11, i64 40}
!255 = distinct !{!255, !53}
!256 = distinct !{!256, !53}
!257 = distinct !{!257, !53}
!258 = !{!226, !16, i64 88}
!259 = !{!226, !19, i64 80}
!260 = !{i64 0, i64 8, !18, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !18, i64 32, i64 1, !261, i64 33, i64 1, !14, i64 34, i64 2, !165, i64 36, i64 4, !37, i64 40, i64 8, !10, i64 48, i64 8, !10}
!261 = !{!137, !137, i64 0}
!262 = distinct !{!262, !53}
!263 = distinct !{!263, !53}
!264 = !{!226, !11, i64 8}
!265 = distinct !{!265, !53}
!266 = distinct !{!266, !53, !65}
!267 = distinct !{!267, !53, !65}
!268 = distinct !{!268, !53, !65}
!269 = distinct !{!269, !53, !65}
!270 = distinct !{!270, !53}
!271 = distinct !{!271, !53}
!272 = distinct !{!272, !53}
!273 = distinct !{!273, !53}
!274 = distinct !{!274, !53}
!275 = distinct !{!275, !53, !65}
!276 = distinct !{!276, !53, !65}
!277 = distinct !{!277, !53, !65}
!278 = distinct !{!278, !53, !65}
!279 = distinct !{!279, !53}
!280 = !{!281, !22, i64 8}
!281 = !{!"_ZTSN6Halide7Runtime8Internal16CacheBlockHeaderE", !11, i64 0, !22, i64 8}
!282 = !{!281, !11, i64 0}
!283 = distinct !{!283, !53}
!284 = distinct !{!284, !53}
!285 = distinct !{!285, !53}
!286 = distinct !{!286, !53}
!287 = distinct !{!287, !53, !65}
!288 = distinct !{!288, !53, !65}
!289 = distinct !{!289, !53, !65}
!290 = distinct !{!290, !53, !65}
!291 = distinct !{!291, !53}
!292 = distinct !{!292, !53}
!293 = distinct !{!293, !53}
!294 = distinct !{!294, !53}
!295 = distinct !{!295, !53}
!296 = distinct !{!296, !53}
!297 = distinct !{!297, !53}
!298 = distinct !{!298, !53}
!299 = distinct !{!299, !53}
!300 = !{!136, !137, i64 0}
!301 = !{!136, !138, i64 2}
!302 = !{!177, !11, i64 8}
!303 = !{!177, !19, i64 24}
!304 = distinct !{!304, !53}
!305 = !{!306, !11, i64 0}
!306 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 8}
!307 = distinct !{!307, !53}
!308 = !{!306, !11, i64 8}
!309 = !{!310, !11, i64 120}
!310 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!311 = !{!312, !11, i64 48}
!312 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!313 = !{!312, !11, i64 40}
!314 = !{!312, !11, i64 56}
!315 = !{!312, !11, i64 0}
!316 = !{!312, !11, i64 16}
!317 = !{!312, !11, i64 8}
!318 = !{!312, !11, i64 32}
!319 = !{!312, !11, i64 24}
!320 = !{!312, !11, i64 64}
!321 = !{!312, !11, i64 72}
!322 = distinct !{!322, !53, !65}
!323 = distinct !{!323, !53, !65}
!324 = distinct !{!324, !53, !65}
!325 = distinct !{!325, !53, !65}
!326 = !{!312, !11, i64 112}
!327 = !{!312, !11, i64 120}
!328 = !{!312, !11, i64 80}
!329 = !{!312, !11, i64 88}
!330 = !{!312, !11, i64 96}
!331 = !{!312, !11, i64 104}
!332 = !{i32 22, i32 33}
!333 = !{!334, !11, i64 40}
!334 = !{!"_ZTS21halide_profiler_state", !50, i64 0, !22, i64 8, !22, i64 12, !22, i64 16, !22, i64 20, !11, i64 24, !11, i64 32, !11, i64 40}
!335 = !{!334, !22, i64 16}
!336 = !{!337, !19, i64 0}
!337 = !{!"_ZTS30halide_profiler_pipeline_stats", !19, i64 0, !19, i64 8, !19, i64 16, !19, i64 24, !19, i64 32, !19, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !22, i64 72, !22, i64 76, !22, i64 80, !22, i64 84, !22, i64 88}
!338 = !{!337, !22, i64 80}
!339 = !{!337, !19, i64 32}
!340 = !{!337, !19, i64 40}
!341 = !{!337, !11, i64 48}
!342 = !{!337, !22, i64 84}
!343 = !{!337, !22, i64 88}
!344 = !{!337, !19, i64 16}
!345 = !{!337, !19, i64 24}
!346 = !{!337, !22, i64 72}
!347 = !{!337, !11, i64 56}
!348 = distinct !{!348, !53}
!349 = !{!350, !19, i64 32}
!350 = !{!"_ZTS26halide_profiler_func_stats", !19, i64 0, !19, i64 8, !19, i64 16, !19, i64 24, !19, i64 32, !19, i64 40, !19, i64 48, !11, i64 56, !22, i64 64}
!351 = !{!350, !19, i64 0}
!352 = !{!350, !11, i64 56}
!353 = distinct !{!353, !53}
!354 = distinct !{!354, !53}
!355 = distinct !{!355, !53}
!356 = !{!350, !19, i64 40}
!357 = !{!350, !19, i64 48}
!358 = distinct !{!358, !53}
!359 = !{!350, !19, i64 16}
!360 = distinct !{!360, !53}
!361 = !{!350, !22, i64 64}
!362 = distinct !{!362, !53}
!363 = !{!350, !19, i64 24}
!364 = distinct !{!364, !53}
!365 = distinct !{!365, !53}
!366 = !{!334, !11, i64 24}
!367 = !{!337, !11, i64 64}
!368 = distinct !{!368, !53}
!369 = !{!334, !22, i64 12}
!370 = distinct !{!370, !53}
!371 = !{!337, !22, i64 76}
!372 = distinct !{!372, !53}
!373 = distinct !{!373, !53}
!374 = !{!334, !11, i64 32}
!375 = !{!334, !22, i64 20}
!376 = !{!334, !22, i64 8}
!377 = distinct !{!377, !53}
!378 = distinct !{!378, !53}
!379 = distinct !{!379, !53}
!380 = distinct !{!380, !53}
!381 = !{!"branch_weights", i32 1073741824, i32 0}
!382 = !{!383, !383, i64 0}
!383 = !{!"input", !384, i64 0}
!384 = !{!"Halide buffer"}
!385 = !{!386, !386, i64 0}
!386 = !{!"blur_x", !384, i64 0}
!387 = !{!388, !388, i64 0}
!388 = !{!"blur_y", !384, i64 0}
!389 = !{!"branch_weights", i32 1073741824, i32 1073741824}
